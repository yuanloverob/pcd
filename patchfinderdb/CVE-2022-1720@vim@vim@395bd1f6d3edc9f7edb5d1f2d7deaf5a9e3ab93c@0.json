{
  "cve_id": "CVE-2022-1720",
  "cve_desc": "Buffer Over-read in function grab_file_name in GitHub repository vim/vim prior to 8.2.4956. This vulnerability is capable of crashing the software, memory modification, and possible remote execution.",
  "repo": "vim/vim",
  "patch_hash": "395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
  "patch_info": {
    "commit_hash": "395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
    "files": [
      "src/normal.c",
      "src/testdir/test_gf.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4956: reading past end of line with \"gf\" in Visual block mode\n\nProblem:    Reading past end of line with \"gf\" in Visual block mode.\nSolution:   Do not include the NUL in the length.",
    "before_after_code_files": [
      "src/normal.c||src/normal.c",
      "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/normal.c||src/normal.c": [
      "File: src/normal.c -> src/normal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3671:  }",
      "3672:  if (**pp == NUL)",
      "3677:     }",
      "3678:     reset_VIsual_and_resel();",
      "3679:     return OK;",
      "",
      "[Removed Lines]",
      "3674:  if (has_mbyte && *lenp > 0)",
      "",
      "[Added Lines]",
      "3674:  if (*lenp > 0)",
      "3675:  {",
      "3676:      if (has_mbyte)",
      "3680:      else if ((*pp)[*lenp - 1] == NUL)",
      "3683:  }",
      "",
      "---------------"
    ],
    "src/testdir/test_gf.vim||src/testdir/test_gf.vim": [
      "File: src/testdir/test_gf.vim -> src/testdir/test_gf.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:   call assert_equal('Xtest_gf_visual', bufname('%'))",
      "139:   call assert_equal(3, getcurpos()[1])",
      "141:   \" line number in visual area is used for file name",
      "142:   if has('unix')",
      "143:     bwipe!",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141:   \" do not include the NUL at the end",
      "142:   call writefile(['x'], 'X')",
      "143:   let save_enc = &enc",
      "144:   for enc in ['latin1', 'utf-8']",
      "145:     exe \"set enc=\" .. enc",
      "146:     new",
      "147:     call setline(1, 'X')",
      "148:     set nomodified",
      "149:     exe \"normal \\<C-V>$gf\"",
      "150:     call assert_equal('X', bufname())",
      "151:     bwipe!",
      "152:   endfor",
      "153:   let &enc = save_enc",
      "154:   call delete('X')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4955,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4956,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "615ddd5342b50a6878a907062aa471740bd9a847",
      "candidate_info": {
        "commit_hash": "615ddd5342b50a6878a907062aa471740bd9a847",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/615ddd5342b50a6878a907062aa471740bd9a847",
        "files": [
          "src/findfile.c",
          "src/normal.c",
          "src/testdir/test_visual.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3611: crash when using CTRL-W f without finding a file name\n\nProblem:    Crash when using CTRL-W f without finding a file name.\nSolution:   Bail out when the file name length is zero.",
        "before_after_code_files": [
          "src/findfile.c||src/findfile.c",
          "src/normal.c||src/normal.c",
          "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/findfile.c||src/findfile.c": [
          "File: src/findfile.c -> src/findfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1735:     proc->pr_WindowPtr = (APTR)-1L;",
          "1736: # endif",
          "1738:     if (first == TRUE)",
          "1739:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1738:     if (len == 0)",
          "1739:  return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2118:     int  c;",
          "2119: # if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)",
          "2120:     char_u *tofree = NULL;",
          "2122:     if ((options & FNAME_INCL) && *curbuf->b_p_inex != NUL)",
          "2123:     {",
          "2124:  tofree = eval_includeexpr(ptr, len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2124: # endif",
          "2126:     if (len == 0)",
          "2127:  return NULL;",
          "2129: # if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3883:  }",
          "3887:     }",
          "3888:     reset_VIsual_and_resel();",
          "",
          "[Removed Lines]",
          "3884:  if (has_mbyte)",
          "",
          "[Added Lines]",
          "3884:  if (**pp == NUL)",
          "3886:  if (has_mbyte && *lenp > 0)",
          "",
          "---------------"
        ],
        "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
          "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265:   call delete('XTest_block')",
          "1266: endfunc",
          "1268: func Test_visual_reselect_with_count()",
          "1269:   \" this was causing an illegal memory access",
          "1270:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268: func Test_visual_block_ctrl_w_f()",
          "1269:   \" Emtpy block selected in new buffer should not result in an error.",
          "1270:   au! BufNew foo sil norm \u0016\u0017f",
          "1271:   edit foo",
          "1273:   au! BufNew",
          "1274: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3610,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3611,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "572a4433c8276d8e8f228a09f43b11afe0c85f6f",
      "candidate_info": {
        "commit_hash": "572a4433c8276d8e8f228a09f43b11afe0c85f6f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/572a4433c8276d8e8f228a09f43b11afe0c85f6f",
        "files": [
          "src/testdir/test_gf.vim",
          "src/testdir/test_global.vim",
          "src/testdir/test_gui.vim",
          "src/testdir/test_help.vim",
          "src/testdir/test_highlight.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0619: too many delete() calls in tests\n\nProblem:    Too many delete() calls in tests.\nSolution:   Use deferred delete where possible.",
        "before_after_code_files": [
          "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
          "src/testdir/test_global.vim||src/testdir/test_global.vim",
          "src/testdir/test_gui.vim||src/testdir/test_gui.vim",
          "src/testdir/test_help.vim||src/testdir/test_help.vim",
          "src/testdir/test_highlight.vim||src/testdir/test_highlight.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_gf.vim||src/testdir/test_gf.vim": [
          "File: src/testdir/test_gf.vim -> src/testdir/test_gf.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: func Test_gf()",
          "89:   set isfname=@,48-57,/,.,-,_,+,,,$,:,~,{,}",
          "92:   if has(\"unix\")",
          "94:   else",
          "96:   endif",
          "97:   new Xtestgf",
          "98:   if has(\"unix\")",
          "",
          "[Removed Lines]",
          "91:   call writefile([\"Test for gf command\"], \"Xtest1\")",
          "93:     call writefile([\"    ${CDIR}/Xtest1\"], \"Xtestgf\")",
          "95:     call writefile([\"    $TDIR/Xtest1\"], \"Xtestgf\")",
          "",
          "[Added Lines]",
          "91:   call writefile([\"Test for gf command\"], \"Xtest1\", 'D')",
          "93:     call writefile([\"    ${CDIR}/Xtest1\"], \"Xtestgf\", 'D')",
          "95:     call writefile([\"    $TDIR/Xtest1\"], \"Xtestgf\", 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   normal gf",
          "111:   call assert_equal('Xtest1', fnamemodify(bufname(''), \":t\"))",
          "116: endfunc",
          "118: func Test_gf_visual()",
          "120:   new",
          "121:   call setline(1, 'XXXtest_gf_visualXXX')",
          "122:   set hidden",
          "",
          "[Removed Lines]",
          "112:   close!",
          "114:   call delete('Xtest1')",
          "115:   call delete('Xtestgf')",
          "119:   call writefile(['one', 'two', 'three', 'four'], \"Xtest_gf_visual\")",
          "",
          "[Added Lines]",
          "113:   close!",
          "117:   call writefile(['one', 'two', 'three', 'four'], \"Xtest_gf_visual\", 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:   call assert_equal(3, getcurpos()[1])",
          "141:   \" do not include the NUL at the end",
          "143:   let save_enc = &enc",
          "144:   for enc in ['latin1', 'utf-8']",
          "145:     exe \"set enc=\" .. enc",
          "146:     new",
          "148:     set nomodified",
          "149:     exe \"normal \\<C-V>$gf\"",
          "151:     bwipe!",
          "152:   endfor",
          "153:   let &enc = save_enc",
          "156:   \" line number in visual area is used for file name",
          "157:   if has('unix')",
          "158:     bwipe!",
          "160:     new",
          "161:     call setline(1, 'XXXtest_gf_visual:3XXX')",
          "162:     norm! 0ttvtXgF",
          "163:     call assert_equal('Xtest_gf_visual:3', bufname('%'))",
          "165:   endif",
          "167:   bwipe!",
          "169:   set hidden&",
          "170: endfunc",
          "",
          "[Removed Lines]",
          "142:   call writefile(['x'], 'X')",
          "147:     call setline(1, 'X')",
          "150:     call assert_equal('X', bufname())",
          "154:   call delete('X')",
          "159:     call writefile([], \"Xtest_gf_visual:3\")",
          "164:   call delete('Xtest_gf_visual:3')",
          "168:   call delete('Xtest_gf_visual')",
          "",
          "[Added Lines]",
          "140:   call writefile(['x'], 'Xvisual', 'D')",
          "145:     call setline(1, 'Xvisual')",
          "148:     call assert_equal('Xvisual', bufname())",
          "156:     call writefile([], \"Xtest_gf_visual:3\", 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "254: func Test_gf_subdirs_wildcard()",
          "255:   let cwd = getcwd()",
          "256:   let dir = 'Xtestgf_dir'",
          "258:   call chdir(dir)",
          "259:   for i in range(300)",
          "260:     call mkdir(i)",
          "",
          "[Removed Lines]",
          "257:   call mkdir(dir)",
          "",
          "[Added Lines]",
          "252:   call mkdir(dir, 'R')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269:   call assert_equal('99', fnamemodify(bufname(''), \":t\"))",
          "271:   call chdir(cwd)",
          "273:   set path&",
          "274: endfunc",
          "",
          "[Removed Lines]",
          "272:   call delete(dir, 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_global.vim||src/testdir/test_global.vim": [
          "File: src/testdir/test_global.vim -> src/testdir/test_global.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     cnoremap ; <Cmd>sleep 10<CR>",
          "117:     call setline(1, repeat(['foo'], 5))",
          "118:   END",
          "120:   let buf = RunVimInTerminal('-S Xtest_interrupt_global', {'rows': 6})",
          "122:   call term_sendkeys(buf, \":g/foo/norm :\\<C-V>;\\<CR>\")",
          "",
          "[Removed Lines]",
          "119:   call writefile(lines, 'Xtest_interrupt_global')",
          "",
          "[Added Lines]",
          "119:   call writefile(lines, 'Xtest_interrupt_global', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   call WaitForAssert({-> assert_match('Interrupted', term_getline(buf, 5))}, 1000)",
          "135:   call StopVimInTerminal(buf)",
          "137: endfunc",
          "139: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "136:   call delete('Xtest_interrupt_global')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_gui.vim||src/testdir/test_gui.vim": [
          "File: src/testdir/test_gui.vim -> src/testdir/test_gui.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: func Test_gui_read_stdin()",
          "158:   CheckUnix",
          "161:   let script =<< trim END",
          "162:       call writefile(getline(1, '$'), 'XstdinOK')",
          "163:       qa!",
          "164:   END",
          "167:   \" Cannot use --not-a-term here, the \"reading from stdin\" message would not be",
          "168:   \" displayed.",
          "",
          "[Removed Lines]",
          "160:   call writefile(['some', 'lines'], 'Xstdin')",
          "165:   call writefile(script, 'Xscript')",
          "",
          "[Added Lines]",
          "160:   call writefile(['some', 'lines'], 'Xstdin', 'D')",
          "165:   call writefile(script, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   call system('cat Xstdin | ' .. vimcmd .. ' -f -g -S Xscript -')",
          "177:   call assert_equal(['some', 'lines'], readfile('XstdinOK'))",
          "180:   call delete('XstdinOK')",
          "182: endfunc",
          "184: func Test_set_background()",
          "",
          "[Removed Lines]",
          "179:   call delete('Xstdin')",
          "181:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "853: \" Test \"vim -g\" and also the GUIEnter autocommand.",
          "854: func Test_gui_dash_g()",
          "855:   let cmd = GetVimCommand('Xscriptgui')",
          "857:   let lines =<< trim END",
          "858:  au GUIEnter * call writefile([\"insertmode: \" . &insertmode], \"Xtestgui\")",
          "859:  au GUIEnter * qall",
          "860:   END",
          "862:   call system(cmd . ' -g')",
          "863:   call WaitForAssert({-> assert_equal(['insertmode: 0'], readfile('Xtestgui'))})",
          "867: endfunc",
          "869: \" Test \"vim -7\" and also the GUIEnter autocommand.",
          "870: func Test_gui_dash_y()",
          "871:   let cmd = GetVimCommand('Xscriptgui')",
          "873:   let lines =<< trim END",
          "874:  au GUIEnter * call writefile([\"insertmode: \" . &insertmode], \"Xtestgui\")",
          "875:  au GUIEnter * qall",
          "876:   END",
          "878:   call system(cmd . ' -y')",
          "879:   call WaitForAssert({-> assert_equal(['insertmode: 1'], readfile('Xtestgui'))})",
          "883: endfunc",
          "885: \" Test for \"!\" option in 'guioptions'. Use a terminal for running external",
          "",
          "[Removed Lines]",
          "856:   call writefile([\"\"], \"Xtestgui\")",
          "861:   call writefile(lines, 'Xscriptgui')",
          "865:   call delete('Xscriptgui')",
          "866:   call delete('Xtestgui')",
          "872:   call writefile([\"\"], \"Xtestgui\")",
          "877:   call writefile(lines, 'Xscriptgui')",
          "881:   call delete('Xscriptgui')",
          "882:   call delete('Xtestgui')",
          "",
          "[Added Lines]",
          "854:   call writefile([\"\"], \"Xtestgui\", 'D')",
          "859:   call writefile(lines, 'Xscriptgui', 'D')",
          "867:   call writefile([\"\"], \"Xtestgui\", 'D')",
          "872:   call writefile(lines, 'Xscriptgui', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1412:   %argdelete",
          "1413:   \" pressing shift when dropping files should change directory",
          "1414:   let save_cwd = getcwd()",
          "1416:   call writefile([], 'Xdropdir1/Xfile1')",
          "1417:   call writefile([], 'Xdropdir1/Xfile2')",
          "1418:   let d = #{files: ['Xdropdir1/Xfile1', 'Xdropdir1/Xfile2'], row: 1, col: 1,",
          "",
          "[Removed Lines]",
          "1415:   call mkdir('Xdropdir1')",
          "",
          "[Added Lines]",
          "1407:   call mkdir('Xdropdir1', 'R')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1441:   call assert_equal('', @%)",
          "1442:   %bw!",
          "1443:   %argdelete",
          "1446:   \" drop files in the command line. The GUI drop files adds the file names to",
          "1447:   \" the low level input buffer. So need to use a cmdline map and feedkeys()",
          "",
          "[Removed Lines]",
          "1444:   call delete('Xdropdir1', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_help.vim||src/testdir/test_help.vim": [
          "File: src/testdir/test_help.vim -> src/testdir/test_help.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: endfunc",
          "79: func Test_help_local_additions()",
          "81:   call writefile(['*mydoc.txt* my awesome doc'], 'Xruntime/doc/mydoc.txt')",
          "82:   call writefile(['*mydoc-ext.txt* my extended awesome doc'], 'Xruntime/doc/mydoc-ext.txt')",
          "83:   let rtp_save = &rtp",
          "",
          "[Removed Lines]",
          "80:   call mkdir('Xruntime/doc', 'p')",
          "",
          "[Added Lines]",
          "80:   call mkdir('Xruntime/doc', 'pR')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   call delete('Xruntime/doc/mydoc-ext.txt')",
          "92:   close",
          "95:   call writefile([\"local-additions\\thelp.jax\\t/*local-additions*\"], 'Xruntime-ja/doc/tags-ja')",
          "96:   call writefile(['*help.txt* This is jax file', '',",
          "97:   \\ 'LOCAL ADDITIONS: *local-additions*', ''], 'Xruntime-ja/doc/help.jax')",
          "",
          "[Removed Lines]",
          "94:   call mkdir('Xruntime-ja/doc', 'p')",
          "",
          "[Added Lines]",
          "94:   call mkdir('Xruntime-ja/doc', 'pR')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   \\ ], lines)",
          "117:   close",
          "121:   let &rtp = rtp_save",
          "122: endfunc",
          "",
          "[Removed Lines]",
          "119:   call delete('Xruntime', 'rf')",
          "120:   call delete('Xruntime-ja', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129: \" Test for the :helptags command",
          "130: \" NOTE: if you run tests as root this will fail.  Don't run tests as root!",
          "131: func Test_helptag_cmd()",
          "134:   \" No help file to process in the directory",
          "135:   call assert_fails('helptags Xtagdir', 'E151:')",
          "",
          "[Removed Lines]",
          "132:   call mkdir('Xtagdir/a/doc', 'p')",
          "",
          "[Added Lines]",
          "130:   call mkdir('Xtagdir/a/doc', 'pR')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:   \" Duplicate tags in the help file",
          "152:   call writefile(['*tag1*', '*tag1*', '*tag2*'], 'Xtagdir/a/doc/sample.txt')",
          "153:   call assert_fails('helptags Xtagdir', 'E154:')",
          "156: endfunc",
          "158: func Test_helptag_cmd_readonly()",
          "",
          "[Removed Lines]",
          "155:   call delete('Xtagdir', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160:   CheckNotRoot",
          "162:   \" Read-only tags file",
          "164:   call writefile([''], 'Xrodir/doc/tags')",
          "165:   call writefile([], 'Xrodir/doc/sample.txt')",
          "166:   call setfperm('Xrodir/doc/tags', 'r-xr--r--')",
          "",
          "[Removed Lines]",
          "163:   call mkdir('Xrodir/doc', 'p')",
          "",
          "[Added Lines]",
          "159:   call mkdir('Xrodir/doc', 'pR')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "178:   call writefile([], 'Xrodir/b/doc/sample.txt')",
          "179:   call setfperm('Xrodir/b/doc/sample.txt', '-w-------')",
          "180:   call assert_fails('helptags Xrodir', 'E153:', getfperm('Xrodir/b/doc/sample.txt'))",
          "182: endfunc",
          "184: \" Test for setting the 'helpheight' option in the help window",
          "",
          "[Removed Lines]",
          "181:   call delete('Xrodir', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_highlight.vim||src/testdir/test_highlight.vim": [
          "File: src/testdir/test_highlight.vim -> src/testdir/test_highlight.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "540:   call writefile([",
          "541:  \\ 'set cul rnu',",
          "542:  \\ 'call setline(1, [\"\",\"1\",\"2\",\"3\",\"\"])',",
          "544:   let buf = RunVimInTerminal('-S Xtest_cursorline_yank', {'rows': 8})",
          "545:   call TermWait(buf)",
          "546:   call term_sendkeys(buf, \"Gy3k\")",
          "",
          "[Removed Lines]",
          "543:  \\ ], 'Xtest_cursorline_yank')",
          "",
          "[Added Lines]",
          "543:  \\ ], 'Xtest_cursorline_yank', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:   \" clean up",
          "553:   call StopVimInTerminal(buf)",
          "555: endfunc",
          "557: \" test for issue #4862",
          "",
          "[Removed Lines]",
          "554:   call delete('Xtest_cursorline_yank')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "580:   call writefile([",
          "581:  \\ 'set cul',",
          "582:  \\ 'call setline(1, repeat([\"abc\"], 50))',",
          "584:   let buf = RunVimInTerminal('-S Xtest_cursorline_with_visualmode', {'rows': 12})",
          "585:   call TermWait(buf)",
          "586:   call term_sendkeys(buf, \"V\\<C-f>kkkjk\")",
          "",
          "[Removed Lines]",
          "583:  \\ ], 'Xtest_cursorline_with_visualmode')",
          "",
          "[Added Lines]",
          "582:  \\ ], 'Xtest_cursorline_with_visualmode', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590:   \" clean up",
          "591:   call StopVimInTerminal(buf)",
          "593: endfunc",
          "595: func Test_cursorcolumn_insert_on_tab()",
          "",
          "[Removed Lines]",
          "592:   call delete('Xtest_cursorline_with_visualmode')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "600:     set cursorcolumn",
          "601:     call cursor(2, 2)",
          "602:   END",
          "605:   let buf = RunVimInTerminal('-S Xcuc_insert_on_tab', #{rows: 8})",
          "606:   call TermWait(buf)",
          "",
          "[Removed Lines]",
          "603:   call writefile(lines, 'Xcuc_insert_on_tab')",
          "",
          "[Added Lines]",
          "601:   call writefile(lines, 'Xcuc_insert_on_tab', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "619:   call VerifyScreenDump(buf, 'Test_cursorcolumn_insert_on_tab_2', {})",
          "621:   call StopVimInTerminal(buf)",
          "623: endfunc",
          "625: func Test_cursorcolumn_callback()",
          "",
          "[Removed Lines]",
          "622:   call delete('Xcuc_insert_on_tab')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "638:       call timer_start(300, 'Func')",
          "639:   END",
          "642:   let buf = RunVimInTerminal('-S Xcuc_timer', #{rows: 8})",
          "643:   call TermWait(buf, 310)",
          "644:   call VerifyScreenDump(buf, 'Test_cursorcolumn_callback_1', {})",
          "646:   call StopVimInTerminal(buf)",
          "648: endfunc",
          "650: func Test_wincolor()",
          "",
          "[Removed Lines]",
          "640:   call writefile(lines, 'Xcuc_timer')",
          "647:   call delete('Xcuc_timer')",
          "",
          "[Added Lines]",
          "637:   call writefile(lines, 'Xcuc_timer', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "663:  call prop_add(6, 12, {\"type\": \"foo\", \"end_col\": 15})",
          "664:  /here",
          "665:   END",
          "667:   let buf = RunVimInTerminal('-S Xtest_wincolor', {'rows': 8})",
          "668:   call TermWait(buf)",
          "669:   call term_sendkeys(buf, \"2G5lvj\")",
          "",
          "[Removed Lines]",
          "666:   call writefile(lines, 'Xtest_wincolor')",
          "",
          "[Added Lines]",
          "662:   call writefile(lines, 'Xtest_wincolor', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "674:   \" clean up",
          "675:   call term_sendkeys(buf, \"\\<Esc>\")",
          "676:   call StopVimInTerminal(buf)",
          "678: endfunc",
          "680: func Test_wincolor_listchars()",
          "",
          "[Removed Lines]",
          "677:   call delete('Xtest_wincolor')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "689:  call matchadd('Conceal', 'text')",
          "690:  normal 2G5zl",
          "691:   END",
          "693:   let buf = RunVimInTerminal('-S Xtest_wincolorlcs', {'rows': 8})",
          "695:   call VerifyScreenDump(buf, 'Test_wincolor_lcs', {})",
          "",
          "[Removed Lines]",
          "692:   call writefile(lines, 'Xtest_wincolorlcs')",
          "",
          "[Added Lines]",
          "687:   call writefile(lines, 'Xtest_wincolorlcs', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:   \" clean up",
          "698:   call term_sendkeys(buf, \"\\<Esc>\")",
          "699:   call StopVimInTerminal(buf)",
          "701: endfunc",
          "703: func Test_colorcolumn()",
          "",
          "[Removed Lines]",
          "700:   call delete('Xtest_wincolorlcs')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "714:  wincmd w",
          "715:  buf X",
          "716:   END",
          "718:   let buf = RunVimInTerminal('-S Xtest_colorcolumn', {'rows': 10})",
          "719:   call term_sendkeys(buf, \":\\<CR>\")",
          "720:   call VerifyScreenDump(buf, 'Test_colorcolumn_1', {})",
          "722:   \" clean up",
          "723:   call StopVimInTerminal(buf)",
          "725: endfunc",
          "727: func Test_colorcolumn_bri()",
          "",
          "[Removed Lines]",
          "717:   call writefile(lines, 'Xtest_colorcolumn')",
          "724:   call delete('Xtest_colorcolumn')",
          "",
          "[Added Lines]",
          "711:   call writefile(lines, 'Xtest_colorcolumn', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "731:   let lines =<< trim END",
          "732:  call setline(1, 'The quick brown fox jumped over the lazy dogs')",
          "733:   END",
          "735:   let buf = RunVimInTerminal('-S Xtest_colorcolumn_bri', {'rows': 10,'columns': 40})",
          "736:   call term_sendkeys(buf, \":set co=40 linebreak bri briopt=shift:2 cc=40,41,43\\<CR>\")",
          "737:   call VerifyScreenDump(buf, 'Test_colorcolumn_2', {})",
          "739:   \" clean up",
          "740:   call StopVimInTerminal(buf)",
          "742: endfunc",
          "744: func Test_colorcolumn_sbr()",
          "",
          "[Removed Lines]",
          "734:   call writefile(lines, 'Xtest_colorcolumn_bri')",
          "741:   call delete('Xtest_colorcolumn_bri')",
          "",
          "[Added Lines]",
          "727:   call writefile(lines, 'Xtest_colorcolumn_bri', 'D')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "748:   let lines =<< trim END",
          "749:  call setline(1, 'The quick brown fox jumped over the lazy dogs')",
          "750:   END",
          "752:   let buf = RunVimInTerminal('-S Xtest_colorcolumn_srb', {'rows': 10,'columns': 40})",
          "753:   call term_sendkeys(buf, \":set co=40 showbreak=+++>\\\\  cc=40,41,43\\<CR>\")",
          "754:   call VerifyScreenDump(buf, 'Test_colorcolumn_3', {})",
          "756:   \" clean up",
          "757:   call StopVimInTerminal(buf)",
          "759: endfunc",
          "761: \" This test must come before the Test_cursorline test, as it appears this",
          "",
          "[Removed Lines]",
          "751:   call writefile(lines, 'Xtest_colorcolumn_srb')",
          "758:   call delete('Xtest_colorcolumn_srb')",
          "",
          "[Added Lines]",
          "743:   call writefile(lines, 'Xtest_colorcolumn_srb', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     618,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     619,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95fca12b0e8a351ce4416417323db24c63eb940a",
      "candidate_info": {
        "commit_hash": "95fca12b0e8a351ce4416417323db24c63eb940a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/95fca12b0e8a351ce4416417323db24c63eb940a",
        "files": [
          "src/findfile.c",
          "src/testdir/test_gf.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0126: expanding file names fails in dir with more than 255 entries\n\nProblem:    Expanding file names fails in directory with more than 255\n            entries.\nSolution:   Use an int instead of char_u to count. (John Drouhard,\n            closes #10818)",
        "before_after_code_files": [
          "src/findfile.c||src/findfile.c",
          "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/findfile.c||src/findfile.c": [
          "File: src/findfile.c -> src/findfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     char_u  **ffs_filearray;",
          "77:     int   ffs_filearray_size;",
          "",
          "[Removed Lines]",
          "78:     char_u  ffs_filearray_cur;   // needed for partly handled dirs",
          "",
          "[Added Lines]",
          "78:     int   ffs_filearray_cur;   // needed for partly handled dirs",
          "",
          "---------------"
        ],
        "src/testdir/test_gf.vim||src/testdir/test_gf.vim": [
          "File: src/testdir/test_gf.vim -> src/testdir/test_gf.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   call assert_equal('Xtest_gf_visual', bufname('%'))",
          "139:   call assert_equal(3, getcurpos()[1])",
          "142:   call writefile(['x'], 'X')",
          "143:   let save_enc = &enc",
          "144:   for enc in ['latin1', 'utf-8']",
          "",
          "[Removed Lines]",
          "141:   \" do not include the NUL at the end",
          "",
          "[Added Lines]",
          "141:   \" do not include the NUL at the end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:   bw!",
          "251: endfunc",
          "253: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: \" Check that expanding directories can handle more than 255 entries.",
          "254: func Test_gf_subdirs_wildcard()",
          "255:   let cwd = getcwd()",
          "256:   let dir = 'Xtestgf_dir'",
          "257:   call mkdir(dir)",
          "258:   call chdir(dir)",
          "259:   for i in range(300)",
          "260:     call mkdir(i)",
          "261:     call writefile([], i .. '/' .. i, 'S')",
          "262:   endfor",
          "263:   set path=./**",
          "265:   new | only",
          "266:   call setline(1, '99')",
          "267:   w! Xtest1",
          "268:   normal gf",
          "269:   call assert_equal('99', fnamemodify(bufname(''), \":t\"))",
          "271:   call chdir(cwd)",
          "272:   call delete(dir, 'rf')",
          "273:   set path&",
          "274: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     125,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     126,",
          "",
          "---------------"
        ]
      }
    }
  ]
}