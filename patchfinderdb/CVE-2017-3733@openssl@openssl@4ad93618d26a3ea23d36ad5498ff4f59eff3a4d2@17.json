{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc76164c7693f57a6ded33a1344f2e8c1d6a0ee6",
      "candidate_info": {
        "commit_hash": "dc76164c7693f57a6ded33a1344f2e8c1d6a0ee6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dc76164c7693f57a6ded33a1344f2e8c1d6a0ee6",
        "files": [
          "crypto/err/err.c",
          "crypto/ui/ui_err.c",
          "crypto/ui/ui_openssl.c",
          "include/openssl/ui.h"
        ],
        "message": "In UI_OpenSSL's open(), generate an error on unknown errno\n\nTTY_get() sometimes surprises us with new errno values to determine if\nwe have a controling terminal or not.  This generated error is a\nhelpful tool to figure out that this was what happened and what the\nunknown value is.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2043)\n(cherry picked from commit 4984448648f69ed4425df68900b1fd6f17c6c271)",
        "before_after_code_files": [
          "crypto/err/err.c||crypto/err/err.c",
          "crypto/ui/ui_err.c||crypto/ui/ui_err.c",
          "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c",
          "include/openssl/ui.h||include/openssl/ui.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/err/err.c||crypto/err/err.c": [
          "File: crypto/err/err.c -> crypto/err/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     {ERR_PACK(ERR_LIB_TS, 0, 0), \"time stamp routines\"},",
          "53:     {ERR_PACK(ERR_LIB_ENGINE, 0, 0), \"engine routines\"},",
          "54:     {ERR_PACK(ERR_LIB_OCSP, 0, 0), \"OCSP routines\"},",
          "55:     {ERR_PACK(ERR_LIB_FIPS, 0, 0), \"FIPS routines\"},",
          "56:     {ERR_PACK(ERR_LIB_CMS, 0, 0), \"CMS routines\"},",
          "57:     {ERR_PACK(ERR_LIB_HMAC, 0, 0), \"HMAC routines\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     {ERR_PACK(ERR_LIB_UI, 0, 0), \"UI routines\"},",
          "",
          "---------------"
        ],
        "crypto/ui/ui_err.c||crypto/ui/ui_err.c": [
          "File: crypto/ui/ui_err.c -> crypto/ui/ui_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static ERR_STRING_DATA UI_str_functs[] = {",
          "22:     {ERR_FUNC(UI_F_GENERAL_ALLOCATE_BOOLEAN), \"general_allocate_boolean\"},",
          "23:     {ERR_FUNC(UI_F_GENERAL_ALLOCATE_PROMPT), \"general_allocate_prompt\"},",
          "24:     {ERR_FUNC(UI_F_UI_CREATE_METHOD), \"UI_create_method\"},",
          "25:     {ERR_FUNC(UI_F_UI_CTRL), \"UI_ctrl\"},",
          "26:     {ERR_FUNC(UI_F_UI_DUP_ERROR_STRING), \"UI_dup_error_string\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     {ERR_FUNC(UI_F_OPEN_CONSOLE), \"open_console\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {ERR_REASON(UI_R_RESULT_TOO_LARGE), \"result too large\"},",
          "46:     {ERR_REASON(UI_R_RESULT_TOO_SMALL), \"result too small\"},",
          "47:     {ERR_REASON(UI_R_UNKNOWN_CONTROL_COMMAND), \"unknown control command\"},",
          "48:     {0, NULL}",
          "49: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     {ERR_REASON(UI_R_UNKNOWN_TTYGET_ERRNO_VALUE),",
          "50:      \"unknown ttyget errno value\"},",
          "",
          "---------------"
        ],
        "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c": [
          "File: crypto/ui/ui_openssl.c -> crypto/ui/ui_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <openssl/e_os2.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <openssl/err.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:             is_a_tty = 0;",
          "424:         else",
          "425: # endif",
          "427:     }",
          "428: #endif",
          "429: #ifdef OPENSSL_SYS_VMS",
          "",
          "[Removed Lines]",
          "426:             return 0;",
          "",
          "[Added Lines]",
          "427:             {",
          "428:                 char tmp_num[10];",
          "429:                 BIO_snprintf(tmp_num, sizeof(tmp_num) - 1, \"%d\", errno);",
          "430:                 UIerr(UI_F_OPEN_CONSOLE, UI_R_UNKNOWN_TTYGET_ERRNO_VALUE);",
          "431:                 ERR_add_error_data(2, \"errno=\", tmp_num);",
          "433:                 return 0;",
          "434:             }",
          "",
          "---------------"
        ],
        "include/openssl/ui.h||include/openssl/ui.h": [
          "File: include/openssl/ui.h -> include/openssl/ui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "342: # define UI_F_GENERAL_ALLOCATE_BOOLEAN                    108",
          "343: # define UI_F_GENERAL_ALLOCATE_PROMPT                     109",
          "344: # define UI_F_UI_CREATE_METHOD                            112",
          "345: # define UI_F_UI_CTRL                                     111",
          "346: # define UI_F_UI_DUP_ERROR_STRING                         101",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344: # define UI_F_OPEN_CONSOLE                                114",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362: # define UI_R_RESULT_TOO_LARGE                            100",
          "363: # define UI_R_RESULT_TOO_SMALL                            101",
          "364: # define UI_R_UNKNOWN_CONTROL_COMMAND                     106",
          "366: #  ifdef  __cplusplus",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: # define UI_R_UNKNOWN_TTYGET_ERRNO_VALUE                  108",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae45175406f8dbda8cb77abcc9da5374c35a25ba",
      "candidate_info": {
        "commit_hash": "ae45175406f8dbda8cb77abcc9da5374c35a25ba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ae45175406f8dbda8cb77abcc9da5374c35a25ba",
        "files": [
          "crypto/ct/ct_oct.c"
        ],
        "message": "Fix faulty free\n\nOn error, i2o_SCT_signature() and i2o_SCT() free a pointer that may\nhave wandered off from the start of the allocated block (not currently\ntrue for i2o_SCT_signature(), but has that potential as the code may\nchange.  To avoid this, save away the start of the allocated block and\nfree that instead.\n\nThanks to Guido Vranken for reporting this issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2323)\n(cherry picked from commit d85d3c993e322d3e4c3f00be2910faa8c55b40e3)",
        "before_after_code_files": [
          "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c": [
          "File: crypto/ct/ct_oct.c -> crypto/ct/ct_oct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: int i2o_SCT_signature(const SCT *sct, unsigned char **out)",
          "154: {",
          "155:     size_t len;",
          "158:     if (!SCT_signature_is_complete(sct)) {",
          "159:         CTerr(CT_F_I2O_SCT_SIGNATURE, CT_R_SCT_INVALID_SIGNATURE);",
          "",
          "[Removed Lines]",
          "156:     unsigned char *p = NULL;",
          "",
          "[Added Lines]",
          "156:     unsigned char *p = NULL, *pstart = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:             p = *out;",
          "179:         } else {",
          "181:             if (p == NULL) {",
          "182:                 CTerr(CT_F_I2O_SCT_SIGNATURE, ERR_R_MALLOC_FAILURE);",
          "183:                 goto err;",
          "",
          "[Removed Lines]",
          "180:             p = OPENSSL_malloc(len);",
          "",
          "[Added Lines]",
          "180:             pstart = p = OPENSSL_malloc(len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:     return len;",
          "195: err:",
          "197:     return -1;",
          "198: }",
          "200: int i2o_SCT(const SCT *sct, unsigned char **out)",
          "201: {",
          "202:     size_t len;",
          "205:     if (!SCT_is_complete(sct)) {",
          "206:         CTerr(CT_F_I2O_SCT, CT_R_SCT_NOT_SET);",
          "",
          "[Removed Lines]",
          "196:     OPENSSL_free(p);",
          "203:     unsigned char *p = NULL;",
          "",
          "[Added Lines]",
          "196:     OPENSSL_free(pstart);",
          "203:     unsigned char *p = NULL, *pstart = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:         p = *out;",
          "226:     } else {",
          "228:         if (p == NULL) {",
          "229:             CTerr(CT_F_I2O_SCT, ERR_R_MALLOC_FAILURE);",
          "230:             goto err;",
          "",
          "[Removed Lines]",
          "227:         p = OPENSSL_malloc(len);",
          "",
          "[Added Lines]",
          "227:         pstart = p = OPENSSL_malloc(len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251:     return len;",
          "252: err:",
          "254:     return -1;",
          "255: }",
          "",
          "[Removed Lines]",
          "253:     OPENSSL_free(p);",
          "",
          "[Added Lines]",
          "253:     OPENSSL_free(pstart);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d3020caefb93653b6cbbe0533f77c46e625f269",
      "candidate_info": {
        "commit_hash": "0d3020caefb93653b6cbbe0533f77c46e625f269",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0d3020caefb93653b6cbbe0533f77c46e625f269",
        "files": [
          "doc/crypto/BIO_ctrl.pod",
          "doc/crypto/BIO_set_callback.pod",
          "doc/crypto/EVP_PKEY_keygen.pod",
          "doc/crypto/X509_STORE_CTX_new.pod",
          "doc/crypto/X509_STORE_CTX_set_verify_cb.pod",
          "doc/crypto/X509_STORE_set_verify_cb_func.pod",
          "doc/ssl/SSL_CTX_set_generate_session_id.pod",
          "doc/ssl/SSL_CTX_set_verify.pod",
          "doc/ssl/SSL_extension_supported.pod",
          "include/openssl/ssl.h",
          "util/find-doc-nits.pl"
        ],
        "message": "Doc nits: callback function typedefs\n\nEnhance find-doc-nits to be better about finding typedefs for\ncallback functions.  Fix all nits it now finds.  Added some new\ntypedef names to ssl.h some of which were documented but did not\nexist\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2151)\n(cherry picked from commit 121677b4875b08df99a48d20ab5c26f54782f21d)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "util/find-doc-nits.pl||util/find-doc-nits.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:                                     const unsigned char *in,",
          "263:                                     size_t inlen, int *al, void *parse_arg);",
          "266: # define SSL_OP_LEGACY_SERVER_CONNECT                    0x00000004U",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: typedef int (*verify_cb)(int preverify_ok, X509_STORE_CTX *x509_ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342: void SSL_set_read_ahead(SSL *s, int yes);",
          "1343: __owur int SSL_get_verify_mode(const SSL *s);",
          "1344: __owur int SSL_get_verify_depth(const SSL *s);",
          "1348: void SSL_set_verify_depth(SSL *s, int depth);",
          "1349: void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg);",
          "1350: # ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1345: __owur int (*SSL_get_verify_callback(const SSL *s)) (int, X509_STORE_CTX *);",
          "1346: void SSL_set_verify(SSL *s, int mode,",
          "1347:                     int (*callback) (int ok, X509_STORE_CTX *ctx));",
          "",
          "[Added Lines]",
          "1348: __owur verify_cb SSL_get_verify_callback(const SSL *s);",
          "1349: void SSL_set_verify(SSL *s, int mode, verify_cb callback);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1444: __owur int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);",
          "1445: __owur int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);",
          "1450: void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);",
          "1451: void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,",
          "1452:                                       int (*cb) (X509_STORE_CTX *, void *),",
          "",
          "[Removed Lines]",
          "1446: __owur int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx)) (int,",
          "1447:                                                         X509_STORE_CTX *);",
          "1448: void SSL_CTX_set_verify(SSL_CTX *ctx, int mode,",
          "1449:                         int (*callback) (int, X509_STORE_CTX *));",
          "",
          "[Added Lines]",
          "1448: __owur verify_cb SSL_CTX_get_verify_callback(const SSL_CTX *ctx);",
          "1449: void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, verify_cb callback);",
          "",
          "---------------"
        ],
        "util/find-doc-nits.pl||util/find-doc-nits.pl": [
          "File: util/find-doc-nits.pl -> util/find-doc-nits.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         my $sym;",
          "71:         $line =~ s/STACK_OF\\([^)]+\\)/int/g;",
          "72:         $line =~ s/__declspec\\([^)]+\\)//;",
          "74:             $sym = $1;",
          "75:         } elsif ( $line =~ /#define ([A-Za-z0-9_]+)/ ) {",
          "76:             $sym = $1;",
          "",
          "[Removed Lines]",
          "73:         if ( $line =~ /typedef.* (\\S+);/ ) {",
          "",
          "[Added Lines]",
          "73:         if ( $line =~ /env (\\S*)=/ ) {",
          "74:             # environment variable env NAME=...",
          "75:             $sym = $1;",
          "76:         } elsif ( $line =~ /typedef.*\\(\\*(\\S+)\\)\\(.*/ ) {",
          "77:             # a callback function: typedef ... (*NAME)(...",
          "78:             $sym = $1;",
          "79:         } elsif ( $line =~ /typedef.* (\\S+);/ ) {",
          "80:             # a simple typedef: typedef ... NAME;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c088325b42cee1236f7b4996dd71f93ecc95bd5d",
      "candidate_info": {
        "commit_hash": "c088325b42cee1236f7b4996dd71f93ecc95bd5d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c088325b42cee1236f7b4996dd71f93ecc95bd5d",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Fix SSL_get0_raw_cipherlist()\n\nSSL_get0_raw_cipherlist() was a little too \"raw\" in the case of an SSLv2\ncompat ClientHello. In 1.0.2 and below, during version negotiation, if\nwe received an SSLv2 compat ClientHello but actually wanted to do SSLv3+\nthen we would construct a \"fake\" SSLv3+ ClientHello. This \"fake\" ClientHello\nwould have its ciphersuite list converted to the SSLv3+ format. It was\nthis \"fake\" raw list that got saved away to later be returned by a call to\nSSL_get0_raw_cipherlist().\n\nIn 1.1.0+ version negotiation works differently and we process an SSLv2\ncompat ClientHello directly without the need for an intermediary \"fake\"\nClientHello. This meant that the raw ciphersuite list being saved was in\nthe SSLv2 format. Any caller of this function would not expect that and\npotentially overread the returned buffer by one byte.\n\nFixes #2189\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2280)\n(cherry picked from commit 07afdf3c3ac97af4f2b4eec22a97f7230f8227e0)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3256:         return NULL;",
          "3257:     }",
          "3269:     }",
          "3274:         goto err;",
          "3275:     }",
          "",
          "[Removed Lines]",
          "3259:     if ((skp == NULL) || (*skp == NULL)) {",
          "3261:         if (sk == NULL) {",
          "3262:             SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, ERR_R_MALLOC_FAILURE);",
          "3264:             return NULL;",
          "3265:         }",
          "3266:     } else {",
          "3267:         sk = *skp;",
          "3268:         sk_SSL_CIPHER_zero(sk);",
          "3271:     if (!PACKET_memdup(cipher_suites, &s->s3->tmp.ciphers_raw,",
          "3272:                        &s->s3->tmp.ciphers_rawlen)) {",
          "",
          "[Added Lines]",
          "3259:     sk = sk_SSL_CIPHER_new_null();",
          "3260:     if (sk == NULL) {",
          "3261:         SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, ERR_R_MALLOC_FAILURE);",
          "3263:         return NULL;",
          "3266:     if (sslv2format) {",
          "3267:         size_t numciphers = PACKET_remaining(cipher_suites) / n;",
          "3268:         PACKET sslv2ciphers = *cipher_suites;",
          "3269:         unsigned int leadbyte;",
          "3270:         unsigned char *raw;",
          "3279:         raw = s->s3->tmp.ciphers_raw = OPENSSL_malloc(numciphers * n);",
          "3280:         if (raw == NULL) {",
          "3282:             goto err;",
          "3283:         }",
          "3284:         for (s->s3->tmp.ciphers_rawlen = 0;",
          "3285:              PACKET_remaining(&sslv2ciphers) > 0;",
          "3286:              raw += TLS_CIPHER_LEN) {",
          "3287:             if (!PACKET_get_1(&sslv2ciphers, &leadbyte)",
          "3288:                     || (leadbyte == 0",
          "3289:                         && !PACKET_copy_bytes(&sslv2ciphers, raw,",
          "3290:                                               TLS_CIPHER_LEN))",
          "3291:                     || (leadbyte != 0",
          "3292:                         && !PACKET_forward(&sslv2ciphers, TLS_CIPHER_LEN))) {",
          "3294:                 OPENSSL_free(raw);",
          "3295:                 s->s3->tmp.ciphers_raw = NULL;",
          "3296:                 s->s3->tmp.ciphers_rawlen = 0;",
          "3297:                 goto err;",
          "3298:             }",
          "3299:             if (leadbyte == 0)",
          "3300:                 s->s3->tmp.ciphers_rawlen += TLS_CIPHER_LEN;",
          "3301:         }",
          "3302:     } else if (!PACKET_memdup(cipher_suites, &s->s3->tmp.ciphers_raw,",
          "3303:                            &s->s3->tmp.ciphers_rawlen)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3330:         goto err;",
          "3331:     }",
          "3336:  err:",
          "3339:     return NULL;",
          "3340: }",
          "",
          "[Removed Lines]",
          "3333:     if (skp != NULL)",
          "3335:     return (sk);",
          "3337:     if ((skp == NULL) || (*skp == NULL))",
          "3338:         sk_SSL_CIPHER_free(sk);",
          "",
          "[Added Lines]",
          "3365:     return sk;",
          "3367:     sk_SSL_CIPHER_free(sk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fb4f30611e8e5a5598234463f644cb950de760d",
      "candidate_info": {
        "commit_hash": "6fb4f30611e8e5a5598234463f644cb950de760d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6fb4f30611e8e5a5598234463f644cb950de760d",
        "files": [
          "ssl/ssl_asn1.c"
        ],
        "message": "Convert SSL_SESSION_ASN1 to use size specific integers\n\nThis increases portability of SSL_SESSION files between architectures\nwhere the size of |long| may vary.  Before this, SSL_SESSION files\nproduced on a 64-bit long architecture may break on a 32-bit long\narchitecture.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3120)",
        "before_after_code_files": [
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <stdio.h>",
          "38: #include <stdlib.h>",
          "39: #include \"ssl_locl.h\"",
          "41: #include <openssl/x509.h>",
          "43: typedef struct {",
          "46:     ASN1_OCTET_STRING *cipher;",
          "47:     ASN1_OCTET_STRING *comp_id;",
          "48:     ASN1_OCTET_STRING *master_key;",
          "49:     ASN1_OCTET_STRING *session_id;",
          "50:     ASN1_OCTET_STRING *key_arg;",
          "53:     X509 *peer;",
          "54:     ASN1_OCTET_STRING *session_id_context;",
          "56:     ASN1_OCTET_STRING *tlsext_hostname;",
          "58:     ASN1_OCTET_STRING *tlsext_tick;",
          "59: #ifndef OPENSSL_NO_PSK",
          "60:     ASN1_OCTET_STRING *psk_identity_hint;",
          "",
          "[Removed Lines]",
          "40: #include <openssl/asn1t.h>",
          "44:     long version;",
          "45:     long ssl_version;",
          "51:     long time;",
          "52:     long timeout;",
          "55:     long verify_result;",
          "57:     long tlsext_tick_lifetime_hint;",
          "",
          "[Added Lines]",
          "40: #include \"internal/asn1t.h\"",
          "44:     uint32_t version;",
          "45:     int32_t ssl_version;",
          "51:     int64_t time;",
          "52:     int64_t timeout;",
          "55:     int32_t verify_result;",
          "57:     int64_t tlsext_tick_lifetime_hint;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: #ifndef OPENSSL_NO_SRP",
          "64:     ASN1_OCTET_STRING *srp_username;",
          "65: #endif",
          "67: } SSL_SESSION_ASN1;",
          "69: ASN1_SEQUENCE(SSL_SESSION_ASN1) = {",
          "72:     ASN1_SIMPLE(SSL_SESSION_ASN1, cipher, ASN1_OCTET_STRING),",
          "73:     ASN1_SIMPLE(SSL_SESSION_ASN1, session_id, ASN1_OCTET_STRING),",
          "74:     ASN1_SIMPLE(SSL_SESSION_ASN1, master_key, ASN1_OCTET_STRING),",
          "75:     ASN1_IMP_OPT(SSL_SESSION_ASN1, key_arg, ASN1_OCTET_STRING, 0),",
          "78:     ASN1_EXP_OPT(SSL_SESSION_ASN1, peer, X509, 3),",
          "79:     ASN1_EXP_OPT(SSL_SESSION_ASN1, session_id_context, ASN1_OCTET_STRING, 4),",
          "81:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_hostname, ASN1_OCTET_STRING, 6),",
          "82: #ifndef OPENSSL_NO_PSK",
          "83:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity_hint, ASN1_OCTET_STRING, 7),",
          "84:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity, ASN1_OCTET_STRING, 8),",
          "85: #endif",
          "87:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick, ASN1_OCTET_STRING, 10),",
          "88:     ASN1_EXP_OPT(SSL_SESSION_ASN1, comp_id, ASN1_OCTET_STRING, 11),",
          "89: #ifndef OPENSSL_NO_SRP",
          "90:     ASN1_EXP_OPT(SSL_SESSION_ASN1, srp_username, ASN1_OCTET_STRING, 12),",
          "91: #endif",
          "93: } static_ASN1_SEQUENCE_END(SSL_SESSION_ASN1)",
          "95: IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(SSL_SESSION_ASN1)",
          "",
          "[Removed Lines]",
          "66:     long flags;",
          "70:     ASN1_SIMPLE(SSL_SESSION_ASN1, version, LONG),",
          "71:     ASN1_SIMPLE(SSL_SESSION_ASN1, ssl_version, LONG),",
          "76:     ASN1_EXP_OPT(SSL_SESSION_ASN1, time, ZLONG, 1),",
          "77:     ASN1_EXP_OPT(SSL_SESSION_ASN1, timeout, ZLONG, 2),",
          "80:     ASN1_EXP_OPT(SSL_SESSION_ASN1, verify_result, ZLONG, 5),",
          "86:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_lifetime_hint, ZLONG, 9),",
          "92:     ASN1_EXP_OPT(SSL_SESSION_ASN1, flags, ZLONG, 13)",
          "",
          "[Added Lines]",
          "66:     uint64_t flags;",
          "70:     ASN1_SIMPLE(SSL_SESSION_ASN1, version, UINT32),",
          "71:     ASN1_SIMPLE(SSL_SESSION_ASN1, ssl_version, INT32),",
          "76:     ASN1_EXP_OPT(SSL_SESSION_ASN1, time, ZINT64, 1),",
          "77:     ASN1_EXP_OPT(SSL_SESSION_ASN1, timeout, ZINT64, 2),",
          "80:     ASN1_EXP_OPT(SSL_SESSION_ASN1, verify_result, ZINT32, 5),",
          "86:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_lifetime_hint, ZUINT64, 9),",
          "92:     ASN1_EXP_OPT(SSL_SESSION_ASN1, flags, ZUINT64, 13)",
          "",
          "---------------"
        ]
      }
    }
  ]
}