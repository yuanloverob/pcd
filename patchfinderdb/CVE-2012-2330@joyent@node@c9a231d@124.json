{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77945d7f0fa6a0629ab7006d97d2e707e0431433",
      "candidate_info": {
        "commit_hash": "77945d7f0fa6a0629ab7006d97d2e707e0431433",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/77945d7f0fa6a0629ab7006d97d2e707e0431433",
        "files": [
          "test/simple/test-dgram-unref.js",
          "test/simple/test-net-connect-unref.js",
          "test/simple/test-net-server-unref.js",
          "test/simple/test-pipe-unref.js",
          "test/simple/test-timers-unref.js"
        ],
        "message": "add unref/ref tests for socket/server/timers",
        "before_after_code_files": [
          "test/simple/test-dgram-unref.js||test/simple/test-dgram-unref.js",
          "test/simple/test-net-connect-unref.js||test/simple/test-net-connect-unref.js",
          "test/simple/test-net-server-unref.js||test/simple/test-net-server-unref.js",
          "test/simple/test-pipe-unref.js||test/simple/test-pipe-unref.js",
          "test/simple/test-timers-unref.js||test/simple/test-timers-unref.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-dgram-unref.js||test/simple/test-dgram-unref.js": [
          "File: test/simple/test-dgram-unref.js -> test/simple/test-dgram-unref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var dgram = require('dgram');",
          "26: var closed = false;",
          "28: var s = dgram.createSocket('udp4');",
          "29: s.bind();",
          "30: s.unref();",
          "32: setTimeout(function() {",
          "33:   closed = true;",
          "34:   s.close();",
          "35: }, 1000).unref();",
          "37: process.on('exit', function() {",
          "38:   assert.strictEqual(closed, false, 'Unrefd socket should not hold loop open');",
          "39: });",
          "",
          "---------------"
        ],
        "test/simple/test-net-connect-unref.js||test/simple/test-net-connect-unref.js": [
          "File: test/simple/test-net-connect-unref.js -> test/simple/test-net-connect-unref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var client, killed = false, ended = false;",
          "27: var TIMEOUT = 10 * 1000",
          "29: client = net.createConnection(53, '8.8.8.8', function() {",
          "30:   client.unref();",
          "31: });",
          "33: client.on('close', function() {",
          "34:   ended = true;",
          "35: });",
          "37: setTimeout(function() {",
          "38:   killed = true;",
          "39:   client.end();",
          "40: }, TIMEOUT).unref();",
          "42: process.on('exit', function() {",
          "43:   assert.strictEqual(killed, false, 'A client should have connected');",
          "44:   assert.strictEqual(ended, false, 'A client should stay connected');",
          "45: });",
          "",
          "---------------"
        ],
        "test/simple/test-net-server-unref.js||test/simple/test-net-server-unref.js": [
          "File: test/simple/test-net-server-unref.js -> test/simple/test-net-server-unref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var net = require('net');",
          "26: var closed = false;",
          "28: var s = net.createServer();",
          "29: s.listen();",
          "30: s.unref();",
          "32: setTimeout(function() {",
          "33:   closed = true;",
          "34:   s.close();",
          "35: }, 1000).unref();",
          "37: process.on('exit', function() {",
          "38:   assert.strictEqual(closed, false, 'Unrefd socket should not hold loop open');",
          "39: });",
          "",
          "---------------"
        ],
        "test/simple/test-pipe-unref.js||test/simple/test-pipe-unref.js": [
          "File: test/simple/test-pipe-unref.js -> test/simple/test-pipe-unref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var net = require('net');",
          "26: var closed = false;",
          "28: var s = net.Server();",
          "29: s.listen(common.PIPE);",
          "30: s.unref();",
          "32: setTimeout(function() {",
          "33:   closed = true;",
          "34:   s.close();",
          "35: }, 1000).unref();",
          "37: process.on('exit', function() {",
          "38:   assert.strictEqual(closed, false, 'Unrefd socket should not hold loop open');",
          "39: });",
          "",
          "---------------"
        ],
        "test/simple/test-timers-unref.js||test/simple/test-timers-unref.js": [
          "File: test/simple/test-timers-unref.js -> test/simple/test-timers-unref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var interval_fired = false,",
          "26:     timeout_fired = false,",
          "27:     unref_interval = false,",
          "28:     unref_timer = false,",
          "29:     interval, check_unref, checks = 0;",
          "31: var LONG_TIME = 10 * 1000;",
          "32: var SHORT_TIME = 100;",
          "34: setInterval(function() {",
          "35:   interval_fired = true;",
          "36: }, LONG_TIME).unref();",
          "38: setTimeout(function() {",
          "39:   timeout_fired = true;",
          "40: }, LONG_TIME).unref();",
          "42: interval = setInterval(function() {",
          "43:   unref_interval = true;",
          "44:   clearInterval(interval);",
          "45: }, SHORT_TIME).unref();",
          "47: setTimeout(function() {",
          "48:   unref_timer = true;",
          "49: }, SHORT_TIME).unref();",
          "51: check_unref = setInterval(function() {",
          "52:   if (checks > 5 || (unref_interval && unref_timer))",
          "53:     clearInterval(check_unref);",
          "54:   checks += 1;",
          "55: }, 100);",
          "57: process.on('exit', function() {",
          "58:   assert.strictEqual(interval_fired, false, 'Interval should not fire');",
          "59:   assert.strictEqual(timeout_fired, false, 'Timeout should not fire');",
          "60:   assert.strictEqual(unref_timer, true, 'An unrefd timeout should still fire');",
          "61:   assert.strictEqual(unref_interval, true, 'An unrefd interval should still fire');",
          "62: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4a4ef7a2da34ec9d155f82df0133b40382c53e9",
      "candidate_info": {
        "commit_hash": "f4a4ef7a2da34ec9d155f82df0133b40382c53e9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f4a4ef7a2da34ec9d155f82df0133b40382c53e9",
        "files": [
          "lib/zlib.js",
          "test/simple/test-zlib-destroy.js"
        ],
        "message": "zlib: Emit 'close' on destroy().",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js",
          "test/simple/test-zlib-destroy.js||test/simple/test-zlib-destroy.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:   this.readable = false;",
          "456:   this.writable = false;",
          "457:   this._ended = true;",
          "458: };",
          "460: util.inherits(Deflate, Zlib);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-zlib-destroy.js||test/simple/test-zlib-destroy.js": [
          "File: test/simple/test-zlib-destroy.js -> test/simple/test-zlib-destroy.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var zlib = require('zlib');",
          "26: ['Deflate', 'Inflate', 'Gzip', 'Gunzip', 'DeflateRaw', 'InflateRaw', 'Unzip']",
          "27:   .forEach(function (name) {",
          "28:     var a = false;",
          "29:     var zStream = new zlib[name]();",
          "30:     zStream.on('close', function () {",
          "31:       a = true;",
          "32:     });",
          "33:     zStream.destroy();",
          "35:     assert.equal(a, true, name+'#destroy() must emit \\'close\\'');",
          "36:   });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a2cb6c506fffbe1fb1cf4529fcb2f5be0340af3",
      "candidate_info": {
        "commit_hash": "6a2cb6c506fffbe1fb1cf4529fcb2f5be0340af3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6a2cb6c506fffbe1fb1cf4529fcb2f5be0340af3",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.7.5",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "31: #define NODE_PATCH_VERSION 4",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "31: #define NODE_PATCH_VERSION 5",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "024451c65cf0a1da4da48f99885cb8e7c2d20c72",
      "candidate_info": {
        "commit_hash": "024451c65cf0a1da4da48f99885cb8e7c2d20c72",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/024451c65cf0a1da4da48f99885cb8e7c2d20c72",
        "files": [
          "lib/child_process.js"
        ],
        "message": "fork: don't clear environment by default\n\n- Set options.env to process.env instead of {} by default.\n- Shallow clone the passed options.env in case the user passed process.env directly.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   options.env.NODE_CHANNEL_FD = 42;",
          "",
          "[Removed Lines]",
          "196:   if (!options.env) options.env = { };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e0c830cd0038577e36456d3e027a4150d68c933",
      "candidate_info": {
        "commit_hash": "8e0c830cd0038577e36456d3e027a4150d68c933",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8e0c830cd0038577e36456d3e027a4150d68c933",
        "files": [
          "doc/api/tls.markdown",
          "lib/tls.js",
          "src/node_crypto.cc",
          "src/node_crypto.h",
          "test/simple/test-tls-session-cache.js"
        ],
        "message": "tls: async session storage",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_crypto.h||src/node_crypto.h",
          "test/simple/test-tls-session-cache.js||test/simple/test-tls-session-cache.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:   debug('onhandshakedone');",
          "726: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "747:   events.EventEmitter.call(this);",
          "749:   this._secureEstablished = false;",
          "750:   this._isServer = isServer ? true : false;",
          "751:   this._encWriteState = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "768:   this._requestCert = requestCert ? true : false;",
          "770:   this.ssl = new Connection(this.credentials.context,",
          "775:   if (this._isServer) {",
          "776:     this.ssl.onhandshakestart = onhandshakestart.bind(this);",
          "777:     this.ssl.onhandshakedone = onhandshakedone.bind(this);",
          "778:     this.ssl.handshakes = 0;",
          "779:     this.ssl.timer = null;",
          "780:   }",
          "",
          "[Removed Lines]",
          "771:       this._isServer ? true : false,",
          "772:       this._isServer ? this._requestCert : options.servername,",
          "773:       this._rejectUnauthorized);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1084:                               self.requestCert,",
          "1085:                               self.rejectUnauthorized,",
          "1086:                               {",
          "1087:                                 NPNProtocols: self.NPNProtocols,",
          "1088:                                 SNICallback: self.SNICallback",
          "1089:                               });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: static Persistent<String> ext_key_usage_symbol;",
          "85: static Persistent<String> onhandshakestart_sym;",
          "86: static Persistent<String> onhandshakedone_sym;",
          "88: static Persistent<FunctionTemplate> secure_context_constructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: static Persistent<String> onclienthello_sym;",
          "88: static Persistent<String> onnewsession_sym;",
          "89: static Persistent<String> sessionid_sym;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:   }",
          "223:   sc->ctx_ = SSL_CTX_new(method);",
          "228:   sc->ca_store_ = NULL;",
          "229:   return True();",
          "230: }",
          "235: static BIO* LoadBIO (Handle<Value> v) {",
          "",
          "[Removed Lines]",
          "225:   SSL_CTX_set_session_cache_mode(sc->ctx_, SSL_SESS_CACHE_SERVER);",
          "",
          "[Added Lines]",
          "229:   SSL_CTX_set_session_cache_mode(sc->ctx_,",
          "230:                                  SSL_SESS_CACHE_SERVER |",
          "231:                                  SSL_SESS_CACHE_NO_INTERNAL |",
          "232:                                  SSL_SESS_CACHE_NO_AUTO_CLEAR);",
          "233:   SSL_CTX_sess_set_get_cb(sc->ctx_, GetSessionCallback);",
          "234:   SSL_CTX_sess_set_new_cb(sc->ctx_, NewSessionCallback);",
          "241: SSL_SESSION* SecureContext::GetSessionCallback(SSL* s,",
          "242:                                                unsigned char* key,",
          "243:                                                int len,",
          "244:                                                int* copy) {",
          "245:   HandleScope scope;",
          "247:   Connection* p = static_cast<Connection*>(SSL_get_app_data(s));",
          "250:   SSL_SESSION* sess = p->next_sess_;",
          "251:   p->next_sess_ = NULL;",
          "253:   return sess;",
          "254: }",
          "257: void SessionDataFree(char* data, void* hint) {",
          "258:   delete[] data;",
          "259: }",
          "262: int SecureContext::NewSessionCallback(SSL* s, SSL_SESSION* sess) {",
          "263:   HandleScope scope;",
          "265:   Connection* p = static_cast<Connection*>(SSL_get_app_data(s));",
          "268:   int size = i2d_SSL_SESSION(sess, NULL);",
          "269:   if (size > kMaxSessionSize) return 0;",
          "272:   char* serialized = new char[size];",
          "273:   unsigned char* pserialized = reinterpret_cast<unsigned char*>(serialized);",
          "274:   memset(serialized, 0, size);",
          "275:   i2d_SSL_SESSION(sess, &pserialized);",
          "277:   Handle<Value> argv[2] = {",
          "278:     Buffer::New(reinterpret_cast<char*>(sess->session_id),",
          "279:                 sess->session_id_length)->handle_,",
          "280:     Buffer::New(serialized, size, SessionDataFree, NULL)->handle_",
          "281:   };",
          "283:   if (onnewsession_sym.IsEmpty()) {",
          "284:     onnewsession_sym = NODE_PSYMBOL(\"onnewsession\");",
          "285:   }",
          "286:   MakeCallback(p->handle_, onnewsession_sym, ARRAY_SIZE(argv), argv);",
          "288:   return 0;",
          "289: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667: }",
          "670: #ifdef SSL_PRINT_DEBUG",
          "671: # define DEBUG_PRINT(...) fprintf (stderr, __VA_ARGS__)",
          "672: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729: size_t ClientHelloParser::Write(const uint8_t* data, size_t len) {",
          "730:   HandleScope scope;",
          "733:   if (state_ == kPaused) return 0;",
          "737:   size_t available = sizeof(data_) - offset_;",
          "738:   size_t copied = len < available ? len : available;",
          "739:   memcpy(data_ + offset_, data, copied);",
          "740:   offset_ += copied;",
          "743:   bool is_clienthello = false;",
          "744:   uint8_t session_size = -1;",
          "745:   uint8_t* session_id = NULL;",
          "746:   Local<Object> hello;",
          "747:   Handle<Value> argv[1];",
          "749:   switch (state_) {",
          "750:    case kWaiting:",
          "752:     if (offset_ < 5) break;",
          "754:     if (data_[0] == kChangeCipherSpec || data_[0] == kAlert ||",
          "755:         data_[0] == kHandshake || data_[0] == kApplicationData) {",
          "756:       frame_len_ = (data_[3] << 8) + data_[4];",
          "757:       state_ = kTLSHeader;",
          "758:       body_offset_ = 5;",
          "759:     } else {",
          "760:       frame_len_ = (data_[0] << 8) + data_[1];",
          "761:       state_ = kSSLHeader;",
          "762:       if (*data_ & 0x40) {",
          "764:         body_offset_ = 3;",
          "765:       } else {",
          "767:         body_offset_ = 2;",
          "768:       }",
          "769:     }",
          "772:     if (frame_len_ >= sizeof(data_)) {",
          "774:       Finish();",
          "775:       return copied;",
          "776:     }",
          "777:    case kTLSHeader:",
          "778:    case kSSLHeader:",
          "780:     if (offset_ < body_offset_ + frame_len_) break;",
          "785:     if (data_[body_offset_] == kClientHello) {",
          "786:       is_clienthello = true;",
          "787:       uint8_t* body;",
          "788:       size_t session_offset;",
          "790:       if (state_ == kTLSHeader) {",
          "792:         session_offset = body_offset_ + 4 + 2 + 32;",
          "794:         if (session_offset + 1 < offset_) {",
          "795:           body = data_ + session_offset;",
          "796:           session_size = *body;",
          "797:           session_id = body + 1;",
          "798:         }",
          "799:       } else if (state_ == kSSLHeader) {",
          "801:         session_offset = body_offset_ + 3;",
          "803:         if (session_offset + 4 < offset_) {",
          "804:           body = data_ + session_offset;",
          "806:           int ciphers_size = (body[0] << 8) + body[1];",
          "808:           if (body + 4 + ciphers_size < data_ + offset_) {",
          "809:             session_size = (body[2] << 8) + body[3];",
          "810:             session_id = body + 4 + ciphers_size;",
          "811:           }",
          "812:         }",
          "813:       } else {",
          "815:         abort();",
          "816:       }",
          "819:       if (session_id == NULL ||",
          "820:           session_size > 32 ||",
          "821:           session_id + session_size > data_ + offset_) {",
          "822:         Finish();",
          "823:         return copied;",
          "824:       }",
          "827:     }",
          "830:     if (!is_clienthello) {",
          "831:       Finish();",
          "832:       return copied;",
          "833:     }",
          "837:     if (onclienthello_sym.IsEmpty()) {",
          "838:       onclienthello_sym = NODE_PSYMBOL(\"onclienthello\");",
          "839:     }",
          "840:     if (sessionid_sym.IsEmpty()) {",
          "841:       sessionid_sym = NODE_PSYMBOL(\"sessionId\");",
          "842:     }",
          "844:     state_ = kPaused;",
          "845:     hello = Object::New();",
          "846:     hello->Set(sessionid_sym,",
          "847:                Buffer::New(reinterpret_cast<char*>(session_id),",
          "848:                            session_size)->handle_);",
          "850:     argv[0] = hello;",
          "851:     MakeCallback(conn_->handle_, onclienthello_sym, 1, argv);",
          "852:     break;",
          "853:    case kEnded:",
          "854:    default:",
          "855:     break;",
          "856:   }",
          "858:   return copied;",
          "859: }",
          "862: void ClientHelloParser::Finish() {",
          "863:   assert(state_ != kEnded);",
          "864:   state_ = kEnded;",
          "867:   int r = BIO_write(conn_->bio_read_, reinterpret_cast<char*>(data_), offset_);",
          "868:   conn_->HandleBIOError(conn_->bio_read_, \"BIO_write\", r);",
          "869:   conn_->SetShutdownFlags();",
          "870: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "789:   NODE_SET_PROTOTYPE_METHOD(t, \"getPeerCertificate\", Connection::GetPeerCertificate);",
          "790:   NODE_SET_PROTOTYPE_METHOD(t, \"getSession\", Connection::GetSession);",
          "791:   NODE_SET_PROTOTYPE_METHOD(t, \"setSession\", Connection::SetSession);",
          "792:   NODE_SET_PROTOTYPE_METHOD(t, \"isSessionReused\", Connection::IsSessionReused);",
          "793:   NODE_SET_PROTOTYPE_METHOD(t, \"isInitFinished\", Connection::IsInitFinished);",
          "794:   NODE_SET_PROTOTYPE_METHOD(t, \"verifyError\", Connection::VerifyError);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995:   NODE_SET_PROTOTYPE_METHOD(t, \"loadSession\", Connection::LoadSession);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1112:           String::New(\"off + len > buffer.length\")));",
          "1113:   }",
          "1119:   return scope.Close(Integer::New(bytes_written));",
          "1120: }",
          "",
          "[Removed Lines]",
          "1115:   int bytes_written = BIO_write(ss->bio_read_, buffer_data + off, len);",
          "1116:   ss->HandleBIOError(ss->bio_read_, \"BIO_write\", bytes_written);",
          "1117:   ss->SetShutdownFlags();",
          "",
          "[Added Lines]",
          "1319:   int bytes_written;",
          "1320:   char* data = buffer_data + off;",
          "1322:   if (ss->is_server_ && !ss->hello_parser_.ended()) {",
          "1323:     bytes_written = ss->hello_parser_.Write(reinterpret_cast<uint8_t*>(data),",
          "1324:                                             len);",
          "1325:   } else {",
          "1326:     bytes_written = BIO_write(ss->bio_read_, data, len);",
          "1327:     ss->HandleBIOError(ss->bio_read_, \"BIO_write\", bytes_written);",
          "1328:     ss->SetShutdownFlags();",
          "1329:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1444:   ssize_t wlen = DecodeWrite(sbuf, slen, args[0], BINARY);",
          "1445:   assert(wlen == slen);",
          "1448:   SSL_SESSION* sess = d2i_SSL_SESSION(NULL, &p, wlen);",
          "1450:   delete [] sbuf;",
          "",
          "[Removed Lines]",
          "1447:   const unsigned char* p = (unsigned char*) sbuf;",
          "",
          "[Added Lines]",
          "1659:   const unsigned char* p = reinterpret_cast<const unsigned char*>(sbuf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1463:   return True();",
          "1464: }",
          "1466: Handle<Value> Connection::IsSessionReused(const Arguments& args) {",
          "1467:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1678: Handle<Value> Connection::LoadSession(const Arguments& args) {",
          "1679:   HandleScope scope;",
          "1681:   Connection *ss = Connection::Unwrap(args);",
          "1683:   if (args.Length() >= 1 && Buffer::HasInstance(args[0])) {",
          "1684:     ssize_t slen = Buffer::Length(args[0].As<Object>());",
          "1685:     char* sbuf = Buffer::Data(args[0].As<Object>());",
          "1687:     const unsigned char* p = reinterpret_cast<unsigned char*>(sbuf);",
          "1688:     SSL_SESSION* sess = d2i_SSL_SESSION(NULL, &p, slen);",
          "1691:     if (ss->next_sess_ != NULL) {",
          "1692:       SSL_SESSION_free(ss->next_sess_);",
          "1693:     }",
          "1694:     ss->next_sess_ = sess;",
          "1695:   }",
          "1697:   ss->hello_parser_.Finish();",
          "1699:   return True();",
          "1700: }",
          "",
          "---------------"
        ],
        "src/node_crypto.h||src/node_crypto.h": [
          "File: src/node_crypto.h -> src/node_crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: static X509_STORE* root_cert_store;",
          "52: class SecureContext : ObjectWrap {",
          "53:  public:",
          "54:   static void Initialize(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: class Connection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   X509_STORE *ca_store_;",
          "60:  protected:",
          "61:   static v8::Handle<v8::Value> New(const v8::Arguments& args);",
          "62:   static v8::Handle<v8::Value> Init(const v8::Arguments& args);",
          "63:   static v8::Handle<v8::Value> SetKey(const v8::Arguments& args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   static const int kMaxSessionSize = 10 * 1024;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   static v8::Handle<v8::Value> Close(const v8::Arguments& args);",
          "72:   static v8::Handle<v8::Value> LoadPKCS12(const v8::Arguments& args);",
          "74:   SecureContext() : ObjectWrap() {",
          "75:     ctx_ = NULL;",
          "76:     ca_store_ = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   static SSL_SESSION* GetSessionCallback(SSL* s,",
          "80:                                          unsigned char* key,",
          "81:                                          int len,",
          "82:                                          int* copy);",
          "83:   static int NewSessionCallback(SSL* s, SSL_SESSION* sess);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  private:",
          "101: };",
          "103: class Connection : ObjectWrap {",
          "104:  public:",
          "105:   static void Initialize(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: class ClientHelloParser {",
          "115:  public:",
          "116:   enum FrameType {",
          "117:     kChangeCipherSpec = 20,",
          "118:     kAlert = 21,",
          "119:     kHandshake = 22,",
          "120:     kApplicationData = 23,",
          "121:     kOther = 255",
          "122:   };",
          "124:   enum HandshakeType {",
          "125:     kClientHello = 1",
          "126:   };",
          "128:   enum ParseState {",
          "129:     kWaiting,",
          "130:     kTLSHeader,",
          "131:     kSSLHeader,",
          "132:     kPaused,",
          "133:     kEnded",
          "134:   };",
          "136:   ClientHelloParser(Connection* c) : conn_(c),",
          "137:                                      state_(kWaiting),",
          "138:                                      offset_(0),",
          "139:                                      body_offset_(0),",
          "140:                                      written_(0) {",
          "141:   }",
          "143:   size_t Write(const uint8_t* data, size_t len);",
          "144:   void Finish();",
          "146:   inline bool ended() { return state_ == kEnded; }",
          "148:  private:",
          "149:   Connection* conn_;",
          "150:   ParseState state_;",
          "151:   size_t frame_len_;",
          "153:   uint8_t data_[18432];",
          "154:   size_t offset_;",
          "155:   size_t body_offset_;",
          "156:   size_t written_;",
          "157: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:   static v8::Handle<v8::Value> GetPeerCertificate(const v8::Arguments& args);",
          "127:   static v8::Handle<v8::Value> GetSession(const v8::Arguments& args);",
          "128:   static v8::Handle<v8::Value> SetSession(const v8::Arguments& args);",
          "129:   static v8::Handle<v8::Value> IsSessionReused(const v8::Arguments& args);",
          "130:   static v8::Handle<v8::Value> IsInitFinished(const v8::Arguments& args);",
          "131:   static v8::Handle<v8::Value> VerifyError(const v8::Arguments& args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:   static v8::Handle<v8::Value> LoadSession(const v8::Arguments& args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "168:     return ss;",
          "169:   }",
          "172:     bio_read_ = bio_write_ = NULL;",
          "173:     ssl_ = NULL;",
          "174:   }",
          "176:   ~Connection() {",
          "",
          "[Removed Lines]",
          "171:   Connection() : ObjectWrap() {",
          "",
          "[Added Lines]",
          "228:   Connection() : ObjectWrap(), hello_parser_(this) {",
          "231:     next_sess_ = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "179:       ssl_ = NULL;",
          "180:     }",
          "182: #ifdef OPENSSL_NPN_NEGOTIATED",
          "183:     if (!npnProtos_.IsEmpty()) npnProtos_.Dispose();",
          "184:     if (!selectedNPNProto_.IsEmpty()) selectedNPNProto_.Dispose();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     if (next_sess_ != NULL) {",
          "241:       SSL_SESSION_free(next_sess_);",
          "242:       next_sess_ = NULL;",
          "243:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "198:   BIO *bio_write_;",
          "199:   SSL *ssl_;",
          "202: };",
          "204: void InitCrypto(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:   ClientHelloParser hello_parser_;",
          "267:   SSL_SESSION* next_sess_;",
          "269:   friend class ClientHelloParser;",
          "270:   friend class SecureContext;",
          "",
          "---------------"
        ],
        "test/simple/test-tls-session-cache.js||test/simple/test-tls-session-cache.js": [
          "File: test/simple/test-tls-session-cache.js -> test/simple/test-tls-session-cache.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     requestCert: true",
          "51:   };",
          "52:   var requestCount = 0;",
          "54:   var server = tls.createServer(options, function(cleartext) {",
          "55:     ++requestCount;",
          "56:     cleartext.end();",
          "57:   });",
          "58:   server.listen(common.PORT, function() {",
          "59:     var client = spawn('openssl', [",
          "60:       's_client',",
          "61:       '-connect', 'localhost:' + common.PORT,",
          "62:       '-key', join(common.fixturesDir, 'agent.key'),",
          "63:       '-cert', join(common.fixturesDir, 'agent.crt'),",
          "65:     ], {",
          "66:       customFds: [0, 1, 2]",
          "67:     });",
          "",
          "[Removed Lines]",
          "64:       '-reconnect'",
          "",
          "[Added Lines]",
          "53:   var session;",
          "59:   server.on('newSession', function(id, data) {",
          "60:     assert.ok(!session);",
          "61:     session = {",
          "62:       id: id,",
          "63:       data: data",
          "64:     };",
          "65:   });",
          "66:   server.on('resumeSession', function(id, callback) {",
          "67:     assert.ok(session);",
          "68:     assert.equal(session.id.toString('hex'), id.toString('hex'));",
          "71:     setTimeout(function() {",
          "72:       callback(null, session.data);",
          "73:     }, 100);",
          "74:   });",
          "81:       '-reconnect',",
          "82:       '-no_ticket'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   });",
          "74:   process.on('exit', function() {",
          "76:     assert.equal(requestCount, 6);",
          "77:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     assert.ok(session);",
          "",
          "---------------"
        ]
      }
    }
  ]
}