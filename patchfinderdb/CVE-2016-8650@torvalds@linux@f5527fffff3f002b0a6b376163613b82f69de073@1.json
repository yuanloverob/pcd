{
  "cve_id": "CVE-2016-8650",
  "cve_desc": "The mpi_powm function in lib/mpi/mpi-pow.c in the Linux kernel through 4.8.11 does not ensure that memory is allocated for limb data, which allows local users to cause a denial of service (stack memory corruption and panic) via an add_key system call for an RSA key with a zero exponent.",
  "repo": "torvalds/linux",
  "patch_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
  "patch_info": {
    "commit_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f5527fffff3f002b0a6b376163613b82f69de073",
    "files": [
      "lib/mpi/mpi-pow.c"
    ],
    "message": "mpi: Fix NULL ptr dereference in mpi_powm() [ver #3]\n\nThis fixes CVE-2016-8650.\n\nIf mpi_powm() is given a zero exponent, it wants to immediately return\neither 1 or 0, depending on the modulus.  However, if the result was\ninitalised with zero limb space, no limbs space is allocated and a\nNULL-pointer exception ensues.\n\nFix this by allocating a minimal amount of limb space for the result when\nthe 0-exponent case when the result is 1 and not touching the limb space\nwhen the result is 0.\n\nThis affects the use of RSA keys and X.509 certificates that carry them.\n\nBUG: unable to handle kernel NULL pointer dereference at           (null)\nIP: [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nPGD 0\nOops: 0002 [#1] SMP\nModules linked in:\nCPU: 3 PID: 3014 Comm: keyctl Not tainted 4.9.0-rc6-fscache+ #278\nHardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014\ntask: ffff8804011944c0 task.stack: ffff880401294000\nRIP: 0010:[<ffffffff8138ce5d>]  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nRSP: 0018:ffff880401297ad8  EFLAGS: 00010212\nRAX: 0000000000000000 RBX: ffff88040868bec0 RCX: ffff88040868bba0\nRDX: ffff88040868b260 RSI: ffff88040868bec0 RDI: ffff88040868bee0\nRBP: ffff880401297ba8 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000047 R11: ffffffff8183b210 R12: 0000000000000000\nR13: ffff8804087c7600 R14: 000000000000001f R15: ffff880401297c50\nFS:  00007f7a7918c700(0000) GS:ffff88041fb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000000 CR3: 0000000401250000 CR4: 00000000001406e0\nStack:\n ffff88040868bec0 0000000000000020 ffff880401297b00 ffffffff81376cd4\n 0000000000000100 ffff880401297b10 ffffffff81376d12 ffff880401297b30\n ffffffff81376f37 0000000000000100 0000000000000000 ffff880401297ba8\nCall Trace:\n [<ffffffff81376cd4>] ? __sg_page_iter_next+0x43/0x66\n [<ffffffff81376d12>] ? sg_miter_get_next_page+0x1b/0x5d\n [<ffffffff81376f37>] ? sg_miter_next+0x17/0xbd\n [<ffffffff8138ba3a>] ? mpi_read_raw_from_sgl+0xf2/0x146\n [<ffffffff8132a95c>] rsa_verify+0x9d/0xee\n [<ffffffff8132acca>] ? pkcs1pad_sg_set_buf+0x2e/0xbb\n [<ffffffff8132af40>] pkcs1pad_verify+0xc0/0xe1\n [<ffffffff8133cb5e>] public_key_verify_signature+0x1b0/0x228\n [<ffffffff8133d974>] x509_check_for_self_signed+0xa1/0xc4\n [<ffffffff8133cdde>] x509_cert_parse+0x167/0x1a1\n [<ffffffff8133d609>] x509_key_preparse+0x21/0x1a1\n [<ffffffff8133c3d7>] asymmetric_key_preparse+0x34/0x61\n [<ffffffff812fc9f3>] key_create_or_update+0x145/0x399\n [<ffffffff812fe227>] SyS_add_key+0x154/0x19e\n [<ffffffff81001c2b>] do_syscall_64+0x80/0x191\n [<ffffffff816825e4>] entry_SYSCALL64_slow_path+0x25/0x25\nCode: 56 41 55 41 54 53 48 81 ec a8 00 00 00 44 8b 71 04 8b 42 04 4c 8b 67 18 45 85 f6 89 45 80 0f 84 b4 06 00 00 85 c0 75 2f 41 ff ce <49> c7 04 24 01 00 00 00 b0 01 75 0b 48 8b 41 18 48 83 38 01 0f\nRIP  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\n RSP <ffff880401297ad8>\nCR2: 0000000000000000\n---[ end trace d82015255d4a5d8d ]---\n\nBasically, this is a backport of a libgcrypt patch:\n\n\thttp://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=patch;h=6e1adb05d290aeeb1c230c763970695f4a538526\n\nFixes: cdec9cb5167a (\"crypto: GnuPG based MPI lib - source files (part 1)\")\nSigned-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>\ncc: linux-ima-devel@lists.sourceforge.net\ncc: stable@vger.kernel.org\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
    "before_after_code_files": [
      "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c"
    ]
  },
  "patch_diff": {
    "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c": [
      "File: lib/mpi/mpi-pow.c -> lib/mpi/mpi-pow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:  if (!esize) {",
      "68:   res->nlimbs = (msize == 1 && mod->d[0] == 1) ? 0 : 1;",
      "69:   res->sign = 0;",
      "70:   goto leave;",
      "71:  }",
      "",
      "[Removed Lines]",
      "67:   rp[0] = 1;",
      "",
      "[Added Lines]",
      "68:   if (res->nlimbs) {",
      "69:    if (mpi_resize(res, 1) < 0)",
      "70:     goto enomem;",
      "71:    rp = res->d;",
      "72:    rp[0] = 1;",
      "73:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59eba2d1ec0272ea9cb472b5805e179242df226d",
      "candidate_info": {
        "commit_hash": "59eba2d1ec0272ea9cb472b5805e179242df226d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/59eba2d1ec0272ea9cb472b5805e179242df226d",
        "files": [
          "drivers/media/common/saa7146/saa7146_video.c"
        ],
        "message": "[media] saa7146: Fix for while releasing video buffers\n\nFix this bug:\n\t\"[BUG] process stuck when closing saa7146 [dvb_ttpci]\"\n\nRelease queued DMA buffers when ending streaming, so that\nvideobuf_waiton() doesn't block forever.\n\nAs reported, this fixes avoids occasional lockup of process reading from\nvideo device, which manifests in such log:\n\nINFO: task ffmpeg:9864 blocked for more than 120 seconds.\n      Tainted: P           O    4.6.7 #3\n\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\" disables this message.\nffmpeg          D ffff880177cc7b00     0  9864      1 0x00000000\n ffff880177cc7b00 0000000000000202 0000000000000202 ffffffff8180b4c0\n ffff88019d79e4c0 ffffffff81064050 ffff880177cc7ae0 ffff880177cc8000\n ffff880177cc7b18 ffff8801fd41d648 ffff8802307acca0 ffff8802307acc70\nCall Trace:\n [<ffffffff81064050>] ? preempt_count_add+0x89/0xab\n [<ffffffff81477215>] schedule+0x86/0x9e\n [<ffffffff81477215>] ? schedule+0x86/0x9e\n [<ffffffffa0fe1c96>] videobuf_waiton+0x131/0x15e [videobuf_core]\n [<ffffffff8107727b>] ? wait_woken+0x6d/0x6d\n [<ffffffffa1017be9>] saa7146_dma_free+0x39/0x5b [saa7146_vv]\n [<ffffffffa10186c4>] buffer_release+0x2a/0x3e [saa7146_vv]\n [<ffffffffa0fee4a8>] videobuf_vm_close+0xd8/0x103 [videobuf_dma_sg]\n [<ffffffff8112049e>] remove_vma+0x25/0x4d\n [<ffffffff81121a32>] exit_mmap+0xce/0xf7\n [<ffffffff8104381d>] mmput+0x4e/0xe2\n [<ffffffff810491fd>] do_exit+0x372/0x920\n [<ffffffff81049813>] do_group_exit+0x3c/0x98\n [<ffffffff810522ef>] get_signal+0x4e8/0x56e\n [<ffffffff810710a5>] ? task_dead_fair+0xd/0xf\n [<ffffffff81017020>] do_signal+0x23/0x521\n [<ffffffff81479e82>] ? _raw_spin_unlock_irqrestore+0x13/0x25\n [<ffffffff8109710d>] ? hrtimer_try_to_cancel+0xd7/0x104\n [<ffffffff8109b306>] ? ktime_get+0x4c/0xa1\n [<ffffffff81096ea6>] ? update_rmtp+0x46/0x5b\n [<ffffffff81097ce0>] ? hrtimer_nanosleep+0xe4/0x10e\n [<ffffffff81096e3c>] ? hrtimer_init+0xeb/0xeb\n [<ffffffff810014f8>] exit_to_usermode_loop+0x4f/0x93\n [<ffffffff810019fe>] syscall_return_slowpath+0x3b/0x46\n [<ffffffff8147a355>] entry_SYSCALL_64_fastpath+0x8d/0x8f\n\nReported-by: Philipp Matthias Hahn <pmhahn+video@pmhahn.de>\nTested-by: Philipp Matthias Hahn <pmhahn+video@pmhahn.de>\nSigned-off-by: Andrey Utkin <andrey_utkin@fastmail.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>",
        "before_after_code_files": [
          "drivers/media/common/saa7146/saa7146_video.c||drivers/media/common/saa7146/saa7146_video.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/media/common/saa7146/saa7146_video.c||drivers/media/common/saa7146/saa7146_video.c": [
          "File: drivers/media/common/saa7146/saa7146_video.c -> drivers/media/common/saa7146/saa7146_video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "390: {",
          "391:  struct saa7146_dev *dev = fh->dev;",
          "392:  struct saa7146_vv *vv = dev->vv_data;",
          "393:  struct saa7146_format *fmt = NULL;",
          "394:  unsigned long flags;",
          "395:  unsigned int resource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:  struct saa7146_dmaqueue *q = &vv->video_dmaq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  saa7146_write(dev, MC1, dmas);",
          "431:  spin_unlock_irqrestore(&dev->slock, flags);",
          "433:  vv->video_fh = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:  if (q->curr)",
          "433:   saa7146_buffer_finish(dev, q, VIDEOBUF_DONE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
      "candidate_info": {
        "commit_hash": "3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3b10d0095a1e2d6ce11f6537e04806ff8aba9cdd",
        "files": [
          "arch/powerpc/mm/pgtable-radix.c"
        ],
        "message": "powerpc/mm/radix: Prevent kernel execution of user space\n\nISA 3 defines new encoded access authority that allows instruction\naccess prevention in privileged mode and allows normal access\nto problem state. This patch just enables IAMR (Instruction Authority\nMask Register), enabling AMR would require more work.\n\nI've tested this with a buggy driver and a simple payload. The payload\nis specific to the build I've tested.\n\nmpe: Also tested with LKDTM:\n\n  # echo EXEC_USERSPACE > /sys/kernel/debug/provoke-crash/DIRECT\n  lkdtm: Performing direct entry EXEC_USERSPACE\n  lkdtm: attempting ok execution at c0000000005bf560\n  lkdtm: attempting bad execution at 00003fff8d940000\n  Unable to handle kernel paging request for instruction fetch\n  Faulting instruction address: 0x3fff8d940000\n  Oops: Kernel access of bad area, sig: 11 [#1]\n  NIP: 00003fff8d940000 LR: c0000000005bfa58 CTR: 00003fff8d940000\n  REGS: c0000000f1fcf900 TRAP: 0400   Not tainted  (4.9.0-rc5-compiler_gcc-6.2.0-00109-g956dbc06232a)\n  MSR: 9000000010009033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 48002222  XER: 00000000\n  ...\n  Call Trace:\n    lkdtm_EXEC_USERSPACE+0x104/0x120 (unreliable)\n    lkdtm_do_action+0x3c/0x80\n    direct_entry+0x100/0x1b0\n    full_proxy_write+0x94/0x100\n    __vfs_write+0x3c/0x1b0\n    vfs_write+0xcc/0x230\n    SyS_write+0x60/0x110\n    system_call+0x38/0xfc\n\nSigned-off-by: Balbir Singh <bsingharora@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/mm/pgtable-radix.c||arch/powerpc/mm/pgtable-radix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/mm/pgtable-radix.c||arch/powerpc/mm/pgtable-radix.c": [
          "File: arch/powerpc/mm/pgtable-radix.c -> arch/powerpc/mm/pgtable-radix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:  mtspr(SPRN_AMOR, (3ul << 62));",
          "325: }",
          "327: void __init radix__early_init_mmu(void)",
          "328: {",
          "329:  unsigned long lpcr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: static void radix_init_iamr(void)",
          "328: {",
          "329:  unsigned long iamr;",
          "334:  if (cpu_has_feature(CPU_FTR_POWER9_DD1))",
          "335:   iamr = 0;",
          "336:  else",
          "337:   iamr = (1ul << 62);",
          "344:  mtspr(SPRN_IAMR, iamr);",
          "345: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:  memblock_set_current_limit(MEMBLOCK_ALLOC_ANYWHERE);",
          "388:  radix_init_pgtable();",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:  radix_init_iamr();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:         __pa(partition_tb) | (PATB_SIZE_SHIFT - 12));",
          "403:   radix_init_amor();",
          "404:  }",
          "405: }",
          "407: void radix__mmu_cleanup_all(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:  radix_init_iamr();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
      "candidate_info": {
        "commit_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
        "files": [
          "net/ipv6/icmp.c"
        ],
        "message": "net: handle no dst on skb in icmp6_send\n\nAndrey reported the following while fuzzing the kernel with syzkaller:\n\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 3859 Comm: a.out Not tainted 4.9.0-rc6+ #429\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\ntask: ffff8800666d4200 task.stack: ffff880067348000\nRIP: 0010:[<ffffffff833617ec>]  [<ffffffff833617ec>]\nicmp6_send+0x5fc/0x1e30 net/ipv6/icmp.c:451\nRSP: 0018:ffff88006734f2c0  EFLAGS: 00010206\nRAX: ffff8800666d4200 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: dffffc0000000000 RDI: 0000000000000018\nRBP: ffff88006734f630 R08: ffff880064138418 R09: 0000000000000003\nR10: dffffc0000000000 R11: 0000000000000005 R12: 0000000000000000\nR13: ffffffff84e7e200 R14: ffff880064138484 R15: ffff8800641383c0\nFS:  00007fb3887a07c0(0000) GS:ffff88006cc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000000 CR3: 000000006b040000 CR4: 00000000000006f0\nStack:\n ffff8800666d4200 ffff8800666d49f8 ffff8800666d4200 ffffffff84c02460\n ffff8800666d4a1a 1ffff1000ccdaa2f ffff88006734f498 0000000000000046\n ffff88006734f440 ffffffff832f4269 ffff880064ba7456 0000000000000000\nCall Trace:\n [<ffffffff83364ddc>] icmpv6_param_prob+0x2c/0x40 net/ipv6/icmp.c:557\n [<     inline     >] ip6_tlvopt_unknown net/ipv6/exthdrs.c:88\n [<ffffffff83394405>] ip6_parse_tlv+0x555/0x670 net/ipv6/exthdrs.c:157\n [<ffffffff8339a759>] ipv6_parse_hopopts+0x199/0x460 net/ipv6/exthdrs.c:663\n [<ffffffff832ee773>] ipv6_rcv+0xfa3/0x1dc0 net/ipv6/ip6_input.c:191\n ...\n\nicmp6_send / icmpv6_send is invoked for both rx and tx paths. In both\ncases the dst->dev should be preferred for determining the L3 domain\nif the dst has been set on the skb. Fallback to the skb->dev if it has\nnot. This covers the case reported here where icmp6_send is invoked on\nRx before the route lookup.\n\nFixes: 5d41ce29e (\"net: icmp6_send should use dst dev to determine L3 domain\")\nReported-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/icmp.c||net/ipv6/icmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:  if (__ipv6_addr_needs_scope_id(addr_type))",
          "449:   iif = skb->dev->ifindex;",
          "",
          "[Removed Lines]",
          "450:  else",
          "451:   iif = l3mdev_master_ifindex(skb_dst(skb)->dev);",
          "",
          "[Added Lines]",
          "450:  else {",
          "451:   dst = skb_dst(skb);",
          "452:   iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);",
          "453:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b95fda2c4fcb6d6625963f889247538f247fce0",
      "candidate_info": {
        "commit_hash": "2b95fda2c4fcb6d6625963f889247538f247fce0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2b95fda2c4fcb6d6625963f889247538f247fce0",
        "files": [
          "crypto/asymmetric_keys/x509_cert_parser.c"
        ],
        "message": "X.509: Fix double free in x509_cert_parse() [ver #3]\n\nWe shouldn't free cert->pub->key in x509_cert_parse() because\nx509_free_certificate() also does this:\n\tBUG: Double free or freeing an invalid pointer\n\t...\n\tCall Trace:\n\t [<ffffffff81896c20>] dump_stack+0x63/0x83\n\t [<ffffffff81356571>] kasan_object_err+0x21/0x70\n\t [<ffffffff81356ed9>] kasan_report_double_free+0x49/0x60\n\t [<ffffffff813561ad>] kasan_slab_free+0x9d/0xc0\n\t [<ffffffff81350b7a>] kfree+0x8a/0x1a0\n\t [<ffffffff81844fbf>] public_key_free+0x1f/0x30\n\t [<ffffffff818455d4>] x509_free_certificate+0x24/0x90\n\t [<ffffffff818460bc>] x509_cert_parse+0x2bc/0x300\n\t [<ffffffff81846cae>] x509_key_preparse+0x3e/0x330\n\t [<ffffffff818444cf>] asymmetric_key_preparse+0x6f/0x100\n\t [<ffffffff8178bec0>] key_create_or_update+0x260/0x5f0\n\t [<ffffffff8178e6d9>] SyS_add_key+0x199/0x2a0\n\t [<ffffffff821d823b>] entry_SYSCALL_64_fastpath+0x1e/0xad\n\tObject at ffff880110bd1900, in cache kmalloc-512 size: 512\n\t....\n\tFreed:\n\tPID = 2579\n\t[<ffffffff8104283b>] save_stack_trace+0x1b/0x20\n\t[<ffffffff813558f6>] save_stack+0x46/0xd0\n\t[<ffffffff81356183>] kasan_slab_free+0x73/0xc0\n\t[<ffffffff81350b7a>] kfree+0x8a/0x1a0\n\t[<ffffffff818460a3>] x509_cert_parse+0x2a3/0x300\n\t[<ffffffff81846cae>] x509_key_preparse+0x3e/0x330\n\t[<ffffffff818444cf>] asymmetric_key_preparse+0x6f/0x100\n\t[<ffffffff8178bec0>] key_create_or_update+0x260/0x5f0\n\t[<ffffffff8178e6d9>] SyS_add_key+0x199/0x2a0\n\t[<ffffffff821d823b>] entry_SYSCALL_64_fastpath+0x1e/0xad\n\nFixes: db6c43bd2132 (\"crypto: KEYS: convert public key and digsig asym to the akcipher api\")\nSigned-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: David Howells <dhowells@redhat.com>\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
        "before_after_code_files": [
          "crypto/asymmetric_keys/x509_cert_parser.c||crypto/asymmetric_keys/x509_cert_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asymmetric_keys/x509_cert_parser.c||crypto/asymmetric_keys/x509_cert_parser.c": [
          "File: crypto/asymmetric_keys/x509_cert_parser.c -> crypto/asymmetric_keys/x509_cert_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:  return cert;",
          "135: error_decode:",
          "137:  kfree(ctx);",
          "138: error_no_ctx:",
          "139:  x509_free_certificate(cert);",
          "",
          "[Removed Lines]",
          "136:  kfree(cert->pub->key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
      "candidate_info": {
        "commit_hash": "2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2319f847a8910cff1d46c9b66aa1dd7cc3e836a9",
        "files": [
          "drivers/scsi/lpfc/lpfc_sli.c"
        ],
        "message": "scsi: lpfc: fix oops/BUG in lpfc_sli_ringtxcmpl_put()\n\nThe BUG_ON() recently introduced in lpfc_sli_ringtxcmpl_put() is hit in\nthe lpfc_els_abort() > lpfc_sli_issue_abort_iotag() >\nlpfc_sli_abort_iotag_issue() function path [similar names], due to\n'piocb->vport == NULL':\n\n\tBUG_ON(!piocb || !piocb->vport);\n\nThis happens because lpfc_sli_abort_iotag_issue() doesn't set the\n'abtsiocbp->vport' pointer -- but this is not the problem.\n\nPreviously, lpfc_sli_ringtxcmpl_put() accessed 'piocb->vport' only if\n'piocb->iocb.ulpCommand' is neither CMD_ABORT_XRI_CN nor\nCMD_CLOSE_XRI_CN, which are the only possible values for\nlpfc_sli_abort_iotag_issue():\n\n    lpfc_sli_ringtxcmpl_put():\n\n        if ((unlikely(pring->ringno == LPFC_ELS_RING)) &&\n           (piocb->iocb.ulpCommand != CMD_ABORT_XRI_CN) &&\n           (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN) &&\n            (!(piocb->vport->load_flag & FC_UNLOADING)))\n\n    lpfc_sli_abort_iotag_issue():\n\n        if (phba->link_state >= LPFC_LINK_UP)\n                iabt->ulpCommand = CMD_ABORT_XRI_CN;\n        else\n                iabt->ulpCommand = CMD_CLOSE_XRI_CN;\n\nSo, this function path would not have hit this possible NULL pointer\ndereference before.\n\nIn order to fix this regression, move the second part of the BUG_ON()\ncheck prior to the pointer dereference that it does check for.\n\nFor reference, this is the stack trace observed. The problem happened\nbecause an unsolicited event was received - a PLOGI was received after\nour PLOGI was issued but not yet complete, so the discovery state\nmachine goes on to sw-abort our PLOGI.\n\n    kernel BUG at drivers/scsi/lpfc/lpfc_sli.c:1326!\n    Oops: Exception in kernel mode, sig: 5 [#1]\n    <...>\n    NIP [...] lpfc_sli_ringtxcmpl_put+0x1c/0xf0 [lpfc]\n    LR  [...] __lpfc_sli_issue_iocb_s4+0x188/0x200 [lpfc]\n    Call Trace:\n    [...] [...] __lpfc_sli_issue_iocb_s4+0xb0/0x200 [lpfc] (unreliable)\n    [...] [...] lpfc_sli_issue_abort_iotag+0x2b4/0x350 [lpfc]\n    [...] [...] lpfc_els_abort+0x1a8/0x4a0 [lpfc]\n    [...] [...] lpfc_rcv_plogi+0x6d4/0x700 [lpfc]\n    [...] [...] lpfc_rcv_plogi_plogi_issue+0xd8/0x1d0 [lpfc]\n    [...] [...] lpfc_disc_state_machine+0xc0/0x2b0 [lpfc]\n    [...] [...] lpfc_els_unsol_buffer+0xcc0/0x26c0 [lpfc]\n    [...] [...] lpfc_els_unsol_event+0xa8/0x220 [lpfc]\n    [...] [...] lpfc_complete_unsol_iocb+0xb8/0x138 [lpfc]\n    [...] [...] lpfc_sli4_handle_received_buffer+0x6a0/0xec0 [lpfc]\n    [...] [...] lpfc_sli_handle_slow_ring_event_s4+0x1c4/0x240 [lpfc]\n    [...] [...] lpfc_sli_handle_slow_ring_event+0x24/0x40 [lpfc]\n    [...] [...] lpfc_do_work+0xd88/0x1970 [lpfc]\n    [...] [...] kthread+0x108/0x130\n    [...] [...] ret_from_kernel_thread+0x5c/0xbc\n    <...>\n\nCc: stable@vger.kernel.org # v4.8\nFixes: 22466da5b4b7 (\"lpfc: Fix possible NULL pointer dereference\")\nReported-by: Harsha Thyagaraja <hathyaga@in.ibm.com>\nSigned-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>\nReviewed-by: Johannes Thumshirn <jthumshirn@suse.de>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/lpfc/lpfc_sli.c||drivers/scsi/lpfc/lpfc_sli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/lpfc/lpfc_sli.c||drivers/scsi/lpfc/lpfc_sli.c": [
          "File: drivers/scsi/lpfc/lpfc_sli.c -> drivers/scsi/lpfc/lpfc_sli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323: {",
          "1324:  lockdep_assert_held(&phba->hbalock);",
          "1328:  list_add_tail(&piocb->list, &pring->txcmplq);",
          "1329:  piocb->iocb_flag |= LPFC_IO_ON_TXCMPLQ;",
          "1331:  if ((unlikely(pring->ringno == LPFC_ELS_RING)) &&",
          "1332:     (piocb->iocb.ulpCommand != CMD_ABORT_XRI_CN) &&",
          "1339:  return 0;",
          "1340: }",
          "",
          "[Removed Lines]",
          "1326:  BUG_ON(!piocb || !piocb->vport);",
          "1333:     (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN) &&",
          "1334:      (!(piocb->vport->load_flag & FC_UNLOADING)))",
          "1335:   mod_timer(&piocb->vport->els_tmofunc,",
          "1336:      jiffies +",
          "1337:      msecs_to_jiffies(1000 * (phba->fc_ratov << 1)));",
          "",
          "[Added Lines]",
          "1326:  BUG_ON(!piocb);",
          "1333:     (piocb->iocb.ulpCommand != CMD_CLOSE_XRI_CN)) {",
          "1334:   BUG_ON(!piocb->vport);",
          "1335:   if (!(piocb->vport->load_flag & FC_UNLOADING))",
          "1336:    mod_timer(&piocb->vport->els_tmofunc,",
          "1337:       jiffies +",
          "1338:       msecs_to_jiffies(1000 * (phba->fc_ratov << 1)));",
          "1339:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}