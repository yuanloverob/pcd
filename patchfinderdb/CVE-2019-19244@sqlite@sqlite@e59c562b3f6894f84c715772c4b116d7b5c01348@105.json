{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
      "candidate_info": {
        "commit_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Add new cases to speedtest1 for measuring performance of binary to/from decimal conversions of floating point values.\n\nFossilOrigin-Name: b84e7057c05338347b4267f7ccc1d7b9b6d4e9a941ce8b76bf2c27c26772000c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed250b4e18ea042d681bbe8d7ed00895564f4525c22928a003a84585b4756ec3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:     speedtest1_run();",
          "1192:   }",
          "1193:   speedtest1_end_test();",
          "1194: }",
          "1196: #ifdef SQLITE_ENABLE_RTREE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195:   n = g.szTest*5000;",
          "1196:   speedtest1_begin_test(140, \"%d calls to round()\", n);",
          "1197:   speedtest1_exec(\"SELECT sum(round(a,2)+round(b,4)) FROM t1;\");",
          "1198:   speedtest1_end_test();",
          "1201:   speedtest1_begin_test(150, \"%d printf() calls\", n*4);",
          "1202:   speedtest1_exec(",
          "1203:     \"WITH c(fmt) AS (VALUES('%%g'),('%%e'),('%%!g'),('%%.20f'))\"",
          "1204:     \"SELECT sum(printf(fmt,a)) FROM t1, c\"",
          "1205:   );",
          "1206:   speedtest1_end_test();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
      "candidate_info": {
        "commit_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Possible fix for [a7debbe0].\n\nFossilOrigin-Name: 1863b7bf12521bdd2b51c5b8d3a4634bff3e15d3713e0b5343952df7da02f794",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test 2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test 2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test 2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test 3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test 3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
      "candidate_info": {
        "commit_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/pragma.test"
        ],
        "message": "Update requirement marks due to changes in documentation wording.\n\nFossilOrigin-Name: 326cdc16f4db23c1d17596e4ef8d9d7abc672d48665950029ba53fd40c1b2d99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/pragma.test||test/pragma.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     CREATE INDEX i1 ON t1(b,c);",
          "1860:     CREATE INDEX i2 ON t1(c,d);",
          "1861:     CREATE INDEX i2x ON t1(d COLLATE nocase, c DESC);",
          "1862:     CREATE TABLE t2(x INTEGER REFERENCES t1);",
          "1863:   }",
          "1864:   db2 eval {SELECT name FROM sqlite_master}",
          "1866: do_test 23.2a {",
          "1867:   db eval {",
          "1868:     DROP INDEX i2;",
          "",
          "[Removed Lines]",
          "1865: } {t1 i1 i2 i2x t2}",
          "",
          "[Added Lines]",
          "1862:     CREATE INDEX i3 ON t1(d,b+c,c);",
          "1866: } {t1 i1 i2 i2x i3 t2}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1889: # means left-most. Key columns come before auxiliary columns.)",
          "1890: #",
          "1891: # (The second column of output from PRAGMA index_xinfo is...)",
          "1893: # being indexed, or -1 if the index-column is the rowid of the table",
          "1895: #",
          "1896: # (The third column of output from PRAGMA index_xinfo is...)",
          "1899: #",
          "1900: # (The fourth column of output from PRAGMA index_xinfo is...)",
          "1901: # EVIDENCE-OF: R-11847-09179 1 if the index-column is sorted in reverse",
          "",
          "[Removed Lines]",
          "1892: # EVIDENCE-OF: R-40889-06838 The rank of the column within the table",
          "1894: # being indexed.",
          "1897: # EVIDENCE-OF: R-22751-28901 The name of the column being indexed, or",
          "1898: # NULL if the index-column is the rowid of the table being indexed.",
          "",
          "[Added Lines]",
          "1893: # EVIDENCE-OF: R-06603-49335 The rank of the column within the table",
          "1895: # being indexed and -2 if the index is on an expression.",
          "1898: # EVIDENCE-OF: R-40641-22898 The name of the column being indexed, or",
          "1899: # NULL if the index-column is the rowid of the table being indexed or an",
          "1900: # expression.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1915: do_test 23.2d {",
          "1916:   db2 eval {PRAGMA index_xinfo(i2x)}",
          "1917: } {0 3 d 0 nocase 1 1 2 c 1 BINARY 1 2 -1 {} 0 BINARY 0}",
          "1919: # EVIDENCE-OF: R-64103-17776 PRAGMA schema.index_list(table-name); This",
          "1920: # pragma returns one row for each index associated with the given table.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1920: do_test 23.2e {",
          "1921:   db2 eval {PRAGMA index_xinfo(i3)}",
          "1922: } {0 3 d 0 BINARY 1 1 -2 {} 0 BINARY 1 2 2 c 0 BINARY 1 3 -1 {} 0 BINARY 0}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1936: #",
          "1937: do_test 23.3 {",
          "1938:   db eval {",
          "1939:     CREATE INDEX i3 ON t1(d,b,c);",
          "1940:   }",
          "1941:   capture_pragma db2 out {PRAGMA index_list(t1)}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:     DROP INDEX IF EXISTS i3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
      "candidate_info": {
        "commit_hash": "a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a9a5465eb44d0d8f1c3c9d288b7f23f628ddb50b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() that may be false for corrupt databases.\n\nFossilOrigin-Name: b2ce5ed175cb5029ac07392ae371c86eeec23c74624aad007dee51cf359f3eeb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f35b3b78a461b0617a5cd04f60d2ab277bcc7c994dae463851a3cb5d041a723",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4284:       rc = newDatabase(pBt);",
          "4285:       pBt->nPage = get4byte(28 + pBt->pPage1->aData);",
          "4291:     }",
          "4292:     sqlite3BtreeLeave(p);",
          "4293:   }",
          "",
          "[Removed Lines]",
          "4290:       assert( pBt->nPage>0 );",
          "",
          "[Added Lines]",
          "4289:       assert( CORRUPT_DB || pBt->nPage>0 );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:   INSERT INTO t3 SELECT * FROM t2;",
          "839: } {1 {database disk image is malformed}}",
          "841: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: #-------------------------------------------------------------------------",
          "842: reset_db",
          "843: do_test 9.0 {",
          "844:   sqlite3 db {}",
          "845:   db deserialize [decode_hexdb {",
          "846: | size 8192 pagesize 4096 filename crash-ab10597e4e1c32.db",
          "847: | page 1 offset 0",
          "848: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "849: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 00   .....@  ........",
          "850: |     96: 00 00 00 00 0d 00 00 00 01 0f d6 00 0f d6 00 00   ................",
          "851: |   4048: 00 00 00 00 00 00 28 01 06 17 11 11 01 3d 74 61   ......(......=ta",
          "852: |   4064: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "853: |   4080: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 29   ABLE t1(a,b,c,d)",
          "854: | page 2 offset 4096",
          "855: |      0: 0d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "856: | end crash-ab10597e4e1c32.db",
          "857: }]} {}",
          "859: do_execsql_test 9.1 {",
          "860:   SAVEPOINT one;",
          "861: }",
          "862: do_catchsql_test 9.3 {",
          "863:   INSERT INTO t1(b,c) VALUES(5,6);",
          "864: } {1 {database disk image is malformed}}",
          "865: do_execsql_test 9.3 {",
          "866:   ROLLBACK TO one;",
          "867: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cbbd195ca84adb2bd2a2ae579a0f9fcbe4de595",
      "candidate_info": {
        "commit_hash": "3cbbd195ca84adb2bd2a2ae579a0f9fcbe4de595",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cbbd195ca84adb2bd2a2ae579a0f9fcbe4de595",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5content.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Prevent an fts5 table from being its own content table, or part of a view that is the content table.\n\nFossilOrigin-Name: b6d52c9364767ff4ab7279ae981afb97799299dcfaf38a0110c40ca82c72a825",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:   assert( SQLITE_INDEX_CONSTRAINT_GE<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "537:   assert( SQLITE_INDEX_CONSTRAINT_LE<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "540:   for(i=0; i<pInfo->nConstraint; i++){",
          "541:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:   if( pConfig->bLock ){",
          "540:     pTab->base.zErrMsg = sqlite3_mprintf(",
          "541:         \"recursively defined fts5 content table\"",
          "542:     );",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     }else{",
          "139:       int f = SQLITE_PREPARE_PERSISTENT;",
          "140:       if( eStmt>FTS5_STMT_LOOKUP ) f |= SQLITE_PREPARE_NO_VTAB;",
          "141:       rc = sqlite3_prepare_v3(pC->db, zSql, -1, f, &p->aStmt[eStmt], 0);",
          "142:       sqlite3_free(zSql);",
          "143:       if( rc!=SQLITE_OK && pzErrMsg ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:       p->pConfig->bLock++;",
          "143:       p->pConfig->bLock--;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5content.test||ext/fts5/test/fts5content.test": [
          "File: ext/fts5/test/fts5content.test -> ext/fts5/test/fts5content.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   SELECT name FROM sqlite_master;",
          "254: } {}",
          "257: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: #---------------------------------------------------------------------------",
          "257: # Check that an fts5 table cannot be its own content table.",
          "258: #",
          "259: reset_db",
          "260: do_execsql_test 7.1 {",
          "261:   CREATE VIRTUAL TABLE t1 USING fts5(a, c=t1 );",
          "262:   INSERT INTO t1( a ) VALUES('abc');",
          "263: }",
          "264: do_catchsql_test 7.2 {",
          "265:   SELECT * FROM t1;",
          "266: } {1 {recursively defined fts5 content table}}",
          "267: do_catchsql_test 7.3 {",
          "268:   SELECT * FROM t1('abc');",
          "269: } {1 {recursively defined fts5 content table}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bd4b97d6405c9b093f3bfed914c56088ee13e4a2242be62b74a86660f74f533",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}