{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ebe09c3777f4c36eb6cc1821fa6933fa668e2ae1",
      "candidate_info": {
        "commit_hash": "ebe09c3777f4c36eb6cc1821fa6933fa668e2ae1",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/ebe09c3777f4c36eb6cc1821fa6933fa668e2ae1",
        "files": [
          "SEKManager.cpp",
          "ServerInit.cpp",
          "secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp",
          "testw.py"
        ],
        "message": "SKALE-2002 add new test, remove redunant code",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp",
          "testw.py||testw.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:     enter_SEK();",
          "226:   } else {",
          "227:       if (encr_SEK_ptr == nullptr) {",
          "229:           gen_SEK();",
          "230:       } else {",
          "231:           trustedSetSEK(encr_SEK_ptr);",
          "",
          "[Removed Lines]",
          "228:           spdlog::error(\"SEK was not created yet. Going to create SEK\");",
          "",
          "[Added Lines]",
          "226:           spdlog::warn(\"SEK was not created yet. Going to create SEK\");",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     }",
          "77: #endif",
          "82:     status = sgx_create_enclave_search(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token,",
          "",
          "[Removed Lines]",
          "79:         spdlog::debug(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "",
          "[Added Lines]",
          "79:     spdlog::debug(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp": [
          "File: secure_enclave/EnclaveCommon.cpp -> secure_enclave/EnclaveCommon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     libff::init_alt_bn128_params();",
          "107: }",
          "158: bool enclave_sign(const char *_keyString, const char *_hashXString, const char *_hashYString,",
          "159:           char* sig) {",
          "",
          "[Removed Lines]",
          "109: void checkKey(int *errStatus, char *err_string, const char *_keyString) {",
          "111:     uint64_t keyLen = strnlen(_keyString, MAX_KEY_LENGTH);",
          "115:     if (keyLen == MAX_KEY_LENGTH) {",
          "116:         snprintf(err_string, MAX_ERR_LEN, \"keyLen != MAX_KEY_LENGTH\");",
          "117:         return;",
          "118:     }",
          "124:     if (_keyString == nullptr) {",
          "125:         snprintf(err_string, BUF_LEN, \"Null key\");",
          "126:         return;",
          "127:     }",
          "133:     for (int i = keyLen; i < MAX_KEY_LENGTH; i++) {",
          "134:         if (_keyString[i] != 0) {",
          "135:             snprintf(err_string, BUF_LEN, \"Unpadded key\");",
          "136:         }",
          "137:     }",
          "155: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h": [
          "File: secure_enclave/EnclaveCommon.h -> secure_enclave/EnclaveCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: EXTERNC void check_key(int *errStatus, char *err_string, const char* _keyString);",
          "",
          "[Removed Lines]",
          "37: EXTERNC void checkKey(int *errStatus, char *err_string, const char* _keyString);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "171:     char arr_x[len];",
          "174:     int n_zeroes = 64 - strlen(arr_x);",
          "175:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "172:     char *px = mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "172:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "181:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "183:     n_zeroes = 64 - strlen(arr_y);",
          "184:     for (int i = 0; i < n_zeroes; i++) {",
          "185:         pub_key_y[i] = '0';",
          "186:     }",
          "187:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "188:     char skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "190:     snprintf(errString, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "192:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "182:     char *py = mpz_get_str(arr_y, base, Pkey->y);",
          "189:     char *s = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "[Added Lines]",
          "182:     mpz_get_str(arr_y, base, Pkey->y);",
          "189:     mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391: }",
          "395:                  uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "397:     LOG_DEBUG (__FUNCTION__);",
          "",
          "[Removed Lines]",
          "394: void trustedEncryptKey(int *errStatus, char *errString, char *key,",
          "",
          "[Added Lines]",
          "394: void trustedEncryptKey(int *errStatus, char *errString, const char *key,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "401:     memset(errString, 0, BUF_LEN);",
          "410:     uint32_t sealedLen = sgx_calc_sealed_data_size(0, MAX_KEY_LENGTH);",
          "413:     if (sealedLen > BUF_LEN) {",
          "415:         snprintf(errString, BUF_LEN, \"sealedLen > MAX_ENCRYPTED_KEY_LENGTH\");",
          "",
          "[Removed Lines]",
          "403:     checkKey(errStatus, errString, key);",
          "405:     if (*errStatus != 0) {",
          "406:         snprintf(errString + strlen(errString), BUF_LEN, \"check_key failed\");",
          "407:         return;",
          "408:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   public void trustedEncryptKey (",
          "48:                                 [user_check] int *errStatus,",
          "49:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "51:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "52:                                 [user_check] uint32_t *enc_len);",
          "",
          "[Removed Lines]",
          "50:                                 [in, count = SMALL_BUF_SIZE] char* key,",
          "",
          "[Added Lines]",
          "50:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:     int errStatus = -1;",
          "1008:     uint32_t encLen;",
          "1009:     string key = SAMPLE_AES_KEY;",
          "1010:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "1007:     vector<char> errMsg(BUF_LEN, 0);;",
          "",
          "[Added Lines]",
          "1007:     vector<char> errMsg(BUF_LEN, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1012:     status = trustedEncryptKeyAES(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &encLen);",
          "1014:     REQUIRE(status == 0);",
          "1017:     vector<char> decr_key(BUF_LEN, 0);",
          "1018:     status = trustedDecryptKeyAES(eid, &errStatus, errMsg.data(), encrypted_key.data(), encLen, decr_key.data());",
          "1020:     REQUIRE(status == 0);",
          "1021:     REQUIRE(key.compare(decr_key.data()) == 0);",
          "1023: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1015:     REQUIRE( errStatus == 0 );",
          "1022:     REQUIRE( errStatus == 0 );",
          "1023:     REQUIRE(key.compare(decr_key.data()) == 0);",
          "1025: }",
          "1028: TEST_CASE_METHOD(TestFixture, \"SGX encrypt/decrypt\", \"[sgx-encrypt-decrypt]\") {",
          "1031:     int errStatus = -1;",
          "1032:     vector<char> errMsg(BUF_LEN, 0);",
          "1033:     uint32_t encLen;",
          "1034:     string key = SAMPLE_AES_KEY;",
          "1035:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
          "1037:     status = trustedEncryptKey(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &encLen);",
          "1039:     REQUIRE(status == 0);",
          "1040:     REQUIRE( errStatus == 0 );",
          "1043:     vector<char> decr_key(BUF_LEN, 0);",
          "1044:     status = trustedDecryptKey(eid, &errStatus, errMsg.data(), encrypted_key.data(), encLen, decr_key.data());",
          "1046:     REQUIRE(status == 0);",
          "1047:     REQUIRE( errStatus == 0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1037: }",
          "1039: TEST_CASE_METHOD(TestFixture, \"AES == NOT AES\", \"[aes-not-aes]\") {",
          "1063:     int errStatus = 0;",
          "1064:     vector<char> errMsg(BUF_LEN, 0);",
          "1065:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
          "1066:     uint32_t enc_len = 0;",
          "1068:     REQUIRE(errStatus == SGX_SUCCESS);",
          "1070:     int errStatusAES = 0;",
          "1071:     vector<char> errMsgAES(BUF_LEN, 0);",
          "1072:     vector <uint8_t> encrPrivKeyAES(BUF_LEN, 0);",
          "1073:     uint32_t enc_lenAES = 0;",
          "1075:     REQUIRE( errStatusAES == SGX_SUCCESS );",
          "1077:     errMsg.clear();",
          "",
          "[Removed Lines]",
          "1040:     domain_parameters curve = domain_parameters_init();",
          "1041:     domain_parameters_load_curve(curve, secp256k1);",
          "1043:     gmp_randstate_t state;",
          "1044:     gmp_randinit_default(state);",
          "1046:     mpz_t rand;",
          "1047:     mpz_init(rand);",
          "1048:     mpz_urandomb(rand, state, 256);",
          "1050:     mpz_t seed;",
          "1051:     mpz_init(seed);",
          "1052:     mpz_mod(seed, rand, curve->p);",
          "1054:     mpz_t skey;",
          "1055:     mpz_init(skey);",
          "1056:     mpz_mod(skey, seed, curve->p);",
          "1057:     mpz_clear(seed);",
          "1059:     char skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "1060:     char *s = mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "1061:     gmp_randclear(state);",
          "1067:     trustedEncryptKey(eid, &errStatus, errMsg.data(), skey_str, encrPrivKey.data(), &enc_len);",
          "1074:     trustedEncryptKeyAES(eid, &errStatusAES, errMsgAES.data(), skey_str, encrPrivKeyAES.data(), &enc_lenAES);",
          "",
          "[Added Lines]",
          "1067:     std::string key = SAMPLE_AES_KEY;",
          "1073:     trustedEncryptKey(eid, &errStatus, errMsg.data(), key.c_str(), encrPrivKey.data(), &enc_len);",
          "1080:     trustedEncryptKeyAES(eid, &errStatusAES, errMsgAES.data(), key.c_str(), encrPrivKeyAES.data(), &enc_lenAES);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1080:     vector<char> signatureS(BUF_LEN, 0);",
          "1081:     uint8_t signatureV = 0;",
          "1085:                               signatureR.data(),",
          "1086:                               signatureS.data(), &signatureV, 16);",
          "1087:     REQUIRE( status == SGX_SUCCESS );",
          "1089:     errMsgAES.clear();",
          "1090:     vector<char> signatureRAES(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "1083:     uint32_t dec_len = 0;",
          "1084:     status = trustedEcdsaSign(eid, &errStatus, errMsg.data(), encrPrivKey.data(), dec_len, (unsigned char *) hex.data(),",
          "",
          "[Added Lines]",
          "1090:     status = trustedEcdsaSign(eid, &errStatus, errMsg.data(), encrPrivKey.data(), enc_len, (unsigned char *) hex.data(),",
          "1094:     REQUIRE( errStatus == SGX_SUCCESS );",
          "",
          "---------------"
        ],
        "testw.py||testw.py": [
          "File: testw.py -> testw.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             \"[dkg-pub-shares]\",",
          "54:             \"[many-threads-crypto]\",",
          "55:             \"[aes-encrypt-decrypt]\",",
          "56:             \"[aes-dkg]\",",
          "57:             \"[aes-not-aes]\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:             \"[sgx-encrypt-decrypt]\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32ccd711017bed253ae94c430803e72c82191523",
      "candidate_info": {
        "commit_hash": "32ccd711017bed253ae94c430803e72c82191523",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/32ccd711017bed253ae94c430803e72c82191523",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3228",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"AESUtils.h\"",
          "32: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
          "34:     if (!message) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: sgx_aes_gcm_128bit_key_t AES_key;",
          "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   return status;",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
          "107:     if (!message) {",
          "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
          "109:         return -1;",
          "110:     }",
          "112:     if (!encr_message) {",
          "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
          "114:         return -2;",
          "115:     }",
          "117:     uint64_t len = strlen(message) + 1;",
          "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
          "120:         LOG_ERROR(\"Output buffer too small\");",
          "121:         return -3;",
          "122:     }",
          "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
          "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "129:                                                      NULL, 0,",
          "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
          "132:     return status;",
          "133: }",
          "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
          "137:     if (!message) {",
          "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
          "139:         return -1;",
          "140:     }",
          "142:     if (!encr_message) {",
          "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
          "144:         return -2;",
          "145:     }",
          "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
          "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
          "150:         return -1;",
          "151:     }",
          "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
          "157:     if (msgLen < len) {",
          "158:         LOG_ERROR(\"Output buffer not large enough\");",
          "159:         return -2;",
          "160:     }",
          "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
          "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
          "164:                                                      (unsigned char*) message,",
          "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
          "166:                                                      NULL, 0,",
          "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
          "169:     return status;",
          "170: }",
          "177: void derive_DH_Key() {",
          "178:     memcpy(AES_DH_key, AES_key, SGX_AESGCM_KEY_SIZE );",
          "179: }",
          "",
          "---------------"
        ],
        "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
          "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_AESUTILS_H",
          "25: #define SGXD_AESUTILS_H",
          "29: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
          "30: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
          "36: #endif //SGXD_AESUTILS_H",
          "",
          "[Removed Lines]",
          "27: sgx_aes_gcm_128bit_key_t AES_key;",
          "32: int AES_encrypt_dh(char *message, uint8_t *encr_message, uint64_t encrLen);",
          "33: int AES_decrypt_dh(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
          "",
          "[Added Lines]",
          "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
          "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
          "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
          "34: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
          "36: void derive_DH_Key();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:     carray2Hex((uint8_t*) SEK_raw, SGX_AESGCM_KEY_SIZE, sek_hex);",
          "294:     memcpy(AES_key, SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "296:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, sek_hex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:     derive_DH_Key();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:     hex2carray(aes_key_hex, &len, (uint8_t *) AES_key);",
          "335:     SET_SUCCESS",
          "336:     clean:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:     derive_DH_Key();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:     uint64_t len;",
          "351:     hex2carray(sek_hex, &len, (uint8_t *) AES_key);",
          "353:     sealHexSEK(errStatus, errString, encrypted_sek, enc_len, (char *)sek_hex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:     derive_DH_Key();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:     if (status != 0) {",
          "",
          "[Removed Lines]",
          "610:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
          "",
          "[Added Lines]",
          "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "649:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
          "",
          "[Removed Lines]",
          "647:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN);",
          "",
          "[Added Lines]",
          "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc1458a2dd25f5eeae6b939082f7b3a48c9effeb",
      "candidate_info": {
        "commit_hash": "fc1458a2dd25f5eeae6b939082f7b3a48c9effeb",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/fc1458a2dd25f5eeae6b939082f7b3a48c9effeb",
        "files": [
          "BLSCrypto.cpp",
          "ECDSACrypto.cpp",
          "SGXWalletServer.cpp",
          "SGXWalletServer.h",
          "SGXWalletServer.hpp",
          "TestUtils.cpp",
          "TestUtils.h",
          "secure_enclave/AESUtils.c",
          "sgxwall.cpp",
          "sgxwall.h",
          "sgxwallet_common.h",
          "stubclient.cpp"
        ],
        "message": "SKALE-2794 refactoring",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.h||SGXWalletServer.h",
          "SGXWalletServer.hpp||SGXWalletServer.hpp",
          "TestUtils.cpp||TestUtils.cpp",
          "TestUtils.h||TestUtils.h",
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "sgxwall.cpp||sgxwall.cpp",
          "sgxwall.h||sgxwall.h",
          "sgxwallet_common.h||sgxwallet_common.h",
          "stubclient.cpp||stubclient.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "184:     }",
          "193:     shared_ptr<signatures::Bls> obj;",
          "194:     obj = make_shared<signatures::Bls>(signatures::Bls(_t, _n));",
          "199:     int errStatus = 0;",
          "202:     string *xStr = FqToString(&(hash_with_hint.first.X));",
          "204:     if (xStr == nullptr) {",
          "",
          "[Removed Lines]",
          "196:     std::pair<libff::alt_bn128_G1, std::string> hash_with_hint =",
          "197:             obj->HashtoG1withHint(hash);",
          "",
          "[Added Lines]",
          "189:     std::pair<libff::alt_bn128_G1, std::string> hash_with_hint = obj->HashtoG1withHint(hash);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <gmp.h>",
          "32: #include <random>",
          "35: #include \"spdlog/spdlog.h\"",
          "36: #include \"common.h\"",
          "39: #include \"secure_enclave/Verify.h\"",
          "41: #include \"BLSCrypto.h\"",
          "43: #include \"ECDSACrypto.h\"",
          "53: void fillRandomBuffer(vector<unsigned char> &_buffer) {",
          "54:     ifstream devRandom(\"/dev/urandom\", ios::in | ios::binary);",
          "55:     devRandom.exceptions(ifstream::failbit | ifstream::badbit);",
          "",
          "[Removed Lines]",
          "46: string concatPubKeyWith0x(char *pub_key_x, char *pub_key_y) {",
          "47:     string px = pub_key_x;",
          "48:     string py = pub_key_y;",
          "49:     string result = \"0x\" + px + py;",
          "50:     return result;",
          "51: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     spdlog::info(\"encryptKeys set to \" + std::to_string(encryptKeys));",
          "61: }",
          "64: void setOptions(int _printDebugInfo,",
          "65:                 int _printTraceInfo, int _useHTTPS, int _autoconfirm) {",
          "66:     setFullOptions(_printDebugInfo,",
          "67:                    _printTraceInfo, _useHTTPS, _autoconfirm, false);",
          "68: }",
          "72:     auto res = find_if_not(_str.begin(), _str.end(), [](char c) -> bool {",
          "73:         return isdigit(c);",
          "74:     });",
          "75:     return !_str.empty() && res == _str.end();",
          "76: }",
          "79: shared_ptr<SGXWalletServer> SGXWalletServer::server = nullptr;",
          "80: shared_ptr<HttpServer> SGXWalletServer::httpServer = nullptr;",
          "",
          "[Removed Lines]",
          "71: bool isStringDec(string &_str) {",
          "",
          "[Added Lines]",
          "68: bool isStringDec(const string &_str) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     Json::Value result;",
          "163:     int errStatus = UNKNOWN_ERROR;",
          "166:     result[\"status\"] = 0;",
          "167:     result[\"errorMessage\"] = \"\";",
          "",
          "[Removed Lines]",
          "164:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "159:     string errMsg(BUF_LEN, '\\0');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:     char *encryptedKeyShareHex = nullptr;",
          "172:     try {",
          "177:         }",
          "181:         }",
          "183:         result[\"encryptedKeyShare\"] = string(encryptedKeyShareHex);",
          "",
          "[Removed Lines]",
          "173:         encryptedKeyShareHex = encryptBLSKeyShare2Hex(&errStatus, errMsg, _keyShare.c_str());",
          "175:         if (encryptedKeyShareHex == nullptr) {",
          "176:             throw SGXException(UNKNOWN_ERROR, \"\");",
          "179:         if (errStatus != 0) {",
          "180:             throw SGXException(errStatus, errMsg);",
          "",
          "[Added Lines]",
          "168:         encryptedKeyShareHex = encryptBLSKeyShare2Hex(&errStatus, &errMsg.front(), _keyShare.c_str());",
          "170:         if (errStatus != 0) {",
          "171:             throw SGXException(errStatus, errMsg.data());",
          "174:         if (encryptedKeyShareHex == nullptr) {",
          "175:             throw SGXException(UNKNOWN_ERROR, \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     result[\"errorMessage\"] = \"Unknown server error\";",
          "204:     result[\"signatureShare\"] = \"\";",
          "208:     shared_ptr <string> value = nullptr;",
          "",
          "[Removed Lines]",
          "206:     char *signature = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Added Lines]",
          "202:     string signature(BUF_LEN, '\\0');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:     }",
          "239:     try {",
          "241:             result[\"status\"] = -1;",
          "242:             result[\"errorMessage\"] = \"Could not sign\";",
          "243:             return result;",
          "",
          "[Removed Lines]",
          "240:         if (!bls_sign(value->c_str(), _messageHash.c_str(), t, n, _signerIndex, signature)) {",
          "",
          "[Added Lines]",
          "236:         if (!bls_sign(value->c_str(), _messageHash.c_str(), t, n, _signerIndex, &signature.front())) {",
          "",
          "---------------"
        ],
        "SGXWalletServer.h||SGXWalletServer.h": [
          "File: SGXWalletServer.h -> SGXWalletServer.h"
        ],
        "SGXWalletServer.hpp||SGXWalletServer.hpp": [
          "File: SGXWalletServer.hpp -> SGXWalletServer.hpp"
        ],
        "TestUtils.cpp||TestUtils.cpp": [
          "File: TestUtils.cpp -> TestUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:     for (auto&& i : _blsKeyNames)",
          "424:         cerr << i << endl;",
          "",
          "[Removed Lines]",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "TestUtils.h||TestUtils.h": [
          "File: TestUtils.h -> TestUtils.h"
        ],
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"AESUtils.h\"",
          "34:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
          "35:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
          "36:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
          "",
          "[Removed Lines]",
          "32: int AES_encrypt(char *message, uint8_t *encr_message){",
          "",
          "[Added Lines]",
          "32: int AES_encrypt(char *message, uint8_t *encr_message) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:                                                      NULL, 0,",
          "39:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
          "42:     return status;",
          "43: }",
          "47:   uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
          "49:   sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,",
          "",
          "[Removed Lines]",
          "45: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message){",
          "",
          "[Added Lines]",
          "43: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:                                                    NULL, 0,",
          "54:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
          "57:   return status;",
          "",
          "[Removed Lines]",
          "58: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sgxwall.cpp||sgxwall.cpp": [
          "File: sgxwall.cpp -> sgxwall.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"sgxwall.h\"",
          "51: #include \"sgxwallet.h\"",
          "56: void SGXWallet::usage() {",
          "57:     cerr << \"usage: sgxwallet\\n\";",
          "58:     exit(1);",
          "59: }",
          "63: void SGXWallet::printUsage() {",
          "64:     cerr << \"Available flags:\\n\";",
          "71:     cerr << \"-b  Restore from back up (you will need to enter backup key) \\n\";",
          "72:     cerr << \"-y  Do not ask user to acknowledge receipt of backup key \\n\";",
          "73: }",
          "75: enum log_level {L_TRACE = 0, L_DEBUG = 1, L_INFO = 2,L_WARNING = 3,  L_ERROR = 4 };",
          "82:     Json::Value top(Json::objectValue);",
          "83:     Json::Value ecdsaKeysJson(Json::objectValue);",
          "84:     Json::Value blsKeysJson(Json::objectValue);",
          "86:     for (uint i = 0; i < _ecdsaKeyNames.size(); i++) {",
          "87:         auto key = to_string(i + 1);",
          "94:     }",
          "96:     top[\"ecdsaKeyNames\"] = ecdsaKeysJson;",
          "97:     top[\"blsKeyNames\"] = blsKeysJson;",
          "100:     ofstream fs;",
          "102:     fs.open(_fileName);",
          "",
          "[Removed Lines]",
          "65:     cerr << \"-c  do not verify client certificate\\n\";",
          "66:     cerr << \"-s  sign client certificate without human confirmation \\n\";",
          "67:     cerr << \"-d  turn on debug output\\n\";",
          "68:     cerr << \"-v  verbose mode: turn on debug output\\n\";",
          "69:     cerr << \"-vv  detailed verbose mode: turn on debug and trace outputs\\n\";",
          "70:     cerr << \"-n  launch SGXWalletServer using http (not https)\\n\";",
          "80: void SGXWallet::serializeKeys(vector<string>& _ecdsaKeyNames, vector<string>& _blsKeyNames, string _fileName) {",
          "89:         string keyFull(3 - key.size(), '0');",
          "90:         keyFull.append(key);",
          "92:         ecdsaKeysJson[keyFull] = _ecdsaKeyNames[i];",
          "93:         blsKeysJson[keyFull] = _blsKeyNames[i];",
          "",
          "[Added Lines]",
          "60:     cerr << \"-c  Do not verify client certificate\\n\";",
          "61:     cerr << \"-s  Sign client certificate without human confirmation \\n\";",
          "62:     cerr << \"-d  Turn on debug output\\n\";",
          "63:     cerr << \"-v  Verbose mode: turn on debug output\\n\";",
          "64:     cerr << \"-vv Detailed verbose mode: turn on debug and trace outputs\\n\";",
          "65:     cerr << \"-n  Launch SGXWalletServer using http (not https)\\n\";",
          "68:     cerr << \"-T  Generate test keys \\n\";",
          "73: void SGXWallet::serializeKeys(const vector<string>& _ecdsaKeyNames, const vector<string>& _blsKeyNames, const string& _fileName) {",
          "80:         ecdsaKeysJson[key] = _ecdsaKeyNames[i];",
          "81:         blsKeysJson[key] = _blsKeyNames[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:     initAll(enclaveLogLevel, checkClientCertOption, autoSignClientCertOption);",
          "191:         cerr << \"Generating test keys ...\" << endl;",
          "193:         HttpClient client(RPC_ENDPOINT);",
          "",
          "[Removed Lines]",
          "187:     ifstream is(\"sgx_data/4node.json\");",
          "189:     if (generateTestKeys && !is.good()) {",
          "",
          "[Added Lines]",
          "172:     if (generateTestKeys) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:         int schainID = 1;",
          "200:         int dkgID = 1;",
          "204:         SGXWallet::serializeKeys(ecdsaKeyNames, blsKeyNames, \"sgx_data/4node.json\");",
          "207:         schainID = 2;",
          "208:         dkgID = 2;",
          "213:         SGXWallet::serializeKeys(ecdsaKeyNames, blsKeyNames, \"sgx_data/16node.json\");",
          "215:         cerr << \"Successfully completed generating test keys into sgx_data\" << endl;",
          "217:     }",
          "219:     while (true) {",
          "",
          "[Removed Lines]",
          "202:         TestUtils::doDKG(c, 4, 3, ecdsaKeyNames, blsKeyNames, schainID, dkgID);",
          "211:         TestUtils::doDKG(c, 16, 11, ecdsaKeyNames, blsKeyNames, schainID, dkgID);",
          "",
          "[Added Lines]",
          "184:         TestUtils::doDKG(c, 4, 1, ecdsaKeyNames, blsKeyNames, schainID, dkgID);",
          "191:         TestUtils::doDKG(c, 16, 5, ecdsaKeyNames, blsKeyNames, schainID, dkgID);",
          "",
          "---------------"
        ],
        "sgxwall.h||sgxwall.h": [
          "File: sgxwall.h -> sgxwall.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     static void usage();",
          "42:     static void printUsage();",
          "",
          "[Removed Lines]",
          "44:     static void serializeKeys(",
          "45:             vector<string>& _ecdsaKeyNames, vector<string>& _blsKeyNames, string _fileName);",
          "47: };",
          "",
          "[Added Lines]",
          "44:     static void serializeKeys( const vector<string>& _ecdsaKeyNames,",
          "45:                                const vector<string>& _blsKeyNames, const string& _fileName);",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <stdbool.h>",
          "39: extern int useHTTPS;",
          "40: extern int encryptKeys;",
          "41: extern int autoconfirm;",
          "49: #define BUF_LEN 4096",
          "57: #define SHA_256_LEN 32",
          "59: #define ADD_ENTROPY_SIZE 32",
          "",
          "[Removed Lines]",
          "51: #define  MAX_KEY_LENGTH 128",
          "52: #define  MAX_COMPONENT_LENGTH 80",
          "53: #define  MAX_COMPONENT_HEX_LENGTH MAX_COMPONENT_LENGTH * 2",
          "54: #define  MAX_ENCRYPTED_KEY_LENGTH 1024",
          "55: #define  MAX_SIG_LEN 1024",
          "56: #define  MAX_ERR_LEN 1024",
          "",
          "[Added Lines]",
          "41: #define MAX_KEY_LENGTH 128",
          "42: #define MAX_COMPONENT_LENGTH 80",
          "43: #define MAX_COMPONENT_HEX_LENGTH MAX_COMPONENT_LENGTH * 2",
          "44: #define MAX_ENCRYPTED_KEY_LENGTH 1024",
          "45: #define MAX_SIG_LEN 1024",
          "46: #define MAX_ERR_LEN 1024",
          "",
          "---------------"
        ],
        "stubclient.cpp||stubclient.cpp": [
          "File: stubclient.cpp -> stubclient.cpp"
        ]
      }
    },
    {
      "candidate_hash": "b62cce0346df92efa86bb913889dedf0a77f66a1",
      "candidate_info": {
        "commit_hash": "b62cce0346df92efa86bb913889dedf0a77f66a1",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/b62cce0346df92efa86bb913889dedf0a77f66a1",
        "files": [
          "SEKManager.cpp",
          "SEKManager.h",
          "ServerDataChecker.cpp",
          "ServerInit.cpp",
          "ServerInit.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet.c",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add entering back up key",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "SEKManager.h||SEKManager.h",
          "ServerDataChecker.cpp||ServerDataChecker.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "ServerInit.h||ServerInit.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet.c||sgxwallet.c",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"common.h\"",
          "34: #include \"sgxwallet.h\"",
          "36: bool case_insensitive_match(string s1, string s2) {",
          "38:   transform(s1.begin(), s1.end(), s1.begin(), ::tolower);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"ServerDataChecker.h\"",
          "37: #include \"spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   return s1.compare(s2);",
          "41: }",
          "45:   vector<char> errMsg(1024,0);",
          "46:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "43: void generate_SEK(){",
          "",
          "[Added Lines]",
          "46: void gen_SEK(){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     throw RPCException(status, errMsg.data()) ;",
          "57:   }",
          "61:   carray2Hex(encr_SEK.data(), enc_len, hexEncrKey.data());",
          "",
          "[Removed Lines]",
          "59:   vector<char> hexEncrKey(2*enc_len + 1, 0);",
          "",
          "[Added Lines]",
          "62:   vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: void enter_SEK(){",
          "111:   vector<char> errMsg(1024,0);",
          "112:   int err_status = 0;",
          "113:   vector<uint8_t> encr_SEK(BUF_LEN, 0);",
          "114:   uint32_t enc_len;",
          "116:   std::string SEK;",
          "117:   std::cout << \"ENTER BACKUP KEY\" << std::endl;",
          "118:   std::cin >> SEK;",
          "119:   while (!checkHex(SEK, 16)){",
          "120:     std::cout << \"KEY IS INVALID.TRY ONCE MORE\" << std::endl;",
          "121:     SEK = \"\";",
          "122:     std::cin >> SEK;",
          "123:   }",
          "124:   if (DEBUG_PRINT)",
          "125:     std::cerr << \"your key is \" << SEK << std::endl;",
          "127:   status = set_SEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK.c_str() );",
          "128:   if (status != SGX_SUCCESS){",
          "129:     cerr << \"RPCException thrown with status \" << status << endl;",
          "130:     throw RPCException(status, errMsg.data()) ;",
          "131:   }",
          "133:   vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "135:   carray2Hex(encr_SEK.data(), enc_len, hexEncrKey.data());",
          "137:   LevelDB::getLevelDb() -> deleteKey(\"SEK\");",
          "138:   LevelDB::getLevelDb() -> writeDataUnique(\"SEK\", hexEncrKey.data());",
          "139: }",
          "141: void init_SEK(){",
          "142:   std::shared_ptr<std::string> encr_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");",
          "143:   if (encr_SEK_ptr == nullptr){",
          "144:     spdlog::info(\"SEK was not created yet. Going to create SEK\");",
          "145:     gen_SEK();",
          "146:   }",
          "147:   else{",
          "148:     if (DEBUG_PRINT)",
          "149:       spdlog::info(\"going to set SEK from db\" );",
          "150:     set_SEK(encr_SEK_ptr);",
          "151:   }",
          "152: }",
          "",
          "---------------"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SGXD_SEKMANAGER_H",
          "25: #define SGXD_SEKMANAGER_H",
          "27: #include <string>",
          "28: #include <memory>",
          "32: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "34: #endif //SGXD_SEKMANAGER_H",
          "",
          "[Removed Lines]",
          "30: void generate_SEK();",
          "",
          "[Added Lines]",
          "28: #ifdef __cplusplus",
          "31: #endif",
          "35: void gen_SEK();",
          "37: #ifdef __cplusplus",
          "39: #endif",
          "41: #ifdef __cplusplus",
          "42: #define EXTERNC extern \"C\"",
          "43: #else",
          "44: #define EXTERNC",
          "45: #endif",
          "47: EXTERNC void enter_SEK();",
          "49: EXTERNC void init_SEK();",
          "",
          "---------------"
        ],
        "ServerDataChecker.cpp||ServerDataChecker.cpp": [
          "File: ServerDataChecker.cpp -> ServerDataChecker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: bool checkHex(const string& hex, const uint32_t sizeInBytes){",
          "74:   if ( hex.length() > sizeInBytes * 2 || hex.length() == 0){",
          "77:     return false;",
          "78:   }",
          "",
          "[Removed Lines]",
          "75:     spdlog::error(\"public key is too long or zero - \", hex.length());",
          "76:     std::cerr << \"public key length is \" << hex.length() << std::endl;",
          "",
          "[Added Lines]",
          "75:     spdlog::error(\"key is too long or zero - \", hex.length());",
          "76:     std::cerr << \"key length is \" << hex.length() << std::endl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   mpz_init(num);",
          "83:   if ( mpz_set_str(num, hex.c_str(), 16) == -1){",
          "85:     mpz_clear(num);",
          "86:     return false;",
          "87:   }",
          "",
          "[Removed Lines]",
          "84:     spdlog::error(\"public key is not hex {}\", hex);",
          "",
          "[Added Lines]",
          "84:     spdlog::error(\"key is not hex {}\", hex);",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include \"BLSCrypto.h\"",
          "53: #include \"ServerInit.h\"",
          "57: #include <iostream>",
          "",
          "[Removed Lines]",
          "55: #include \"SEKManager.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: void init_daemon() {",
          "72:     libff::init_alt_bn128_params();",
          "74:     LevelDB::initDataFolderAndDBs();",
          "85: }",
          "",
          "[Removed Lines]",
          "76:     std::shared_ptr<std::string> encr_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");",
          "77:     if (encr_SEK_ptr == nullptr){",
          "78:       spdlog::info(\"SEK was not created yet\");",
          "79:       generate_SEK();",
          "80:     }",
          "81:     else{",
          "82:       std::cerr << \"going to set SEK from db\" << std::endl;",
          "83:       set_SEK(encr_SEK_ptr);",
          "84:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: int sgxServerInited = 0;",
          "142:     if (sgxServerInited == 1)",
          "143:         return;",
          "144:     init_enclave();",
          "145:     init_daemon();",
          "148:     sgxServerInited = 1;",
          "",
          "[Removed Lines]",
          "140: void init_all(bool check_cert, bool sign_automatically) {",
          "",
          "[Added Lines]",
          "132: void init_all(bool check_cert, bool sign_automatically, void (*SEK_func)()) {",
          "139:     SEK_func();",
          "",
          "---------------"
        ],
        "ServerInit.h||ServerInit.h": [
          "File: ServerInit.h -> ServerInit.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define EXTERNC",
          "31: #endif",
          "36: EXTERNC void init_daemon();",
          "41: #endif //SGXWALLET_SERVERINIT_H",
          "",
          "[Removed Lines]",
          "34: EXTERNC void init_all(bool check_cert, bool sign_automatically);",
          "38: EXTERNC  void init_enclave();",
          "",
          "[Added Lines]",
          "33: EXTERNC void init_all(bool check_cert, bool sign_automatically, void (*func)());",
          "37: EXTERNC void init_enclave();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956: }",
          "958: void generate_ecdsa_key_aes(int *err_status, char *err_string,",
          "959:                         uint8_t *encrypted_key, uint32_t *enc_len, char * pub_key_x, char * pub_key_y) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958: void set_SEK_backup(int *err_status, char *err_string,",
          "959:                     uint8_t *encrypted_SEK, uint32_t *enc_len, const char* SEK_hex){",
          "961:   uint64_t len;",
          "962:   hex2carray(SEK_hex, &len, (uint8_t* )AES_key);",
          "964:   uint32_t sealedLen = sgx_calc_sealed_data_size(0, strlen(SEK_hex) + 1);",
          "966:   sgx_status_t status = sgx_seal_data(0, NULL, strlen(SEK_hex) + 1, SEK_hex, sealedLen,(sgx_sealed_data_t*)encrypted_SEK);",
          "967:   if( status !=  SGX_SUCCESS) {",
          "968:     snprintf(err_string, BUF_LEN, \"seal SEK failed with status %d\", status);",
          "970:     return;",
          "971:   }",
          "976: }",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "179:                                 uint64_t encr_len);",
          "181:                 public void generate_ecdsa_key_aes (",
          "182:                                 [user_check] int *err_status,",
          "183:                                 [out, count = 1024] char* err_string,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:                 public void set_SEK_backup(",
          "182:                                 [user_check] int *err_status,",
          "183:                                 [out, count = 1024] char *err_string,",
          "184:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"BLSCrypto.h\"",
          "39: #include \"ServerInit.h\"",
          "41: #include <stdbool.h>",
          "44: void usage() {",
          "45:   fprintf(stderr, \"usage: sgxwallet\\n\");",
          "46:   exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include \"SEKManager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: int updated;",
          "54: int main(int argc, char *argv[]) {",
          "56:   bool check_client_cert = true;",
          "57:   bool sign_automatically = false;",
          "58:   int opt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:   void (*SEK_initializer)();",
          "60:   SEK_initializer = init_SEK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     exit(1);",
          "63:   }",
          "66:     switch (opt) {",
          "67:     case 'h':",
          "68:       if (strlen(argv[1]) == 2 ) {",
          "",
          "[Removed Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0a\")) != -1) {",
          "",
          "[Added Lines]",
          "70:   while ((opt = getopt(argc, argv, \"cshd0ab\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         fprintf(stderr, \"-s  client certificate will be signed automatically\\n\");",
          "71:         fprintf(stderr, \"-d  turn on debug output\\n\");",
          "72:         fprintf(stderr, \"-0  SGXWalletServer will be launched on http (not https)\\n\");",
          "73:         exit(0);",
          "74:       } else {",
          "75:         fprintf(stderr, \"unknown flag %s\\n\", argv[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         fprintf(stderr, \"-b  Enter backup key\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:     case 'a':",
          "91:       is_aes = 1;",
          "92:       break;",
          "93:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "94:       exit(1);",
          "95:     default:",
          "96:       break;",
          "97:     }",
          "98:   }",
          "101:   while (true) {",
          "102:       sleep(10);",
          "",
          "[Removed Lines]",
          "99:   init_all(check_client_cert, sign_automatically);",
          "",
          "[Added Lines]",
          "99:     case 'b':",
          "100:       SEK_initializer = enter_SEK;",
          "101:       break;",
          "108:   init_all(check_client_cert, sign_automatically, SEK_initializer);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #include \"BLSPublicKeyShare.h\"",
          "79: #include \"BLSPublicKey.h\"",
          "81: #include <thread>",
          "82: #include \"common.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: #include \"SEKManager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:    DEBUG_PRINT = 1;",
          "145:    is_sgx_https = 0;",
          "147:     char* key = encryptTestKey();",
          "148:     REQUIRE(key != nullptr);",
          "",
          "[Removed Lines]",
          "146:     init_all(false, false);",
          "",
          "[Added Lines]",
          "148:     init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:       DEBUG_PRINT = 1;",
          "157:       is_sgx_https = 0;",
          "162:         int errStatus =  -1;",
          "",
          "[Removed Lines]",
          "159:       init_all(false, false);",
          "",
          "[Added Lines]",
          "161:       init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "680:   is_sgx_https = 0;",
          "681:   DEBUG_PRINT = 1;",
          "682:   cerr<< \"test started\" << endl;",
          "684:   cerr << \"Server inited\" << endl;",
          "685:   HttpClient client(\"http://localhost:1029\");",
          "686:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "683:   init_all(false, false);",
          "",
          "[Added Lines]",
          "685:   init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "810:     is_sgx_https = 0;",
          "812:     cerr << \"API test started\" << endl;",
          "",
          "[Removed Lines]",
          "813:     init_all(false, false);",
          "",
          "[Added Lines]",
          "815:     init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911: TEST_CASE(\"getServerStatus test\", \"[getServerStatus_test]\") {",
          "912:   is_sgx_https = 0;",
          "914:   HttpClient client(\"http://localhost:1029\");",
          "915:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "916:   REQUIRE(c.getServerStatus()[\"status\"] == 0);",
          "",
          "[Removed Lines]",
          "913:   init_all( false, false );",
          "",
          "[Added Lines]",
          "915:   init_all( false, false, init_SEK );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1035:   DEBUG_PRINT = 1;",
          "1036:   is_aes = 1;",
          "1040:   vector<thread> threads;",
          "1041:   int num_threads = 4;",
          "",
          "[Removed Lines]",
          "1038:   init_all( false, false );",
          "",
          "[Added Lines]",
          "1040:   init_all( false, false, init_SEK );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1056:   is_aes = 1;",
          "1058:   cerr << \"ecdsa_api_test started\" << endl;",
          "1061:   cerr << \"Server inited\" << endl;",
          "1062:   HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "1059:   init_all(false, false);",
          "",
          "[Added Lines]",
          "1061:   init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1105:   is_sgx_https = 0;",
          "1107:   cerr << \"dkg_api_test started\" << endl;",
          "1110:   cerr << \"Server inited\" << endl;",
          "1111:   HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "1108:   init_all(false, false);",
          "",
          "[Added Lines]",
          "1110:   init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1179:   is_sgx_https = 0;",
          "1181:   cerr << \"is_poly_test started\" << endl;",
          "1184:   cerr << \"Server inited\" << endl;",
          "1185:   HttpClient client(\"http://localhost:1029\");",
          "",
          "[Removed Lines]",
          "1182:   init_all(false, false);",
          "",
          "[Added Lines]",
          "1184:   init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1211:   reset_db();",
          "1213:   std::cerr << \"test started\" << std::endl;",
          "1215:   cerr << \"Server inited\" << endl;",
          "1216:   HttpClient client(\"http://localhost:1029\");",
          "1217:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "1214:   init_all(false, false);",
          "",
          "[Added Lines]",
          "1216:   init_all(false, false, init_SEK);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1339:   is_aes = 1;",
          "1341:   std::cerr << \"test started\" << std::endl;",
          "1343:   cerr << \"Server inited\" << endl;",
          "1344:   HttpClient client(\"http://localhost:1029\");",
          "1345:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "1342:   init_all(false, false);",
          "",
          "[Added Lines]",
          "1344:   init_all(false, false, init_SEK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91168a5ecd40a2a4d8601c37c7f04a8fc41e5f07",
      "candidate_info": {
        "commit_hash": "91168a5ecd40a2a4d8601c37c7f04a8fc41e5f07",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/91168a5ecd40a2a4d8601c37c7f04a8fc41e5f07",
        "files": [
          "SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add gen_dkg_poly_aes method",
        "before_after_code_files": [
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "707: Json::Value IsPolyExistsImpl(const std::string& polyName){",
          "708:     Json::Value result;",
          "710:     std::shared_ptr<std::string> poly_str_ptr = levelDb->readString(polyName);",
          "711:     result[\"IsExist\"] = true;",
          "712:     if (poly_str_ptr == nullptr){",
          "713:         result[\"IsExist\"] = false;",
          "714:     }",
          "716:     return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709:     try {",
          "712:     result[\"status\"] = 0;",
          "713:     result[\"errorMessage\"] = \"\";",
          "716:         result[\"status\"] = 0;",
          "717:         result[\"errorMessage\"] = \"\";",
          "718:     }",
          "719:     } catch (RPCException &_e) {",
          "720:       std::cerr << \" err str \" << _e.errString << std::endl;",
          "721:       result[\"status\"] = _e.status;",
          "722:       result[\"errorMessage\"] = _e.errString;",
          "723:       result[\"IsExist\"] = false;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1277:     return;",
          "1278:   }",
          "1281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1279: }",
          "1281: void gen_dkg_secret_aes (int *err_status, char *err_string, uint8_t *encrypted_dkg_secret, uint32_t* enc_len, size_t _t){",
          "1283:   char* dkg_secret = (char*)calloc(DKG_BUFER_LENGTH, 1);",
          "1285:   if (gen_dkg_poly(dkg_secret, _t) != 0 ){",
          "1287:     return;",
          "1288:   }",
          "1290:   snprintf(err_string, BUF_LEN,\"poly is %s \", dkg_secret);",
          "1292:   int status = AES_encrypt(dkg_secret, encrypted_dkg_secret);",
          "1294:   if(status !=  SGX_SUCCESS) {",
          "1295:     snprintf(err_string, BUF_LEN,\"SGX AES encrypt DKG poly failed\");",
          "1297:     return;",
          "1298:   }",
          "1301:   free(dkg_secret);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:                                 [in, count = 1024] char* hashX ,",
          "222:                                 [in, count = 1024] char* hashY ,",
          "223:                                 [out, count = 1024] char* signature);",
          "224:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:         public void gen_dkg_secret_aes (",
          "227:                                 [user_check] int *err_status,",
          "228:                                 [out, count = 1024] char* err_string,",
          "229:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "230:                                 [user_check] uint32_t * enc_len,",
          "231:                                         size_t _t);",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1217:   cout << polyDoesNotExist << std::endl;",
          "1218:   REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "1223: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1220: }",
          "1222: TEST_CASE(\"AES_DKG test\", \"[aes_dkg]\") {",
          "1223:   is_sgx_https = 0;",
          "1224:   DEBUG_PRINT = 1;",
          "1226:   std::cerr << \"test started\" << std::endl;",
          "1227:   init_all(false, false);",
          "1228:   cerr << \"Server inited\" << endl;",
          "1229:   HttpClient client(\"http://localhost:1029\");",
          "1230:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1231:   cerr << \"Client inited\" << endl;",
          "1233:   reset_db();",
          "1235:   int n = 4, t = 4;",
          "1236:   Json::Value EthKeys[n];",
          "1237:   Json::Value VerifVects[n];",
          "1238:   Json::Value pubEthKeys;",
          "1239:   Json::Value secretShares[n];",
          "1240:   Json::Value pubBLSKeys[n];",
          "1241:   Json::Value BLSSigShares[n];",
          "1242:   std::vector<std::string> pubShares(n);",
          "1243:   std::vector<std::string> poly_names(n);",
          "1245:   for (uint8_t i = 0; i < n; i++) {",
          "1246:     EthKeys[i] = c.generateECDSAKey();",
          "1247:     std::string polyName =",
          "1248:         \"POLY:SCHAIN_ID:1:NODE_ID:\" + std::to_string(i) + \":DKG_ID:0\";",
          "1249:     cout << c.generateDKGPoly(polyName, t);",
          "1255:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}