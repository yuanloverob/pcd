{
  "cve_id": "CVE-2023-32762",
  "cve_desc": "An issue was discovered in Qt before 5.15.14, 6.x before 6.2.9, and 6.3.x through 6.5.x before 6.5.1. Qt Network incorrectly parses the strict-transport-security (HSTS) header, allowing unencrypted connections to be established, even when explicitly prohibited by the server. This happens if the case used for this header does not exactly match.",
  "repo": "qt/qtbase",
  "patch_hash": "1b736a815be0222f4b24289cf17575fc15707305",
  "patch_info": {
    "commit_hash": "1b736a815be0222f4b24289cf17575fc15707305",
    "repo": "qt/qtbase",
    "commit_url": "https://github.com/qt/qtbase/commit/1b736a815be0222f4b24289cf17575fc15707305",
    "files": [
      "src/network/access/qhsts.cpp",
      "tests/auto/network/access/hsts/tst_qhsts.cpp"
    ],
    "message": "Hsts: match header names case insensitively\n\nHeader field names are always considered to be case-insensitive.\n\nPick-to: 6.5 6.5.1 6.2 5.15\nFixes: QTBUG-113392\nChange-Id: Ifb4def4bb7f2ac070416cdc76581a769f1e52b43\nReviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>\nReviewed-by: Edward Welbourne <edward.welbourne@qt.io>\nReviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>",
    "before_after_code_files": [
      "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
      "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
    ]
  },
  "patch_diff": {
    "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
      "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "327: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
      "328: {",
      "329:     for (const auto &h : headers) {",
      "332:             header = h.second;",
      "",
      "[Removed Lines]",
      "331:         if (h.first == \"Strict-Transport-Security\") {",
      "",
      "[Added Lines]",
      "331:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
      "",
      "---------------"
    ],
    "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
      "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "216:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
      "217:     QVERIFY(parser.includeSubDomains());",
      "219:     list.pop_back();",
      "221:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:     list.pop_back();",
      "220:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
      "221:     QVERIFY(parser.parse(list));",
      "222:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
      "223:     QVERIFY(parser.includeSubDomains());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7aad0ca06aff91aeb7cceb97d68f535b53721f58",
      "candidate_info": {
        "commit_hash": "7aad0ca06aff91aeb7cceb97d68f535b53721f58",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/7aad0ca06aff91aeb7cceb97d68f535b53721f58",
        "files": [
          "src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp"
        ],
        "message": "Hsts: match header names case insensitively\n\nHeader field names are always considered to be case-insensitive.\n\nFixes: QTBUG-113392\nChange-Id: Ifb4def4bb7f2ac070416cdc76581a769f1e52b43\nReviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>\nReviewed-by: Edward Welbourne <edward.welbourne@qt.io>\nReviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>\n(cherry picked from commit 1b736a815be0222f4b24289cf17575fc15707305)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
        "before_after_code_files": [
          "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ],
          "candidate": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
          "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "363: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
          "364: {",
          "365:     for (const auto &h : headers) {",
          "368:             header = h.second;",
          "",
          "[Removed Lines]",
          "367:         if (h.first == \"Strict-Transport-Security\") {",
          "",
          "[Added Lines]",
          "367:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
          "",
          "---------------"
        ],
        "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
          "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "242:     QVERIFY(parser.includeSubDomains());",
          "244:     list.pop_back();",
          "246:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     list.pop_back();",
          "245:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "246:     QVERIFY(parser.parse(list));",
          "247:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "248:     QVERIFY(parser.includeSubDomains());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "175ebe0b6aa1872c9e3d08da2891f9cff427e7d4",
      "candidate_info": {
        "commit_hash": "175ebe0b6aa1872c9e3d08da2891f9cff427e7d4",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/175ebe0b6aa1872c9e3d08da2891f9cff427e7d4",
        "files": [
          "src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp"
        ],
        "message": "Hsts: match header names case insensitively\n\nHeader field names are always considered to be case-insensitive.\n\nFixes: QTBUG-113392\nChange-Id: Ifb4def4bb7f2ac070416cdc76581a769f1e52b43\nReviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>\nReviewed-by: Edward Welbourne <edward.welbourne@qt.io>\nReviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>\n(cherry picked from commit 1b736a815be0222f4b24289cf17575fc15707305)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
        "before_after_code_files": [
          "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ],
          "candidate": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
          "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
          "328: {",
          "329:     for (const auto &h : headers) {",
          "332:             header = h.second;",
          "",
          "[Removed Lines]",
          "331:         if (h.first == \"Strict-Transport-Security\") {",
          "",
          "[Added Lines]",
          "331:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
          "",
          "---------------"
        ],
        "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
          "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "217:     QVERIFY(parser.includeSubDomains());",
          "219:     list.pop_back();",
          "221:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:     list.pop_back();",
          "220:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "221:     QVERIFY(parser.parse(list));",
          "222:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "223:     QVERIFY(parser.includeSubDomains());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b097f2c632692c00a02a42001b46a7d2b15dcfdb",
      "candidate_info": {
        "commit_hash": "b097f2c632692c00a02a42001b46a7d2b15dcfdb",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/b097f2c632692c00a02a42001b46a7d2b15dcfdb",
        "files": [
          "src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp"
        ],
        "message": "Hsts: match header names case insensitively\n\nHeader field names are always considered to be case-insensitive.\n\nFixes: QTBUG-113392\nChange-Id: Ifb4def4bb7f2ac070416cdc76581a769f1e52b43\nReviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>\nReviewed-by: Edward Welbourne <edward.welbourne@qt.io>\nReviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>\n(cherry picked from commit 1b736a815be0222f4b24289cf17575fc15707305)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
        "before_after_code_files": [
          "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ],
          "candidate": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
          "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "364: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
          "365: {",
          "366:     for (const auto &h : headers) {",
          "369:             header = h.second;",
          "",
          "[Removed Lines]",
          "368:         if (h.first == \"Strict-Transport-Security\") {",
          "",
          "[Added Lines]",
          "368:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
          "",
          "---------------"
        ],
        "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
          "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "242:     QVERIFY(parser.includeSubDomains());",
          "244:     list.pop_back();",
          "246:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     list.pop_back();",
          "245:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "246:     QVERIFY(parser.parse(list));",
          "247:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "248:     QVERIFY(parser.includeSubDomains());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eae7c36d681acfb82572b56e24bbb2cd42242e57",
      "candidate_info": {
        "commit_hash": "eae7c36d681acfb82572b56e24bbb2cd42242e57",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/eae7c36d681acfb82572b56e24bbb2cd42242e57",
        "files": [
          "src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp"
        ],
        "message": "Hsts: match header names case insensitively\n\nHeader field names are always considered to be case-insensitive.\n\nFixes: QTBUG-113392\nChange-Id: Ifb4def4bb7f2ac070416cdc76581a769f1e52b43\nReviewed-by: Qt CI Bot <qt_ci_bot@qt-project.org>\nReviewed-by: Edward Welbourne <edward.welbourne@qt.io>\nReviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>\n(cherry picked from commit 1b736a815be0222f4b24289cf17575fc15707305)\nReviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>",
        "before_after_code_files": [
          "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ],
          "candidate": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
          "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
          "328: {",
          "329:     for (const auto &h : headers) {",
          "332:             header = h.second;",
          "",
          "[Removed Lines]",
          "331:         if (h.first == \"Strict-Transport-Security\") {",
          "",
          "[Added Lines]",
          "331:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
          "",
          "---------------"
        ],
        "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
          "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "217:     QVERIFY(parser.includeSubDomains());",
          "219:     list.pop_back();",
          "221:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:     list.pop_back();",
          "220:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "221:     QVERIFY(parser.parse(list));",
          "222:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "223:     QVERIFY(parser.includeSubDomains());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15b0bd69ff2a3ac967ddb98b5fc3c3ce8c3d5b4b",
      "candidate_info": {
        "commit_hash": "15b0bd69ff2a3ac967ddb98b5fc3c3ce8c3d5b4b",
        "repo": "qt/qtbase",
        "commit_url": "https://github.com/qt/qtbase/commit/15b0bd69ff2a3ac967ddb98b5fc3c3ce8c3d5b4b",
        "files": [
          "src/network/CMakeLists.txt",
          "src/network/access/http2/http2protocol.cpp",
          "src/network/access/qhsts.cpp",
          "src/network/access/qhsts_p.h",
          "src/network/access/qhttp2protocolhandler.cpp",
          "src/network/access/qhttpheaderparser.cpp",
          "src/network/access/qhttpheaderparser_p.h",
          "src/network/access/qhttpnetworkconnection.cpp",
          "src/network/access/qhttpnetworkheader.cpp",
          "src/network/access/qhttpnetworkheader_p.h",
          "src/network/access/qhttpnetworkreply.cpp",
          "src/network/access/qhttpnetworkreply_p.h",
          "src/network/access/qhttpnetworkrequest.cpp",
          "src/network/access/qhttpnetworkrequest_p.h",
          "src/network/access/qhttpthreaddelegate_p.h",
          "src/network/access/qnetworkreplyhttpimpl.cpp",
          "src/network/access/qnetworkreplyhttpimpl_p.h",
          "src/network/kernel/qauthenticator.cpp",
          "src/network/kernel/qauthenticator_p.h",
          "src/network/socket/qhttpsocketengine.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp",
          "tests/auto/network/access/http2/http2srv.cpp",
          "tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp",
          "tests/auto/network/access/qrestaccessmanager/httptestserver.cpp",
          "tests/auto/network/access/qrestaccessmanager/httptestserver_p.h",
          "tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp",
          "tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp"
        ],
        "message": "Network: Use QHttpHeaders in QHttpHeaderParser\n\nQHttpHeaderParser::headers() method is changed to return QHttpHeaders.\nQAuthenticatorPrivate::parseHttpResponse() method is changed to work with QHttpHeaders.\nQHttpNetworkHeader::header() method is updated to return QHttpHeaders.\nTests are updated.\n\nTask-number: QTBUG-120133\nChange-Id: I20a18b509acd7a8b8d93884cff8349519d64293e\nReviewed-by: Ievgenii Meshcheriakov <ievgenii.meshcheriakov@qt.io>\nReviewed-by: M\u00e5rten Nordheim <marten.nordheim@qt.io>\nReviewed-by: \u00d8ystein Heskestad <oystein.heskestad@qt.io>",
        "before_after_code_files": [
          "src/network/access/http2/http2protocol.cpp||src/network/access/http2/http2protocol.cpp",
          "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
          "src/network/access/qhsts_p.h||src/network/access/qhsts_p.h",
          "src/network/access/qhttp2protocolhandler.cpp||src/network/access/qhttp2protocolhandler.cpp",
          "src/network/access/qhttpheaderparser.cpp||src/network/access/qhttpheaderparser.cpp",
          "src/network/access/qhttpheaderparser_p.h||src/network/access/qhttpheaderparser_p.h",
          "src/network/access/qhttpnetworkconnection.cpp||src/network/access/qhttpnetworkconnection.cpp",
          "src/network/access/qhttpnetworkheader.cpp||src/network/access/qhttpnetworkheader.cpp",
          "src/network/access/qhttpnetworkheader_p.h||src/network/access/qhttpnetworkheader_p.h",
          "src/network/access/qhttpnetworkreply.cpp||src/network/access/qhttpnetworkreply.cpp",
          "src/network/access/qhttpnetworkreply_p.h||src/network/access/qhttpnetworkreply_p.h",
          "src/network/access/qhttpnetworkrequest.cpp||src/network/access/qhttpnetworkrequest.cpp",
          "src/network/access/qhttpnetworkrequest_p.h||src/network/access/qhttpnetworkrequest_p.h",
          "src/network/access/qhttpthreaddelegate_p.h||src/network/access/qhttpthreaddelegate_p.h",
          "src/network/access/qnetworkreplyhttpimpl.cpp||src/network/access/qnetworkreplyhttpimpl.cpp",
          "src/network/access/qnetworkreplyhttpimpl_p.h||src/network/access/qnetworkreplyhttpimpl_p.h",
          "src/network/kernel/qauthenticator.cpp||src/network/kernel/qauthenticator.cpp",
          "src/network/kernel/qauthenticator_p.h||src/network/kernel/qauthenticator_p.h",
          "src/network/socket/qhttpsocketengine.cpp||src/network/socket/qhttpsocketengine.cpp",
          "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp",
          "tests/auto/network/access/http2/http2srv.cpp||tests/auto/network/access/http2/http2srv.cpp",
          "tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp||tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp",
          "tests/auto/network/access/qrestaccessmanager/httptestserver.cpp||tests/auto/network/access/qrestaccessmanager/httptestserver.cpp",
          "tests/auto/network/access/qrestaccessmanager/httptestserver_p.h||tests/auto/network/access/qrestaccessmanager/httptestserver_p.h",
          "tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp||tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp",
          "tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp||tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ],
          "candidate": [
            "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp",
            "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/network/access/http2/http2protocol.cpp||src/network/access/http2/http2protocol.cpp": [
          "File: src/network/access/http2/http2protocol.cpp -> src/network/access/http2/http2protocol.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: bool is_protocol_upgraded(const QHttpNetworkReply &reply)",
          "186: {",
          "195:     }",
          "197:     return false;",
          "",
          "[Removed Lines]",
          "187:     if (reply.statusCode() == 101) {",
          "189:         const auto &header = reply.header();",
          "190:         for (const QPair<QByteArray, QByteArray> &field : header) {",
          "191:             if (field.first.compare(\"upgrade\", Qt::CaseInsensitive) == 0 &&",
          "192:                     field.second.compare(\"h2c\", Qt::CaseInsensitive) == 0)",
          "193:                 return true;",
          "194:         }",
          "",
          "[Added Lines]",
          "187:     if (reply.statusCode() != 101)",
          "188:         return false;",
          "191:     for (const auto &v : reply.header().values(QHttpHeaders::WellKnownHeader::Upgrade)) {",
          "192:         if (v.compare(\"h2c\", Qt::CaseInsensitive) == 0)",
          "193:             return true;",
          "",
          "---------------"
        ],
        "src/network/access/qhsts.cpp||src/network/access/qhsts.cpp": [
          "File: src/network/access/qhsts.cpp -> src/network/access/qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"qhsts_p.h\"",
          "6: #include \"QtCore/private/qipaddress_p.h\"",
          "7: #include \"QtCore/qlist.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"qhttpheaders.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     return true;",
          "41: }",
          "44:                                    const QUrl &url)",
          "45: {",
          "46:     if (!url.isValid())",
          "",
          "[Removed Lines]",
          "43: void QHstsCache::updateFromHeaders(const QList<QPair<QByteArray, QByteArray>> &headers,",
          "",
          "[Added Lines]",
          "45: void QHstsCache::updateFromHeaders(const QHttpHeaders &headers,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328: {",
          "348:         }",
          "349:     }",
          "",
          "[Removed Lines]",
          "327: bool QHstsHeaderParser::parse(const QList<QPair<QByteArray, QByteArray>> &headers)",
          "329:     for (const auto &h : headers) {",
          "331:         if (h.first.compare(\"Strict-Transport-Security\", Qt::CaseInsensitive) == 0) {",
          "332:             header = h.second;",
          "344:             if (parseSTSHeader() && maxAgeFound) {",
          "345:                 expiry = QDateTime::currentDateTimeUtc().addSecs(maxAge);",
          "346:                 return true;",
          "347:             }",
          "",
          "[Added Lines]",
          "329: bool QHstsHeaderParser::parse(const QHttpHeaders &headers)",
          "331:     for (const auto &value : headers.values(",
          "332:                  QHttpHeaders::WellKnownHeader::StrictTransportSecurity)) {",
          "333:         header = value;",
          "345:         if (parseSTSHeader() && maxAgeFound) {",
          "346:             expiry = QDateTime::currentDateTimeUtc().addSecs(maxAge);",
          "347:             return true;",
          "",
          "---------------"
        ],
        "src/network/access/qhsts_p.h||src/network/access/qhsts_p.h": [
          "File: src/network/access/qhsts_p.h -> src/network/access/qhsts_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: QT_BEGIN_NAMESPACE",
          "34: class Q_AUTOTEST_EXPORT QHstsCache",
          "35: {",
          "36: public:",
          "39:                            const QUrl &url);",
          "40:     void updateFromPolicies(const QList<QHstsPolicy> &hosts);",
          "41:     void updateKnownHost(const QUrl &url, const QDateTime &expires,",
          "",
          "[Removed Lines]",
          "38:     void updateFromHeaders(const QList<QPair<QByteArray, QByteArray>> &headers,",
          "",
          "[Added Lines]",
          "34: class QHttpHeaders;",
          "40:     void updateFromHeaders(const QHttpHeaders &headers,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: {",
          "91: public:",
          "95:     QDateTime expirationDate() const { return expiry; }",
          "96:     bool includeSubDomains() const { return subDomainsFound; }",
          "",
          "[Removed Lines]",
          "93:     bool parse(const QList<QPair<QByteArray, QByteArray>> &headers);",
          "",
          "[Added Lines]",
          "95:     bool parse(const QHttpHeaders &headers);",
          "",
          "---------------"
        ],
        "src/network/access/qhttp2protocolhandler.cpp||src/network/access/qhttp2protocolhandler.cpp": [
          "File: src/network/access/qhttp2protocolhandler.cpp -> src/network/access/qhttp2protocolhandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     if (size.second > maxHeaderListSize)",
          "61:         return HttpHeader(); // Bad, we cannot send this request ...",
          "64:     for (const auto &field : requestHeader) {",
          "65:         const HeaderSize delta = entry_size(field.first, field.second);",
          "66:         if (!delta.first) // Overflow???",
          "",
          "[Removed Lines]",
          "63:     const auto requestHeader = request.header();",
          "",
          "[Added Lines]",
          "63:     const auto requestHeader = request.header().toListOfPairs();",
          "",
          "---------------"
        ],
        "src/network/access/qhttpheaderparser.cpp||src/network/access/qhttpheaderparser.cpp": [
          "File: src/network/access/qhttpheaderparser.cpp -> src/network/access/qhttpheaderparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     if (header.size() - (header.endsWith(\"\\r\\n\") ? 2 : 1) > maxTotalSize)",
          "53:         return false;",
          "56:     while (!header.empty()) {",
          "57:         const qsizetype colon = header.indexOf(':');",
          "58:         if (colon == -1) // if no colon check if empty headers",
          "60:         if (result.size() >= maxFieldCount)",
          "61:             return false;",
          "62:         QByteArrayView name = header.first(colon);",
          "",
          "[Removed Lines]",
          "55:     QList<QPair<QByteArray, QByteArray>> result;",
          "59:             return result.empty() && (header == \"\\n\" || header == \"\\r\\n\");",
          "",
          "[Added Lines]",
          "55:     QHttpHeaders result;",
          "59:             return result.isEmpty() && (header == \"\\n\" || header == \"\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             header = header.sliced(endLine + 1);",
          "83:         } while (hSpaceStart(header));",
          "84:         Q_ASSERT(name.size() + 1 + value.size() <= maxFieldSize);",
          "86:     }",
          "88:     fields = result;",
          "",
          "[Removed Lines]",
          "85:         result.append(qMakePair(name.toByteArray(), value));",
          "",
          "[Added Lines]",
          "85:         result.append(name, value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     return ok && uint(majorVersion) <= 9 && uint(minorVersion) <= 9;",
          "129: }",
          "132: {",
          "133:     return fields;",
          "134: }",
          "143: QByteArray QHttpHeaderParser::firstHeaderField(QByteArrayView name,",
          "144:                                                const QByteArray &defaultValue) const",
          "145: {",
          "150: }",
          "152: QByteArray QHttpHeaderParser::combinedHeaderValue(QByteArrayView name, const QByteArray &defaultValue) const",
          "",
          "[Removed Lines]",
          "131: const QList<QPair<QByteArray, QByteArray> >& QHttpHeaderParser::headers() const",
          "136: static auto firstEqualsName(QByteArrayView name)",
          "137: {",
          "138:     return [name](const QPair<QByteArray, QByteArray> &header) {",
          "139:         return name.compare(header.first, Qt::CaseInsensitive) == 0;",
          "140:     };",
          "141: }",
          "146:     const auto it = std::find_if(fields.begin(), fields.end(), firstEqualsName(name));",
          "147:     if (it != fields.end())",
          "148:         return it->second;",
          "149:     return defaultValue;",
          "",
          "[Added Lines]",
          "131: const QHttpHeaders& QHttpHeaderParser::headers() const",
          "139:     return fields.value(name, defaultValue).toByteArray();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160: QList<QByteArray> QHttpHeaderParser::headerFieldValues(QByteArrayView name) const",
          "161: {",
          "168: }",
          "170: void QHttpHeaderParser::removeHeaderField(QByteArrayView name)",
          "171: {",
          "173: }",
          "175: void QHttpHeaderParser::setHeaderField(const QByteArray &name, const QByteArray &data)",
          "176: {",
          "177:     removeHeaderField(name);",
          "179: }",
          "181: void QHttpHeaderParser::prependHeaderField(const QByteArray &name, const QByteArray &data)",
          "182: {",
          "184: }",
          "186: void QHttpHeaderParser::appendHeaderField(const QByteArray &name, const QByteArray &data)",
          "187: {",
          "189: }",
          "191: void QHttpHeaderParser::clearHeaders()",
          "",
          "[Removed Lines]",
          "162:     QList<QByteArray> result;",
          "163:     for (auto it = fields.constBegin(); it != fields.constEnd(); ++it)",
          "164:         if (name.compare(it->first, Qt::CaseInsensitive) == 0)",
          "165:             result += it->second;",
          "167:     return result;",
          "172:     fields.removeIf(firstEqualsName(name));",
          "178:     fields.append(qMakePair(name, data));",
          "183:     fields.prepend(qMakePair(name, data));",
          "188:     fields.append(qMakePair(name, data));",
          "",
          "[Added Lines]",
          "152:     return fields.values(name);",
          "157:     fields.removeAll(name);",
          "163:     fields.append(name, data);",
          "168:     fields.insert(0, name, data);",
          "173:     fields.append(name, data);",
          "",
          "---------------"
        ],
        "src/network/access/qhttpheaderparser_p.h||src/network/access/qhttpheaderparser_p.h": [
          "File: src/network/access/qhttpheaderparser_p.h -> src/network/access/qhttpheaderparser_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <QtNetwork/private/qtnetworkglobal_p.h>",
          "20: #include <QByteArray>",
          "21: #include <QList>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     bool parseHeaders(QByteArrayView headers);",
          "53:     bool parseStatus(QByteArrayView status);",
          "56:     void setStatusCode(int code);",
          "57:     int getStatusCode() const;",
          "58:     int getMajorVersion() const;",
          "",
          "[Removed Lines]",
          "55:     const QList<QPair<QByteArray, QByteArray> >& headers() const;",
          "",
          "[Added Lines]",
          "56:     const QHttpHeaders& headers() const;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     qsizetype maxHeaderFields() const { return maxFieldCount; }",
          "85: private:",
          "87:     QString reasonPhrase;",
          "88:     int statusCode;",
          "89:     int majorVersion;",
          "",
          "[Removed Lines]",
          "86:     QList<QPair<QByteArray, QByteArray> > fields;",
          "",
          "[Added Lines]",
          "87:     QHttpHeaders fields;",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkconnection.cpp||src/network/access/qhttpnetworkconnection.cpp": [
          "File: src/network/access/qhttpnetworkconnection.cpp -> src/network/access/qhttpnetworkconnection.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:     resend = false;",
          "417:     const QByteArray header = isProxy ? \"proxy-authenticate\" : \"www-authenticate\";",
          "",
          "[Removed Lines]",
          "414:     QList<QPair<QByteArray, QByteArray> > fields = reply->header();",
          "",
          "[Added Lines]",
          "414:     const auto headers = reply->header();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:         if (auth->isNull())",
          "428:             auth->detach();",
          "429:         QAuthenticatorPrivate *priv = QAuthenticatorPrivate::getPrivate(*auth);",
          "432:         if (priv->method == QAuthenticatorPrivate::None)",
          "433:             return false;",
          "",
          "[Removed Lines]",
          "430:         priv->parseHttpResponse(fields, isProxy, reply->url().host());",
          "",
          "[Added Lines]",
          "430:         priv->parseHttpResponse(headers, isProxy, reply->url().host());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "523:         return {{}, QNetworkReply::NoError};",
          "525:     QUrl redirectUrl;",
          "532:     }",
          "",
          "[Removed Lines]",
          "526:     const QList<QPair<QByteArray, QByteArray> > fields = reply->header();",
          "527:     for (const QNetworkReply::RawHeaderPair &header : fields) {",
          "528:         if (header.first.compare(\"location\", Qt::CaseInsensitive) == 0) {",
          "529:             redirectUrl = QUrl::fromEncoded(header.second);",
          "530:             break;",
          "531:         }",
          "",
          "[Added Lines]",
          "526:     const QHttpHeaders fields = reply->header();",
          "527:     if (const auto h = fields.values(QHttpHeaders::WellKnownHeader::Location); !h.empty()) {",
          "528:         redirectUrl = QUrl::fromEncoded(h.first());",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkheader.cpp||src/network/access/qhttpnetworkheader.cpp": [
          "File: src/network/access/qhttpnetworkheader.cpp -> src/network/access/qhttpnetworkheader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     parser.prependHeaderField(name, data);",
          "54: }",
          "57: {",
          "58:     return parser.headers();",
          "59: }",
          "",
          "[Removed Lines]",
          "56: QList<QPair<QByteArray, QByteArray> > QHttpNetworkHeaderPrivate::headers() const",
          "",
          "[Added Lines]",
          "56: QHttpHeaders QHttpNetworkHeaderPrivate::headers() const",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkheader_p.h||src/network/access/qhttpnetworkheader_p.h": [
          "File: src/network/access/qhttpnetworkheader_p.h -> src/network/access/qhttpnetworkheader_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <QtNetwork/private/qtnetworkglobal_p.h>",
          "19: #include <QtNetwork/private/qhttpheaderparser_p.h>",
          "21: #include <qshareddata.h>",
          "22: #include <qurl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     virtual qint64 contentLength() const = 0;",
          "41:     virtual void setContentLength(qint64 length) = 0;",
          "44:     virtual QByteArray headerField(QByteArrayView name, const QByteArray &defaultValue = QByteArray()) const = 0;",
          "45:     virtual void setHeaderField(const QByteArray &name, const QByteArray &data) = 0;",
          "46: };",
          "",
          "[Removed Lines]",
          "43:     virtual QList<QPair<QByteArray, QByteArray> > header() const = 0;",
          "",
          "[Added Lines]",
          "44:     virtual QHttpHeaders header() const = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     void setHeaderField(const QByteArray &name, const QByteArray &data);",
          "62:     void prependHeaderField(const QByteArray &name, const QByteArray &data);",
          "63:     void clearHeaders();",
          "65:     bool operator==(const QHttpNetworkHeaderPrivate &other) const;",
          "67: };",
          "",
          "[Removed Lines]",
          "64:     QList<QPair<QByteArray, QByteArray> > headers() const;",
          "",
          "[Added Lines]",
          "65:     QHttpHeaders headers() const;",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkreply.cpp||src/network/access/qhttpnetworkreply.cpp": [
          "File: src/network/access/qhttpnetworkreply.cpp -> src/network/access/qhttpnetworkreply.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     d->setContentLength(length);",
          "68: }",
          "71: {",
          "72:     return d_func()->parser.headers();",
          "73: }",
          "",
          "[Removed Lines]",
          "70: QList<QPair<QByteArray, QByteArray> > QHttpNetworkReply::header() const",
          "",
          "[Added Lines]",
          "70: QHttpHeaders QHttpNetworkReply::header() const",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkreply_p.h||src/network/access/qhttpnetworkreply_p.h": [
          "File: src/network/access/qhttpnetworkreply_p.h -> src/network/access/qhttpnetworkreply_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: Q_MOC_INCLUDE(<QtNetwork/QAuthenticator>)",
          "43: #include <private/qdecompresshelper_p.h>",
          "45: #include <QtCore/qpointer.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     qint64 contentLength() const override;",
          "73:     void setContentLength(qint64 length) override;",
          "76:     QByteArray headerField(QByteArrayView name, const QByteArray &defaultValue = QByteArray()) const override;",
          "77:     void setHeaderField(const QByteArray &name, const QByteArray &data) override;",
          "78:     void appendHeaderField(const QByteArray &name, const QByteArray &data);",
          "",
          "[Removed Lines]",
          "75:     QList<QPair<QByteArray, QByteArray> > header() const override;",
          "",
          "[Added Lines]",
          "76:     QHttpHeaders header() const override;",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkrequest.cpp||src/network/access/qhttpnetworkrequest.cpp": [
          "File: src/network/access/qhttpnetworkrequest.cpp -> src/network/access/qhttpnetworkrequest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: QByteArray QHttpNetworkRequestPrivate::header(const QHttpNetworkRequest &request, bool throughProxy)",
          "114: {",
          "116:     QByteArray ba;",
          "117:     ba.reserve(40 + fields.size()*25); // very rough lower bound estimation",
          "",
          "[Removed Lines]",
          "115:     const QList<QPair<QByteArray, QByteArray> > fields = request.header();",
          "",
          "[Added Lines]",
          "115:     const QList<QPair<QByteArray, QByteArray> > fields = request.header().toListOfPairs();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:     d->setContentLength(length);",
          "236: }",
          "239: {",
          "240:     return d->parser.headers();",
          "241: }",
          "",
          "[Removed Lines]",
          "238: QList<QPair<QByteArray, QByteArray> > QHttpNetworkRequest::header() const",
          "",
          "[Added Lines]",
          "238: QHttpHeaders QHttpNetworkRequest::header() const",
          "",
          "---------------"
        ],
        "src/network/access/qhttpnetworkrequest_p.h||src/network/access/qhttpnetworkrequest_p.h": [
          "File: src/network/access/qhttpnetworkrequest_p.h -> src/network/access/qhttpnetworkrequest_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     qint64 contentLength() const override;",
          "66:     void setContentLength(qint64 length) override;",
          "69:     QByteArray headerField(QByteArrayView name, const QByteArray &defaultValue = QByteArray()) const override;",
          "70:     void setHeaderField(const QByteArray &name, const QByteArray &data) override;",
          "71:     void prependHeaderField(const QByteArray &name, const QByteArray &data);",
          "",
          "[Removed Lines]",
          "68:     QList<QPair<QByteArray, QByteArray> > header() const override;",
          "",
          "[Added Lines]",
          "68:     QHttpHeaders header() const override;",
          "",
          "---------------"
        ],
        "src/network/access/qhttpthreaddelegate_p.h||src/network/access/qhttpthreaddelegate_p.h": [
          "File: src/network/access/qhttpthreaddelegate_p.h -> src/network/access/qhttpthreaddelegate_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"private/qnoncontiguousbytedevice_p.h\"",
          "34: #include \"qnetworkaccessauthenticationmanager_p.h\"",
          "35: #include <QtNetwork/private/http2protocol_p.h>",
          "37: QT_REQUIRE_CONFIG(http);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     QByteArray synchronousDownloadData;",
          "78:     int incomingStatusCode;",
          "79:     QString incomingReasonPhrase;",
          "80:     bool isPipeliningUsed;",
          "",
          "[Removed Lines]",
          "77:     QList<QPair<QByteArray,QByteArray> > incomingHeaders;",
          "",
          "[Added Lines]",
          "78:     QHttpHeaders incomingHeaders;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: #endif",
          "113:     void socketStartedConnecting();",
          "114:     void requestSent();",
          "116:                           QSharedPointer<char>, qint64, qint64, bool, bool);",
          "117:     void downloadProgress(qint64, qint64);",
          "118:     void downloadData(const QByteArray &);",
          "",
          "[Removed Lines]",
          "115:     void downloadMetaData(const QList<QPair<QByteArray,QByteArray> > &, int, const QString &, bool,",
          "",
          "[Added Lines]",
          "116:     void downloadMetaData(const QHttpHeaders &, int, const QString &, bool,",
          "",
          "---------------"
        ],
        "src/network/access/qnetworkreplyhttpimpl.cpp||src/network/access/qnetworkreplyhttpimpl.cpp": [
          "File: src/network/access/qnetworkreplyhttpimpl.cpp -> src/network/access/qnetworkreplyhttpimpl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1325:     }",
          "1326: }",
          "1329:                                                          int sc, const QString &rp, bool pu,",
          "1330:                                                          QSharedPointer<char> db,",
          "1331:                                                          qint64 contentLength,",
          "",
          "[Removed Lines]",
          "1328: void QNetworkReplyHttpImplPrivate::replyDownloadMetaData(const QList<QPair<QByteArray,QByteArray> > &hm,",
          "",
          "[Added Lines]",
          "1328: void QNetworkReplyHttpImplPrivate::replyDownloadMetaData(const QHttpHeaders &hm,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1364:     const bool autoDecompress = request.rawHeader(\"accept-encoding\").isEmpty();",
          "1365:     const bool shouldDecompress = isCompressed && autoDecompress;",
          "1368:         QByteArray value = q->rawHeader(key);",
          "",
          "[Removed Lines]",
          "1367:     for (const auto &[key, originValue] : hm) {",
          "",
          "[Added Lines]",
          "1367:     for (const auto &[key, originValue] : hm.toListOfPairs()) {",
          "",
          "---------------"
        ],
        "src/network/access/qnetworkreplyhttpimpl_p.h||src/network/access/qnetworkreplyhttpimpl_p.h": [
          "File: src/network/access/qnetworkreplyhttpimpl_p.h -> src/network/access/qnetworkreplyhttpimpl_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:     void replyDownloadData(QByteArray);",
          "246:     void replyFinished();",
          "248:                                bool, QSharedPointer<char>, qint64, qint64, bool, bool);",
          "249:     void replyDownloadProgressSlot(qint64,qint64);",
          "250:     void httpAuthenticationRequired(const QHttpNetworkRequest &request, QAuthenticator *auth);",
          "",
          "[Removed Lines]",
          "247:     void replyDownloadMetaData(const QList<QPair<QByteArray,QByteArray> > &, int, const QString &,",
          "",
          "[Added Lines]",
          "247:     void replyDownloadMetaData(const QHttpHeaders &, int, const QString &,",
          "",
          "---------------"
        ],
        "src/network/kernel/qauthenticator.cpp||src/network/kernel/qauthenticator.cpp": [
          "File: src/network/kernel/qauthenticator.cpp -> src/network/kernel/qauthenticator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <qstring.h>",
          "15: #include <qdatetime.h>",
          "16: #include <qrandom.h>",
          "18: #ifdef Q_OS_WIN",
          "19: #include <qmutex.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:     return true; // assume it's ok if algorithm is not specified",
          "445: }",
          "448:                                               bool isProxy, QStringView host)",
          "449: {",
          "450: #if !QT_CONFIG(gssapi)",
          "451:     Q_UNUSED(host);",
          "452: #endif",
          "456:     method = None;",
          "",
          "[Removed Lines]",
          "447: void QAuthenticatorPrivate::parseHttpResponse(const QList<QPair<QByteArray, QByteArray>> &values,",
          "453:     const auto search = isProxy ?",
          "454:             QByteArrayView(\"proxy-authenticate\") : QByteArrayView(\"www-authenticate\");",
          "",
          "[Added Lines]",
          "448: void QAuthenticatorPrivate::parseHttpResponse(const QHttpHeaders &headers,",
          "454:     const auto search = isProxy ? QHttpHeaders::WellKnownHeader::ProxyAuthenticate",
          "455:                                 : QHttpHeaders::WellKnownHeader::WWWAuthenticate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:     QByteArrayView headerVal;",
          "472:         if (method < Basic && str.startsWith(\"basic\"_L1, Qt::CaseInsensitive)) {",
          "473:             method = Basic;",
          "475:         } else if (method < Ntlm && str.startsWith(\"ntlm\"_L1, Qt::CaseInsensitive)) {",
          "476:             method = Ntlm;",
          "478:         } else if (method < DigestMd5 && str.startsWith(\"digest\"_L1, Qt::CaseInsensitive)) {",
          "481:                 continue;",
          "483:             method = DigestMd5;",
          "485:         } else if (method < Negotiate && str.startsWith(\"negotiate\"_L1, Qt::CaseInsensitive)) {",
          "486: #if QT_CONFIG(sspi) || QT_CONFIG(gssapi) // if it's not supported then we shouldn't try to use it",
          "487: #if QT_CONFIG(gssapi)",
          "",
          "[Removed Lines]",
          "468:     for (const auto &current : values) {",
          "469:         if (current.first.compare(search, Qt::CaseInsensitive) != 0)",
          "470:             continue;",
          "471:         const QLatin1StringView str(current.second);",
          "474:             headerVal = QByteArrayView(current.second).mid(6);",
          "477:             headerVal = QByteArrayView(current.second).mid(5);",
          "480:             if (!verifyDigestMD5(QByteArrayView(current.second).sliced(7)))",
          "484:             headerVal = QByteArrayView(current.second).mid(7);",
          "",
          "[Added Lines]",
          "469:     for (const auto &current : headers.values(search)) {",
          "470:         const QLatin1StringView str(current);",
          "473:             headerVal = QByteArrayView(current).mid(6);",
          "476:             headerVal = QByteArrayView(current).mid(5);",
          "479:             if (!verifyDigestMD5(QByteArrayView(current).sliced(7)))",
          "483:             headerVal = QByteArrayView(current).mid(7);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492:                 continue;",
          "493: #endif",
          "494:             method = Negotiate;",
          "496: #endif",
          "497:         }",
          "498:     }",
          "",
          "[Removed Lines]",
          "495:             headerVal = QByteArrayView(current.second).mid(10);",
          "",
          "[Added Lines]",
          "494:             headerVal = QByteArrayView(current).mid(10);",
          "",
          "---------------"
        ],
        "src/network/kernel/qauthenticator_p.h||src/network/kernel/qauthenticator_p.h": [
          "File: src/network/kernel/qauthenticator_p.h -> src/network/kernel/qauthenticator_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: QT_BEGIN_NAMESPACE",
          "28: class QHttpResponseHeader;",
          "29: #if QT_CONFIG(sspi) // SSPI",
          "30: class QSSPIWindowsHandles;",
          "31: #elif QT_CONFIG(gssapi) // GSSAPI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: class QHttpHeaders;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     static QHash<QByteArray, QByteArray>",
          "81:     parseDigestAuthenticationChallenge(QByteArrayView challenge);",
          "85:     void updateCredentials();",
          "87:     static bool isMethodSupported(QByteArrayView method);",
          "",
          "[Removed Lines]",
          "83:     void parseHttpResponse(const QList<QPair<QByteArray, QByteArray>> &, bool isProxy,",
          "84:                            QStringView host);",
          "",
          "[Added Lines]",
          "84:     void parseHttpResponse(const QHttpHeaders &headers, bool isProxy, QStringView host);",
          "",
          "---------------"
        ],
        "src/network/socket/qhttpsocketengine.cpp||src/network/socket/qhttpsocketengine.cpp": [
          "File: src/network/socket/qhttpsocketengine.cpp -> src/network/socket/qhttpsocketengine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:             d->authenticator.detach();",
          "554:         priv = QAuthenticatorPrivate::getPrivate(d->authenticator);",
          "558:         if (priv->phase == QAuthenticatorPrivate::Invalid) {",
          "",
          "[Removed Lines]",
          "556:         priv->parseHttpResponse(d->reply->header(), true, d->proxy.hostName());",
          "",
          "[Added Lines]",
          "556:         const auto headers = d->reply->header();",
          "557:         priv->parseHttpResponse(headers, true, d->proxy.hostName());",
          "",
          "---------------"
        ],
        "tests/auto/network/access/hsts/tst_qhsts.cpp||tests/auto/network/access/hsts/tst_qhsts.cpp": [
          "File: tests/auto/network/access/hsts/tst_qhsts.cpp -> tests/auto/network/access/hsts/tst_qhsts.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <QtCore/qpair.h>",
          "10: #include <QtCore/qurl.h>",
          "12: #include <QtNetwork/private/qhstsstore_p.h>",
          "13: #include <QtNetwork/private/qhsts_p.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: void tst_QHsts::testSTSHeaderParser()",
          "190: {",
          "191:     QHstsHeaderParser parser;",
          "195:     QVERIFY(!parser.includeSubDomains());",
          "196:     QVERIFY(!parser.expirationDate().isValid());",
          "199:     QVERIFY(!parser.includeSubDomains());",
          "200:     QVERIFY(!parser.expirationDate().isValid());",
          "204:     QVERIFY(!parser.includeSubDomains());",
          "205:     QVERIFY(!parser.expirationDate().isValid());",
          "210:     QVERIFY(!parser.includeSubDomains());",
          "211:     QVERIFY(!parser.expirationDate().isValid());",
          "216:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "217:     QVERIFY(parser.includeSubDomains());",
          "222:     QVERIFY(parser.expirationDate() > QDateTime::currentDateTimeUtc());",
          "223:     QVERIFY(parser.includeSubDomains());",
          "229:     QVERIFY(!parser.includeSubDomains());",
          "230:     QVERIFY(!parser.expirationDate().isValid());",
          "236:     QVERIFY(!parser.includeSubDomains());",
          "237:     QVERIFY(!parser.expirationDate().isValid());",
          "242:                    \"nowsomeunknownheader=\\\"somevaluewithescapes\\\\;\\\"\");",
          "244:     QVERIFY(parser.includeSubDomains());",
          "245:     QVERIFY(parser.expirationDate().isValid());",
          "251:     QVERIFY(!parser.includeSubDomains());",
          "252:     QVERIFY(parser.expirationDate().isValid());",
          "258:     QVERIFY(!parser.includeSubDomains());",
          "259:     QVERIFY(!parser.expirationDate().isValid());",
          "267:     QVERIFY(!parser.includeSubDomains());",
          "268:     QVERIFY(parser.expirationDate().isValid());",
          "274:     QVERIFY(!parser.includeSubDomains());",
          "275:     QVERIFY(parser.expirationDate() <= QDateTime::currentDateTimeUtc());",
          "281:     QVERIFY(parser.includeSubDomains());",
          "282:     QVERIFY(parser.expirationDate().isValid());",
          "288:                     \";;; ; includeSubdomains ;;thisIsUnknownDirective;;;;\");",
          "290:     QVERIFY(parser.includeSubDomains());",
          "291:     QVERIFY(parser.expirationDate().isValid());",
          "296:     QVERIFY(!parser.includeSubDomains());",
          "297:     QVERIFY(!parser.expirationDate().isValid());",
          "298: }",
          "",
          "[Removed Lines]",
          "192:     using Header = QPair<QByteArray, QByteArray>;",
          "193:     using Headers = QList<Header>;",
          "197:     Headers list;",
          "198:     QVERIFY(!parser.parse(list));",
          "202:     list << Header(\"Strict-Transport-security\", \"200\");",
          "203:     QVERIFY(!parser.parse(list));",
          "208:     list << Header(\"Strict-Transport-Security\", \"includeSubDomains\");",
          "209:     QVERIFY(!parser.parse(list));",
          "213:     list.pop_back();",
          "214:     list << Header(\"Strict-Transport-Security\", \"includeSubDomains;max-age=1000\");",
          "215:     QVERIFY(parser.parse(list));",
          "219:     list.pop_back();",
          "220:     list << Header(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "221:     QVERIFY(parser.parse(list));",
          "225:     list.pop_back();",
          "227:     list << Header(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "228:     QVERIFY(!parser.parse(list));",
          "232:     list.pop_back();",
          "234:     list << Header(\"Strict-Transport-Security\", \"max-age=-1000   ; includeSubDomains\");",
          "235:     QVERIFY(!parser.parse(list));",
          "239:     list.pop_back();",
          "241:     list << Header(\"Strict-Transport-Security\", \";max-age=1000 ;includesubdomains;;\"",
          "243:     QVERIFY(parser.parse(list));",
          "247:     list.pop_back();",
          "249:     list << Header(\"Strict-Transport-Security\", \"max-age=\\\"1000\\\"\");",
          "250:     QVERIFY(parser.parse(list));",
          "254:     list.pop_back();",
          "256:     list << Header(\"Strict-Transport-Security\", \"max-age; max-age=15768000\");",
          "257:     QVERIFY(!parser.parse(list));",
          "263:     list.clear();",
          "264:     list << Header(\"Strict-Transport-Security\", \"includeSubdomains; max-age=\\\"hehehe\\\";\");",
          "265:     list << Header(\"Strict-Transport-Security\", \"max-age=10101\");",
          "266:     QVERIFY(parser.parse(list));",
          "271:     list.clear();",
          "272:     list << Header(\"Strict-Transport-Security\", \"max-age=0\");",
          "273:     QVERIFY(parser.parse(list));",
          "278:     list.pop_back();",
          "279:     list << Header(\"Strict-Transport-Security\", \"Max-aGE=1000; InclUdesUbdomains\");",
          "280:     QVERIFY(parser.parse(list));",
          "286:     list.pop_back();",
          "287:     list << Header(\"Strict-Transport-Security\", \";;; max-age = 17; ; ; ; ;;; ;;\"",
          "289:     QVERIFY(parser.parse(list));",
          "293:     list.pop_back();",
          "294:     list << Header(\"Strict-Transport-Security\", \"max-age=1000; includeSubDomains bogon\");",
          "295:     QVERIFY(!parser.parse(list));",
          "",
          "[Added Lines]",
          "196:     QHttpHeaders headers;",
          "197:     QVERIFY(!parser.parse(headers));",
          "201:     headers.append(\"Strict-Transport-security\", \"200\");",
          "202:     QVERIFY(!parser.parse(headers));",
          "207:     headers.append(\"Strict-Transport-Security\", \"includeSubDomains\");",
          "208:     QVERIFY(!parser.parse(headers));",
          "212:     headers.removeAt(headers.size() - 1);",
          "213:     headers.append(\"Strict-Transport-Security\", \"includeSubDomains;max-age=1000\");",
          "214:     QVERIFY(parser.parse(headers));",
          "218:     headers.removeAt(headers.size() - 1);",
          "219:     headers.append(\"strict-transport-security\", \"includeSubDomains;max-age=1000\");",
          "220:     QVERIFY(parser.parse(headers));",
          "224:     headers.removeAt(headers.size() - 1);",
          "226:     headers.append(\"Strict-Transport-Security\", \"max-age = 1000 ; includeSubDomains;includeSubDomains\");",
          "227:     QVERIFY(!parser.parse(headers));",
          "231:     headers.removeAt(headers.size() - 1);",
          "233:     headers.append(\"Strict-Transport-Security\", \"max-age=-1000   ; includeSubDomains\");",
          "234:     QVERIFY(!parser.parse(headers));",
          "238:     headers.removeAt(headers.size() - 1);",
          "240:     headers.append(\"Strict-Transport-Security\", \";max-age=1000 ;includesubdomains;;\"",
          "242:     QVERIFY(parser.parse(headers));",
          "246:     headers.removeAt(headers.size() - 1);",
          "248:     headers.append(\"Strict-Transport-Security\", \"max-age=\\\"1000\\\"\");",
          "249:     QVERIFY(parser.parse(headers));",
          "253:     headers.removeAt(headers.size() - 1);",
          "255:     headers.append(\"Strict-Transport-Security\", \"max-age; max-age=15768000\");",
          "256:     QVERIFY(!parser.parse(headers));",
          "262:     headers.clear();",
          "263:     headers.append(\"Strict-Transport-Security\", \"includeSubdomains; max-age=\\\"hehehe\\\";\");",
          "264:     headers.append(\"Strict-Transport-Security\", \"max-age=10101\");",
          "265:     QVERIFY(parser.parse(headers));",
          "270:     headers.clear();",
          "271:     headers.append(\"Strict-Transport-Security\", \"max-age=0\");",
          "272:     QVERIFY(parser.parse(headers));",
          "277:     headers.removeAt(headers.size() - 1);",
          "278:     headers.append(\"Strict-Transport-Security\", \"Max-aGE=1000; InclUdesUbdomains\");",
          "279:     QVERIFY(parser.parse(headers));",
          "285:     headers.removeAt(headers.size() - 1);",
          "286:     headers.append(\"Strict-Transport-Security\", \";;; max-age = 17; ; ; ; ;;; ;;\"",
          "288:     QVERIFY(parser.parse(headers));",
          "292:     headers.removeAt(headers.size() - 1);",
          "293:     headers.append(\"Strict-Transport-Security\", \"max-age=1000; includeSubDomains bogon\");",
          "294:     QVERIFY(!parser.parse(headers));",
          "",
          "---------------"
        ],
        "tests/auto/network/access/http2/http2srv.cpp||tests/auto/network/access/http2/http2srv.cpp": [
          "File: tests/auto/network/access/http2/http2srv.cpp -> tests/auto/network/access/http2/http2srv.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:     bool settingsOk = false;",
          "379:     QHttpNetworkReplyPrivate *firstRequestReader = protocolUpgradeHandler->d_func();",
          "391:     return connectionOk && upgradeOk && settingsOk;",
          "392: }",
          "",
          "[Removed Lines]",
          "382:     for (const auto &header : firstRequestReader->headers()) {",
          "383:         if (header.first == \"Connection\")",
          "384:             connectionOk = header.second.contains(\"Upgrade, HTTP2-Settings\");",
          "385:         else if (header.first == \"Upgrade\")",
          "386:             upgradeOk = header.second.contains(\"h2c\");",
          "387:         else if (header.first == \"HTTP2-Settings\")",
          "388:             settingsOk = true;",
          "389:     }",
          "",
          "[Added Lines]",
          "380:     const auto headers = firstRequestReader->headers();",
          "383:     connectionOk = headers.combinedValue(QHttpHeaders::WellKnownHeader::Connection).contains(\"Upgrade, HTTP2-Settings\");",
          "384:     upgradeOk = headers.combinedValue(QHttpHeaders::WellKnownHeader::Upgrade).contains(\"h2c\");",
          "385:     settingsOk = headers.contains(\"HTTP2-Settings\");",
          "",
          "---------------"
        ],
        "tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp||tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp": [
          "File: tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp -> tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     void parseContentLength()",
          "733:     {",
          "735:         if (index == -1)",
          "736:             return;",
          "739:         const auto end = std::find(receivedData.cbegin() + index, receivedData.cend(), '\\r');",
          "740:         auto num = receivedData.mid(index, std::distance(receivedData.cbegin() + index, end));",
          "741:         bool ok;",
          "",
          "[Removed Lines]",
          "734:         int index = receivedData.indexOf(\"Content-Length:\");",
          "738:         index += sizeof(\"Content-Length:\") - 1;",
          "",
          "[Added Lines]",
          "734:         int index = receivedData.indexOf(\"content-length:\");",
          "738:         index += sizeof(\"content-length:\") - 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3451:     if (!QtNetworkSettings::hasIPv6())",
          "3452:         QSKIP(\"system doesn't support ipv6!\");",
          "3455:     httpResponse += QByteArray::number(dataToSend.size());",
          "3456:     httpResponse += \"\\r\\n\\r\\n\";",
          "3457:     httpResponse += dataToSend;",
          "",
          "[Removed Lines]",
          "3454:     QByteArray httpResponse = QByteArray(\"HTTP/1.0 200 OK\\r\\nContent-Length: \");",
          "",
          "[Added Lines]",
          "3454:     QByteArray httpResponse = QByteArray(\"HTTP/1.0 200 OK\\r\\ncontent-length: \");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3466:     QVERIFY2(waitForFinish(reply) == Success, msgWaitForFinished(reply));",
          "3467:     QByteArray content = reply->readAll();",
          "3470:     QVERIFY(server.receivedData.contains(hostinfo));",
          "3471:     QCOMPARE(content, dataToSend);",
          "3472:     QCOMPARE(reply->url(), request.url());",
          "",
          "[Removed Lines]",
          "3469:     QByteArray hostinfo = \"\\r\\nHost: \" + hostfield + ':' + QByteArray::number(server.serverPort()) + \"\\r\\n\";",
          "",
          "[Added Lines]",
          "3469:     QByteArray hostinfo = \"\\r\\nhost: \" + hostfield + ':' + QByteArray::number(server.serverPort()) + \"\\r\\n\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6276:     manager.setProxy(proxy);",
          "6277:     QNetworkRequest request(url);",
          "6279:     QNetworkReplyPtr reply(manager.get(request));",
          "",
          "[Removed Lines]",
          "6278:     request.setRawHeader(\"User-Agent\", \"QNetworkReplyAutoTest/1.0\");",
          "",
          "[Added Lines]",
          "6278:     request.setRawHeader(\"user-agent\", \"QNetworkReplyAutoTest/1.0\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6292:     QCOMPARE(receivedHeader, expectedCommand);",
          "6296:     int uaend = proxyServer.receivedData.indexOf(\"\\r\\n\", uapos);",
          "6297:     QByteArray uaheader = proxyServer.receivedData.mid(uapos, uaend - uapos);",
          "6299: }",
          "6301: class ProxyChangeHelper : public QObject",
          "",
          "[Removed Lines]",
          "6295:     int uapos = proxyServer.receivedData.indexOf(\"User-Agent\");",
          "6298:     QCOMPARE(uaheader, QByteArray(\"User-Agent: QNetworkReplyAutoTest/1.0\"));",
          "",
          "[Added Lines]",
          "6295:     const QByteArray cUserAgent = \"user-agent: \";",
          "6296:     int uapos = proxyServer.receivedData.toLower().indexOf(cUserAgent) + cUserAgent.size();",
          "6299:     QCOMPARE(uaheader, QByteArray(\"QNetworkReplyAutoTest/1.0\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8514:     QVERIFY(reply->isFinished());",
          "8515:     QCOMPARE(reply->error(), QNetworkReply::NoError);",
          "8517: }",
          "8519: void tst_QNetworkReply::synchronousAuthenticationCache()",
          "",
          "[Removed Lines]",
          "8516:     QVERIFY(server.receivedData.contains(\"\\r\\nUser-Agent: abcDEFghi\\r\\n\"));",
          "",
          "[Added Lines]",
          "8517:     QVERIFY(server.receivedData.contains(\"\\r\\nuser-agent: abcDEFghi\\r\\n\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8533:                 \"Content-Type: text/plain\\r\\n\"",
          "8534:                 \"\\r\\n\"",
          "8535:                 \"auth\";",
          "8537:             QRegularExpressionMatch match = rx.match(receivedData);",
          "8538:             if (match.hasMatch()) {",
          "8539:                 if (QByteArray::fromBase64(match.captured(1).toLatin1()) == \"login:password\") {",
          "",
          "[Removed Lines]",
          "8536:             QRegularExpression rx(\"Authorization: Basic ([^\\r\\n]*)\\r\\n\");",
          "",
          "[Added Lines]",
          "8537:             QRegularExpression rx(\"authorization: Basic ([^\\r\\n]*)\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9190:     manager.setRedirectPolicy(oldRedirectPolicy);",
          "9192:     QVERIFY(waitForFinish(reply) == Success);",
          "9194:     QVERIFY(validateRedirectedResponseHeaders(reply));",
          "9195: }",
          "",
          "[Removed Lines]",
          "9193:     QVERIFY(target.receivedData.contains(\"\\r\\nCookie: hello=world\\r\\n\"));",
          "",
          "[Added Lines]",
          "9194:     QVERIFY(target.receivedData.contains(\"\\r\\ncookie: hello=world\\r\\n\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10081:     QNetworkRequest request(QUrl(\"http://localhost:\" + QString::number(server.serverPort())));",
          "10082:     if (!decompress) {",
          "10086:         request.setAttribute(QNetworkRequest::MaximumDownloadBufferSizeAttribute, 0);",
          "10087:     }",
          "",
          "[Removed Lines]",
          "10084:         request.setRawHeader(\"Accept-Encoding\", QLatin1String(\"%1\").arg(encoding).toLatin1());",
          "",
          "[Added Lines]",
          "10085:         request.setRawHeader(\"accept-encoding\", QLatin1String(\"%1\").arg(encoding).toLatin1());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10093:     {",
          "10095:         const QByteArray &receivedData = server.receivedData;",
          "10097:         QVERIFY(start != -1);",
          "10098:         int end = receivedData.indexOf(\"\\r\\n\", start);",
          "10099:         QVERIFY(end != -1);",
          "",
          "[Removed Lines]",
          "10096:         int start = receivedData.indexOf(\"Accept-Encoding\");",
          "",
          "[Added Lines]",
          "10097:         int start = receivedData.indexOf(\"accept-encoding\");",
          "",
          "---------------"
        ],
        "tests/auto/network/access/qrestaccessmanager/httptestserver.cpp||tests/auto/network/access/qrestaccessmanager/httptestserver.cpp": [
          "File: tests/auto/network/access/qrestaccessmanager/httptestserver.cpp -> tests/auto/network/access/qrestaccessmanager/httptestserver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     Q_ASSERT(m_handler);",
          "68:     Q_ASSERT(state == State::AllDone);",
          "72:         m_request.url.setHost(parts.at(0));",
          "73:         if (parts.size() == 2)",
          "74:             m_request.url.setPort(parts.at(1).toUInt());",
          "",
          "[Removed Lines]",
          "70:     if (m_request.headers.contains(\"Host\")) {",
          "71:         const auto parts = m_request.headers[\"Host\"].split(':');",
          "",
          "[Added Lines]",
          "70:     if (auto values = m_request.headers.values(",
          "71:                     QHttpHeaders::WellKnownHeader::Host); !values.empty()) {",
          "72:         const auto parts = values.first().split(':');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     responseMessage += QByteArray::number(response.status);",
          "84:     responseMessage += CRLF;",
          "87:         responseMessage += name;",
          "88:         responseMessage += value;",
          "89:         responseMessage += CRLF;",
          "90:     }",
          "",
          "[Removed Lines]",
          "86:     for (const auto &[name,value] : response.headers.asKeyValueRange()) {",
          "",
          "[Added Lines]",
          "87:     for (const auto &[name,value] : response.headers.toListOfPairs()) {",
          "89:         responseMessage += \": \";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:                 QByteArray key = fragment.sliced(0, index).trimmed();",
          "238:                 QByteArray value = fragment.sliced(index + 1).trimmed();",
          "240:                 fragment.clear();",
          "241:             }",
          "242:         }",
          "",
          "[Removed Lines]",
          "239:                 m_request.headers.insert(std::move(key), std::move(value));",
          "",
          "[Added Lines]",
          "241:                 m_request.headers.append(key, value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247: bool HttpTestServer::readBody(QTcpSocket *socket)",
          "248: {",
          "249:     qint64 bytesLeft = 0;",
          "251:         bool conversionResult;",
          "253:         if (!conversionResult)",
          "254:             return false;",
          "255:         fragment.resize(bytesLeft);",
          "",
          "[Removed Lines]",
          "250:     if (m_request.headers.contains(\"Content-Length\")) {",
          "252:         bytesLeft = m_request.headers[\"Content-Length\"].toInt(&conversionResult);",
          "",
          "[Added Lines]",
          "252:     if (auto values = m_request.headers.values(",
          "253:                 QHttpHeaders::WellKnownHeader::ContentLength); !values.empty()) {",
          "255:         bytesLeft = values.first().toInt(&conversionResult);",
          "",
          "---------------"
        ],
        "tests/auto/network/access/qrestaccessmanager/httptestserver_p.h||tests/auto/network/access/qrestaccessmanager/httptestserver_p.h": [
          "File: tests/auto/network/access/qrestaccessmanager/httptestserver_p.h -> tests/auto/network/access/qrestaccessmanager/httptestserver_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define QRESTACCESSSMANAGER_HTTPTESTSERVER_P_H",
          "7: #include <QtNetwork/qtcpserver.h>",
          "9: #include <QtCore/qmap.h>",
          "10: #include <QtCore/qurl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include <QtNetwork/qhttpheaders.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     QByteArray method;",
          "19:     quint16 port = 0;",
          "20:     QPair<quint8, quint8> version;",
          "22: };",
          "24: struct ResponseControl",
          "",
          "[Removed Lines]",
          "21:     QMap<QByteArray, QByteArray> headers;",
          "",
          "[Added Lines]",
          "22:     QHttpHeaders headers;",
          "",
          "---------------"
        ],
        "tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp||tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp": [
          "File: tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp -> tests/auto/network/access/qrestaccessmanager/tst_qrestaccessmanager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: using namespace Qt::StringLiterals;",
          "23: using namespace std::chrono_literals;",
          "25: class tst_QRestAccessManager : public QObject",
          "26: {",
          "27:     Q_OBJECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: using Header = QHttpHeaders::WellKnownHeader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:     HttpData serverSideRequest;",
          "535:     server.setHandler([&](HttpData request, HttpData &response, ResponseControl&) {",
          "537:             response.status = 401;",
          "539:         } else {",
          "540:             response.status = 200;",
          "541:         }",
          "",
          "[Removed Lines]",
          "536:         if (!request.headers.contains(\"Authorization\"_ba)) {",
          "538:             response.headers.insert(\"WWW-Authenticate: \"_ba, \"Basic realm=\\\"secret_place\\\"\"_ba);",
          "",
          "[Added Lines]",
          "538:         if (!request.headers.contains(Header::Authorization)) {",
          "540:             response.headers.append(Header::WWWAuthenticate, \"Basic realm=\\\"secret_place\\\"\"_ba);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:     QTRY_VERIFY(replyFromServer);",
          "559:     QCOMPARE(finishedCount, 1);",
          "561: }",
          "563: void tst_QRestAccessManager::userInfo()",
          "",
          "[Removed Lines]",
          "560:     QCOMPARE(serverSideRequest.headers[\"Authorization\"_ba], \"Basic YV91c2VyOmFfcGFzc3dvcmQ=\"_ba);",
          "",
          "[Added Lines]",
          "562:     const auto resultHeaders = serverSideRequest.headers.values(Header::Authorization);",
          "563:     QVERIFY(!resultHeaders.empty());",
          "564:     QCOMPARE(resultHeaders.first(), \"Basic YV91c2VyOmFfcGFzc3dvcmQ=\"_ba);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:     HttpData serverSideRequest;",
          "578:     server.setHandler([&](HttpData request, HttpData& response, ResponseControl&) {",
          "580:             response.status = 401;",
          "582:         } else {",
          "583:             response.status = 200;",
          "584:         }",
          "",
          "[Removed Lines]",
          "579:         if (!request.headers.contains(\"Authorization\"_ba)) {",
          "581:             response.headers.insert(\"WWW-Authenticate: \"_ba, \"Basic realm=\\\"secret_place\\\"\"_ba);",
          "",
          "[Added Lines]",
          "583:         if (!request.headers.contains(Header::Authorization)) {",
          "585:             response.headers.append(Header::WWWAuthenticate,\"Basic realm=\\\"secret_place\\\"\"_ba);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:     QTRY_VERIFY(reply.get()->isFinished());",
          "590:     QVERIFY(reply.get()->isSuccess());",
          "591:     QCOMPARE(reply.get()->httpStatus(), 200);",
          "595:     QString debugOutput;",
          "",
          "[Removed Lines]",
          "592:     QCOMPARE(serverSideRequest.headers[\"Authorization\"_ba], \"Basic YV91c2VyOmFfcGFzc3dvcmQ=\"_ba);",
          "",
          "[Added Lines]",
          "596:     const auto resultHeaders = serverSideRequest.headers.values(Header::Authorization);",
          "597:     QVERIFY(!resultHeaders.empty());",
          "598:     QCOMPARE(resultHeaders.first(), \"Basic YV91c2VyOmFfcGFzc3dvcmQ=\"_ba);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "868:     serverSideResponse.body = encUTF8(sourceString);",
          "869:     VERIFY_TEXT_REPLY_OK;",
          "873:     serverSideResponse.body = encUTF16(sourceString);",
          "874:     VERIFY_TEXT_REPLY_OK;",
          "878:     serverSideResponse.body = encUTF16(sourceString);",
          "879:     VERIFY_TEXT_REPLY_OK;",
          "883:     serverSideResponse.body = encUTF32(sourceString);",
          "884:     VERIFY_TEXT_REPLY_OK;",
          "888:                                       \"text/plain; charset = \\\"UTF-32\\\";extraparameter=bar\"_ba);",
          "889:     serverSideResponse.body = encUTF32(sourceString);",
          "890:     VERIFY_TEXT_REPLY_OK;",
          "894:     serverSideResponse.body = encUTF8(sourceString);",
          "895:     manager.get(request, this, [&](QRestReply *reply) { replyFromServer = reply; });",
          "896:     QTRY_VERIFY(replyFromServer);",
          "",
          "[Removed Lines]",
          "867:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-8\"_ba);",
          "872:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-16\"_ba);",
          "877:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; chARset=uTf-16\"_ba);",
          "882:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-32\"_ba);",
          "887:     serverSideResponse.headers.insert(\"Content-Type:\"_ba,",
          "893:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-32\"_ba);",
          "",
          "[Added Lines]",
          "873:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-8\"_ba);",
          "878:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "879:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-16\"_ba);",
          "884:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "885:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; chARset=uTf-16\"_ba);",
          "890:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "891:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-32\"_ba);",
          "896:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "897:     serverSideResponse.headers.append(Header::ContentType,",
          "903:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "904:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-32\"_ba);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "900:     replyFromServer = nullptr;",
          "904:     serverSideResponse.body = encUTF8(sourceString);",
          "905:     VERIFY_TEXT_REPLY_ERROR(\"text(): Charset \\\"foo\\\" is not supported\")",
          "909:     serverSideResponse.body = \"\\xF0\\x28\\x8C\\x28\\xA0\\xB0\\xC0\\xD0\"; // invalid characters",
          "910:     VERIFY_TEXT_REPLY_ERROR(\"text() Decoding error occurred\");",
          "911: }",
          "",
          "[Removed Lines]",
          "903:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=foo\"_ba);",
          "908:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-8\"_ba);",
          "",
          "[Added Lines]",
          "914:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "915:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=foo\"_ba);",
          "920:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "921:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-8\"_ba);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "925:     ResponseControl *responseControl = nullptr;",
          "927:     HttpData serverSideResponse; // The response data the server responds with",
          "929:     serverSideResponse.body = encUTF8(expectedData);",
          "930:     serverSideResponse.status = 200;",
          "",
          "[Removed Lines]",
          "928:     serverSideResponse.headers.insert(\"Content-Type:\"_ba, \"text/plain; charset=UTF-8\"_ba);",
          "",
          "[Added Lines]",
          "941:     serverSideResponse.headers.removeAll(Header::ContentType);",
          "942:     serverSideResponse.headers.append(Header::ContentType, \"text/plain; charset=UTF-8\"_ba);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "983:     ResponseControl *responseControl = nullptr;",
          "984:     serverSideResponse.status = 200;",
          "987:                                        QString::number(expectedData.size()).toLatin1());",
          "988:     server.setHandler([&](HttpData, HttpData &response, ResponseControl &control) {",
          "989:         response = serverSideResponse;",
          "",
          "[Removed Lines]",
          "986:     serverSideResponse.headers.insert(\"Content-Length: \",",
          "",
          "[Added Lines]",
          "1000:     serverSideResponse.headers.append(Header::ContentType,",
          "",
          "---------------"
        ],
        "tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp||tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp": [
          "File: tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp -> tests/auto/network/kernel/qauthenticator/tst_qauthenticator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <QTest>",
          "7: #include <QtCore/QCoreApplication>",
          "8: #include <QtNetwork/QAuthenticator>",
          "10: #include <private/qauthenticator_p.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <QtNetwork/QHttpHeaders>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     QAuthenticatorPrivate *priv = QAuthenticatorPrivate::getPrivate(auth);",
          "61:     QCOMPARE(priv->phase, QAuthenticatorPrivate::Start);",
          "65:     priv->parseHttpResponse(headers, /*isProxy = */ false, {});",
          "67:     QCOMPARE(auth.realm(), realm);",
          "",
          "[Removed Lines]",
          "63:     QList<QPair<QByteArray, QByteArray> > headers;",
          "64:     headers << qMakePair(QByteArray(\"WWW-Authenticate\"), \"Basic \" + data.toUtf8());",
          "",
          "[Added Lines]",
          "64:     QHttpHeaders headers;",
          "65:     headers.append(QByteArray(\"WWW-Authenticate\"), \"Basic \" + data.toUtf8());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:     QAuthenticatorPrivate *priv = QAuthenticatorPrivate::getPrivate(auth);",
          "104:     QCOMPARE(priv->phase, QAuthenticatorPrivate::Start);",
          "113:     priv->parseHttpResponse(headers, /*isProxy = */ false, {});",
          "114:     if (sso)",
          "115:         QVERIFY(priv->calculateResponse(\"GET\", \"/\", u\"\").startsWith(\"NTLM \"));",
          "",
          "[Removed Lines]",
          "106:     QList<QPair<QByteArray, QByteArray> > headers;",
          "112:     headers << qMakePair(QByteArrayLiteral(\"WWW-Authenticate\"), QByteArrayLiteral(\"NTLM\"));",
          "",
          "[Added Lines]",
          "107:     QHttpHeaders headers;",
          "113:     headers.append(QByteArrayLiteral(\"WWW-Authenticate\"), QByteArrayLiteral(\"NTLM\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:     headers.clear();",
          "122:     priv->parseHttpResponse(headers, /*isProxy = */ false, {});",
          "124:     QEXPECT_FAIL(\"with-realm\", \"NTLM authentication code doesn't extract the realm\", Continue);",
          "",
          "[Removed Lines]",
          "121:     headers << qMakePair(QByteArray(\"WWW-Authenticate\"), \"NTLM \" + data.toUtf8());",
          "",
          "[Added Lines]",
          "122:     headers.append(QByteArray(\"WWW-Authenticate\"), \"NTLM \" + data.toUtf8());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:     QVERIFY(priv->isMethodSupported(\"digest\")); // sanity check",
          "145:     QCOMPARE(priv->phase, QAuthenticatorPrivate::Start);",
          "150:     priv->parseHttpResponse(headers, false, QString());",
          "152:     QByteArray response = priv->calculateResponse(\"GET\", \"/index\", {});",
          "",
          "[Removed Lines]",
          "146:     QList<QPair<QByteArray, QByteArray>> headers;",
          "148:     headers.emplace_back(\"WWW-Authenticate\", sha256);",
          "149:     headers.emplace_back(\"WWW-Authenticate\", md5);",
          "",
          "[Added Lines]",
          "147:     QHttpHeaders headers;",
          "149:     headers.append(\"WWW-Authenticate\", sha256);",
          "150:     headers.append(\"WWW-Authenticate\", md5);",
          "",
          "---------------"
        ]
      }
    }
  ]
}