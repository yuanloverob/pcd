{
  "cve_id": "CVE-2019-15694",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow, which could be triggered from DecodeManager::decodeRect. Vulnerability occurs due to the signdness error in processing MemOutStream. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "0943c006c7d900dfc0281639e992791d6c567438",
  "patch_info": {
    "commit_hash": "0943c006c7d900dfc0281639e992791d6c567438",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/0943c006c7d900dfc0281639e992791d6c567438",
    "files": [
      "common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h",
      "common/rdr/InStream.h",
      "common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h",
      "common/rfb/Password.cxx",
      "common/rfb/Password.h",
      "common/rfb/util.h",
      "tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h"
    ],
    "message": "Use size_t for lengths in stream objects\n\nProvides safety against them accidentally becoming negative because\nof bugs in the calculations.\n\nAlso does the same to CharArray and friends as they were strongly\nconnection to the stream objects.",
    "before_after_code_files": [
      "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
      "common/rdr/InStream.h||common/rdr/InStream.h",
      "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h||common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h||common/rfb/Configuration.h",
      "common/rfb/Password.cxx||common/rfb/Password.cxx",
      "common/rfb/Password.h||common/rfb/Password.h",
      "common/rfb/util.h||common/rfb/util.h",
      "tests/perf/encperf.cxx||tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h"
    ]
  },
  "patch_diff": {
    "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
      "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: enum { DEFAULT_BUF_SIZE = 8192,",
      "57:        MIN_BULK_SIZE = 1024 };",
      "60:                        bool closeWhenDone_)",
      "61:   : fd(fd_), closeWhenDone(closeWhenDone_),",
      "62:     timeoutms(timeoutms_), blockCallback(0),",
      "",
      "[Removed Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, int bufSize_,",
      "",
      "[Added Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67: }",
      "69: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
      "71:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
      "72:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
      "73:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "",
      "[Removed Lines]",
      "70:                        int bufSize_)",
      "",
      "[Added Lines]",
      "70:                        size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:   timeoutms = 0;",
      "93: }",
      "96: {",
      "97:   return offset + ptr - start;",
      "98: }",
      "101: {",
      "102:   if (length < MIN_BULK_SIZE) {",
      "103:     InStream::readBytes(data, length);",
      "",
      "[Removed Lines]",
      "95: int FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, int length)",
      "",
      "[Added Lines]",
      "95: size_t FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, size_t length)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:   U8* dataPtr = (U8*)data;",
      "110:   if (n > length) n = length;",
      "112:   memcpy(dataPtr, ptr, n);",
      "",
      "[Removed Lines]",
      "109:   int n = end - ptr;",
      "",
      "[Added Lines]",
      "109:   size_t n = end - ptr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123: }",
      "127: {",
      "128:   if (itemSize > bufSize)",
      "129:     throw Exception(\"FdInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "126: int FdInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "126: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "135:   end -= ptr - start;",
      "136:   ptr = start;",
      "139:   while (end < start + itemSize) {",
      "140:     bytes_to_read = start + bufSize - end;",
      "141:     if (!timing) {",
      "",
      "[Removed Lines]",
      "138:   int bytes_to_read;",
      "",
      "[Added Lines]",
      "138:   size_t bytes_to_read;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "148:       bytes_to_read = vncmin(bytes_to_read, vncmax(itemSize*nItems, 8));",
      "149:     }",
      "151:     if (n == 0) return 0;",
      "152:     end += n;",
      "153:   }",
      "156:     nItems = (end - ptr) / itemSize;",
      "158:   return nItems;",
      "",
      "[Removed Lines]",
      "150:     int n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "150:     size_t n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "175: {",
      "176:   struct timeval before, after;",
      "177:   if (timing)",
      "",
      "[Removed Lines]",
      "174: int FdInStream::readWithTimeoutOrCallback(void* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "174: size_t FdInStream::readWithTimeoutOrCallback(void* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
      "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:   public:",
      "41:                bool closeWhenDone_=false);",
      "43:     virtual ~FdInStream();",
      "45:     void setTimeout(int timeoutms);",
      "46:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
      "47:     int getFd() { return fd; }",
      "51:     void startTiming();",
      "52:     void stopTiming();",
      "",
      "[Removed Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, int bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback, int bufSize=0);",
      "48:     int pos();",
      "49:     void readBytes(void* data, int length);",
      "",
      "[Added Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, size_t bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback,",
      "43:                size_t bufSize=0);",
      "49:     size_t pos();",
      "50:     void readBytes(void* data, size_t length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:     unsigned int timeWaited() { return timeWaitedIn100us; }",
      "56:   protected:",
      "59:   private:",
      "62:     int fd;",
      "63:     bool closeWhenDone;",
      "",
      "[Removed Lines]",
      "57:     int overrun(int itemSize, int nItems, bool wait);",
      "60:     int readWithTimeoutOrCallback(void* buf, int len, bool wait=true);",
      "",
      "[Added Lines]",
      "58:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "61:     size_t readWithTimeoutOrCallback(void* buf, size_t len, bool wait=true);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:     unsigned int timeWaitedIn100us;",
      "69:     unsigned int timedKbits;",
      "73:     U8* start;",
      "74:   };",
      "",
      "[Removed Lines]",
      "71:     int bufSize;",
      "72:     int offset;",
      "",
      "[Added Lines]",
      "72:     size_t bufSize;",
      "73:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
      "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: enum { DEFAULT_BUF_SIZE = 16384 };",
      "55:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_),",
      "56:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "57: {",
      "",
      "[Removed Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, int bufSize_)",
      "",
      "[Added Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:   blocking = blocking_;",
      "80: }",
      "83: {",
      "84:   return offset + ptr - sentUpTo;",
      "85: }",
      "",
      "[Removed Lines]",
      "82: int FdOutStream::length()",
      "",
      "[Added Lines]",
      "82: size_t FdOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97: void FdOutStream::flush()",
      "98: {",
      "99:   while (sentUpTo < ptr) {",
      "105:     if (n == 0) {",
      "",
      "[Removed Lines]",
      "100:     int n = writeWithTimeout((const void*) sentUpTo,",
      "101:                              ptr - sentUpTo,",
      "102:                              blocking? timeoutms : 0);",
      "",
      "[Added Lines]",
      "100:     size_t n = writeWithTimeout((const void*) sentUpTo,",
      "101:                                 ptr - sentUpTo,",
      "102:                                 blocking? timeoutms : 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120: }",
      "124: {",
      "125:   if (itemSize > bufSize)",
      "126:     throw Exception(\"FdOutStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "123: int FdOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "123: size_t FdOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "129:   flush();",
      "136:         (itemSize < bufSize - (ptr - sentUpTo))) {",
      "137:       memmove(start, sentUpTo, ptr - sentUpTo);",
      "138:       ptr = start + (ptr - sentUpTo);",
      "",
      "[Removed Lines]",
      "132:   if (itemSize > end - ptr) {",
      "135:     if ((sentUpTo - start > bufSize / 4) &&",
      "",
      "[Added Lines]",
      "132:   if (itemSize > (size_t)(end - ptr)) {",
      "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   }",
      "154:     nItems = (end - ptr) / itemSize;",
      "156:   return nItems;",
      "",
      "[Removed Lines]",
      "153:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "153:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "170: {",
      "171:   int n;",
      "",
      "[Removed Lines]",
      "169: int FdOutStream::writeWithTimeout(const void* data, int length, int timeoutms)",
      "",
      "[Added Lines]",
      "169: size_t FdOutStream::writeWithTimeout(const void* data, size_t length, int timeoutms)",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
      "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~FdOutStream();",
      "40:     void setTimeout(int timeoutms);",
      "",
      "[Removed Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, int bufSize=0);",
      "",
      "[Added Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, size_t bufSize=0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:     int getFd() { return fd; }",
      "44:     void flush();",
      "47:     int bufferUsage();",
      "49:     unsigned getIdleTime();",
      "51:   private:",
      "54:     int fd;",
      "55:     bool blocking;",
      "56:     int timeoutms;",
      "59:     U8* start;",
      "60:     U8* sentUpTo;",
      "61:     struct timeval lastWrite;",
      "",
      "[Removed Lines]",
      "45:     int length();",
      "52:     int overrun(int itemSize, int nItems);",
      "53:     int writeWithTimeout(const void* data, int length, int timeoutms);",
      "57:     int bufSize;",
      "58:     int offset;",
      "",
      "[Added Lines]",
      "45:     size_t length();",
      "52:     size_t overrun(size_t itemSize, size_t nItems);",
      "53:     size_t writeWithTimeout(const void* data, size_t length, int timeoutms);",
      "57:     size_t bufSize;",
      "58:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
      "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:   ptr = end = b;",
      "49: }",
      "52: {",
      "53:   if (!file)",
      "54:     throw Exception(\"File is not open\");",
      "",
      "[Removed Lines]",
      "51: int FileInStream::pos()",
      "",
      "[Added Lines]",
      "51: size_t FileInStream::pos()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:   return ftell(file) + ptr - b;",
      "57: }",
      "60: {",
      "62:     throw Exception(\"FileInStream overrun: max itemSize exceeded\");",
      "64:   if (end - ptr != 0)",
      "",
      "[Removed Lines]",
      "59: int FileInStream::overrun(int itemSize, int nItems, bool wait)",
      "61:   if (itemSize > (int)sizeof(b))",
      "",
      "[Added Lines]",
      "59: size_t FileInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "61:   if (itemSize > sizeof(b))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     end += b + sizeof(b) - end;",
      "81:   }",
      "84:     nItems = (end - ptr) / itemSize;",
      "86:   return nItems;",
      "",
      "[Removed Lines]",
      "83:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "83:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.h||common/rdr/FileInStream.h": [
      "File: common/rdr/FileInStream.h -> common/rdr/FileInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     void reset(void);",
      "40:   protected:",
      "43:   private:",
      "44:     U8 b[131072];",
      "",
      "[Removed Lines]",
      "38:     int pos();",
      "41:     int overrun(int itemSize, int nItems, bool wait = true);",
      "",
      "[Added Lines]",
      "38:     size_t pos();",
      "41:     size_t overrun(size_t itemSize, size_t nItems, bool wait = true);",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
      "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static inline int min(int a, int b) {return a<b ? a : b;}",
      "32: : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_LEN), offset(0), in_stream(is)",
      "33: {",
      "34:   ptr = end = start = new U8[bufSize];",
      "",
      "[Removed Lines]",
      "31: HexInStream::HexInStream(InStream& is, int bufSize_)",
      "",
      "[Added Lines]",
      "31: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:   return true;",
      "51: }",
      "55:   if ((l % 2) == 0) {",
      "56:     delete [] *data;",
      "",
      "[Removed Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, int* length) {",
      "54:   int l=strlen(s);",
      "",
      "[Added Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, size_t* length) {",
      "54:   size_t l=strlen(s);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:       return true;",
      "63:       int byte = 0;",
      "64:       if (!readHexAndShift(s[i], &byte) ||",
      "65:         !readHexAndShift(s[i+1], &byte))",
      "",
      "[Removed Lines]",
      "62:     for(int i=0;i<l;i+=2) {",
      "",
      "[Added Lines]",
      "62:     for(size_t i=0;i<l;i+=2) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: }",
      "80:   return offset + ptr - start;",
      "81: }",
      "84:   if (itemSize > bufSize)",
      "85:     throw Exception(\"HexInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "79: int HexInStream::pos() {",
      "83: int HexInStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "79: size_t HexInStream::pos() {",
      "83: size_t HexInStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "92:   ptr = start;",
      "94:   while (end < ptr + itemSize) {",
      "96:     if (n == 0) return 0;",
      "97:     const U8* iptr = in_stream.getptr();",
      "98:     const U8* eptr = in_stream.getend();",
      "101:     U8* optr = (U8*) end;",
      "103:       int v = 0;",
      "104:       readHexAndShift(iptr[i*2], &v);",
      "105:       readHexAndShift(iptr[i*2+1], &v);",
      "",
      "[Removed Lines]",
      "95:     int n = in_stream.check(2, 1, wait);",
      "99:     int length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "95:     size_t n = in_stream.check(2, 1, wait);",
      "99:     size_t length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "110:     end += length;",
      "111:   }",
      "114:     nItems = (end - ptr) / itemSize;",
      "116:   return nItems;",
      "",
      "[Removed Lines]",
      "113:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "113:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
      "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexInStream : public InStream {",
      "27:   public:",
      "30:     virtual ~HexInStream();",
      "34:     static bool readHexAndShift(char c, int* v);",
      "37:   protected:",
      "40:   private:",
      "42:     U8* start;",
      "45:     InStream& in_stream;",
      "46:   };",
      "",
      "[Removed Lines]",
      "29:     HexInStream(InStream& is, int bufSize=0);",
      "32:     int pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, int* length);",
      "38:     int overrun(int itemSize, int nItems, bool wait);",
      "41:     int bufSize;",
      "43:     int offset;",
      "",
      "[Added Lines]",
      "29:     HexInStream(InStream& is, size_t bufSize=0);",
      "32:     size_t pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, size_t* length);",
      "38:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "41:     size_t bufSize;",
      "43:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
      "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: const int DEFAULT_BUF_LEN = 16384;",
      "29: : out_stream(os), offset(0), bufSize(buflen ? buflen : DEFAULT_BUF_LEN)",
      "30: {",
      "31:   if (bufSize % 2)",
      "",
      "[Removed Lines]",
      "26: static inline int min(int a, int b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, int buflen)",
      "",
      "[Added Lines]",
      "26: static inline size_t min(size_t a, size_t b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, size_t buflen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:     throw rdr::Exception(\"intToHex failed\");",
      "49: }",
      "52:   char* buffer = new char[length*2+1];",
      "54:     buffer[i*2] = intToHex((data[i] >> 4) & 15);",
      "55:     buffer[i*2+1] = intToHex((data[i] & 15));",
      "56:     if (!buffer[i*2] || !buffer[i*2+1]) {",
      "",
      "[Removed Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, int length) {",
      "53:   for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, size_t length) {",
      "53:   for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "70:     out_stream.check(2);",
      "71:     U8* optr = out_stream.getptr();",
      "72:     U8* oend = out_stream.getend();",
      "76:       optr[i*2] = intToHex((pos[i] >> 4) & 0xf);",
      "77:       optr[i*2+1] = intToHex(pos[i] & 0xf);",
      "78:     }",
      "",
      "[Removed Lines]",
      "73:     int length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "73:     size_t length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84:   ptr = start;",
      "85: }",
      "88: {",
      "89:   return offset + ptr - start;",
      "90: }",
      "",
      "[Removed Lines]",
      "87: int HexOutStream::length()",
      "",
      "[Added Lines]",
      "87: size_t HexOutStream::length()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "95:   out_stream.flush();",
      "96: }",
      "100:   if (itemSize > bufSize)",
      "101:     throw Exception(\"HexOutStream overrun: max itemSize exceeded\");",
      "103:   writeBuffer();",
      "106:     nItems = (end - ptr) / itemSize;",
      "108:   return nItems;",
      "",
      "[Removed Lines]",
      "98: int",
      "99: HexOutStream::overrun(int itemSize, int nItems) {",
      "105:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "98: size_t",
      "99: HexOutStream::overrun(size_t itemSize, size_t nItems) {",
      "105:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h": [
      "File: common/rdr/HexOutStream.h -> common/rdr/HexOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexOutStream : public OutStream {",
      "27:   public:",
      "30:     virtual ~HexOutStream();",
      "32:     void flush();",
      "35:     static char intToHex(int i);",
      "38:   private:",
      "39:     void writeBuffer();",
      "42:     OutStream& out_stream;",
      "44:     U8* start;",
      "47:   };",
      "49: }",
      "",
      "[Removed Lines]",
      "29:     HexOutStream(OutStream& os, int buflen=0);",
      "33:     int length();",
      "36:     static char* binToHexStr(const char* data, int length);",
      "40:     int overrun(int itemSize, int nItems);",
      "45:     int offset;",
      "46:     int bufSize;",
      "",
      "[Added Lines]",
      "29:     HexOutStream(OutStream& os, size_t buflen=0);",
      "33:     size_t length();",
      "36:     static char* binToHexStr(const char* data, size_t length);",
      "40:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t offset;",
      "46:     size_t bufSize;",
      "",
      "---------------"
    ],
    "common/rdr/InStream.h||common/rdr/InStream.h": [
      "File: common/rdr/InStream.h -> common/rdr/InStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     {",
      "46:       if (ptr + itemSize * nItems > end) {",
      "47:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "44:     inline int check(int itemSize, int nItems=1, bool wait=true)",
      "",
      "[Added Lines]",
      "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "59:     inline bool checkNoWait(int length) { return check(length, 1, false)!=0; }",
      "",
      "[Added Lines]",
      "59:     inline bool checkNoWait(size_t length) { return check(length, 1, false)!=0; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:     static U32 maxStringLength;",
      "86:       while (bytes > 0) {",
      "88:         ptr += n;",
      "89:         bytes -= n;",
      "90:       }",
      "",
      "[Removed Lines]",
      "85:     inline void skip(int bytes) {",
      "87:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "85:     inline void skip(size_t bytes) {",
      "87:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "96:       U8* dataPtr = (U8*)data;",
      "97:       U8* dataEnd = dataPtr + length;",
      "98:       while (dataPtr < dataEnd) {",
      "100:         memcpy(dataPtr, ptr, n);",
      "101:         ptr += n;",
      "102:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "95:     void readBytes(void* data, int length) {",
      "99:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "95:     void readBytes(void* data, size_t length) {",
      "99:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "117:     virtual int pos() = 0;",
      "",
      "[Added Lines]",
      "117:     virtual size_t pos() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "138:   protected:",
      "",
      "[Removed Lines]",
      "136:     virtual int overrun(int itemSize, int nItems, bool wait=true) = 0;",
      "",
      "[Added Lines]",
      "136:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait=true) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/MemInStream.h||common/rdr/MemInStream.h": [
      "File: common/rdr/MemInStream.h -> common/rdr/MemInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:   public:",
      "40:       : start((const U8*)data), deleteWhenDone(deleteWhenDone_)",
      "41:     {",
      "42:       ptr = start;",
      "",
      "[Removed Lines]",
      "39:     MemInStream(const void* data, int len, bool deleteWhenDone_=false)",
      "",
      "[Added Lines]",
      "39:     MemInStream(const void* data, size_t len, bool deleteWhenDone_=false)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         delete [] start;",
      "49:     }",
      "54:   private:",
      "57:     const U8* start;",
      "58:     bool deleteWhenDone;",
      "59:   };",
      "",
      "[Removed Lines]",
      "51:     int pos() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "56:     int overrun(int itemSize, int nItems, bool wait) { throw EndOfStream(); }",
      "",
      "[Added Lines]",
      "51:     size_t pos() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "56:     size_t overrun(size_t itemSize, size_t nItems, bool wait) { throw EndOfStream(); }",
      "",
      "---------------"
    ],
    "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
      "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:       delete [] start;",
      "41:     }",
      "44:       check(length);",
      "45:       memcpy(ptr, data, length);",
      "46:       ptr += length;",
      "47:     }",
      "50:     void clear() { ptr = start; };",
      "51:     void clearAndZero() { memset(start, 0, ptr-start); clear(); }",
      "",
      "[Removed Lines]",
      "43:     void writeBytes(const void* data, int length) {",
      "49:     int length() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "",
      "[Added Lines]",
      "43:     void writeBytes(const void* data, size_t length) {",
      "49:     size_t length() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:         len = (end - start) * 2;",
      "68:       U8* newStart = new U8[len];",
      "",
      "[Removed Lines]",
      "63:     int overrun(int itemSize, int nItems) {",
      "64:       int len = ptr - start + itemSize * nItems;",
      "65:       if (len < (end - start) * 2)",
      "",
      "[Added Lines]",
      "63:     size_t overrun(size_t itemSize, size_t nItems) {",
      "64:       size_t len = ptr - start + itemSize * nItems;",
      "65:       if (len < (size_t)(end - start) * 2)",
      "",
      "---------------"
    ],
    "common/rdr/OutStream.h||common/rdr/OutStream.h": [
      "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:     {",
      "49:       if (ptr + itemSize * nItems > end) {",
      "50:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "47:     inline int check(int itemSize, int nItems=1)",
      "",
      "[Added Lines]",
      "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:       writeBytes(str, len);",
      "77:     }",
      "80:       while (bytes-- > 0) writeU8(0);",
      "81:     }",
      "84:       while (bytes > 0) {",
      "86:         ptr += n;",
      "87:         bytes -= n;",
      "88:       }",
      "",
      "[Removed Lines]",
      "79:     inline void pad(int bytes) {",
      "83:     inline void skip(int bytes) {",
      "85:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "79:     inline void pad(size_t bytes) {",
      "83:     inline void skip(size_t bytes) {",
      "85:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:       const U8* dataPtr = (const U8*)data;",
      "95:       const U8* dataEnd = dataPtr + length;",
      "96:       while (dataPtr < dataEnd) {",
      "98:         memcpy(ptr, dataPtr, n);",
      "99:         ptr += n;",
      "100:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "93:     void writeBytes(const void* data, int length) {",
      "97:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "93:     void writeBytes(const void* data, size_t length) {",
      "97:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:       while (length > 0) {",
      "109:         is->readBytes(ptr, n);",
      "110:         ptr += n;",
      "111:         length -= n;",
      "",
      "[Removed Lines]",
      "106:     void copyBytes(InStream* is, int length) {",
      "108:         int n = check(1, length);",
      "",
      "[Added Lines]",
      "106:     void copyBytes(InStream* is, size_t length) {",
      "108:         size_t n = check(1, length);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "127:     virtual int length() = 0;",
      "",
      "[Added Lines]",
      "127:     virtual size_t length() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   protected:",
      "",
      "[Removed Lines]",
      "148:     virtual int overrun(int itemSize, int nItems) = 0;",
      "",
      "[Added Lines]",
      "148:     virtual size_t overrun(size_t itemSize, size_t nItems) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
      "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: using namespace rdr;",
      "40: unsigned int RandomStream::seed;",
      "",
      "[Removed Lines]",
      "38: const int DEFAULT_BUF_LEN = 256;",
      "",
      "[Added Lines]",
      "38: const size_t DEFAULT_BUF_LEN = 256;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: #endif",
      "87: }",
      "90:   return offset + ptr - start;",
      "91: }",
      "94:   if (itemSize > DEFAULT_BUF_LEN)",
      "95:     throw Exception(\"RandomStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "89: int RandomStream::pos() {",
      "93: int RandomStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "89: size_t RandomStream::pos() {",
      "93: size_t RandomStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   offset += ptr - start;",
      "102:   ptr = start;",
      "106: #ifdef RFB_HAVE_WINCRYPT",
      "107:   if (provider) {",
      "",
      "[Removed Lines]",
      "104:   int length = start + DEFAULT_BUF_LEN - end;",
      "",
      "[Added Lines]",
      "104:   size_t length = start + DEFAULT_BUF_LEN - end;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112: #else",
      "113: #ifndef WIN32",
      "114:   if (fp) {",
      "116:     if (n != 1)",
      "117:       throw rdr::SystemException(\"reading /dev/urandom or /dev/random failed\",",
      "118:                                  errno);",
      "",
      "[Removed Lines]",
      "115:     int n = fread((U8*)end, length, 1, fp);",
      "",
      "[Added Lines]",
      "115:     size_t n = fread((U8*)end, length, 1, fp);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "122:   {",
      "123: #endif",
      "124: #endif",
      "127:   }",
      "130:     nItems = (end - ptr) / itemSize;",
      "132:   return nItems;",
      "",
      "[Removed Lines]",
      "125:     for (int i=0; i<length; i++)",
      "129:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "125:     for (size_t i=0; i<length; i++)",
      "129:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.h||common/rdr/RandomStream.h": [
      "File: common/rdr/RandomStream.h -> common/rdr/RandomStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     RandomStream();",
      "40:     virtual ~RandomStream();",
      "44:   protected:",
      "47:   private:",
      "48:     U8* start;",
      "51:     static unsigned int seed;",
      "52: #ifdef RFB_HAVE_WINCRYPT",
      "",
      "[Removed Lines]",
      "42:     int pos();",
      "45:     int overrun(int itemSize, int nItems, bool wait);",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "42:     size_t pos();",
      "45:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
      "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete[] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "84: {",
      "85:   if (itemSize > bufSize)",
      "86:     throw Exception(\"TLSInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "78: int TLSInStream::pos()",
      "83: int TLSInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "78: size_t TLSInStream::pos()",
      "83: size_t TLSInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:   ptr = start;",
      "95:   while (end < start + itemSize) {",
      "97:     if (!wait && n == 0)",
      "98:       return 0;",
      "99:     end += n;",
      "100:   }",
      "103:     nItems = (end - ptr) / itemSize;",
      "105:   return nItems;",
      "106: }",
      "109: {",
      "110:   int n;",
      "",
      "[Removed Lines]",
      "96:     int n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > end - ptr)",
      "108: int TLSInStream::readTLS(U8* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > (size_t)(end - ptr))",
      "108: size_t TLSInStream::readTLS(U8* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h": [
      "File: common/rdr/TLSInStream.h -> common/rdr/TLSInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     TLSInStream(InStream* in, gnutls_session_t session);",
      "37:     virtual ~TLSInStream();",
      "41:   private:",
      "44:     static ssize_t pull(gnutls_transport_ptr_t str, void* data, size_t size);",
      "46:     gnutls_session_t session;",
      "47:     InStream* in;",
      "50:     U8* start;",
      "51:   };",
      "52: };",
      "",
      "[Removed Lines]",
      "39:     int pos();",
      "42:     int overrun(int itemSize, int nItems, bool wait);",
      "43:     int readTLS(U8* buf, int len, bool wait);",
      "48:     int bufSize;",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t pos();",
      "42:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "43:     size_t readTLS(U8* buf, size_t len, bool wait);",
      "48:     size_t bufSize;",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
      "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete [] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int TLSOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t TLSOutStream::length()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84: {",
      "85:   U8* sentUpTo = start;",
      "86:   while (sentUpTo < ptr) {",
      "88:     sentUpTo += n;",
      "89:     offset += n;",
      "90:   }",
      "",
      "[Removed Lines]",
      "87:     int n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "[Added Lines]",
      "87:     size_t n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:   out->flush();",
      "94: }",
      "97: {",
      "98:   if (itemSize > bufSize)",
      "99:     throw Exception(\"TLSOutStream overrun: max itemSize exceeded\");",
      "101:   flush();",
      "104:     nItems = (end - ptr) / itemSize;",
      "106:   return nItems;",
      "107: }",
      "110: {",
      "111:   int n;",
      "",
      "[Removed Lines]",
      "96: int TLSOutStream::overrun(int itemSize, int nItems)",
      "103:   if (itemSize * nItems > end - ptr)",
      "109: int TLSOutStream::writeTLS(const U8* data, int length)",
      "",
      "[Added Lines]",
      "96: size_t TLSOutStream::overrun(size_t itemSize, size_t nItems)",
      "103:   if (itemSize * nItems > (size_t)(end - ptr))",
      "109: size_t TLSOutStream::writeTLS(const U8* data, size_t length)",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h": [
      "File: common/rdr/TLSOutStream.h -> common/rdr/TLSOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     virtual ~TLSOutStream();",
      "38:     void flush();",
      "41:   protected:",
      "44:   private:",
      "46:     static ssize_t push(gnutls_transport_ptr_t str, const void* data, size_t size);",
      "48:     gnutls_session_t session;",
      "49:     OutStream* out;",
      "51:     U8* start;",
      "53:   };",
      "54: };",
      "",
      "[Removed Lines]",
      "39:     int length();",
      "42:     int overrun(int itemSize, int nItems);",
      "45:     int writeTLS(const U8* data, int length);",
      "50:     int bufSize;",
      "52:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t length();",
      "42:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t writeTLS(const U8* data, size_t length);",
      "50:     size_t bufSize;",
      "52:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
      "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: enum { DEFAULT_BUF_SIZE = 16384 };",
      "30:   : underlying(0), bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0),",
      "31:     zs(NULL), bytesIn(0)",
      "32: {",
      "",
      "[Removed Lines]",
      "29: ZlibInStream::ZlibInStream(int bufSize_)",
      "",
      "[Added Lines]",
      "29: ZlibInStream::ZlibInStream(size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   delete [] start;",
      "41: }",
      "44: {",
      "45:   underlying = is;",
      "46:   bytesIn = bytesIn_;",
      "47:   ptr = end = start;",
      "48: }",
      "51: {",
      "52:   return offset + ptr - start;",
      "53: }",
      "",
      "[Removed Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, int bytesIn_)",
      "50: int ZlibInStream::pos()",
      "",
      "[Added Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, size_t bytesIn_)",
      "50: size_t ZlibInStream::pos()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:   zs = NULL;",
      "97: }",
      "100: {",
      "101:   if (itemSize > bufSize)",
      "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "99: int ZlibInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "99: size_t ZlibInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:   end -= ptr - start;",
      "109:   ptr = start;",
      "112:     if (!decompress(wait))",
      "113:       return 0;",
      "114:   }",
      "117:     nItems = (end - ptr) / itemSize;",
      "119:   return nItems;",
      "",
      "[Removed Lines]",
      "111:   while (end - ptr < itemSize) {",
      "116:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "111:   while ((size_t)(end - ptr) < itemSize) {",
      "116:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "131:   zs->next_out = (U8*)end;",
      "132:   zs->avail_out = start + bufSize - end;",
      "135:   if (n == 0) return false;",
      "136:   zs->next_in = (U8*)underlying->getptr();",
      "137:   zs->avail_in = underlying->getend() - underlying->getptr();",
      "139:     zs->avail_in = bytesIn;",
      "141:   int rc = inflate(zs, Z_SYNC_FLUSH);",
      "",
      "[Removed Lines]",
      "134:   int n = underlying->check(1, 1, wait);",
      "138:   if ((int)zs->avail_in > bytesIn)",
      "",
      "[Added Lines]",
      "134:   size_t n = underlying->check(1, 1, wait);",
      "138:   if (zs->avail_in > bytesIn)",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
      "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~ZlibInStream();",
      "41:     void flushUnderlying();",
      "43:     void reset();",
      "45:   private:",
      "",
      "[Removed Lines]",
      "37:     ZlibInStream(int bufSize=0);",
      "40:     void setUnderlying(InStream* is, int bytesIn);",
      "42:     int pos();",
      "",
      "[Added Lines]",
      "37:     ZlibInStream(size_t bufSize=0);",
      "40:     void setUnderlying(InStream* is, size_t bytesIn);",
      "42:     size_t pos();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     void init();",
      "48:     void deinit();",
      "51:     bool decompress(bool wait);",
      "53:     InStream* underlying;",
      "56:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "50:     int overrun(int itemSize, int nItems, bool wait);",
      "54:     int bufSize;",
      "55:     int offset;",
      "57:     int bytesIn;",
      "",
      "[Added Lines]",
      "50:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "54:     size_t bufSize;",
      "55:     size_t offset;",
      "57:     size_t bytesIn;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
      "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: enum { DEFAULT_BUF_SIZE = 16384 };",
      "37:   : underlying(os), compressionLevel(compressLevel), newLevel(compressLevel),",
      "38:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "39: {",
      "",
      "[Removed Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, int bufSize_, int compressLevel)",
      "",
      "[Added Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, size_t bufSize_, int compressLevel)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:   newLevel = level;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int ZlibOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t ZlibOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:   ptr = start;",
      "99: }",
      "102: {",
      "103: #ifdef ZLIBOUT_DEBUG",
      "104:   vlog.debug(\"overrun\");",
      "",
      "[Removed Lines]",
      "101: int ZlibOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "101: size_t ZlibOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   checkCompressionLevel();",
      "113:     zs->next_in = start;",
      "114:     zs->avail_in = ptr - start;",
      "",
      "[Removed Lines]",
      "112:   while (end - ptr < itemSize) {",
      "",
      "[Added Lines]",
      "112:   while ((size_t)(end - ptr) < itemSize) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "130:     }",
      "131:   }",
      "134:     nItems = (end - ptr) / itemSize;",
      "136:   return nItems;",
      "",
      "[Removed Lines]",
      "133:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "133:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h": [
      "File: common/rdr/ZlibOutStream.h -> common/rdr/ZlibOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:   public:",
      "39:     virtual ~ZlibOutStream();",
      "41:     void setUnderlying(OutStream* os);",
      "42:     void setCompressionLevel(int level=-1);",
      "43:     void flush();",
      "46:   private:",
      "49:     void deflate(int flush);",
      "50:     void checkCompressionLevel();",
      "52:     OutStream* underlying;",
      "53:     int compressionLevel;",
      "54:     int newLevel;",
      "57:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "38:     ZlibOutStream(OutStream* os=0, int bufSize=0, int compressionLevel=-1);",
      "44:     int length();",
      "48:     int overrun(int itemSize, int nItems);",
      "55:     int bufSize;",
      "56:     int offset;",
      "",
      "[Added Lines]",
      "38:     ZlibOutStream(OutStream* os=0, size_t bufSize=0, int compressionLevel=-1);",
      "44:     size_t length();",
      "48:     size_t overrun(size_t itemSize, size_t nItems);",
      "55:     size_t bufSize;",
      "56:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx": [
      "File: common/rfb/Configuration.cxx -> common/rfb/Configuration.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "423: BinaryParameter::BinaryParameter(const char* name_, const char* desc_,",
      "425: : VoidParameter(name_, desc_, co), value(0), length(0), def_value((char*)v), def_length(l) {",
      "426:   if (l) {",
      "427:     value = new char[l];",
      "",
      "[Removed Lines]",
      "424:      const void* v, int l, ConfigurationObject co)",
      "",
      "[Added Lines]",
      "424:      const void* v, size_t l, ConfigurationObject co)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:   return rdr::HexInStream::hexStrToBin(v, &value, &length);",
      "442: }",
      "445:   LOCK_CONFIG;",
      "446:   if (immutable) return;",
      "447:   vlog.debug(\"set %s(Binary)\", getName());",
      "",
      "[Removed Lines]",
      "444: void BinaryParameter::setParam(const void* v, int len) {",
      "",
      "[Added Lines]",
      "444: void BinaryParameter::setParam(const void* v, size_t len) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:   return rdr::HexOutStream::binToHexStr(value, length);",
      "463: }",
      "466:   LOCK_CONFIG;",
      "467:   if (length_) *length_ = length;",
      "468:   if (data_) {",
      "",
      "[Removed Lines]",
      "465: void BinaryParameter::getData(void** data_, int* length_) const {",
      "",
      "[Added Lines]",
      "465: void BinaryParameter::getData(void** data_, size_t* length_) const {",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.h||common/rfb/Configuration.h": [
      "File: common/rfb/Configuration.h -> common/rfb/Configuration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "257:   class BinaryParameter : public VoidParameter {",
      "258:   public:",
      "261:     using VoidParameter::setParam;",
      "262:     virtual ~BinaryParameter();",
      "263:     virtual bool setParam(const char* value);",
      "265:     virtual char* getDefaultStr() const;",
      "266:     virtual char* getValueStr() const;",
      "272:   protected:",
      "273:     char* value;",
      "275:     char* def_value;",
      "277:   };",
      "",
      "[Removed Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_, const void* v, int l,",
      "260:       ConfigurationObject co=ConfGlobal);",
      "264:     virtual void setParam(const void* v, int l);",
      "270:     void getData(void** data, int* length) const;",
      "274:     int length;",
      "276:     int def_length;",
      "",
      "[Added Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_,",
      "260:                     const void* v, size_t l,",
      "261:                     ConfigurationObject co=ConfGlobal);",
      "265:     virtual void setParam(const void* v, size_t l);",
      "271:     void getData(void** data, size_t* length) const;",
      "275:     size_t length;",
      "277:     size_t def_length;",
      "",
      "---------------"
    ],
    "common/rfb/Password.cxx||common/rfb/Password.cxx": [
      "File: common/rfb/Password.cxx -> common/rfb/Password.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: PlainPasswd::PlainPasswd(char* pwd) : CharArray(pwd) {",
      "39: }",
      "42: }",
      "44: PlainPasswd::PlainPasswd(const ObfuscatedPasswd& obfPwd) : CharArray(9) {",
      "",
      "[Removed Lines]",
      "41: PlainPasswd::PlainPasswd(int len) : CharArray(len) {",
      "",
      "[Added Lines]",
      "41: PlainPasswd::PlainPasswd(size_t len) : CharArray(len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63: ObfuscatedPasswd::ObfuscatedPasswd() : length(0) {",
      "64: }",
      "67: }",
      "69: ObfuscatedPasswd::ObfuscatedPasswd(const PlainPasswd& plainPwd) : CharArray(8), length(8) {",
      "71:   for (i=0; i<8; i++)",
      "72:     buf[i] = i<l ? plainPwd.buf[i] : 0;",
      "73:   deskey(d3desObfuscationKey, EN0);",
      "",
      "[Removed Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(int len) : CharArray(len), length(len) {",
      "70:   int l = strlen(plainPwd.buf), i;",
      "",
      "[Added Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(size_t len) : CharArray(len), length(len) {",
      "70:   size_t l = strlen(plainPwd.buf), i;",
      "",
      "---------------"
    ],
    "common/rfb/Password.h||common/rfb/Password.h": [
      "File: common/rfb/Password.h -> common/rfb/Password.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   public:",
      "29:     PlainPasswd();",
      "30:     PlainPasswd(char* pwd);",
      "32:     PlainPasswd(const ObfuscatedPasswd& obfPwd);",
      "33:     ~PlainPasswd();",
      "34:     void replaceBuf(char* b);",
      "",
      "[Removed Lines]",
      "31:     PlainPasswd(int len);",
      "",
      "[Added Lines]",
      "31:     PlainPasswd(size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:   class ObfuscatedPasswd : public CharArray {",
      "38:   public:",
      "39:     ObfuscatedPasswd();",
      "41:     ObfuscatedPasswd(const PlainPasswd& plainPwd);",
      "42:     ~ObfuscatedPasswd();",
      "44:   };",
      "46: }",
      "",
      "[Removed Lines]",
      "40:     ObfuscatedPasswd(int l);",
      "43:     int length;",
      "",
      "[Added Lines]",
      "40:     ObfuscatedPasswd(size_t l);",
      "43:     size_t length;",
      "",
      "---------------"
    ],
    "common/rfb/util.h||common/rfb/util.h": [
      "File: common/rfb/util.h -> common/rfb/util.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:   public:",
      "51:     CharArray() : buf(0) {}",
      "52:     CharArray(char* str) : buf(str) {} // note: assumes ownership",
      "54:       buf = new char[len]();",
      "55:     }",
      "56:     ~CharArray() {",
      "",
      "[Removed Lines]",
      "53:     CharArray(int len) {",
      "",
      "[Added Lines]",
      "53:     CharArray(size_t len) {",
      "",
      "---------------"
    ],
    "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
      "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: public:",
      "72:   DummyOutStream();",
      "75:   virtual void flush();",
      "77: private:",
      "80:   int offset;",
      "81:   rdr::U8 buf[131072];",
      "",
      "[Removed Lines]",
      "74:   virtual int length();",
      "78:   virtual int overrun(int itemSize, int nItems);",
      "",
      "[Added Lines]",
      "74:   virtual size_t length();",
      "78:   virtual size_t overrun(size_t itemSize, size_t nItems);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:   end = buf + sizeof(buf);",
      "142: }",
      "145: {",
      "146:   flush();",
      "147:   return offset;",
      "",
      "[Removed Lines]",
      "144: int DummyOutStream::length()",
      "",
      "[Added Lines]",
      "144: size_t DummyOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "153:   ptr = buf;",
      "154: }",
      "157: {",
      "158:   flush();",
      "160:     nItems = (end - ptr) / itemSize;",
      "161:   return nItems;",
      "162: }",
      "",
      "[Removed Lines]",
      "156: int DummyOutStream::overrun(int itemSize, int nItems)",
      "159:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "156: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
      "159:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx": [
      "File: win/rfb_win32/Registry.cxx -> win/rfb_win32/Registry.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "146:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setString\", result);",
      "147: }",
      "150:   LONG result = RegSetValueEx(key, valname, 0, REG_BINARY, (const BYTE*)value, length);",
      "151:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setBinary\", result);",
      "152: }",
      "",
      "[Removed Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, int length) const {",
      "",
      "[Added Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, size_t length) const {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "169:   }",
      "170: }",
      "173:   TCharArray hex(getRepresentation(valname));",
      "174:   if (!rdr::HexInStream::hexStrToBin(CStr(hex.buf), (char**)data, length))",
      "175:     throw rdr::Exception(\"getBinary failed\");",
      "176: }",
      "178:   try {",
      "179:     getBinary(valname, data, length);",
      "180:   } catch(rdr::Exception&) {",
      "",
      "[Removed Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, int* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflen) const {",
      "",
      "[Added Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflen) const {",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h": [
      "File: win/rfb_win32/Registry.h -> win/rfb_win32/Registry.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:       void setExpandString(const TCHAR* valname, const TCHAR* s) const;",
      "73:       void setString(const TCHAR* valname, const TCHAR* s) const;",
      "75:       void setInt(const TCHAR* valname, int i) const;",
      "76:       void setBool(const TCHAR* valname, bool b) const;",
      "78:       TCHAR* getString(const TCHAR* valname) const;",
      "79:       TCHAR* getString(const TCHAR* valname, const TCHAR* def) const;",
      "84:       int getInt(const TCHAR* valname) const;",
      "85:       int getInt(const TCHAR* valname, int def) const;",
      "",
      "[Removed Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, int length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, int* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflength) const;",
      "",
      "[Added Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, size_t length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, size_t* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflength) const;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
      "candidate_info": {
        "commit_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Fix depth sanity test in PixelFormat",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:     return false;",
          "681:   totalBits = bits(redMax) + bits(greenMax) + bits(blueMax);",
          "683:     return false;",
          "685:   if (((redMax << redShift) & (greenMax << greenShift)) != 0)",
          "",
          "[Removed Lines]",
          "682:   if (totalBits > bpp)",
          "",
          "[Added Lines]",
          "682:   if (totalBits > depth)",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7932f5e483f790169a0d2da2a7cc73c76ca93817",
      "candidate_info": {
        "commit_hash": "7932f5e483f790169a0d2da2a7cc73c76ca93817",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/7932f5e483f790169a0d2da2a7cc73c76ca93817",
        "files": [
          "common/rdr/InStream.h"
        ],
        "message": "Fix division by zero exception in SSecurityPlain.\n\nIf using SSecurityPlain and the user specifies an empty username\nand password, it will invoke InStream::checkNoWait(0) which will\ncause a division by zero when calculating the number of available\nitems.\n\nEnhance InStream::check() to behave properly when asked for\nzero items, or zero sized items.\n\nAdd comments to InStream::check(), InStream::checkNoWait(),\nand InStream::readBytes() to document expected behaviour\nwhen requested to check or read zero items, or an item with\nzero size.",
        "before_after_code_files": [
          "common/rdr/InStream.h||common/rdr/InStream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/InStream.h||common/rdr/InStream.h"
          ],
          "candidate": [
            "common/rdr/InStream.h||common/rdr/InStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
          "45:     {",
          "46:       size_t nAvail;",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "49:         return overrun(itemSize, nItems, wait);",
          "51:       nAvail = (end - ptr) / itemSize;",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:       if (itemSize == 0 || nItems == 0)",
          "49:         return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "62:     inline bool checkNoWait(size_t length) { return check(length, 1, false)!=0; }",
          "",
          "[Added Lines]",
          "67:     inline bool checkNoWait(size_t length)",
          "68:     {",
          "69:       return length == 0 || check(length, 1, false) > 0;",
          "70:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b35ae29f932288b0529eb9eed21c31364a3489a4",
      "candidate_info": {
        "commit_hash": "b35ae29f932288b0529eb9eed21c31364a3489a4",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b35ae29f932288b0529eb9eed21c31364a3489a4",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx",
          "tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx"
        ],
        "message": "Add stream avail() methods\n\nMakes it more readable to write code that needs to know how much\ndata/space is available in a stream.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx",
          "tests/perf/decperf.cxx||tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   }",
          "128:   size_t nAvail;",
          "130:   if (nAvail < nItems)",
          "131:     return nAvail;",
          "",
          "[Removed Lines]",
          "129:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "129:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   flush();",
          "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "",
          "[Removed Lines]",
          "132:   if (itemSize > (size_t)(end - ptr)) {",
          "",
          "[Added Lines]",
          "132:   if (itemSize > avail()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:   }",
          "152:   size_t nAvail;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "",
          "[Removed Lines]",
          "153:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "153:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   }",
          "83:   size_t nAvail;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "",
          "[Removed Lines]",
          "84:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "84:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "94:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "[Added Lines]",
          "94:   while (avail() < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   }",
          "113:   size_t nAvail;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "",
          "[Removed Lines]",
          "114:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "114:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   writeBuffer();",
          "105:   size_t nAvail;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "",
          "[Removed Lines]",
          "106:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "106:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     virtual ~InStream() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     inline size_t avail()",
          "42:     {",
          "43:       return end - ptr;",
          "44:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     {",
          "46:       size_t nAvail;",
          "49:         return overrun(itemSize, nItems, wait);",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "[Removed Lines]",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "51:       nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "56:       if (itemSize > avail())",
          "59:       nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     virtual ~OutStream() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     inline size_t avail()",
          "47:     {",
          "48:       return end - ptr;",
          "49:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     {",
          "49:       size_t nAvail;",
          "52:         return overrun(itemSize, nItems);",
          "55:       if (nAvail < nItems)",
          "56:         return nAvail;",
          "",
          "[Removed Lines]",
          "51:       if (itemSize > (size_t)(end - ptr))",
          "54:       nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "59:       if (itemSize > avail())",
          "62:       nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   size_t nAvail;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "",
          "[Removed Lines]",
          "130:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "130:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   }",
          "102:   size_t nAvail;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "",
          "[Removed Lines]",
          "103:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "103:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   flush();",
          "103:   size_t nAvail;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "",
          "[Removed Lines]",
          "104:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "104:   nAvail = avail() / itemSize;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "112:     if (!decompress(wait))",
          "113:       return 0;",
          "114:   }",
          "116:   size_t nAvail;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "",
          "[Removed Lines]",
          "111:   while ((size_t)(end - ptr) < itemSize) {",
          "117:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "111:   while (avail() < itemSize) {",
          "117:   nAvail = avail() / itemSize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   size_t n = underlying->check(1, 1, wait);",
          "137:   if (n == 0) return false;",
          "138:   zs->next_in = (U8*)underlying->getptr();",
          "140:   if (zs->avail_in > bytesIn)",
          "141:     zs->avail_in = bytesIn;",
          "",
          "[Removed Lines]",
          "139:   zs->avail_in = underlying->getend() - underlying->getptr();",
          "",
          "[Added Lines]",
          "139:   zs->avail_in = underlying->avail();",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   checkCompressionLevel();",
          "113:     zs->next_in = start;",
          "114:     zs->avail_in = ptr - start;",
          "",
          "[Removed Lines]",
          "112:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "[Added Lines]",
          "112:   while (avail() < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   }",
          "133:   size_t nAvail;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "",
          "[Removed Lines]",
          "134:   nAvail = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "134:   nAvail = avail() / itemSize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:   do {",
          "152:     underlying->check(1);",
          "153:     zs->next_out = underlying->getptr();",
          "156: #ifdef ZLIBOUT_DEBUG",
          "157:     vlog.debug(\"calling deflate, avail_in %d, avail_out %d\",",
          "",
          "[Removed Lines]",
          "154:     zs->avail_out = underlying->getend() - underlying->getptr();",
          "",
          "[Added Lines]",
          "154:     zs->avail_out = underlying->avail();",
          "",
          "---------------"
        ],
        "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx": [
          "File: common/rfb/JpegCompressor.cxx -> common/rfb/JpegCompressor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   jc->clear();",
          "87:   dest->pub.next_output_byte = jc->getptr();",
          "89: }",
          "91: static boolean",
          "",
          "[Removed Lines]",
          "88:   dest->pub.free_in_buffer = jc->getend() - jc->getptr();",
          "",
          "[Added Lines]",
          "88:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   jc->setptr(jc->getend());",
          "98:   jc->overrun(jc->getend() - jc->getstart(), 1);",
          "99:   dest->pub.next_output_byte = jc->getptr();",
          "102:   return TRUE;",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   dest->pub.free_in_buffer = jc->getend() - jc->getptr();",
          "",
          "[Added Lines]",
          "100:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "---------------"
        ],
        "tests/perf/decperf.cxx||tests/perf/decperf.cxx": [
          "File: tests/perf/decperf.cxx -> tests/perf/decperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "103: {",
          "104:   flush();",
          "107:   return nItems;",
          "108: }",
          "",
          "[Removed Lines]",
          "105:   if (itemSize * nItems > (size_t)(end - ptr))",
          "106:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "105:   if (itemSize * nItems > avail())",
          "106:     nItems = avail() / itemSize;",
          "",
          "---------------"
        ],
        "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
          "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "160: {",
          "161:   flush();",
          "164:   return nItems;",
          "165: }",
          "",
          "[Removed Lines]",
          "162:   if (itemSize * nItems > (size_t)(end - ptr))",
          "163:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "162:   if (itemSize * nItems > avail())",
          "163:     nItems = avail() / itemSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2354ce7404b8bacced3249e9c9787a12de307d2a",
      "candidate_info": {
        "commit_hash": "2354ce7404b8bacced3249e9c9787a12de307d2a",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/2354ce7404b8bacced3249e9c9787a12de307d2a",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h",
          "vncviewer/CConn.cxx",
          "vncviewer/CConn.h"
        ],
        "message": "Improved bandwidth monitoring\n\nNow measures over an entire update, which should hopefully give us more\nstable values. They are still small values for fast networks though so\nincrease precision in the values we keep.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
          "vncviewer/CConn.cxx||vncviewer/CConn.cxx",
          "vncviewer/CConn.h||vncviewer/CConn.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: FdInStream::FdInStream(int fd_, int timeoutms_,",
          "52:                        bool closeWhenDone_)",
          "53:   : fd(fd_), closeWhenDone(closeWhenDone_),",
          "56: {",
          "57: }",
          "59: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_)",
          "62: {",
          "63: }",
          "",
          "[Removed Lines]",
          "54:     timeoutms(timeoutms_), blockCallback(0),",
          "55:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "60:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "61:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "",
          "[Added Lines]",
          "54:     timeoutms(timeoutms_), blockCallback(0)",
          "59:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: size_t FdInStream::readWithTimeoutOrCallback(void* buf, size_t len, bool wait)",
          "106: {",
          "111:   int n;",
          "112:   while (true) {",
          "113:     do {",
          "",
          "[Removed Lines]",
          "107:   struct timeval before, after;",
          "108:   if (timing)",
          "109:     gettimeofday(&before, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   if (n < 0) throw SystemException(\"read\",errno);",
          "145:   if (n == 0) throw EndOfStream();",
          "162:   return n;",
          "163: }",
          "",
          "[Removed Lines]",
          "147:   if (timing) {",
          "148:     gettimeofday(&after, 0);",
          "149:     int newTimeWaited = ((after.tv_sec - before.tv_sec) * 10000 +",
          "150:                          (after.tv_usec - before.tv_usec) / 100);",
          "151:     int newKbits = n * 8 / 1000;",
          "155:     if (newTimeWaited > newKbits*1000) newTimeWaited = newKbits*1000;",
          "156:     if (newTimeWaited < newKbits/4)    newTimeWaited = newKbits/4;",
          "158:     timeWaitedIn100us += newTimeWaited;",
          "159:     timedKbits += newKbits;",
          "160:   }",
          "165: void FdInStream::startTiming()",
          "166: {",
          "167:   timing = true;",
          "171:   if (timeWaitedIn100us > 10000) {",
          "172:     timedKbits = timedKbits * 10000 / timeWaitedIn100us;",
          "173:     timeWaitedIn100us = 10000;",
          "174:   }",
          "175: }",
          "177: void FdInStream::stopTiming()",
          "178: {",
          "179:   timing = false;",
          "180:   if (timeWaitedIn100us < timedKbits/2)",
          "181:     timeWaitedIn100us = timedKbits/2; // upper limit 20Mbit/s",
          "182: }",
          "184: unsigned int FdInStream::kbitsPerSecond()",
          "185: {",
          "190:   return timedKbits * 10000 / timeWaitedIn100us;",
          "191: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
          "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
          "46:     int getFd() { return fd; }",
          "53:   private:",
          "54:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "[Removed Lines]",
          "48:     void startTiming();",
          "49:     void stopTiming();",
          "50:     unsigned int kbitsPerSecond();",
          "51:     unsigned int timeWaited() { return timeWaitedIn100us; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     int timeoutms;",
          "61:     FdInStreamBlockCallback* blockCallback;",
          "67:     size_t offset;",
          "68:     U8* start;",
          "69:   };",
          "",
          "[Removed Lines]",
          "63:     bool timing;",
          "64:     unsigned int timeWaitedIn100us;",
          "65:     unsigned int timedKbits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "vncviewer/CConn.cxx||vncviewer/CConn.cxx": [
          "File: vncviewer/CConn.cxx -> vncviewer/CConn.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: CConn::CConn(const char* vncServerName, network::Socket* socket=NULL)",
          "76:   : serverHost(0), serverPort(0), desktop(NULL),",
          "77:     updateCount(0), pixelCount(0),",
          "79: {",
          "80:   setShared(::shared);",
          "81:   sock = socket;",
          "",
          "[Removed Lines]",
          "78:     lastServerEncoding((unsigned int)-1)",
          "",
          "[Added Lines]",
          "78:     lastServerEncoding((unsigned int)-1), bpsEstimate(20000000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:   strcat(infoText, \"\\n\");",
          "198:   snprintf(scratch, sizeof(scratch),",
          "200:   strcat(infoText, scratch);",
          "201:   strcat(infoText, \"\\n\");",
          "",
          "[Removed Lines]",
          "199:            _(\"Line speed estimate: %d kbit/s\"), sock->inStream().kbitsPerSecond());",
          "",
          "[Added Lines]",
          "199:            _(\"Line speed estimate: %d kbit/s\"), (int)(bpsEstimate/1000));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345: {",
          "346:   CConnection::framebufferUpdateStart();",
          "349:   Fl::add_timeout(1.0, handleUpdateTimeout, this);",
          "350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:   gettimeofday(&updateStartTime, NULL);",
          "350:   updateStartPos = sock->inStream().pos();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356: void CConn::framebufferUpdateEnd()",
          "357: {",
          "358:   CConnection::framebufferUpdateEnd();",
          "360:   updateCount++;",
          "362:   Fl::remove_timeout(handleUpdateTimeout, this);",
          "363:   desktop->updateWindow();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:   unsigned long long elapsed, bps;",
          "363:   struct timeval now;",
          "370:   gettimeofday(&now, NULL);",
          "371:   elapsed = (now.tv_sec - updateStartTime.tv_sec) * 1000000;",
          "372:   elapsed += now.tv_usec - updateStartTime.tv_usec;",
          "373:   if (elapsed == 0)",
          "374:     elapsed = 1;",
          "375:   bps = (unsigned long long)(sock->inStream().pos() -",
          "376:                              updateStartPos) * 8 *",
          "377:                             1000000 / elapsed;",
          "380:   if (elapsed > 2000000)",
          "381:     elapsed = 2000000;",
          "382:   bpsEstimate = ((bpsEstimate * (10000000 - elapsed)) +",
          "383:                  (bps * elapsed)) / 10000000;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382: void CConn::dataRect(const Rect& r, int encoding)",
          "383: {",
          "386:   if (encoding != encodingCopyRect)",
          "387:     lastServerEncoding = encoding;",
          "389:   CConnection::dataRect(r, encoding);",
          "393:   pixelCount += r.area();",
          "394: }",
          "",
          "[Removed Lines]",
          "384:   sock->inStream().startTiming();",
          "391:   sock->inStream().stopTiming();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460: void CConn::autoSelectFormatAndEncoding()",
          "461: {",
          "464:   bool newFullColour = fullColour;",
          "465:   int newQualityLevel = ::qualityLevel;",
          "468:   setPreferredEncoding(encodingTight);",
          "475:   if (!noJpeg) {",
          "477:       newQualityLevel = 8;",
          "478:     else",
          "479:       newQualityLevel = 6;",
          "481:     if (newQualityLevel != ::qualityLevel) {",
          "482:       vlog.info(_(\"Throughput %d kbit/s - changing to quality %d\"),",
          "484:       ::qualityLevel.setParam(newQualityLevel);",
          "485:       setQualityLevel(newQualityLevel);",
          "486:     }",
          "",
          "[Removed Lines]",
          "462:   int kbitsPerSecond = sock->inStream().kbitsPerSecond();",
          "463:   unsigned int timeWaited = sock->inStream().timeWaited();",
          "471:   if ((kbitsPerSecond == 0) || (timeWaited < 10000))",
          "472:     return;",
          "476:     if (kbitsPerSecond > 16000)",
          "483:                 kbitsPerSecond, newQualityLevel);",
          "",
          "[Added Lines]",
          "489:     if (bpsEstimate > 16000000)",
          "496:                 (int)(bpsEstimate/1000), newQualityLevel);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "498:   }",
          "502:   if (newFullColour != fullColour) {",
          "503:     if (newFullColour)",
          "504:       vlog.info(_(\"Throughput %d kbit/s - full color is now enabled\"),",
          "506:     else",
          "507:       vlog.info(_(\"Throughput %d kbit/s - full color is now disabled\"),",
          "509:     fullColour.setParam(newFullColour);",
          "510:     updatePixelFormat();",
          "511:   }",
          "",
          "[Removed Lines]",
          "501:   newFullColour = (kbitsPerSecond > 256);",
          "505:                 kbitsPerSecond);",
          "508:                 kbitsPerSecond);",
          "",
          "[Added Lines]",
          "514:   newFullColour = (bpsEstimate > 256000);",
          "518:                 (int)(bpsEstimate/1000));",
          "521:                 (int)(bpsEstimate/1000));",
          "",
          "---------------"
        ],
        "vncviewer/CConn.h||vncviewer/CConn.h": [
          "File: vncviewer/CConn.h -> vncviewer/CConn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   rfb::PixelFormat fullColourPF;",
          "103:   int lastServerEncoding;",
          "104: };",
          "106: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:   struct timeval updateStartTime;",
          "106:   size_t updateStartPos;",
          "107:   unsigned long long bpsEstimate;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "186819080baea53410ae8d8100179a3874ac1e32",
      "candidate_info": {
        "commit_hash": "186819080baea53410ae8d8100179a3874ac1e32",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/186819080baea53410ae8d8100179a3874ac1e32",
        "files": [
          "common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/HexOutStream.h",
          "common/rdr/InStream.h",
          "common/rdr/MemInStream.h",
          "common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/TLSOutStream.h",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx",
          "common/rdr/ZlibOutStream.h",
          "common/rfb/JpegCompressor.cxx",
          "common/rfb/JpegCompressor.h",
          "tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx"
        ],
        "message": "Simplify stream availability handling\n\nJust have a simply number of bytes argument to avoid a lot of\ncomplexity.",
        "before_after_code_files": [
          "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
          "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
          "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
          "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx",
          "common/rfb/JpegCompressor.h||common/rfb/JpegCompressor.h",
          "tests/perf/decperf.cxx||tests/perf/decperf.cxx",
          "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
            "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
          ],
          "candidate": [
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
            "tests/perf/encperf.cxx||tests/perf/encperf.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx": [
          "File: common/rdr/BufferedInStream.cxx -> common/rdr/BufferedInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   return offset + ptr - start;",
          "45: }",
          "48: {",
          "50:     throw Exception(\"BufferedInStream overrun: \"",
          "51:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "54:   if (end - ptr != 0)",
          "55:     memmove(start, ptr, end - ptr);",
          "",
          "[Removed Lines]",
          "47: size_t BufferedInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "49:   if (itemSize > bufSize)",
          "52:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "",
          "[Added Lines]",
          "47: bool BufferedInStream::overrun(size_t needed, bool wait)",
          "49:   if (needed > bufSize)",
          "52:                     (long unsigned)needed, (long unsigned)bufSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   end -= ptr - start;",
          "59:   ptr = start;",
          "62:     if (!fillBuffer(start + bufSize - end, wait))",
          "64:   }",
          "72: }",
          "",
          "[Removed Lines]",
          "61:   while (avail() < itemSize) {",
          "63:       return 0;",
          "66:   size_t nAvail;",
          "67:   nAvail = avail() / itemSize;",
          "68:   if (nAvail < nItems)",
          "69:     return nAvail;",
          "71:   return nItems;",
          "",
          "[Added Lines]",
          "61:   while (avail() < needed) {",
          "63:       return false;",
          "66:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h": [
          "File: common/rdr/BufferedInStream.h -> common/rdr/BufferedInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   private:",
          "39:     virtual bool fillBuffer(size_t maxSize, bool wait) = 0;",
          "43:   private:",
          "44:     size_t bufSize;",
          "",
          "[Removed Lines]",
          "41:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "",
          "[Added Lines]",
          "41:     virtual bool overrun(size_t needed, bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx": [
          "File: common/rdr/BufferedOutStream.cxx -> common/rdr/BufferedOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     ptr = sentUpTo = start;",
          "72: }",
          "75: {",
          "77:     throw Exception(\"BufferedOutStream overrun: \"",
          "78:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "82:   flush();",
          "88:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "90:       memmove(start, sentUpTo, ptr - sentUpTo);",
          "91:       ptr = start + (ptr - sentUpTo);",
          "92:       sentUpTo = start;",
          "",
          "[Removed Lines]",
          "74: size_t BufferedOutStream::overrun(size_t itemSize, size_t nItems)",
          "76:   if (itemSize > bufSize)",
          "79:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "85:   while (itemSize > avail()) {",
          "89:         (itemSize < bufSize - (ptr - sentUpTo))) {",
          "",
          "[Added Lines]",
          "74: void BufferedOutStream::overrun(size_t needed)",
          "76:   if (needed > bufSize)",
          "79:                     (long unsigned)needed, (long unsigned)bufSize);",
          "85:   while (needed > avail()) {",
          "89:         (needed < bufSize - (ptr - sentUpTo))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         ptr = sentUpTo = start;",
          "106:     }",
          "107:   }",
          "115: }",
          "",
          "[Removed Lines]",
          "109:   size_t nAvail;",
          "110:   nAvail = avail() / itemSize;",
          "111:   if (nAvail < nItems)",
          "112:     return nAvail;",
          "114:   return nItems;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h": [
          "File: common/rdr/BufferedOutStream.h -> common/rdr/BufferedOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     virtual bool flushBuffer(bool wait) = 0;",
          "51:   private:",
          "52:     size_t bufSize;",
          "",
          "[Removed Lines]",
          "49:     virtual size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "49:     virtual void overrun(size_t needed);",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: bool HexInStream::fillBuffer(size_t maxSize, bool wait) {",
          "77:     return false;",
          "79:   const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "76:   if (!in_stream.check(2, 1, wait))",
          "",
          "[Added Lines]",
          "76:   if (!in_stream.check(2, wait))",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   out_stream.flush();",
          "96: }",
          "103:   writeBuffer();",
          "111: }",
          "",
          "[Removed Lines]",
          "98: size_t",
          "99: HexOutStream::overrun(size_t itemSize, size_t nItems) {",
          "100:   if (itemSize > bufSize)",
          "101:     throw Exception(\"HexOutStream overrun: max itemSize exceeded\");",
          "105:   size_t nAvail;",
          "106:   nAvail = avail() / itemSize;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "110:   return nItems;",
          "",
          "[Added Lines]",
          "98: void HexOutStream::overrun(size_t needed) {",
          "99:   if (needed > bufSize)",
          "100:     throw Exception(\"HexOutStream overrun: buffer size exceeded\");",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h": [
          "File: common/rdr/HexOutStream.h -> common/rdr/HexOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   private:",
          "39:     void writeBuffer();",
          "42:     OutStream& out_stream;",
          "",
          "[Removed Lines]",
          "40:     size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "40:     virtual void overrun(size_t needed);",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       return end - ptr;",
          "44:     }",
          "53:     {",
          "64:     }",
          "",
          "[Removed Lines]",
          "52:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
          "54:       size_t nAvail;",
          "56:       if (itemSize > avail())",
          "57:         return overrun(itemSize, nItems, wait);",
          "59:       nAvail = avail() / itemSize;",
          "60:       if (nAvail < nItems)",
          "61:         return nAvail;",
          "63:       return nItems;",
          "70:     inline bool checkNoWait(size_t length) { return check(length, 1, false)!=0; }",
          "",
          "[Added Lines]",
          "51:     inline size_t check(size_t needed, bool wait=true)",
          "53:       if (needed > avail())",
          "54:         return overrun(needed, wait);",
          "56:       return true;",
          "63:     inline bool checkNoWait(size_t length) { return check(length, false); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   private:",
          "148:   protected:",
          "",
          "[Removed Lines]",
          "146:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait=true) = 0;",
          "",
          "[Added Lines]",
          "138:     virtual bool overrun(size_t needed, bool wait=true) = 0;",
          "",
          "---------------"
        ],
        "common/rdr/MemInStream.h||common/rdr/MemInStream.h": [
          "File: common/rdr/MemInStream.h -> common/rdr/MemInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   private:",
          "57:     const U8* start;",
          "58:     bool deleteWhenDone;",
          "59:   };",
          "",
          "[Removed Lines]",
          "56:     size_t overrun(size_t itemSize, size_t nItems, bool wait) { throw EndOfStream(); }",
          "",
          "[Added Lines]",
          "56:     bool overrun(size_t needed, bool wait) { throw EndOfStream(); }",
          "",
          "---------------"
        ],
        "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
          "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   protected:",
          "60:       if (len < (size_t)(end - start) * 2)",
          "61:         len = (end - start) * 2;",
          "",
          "[Removed Lines]",
          "58:     size_t overrun(size_t itemSize, size_t nItems) {",
          "59:       size_t len = ptr - start + itemSize * nItems;",
          "",
          "[Added Lines]",
          "58:     virtual void overrun(size_t needed) {",
          "59:       size_t len = ptr - start + needed;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:       delete [] start;",
          "70:       start = newStart;",
          "71:       end = newStart + len;",
          "74:     }",
          "76:     U8* start;",
          "",
          "[Removed Lines]",
          "73:       return nItems;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       return end - ptr;",
          "49:     }",
          "56:     {",
          "67:     }",
          "",
          "[Removed Lines]",
          "55:     inline size_t check(size_t itemSize, size_t nItems=1)",
          "57:       size_t nAvail;",
          "59:       if (itemSize > avail())",
          "60:         return overrun(itemSize, nItems);",
          "62:       nAvail = avail() / itemSize;",
          "63:       if (nAvail < nItems)",
          "64:         return nAvail;",
          "66:       return nItems;",
          "",
          "[Added Lines]",
          "53:     inline void check(size_t needed)",
          "55:       if (needed > avail())",
          "56:         overrun(needed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     void writeBytes(const void* data, size_t length) {",
          "97:       while (length > 0) {",
          "99:         memcpy(ptr, data, n);",
          "100:         ptr += n;",
          "101:         data = (U8*)data + n;",
          "",
          "[Removed Lines]",
          "98:         size_t n = check(1, length);",
          "",
          "[Added Lines]",
          "88:         check(1);",
          "89:         size_t n = length;",
          "90:         if (length > avail())",
          "91:           n = avail();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     void copyBytes(InStream* is, size_t length) {",
          "109:       while (length > 0) {",
          "111:         is->readBytes(ptr, n);",
          "112:         ptr += n;",
          "113:         length -= n;",
          "",
          "[Removed Lines]",
          "110:         size_t n = check(1, length);",
          "",
          "[Added Lines]",
          "103:         check(1);",
          "104:         size_t n = length;",
          "105:         if (length > avail())",
          "106:           n = avail();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:   private:",
          "152:   protected:",
          "",
          "[Removed Lines]",
          "150:     virtual size_t overrun(size_t itemSize, size_t nItems) = 0;",
          "",
          "[Added Lines]",
          "144:     virtual void overrun(size_t needed) = 0;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   InStream *in = self->in;",
          "38:   try {",
          "40:       gnutls_transport_set_errno(self->session, EAGAIN);",
          "41:       return -1;",
          "42:     }",
          "",
          "[Removed Lines]",
          "39:     if (!in->check(1, 1, false)) {",
          "",
          "[Added Lines]",
          "39:     if (!in->check(1, false)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   int n;",
          "86:   if (gnutls_record_check_pending(session) == 0) {",
          "88:     if (n == 0)",
          "89:       return 0;",
          "90:   }",
          "",
          "[Removed Lines]",
          "87:     n = in->check(1, 1, wait);",
          "",
          "[Added Lines]",
          "87:     n = in->check(1, wait);",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   out->flush();",
          "94: }",
          "97: {",
          "101:   flush();",
          "109: }",
          "111: size_t TLSOutStream::writeTLS(const U8* data, size_t length)",
          "",
          "[Removed Lines]",
          "96: size_t TLSOutStream::overrun(size_t itemSize, size_t nItems)",
          "98:   if (itemSize > bufSize)",
          "99:     throw Exception(\"TLSOutStream overrun: max itemSize exceeded\");",
          "103:   size_t nAvail;",
          "104:   nAvail = avail() / itemSize;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "108:   return nItems;",
          "",
          "[Added Lines]",
          "96: void TLSOutStream::overrun(size_t needed)",
          "98:   if (needed > bufSize)",
          "99:     throw Exception(\"TLSOutStream overrun: buffer size exceeded\");",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h": [
          "File: common/rdr/TLSOutStream.h -> common/rdr/TLSOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     size_t length();",
          "41:   protected:",
          "44:   private:",
          "45:     size_t writeTLS(const U8* data, size_t length);",
          "",
          "[Removed Lines]",
          "42:     size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "42:     virtual void overrun(size_t needed);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   zs->next_out = (U8*)end;",
          "95:   zs->avail_out = maxSize;",
          "98:   if (n == 0) return false;",
          "99:   zs->next_in = (U8*)underlying->getptr();",
          "100:   zs->avail_in = underlying->avail();",
          "",
          "[Removed Lines]",
          "97:   size_t n = underlying->check(1, 1, wait);",
          "",
          "[Added Lines]",
          "97:   size_t n = underlying->check(1, wait);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   ptr = start;",
          "99: }",
          "102: {",
          "103: #ifdef ZLIBOUT_DEBUG",
          "104:   vlog.debug(\"overrun\");",
          "105: #endif",
          "110:   checkCompressionLevel();",
          "113:     zs->next_in = start;",
          "114:     zs->avail_in = ptr - start;",
          "",
          "[Removed Lines]",
          "101: size_t ZlibOutStream::overrun(size_t itemSize, size_t nItems)",
          "107:   if (itemSize > bufSize)",
          "108:     throw Exception(\"ZlibOutStream overrun: max itemSize exceeded\");",
          "112:   while (avail() < itemSize) {",
          "",
          "[Added Lines]",
          "101: void ZlibOutStream::overrun(size_t needed)",
          "107:   if (needed > bufSize)",
          "108:     throw Exception(\"ZlibOutStream overrun: buffer size exceeded\");",
          "112:   while (avail() < needed) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:       ptr -= zs->next_in - start;",
          "130:     }",
          "131:   }",
          "139: }",
          "141: void ZlibOutStream::deflate(int flush)",
          "",
          "[Removed Lines]",
          "133:   size_t nAvail;",
          "134:   nAvail = avail() / itemSize;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "138:   return nItems;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h": [
          "File: common/rdr/ZlibOutStream.h -> common/rdr/ZlibOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   private:",
          "49:     void deflate(int flush);",
          "50:     void checkCompressionLevel();",
          "",
          "[Removed Lines]",
          "48:     size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "48:     virtual void overrun(size_t needed);",
          "",
          "---------------"
        ],
        "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx": [
          "File: common/rfb/JpegCompressor.cxx -> common/rfb/JpegCompressor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   JpegCompressor *jc = dest->instance;",
          "97:   jc->setptr(jc->getend());",
          "99:   dest->pub.next_output_byte = jc->getptr();",
          "100:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "[Removed Lines]",
          "98:   jc->overrun(jc->getend() - jc->getstart(), 1);",
          "",
          "[Added Lines]",
          "98:   jc->overrun(jc->getend() - jc->getstart());",
          "",
          "---------------"
        ],
        "common/rfb/JpegCompressor.h||common/rfb/JpegCompressor.h": [
          "File: common/rfb/JpegCompressor.h -> common/rfb/JpegCompressor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     inline rdr::U8* getstart() { return start; }",
          "54:     }",
          "56:   private:",
          "",
          "[Removed Lines]",
          "52:     inline int overrun(int itemSize, int nItems) {",
          "53:       return MemOutStream::overrun(itemSize, nItems);",
          "",
          "[Added Lines]",
          "52:     inline virtual void overrun(int needed) {",
          "53:       return MemOutStream::overrun(needed);",
          "",
          "---------------"
        ],
        "tests/perf/decperf.cxx||tests/perf/decperf.cxx": [
          "File: tests/perf/decperf.cxx -> tests/perf/decperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   virtual void flush();",
          "54: private:",
          "57:   int offset;",
          "58:   rdr::U8 buf[131072];",
          "",
          "[Removed Lines]",
          "55:   virtual size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "55:   virtual void overrun(size_t needed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:   ptr = buf;",
          "100: }",
          "103: {",
          "104:   flush();",
          "108: }",
          "110: CConn::CConn(const char *filename)",
          "",
          "[Removed Lines]",
          "102: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "105:   if (itemSize * nItems > avail())",
          "106:     nItems = avail() / itemSize;",
          "107:   return nItems;",
          "",
          "[Added Lines]",
          "102: void DummyOutStream::overrun(size_t needed)",
          "",
          "---------------"
        ],
        "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
          "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   virtual void flush();",
          "78: private:",
          "81:   int offset;",
          "82:   rdr::U8 buf[131072];",
          "",
          "[Removed Lines]",
          "79:   virtual size_t overrun(size_t itemSize, size_t nItems);",
          "",
          "[Added Lines]",
          "79:   virtual void overrun(size_t needed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   ptr = buf;",
          "157: }",
          "160: {",
          "161:   flush();",
          "165: }",
          "167: CConn::CConn(const char *filename)",
          "",
          "[Removed Lines]",
          "159: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
          "162:   if (itemSize * nItems > avail())",
          "163:     nItems = avail() / itemSize;",
          "164:   return nItems;",
          "",
          "[Added Lines]",
          "159: void DummyOutStream::overrun(size_t needed)",
          "",
          "---------------"
        ]
      }
    }
  ]
}