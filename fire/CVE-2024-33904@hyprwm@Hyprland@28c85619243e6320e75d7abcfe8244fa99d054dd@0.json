{
  "cve_id": "CVE-2024-33904",
  "cve_desc": "In plugins/HookSystem.cpp in Hyprland through 0.39.1 (before 28c8561), through a race condition, a local attacker can cause execution of arbitrary assembly code by writing to a predictable temporary file.",
  "repo": "hyprwm/Hyprland",
  "patch_hash": "28c85619243e6320e75d7abcfe8244fa99d054dd",
  "patch_info": {
    "commit_hash": "28c85619243e6320e75d7abcfe8244fa99d054dd",
    "repo": "hyprwm/Hyprland",
    "commit_url": "https://github.com/hyprwm/Hyprland/commit/28c85619243e6320e75d7abcfe8244fa99d054dd",
    "files": [
      "src/plugins/HookSystem.cpp"
    ],
    "message": "hooksystem: use a random 700 directory for assembler",
    "before_after_code_files": [
      "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
    ]
  },
  "patch_diff": {
    "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp": [
      "File: src/plugins/HookSystem.cpp -> src/plugins/HookSystem.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"HookSystem.hpp\"",
      "2: #include \"../debug/Log.hpp\"",
      "3: #include \"../helpers/VarList.hpp\"",
      "5: #define register",
      "6: #include <udis86.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #include \"../managers/TokenManager.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:         currentAddress += len;",
      "136:     }",
      "139:     ofs << assemblyBuilder;",
      "140:     ofs.close();",
      "143:     Debug::log(LOG, \"[functionhook] assembler returned:\\n{}\", ret);",
      "147:         return {};",
      "148:     }",
      "151:     returns = {std::vector<char>(std::istreambuf_iterator<char>(ifs), {})};",
      "152:     ifs.close();",
      "157:     return returns;",
      "158: }",
      "",
      "[Removed Lines]",
      "138:     std::ofstream ofs(\"/tmp/hypr/.hookcode.asm\", std::ios::trunc);",
      "141:     std::string ret = execAndGet(",
      "142:         \"cc -x assembler -c /tmp/hypr/.hookcode.asm -o /tmp/hypr/.hookbinary.o 2>&1 && objcopy -O binary -j .text /tmp/hypr/.hookbinary.o /tmp/hypr/.hookbinary2.o 2>&1\");",
      "144:     if (!std::filesystem::exists(\"/tmp/hypr/.hookbinary2.o\")) {",
      "145:         std::filesystem::remove(\"/tmp/hypr/.hookcode.asm\");",
      "146:         std::filesystem::remove(\"/tmp/hypr/.hookbinary.asm\");",
      "150:     std::ifstream ifs(\"/tmp/hypr/.hookbinary2.o\", std::ios::binary);",
      "153:     std::filesystem::remove(\"/tmp/hypr/.hookcode.asm\");",
      "154:     std::filesystem::remove(\"/tmp/hypr/.hookbinary.o\");",
      "155:     std::filesystem::remove(\"/tmp/hypr/.hookbinary2.o\");",
      "",
      "[Added Lines]",
      "139:     const auto RANDOMDIR = \"/tmp/hypr/\" + g_pTokenManager->getRandomUUID();",
      "141:     if (!std::filesystem::create_directory(RANDOMDIR))",
      "142:         return {};",
      "144:     std::filesystem::permissions(RANDOMDIR, std::filesystem::perms::owner_all, std::filesystem::perm_options::replace);",
      "146:     std::ofstream ofs(RANDOMDIR + \"/.hookcode.asm\", std::ios::trunc);",
      "149:     std::string ret = execAndGet(std::string{\"cc -x assembler -c \" + RANDOMDIR + \"/.hookcode.asm -o \" + RANDOMDIR + \"/.hookbinary.o 2>&1 && objcopy -O binary -j .text \" +",
      "150:                                              RANDOMDIR + \"/.hookbinary.o \" + RANDOMDIR + \"/.hookbinary2.o 2>&1\"}",
      "151:                                      .c_str());",
      "153:     if (!std::filesystem::exists(RANDOMDIR + \"/.hookbinary2.o\")) {",
      "154:         std::filesystem::remove(RANDOMDIR + \"/.hookcode.asm\");",
      "155:         std::filesystem::remove(RANDOMDIR + \"/.hookbinary.asm\");",
      "159:     std::ifstream ifs(RANDOMDIR + \"/.hookbinary2.o\", std::ios::binary);",
      "162:     std::filesystem::remove_all(RANDOMDIR);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95a5e75c260a2ed46e7b21b9a9bb7e58bdcdfa21",
      "candidate_info": {
        "commit_hash": "95a5e75c260a2ed46e7b21b9a9bb7e58bdcdfa21",
        "repo": "hyprwm/Hyprland",
        "commit_url": "https://github.com/hyprwm/Hyprland/commit/95a5e75c260a2ed46e7b21b9a9bb7e58bdcdfa21",
        "files": [
          "src/plugins/HookSystem.cpp"
        ],
        "message": "hooksystem: check for existing random outdir",
        "before_after_code_files": [
          "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ],
          "candidate": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp": [
          "File: src/plugins/HookSystem.cpp -> src/plugins/HookSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     const auto RANDOMDIR = \"/tmp/hypr/\" + g_pTokenManager->getRandomUUID();",
          "145:     if (!std::filesystem::exists(RANDOMDIR))",
          "146:         return {};",
          "",
          "[Removed Lines]",
          "143:     mkdir(RANDOMDIR.c_str(), S_IRWXU);",
          "",
          "[Added Lines]",
          "143:     if (std::filesystem::exists(RANDOMDIR)) {",
          "144:         Debug::log(ERR, \"[hooksystem] random out dir exists??\");",
          "145:         return {};",
          "146:     }",
          "148:     if (mkdir(RANDOMDIR.c_str(), S_IRWXU) < 0)",
          "149:         return {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5a648091760ac002120fab18247e5292b6482de",
      "candidate_info": {
        "commit_hash": "a5a648091760ac002120fab18247e5292b6482de",
        "repo": "hyprwm/Hyprland",
        "commit_url": "https://github.com/hyprwm/Hyprland/commit/a5a648091760ac002120fab18247e5292b6482de",
        "files": [
          "docs/ISSUE_GUIDELINES.md",
          "hyprctl/main.cpp",
          "src/Compositor.cpp",
          "src/Compositor.hpp",
          "src/debug/HyprCtl.cpp",
          "src/debug/Log.cpp",
          "src/main.cpp",
          "src/managers/EventManager.cpp",
          "src/plugins/HookSystem.cpp"
        ],
        "message": "core: Move /tmp/hypr to $XDG_RUNTIME_DIR/hypr (#5788)\n\nMoves the directory containing sockets and logs.\nAlso restructures lockfiles a bit.\n\nFor consumers, check if `$XDG_RUNTIME_DIR/hypr` exists. If so, use it. If not, use the old `/tmp/hypr`.",
        "before_after_code_files": [
          "hyprctl/main.cpp||hyprctl/main.cpp",
          "src/Compositor.cpp||src/Compositor.cpp",
          "src/Compositor.hpp||src/Compositor.hpp",
          "src/debug/HyprCtl.cpp||src/debug/HyprCtl.cpp",
          "src/debug/Log.cpp||src/debug/Log.cpp",
          "src/main.cpp||src/main.cpp",
          "src/managers/EventManager.cpp||src/managers/EventManager.cpp",
          "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ],
          "candidate": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hyprctl/main.cpp||hyprctl/main.cpp": [
          "File: hyprctl/main.cpp -> hyprctl/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <sys/stat.h>",
          "9: #include <sys/types.h>",
          "10: #include <sys/un.h>",
          "11: #include <unistd.h>",
          "12: #include <ranges>",
          "13: #include <algorithm>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <pwd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: std::vector<SInstanceData> instances() {",
          "42:     std::vector<SInstanceData> result;",
          "46:             continue;",
          "49:         SInstanceData* data = &result.emplace_back();",
          "50:         data->id            = el.path().string();",
          "53:         try {",
          "54:             data->time = std::stoull(data->id.substr(data->id.find_first_of('_') + 1, data->id.find_last_of('_') - (data->id.find_first_of('_') + 1)));",
          "55:         } catch (std::exception& e) { continue; }",
          "60:         int           i = 0;",
          "61:         for (std::string line; std::getline(ifs, line); ++i) {",
          "",
          "[Removed Lines]",
          "44:     for (const auto& el : std::filesystem::directory_iterator(\"/tmp/hypr\")) {",
          "45:         if (el.is_directory() || !el.path().string().ends_with(\".lock\"))",
          "51:         data->id            = data->id.substr(data->id.find_last_of('/') + 1, data->id.find(\".lock\") - data->id.find_last_of('/') - 1);",
          "58:         std::ifstream ifs(el.path().string());",
          "",
          "[Added Lines]",
          "45:     const std::string          USERID = std::to_string(getpwuid(getuid())->pw_uid);",
          "47:     for (const auto& el : std::filesystem::directory_iterator(\"/run/user/\" + USERID + \"/hypr\")) {",
          "48:         if (!el.is_directory() || !std::filesystem::exists(el.path().string() + \"/hyprland.lock\"))",
          "60:         std::ifstream ifs(el.path().string() + \"/hyprland.lock\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         return;",
          "100:     }",
          "107:     strncpy(serverAddress.sun_path, socketPath.c_str(), sizeof(serverAddress.sun_path) - 1);",
          "",
          "[Removed Lines]",
          "102:     sockaddr_un serverAddress = {0};",
          "103:     serverAddress.sun_family  = AF_UNIX;",
          "105:     std::string socketPath = \"/tmp/hypr/\" + instanceSignature + \"/.socket.sock\";",
          "",
          "[Added Lines]",
          "104:     const std::string USERID = std::to_string(getpwuid(getuid())->pw_uid);",
          "106:     sockaddr_un       serverAddress = {0};",
          "107:     serverAddress.sun_family        = AF_UNIX;",
          "109:     std::string socketPath = \"/run/user/\" + USERID + \"/hypr/\" + instanceSignature + \"/.socket.sock\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:     sockaddr_un serverAddress = {0};",
          "161:     serverAddress.sun_family  = AF_UNIX;",
          "165:     strncpy(serverAddress.sun_path, socketPath.c_str(), sizeof(serverAddress.sun_path) - 1);",
          "",
          "[Removed Lines]",
          "163:     std::string socketPath = \"/tmp/hypr/\" + instanceSignature + \"/.hyprpaper.sock\";",
          "",
          "[Added Lines]",
          "167:     const std::string USERID = std::to_string(getpwuid(getuid())->pw_uid);",
          "169:     std::string       socketPath = \"/run/user/\" + USERID + \"/hypr/\" + instanceSignature + \"/.hyprpaper.sock\";",
          "",
          "---------------"
        ],
        "src/Compositor.cpp||src/Compositor.cpp": [
          "File: src/Compositor.cpp -> src/Compositor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"protocols/FractionalScale.hpp\"",
          "17: #include \"protocols/PointerConstraints.hpp\"",
          "20: #include <sys/types.h>",
          "22: int handleCritSignal(int signo, void* data) {",
          "23:     Debug::log(LOG, \"Hyprland received signal {}\", signo);",
          "",
          "[Removed Lines]",
          "19: #include <sys/stat.h>",
          "",
          "[Added Lines]",
          "20: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: CCompositor::CCompositor() {",
          "63:     m_iHyprlandPID = getpid();",
          "65:     std::random_device              dev;",
          "66:     std::mt19937                    engine(dev());",
          "67:     std::uniform_int_distribution<> distribution(0, INT32_MAX);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     m_szHyprTempDataRoot = std::string{getenv(\"XDG_RUNTIME_DIR\")} + \"/hypr\";",
          "67:     if (m_szHyprTempDataRoot.starts_with(\"/hypr\")) {",
          "68:         std::cout << \"Bailing out, XDG_RUNTIME_DIR is invalid\\n\";",
          "69:         throw std::runtime_error(\"CCompositor() failed\");",
          "70:     }",
          "72:     if (!m_szHyprTempDataRoot.starts_with(\"/run/user\"))",
          "73:         std::cout << \"[!!WARNING!!] XDG_RUNTIME_DIR looks non-standard. Proceeding anyways...\\n\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     setenv(\"HYPRLAND_INSTANCE_SIGNATURE\", m_szInstanceSignature.c_str(), true);",
          "78:     }",
          "85:     }",
          "90:     }",
          "94:     Debug::log(LOG, \"Instance Signature: {}\", m_szInstanceSignature);",
          "96:     Debug::log(LOG, \"Hyprland PID: {}\", m_iHyprlandPID);",
          "98:     Debug::log(LOG, \"===== SYSTEM INFO: =====\");",
          "",
          "[Removed Lines]",
          "73:     if (!std::filesystem::exists(\"/tmp/hypr\"))",
          "74:         mkdir(\"/tmp/hypr\", S_IRWXU | S_IRWXG | S_IRWXO | S_ISVTX);",
          "75:     else if (!std::filesystem::is_directory(\"/tmp/hypr\")) {",
          "76:         std::cout << \"Bailing out, /tmp/hypr is not a directory\\n\";",
          "77:         return;",
          "80:     const auto INSTANCEPATH = \"/tmp/hypr/\" + m_szInstanceSignature;",
          "82:     if (std::filesystem::exists(INSTANCEPATH)) {",
          "83:         std::cout << \"Bailing out, /tmp/hypr/$HIS exists??\\n\";",
          "84:         return;",
          "87:     if (mkdir(INSTANCEPATH.c_str(), S_IRWXU) < 0) {",
          "88:         std::cout << \"Bailing out, couldn't create /tmp/hypr/$HIS\\n\";",
          "89:         return;",
          "92:     Debug::init(m_szInstanceSignature);",
          "",
          "[Added Lines]",
          "83:     if (!std::filesystem::exists(m_szHyprTempDataRoot))",
          "84:         mkdir(m_szHyprTempDataRoot.c_str(), S_IRWXU);",
          "85:     else if (!std::filesystem::is_directory(m_szHyprTempDataRoot)) {",
          "86:         std::cout << \"Bailing out, \" << m_szHyprTempDataRoot << \" is not a directory\\n\";",
          "87:         throw std::runtime_error(\"CCompositor() failed\");",
          "90:     m_szInstancePath = m_szHyprTempDataRoot + \"/\" + m_szInstanceSignature;",
          "92:     if (std::filesystem::exists(m_szInstancePath)) {",
          "93:         std::cout << \"Bailing out, \" << m_szInstancePath << \" exists??\\n\";",
          "94:         throw std::runtime_error(\"CCompositor() failed\");",
          "97:     if (mkdir(m_szInstancePath.c_str(), S_IRWXU) < 0) {",
          "98:         std::cout << \"Bailing out, couldn't create \" << m_szInstancePath << \"\\n\";",
          "99:         throw std::runtime_error(\"CCompositor() failed\");",
          "102:     Debug::init(m_szInstancePath);",
          "106:     Debug::log(LOG, \"Runtime directory: {}\", m_szInstancePath);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519: }",
          "521: void CCompositor::createLockFile() {",
          "524:     std::ofstream ofs(PATH, std::ios::trunc);",
          "",
          "[Removed Lines]",
          "522:     const auto    PATH = \"/tmp/hypr/\" + m_szInstanceSignature + \".lock\";",
          "",
          "[Added Lines]",
          "534:     const auto    PATH = m_szInstancePath + \"/hyprland.lock\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "529: }",
          "531: void CCompositor::removeLockFile() {",
          "534:     if (std::filesystem::exists(PATH))",
          "535:         std::filesystem::remove(PATH);",
          "",
          "[Removed Lines]",
          "532:     const auto PATH = \"/tmp/hypr/\" + m_szInstanceSignature + \".lock\";",
          "",
          "[Added Lines]",
          "544:     const auto PATH = m_szInstancePath + \"/hyprland.lock\";",
          "",
          "---------------"
        ],
        "src/Compositor.hpp||src/Compositor.hpp": [
          "File: src/Compositor.hpp -> src/Compositor.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     wlr_session_lock_manager_v1*     m_sWLRSessionLockMgr;",
          "77:     std::string                               m_szWLDisplaySocket   = \"\";",
          "78:     std::string                               m_szInstanceSignature = \"\";",
          "79:     std::string                               m_szCurrentSplash     = \"error\";",
          "81:     std::vector<SP<CMonitor>>                 m_vMonitors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     std::string                               m_szHyprTempDataRoot = \"\";",
          "81:     std::string                               m_szInstancePath      = \"\";",
          "",
          "---------------"
        ],
        "src/debug/HyprCtl.cpp||src/debug/HyprCtl.cpp": [
          "File: src/debug/HyprCtl.cpp -> src/debug/HyprCtl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1747:     sockaddr_un SERVERADDRESS = {.sun_family = AF_UNIX};",
          "1751:     strcpy(SERVERADDRESS.sun_path, socketPath.c_str());",
          "",
          "[Removed Lines]",
          "1749:     std::string socketPath = \"/tmp/hypr/\" + g_pCompositor->m_szInstanceSignature + \"/.socket.sock\";",
          "",
          "[Added Lines]",
          "1749:     std::string socketPath = g_pCompositor->m_szInstancePath + \"/.socket.sock\";",
          "",
          "---------------"
        ],
        "src/debug/Log.cpp||src/debug/Log.cpp": [
          "File: src/debug/Log.cpp -> src/debug/Log.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <iostream>",
          "8: void Debug::init(const std::string& IS) {",
          "10: }",
          "12: void Debug::wlrLog(wlr_log_importance level, const char* fmt, va_list args) {",
          "",
          "[Removed Lines]",
          "9:     logFile = \"/tmp/hypr/\" + IS + (ISDEBUG ? \"/hyprlandd.log\" : \"/hyprland.log\");",
          "",
          "[Added Lines]",
          "9:     logFile = IS + (ISDEBUG ? \"/hyprlandd.log\" : \"/hyprland.log\");",
          "",
          "---------------"
        ],
        "src/main.cpp||src/main.cpp": [
          "File: src/main.cpp -> src/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     g_pCompositor->initServer();",
          "",
          "[Removed Lines]",
          "100:     g_pCompositor                     = std::make_unique<CCompositor>();",
          "101:     g_pCompositor->explicitConfigPath = configPath;",
          "",
          "[Added Lines]",
          "100:     try {",
          "101:         g_pCompositor                     = std::make_unique<CCompositor>();",
          "102:         g_pCompositor->explicitConfigPath = configPath;",
          "103:     } catch (std::exception& e) {",
          "104:         std::cout << \"Hyprland threw in ctor: \" << e.what() << \"\\nCannot continue.\\n\";",
          "105:         return 1;",
          "106:     }",
          "",
          "---------------"
        ],
        "src/managers/EventManager.cpp||src/managers/EventManager.cpp": [
          "File: src/managers/EventManager.cpp -> src/managers/EventManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     }",
          "41:     sockaddr_un SERVERADDRESS = {.sun_family = AF_UNIX};",
          "43:     strncpy(SERVERADDRESS.sun_path, socketPath.c_str(), sizeof(SERVERADDRESS.sun_path) - 1);",
          "45:     bind(m_iSocketFD, (sockaddr*)&SERVERADDRESS, SUN_LEN(&SERVERADDRESS));",
          "",
          "[Removed Lines]",
          "42:     std::string socketPath    = \"/tmp/hypr/\" + g_pCompositor->m_szInstanceSignature + \"/.socket2.sock\";",
          "",
          "[Added Lines]",
          "42:     std::string socketPath    = g_pCompositor->m_szInstancePath + \"/.socket2.sock\";",
          "",
          "---------------"
        ],
        "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp": [
          "File: src/plugins/HookSystem.cpp -> src/plugins/HookSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include \"../debug/Log.hpp\"",
          "3: #include \"../helpers/VarList.hpp\"",
          "4: #include \"../managers/TokenManager.hpp\"",
          "6: #define register",
          "7: #include <udis86.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"../Compositor.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         currentAddress += len;",
          "139:     }",
          "143:     if (std::filesystem::exists(RANDOMDIR)) {",
          "144:         Debug::log(ERR, \"[hooksystem] random out dir exists??\");",
          "",
          "[Removed Lines]",
          "141:     const auto RANDOMDIR = \"/tmp/hypr/\" + g_pTokenManager->getRandomUUID();",
          "",
          "[Added Lines]",
          "142:     const auto RANDOMDIR = g_pCompositor->m_szInstancePath + \"/\" + g_pTokenManager->getRandomUUID();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62ae2b3f40ffce99e1d94384800e9eba6638f447",
      "candidate_info": {
        "commit_hash": "62ae2b3f40ffce99e1d94384800e9eba6638f447",
        "repo": "hyprwm/Hyprland",
        "commit_url": "https://github.com/hyprwm/Hyprland/commit/62ae2b3f40ffce99e1d94384800e9eba6638f447",
        "files": [
          "nix/default.nix",
          "src/plugins/HookSystem.cpp"
        ],
        "message": "pluginAPI/hooks: Remove dependency on cc from the hooksystem (#5801)\n\n* Remove dependency on cc from the hooksystem\n\n* Nix: remove cc from wrapper\n\n---------\n\nCo-authored-by: Mihai Fufezan <mihai@fufexan.net>",
        "before_after_code_files": [
          "nix/default.nix||nix/default.nix",
          "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ],
          "candidate": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ]
        }
      },
      "candidate_diff": {
        "nix/default.nix||nix/default.nix": [
          "File: nix/default.nix -> nix/default.nix",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:       ${lib.optionalString wrapRuntimeDeps ''",
          "149:         wrapProgram $out/bin/Hyprland \\",
          "150:           --suffix PATH : ${lib.makeBinPath [",
          "152:           binutils",
          "153:           pciutils",
          "154:           pkgconf",
          "",
          "[Removed Lines]",
          "151:           stdenv.cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp": [
          "File: src/plugins/HookSystem.cpp -> src/plugins/HookSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     size_t lastAsmNewline = 0;",
          "81:     for (auto& len : probe.insSizes) {",
          "83:         std::string code = probe.assembly.substr(lastAsmNewline, probe.assembly.find(\"\\n\", lastAsmNewline) - lastAsmNewline);",
          "84:         if (code.contains(\"%rip\")) {",
          "90:             if (OFFSET == 0)",
          "91:                 return {};",
          "92:             const uint64_t DESTINATION = currentAddress + OFFSET + len;",
          "131:                 return {};",
          "132:             }",
          "133:         } else {",
          "135:             currentDestinationOffset += len;",
          "136:         }",
          "",
          "[Removed Lines]",
          "79:     size_t      currentDestinationOffset = 0;",
          "80:     std::string assemblyBuilder;",
          "85:             CVarList       tokens{code, 0, 's'};",
          "86:             size_t         plusPresent  = tokens[1][0] == '+' ? 1 : 0;",
          "87:             size_t         minusPresent = tokens[1][0] == '-' ? 1 : 0;",
          "88:             std::string    addr         = tokens[1].substr((plusPresent || minusPresent), tokens[1].find(\"(%rip)\") - (plusPresent || minusPresent));",
          "89:             const uint64_t OFFSET       = (minusPresent ? -1 : 1) * configStringToInt(addr);",
          "94:             if (code.starts_with(\"call\")) {",
          "96:                 assemblyBuilder += std::format(\"pushq %rax\\nmovabs $0x{:x}, %rax\\ncallq *%rax\\npopq %rax\\n\", DESTINATION);",
          "97:                 currentDestinationOffset += 14;",
          "98:             } else if (code.starts_with(\"lea\")) {",
          "100:                 assemblyBuilder += std::format(\"movabs $0x{:x}, {}\\n\", DESTINATION, tokens[2]);",
          "101:                 currentDestinationOffset += 10;",
          "102:             } else {",
          "103:                 auto ADDREND   = code.find(\"(%rip)\");",
          "104:                 auto ADDRSTART = (code.substr(0, ADDREND).find_last_of(' '));",
          "106:                 if (ADDREND == std::string::npos || ADDRSTART == std::string::npos)",
          "107:                     return {};",
          "109:                 const uint64_t PREDICTEDRIP = (uint64_t)m_pTrampolineAddr + currentDestinationOffset + len;",
          "110:                 const bool     POSITIVE     = DESTINATION > PREDICTEDRIP;",
          "111:                 const uint64_t NEWRIPOFFSET = POSITIVE ? DESTINATION - PREDICTEDRIP : PREDICTEDRIP - DESTINATION;",
          "113:                 assemblyBuilder += std::format(\"{} {}0x{:x}{}\\n\", code.substr(0, ADDRSTART), POSITIVE ? '+' : '-', NEWRIPOFFSET, code.substr(ADDREND));",
          "114:                 currentDestinationOffset += len;",
          "115:             }",
          "116:         } else if (code.contains(\"invalid\")) {",
          "117:             std::vector<uint8_t> bytes;",
          "118:             bytes.resize(len);",
          "119:             memcpy(bytes.data(), (std::byte*)currentAddress, len);",
          "120:             if (len == 4 && bytes[0] == 0xF3 && bytes[1] == 0x0F && bytes[2] == 0x1E && bytes[3] == 0xFA) {",
          "122:                 assemblyBuilder += \"endbr64\\n\";",
          "123:                 currentDestinationOffset += 4;",
          "124:             } else {",
          "126:                 std::string strBytes;",
          "127:                 for (auto& b : bytes) {",
          "128:                     strBytes += std::format(\"{:x} \", b);",
          "129:                 }",
          "130:                 Debug::log(ERR, \"[functionhook] unknown bytes: {}\", strBytes);",
          "134:             assemblyBuilder += code + \"\\n\";",
          "",
          "[Added Lines]",
          "79:     size_t            currentDestinationOffset = 0;",
          "81:     std::vector<char> finalBytes;",
          "82:     finalBytes.resize(probe.len);",
          "87:         for (size_t i = 0; i < len; ++i) {",
          "88:             finalBytes[currentDestinationOffset + i] = *(char*)(currentAddress + i);",
          "89:         }",
          "93:             CVarList      tokens{code, 0, 's'};",
          "94:             size_t        plusPresent  = tokens[1][0] == '+' ? 1 : 0;",
          "95:             size_t        minusPresent = tokens[1][0] == '-' ? 1 : 0;",
          "96:             std::string   addr         = tokens[1].substr((plusPresent || minusPresent), tokens[1].find(\"(%rip)\") - (plusPresent || minusPresent));",
          "97:             const int32_t OFFSET       = (minusPresent ? -1 : 1) * configStringToInt(addr);",
          "102:             auto           ADDREND   = code.find(\"(%rip)\");",
          "103:             auto           ADDRSTART = (code.substr(0, ADDREND).find_last_of(' '));",
          "105:             if (ADDREND == std::string::npos || ADDRSTART == std::string::npos)",
          "108:             const uint64_t PREDICTEDRIP = (uint64_t)m_pTrampolineAddr + currentDestinationOffset + len;",
          "109:             const int32_t  NEWRIPOFFSET = DESTINATION - PREDICTEDRIP;",
          "111:             size_t         ripOffset = 0;",
          "114:             for (int i = len - 4 /* 32-bit */; i > 0; --i) {",
          "115:                 if (*(int32_t*)(currentAddress + i) == OFFSET) {",
          "116:                     ripOffset = i;",
          "117:                     break;",
          "118:                 }",
          "121:             if (ripOffset == 0)",
          "122:                 return {};",
          "127:             currentDestinationOffset += len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:         currentAddress += len;",
          "140:     }",
          "174: }",
          "176: bool CFunctionHook::hook() {",
          "",
          "[Removed Lines]",
          "142:     const auto RANDOMDIR = g_pCompositor->m_szInstancePath + \"/\" + g_pTokenManager->getRandomUUID();",
          "144:     if (std::filesystem::exists(RANDOMDIR)) {",
          "145:         Debug::log(ERR, \"[hooksystem] random out dir exists??\");",
          "146:         return {};",
          "147:     }",
          "149:     if (mkdir(RANDOMDIR.c_str(), S_IRWXU) < 0)",
          "150:         return {};",
          "152:     if (!std::filesystem::exists(RANDOMDIR))",
          "153:         return {};",
          "155:     std::ofstream ofs(RANDOMDIR + \"/.hookcode.asm\", std::ios::trunc);",
          "156:     ofs << assemblyBuilder;",
          "157:     ofs.close();",
          "158:     std::string ret = execAndGet(std::string{\"cc -x assembler -c \" + RANDOMDIR + \"/.hookcode.asm -o \" + RANDOMDIR + \"/.hookbinary.o 2>&1 && objcopy -O binary -j .text \" +",
          "159:                                              RANDOMDIR + \"/.hookbinary.o \" + RANDOMDIR + \"/.hookbinary2.o 2>&1\"}",
          "160:                                      .c_str());",
          "161:     Debug::log(LOG, \"[functionhook] assembler returned:\\n{}\", ret);",
          "162:     if (!std::filesystem::exists(RANDOMDIR + \"/.hookbinary2.o\")) {",
          "163:         std::filesystem::remove(RANDOMDIR + \"/.hookcode.asm\");",
          "164:         std::filesystem::remove(RANDOMDIR + \"/.hookbinary.asm\");",
          "165:         return {};",
          "166:     }",
          "168:     std::ifstream ifs(RANDOMDIR + \"/.hookbinary2.o\", std::ios::binary);",
          "169:     returns = {std::vector<char>(std::istreambuf_iterator<char>(ifs), {})};",
          "170:     ifs.close();",
          "171:     std::filesystem::remove_all(RANDOMDIR);",
          "173:     return returns;",
          "",
          "[Added Lines]",
          "136:     return {finalBytes};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b164e67d8b1f12420ec44a1c837af7923559ccf2",
      "candidate_info": {
        "commit_hash": "b164e67d8b1f12420ec44a1c837af7923559ccf2",
        "repo": "hyprwm/Hyprland",
        "commit_url": "https://github.com/hyprwm/Hyprland/commit/b164e67d8b1f12420ec44a1c837af7923559ccf2",
        "files": [
          "src/Compositor.cpp",
          "src/plugins/HookSystem.cpp"
        ],
        "message": "core: prefer mkdir over create_directory and permissions",
        "before_after_code_files": [
          "src/Compositor.cpp||src/Compositor.cpp",
          "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ],
          "candidate": [
            "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/Compositor.cpp||src/Compositor.cpp": [
          "File: src/Compositor.cpp -> src/Compositor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"protocols/FractionalScale.hpp\"",
          "17: #include \"protocols/PointerConstraints.hpp\"",
          "19: int handleCritSignal(int signo, void* data) {",
          "20:     Debug::log(LOG, \"Hyprland received signal {}\", signo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <sys/stat.h>",
          "20: #include <sys/types.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     setenv(\"HYPRLAND_INSTANCE_SIGNATURE\", m_szInstanceSignature.c_str(), true);",
          "71:     const auto INSTANCEPATH = \"/tmp/hypr/\" + m_szInstanceSignature;",
          "76:     Debug::init(m_szInstanceSignature);",
          "",
          "[Removed Lines]",
          "66:     if (!std::filesystem::exists(\"/tmp/hypr\")) {",
          "67:         std::filesystem::create_directory(\"/tmp/hypr\");",
          "68:         std::filesystem::permissions(\"/tmp/hypr\", std::filesystem::perms::all | std::filesystem::perms::sticky_bit, std::filesystem::perm_options::replace);",
          "69:     }",
          "72:     std::filesystem::create_directory(INSTANCEPATH);",
          "73:     std::filesystem::permissions(INSTANCEPATH, std::filesystem::perms::group_all, std::filesystem::perm_options::replace);",
          "74:     std::filesystem::permissions(INSTANCEPATH, std::filesystem::perms::owner_all, std::filesystem::perm_options::add);",
          "",
          "[Added Lines]",
          "69:     if (!std::filesystem::exists(\"/tmp/hypr\"))",
          "70:         mkdir(\"/tmp/hypr\", S_IRWXU | S_IRWXG | S_IRWXO | S_ISVTX);",
          "73:     mkdir(INSTANCEPATH.c_str(), S_IRWXU | S_IRWXG);",
          "",
          "---------------"
        ],
        "src/plugins/HookSystem.cpp||src/plugins/HookSystem.cpp": [
          "File: src/plugins/HookSystem.cpp -> src/plugins/HookSystem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <unistd.h>",
          "11: #include <cstring>",
          "12: #include <fstream>",
          "14: CFunctionHook::CFunctionHook(HANDLE owner, void* source, void* destination) {",
          "15:     m_pSource      = source;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <sys/stat.h>",
          "14: #include <sys/types.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     const auto RANDOMDIR = \"/tmp/hypr/\" + g_pTokenManager->getRandomUUID();",
          "146:     std::ofstream ofs(RANDOMDIR + \"/.hookcode.asm\", std::ios::trunc);",
          "147:     ofs << assemblyBuilder;",
          "",
          "[Removed Lines]",
          "141:     if (!std::filesystem::create_directory(RANDOMDIR))",
          "142:         return {};",
          "144:     std::filesystem::permissions(RANDOMDIR, std::filesystem::perms::owner_all, std::filesystem::perm_options::replace);",
          "",
          "[Added Lines]",
          "143:     mkdir(RANDOMDIR.c_str(), S_IRWXU);",
          "145:     if (!std::filesystem::exists(RANDOMDIR))",
          "146:         return {};",
          "",
          "---------------"
        ]
      }
    }
  ]
}