{
  "cve_id": "CVE-2015-3886",
  "cve_desc": "libinfinity before 0.6.6-1 does not validate expired SSL certificates, which allows remote attackers to have unspecified impact via unknown vectors.",
  "repo": "gobby/libinfinity",
  "patch_hash": "c97f870f5ae13112988d9f8ad464b4f679903706",
  "patch_info": {
    "commit_hash": "c97f870f5ae13112988d9f8ad464b4f679903706",
    "repo": "gobby/libinfinity",
    "commit_url": "https://github.com/gobby/libinfinity/commit/c97f870f5ae13112988d9f8ad464b4f679903706",
    "files": [
      "libinfgtk/inf-gtk-certificate-manager.c"
    ],
    "message": "Fix expired certificate validation (gobby #61)",
    "before_after_code_files": [
      "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
    ]
  },
  "patch_diff": {
    "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c": [
      "File: libinfgtk/inf-gtk-certificate-manager.c -> libinfgtk/inf-gtk-certificate-manager.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "710:       if(ret != GNUTLS_E_SUCCESS)",
      "711:         inf_gnutls_set_error(&error, ret);",
      "714:     }",
      "715:   }",
      "",
      "[Removed Lines]",
      "712:       else if(verify & GNUTLS_CERT_INVALID)",
      "713:         inf_gnutls_certificate_verification_set_error(&error, verify);",
      "",
      "[Added Lines]",
      "714:     if(error == NULL)",
      "715:       if(verify & GNUTLS_CERT_INVALID)",
      "716:         inf_gnutls_certificate_verification_set_error(&error, verify);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f31b75343c93bff1e14d87904c52d6a82a714f36",
      "candidate_info": {
        "commit_hash": "f31b75343c93bff1e14d87904c52d6a82a714f36",
        "repo": "gobby/libinfinity",
        "commit_url": "https://github.com/gobby/libinfinity/commit/f31b75343c93bff1e14d87904c52d6a82a714f36",
        "files": [
          "docs/reference/libinfgtk/libinfgtk-0.7-sections.txt",
          "docs/reference/libinfinity/libinfinity-0.7-docs.sgml",
          "docs/reference/libinfinity/libinfinity-0.7-sections.txt",
          "libinfgtk/inf-gtk-certificate-dialog.c",
          "libinfgtk/inf-gtk-certificate-dialog.h",
          "libinfgtk/inf-gtk-certificate-manager.c",
          "libinfgtk/inf-gtk-certificate-manager.h",
          "libinfgtk/resources/ui/infgtkcertificatedialog.ui",
          "libinfinity/Makefile.am",
          "libinfinity/common/inf-certificate-verify.c",
          "libinfinity/common/inf-certificate-verify.h"
        ],
        "message": "Refactor certificate verification\n\nThe non-UI dependent parts are now in the InfCertificateVerify class.",
        "before_after_code_files": [
          "libinfgtk/inf-gtk-certificate-dialog.c||libinfgtk/inf-gtk-certificate-dialog.c",
          "libinfgtk/inf-gtk-certificate-dialog.h||libinfgtk/inf-gtk-certificate-dialog.h",
          "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c",
          "libinfgtk/inf-gtk-certificate-manager.h||libinfgtk/inf-gtk-certificate-manager.h",
          "libinfgtk/resources/ui/infgtkcertificatedialog.ui||libinfgtk/resources/ui/infgtkcertificatedialog.ui",
          "libinfinity/Makefile.am||libinfinity/Makefile.am",
          "libinfinity/common/inf-certificate-verify.c||libinfinity/common/inf-certificate-verify.c",
          "libinfinity/common/inf-certificate-verify.h||libinfinity/common/inf-certificate-verify.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
          ],
          "candidate": [
            "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
          ]
        }
      },
      "candidate_diff": {
        "libinfgtk/inf-gtk-certificate-dialog.c||libinfgtk/inf-gtk-certificate-dialog.c": [
          "File: libinfgtk/inf-gtk-certificate-dialog.c -> libinfgtk/inf-gtk-certificate-dialog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <gnutls/x509.h>",
          "40: #include <time.h>",
          "66: typedef struct _InfGtkCertificateDialogPrivate InfGtkCertificateDialogPrivate;",
          "67: struct _InfGtkCertificateDialogPrivate {",
          "68:   InfCertificateChain* certificate_chain;",
          "70:   gchar* hostname;",
          "72:   GtkTreeStore* certificate_store;",
          "",
          "[Removed Lines]",
          "42: static const GFlagsValue inf_gtk_certificate_dialog_flags_values[] = {",
          "43:   {",
          "44:     INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH,",
          "45:     \"INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH\",",
          "46:     \"cert-hostname-mismatch\"",
          "47:   }, {",
          "48:     INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN,",
          "49:     \"INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN\",",
          "50:     \"cert-not-known\"",
          "51:   }, {",
          "52:     INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED,",
          "53:     \"INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED\",",
          "54:     \"cert-unexpected\"",
          "55:   }, {",
          "56:     INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED,",
          "57:     \"INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED\",",
          "58:     \"cert-old-expired\"",
          "59:   }, {",
          "60:     0,",
          "61:     NULL,",
          "62:     NULL",
          "63:   }",
          "64: };",
          "69:   InfGtkCertificateDialogFlags certificate_flags;",
          "",
          "[Added Lines]",
          "46:   gnutls_x509_crt_t pinned_certificate;",
          "47:   InfCertificateVerifyFlags verify_flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   PROP_0,",
          "85:   PROP_CERTIFICATE_CHAIN,",
          "87:   PROP_HOSTNAME",
          "88: };",
          "90: #define INF_GTK_CERTIFICATE_DIALOG_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), INF_GTK_TYPE_CERTIFICATE_DIALOG, InfGtkCertificateDialogPrivate))",
          "93: G_DEFINE_TYPE_WITH_CODE(InfGtkCertificateDialog, inf_gtk_certificate_dialog, GTK_TYPE_DIALOG,",
          "94:   G_ADD_PRIVATE(InfGtkCertificateDialog))",
          "96: static void",
          "97: inf_gtk_certificate_dialog_renew_info(InfGtkCertificateDialog* dialog)",
          "98: {",
          "99:   InfGtkCertificateDialogPrivate* priv;",
          "100:   gnutls_x509_crt_t own_cert;",
          "102:   gint normal_width_chars;",
          "103:   gint size;",
          "",
          "[Removed Lines]",
          "86:   PROP_CERTIFICATE_FLAGS,",
          "92: INF_DEFINE_FLAGS_TYPE(InfGtkCertificateDialogFlags, inf_gtk_certificate_dialog_flags, inf_gtk_certificate_dialog_flags_values)",
          "",
          "[Added Lines]",
          "64:   PROP_PINNED_CERTIFICATE,",
          "65:   PROP_VERIFY_FLAGS,",
          "80: static const unsigned int",
          "88:   time_t expiration_time;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   priv = INF_GTK_CERTIFICATE_DIALOG_PRIVATE(dialog);",
          "116:   {",
          "117:     own_cert =",
          "118:       inf_certificate_chain_get_own_certificate(priv->certificate_chain);",
          "",
          "[Removed Lines]",
          "115:   if(priv->certificate_flags != 0 && priv->hostname != NULL)",
          "",
          "[Added Lines]",
          "103:   if(priv->verify_flags != 0 && priv->hostname != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:     info_text = g_string_sized_new(256);",
          "132:     {",
          "138:       {",
          "139:         ctext = _(\"The host has presented a new certificate.\");",
          "140:         markup = g_markup_printf_escaped(\"<b>%s</b>\", ctext);",
          "",
          "[Removed Lines]",
          "130:     if(priv->certificate_flags &",
          "131:        INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED)",
          "136:       if(priv->certificate_flags &",
          "137:          INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED)",
          "",
          "[Added Lines]",
          "118:     if(priv->verify_flags & INF_CERTIFICATE_VERIFY_NOT_PINNED)",
          "123:       expiration_time = gnutls_x509_crt_get_expiration_time(",
          "124:         priv->pinned_certificate",
          "125:       );",
          "127:       if(expiration_time != (time_t)(-1) &&",
          "128:          time(NULL) > expiration_time - INF_GTK_CERTIFICATE_DIALOG_EXPIRATION_TOLERANCE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:         g_string_append(",
          "147:           info_text,",
          "150:         );",
          "151:       }",
          "152:       else",
          "",
          "[Removed Lines]",
          "148:           _(\"Its previous certificate has expired. Please make sure that you \"",
          "149:             \"trust the new certificate.\")",
          "",
          "[Added Lines]",
          "139:           _(\"Its previous certificate has expired or is closed to \"",
          "140:             \"expiration. Please make sure that you trust the new \"",
          "141:             \"certificate.\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:         g_string_append(",
          "162:           info_text,",
          "163:           _(\"This means someone might be eavesdropping on the connection. \"",
          "166:         );",
          "167:       }",
          "168:     }",
          "",
          "[Removed Lines]",
          "164:             \"Only connect if you expected this message, otherwise please \"",
          "165:             \"contact the server administrator.\")",
          "",
          "[Added Lines]",
          "156:             \"Please only continue if you expected this message, otherwise \"",
          "157:             \"please contact the server administrator.\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "174:           \"make sure that you trust this host before proceeding.\")",
          "175:       );",
          "179:       {",
          "180:         if(info_text->len > 0)",
          "181:           g_string_append(info_text, \"\\n\\n\");",
          "",
          "[Removed Lines]",
          "177:       if(priv->certificate_flags &",
          "178:         INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN)",
          "",
          "[Added Lines]",
          "169:       if(priv->verify_flags & INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:         );",
          "187:       }",
          "191:       {",
          "192:         if(info_text->len > 0)",
          "193:           g_string_append(info_text, \"\\n\\n\");",
          "",
          "[Removed Lines]",
          "189:       if(priv->certificate_flags &",
          "190:          INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH)",
          "",
          "[Added Lines]",
          "180:       if(priv->verify_flags & INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "362:   priv = INF_GTK_CERTIFICATE_DIALOG_PRIVATE(dialog);",
          "364:   priv->certificate_chain = NULL;",
          "366:   priv->hostname = NULL;",
          "368:   gtk_widget_init_template(GTK_WIDGET(dialog));",
          "",
          "[Removed Lines]",
          "365:   priv->certificate_flags = 0;",
          "",
          "[Added Lines]",
          "355:   priv->pinned_certificate = NULL;",
          "356:   priv->verify_flags = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "417:     );",
          "419:     break;",
          "424:       inf_gtk_certificate_dialog_renew_info(dialog);",
          "426:     break;",
          "427:   case PROP_HOSTNAME:",
          "428:     if(priv->hostname != NULL) g_free(priv->hostname);",
          "429:     priv->hostname = g_value_dup_string(value);",
          "431:       inf_gtk_certificate_dialog_renew_info(dialog);",
          "433:     break;",
          "",
          "[Removed Lines]",
          "420:   case PROP_CERTIFICATE_FLAGS:",
          "421:     priv->certificate_flags = g_value_get_flags(value);",
          "423:     if(priv->certificate_flags != 0 && priv->hostname != NULL)",
          "430:     if(priv->certificate_flags != 0 && priv->hostname != NULL)",
          "",
          "[Added Lines]",
          "411:   case PROP_PINNED_CERTIFICATE:",
          "412:     priv->pinned_certificate = g_value_get_pointer(value);",
          "413:     inf_gtk_certificate_dialog_renew_info(dialog);",
          "414:     break;",
          "415:   case PROP_VERIFY_FLAGS:",
          "416:     priv->verify_flags = g_value_get_flags(value);",
          "418:     if(priv->verify_flags != 0 && priv->hostname != NULL)",
          "425:     if(priv->verify_flags != 0 && priv->hostname != NULL)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "454:   case PROP_CERTIFICATE_CHAIN:",
          "455:     g_value_set_boxed(value, priv->certificate_chain);",
          "456:     break;",
          "459:     break;",
          "460:   case PROP_HOSTNAME:",
          "461:     g_value_set_string(value, priv->hostname);",
          "",
          "[Removed Lines]",
          "457:   case PROP_CERTIFICATE_FLAGS:",
          "458:     g_value_set_flags(value, priv->certificate_flags);",
          "",
          "[Added Lines]",
          "452:   case PROP_PINNED_CERTIFICATE:",
          "453:     g_value_set_pointer(value, priv->pinned_certificate);",
          "454:     break;",
          "455:   case PROP_VERIFY_FLAGS:",
          "456:     g_value_set_flags(value, priv->verify_flags);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "548:   g_object_class_install_property(",
          "549:     object_class,",
          "551:     g_param_spec_flags(",
          "554:       \"What warnings about the certificate to display\",",
          "556:       0,",
          "557:       G_PARAM_READWRITE",
          "558:     )",
          "",
          "[Removed Lines]",
          "550:     PROP_CERTIFICATE_FLAGS,",
          "552:       \"certificate-flags\",",
          "553:       \"Certificate flags\",",
          "555:       INF_GTK_TYPE_CERTIFICATE_DIALOG_FLAGS,",
          "",
          "[Added Lines]",
          "548:     PROP_PINNED_CERTIFICATE,",
          "549:     g_param_spec_pointer(",
          "550:       \"pinned-certificate\",",
          "551:       \"Pinned Certificate\",",
          "552:       \"The certificate that we had pinned for this host\",",
          "553:       G_PARAM_READWRITE",
          "554:     )",
          "555:   );",
          "557:   g_object_class_install_property(",
          "558:     object_class,",
          "559:     PROP_VERIFY_FLAGS,",
          "561:       \"verify-flags\",",
          "562:       \"Verify flags\",",
          "564:       INF_TYPE_CERTIFICATE_VERIFY_FLAGS,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "594: InfGtkCertificateDialog*",
          "595: inf_gtk_certificate_dialog_new(GtkWindow* parent,",
          "596:                                GtkDialogFlags dialog_flags,",
          "598:                                const gchar* hostname,",
          "600: {",
          "601:   GObject* object;",
          "603:   g_return_val_if_fail(parent == NULL || GTK_IS_WINDOW(parent), NULL);",
          "605:   g_return_val_if_fail(hostname != NULL, NULL);",
          "606:   g_return_val_if_fail(certificate_chain != NULL, NULL);",
          "608:   object = g_object_new(",
          "609:     INF_GTK_TYPE_CERTIFICATE_DIALOG,",
          "610:     \"certificate-chain\", certificate_chain,",
          "612:     \"hostname\", hostname,",
          "613:     NULL",
          "614:   );",
          "",
          "[Removed Lines]",
          "597:                                InfGtkCertificateDialogFlags certificate_flags,",
          "599:                                InfCertificateChain* certificate_chain)",
          "604:   g_return_val_if_fail(certificate_flags != 0, NULL);",
          "611:     \"certificate-flags\", certificate_flags,",
          "",
          "[Added Lines]",
          "609:                                InfCertificateVerifyFlags verify_flags,",
          "611:                                InfCertificateChain* certificate_chain,",
          "612:                                gnutls_x509_crt_t pinned_certificate)",
          "617:   g_return_val_if_fail(verify_flags != 0, NULL);",
          "624:     \"pinned-certificate\", pinned_certificate,",
          "625:     \"verify-flags\", verify_flags,",
          "",
          "---------------"
        ],
        "libinfgtk/inf-gtk-certificate-dialog.h||libinfgtk/inf-gtk-certificate-dialog.h": [
          "File: libinfgtk/inf-gtk-certificate-dialog.h -> libinfgtk/inf-gtk-certificate-dialog.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define __INF_GTK_CERTIFICATE_DIALOG_H__",
          "23: #include <libinfinity/common/inf-certificate-chain.h>",
          "25: #include <gtk/gtk.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <libinfinity/common/inf-certificate-verify.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   GtkDialog parent;",
          "62: };",
          "89: GType",
          "90: inf_gtk_certificate_dialog_get_type(void) G_GNUC_CONST;",
          "92: InfGtkCertificateDialog*",
          "93: inf_gtk_certificate_dialog_new(GtkWindow* parent,",
          "94:                                GtkDialogFlags dialog_flags,",
          "96:                                const gchar* hostname,",
          "99: G_END_DECLS",
          "",
          "[Removed Lines]",
          "79: typedef enum _InfGtkCertificateDialogFlags {",
          "80:   INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH  = 1 << 0,",
          "81:   INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN   = 1 << 1,",
          "82:   INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED         = 1 << 2,",
          "83:   INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED        = 1 << 3",
          "84: } InfGtkCertificateDialogFlags;",
          "86: GType",
          "87: inf_gtk_certificate_dialog_flags_get_type(void) G_GNUC_CONST;",
          "95:                                InfGtkCertificateDialogFlags certificate_flags,",
          "97:                                InfCertificateChain* certificate_chain);",
          "",
          "[Added Lines]",
          "71:                                InfCertificateVerifyFlags verify_flags,",
          "73:                                InfCertificateChain* certificate_chain,",
          "74:                                gnutls_x509_crt_t pinned_certificate);",
          "",
          "---------------"
        ],
        "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c": [
          "File: libinfgtk/inf-gtk-certificate-manager.c -> libinfgtk/inf-gtk-certificate-manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <libinfgtk/inf-gtk-certificate-manager.h>",
          "25: #include <libinfgtk/inf-gtk-certificate-dialog.h>",
          "31: #include <libinfinity/inf-i18n.h>",
          "41:   InfGtkCertificateManager* manager;",
          "43:   InfXmppConnection* connection;",
          "44:   InfGtkCertificateDialog* dialog;",
          "47: };",
          "49: typedef struct _InfGtkCertificateManagerPrivate",
          "50:   InfGtkCertificateManagerPrivate;",
          "51: struct _InfGtkCertificateManagerPrivate {",
          "52:   GtkWindow* parent_window;",
          "57: };",
          "59: enum {",
          "60:   PROP_0,",
          "66: };",
          "68: #define INF_GTK_CERTIFICATE_MANAGER_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), INF_GTK_TYPE_CERTIFICATE_MANAGER, InfGtkCertificateManagerPrivate))",
          "71:   G_ADD_PRIVATE(InfGtkCertificateManager))",
          "116: static void",
          "118: {",
          "278: }",
          "280: static void",
          "281: inf_gtk_certificate_manager_response_cb(GtkDialog* dialog,",
          "283:                                         gpointer user_data)",
          "284: {",
          "286:   InfGtkCertificateManagerPrivate* priv;",
          "287:   InfXmppConnection* connection;",
          "302:   {",
          "303:   case GTK_RESPONSE_ACCEPT:",
          "308:     );",
          "353:     break;",
          "354:   case GTK_RESPONSE_REJECT:",
          "355:   case GTK_RESPONSE_DELETE_EVENT:",
          "359:     break;",
          "360:   default:",
          "361:     g_assert_not_reached();",
          "362:     break;",
          "363:   }",
          "654: }",
          "656: static void",
          "",
          "[Removed Lines]",
          "27: #include <libinfinity/common/inf-xml-connection.h>",
          "28: #include <libinfinity/common/inf-cert-util.h>",
          "29: #include <libinfinity/common/inf-file-util.h>",
          "30: #include <libinfinity/common/inf-error.h>",
          "32: #include <libinfinity/inf-signals.h>",
          "34: #include <gnutls/x509.h>",
          "36: #include <string.h>",
          "37: #include <errno.h>",
          "39: typedef struct _InfGtkCertificateManagerQuery InfGtkCertificateManagerQuery;",
          "40: struct _InfGtkCertificateManagerQuery {",
          "42:   GHashTable* known_hosts;",
          "45:   GtkWidget* checkbutton;",
          "46:   InfCertificateChain* certificate_chain;",
          "53:   InfXmppManager* xmpp_manager;",
          "55:   gchar* known_hosts_file;",
          "56:   GSList* queries;",
          "62:   PROP_PARENT_WINDOW,",
          "63:   PROP_XMPP_MANAGER,",
          "65:   PROP_KNOWN_HOSTS_FILE",
          "70: G_DEFINE_TYPE_WITH_CODE(InfGtkCertificateManager, inf_gtk_certificate_manager, G_TYPE_OBJECT,",
          "79: static const unsigned int",
          "82: static GQuark",
          "83: inf_gtk_certificate_manager_verify_error_quark(void)",
          "84: {",
          "85:   return g_quark_from_static_string(",
          "86:     \"INF_GTK_CERTIFICATE_MANAGER_VERIFY_ERROR\"",
          "87:   );",
          "88: }",
          "90: #if 0",
          "91: static InfGtkCertificateManagerQuery*",
          "92: inf_gtk_certificate_manager_find_query(InfGtkCertificateManager* manager,",
          "93:                                        InfXmppConnection* connection)",
          "94: {",
          "95:   InfGtkCertificateManagerPrivate* priv;",
          "96:   GSList* item;",
          "97:   InfGtkCertificateManagerQuery* query;",
          "99:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "100:   for(item = priv->queries; item != NULL; item == item->next)",
          "101:   {",
          "102:     query = (InfGtkCertificateManagerQuery*)item->data;",
          "103:     if(query->connection == connection)",
          "104:       return query;",
          "105:   }",
          "107:   return NULL;",
          "108: }",
          "109: #endif",
          "111: static void",
          "112: inf_gtk_certificate_manager_notify_status_cb(GObject* object,",
          "113:                                              GParamSpec* pspec,",
          "114:                                              gpointer user_data);",
          "117: inf_gtk_certificate_manager_query_free(InfGtkCertificateManagerQuery* query)",
          "119:   inf_signal_handlers_disconnect_by_func(",
          "120:     G_OBJECT(query->connection),",
          "121:     G_CALLBACK(inf_gtk_certificate_manager_notify_status_cb),",
          "122:     query",
          "123:   );",
          "125:   g_object_unref(query->connection);",
          "126:   inf_certificate_chain_unref(query->certificate_chain);",
          "127:   gtk_widget_destroy(GTK_WIDGET(query->dialog));",
          "128:   g_hash_table_unref(query->known_hosts);",
          "129:   g_slice_free(InfGtkCertificateManagerQuery, query);",
          "130: }",
          "132: static gboolean",
          "133: inf_gtk_certificate_manager_compare_fingerprint(gnutls_x509_crt_t cert1,",
          "134:                                                 gnutls_x509_crt_t cert2,",
          "135:                                                 GError** error)",
          "136: {",
          "137:   static const unsigned int SHA256_DIGEST_SIZE = 32;",
          "139:   size_t size;",
          "140:   guchar cert1_fingerprint[SHA256_DIGEST_SIZE];",
          "141:   guchar cert2_fingerprint[SHA256_DIGEST_SIZE];",
          "143:   int ret;",
          "144:   int cmp;",
          "146:   size = SHA256_DIGEST_SIZE;",
          "148:   ret = gnutls_x509_crt_get_fingerprint(",
          "149:     cert1,",
          "150:     GNUTLS_DIG_SHA256,",
          "151:     cert1_fingerprint,",
          "152:     &size",
          "153:   );",
          "155:   if(ret == GNUTLS_E_SUCCESS)",
          "156:   {",
          "157:     g_assert(size == SHA256_DIGEST_SIZE);",
          "159:     ret = gnutls_x509_crt_get_fingerprint(",
          "160:       cert2,",
          "161:       GNUTLS_DIG_SHA256,",
          "162:       cert2_fingerprint,",
          "163:       &size",
          "164:     );",
          "165:   }",
          "167:   if(ret != GNUTLS_E_SUCCESS)",
          "168:   {",
          "169:     inf_gnutls_set_error(error, ret);",
          "170:     return FALSE;",
          "171:   }",
          "173:   cmp = memcmp(cert1_fingerprint, cert2_fingerprint, SHA256_DIGEST_SIZE);",
          "174:   if(cmp != 0) return FALSE;",
          "176:   return TRUE;",
          "177: }",
          "179: static void",
          "180: inf_gtk_certificate_manager_set_known_hosts(InfGtkCertificateManager* manager,",
          "181:                                             const gchar* known_hosts_file)",
          "182: {",
          "183:   InfGtkCertificateManagerPrivate* priv;",
          "184:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "188:   g_assert(priv->queries == NULL);",
          "190:   g_free(priv->known_hosts_file);",
          "191:   priv->known_hosts_file = g_strdup(known_hosts_file);",
          "192: }",
          "194: static GHashTable*",
          "195: inf_gtk_certificate_manager_ref_known_hosts(InfGtkCertificateManager* mgr,",
          "196:                                             GError** error)",
          "197: {",
          "198:   InfGtkCertificateManagerPrivate* priv;",
          "199:   InfGtkCertificateManagerQuery* query;",
          "201:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(mgr);",
          "202:   if(priv->queries != NULL)",
          "203:   {",
          "204:     query = (InfGtkCertificateManagerQuery*)priv->queries->data;",
          "205:     g_hash_table_ref(query->known_hosts);",
          "206:     return query->known_hosts;",
          "207:   }",
          "208:   else",
          "209:   {",
          "210:     return inf_cert_util_read_certificate_map(priv->known_hosts_file, error);",
          "211:   }",
          "212: }",
          "214: static gboolean",
          "215: inf_gtk_certificate_manager_write_known_hosts(InfGtkCertificateManager* mgr,",
          "216:                                               GHashTable* table,",
          "217:                                               GError** error)",
          "218: {",
          "219:   InfGtkCertificateManagerPrivate* priv;",
          "220:   gchar* dirname;",
          "222:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(mgr);",
          "234:   dirname = g_path_get_dirname(priv->known_hosts_file);",
          "235:   if(!inf_file_util_create_directory(dirname, 0755, error))",
          "236:   {",
          "237:     g_free(dirname);",
          "238:     return FALSE;",
          "239:   }",
          "241:   g_free(dirname);",
          "243:   return inf_cert_util_write_certificate_map(",
          "244:     table,",
          "245:     priv->known_hosts_file,",
          "246:     error",
          "247:   );",
          "248: }",
          "250: static void",
          "251: inf_gtk_certificate_manager_write_known_hosts_with_warning(",
          "252:   InfGtkCertificateManager* mgr,",
          "253:   GHashTable* table)",
          "254: {",
          "255:   InfGtkCertificateManagerPrivate* priv;",
          "256:   GError* error;",
          "257:   gboolean result;",
          "259:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(mgr);",
          "260:   error = NULL;",
          "262:   result = inf_gtk_certificate_manager_write_known_hosts(",
          "263:     mgr,",
          "264:     table,",
          "265:     &error",
          "266:   );",
          "268:   if(error != NULL)",
          "269:   {",
          "270:     g_warning(",
          "271:       _(\"Failed to write file with known hosts \\\"%s\\\": %s\"),",
          "272:       priv->known_hosts_file,",
          "273:       error->message",
          "274:     );",
          "276:     g_error_free(error);",
          "277:   }",
          "282:                                         int response_id,",
          "285:   InfGtkCertificateManagerQuery* query;",
          "289:   gchar* hostname;",
          "290:   gnutls_x509_crt_t cert;",
          "291:   gnutls_x509_crt_t known_cert;",
          "292:   GError* error;",
          "293:   gboolean cert_equal;",
          "295:   query = (InfGtkCertificateManagerQuery*)user_data;",
          "296:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(query->manager);",
          "298:   connection = query->connection;",
          "299:   g_object_ref(connection);",
          "301:   switch(response_id)",
          "304:     g_object_get(",
          "305:       G_OBJECT(query->connection),",
          "306:       \"remote-hostname\", &hostname,",
          "307:       NULL",
          "312:     cert =",
          "313:       inf_certificate_chain_get_own_certificate(query->certificate_chain);",
          "314:     known_cert = g_hash_table_lookup(query->known_hosts, hostname);",
          "316:     error = NULL;",
          "317:     cert_equal = FALSE;",
          "318:     if(known_cert != NULL)",
          "319:     {",
          "320:       cert_equal = inf_gtk_certificate_manager_compare_fingerprint(",
          "321:         cert,",
          "322:         known_cert,",
          "323:         &error",
          "324:       );",
          "325:     }",
          "327:     if(error != NULL)",
          "328:     {",
          "329:       g_warning(",
          "330:         _(\"Failed to add certificate to list of known hosts: %s\"),",
          "331:         error->message",
          "332:       );",
          "333:     }",
          "334:     else if(!cert_equal)",
          "335:     {",
          "336:       cert = inf_cert_util_copy_certificate(cert, &error);",
          "337:       g_hash_table_insert(query->known_hosts, hostname, cert);",
          "339:       inf_gtk_certificate_manager_write_known_hosts_with_warning(",
          "340:         query->manager,",
          "341:         query->known_hosts",
          "342:       );",
          "343:     }",
          "344:     else",
          "345:     {",
          "346:       g_free(hostname);",
          "347:     }",
          "349:     priv->queries = g_slist_remove(priv->queries, query);",
          "350:     inf_gtk_certificate_manager_query_free(query);",
          "352:     inf_xmpp_connection_certificate_verify_continue(connection);",
          "356:     priv->queries = g_slist_remove(priv->queries, query);",
          "357:     inf_gtk_certificate_manager_query_free(query);",
          "358:     inf_xmpp_connection_certificate_verify_cancel(connection, NULL);",
          "365:   g_object_unref(connection);",
          "366: }",
          "368: static void",
          "369: inf_gtk_certificate_manager_notify_status_cb(GObject* object,",
          "370:                                              GParamSpec* pspec,",
          "371:                                              gpointer user_data)",
          "372: {",
          "373:   InfGtkCertificateManagerQuery* query;",
          "374:   InfGtkCertificateManagerPrivate* priv;",
          "375:   InfXmppConnection* connection;",
          "376:   InfXmlConnectionStatus status;",
          "378:   query = (InfGtkCertificateManagerQuery*)user_data;",
          "379:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(query->manager);",
          "380:   connection = INF_XMPP_CONNECTION(object);",
          "382:   g_object_get(G_OBJECT(connection), \"status\", &status, NULL);",
          "384:   if(status == INF_XML_CONNECTION_CLOSING ||",
          "385:      status == INF_XML_CONNECTION_CLOSED)",
          "386:   {",
          "387:     priv->queries = g_slist_remove(priv->queries, query);",
          "388:     inf_gtk_certificate_manager_query_free(query);",
          "389:   }",
          "390: }",
          "392: static void",
          "393: inf_gtk_certificate_manager_certificate_func(InfXmppConnection* connection,",
          "394:                                              gnutls_session_t session,",
          "395:                                              InfCertificateChain* chain,",
          "396:                                              gpointer user_data)",
          "397: {",
          "398:   InfGtkCertificateManager* manager;",
          "399:   InfGtkCertificateManagerPrivate* priv;",
          "401:   InfGtkCertificateDialogFlags flags;",
          "402:   gnutls_x509_crt_t presented_cert;",
          "403:   gnutls_x509_crt_t known_cert;",
          "404:   gchar* hostname;",
          "406:   gboolean match_hostname;",
          "407:   gboolean issuer_known;",
          "408:   gnutls_x509_crt_t root_cert;",
          "410:   int ret;",
          "411:   unsigned int verify;",
          "412:   GHashTable* table;",
          "413:   gboolean cert_equal;",
          "414:   time_t expiration_time;",
          "416:   InfGtkCertificateManagerQuery* query;",
          "417:   gchar* text;",
          "418:   GtkWidget* vbox;",
          "419:   GtkWidget* label;",
          "421:   GError* error;",
          "423:   manager = INF_GTK_CERTIFICATE_MANAGER(user_data);",
          "424:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "426:   g_object_get(G_OBJECT(connection), \"remote-hostname\", &hostname, NULL);",
          "427:   presented_cert = inf_certificate_chain_get_own_certificate(chain);",
          "429:   match_hostname = gnutls_x509_crt_check_hostname(presented_cert, hostname);",
          "432:   ret = gnutls_certificate_verify_peers2(session, &verify);",
          "433:   error = NULL;",
          "435:   if(ret != GNUTLS_E_SUCCESS)",
          "436:     inf_gnutls_set_error(&error, ret);",
          "440:   if(error == NULL)",
          "441:   {",
          "442:     issuer_known = TRUE;",
          "443:     if(verify & GNUTLS_CERT_SIGNER_NOT_FOUND)",
          "444:     {",
          "445:       issuer_known = FALSE;",
          "454:       root_cert = inf_certificate_chain_get_root_certificate(chain);",
          "456:       ret = gnutls_x509_crt_list_verify(",
          "457:         inf_certificate_chain_get_raw(chain),",
          "458:         inf_certificate_chain_get_n_certificates(chain),",
          "459:         &root_cert,",
          "460:         1,",
          "461:         NULL,",
          "462:         0,",
          "463:         GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT,",
          "464:         &verify",
          "465:       );",
          "467:       if(ret != GNUTLS_E_SUCCESS)",
          "468:         inf_gnutls_set_error(&error, ret);",
          "469:     }",
          "471:     if(error == NULL)",
          "472:       if(verify & GNUTLS_CERT_INVALID)",
          "473:         inf_gnutls_certificate_verification_set_error(&error, verify);",
          "474:   }",
          "479:   table = NULL;",
          "480:   if(error == NULL)",
          "481:   {",
          "482:     known_cert = NULL;",
          "483:     if(!match_hostname || !issuer_known)",
          "484:     {",
          "489:       table = inf_gtk_certificate_manager_ref_known_hosts(manager, &error);",
          "490:       if(table != NULL)",
          "491:         known_cert = g_hash_table_lookup(table, hostname);",
          "492:     }",
          "493:   }",
          "498:   flags = 0;",
          "499:   if(error == NULL)",
          "500:   {",
          "501:     if(known_cert != NULL)",
          "502:     {",
          "503:       cert_equal = inf_gtk_certificate_manager_compare_fingerprint(",
          "504:         known_cert,",
          "505:         presented_cert,",
          "506:         &error",
          "507:       );",
          "509:       if(error == NULL && cert_equal == FALSE)",
          "510:       {",
          "511:         if(!match_hostname)",
          "512:           flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH;",
          "513:         if(!issuer_known)",
          "514:           flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN;",
          "516:         flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED;",
          "517:         expiration_time = gnutls_x509_crt_get_expiration_time(known_cert);",
          "518:         if(expiration_time != (time_t)(-1))",
          "519:         {",
          "520:           expiration_time -= INF_GTK_CERTIFICATE_MANAGER_EXPIRATION_TOLERANCE;",
          "521:           if(time(NULL) > expiration_time)",
          "522:           {",
          "523:             flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED;",
          "524:           }",
          "525:         }",
          "526:       }",
          "527:     }",
          "528:     else",
          "529:     {",
          "530:       if(!match_hostname)",
          "531:         flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH;",
          "532:       if(!issuer_known)",
          "533:         flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN;",
          "534:     }",
          "535:   }",
          "539:   if(error == NULL)",
          "540:   {",
          "541:     if(flags == 0)",
          "542:     {",
          "543:       if(match_hostname && issuer_known)",
          "544:       {",
          "547:         if(table != NULL && g_hash_table_remove(table, hostname) == TRUE)",
          "548:         {",
          "549:           inf_gtk_certificate_manager_write_known_hosts_with_warning(",
          "550:             manager,",
          "551:             table",
          "552:           );",
          "553:         }",
          "554:       }",
          "556:       inf_xmpp_connection_certificate_verify_continue(connection);",
          "557:     }",
          "558:     else",
          "559:     {",
          "560:       query = g_slice_new(InfGtkCertificateManagerQuery);",
          "561:       query->manager = manager;",
          "562:       query->known_hosts = table;",
          "563:       query->connection = connection;",
          "564:       query->dialog = inf_gtk_certificate_dialog_new(",
          "565:         priv->parent_window,",
          "566:         0,",
          "567:         flags,",
          "568:         hostname,",
          "569:         chain",
          "570:       );",
          "571:       query->certificate_chain = chain;",
          "573:       table = NULL;",
          "575:       g_object_ref(query->connection);",
          "576:       inf_certificate_chain_ref(chain);",
          "578:       g_signal_connect(",
          "579:         G_OBJECT(connection),",
          "580:         \"notify::status\",",
          "581:         G_CALLBACK(inf_gtk_certificate_manager_notify_status_cb),",
          "582:         query",
          "583:       );",
          "585:       g_signal_connect(",
          "586:         G_OBJECT(query->dialog),",
          "587:         \"response\",",
          "588:         G_CALLBACK(inf_gtk_certificate_manager_response_cb),",
          "589:         query",
          "590:       );",
          "592:       gtk_dialog_add_button(",
          "593:         GTK_DIALOG(query->dialog),",
          "594:         _(\"_Cancel connection\"),",
          "595:         GTK_RESPONSE_REJECT",
          "596:       );",
          "598:       gtk_dialog_add_button(",
          "599:         GTK_DIALOG(query->dialog),",
          "600:         _(\"C_ontinue connection\"),",
          "601:         GTK_RESPONSE_ACCEPT",
          "602:       );",
          "604:       text = g_strdup_printf(",
          "605:         _(\"Do you want to continue the connection to host \\\"%s\\\"? If you \"",
          "606:           \"choose to continue, this certificate will be trusted in the \"",
          "607:           \"future when connecting to this host.\"),",
          "608:         hostname",
          "609:       );",
          "611:       label = gtk_label_new(text);",
          "612:       gtk_label_set_line_wrap(GTK_LABEL(label), TRUE);",
          "613:       gtk_label_set_line_wrap_mode(GTK_LABEL(label), PANGO_WRAP_WORD_CHAR);",
          "614:       gtk_label_set_max_width_chars(GTK_LABEL(label), 60);",
          "615:       gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.0);",
          "616:       gtk_widget_show(label);",
          "617:       g_free(text);",
          "619:       vbox = gtk_dialog_get_content_area(GTK_DIALOG(query->dialog));",
          "620:       gtk_box_pack_start(GTK_BOX(vbox), label, FALSE, FALSE, 0);",
          "622:       priv->queries = g_slist_prepend(priv->queries, query);",
          "623:       gtk_window_present(GTK_WINDOW(query->dialog));",
          "624:     }",
          "625:   }",
          "626:   else",
          "627:   {",
          "628:     inf_xmpp_connection_certificate_verify_cancel(connection, error);",
          "629:     g_error_free(error);",
          "630:   }",
          "632:   if(table != NULL) g_hash_table_unref(table);",
          "633:   g_free(hostname);",
          "634: }",
          "636: static void",
          "637: inf_gtk_certificate_manager_connection_added_cb(InfXmppManager* manager,",
          "638:                                                 InfXmppConnection* connection,",
          "639:                                                 gpointer user_data)",
          "640: {",
          "641:   InfXmppConnectionSite site;",
          "642:   g_object_get(G_OBJECT(connection), \"site\", &site, NULL);",
          "644:   if(site == INF_XMPP_CONNECTION_CLIENT)",
          "645:   {",
          "646:     inf_xmpp_connection_set_certificate_callback(",
          "647:       connection,",
          "649:       inf_gtk_certificate_manager_certificate_func,",
          "650:       user_data,",
          "651:       NULL",
          "652:     );",
          "653:   }",
          "",
          "[Added Lines]",
          "39: typedef struct _InfGtkCertificateManagerDialog InfGtkCertificateManagerDialog;",
          "40: struct _InfGtkCertificateManagerDialog {",
          "50:   GSList* dialogs;",
          "56:   PROP_PARENT_WINDOW",
          "61: G_DEFINE_TYPE_WITH_CODE(InfGtkCertificateManager, inf_gtk_certificate_manager, INF_TYPE_CERTIFICATE_VERIFY,",
          "65: inf_gtk_certificate_manager_dialog_free(InfGtkCertificateManagerDialog* item)",
          "67:   gtk_widget_destroy(GTK_WIDGET(item->dialog));",
          "68:   g_slice_free(InfGtkCertificateManagerDialog, item);",
          "73:                                         int response,",
          "76:   InfGtkCertificateManagerDialog* item;",
          "77:   InfGtkCertificateManager* manager;",
          "81:   item = (InfGtkCertificateManagerDialog*)user_data;",
          "82:   manager = INF_GTK_CERTIFICATE_MANAGER(item->manager);",
          "83:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "85:   connection = item->connection;",
          "87:   switch(response)",
          "90:     inf_certificate_verify_checked(",
          "91:       INF_CERTIFICATE_VERIFY(manager),",
          "92:       connection,",
          "93:       TRUE",
          "99:     inf_certificate_verify_checked(",
          "100:       INF_CERTIFICATE_VERIFY(manager),",
          "101:       connection,",
          "102:       FALSE",
          "103:     );",
          "111:   inf_gtk_certificate_manager_dialog_free(item);",
          "112:   priv->dialogs = g_slist_remove(priv->dialogs, item);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "662:   priv->parent_window = NULL;",
          "665: }",
          "667: static void",
          "",
          "[Removed Lines]",
          "663:   priv->xmpp_manager = NULL;",
          "664:   priv->known_hosts_file = NULL;",
          "",
          "[Added Lines]",
          "122:   priv->dialogs = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "669: {",
          "670:   InfGtkCertificateManager* manager;",
          "671:   InfGtkCertificateManagerPrivate* priv;",
          "674:   manager = INF_GTK_CERTIFICATE_MANAGER(object);",
          "675:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "",
          "[Removed Lines]",
          "672:   GSList* item;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "680:     priv->parent_window = NULL;",
          "681:   }",
          "684:   {",
          "687:   }",
          "699:   G_OBJECT_CLASS(inf_gtk_certificate_manager_parent_class)->dispose(object);",
          "700: }",
          "717: static void",
          "718: inf_gtk_certificate_manager_set_property(GObject* object,",
          "719:                                          guint prop_id,",
          "",
          "[Removed Lines]",
          "683:   if(priv->xmpp_manager != NULL)",
          "685:     g_object_unref(priv->xmpp_manager);",
          "686:     priv->xmpp_manager = NULL;",
          "689:   for(item = priv->queries; item != NULL; item = g_slist_next(item))",
          "690:   {",
          "691:     inf_gtk_certificate_manager_query_free(",
          "692:       (InfGtkCertificateManagerQuery*)item->data",
          "693:     );",
          "694:   }",
          "696:   g_slist_free(priv->queries);",
          "697:   priv->queries = NULL;",
          "702: static void",
          "703: inf_gtk_certificate_manager_finalize(GObject* object)",
          "704: {",
          "705:   InfGtkCertificateManager* manager;",
          "706:   InfGtkCertificateManagerPrivate* priv;",
          "708:   manager = INF_GTK_CERTIFICATE_MANAGER(object);",
          "709:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "711:   inf_gtk_certificate_manager_set_known_hosts(manager, NULL);",
          "712:   g_assert(priv->known_hosts_file == NULL);",
          "714:   G_OBJECT_CLASS(inf_gtk_certificate_manager_parent_class)->finalize(object);",
          "715: }",
          "",
          "[Added Lines]",
          "140:   while(priv->dialogs != NULL)",
          "142:     inf_gtk_certificate_manager_dialog_free(priv->dialogs->data);",
          "143:     priv->dialogs = g_slist_remove(priv->dialogs, priv->dialogs->data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "731:   case PROP_PARENT_WINDOW:",
          "733:     priv->parent_window = GTK_WINDOW(g_value_dup_object(value));",
          "753:     break;",
          "754:   default:",
          "755:     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);",
          "",
          "[Removed Lines]",
          "734:     break;",
          "735:   case PROP_XMPP_MANAGER:",
          "737:     priv->xmpp_manager = INF_XMPP_MANAGER(g_value_dup_object(value));",
          "739:     g_signal_connect(",
          "740:       G_OBJECT(priv->xmpp_manager),",
          "741:       \"connection-added\",",
          "742:       G_CALLBACK(inf_gtk_certificate_manager_connection_added_cb),",
          "743:       manager",
          "744:     );",
          "746:     break;",
          "747:   case PROP_KNOWN_HOSTS_FILE:",
          "748:     inf_gtk_certificate_manager_set_known_hosts(",
          "749:       manager,",
          "750:       g_value_get_string(value)",
          "751:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "774:   case PROP_PARENT_WINDOW:",
          "775:     g_value_set_object(value, G_OBJECT(priv->parent_window));",
          "776:     break;",
          "783:   default:",
          "784:     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);",
          "785:     break;",
          "786:   }",
          "787: }",
          "",
          "[Removed Lines]",
          "777:   case PROP_XMPP_MANAGER:",
          "778:     g_value_set_object(value, G_OBJECT(priv->xmpp_manager));",
          "779:     break;",
          "780:   case PROP_KNOWN_HOSTS_FILE:",
          "781:     g_value_set_string(value, priv->known_hosts_file);",
          "782:     break;",
          "",
          "[Added Lines]",
          "196: static void",
          "197: inf_gtk_certificate_manager_check_certificate(",
          "198:   InfCertificateVerify* verify,",
          "199:   InfXmppConnection* connection,",
          "200:   InfCertificateChain* certificate_chain,",
          "201:   gnutls_x509_crt_t pinned_certificate,",
          "202:   InfCertificateVerifyFlags flags)",
          "203: {",
          "204:   InfGtkCertificateManager* manager;",
          "205:   InfGtkCertificateManagerPrivate* priv;",
          "206:   InfGtkCertificateManagerDialog* item;",
          "207:   InfGtkCertificateDialog* dialog;",
          "208:   gchar* hostname;",
          "209:   gchar* text;",
          "211:   GtkWidget* label;",
          "212:   GtkWidget* vbox;",
          "214:   manager = INF_GTK_CERTIFICATE_MANAGER(verify);",
          "215:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "217:   g_object_get(G_OBJECT(connection), \"remote-hostname\", &hostname, NULL);",
          "219:   dialog = inf_gtk_certificate_dialog_new(",
          "220:     priv->parent_window,",
          "221:     0,",
          "222:     flags,",
          "223:     hostname,",
          "224:     certificate_chain,",
          "225:     pinned_certificate",
          "226:   );",
          "228:   gtk_dialog_add_button(",
          "229:     GTK_DIALOG(dialog),",
          "230:     _(\"_Cancel connection\"),",
          "231:     GTK_RESPONSE_REJECT",
          "232:   );",
          "234:   gtk_dialog_add_button(",
          "235:     GTK_DIALOG(dialog),",
          "236:     _(\"C_ontinue connection\"),",
          "237:     GTK_RESPONSE_ACCEPT",
          "238:   );",
          "240:   text = g_strdup_printf(",
          "241:     _(\"Do you want to continue the connection to host \\\"%s\\\"? If you \"",
          "242:       \"choose to continue, this certificate will be trusted in the \"",
          "243:       \"future when connecting to this host.\"),",
          "244:     hostname",
          "245:   );",
          "247:   g_free(hostname);",
          "249:   label = gtk_label_new(text);",
          "250:   gtk_label_set_line_wrap(GTK_LABEL(label), TRUE);",
          "251:   gtk_label_set_max_width_chars(GTK_LABEL(label), 75);",
          "252:   gtk_widget_show(label);",
          "253:   g_free(text);",
          "255:   vbox = gtk_dialog_get_content_area(GTK_DIALOG(dialog));",
          "256:   gtk_box_pack_start(GTK_BOX(vbox), label, FALSE, TRUE, 6);",
          "258:   item = g_slice_new(InfGtkCertificateManagerDialog);",
          "259:   item->manager = manager;",
          "260:   item->connection = connection;",
          "261:   item->dialog = dialog;",
          "262:   priv->dialogs = g_slist_prepend(priv->dialogs, item);",
          "264:   g_signal_connect(",
          "265:     G_OBJECT(dialog),",
          "266:     \"response\",",
          "267:     G_CALLBACK(inf_gtk_certificate_manager_response_cb),",
          "268:     item",
          "269:   );",
          "271:   gtk_window_present(GTK_WINDOW(dialog));",
          "272: }",
          "274: static void",
          "275: inf_gtk_certificate_manager_check_cancelled(InfCertificateVerify* verify,",
          "276:                                             InfXmppConnection* connection)",
          "277: {",
          "278:   InfGtkCertificateManager* manager;",
          "279:   InfGtkCertificateManagerPrivate* priv;",
          "280:   InfGtkCertificateManagerDialog* item;",
          "281:   GSList* iter;",
          "283:   manager = INF_GTK_CERTIFICATE_MANAGER(verify);",
          "284:   priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE(manager);",
          "286:   for(iter = priv->dialogs; iter != NULL; iter = iter->next)",
          "287:   {",
          "288:     item = (InfGtkCertificateManagerDialog*)iter->data;",
          "289:     if(item->connection == connection)",
          "290:       break;",
          "291:   }",
          "293:   g_assert(iter != NULL);",
          "295:   inf_gtk_certificate_manager_dialog_free(item);",
          "296:   priv->dialogs = g_slist_remove(priv->dialogs, item);",
          "297: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "795:   InfGtkCertificateManagerClass* certificate_manager_class)",
          "796: {",
          "797:   GObjectClass* object_class;",
          "798:   object_class = G_OBJECT_CLASS(certificate_manager_class);",
          "800:   object_class->dispose = inf_gtk_certificate_manager_dispose;",
          "802:   object_class->set_property = inf_gtk_certificate_manager_set_property;",
          "803:   object_class->get_property = inf_gtk_certificate_manager_get_property;",
          "805:   g_object_class_install_property(",
          "806:     object_class,",
          "",
          "[Removed Lines]",
          "801:   object_class->finalize = inf_gtk_certificate_manager_finalize;",
          "",
          "[Added Lines]",
          "308:   InfCertificateVerifyClass* certificate_verify_class;",
          "311:   certificate_verify_class =",
          "312:     INF_CERTIFICATE_VERIFY_CLASS(certificate_manager_class);",
          "318:   certificate_verify_class->check_certificate =",
          "319:     inf_gtk_certificate_manager_check_certificate;",
          "320:   certificate_verify_class->check_cancelled =",
          "321:     inf_gtk_certificate_manager_check_cancelled;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "808:     g_param_spec_object(",
          "809:       \"parent-window\",",
          "810:       \"Parent window\",",
          "812:       GTK_TYPE_WINDOW,",
          "813:       G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY",
          "814:     )",
          "815:   );",
          "840: }",
          "",
          "[Removed Lines]",
          "811:       \"The parent window for certificate approval dialogs\",",
          "817:   g_object_class_install_property(",
          "818:     object_class,",
          "819:     PROP_XMPP_MANAGER,",
          "820:     g_param_spec_object(",
          "821:       \"xmpp-manager\",",
          "822:       \"XMPP manager\",",
          "823:       \"The XMPP manager of registered connections\",",
          "824:       INF_TYPE_XMPP_MANAGER,",
          "825:       G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY",
          "826:     )",
          "827:   );",
          "829:   g_object_class_install_property(",
          "830:     object_class,",
          "831:     PROP_KNOWN_HOSTS_FILE,",
          "832:     g_param_spec_string(",
          "833:       \"known-hosts-file\",",
          "834:       \"Known hosts file\",",
          "835:       \"File containing certificates of known hosts\",",
          "836:       NULL,",
          "837:       G_PARAM_READWRITE",
          "838:     )",
          "839:   );",
          "",
          "[Added Lines]",
          "329:       \"The parent window for certificate verification dialogs\",",
          "",
          "---------------"
        ],
        "libinfgtk/inf-gtk-certificate-manager.h||libinfgtk/inf-gtk-certificate-manager.h": [
          "File: libinfgtk/inf-gtk-certificate-manager.h -> libinfgtk/inf-gtk-certificate-manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #ifndef __INF_GTK_CERTIFICATE_MANAGER_H__",
          "21: #define __INF_GTK_CERTIFICATE_MANAGER_H__",
          "25: #include <gtk/gtk.h>",
          "",
          "[Removed Lines]",
          "23: #include <libinfinity/common/inf-xmpp-manager.h>",
          "",
          "[Added Lines]",
          "23: #include <libinfinity/common/inf-certificate-verify.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: typedef struct _InfGtkCertificateManagerClass InfGtkCertificateManagerClass;",
          "41: struct _InfGtkCertificateManagerClass {",
          "43: };",
          "45: struct _InfGtkCertificateManager {",
          "47: };",
          "49: GType",
          "",
          "[Removed Lines]",
          "42:   GObjectClass parent_class;",
          "46:   GObject parent;",
          "",
          "[Added Lines]",
          "42:   InfCertificateVerifyClass parent_class;",
          "46:   InfCertificateVerify parent;",
          "",
          "---------------"
        ],
        "libinfgtk/resources/ui/infgtkcertificatedialog.ui||libinfgtk/resources/ui/infgtkcertificatedialog.ui": [
          "File: libinfgtk/resources/ui/infgtkcertificatedialog.ui -> libinfgtk/resources/ui/infgtkcertificatedialog.ui",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                     <property name=\"visible\">True</property>",
          "69:                     <property name=\"can_focus\">False</property>",
          "70:                     <property name=\"margin_bottom\">12</property>",
          "73:                     <property name=\"wrap\">True</property>",
          "74:                     <property name=\"max_width_chars\">60</property>",
          "75:                     <attributes>",
          "",
          "[Removed Lines]",
          "71:                     <property name=\"xalign\">0</property>",
          "72:                     <property name=\"yalign\">0</property>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:                   <object class=\"GtkLabel\" id=\"info\">",
          "88:                     <property name=\"visible\">True</property>",
          "89:                     <property name=\"can_focus\">False</property>",
          "92:                     <property name=\"selectable\">True</property>",
          "93:                     <property name=\"wrap\">True</property>",
          "95:                   </object>",
          "96:                   <packing>",
          "97:                     <property name=\"expand\">False</property>",
          "",
          "[Removed Lines]",
          "90:                     <property name=\"xalign\">0</property>",
          "91:                     <property name=\"yalign\">0</property>",
          "94:                      <property name=\"max_width_chars\">75</property>",
          "",
          "[Added Lines]",
          "90:                     <property name=\"max_width_chars\">75</property>",
          "",
          "---------------"
        ],
        "libinfinity/Makefile.am||libinfinity/Makefile.am": [
          "File: libinfinity/Makefile.am -> libinfinity/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  common/inf-buffer.h \\",
          "43:  common/inf-certificate-chain.h \\",
          "44:  common/inf-certificate-credentials.h \\",
          "45:  common/inf-cert-util.h \\",
          "46:  common/inf-chat-buffer.h \\",
          "47:  common/inf-chat-session.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:  common/inf-certificate-verify.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:  common/inf-buffer.c \\",
          "143:  common/inf-certificate-chain.c \\",
          "144:  common/inf-certificate-credentials.c \\",
          "145:  common/inf-cert-util.c \\",
          "146:  common/inf-chat-buffer.c \\",
          "147:  common/inf-chat-session.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:  common/inf-certificate-verify.c \\",
          "",
          "---------------"
        ],
        "libinfinity/common/inf-certificate-verify.c||libinfinity/common/inf-certificate-verify.c": [
          "File: libinfinity/common/inf-certificate-verify.c -> libinfinity/common/inf-certificate-verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include <libinfinity/common/inf-certificate-verify.h>",
          "61: #include <libinfinity/common/inf-cert-util.h>",
          "62: #include <libinfinity/common/inf-file-util.h>",
          "63: #include <libinfinity/common/inf-xml-connection.h>",
          "64: #include <libinfinity/common/inf-error.h>",
          "65: #include <libinfinity/inf-define-enum.h>",
          "66: #include <libinfinity/inf-signals.h>",
          "67: #include <libinfinity/inf-i18n.h>",
          "69: #include <gnutls/x509.h>",
          "73: static const GFlagsValue inf_certificate_verify_flags_values[] = {",
          "74:   {",
          "75:     INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH,",
          "76:     \"INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH\",",
          "77:     \"hostname-mismatch\"",
          "78:   }, {",
          "79:     INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN,",
          "80:     \"INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN\",",
          "81:     \"issuer-not-known\"",
          "82:   }, {",
          "83:     INF_CERTIFICATE_VERIFY_NOT_PINNED,",
          "84:     \"INF_CERTIFICATE_VERIFY_NOT_PINNED\",",
          "85:     \"not-pinned\"",
          "86:   }, {",
          "87:     0,",
          "88:     NULL,",
          "89:     NULL",
          "90:   }",
          "91: };",
          "93: typedef struct _InfCertificateVerifyQuery InfCertificateVerifyQuery;",
          "94: struct _InfCertificateVerifyQuery {",
          "95:   InfCertificateVerify* verify;",
          "96:   GHashTable* known_hosts;",
          "97:   InfXmppConnection* connection;",
          "98:   InfCertificateChain* certificate_chain;",
          "99: };",
          "101: typedef struct _InfCertificateVerifyPrivate InfCertificateVerifyPrivate;",
          "102: struct _InfCertificateVerifyPrivate {",
          "103:   InfXmppManager* xmpp_manager;",
          "104:   gchar* known_hosts_filename;",
          "105:   GSList* queries;",
          "106: };",
          "108: enum {",
          "109:   PROP_0,",
          "111:   PROP_XMPP_MANAGER,",
          "112:   PROP_KNOWN_HOSTS_FILE",
          "113: };",
          "115: enum {",
          "116:   CHECK_CERTIFICATE,",
          "117:   CHECK_CANCELLED,",
          "119:   LAST_SIGNAL",
          "120: };",
          "122: static guint certificate_verify_signals[LAST_SIGNAL];",
          "124: #define INF_CERTIFICATE_VERIFY_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), INF_TYPE_CERTIFICATE_VERIFY, InfCertificateVerifyPrivate))",
          "126: INF_DEFINE_FLAGS_TYPE(InfCertificateVerifyFlags, inf_certificate_verify_flags, inf_certificate_verify_flags_values)",
          "127: G_DEFINE_TYPE_WITH_CODE(InfCertificateVerify, inf_certificate_verify, G_TYPE_OBJECT,",
          "128:   G_ADD_PRIVATE(InfCertificateVerify))",
          "130: static InfCertificateVerifyQuery*",
          "131: inf_certificate_verify_find_query(InfCertificateVerify* verify,",
          "132:                                   InfXmppConnection* connection)",
          "133: {",
          "134:   InfCertificateVerifyPrivate* priv;",
          "135:   GSList* item;",
          "136:   InfCertificateVerifyQuery* query;",
          "138:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "139:   for(item = priv->queries; item != NULL; item == item->next)",
          "140:   {",
          "141:     query = (InfCertificateVerifyQuery*)item->data;",
          "142:     if(query->connection == connection)",
          "143:       return query;",
          "144:   }",
          "146:   return NULL;",
          "147: }",
          "149: static void",
          "150: inf_certificate_verify_notify_status_cb(GObject* object,",
          "151:                                         GParamSpec* pspec,",
          "152:                                         gpointer user_data);",
          "154: static void",
          "155: inf_certificate_verify_query_free(InfCertificateVerifyQuery* query,",
          "156:                                   gboolean emit_cancelled)",
          "157: {",
          "158:   InfCertificateVerify* verify;",
          "159:   InfXmppConnection* connection;",
          "161:   verify = query->verify;",
          "163:   inf_signal_handlers_disconnect_by_func(",
          "164:     G_OBJECT(query->connection),",
          "165:     G_CALLBACK(inf_certificate_verify_notify_status_cb),",
          "166:     query",
          "167:   );",
          "169:   connection = query->connection;",
          "170:   inf_certificate_chain_unref(query->certificate_chain);",
          "171:   g_hash_table_unref(query->known_hosts);",
          "172:   g_slice_free(InfCertificateVerifyQuery, query);",
          "174:   if(emit_cancelled)",
          "175:   {",
          "176:     g_signal_emit(",
          "177:       verify,",
          "178:       certificate_verify_signals[CHECK_CANCELLED],",
          "179:       0,",
          "180:       connection",
          "181:     );",
          "182:   }",
          "184:   g_object_unref(connection);",
          "185: }",
          "187: static gboolean",
          "188: inf_certificate_verify_compare_fingerprint(gnutls_x509_crt_t cert1,",
          "189:                                            gnutls_x509_crt_t cert2,",
          "190:                                            GError** error)",
          "191: {",
          "192:   static const unsigned int SHA256_DIGEST_SIZE = 32;",
          "194:   size_t size;",
          "195:   guchar cert1_fingerprint[SHA256_DIGEST_SIZE];",
          "196:   guchar cert2_fingerprint[SHA256_DIGEST_SIZE];",
          "198:   int ret;",
          "199:   int cmp;",
          "201:   size = SHA256_DIGEST_SIZE;",
          "203:   ret = gnutls_x509_crt_get_fingerprint(",
          "204:     cert1,",
          "205:     GNUTLS_DIG_SHA256,",
          "206:     cert1_fingerprint,",
          "207:     &size",
          "208:   );",
          "210:   if(ret == GNUTLS_E_SUCCESS)",
          "211:   {",
          "212:     g_assert(size == SHA256_DIGEST_SIZE);",
          "214:     ret = gnutls_x509_crt_get_fingerprint(",
          "215:       cert2,",
          "216:       GNUTLS_DIG_SHA256,",
          "217:       cert2_fingerprint,",
          "218:       &size",
          "219:     );",
          "220:   }",
          "222:   if(ret != GNUTLS_E_SUCCESS)",
          "223:   {",
          "224:     inf_gnutls_set_error(error, ret);",
          "225:     return FALSE;",
          "226:   }",
          "228:   cmp = memcmp(cert1_fingerprint, cert2_fingerprint, SHA256_DIGEST_SIZE);",
          "229:   if(cmp != 0) return FALSE;",
          "231:   return TRUE;",
          "232: }",
          "234: static void",
          "235: inf_certificate_verify_set_known_hosts(InfCertificateVerify* verify,",
          "236:                                        const gchar* known_hosts_filename)",
          "237: {",
          "238:   InfCertificateVerifyPrivate* priv;",
          "239:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "243:   g_assert(priv->queries == NULL);",
          "245:   g_free(priv->known_hosts_filename);",
          "246:   priv->known_hosts_filename = g_strdup(known_hosts_filename);",
          "247: }",
          "249: static GHashTable*",
          "250: inf_certificate_verify_ref_known_hosts(InfCertificateVerify* verify,",
          "251:                                        GError** error)",
          "252: {",
          "253:   InfCertificateVerifyPrivate* priv;",
          "254:   InfCertificateVerifyQuery* query;",
          "256:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "257:   if(priv->queries != NULL)",
          "258:   {",
          "259:     query = (InfCertificateVerifyQuery*)priv->queries->data;",
          "260:     g_hash_table_ref(query->known_hosts);",
          "261:     return query->known_hosts;",
          "262:   }",
          "263:   else",
          "264:   {",
          "265:     return inf_cert_util_read_certificate_map(",
          "266:       priv->known_hosts_filename,",
          "267:       error",
          "268:     );",
          "269:   }",
          "270: }",
          "272: static gboolean",
          "273: inf_certificate_verify_write_known_hosts(InfCertificateVerify* verify,",
          "274:                                          GHashTable* table,",
          "275:                                          GError** error)",
          "276: {",
          "277:   InfCertificateVerifyPrivate* priv;",
          "278:   gchar* dirname;",
          "280:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "292:   dirname = g_path_get_dirname(priv->known_hosts_filename);",
          "293:   if(!inf_file_util_create_directory(dirname, 0755, error))",
          "294:   {",
          "295:     g_free(dirname);",
          "296:     return FALSE;",
          "297:   }",
          "299:   g_free(dirname);",
          "301:   return inf_cert_util_write_certificate_map(",
          "302:     table,",
          "303:     priv->known_hosts_filename,",
          "304:     error",
          "305:   );",
          "306: }",
          "308: static void",
          "309: inf_certificate_verify_write_known_hosts_with_warning(",
          "310:   InfCertificateVerify* verify,",
          "311:   GHashTable* table)",
          "312: {",
          "313:   InfCertificateVerifyPrivate* priv;",
          "314:   GError* error;",
          "315:   gboolean result;",
          "317:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "318:   error = NULL;",
          "320:   result = inf_certificate_verify_write_known_hosts(verify, table, &error);",
          "322:   if(error != NULL)",
          "323:   {",
          "324:     g_warning(",
          "325:       _(\"Failed to write file with known hosts \\\"%s\\\": %s\"),",
          "326:       priv->known_hosts_filename,",
          "327:       error->message",
          "328:     );",
          "330:     g_error_free(error);",
          "331:   }",
          "332: }",
          "334: static void",
          "335: inf_certificate_verify_notify_status_cb(GObject* object,",
          "336:                                         GParamSpec* pspec,",
          "337:                                         gpointer user_data)",
          "338: {",
          "339:   InfCertificateVerifyQuery* query;",
          "340:   InfCertificateVerifyPrivate* priv;",
          "341:   InfXmppConnection* connection;",
          "342:   InfXmlConnectionStatus status;",
          "344:   query = (InfCertificateVerifyQuery*)user_data;",
          "345:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(query->verify);",
          "346:   connection = INF_XMPP_CONNECTION(object);",
          "348:   g_object_get(G_OBJECT(connection), \"status\", &status, NULL);",
          "350:   if(status == INF_XML_CONNECTION_CLOSING ||",
          "351:      status == INF_XML_CONNECTION_CLOSED)",
          "352:   {",
          "353:     priv->queries = g_slist_remove(priv->queries, query);",
          "354:     inf_certificate_verify_query_free(query, TRUE);",
          "355:   }",
          "356: }",
          "358: static void",
          "359: inf_certificate_verify_certificate_func(InfXmppConnection* connection,",
          "360:                                         gnutls_session_t session,",
          "361:                                         InfCertificateChain* chain,",
          "362:                                         gpointer user_data)",
          "363: {",
          "364:   InfCertificateVerify* verify;",
          "365:   InfCertificateVerifyPrivate* priv;",
          "367:   InfCertificateVerifyFlags flags;",
          "368:   gnutls_x509_crt_t presented_cert;",
          "369:   gnutls_x509_crt_t known_cert;",
          "370:   gchar* hostname;",
          "372:   gboolean match_hostname;",
          "373:   gboolean issuer_known;",
          "374:   gnutls_x509_crt_t root_cert;",
          "376:   int ret;",
          "377:   unsigned int verify_result;",
          "378:   GHashTable* table;",
          "379:   gboolean cert_equal;",
          "380:   time_t expiration_time;",
          "382:   InfCertificateVerifyQuery* query;",
          "383:   GError* error;",
          "385:   verify = INF_CERTIFICATE_VERIFY(user_data);",
          "386:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "388:   g_object_get(G_OBJECT(connection), \"remote-hostname\", &hostname, NULL);",
          "389:   presented_cert = inf_certificate_chain_get_own_certificate(chain);",
          "391:   match_hostname = gnutls_x509_crt_check_hostname(presented_cert, hostname);",
          "394:   ret = gnutls_certificate_verify_peers2(session, &verify_result);",
          "395:   error = NULL;",
          "397:   if(ret != GNUTLS_E_SUCCESS)",
          "398:     inf_gnutls_set_error(&error, ret);",
          "402:   if(error == NULL)",
          "403:   {",
          "404:     issuer_known = TRUE;",
          "405:     if(verify_result & GNUTLS_CERT_SIGNER_NOT_FOUND)",
          "406:     {",
          "407:       issuer_known = FALSE;",
          "417:       root_cert = inf_certificate_chain_get_root_certificate(chain);",
          "419:       ret = gnutls_x509_crt_list_verify(",
          "420:         inf_certificate_chain_get_raw(chain),",
          "421:         inf_certificate_chain_get_n_certificates(chain),",
          "422:         &root_cert,",
          "423:         1,",
          "424:         NULL,",
          "425:         0,",
          "426:         GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT,",
          "427:         &verify_result",
          "428:       );",
          "430:       if(ret != GNUTLS_E_SUCCESS)",
          "431:         inf_gnutls_set_error(&error, ret);",
          "432:     }",
          "434:     if(error == NULL)",
          "435:       if(verify_result & GNUTLS_CERT_INVALID)",
          "436:         inf_gnutls_certificate_verification_set_error(&error, verify_result);",
          "437:   }",
          "442:   table = NULL;",
          "443:   if(error == NULL)",
          "444:   {",
          "445:     known_cert = NULL;",
          "446:     if(!match_hostname || !issuer_known)",
          "447:     {",
          "452:       table = inf_certificate_verify_ref_known_hosts(verify, &error);",
          "453:       if(table != NULL)",
          "454:         known_cert = g_hash_table_lookup(table, hostname);",
          "455:     }",
          "456:     else",
          "457:     {",
          "461:       table = inf_certificate_verify_ref_known_hosts(verify, NULL);",
          "462:     }",
          "463:   }",
          "468:   flags = 0;",
          "469:   if(error == NULL)",
          "470:   {",
          "471:     if(known_cert != NULL)",
          "472:     {",
          "473:       cert_equal = inf_certificate_verify_compare_fingerprint(",
          "474:         known_cert,",
          "475:         presented_cert,",
          "476:         &error",
          "477:       );",
          "479:       if(error == NULL && cert_equal == FALSE)",
          "480:       {",
          "481:         if(!match_hostname)",
          "482:           flags |= INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH;",
          "483:         if(!issuer_known)",
          "484:           flags |= INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN;",
          "486:         flags |= INF_CERTIFICATE_VERIFY_NOT_PINNED;",
          "487:       }",
          "488:     }",
          "489:     else",
          "490:     {",
          "491:       if(!match_hostname)",
          "492:         flags |= INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH;",
          "493:       if(!issuer_known)",
          "494:         flags |= INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN;",
          "495:     }",
          "496:   }",
          "500:   if(error == NULL)",
          "501:   {",
          "502:     if(flags == 0)",
          "503:     {",
          "504:       if(match_hostname && issuer_known)",
          "505:       {",
          "508:         if(table != NULL && g_hash_table_remove(table, hostname) == TRUE)",
          "509:         {",
          "510:           inf_certificate_verify_write_known_hosts_with_warning(",
          "511:             verify,",
          "512:             table",
          "513:           );",
          "514:         }",
          "515:       }",
          "517:       inf_xmpp_connection_certificate_verify_continue(connection);",
          "518:     }",
          "519:     else",
          "520:     {",
          "521:       query = g_slice_new(InfCertificateVerifyQuery);",
          "522:       query->verify = verify;",
          "523:       query->known_hosts = table;",
          "524:       query->connection = connection;",
          "525:       query->certificate_chain = chain;",
          "527:       table = NULL;",
          "529:       g_object_ref(query->connection);",
          "530:       inf_certificate_chain_ref(chain);",
          "531:       priv->queries = g_slist_prepend(priv->queries, query);",
          "533:       g_signal_connect(",
          "534:         G_OBJECT(connection),",
          "535:         \"notify::status\",",
          "536:         G_CALLBACK(inf_certificate_verify_notify_status_cb),",
          "537:         query",
          "538:       );",
          "540:       g_signal_emit(",
          "541:         G_OBJECT(verify),",
          "542:         certificate_verify_signals[CHECK_CERTIFICATE],",
          "543:         0,",
          "544:         connection,",
          "545:         chain,",
          "546:         known_cert,",
          "547:         flags",
          "548:       );",
          "549:     }",
          "550:   }",
          "551:   else",
          "552:   {",
          "553:     inf_xmpp_connection_certificate_verify_cancel(connection, error);",
          "554:     g_error_free(error);",
          "555:   }",
          "557:   if(table != NULL) g_hash_table_unref(table);",
          "558:   g_free(hostname);",
          "559: }",
          "561: static void",
          "562: inf_certificate_verify_connection_added_cb(InfXmppManager* manager,",
          "563:                                            InfXmppConnection* connection,",
          "564:                                            gpointer user_data)",
          "565: {",
          "566:   InfXmppConnectionSite site;",
          "567:   g_object_get(G_OBJECT(connection), \"site\", &site, NULL);",
          "569:   if(site == INF_XMPP_CONNECTION_CLIENT)",
          "570:   {",
          "571:     inf_xmpp_connection_set_certificate_callback(",
          "572:       connection,",
          "574:       inf_certificate_verify_certificate_func,",
          "575:       user_data,",
          "576:       NULL",
          "577:     );",
          "578:   }",
          "579: }",
          "581: static void",
          "582: inf_certificate_verify_init(InfCertificateVerify* verify)",
          "583: {",
          "584:   InfCertificateVerifyPrivate* priv;",
          "585:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "587:   priv->xmpp_manager = NULL;",
          "588:   priv->known_hosts_filename = NULL;",
          "589: }",
          "591: static void",
          "592: inf_certificate_verify_dispose(GObject* object)",
          "593: {",
          "594:   InfCertificateVerify* verify;",
          "595:   InfCertificateVerifyPrivate* priv;",
          "596:   GSList* item;",
          "598:   verify = INF_CERTIFICATE_VERIFY(object);",
          "599:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "601:   if(priv->xmpp_manager != NULL)",
          "602:   {",
          "603:     g_object_unref(priv->xmpp_manager);",
          "604:     priv->xmpp_manager = NULL;",
          "605:   }",
          "607:   for(item = priv->queries; item != NULL; item = g_slist_next(item))",
          "608:   {",
          "609:     inf_certificate_verify_query_free(",
          "610:       (InfCertificateVerifyQuery*)item->data,",
          "611:       TRUE",
          "612:     );",
          "613:   }",
          "615:   g_slist_free(priv->queries);",
          "616:   priv->queries = NULL;",
          "618:   G_OBJECT_CLASS(inf_certificate_verify_parent_class)->dispose(object);",
          "619: }",
          "621: static void",
          "622: inf_certificate_verify_finalize(GObject* object)",
          "623: {",
          "624:   InfCertificateVerify* verify;",
          "625:   InfCertificateVerifyPrivate* priv;",
          "627:   verify = INF_CERTIFICATE_VERIFY(object);",
          "628:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "630:   inf_certificate_verify_set_known_hosts(verify, NULL);",
          "631:   g_assert(priv->known_hosts_filename == NULL);",
          "633:   G_OBJECT_CLASS(inf_certificate_verify_parent_class)->finalize(object);",
          "634: }",
          "636: static void",
          "637: inf_certificate_verify_set_property(GObject* object,",
          "638:                                     guint prop_id,",
          "639:                                     const GValue* value,",
          "640:                                     GParamSpec* pspec)",
          "641: {",
          "642:   InfCertificateVerify* verify;",
          "643:   InfCertificateVerifyPrivate* priv;",
          "645:   verify = INF_CERTIFICATE_VERIFY(object);",
          "646:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "648:   switch(prop_id)",
          "649:   {",
          "650:   case PROP_XMPP_MANAGER:",
          "652:     priv->xmpp_manager = INF_XMPP_MANAGER(g_value_dup_object(value));",
          "654:     g_signal_connect(",
          "655:       G_OBJECT(priv->xmpp_manager),",
          "656:       \"connection-added\",",
          "657:       G_CALLBACK(inf_certificate_verify_connection_added_cb),",
          "658:       verify",
          "659:     );",
          "661:     break;",
          "662:   case PROP_KNOWN_HOSTS_FILE:",
          "663:     inf_certificate_verify_set_known_hosts(",
          "664:       verify,",
          "665:       g_value_get_string(value)",
          "666:     );",
          "668:     break;",
          "669:   default:",
          "670:     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);",
          "671:     break;",
          "672:   }",
          "673: }",
          "675: static void",
          "676: inf_certificate_verify_get_property(GObject* object,",
          "677:                                     guint prop_id,",
          "678:                                     GValue* value,",
          "679:                                     GParamSpec* pspec)",
          "680: {",
          "681:   InfCertificateVerify* verify;",
          "682:   InfCertificateVerifyPrivate* priv;",
          "684:   verify = INF_CERTIFICATE_VERIFY(object);",
          "685:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(verify);",
          "687:   switch(prop_id)",
          "688:   {",
          "689:   case PROP_XMPP_MANAGER:",
          "690:     g_value_set_object(value, G_OBJECT(priv->xmpp_manager));",
          "691:     break;",
          "692:   case PROP_KNOWN_HOSTS_FILE:",
          "693:     g_value_set_string(value, priv->known_hosts_filename);",
          "694:     break;",
          "695:   default:",
          "696:     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);",
          "697:     break;",
          "698:   }",
          "699: }",
          "705: static void",
          "706: inf_certificate_verify_class_init(",
          "707:   InfCertificateVerifyClass* certificate_verify_class)",
          "708: {",
          "709:   GObjectClass* object_class;",
          "710:   object_class = G_OBJECT_CLASS(certificate_verify_class);",
          "712:   object_class->dispose = inf_certificate_verify_dispose;",
          "713:   object_class->finalize = inf_certificate_verify_finalize;",
          "714:   object_class->set_property = inf_certificate_verify_set_property;",
          "715:   object_class->get_property = inf_certificate_verify_get_property;",
          "743:   certificate_verify_signals[CHECK_CERTIFICATE] = g_signal_new(",
          "744:     \"check-certificate\",",
          "745:     INF_TYPE_CERTIFICATE_VERIFY,",
          "746:     G_SIGNAL_RUN_LAST,",
          "747:     G_STRUCT_OFFSET(InfCertificateVerifyClass, check_certificate),",
          "748:     NULL, NULL,",
          "749:     NULL,",
          "750:     G_TYPE_NONE,",
          "751:     4,",
          "752:     INF_TYPE_XMPP_CONNECTION,",
          "753:     INF_TYPE_CERTIFICATE_CHAIN,",
          "754:     G_TYPE_POINTER,",
          "755:     INF_TYPE_CERTIFICATE_VERIFY_FLAGS",
          "756:   );",
          "773:   certificate_verify_signals[CHECK_CANCELLED] = g_signal_new(",
          "774:     \"check-cancelled\",",
          "775:     INF_TYPE_CERTIFICATE_VERIFY,",
          "776:     G_SIGNAL_RUN_LAST,",
          "777:     G_STRUCT_OFFSET(InfCertificateVerifyClass, check_cancelled),",
          "778:     NULL, NULL,",
          "779:     NULL,",
          "780:     G_TYPE_NONE,",
          "781:     1,",
          "782:     INF_TYPE_XMPP_CONNECTION",
          "783:   );",
          "785:   g_object_class_install_property(",
          "786:     object_class,",
          "787:     PROP_XMPP_MANAGER,",
          "788:     g_param_spec_object(",
          "789:       \"xmpp-manager\",",
          "790:       \"XMPP manager\",",
          "791:       \"The XMPP manager of registered connections\",",
          "792:       INF_TYPE_XMPP_MANAGER,",
          "793:       G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY",
          "794:     )",
          "795:   );",
          "797:   g_object_class_install_property(",
          "798:     object_class,",
          "799:     PROP_KNOWN_HOSTS_FILE,",
          "800:     g_param_spec_string(",
          "801:       \"known-hosts-file\",",
          "802:       \"Known hosts file\",",
          "803:       \"File containing certificates of known hosts\",",
          "804:       NULL,",
          "805:       G_PARAM_READWRITE",
          "806:     )",
          "807:   );",
          "808: }",
          "832: InfCertificateVerify*",
          "833: inf_certificate_verify_new(InfXmppManager* xmpp_manager,",
          "834:                            const gchar* known_hosts_file)",
          "835: {",
          "836:   GObject* object;",
          "838:   g_return_val_if_fail(INF_IS_XMPP_MANAGER(xmpp_manager), NULL);",
          "840:   object = g_object_new(",
          "841:     INF_TYPE_CERTIFICATE_VERIFY,",
          "842:     \"xmpp-manager\", xmpp_manager,",
          "843:     \"known-hosts-file\", known_hosts_file,",
          "844:     NULL",
          "845:   );",
          "847:   return INF_CERTIFICATE_VERIFY(object);",
          "848: }",
          "860: void",
          "861: inf_certificate_verify_checked(InfCertificateVerify* verify,",
          "862:                                InfXmppConnection* connection,",
          "863:                                gboolean result)",
          "864: {",
          "865:   InfCertificateVerifyQuery* query;",
          "866:   InfCertificateVerifyPrivate* priv;",
          "868:   gchar* hostname;",
          "869:   gnutls_x509_crt_t cert;",
          "870:   gnutls_x509_crt_t known_cert;",
          "871:   GError* error;",
          "872:   gboolean cert_equal;",
          "874:   g_return_if_fail(INF_IS_CERTIFICATE_VERIFY(verify));",
          "875:   g_return_if_fail(INF_IS_XMPP_CONNECTION(connection));",
          "877:   query = inf_certificate_verify_find_query(verify, connection);",
          "878:   g_return_if_fail(query != NULL);",
          "880:   priv = INF_CERTIFICATE_VERIFY_PRIVATE(query->verify);",
          "882:   g_object_ref(connection);",
          "884:   if(result == TRUE)",
          "885:   {",
          "886:     g_object_get(",
          "887:       G_OBJECT(query->connection),",
          "888:       \"remote-hostname\", &hostname,",
          "889:       NULL",
          "890:     );",
          "894:     cert =",
          "895:       inf_certificate_chain_get_own_certificate(query->certificate_chain);",
          "896:     known_cert = g_hash_table_lookup(query->known_hosts, hostname);",
          "898:     error = NULL;",
          "899:     cert_equal = FALSE;",
          "900:     if(known_cert != NULL)",
          "901:     {",
          "902:       cert_equal = inf_certificate_verify_compare_fingerprint(",
          "903:         cert,",
          "904:         known_cert,",
          "905:         &error",
          "906:       );",
          "907:     }",
          "909:     if(error != NULL)",
          "910:     {",
          "911:       g_warning(",
          "912:         _(\"Failed to add certificate to list of pinned certificates: %s\"),",
          "913:         error->message",
          "914:       );",
          "915:     }",
          "916:     else if(!cert_equal)",
          "917:     {",
          "918:       cert = inf_cert_util_copy_certificate(cert, &error);",
          "919:       g_hash_table_insert(query->known_hosts, hostname, cert);",
          "921:       inf_certificate_verify_write_known_hosts_with_warning(",
          "922:         query->verify,",
          "923:         query->known_hosts",
          "924:       );",
          "925:     }",
          "926:     else",
          "927:     {",
          "928:       g_free(hostname);",
          "929:     }",
          "930:   }",
          "932:   priv->queries = g_slist_remove(priv->queries, query);",
          "933:   inf_certificate_verify_query_free(query, FALSE);",
          "935:   if(result == TRUE)",
          "936:     inf_xmpp_connection_certificate_verify_continue(connection);",
          "937:   else",
          "938:     inf_xmpp_connection_certificate_verify_cancel(connection, NULL);",
          "940:   g_object_unref(connection);",
          "941: }",
          "",
          "---------------"
        ],
        "libinfinity/common/inf-certificate-verify.h||libinfinity/common/inf-certificate-verify.h": [
          "File: libinfinity/common/inf-certificate-verify.h -> libinfinity/common/inf-certificate-verify.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __INF_CERTIFICATE_VERIFY_H__",
          "20: #define __INF_CERTIFICATE_VERIFY_H__",
          "22: #include <libinfinity/common/inf-xmpp-connection.h>",
          "23: #include <libinfinity/common/inf-xmpp-manager.h>",
          "25: #include <glib-object.h>",
          "27: G_BEGIN_DECLS",
          "29: #define INF_TYPE_CERTIFICATE_VERIFY                 (inf_certificate_verify_get_type())",
          "30: #define INF_CERTIFICATE_VERIFY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST((obj), INF_TYPE_CERTIFICATE_VERIFY, InfCertificateVerify))",
          "31: #define INF_CERTIFICATE_VERIFY_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST((klass), INF_TYPE_CERTIFICATE_VERIFY, InfCertificateVerifyClass))",
          "32: #define INF_IS_CERTIFICATE_VERIFY(obj)              (G_TYPE_CHECK_INSTANCE_TYPE((obj), INF_TYPE_CERTIFICATE_VERIFY))",
          "33: #define INF_IS_CERTIFICATE_VERIFY_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE((klass), INF_TYPE_CERTIFICATE_VERIFY))",
          "34: #define INF_CERTIFICATE_VERIFY_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS((obj), INF_TYPE_CERTIFICATE_VERIFY, InfCertificateVerifyClass))",
          "36: #define INF_TYPE_CERTIFICATE_VERIFY_FLAGS           (inf_certificate_verify_flags_get_type())",
          "38: typedef struct _InfCertificateVerify InfCertificateVerify;",
          "39: typedef struct _InfCertificateVerifyClass InfCertificateVerifyClass;",
          "52: typedef enum _InfCertificateVerifyFlags {",
          "53:   INF_CERTIFICATE_VERIFY_HOSTNAME_MISMATCH  = 1 << 0,",
          "54:   INF_CERTIFICATE_VERIFY_ISSUER_NOT_KNOWN   = 1 << 1,",
          "55:   INF_CERTIFICATE_VERIFY_NOT_PINNED         = 1 << 2",
          "56: } InfCertificateVerifyFlags;",
          "65: struct _InfCertificateVerifyClass {",
          "67:   GObjectClass parent_class;",
          "70:   void (*check_certificate)(InfCertificateVerify* verify,",
          "71:                             InfXmppConnection* connection,",
          "72:                             InfCertificateChain* certificate_chain,",
          "73:                             gnutls_x509_crt_t pinned_certificate,",
          "74:                             InfCertificateVerifyFlags flags);",
          "76:   void (*check_cancelled)(InfCertificateVerify* verify,",
          "77:                           InfXmppConnection* connection);",
          "78: };",
          "86: struct _InfCertificateVerify {",
          "88:   GObject parent;",
          "89: };",
          "91: GType",
          "92: inf_certificate_verify_flags_get_type(void) G_GNUC_CONST;",
          "94: GType",
          "95: inf_certificate_verify_get_type(void) G_GNUC_CONST;",
          "97: InfCertificateVerify*",
          "98: inf_certificate_verify_new(InfXmppManager* xmpp_manager,",
          "99:                            const gchar* known_hosts_file);",
          "101: void",
          "102: inf_certificate_verify_checked(InfCertificateVerify* verify,",
          "103:                                InfXmppConnection* connection,",
          "104:                                gboolean result);",
          "106: G_END_DECLS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06fa9455c687a67e4fc2c2f201817c64c73a3fcf",
      "candidate_info": {
        "commit_hash": "06fa9455c687a67e4fc2c2f201817c64c73a3fcf",
        "repo": "gobby/libinfinity",
        "commit_url": "https://github.com/gobby/libinfinity/commit/06fa9455c687a67e4fc2c2f201817c64c73a3fcf",
        "files": [
          "libinfgtk/inf-gtk-certificate-manager.c"
        ],
        "message": "Fix expired certificate validation (gobby #61)",
        "before_after_code_files": [
          "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
          ],
          "candidate": [
            "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c"
          ]
        }
      },
      "candidate_diff": {
        "libinfgtk/inf-gtk-certificate-manager.c||libinfgtk/inf-gtk-certificate-manager.c": [
          "File: libinfgtk/inf-gtk-certificate-manager.c -> libinfgtk/inf-gtk-certificate-manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:       if(ret != GNUTLS_E_SUCCESS)",
          "712:         inf_gnutls_set_error(&error, ret);",
          "715:     }",
          "716:   }",
          "",
          "[Removed Lines]",
          "713:       else if(verify & GNUTLS_CERT_INVALID)",
          "714:         inf_gnutls_certificate_verification_set_error(&error, verify);",
          "",
          "[Added Lines]",
          "715:     if(error == NULL)",
          "716:       if(verify & GNUTLS_CERT_INVALID)",
          "717:         inf_gnutls_certificate_verification_set_error(&error, verify);",
          "",
          "---------------"
        ]
      }
    }
  ]
}