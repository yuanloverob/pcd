{
  "cve_id": "CVE-2013-4136",
  "cve_desc": "ext/common/ServerInstanceDir.h in Phusion Passenger gem before 4.0.6 for Ruby allows local users to gain privileges or possibly change the ownership of arbitrary directories via a symlink attack on a directory with a predictable name in /tmp/.",
  "repo": "phusion/passenger",
  "patch_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
  "patch_info": {
    "commit_hash": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
    "repo": "phusion/passenger",
    "commit_url": "https://github.com/phusion/passenger/commit/5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
    "files": [
      "NEWS",
      "ext/common/ServerInstanceDir.h",
      "test/cxx/ServerInstanceDirTest.cpp"
    ],
    "message": "If the server instance directory already exists, it is now removed first in order get correct directory permissions. If the directory still exists after removal, Phusion Passenger aborts to avoid writing to a directory with unexpected permissions. Fixes issue #910.",
    "before_after_code_files": [
      "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
      "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp"
    ]
  },
  "patch_diff": {
    "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
      "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <oxt/backtrace.hpp>",
      "32: #include <sys/types.h>",
      "33: #include <dirent.h>",
      "34: #include <unistd.h>",
      "35: #include <pwd.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <sys/stat.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "218:  }",
      "220:  bool isDirectory(const string &dir, struct dirent *entry) const {",
      "",
      "[Removed Lines]",
      "217:   makeDirTree(path, \"u=rwx,g=rx,o=rx\");",
      "",
      "[Added Lines]",
      "218:   if (owner) {",
      "219:    switch (getFileType(path)) {",
      "220:    case FT_NONEXISTANT:",
      "221:     createDirectory(path);",
      "222:     break;",
      "223:    case FT_DIRECTORY:",
      "224:     removeDirTree(path);",
      "225:     createDirectory(path);",
      "226:     break;",
      "227:    default:",
      "228:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
      "229:    }",
      "230:   } else if (getFileType(path) != FT_DIRECTORY) {",
      "231:    throw RuntimeException(\"Server instance directory '\" + path +",
      "232:     \"' does not exist\");",
      "233:   }",
      "234:  }",
      "236:  void createDirectory(const string &path) const {",
      "240:   if (mkdir(path.c_str(), parseModeString(\"u=rwx,g=rx,o=rx\")) == -1) {",
      "241:    int e = errno;",
      "242:    throw FileSystemException(\"Cannot create server instance directory '\" +",
      "243:     path + \"'\", e, path);",
      "244:   }",
      "",
      "---------------"
    ],
    "test/cxx/ServerInstanceDirTest.cpp||test/cxx/ServerInstanceDirTest.cpp": [
      "File: test/cxx/ServerInstanceDirTest.cpp -> test/cxx/ServerInstanceDirTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  }",
      "60:  TEST_METHOD(5) {",
      "63:   string path, path2;",
      "64:   {",
      "65:    ServerInstanceDir dir(parentDir + \"/passenger-test.1234\", false);",
      "66:    ServerInstanceDir dir2(parentDir + \"/passenger-test.5678\", false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:   makeDirTree(parentDir + \"/passenger-test.1234\");",
      "65:   makeDirTree(parentDir + \"/passenger-test.5678\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
      "candidate_info": {
        "commit_hash": "94428057c602da3d6d34ef75c78091066ecac5c0",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/94428057c602da3d6d34ef75c78091066ecac5c0",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h"
        ],
        "message": "Fix a symlink-related security vulnerability.\n\nThe fix in commit 34b10878 and contained a small attack time window in\nbetween two filesystem operations. This has been fixed.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  void initialize(const string &path, bool owner) {",
          "195:   TRACE_POINT();",
          "196:   this->path  = path;",
          "197:   this->owner = owner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   struct stat buf;",
          "197:   int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:   if (owner) {",
          "218:     createDirectory(path);",
          "225:    }",
          "227:    throw RuntimeException(\"Server instance directory '\" + path +",
          "228:     \"' does not exist\");",
          "229:   }",
          "",
          "[Removed Lines]",
          "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
          "217:    case FT_NONEXISTANT:",
          "219:     break;",
          "220:    case FT_DIRECTORY:",
          "221:     verifyDirectoryPermissions(path);",
          "222:     break;",
          "223:    default:",
          "224:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "226:   } else if (getFileType(path) != FT_DIRECTORY) {",
          "",
          "[Added Lines]",
          "219:   do {",
          "220:    ret = lstat(path.c_str(), &buf);",
          "221:   } while (ret == -1 && errno == EAGAIN);",
          "223:    if (ret == 0) {",
          "224:     if (S_ISDIR(buf.st_mode)) {",
          "225:      verifyDirectoryPermissions(path, buf);",
          "226:     } else {",
          "227:      throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "228:     }",
          "229:    } else if (errno == ENOENT) {",
          "231:    } else {",
          "232:     int e = errno;",
          "233:     throw FileSystemException(\"Cannot lstat '\" + path + \"'\",",
          "234:      e, path);",
          "236:   } else if (!S_ISDIR(buf.st_mode)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:   TRACE_POINT();",
          "270:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "271:     path + \", but it has wrong permissions\");",
          "272:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
          "",
          "[Removed Lines]",
          "262:  void verifyDirectoryPermissions(const string &path) {",
          "264:   struct stat buf;",
          "266:   if (stat(path.c_str(), &buf) == -1) {",
          "267:    int e = errno;",
          "268:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
          "269:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "",
          "[Added Lines]",
          "272:  void verifyDirectoryPermissions(const string &path, struct stat &buf) {",
          "275:   if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  }",
          "144: }",
          "175: void",
          "176: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
          "177:  gid_t group, bool overwrite)",
          "",
          "[Removed Lines]",
          "146: FileType",
          "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
          "148:  struct stat buf;",
          "149:  int ret;",
          "151:  ret = lstat(filename.c_str(), &buf);",
          "152:  if (ret == 0) {",
          "153:   if (S_ISREG(buf.st_mode)) {",
          "154:    return FT_REGULAR;",
          "155:   } else if (S_ISDIR(buf.st_mode)) {",
          "156:    return FT_DIRECTORY;",
          "157:   } else if (S_ISLNK(buf.st_mode)) {",
          "158:    return FT_SYMLINK;",
          "159:   } else {",
          "160:    return FT_OTHER;",
          "161:   }",
          "162:  } else {",
          "163:   if (errno == ENOENT) {",
          "164:    return FT_NONEXISTANT;",
          "165:   } else {",
          "166:    int e = errno;",
          "167:    string message(\"Cannot lstat '\");",
          "168:    message.append(filename);",
          "169:    message.append(\"'\");",
          "170:    throw FileSystemException(message, e, filename);",
          "171:   }",
          "172:  }",
          "173: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  FT_REGULAR,",
          "67:  FT_DIRECTORY,",
          "71:  FT_OTHER",
          "72: } FileType;",
          "",
          "[Removed Lines]",
          "69:  FT_SYMLINK,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "125:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
      "candidate_info": {
        "commit_hash": "34b1087870c2bf85ebfd72c30b78577e10ab9744",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/34b1087870c2",
        "files": [
          "NEWS",
          "ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp",
          "ext/common/Utils.h"
        ],
        "message": "Fix low-urgency security vulnerability: writing files to arbitrary directory by hijacking temp directories.",
        "before_after_code_files": [
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/Utils.cpp||ext/common/Utils.cpp",
          "ext/common/Utils.h||ext/common/Utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   if (owner) {",
          "217:    case FT_NONEXISTANT:",
          "218:     createDirectory(path);",
          "219:     break;",
          "",
          "[Removed Lines]",
          "216:    switch (getFileType(path)) {",
          "",
          "[Added Lines]",
          "216:    switch (getFileTypeNoFollowSymlinks(path)) {",
          "",
          "---------------"
        ],
        "ext/common/Utils.cpp||ext/common/Utils.cpp": [
          "File: ext/common/Utils.cpp -> ext/common/Utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  }",
          "144: }",
          "146: void",
          "147: createFile(const string &filename, const StaticString &contents, mode_t permissions, uid_t owner,",
          "148:  gid_t group, bool overwrite)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: FileType",
          "147: getFileTypeNoFollowSymlinks(const StaticString &filename) {",
          "148:  struct stat buf;",
          "149:  int ret;",
          "151:  ret = lstat(filename.c_str(), &buf);",
          "152:  if (ret == 0) {",
          "153:   if (S_ISREG(buf.st_mode)) {",
          "154:    return FT_REGULAR;",
          "155:   } else if (S_ISDIR(buf.st_mode)) {",
          "156:    return FT_DIRECTORY;",
          "157:   } else if (S_ISLNK(buf.st_mode)) {",
          "158:    return FT_SYMLINK;",
          "159:   } else {",
          "160:    return FT_OTHER;",
          "161:   }",
          "162:  } else {",
          "163:   if (errno == ENOENT) {",
          "164:    return FT_NONEXISTANT;",
          "165:   } else {",
          "166:    int e = errno;",
          "167:    string message(\"Cannot lstat '\");",
          "168:    message.append(filename);",
          "169:    message.append(\"'\");",
          "170:    throw FileSystemException(message, e, filename);",
          "171:   }",
          "172:  }",
          "173: }",
          "",
          "---------------"
        ],
        "ext/common/Utils.h||ext/common/Utils.h": [
          "File: ext/common/Utils.h -> ext/common/Utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  FT_REGULAR,",
          "67:  FT_DIRECTORY,",
          "69:  FT_OTHER",
          "70: } FileType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:  FT_SYMLINK,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122: FileType getFileType(const StaticString &filename, CachedFileStat *cstat = 0,",
          "123:                      unsigned int throttleRate = 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: FileType getFileTypeNoFollowSymlinks(const StaticString &filename);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
      "candidate_info": {
        "commit_hash": "9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
        "repo": "phusion/passenger",
        "commit_url": "https://github.com/phusion/passenger/commit/9dda49f4a3ebe9bafc48da1bd45799f30ce19566",
        "files": [
          "NEWS",
          "ext/apache2/Hooks.cpp",
          "ext/common/ServerInstanceDir.h",
          "ext/common/agents/LoggingAgent/Main.cpp"
        ],
        "message": "Fixed a problem with graceful web server restarts. This problem was introduced in 4.0.6 during the attempt to fix issue #910.",
        "before_after_code_files": [
          "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp",
          "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h",
          "ext/common/agents/LoggingAgent/Main.cpp||ext/common/agents/LoggingAgent/Main.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ],
          "candidate": [
            "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/apache2/Hooks.cpp||ext/apache2/Hooks.cpp": [
          "File: ext/apache2/Hooks.cpp -> ext/apache2/Hooks.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     if (!connected) {",
          "280:      UPDATE_TRACE_POINT();",
          "282:     }",
          "283:    } else {",
          "284:     throw;",
          "",
          "[Removed Lines]",
          "281:      throw IOException(\"Cannot connect to the helper agent\");",
          "",
          "[Added Lines]",
          "281:      throw IOException(\"Cannot connect to the helper agent at \" +",
          "282:       agentsStarter.getRequestSocketFilename());",
          "",
          "---------------"
        ],
        "ext/common/ServerInstanceDir.h||ext/common/ServerInstanceDir.h": [
          "File: ext/common/ServerInstanceDir.h -> ext/common/ServerInstanceDir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <string>",
          "42: #include <Constants.h>",
          "43: #include <Exceptions.h>",
          "44: #include <Utils.h>",
          "45: #include <Utils/StrIntUtils.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <Logging.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:     createDirectory(path);",
          "222:     break;",
          "223:    case FT_DIRECTORY:",
          "226:     break;",
          "227:    default:",
          "228:     throw RuntimeException(\"'\" + path + \"' already exists, and is not a directory\");",
          "",
          "[Removed Lines]",
          "224:     removeDirTree(path);",
          "225:     createDirectory(path);",
          "",
          "[Added Lines]",
          "234:     verifyDirectoryPermissions(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:    throw FileSystemException(\"Cannot create server instance directory '\" +",
          "243:     path + \"'\", e, path);",
          "244:   }",
          "245:  }",
          "247:  bool isDirectory(const string &dir, struct dirent *entry) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   if (chown(path.c_str(), geteuid(), getegid()) == -1) {",
          "258:    int e = errno;",
          "259:    throw FileSystemException(\"Cannot change the permissions of the server \"",
          "260:     \"instance directory '\" + path + \"'\", e, path);",
          "261:   }",
          "262:  }",
          "269:  void verifyDirectoryPermissions(const string &path) {",
          "270:   TRACE_POINT();",
          "271:   struct stat buf;",
          "273:   if (stat(path.c_str(), &buf) == -1) {",
          "274:    int e = errno;",
          "275:    throw FileSystemException(\"Cannot stat() \" + path, e, path);",
          "276:   } else if (buf.st_mode != (S_IFDIR | parseModeString(\"u=rwx,g=rx,o=rx\"))) {",
          "277:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "278:     path + \", but it has wrong permissions\");",
          "279:   } else if (buf.st_uid != geteuid() || buf.st_gid != getegid()) {",
          "288:    throw RuntimeException(\"Tried to reuse existing server instance directory \" +",
          "289:     path + \", but it has wrong owner and group\");",
          "290:   }",
          "",
          "---------------"
        ],
        "ext/common/agents/LoggingAgent/Main.cpp||ext/common/agents/LoggingAgent/Main.cpp": [
          "File: ext/common/agents/LoggingAgent/Main.cpp -> ext/common/agents/LoggingAgent/Main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:  ev::sig sigtermWatcher(eventLoop);",
          "321:  ev::sig sigquitWatcher(eventLoop);",
          "328:  sigintWatcher.set<&caughtExitSignal>();",
          "329:  sigintWatcher.start(SIGINT);",
          "330:  sigtermWatcher.set<&caughtExitSignal>();",
          "",
          "[Removed Lines]",
          "323:  if (feedbackFdAvailable()) {",
          "324:   feedbackFdWatcher.set<&feedbackFdBecameReadable>();",
          "325:   feedbackFdWatcher.start(FEEDBACK_FD, ev::READ);",
          "326:   writeArrayMessage(FEEDBACK_FD, \"initialized\", NULL);",
          "327:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:  sigquitWatcher.start(SIGQUIT);",
          "335:  P_WARN(\"PassengerLoggingAgent online, listening at \" << socketAddress);",
          "336:  ev_run(eventLoop, 0);",
          "337: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:  if (feedbackFdAvailable()) {",
          "332:   feedbackFdWatcher.set<&feedbackFdBecameReadable>();",
          "333:   feedbackFdWatcher.start(FEEDBACK_FD, ev::READ);",
          "334:   writeArrayMessage(FEEDBACK_FD, \"initialized\", NULL);",
          "335:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}