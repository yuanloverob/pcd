{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "81939dad77001556c527485d31a2d0f4a759033e",
  "patch_info": {
    "commit_hash": "81939dad77001556c527485d31a2d0f4a759033e",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/81939dad77001556c527485d31a2d0f4a759033e",
    "files": [
      "Doc/library/os.rst",
      "Lib/test/test_os.py",
      "Lib/test/test_tempfile.py",
      "Misc/NEWS.d/next/Windows/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Support mkdir(mode=0o700) on Windows (GH-118488)",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1811:         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)",
      "1812:         os.remove(path)",
      "1814:     def tearDown(self):",
      "1815:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "1816:                             'dir4', 'dir5', 'dir6')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "---------------"
    ],
    "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py": [
      "File: Lib/test/test_tempfile.py -> Lib/test/test_tempfile.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import weakref",
      "14: import gc",
      "15: import shutil",
      "16: from unittest import mock",
      "18: import unittest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import subprocess",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "803:         finally:",
      "804:             os.rmdir(dir)",
      "806:     def test_collision_with_existing_file(self):",
      "807:         # mkdtemp tries another name when a file with",
      "808:         # the chosen name already exists",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807:     @unittest.skipUnless(os.name == \"nt\", \"Only on Windows.\")",
      "808:     def test_mode_win32(self):",
      "809:         # Use icacls.exe to extract the users with some level of access",
      "810:         # Main thing we are testing is that the BUILTIN\\Users group has",
      "811:         # no access. The exact ACL is going to vary based on which user",
      "812:         # is running the test.",
      "813:         dir = self.do_create()",
      "814:         try:",
      "815:             out = subprocess.check_output([\"icacls.exe\", dir], encoding=\"oem\").casefold()",
      "816:         finally:",
      "817:             os.rmdir(dir)",
      "819:         dir = dir.casefold()",
      "820:         users = set()",
      "821:         found_user = False",
      "822:         for line in out.strip().splitlines():",
      "823:             acl = None",
      "824:             # First line of result includes our directory",
      "825:             if line.startswith(dir):",
      "826:                 acl = line.removeprefix(dir).strip()",
      "827:             elif line and line[:1].isspace():",
      "828:                 acl = line.strip()",
      "829:             if acl:",
      "830:                 users.add(acl.partition(\":\")[0])",
      "832:         self.assertNotIn(r\"BUILTIN\\Users\".casefold(), users)",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #  include <winioctl.h>",
      "38: #  include <lmcons.h>             // UNLEN",
      "39: #  include \"osdefs.h\"             // SEP",
      "40: #  if defined(MS_WINDOWS_DESKTOP) || defined(MS_WINDOWS_SYSTEM)",
      "41: #    define HAVE_SYMLINK",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #  include <aclapi.h>             // SetEntriesInAcl",
      "41: #  include <sddl.h>               // SDDL_REVISION_1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5539:     return result;",
      "5540: }",
      "5543: os.mkdir",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5544: #ifdef MS_WINDOWS",
      "5547: templates that will probably mostly match common POSIX mode settings.",
      "5548: The _Py_SECURITY_ATTRIBUTE_DATA structure contains temporary data, as",
      "5549: a constructed SECURITY_ATTRIBUTE structure typically refers to memory",
      "5550: that has to be alive while it's being used.",
      "5552: Typical use will look like:",
      "5553:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
      "5554:     struct _Py_SECURITY_ATTRIBUTE_DATA secAttrData;",
      "5555:     int error, error2;",
      "5557:     Py_BEGIN_ALLOW_THREADS",
      "5558:     switch (mode) {",
      "5559:     case 0x1C0: // 0o700",
      "5560:         error = initializeMkdir700SecurityAttributes(&pSecAttr, &secAttrData);",
      "5561:         break;",
      "5562:     ...",
      "5563:     default:",
      "5564:         error = initializeDefaultSecurityAttributes(&pSecAttr, &secAttrData);",
      "5565:         break;",
      "5566:     }",
      "5568:     if (!error) {",
      "5570:     }",
      "5573:     error2 = clearSecurityAttributes(&pSecAttr, &secAttrData);",
      "5574:     if (!error) {",
      "5575:         error = error2;",
      "5576:     }",
      "5577:     Py_END_ALLOW_THREADS",
      "5579:     if (error) {",
      "5580:         PyErr_SetFromWindowsErr(error);",
      "5581:         return NULL;",
      "5582:     }",
      "5585: struct _Py_SECURITY_ATTRIBUTE_DATA {",
      "5586:     SECURITY_ATTRIBUTES securityAttributes;",
      "5587:     PACL acl;",
      "5588:     SECURITY_DESCRIPTOR sd;",
      "5589:     EXPLICIT_ACCESS_W ea[4];",
      "5590: };",
      "5592: static int",
      "5593: initializeDefaultSecurityAttributes(",
      "5594:     PSECURITY_ATTRIBUTES *securityAttributes,",
      "5595:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
      "5596: ) {",
      "5597:     assert(securityAttributes);",
      "5598:     assert(data);",
      "5600:     memset(data, 0, sizeof(*data));",
      "5601:     return 0;",
      "5602: }",
      "5604: static int",
      "5605: initializeMkdir700SecurityAttributes(",
      "5606:     PSECURITY_ATTRIBUTES *securityAttributes,",
      "5607:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
      "5608: ) {",
      "5609:     assert(securityAttributes);",
      "5610:     assert(data);",
      "5612:     memset(data, 0, sizeof(*data));",
      "5614:     if (!InitializeSecurityDescriptor(&data->sd, SECURITY_DESCRIPTOR_REVISION)",
      "5615:         || !SetSecurityDescriptorGroup(&data->sd, NULL, TRUE)) {",
      "5616:         return GetLastError();",
      "5617:     }",
      "5619:     data->securityAttributes.nLength = sizeof(SECURITY_ATTRIBUTES);",
      "5620:     data->ea[0].grfAccessPermissions = GENERIC_ALL;",
      "5621:     data->ea[0].grfAccessMode = SET_ACCESS;",
      "5622:     data->ea[0].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
      "5623:     data->ea[0].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
      "5624:     data->ea[0].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
      "5625:     data->ea[0].Trustee.ptstrName = L\"CURRENT_USER\";",
      "5627:     data->ea[1].grfAccessPermissions = GENERIC_ALL;",
      "5628:     data->ea[1].grfAccessMode = SET_ACCESS;",
      "5629:     data->ea[1].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
      "5630:     data->ea[1].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
      "5631:     data->ea[1].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
      "5632:     data->ea[1].Trustee.ptstrName = L\"SYSTEM\";",
      "5634:     data->ea[2].grfAccessPermissions = GENERIC_ALL;",
      "5635:     data->ea[2].grfAccessMode = SET_ACCESS;",
      "5636:     data->ea[2].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
      "5637:     data->ea[2].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
      "5638:     data->ea[2].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
      "5639:     data->ea[2].Trustee.ptstrName = L\"ADMINISTRATORS\";",
      "5641:     int r = SetEntriesInAclW(3, data->ea, NULL, &data->acl);",
      "5642:     if (r) {",
      "5643:         return r;",
      "5644:     }",
      "5645:     if (!SetSecurityDescriptorDacl(&data->sd, TRUE, data->acl, FALSE)) {",
      "5646:         return GetLastError();",
      "5647:     }",
      "5648:     data->securityAttributes.lpSecurityDescriptor = &data->sd;",
      "5650:     return 0;",
      "5651: }",
      "5653: static int",
      "5654: clearSecurityAttributes(",
      "5655:     PSECURITY_ATTRIBUTES *securityAttributes,",
      "5656:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
      "5657: ) {",
      "5658:     assert(securityAttributes);",
      "5659:     assert(data);",
      "5661:     if (data->acl) {",
      "5662:         if (LocalFree((void *)data->acl)) {",
      "5663:             return GetLastError();",
      "5664:         }",
      "5665:     }",
      "5666:     return 0;",
      "5667: }",
      "5669: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5569: {",
      "5570:     int result;",
      "5571: #ifdef HAVE_MKDIRAT",
      "5572:     int mkdirat_unavailable = 0;",
      "5573: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5700: #ifdef MS_WINDOWS",
      "5701:     int error = 0;",
      "5702:     int pathError = 0;",
      "5703:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
      "5704:     struct _Py_SECURITY_ATTRIBUTE_DATA secAttrData;",
      "5705: #endif",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5580: #ifdef MS_WINDOWS",
      "5581:     Py_BEGIN_ALLOW_THREADS",
      "5583:     Py_END_ALLOW_THREADS",
      "5586:         return path_error(path);",
      "5587: #else",
      "5588:     Py_BEGIN_ALLOW_THREADS",
      "5589: #if HAVE_MKDIRAT",
      "",
      "[Removed Lines]",
      "5582:     result = CreateDirectoryW(path->wide, NULL);",
      "5585:     if (!result)",
      "",
      "[Added Lines]",
      "5717:     switch (mode) {",
      "5718:     case 0x1C0: // 0o700",
      "5719:         error = initializeMkdir700SecurityAttributes(&pSecAttr, &secAttrData);",
      "5720:         break;",
      "5721:     default:",
      "5722:         error = initializeDefaultSecurityAttributes(&pSecAttr, &secAttrData);",
      "5723:         break;",
      "5724:     }",
      "5725:     if (!error) {",
      "5726:         result = CreateDirectoryW(path->wide, pSecAttr);",
      "5727:         error = clearSecurityAttributes(&pSecAttr, &secAttrData);",
      "5728:     } else {",
      "5730:         clearSecurityAttributes(&pSecAttr, &secAttrData);",
      "5731:     }",
      "5734:     if (error) {",
      "5735:         PyErr_SetFromWindowsErr(error);",
      "5736:         return NULL;",
      "5737:     }",
      "5738:     if (!result) {",
      "5740:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8af84b503d0b62a3db0d806d39f42c1e08746079",
      "candidate_info": {
        "commit_hash": "8af84b503d0b62a3db0d806d39f42c1e08746079",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8af84b503d0b62a3db0d806d39f42c1e08746079",
        "files": [
          "Misc/NEWS.d/next/Security/2024-05-08-21-59-38.gh-issue-118773.7dFRJY.rst",
          "Modules/posixmodule.c"
        ],
        "message": "gh-118773: Use language-invariant SDDL string instead of aliases for ACLs. (GH-118800)",
        "before_after_code_files": [
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5541:     return result;",
          "5542: }",
          "5685: os.mkdir",
          "",
          "[Removed Lines]",
          "5544: #ifdef MS_WINDOWS",
          "5547: templates that will probably mostly match common POSIX mode settings.",
          "5548: The _Py_SECURITY_ATTRIBUTE_DATA structure contains temporary data, as",
          "5549: a constructed SECURITY_ATTRIBUTE structure typically refers to memory",
          "5550: that has to be alive while it's being used.",
          "5552: Typical use will look like:",
          "5553:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
          "5554:     struct _Py_SECURITY_ATTRIBUTE_DATA secAttrData;",
          "5555:     int error, error2;",
          "5557:     Py_BEGIN_ALLOW_THREADS",
          "5558:     switch (mode) {",
          "5559:     case 0x1C0: // 0o700",
          "5560:         error = initializeMkdir700SecurityAttributes(&pSecAttr, &secAttrData);",
          "5561:         break;",
          "5562:     ...",
          "5563:     default:",
          "5564:         error = initializeDefaultSecurityAttributes(&pSecAttr, &secAttrData);",
          "5565:         break;",
          "5566:     }",
          "5568:     if (!error) {",
          "5570:     }",
          "5573:     error2 = clearSecurityAttributes(&pSecAttr, &secAttrData);",
          "5574:     if (!error) {",
          "5575:         error = error2;",
          "5576:     }",
          "5577:     Py_END_ALLOW_THREADS",
          "5579:     if (error) {",
          "5580:         PyErr_SetFromWindowsErr(error);",
          "5581:         return NULL;",
          "5582:     }",
          "5585: struct _Py_SECURITY_ATTRIBUTE_DATA {",
          "5586:     SECURITY_ATTRIBUTES securityAttributes;",
          "5587:     PACL acl;",
          "5588:     SECURITY_DESCRIPTOR sd;",
          "5589:     EXPLICIT_ACCESS_W ea[4];",
          "5590:     char sid[64];",
          "5591: };",
          "5593: static int",
          "5594: initializeDefaultSecurityAttributes(",
          "5595:     PSECURITY_ATTRIBUTES *securityAttributes,",
          "5596:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
          "5597: ) {",
          "5598:     assert(securityAttributes);",
          "5599:     assert(data);",
          "5601:     memset(data, 0, sizeof(*data));",
          "5602:     return 0;",
          "5603: }",
          "5605: static int",
          "5606: initializeMkdir700SecurityAttributes(",
          "5607:     PSECURITY_ATTRIBUTES *securityAttributes,",
          "5608:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
          "5609: ) {",
          "5610:     assert(securityAttributes);",
          "5611:     assert(data);",
          "5613:     memset(data, 0, sizeof(*data));",
          "5615:     if (!InitializeSecurityDescriptor(&data->sd, SECURITY_DESCRIPTOR_REVISION)",
          "5616:         || !SetSecurityDescriptorGroup(&data->sd, NULL, TRUE)) {",
          "5617:         return GetLastError();",
          "5618:     }",
          "5620:     int use_alias = 0;",
          "5621:     DWORD cbSid = sizeof(data->sid);",
          "5622:     if (!CreateWellKnownSid(WinCreatorOwnerRightsSid, NULL, (PSID)data->sid, &cbSid)) {",
          "5623:         use_alias = 1;",
          "5624:     }",
          "5626:     data->securityAttributes.nLength = sizeof(SECURITY_ATTRIBUTES);",
          "5627:     data->ea[0].grfAccessPermissions = GENERIC_ALL;",
          "5628:     data->ea[0].grfAccessMode = SET_ACCESS;",
          "5629:     data->ea[0].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
          "5630:     if (use_alias) {",
          "5631:         data->ea[0].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
          "5632:         data->ea[0].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
          "5633:         data->ea[0].Trustee.ptstrName = L\"CURRENT_USER\";",
          "5634:     } else {",
          "5635:         data->ea[0].Trustee.TrusteeForm = TRUSTEE_IS_SID;",
          "5636:         data->ea[0].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;",
          "5637:         data->ea[0].Trustee.ptstrName = (LPWCH)(SID*)data->sid;",
          "5638:     }",
          "5640:     data->ea[1].grfAccessPermissions = GENERIC_ALL;",
          "5641:     data->ea[1].grfAccessMode = SET_ACCESS;",
          "5642:     data->ea[1].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
          "5643:     data->ea[1].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
          "5644:     data->ea[1].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
          "5645:     data->ea[1].Trustee.ptstrName = L\"SYSTEM\";",
          "5647:     data->ea[2].grfAccessPermissions = GENERIC_ALL;",
          "5648:     data->ea[2].grfAccessMode = SET_ACCESS;",
          "5649:     data->ea[2].grfInheritance = SUB_CONTAINERS_AND_OBJECTS_INHERIT;",
          "5650:     data->ea[2].Trustee.TrusteeForm = TRUSTEE_IS_NAME;",
          "5651:     data->ea[2].Trustee.TrusteeType = TRUSTEE_IS_ALIAS;",
          "5652:     data->ea[2].Trustee.ptstrName = L\"ADMINISTRATORS\";",
          "5654:     int r = SetEntriesInAclW(3, data->ea, NULL, &data->acl);",
          "5655:     if (r) {",
          "5656:         return r;",
          "5657:     }",
          "5658:     if (!SetSecurityDescriptorDacl(&data->sd, TRUE, data->acl, FALSE)) {",
          "5659:         return GetLastError();",
          "5660:     }",
          "5661:     data->securityAttributes.lpSecurityDescriptor = &data->sd;",
          "5663:     return 0;",
          "5664: }",
          "5666: static int",
          "5667: clearSecurityAttributes(",
          "5668:     PSECURITY_ATTRIBUTES *securityAttributes,",
          "5669:     struct _Py_SECURITY_ATTRIBUTE_DATA *data",
          "5670: ) {",
          "5671:     assert(securityAttributes);",
          "5672:     assert(data);",
          "5674:     if (data->acl) {",
          "5675:         if (LocalFree((void *)data->acl)) {",
          "5676:             return GetLastError();",
          "5677:         }",
          "5678:     }",
          "5679:     return 0;",
          "5680: }",
          "5682: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5713: #ifdef MS_WINDOWS",
          "5714:     int error = 0;",
          "5715:     int pathError = 0;",
          "5716:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
          "5718: #endif",
          "5719: #ifdef HAVE_MKDIRAT",
          "5720:     int mkdirat_unavailable = 0;",
          "",
          "[Removed Lines]",
          "5717:     struct _Py_SECURITY_ATTRIBUTE_DATA secAttrData;",
          "",
          "[Added Lines]",
          "5576:     SECURITY_ATTRIBUTES secAttr = { sizeof(secAttr) };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5728: #ifdef MS_WINDOWS",
          "5729:     Py_BEGIN_ALLOW_THREADS",
          "5737:     }",
          "5738:     if (!error) {",
          "5739:         result = CreateDirectoryW(path->wide, pSecAttr);",
          "5744:     }",
          "5745:     Py_END_ALLOW_THREADS",
          "5747:     if (error) {",
          "5750:     }",
          "5751:     if (!result) {",
          "5752:         return path_error(path);",
          "",
          "[Removed Lines]",
          "5730:     switch (mode) {",
          "5731:     case 0x1C0: // 0o700",
          "5732:         error = initializeMkdir700SecurityAttributes(&pSecAttr, &secAttrData);",
          "5733:         break;",
          "5734:     default:",
          "5735:         error = initializeDefaultSecurityAttributes(&pSecAttr, &secAttrData);",
          "5736:         break;",
          "5740:         error = clearSecurityAttributes(&pSecAttr, &secAttrData);",
          "5741:     } else {",
          "5743:         clearSecurityAttributes(&pSecAttr, &secAttrData);",
          "5748:         PyErr_SetFromWindowsErr(error);",
          "5749:         return NULL;",
          "",
          "[Added Lines]",
          "5590:     if (mode == 0700 /* 0o700 */) {",
          "5591:         ULONG sdSize;",
          "5592:         pSecAttr = &secAttr;",
          "5596:         if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(",
          "5597:             L\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\",",
          "5598:             SDDL_REVISION_1,",
          "5599:             &secAttr.lpSecurityDescriptor,",
          "5600:             &sdSize",
          "5601:         )) {",
          "5602:             error = GetLastError();",
          "5603:         }",
          "5607:         if (secAttr.lpSecurityDescriptor &&",
          "5610:             LocalFree(secAttr.lpSecurityDescriptor)) {",
          "5611:             error = GetLastError();",
          "5612:         }",
          "5617:         return PyErr_SetFromWindowsErr(error);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5ba4fc9bc9b2d9eff2a90893e8d500e0c367237",
      "candidate_info": {
        "commit_hash": "d5ba4fc9bc9b2d9eff2a90893e8d500e0c367237",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d5ba4fc9bc9b2d9eff2a90893e8d500e0c367237",
        "files": [
          "Lib/test/test_os.py"
        ],
        "message": "gh-120164: Fix test_os.test_win32_mkdir_700() (#120177)\n\nDon't compare the path to avoid encoding issues.\n\nCo-authored-by: Eryk Sun <eryksun@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:         os.mkdir(path, mode=0o700)",
          "1838:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1839:         os.rmdir(path)",
          "1840:         self.assertEqual(",
          "1843:         )",
          "1845:     def tearDown(self):",
          "",
          "[Removed Lines]",
          "1841:             out.strip(),",
          "1842:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "",
          "[Added Lines]",
          "1840:         out = out.strip().rsplit(\" \", 1)[1]",
          "1842:             out,",
          "1843:             '\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "",
          "---------------"
        ]
      }
    }
  ]
}