{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "3305cb4d235182067936f8e940e6db174e25b4b2",
  "patch_info": {
    "commit_hash": "3305cb4d235182067936f8e940e6db174e25b4b2",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/3305cb4d235182067936f8e940e6db174e25b4b2",
    "files": [
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_app_format/include/esp_app_desc.h",
      "components/esp_system/startup_funcs.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
      "components/esp_system/startup_funcs.c||components/esp_system/startup_funcs.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"bootloader_memory_utils.h\"",
      "22: #include \"soc/soc_caps.h\"",
      "23: #include \"hal/cache_ll.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"esp_efuse.h\"",
      "22: #include \"esp_app_desc.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "81: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "84: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "227:         cache_ll_writeback_all(CACHE_LL_LEVEL_INT_MEM, CACHE_TYPE_DATA, CACHE_LL_ID_ALL);",
      "228: #endif",
      "229:     }",
      "230: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "235:     bool sec_ver = false;",
      "236:     if (do_load) {",
      "237:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "238:         if (!sec_ver) {",
      "239:             err = ESP_FAIL;",
      "240:             goto err;",
      "241:         }",
      "242:     }",
      "244:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "245: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "509:     for (int i = 0; i < data->image.segment_count; i++) {",
      "510:         esp_image_segment_header_t *header = &data->segments[i];",
      "511:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "513:         next_addr += sizeof(esp_image_segment_header_t);",
      "514:         data->segment_data[i] = next_addr;",
      "515:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "512:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "529:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "530:     return err;",
      "531: }",
      "534: {",
      "535:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "533: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "550: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "588:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "590:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "592:         data_addr += data_len;",
      "593:         data_len_remain -= data_len;",
      "594:     }",
      "",
      "[Removed Lines]",
      "591:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "608:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "603:     return err;",
      "604: }",
      "607: {",
      "",
      "[Removed Lines]",
      "606: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "623: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "628: __attribute__((optimize(\"O0\")))",
      "629: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "630: {",
      "642:     uint32_t data_buffer[2];",
      "643:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "644:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "645:     metadata->secure_version = data_buffer[1];",
      "646:     if (checksum != NULL) {",
      "648:     }",
      "649:     if (sha_handle != NULL) {",
      "650:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "651:     }",
      "652:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "653:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "654:     return sizeof(data_buffer);",
      "655: }",
      "656: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "658: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "641:     const uint32_t *src = data;",
      "643:     for (size_t i = 0; i < data_len; i += 4) {",
      "644:         int w_i = i / 4; // Word index",
      "645:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "696:     if (segment == 0) {",
      "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "699:         data_len -= len;",
      "700:         src += len / 4;",
      "702:     }",
      "703: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h": [
      "File: components/esp_app_format/include/esp_app_desc.h -> components/esp_app_format/include/esp_app_desc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: ESP_STATIC_ASSERT(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: ESP_STATIC_ASSERT(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/esp_system/startup_funcs.c||components/esp_system/startup_funcs.c": [
      "File: components/esp_system/startup_funcs.c -> components/esp_system/startup_funcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "201: ESP_SYSTEM_INIT_FN(init_secure, CORE, BIT(0), 150)",
      "202: {",
      "203: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "204:     esp_flash_encryption_init_checks();",
      "205: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "203: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "205:     const esp_app_desc_t *desc = esp_app_get_description();",
      "206:     ESP_RETURN_ON_FALSE(esp_efuse_check_secure_version(desc->secure_version), ESP_FAIL, TAG, \"Incorrect secure version of app\");",
      "207: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c95aa445d4e84f01f86b6f3a552aa299276abf3",
      "candidate_info": {
        "commit_hash": "4c95aa445d4e84f01f86b6f3a552aa299276abf3",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/4c95aa445d4e84f01f86b6f3a552aa299276abf3",
        "files": [
          "components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ],
        "message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
        "before_after_code_files": [
          "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
          "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
          "components/esp_system/startup.c||components/esp_system/startup.c",
          "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ],
          "candidate": [
            "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
            "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h",
            "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
          "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
        ],
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"bootloader_util.h\"",
          "20: #include \"bootloader_common.h\"",
          "21: #include \"esp_rom_sys.h\"",
          "22: #include \"bootloader_memory_utils.h\"",
          "23: #include \"soc/soc_caps.h\"",
          "24: #include \"hal/cache_ll.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"esp_efuse.h\"",
          "23: #include \"esp_app_desc.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "98: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
          "",
          "[Removed Lines]",
          "92: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "95: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
          "",
          "[Added Lines]",
          "94: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "97: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:         cache_ll_writeback_all(CACHE_LL_LEVEL_INT_MEM, CACHE_TYPE_DATA, CACHE_LL_ID_ALL);",
          "241: #endif",
          "242:     }",
          "243: #endif // BOOTLOADER_BUILD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "248:     bool sec_ver = false;",
          "249:     if (do_load) {",
          "250:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
          "251:         if (!sec_ver) {",
          "252:             err = ESP_FAIL;",
          "253:             goto err;",
          "254:         }",
          "255:     }",
          "257:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
          "258: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:     for (int i = 0; i < data->image.segment_count; i++) {",
          "523:         esp_image_segment_header_t *header = &data->segments[i];",
          "524:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
          "526:         next_addr += sizeof(esp_image_segment_header_t);",
          "527:         data->segment_data[i] = next_addr;",
          "528:         next_addr += header->data_len;",
          "",
          "[Removed Lines]",
          "525:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "542:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "543:     return err;",
          "544: }",
          "547: {",
          "548:     esp_err_t err;",
          "",
          "[Removed Lines]",
          "546: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "563: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "601:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
          "603:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
          "605:         data_addr += data_len;",
          "606:         data_len_remain -= data_len;",
          "607:     }",
          "",
          "[Removed Lines]",
          "604:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
          "",
          "[Added Lines]",
          "621:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "616:     return err;",
          "617: }",
          "620: {",
          "",
          "[Removed Lines]",
          "619: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
          "",
          "[Added Lines]",
          "636: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "641: __attribute__((optimize(\"O0\")))",
          "642: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "643: {",
          "655:     uint32_t data_buffer[2];",
          "656:     memcpy(data_buffer, src, sizeof(data_buffer));",
          "657:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
          "658:     metadata->secure_version = data_buffer[1];",
          "659:     if (checksum != NULL) {",
          "661:     }",
          "662:     if (sha_handle != NULL) {",
          "663:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
          "664:     }",
          "665:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
          "666:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
          "667:     return sizeof(data_buffer);",
          "668: }",
          "669: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "671: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654:     const uint32_t *src = data;",
          "656:     for (size_t i = 0; i < data_len; i += 4) {",
          "657:         int w_i = i / 4; // Word index",
          "658:         uint32_t w = src[w_i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "709:     if (segment == 0) {",
          "711:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "712:         data_len -= len;",
          "713:         src += len / 4;",
          "715:     }",
          "716: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "",
          "---------------"
        ],
        "components/esp_app_format/include/esp_app_desc.h||components/esp_app_format/include/esp_app_desc.h": [
          "File: components/esp_app_format/include/esp_app_desc.h -> components/esp_app_format/include/esp_app_desc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: ESP_STATIC_ASSERT(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: ESP_STATIC_ASSERT(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
          "",
          "---------------"
        ],
        "components/esp_system/startup.c||components/esp_system/startup.c": [
          "File: components/esp_system/startup.c -> components/esp_system/startup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: #endif",
          "341: #endif",
          "343: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
          "344:     esp_flash_encryption_init_checks();",
          "345: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "345:     assert(esp_efuse_check_secure_version(esp_app_get_description()->secure_version) == true && \"Incorrect secure version of app\");",
          "346: #endif",
          "",
          "---------------"
        ],
        "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
          "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
          "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
          "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
          "",
          "[Removed Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
          "",
          "[Added Lines]",
          "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
          "",
          "---------------"
        ]
      }
    }
  ]
}