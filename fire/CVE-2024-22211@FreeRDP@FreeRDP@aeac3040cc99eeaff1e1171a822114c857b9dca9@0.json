{
  "cve_id": "CVE-2024-22211",
  "cve_desc": "FreeRDP is a set of free and open source remote desktop protocol library and clients. In affected versions an integer overflow in `freerdp_bitmap_planar_context_reset` leads to heap-buffer overflow. This affects FreeRDP based clients. FreeRDP based server implementations and proxy are not affected. A malicious server could prepare a `RDPGFX_RESET_GRAPHICS_PDU` to allocate too small buffers, possibly triggering later out of bound read/write. Data extraction over network is not possible, the buffers are used to display an image. This issue has been addressed in version 2.11.5 and 3.2.0. Users are advised to upgrade. there are no know workarounds for this vulnerability.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "aeac3040cc99eeaff1e1171a822114c857b9dca9",
  "patch_info": {
    "commit_hash": "aeac3040cc99eeaff1e1171a822114c857b9dca9",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/aeac3040cc99eeaff1e1171a822114c857b9dca9",
    "files": [
      "libfreerdp/codec/planar.c"
    ],
    "message": "[codec,planar] check resolution for overflow\n\nIf the codec resolution is too large return an error as the internal\nbuffers would otherwise overflow.\n\n(cherry picked from commit 44edab1deae4f8c901c00a00683f888cef36d853)",
    "before_after_code_files": [
      "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
      "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1496:  context->bgr = FALSE;",
      "1497:  context->maxWidth = PLANAR_ALIGN(width, 4);",
      "1498:  context->maxHeight = PLANAR_ALIGN(height, 4);",
      "1500:  context->nTempStep = context->maxWidth * 4;",
      "1501:  free(context->planesBuffer);",
      "1502:  free(context->pTempData);",
      "",
      "[Removed Lines]",
      "1499:  context->maxPlaneSize = context->maxWidth * context->maxHeight;",
      "",
      "[Added Lines]",
      "1499:  const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
      "1500:  if (tmp > UINT32_MAX)",
      "1501:   return FALSE;",
      "1502:  context->maxPlaneSize = tmp;",
      "1504:  if (context->maxWidth > UINT32_MAX / 4)",
      "1505:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "939e922936e9c3ae8fc204968645e5e7563a2fff",
      "candidate_info": {
        "commit_hash": "939e922936e9c3ae8fc204968645e5e7563a2fff",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/939e922936e9c3ae8fc204968645e5e7563a2fff",
        "files": [
          "libfreerdp/codec/planar.c"
        ],
        "message": "[codec,planar] check resolution for overflow\n\nIf the codec resolution is too large return an error as the internal\nbuffers would otherwise overflow.",
        "before_after_code_files": [
          "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ],
          "candidate": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
          "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1655:  context->bgr = FALSE;",
          "1656:  context->maxWidth = PLANAR_ALIGN(width, 4);",
          "1657:  context->maxHeight = PLANAR_ALIGN(height, 4);",
          "1659:  context->nTempStep = context->maxWidth * 4;",
          "1661:  memset(context->planes, 0, sizeof(context->planes));",
          "",
          "[Removed Lines]",
          "1658:  context->maxPlaneSize = context->maxWidth * context->maxHeight;",
          "",
          "[Added Lines]",
          "1658:  const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
          "1659:  if (tmp > UINT32_MAX)",
          "1660:   return FALSE;",
          "1661:  context->maxPlaneSize = tmp;",
          "1663:  if (context->maxWidth > UINT32_MAX / 4)",
          "1664:   return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}