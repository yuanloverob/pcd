{
  "cve_id": "CVE-2023-28487",
  "cve_desc": "Sudo before 1.9.13 does not escape control characters in sudoreplay output.",
  "repo": "sudo-project/sudo",
  "patch_hash": "334daf92b31b79ce68ed75e2ee14fca265f029ca",
  "patch_info": {
    "commit_hash": "334daf92b31b79ce68ed75e2ee14fca265f029ca",
    "repo": "sudo-project/sudo",
    "commit_url": "https://github.com/sudo-project/sudo/commit/334daf92b31b79ce68ed75e2ee14fca265f029ca",
    "files": [
      "docs/sudoers.man.in",
      "docs/sudoers.mdoc.in",
      "docs/sudoreplay.man.in",
      "docs/sudoreplay.mdoc.in",
      "include/sudo_lbuf.h",
      "lib/eventlog/eventlog.c",
      "lib/iolog/iolog_json.c",
      "lib/util/lbuf.c",
      "lib/util/util.exp.in",
      "plugins/sudoers/sudoreplay.c"
    ],
    "message": "Escape control characters in log messages and \"sudoreplay -l\" output. The log message contains user-controlled strings that could include things like terminal control characters.  Space characters in the command path are now also escaped.\n\nCommand line arguments that contain spaces are surrounded with\nsingle quotes and any literal single quote or backslash characters\nare escaped with a backslash.  This makes it possible to distinguish\nmultiple command line arguments from a single argument that contains\nspaces.\n\nIssue found by Matthieu Barjole and Victor Cutillas of Synacktiv\n(https://synacktiv.com).",
    "before_after_code_files": [
      "include/sudo_lbuf.h||include/sudo_lbuf.h",
      "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
      "lib/iolog/iolog_json.c||lib/iolog/iolog_json.c",
      "lib/util/lbuf.c||lib/util/lbuf.c",
      "lib/util/util.exp.in||lib/util/util.exp.in",
      "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
    ]
  },
  "patch_diff": {
    "include/sudo_lbuf.h||include/sudo_lbuf.h": [
      "File: include/sudo_lbuf.h -> include/sudo_lbuf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: typedef int (*sudo_lbuf_output_t)(const char *);",
      "39: sudo_dso_public void sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output, int indent, const char *continuation, int cols);",
      "40: sudo_dso_public void sudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf);",
      "41: sudo_dso_public bool sudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...) sudo_printflike(2, 3);",
      "42: sudo_dso_public bool sudo_lbuf_append_quoted_v1(struct sudo_lbuf *lbuf, const char *set, const char *fmt, ...) sudo_printflike(3, 4);",
      "43: sudo_dso_public void sudo_lbuf_print_v1(struct sudo_lbuf *lbuf);",
      "44: sudo_dso_public bool sudo_lbuf_error_v1(struct sudo_lbuf *lbuf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #define LBUF_ESC_CNTRL 0x01",
      "41: #define LBUF_ESC_BLANK 0x02",
      "42: #define LBUF_ESC_QUOTE 0x04",
      "47: sudo_dso_public bool sudo_lbuf_append_esc_v1(struct sudo_lbuf *lbuf, int flags, const char *fmt, ...) sudo_printflike(3, 4);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: #define sudo_lbuf_init(_a, _b, _c, _d, _e) sudo_lbuf_init_v1((_a), (_b), (_c), (_d), (_e))",
      "48: #define sudo_lbuf_destroy(_a) sudo_lbuf_destroy_v1((_a))",
      "49: #define sudo_lbuf_append sudo_lbuf_append_v1",
      "50: #define sudo_lbuf_append_quoted sudo_lbuf_append_quoted_v1",
      "51: #define sudo_lbuf_print(_a) sudo_lbuf_print_v1((_a))",
      "52: #define sudo_lbuf_error(_a) sudo_lbuf_error_v1((_a))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: #define sudo_lbuf_append_esc sudo_lbuf_append_esc_v1",
      "",
      "---------------"
    ],
    "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c": [
      "File: lib/eventlog/eventlog.c -> lib/eventlog/eventlog.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: #include \"sudo_compat.h\"",
      "52: #include \"sudo_debug.h\"",
      "53: #include \"sudo_eventlog.h\"",
      "54: #include \"sudo_fatal.h\"",
      "55: #include \"sudo_gettext.h\"",
      "56: #include \"sudo_json.h\"",
      "57: #include \"sudo_queue.h\"",
      "58: #include \"sudo_util.h\"",
      "72: #define IS_SESSID(s) ( \\",
      "73:     isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\",
      "74:     (s)[2] == '/' && \\",
      "",
      "[Removed Lines]",
      "60: #define LL_HOST_STR \"HOST=\"",
      "61: #define LL_TTY_STR \"TTY=\"",
      "62: #define LL_CHROOT_STR \"CHROOT=\"",
      "63: #define LL_CWD_STR \"PWD=\"",
      "64: #define LL_USER_STR \"USER=\"",
      "65: #define LL_GROUP_STR \"GROUP=\"",
      "66: #define LL_ENV_STR \"ENV=\"",
      "67: #define LL_CMND_STR \"COMMAND=\"",
      "68: #define LL_TSID_STR \"TSID=\"",
      "69: #define LL_EXIT_STR \"EXIT=\"",
      "70: #define LL_SIGNAL_STR \"SIGNAL=\"",
      "",
      "[Added Lines]",
      "54: #include \"sudo_lbuf.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:     const struct eventlog *evlog)",
      "94: {",
      "95:     const struct eventlog_config *evl_conf = eventlog_getconf();",
      "97:     const char *iolog_file;",
      "98:     const char *tty, *tsid = NULL;",
      "99:     char exit_str[(((sizeof(int) * 8) + 2) / 3) + 2];",
      "100:     char sessid[7], offsetstr[64] = \"\";",
      "102:     int i;",
      "103:     debug_decl(new_logline, SUDO_DEBUG_UTIL);",
      "105:     if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {",
      "106:  if (args->reason != NULL) {",
      "107:      if (args->errstr != NULL) {",
      "110:      } else {",
      "113:      }",
      "114:  }",
      "116:     }",
      "",
      "[Removed Lines]",
      "96:     char *line = NULL, *evstr = NULL;",
      "101:     size_t len = 0;",
      "108:   if (asprintf(&line, \"%s: %s\", args->reason, args->errstr) == -1)",
      "109:       goto oom;",
      "111:   if ((line = strdup(args->reason)) == NULL)",
      "112:       goto oom;",
      "115:  debug_return_str(line);",
      "",
      "[Added Lines]",
      "89:     struct sudo_lbuf lbuf;",
      "93:     sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);",
      "98:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s: %s\",",
      "99:       args->reason, args->errstr);",
      "101:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s\", args->reason);",
      "103:      if (sudo_lbuf_error(&lbuf))",
      "104:   goto oom;",
      "106:  debug_return_str(lbuf.buf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:     }",
      "217:     if (args->reason != NULL) {",
      "221:     }",
      "222:     if (args->errstr != NULL) {",
      "226:     }",
      "227:     if (evlog->submithost != NULL && !evl_conf->omit_hostname) {",
      "232:     }",
      "233:     if (tty != NULL) {",
      "238:     }",
      "239:     if (evlog->runchroot != NULL) {",
      "244:     }",
      "245:     if (evlog->runcwd != NULL) {",
      "250:     }",
      "251:     if (evlog->runuser != NULL) {",
      "256:     }",
      "257:     if (evlog->rungroup != NULL) {",
      "262:     }",
      "263:     if (tsid != NULL) {",
      "277:     }",
      "278:     if (evlog->command != NULL) {",
      "283:  if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
      "284:      for (i = 1; evlog->argv[i] != NULL; i++) {",
      "288:      }",
      "289:  }",
      "290:  if (event_type == EVLOG_EXIT) {",
      "291:      if (evlog->signal_name != NULL) {",
      "296:      }",
      "297:      if (evlog->exit_value != -1) {",
      "302:      }",
      "303:  }",
      "304:     }",
      "307: oom:",
      "309:     sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
      "310:     debug_return_str(NULL);",
      "316: }",
      "318: static void",
      "",
      "[Removed Lines]",
      "155:     if (args->reason != NULL)",
      "156:  len += strlen(args->reason) + 3;",
      "157:     if (args->errstr != NULL)",
      "158:  len += strlen(args->errstr) + 3;",
      "159:     if (evlog->submithost != NULL && !evl_conf->omit_hostname)",
      "160:  len += sizeof(LL_HOST_STR) + 2 + strlen(evlog->submithost);",
      "161:     if (tty != NULL)",
      "162:  len += sizeof(LL_TTY_STR) + 2 + strlen(tty);",
      "163:     if (evlog->runchroot != NULL)",
      "164:  len += sizeof(LL_CHROOT_STR) + 2 + strlen(evlog->runchroot);",
      "165:     if (evlog->runcwd != NULL)",
      "166:  len += sizeof(LL_CWD_STR) + 2 + strlen(evlog->runcwd);",
      "167:     if (evlog->runuser != NULL)",
      "168:  len += sizeof(LL_USER_STR) + 2 + strlen(evlog->runuser);",
      "169:     if (evlog->rungroup != NULL)",
      "170:  len += sizeof(LL_GROUP_STR) + 2 + strlen(evlog->rungroup);",
      "171:     if (tsid != NULL) {",
      "172:  len += sizeof(LL_TSID_STR) + 2 + strlen(tsid) + strlen(offsetstr);",
      "173:     }",
      "174:     if (evlog->env_add != NULL) {",
      "175:  size_t evlen = 0;",
      "176:  char * const *ep;",
      "178:  for (ep = evlog->env_add; *ep != NULL; ep++)",
      "179:      evlen += strlen(*ep) + 1;",
      "180:  if (evlen != 0) {",
      "181:      if ((evstr = malloc(evlen)) == NULL)",
      "182:   goto oom;",
      "183:      ep = evlog->env_add;",
      "184:      if (strlcpy(evstr, *ep, evlen) >= evlen)",
      "185:   goto toobig;",
      "186:      while (*++ep != NULL) {",
      "187:   if (strlcat(evstr, \" \", evlen) >= evlen ||",
      "188:       strlcat(evstr, *ep, evlen) >= evlen)",
      "189:       goto toobig;",
      "190:      }",
      "191:      len += sizeof(LL_ENV_STR) + 2 + evlen;",
      "192:  }",
      "193:     }",
      "194:     if (evlog->command != NULL) {",
      "195:  len += sizeof(LL_CMND_STR) - 1 + strlen(evlog->command);",
      "196:  if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
      "197:      for (i = 1; evlog->argv[i] != NULL; i++)",
      "198:   len += strlen(evlog->argv[i]) + 1;",
      "199:  }",
      "200:  if (event_type == EVLOG_EXIT) {",
      "201:      if (evlog->signal_name != NULL)",
      "202:   len += sizeof(LL_SIGNAL_STR) + 2 + strlen(evlog->signal_name);",
      "203:      if (evlog->exit_value != -1) {",
      "204:   (void)snprintf(exit_str, sizeof(exit_str), \"%d\", evlog->exit_value);",
      "205:   len += sizeof(LL_EXIT_STR) + 2 + strlen(exit_str);",
      "206:      }",
      "207:  }",
      "208:     }",
      "213:     if ((line = malloc(++len)) == NULL)",
      "214:  goto oom;",
      "215:     line[0] = '\\0';",
      "218:  if (strlcat(line, args->reason, len) >= len ||",
      "219:      strlcat(line, args->errstr ? \" : \" : \" ; \", len) >= len)",
      "220:      goto toobig;",
      "223:  if (strlcat(line, args->errstr, len) >= len ||",
      "224:      strlcat(line, \" ; \", len) >= len)",
      "225:      goto toobig;",
      "228:  if (strlcat(line, LL_HOST_STR, len) >= len ||",
      "229:      strlcat(line, evlog->submithost, len) >= len ||",
      "230:      strlcat(line, \" ; \", len) >= len)",
      "231:      goto toobig;",
      "234:  if (strlcat(line, LL_TTY_STR, len) >= len ||",
      "235:      strlcat(line, tty, len) >= len ||",
      "236:      strlcat(line, \" ; \", len) >= len)",
      "237:      goto toobig;",
      "240:  if (strlcat(line, LL_CHROOT_STR, len) >= len ||",
      "241:      strlcat(line, evlog->runchroot, len) >= len ||",
      "242:      strlcat(line, \" ; \", len) >= len)",
      "243:      goto toobig;",
      "246:  if (strlcat(line, LL_CWD_STR, len) >= len ||",
      "247:      strlcat(line, evlog->runcwd, len) >= len ||",
      "248:      strlcat(line, \" ; \", len) >= len)",
      "249:      goto toobig;",
      "252:  if (strlcat(line, LL_USER_STR, len) >= len ||",
      "253:      strlcat(line, evlog->runuser, len) >= len ||",
      "254:      strlcat(line, \" ; \", len) >= len)",
      "255:      goto toobig;",
      "258:  if (strlcat(line, LL_GROUP_STR, len) >= len ||",
      "259:      strlcat(line, evlog->rungroup, len) >= len ||",
      "260:      strlcat(line, \" ; \", len) >= len)",
      "261:      goto toobig;",
      "264:  if (strlcat(line, LL_TSID_STR, len) >= len ||",
      "265:      strlcat(line, tsid, len) >= len ||",
      "266:      strlcat(line, offsetstr, len) >= len ||",
      "267:      strlcat(line, \" ; \", len) >= len)",
      "268:      goto toobig;",
      "269:     }",
      "270:     if (evstr != NULL) {",
      "271:  if (strlcat(line, LL_ENV_STR, len) >= len ||",
      "272:      strlcat(line, evstr, len) >= len ||",
      "273:      strlcat(line, \" ; \", len) >= len)",
      "274:      goto toobig;",
      "275:  free(evstr);",
      "276:  evstr = NULL;",
      "279:  if (strlcat(line, LL_CMND_STR, len) >= len)",
      "280:      goto toobig;",
      "281:  if (strlcat(line, evlog->command, len) >= len)",
      "282:      goto toobig;",
      "285:   if (strlcat(line, \" \", len) >= len ||",
      "286:       strlcat(line, evlog->argv[i], len) >= len)",
      "287:       goto toobig;",
      "292:   if (strlcat(line, \" ; \", len) >= len ||",
      "293:       strlcat(line, LL_SIGNAL_STR, len) >= len ||",
      "294:       strlcat(line, evlog->signal_name, len) >= len)",
      "295:       goto toobig;",
      "298:   if (strlcat(line, \" ; \", len) >= len ||",
      "299:       strlcat(line, LL_EXIT_STR, len) >= len ||",
      "300:       strlcat(line, exit_str, len) >= len)",
      "301:       goto toobig;",
      "306:     debug_return_str(line);",
      "308:     free(evstr);",
      "311: toobig:",
      "312:     free(evstr);",
      "313:     free(line);",
      "314:     sudo_warnx(U_(\"internal error, %s overflow\"), __func__);",
      "315:     debug_return_str(NULL);",
      "",
      "[Added Lines]",
      "148:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s%s\", args->reason,",
      "149:      args->errstr ? \" : \" : \" ; \");",
      "152:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s ; \", args->errstr);",
      "155:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",",
      "156:      evlog->submithost);",
      "159:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \", tty);",
      "162:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",",
      "163:      evlog->runchroot);",
      "166:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"PWD=%s ; \",",
      "167:      evlog->runcwd);",
      "170:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \",",
      "171:      evlog->runuser);",
      "174:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",",
      "175:      evlog->rungroup);",
      "178:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TSID=%s%s ; \", tsid,",
      "179:      offsetstr);",
      "180:     }",
      "181:     if (evlog->env_add != NULL && evlog->env_add[0] != NULL) {",
      "182:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"ENV=%s\",",
      "183:      evlog->env_add[0]);",
      "184:  for (i = 1; evlog->env_add[i] != NULL; i++) {",
      "185:      sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" %s\",",
      "186:   evlog->env_add[i]);",
      "187:  }",
      "190:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
      "191:      \"COMMAND=%s\", evlog->command);",
      "194:   sudo_lbuf_append(&lbuf, \" \");",
      "195:   if (strchr(evlog->argv[i], ' ') != NULL) {",
      "197:       sudo_lbuf_append(&lbuf, \"'\");",
      "198:       sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
      "199:    \"%s\", evlog->argv[i]);",
      "200:       sudo_lbuf_append(&lbuf, \"'\");",
      "201:   } else {",
      "203:       sudo_lbuf_append_esc(&lbuf,",
      "204:    LBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,",
      "205:    \"%s\", evlog->argv[i]);",
      "206:   }",
      "211:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; SIGNAL=%s\",",
      "212:       evlog->signal_name);",
      "215:   (void)snprintf(exit_str, sizeof(exit_str), \"%d\",",
      "216:       evlog->exit_value);",
      "217:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; EXIT=%s\",",
      "218:       exit_str);",
      "222:     if (!sudo_lbuf_error(&lbuf))",
      "223:  debug_return_str(lbuf.buf);",
      "225:     sudo_lbuf_destroy(&lbuf);",
      "",
      "---------------"
    ],
    "lib/iolog/iolog_json.c||lib/iolog/iolog_json.c": [
      "File: lib/iolog/iolog_json.c -> lib/iolog/iolog_json.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "551:  }",
      "552:     }",
      "593:     ret = true;",
      "595: done:",
      "",
      "[Removed Lines]",
      "555:     if (evlog->command != NULL && evlog->argv != NULL && evlog->argv[0] != NULL) {",
      "556:  size_t len, bufsize = strlen(evlog->command) + 1;",
      "557:  char *cp, *buf;",
      "558:  int ac;",
      "561:  for (ac = 1; evlog->argv[ac] != NULL; ac++)",
      "562:      bufsize += strlen(evlog->argv[ac]) + 1;",
      "564:  if ((buf = malloc(bufsize)) == NULL) {",
      "565:      sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
      "566:      goto done;",
      "567:  }",
      "568:  cp = buf;",
      "570:  len = strlcpy(cp, evlog->command, bufsize);",
      "571:  if (len >= bufsize)",
      "572:      sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "573:  cp += len;",
      "574:  bufsize -= len;",
      "576:  for (ac = 1; evlog->argv[ac] != NULL; ac++) {",
      "577:      if (bufsize < 2)",
      "578:   sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "580:      bufsize--;",
      "582:      len = strlcpy(cp, evlog->argv[ac], bufsize);",
      "583:      if (len >= bufsize)",
      "584:   sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "585:      cp += len;",
      "586:      bufsize -= len;",
      "587:  }",
      "589:  free(evlog->command);",
      "590:  evlog->command = buf;",
      "591:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "lib/util/lbuf.c||lib/util/lbuf.c": [
      "File: lib/util/lbuf.c -> lib/util/lbuf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:     debug_return_bool(true);",
      "95: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102: static int",
      "103: escape(unsigned char ch, char *buf)",
      "104: {",
      "105:     const int len = ch < 0100 ? (ch < 010 ? 3 : 4) : 5;",
      "108:     switch (len) {",
      "109:     case 5:",
      "110:  buf[4] = (ch & 7) + '0';",
      "111:  ch >>= 3;",
      "112:  FALLTHROUGH;",
      "113:     case 4:",
      "114:  buf[3] = (ch & 7) + '0';",
      "115:  ch >>= 3;",
      "116:  FALLTHROUGH;",
      "117:     case 3:",
      "118:  buf[2] = (ch & 7) + '0';",
      "119:  buf[1] = '0';",
      "120:  buf[0] = '#';",
      "121:  break;",
      "122:     }",
      "123:     buf[len] = '\\0';",
      "125:     return len;",
      "126: }",
      "132: bool",
      "133: sudo_lbuf_append_esc_v1(struct sudo_lbuf *lbuf, int flags, const char *fmt, ...)",
      "134: {",
      "135:     unsigned int saved_len = lbuf->len;",
      "136:     bool ret = false;",
      "137:     const char *s;",
      "138:     va_list ap;",
      "139:     debug_decl(sudo_lbuf_append_esc, SUDO_DEBUG_UTIL);",
      "141:     if (sudo_lbuf_error(lbuf))",
      "142:  debug_return_bool(false);",
      "144: #define should_escape(ch) \\",
      "145:     ((ISSET(flags, LBUF_ESC_CNTRL) && iscntrl((unsigned char)ch)) || \\",
      "146:     (ISSET(flags, LBUF_ESC_BLANK) && isblank((unsigned char)ch)))",
      "147: #define should_quote(ch) \\",
      "148:     (ISSET(flags, LBUF_ESC_QUOTE) && (ch == '\\'' || ch == '\\\\'))",
      "150:     va_start(ap, fmt);",
      "151:     while (*fmt != '\\0') {",
      "152:  if (fmt[0] == '%' && fmt[1] == 's') {",
      "153:      if ((s = va_arg(ap, char *)) == NULL)",
      "154:   s = \"(NULL)\";",
      "155:      while (*s != '\\0') {",
      "156:   if (should_escape(*s)) {",
      "157:       if (!sudo_lbuf_expand(lbuf, sizeof(\"#0177\") - 1))",
      "158:    goto done;",
      "159:       lbuf->len += escape(*s++, lbuf->buf + lbuf->len);",
      "160:       continue;",
      "161:   }",
      "162:   if (should_quote(*s)) {",
      "163:       if (!sudo_lbuf_expand(lbuf, 2))",
      "164:    goto done;",
      "165:       lbuf->buf[lbuf->len++] = '\\\\';",
      "166:       lbuf->buf[lbuf->len++] = *s++;",
      "167:       continue;",
      "168:   }",
      "169:   if (!sudo_lbuf_expand(lbuf, 1))",
      "170:       goto done;",
      "171:   lbuf->buf[lbuf->len++] = *s++;",
      "172:      }",
      "173:      fmt += 2;",
      "174:      continue;",
      "175:  }",
      "176:  if (should_escape(*fmt)) {",
      "177:      if (!sudo_lbuf_expand(lbuf, sizeof(\"#0177\") - 1))",
      "178:   goto done;",
      "179:      if (*fmt == '\\'') {",
      "180:   lbuf->buf[lbuf->len++] = '\\\\';",
      "181:   lbuf->buf[lbuf->len++] = *fmt++;",
      "182:      } else {",
      "183:   lbuf->len += escape(*fmt++, lbuf->buf + lbuf->len);",
      "184:      }",
      "185:      continue;",
      "186:  }",
      "187:  if (!sudo_lbuf_expand(lbuf, 1))",
      "188:      goto done;",
      "189:  lbuf->buf[lbuf->len++] = *fmt++;",
      "190:     }",
      "191:     ret = true;",
      "193: done:",
      "194:     if (!ret)",
      "195:  lbuf->len = saved_len;",
      "196:     if (lbuf->size != 0)",
      "197:  lbuf->buf[lbuf->len] = '\\0';",
      "198:     va_end(ap);",
      "200:     debug_return_bool(ret);",
      "201: }",
      "",
      "---------------"
    ],
    "lib/util/util.exp.in||lib/util/util.exp.in": [
      "File: lib/util/util.exp.in -> lib/util/util.exp.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: sudo_json_init_v2",
      "101: sudo_json_open_array_v1",
      "102: sudo_json_open_object_v1",
      "103: sudo_lbuf_append_quoted_v1",
      "104: sudo_lbuf_append_v1",
      "105: sudo_lbuf_clearerr_v1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: sudo_lbuf_append_esc_v1",
      "",
      "---------------"
    ],
    "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c": [
      "File: plugins/sudoers/sudoreplay.c -> plugins/sudoers/sudoreplay.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: #include \"sudo_debug.h\"",
      "63: #include \"sudo_event.h\"",
      "64: #include \"sudo_eventlog.h\"",
      "65: #include \"sudo_fatal.h\"",
      "66: #include \"sudo_gettext.h\"",
      "67: #include \"sudo_iolog.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: #include \"sudo_lbuf.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "373:     if ((evlog = iolog_parse_loginfo(iolog_dir_fd, iolog_dir)) == NULL)",
      "374:  goto done;",
      "375:     printf(_(\"Replaying sudo session: %s\"), evlog->command);",
      "378:     if (!isatty(STDIN_FILENO) || !isatty(STDOUT_FILENO))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
      "378:  for (i = 1; evlog->argv[i] != NULL; i++)",
      "379:      printf(\" %s\", evlog->argv[i]);",
      "380:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1315:     debug_return_int(av - argv);",
      "1316: }",
      "1318: static bool",
      "1319: match_expr(struct search_node_list *head, struct eventlog *evlog, bool last_match)",
      "1320: {",
      "1321:     struct search_node *sn;",
      "1322:     bool res = false, matched = last_match;",
      "1323:     int rc;",
      "1324:     debug_decl(match_expr, SUDO_DEBUG_UTIL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1323: static char *",
      "1324: expand_command(struct eventlog *evlog, char **newbuf)",
      "1325: {",
      "1326:     size_t len, bufsize = strlen(evlog->command) + 1;",
      "1327:     char *cp, *buf;",
      "1328:     int ac;",
      "1329:     debug_decl(expand_command, SUDO_DEBUG_UTIL);",
      "1331:     if (evlog->argv == NULL || evlog->argv[0] == NULL || evlog->argv[1] == NULL) {",
      "1334:  debug_return_str(evlog->command);",
      "1335:     }",
      "1338:     for (ac = 1; evlog->argv[ac] != NULL; ac++)",
      "1339:  bufsize += strlen(evlog->argv[ac]) + 1;",
      "1341:     if ((buf = malloc(bufsize)) == NULL)",
      "1342:  sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
      "1343:     cp = buf;",
      "1345:     len = strlcpy(cp, evlog->command, bufsize);",
      "1346:     if (len >= bufsize)",
      "1347:  sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "1348:     cp += len;",
      "1349:     bufsize -= len;",
      "1351:     for (ac = 1; evlog->argv[ac] != NULL; ac++) {",
      "1352:  if (bufsize < 2)",
      "1353:      sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "1355:  bufsize--;",
      "1357:  len = strlcpy(cp, evlog->argv[ac], bufsize);",
      "1358:  if (len >= bufsize)",
      "1359:      sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
      "1360:  cp += len;",
      "1361:  bufsize -= len;",
      "1362:     }",
      "1365:     debug_return_str(buf);",
      "1366: }",
      "1373:     char *tofree;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1353:   res = strcmp(sn->u.user, evlog->submituser) == 0;",
      "1354:      break;",
      "1355:  case ST_PATTERN:",
      "1357:      if (rc && rc != REG_NOMATCH) {",
      "1358:   char buf[BUFSIZ];",
      "1359:   regerror(rc, &sn->u.cmdre, buf, sizeof(buf));",
      "1360:   sudo_fatalx(\"%s\", buf);",
      "1361:      }",
      "1362:      res = rc == REG_NOMATCH ? 0 : 1;",
      "1363:      break;",
      "1364:  case ST_FROMDATE:",
      "1365:      res = sudo_timespeccmp(&evlog->submit_time, &sn->u.tstamp, >=);",
      "",
      "[Removed Lines]",
      "1356:      rc = regexec(&sn->u.cmdre, evlog->command, 0, NULL, 0);",
      "",
      "[Added Lines]",
      "1407:      rc = regexec(&sn->u.cmdre, expand_command(evlog, &tofree),",
      "1408:   0, NULL, 0);",
      "1415:      free(tofree);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1380: }",
      "1382: static int",
      "1384: {",
      "1385:     char idbuf[7], *idstr, *cp;",
      "1386:     struct eventlog *evlog = NULL;",
      "1387:     const char *timestr;",
      "1389:     debug_decl(list_session, SUDO_DEBUG_UTIL);",
      "1391:     if ((evlog = iolog_parse_loginfo(-1, log_dir)) == NULL)",
      "",
      "[Removed Lines]",
      "1383: list_session(char *log_dir, regex_t *re, const char *user, const char *tty)",
      "1388:     int ret = -1;",
      "",
      "[Added Lines]",
      "1436: list_session(struct sudo_lbuf *lbuf, char *log_dir, regex_t *re,",
      "1437:     const char *user, const char *tty)",
      "1442:     int i, ret = -1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1417:     }",
      "1419:     timestr = get_timestr(evlog->submit_time.tv_sec, 1);",
      "1436: done:",
      "1437:     eventlog_free(evlog);",
      "1438:     debug_return_int(ret);",
      "1439: }",
      "",
      "[Removed Lines]",
      "1420:     printf(\"%s : %s : \", timestr ? timestr : \"invalid date\", evlog->submituser);",
      "1421:     if (evlog->submithost != NULL)",
      "1422:  printf(\"HOST=%s ; \", evlog->submithost);",
      "1423:     if (evlog->ttyname != NULL)",
      "1424:  printf(\"TTY=%s ; \", evlog->ttyname);",
      "1425:     if (evlog->runchroot != NULL)",
      "1426:  printf(\"CHROOT=%s ; \", evlog->runchroot);",
      "1427:     if (evlog->runcwd != NULL || evlog->cwd != NULL)",
      "1428:  printf(\"CWD=%s ; \", evlog->runcwd ? evlog->runcwd : evlog->cwd);",
      "1429:     printf(\"USER=%s ; \", evlog->runuser);",
      "1430:     if (evlog->rungroup != NULL)",
      "1431:  printf(\"GROUP=%s ; \", evlog->rungroup);",
      "1432:     printf(\"TSID=%s ; COMMAND=%s\\n\", idstr, evlog->command);",
      "1434:     ret = 0;",
      "",
      "[Added Lines]",
      "1474:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s : %s : \",",
      "1475:  timestr ? timestr : \"invalid date\", evlog->submituser);",
      "1476:     if (evlog->submithost != NULL) {",
      "1477:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",",
      "1478:      evlog->submithost);",
      "1479:     }",
      "1480:     if (evlog->ttyname != NULL) {",
      "1481:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \",",
      "1482:      evlog->ttyname);",
      "1483:     }",
      "1484:     if (evlog->runchroot != NULL) {",
      "1485:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",",
      "1486:      evlog->runchroot);",
      "1487:     }",
      "1488:     if (evlog->runcwd != NULL || evlog->cwd != NULL) {",
      "1489:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CWD=%s ; \",",
      "1490:      evlog->runcwd ? evlog->runcwd : evlog->cwd);",
      "1491:     }",
      "1492:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \", evlog->runuser);",
      "1493:     if (evlog->rungroup != NULL) {",
      "1494:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",",
      "1495:      evlog->rungroup);",
      "1496:     }",
      "1497:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TSID=%s ; \", idstr);",
      "1504:     if (evlog->argv != NULL) {",
      "1506:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
      "1507:      \"COMMAND=%s\", evlog->command);",
      "1508:  if (evlog->argv[0] != NULL) {",
      "1509:      for (i = 1; evlog->argv[i] != NULL; i++) {",
      "1510:   sudo_lbuf_append(lbuf, \" \");",
      "1511:   if (strchr(evlog->argv[i], ' ') != NULL) {",
      "1513:       sudo_lbuf_append(lbuf, \"'\");",
      "1514:       sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
      "1515:    \"%s\", evlog->argv[i]);",
      "1516:       sudo_lbuf_append(lbuf, \"'\");",
      "1517:   } else {",
      "1519:       sudo_lbuf_append_esc(lbuf,",
      "1520:    LBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,",
      "1521:    \"%s\", evlog->argv[i]);",
      "1522:   }",
      "1523:      }",
      "1524:  }",
      "1525:     } else {",
      "1527:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"COMMAND=%s\",",
      "1528:      evlog->command);",
      "1529:     }",
      "1531:     if (!sudo_lbuf_error(lbuf)) {",
      "1532:  puts(lbuf->buf);",
      "1533:  ret = 0;",
      "1534:     }",
      "1537:     lbuf->error = 0;",
      "1538:     lbuf->len = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1453:     DIR *d;",
      "1454:     struct dirent *dp;",
      "1455:     struct stat sb;",
      "1456:     size_t sdlen, sessions_len = 0, sessions_size = 0;",
      "1457:     unsigned int i;",
      "1458:     int len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1558:     struct sudo_lbuf lbuf;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1464: #endif",
      "1465:     debug_decl(find_sessions, SUDO_DEBUG_UTIL);",
      "1467:     d = opendir(dir);",
      "1468:     if (d == NULL)",
      "1469:  sudo_fatal(U_(\"unable to open %s\"), dir);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1570:     sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1525:      if (lstat(pathbuf, &sb) == 0 && S_ISREG(sb.st_mode)) {",
      "1526:   pathbuf[sdlen + len - 4] = '\\0';",
      "1528:      } else {",
      "1530:   pathbuf[sdlen + len - 4] = '\\0';",
      "",
      "[Removed Lines]",
      "1527:   list_session(pathbuf, re, user, tty);",
      "",
      "[Added Lines]",
      "1632:   list_session(&lbuf, pathbuf, re, user, tty);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1535:  }",
      "1536:  free(sessions);",
      "1537:     }",
      "1539:     debug_return_int(0);",
      "1540: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1643:     sudo_lbuf_destroy(&lbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d9c0d9034e254a12c298d2c1a8eb4c625492116",
      "candidate_info": {
        "commit_hash": "2d9c0d9034e254a12c298d2c1a8eb4c625492116",
        "repo": "sudo-project/sudo",
        "commit_url": "https://github.com/sudo-project/sudo/commit/2d9c0d9034e254a12c298d2c1a8eb4c625492116",
        "files": [
          "include/sudo_eventlog.h",
          "lib/eventlog/eventlog.c",
          "plugins/sudoers/sudoreplay.c"
        ],
        "message": "Add eventlog_store_sudo() and use it in sudoreplay. This replaces the custom log formatting used by \"sudoreplay -l\".",
        "before_after_code_files": [
          "include/sudo_eventlog.h||include/sudo_eventlog.h",
          "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
          "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
            "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
          ],
          "candidate": [
            "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
            "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
          ]
        }
      },
      "candidate_diff": {
        "include/sudo_eventlog.h||include/sudo_eventlog.h": [
          "File: include/sudo_eventlog.h -> include/sudo_eventlog.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: };",
          "",
          "[Removed Lines]",
          "50: #define EVLOG_RAW 0x01",
          "51: #define EVLOG_MAIL 0x02",
          "52: #define EVLOG_MAIL_ONLY 0x04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: struct json_container;",
          "129: typedef bool (*eventlog_json_callback_t)(struct json_container *, void *);",
          "131: bool eventlog_accept(const struct eventlog *evlog, int flags, eventlog_json_callback_t info_cb, void *info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: struct sudo_lbuf;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133: bool eventlog_alert(const struct eventlog *evlog, int flags, struct timespec *alert_time, const char *reason, const char *errstr);",
          "134: bool eventlog_reject(const struct eventlog *evlog, int flags, const char *reason, eventlog_json_callback_t info_cb, void *info);",
          "135: bool eventlog_store_json(struct json_container *jsonc, const struct eventlog *evlog);",
          "136: size_t eventlog_writeln(FILE *fp, char *line, size_t len, size_t maxlen);",
          "137: void eventlog_free(struct eventlog *evlog);",
          "138: void eventlog_set_type(int type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: bool eventlog_store_sudo(int event_type, const struct eventlog *evlog, struct sudo_lbuf *lbuf);",
          "",
          "---------------"
        ],
        "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c": [
          "File: lib/eventlog/eventlog.c -> lib/eventlog/eventlog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: new_logline(int event_type, int flags, struct eventlog_args *args,",
          "83: {",
          "84:     const struct eventlog_config *evl_conf = eventlog_getconf();",
          "85:     const char *iolog_file;",
          "86:     const char *tty, *tsid = NULL;",
          "87:     char exit_str[(((sizeof(int) * 8) + 2) / 3) + 2];",
          "88:     char sessid[7], offsetstr[64] = \"\";",
          "90:     int i;",
          "91:     debug_decl(new_logline, SUDO_DEBUG_UTIL);",
          "95:     if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {",
          "96:  if (args->reason != NULL) {",
          "97:      if (args->errstr != NULL) {",
          "99:       args->reason, args->errstr);",
          "100:      } else {",
          "102:      }",
          "104:   goto oom;",
          "105:  }",
          "107:     }",
          "",
          "[Removed Lines]",
          "80: static char *",
          "82:     const struct eventlog *evlog)",
          "89:     struct sudo_lbuf lbuf;",
          "93:     sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);",
          "98:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s: %s\",",
          "101:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s\", args->reason);",
          "103:      if (sudo_lbuf_error(&lbuf))",
          "106:  debug_return_str(lbuf.buf);",
          "",
          "[Added Lines]",
          "80: static bool",
          "82:     const struct eventlog *evlog, struct sudo_lbuf *lbuf)",
          "95:   sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s: %s\",",
          "98:   sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s\", args->reason);",
          "100:      if (sudo_lbuf_error(lbuf))",
          "103:  debug_return_bool(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     if (args->reason != NULL) {",
          "149:      args->errstr ? \" : \" : \" ; \");",
          "150:     }",
          "151:     if (args->errstr != NULL) {",
          "153:     }",
          "154:     if (evlog->submithost != NULL && !evl_conf->omit_hostname) {",
          "156:      evlog->submithost);",
          "157:     }",
          "158:     if (tty != NULL) {",
          "160:     }",
          "161:     if (evlog->runchroot != NULL) {",
          "163:      evlog->runchroot);",
          "164:     }",
          "168:     }",
          "169:     if (evlog->runuser != NULL) {",
          "171:      evlog->runuser);",
          "172:     }",
          "173:     if (evlog->rungroup != NULL) {",
          "175:      evlog->rungroup);",
          "176:     }",
          "177:     if (tsid != NULL) {",
          "179:      offsetstr);",
          "180:     }",
          "181:     if (evlog->env_add != NULL && evlog->env_add[0] != NULL) {",
          "183:      evlog->env_add[0]);",
          "184:  for (i = 1; evlog->env_add[i] != NULL; i++) {",
          "186:   evlog->env_add[i]);",
          "187:  }",
          "188:     }",
          "191:      \"COMMAND=%s\", evlog->command);",
          "193:      for (i = 1; evlog->argv[i] != NULL; i++) {",
          "195:   if (strchr(evlog->argv[i], ' ') != NULL) {",
          "199:    \"%s\", evlog->argv[i]);",
          "201:   } else {",
          "204:    LBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,",
          "205:    \"%s\", evlog->argv[i]);",
          "206:   }",
          "",
          "[Removed Lines]",
          "148:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s%s\", args->reason,",
          "152:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s ; \", args->errstr);",
          "155:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",",
          "159:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \", tty);",
          "162:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",",
          "165:     if (evlog->runcwd != NULL) {",
          "166:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"PWD=%s ; \",",
          "167:      evlog->runcwd);",
          "170:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \",",
          "174:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",",
          "178:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TSID=%s%s ; \", tsid,",
          "182:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"ENV=%s\",",
          "185:      sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" %s\",",
          "189:     if (evlog->command != NULL) {",
          "190:  sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
          "192:  if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
          "194:   sudo_lbuf_append(&lbuf, \" \");",
          "197:       sudo_lbuf_append(&lbuf, \"'\");",
          "198:       sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
          "200:       sudo_lbuf_append(&lbuf, \"'\");",
          "203:       sudo_lbuf_append_esc(&lbuf,",
          "",
          "[Added Lines]",
          "145:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s%s\", args->reason,",
          "149:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s ; \", args->errstr);",
          "152:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",",
          "156:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \", tty);",
          "159:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",",
          "162:     if (evlog->runcwd != NULL || evlog->cwd != NULL) {",
          "163:  if (ISSET(flags, EVLOG_CWD)) {",
          "165:      sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CWD=%s ; \",",
          "166:   evlog->runcwd ? evlog->runcwd : evlog->cwd);",
          "167:  } else if (evlog->runcwd != NULL) {",
          "169:      sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"PWD=%s ; \",",
          "170:   evlog->runcwd);",
          "171:  }",
          "174:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \",",
          "178:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",",
          "182:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TSID=%s%s ; \", tsid,",
          "186:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"ENV=%s\",",
          "189:      sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \" %s\",",
          "193:     if (evlog->command != NULL && evlog->argv != NULL) {",
          "195:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
          "197:  if (evlog->argv[0] != NULL) {",
          "199:   sudo_lbuf_append(lbuf, \" \");",
          "202:       sudo_lbuf_append(lbuf, \"'\");",
          "203:       sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
          "205:       sudo_lbuf_append(lbuf, \"'\");",
          "208:       sudo_lbuf_append_esc(lbuf,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:  }",
          "209:  if (event_type == EVLOG_EXIT) {",
          "210:      if (evlog->signal_name != NULL) {",
          "212:       evlog->signal_name);",
          "213:      }",
          "214:      if (evlog->exit_value != -1) {",
          "215:   (void)snprintf(exit_str, sizeof(exit_str), \"%d\",",
          "216:       evlog->exit_value);",
          "218:       exit_str);",
          "219:      }",
          "220:  }",
          "221:     }",
          "224: oom:",
          "226:     sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
          "228: }",
          "230: static void",
          "",
          "[Removed Lines]",
          "211:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; SIGNAL=%s\",",
          "217:   sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; EXIT=%s\",",
          "222:     if (!sudo_lbuf_error(&lbuf))",
          "223:  debug_return_str(lbuf.buf);",
          "225:     sudo_lbuf_destroy(&lbuf);",
          "227:     debug_return_str(NULL);",
          "",
          "[Added Lines]",
          "216:   sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \" ; SIGNAL=%s\",",
          "222:   sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \" ; EXIT=%s\",",
          "226:     } else if (evlog->command != NULL) {",
          "228:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"COMMAND=%s\",",
          "229:      evlog->command);",
          "232:     if (!sudo_lbuf_error(lbuf))",
          "233:  debug_return_bool(true);",
          "236:     debug_return_bool(false);",
          "237: }",
          "239: bool",
          "240: eventlog_store_sudo(int event_type, const struct eventlog *evlog,",
          "241:     struct sudo_lbuf *lbuf)",
          "242: {",
          "243:     struct eventlog_args args = { NULL };",
          "245:     return new_logline(event_type, EVLOG_CWD, &args, evlog, lbuf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1008:     const struct eventlog *evlog)",
          "1009: {",
          "1010:     const struct eventlog_config *evl_conf = eventlog_getconf();",
          "1012:     bool ret = false;",
          "1013:     int pri;",
          "1014:     debug_decl(do_syslog, SUDO_DEBUG_UTIL);",
          "1017:     if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {",
          "1022:  if (ISSET(flags, EVLOG_MAIL)) {",
          "1024:   sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "1025:       \"unable to mail log line\");",
          "1026:      }",
          "1027:      if (ISSET(flags, EVLOG_MAIL_ONLY)) {",
          "1030:      }",
          "1031:  }",
          "1032:     }",
          "",
          "[Removed Lines]",
          "1011:     char *logline = NULL;",
          "1018:  logline = new_logline(event_type, flags, args, evlog);",
          "1019:  if (logline == NULL)",
          "1020:      debug_return_bool(false);",
          "1023:      if (!send_mail(evlog, \"%s\", logline)) {",
          "1028:   free(logline);",
          "1029:   debug_return_bool(true);",
          "",
          "[Added Lines]",
          "1029:     struct sudo_lbuf lbuf;",
          "1034:     sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);",
          "1038:  if (!new_logline(event_type, flags, args, evlog, &lbuf))",
          "1039:      goto done;",
          "1042:      if (!send_mail(evlog, \"%s\", lbuf.buf)) {",
          "1047:   ret = true;",
          "1048:   goto done;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1050:     }",
          "1051:     if (pri == -1) {",
          "1055:     }",
          "1057:     switch (evl_conf->format) {",
          "1058:     case EVLOG_SUDO:",
          "1060:  break;",
          "1061:     case EVLOG_JSON:",
          "1062:  ret = do_syslog_json(pri, event_type, args, evlog);",
          "",
          "[Removed Lines]",
          "1053:  free(logline);",
          "1054:  debug_return_bool(true);",
          "1059:  ret = do_syslog_sudo(pri, logline, evlog);",
          "",
          "[Added Lines]",
          "1072:  ret = true;",
          "1073:  goto done;",
          "1078:  ret = do_syslog_sudo(pri, lbuf.buf, evlog);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1066:      \"unexpected eventlog format %d\", evl_conf->format);",
          "1067:  break;",
          "1068:     }",
          "1071:     debug_return_bool(ret);",
          "1072: }",
          "",
          "[Removed Lines]",
          "1069:     free(logline);",
          "",
          "[Added Lines]",
          "1088: done:",
          "1089:     sudo_lbuf_destroy(&lbuf);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1193:     const struct eventlog *evlog)",
          "1194: {",
          "1195:     const struct eventlog_config *evl_conf = eventlog_getconf();",
          "1196:     bool ret = false;",
          "1198:     debug_decl(do_logfile, SUDO_DEBUG_UTIL);",
          "1201:     if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {",
          "1206:  if (ISSET(flags, EVLOG_MAIL)) {",
          "1208:   sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "1209:       \"unable to mail log line\");",
          "1210:      }",
          "1211:      if (ISSET(flags, EVLOG_MAIL_ONLY)) {",
          "1214:      }",
          "1215:  }",
          "1216:     }",
          "1218:     switch (evl_conf->format) {",
          "1219:     case EVLOG_SUDO:",
          "1221:      args->event_time);",
          "1222:  break;",
          "1223:     case EVLOG_JSON:",
          "",
          "[Removed Lines]",
          "1197:     char *logline = NULL;",
          "1202:  logline = new_logline(event_type, flags, args, evlog);",
          "1203:  if (logline == NULL)",
          "1204:      debug_return_bool(false);",
          "1207:      if (!send_mail(evlog, \"%s\", logline)) {",
          "1212:   free(logline);",
          "1213:   debug_return_bool(true);",
          "1220:  ret = do_logfile_sudo(logline ? logline : args->reason, evlog,",
          "",
          "[Added Lines]",
          "1215:     struct sudo_lbuf lbuf;",
          "1219:     sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);",
          "1223:  if (!new_logline(event_type, flags, args, evlog, &lbuf))",
          "1224:      goto done;",
          "1227:      if (!send_mail(evlog, \"%s\", lbuf.buf)) {",
          "1232:   ret = true;",
          "1233:   goto done;",
          "1240:  ret = do_logfile_sudo(lbuf.buf ? lbuf.buf : args->reason, evlog,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1228:      \"unexpected eventlog format %d\", evl_conf->format);",
          "1229:  break;",
          "1230:     }",
          "1233:     debug_return_bool(ret);",
          "1234: }",
          "",
          "[Removed Lines]",
          "1231:     free(logline);",
          "",
          "[Added Lines]",
          "1252: done:",
          "1253:     sudo_lbuf_destroy(&lbuf);",
          "",
          "---------------"
        ],
        "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c": [
          "File: plugins/sudoers/sudoreplay.c -> plugins/sudoers/sudoreplay.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\",
          "192:     isalnum((unsigned char)(s)[5]) && (s)[6] == '\\0')",
          "202: sudo_dso_public int main(int argc, char *argv[]);",
          "204: int",
          "",
          "[Removed Lines]",
          "194: #define IS_IDLOG(s) ( \\",
          "195:     isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\",
          "196:     (s)[2] == '/' && \\",
          "197:     isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\",
          "198:     (s)[5] == '/' && \\",
          "199:     isalnum((unsigned char)(s)[6]) && isalnum((unsigned char)(s)[7]) && \\",
          "200:     (s)[8] == '\\0')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1436: list_session(struct sudo_lbuf *lbuf, char *log_dir, regex_t *re,",
          "1437:     const char *user, const char *tty)",
          "1438: {",
          "1440:     struct eventlog *evlog = NULL;",
          "1441:     const char *timestr;",
          "1443:     debug_decl(list_session, SUDO_DEBUG_UTIL);",
          "1445:     if ((evlog = iolog_parse_loginfo(-1, log_dir)) == NULL)",
          "",
          "[Removed Lines]",
          "1439:     char idbuf[7], *idstr, *cp;",
          "1442:     int i, ret = -1;",
          "",
          "[Added Lines]",
          "1433:     int ret = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1449:      evlog->runuser == NULL) {",
          "1450:  goto done;",
          "1451:     }",
          "1454:     if (!STAILQ_EMPTY(&search_expr) && !match_expr(&search_expr, evlog, true))",
          "1455:  goto done;",
          "1473:     timestr = get_timestr(evlog->submit_time.tv_sec, 1);",
          "1474:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s : %s : \",",
          "1475:  timestr ? timestr : \"invalid date\", evlog->submituser);",
          "1532:  puts(lbuf->buf);",
          "1533:  ret = 0;",
          "1534:     }",
          "",
          "[Removed Lines]",
          "1458:     cp = log_dir + strlen(session_dir) + 1;",
          "1459:     if (IS_IDLOG(cp)) {",
          "1460:  idbuf[0] = cp[0];",
          "1461:  idbuf[1] = cp[1];",
          "1462:  idbuf[2] = cp[3];",
          "1463:  idbuf[3] = cp[4];",
          "1464:  idbuf[4] = cp[6];",
          "1465:  idbuf[5] = cp[7];",
          "1466:  idbuf[6] = '\\0';",
          "1467:  idstr = idbuf;",
          "1468:     } else {",
          "1470:  idstr = cp;",
          "1471:     }",
          "1476:     if (evlog->submithost != NULL) {",
          "1477:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",",
          "1478:      evlog->submithost);",
          "1479:     }",
          "1480:     if (evlog->ttyname != NULL) {",
          "1481:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \",",
          "1482:      evlog->ttyname);",
          "1483:     }",
          "1484:     if (evlog->runchroot != NULL) {",
          "1485:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",",
          "1486:      evlog->runchroot);",
          "1487:     }",
          "1488:     if (evlog->runcwd != NULL || evlog->cwd != NULL) {",
          "1489:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CWD=%s ; \",",
          "1490:      evlog->runcwd ? evlog->runcwd : evlog->cwd);",
          "1491:     }",
          "1492:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \", evlog->runuser);",
          "1493:     if (evlog->rungroup != NULL) {",
          "1494:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",",
          "1495:      evlog->rungroup);",
          "1496:     }",
          "1497:     sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TSID=%s ; \", idstr);",
          "1504:     if (evlog->argv != NULL) {",
          "1506:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
          "1507:      \"COMMAND=%s\", evlog->command);",
          "1508:  if (evlog->argv[0] != NULL) {",
          "1509:      for (i = 1; evlog->argv[i] != NULL; i++) {",
          "1510:   sudo_lbuf_append(lbuf, \" \");",
          "1511:   if (strchr(evlog->argv[i], ' ') != NULL) {",
          "1513:       sudo_lbuf_append(lbuf, \"'\");",
          "1514:       sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
          "1515:    \"%s\", evlog->argv[i]);",
          "1516:       sudo_lbuf_append(lbuf, \"'\");",
          "1517:   } else {",
          "1519:       sudo_lbuf_append_esc(lbuf,",
          "1520:    LBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,",
          "1521:    \"%s\", evlog->argv[i]);",
          "1522:   }",
          "1523:      }",
          "1524:  }",
          "1525:     } else {",
          "1527:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"COMMAND=%s\",",
          "1528:      evlog->command);",
          "1529:     }",
          "1531:     if (!sudo_lbuf_error(lbuf)) {",
          "",
          "[Added Lines]",
          "1443:     evlog->iolog_file = log_dir + strlen(session_dir) + 1;",
          "1453:     if (eventlog_store_sudo(EVLOG_ACCEPT, evlog, lbuf)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5768d374ccfe1f82a66b61ba2d5195cebc188963",
      "candidate_info": {
        "commit_hash": "5768d374ccfe1f82a66b61ba2d5195cebc188963",
        "repo": "sudo-project/sudo",
        "commit_url": "https://github.com/sudo-project/sudo/commit/5768d374ccfe1f82a66b61ba2d5195cebc188963",
        "files": [
          "include/sudo_json.h",
          "include/sudo_lbuf.h",
          "lib/util/closefrom.c",
          "lib/util/digest.c",
          "lib/util/event_poll.c",
          "lib/util/fatal.c",
          "lib/util/getentropy.c",
          "lib/util/getgrouplist.c",
          "lib/util/gidlist.c",
          "lib/util/json.c",
          "lib/util/lbuf.c",
          "lib/util/mkdir_parents.c",
          "lib/util/parseln.c",
          "lib/util/regex.c",
          "lib/util/regress/fuzz/fuzz_sudo_conf.c",
          "lib/util/regress/hexchar/hexchar_test.c",
          "lib/util/regress/mktemp/mktemp_test.c",
          "lib/util/regress/strtofoo/strtoid_test.c",
          "lib/util/secure_path.c",
          "lib/util/setgroups.c",
          "lib/util/sig2str.c",
          "lib/util/str2sig.c",
          "lib/util/strlcat.c",
          "lib/util/strlcpy.c",
          "lib/util/strtoid.c",
          "lib/util/strtonum.c",
          "lib/util/sudo_conf.c",
          "lib/util/sudo_debug.c",
          "lib/util/ttysize.c"
        ],
        "message": "libsudo_util: silence most -Wconversion warnings.",
        "before_after_code_files": [
          "include/sudo_json.h||include/sudo_json.h",
          "include/sudo_lbuf.h||include/sudo_lbuf.h",
          "lib/util/closefrom.c||lib/util/closefrom.c",
          "lib/util/digest.c||lib/util/digest.c",
          "lib/util/event_poll.c||lib/util/event_poll.c",
          "lib/util/fatal.c||lib/util/fatal.c",
          "lib/util/getentropy.c||lib/util/getentropy.c",
          "lib/util/getgrouplist.c||lib/util/getgrouplist.c",
          "lib/util/gidlist.c||lib/util/gidlist.c",
          "lib/util/json.c||lib/util/json.c",
          "lib/util/lbuf.c||lib/util/lbuf.c",
          "lib/util/mkdir_parents.c||lib/util/mkdir_parents.c",
          "lib/util/parseln.c||lib/util/parseln.c",
          "lib/util/regex.c||lib/util/regex.c",
          "lib/util/regress/fuzz/fuzz_sudo_conf.c||lib/util/regress/fuzz/fuzz_sudo_conf.c",
          "lib/util/regress/hexchar/hexchar_test.c||lib/util/regress/hexchar/hexchar_test.c",
          "lib/util/regress/mktemp/mktemp_test.c||lib/util/regress/mktemp/mktemp_test.c",
          "lib/util/regress/strtofoo/strtoid_test.c||lib/util/regress/strtofoo/strtoid_test.c",
          "lib/util/secure_path.c||lib/util/secure_path.c",
          "lib/util/setgroups.c||lib/util/setgroups.c",
          "lib/util/sig2str.c||lib/util/sig2str.c",
          "lib/util/str2sig.c||lib/util/str2sig.c",
          "lib/util/strlcat.c||lib/util/strlcat.c",
          "lib/util/strlcpy.c||lib/util/strlcpy.c",
          "lib/util/strtoid.c||lib/util/strtoid.c",
          "lib/util/strtonum.c||lib/util/strtonum.c",
          "lib/util/sudo_conf.c||lib/util/sudo_conf.c",
          "lib/util/sudo_debug.c||lib/util/sudo_debug.c",
          "lib/util/ttysize.c||lib/util/ttysize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/sudo_lbuf.h||include/sudo_lbuf.h",
            "lib/util/lbuf.c||lib/util/lbuf.c"
          ],
          "candidate": [
            "include/sudo_lbuf.h||include/sudo_lbuf.h",
            "lib/util/lbuf.c||lib/util/lbuf.c"
          ]
        }
      },
      "candidate_diff": {
        "include/sudo_json.h||include/sudo_json.h": [
          "File: include/sudo_json.h -> include/sudo_json.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     bool quiet;",
          "67: };",
          "71: #define sudo_json_init(_a, _b, _c, _d, _e) sudo_json_init_v2((_a), (_b), (_c), (_d), (_e))",
          "73: sudo_dso_public void sudo_json_free_v1(struct json_container *jsonc);",
          "",
          "[Removed Lines]",
          "69: sudo_dso_public bool sudo_json_init_v1(struct json_container *jsonc, int indent, bool minimal, bool memfatal);",
          "70: sudo_dso_public bool sudo_json_init_v2(struct json_container *jsonc, int indent, bool minimal, bool memfatal, bool quiet);",
          "",
          "[Added Lines]",
          "69: sudo_dso_public bool sudo_json_init_v1(struct json_container *jsonc, unsigned int indent, bool minimal, bool memfatal);",
          "70: sudo_dso_public bool sudo_json_init_v2(struct json_container *jsonc, unsigned int indent, bool minimal, bool memfatal, bool quiet);",
          "",
          "---------------"
        ],
        "include/sudo_lbuf.h||include/sudo_lbuf.h": [
          "File: include/sudo_lbuf.h -> include/sudo_lbuf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define LBUF_ESC_BLANK 0x02",
          "42: #define LBUF_ESC_QUOTE 0x04",
          "45: sudo_dso_public void sudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf);",
          "46: sudo_dso_public bool sudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...) sudo_printflike(2, 3);",
          "47: sudo_dso_public bool sudo_lbuf_append_esc_v1(struct sudo_lbuf *lbuf, int flags, const char *fmt, ...) sudo_printflike(3, 4);",
          "",
          "[Removed Lines]",
          "44: sudo_dso_public void sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output, int indent, const char *continuation, int cols);",
          "",
          "[Added Lines]",
          "44: sudo_dso_public void sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output, unsigned int indent, const char *continuation, int cols);",
          "",
          "---------------"
        ],
        "lib/util/closefrom.c||lib/util/closefrom.c": [
          "File: lib/util/closefrom.c -> lib/util/closefrom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     if (fcntl(lowfd, F_CLOSEM, 0) != -1)",
          "112:  return;",
          "113: #elif defined(HAVE_CLOSE_RANGE)",
          "115:  return;",
          "116: #elif defined(HAVE_PROC_PIDINFO)",
          "117:     len = proc_pidinfo(pid, PROC_PIDLISTFDS, 0, NULL, 0);",
          "",
          "[Removed Lines]",
          "114:     if (close_range(lowfd, ~0U, 0) != -1)",
          "",
          "[Added Lines]",
          "114:     if (close_range((unsigned int)lowfd, ~0U, 0) != -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:  struct dirent *dent;",
          "167:  while ((dent = readdir(dirp)) != NULL) {",
          "168:      const char *errstr;",
          "170:      if (errstr == NULL && fd != dirfd(dirp)) {",
          "171:   (void)closefrom_close(fd);",
          "172:      }",
          "",
          "[Removed Lines]",
          "169:      int fd = sudo_strtonum(dent->d_name, lowfd, INT_MAX, &errstr);",
          "",
          "[Added Lines]",
          "169:      int fd = (int)sudo_strtonum(dent->d_name, lowfd, INT_MAX, &errstr);",
          "",
          "---------------"
        ],
        "lib/util/digest.c||lib/util/digest.c": [
          "File: lib/util/digest.c -> lib/util/digest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     debug_decl(sudo_digest_alloc, SUDO_DEBUG_UTIL);",
          "90:     struct digest_function *func = NULL;",
          "91:     struct sudo_digest *dig;",
          "94:     for (i = 0; digest_functions[i].digest_len != 0; i++) {",
          "95:  if (digest_type == i) {",
          "",
          "[Removed Lines]",
          "92:     int i;",
          "",
          "[Added Lines]",
          "92:     unsigned int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: sudo_digest_getlen_v1(unsigned int digest_type)",
          "135: {",
          "136:     debug_decl(sudo_digest_getlen, SUDO_DEBUG_UTIL);",
          "139:     for (i = 0; digest_functions[i].digest_len != 0; i++) {",
          "140:  if (digest_type == i)",
          "",
          "[Removed Lines]",
          "137:     int i;",
          "",
          "[Added Lines]",
          "137:     unsigned int i;",
          "",
          "---------------"
        ],
        "lib/util/event_poll.c||lib/util/event_poll.c": [
          "File: lib/util/event_poll.c -> lib/util/event_poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <sys/resource.h>",
          "29: #include <poll.h>",
          "30: #include <time.h>",
          "32: #include \"sudo_compat.h\"",
          "",
          "[Removed Lines]",
          "28: #include <stdlib.h>",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "30: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #include \"sudo_debug.h\"",
          "36: #include \"sudo_event.h\"",
          "38: int",
          "39: sudo_ev_base_alloc_impl(struct sudo_event_base *base)",
          "40: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #if defined(OPEN_MAX) && OPEN_MAX > 256",
          "40: # define SUDO_OPEN_MAX  OPEN_MAX",
          "41: #else",
          "42: # define SUDO_OPEN_MAX  256",
          "43: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     base->pfd_high = -1;",
          "45:     base->pfd_max = 32;",
          "47:     if (base->pfds == NULL) {",
          "48:  sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "49:      \"%s: unable to allocate %d pollfds\", __func__, base->pfd_max);",
          "",
          "[Removed Lines]",
          "46:     base->pfds = reallocarray(NULL, base->pfd_max, sizeof(struct pollfd));",
          "",
          "[Added Lines]",
          "53:     base->pfds = reallocarray(NULL, (size_t)base->pfd_max, sizeof(struct pollfd));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     if (nofile_max == -1) {",
          "76:  struct rlimit rlim;",
          "77:  if (getrlimit(RLIMIT_NOFILE, &rlim) == 0) {",
          "79:  }",
          "80:     }",
          "",
          "[Removed Lines]",
          "78:      nofile_max = rlim.rlim_cur;",
          "",
          "[Added Lines]",
          "85:      nofile_max = (int)rlim.rlim_cur;",
          "86:  } else {",
          "87:      nofile_max = SUDO_OPEN_MAX;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:  }",
          "96:  sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,",
          "97:      \"%s: pfd_max %d -> %d\", __func__, base->pfd_max, new_max);",
          "99:  if (pfds == NULL) {",
          "100:      sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "101:   \"%s: unable to allocate %d pollfds\", __func__, new_max);",
          "",
          "[Removed Lines]",
          "98:  pfds = reallocarray(base->pfds, new_max, sizeof(struct pollfd));",
          "",
          "[Added Lines]",
          "107:  pfds = reallocarray(base->pfds, (size_t)new_max, sizeof(struct pollfd));",
          "",
          "---------------"
        ],
        "lib/util/fatal.c||lib/util/fatal.c": [
          "File: lib/util/fatal.c -> lib/util/fatal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   buflen = vsnprintf(static_buf, sizeof(static_buf), fmt, ap2);",
          "207:   va_end(ap2);",
          "208:   if (buflen >= ssizeof(static_buf)) {",
          "213:    buf = static_buf;",
          "214:   }",
          "219:         }",
          "220:         if (errstr != NULL) {",
          "221:      msgs[nmsgs].msg_type = SUDO_CONV_ERROR_MSG;",
          "",
          "[Removed Lines]",
          "209:       buf = malloc(++buflen);",
          "210:       if (buf != NULL)",
          "211:    (void)vsnprintf(buf, buflen, fmt, ap);",
          "212:       else",
          "215:   msgs[nmsgs].msg_type = SUDO_CONV_ERROR_MSG;",
          "216:   msgs[nmsgs++].msg = \": \";",
          "217:   msgs[nmsgs].msg_type = SUDO_CONV_ERROR_MSG;",
          "218:   msgs[nmsgs++].msg = buf;",
          "",
          "[Added Lines]",
          "210:       if (vasprintf(&buf, fmt, ap) == -1)",
          "213:   if (buflen > 0) {",
          "214:       msgs[nmsgs].msg_type = SUDO_CONV_ERROR_MSG;",
          "215:       msgs[nmsgs++].msg = \": \";",
          "216:       msgs[nmsgs].msg_type = SUDO_CONV_ERROR_MSG;",
          "217:       msgs[nmsgs++].msg = buf;",
          "218:   }",
          "",
          "---------------"
        ],
        "lib/util/getentropy.c||lib/util/getentropy.c": [
          "File: lib/util/getentropy.c -> lib/util/getentropy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   return (ret);",
          "148: #ifdef HAVE_OPENSSL",
          "150:   return (0);",
          "151: #endif",
          "",
          "[Removed Lines]",
          "149:  if (RAND_bytes(buf, len) == 1)",
          "",
          "[Added Lines]",
          "149:  if (RAND_bytes(buf, (int)len) == 1)",
          "",
          "---------------"
        ],
        "lib/util/getgrouplist.c||lib/util/getgrouplist.c": [
          "File: lib/util/getgrouplist.c -> lib/util/getgrouplist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #endif",
          "74:     int ngroups;",
          "75: #ifndef HAVE_GETGROUPLIST_2",
          "77: #endif",
          "78:     debug_decl(sudo_getgrouplist2, SUDO_DEBUG_UTIL);",
          "",
          "[Removed Lines]",
          "76:     int grpsize, tries;",
          "",
          "[Added Lines]",
          "76:     long grpsize;",
          "77:     int tries;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     debug_return_int(0);",
          "89: #else",
          "92:  grpsize = NGROUPS_MAX;",
          "",
          "[Removed Lines]",
          "90:     grpsize = (int)sysconf(_SC_NGROUPS_MAX);",
          "91:     if (grpsize < 0)",
          "",
          "[Added Lines]",
          "91:     grpsize = sysconf(_SC_NGROUPS_MAX);",
          "92:     if (grpsize < 0 || grpsize > INT_MAX)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     for (tries = 0; tries < 10; tries++) {",
          "99:  free(groups);",
          "101:  if (groups == NULL)",
          "102:      debug_return_int(-1);",
          "104:  if (getgrouplist(name, basegid, groups, &ngroups) != -1) {",
          "",
          "[Removed Lines]",
          "100:  groups = reallocarray(NULL, grpsize, sizeof(*groups));",
          "103:  ngroups = grpsize;",
          "",
          "[Added Lines]",
          "101:  groups = reallocarray(NULL, (size_t)grpsize, sizeof(*groups));",
          "104:  ngroups = (int)grpsize;",
          "",
          "---------------"
        ],
        "lib/util/gidlist.c||lib/util/gidlist.c": [
          "File: lib/util/gidlist.c -> lib/util/gidlist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  ngids++;",
          "63:     if (ngids != 0) {",
          "65:  if (gids == NULL) {",
          "66:      sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
          "67:      debug_return_int(-1);",
          "",
          "[Removed Lines]",
          "64:  gids = reallocarray(NULL, ngids, sizeof(GETGROUPS_T));",
          "",
          "[Added Lines]",
          "64:  gids = reallocarray(NULL, (size_t)ngids, sizeof(GETGROUPS_T));",
          "",
          "---------------"
        ],
        "lib/util/json.c||lib/util/json.c": [
          "File: lib/util/json.c -> lib/util/json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     }",
          "111:     memcpy(jsonc->buf + jsonc->buflen, str, len);",
          "113:     jsonc->buf[jsonc->buflen] = '\\0';",
          "115:     debug_return_bool(true);",
          "",
          "[Removed Lines]",
          "112:     jsonc->buflen += len;",
          "",
          "[Added Lines]",
          "112:     jsonc->buflen += (unsigned int)len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: json_append_string(struct json_container *jsonc, const char *str)",
          "124: {",
          "125:     const char hex[] = \"0123456789abcdef\";",
          "127:     debug_decl(json_append_string, SUDO_DEBUG_UTIL);",
          "129:     if (!json_append_buf(jsonc, \"\\\"\"))",
          "",
          "[Removed Lines]",
          "126:     unsigned char ch;",
          "",
          "[Added Lines]",
          "126:     char ch;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:      ch = 't';",
          "158:      break;",
          "159:  default:",
          "",
          "[Removed Lines]",
          "160:      if (iscntrl(ch)) {",
          "",
          "[Added Lines]",
          "160:      if (iscntrl((unsigned char)ch)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180: }",
          "182: bool",
          "185: {",
          "186:     debug_decl(sudo_json_init, SUDO_DEBUG_UTIL);",
          "",
          "[Removed Lines]",
          "183: sudo_json_init_v2(struct json_container *jsonc, int indent, bool minimal,",
          "184:     bool memfatal, bool quiet)",
          "",
          "[Added Lines]",
          "183: sudo_json_init_v2(struct json_container *jsonc, unsigned int indent,",
          "184:     bool minimal, bool memfatal, bool quiet)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208: }",
          "210: bool",
          "213: {",
          "214:     return sudo_json_init_v2(jsonc, indent, minimal, memfatal, false);",
          "215: }",
          "",
          "[Removed Lines]",
          "211: sudo_json_init_v1(struct json_container *jsonc, int indent, bool minimal,",
          "212:     bool memfatal)",
          "",
          "[Added Lines]",
          "211: sudo_json_init_v1(struct json_container *jsonc, unsigned int indent,",
          "212:     bool minimal, bool memfatal)",
          "",
          "---------------"
        ],
        "lib/util/lbuf.c||lib/util/lbuf.c": [
          "File: lib/util/lbuf.c -> lib/util/lbuf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: void",
          "38: sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output,",
          "40: {",
          "41:     debug_decl(sudo_lbuf_init, SUDO_DEBUG_UTIL);",
          "43:     lbuf->output = output;",
          "44:     lbuf->continuation = continuation;",
          "45:     lbuf->indent = indent;",
          "47:     lbuf->error = 0;",
          "48:     lbuf->len = 0;",
          "49:     lbuf->size = 0;",
          "",
          "[Removed Lines]",
          "39:     int indent, const char *continuation, int cols)",
          "46:     lbuf->cols = cols;",
          "",
          "[Added Lines]",
          "39:     unsigned int indent, const char *continuation, int cols)",
          "43:     if (cols < 0)",
          "44:  cols = 0;",
          "49:     lbuf->cols = (unsigned short)cols;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     }",
          "82:     if (lbuf->len + extra + 1 > lbuf->size) {",
          "84:  char *new_buf;",
          "86:  if (new_size > UINT_MAX || new_size < lbuf->size) {",
          "",
          "[Removed Lines]",
          "83:  size_t new_size = sudo_pow2_roundup(lbuf->len + extra + 1);",
          "",
          "[Added Lines]",
          "86:  const size_t size = lbuf->len + extra + 1;",
          "87:  size_t new_size = sudo_pow2_roundup(size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:      debug_return_bool(false);",
          "100:  }",
          "101:  lbuf->buf = new_buf;",
          "103:     }",
          "104:     debug_return_bool(true);",
          "105: }",
          "",
          "[Removed Lines]",
          "102:  lbuf->size = new_size;",
          "",
          "[Added Lines]",
          "106:  lbuf->size = (unsigned int)new_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114: {",
          "118:     switch (len) {",
          "119:     case 5:",
          "122:  FALLTHROUGH;",
          "123:     case 4:",
          "126:  FALLTHROUGH;",
          "127:     case 3:",
          "129:  buf[1] = '0';",
          "130:  buf[0] = '#';",
          "131:  break;",
          "",
          "[Removed Lines]",
          "112: static int",
          "113: escape(unsigned char ch, char *buf)",
          "115:     const int len = ch < 0100 ? (ch < 010 ? 3 : 4) : 5;",
          "120:  buf[4] = (ch & 7) + '0';",
          "121:  ch >>= 3;",
          "124:  buf[3] = (ch & 7) + '0';",
          "125:  ch >>= 3;",
          "128:  buf[2] = (ch & 7) + '0';",
          "",
          "[Added Lines]",
          "116: static unsigned int",
          "117: escape(char ch, char *buf)",
          "119:     unsigned char uch = (unsigned char)ch;",
          "120:     const unsigned int len = uch < 0100 ? (uch < 010 ? 3 : 4) : 5;",
          "125:  buf[4] = (uch & 7) + '0';",
          "126:  uch >>= 3;",
          "129:  buf[3] = (uch & 7) + '0';",
          "130:  uch >>= 3;",
          "133:  buf[2] = (uch & 7) + '0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:      if ((s = va_arg(ap, char *)) == NULL)",
          "234:   s = \"(NULL)\";",
          "235:      while ((cp = strpbrk(s, set)) != NULL) {",
          "237:   if (!sudo_lbuf_expand(lbuf, len + 2))",
          "238:       goto done;",
          "239:   memcpy(lbuf->buf + lbuf->len, s, len);",
          "",
          "[Removed Lines]",
          "236:   len = (int)(cp - s);",
          "",
          "[Added Lines]",
          "241:   len = (unsigned int)(cp - s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:   s = cp + 1;",
          "244:      }",
          "245:      if (*s != '\\0') {",
          "247:   if (!sudo_lbuf_expand(lbuf, len))",
          "248:       goto done;",
          "249:   memcpy(lbuf->buf + lbuf->len, s, len);",
          "",
          "[Removed Lines]",
          "246:   len = strlen(s);",
          "",
          "[Added Lines]",
          "251:   len = (unsigned int)strlen(s);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:     bool ret = false;",
          "281:     va_list ap;",
          "282:     const char *s;",
          "284:     debug_decl(sudo_lbuf_append, SUDO_DEBUG_UTIL);",
          "286:     if (sudo_lbuf_error(lbuf))",
          "",
          "[Removed Lines]",
          "283:     size_t len;",
          "",
          "[Added Lines]",
          "288:     unsigned int len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:      if (num_end[0] == '$' && num_end[1] == 's' && num_end > num_start) {",
          "300:   char numbuf[(((sizeof(int) * 8) + 2) / 3) + 2];",
          "302:   if (len >= sizeof(numbuf)) {",
          "303:       errno = EINVAL;",
          "304:       sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "",
          "[Removed Lines]",
          "301:   len = num_end - num_start;",
          "",
          "[Added Lines]",
          "306:   len = (unsigned int)(num_end - num_start);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "317:       }",
          "318:       if ((s = va_arg(arg_copy, char *)) == NULL)",
          "319:    s = \"(NULL)\";",
          "321:       if (!sudo_lbuf_expand(lbuf, len)) {",
          "322:    va_end(arg_copy);",
          "323:    goto done;",
          "",
          "[Removed Lines]",
          "320:       len = strlen(s);",
          "",
          "[Added Lines]",
          "325:       len = (unsigned int)strlen(s);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "333:  if (fmt[0] == '%' && fmt[1] == 's') {",
          "334:      if ((s = va_arg(ap, char *)) == NULL)",
          "335:   s = \"(NULL)\";",
          "337:      if (!sudo_lbuf_expand(lbuf, len))",
          "338:   goto done;",
          "339:      memcpy(lbuf->buf + lbuf->len, s, len);",
          "",
          "[Removed Lines]",
          "336:      len = strlen(s);",
          "",
          "[Added Lines]",
          "341:      len = (unsigned int)strlen(s);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "383:     have = lbuf->cols;",
          "384:     while (cp != NULL && *cp != '\\0') {",
          "385:  char *ep = NULL;",
          "388:  if (need > have) {",
          "390:      if ((ep = memrchr(cp, ' ', have)) == NULL)",
          "391:   ep = memchr(cp + have, ' ', need - have);",
          "392:      if (ep != NULL)",
          "394:  }",
          "395:  if (cp != line) {",
          "396:      if (is_comment) {",
          "",
          "[Removed Lines]",
          "386:  size_t need = len - (cp - line);",
          "393:   need = (ep - cp);",
          "",
          "[Added Lines]",
          "391:  size_t need = len - (size_t)(cp - line);",
          "398:   need = (size_t)(ep - cp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:      lbuf->output(\"\\n\");",
          "460:      cp++;",
          "461:  } else {",
          "463:      if ((ep = memchr(cp, '\\n', len)) != NULL)",
          "464:   len = (size_t)(ep - cp);",
          "465:      if (len)",
          "",
          "[Removed Lines]",
          "462:      len = lbuf->len - (cp - lbuf->buf);",
          "",
          "[Added Lines]",
          "467:      len = lbuf->len - (size_t)(cp - lbuf->buf);",
          "",
          "---------------"
        ],
        "lib/util/mkdir_parents.c||lib/util/mkdir_parents.c": [
          "File: lib/util/mkdir_parents.c -> lib/util/mkdir_parents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:       goto bad;",
          "143:   }",
          "146:       close(dfd);",
          "147:       goto bad;",
          "148:   }",
          "",
          "[Removed Lines]",
          "145:   if (!is_dir(dfd, path, ep - path, quiet)) {",
          "",
          "[Added Lines]",
          "145:   if (!is_dir(dfd, path, (int)(ep - path), quiet)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:      }",
          "165:  } else {",
          "168:   close(dfd);",
          "169:   goto bad;",
          "170:      }",
          "",
          "[Removed Lines]",
          "167:      if (!is_dir(dfd, path, ep - path, quiet)) {",
          "",
          "[Added Lines]",
          "167:      if (!is_dir(dfd, path, (int)(ep - path), quiet)) {",
          "",
          "---------------"
        ],
        "lib/util/parseln.c||lib/util/parseln.c": [
          "File: lib/util/parseln.c -> lib/util/parseln.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: ssize_t",
          "49: sudo_parseln_v2(char **bufp, size_t *bufsizep, unsigned int *lineno, FILE *fp, int flags)",
          "50: {",
          "53:     char *cp, *line = NULL;",
          "54:     bool continued, comment;",
          "55:     debug_decl(sudo_parseln, SUDO_DEBUG_UTIL);",
          "",
          "[Removed Lines]",
          "51:     size_t linesize = 0, total = 0;",
          "52:     ssize_t len;",
          "",
          "[Added Lines]",
          "51:     ssize_t len, total = 0;",
          "52:     size_t bufsize, linesize = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  for (cp = line; isblank((unsigned char)*cp); cp++)",
          "91:      len--;",
          "96:      void *newbuf;",
          "100:   errno = ENOMEM;",
          "101:   sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,",
          "",
          "[Removed Lines]",
          "93:  if (*bufp == NULL || total + len >= *bufsizep) {",
          "94:      const size_t size = total + len + 1;",
          "95:      const size_t newsize = sudo_pow2_roundup(size);",
          "98:      if (newsize < size) {",
          "",
          "[Added Lines]",
          "93:  bufsize = (size_t)(total + len + 1);",
          "94:  if (*bufp == NULL || bufsize > *bufsizep) {",
          "95:      const size_t newsize = sudo_pow2_roundup(bufsize);",
          "98:      if (newsize < bufsize) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  }",
          "118:  total += len;",
          "119:     } while (continued);",
          "120:     free(line);",
          "",
          "[Removed Lines]",
          "117:  memcpy(*bufp + total, cp, len + 1);",
          "",
          "[Added Lines]",
          "117:  memcpy(*bufp + total, cp, (size_t)(len + 1));",
          "",
          "---------------"
        ],
        "lib/util/regex.c||lib/util/regex.c": [
          "File: lib/util/regex.c -> lib/util/regex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: parse_num(const char *str, char **endp)",
          "47: {",
          "48:     debug_decl(check_pattern, SUDO_DEBUG_UTIL);",
          "54:     while ((ch = *str++) != '\\0') {",
          "56:      ch = *str++;",
          "58:      break;",
          "59:  ch -= '0';",
          "60:  if (result > lastval || (result == lastval && ch > remainder)) {",
          "",
          "[Removed Lines]",
          "49:     const unsigned int lastval = INT_MAX / 10;",
          "50:     const unsigned int remainder = INT_MAX % 10;",
          "51:     unsigned int result = 0;",
          "52:     unsigned char ch;",
          "55:  if (ch == '\\\\' && isdigit((unsigned int)str[0]))",
          "57:  else if (!isdigit(ch))",
          "",
          "[Added Lines]",
          "49:     const int lastval = INT_MAX / 10;",
          "50:     const int remainder = INT_MAX % 10;",
          "51:     int result = 0;",
          "52:     char ch;",
          "55:  if (ch == '\\\\' && isdigit((unsigned char)str[0]))",
          "57:  else if (!isdigit((unsigned char)ch))",
          "",
          "---------------"
        ],
        "lib/util/regress/fuzz/fuzz_sudo_conf.c||lib/util/regress/fuzz/fuzz_sudo_conf.c": [
          "File: lib/util/regress/fuzz/fuzz_sudo_conf.c -> lib/util/regress/fuzz/fuzz_sudo_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     struct sudo_conf_debug *debug_spec;",
          "74:     struct sudo_debug_file *debug_file;",
          "75:     struct plugin_info *info;",
          "77:     int fd;",
          "79:     initprogname(\"fuzz_sudo_conf\");",
          "",
          "[Removed Lines]",
          "76:     size_t nwritten;",
          "",
          "[Added Lines]",
          "76:     ssize_t nwritten;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     if (fd == -1)",
          "86:  return 0;",
          "87:     nwritten = write(fd, data, size);",
          "89:  close(fd);",
          "90:  return 0;",
          "91:     }",
          "",
          "[Removed Lines]",
          "88:     if (nwritten != size) {",
          "",
          "[Added Lines]",
          "88:     if (nwritten == -1) {",
          "",
          "---------------"
        ],
        "lib/util/regress/hexchar/hexchar_test.c||lib/util/regress/hexchar/hexchar_test.c": [
          "File: lib/util/regress/hexchar/hexchar_test.c -> lib/util/regress/hexchar/hexchar_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     ntests = 256 + 256 + 3;",
          "50:     for (i = 0; i < 256; i++) {",
          "52:  test_data[i].value = i;",
          "",
          "[Removed Lines]",
          "49:     test_data = calloc(sizeof(*test_data), ntests);",
          "",
          "[Added Lines]",
          "49:     test_data = calloc(sizeof(*test_data), (size_t)ntests);",
          "",
          "---------------"
        ],
        "lib/util/regress/mktemp/mktemp_test.c||lib/util/regress/mktemp/mktemp_test.c": [
          "File: lib/util/regress/mktemp/mktemp_test.c -> lib/util/regress/mktemp/mktemp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static int",
          "54: check(int fd, char const *kind, char const *path, char const *prefix,",
          "56: {",
          "57:  struct stat sb, fsb;",
          "58:  char const *p;",
          "",
          "[Removed Lines]",
          "55:     size_t plen, char const *suffix, size_t slen, int tlen)",
          "",
          "[Added Lines]",
          "55:     size_t plen, char const *suffix, size_t slen, size_t tlen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: }",
          "89: static void",
          "91: {",
          "92:  size_t plen = strlen(prefix);",
          "93:  int fd, tries, ok;",
          "",
          "[Removed Lines]",
          "90: try_mkdtemp(char *p, char const *prefix, int len)",
          "",
          "[Added Lines]",
          "90: try_mkdtemp(char *p, char const *prefix, size_t len)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106: }",
          "108: static void",
          "110: {",
          "111:  size_t plen = strlen(prefix);",
          "112:  size_t slen = strlen(suffix);",
          "",
          "[Removed Lines]",
          "109: try_mkstemps(char *p, char const *prefix, int len, char const *suffix)",
          "",
          "[Added Lines]",
          "109: try_mkstemps(char *p, char const *prefix, size_t len, char const *suffix)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:   memcpy(p, prefix, plen);",
          "117:   memset(p + plen, 'X', len);",
          "118:   memcpy(p + plen + len, suffix, slen + 1);",
          "120:   ok = check(fd, \"mkstemp\", p, prefix, plen, suffix, slen, len);",
          "121:   close(fd);",
          "122:   unlink(p);",
          "",
          "[Removed Lines]",
          "119:   fd = mkstemps(p, slen);",
          "",
          "[Added Lines]",
          "119:   fd = mkstemps(p, (int)slen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: {",
          "132:  char cwd[PATH_MAX + 1];",
          "133:  char *p;",
          "138:  initprogname(argc > 0 ? argv[0] : \"mktemp_test\");",
          "",
          "[Removed Lines]",
          "134:  size_t clen;",
          "135:  long pg;",
          "136:  int ch, i;",
          "",
          "[Added Lines]",
          "134:  size_t clen, i;",
          "135:  size_t pg;",
          "136:  int ch;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150:  argc -= optind;",
          "151:  argv += optind;",
          "154:  if (getcwd(cwd, sizeof cwd - 1) == NULL)",
          "155:   sudo_fatal(\"getcwd\");",
          "156:  clen = strlen(cwd);",
          "",
          "[Removed Lines]",
          "153:  pg = sysconf(_SC_PAGESIZE);",
          "",
          "[Added Lines]",
          "153:  pg = (size_t)sysconf(_SC_PAGESIZE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159: #ifdef MAP_ANON",
          "160:  p = mmap(NULL, pg * 3, PROT_READ | PROT_WRITE, MAP_PRIVATE|MAP_ANON, -1, 0);",
          "161: #else",
          "164:   sudo_fatal(\"/dev/zero\");",
          "166: #endif",
          "167:  if (p == MAP_FAILED)",
          "168:   sudo_fatal(\"mmap\");",
          "",
          "[Removed Lines]",
          "162:  i = open(\"/dev/zero\", O_RDWR);",
          "163:  if (i == -1)",
          "165:  p = mmap(NULL, pg * 3, PROT_READ | PROT_WRITE, MAP_PRIVATE, i, 0);",
          "",
          "[Added Lines]",
          "162:  ch = open(\"/dev/zero\", O_RDWR);",
          "163:  if (ch == -1)",
          "165:  p = mmap(NULL, pg * 3, PROT_READ | PROT_WRITE, MAP_PRIVATE, ch, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "170:   sudo_fatal(\"mprotect\");",
          "171:  p += pg;",
          "176:   try_mkdtemp(p, \"\", i);",
          "",
          "[Removed Lines]",
          "173:  i = MAX_TEMPLATE_LEN + 1;",
          "174:  while (i-- > 0) {",
          "",
          "[Added Lines]",
          "173:  for (i = MAX_TEMPLATE_LEN; i != 0; i--) {",
          "",
          "---------------"
        ],
        "lib/util/regress/strtofoo/strtoid_test.c||lib/util/regress/strtofoo/strtoid_test.c": [
          "File: lib/util/regress/strtofoo/strtoid_test.c -> lib/util/regress/strtofoo/strtoid_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     { \"4294967295\", 0, NULL, NULL, EINVAL },",
          "44:     { \"4294967296\", 0, NULL, NULL, ERANGE },",
          "45:     { \"-2147483649\", 0, NULL, NULL, ERANGE },",
          "47: #if SIZEOF_ID_T != SIZEOF_LONG_LONG",
          "48:     { \"-2\", (id_t)4294967294U, NULL, NULL, 0 },",
          "49: #endif",
          "",
          "[Removed Lines]",
          "46:     { \"-2\", -2, NULL, NULL, 0 },",
          "",
          "[Added Lines]",
          "46:     { \"-2\", (id_t)-2, NULL, NULL, 0 },",
          "",
          "---------------"
        ],
        "lib/util/secure_path.c||lib/util/secure_path.c": [
          "File: lib/util/secure_path.c -> lib/util/secure_path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: static int",
          "120:     struct stat *sb, int *error)",
          "121: {",
          "122:     struct stat stat_buf;",
          "",
          "[Removed Lines]",
          "119: sudo_secure_open(const char *path, int type, uid_t uid, gid_t gid,",
          "",
          "[Added Lines]",
          "119: sudo_secure_open(const char *path, unsigned int type, uid_t uid, gid_t gid,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     for (cp = sudo_strsplit(path, path_end, \":\", &ep);",
          "180:  cp != NULL; cp = sudo_strsplit(NULL, path_end, \":\", &ep)) {",
          "183:  if (len >= namesize) {",
          "185:      memcpy(name, cp, namesize - 1);",
          "",
          "[Removed Lines]",
          "182:  const size_t len = ep - cp;",
          "",
          "[Added Lines]",
          "182:  const size_t len = (size_t)(ep - cp);",
          "",
          "---------------"
        ],
        "lib/util/setgroups.c||lib/util/setgroups.c": [
          "File: lib/util/setgroups.c -> lib/util/setgroups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: int",
          "37: sudo_setgroups_v1(int ngids, const GETGROUPS_T *gids)",
          "38: {",
          "40:     debug_decl(sudo_setgroups, SUDO_DEBUG_UTIL);",
          "42:     ret = setgroups(ngids, (GETGROUPS_T *)gids);",
          "43:     if (ret == -1 && errno == EINVAL) {",
          "46:  if (maxgids == -1)",
          "47:      maxgids = NGROUPS_MAX;",
          "48:  if (ngids > maxgids)",
          "",
          "[Removed Lines]",
          "39:     int maxgids, ret;",
          "45:  maxgids = (int)sysconf(_SC_NGROUPS_MAX);",
          "",
          "[Added Lines]",
          "39:     long maxgids;",
          "40:     int ret;",
          "43:     if (ngids < 0)",
          "44:  debug_return_int(-1);",
          "49:  maxgids = sysconf(_SC_NGROUPS_MAX);",
          "",
          "---------------"
        ],
        "lib/util/sig2str.c||lib/util/sig2str.c": [
          "File: lib/util/sig2str.c -> lib/util/sig2str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:      if (islower((unsigned char)signame[0])) {",
          "90:   size_t i;",
          "91:   for (i = 0; signame[i] != '\\0'; i++)",
          "93:      }",
          "94:      return 0;",
          "95:  }",
          "",
          "[Removed Lines]",
          "92:       signame[i] = toupper((unsigned char)signame[i]);",
          "",
          "[Added Lines]",
          "92:       signame[i] = (char)toupper((unsigned char)signame[i]);",
          "",
          "---------------"
        ],
        "lib/util/str2sig.c||lib/util/str2sig.c": [
          "File: lib/util/str2sig.c -> lib/util/str2sig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     if (isdigit((unsigned char)signame[0])) {",
          "98:  if (errstr != NULL)",
          "99:      return -1;",
          "",
          "[Removed Lines]",
          "97:  signo = sudo_strtonum(signame, 0, NSIG - 1, &errstr);",
          "",
          "[Added Lines]",
          "97:  signo = (int)sudo_strtonum(signame, 0, NSIG - 1, &errstr);",
          "",
          "---------------"
        ],
        "lib/util/strlcat.c||lib/util/strlcat.c": [
          "File: lib/util/strlcat.c -> lib/util/strlcat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  while (n-- != 0 && *dst != '\\0')",
          "52:   dst++;",
          "54:  n = dsize - dlen;",
          "56:  if (n-- == 0)",
          "",
          "[Removed Lines]",
          "53:  dlen = dst - odst;",
          "",
          "[Added Lines]",
          "53:  dlen = (size_t)(dst - odst);",
          "",
          "---------------"
        ],
        "lib/util/strlcpy.c||lib/util/strlcpy.c": [
          "File: lib/util/strlcpy.c -> lib/util/strlcpy.c"
        ],
        "lib/util/strtoid.c||lib/util/strtoid.c": [
          "File: lib/util/strtoid.c -> lib/util/strtoid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     id_t ret;",
          "75:     debug_decl(sudo_strtoid, SUDO_DEBUG_UTIL);",
          "78:     if (errstr == NULL) {",
          "",
          "[Removed Lines]",
          "77:     ret = sudo_strtonumx(p, INT_MIN, UINT_MAX, &ep, &errstr);",
          "",
          "[Added Lines]",
          "77:     ret = (id_t)sudo_strtonumx(p, INT_MIN, UINT_MAX, &ep, &errstr);",
          "",
          "---------------"
        ],
        "lib/util/strtonum.c||lib/util/strtonum.c": [
          "File: lib/util/strtonum.c -> lib/util/strtonum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     enum strtonum_err errval = STN_INITIAL;",
          "50:     long long lastval, result = 0;",
          "51:     const char *cp = str;",
          "53:     int remainder;",
          "56:     if (minval > maxval) {",
          "57:  errval = STN_INVALID;",
          "",
          "[Removed Lines]",
          "52:     unsigned char ch;",
          "54:     char sign;",
          "",
          "[Added Lines]",
          "53:     char ch, sign;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     do {",
          "63:  ch = *cp++;",
          "65:     switch (ch) {",
          "66:     case '-':",
          "67:  sign = '-';",
          "",
          "[Removed Lines]",
          "64:     } while (isspace(ch));",
          "",
          "[Added Lines]",
          "63:     } while (isspace((unsigned char)ch));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:     if (sign == '-') {",
          "88:  lastval = minval / 10;",
          "90:  if (remainder < 0) {",
          "91:      lastval += 1;",
          "92:      remainder += 10;",
          "93:  }",
          "94:  for (;; ch = *cp++) {",
          "96:   break;",
          "97:      ch -= '0';",
          "98:      if (result < lastval || (result == lastval && ch > remainder)) {",
          "100:   do {",
          "101:       ch = *cp++;",
          "103:   errval = STN_TOOSMALL;",
          "104:   break;",
          "105:      } else {",
          "",
          "[Removed Lines]",
          "89:  remainder = -(minval % 10);",
          "95:      if (!isdigit(ch))",
          "102:   } while (isdigit(ch));",
          "",
          "[Added Lines]",
          "88:  remainder = -(int)(minval % 10);",
          "94:      if (!isdigit((unsigned char)ch))",
          "101:   } while (isdigit((unsigned char)ch));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:      errval = STN_TOOBIG;",
          "113:     } else {",
          "114:  lastval = maxval / 10;",
          "116:  for (;; ch = *cp++) {",
          "118:   break;",
          "119:      ch -= '0';",
          "120:      if (result > lastval || (result == lastval && ch > remainder)) {",
          "122:   do {",
          "123:       ch = *cp++;",
          "125:   errval = STN_TOOBIG;",
          "126:   break;",
          "127:      } else {",
          "",
          "[Removed Lines]",
          "115:  remainder = maxval % 10;",
          "117:      if (!isdigit(ch))",
          "124:   } while (isdigit(ch));",
          "",
          "[Added Lines]",
          "114:  remainder = (int)(maxval % 10);",
          "116:      if (!isdigit((unsigned char)ch))",
          "123:   } while (isdigit((unsigned char)ch));",
          "",
          "---------------"
        ],
        "lib/util/sudo_conf.c||lib/util/sudo_conf.c": [
          "File: lib/util/sudo_conf.c -> lib/util/sudo_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:     int max_groups;",
          "433:     debug_decl(set_var_max_groups, SUDO_DEBUG_UTIL);",
          "436:     if (max_groups <= 0) {",
          "437:  sudo_warnx(U_(\"invalid max groups \\\"%s\\\" in %s, line %u\"), strval,",
          "438:      conf_file, lineno);",
          "",
          "[Removed Lines]",
          "435:     max_groups = sudo_strtonum(strval, 1, 1024, NULL);",
          "",
          "[Added Lines]",
          "435:     max_groups = (int)sudo_strtonum(strval, 1, 1024, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:  fd = sudo_open_conf_path(_PATH_SUDO_CONF, conf_file,",
          "674:      sizeof(conf_file), NULL);",
          "676:  switch (error) {",
          "677:  case SUDO_PATH_SECURE:",
          "",
          "[Removed Lines]",
          "675:  error = sudo_secure_fd(fd, S_IFREG, ROOT_UID, -1, &sb);",
          "",
          "[Added Lines]",
          "675:  error = sudo_secure_fd(fd, S_IFREG, ROOT_UID, (gid_t)-1, &sb);",
          "",
          "---------------"
        ],
        "lib/util/sudo_debug.c||lib/util/sudo_debug.c": [
          "File: lib/util/sudo_debug.c -> lib/util/sudo_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  const int new_size = round_nfds(output->fd + 1) / NBBY;",
          "202:  unsigned char *new_fds;",
          "205:  if (new_fds == NULL)",
          "206:      goto oom;",
          "208:  sudo_debug_fds = new_fds;",
          "209:  sudo_debug_fds_size = new_size * NBBY;",
          "210:     }",
          "",
          "[Removed Lines]",
          "204:  new_fds = realloc(sudo_debug_fds, new_size);",
          "207:  memset(new_fds + old_size, 0, new_size - old_size);",
          "",
          "[Added Lines]",
          "204:  new_fds = realloc(sudo_debug_fds, (size_t)new_size);",
          "207:  memset(new_fds + old_size, 0, (size_t)(new_size - old_size));",
          "",
          "---------------"
        ],
        "lib/util/ttysize.c||lib/util/ttysize.c": [
          "File: lib/util/ttysize.c -> lib/util/ttysize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  if ((p = getenv(\"LINES\")) == NULL ||",
          "70:  }",
          "71:  if ((p = getenv(\"COLUMNS\")) == NULL ||",
          "74:  }",
          "75:     }",
          "",
          "[Removed Lines]",
          "68:      (*rowp = sudo_strtonum(p, 1, INT_MAX, NULL)) <= 0) {",
          "72:      (*colp = sudo_strtonum(p, 1, INT_MAX, NULL)) <= 0) {",
          "",
          "[Added Lines]",
          "68:      (*rowp = (int)sudo_strtonum(p, 1, INT_MAX, NULL)) <= 0) {",
          "72:      (*colp = (int)sudo_strtonum(p, 1, INT_MAX, NULL)) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "726b646b4861ba0a372675c5ef56384aceb9723d",
      "candidate_info": {
        "commit_hash": "726b646b4861ba0a372675c5ef56384aceb9723d",
        "repo": "sudo-project/sudo",
        "commit_url": "https://github.com/sudo-project/sudo/commit/726b646b4861ba0a372675c5ef56384aceb9723d",
        "files": [
          "include/sudo_eventlog.h",
          "lib/eventlog/eventlog.c",
          "lib/eventlog/eventlog_free.c",
          "lib/eventlog/parse_json.c",
          "lib/iolog/iolog_loginfo.c",
          "logsrvd/iolog_writer.c",
          "logsrvd/sendlog.c",
          "plugins/sudoers/iolog.c",
          "plugins/sudoers/log_client.c",
          "plugins/sudoers/logging.c",
          "plugins/sudoers/sudoers.c",
          "plugins/sudoers/sudoers.h",
          "plugins/sudoers/sudoreplay.c"
        ],
        "message": "struct eventlog: rename argv/env to runargv/runenv.\n\nThis matches the JSON logs.",
        "before_after_code_files": [
          "include/sudo_eventlog.h||include/sudo_eventlog.h",
          "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
          "lib/eventlog/eventlog_free.c||lib/eventlog/eventlog_free.c",
          "lib/eventlog/parse_json.c||lib/eventlog/parse_json.c",
          "lib/iolog/iolog_loginfo.c||lib/iolog/iolog_loginfo.c",
          "logsrvd/iolog_writer.c||logsrvd/iolog_writer.c",
          "logsrvd/sendlog.c||logsrvd/sendlog.c",
          "plugins/sudoers/iolog.c||plugins/sudoers/iolog.c",
          "plugins/sudoers/log_client.c||plugins/sudoers/log_client.c",
          "plugins/sudoers/logging.c||plugins/sudoers/logging.c",
          "plugins/sudoers/sudoers.c||plugins/sudoers/sudoers.c",
          "plugins/sudoers/sudoers.h||plugins/sudoers/sudoers.h",
          "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
            "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
          ],
          "candidate": [
            "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c",
            "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c"
          ]
        }
      },
      "candidate_diff": {
        "include/sudo_eventlog.h||include/sudo_eventlog.h": [
          "File: include/sudo_eventlog.h -> include/sudo_eventlog.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     char *submituser;",
          "111:     char *submitgroup;",
          "112:     char *ttyname;",
          "114:     char **env_add;",
          "116:     struct timespec submit_time;",
          "117:     struct timespec iolog_offset;",
          "118:     struct timespec run_time;",
          "",
          "[Removed Lines]",
          "113:     char **argv;",
          "115:     char **envp;",
          "",
          "[Added Lines]",
          "113:     char **runargv;",
          "114:     char **runenv;",
          "",
          "---------------"
        ],
        "lib/eventlog/eventlog.c||lib/eventlog/eventlog.c": [
          "File: lib/eventlog/eventlog.c -> lib/eventlog/eventlog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  }",
          "192:  sudo_lbuf_append(lbuf, \" ; \");",
          "193:     }",
          "196:  sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,",
          "197:      \"COMMAND=%s\", evlog->command);",
          "200:   sudo_lbuf_append(lbuf, \" \");",
          "203:       sudo_lbuf_append(lbuf, \"'\");",
          "204:       sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,",
          "206:       sudo_lbuf_append(lbuf, \"'\");",
          "207:   } else {",
          "209:       sudo_lbuf_append_esc(lbuf,",
          "210:    LBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,",
          "212:   }",
          "213:      }",
          "214:  }",
          "",
          "[Removed Lines]",
          "194:     if (evlog->command != NULL && evlog->argv != NULL) {",
          "198:  if (evlog->argv[0] != NULL) {",
          "199:      for (i = 1; evlog->argv[i] != NULL; i++) {",
          "201:   if (strchr(evlog->argv[i], ' ') != NULL) {",
          "205:    \"%s\", evlog->argv[i]);",
          "211:    \"%s\", evlog->argv[i]);",
          "",
          "[Added Lines]",
          "194:     if (evlog->command != NULL && evlog->runargv != NULL) {",
          "198:  if (evlog->runargv[0] != NULL) {",
          "199:      for (i = 1; evlog->runargv[i] != NULL; i++) {",
          "201:   if (strchr(evlog->runargv[i], ' ') != NULL) {",
          "205:    \"%s\", evlog->runargv[i]);",
          "211:    \"%s\", evlog->runargv[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     if (!sudo_json_add_value(jsonc, \"lines\", &json_value))",
          "734:         goto oom;",
          "737:  if (!sudo_json_open_array(jsonc, \"runargv\"))",
          "738:      goto oom;",
          "740:      json_value.type = JSON_STRING;",
          "741:      json_value.u.string = cp;",
          "742:      if (!sudo_json_add_value(jsonc, NULL, &json_value))",
          "",
          "[Removed Lines]",
          "736:     if (evlog->argv != NULL) {",
          "739:  for (i = 0; (cp = evlog->argv[i]) != NULL; i++) {",
          "",
          "[Added Lines]",
          "736:     if (evlog->runargv != NULL) {",
          "739:  for (i = 0; (cp = evlog->runargv[i]) != NULL; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:      goto oom;",
          "747:     }",
          "750:  if (!sudo_json_open_array(jsonc, \"runenv\"))",
          "751:      goto oom;",
          "753:      json_value.type = JSON_STRING;",
          "754:      json_value.u.string = cp;",
          "755:      if (!sudo_json_add_value(jsonc, NULL, &json_value))",
          "",
          "[Removed Lines]",
          "749:     if (evlog->envp != NULL) {",
          "752:  for (i = 0; (cp = evlog->envp[i]) != NULL; i++) {",
          "",
          "[Added Lines]",
          "749:     if (evlog->runenv != NULL) {",
          "752:  for (i = 0; (cp = evlog->runenv[i]) != NULL; i++) {",
          "",
          "---------------"
        ],
        "lib/eventlog/eventlog_free.c||lib/eventlog/eventlog_free.c": [
          "File: lib/eventlog/eventlog_free.c -> lib/eventlog/eventlog_free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  free(evlog->submituser);",
          "60:  free(evlog->submitgroup);",
          "61:  free(evlog->ttyname);",
          "66:  }",
          "71:  }",
          "72:  if (evlog->env_add != NULL) {",
          "73:      for (i = 0; evlog->env_add[i] != NULL; i++)",
          "",
          "[Removed Lines]",
          "62:  if (evlog->argv != NULL) {",
          "63:      for (i = 0; evlog->argv[i] != NULL; i++)",
          "64:   free(evlog->argv[i]);",
          "65:      free(evlog->argv);",
          "67:  if (evlog->envp != NULL) {",
          "68:      for (i = 0; evlog->envp[i] != NULL; i++)",
          "69:   free(evlog->envp[i]);",
          "70:      free(evlog->envp);",
          "",
          "[Added Lines]",
          "62:  if (evlog->runargv != NULL) {",
          "63:      for (i = 0; evlog->runargv[i] != NULL; i++)",
          "64:   free(evlog->runargv[i]);",
          "65:      free(evlog->runargv);",
          "67:  if (evlog->runenv != NULL) {",
          "68:      for (i = 0; evlog->runenv[i] != NULL; i++)",
          "69:   free(evlog->runenv[i]);",
          "70:      free(evlog->runenv);",
          "",
          "---------------"
        ],
        "lib/eventlog/parse_json.c||lib/eventlog/parse_json.c": [
          "File: lib/eventlog/parse_json.c -> lib/eventlog/parse_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     size_t i;",
          "202:     debug_decl(json_store_runargv, SUDO_DEBUG_UTIL);",
          "208:     }",
          "212: }",
          "214: static bool",
          "",
          "[Removed Lines]",
          "204:     if (evlog->argv != NULL) {",
          "205:  for (i = 0; evlog->argv[i] != NULL; i++)",
          "206:      free(evlog->argv[i]);",
          "207:  free(evlog->argv);",
          "209:     evlog->argv = json_array_to_strvec(&item->u.child);",
          "211:     debug_return_bool(evlog->argv != NULL);",
          "",
          "[Added Lines]",
          "204:     if (evlog->runargv != NULL) {",
          "205:  for (i = 0; evlog->runargv[i] != NULL; i++)",
          "206:      free(evlog->runargv[i]);",
          "207:  free(evlog->runargv);",
          "209:     evlog->runargv = json_array_to_strvec(&item->u.child);",
          "211:     debug_return_bool(evlog->runargv != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     size_t i;",
          "218:     debug_decl(json_store_runenv, SUDO_DEBUG_UTIL);",
          "224:     }",
          "228: }",
          "230: static bool",
          "",
          "[Removed Lines]",
          "220:     if (evlog->envp != NULL) {",
          "221:  for (i = 0; evlog->envp[i] != NULL; i++)",
          "222:      free(evlog->envp[i]);",
          "223:  free(evlog->envp);",
          "225:     evlog->envp = json_array_to_strvec(&item->u.child);",
          "227:     debug_return_bool(evlog->envp != NULL);",
          "",
          "[Added Lines]",
          "220:     if (evlog->runenv != NULL) {",
          "221:  for (i = 0; evlog->runenv[i] != NULL; i++)",
          "222:      free(evlog->runenv[i]);",
          "223:  free(evlog->runenv);",
          "225:     evlog->runenv = json_array_to_strvec(&item->u.child);",
          "227:     debug_return_bool(evlog->runenv != NULL);",
          "",
          "---------------"
        ],
        "lib/iolog/iolog_loginfo.c||lib/iolog/iolog_loginfo.c": [
          "File: lib/iolog/iolog_loginfo.c -> lib/iolog/iolog_loginfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:  evlog->lines, evlog->columns,",
          "132:  evlog->cwd ? evlog->cwd : \"unknown\");",
          "133:     fputs(evlog->command ? evlog->command : \"unknown\", fp);",
          "135:  fputc(' ', fp);",
          "136:  fputs(*av, fp);",
          "137:     }",
          "",
          "[Removed Lines]",
          "134:     for (av = evlog->argv + 1; *av != NULL; av++) {",
          "",
          "[Added Lines]",
          "134:     for (av = evlog->runargv + 1; *av != NULL; av++) {",
          "",
          "---------------"
        ],
        "logsrvd/iolog_writer.c||logsrvd/iolog_writer.c": [
          "File: logsrvd/iolog_writer.c -> logsrvd/iolog_writer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:  case 'r':",
          "206:      if (strcmp(key, \"runargv\") == 0) {",
          "207:   if (type_matches(info, source, INFO_MESSAGE__VALUE_STRLISTVAL)) {",
          "210:    goto bad;",
          "211:   }",
          "212:   continue;",
          "",
          "[Removed Lines]",
          "208:       evlog->argv = strlist_copy(info->u.strlistval);",
          "209:       if (evlog->argv == NULL)",
          "",
          "[Added Lines]",
          "208:       evlog->runargv = strlist_copy(info->u.strlistval);",
          "209:       if (evlog->runargv == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:      }",
          "234:      if (strcmp(key, \"runenv\") == 0) {",
          "235:   if (type_matches(info, source, INFO_MESSAGE__VALUE_STRLISTVAL)) {",
          "238:    goto bad;",
          "239:   }",
          "240:   continue;",
          "",
          "[Removed Lines]",
          "236:       evlog->envp = strlist_copy(info->u.strlistval);",
          "237:       if (evlog->envp == NULL)",
          "",
          "[Added Lines]",
          "236:       evlog->runenv = strlist_copy(info->u.strlistval);",
          "237:       if (evlog->runenv == NULL)",
          "",
          "---------------"
        ],
        "logsrvd/sendlog.c||logsrvd/sendlog.c": [
          "File: logsrvd/sendlog.c -> logsrvd/sendlog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:     debug_decl(fmt_runargv, SUDO_DEBUG_UTIL);",
          "513:  if (runargv != NULL) {",
          "515:      char *cp = strchr(evlog->command, ' ');",
          "",
          "[Removed Lines]",
          "510:     if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
          "512:  runargv = vec_to_stringlist(evlog->argv);",
          "",
          "[Added Lines]",
          "510:     if (evlog->runargv != NULL && evlog->runargv[0] != NULL) {",
          "512:  runargv = vec_to_stringlist(evlog->runargv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:     debug_decl(fmt_runenv, SUDO_DEBUG_UTIL);",
          "537:  debug_return_ptr(NULL);",
          "540: }",
          "542: static InfoMessage **",
          "",
          "[Removed Lines]",
          "536:     if (evlog->envp == NULL || evlog->envp[0] == NULL)",
          "539:     debug_return_ptr(vec_to_stringlist(evlog->envp));",
          "",
          "[Added Lines]",
          "536:     if (evlog->runenv == NULL || evlog->runenv[0] == NULL)",
          "539:     debug_return_ptr(vec_to_stringlist(evlog->runenv));",
          "",
          "---------------"
        ],
        "plugins/sudoers/iolog.c||plugins/sudoers/iolog.c": [
          "File: plugins/sudoers/iolog.c -> plugins/sudoers/iolog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     if (iolog_details.evlog != NULL) {",
          "204:  eventlog_free(iolog_details.evlog);",
          "205:     }",
          "206:     str_list_free(iolog_details.log_servers);",
          "",
          "[Removed Lines]",
          "200:  free(iolog_details.evlog->argv);",
          "201:  iolog_details.evlog->argv = NULL;",
          "202:  free(iolog_details.evlog->envp);",
          "203:  iolog_details.evlog->envp = NULL;",
          "",
          "[Added Lines]",
          "200:  free(iolog_details.evlog->runargv);",
          "201:  iolog_details.evlog->runargv = NULL;",
          "202:  free(iolog_details.evlog->runenv);",
          "203:  iolog_details.evlog->runenv = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:     }",
          "603:     if (argv != NULL) {",
          "606:      goto oom;",
          "607:     }",
          "608:     if (user_env != NULL) {",
          "611:      goto oom;",
          "612:     }",
          "",
          "[Removed Lines]",
          "604:  evlog->argv = copy_vector_shallow(argv);",
          "605:  if (evlog->argv == NULL)",
          "609:  evlog->envp = copy_vector_shallow(user_env);",
          "610:  if (evlog->envp ==  NULL)",
          "",
          "[Added Lines]",
          "604:  evlog->runargv = copy_vector_shallow(argv);",
          "605:  if (evlog->runargv == NULL)",
          "609:  evlog->runenv = copy_vector_shallow(user_env);",
          "610:  if (evlog->runenv ==  NULL)",
          "",
          "---------------"
        ],
        "plugins/sudoers/log_client.c||plugins/sudoers/log_client.c": [
          "File: plugins/sudoers/log_client.c -> plugins/sudoers/log_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     debug_decl(fmt_info_messages, SUDOERS_DEBUG_UTIL);",
          "827:  if ((runargv = malloc(sizeof(*runargv))) == NULL)",
          "828:      goto bad;",
          "829:  info_message__string_list__init(runargv);",
          "831:  while (runargv->strings[runargv->n_strings] != NULL)",
          "832:      runargv->n_strings++;",
          "833:     }",
          "836:  if ((runenv = malloc(sizeof(*runenv))) == NULL)",
          "837:      goto bad;",
          "838:  info_message__string_list__init(runenv);",
          "840:  while (runenv->strings[runenv->n_strings] != NULL)",
          "841:      runenv->n_strings++;",
          "842:     }",
          "",
          "[Removed Lines]",
          "826:     if (evlog->argv != NULL) {",
          "830:  runargv->strings = evlog->argv;",
          "835:     if (evlog->envp != NULL) {",
          "839:  runenv->strings = evlog->envp;",
          "",
          "[Added Lines]",
          "826:     if (evlog->runargv != NULL) {",
          "830:  runargv->strings = evlog->runargv;",
          "835:     if (evlog->runenv != NULL) {",
          "839:  runenv->strings = evlog->runenv;",
          "",
          "---------------"
        ],
        "plugins/sudoers/logging.c||plugins/sudoers/logging.c": [
          "File: plugins/sudoers/logging.c -> plugins/sudoers/logging.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:     if (grp != NULL)",
          "1002:  evlog->submitgroup = grp->gr_name;",
          "1003:     evlog->ttyname = ctx->user.ttypath;",
          "1005:     evlog->env_add = (char **)ctx->user.env_add;",
          "1007:     evlog->submit_time = ctx->submit_time;",
          "1008:     evlog->lines = ctx->user.lines;",
          "1009:     evlog->columns = ctx->user.cols;",
          "",
          "[Removed Lines]",
          "1004:     evlog->argv = (char **)argv;",
          "1006:     evlog->envp = (char **)envp;",
          "",
          "[Added Lines]",
          "1004:     evlog->runargv = (char **)argv;",
          "1006:     evlog->runenv = (char **)envp;",
          "",
          "---------------"
        ],
        "plugins/sudoers/sudoers.c||plugins/sudoers/sudoers.c": [
          "File: plugins/sudoers/sudoers.c -> plugins/sudoers/sudoers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "989: #define MATCHES(s, v) \\",
          "990:     (strncmp((s), (v), sizeof(v) - 1) == 0 && (s)[sizeof(v) - 1] != '\\0')",
          "993:  switch (**ep) {",
          "994:      case 'K':",
          "995:   if (MATCHES(*ep, \"KRB5CCNAME=\"))",
          "",
          "[Removed Lines]",
          "992:     for (ep = envp; *ep; ep++) {",
          "",
          "[Added Lines]",
          "992:     ctx->user.envp = envp;",
          "993:     for (ep = ctx->user.envp; *ep; ep++) {",
          "",
          "---------------"
        ],
        "plugins/sudoers/sudoers.h||plugins/sudoers/sudoers.h": [
          "File: plugins/sudoers/sudoers.h -> plugins/sudoers/sudoers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     char *cmnd_list;",
          "132:     char *ccname;",
          "133:     struct gid_list *gid_list;",
          "134:     char * const * env_add;",
          "135:     int   closefrom;",
          "136:     int   lines;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     char * const * envp;",
          "",
          "---------------"
        ],
        "plugins/sudoers/sudoreplay.c||plugins/sudoers/sudoreplay.c": [
          "File: plugins/sudoers/sudoreplay.c -> plugins/sudoers/sudoreplay.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     if ((evlog = iolog_parse_loginfo(iolog_dir_fd, iolog_dir)) == NULL)",
          "367:  goto done;",
          "368:     printf(_(\"Replaying sudo session: %s\"), evlog->command);",
          "372:     }",
          "",
          "[Removed Lines]",
          "369:     if (evlog->argv != NULL && evlog->argv[0] != NULL) {",
          "370:  for (i = 1; evlog->argv[i] != NULL; i++)",
          "371:      printf(\" %s\", evlog->argv[i]);",
          "",
          "[Added Lines]",
          "369:     if (evlog->runargv != NULL && evlog->runargv[0] != NULL) {",
          "370:  for (i = 1; evlog->runargv[i] != NULL; i++)",
          "371:      printf(\" %s\", evlog->runargv[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:     int ac;",
          "1322:     debug_decl(expand_command, SUDO_DEBUG_UTIL);",
          "1327:  debug_return_str(evlog->command);",
          "1328:     }",
          "1334:     if ((buf = malloc(bufsize)) == NULL)",
          "1335:  sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));",
          "",
          "[Removed Lines]",
          "1324:     if (evlog->argv == NULL || evlog->argv[0] == NULL || evlog->argv[1] == NULL) {",
          "1331:     for (ac = 1; evlog->argv[ac] != NULL; ac++)",
          "1332:  bufsize += strlen(evlog->argv[ac]) + 1;",
          "",
          "[Added Lines]",
          "1324:     if (evlog->runargv == NULL || evlog->runargv[0] == NULL || evlog->runargv[1] == NULL) {",
          "1331:     for (ac = 1; evlog->runargv[ac] != NULL; ac++)",
          "1332:  bufsize += strlen(evlog->runargv[ac]) + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1341:     cp += len;",
          "1342:     bufsize -= len;",
          "1345:  if (bufsize < 2)",
          "1346:      sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
          "1348:  bufsize--;",
          "1351:  if (len >= bufsize)",
          "1352:      sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);",
          "1353:  cp += len;",
          "",
          "[Removed Lines]",
          "1344:     for (ac = 1; evlog->argv[ac] != NULL; ac++) {",
          "1350:  len = strlcpy(cp, evlog->argv[ac], bufsize);",
          "",
          "[Added Lines]",
          "1344:     for (ac = 1; evlog->runargv[ac] != NULL; ac++) {",
          "1350:  len = strlcpy(cp, evlog->runargv[ac], bufsize);",
          "",
          "---------------"
        ]
      }
    }
  ]
}