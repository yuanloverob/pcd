{
  "cve_id": "CVE-2017-13002",
  "cve_desc": "The AODV parser in tcpdump before 4.9.2 has a buffer over-read in print-aodv.c:aodv_extension().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "cbddb98484ea8ec1deece351abd56e063d775b38",
  "patch_info": {
    "commit_hash": "cbddb98484ea8ec1deece351abd56e063d775b38",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/cbddb98484ea8ec1deece351abd56e063d775b38",
    "files": [
      "print-aodv.c",
      "tests/TESTLIST",
      "tests/hoobr_aodv_extension.out",
      "tests/hoobr_aodv_extension.pcap"
    ],
    "message": "CVE-2017-13002/AODV: Add some missing bounds checks.\n\nIn aodv_extension() do a bounds check on the extension header before we\nlook at it.\n\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\n\nAdd a test using the capture file supplied by the reporter(s).\n\nWhile we're at it, add the RFC number, and check the validity of the\nlength for the Hello extension.",
    "before_after_code_files": [
      "print-aodv.c||print-aodv.c"
    ]
  },
  "patch_diff": {
    "print-aodv.c||print-aodv.c": [
      "File: print-aodv.c -> print-aodv.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178: {",
      "179:  const struct aodv_hello *ah;",
      "181:  switch (ep->type) {",
      "182:  case AODV_EXT_HELLO:",
      "183:   ah = (const struct aodv_hello *)(const void *)ep;",
      "184:   ND_TCHECK(*ah);",
      "185:   if (length < sizeof(struct aodv_hello))",
      "186:    goto trunc;",
      "187:   ND_PRINT((ndo, \"\\n\\text HELLO %ld ms\",",
      "188:       (unsigned long)EXTRACT_32BITS(&ah->interval)));",
      "189:   break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:  ND_TCHECK(*ep);",
      "190:   if (ep->length < 4) {",
      "191:    ND_PRINT((ndo, \"\\n\\text HELLO - bad length %u\", ep->length));",
      "192:    break;",
      "193:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8186bd1a769306ea938b6f91b5e21f9433949439",
      "candidate_info": {
        "commit_hash": "8186bd1a769306ea938b6f91b5e21f9433949439",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/8186bd1a769306ea938b6f91b5e21f9433949439",
        "files": [
          "print-aodv.c"
        ],
        "message": "Use nd_ types, add EXTRACT_ macros as necessary.\n\nAlso, remove the l from formats and don't cast to unsigned long - not\nnecessary.",
        "before_after_code_files": [
          "print-aodv.c||print-aodv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-aodv.c||print-aodv.c"
          ],
          "candidate": [
            "print-aodv.c||print-aodv.c"
          ]
        }
      },
      "candidate_diff": {
        "print-aodv.c||print-aodv.c": [
          "File: print-aodv.c -> print-aodv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: struct rerr_unreach {",
          "128: };",
          "129: struct rerr_unreach6 {",
          "132: };",
          "133: struct rerr_unreach6_draft_01 {",
          "136: };",
          "138: struct aodv_rerr {",
          "143: };",
          "148: struct aodv_rrep_ack {",
          "151: };",
          "",
          "[Removed Lines]",
          "149:  uint8_t  ra_type;",
          "150:  uint8_t  ra_zero0;",
          "",
          "[Added Lines]",
          "149:  nd_uint8_t ra_type;",
          "150:  nd_uint8_t ra_zero0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163: struct aodv_ext {",
          "166: };",
          "168: struct aodv_hello {",
          "173: };",
          "",
          "[Removed Lines]",
          "170:  uint8_t   interval[4]; /* expect my next hello in",
          "",
          "[Added Lines]",
          "170:  nd_uint32_t  interval; /* expect my next hello in",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:  const struct aodv_hello *ah;",
          "183:  ND_TCHECK(*ep);",
          "185:  case AODV_EXT_HELLO:",
          "186:   ah = (const struct aodv_hello *)(const void *)ep;",
          "187:   ND_TCHECK(*ah);",
          "188:   if (length < sizeof(struct aodv_hello))",
          "189:    goto trunc;",
          "192:    break;",
          "193:   }",
          "196:   break;",
          "198:  default:",
          "200:   break;",
          "201:  }",
          "202:  return;",
          "",
          "[Removed Lines]",
          "184:  switch (ep->type) {",
          "190:   if (ep->length < 4) {",
          "191:    ND_PRINT((ndo, \"\\n\\text HELLO - bad length %u\", ep->length));",
          "194:   ND_PRINT((ndo, \"\\n\\text HELLO %ld ms\",",
          "195:       (unsigned long) EXTRACT_BE_U_4(&ah->interval)));",
          "199:   ND_PRINT((ndo, \"\\n\\text %u %u\", ep->type, ep->length));",
          "",
          "[Added Lines]",
          "184:  switch (EXTRACT_U_1(ep->type)) {",
          "190:   if (EXTRACT_U_1(ep->length) < 4) {",
          "191:    ND_PRINT((ndo, \"\\n\\text HELLO - bad length %u\", EXTRACT_U_1(ep->length)));",
          "194:   ND_PRINT((ndo, \"\\n\\text HELLO %u ms\",",
          "195:       EXTRACT_BE_U_4(ah->interval)));",
          "199:   ND_PRINT((ndo, \"\\n\\text %u %u\", EXTRACT_U_1(ep->type), EXTRACT_U_1(ep->length)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:  ND_TCHECK(*ap);",
          "215:  if (length < sizeof(*ap))",
          "216:   goto trunc;",
          "226:      ipaddr_string(ndo, &ap->rreq_da),",
          "228:      ipaddr_string(ndo, &ap->rreq_oa),",
          "230:  i = length - sizeof(*ap);",
          "231:  if (i >= sizeof(struct aodv_ext))",
          "232:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "217:  ND_PRINT((ndo, \" rreq %u %s%s%s%s%shops %u id 0x%08lx\\n\"",
          "218:      \"\\tdst %s seq %lu src %s seq %lu\", length,",
          "219:      ap->rreq_type & RREQ_JOIN ? \"[J]\" : \"\",",
          "220:      ap->rreq_type & RREQ_REPAIR ? \"[R]\" : \"\",",
          "221:      ap->rreq_type & RREQ_GRAT ? \"[G]\" : \"\",",
          "222:      ap->rreq_type & RREQ_DEST ? \"[D]\" : \"\",",
          "223:      ap->rreq_type & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "224:      ap->rreq_hops,",
          "225:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_id),",
          "227:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_ds),",
          "229:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_os)));",
          "",
          "[Added Lines]",
          "217:  ND_PRINT((ndo, \" rreq %u %s%s%s%s%shops %u id 0x%08x\\n\"",
          "218:      \"\\tdst %s seq %u src %s seq %u\", length,",
          "219:      EXTRACT_U_1(ap->rreq_type) & RREQ_JOIN ? \"[J]\" : \"\",",
          "220:      EXTRACT_U_1(ap->rreq_type) & RREQ_REPAIR ? \"[R]\" : \"\",",
          "221:      EXTRACT_U_1(ap->rreq_type) & RREQ_GRAT ? \"[G]\" : \"\",",
          "222:      EXTRACT_U_1(ap->rreq_type) & RREQ_DEST ? \"[D]\" : \"\",",
          "223:      EXTRACT_U_1(ap->rreq_type) & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "224:      EXTRACT_U_1(ap->rreq_hops),",
          "225:      EXTRACT_BE_U_4(ap->rreq_id),",
          "227:      EXTRACT_BE_U_4(ap->rreq_ds),",
          "229:      EXTRACT_BE_U_4(ap->rreq_os)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:  if (length < sizeof(*ap))",
          "247:   goto trunc;",
          "248:  ND_PRINT((ndo, \" rrep %u %s%sprefix %u hops %u\\n\"",
          "254:      ipaddr_string(ndo, &ap->rrep_da),",
          "256:      ipaddr_string(ndo, &ap->rrep_oa),",
          "258:  i = length - sizeof(*ap);",
          "259:  if (i >= sizeof(struct aodv_ext))",
          "260:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "249:      \"\\tdst %s dseq %lu src %s %lu ms\", length,",
          "250:      ap->rrep_type & RREP_REPAIR ? \"[R]\" : \"\",",
          "251:      ap->rrep_type & RREP_ACK ? \"[A] \" : \" \",",
          "252:      ap->rrep_ps & RREP_PREFIX_MASK,",
          "253:      ap->rrep_hops,",
          "255:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_ds),",
          "257:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_life)));",
          "",
          "[Added Lines]",
          "249:      \"\\tdst %s dseq %u src %s %u ms\", length,",
          "250:      EXTRACT_U_1(ap->rrep_type) & RREP_REPAIR ? \"[R]\" : \"\",",
          "251:      EXTRACT_U_1(ap->rrep_type) & RREP_ACK ? \"[A] \" : \" \",",
          "252:      EXTRACT_U_1(ap->rrep_ps) & RREP_PREFIX_MASK,",
          "253:      EXTRACT_U_1(ap->rrep_hops),",
          "255:      EXTRACT_BE_U_4(ap->rrep_ds),",
          "257:      EXTRACT_BE_U_4(ap->rrep_life)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275:  if (length < sizeof(*ap))",
          "276:   goto trunc;",
          "277:  ND_PRINT((ndo, \" rerr %s [items %u] [%u]:\",",
          "280:  dp = (const struct rerr_unreach *)(dat + sizeof(*ap));",
          "281:  i = length - sizeof(*ap);",
          "283:   ND_TCHECK(*dp);",
          "284:   if (i < sizeof(*dp))",
          "285:    goto trunc;",
          "288:   dp++;",
          "289:   i -= sizeof(*dp);",
          "290:  }",
          "",
          "[Removed Lines]",
          "278:      ap->rerr_flags & RERR_NODELETE ? \"[D]\" : \"\",",
          "279:      ap->rerr_dc, length));",
          "282:  for (dc = ap->rerr_dc; dc != 0; dc--) {",
          "286:   ND_PRINT((ndo, \" {%s}(%ld)\", ipaddr_string(ndo, &dp->u_da),",
          "287:       (unsigned long) EXTRACT_BE_U_4(&dp->u_ds)));",
          "",
          "[Added Lines]",
          "278:      EXTRACT_U_1(ap->rerr_flags) & RERR_NODELETE ? \"[D]\" : \"\",",
          "279:      EXTRACT_U_1(ap->rerr_dc), length));",
          "282:  for (dc = EXTRACT_U_1(ap->rerr_dc); dc != 0; dc--) {",
          "286:   ND_PRINT((ndo, \" {%s}(%u)\", ipaddr_string(ndo, &dp->u_da),",
          "287:       EXTRACT_BE_U_4(dp->u_ds)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "303:  ND_TCHECK(*ap);",
          "304:  if (length < sizeof(*ap))",
          "305:   goto trunc;",
          "315:      ip6addr_string(ndo, &ap->rreq_da),",
          "317:      ip6addr_string(ndo, &ap->rreq_oa),",
          "319:  i = length - sizeof(*ap);",
          "320:  if (i >= sizeof(struct aodv_ext))",
          "321:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "306:  ND_PRINT((ndo, \" v6 rreq %u %s%s%s%s%shops %u id 0x%08lx\\n\"",
          "307:      \"\\tdst %s seq %lu src %s seq %lu\", length,",
          "308:      ap->rreq_type & RREQ_JOIN ? \"[J]\" : \"\",",
          "309:      ap->rreq_type & RREQ_REPAIR ? \"[R]\" : \"\",",
          "310:      ap->rreq_type & RREQ_GRAT ? \"[G]\" : \"\",",
          "311:      ap->rreq_type & RREQ_DEST ? \"[D]\" : \"\",",
          "312:      ap->rreq_type & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "313:      ap->rreq_hops,",
          "314:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_id),",
          "316:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_ds),",
          "318:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_os)));",
          "",
          "[Added Lines]",
          "306:  ND_PRINT((ndo, \" v6 rreq %u %s%s%s%s%shops %u id 0x%08x\\n\"",
          "307:      \"\\tdst %s seq %u src %s seq %u\", length,",
          "308:      EXTRACT_U_1(ap->rreq_type) & RREQ_JOIN ? \"[J]\" : \"\",",
          "309:      EXTRACT_U_1(ap->rreq_type) & RREQ_REPAIR ? \"[R]\" : \"\",",
          "310:      EXTRACT_U_1(ap->rreq_type) & RREQ_GRAT ? \"[G]\" : \"\",",
          "311:      EXTRACT_U_1(ap->rreq_type) & RREQ_DEST ? \"[D]\" : \"\",",
          "312:      EXTRACT_U_1(ap->rreq_type) & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "313:      EXTRACT_U_1(ap->rreq_hops),",
          "314:      EXTRACT_BE_U_4(ap->rreq_id),",
          "316:      EXTRACT_BE_U_4(ap->rreq_ds),",
          "318:      EXTRACT_BE_U_4(ap->rreq_os)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335:  if (length < sizeof(*ap))",
          "336:   goto trunc;",
          "337:  ND_PRINT((ndo, \" rrep %u %s%sprefix %u hops %u\\n\"",
          "343:      ip6addr_string(ndo, &ap->rrep_da),",
          "345:      ip6addr_string(ndo, &ap->rrep_oa),",
          "347:  i = length - sizeof(*ap);",
          "348:  if (i >= sizeof(struct aodv_ext))",
          "349:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "338:     \"\\tdst %s dseq %lu src %s %lu ms\", length,",
          "339:      ap->rrep_type & RREP_REPAIR ? \"[R]\" : \"\",",
          "340:      ap->rrep_type & RREP_ACK ? \"[A] \" : \" \",",
          "341:      ap->rrep_ps & RREP_PREFIX_MASK,",
          "342:      ap->rrep_hops,",
          "344:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_ds),",
          "346:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_life)));",
          "",
          "[Added Lines]",
          "338:     \"\\tdst %s dseq %u src %s %u ms\", length,",
          "339:      EXTRACT_U_1(ap->rrep_type) & RREP_REPAIR ? \"[R]\" : \"\",",
          "340:      EXTRACT_U_1(ap->rrep_type) & RREP_ACK ? \"[A] \" : \" \",",
          "341:      EXTRACT_U_1(ap->rrep_ps) & RREP_PREFIX_MASK,",
          "342:      EXTRACT_U_1(ap->rrep_hops),",
          "344:      EXTRACT_BE_U_4(ap->rrep_ds),",
          "346:      EXTRACT_BE_U_4(ap->rrep_life)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:  if (length < sizeof(*ap))",
          "365:   goto trunc;",
          "366:  ND_PRINT((ndo, \" rerr %s [items %u] [%u]:\",",
          "369:  dp6 = (const struct rerr_unreach6 *)(const void *)(ap + 1);",
          "370:  i = length - sizeof(*ap);",
          "372:   ND_TCHECK(*dp6);",
          "373:   if (i < sizeof(*dp6))",
          "374:    goto trunc;",
          "377:   dp6++;",
          "378:   i -= sizeof(*dp6);",
          "379:  }",
          "",
          "[Removed Lines]",
          "367:      ap->rerr_flags & RERR_NODELETE ? \"[D]\" : \"\",",
          "368:      ap->rerr_dc, length));",
          "371:  for (dc = ap->rerr_dc; dc != 0; dc--) {",
          "375:   ND_PRINT((ndo, \" {%s}(%ld)\", ip6addr_string(ndo, &dp6->u_da),",
          "376:       (unsigned long) EXTRACT_BE_U_4(&dp6->u_ds)));",
          "",
          "[Added Lines]",
          "367:      EXTRACT_U_1(ap->rerr_flags) & RERR_NODELETE ? \"[D]\" : \"\",",
          "368:      EXTRACT_U_1(ap->rerr_dc), length));",
          "371:  for (dc = EXTRACT_U_1(ap->rerr_dc); dc != 0; dc--) {",
          "375:   ND_PRINT((ndo, \" {%s}(%u)\", ip6addr_string(ndo, &dp6->u_da),",
          "376:       EXTRACT_BE_U_4(dp6->u_ds)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "392:  ND_TCHECK(*ap);",
          "393:  if (length < sizeof(*ap))",
          "394:   goto trunc;",
          "404:      ip6addr_string(ndo, &ap->rreq_da),",
          "406:      ip6addr_string(ndo, &ap->rreq_oa),",
          "408:  i = length - sizeof(*ap);",
          "409:  if (i >= sizeof(struct aodv_ext))",
          "410:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "395:  ND_PRINT((ndo, \" rreq %u %s%s%s%s%shops %u id 0x%08lx\\n\"",
          "396:      \"\\tdst %s seq %lu src %s seq %lu\", length,",
          "397:      ap->rreq_type & RREQ_JOIN ? \"[J]\" : \"\",",
          "398:      ap->rreq_type & RREQ_REPAIR ? \"[R]\" : \"\",",
          "399:      ap->rreq_type & RREQ_GRAT ? \"[G]\" : \"\",",
          "400:      ap->rreq_type & RREQ_DEST ? \"[D]\" : \"\",",
          "401:      ap->rreq_type & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "402:      ap->rreq_hops,",
          "403:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_id),",
          "405:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_ds),",
          "407:      (unsigned long) EXTRACT_BE_U_4(&ap->rreq_os)));",
          "",
          "[Added Lines]",
          "395:  ND_PRINT((ndo, \" rreq %u %s%s%s%s%shops %u id 0x%08x\\n\"",
          "396:      \"\\tdst %s seq %u src %s seq %u\", length,",
          "397:      EXTRACT_U_1(ap->rreq_type) & RREQ_JOIN ? \"[J]\" : \"\",",
          "398:      EXTRACT_U_1(ap->rreq_type) & RREQ_REPAIR ? \"[R]\" : \"\",",
          "399:      EXTRACT_U_1(ap->rreq_type) & RREQ_GRAT ? \"[G]\" : \"\",",
          "400:      EXTRACT_U_1(ap->rreq_type) & RREQ_DEST ? \"[D]\" : \"\",",
          "401:      EXTRACT_U_1(ap->rreq_type) & RREQ_UNKNOWN ? \"[U] \" : \" \",",
          "402:      EXTRACT_U_1(ap->rreq_hops),",
          "403:      EXTRACT_BE_U_4(ap->rreq_id),",
          "405:      EXTRACT_BE_U_4(ap->rreq_ds),",
          "407:      EXTRACT_BE_U_4(ap->rreq_os)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "424:  if (length < sizeof(*ap))",
          "425:   goto trunc;",
          "426:  ND_PRINT((ndo, \" rrep %u %s%sprefix %u hops %u\\n\"",
          "432:      ip6addr_string(ndo, &ap->rrep_da),",
          "434:      ip6addr_string(ndo, &ap->rrep_oa),",
          "436:  i = length - sizeof(*ap);",
          "437:  if (i >= sizeof(struct aodv_ext))",
          "438:   aodv_extension(ndo, (const struct aodv_ext *)(dat + sizeof(*ap)), i);",
          "",
          "[Removed Lines]",
          "427:     \"\\tdst %s dseq %lu src %s %lu ms\", length,",
          "428:      ap->rrep_type & RREP_REPAIR ? \"[R]\" : \"\",",
          "429:      ap->rrep_type & RREP_ACK ? \"[A] \" : \" \",",
          "430:      ap->rrep_ps & RREP_PREFIX_MASK,",
          "431:      ap->rrep_hops,",
          "433:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_ds),",
          "435:      (unsigned long) EXTRACT_BE_U_4(&ap->rrep_life)));",
          "",
          "[Added Lines]",
          "427:     \"\\tdst %s dseq %u src %s %u ms\", length,",
          "428:      EXTRACT_U_1(ap->rrep_type) & RREP_REPAIR ? \"[R]\" : \"\",",
          "429:      EXTRACT_U_1(ap->rrep_type) & RREP_ACK ? \"[A] \" : \" \",",
          "430:      EXTRACT_U_1(ap->rrep_ps) & RREP_PREFIX_MASK,",
          "431:      EXTRACT_U_1(ap->rrep_hops),",
          "433:      EXTRACT_BE_U_4(ap->rrep_ds),",
          "435:      EXTRACT_BE_U_4(ap->rrep_life)));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "453:  if (length < sizeof(*ap))",
          "454:   goto trunc;",
          "455:  ND_PRINT((ndo, \" rerr %s [items %u] [%u]:\",",
          "458:  dp6 = (const struct rerr_unreach6_draft_01 *)(const void *)(ap + 1);",
          "459:  i = length - sizeof(*ap);",
          "461:   ND_TCHECK(*dp6);",
          "462:   if (i < sizeof(*dp6))",
          "463:    goto trunc;",
          "466:   dp6++;",
          "467:   i -= sizeof(*dp6);",
          "468:  }",
          "",
          "[Removed Lines]",
          "456:      ap->rerr_flags & RERR_NODELETE ? \"[D]\" : \"\",",
          "457:      ap->rerr_dc, length));",
          "460:  for (dc = ap->rerr_dc; dc != 0; dc--) {",
          "464:   ND_PRINT((ndo, \" {%s}(%ld)\", ip6addr_string(ndo, &dp6->u_da),",
          "465:       (unsigned long) EXTRACT_BE_U_4(&dp6->u_ds)));",
          "",
          "[Added Lines]",
          "456:      EXTRACT_U_1(ap->rerr_flags) & RERR_NODELETE ? \"[D]\" : \"\",",
          "457:      EXTRACT_U_1(ap->rerr_dc), length));",
          "460:  for (dc = EXTRACT_U_1(ap->rerr_dc); dc != 0; dc--) {",
          "464:   ND_PRINT((ndo, \" {%s}(%u)\", ip6addr_string(ndo, &dp6->u_da),",
          "465:       EXTRACT_BE_U_4(dp6->u_ds)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}