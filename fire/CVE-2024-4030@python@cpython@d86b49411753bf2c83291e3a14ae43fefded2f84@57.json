{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "632682c0c27f51aa20fa27d1acf80d38997e4022",
      "candidate_info": {
        "commit_hash": "632682c0c27f51aa20fa27d1acf80d38997e4022",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/632682c0c27f51aa20fa27d1acf80d38997e4022",
        "files": [
          "Lib/dataclasses.py",
          "Lib/test/test_dataclasses/__init__.py",
          "Misc/NEWS.d/next/Library/2024-04-19-14-59-53.gh-issue-118033.amS4Gw.rst"
        ],
        "message": "[3.13] gh-118033: Fix `__weakref__` not set for generic dataclasses (GH-118099) (#118821)\n\ngh-118033: Fix `__weakref__` not set for generic dataclasses (GH-118099)\n(cherry picked from commit fa9b9cb11379806843ae03b1e4ad4ccd95a63c02)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/dataclasses.py||Lib/dataclasses.py",
          "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/dataclasses.py||Lib/dataclasses.py": [
          "File: Lib/dataclasses.py -> Lib/dataclasses.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1200: def _get_slots(cls):",
          "1201:     match cls.__dict__.get('__slots__'):",
          "1204:         case None:",
          "1206:         case str(slot):",
          "1207:             yield slot",
          "1208:         # Slots may be any iterable, but we cannot handle an iterator",
          "",
          "[Removed Lines]",
          "1202:         # A class which does not define __slots__ at all is equivalent",
          "1203:         # to a class defining __slots__ = ('__dict__', '__weakref__')",
          "1205:             yield from ('__dict__', '__weakref__')",
          "",
          "[Added Lines]",
          "1202:         # `__dictoffset__` and `__weakrefoffset__` can tell us whether",
          "1203:         # the base type has dict/weakref slots, in a way that works correctly",
          "1204:         # for both Python classes and C extension types. Extension types",
          "1205:         # don't use `__slots__` for slot creation",
          "1207:             slots = []",
          "1208:             if getattr(cls, '__weakrefoffset__', -1) != 0:",
          "1209:                 slots.append('__weakref__')",
          "1210:             if getattr(cls, '__dictrefoffset__', -1) != 0:",
          "1211:                 slots.append('__dict__')",
          "1212:             yield from slots",
          "",
          "---------------"
        ],
        "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py": [
          "File: Lib/test/test_dataclasses/__init__.py -> Lib/test/test_dataclasses/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3515:         class B(A):",
          "3516:             pass",
          "3518:         B()",
          "3521: class TestDescriptors(unittest.TestCase):",
          "3522:     def test_set_name(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3518:         self.assertEqual(B.__slots__, ())",
          "3521:     def test_dataclass_derived_generic(self):",
          "3522:         T = typing.TypeVar('T')",
          "3524:         @dataclass(slots=True, weakref_slot=True)",
          "3525:         class A(typing.Generic[T]):",
          "3526:             pass",
          "3527:         self.assertEqual(A.__slots__, ('__weakref__',))",
          "3528:         self.assertTrue(A.__weakref__)",
          "3529:         A()",
          "3531:         @dataclass(slots=True, weakref_slot=True)",
          "3532:         class B[T2]:",
          "3533:             pass",
          "3534:         self.assertEqual(B.__slots__, ('__weakref__',))",
          "3535:         self.assertTrue(B.__weakref__)",
          "3536:         B()",
          "3538:     def test_dataclass_derived_generic_from_base(self):",
          "3539:         T = typing.TypeVar('T')",
          "3541:         class RawBase: ...",
          "3543:         @dataclass(slots=True, weakref_slot=True)",
          "3544:         class C1(typing.Generic[T], RawBase):",
          "3545:             pass",
          "3546:         self.assertEqual(C1.__slots__, ())",
          "3547:         self.assertTrue(C1.__weakref__)",
          "3548:         C1()",
          "3549:         @dataclass(slots=True, weakref_slot=True)",
          "3550:         class C2(RawBase, typing.Generic[T]):",
          "3551:             pass",
          "3552:         self.assertEqual(C2.__slots__, ())",
          "3553:         self.assertTrue(C2.__weakref__)",
          "3554:         C2()",
          "3556:         @dataclass(slots=True, weakref_slot=True)",
          "3557:         class D[T2](RawBase):",
          "3558:             pass",
          "3559:         self.assertEqual(D.__slots__, ())",
          "3560:         self.assertTrue(D.__weakref__)",
          "3561:         D()",
          "3563:     def test_dataclass_derived_generic_from_slotted_base(self):",
          "3564:         T = typing.TypeVar('T')",
          "3566:         class WithSlots:",
          "3567:             __slots__ = ('a', 'b')",
          "3569:         @dataclass(slots=True, weakref_slot=True)",
          "3570:         class E1(WithSlots, Generic[T]):",
          "3571:             pass",
          "3572:         self.assertEqual(E1.__slots__, ('__weakref__',))",
          "3573:         self.assertTrue(E1.__weakref__)",
          "3574:         E1()",
          "3575:         @dataclass(slots=True, weakref_slot=True)",
          "3576:         class E2(Generic[T], WithSlots):",
          "3577:             pass",
          "3578:         self.assertEqual(E2.__slots__, ('__weakref__',))",
          "3579:         self.assertTrue(E2.__weakref__)",
          "3580:         E2()",
          "3582:         @dataclass(slots=True, weakref_slot=True)",
          "3583:         class F[T2](WithSlots):",
          "3584:             pass",
          "3585:         self.assertEqual(F.__slots__, ('__weakref__',))",
          "3586:         self.assertTrue(F.__weakref__)",
          "3587:         F()",
          "3589:     def test_dataclass_derived_generic_from_slotted_base(self):",
          "3590:         T = typing.TypeVar('T')",
          "3592:         class WithWeakrefSlot:",
          "3593:             __slots__ = ('__weakref__',)",
          "3595:         @dataclass(slots=True, weakref_slot=True)",
          "3596:         class G1(WithWeakrefSlot, Generic[T]):",
          "3597:             pass",
          "3598:         self.assertEqual(G1.__slots__, ())",
          "3599:         self.assertTrue(G1.__weakref__)",
          "3600:         G1()",
          "3601:         @dataclass(slots=True, weakref_slot=True)",
          "3602:         class G2(Generic[T], WithWeakrefSlot):",
          "3603:             pass",
          "3604:         self.assertEqual(G2.__slots__, ())",
          "3605:         self.assertTrue(G2.__weakref__)",
          "3606:         G2()",
          "3608:         @dataclass(slots=True, weakref_slot=True)",
          "3609:         class H[T2](WithWeakrefSlot):",
          "3610:             pass",
          "3611:         self.assertEqual(H.__slots__, ())",
          "3612:         self.assertTrue(H.__weakref__)",
          "3613:         H()",
          "3615:     def test_dataclass_slot_dict(self):",
          "3616:         class WithDictSlot:",
          "3617:             __slots__ = ('__dict__',)",
          "3619:         @dataclass(slots=True)",
          "3620:         class A(WithDictSlot): ...",
          "3622:         self.assertEqual(A.__slots__, ())",
          "3623:         self.assertEqual(A().__dict__, {})",
          "3624:         A()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae04b6f63640606a3212c9da21b87ebc374136e1",
      "candidate_info": {
        "commit_hash": "ae04b6f63640606a3212c9da21b87ebc374136e1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ae04b6f63640606a3212c9da21b87ebc374136e1",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-06-19-01-58-54.gh-issue-120437.nCkIoI.rst",
          "Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h"
        ],
        "message": "[3.13] gh-120437: Fix `_CHECK_STACK_SPACE` optimization problems introduced in gh-118322 (GH-120712) (#120747)\n\n[3.13] gh-120437: Fix `_CHECK_STACK_SPACE` optimization problems introduced in gh-118322 (GH-120712)\n\nSigned-off-by: Manjusaka <me@manjusaka.me>\nCo-authored-by: Ken Jin <kenjin4096@gmail.com>",
        "before_after_code_files": [
          "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c": [
          "File: Python/optimizer_bytecodes.c -> Python/optimizer_bytecodes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:         (void)callable;",
          "635:         (void)self_or_null;",
          "636:         (void)args;",
          "638:         goto done;",
          "639:     }",
          "",
          "[Removed Lines]",
          "637:         first_valid_check_stack = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h": [
          "File: Python/optimizer_cases.c.h -> Python/optimizer_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:             (void)callable;",
          "1566:             (void)self_or_null;",
          "1567:             (void)args;",
          "1569:             goto done;",
          "1570:             stack_pointer[-2 - oparg] = (_Py_UopsSymbol *)new_frame;",
          "1571:             stack_pointer += -1 - oparg;",
          "",
          "[Removed Lines]",
          "1568:             first_valid_check_stack = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cffead81fae34aa678ef2f89dff4a0175a619c85",
      "candidate_info": {
        "commit_hash": "cffead81fae34aa678ef2f89dff4a0175a619c85",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cffead81fae34aa678ef2f89dff4a0175a619c85",
        "files": [
          "Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py"
        ],
        "message": "[3.13] gh-120873: Add tests for new widget options in Tk 8.7 (GH-120877) (GH-120879)\n\n(cherry picked from commit a046c848c1df0cf98092e9696594d3fb836e3530)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py": [
          "File: Lib/test/test_tkinter/test_widgets.py -> Lib/test/test_tkinter/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: @add_standard_options(StandardOptionsTests)",
          "62: class ToplevelTest(AbstractToplevelTest, unittest.TestCase):",
          "63:     OPTIONS = (",
          "65:         'class', 'colormap', 'container', 'cursor', 'height',",
          "66:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "67:         'menu', 'padx', 'pady', 'relief', 'screen',",
          "69:     )",
          "71:     def create(self, **kwargs):",
          "",
          "[Removed Lines]",
          "64:         'background', 'borderwidth',",
          "68:         'takefocus', 'use', 'visual', 'width',",
          "",
          "[Added Lines]",
          "64:         'background', 'backgroundimage', 'borderwidth',",
          "68:         'takefocus', 'tile', 'use', 'visual', 'width',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: @add_standard_options(StandardOptionsTests)",
          "105: class FrameTest(AbstractToplevelTest, unittest.TestCase):",
          "106:     OPTIONS = (",
          "108:         'class', 'colormap', 'container', 'cursor', 'height',",
          "109:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "111:     )",
          "113:     def create(self, **kwargs):",
          "",
          "[Removed Lines]",
          "107:         'background', 'borderwidth',",
          "110:         'padx', 'pady', 'relief', 'takefocus', 'visual', 'width',",
          "",
          "[Added Lines]",
          "107:         'background', 'backgroundimage', 'borderwidth',",
          "110:         'padx', 'pady', 'relief', 'takefocus', 'tile', 'visual', 'width',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "339:         'insertbackground', 'insertborderwidth',",
          "340:         'insertofftime', 'insertontime', 'insertwidth',",
          "342:         'selectbackground', 'selectborderwidth', 'selectforeground',",
          "343:         'show', 'state', 'takefocus', 'textvariable',",
          "344:         'validate', 'validatecommand', 'width', 'xscrollcommand',",
          "",
          "[Removed Lines]",
          "341:         'invalidcommand', 'justify', 'readonlybackground', 'relief',",
          "",
          "[Added Lines]",
          "341:         'invalidcommand', 'justify', 'placeholder', 'placeholderforeground',",
          "342:         'readonlybackground', 'relief',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:         'increment',",
          "433:         'insertbackground', 'insertborderwidth',",
          "434:         'insertofftime', 'insertontime', 'insertwidth',",
          "437:         'selectbackground', 'selectborderwidth', 'selectforeground',",
          "438:         'state', 'takefocus', 'textvariable', 'to',",
          "439:         'validate', 'validatecommand', 'values',",
          "",
          "[Removed Lines]",
          "435:         'invalidcommand', 'justify', 'relief', 'readonlybackground',",
          "436:         'repeatdelay', 'repeatinterval',",
          "",
          "[Added Lines]",
          "436:         'invalidcommand', 'justify', 'placeholder', 'placeholderforeground',",
          "437:         'relief', 'readonlybackground', 'repeatdelay', 'repeatinterval',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1176:     def create(self, **kwargs):",
          "1177:         return tkinter.Scrollbar(self.root, **kwargs)",
          "1183:     def test_configure_elementborderwidth(self):",
          "1184:         widget = self.create()",
          "1185:         self.checkPixelsParam(widget, 'elementborderwidth', 4.3, 5.6, '1m')",
          "",
          "[Removed Lines]",
          "1179:     def test_configure_activerelief(self):",
          "1180:         widget = self.create()",
          "1181:         self.checkReliefParam(widget, 'activerelief')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1386: class MenuTest(AbstractWidgetTest, unittest.TestCase):",
          "1387:     OPTIONS = (",
          "1388:         'activebackground', 'activeborderwidth', 'activeforeground',",
          "1389:         'background', 'borderwidth', 'cursor',",
          "1390:         'disabledforeground', 'font', 'foreground',",
          "1391:         'postcommand', 'relief', 'selectcolor', 'takefocus',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1386:         'activerelief',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1401:         i = widget.index('none')",
          "1402:         self.assertIsNone(i)",
          "1404:     def test_configure_postcommand(self):",
          "1405:         widget = self.create()",
          "1406:         self.checkCommandParam(widget, 'postcommand')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:     test_configure_activerelief = requires_tk(8, 7)(StandardOptionsTests.test_configure_activerelief)",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py": [
          "File: Lib/test/test_tkinter/widget_tests.py -> Lib/test/test_tkinter/widget_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import re",
          "4: import tkinter",
          "6:                                   pixels_conv, tcl_obj_eq)",
          "7: import test.support",
          "",
          "[Removed Lines]",
          "5: from test.test_tkinter.support import (AbstractTkTest, tk_version,",
          "",
          "[Added Lines]",
          "5: from test.test_tkinter.support import (AbstractTkTest, requires_tk, tk_version,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     _clip_highlightthickness = True",
          "18:     _clip_pad = False",
          "19:     _clip_borderwidth = False",
          "21:     @property",
          "22:     def scaling(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:     _allow_empty_justify = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:             aliases = {",
          "201:                 'bd': 'borderwidth',",
          "202:                 'bg': 'background',",
          "203:                 'fg': 'foreground',",
          "204:                 'invcmd': 'invalidcommand',",
          "205:                 'vcmd': 'validatecommand',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:                 'bgimg': 'backgroundimage',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:         widget = self.create()",
          "243:         self.checkColorParam(widget, 'activeforeground')",
          "245:     def test_configure_anchor(self):",
          "246:         widget = self.create()",
          "247:         self.checkEnumParam(widget, 'anchor',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     def test_configure_activerelief(self):",
          "248:         widget = self.create()",
          "249:         self.checkReliefParam(widget, 'activerelief')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:         if 'bg' in self.OPTIONS:",
          "254:             self.checkColorParam(widget, 'bg')",
          "256:     def test_configure_bitmap(self):",
          "257:         widget = self.create()",
          "258:         self.checkParam(widget, 'bitmap', 'questhead')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     @requires_tk(8, 7)",
          "263:     def test_configure_backgroundimage(self):",
          "264:         widget = self.create()",
          "265:         self.checkImageParam(widget, 'backgroundimage')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "299:         widget = self.create()",
          "300:         self.checkParam(widget, 'font',",
          "301:                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')",
          "305:     def test_configure_foreground(self):",
          "306:         widget = self.create()",
          "",
          "[Removed Lines]",
          "302:         self.checkInvalidParam(widget, 'font', '',",
          "303:                                errmsg='font \"\" doesn\\'t exist')",
          "",
          "[Added Lines]",
          "313:         is_ttk = widget.__class__.__module__ == 'tkinter.ttk'",
          "314:         if not is_ttk:",
          "315:             self.checkInvalidParam(widget, 'font', '',",
          "316:                                    errmsg='font \"\" doesn\\'t exist')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:     def test_configure_justify(self):",
          "357:         widget = self.create()",
          "359:                             fullname='justification')",
          "361:     def test_configure_orient(self):",
          "",
          "[Removed Lines]",
          "358:         self.checkEnumParam(widget, 'justify', 'left', 'right', 'center',",
          "",
          "[Added Lines]",
          "371:         values = ('left', 'right', 'center')",
          "372:         if self._allow_empty_justify:",
          "373:             values += ('',)",
          "374:         self.checkEnumParam(widget, 'justify', *values,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "379:         self.checkParam(widget, 'pady', -2, expected=expected,",
          "380:                         conv=self._conv_pad_pixels)",
          "382:     def test_configure_relief(self):",
          "383:         widget = self.create()",
          "384:         self.checkReliefParam(widget, 'relief')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     @requires_tk(8, 7)",
          "399:     def test_configure_placeholder(self):",
          "400:         widget = self.create()",
          "401:         self.checkParam(widget, 'placeholder', 'xxx')",
          "403:     @requires_tk(8, 7)",
          "404:     def test_configure_placeholderforeground(self):",
          "405:         widget = self.create()",
          "406:         self.checkColorParam(widget, 'placeholderforeground')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "424:         var = tkinter.StringVar(self.root)",
          "425:         self.checkVariableParam(widget, 'textvariable', var)",
          "427:     def test_configure_troughcolor(self):",
          "428:         widget = self.create()",
          "429:         self.checkColorParam(widget, 'troughcolor')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:     @requires_tk(8, 7)",
          "454:     def test_configure_tile(self):",
          "455:         widget = self.create()",
          "456:         self.checkBooleanParam(widget, 'tile')",
          "",
          "---------------"
        ],
        "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py": [
          "File: Lib/test/test_ttk/test_widgets.py -> Lib/test/test_ttk/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: class AbstractLabelTest(AbstractWidgetTest):",
          "171:     def checkImageParam(self, widget, name):",
          "172:         image = tkinter.PhotoImage(master=self.root, name='image1')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     _allow_empty_justify = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         widget = self.create()",
          "189:         self.checkEnumParam(widget, 'compound', *values, allow_empty=True)",
          "191:     def test_configure_width(self):",
          "192:         widget = self.create()",
          "193:         self.checkParams(widget, 'width', 402, -402, 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     test_configure_justify = requires_tk(8, 7)(StandardOptionsTests.test_configure_justify)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:         'underline', 'width', 'wraplength',",
          "204:     )",
          "205:     _conv_pixels = False",
          "207:     def create(self, **kwargs):",
          "208:         return ttk.Label(self.root, **kwargs)",
          "223: @add_standard_options(StandardTtkOptionsTests)",
          "224: class ButtonTest(AbstractLabelTest, unittest.TestCase):",
          "225:     OPTIONS = (",
          "226:         'class', 'command', 'compound', 'cursor', 'default',",
          "228:         'takefocus', 'text', 'textvariable',",
          "229:         'underline', 'width',",
          "230:     )",
          "",
          "[Removed Lines]",
          "210:     def test_configure_font(self):",
          "211:         widget = self.create()",
          "212:         self.checkParam(widget, 'font',",
          "213:                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')",
          "215:     def test_configure_justify(self):",
          "216:         widget = self.create()",
          "217:         values = ('left', 'right', 'center')",
          "218:         if tk_version >= (8, 7):",
          "219:             values += ('',)",
          "220:         self.checkEnumParam(widget, 'justify', *values,",
          "221:                             fullname='justification')",
          "227:         'image', 'padding', 'state', 'style',",
          "",
          "[Added Lines]",
          "209:     _allow_empty_justify = tk_version >= (8, 7)",
          "214:     test_configure_justify = StandardOptionsTests.test_configure_justify",
          "221:         'image', 'justify', 'padding', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249: class CheckbuttonTest(AbstractLabelTest, unittest.TestCase):",
          "250:     OPTIONS = (",
          "251:         'class', 'command', 'compound', 'cursor',",
          "253:         'offvalue', 'onvalue',",
          "254:         'padding', 'state', 'style',",
          "255:         'takefocus', 'text', 'textvariable',",
          "",
          "[Removed Lines]",
          "252:         'image',",
          "",
          "[Added Lines]",
          "246:         'image', 'justify',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:         'background', 'class', 'cursor',",
          "339:         'exportselection', 'font', 'foreground',",
          "340:         'invalidcommand', 'justify',",
          "341:         'show', 'state', 'style', 'takefocus', 'textvariable',",
          "342:         'validate', 'validatecommand', 'width', 'xscrollcommand',",
          "343:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:         'placeholder', 'placeholderforeground',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:     OPTIONS = (",
          "461:         'background', 'class', 'cursor', 'exportselection',",
          "462:         'font', 'foreground', 'height', 'invalidcommand',",
          "464:         'takefocus', 'textvariable',",
          "465:         'validate', 'validatecommand', 'values',",
          "466:         'width', 'xscrollcommand',",
          "",
          "[Removed Lines]",
          "463:         'justify', 'postcommand', 'show', 'state', 'style',",
          "",
          "[Added Lines]",
          "458:         'justify', 'placeholder', 'placeholderforeground', 'postcommand',",
          "459:         'show', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720: class RadiobuttonTest(AbstractLabelTest, unittest.TestCase):",
          "721:     OPTIONS = (",
          "722:         'class', 'command', 'compound', 'cursor',",
          "724:         'padding', 'state', 'style',",
          "725:         'takefocus', 'text', 'textvariable',",
          "726:         'underline', 'value', 'variable', 'width',",
          "",
          "[Removed Lines]",
          "723:         'image',",
          "",
          "[Added Lines]",
          "719:         'image', 'justify',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "774: class MenubuttonTest(AbstractLabelTest, unittest.TestCase):",
          "775:     OPTIONS = (",
          "776:         'class', 'compound', 'cursor', 'direction',",
          "778:         'takefocus', 'text', 'textvariable',",
          "779:         'underline', 'width',",
          "780:     )",
          "",
          "[Removed Lines]",
          "777:         'image', 'menu', 'padding', 'state', 'style',",
          "",
          "[Added Lines]",
          "773:         'image', 'justify', 'menu', 'padding', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "906: @add_standard_options(StandardTtkOptionsTests)",
          "907: class ProgressbarTest(AbstractWidgetTest, unittest.TestCase):",
          "908:     OPTIONS = (",
          "911:         'style', 'takefocus', 'value', 'variable',",
          "912:     )",
          "913:     _conv_pixels = False",
          "914:     default_orient = 'horizontal'",
          "916:     def create(self, **kwargs):",
          "917:         return ttk.Progressbar(self.root, **kwargs)",
          "919:     def test_configure_length(self):",
          "920:         widget = self.create()",
          "921:         self.checkPixelsParam(widget, 'length', 100.1, 56.7, '2i')",
          "",
          "[Removed Lines]",
          "909:         'class', 'cursor', 'orient', 'length',",
          "910:         'mode', 'maximum', 'phase',",
          "",
          "[Added Lines]",
          "905:         'anchor', 'class', 'cursor', 'font', 'foreground', 'justify',",
          "906:         'orient', 'length',",
          "907:         'mode', 'maximum', 'phase', 'text', 'wraplength',",
          "911:     _allow_empty_justify = True",
          "917:     @requires_tk(8, 7)",
          "918:     def test_configure_anchor(self):",
          "919:         widget = self.create()",
          "920:         self.checkEnumParam(widget, 'anchor',",
          "921:                 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'center', '')",
          "923:     test_configure_font = requires_tk(8, 7)(StandardOptionsTests.test_configure_font)",
          "924:     test_configure_foreground = requires_tk(8, 7)(StandardOptionsTests.test_configure_foreground)",
          "925:     test_configure_justify = requires_tk(8, 7)(StandardTtkOptionsTests.test_configure_justify)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "932:         # XXX",
          "933:         pass",
          "935:     def test_configure_value(self):",
          "936:         widget = self.create()",
          "937:         self.checkFloatParam(widget, 'value', 150.2, 77.7, 0, -10,",
          "938:                              conv=False)",
          "941: @unittest.skipIf(sys.platform == 'darwin',",
          "942:                  'ttk.Scrollbar is special on MacOSX')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:     test_configure_text = requires_tk(8, 7)(StandardOptionsTests.test_configure_text)",
          "950:     test_configure_wraplength = requires_tk(8, 7)(StandardOptionsTests.test_configure_wraplength)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1173:     OPTIONS = (",
          "1174:         'background', 'class', 'command', 'cursor', 'exportselection',",
          "1175:         'font', 'foreground', 'format', 'from',  'increment',",
          "1177:         'takefocus', 'textvariable', 'to', 'validate', 'validatecommand',",
          "1178:         'values', 'width', 'wrap', 'xscrollcommand',",
          "1179:     )",
          "",
          "[Removed Lines]",
          "1176:         'invalidcommand', 'justify', 'show', 'state', 'style',",
          "",
          "[Added Lines]",
          "1188:         'invalidcommand', 'justify',",
          "1189:         'placeholder', 'placeholderforeground',",
          "1190:         'show', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1347: class TreeviewTest(AbstractWidgetTest, unittest.TestCase):",
          "1348:     OPTIONS = (",
          "1349:         'class', 'columns', 'cursor', 'displaycolumns',",
          "1352:     )",
          "1354:     def setUp(self):",
          "",
          "[Removed Lines]",
          "1350:         'height', 'padding', 'selectmode', 'show',",
          "1351:         'style', 'takefocus', 'xscrollcommand', 'yscrollcommand',",
          "",
          "[Added Lines]",
          "1364:         'height', 'padding', 'selectmode', 'selecttype', 'show', 'striped',",
          "1365:         'style', 'takefocus', 'titlecolumns', 'titleitems',",
          "1366:         'xscrollcommand', 'yscrollcommand',",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1393:         self.checkEnumParam(widget, 'selectmode',",
          "1394:                             'none', 'browse', 'extended')",
          "1396:     def test_configure_show(self):",
          "1397:         widget = self.create()",
          "1398:         self.checkParam(widget, 'show', 'tree headings',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411:     @requires_tk(8, 7)",
          "1412:     def test_configure_selecttype(self):",
          "1413:         widget = self.create()",
          "1414:         self.checkEnumParam(widget, 'selecttype', 'item', 'cell')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1402:         self.checkParam(widget, 'show', 'tree', expected=('tree',))",
          "1403:         self.checkParam(widget, 'show', 'headings', expected=('headings',))",
          "1405:     def test_bbox(self):",
          "1406:         self.tv.pack()",
          "1407:         self.assertEqual(self.tv.bbox(''), '')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1425:     @requires_tk(8, 7)",
          "1426:     def test_configure_striped(self):",
          "1427:         widget = self.create()",
          "1428:         self.checkBooleanParam(widget, 'striped')",
          "1430:     @requires_tk(8, 7)",
          "1431:     def test_configure_titlecolumns(self):",
          "1432:         widget = self.create()",
          "1433:         self.checkIntegerParam(widget, 'titlecolumns', 0, 1, 5)",
          "1434:         self.checkInvalidParam(widget, 'titlecolumns', -2)",
          "1436:     @requires_tk(8, 7)",
          "1437:     def test_configure_titleitems(self):",
          "1438:         widget = self.create()",
          "1439:         self.checkIntegerParam(widget, 'titleitems', 0, 1, 5)",
          "1440:         self.checkInvalidParam(widget, 'titleitems', -2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b714d545f5ae7712c9246b6083c9573ad24257d",
      "candidate_info": {
        "commit_hash": "6b714d545f5ae7712c9246b6083c9573ad24257d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6b714d545f5ae7712c9246b6083c9573ad24257d",
        "files": [
          "Misc/NEWS.d/next/Build/2024-06-19-21-05-15.gh-issue-120602.UyDARz.rst",
          "Tools/jit/_llvm.py"
        ],
        "message": "[3.13] GH-120602: Support LLVM_VERSION_SUFFIX for JIT builds (GH-120768)\n\n(cherry picked from commit 285f42c850da0d8ca31850088eb7b9247cbbbc71)\n\nCo-authored-by: Xarblu <xarblu@protonmail.com>",
        "before_after_code_files": [
          "Tools/jit/_llvm.py||Tools/jit/_llvm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tools/jit/_llvm.py||Tools/jit/_llvm.py": [
          "File: Tools/jit/_llvm.py -> Tools/jit/_llvm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import typing",
          "11: _LLVM_VERSION = 18",
          "14: _P = typing.ParamSpec(\"_P\")",
          "15: _R = typing.TypeVar(\"_R\")",
          "",
          "[Removed Lines]",
          "12: _LLVM_VERSION_PATTERN = re.compile(rf\"version\\s+{_LLVM_VERSION}\\.\\d+\\.\\d+\\s+\")",
          "",
          "[Added Lines]",
          "12: _LLVM_VERSION_PATTERN = re.compile(rf\"version\\s+{_LLVM_VERSION}\\.\\d+\\.\\d+\\S*\\s+\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
      "candidate_info": {
        "commit_hash": "447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
        "files": [
          "Doc/data/stable_abi.dat",
          "Include/internal/pycore_pyerrors.h",
          "Include/pyerrors.h",
          "Lib/codeop.py",
          "Lib/test/exception_hierarchy.txt",
          "Lib/test/test_pickle.py",
          "Lib/test/test_stable_abi_ctypes.py",
          "Misc/stable_abi.toml",
          "Objects/exceptions.c",
          "PC/python3dll.c",
          "Parser/pegen.c"
        ],
        "message": "[3.13] gh-119521: Rename IncompleteInputError to _IncompleteInputError and remove from public API/ABI (GH-119680, GH-120955) (GH-120944)\n\n- gh-119521: Rename IncompleteInputError to _IncompleteInputError and remove from public API/ABI (GH-119680)\n  (cherry picked from commit ce1064e4c9bcfd673323ad690e60f86e1ab907bb)\n\n- gh-119521: Use `PyAPI_DATA`, not `extern`, for `_PyExc_IncompleteInputError` (GH-120955)\n  (cherry picked from commit ac61d58db0753a3b37de21dbc6e86b38f2a93f1b)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_pyerrors.h||Include/internal/pycore_pyerrors.h",
          "Include/pyerrors.h||Include/pyerrors.h",
          "Lib/codeop.py||Lib/codeop.py",
          "Lib/test/test_pickle.py||Lib/test/test_pickle.py",
          "Lib/test/test_stable_abi_ctypes.py||Lib/test/test_stable_abi_ctypes.py",
          "Objects/exceptions.c||Objects/exceptions.c",
          "PC/python3dll.c||PC/python3dll.c",
          "Parser/pegen.c||Parser/pegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_pyerrors.h||Include/internal/pycore_pyerrors.h": [
          "File: Include/internal/pycore_pyerrors.h -> Include/internal/pycore_pyerrors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: Py_DEPRECATED(3.12) extern void _PyErr_ChainExceptions(PyObject *, PyObject *, PyObject *);",
          "170: #ifdef __cplusplus",
          "171: }",
          "172: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: PyAPI_DATA(PyTypeObject) _PyExc_IncompleteInputError;",
          "173: #define PyExc_IncompleteInputError ((PyObject *)(&_PyExc_IncompleteInputError))",
          "",
          "---------------"
        ],
        "Include/pyerrors.h||Include/pyerrors.h": [
          "File: Include/pyerrors.h -> Include/pyerrors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: PyAPI_DATA(PyObject *) PyExc_SyntaxError;",
          "109: PyAPI_DATA(PyObject *) PyExc_IndentationError;",
          "110: PyAPI_DATA(PyObject *) PyExc_TabError;",
          "112: PyAPI_DATA(PyObject *) PyExc_ReferenceError;",
          "113: PyAPI_DATA(PyObject *) PyExc_SystemError;",
          "114: PyAPI_DATA(PyObject *) PyExc_SystemExit;",
          "",
          "[Removed Lines]",
          "111: PyAPI_DATA(PyObject *) PyExc_IncompleteInputError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/codeop.py||Lib/codeop.py": [
          "File: Lib/codeop.py -> Lib/codeop.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:             try:",
          "66:                 compiler(source + \"\\n\", filename, symbol)",
          "67:                 return None",
          "69:                 return None",
          "70:             except SyntaxError as e:",
          "71:                 pass",
          "",
          "[Removed Lines]",
          "68:             except IncompleteInputError as e:",
          "",
          "[Added Lines]",
          "68:             except _IncompleteInputError as e:",
          "",
          "---------------"
        ],
        "Lib/test/test_pickle.py||Lib/test/test_pickle.py": [
          "File: Lib/test/test_pickle.py -> Lib/test/test_pickle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:                            EncodingWarning,",
          "570:                            BaseExceptionGroup,",
          "571:                            ExceptionGroup,",
          "573:                     continue",
          "574:                 if exc is not OSError and issubclass(exc, OSError):",
          "575:                     self.assertEqual(reverse_mapping('builtins', name),",
          "",
          "[Removed Lines]",
          "572:                            IncompleteInputError):",
          "",
          "[Added Lines]",
          "572:                            _IncompleteInputError):",
          "",
          "---------------"
        ],
        "Lib/test/test_stable_abi_ctypes.py||Lib/test/test_stable_abi_ctypes.py": [
          "File: Lib/test/test_stable_abi_ctypes.py -> Lib/test/test_stable_abi_ctypes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     \"PyExc_IOError\",",
          "268:     \"PyExc_ImportError\",",
          "269:     \"PyExc_ImportWarning\",",
          "271:     \"PyExc_IndentationError\",",
          "272:     \"PyExc_IndexError\",",
          "273:     \"PyExc_InterruptedError\",",
          "",
          "[Removed Lines]",
          "270:     \"PyExc_IncompleteInputError\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Objects/exceptions.c||Objects/exceptions.c": [
          "File: Objects/exceptions.c -> Objects/exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510: }; \\",
          "511: PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "515:     PyVarObject_HEAD_INIT(NULL, 0) \\",
          "517:     sizeof(Py ## EXCSTORE ## Object), \\",
          "518:     0, (destructor)EXCSTORE ## _dealloc, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\",
          "519:     0, 0, 0, 0, 0, \\",
          "",
          "[Removed Lines]",
          "513: #define MiddlingExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCDOC) \\",
          "514: static PyTypeObject _PyExc_ ## EXCNAME = { \\",
          "516:     # EXCNAME, \\",
          "",
          "[Added Lines]",
          "513: #define MiddlingExtendsExceptionEx(EXCBASE, EXCNAME, PYEXCNAME, EXCSTORE, EXCDOC) \\",
          "514: PyTypeObject _PyExc_ ## EXCNAME = { \\",
          "516:     # PYEXCNAME, \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:     (inquiry)EXCSTORE ## _clear, 0, 0, 0, 0, 0, 0, 0, &_ ## EXCBASE, \\",
          "523:     0, 0, 0, offsetof(Py ## EXCSTORE ## Object, dict), \\",
          "524:     (initproc)EXCSTORE ## _init, 0, 0, \\",
          "528: #define ComplexExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCNEW, \\",
          "529:                                 EXCMETHODS, EXCMEMBERS, EXCGETSET, \\",
          "",
          "[Removed Lines]",
          "525: }; \\",
          "526: PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "",
          "[Added Lines]",
          "525: };",
          "527: #define MiddlingExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCDOC) \\",
          "528:     static MiddlingExtendsExceptionEx( \\",
          "529:         EXCBASE, EXCNAME, EXCNAME, EXCSTORE, EXCDOC); \\",
          "530:     PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2576: MiddlingExtendsException(PyExc_SyntaxError, IncompleteInputError, SyntaxError,",
          "2577:                          \"incomplete input.\");",
          "",
          "[Added Lines]",
          "2580: MiddlingExtendsExceptionEx(PyExc_SyntaxError, IncompleteInputError, _IncompleteInputError,",
          "2581:                            SyntaxError, \"incomplete input.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3642:     ITEM(IndentationError), // base: SyntaxError(Exception)",
          "3644:     ITEM(IndexError),  // base: LookupError(Exception)",
          "3645:     ITEM(KeyError),  // base: LookupError(Exception)",
          "3646:     ITEM(ModuleNotFoundError), // base: ImportError(Exception)",
          "",
          "[Removed Lines]",
          "3643:     ITEM(IncompleteInputError), // base: SyntaxError(Exception)",
          "",
          "[Added Lines]",
          "3647:     {&_PyExc_IncompleteInputError, \"_IncompleteInputError\"}, // base: SyntaxError(Exception)",
          "",
          "---------------"
        ],
        "PC/python3dll.c||PC/python3dll.c": [
          "File: PC/python3dll.c -> PC/python3dll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839: EXPORT_DATA(PyExc_GeneratorExit)",
          "840: EXPORT_DATA(PyExc_ImportError)",
          "841: EXPORT_DATA(PyExc_ImportWarning)",
          "843: EXPORT_DATA(PyExc_IndentationError)",
          "844: EXPORT_DATA(PyExc_IndexError)",
          "845: EXPORT_DATA(PyExc_InterruptedError)",
          "",
          "[Removed Lines]",
          "842: EXPORT_DATA(PyExc_IncompleteInputError)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Parser/pegen.c||Parser/pegen.c": [
          "File: Parser/pegen.c -> Parser/pegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <Python.h>",
          "2: #include \"pycore_ast.h\"           // _PyAST_Validate(),",
          "3: #include \"pycore_pystate.h\"       // _PyThreadState_GET()",
          "4: #include <errcode.h>",
          "6: #include \"lexer/lexer.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"pycore_pyerrors.h\"      // PyExc_IncompleteInputError",
          "",
          "---------------"
        ]
      }
    }
  ]
}