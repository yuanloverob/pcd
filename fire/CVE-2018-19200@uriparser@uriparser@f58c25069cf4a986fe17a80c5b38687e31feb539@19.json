{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0416b1479a85d8d56215ecd69b3a3cc1eae01083",
      "candidate_info": {
        "commit_hash": "0416b1479a85d8d56215ecd69b3a3cc1eae01083",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0416b1479a85d8d56215ecd69b3a3cc1eae01083",
        "files": [
          "src/UriParse.c",
          "src/UriResolve.c",
          "src/UriShorten.c"
        ],
        "message": "Resolve remaining internal calls to plain FreeUriMembers\n\nTo make this work, a bunch of other internal functions needed\nextention:\n- ParseIPv6address2\n- ParseIpFuture\n- ParsePctEncoded\n- ParsePctSubUnres\n- ParsePchar\n- ParseSegmentNz\n- ParseSegment\n- ParseQueryFrag\n- ParseUriTailTwo\n- ParseUriTail\n- ParseIpFutLoop\n- ParseIpFutStopGo\n- StopSyntax\n- StopMalloc",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c",
          "src/UriResolve.c||src/UriResolve.c",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: static const URI_CHAR * URI_FUNC(ParseAuthorityTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "161: static const URI_CHAR * URI_FUNC(ParseHexZero)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "162: static const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "165: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "167: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "163: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "164: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "166: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "163: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "164: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "166: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "176: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "177: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "181: static const URI_CHAR * URI_FUNC(ParsePort)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "185: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "186: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "189: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "191: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "178: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "179: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "180: static const URI_CHAR * URI_FUNC(ParsePctSubUnres)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "182: static const URI_CHAR * URI_FUNC(ParseQueryFrag)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "183: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "184: static const URI_CHAR * URI_FUNC(ParseSegmentNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "188: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "178: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "179: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "180: static const URI_CHAR * URI_FUNC(ParsePctSubUnres)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "182: static const URI_CHAR * URI_FUNC(ParseQueryFrag)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "183: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "184: static const URI_CHAR * URI_FUNC(ParseSegmentNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "188: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "201:   UriMemoryManager * memory);",
          "208: static URI_INLINE void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state,",
          "211:  state->errorPos = errorPos;",
          "212:  state->errorCode = URI_ERROR_SYNTAX;",
          "213: }",
          "219:  state->errorPos = NULL;",
          "220:  state->errorCode = URI_ERROR_MALLOC;",
          "221: }",
          "",
          "[Removed Lines]",
          "203: static void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state, const URI_CHAR * errorPos);",
          "204: static void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state);",
          "209:   const URI_CHAR * errorPos) {",
          "210:  URI_FUNC(FreeUriMembers)(state->uri);",
          "217: static URI_INLINE void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state) {",
          "218:  URI_FUNC(FreeUriMembers)(state->uri);",
          "",
          "[Added Lines]",
          "203: static void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state, const URI_CHAR * errorPos, UriMemoryManager * memory);",
          "204: static void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state, UriMemoryManager * memory);",
          "209:   const URI_CHAR * errorPos, UriMemoryManager * memory) {",
          "210:  URI_FUNC(FreeUriMembersMm)(state->uri, memory);",
          "217: static URI_INLINE void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state, UriMemoryManager * memory) {",
          "218:  URI_FUNC(FreeUriMembersMm)(state->uri, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "384:  if (first >= afterLast) {",
          "386:   return NULL;",
          "387:  }",
          "",
          "[Removed Lines]",
          "383: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "385:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "383: static const URI_CHAR * URI_FUNC(ParseIpFutLoop)(URI_TYPE(ParserState) * state,",
          "384:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "385:   UriMemoryManager * memory) {",
          "387:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "405:  case _UT('='):",
          "406:  case URI_SET_DIGIT:",
          "407:  case URI_SET_ALPHA:",
          "410:  default:",
          "412:   return NULL;",
          "413:  }",
          "414: }",
          "",
          "[Removed Lines]",
          "408:   return URI_FUNC(ParseIpFutStopGo)(state, first + 1, afterLast);",
          "411:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "410:   return URI_FUNC(ParseIpFutStopGo)(state, first + 1, afterLast, memory);",
          "413:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:  if (first >= afterLast) {",
          "424:   return afterLast;",
          "425:  }",
          "",
          "[Removed Lines]",
          "422: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "424: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(",
          "425:   URI_TYPE(ParserState) * state,",
          "426:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "427:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "443:  case _UT('='):",
          "444:  case URI_SET_DIGIT:",
          "445:  case URI_SET_ALPHA:",
          "448:  default:",
          "449:   return first;",
          "",
          "[Removed Lines]",
          "446:   return URI_FUNC(ParseIpFutLoop)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "451:   return URI_FUNC(ParseIpFutLoop)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "459:  if (first >= afterLast) {",
          "461:   return NULL;",
          "462:  }",
          "",
          "[Removed Lines]",
          "458: static const URI_CHAR * URI_FUNC(ParseIpFuture)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "460:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "463: static const URI_CHAR * URI_FUNC(ParseIpFuture)(URI_TYPE(ParserState) * state,",
          "464:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "465:   UriMemoryManager * memory) {",
          "467:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "469:  case _UT('v'):",
          "471:   if (first + 1 >= afterLast) {",
          "473:    return NULL;",
          "474:   }",
          "",
          "[Removed Lines]",
          "472:    URI_FUNC(StopSyntax)(state, first + 1);",
          "",
          "[Added Lines]",
          "479:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "484:     }",
          "485:     if ((afterHexZero >= afterLast)",
          "486:       || (*afterHexZero != _UT('.'))) {",
          "488:      return NULL;",
          "489:     }",
          "493:     if (afterIpFutLoop == NULL) {",
          "494:      return NULL;",
          "495:     }",
          "",
          "[Removed Lines]",
          "487:      URI_FUNC(StopSyntax)(state, afterHexZero);",
          "492:     afterIpFutLoop = URI_FUNC(ParseIpFutLoop)(state, afterHexZero + 1, afterLast);",
          "",
          "[Added Lines]",
          "494:      URI_FUNC(StopSyntax)(state, afterHexZero, memory);",
          "499:     afterIpFutLoop = URI_FUNC(ParseIpFutLoop)(state, afterHexZero + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "499:    }",
          "501:   default:",
          "503:    return NULL;",
          "504:   }",
          "507:  default:",
          "509:   return NULL;",
          "510:  }",
          "",
          "[Removed Lines]",
          "502:    URI_FUNC(StopSyntax)(state, first + 1);",
          "508:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "509:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "515:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "521:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "522:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "523:  if (first >= afterLast) {",
          "525:   return NULL;",
          "526:  }",
          "",
          "[Removed Lines]",
          "524:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "531:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "529:  case _UT('v'):",
          "530:   {",
          "531:    const URI_CHAR * const afterIpFuture",
          "533:    if (afterIpFuture == NULL) {",
          "534:     return NULL;",
          "535:    }",
          "536:    if ((afterIpFuture >= afterLast)",
          "537:      || (*afterIpFuture != _UT(']'))) {",
          "539:     return NULL;",
          "540:    }",
          "541:    return afterIpFuture + 1;",
          "",
          "[Removed Lines]",
          "532:      = URI_FUNC(ParseIpFuture)(state, first, afterLast);",
          "538:     URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "539:      = URI_FUNC(ParseIpFuture)(state, first, afterLast, memory);",
          "545:     URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "546:  case URI_SET_HEXDIG:",
          "548:   if (state->uri->hostData.ip6 == NULL) {",
          "550:    return NULL;",
          "551:   }",
          "554:  default:",
          "556:   return NULL;",
          "557:  }",
          "558: }",
          "",
          "[Removed Lines]",
          "549:    URI_FUNC(StopMalloc)(state);",
          "552:   return URI_FUNC(ParseIPv6address2)(state, first, afterLast);",
          "555:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "556:    URI_FUNC(StopMalloc)(state, memory);",
          "559:   return URI_FUNC(ParseIPv6address2)(state, first, afterLast, memory);",
          "562:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "566:  int zipperEver = 0;",
          "567:  int quadsDone = 0;",
          "568:  int digitCount = 0;",
          "",
          "[Removed Lines]",
          "565: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "572: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(",
          "573:   URI_TYPE(ParserState) * state,",
          "574:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "575:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "576:  for (;;) {",
          "577:   if (first >= afterLast) {",
          "579:    return NULL;",
          "580:   }",
          "",
          "[Removed Lines]",
          "578:    URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "588:    URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "586:     switch (*first) {",
          "587:     case URI_SET_DIGIT:",
          "588:      if (digitCount == 4) {",
          "590:       return NULL;",
          "591:      }",
          "592:      digitHistory[digitCount++] = (unsigned char)(9 + *first - _UT('9'));",
          "",
          "[Removed Lines]",
          "589:       URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "599:       URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "597:        || (digitCount == 0)",
          "598:        || (digitCount == 4)) {",
          "601:       return NULL;",
          "602:      } else if ((digitCount > 1)",
          "603:        && (digitHistory[0] == 0)) {",
          "606:       return NULL;",
          "607:      } else if ((digitCount > 2)",
          "608:        && (digitHistory[1] == 0)) {",
          "611:       return NULL;",
          "612:      } else if ((digitCount == 3)",
          "613:        && (100 * digitHistory[0]",
          "",
          "[Removed Lines]",
          "600:       URI_FUNC(StopSyntax)(state, first);",
          "605:       URI_FUNC(StopSyntax)(state, first - digitCount);",
          "610:       URI_FUNC(StopSyntax)(state, first - digitCount + 1);",
          "",
          "[Added Lines]",
          "610:       URI_FUNC(StopSyntax)(state, first, memory);",
          "615:       URI_FUNC(StopSyntax)(state, first - digitCount, memory);",
          "620:       URI_FUNC(StopSyntax)(state, first - digitCount + 1, memory);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "615:         + digitHistory[2] > 255)) {",
          "617:       if (digitHistory[0] > 2) {",
          "619:       } else if (digitHistory[1] > 5) {",
          "621:       } else {",
          "623:       }",
          "624:       return NULL;",
          "625:      }",
          "",
          "[Removed Lines]",
          "618:        URI_FUNC(StopSyntax)(state, first - 3);",
          "620:        URI_FUNC(StopSyntax)(state, first - 2);",
          "622:        URI_FUNC(StopSyntax)(state, first - 1);",
          "",
          "[Added Lines]",
          "628:        URI_FUNC(StopSyntax)(state, first - 3, memory);",
          "630:        URI_FUNC(StopSyntax)(state, first - 2, memory);",
          "632:        URI_FUNC(StopSyntax)(state, first - 1, memory);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "635:        || (digitCount == 0)",
          "636:        || (digitCount == 4)) {",
          "639:       return NULL;",
          "640:      } else if ((digitCount > 1)",
          "641:        && (digitHistory[0] == 0)) {",
          "644:       return NULL;",
          "645:      } else if ((digitCount > 2)",
          "646:        && (digitHistory[1] == 0)) {",
          "649:       return NULL;",
          "650:      } else if ((digitCount == 3)",
          "651:        && (100 * digitHistory[0]",
          "",
          "[Removed Lines]",
          "638:       URI_FUNC(StopSyntax)(state, first);",
          "643:       URI_FUNC(StopSyntax)(state, first - digitCount);",
          "648:       URI_FUNC(StopSyntax)(state, first - digitCount + 1);",
          "",
          "[Added Lines]",
          "648:       URI_FUNC(StopSyntax)(state, first, memory);",
          "653:       URI_FUNC(StopSyntax)(state, first - digitCount, memory);",
          "658:       URI_FUNC(StopSyntax)(state, first - digitCount + 1, memory);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "653:         + digitHistory[2] > 255)) {",
          "655:       if (digitHistory[0] > 2) {",
          "657:       } else if (digitHistory[1] > 5) {",
          "659:       } else {",
          "661:       }",
          "662:       return NULL;",
          "663:      }",
          "",
          "[Removed Lines]",
          "656:        URI_FUNC(StopSyntax)(state, first - 3);",
          "658:        URI_FUNC(StopSyntax)(state, first - 2);",
          "660:        URI_FUNC(StopSyntax)(state, first - 1);",
          "",
          "[Added Lines]",
          "666:        URI_FUNC(StopSyntax)(state, first - 3, memory);",
          "668:        URI_FUNC(StopSyntax)(state, first - 2, memory);",
          "670:        URI_FUNC(StopSyntax)(state, first - 1, memory);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "674:      return first + 1;",
          "676:     default:",
          "678:      return NULL;",
          "679:     }",
          "680:     first++;",
          "",
          "[Removed Lines]",
          "677:      URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "687:      URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "688:     case URI_SET_HEX_LETTER_LOWER:",
          "689:      letterAmong = 1;",
          "690:      if (digitCount == 4) {",
          "692:       return NULL;",
          "693:      }",
          "694:      digitHistory[digitCount] = (unsigned char)(15 + *first - _UT('f'));",
          "",
          "[Removed Lines]",
          "691:       URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "701:       URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "698:     case URI_SET_HEX_LETTER_UPPER:",
          "699:      letterAmong = 1;",
          "700:      if (digitCount == 4) {",
          "702:       return NULL;",
          "703:      }",
          "704:      digitHistory[digitCount] = (unsigned char)(15 + *first - _UT('F'));",
          "",
          "[Removed Lines]",
          "701:       URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "711:       URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "708:     case URI_SET_DIGIT:",
          "709:      if (digitCount == 4) {",
          "711:       return NULL;",
          "712:      }",
          "713:      digitHistory[digitCount] = (unsigned char)(9 + *first - _UT('9'));",
          "",
          "[Removed Lines]",
          "710:       URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "720:       URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "734:       if (quadsDone >= 8 - zipperEver) {",
          "736:        return NULL;",
          "737:       }",
          "740:       if (first + 1 >= afterLast) {",
          "742:        return NULL;",
          "743:       }",
          "744:       if (first[1] == _UT(':')) {",
          "",
          "[Removed Lines]",
          "735:        URI_FUNC(StopSyntax)(state, first);",
          "741:        URI_FUNC(StopSyntax)(state, first + 1);",
          "",
          "[Added Lines]",
          "745:        URI_FUNC(StopSyntax)(state, first, memory);",
          "751:        URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "747:        first++;",
          "748:        if (zipperEver) {",
          "751:        }",
          "",
          "[Removed Lines]",
          "749:         URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "759:         URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "758:        if (first + 1 >= afterLast) {",
          "761:        }",
          "762:        if (first[1] == _UT(':')) {",
          "765:        }",
          "766:       }",
          "",
          "[Removed Lines]",
          "759:         URI_FUNC(StopSyntax)(state, first + 1);",
          "763:         URI_FUNC(StopSyntax)(state, first + 1);",
          "",
          "[Added Lines]",
          "769:         URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "773:         URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "778:        || (digitCount == 0)",
          "779:        || (digitCount == 4)) {",
          "782:       return NULL;",
          "783:      } else if ((digitCount > 1)",
          "784:        && (digitHistory[0] == 0)) {",
          "787:       return NULL;",
          "788:      } else if ((digitCount > 2)",
          "789:        && (digitHistory[1] == 0)) {",
          "792:       return NULL;",
          "793:      } else if ((digitCount == 3)",
          "794:        && (100 * digitHistory[0]",
          "",
          "[Removed Lines]",
          "781:       URI_FUNC(StopSyntax)(state, first);",
          "786:       URI_FUNC(StopSyntax)(state, first - digitCount);",
          "791:       URI_FUNC(StopSyntax)(state, first - digitCount + 1);",
          "",
          "[Added Lines]",
          "791:       URI_FUNC(StopSyntax)(state, first, memory);",
          "796:       URI_FUNC(StopSyntax)(state, first - digitCount, memory);",
          "801:       URI_FUNC(StopSyntax)(state, first - digitCount + 1, memory);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "796:         + digitHistory[2] > 255)) {",
          "798:       if (digitHistory[0] > 2) {",
          "800:       } else if (digitHistory[1] > 5) {",
          "802:       } else {",
          "804:       }",
          "805:       return NULL;",
          "806:      }",
          "",
          "[Removed Lines]",
          "799:        URI_FUNC(StopSyntax)(state, first - 3);",
          "801:        URI_FUNC(StopSyntax)(state, first - 2);",
          "803:        URI_FUNC(StopSyntax)(state, first - 1);",
          "",
          "[Added Lines]",
          "809:        URI_FUNC(StopSyntax)(state, first - 3, memory);",
          "811:        URI_FUNC(StopSyntax)(state, first - 2, memory);",
          "813:        URI_FUNC(StopSyntax)(state, first - 1, memory);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "817:     case _UT(']'):",
          "819:      if (!zipperEver && !((quadsDone == 7) && (digitCount > 0))) {",
          "821:       return NULL;",
          "822:      }",
          "",
          "[Removed Lines]",
          "820:       URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "830:       URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "844:     default:",
          "846:      return NULL;",
          "847:     }",
          "848:     first++;",
          "850:     if (first >= afterLast) {",
          "853:     }",
          "854:    } while (walking);",
          "",
          "[Removed Lines]",
          "845:      URI_FUNC(StopSyntax)(state, first);",
          "851:      URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "855:      URI_FUNC(StopSyntax)(state, first, memory);",
          "861:      URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "871:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "872:  if (first >= afterLast) {",
          "875:    return NULL;",
          "876:   }",
          "",
          "[Removed Lines]",
          "874:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "884:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "882:  case _UT('%'):",
          "883:   {",
          "884:    const URI_CHAR * const afterPctEncoded",
          "886:    if (afterPctEncoded == NULL) {",
          "887:     return NULL;",
          "888:    }",
          "",
          "[Removed Lines]",
          "885:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "895:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "914:    const URI_CHAR * afterZeroMoreSlashSegs;",
          "915:    const URI_CHAR * afterSegment;",
          "918:     return NULL;",
          "919:    }",
          "922:    if (afterSegment == NULL) {",
          "923:     return NULL;",
          "924:    }",
          "927:     return NULL;",
          "928:    }",
          "929:    afterZeroMoreSlashSegs",
          "",
          "[Removed Lines]",
          "917:     URI_FUNC(StopMalloc)(state);",
          "921:    afterSegment = URI_FUNC(ParseSegment)(state, first + 1, afterLast);",
          "926:     URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "927:     URI_FUNC(StopMalloc)(state, memory);",
          "931:    afterSegment = URI_FUNC(ParseSegment)(state, first + 1, afterLast, memory);",
          "936:     URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "931:    if (afterZeroMoreSlashSegs == NULL) {",
          "932:     return NULL;",
          "933:    }",
          "935:   }",
          "937:  default:",
          "940:    return NULL;",
          "941:   }",
          "944:  }",
          "945: }",
          "",
          "[Removed Lines]",
          "934:    return URI_FUNC(ParseUriTail)(state, afterZeroMoreSlashSegs, afterLast);",
          "939:    URI_FUNC(StopMalloc)(state);",
          "943:   return URI_FUNC(ParseUriTail)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "944:    return URI_FUNC(ParseUriTail)(state, afterZeroMoreSlashSegs, afterLast, memory);",
          "949:    URI_FUNC(StopMalloc)(state, memory);",
          "953:   return URI_FUNC(ParseUriTail)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1007:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1008:  if (first >= afterLast) {",
          "1009:   if (!URI_FUNC(OnExitOwnHost2)(state, first, memory)) {",
          "1011:    return NULL;",
          "1012:   }",
          "1013:   return afterLast;",
          "",
          "[Removed Lines]",
          "1010:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1020:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1034:  case URI_SET_ALPHA:",
          "1035:   {",
          "1036:    const URI_CHAR * const afterPctSubUnres",
          "1038:    if (afterPctSubUnres == NULL) {",
          "1039:     return NULL;",
          "1040:    }",
          "",
          "[Removed Lines]",
          "1037:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1047:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1044:  default:",
          "1045:   if (!URI_FUNC(OnExitOwnHost2)(state, first, memory)) {",
          "1047:    return NULL;",
          "1048:   }",
          "1049:   return URI_FUNC(ParseAuthorityTwo)(state, first, afterLast);",
          "",
          "[Removed Lines]",
          "1046:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1056:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1084:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1085:  if (first >= afterLast) {",
          "1086:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "1088:    return NULL;",
          "1089:   }",
          "1090:   return afterLast;",
          "",
          "[Removed Lines]",
          "1087:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1097:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1116:  default:",
          "1117:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "1119:    return NULL;",
          "1120:   }",
          "1121:   return first;",
          "",
          "[Removed Lines]",
          "1118:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1128:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1133:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1134:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1135:  if (first >= afterLast) {",
          "1137:   return NULL;",
          "1138:  }",
          "",
          "[Removed Lines]",
          "1136:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1146:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1158:  case URI_SET_ALPHA:",
          "1159:   {",
          "1160:    const URI_CHAR * const afterPctSubUnres",
          "1162:    if (afterPctSubUnres == NULL) {",
          "1163:     return NULL;",
          "1164:    }",
          "",
          "[Removed Lines]",
          "1161:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1171:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1176:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "1178:  default:",
          "1180:   return NULL;",
          "1181:  }",
          "1182: }",
          "",
          "[Removed Lines]",
          "1179:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1189:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1224:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1225:  if (first >= afterLast) {",
          "1226:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first, memory)) {",
          "1228:    return NULL;",
          "1229:   }",
          "1230:   return afterLast;",
          "",
          "[Removed Lines]",
          "1227:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1237:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1264:   {",
          "1265:    const URI_CHAR * const afterPct",
          "1267:    if (afterPct == NULL) {",
          "1268:     return NULL;",
          "1269:    }",
          "",
          "[Removed Lines]",
          "1266:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1276:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1280:  default:",
          "1281:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first, memory)) {",
          "1283:    return NULL;",
          "1284:   }",
          "1285:   return first;",
          "",
          "[Removed Lines]",
          "1282:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1292:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1297:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1298:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1299:  if (first >= afterLast) {",
          "1301:   return NULL;",
          "1302:  }",
          "",
          "[Removed Lines]",
          "1300:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1310:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1322:  case URI_SET_ALPHA:",
          "1323:   {",
          "1324:    const URI_CHAR * const afterPctSubUnres",
          "1326:    if (afterPctSubUnres == NULL) {",
          "1327:     return NULL;",
          "1328:    }",
          "",
          "[Removed Lines]",
          "1325:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1335:      = URI_FUNC(ParsePctSubUnres)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1339:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "1341:  default:",
          "1343:   return NULL;",
          "1344:  }",
          "1345: }",
          "",
          "[Removed Lines]",
          "1342:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1352:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1403:  case _UT('/'):",
          "1404:   {",
          "1405:    const URI_CHAR * const afterSegment",
          "1407:    if (afterSegment == NULL) {",
          "1408:     return NULL;",
          "1409:    }",
          "1412:     return NULL;",
          "1413:    }",
          "1414:    return URI_FUNC(ParsePathAbsEmpty)(state, afterSegment, afterLast, memory);",
          "",
          "[Removed Lines]",
          "1406:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast);",
          "1411:     URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1416:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast, memory);",
          "1421:     URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1455:  case URI_SET_ALPHA:",
          "1456:   {",
          "1457:    const URI_CHAR * const afterSegmentNz",
          "1459:    if (afterSegmentNz == NULL) {",
          "1460:     return NULL;",
          "1461:    }",
          "1464:     return NULL;",
          "1465:    }",
          "1466:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegmentNz, afterLast, memory);",
          "",
          "[Removed Lines]",
          "1458:      = URI_FUNC(ParseSegmentNz)(state, first, afterLast);",
          "1463:     URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1468:      = URI_FUNC(ParseSegmentNz)(state, first, afterLast, memory);",
          "1473:     URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1480:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1481:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1482:  const URI_CHAR * const afterSegmentNz",
          "1484:  if (afterSegmentNz == NULL) {",
          "1485:   return NULL;",
          "1486:  } else {",
          "1489:    return NULL;",
          "1490:   }",
          "1491:  }",
          "",
          "[Removed Lines]",
          "1483:    = URI_FUNC(ParseSegmentNz)(state, first, afterLast);",
          "1488:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1493:    = URI_FUNC(ParseSegmentNz)(state, first, afterLast, memory);",
          "1498:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1505:  if (first >= afterLast) {",
          "1507:   return NULL;",
          "1508:  }",
          "1510:  switch (*first) {",
          "1511:  case _UT('%'):",
          "1514:  case _UT(':'):",
          "1515:  case _UT('@'):",
          "",
          "[Removed Lines]",
          "1504: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1506:   URI_FUNC(StopSyntax)(state, first);",
          "1512:   return URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1514: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state,",
          "1515:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1516:   UriMemoryManager * memory) {",
          "1518:   URI_FUNC(StopSyntax)(state, first, memory);",
          "1524:   return URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1533:   return first + 1;",
          "1535:  default:",
          "1537:   return NULL;",
          "1538:  }",
          "1539: }",
          "",
          "[Removed Lines]",
          "1536:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1548:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1547:  if (first >= afterLast) {",
          "1549:   return NULL;",
          "1550:  }",
          "",
          "[Removed Lines]",
          "1546: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1548:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1558: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(",
          "1559:   URI_TYPE(ParserState) * state,",
          "1560:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1561:   UriMemoryManager * memory) {",
          "1563:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1557:  case _UT('%'):",
          "1559:   if (first + 1 >= afterLast) {",
          "1561:    return NULL;",
          "1562:   }",
          "1564:   switch (first[1]) {",
          "1565:   case URI_SET_HEXDIG:",
          "1566:    if (first + 2 >= afterLast) {",
          "1568:     return NULL;",
          "1569:    }",
          "",
          "[Removed Lines]",
          "1560:    URI_FUNC(StopSyntax)(state, first + 1);",
          "1567:     URI_FUNC(StopSyntax)(state, first + 2);",
          "",
          "[Added Lines]",
          "1575:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "1582:     URI_FUNC(StopSyntax)(state, first + 2, memory);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1573:     return first + 3;",
          "1575:    default:",
          "1577:     return NULL;",
          "1578:    }",
          "1580:   default:",
          "1582:    return NULL;",
          "1583:   }",
          "1586:  default:",
          "1588:   return NULL;",
          "1589:  }",
          "",
          "[Removed Lines]",
          "1576:     URI_FUNC(StopSyntax)(state, first + 2);",
          "1581:    URI_FUNC(StopSyntax)(state, first + 1);",
          "1587:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1591:     URI_FUNC(StopSyntax)(state, first + 2, memory);",
          "1596:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "1602:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1601:  if (first >= afterLast) {",
          "1603:   return NULL;",
          "1604:  }",
          "1606:  switch (*first) {",
          "1607:  case _UT('%'):",
          "1610:  case _UT('!'):",
          "1611:  case _UT('$'):",
          "",
          "[Removed Lines]",
          "1600: static const URI_CHAR * URI_FUNC(ParsePctSubUnres)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1602:   URI_FUNC(StopSyntax)(state, first);",
          "1608:   return URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1615: static const URI_CHAR * URI_FUNC(ParsePctSubUnres)(",
          "1616:   URI_TYPE(ParserState) * state,",
          "1617:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1618:   UriMemoryManager * memory) {",
          "1620:   URI_FUNC(StopSyntax)(state, first, memory);",
          "1626:   return URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1627:   return first + 1;",
          "1629:  default:",
          "1631:   return NULL;",
          "1632:  }",
          "1633: }",
          "",
          "[Removed Lines]",
          "1630:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Added Lines]",
          "1648:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1664:  if (first >= afterLast) {",
          "1665:   return afterLast;",
          "1666:  }",
          "",
          "[Removed Lines]",
          "1663: static const URI_CHAR * URI_FUNC(ParseQueryFrag)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1681: static const URI_CHAR * URI_FUNC(ParseQueryFrag)(URI_TYPE(ParserState) * state,",
          "1682:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1683:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1688:  case URI_SET_ALPHA:",
          "1689:   {",
          "1690:    const URI_CHAR * const afterPchar",
          "1692:    if (afterPchar == NULL) {",
          "1693:     return NULL;",
          "1694:    }",
          "1696:   }",
          "1698:  case _UT('/'):",
          "1699:  case _UT('?'):",
          "1702:  default:",
          "1703:   return first;",
          "",
          "[Removed Lines]",
          "1691:      = URI_FUNC(ParsePchar)(state, first, afterLast);",
          "1695:    return URI_FUNC(ParseQueryFrag)(state, afterPchar, afterLast);",
          "1700:   return URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1711:      = URI_FUNC(ParsePchar)(state, first, afterLast, memory);",
          "1715:    return URI_FUNC(ParseQueryFrag)(state, afterPchar, afterLast, memory);",
          "1720:   return URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1714:  if (first >= afterLast) {",
          "1715:   return afterLast;",
          "1716:  }",
          "",
          "[Removed Lines]",
          "1713: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1733: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state,",
          "1734:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1735:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1738:  case URI_SET_ALPHA:",
          "1739:   {",
          "1740:    const URI_CHAR * const afterPchar",
          "1742:    if (afterPchar == NULL) {",
          "1743:     return NULL;",
          "1744:    }",
          "1746:   }",
          "1748:  default:",
          "",
          "[Removed Lines]",
          "1741:      = URI_FUNC(ParsePchar)(state, first, afterLast);",
          "1745:    return URI_FUNC(ParseSegment)(state, afterPchar, afterLast);",
          "",
          "[Added Lines]",
          "1763:      = URI_FUNC(ParsePchar)(state, first, afterLast, memory);",
          "1767:    return URI_FUNC(ParseSegment)(state, afterPchar, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1759:  const URI_CHAR * const afterPchar",
          "1761:  if (afterPchar == NULL) {",
          "1762:   return NULL;",
          "1763:  }",
          "1765: }",
          "",
          "[Removed Lines]",
          "1758: static URI_INLINE const URI_CHAR * URI_FUNC(ParseSegmentNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1760:    = URI_FUNC(ParsePchar)(state, first, afterLast);",
          "1764:  return URI_FUNC(ParseSegment)(state, afterPchar, afterLast);",
          "",
          "[Added Lines]",
          "1780: static URI_INLINE const URI_CHAR * URI_FUNC(ParseSegmentNz)(",
          "1781:   URI_TYPE(ParserState) * state,",
          "1782:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1783:   UriMemoryManager * memory) {",
          "1785:    = URI_FUNC(ParsePchar)(state, first, afterLast, memory);",
          "1789:  return URI_FUNC(ParseSegment)(state, afterPchar, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1807:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1808:  if (first >= afterLast) {",
          "1809:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first, memory)) {",
          "1811:    return NULL;",
          "1812:   }",
          "1813:   return afterLast;",
          "",
          "[Removed Lines]",
          "1810:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1835:    URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1824:  case _UT('%'):",
          "1825:   {",
          "1826:    const URI_CHAR * const afterPctEncoded",
          "1828:    if (afterPctEncoded == NULL) {",
          "1829:     return NULL;",
          "1830:    }",
          "",
          "[Removed Lines]",
          "1827:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1852:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1850:   {",
          "1851:    const URI_CHAR * afterZeroMoreSlashSegs;",
          "1852:    const URI_CHAR * const afterSegment",
          "1854:    if (afterSegment == NULL) {",
          "1855:     return NULL;",
          "1856:    }",
          "1859:     return NULL;",
          "1860:    }",
          "1864:     return NULL;",
          "1865:    }",
          "1866:    afterZeroMoreSlashSegs",
          "",
          "[Removed Lines]",
          "1853:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast);",
          "1858:     URI_FUNC(StopMalloc)(state);",
          "1863:     URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "1878:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast, memory);",
          "1883:     URI_FUNC(StopMalloc)(state, memory);",
          "1888:     URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1868:    if (afterZeroMoreSlashSegs == NULL) {",
          "1869:     return NULL;",
          "1870:    }",
          "1872:   }",
          "1874:  case _UT(':'):",
          "",
          "[Removed Lines]",
          "1871:    return URI_FUNC(ParseUriTail)(state, afterZeroMoreSlashSegs, afterLast);",
          "",
          "[Added Lines]",
          "1896:    return URI_FUNC(ParseUriTail)(state, afterZeroMoreSlashSegs, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1879:    if (afterHierPart == NULL) {",
          "1880:     return NULL;",
          "1881:    }",
          "1883:   }",
          "1885:  default:",
          "1886:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first, memory)) {",
          "1888:    return NULL;",
          "1889:   }",
          "1891:  }",
          "1892: }",
          "",
          "[Removed Lines]",
          "1882:    return URI_FUNC(ParseUriTail)(state, afterHierPart, afterLast);",
          "1887:    URI_FUNC(StopMalloc)(state);",
          "1890:   return URI_FUNC(ParseUriTail)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1907:    return URI_FUNC(ParseUriTail)(state, afterHierPart, afterLast, memory);",
          "1912:    URI_FUNC(StopMalloc)(state, memory);",
          "1915:   return URI_FUNC(ParseUriTail)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1941:  case _UT('%'):",
          "1942:   {",
          "1943:    const URI_CHAR * const afterPctEncoded",
          "1945:    if (afterPctEncoded == NULL) {",
          "1946:     return NULL;",
          "1947:    }",
          "",
          "[Removed Lines]",
          "1944:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1969:      = URI_FUNC(ParsePctEncoded)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1956:    if (afterPartHelperTwo == NULL) {",
          "1957:     return NULL;",
          "1958:    }",
          "1960:   }",
          "1962:  default:",
          "1964:  }",
          "1965: }",
          "",
          "[Removed Lines]",
          "1959:    return URI_FUNC(ParseUriTail)(state, afterPartHelperTwo, afterLast);",
          "1963:   return URI_FUNC(ParseUriTail)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1984:    return URI_FUNC(ParseUriTail)(state, afterPartHelperTwo, afterLast, memory);",
          "1988:   return URI_FUNC(ParseUriTail)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1975:  if (first >= afterLast) {",
          "1976:   return afterLast;",
          "1977:  }",
          "",
          "[Removed Lines]",
          "1974: static URI_INLINE const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1999: static URI_INLINE const URI_CHAR * URI_FUNC(ParseUriTail)(",
          "2000:   URI_TYPE(ParserState) * state,",
          "2001:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2002:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1979:  switch (*first) {",
          "1980:  case _UT('#'):",
          "1981:   {",
          "1983:    if (afterQueryFrag == NULL) {",
          "1984:     return NULL;",
          "1985:    }",
          "",
          "[Removed Lines]",
          "1982:    const URI_CHAR * const afterQueryFrag = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "2010:    const URI_CHAR * const afterQueryFrag = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1991:  case _UT('?'):",
          "1992:   {",
          "1993:    const URI_CHAR * const afterQueryFrag",
          "1995:    if (afterQueryFrag == NULL) {",
          "1996:     return NULL;",
          "1997:    }",
          "2001:   }",
          "2003:  default:",
          "",
          "[Removed Lines]",
          "1994:      = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast);",
          "2000:    return URI_FUNC(ParseUriTailTwo)(state, afterQueryFrag, afterLast);",
          "",
          "[Added Lines]",
          "2022:      = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast, memory);",
          "2028:    return URI_FUNC(ParseUriTailTwo)(state, afterQueryFrag, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2015:  if (first >= afterLast) {",
          "2016:   return afterLast;",
          "2017:  }",
          "",
          "[Removed Lines]",
          "2014: static URI_INLINE const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "2042: static URI_INLINE const URI_CHAR * URI_FUNC(ParseUriTailTwo)(",
          "2043:   URI_TYPE(ParserState) * state,",
          "2044:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2045:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2019:  switch (*first) {",
          "2020:  case _UT('#'):",
          "2021:   {",
          "2023:    if (afterQueryFrag == NULL) {",
          "2024:     return NULL;",
          "2025:    }",
          "",
          "[Removed Lines]",
          "2022:    const URI_CHAR * const afterQueryFrag = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "2053:    const URI_CHAR * const afterQueryFrag = URI_FUNC(ParseQueryFrag)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2050:  case _UT('/'):",
          "2051:   {",
          "2052:    const URI_CHAR * const afterSegment",
          "2054:    if (afterSegment == NULL) {",
          "2055:     return NULL;",
          "2056:    }",
          "2059:     return NULL;",
          "2060:    }",
          "2061:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast, memory);",
          "",
          "[Removed Lines]",
          "2053:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast);",
          "2058:     URI_FUNC(StopMalloc)(state);",
          "",
          "[Added Lines]",
          "2084:      = URI_FUNC(ParseSegment)(state, first + 1, afterLast, memory);",
          "2089:     URI_FUNC(StopMalloc)(state, memory);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2138:   return state->errorCode;",
          "2139:  }",
          "2140:  if (afterUriReference != afterLast) {",
          "2142:   return state->errorCode;",
          "2143:  }",
          "2144:  return URI_SUCCESS;",
          "",
          "[Removed Lines]",
          "2141:   URI_FUNC(StopSyntax)(state, afterUriReference);",
          "",
          "[Added Lines]",
          "2172:   URI_FUNC(StopSyntax)(state, afterUriReference, memory);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2284:  parser.uri = &uri;",
          "2285:  URI_FUNC(ResetParserStateExceptUri)(&parser);",
          "2286:  parser.uri->hostData.ip6 = memory->malloc(memory, 1 * sizeof(UriIp6));",
          "2289:  return res == afterIpSix ? URI_TRUE : URI_FALSE;",
          "2290: }",
          "",
          "[Removed Lines]",
          "2287:  res = URI_FUNC(ParseIPv6address2)(&parser, text, afterIpSix);",
          "2288:  URI_FUNC(FreeUriMembers)(&uri);",
          "",
          "[Added Lines]",
          "2318:  res = URI_FUNC(ParseIPv6address2)(&parser, text, afterIpSix, memory);",
          "2319:  URI_FUNC(FreeUriMembersMm)(&uri, memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:  res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, options, memory);",
          "321:  if ((res != URI_SUCCESS) && (absDest != NULL)) {",
          "323:  }",
          "324:  return res;",
          "325: }",
          "",
          "[Removed Lines]",
          "322:   URI_FUNC(FreeUriMembers)(absDest);",
          "",
          "[Added Lines]",
          "322:   URI_FUNC(FreeUriMembersMm)(absDest, memory);",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:  res = URI_FUNC(RemoveBaseUriImpl)(dest, absSource,",
          "315:    absBase, domainRootMode, memory);",
          "316:  if ((res != URI_SUCCESS) && (dest != NULL)) {",
          "318:  }",
          "319:  return res;",
          "320: }",
          "",
          "[Removed Lines]",
          "317:   URI_FUNC(FreeUriMembers)(dest);",
          "",
          "[Added Lines]",
          "317:   URI_FUNC(FreeUriMembersMm)(dest, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06bcbb099fe96e8bf4ab058d14385b506162b12c",
      "candidate_info": {
        "commit_hash": "06bcbb099fe96e8bf4ab058d14385b506162b12c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/06bcbb099fe96e8bf4ab058d14385b506162b12c",
        "files": [
          "src/UriResolve.c"
        ],
        "message": "Pass memory manager to ResolveAbsolutePathFlag",
        "before_after_code_files": [
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: }",
          "127:  if (absWork == NULL) {",
          "128:   return URI_ERROR_NULL;",
          "129:  }",
          "",
          "[Removed Lines]",
          "124: static int URI_FUNC(ResolveAbsolutePathFlag)(URI_TYPE(Uri) * absWork) {",
          "",
          "[Added Lines]",
          "124: static int URI_FUNC(ResolveAbsolutePathFlag)(URI_TYPE(Uri) * absWork,",
          "125:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "249:          return URI_ERROR_MALLOC;",
          "250:         }",
          "252:         if (res != URI_SUCCESS) {",
          "253:          return res;",
          "254:         }",
          "",
          "[Removed Lines]",
          "251:         res = URI_FUNC(ResolveAbsolutePathFlag)(absDest);",
          "",
          "[Added Lines]",
          "250:         res = URI_FUNC(ResolveAbsolutePathFlag)(absDest, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ecfd8666d25e2064b02f54b5d1fcebd3dd95b278",
      "candidate_info": {
        "commit_hash": "ecfd8666d25e2064b02f54b5d1fcebd3dd95b278",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/ecfd8666d25e2064b02f54b5d1fcebd3dd95b278",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "Uri.h: Add missing links to ParseSingleUri*",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "304bbee67ad174bdf82ec948c6ddb93b75edb5df",
      "candidate_info": {
        "commit_hash": "304bbee67ad174bdf82ec948c6ddb93b75edb5df",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/304bbee67ad174bdf82ec948c6ddb93b75edb5df",
        "files": [
          "include/uriparser/UriBase.h"
        ],
        "message": "UriBase.h: Mark a few things \"since 0.8.7\"",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ]
      }
    },
    {
      "candidate_hash": "d31119f984a8b3ad92f69cda65ad7fda0e2a3e09",
      "candidate_info": {
        "commit_hash": "d31119f984a8b3ad92f69cda65ad7fda0e2a3e09",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/d31119f984a8b3ad92f69cda65ad7fda0e2a3e09",
        "files": [
          "src/UriResolve.c"
        ],
        "message": "Pass memory manager to MergePath",
        "before_after_code_files": [
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static URI_INLINE UriBool URI_FUNC(MergePath)(URI_TYPE(Uri) * absWork,",
          "76:  URI_TYPE(PathSegment) * sourceWalker;",
          "77:  URI_TYPE(PathSegment) * destPrev;",
          "78:  if (relAppend->pathHead == NULL) {",
          "",
          "[Removed Lines]",
          "74:   const URI_TYPE(Uri) * relAppend) {",
          "",
          "[Added Lines]",
          "74:   const URI_TYPE(Uri) * relAppend, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:         if (!URI_FUNC(CopyPath)(absDest, absBase, memory)) {",
          "264:          return URI_ERROR_MALLOC;",
          "265:         }",
          "267:          return URI_ERROR_MALLOC;",
          "268:         }",
          "",
          "[Removed Lines]",
          "266:         if (!URI_FUNC(MergePath)(absDest, relSource)) {",
          "",
          "[Added Lines]",
          "265:         if (!URI_FUNC(MergePath)(absDest, relSource, memory)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}