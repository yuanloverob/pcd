{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c864efba25465eb6a4fff7e0a6df80a9ba449370",
      "candidate_info": {
        "commit_hash": "c864efba25465eb6a4fff7e0a6df80a9ba449370",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c864efba25465eb6a4fff7e0a6df80a9ba449370",
        "files": [
          "Doc/c-api/monitoring.rst",
          "Include/cpython/monitoring.h",
          "Include/internal/pycore_opcode_metadata.h",
          "Lib/test/test_monitoring.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-20-14-57-39.gh-issue-118692.Qadm7F.rst",
          "Modules/_testcapi/monitoring.c",
          "Python/bytecodes.c",
          "Python/ceval.c",
          "Python/generated_cases.c.h",
          "Python/instrumentation.c"
        ],
        "message": "[3.13] gh-118692: Avoid creating unnecessary StopIteration instances for monitoring (GH-119216) (#119497)\n\n* gh-118692: Avoid creating unnecessary StopIteration instances for monitoring (GH-119216)\n(cherry picked from commit 6e9863d7a3516cc76d6ce13923b15620499f3855)\n\n---------\n\nCo-authored-by: Irit Katriel <1055913+iritkatriel@users.noreply.github.com>",
        "before_after_code_files": [
          "Include/cpython/monitoring.h||Include/cpython/monitoring.h",
          "Include/internal/pycore_opcode_metadata.h||Include/internal/pycore_opcode_metadata.h",
          "Lib/test/test_monitoring.py||Lib/test/test_monitoring.py",
          "Modules/_testcapi/monitoring.c||Modules/_testcapi/monitoring.c",
          "Python/bytecodes.c||Python/bytecodes.c",
          "Python/ceval.c||Python/ceval.c",
          "Python/generated_cases.c.h||Python/generated_cases.c.h",
          "Python/instrumentation.c||Python/instrumentation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/monitoring.h||Include/cpython/monitoring.h": [
          "File: Include/cpython/monitoring.h -> Include/cpython/monitoring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: _PyMonitoring_FirePyUnwindEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset);",
          "103: PyAPI_FUNC(int)",
          "107: #define _PYMONITORING_IF_ACTIVE(STATE, X)  \\",
          "",
          "[Removed Lines]",
          "104: _PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset);",
          "",
          "[Added Lines]",
          "104: _PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset, PyObject *value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: }",
          "242: static inline int",
          "244: {",
          "245:     _PYMONITORING_IF_ACTIVE(",
          "246:         state,",
          "248: }",
          "250: #undef _PYMONITORING_IF_ACTIVE",
          "",
          "[Removed Lines]",
          "243: PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset)",
          "247:         _PyMonitoring_FireStopIterationEvent(state, codelike, offset));",
          "",
          "[Added Lines]",
          "243: PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset, PyObject *value)",
          "247:         _PyMonitoring_FireStopIterationEvent(state, codelike, offset, value));",
          "",
          "---------------"
        ],
        "Include/internal/pycore_opcode_metadata.h||Include/internal/pycore_opcode_metadata.h": [
          "File: Include/internal/pycore_opcode_metadata.h -> Include/internal/pycore_opcode_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060:     [INSTRUMENTED_CALL] = { true, INSTR_FMT_IBC00, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },",
          "1061:     [INSTRUMENTED_CALL_FUNCTION_EX] = { true, INSTR_FMT_IX, 0 },",
          "1062:     [INSTRUMENTED_CALL_KW] = { true, INSTR_FMT_IB, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },",
          "1065:     [INSTRUMENTED_FOR_ITER] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG | HAS_ESCAPES_FLAG },",
          "1066:     [INSTRUMENTED_INSTRUCTION] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ESCAPES_FLAG },",
          "1067:     [INSTRUMENTED_JUMP_BACKWARD] = { true, INSTR_FMT_IBC, HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG },",
          "",
          "[Removed Lines]",
          "1063:     [INSTRUMENTED_END_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG | HAS_ESCAPES_FLAG },",
          "1064:     [INSTRUMENTED_END_SEND] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG | HAS_ESCAPES_FLAG },",
          "",
          "[Added Lines]",
          "1063:     [INSTRUMENTED_END_FOR] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG },",
          "1064:     [INSTRUMENTED_END_SEND] = { true, INSTR_FMT_IX, HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG },",
          "",
          "---------------"
        ],
        "Lib/test/test_monitoring.py||Lib/test/test_monitoring.py": [
          "File: Lib/test/test_monitoring.py -> Lib/test/test_monitoring.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1938:             ( 1, E.RAISE, capi.fire_event_raise, ValueError(2)),",
          "1939:             ( 1, E.EXCEPTION_HANDLED, capi.fire_event_exception_handled, ValueError(5)),",
          "1940:             ( 1, E.PY_UNWIND, capi.fire_event_py_unwind, ValueError(6)),",
          "1942:         ]",
          "1946:         class Counter:",
          "1948:                 self.count = 0",
          "1949:             def __call__(self, *args):",
          "1950:                 self.count += 1",
          "1952:         try:",
          "1954:             sys.monitoring.register_callback(TEST_TOOL, event, counter)",
          "1955:             if event == E.C_RETURN or event == E.C_RAISE:",
          "1956:                 sys.monitoring.set_events(TEST_TOOL, E.CALL)",
          "",
          "[Removed Lines]",
          "1941:             ( 1, E.STOP_ITERATION, capi.fire_event_stop_iteration, ValueError(7)),",
          "1945:     def check_event_count(self, event, func, args, expected):",
          "1947:             def __init__(self):",
          "1953:             counter = Counter()",
          "",
          "[Added Lines]",
          "1941:             ( 1, E.STOP_ITERATION, capi.fire_event_stop_iteration, 7),",
          "1942:             ( 1, E.STOP_ITERATION, capi.fire_event_stop_iteration, StopIteration(8)),",
          "1945:         self.EXPECT_RAISED_EXCEPTION = [E.PY_THROW, E.RAISE, E.EXCEPTION_HANDLED, E.PY_UNWIND]",
          "1948:     def check_event_count(self, event, func, args, expected, callback_raises=None):",
          "1950:             def __init__(self, callback_raises):",
          "1951:                 self.callback_raises = callback_raises",
          "1956:                 if self.callback_raises:",
          "1957:                     exc = self.callback_raises",
          "1958:                     self.callback_raises = None",
          "1959:                     raise exc",
          "1962:             counter = Counter(callback_raises)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1988:     def test_missing_exception(self):",
          "1989:         for _, event, function, *args in self.cases:",
          "1991:                 continue",
          "1992:             offset = 0",
          "1993:             self.codelike = _testcapi.CodeLike(1)",
          "1994:             with self.subTest(function.__name__):",
          "",
          "[Removed Lines]",
          "1990:             if not (args and isinstance(args[-1], BaseException)):",
          "",
          "[Added Lines]",
          "1999:             if event not in self.EXPECT_RAISED_EXCEPTION:",
          "2001:             assert args and isinstance(args[-1], BaseException)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1997:                 expected = ValueError(f\"Firing event {evt} with no exception set\")",
          "1998:                 self.check_event_count(event, function, args_, expected)",
          "2001:     CANNOT_DISABLE = { E.PY_THROW, E.RAISE, E.RERAISE,",
          "2002:                        E.EXCEPTION_HANDLED, E.PY_UNWIND }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2010:     def test_fire_event_failing_callback(self):",
          "2011:         for expected, event, function, *args in self.cases:",
          "2012:             offset = 0",
          "2013:             self.codelike = _testcapi.CodeLike(1)",
          "2014:             with self.subTest(function.__name__):",
          "2015:                 args_ = (self.codelike, offset) + tuple(args)",
          "2016:                 exc = OSError(42)",
          "2017:                 with self.assertRaises(type(exc)):",
          "2018:                     self.check_event_count(event, function, args_, expected,",
          "2019:                                            callback_raises=exc)",
          "",
          "---------------"
        ],
        "Modules/_testcapi/monitoring.c||Modules/_testcapi/monitoring.c": [
          "File: Modules/_testcapi/monitoring.c -> Modules/_testcapi/monitoring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: {",
          "417:     PyObject *codelike;",
          "418:     int offset;",
          "421:         return NULL;",
          "422:     }",
          "424:     PyMonitoringState *state = setup_fire(codelike, offset, exception);",
          "425:     if (state == NULL) {",
          "426:         return NULL;",
          "427:     }",
          "429:     RETURN_INT(teardown_fire(res, state, exception));",
          "430: }",
          "",
          "[Removed Lines]",
          "419:     PyObject *exception;",
          "420:     if (!PyArg_ParseTuple(args, \"OiO\", &codelike, &offset, &exception)) {",
          "423:     NULLABLE(exception);",
          "428:     int res = PyMonitoring_FireStopIterationEvent(state, codelike, offset);",
          "",
          "[Added Lines]",
          "419:     PyObject *value;",
          "420:     if (!PyArg_ParseTuple(args, \"OiO\", &codelike, &offset, &value)) {",
          "423:     NULLABLE(value);",
          "424:     PyObject *exception = NULL;",
          "429:     int res = PyMonitoring_FireStopIterationEvent(state, codelike, offset, value);",
          "",
          "---------------"
        ],
        "Python/bytecodes.c||Python/bytecodes.c": [
          "File: Python/bytecodes.c -> Python/bytecodes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:             if (PyGen_Check(receiver)) {",
          "297:                     ERROR_NO_POP();",
          "298:                 }",
          "300:             }",
          "301:             DECREF_INPUTS();",
          "302:         }",
          "",
          "[Removed Lines]",
          "295:                 PyErr_SetObject(PyExc_StopIteration, value);",
          "296:                 if (monitor_stop_iteration(tstate, frame, this_instr)) {",
          "299:                 PyErr_SetRaisedException(NULL);",
          "",
          "[Added Lines]",
          "295:                 if (monitor_stop_iteration(tstate, frame, this_instr, value)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:         tier1 inst(INSTRUMENTED_END_SEND, (receiver, value -- value)) {",
          "309:             if (PyGen_Check(receiver) || PyCoro_CheckExact(receiver)) {",
          "312:                     ERROR_NO_POP();",
          "313:                 }",
          "315:             }",
          "316:             Py_DECREF(receiver);",
          "317:         }",
          "",
          "[Removed Lines]",
          "310:                 PyErr_SetObject(PyExc_StopIteration, value);",
          "311:                 if (monitor_stop_iteration(tstate, frame, this_instr)) {",
          "314:                 PyErr_SetRaisedException(NULL);",
          "",
          "[Added Lines]",
          "308:                 if (monitor_stop_iteration(tstate, frame, this_instr, value)) {",
          "",
          "---------------"
        ],
        "Python/ceval.c||Python/ceval.c": [
          "File: Python/ceval.c -> Python/ceval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:                  _Py_CODEUNIT *instr);",
          "232: static int monitor_stop_iteration(PyThreadState *tstate,",
          "233:                  _PyInterpreterFrame *frame,",
          "235: static void monitor_unwind(PyThreadState *tstate,",
          "236:                  _PyInterpreterFrame *frame,",
          "237:                  _Py_CODEUNIT *instr);",
          "",
          "[Removed Lines]",
          "234:                  _Py_CODEUNIT *instr);",
          "",
          "[Added Lines]",
          "234:                  _Py_CODEUNIT *instr,",
          "235:                  PyObject *value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2216: static int",
          "2217: monitor_stop_iteration(PyThreadState *tstate, _PyInterpreterFrame *frame,",
          "2219: {",
          "2220:     if (no_tools_for_local_event(tstate, frame, PY_MONITORING_EVENT_STOP_ITERATION)) {",
          "2221:         return 0;",
          "2222:     }",
          "2224: }",
          "2226: static void",
          "",
          "[Removed Lines]",
          "2218:                        _Py_CODEUNIT *instr)",
          "2223:     return do_monitor_exc(tstate, frame, instr, PY_MONITORING_EVENT_STOP_ITERATION);",
          "",
          "[Added Lines]",
          "2219:                        _Py_CODEUNIT *instr, PyObject *value)",
          "2224:     assert(!PyErr_Occurred());",
          "2225:     PyErr_SetObject(PyExc_StopIteration, value);",
          "2226:     int res = do_monitor_exc(tstate, frame, instr, PY_MONITORING_EVENT_STOP_ITERATION);",
          "2227:     if (res < 0) {",
          "2228:         return res;",
          "2229:     }",
          "2230:     PyErr_SetRaisedException(NULL);",
          "2231:     return 0;",
          "",
          "---------------"
        ],
        "Python/generated_cases.c.h||Python/generated_cases.c.h": [
          "File: Python/generated_cases.c.h -> Python/generated_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3262:             if (PyGen_Check(receiver)) {",
          "3265:                     goto error;",
          "3266:                 }",
          "3268:             }",
          "3269:             Py_DECREF(value);",
          "3270:             stack_pointer += -1;",
          "",
          "[Removed Lines]",
          "3263:                 PyErr_SetObject(PyExc_StopIteration, value);",
          "3264:                 if (monitor_stop_iteration(tstate, frame, this_instr)) {",
          "3267:                 PyErr_SetRaisedException(NULL);",
          "",
          "[Added Lines]",
          "3263:                 if (monitor_stop_iteration(tstate, frame, this_instr, value)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3281:             value = stack_pointer[-1];",
          "3282:             receiver = stack_pointer[-2];",
          "3283:             if (PyGen_Check(receiver) || PyCoro_CheckExact(receiver)) {",
          "3286:                     goto error;",
          "3287:                 }",
          "3289:             }",
          "3290:             Py_DECREF(receiver);",
          "3291:             stack_pointer[-2] = value;",
          "",
          "[Removed Lines]",
          "3284:                 PyErr_SetObject(PyExc_StopIteration, value);",
          "3285:                 if (monitor_stop_iteration(tstate, frame, this_instr)) {",
          "3288:                 PyErr_SetRaisedException(NULL);",
          "",
          "[Added Lines]",
          "3282:                 if (monitor_stop_iteration(tstate, frame, this_instr, value)) {",
          "",
          "---------------"
        ],
        "Python/instrumentation.c||Python/instrumentation.c": [
          "File: Python/instrumentation.c -> Python/instrumentation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2622:     }",
          "2623:     else {",
          "2624:         assert(PyErr_Occurred());",
          "2626:     }",
          "2627:     return err;",
          "2628: }",
          "",
          "[Removed Lines]",
          "2625:         Py_DECREF(exc);",
          "",
          "[Added Lines]",
          "2625:         Py_XDECREF(exc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2712: }",
          "2714: int",
          "2716: {",
          "2717:     int event = PY_MONITORING_EVENT_STOP_ITERATION;",
          "2718:     assert(state->active);",
          "2719:     PyObject *exc;",
          "2720:     if (exception_event_setup(&exc, event) < 0) {",
          "2721:         return -1;",
          "2722:     }",
          "2723:     PyObject *args[4] = { NULL, NULL, NULL, exc };",
          "2724:     int err = capi_call_instrumentation(state, codelike, offset, args, 3, event);",
          "2726: }",
          "",
          "[Removed Lines]",
          "2715: _PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset)",
          "2725:     return exception_event_teardown(err, exc);",
          "",
          "[Added Lines]",
          "2715: _PyMonitoring_FireStopIterationEvent(PyMonitoringState *state, PyObject *codelike, int32_t offset, PyObject *value)",
          "2719:     assert(!PyErr_Occurred());",
          "2720:     PyErr_SetObject(PyExc_StopIteration, value);",
          "2727:     Py_DECREF(exc);",
          "2728:     return exception_event_teardown(err, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae705319fcde864b504987dc8e579e3eef68e1e5",
      "candidate_info": {
        "commit_hash": "ae705319fcde864b504987dc8e579e3eef68e1e5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ae705319fcde864b504987dc8e579e3eef68e1e5",
        "files": [
          "Include/internal/pycore_gc.h",
          "Lib/test/support/__init__.py",
          "Modules/_testinternalcapi.c",
          "Objects/codeobject.c",
          "Objects/object.c",
          "Python/bltinmodule.c",
          "Python/gc_free_threading.c",
          "Python/pystate.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix race involving immortalizing objects (GH-119927) (#120005)\n\nThe free-threaded build currently immortalizes objects that use deferred\nreference counting (see gh-117783). This typically happens once the\nfirst non-main thread is created, but the behavior can be suppressed for\ntests, in subinterpreters, or during a compile() call.\n\nThis fixes a race condition involving the tracking of whether the\nbehavior is suppressed.\n\n(cherry picked from commit 47fb4327b5c405da6df066dcaa01b7c1aefab313)",
        "before_after_code_files": [
          "Include/internal/pycore_gc.h||Include/internal/pycore_gc.h",
          "Lib/test/support/__init__.py||Lib/test/support/__init__.py",
          "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c",
          "Objects/codeobject.c||Objects/codeobject.c",
          "Objects/object.c||Objects/object.c",
          "Python/bltinmodule.c||Python/bltinmodule.c",
          "Python/gc_free_threading.c||Python/gc_free_threading.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_gc.h||Include/internal/pycore_gc.h": [
          "File: Include/internal/pycore_gc.h -> Include/internal/pycore_gc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:        as a temporary measure we treat objects using deferred referenence",
          "359: #endif",
          "360: };",
          "",
          "[Removed Lines]",
          "351:     struct {",
          "354:         int enabled;",
          "357:         int enable_on_thread_created;",
          "358:     } immortalize;",
          "",
          "[Added Lines]",
          "350:        counting as immortal. The value may be zero, one, or a negative number:",
          "351:         0: immortalize deferred RC objects once the first thread is created",
          "352:         1: immortalize all deferred RC objects immediately",
          "354:     int immortalize;",
          "",
          "---------------"
        ],
        "Lib/test/support/__init__.py||Lib/test/support/__init__.py": [
          "File: Lib/test/support/__init__.py -> Lib/test/support/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:         yield",
          "530:         return",
          "533:     try:",
          "534:         yield",
          "535:     finally:",
          "538: def skip_if_suppress_immortalization():",
          "539:     try:",
          "",
          "[Removed Lines]",
          "532:     old_values = _testinternalcapi.set_immortalize_deferred(False)",
          "536:         _testinternalcapi.set_immortalize_deferred(*old_values)",
          "",
          "[Added Lines]",
          "532:     _testinternalcapi.suppress_immortalization(True)",
          "536:         _testinternalcapi.suppress_immortalization(False)",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c": [
          "File: Modules/_testinternalcapi.c -> Modules/_testinternalcapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1965: #endif",
          "1967: static PyObject *",
          "1969: {",
          "1970: #ifdef Py_GIL_DISABLED",
          "1979:         return NULL;",
          "1980:     }",
          "1985: #endif",
          "1986: }",
          "1988: static PyObject *",
          "",
          "[Removed Lines]",
          "1968: set_immortalize_deferred(PyObject *self, PyObject *value)",
          "1971:     PyInterpreterState *interp = PyInterpreterState_Get();",
          "1972:     int old_enabled = interp->gc.immortalize.enabled;",
          "1973:     int old_enabled_on_thread = interp->gc.immortalize.enable_on_thread_created;",
          "1974:     int enabled_on_thread = 0;",
          "1975:     if (!PyArg_ParseTuple(value, \"i|i\",",
          "1976:                           &interp->gc.immortalize.enabled,",
          "1977:                           &enabled_on_thread))",
          "1978:     {",
          "1981:     interp->gc.immortalize.enable_on_thread_created = enabled_on_thread;",
          "1982:     return Py_BuildValue(\"ii\", old_enabled, old_enabled_on_thread);",
          "1983: #else",
          "1984:     return Py_BuildValue(\"OO\", Py_False, Py_False);",
          "",
          "[Added Lines]",
          "1968: suppress_immortalization(PyObject *self, PyObject *value)",
          "1971:     int suppress = PyObject_IsTrue(value);",
          "1972:     if (suppress < 0) {",
          "1975:     PyInterpreterState *interp = PyInterpreterState_Get();",
          "1977:     _Py_atomic_add_int(&interp->gc.immortalize, suppress ? -2 : 2);",
          "1979:     Py_RETURN_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1990: {",
          "1991: #ifdef Py_GIL_DISABLED",
          "1992:     PyInterpreterState *interp = PyInterpreterState_Get();",
          "1994: #else",
          "1995:     Py_RETURN_FALSE;",
          "1996: #endif",
          "",
          "[Removed Lines]",
          "1993:     return PyBool_FromLong(interp->gc.immortalize.enable_on_thread_created);",
          "",
          "[Added Lines]",
          "1987:     return PyBool_FromLong(_Py_atomic_load_int(&interp->gc.immortalize) >= 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2110: #ifdef Py_GIL_DISABLED",
          "2111:     {\"py_thread_id\", get_py_thread_id, METH_NOARGS},",
          "2112: #endif",
          "2114:     {\"get_immortalize_deferred\", get_immortalize_deferred, METH_NOARGS},",
          "2115: #ifdef _Py_TIER2",
          "2116:     {\"uop_symbols_test\", _Py_uop_symbols_test, METH_NOARGS},",
          "",
          "[Removed Lines]",
          "2113:     {\"set_immortalize_deferred\", set_immortalize_deferred, METH_VARARGS},",
          "",
          "[Added Lines]",
          "2107:     {\"suppress_immortalization\", suppress_immortalization, METH_O},",
          "",
          "---------------"
        ],
        "Objects/codeobject.c||Objects/codeobject.c": [
          "File: Objects/codeobject.c -> Objects/codeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "114:         return 1;",
          "115:     }",
          "116: #endif",
          "",
          "[Removed Lines]",
          "113:     if (interp->gc.immortalize.enable_on_thread_created) {",
          "",
          "[Added Lines]",
          "113:     if (_Py_atomic_load_int(&interp->gc.immortalize) < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         PyThreadState *tstate = PyThreadState_GET();",
          "241:         if (!_Py_IsImmortal(v) && !PyCode_Check(v) &&",
          "242:             !PyUnicode_CheckExact(v) &&",
          "244:         {",
          "245:             PyObject *interned = intern_one_constant(v);",
          "246:             if (interned == NULL) {",
          "",
          "[Removed Lines]",
          "243:             tstate->interp->gc.immortalize.enable_on_thread_created)",
          "",
          "[Added Lines]",
          "243:             _Py_atomic_load_int(&tstate->interp->gc.immortalize) >= 0)",
          "",
          "---------------"
        ],
        "Objects/object.c||Objects/object.c": [
          "File: Objects/object.c -> Objects/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2433:     assert(op->ob_ref_shared == 0);",
          "2434:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_DEFERRED);",
          "2435:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "2439:         _Py_SetImmortal(op);",
          "",
          "[Removed Lines]",
          "2436:     if (interp->gc.immortalize.enabled) {",
          "",
          "[Added Lines]",
          "2436:     if (_Py_atomic_load_int_relaxed(&interp->gc.immortalize) == 1) {",
          "",
          "---------------"
        ],
        "Python/bltinmodule.c||Python/bltinmodule.c": [
          "File: Python/bltinmodule.c -> Python/bltinmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "876: #endif",
          "878:     result = Py_CompileStringObject(str, filename, start[compile_mode], &cf, optimize);",
          "880: #ifdef Py_GIL_DISABLED",
          "882: #endif",
          "884:     Py_XDECREF(source_copy);",
          "",
          "[Removed Lines]",
          "874:     int old_value = interp->gc.immortalize.enable_on_thread_created;",
          "875:     interp->gc.immortalize.enable_on_thread_created = 0;",
          "881:     interp->gc.immortalize.enable_on_thread_created = old_value;",
          "",
          "[Added Lines]",
          "875:     _Py_atomic_add_int(&interp->gc.immortalize, -2);",
          "881:     _Py_atomic_add_int(&interp->gc.immortalize, 2);",
          "",
          "---------------"
        ],
        "Python/gc_free_threading.c||Python/gc_free_threading.c": [
          "File: Python/gc_free_threading.c -> Python/gc_free_threading.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "703: {",
          "704:     GCState *gcstate = &interp->gc;",
          "712:     gcstate->garbage = PyList_New(0);",
          "713:     if (gcstate->garbage == NULL) {",
          "",
          "[Removed Lines]",
          "706:     if (_Py_IsMainInterpreter(interp)) {",
          "709:         gcstate->immortalize.enable_on_thread_created = 1;",
          "710:     }",
          "",
          "[Added Lines]",
          "708:     gcstate->immortalize = _Py_IsMainInterpreter(interp) ? 0 : -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1808: {",
          "1809:     struct visitor_args args;",
          "1810:     _PyEval_StopTheWorld(interp);",
          "1813:     _PyEval_StartTheWorld(interp);",
          "1814: }",
          "",
          "[Removed Lines]",
          "1811:     gc_visit_heaps(interp, &immortalize_visitor, &args);",
          "1812:     interp->gc.immortalize.enabled = 1;",
          "",
          "[Added Lines]",
          "1809:     if (interp->gc.immortalize == 0) {",
          "1810:         gc_visit_heaps(interp, &immortalize_visitor, &args);",
          "1811:         interp->gc.immortalize = 1;",
          "1812:     }",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:     }",
          "1584:     else {",
          "1585: #ifdef Py_GIL_DISABLED",
          "1591:             _PyGC_ImmortalizeDeferredObjects(interp);",
          "",
          "[Removed Lines]",
          "1586:         if (interp->gc.immortalize.enable_on_thread_created &&",
          "1587:             !interp->gc.immortalize.enabled)",
          "1588:         {",
          "",
          "[Added Lines]",
          "1586:         if (_Py_atomic_load_int(&interp->gc.immortalize) == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "054f1af8119540f5e05062fdee0beb17d42c68be",
      "candidate_info": {
        "commit_hash": "054f1af8119540f5e05062fdee0beb17d42c68be",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/054f1af8119540f5e05062fdee0beb17d42c68be",
        "files": [
          "Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test_generator.py",
          "Lib/test/test_email/test_headerregistry.py",
          "Misc/NEWS.d/next/Library/2023-04-26-22-24-17.gh-issue-92081.V8xMot.rst"
        ],
        "message": "[3.13] gh-92081: Fix for email.generator.Generator with whitespace between encoded words. (GH-92281) (#119245)\n\n* Fix for email.generator.Generator with whitespace between encoded words.\n\nemail.generator.Generator currently does not handle whitespace between\nencoded words correctly when the encoded words span multiple lines.  The\ncurrent generator will create an encoded word for each line.  If the end\nof the line happens to correspond with the end real word in the\nplaintext, the generator will place an unencoded space at the start of\nthe subsequent lines to represent the whitespace between the plaintext\nwords.\n\nA compliant decoder will strip all the whitespace from between two\nencoded words which leads to missing spaces in the round-tripped\noutput.\n\nThe fix for this is to make sure that whitespace between two encoded\nwords ends up inside of one or the other of the encoded words.  This\nfix places the space inside of the second encoded word.\n\nA second problem happens with continuation lines.  A continuation line that\nstarts with whitespace and is followed by a non-encoded word is fine because\nthe newline between such continuation lines is defined as condensing to\na single space character.  When the continuation line starts with whitespace\nfollowed by an encoded word, however, the RFCs specify that the word is run\ntogether with the encoded word on the previous line.  This is because normal\nwords are filded on syntactic breaks by encoded words are not.\n\nThe solution to this is to add the whitespace to the start of the encoded word\non the continuation line.\n\nTest cases are from GH-92081\n\n* Rename a variable so it's not confused with the final variable.\n(cherry picked from commit a6fdb31b6714c9f3c65fefbb3fe388b2b139a75f)\n\nCo-authored-by: Toshio Kuratomi <a.badger@gmail.com>",
        "before_after_code_files": [
          "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test_generator.py||Lib/test/test_email/test_generator.py",
          "Lib/test/test_email/test_headerregistry.py||Lib/test/test_email/test_headerregistry.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py": [
          "File: Lib/email/_header_value_parser.py -> Lib/email/_header_value_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2784:     # max_line_length 0/None means no limit, ie: infinitely long.",
          "2785:     maxlen = policy.max_line_length or sys.maxsize",
          "2786:     encoding = 'utf-8' if policy.utf8 else 'us-ascii'",
          "2789:     last_charset = None",
          "2790:     wrap_as_ew_blocked = 0",
          "2792:     end_ew_not_allowed = Terminal('', 'wrap_as_ew_blocked')",
          "2793:     parts = list(parse_tree)",
          "2794:     while parts:",
          "",
          "[Removed Lines]",
          "2787:     lines = ['']",
          "2788:     last_ew = None",
          "2791:     want_encoding = False",
          "",
          "[Added Lines]",
          "2787:     lines = ['']  # Folded lines to be output",
          "2788:     leading_whitespace = ''  # When we have whitespace between two encoded",
          "2789:                              # words, we may need to encode the whitespace",
          "2790:                              # at the beginning of the second word.",
          "2791:     last_ew = None  # Points to the last encoded character if there's an ew on",
          "2792:                     # the line",
          "2795:     want_encoding = False  # This is set to True if we need to encode this part",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2847:                      last_charset == 'utf-8' and charset != 'us-ascii')):",
          "2848:                     last_ew = None",
          "2849:                 last_ew = _fold_as_ew(tstr, lines, maxlen, last_ew,",
          "2851:                 last_charset = charset",
          "2852:             want_encoding = False",
          "2853:             continue",
          "2854:         if len(tstr) <= maxlen - len(lines[-1]):",
          "2855:             lines[-1] += tstr",
          "2856:             continue",
          "2857:         # This part is too long to fit.  The RFC wants us to break at",
          "2858:         # \"major syntactic breaks\", so unless we don't consider this",
          "2859:         # to be one, check if it will fit on the next line by itself.",
          "2860:         if (part.syntactic_break and",
          "2861:                 len(tstr) + 1 <= maxlen):",
          "2862:             newline = _steal_trailing_WSP_if_exists(lines)",
          "2863:             if newline or part.startswith_fws():",
          "2864:                 lines.append(newline + tstr)",
          "2865:                 last_ew = None",
          "2866:                 continue",
          "2867:         if not hasattr(part, 'encode'):",
          "",
          "[Removed Lines]",
          "2850:                                       part.ew_combine_allowed, charset)",
          "",
          "[Added Lines]",
          "2856:                                       part.ew_combine_allowed, charset, leading_whitespace)",
          "2857:                 # This whitespace has been added to the lines in _fold_as_ew()",
          "2858:                 # so clear it now.",
          "2859:                 leading_whitespace = ''",
          "2871:         leading_whitespace = ''",
          "2876:                 # We're going to fold the data onto a new line here.  Due to",
          "2877:                 # the way encoded strings handle continuation lines, we need to",
          "2878:                 # be prepared to encode any whitespace if the next line turns",
          "2879:                 # out to start with an encoded word.",
          "2882:                 whitespace_accumulator = []",
          "2883:                 for char in lines[-1]:",
          "2884:                     if char not in WSP:",
          "2885:                         break",
          "2886:                     whitespace_accumulator.append(char)",
          "2887:                 leading_whitespace = ''.join(whitespace_accumulator)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2885:         else:",
          "2886:             # We can't fold it onto the next line either...",
          "2887:             lines[-1] += tstr",
          "2888:     return policy.linesep.join(lines) + policy.linesep",
          "2891:     \"\"\"Fold string to_encode into lines as encoded word, combining if allowed.",
          "2892:     Return the new value for last_ew, or None if ew_combine_allowed is False.",
          "",
          "[Removed Lines]",
          "2890: def _fold_as_ew(to_encode, lines, maxlen, last_ew, ew_combine_allowed, charset):",
          "",
          "[Added Lines]",
          "2914: def _fold_as_ew(to_encode, lines, maxlen, last_ew, ew_combine_allowed, charset, leading_whitespace):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2902:         to_encode = str(",
          "2903:             get_unstructured(lines[-1][last_ew:] + to_encode))",
          "2904:         lines[-1] = lines[-1][:last_ew]",
          "2906:         # We're joining this to non-encoded text, so don't encode",
          "2907:         # the leading blank.",
          "2908:         leading_wsp = to_encode[0]",
          "",
          "[Removed Lines]",
          "2905:     if to_encode[0] in WSP:",
          "",
          "[Added Lines]",
          "2929:     elif to_encode[0] in WSP:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2930:     while to_encode:",
          "2931:         remaining_space = maxlen - len(lines[-1])",
          "2933:         if text_space <= 0:",
          "2934:             lines.append(' ')",
          "2935:             continue",
          "2937:         to_encode_word = to_encode[:text_space]",
          "2938:         encoded_word = _ew.encode(to_encode_word, charset=encode_as)",
          "2939:         excess = len(encoded_word) - remaining_space",
          "",
          "[Removed Lines]",
          "2932:         text_space = remaining_space - chrome_len",
          "",
          "[Added Lines]",
          "2957:         text_space = remaining_space - chrome_len - len(leading_whitespace)",
          "2962:         # If we are at the start of a continuation line, prepend whitespace",
          "2963:         # (we only want to do this when the line starts with an encoded word",
          "2964:         # but if we're folding in this helper function, then we know that we",
          "2965:         # are going to be writing out an encoded word.)",
          "2966:         if len(lines) > 1 and len(lines[-1]) == 1 and leading_whitespace:",
          "2967:             encoded_word = _ew.encode(leading_whitespace, charset=encode_as)",
          "2968:             lines[-1] += encoded_word",
          "2969:             leading_whitespace = ''",
          "",
          "---------------"
        ],
        "Lib/test/test_email/test_generator.py||Lib/test/test_email/test_generator.py": [
          "File: Lib/test/test_email/test_generator.py -> Lib/test/test_email/test_generator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     ioclass = io.BytesIO",
          "282:     typ = lambda self, x: x.encode('ascii')",
          "284:     def test_cte_type_7bit_handles_unknown_8bit(self):",
          "285:         source = (\"Subject: Maintenant je vous pr\u00e9sente mon \"",
          "286:                  \"coll\u00e8gue\\n\\n\").encode('utf-8')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:     def test_defaults_handle_spaces_between_encoded_words_when_folded(self):",
          "285:         source = (\"\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0438 \u0432 \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f\"",
          "286:                   \" \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u0443\u0433\u0438\")",
          "287:         expected = ('Subject: =?utf-8?b?0KPQstC10LTQvtC80LvQtdC90LjQtSDQviDQv9GA0LjQvdGP0YLQuNC4?=\\n'",
          "288:                     ' =?utf-8?b?INCyINGA0LDQsdC+0YLRgyDQvtCx0YDQsNGJ0LXQvdC40Y8g0LTQu9GPINC/0L4=?=\\n'",
          "289:                     ' =?utf-8?b?0LTQutC70Y7Rh9C10L3QuNGPINGD0YHQu9GD0LPQuA==?=\\n\\n').encode('ascii')",
          "290:         msg = EmailMessage()",
          "291:         msg['Subject'] = source",
          "292:         s = io.BytesIO()",
          "293:         g = BytesGenerator(s)",
          "294:         g.flatten(msg)",
          "295:         self.assertEqual(s.getvalue(), expected)",
          "297:     def test_defaults_handle_spaces_at_start_of_subject(self):",
          "298:         source = \" \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435\"",
          "299:         expected = b\"Subject:  =?utf-8?b?0KPQstC10LTQvtC80LvQtdC90LjQtQ==?=\\n\\n\"",
          "300:         msg = EmailMessage()",
          "301:         msg['Subject'] = source",
          "302:         s = io.BytesIO()",
          "303:         g = BytesGenerator(s)",
          "304:         g.flatten(msg)",
          "305:         self.assertEqual(s.getvalue(), expected)",
          "307:     def test_defaults_handle_spaces_at_start_of_continuation_line(self):",
          "308:         source = \" \u0444 \u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444\u0444 \u0444 \u0444\"",
          "309:         expected = (b\"Subject:  \"",
          "310:                     b\"=?utf-8?b?0YQg0YTRhNGE0YTRhNGE0YTRhNGE0YTRhNGE0YTRhNGE0YTRhNGE0YQ=?=\\n\"",
          "311:                     b\" =?utf-8?b?INGEINGE?=\\n\\n\")",
          "312:         msg = EmailMessage()",
          "313:         msg['Subject'] = source",
          "314:         s = io.BytesIO()",
          "315:         g = BytesGenerator(s)",
          "316:         g.flatten(msg)",
          "317:         self.assertEqual(s.getvalue(), expected)",
          "",
          "---------------"
        ],
        "Lib/test/test_email/test_headerregistry.py||Lib/test/test_email/test_headerregistry.py": [
          "File: Lib/test/test_email/test_headerregistry.py -> Lib/test/test_email/test_headerregistry.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from test.test_email import TestEmailBase, parameterize",
          "8: from email import headerregistry",
          "9: from email.headerregistry import Address, Group",
          "10: from test.support import ALWAYS_EQ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: from email.header import decode_header",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648:                     'L\u00f4rem ipsum d\u00f4l\u00f4r sit amet, c\u00f4nsectetuer adipiscing. '",
          "1649:                     'Suspendisse p\u00f4tenti. Aliquam nibh. Suspendisse p\u00f4tenti.',",
          "1650:                     '=?utf-8?q?L=C3=B4rem_ipsum_d=C3=B4l=C3=B4r_sit_amet=2C_c'",
          "1652:                     '_p=C3=B4tenti=2E_Aliquam_nibh=2E?=\\n Suspendisse =?utf-8'",
          "1653:                     '?q?p=C3=B4tenti=2E?=',",
          "1654:                     ),",
          "",
          "[Removed Lines]",
          "1651:                     '=C3=B4nsectetuer?=\\n =?utf-8?q?adipiscing=2E_Suspendisse'",
          "",
          "[Added Lines]",
          "1652:                     '=C3=B4nsectetuer?=\\n =?utf-8?q?_adipiscing=2E_Suspendisse'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "502a99a7e66adc095842addfb366bba6953f34a1",
      "candidate_info": {
        "commit_hash": "502a99a7e66adc095842addfb366bba6953f34a1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/502a99a7e66adc095842addfb366bba6953f34a1",
        "files": [
          "Lib/test/test_audit.py"
        ],
        "message": "[3.13] gh-120373: Mark test_audit.test_http as requiring the network resource (GH-120374) (#120948)\n\ngh-120373: Mark test_audit.test_http as requiring the network resource (GH-120374)\n(cherry picked from commit b0e1c51882e3a129d1e4db8291f7a0d869d6f1d6)\n\nCo-authored-by: Itamar Oren <itamarost@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_audit.py||Lib/test/test_audit.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_audit.py||Lib/test/test_audit.py": [
          "File: Lib/test/test_audit.py -> Lib/test/test_audit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:         )",
          "143:     def test_http(self):",
          "144:         import_helper.import_module(\"http.client\")",
          "145:         returncode, events, stderr = self.run_python(\"test_http_client\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     @support.requires_resource('network')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1177897551066c1e8c394809152614a6483f9ce7",
      "candidate_info": {
        "commit_hash": "1177897551066c1e8c394809152614a6483f9ce7",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/1177897551066c1e8c394809152614a6483f9ce7",
        "files": [
          "Doc/c-api/hash.rst",
          "Include/cpython/pyhash.h",
          "Misc/NEWS.d/next/C API/2024-05-20-10-35-22.gh-issue-111389.a6axBk.rst",
          "Objects/codeobject.c",
          "Python/optimizer.c",
          "Python/pyhash.c",
          "Python/tracemalloc.c"
        ],
        "message": "[3.13] gh-111389: Add PyHASH_MULTIPLIER constant (GH-119214) (#119334)\n\ngh-111389: Add PyHASH_MULTIPLIER constant (GH-119214)\n(cherry picked from commit f6da790122fdae1a28f444edfbb55202d6829cd1)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Include/cpython/pyhash.h||Include/cpython/pyhash.h",
          "Objects/codeobject.c||Objects/codeobject.c",
          "Python/optimizer.c||Python/optimizer.c",
          "Python/pyhash.c||Python/pyhash.c",
          "Python/tracemalloc.c||Python/tracemalloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/pyhash.h||Include/cpython/pyhash.h": [
          "File: Include/cpython/pyhash.h -> Include/cpython/pyhash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define PyHASH_MODULUS (((size_t)1 << _PyHASH_BITS) - 1)",
          "19: #define PyHASH_INF 314159",
          "23: #define _PyHASH_BITS PyHASH_BITS",
          "24: #define _PyHASH_MODULUS PyHASH_MODULUS",
          "25: #define _PyHASH_INF PyHASH_INF",
          "",
          "[Removed Lines]",
          "20: #define PyHASH_IMAG _PyHASH_MULTIPLIER",
          "",
          "[Added Lines]",
          "20: #define PyHASH_IMAG PyHASH_MULTIPLIER",
          "23: #define _PyHASH_MULTIPLIER PyHASH_MULTIPLIER",
          "",
          "---------------"
        ],
        "Objects/codeobject.c||Objects/codeobject.c": [
          "File: Objects/codeobject.c -> Objects/codeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2020:     Py_uhash_t uhash = 20221211;",
          "2021:     #define SCRAMBLE_IN(H) do {       \\",
          "2022:         uhash ^= (Py_uhash_t)(H);     \\",
          "2024:     } while (0)",
          "2025:     #define SCRAMBLE_IN_HASH(EXPR) do {     \\",
          "2026:         Py_hash_t h = PyObject_Hash(EXPR);  \\",
          "",
          "[Removed Lines]",
          "2023:         uhash *= _PyHASH_MULTIPLIER;  \\",
          "",
          "[Added Lines]",
          "2023:         uhash *= PyHASH_MULTIPLIER;  \\",
          "",
          "---------------"
        ],
        "Python/optimizer.c||Python/optimizer.c": [
          "File: Python/optimizer.c -> Python/optimizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:     uintptr_t addr = (uintptr_t)ptr;",
          "1497:     for (int i = 0; i < SIZEOF_VOID_P; i++) {",
          "1498:         uhash ^= addr & 255;",
          "1500:         addr >>= 8;",
          "1501:     }",
          "1502:     return uhash;",
          "",
          "[Removed Lines]",
          "1499:         uhash *= (uint64_t)_PyHASH_MULTIPLIER;",
          "",
          "[Added Lines]",
          "1499:         uhash *= (uint64_t)PyHASH_MULTIPLIER;",
          "",
          "---------------"
        ],
        "Python/pyhash.c||Python/pyhash.c": [
          "File: Python/pyhash.c -> Python/pyhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:     x ^= (Py_uhash_t) *p << 7;",
          "264:     while (blocks--) {",
          "265:         PY_UHASH_CPY(block.bytes, p);",
          "267:         p += SIZEOF_PY_UHASH_T;",
          "268:     }",
          "270:     for (; remainder > 0; remainder--)",
          "272:     x ^= (Py_uhash_t) len;",
          "273:     x ^= (Py_uhash_t) _Py_HashSecret.fnv.suffix;",
          "274:     if (x == (Py_uhash_t) -1) {",
          "",
          "[Removed Lines]",
          "266:         x = (_PyHASH_MULTIPLIER * x) ^ block.value;",
          "271:         x = (_PyHASH_MULTIPLIER * x) ^ (Py_uhash_t) *p++;",
          "",
          "[Added Lines]",
          "266:         x = (PyHASH_MULTIPLIER * x) ^ block.value;",
          "271:         x = (PyHASH_MULTIPLIER * x) ^ (Py_uhash_t) *p++;",
          "",
          "---------------"
        ],
        "Python/tracemalloc.c||Python/tracemalloc.c": [
          "File: Python/tracemalloc.c -> Python/tracemalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     int len = traceback->nframe;",
          "316:     frame_t *frame;",
          "318:     x = 0x345678UL;",
          "",
          "[Removed Lines]",
          "315:     Py_uhash_t mult = _PyHASH_MULTIPLIER;",
          "",
          "[Added Lines]",
          "315:     Py_uhash_t mult = PyHASH_MULTIPLIER;",
          "",
          "---------------"
        ]
      }
    }
  ]
}