{
  "cve_id": "CVE-2020-15207",
  "cve_desc": "In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses `ResolveAxis` to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the `DCHECK` does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption. The issue is patched in commit 2d88f470dea2671b430884260f3626b1fe99830a, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "2d88f470dea2671b430884260f3626b1fe99830a",
  "patch_info": {
    "commit_hash": "2d88f470dea2671b430884260f3626b1fe99830a",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/2d88f470dea2671b430884260f3626b1fe99830a",
    "files": [
      "tensorflow/lite/kernels/internal/reference/reduce.h"
    ],
    "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
    "before_after_code_files": [
      "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h": [
      "File: tensorflow/lite/kernels/internal/reference/reduce.h -> tensorflow/lite/kernels/internal/reference/reduce.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
      "72:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
      "73:     bool is_dup = false;",
      "74:     for (int j = 0; j < *out_num_axis; ++j) {",
      "75:       if (out_axis[j] == current) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:     if (current < 0 || current >= num_dims) {",
      "74:       return false;",
      "75:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3925917c42952cd66eb1fa9fa24d7738fac5b57",
      "candidate_info": {
        "commit_hash": "b3925917c42952cd66eb1fa9fa24d7738fac5b57",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b3925917c42952cd66eb1fa9fa24d7738fac5b57",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reduce.h"
        ],
        "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h": [
          "File: tensorflow/lite/kernels/internal/reference/reduce.h -> tensorflow/lite/kernels/internal/reference/reduce.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
          "72:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
          "73:     bool is_dup = false;",
          "74:     for (int j = 0; j < *out_num_axis; ++j) {",
          "75:       if (out_axis[j] == current) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     if (current < 0 || current >= num_dims) {",
          "74:       return false;",
          "75:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e967a9376018b2906be511c370de6905e3b2e83",
      "candidate_info": {
        "commit_hash": "6e967a9376018b2906be511c370de6905e3b2e83",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6e967a9376018b2906be511c370de6905e3b2e83",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reduce.h"
        ],
        "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reduce.h||tensorflow/lite/kernels/internal/reference/reduce.h": [
          "File: tensorflow/lite/kernels/internal/reference/reduce.h -> tensorflow/lite/kernels/internal/reference/reduce.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
          "69:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
          "70:     bool is_dup = false;",
          "71:     for (int j = 0; j < *out_num_axis; ++j) {",
          "72:       if (out_axis[j] == current) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     if (current < 0 || current >= num_dims) {",
          "71:       return false;",
          "72:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e632175dea4e0399f8c139de98bdbba7e570b0c7",
      "candidate_info": {
        "commit_hash": "e632175dea4e0399f8c139de98bdbba7e570b0c7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e632175dea4e0399f8c139de98bdbba7e570b0c7",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2655:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
          "2656:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
          "2657:     bool is_dup = false;",
          "2658:     for (int j = 0; j < *out_num_axis; ++j) {",
          "2659:       if (out_axis[j] == current) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2657:     if (current < 0 || current >= num_dims) {",
          "2658:       return false;",
          "2659:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce945d5b0e6ed8a315f422fd2d1ac428c462b289",
      "candidate_info": {
        "commit_hash": "ce945d5b0e6ed8a315f422fd2d1ac428c462b289",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ce945d5b0e6ed8a315f422fd2d1ac428c462b289",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3172:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
          "3173:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
          "3174:     bool is_dup = false;",
          "3175:     for (int j = 0; j < *out_num_axis; ++j) {",
          "3176:       if (out_axis[j] == current) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3174:     if (current < 0 || current >= num_dims) {",
          "3175:       return false;",
          "3176:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f97b7caffab7757782be2f19b6cd3e5c154432a",
      "candidate_info": {
        "commit_hash": "8f97b7caffab7757782be2f19b6cd3e5c154432a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8f97b7caffab7757782be2f19b6cd3e5c154432a",
        "files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "[tflite] Ensure `ResolveAxis` properly handles negative inputs.\n\nIn Python, a list `l` of length `n` allows indexing with negative indices, `l[i]`. The only constraint is that `n + i` becomes positive. Code in `ResolveAxis` assumes the constraints and only checks it using a `DCHECK`. But the macro is a no-op in non-debug builds and that can result in reading from negative offsets (buffer underflows).\n\nPiperOrigin-RevId: 332530683\nChange-Id: I464e073fee618054ae3719a3679739007bb3f3bc",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2659:     int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];",
          "2660:     TFLITE_DCHECK(current >= 0 && current < num_dims);",
          "2661:     bool is_dup = false;",
          "2662:     for (int j = 0; j < *out_num_axis; ++j) {",
          "2663:       if (out_axis[j] == current) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2661:     if (current < 0 || current >= num_dims) {",
          "2662:       return false;",
          "2663:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}