{
  "cve_id": "CVE-2024-35190",
  "cve_desc": "Asterisk is an open source private branch exchange and telephony toolkit. After upgrade to 18.23.0, ALL unauthorized SIP requests are identified as PJSIP Endpoint of local asterisk server. This vulnerability is fixed in 18.23.1, 20.8.1, and 21.3.1.\n",
  "repo": "asterisk/asterisk",
  "patch_hash": "85241bd22936cc15760fd1f65d16c98be7aeaf6d",
  "patch_info": {
    "commit_hash": "85241bd22936cc15760fd1f65d16c98be7aeaf6d",
    "repo": "asterisk/asterisk",
    "commit_url": "https://github.com/asterisk/asterisk/commit/85241bd22936cc15760fd1f65d16c98be7aeaf6d",
    "files": [
      "configs/samples/pjsip.conf.sample",
      "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
      "include/asterisk/res_pjsip.h",
      "res/res_pjsip/pjsip_config.xml",
      "res/res_pjsip/pjsip_configuration.c",
      "res/res_pjsip_endpoint_identifier_ip.c"
    ],
    "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
    "before_after_code_files": [
      "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
      "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
      "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
      "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
      "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
    ]
  },
  "patch_diff": {
    "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
      "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
      "--- Hunk 1 ---",
      "[Context before]",
      "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
      "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
      "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
      "242: ;",
      "243: ; This is a simple registration that works with some SIP trunking providers.",
      "",
      "[Removed Lines]",
      "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
      "201: ;",
      "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
      "203: ; other means of identification (e.g.: username), the transports' bind addresses",
      "204: ; can be used to identify them. Can be useful in case you're connecting to the",
      "205: ; same ITSP multiple times on different IPs / NICs.",
      "206: ;",
      "207: ;[transport-eth0]",
      "208: ;type=transport",
      "209: ;protocol=tcp",
      "210: ;bind=192.168.1.1:5060",
      "211: ;",
      "212: ;[transport-eth1]",
      "213: ;type=transport",
      "214: ;protocol=udp",
      "215: ;bind=192.168.2.1:5060",
      "216: ;",
      "217: ;",
      "218: ;[myprovider-a]",
      "219: ;type=endpoint",
      "220: ;transport=transport-eth0",
      "221: ;identify_by=transport",
      "222: ;",
      "223: ;[myprovider-b]",
      "224: ;type=endpoint",
      "225: ;transport=transport-eth1",
      "226: ;identify_by=transport",
      "227: ;",
      "228: ;",
      "229: ;[identify-a]",
      "230: ;type=identify",
      "231: ;endpoint=myprovider-a",
      "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
      "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
      "234: ;",
      "235: ;[identify-b]",
      "236: ;type=identify",
      "237: ;endpoint=myprovider-b",
      "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
      "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "725:                         ; identified.",
      "726:                         ; \"username\": Identify by the From or To username and domain",
      "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
      "729:                         ; \"header\": Identify by a configured SIP header value.",
      "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
      "732:                         ; In the username and auth_username cases, if an exact match",
      "733:                         ; on both username and domain/realm fails, the match is",
      "734:                         ; retried with just the username.",
      "",
      "[Removed Lines]",
      "728:                         ; \"ip\": Identify by the source (remote) IP address",
      "731:                         ; \"transport\": Identify by the bound (local) IP address",
      "",
      "[Added Lines]",
      "687:                         ; \"ip\": Identify by the source IP address",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1313:             ; (default: \"no\")",
      "1314: ;endpoint_identifier_order=ip,username,anonymous",
      "1315:             ; The order by which endpoint identifiers are given priority.",
      "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
      "1321:             ; to see the identifiers currently available.",
      "1322:             ; (default: ip,username,anonymous)",
      "",
      "[Removed Lines]",
      "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
      "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
      "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
      "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
      "",
      "[Added Lines]",
      "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
      "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
      "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
      "1505:         ; against (default: \"\")",
      "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
      "1509: ;type=  ; Must be of type identify (default: \"\")",
      "",
      "[Removed Lines]",
      "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
      "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
      "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
      "3: Revision ID: bd9c5159c7ea",
      "4: Revises: 6c475a93f48a",
      "5: Create Date: 2024-05-17 08:30:58.299083",
      "7: \"\"\"",
      "9: # revision identifiers, used by Alembic.",
      "10: revision = 'bd9c5159c7ea'",
      "11: down_revision = '6c475a93f48a'",
      "13: from alembic import op",
      "14: import sqlalchemy as sa",
      "17: def upgrade():",
      "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
      "21: def downgrade():",
      "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
      "",
      "---------------"
    ],
    "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
      "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
      "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
      "622: };",
      "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
      "",
      "[Removed Lines]",
      "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
      "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
      "427:   str = \"request_uri\";",
      "428:   break;",
      "432:  }",
      "433:  return str;",
      "434: }",
      "",
      "[Removed Lines]",
      "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
      "430:   str = \"transport\";",
      "431:   break;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
      "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
      "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
      "461:  } else {",
      "462:   method = -1;",
      "463:  }",
      "",
      "[Removed Lines]",
      "459:  } else if (!strcasecmp(str, \"transport\")) {",
      "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
      "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:       </para></note>",
      "125:      </description>",
      "126:     </configOption>",
      "137:     <configOption name=\"type\">",
      "138:      <synopsis>Must be of type 'identify'.</synopsis>",
      "139:     </configOption>",
      "",
      "[Removed Lines]",
      "127:     <configOption name=\"transport\">",
      "128:      <synopsis>Match against a transport type.</synopsis>",
      "129:      <description>",
      "130:       <para>When using the ip or transport identifier, this option",
      "131:       can be used to match the transport type <literal>(udp or tcp)",
      "132:       </literal> as well.</para>",
      "133:       <para>When omitted, or left empty, which is the default, it",
      "134:       won't match against the transport type.</para>",
      "135:      </description>",
      "136:     </configOption>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "161:   AST_STRING_FIELD(match_header_name);",
      "163:   AST_STRING_FIELD(match_header_value);",
      "166:  );",
      "168:  regex_t regex_header_buf;",
      "",
      "[Removed Lines]",
      "165:   AST_STRING_FIELD(transport);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "180:  unsigned int is_request_uri_regex:1;",
      "181: };",
      "190: static void ip_identify_destroy(void *obj)",
      "191: {",
      "",
      "[Removed Lines]",
      "184: struct ast_sockaddr_with_tp {",
      "185:  struct ast_sockaddr addr;",
      "186:  char tp[128];",
      "187: };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
      "322: {",
      "323:  struct ip_identify_match *identify = obj;",
      "326:  int sense;",
      "329:  if (sense != AST_SENSE_ALLOW) {",
      "341:     ast_sorcery_object_get_id(identify));",
      "344:  } else {",
      "347:     ast_sorcery_object_get_id(identify));",
      "348:   return 0;",
      "349:  }",
      "",
      "[Removed Lines]",
      "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
      "325:  struct ast_sockaddr address = addr_with_tp->addr;",
      "328:  sense = ast_apply_ha(identify->matches, &address);",
      "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
      "331:     ast_sockaddr_stringify(&address),",
      "332:     ast_sorcery_object_get_id(identify));",
      "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
      "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
      "335:     addr_with_tp->tp,",
      "336:     ast_sorcery_object_get_id(identify));",
      "337:    return CMP_MATCH;",
      "338:   } else {",
      "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
      "340:     addr_with_tp->tp,",
      "342:    return 0;",
      "343:   }",
      "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
      "346:     ast_sockaddr_stringify(&address),",
      "",
      "[Added Lines]",
      "306:  struct ast_sockaddr *addr = arg;",
      "309:  sense = ast_apply_ha(identify->matches, addr);",
      "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
      "312:     ast_sockaddr_stringify(addr),",
      "314:   return CMP_MATCH;",
      "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
      "317:     ast_sockaddr_stringify(addr),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
      "386: {",
      "425: }",
      "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
      "428:  .identify_endpoint = ip_identify,",
      "429: };",
      "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
      "436: {",
      "437:  return common_identify(header_identify_match_check, rdata);",
      "",
      "[Removed Lines]",
      "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
      "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
      "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
      "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
      "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
      "394: }",
      "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
      "397: {",
      "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
      "399:  pj_status_t status;",
      "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
      "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
      "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
      "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
      "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
      "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
      "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
      "409:   }",
      "410:  } else {",
      "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
      "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
      "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
      "414:   }",
      "415:  }",
      "417:  if (status == PJ_SUCCESS) {",
      "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
      "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
      "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
      "422:  } else {",
      "423:   return NULL;",
      "424:  }",
      "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
      "432:  .identify_endpoint = transport_identify,",
      "433: };",
      "",
      "[Added Lines]",
      "358:  struct ast_sockaddr addr = { { 0, } };",
      "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
      "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
      "363:  return common_identify(ip_identify_match_check, &addr);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "595:   return -1;",
      "596:  }",
      "604:  if (!ast_strlen_zero(identify->match_header)) {",
      "605:   char *c_header;",
      "606:   char *c_value;",
      "",
      "[Removed Lines]",
      "598:  if (!ast_strlen_zero(identify->transport)) {",
      "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
      "600:    return -1;",
      "601:   }",
      "602:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
      "951:   }",
      "960:   if (!ast_strlen_zero(ident->match_header)) {",
      "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
      "962:     indent,",
      "",
      "[Removed Lines]",
      "953:   if (!ast_strlen_zero(ident->transport)) {",
      "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
      "955:     indent,",
      "956:     \"Transport\",",
      "957:     ident->transport);",
      "958:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
      "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
      "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
      "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
      "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
      "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
      "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
      "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
      "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
      "",
      "[Removed Lines]",
      "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
      "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
      "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
      "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
      "1080:  return 0;",
      "1081: }",
      "",
      "[Removed Lines]",
      "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3572cc8f4b488d9b89d0275e3b519cda49838d30",
      "candidate_info": {
        "commit_hash": "3572cc8f4b488d9b89d0275e3b519cda49838d30",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/3572cc8f4b488d9b89d0275e3b519cda49838d30",
        "files": [
          "configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_config.xml",
          "res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c"
        ],
        "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
        "before_after_code_files": [
          "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ],
          "candidate": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
          "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
          "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
          "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
          "242: ;",
          "243: ; This is a simple registration that works with some SIP trunking providers.",
          "",
          "[Removed Lines]",
          "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
          "201: ;",
          "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
          "203: ; other means of identification (e.g.: username), the transports' bind addresses",
          "204: ; can be used to identify them. Can be useful in case you're connecting to the",
          "205: ; same ITSP multiple times on different IPs / NICs.",
          "206: ;",
          "207: ;[transport-eth0]",
          "208: ;type=transport",
          "209: ;protocol=tcp",
          "210: ;bind=192.168.1.1:5060",
          "211: ;",
          "212: ;[transport-eth1]",
          "213: ;type=transport",
          "214: ;protocol=udp",
          "215: ;bind=192.168.2.1:5060",
          "216: ;",
          "217: ;",
          "218: ;[myprovider-a]",
          "219: ;type=endpoint",
          "220: ;transport=transport-eth0",
          "221: ;identify_by=transport",
          "222: ;",
          "223: ;[myprovider-b]",
          "224: ;type=endpoint",
          "225: ;transport=transport-eth1",
          "226: ;identify_by=transport",
          "227: ;",
          "228: ;",
          "229: ;[identify-a]",
          "230: ;type=identify",
          "231: ;endpoint=myprovider-a",
          "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
          "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
          "234: ;",
          "235: ;[identify-b]",
          "236: ;type=identify",
          "237: ;endpoint=myprovider-b",
          "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
          "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:                         ; identified.",
          "726:                         ; \"username\": Identify by the From or To username and domain",
          "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
          "729:                         ; \"header\": Identify by a configured SIP header value.",
          "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
          "732:                         ; In the username and auth_username cases, if an exact match",
          "733:                         ; on both username and domain/realm fails, the match is",
          "734:                         ; retried with just the username.",
          "",
          "[Removed Lines]",
          "728:                         ; \"ip\": Identify by the source (remote) IP address",
          "731:                         ; \"transport\": Identify by the bound (local) IP address",
          "",
          "[Added Lines]",
          "687:                         ; \"ip\": Identify by the source IP address",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:             ; (default: \"no\")",
          "1314: ;endpoint_identifier_order=ip,username,anonymous",
          "1315:             ; The order by which endpoint identifiers are given priority.",
          "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
          "1321:             ; to see the identifiers currently available.",
          "1322:             ; (default: ip,username,anonymous)",
          "",
          "[Removed Lines]",
          "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
          "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
          "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
          "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "[Added Lines]",
          "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
          "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
          "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
          "1505:         ; against (default: \"\")",
          "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
          "1509: ;type=  ; Must be of type identify (default: \"\")",
          "",
          "[Removed Lines]",
          "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
          "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
          "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
          "3: Revision ID: bd9c5159c7ea",
          "4: Revises: 6c475a93f48a",
          "5: Create Date: 2024-05-17 08:30:58.299083",
          "7: \"\"\"",
          "9: # revision identifiers, used by Alembic.",
          "10: revision = 'bd9c5159c7ea'",
          "11: down_revision = '6c475a93f48a'",
          "13: from alembic import op",
          "14: import sqlalchemy as sa",
          "17: def upgrade():",
          "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
          "21: def downgrade():",
          "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
          "",
          "---------------"
        ],
        "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
          "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
          "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
          "622: };",
          "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
          "",
          "[Removed Lines]",
          "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
          "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
          "427:   str = \"request_uri\";",
          "428:   break;",
          "432:  }",
          "433:  return str;",
          "434: }",
          "",
          "[Removed Lines]",
          "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
          "430:   str = \"transport\";",
          "431:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
          "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
          "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
          "461:  } else {",
          "462:   method = -1;",
          "463:  }",
          "",
          "[Removed Lines]",
          "459:  } else if (!strcasecmp(str, \"transport\")) {",
          "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
          "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       </para></note>",
          "125:      </description>",
          "126:     </configOption>",
          "137:     <configOption name=\"type\">",
          "138:      <synopsis>Must be of type 'identify'.</synopsis>",
          "139:     </configOption>",
          "",
          "[Removed Lines]",
          "127:     <configOption name=\"transport\">",
          "128:      <synopsis>Match against a transport type.</synopsis>",
          "129:      <description>",
          "130:       <para>When using the ip or transport identifier, this option",
          "131:       can be used to match the transport type <literal>(udp or tcp)",
          "132:       </literal> as well.</para>",
          "133:       <para>When omitted, or left empty, which is the default, it",
          "134:       won't match against the transport type.</para>",
          "135:      </description>",
          "136:     </configOption>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   AST_STRING_FIELD(match_header_name);",
          "163:   AST_STRING_FIELD(match_header_value);",
          "166:  );",
          "168:  regex_t regex_header_buf;",
          "",
          "[Removed Lines]",
          "165:   AST_STRING_FIELD(transport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  unsigned int is_request_uri_regex:1;",
          "181: };",
          "190: static void ip_identify_destroy(void *obj)",
          "191: {",
          "",
          "[Removed Lines]",
          "184: struct ast_sockaddr_with_tp {",
          "185:  struct ast_sockaddr addr;",
          "186:  char tp[128];",
          "187: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
          "322: {",
          "323:  struct ip_identify_match *identify = obj;",
          "326:  int sense;",
          "329:  if (sense != AST_SENSE_ALLOW) {",
          "341:     ast_sorcery_object_get_id(identify));",
          "344:  } else {",
          "347:     ast_sorcery_object_get_id(identify));",
          "348:   return 0;",
          "349:  }",
          "",
          "[Removed Lines]",
          "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
          "325:  struct ast_sockaddr address = addr_with_tp->addr;",
          "328:  sense = ast_apply_ha(identify->matches, &address);",
          "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
          "331:     ast_sockaddr_stringify(&address),",
          "332:     ast_sorcery_object_get_id(identify));",
          "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
          "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
          "335:     addr_with_tp->tp,",
          "336:     ast_sorcery_object_get_id(identify));",
          "337:    return CMP_MATCH;",
          "338:   } else {",
          "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
          "340:     addr_with_tp->tp,",
          "342:    return 0;",
          "343:   }",
          "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
          "346:     ast_sockaddr_stringify(&address),",
          "",
          "[Added Lines]",
          "306:  struct ast_sockaddr *addr = arg;",
          "309:  sense = ast_apply_ha(identify->matches, addr);",
          "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
          "312:     ast_sockaddr_stringify(addr),",
          "314:   return CMP_MATCH;",
          "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
          "317:     ast_sockaddr_stringify(addr),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
          "386: {",
          "425: }",
          "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
          "428:  .identify_endpoint = ip_identify,",
          "429: };",
          "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
          "436: {",
          "437:  return common_identify(header_identify_match_check, rdata);",
          "",
          "[Removed Lines]",
          "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
          "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
          "394: }",
          "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
          "397: {",
          "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
          "399:  pj_status_t status;",
          "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
          "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
          "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
          "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
          "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
          "409:   }",
          "410:  } else {",
          "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
          "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
          "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
          "414:   }",
          "415:  }",
          "417:  if (status == PJ_SUCCESS) {",
          "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
          "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
          "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
          "422:  } else {",
          "423:   return NULL;",
          "424:  }",
          "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
          "432:  .identify_endpoint = transport_identify,",
          "433: };",
          "",
          "[Added Lines]",
          "358:  struct ast_sockaddr addr = { { 0, } };",
          "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
          "363:  return common_identify(ip_identify_match_check, &addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:   return -1;",
          "596:  }",
          "604:  if (!ast_strlen_zero(identify->match_header)) {",
          "605:   char *c_header;",
          "606:   char *c_value;",
          "",
          "[Removed Lines]",
          "598:  if (!ast_strlen_zero(identify->transport)) {",
          "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
          "600:    return -1;",
          "601:   }",
          "602:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
          "951:   }",
          "960:   if (!ast_strlen_zero(ident->match_header)) {",
          "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "962:     indent,",
          "",
          "[Removed Lines]",
          "953:   if (!ast_strlen_zero(ident->transport)) {",
          "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "955:     indent,",
          "956:     \"Transport\",",
          "957:     ident->transport);",
          "958:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
          "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
          "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
          "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
          "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
          "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
          "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
          "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
          "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
          "",
          "[Removed Lines]",
          "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
          "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
          "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
          "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
          "1080:  return 0;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c014b6655451a57ab31d5ba51fd66f4f2f9b0c4a",
      "candidate_info": {
        "commit_hash": "c014b6655451a57ab31d5ba51fd66f4f2f9b0c4a",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/c014b6655451a57ab31d5ba51fd66f4f2f9b0c4a",
        "files": [
          "configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_config.xml",
          "res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c"
        ],
        "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
        "before_after_code_files": [
          "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ],
          "candidate": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
          "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
          "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
          "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
          "242: ;",
          "243: ; This is a simple registration that works with some SIP trunking providers.",
          "",
          "[Removed Lines]",
          "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
          "201: ;",
          "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
          "203: ; other means of identification (e.g.: username), the transports' bind addresses",
          "204: ; can be used to identify them. Can be useful in case you're connecting to the",
          "205: ; same ITSP multiple times on different IPs / NICs.",
          "206: ;",
          "207: ;[transport-eth0]",
          "208: ;type=transport",
          "209: ;protocol=tcp",
          "210: ;bind=192.168.1.1:5060",
          "211: ;",
          "212: ;[transport-eth1]",
          "213: ;type=transport",
          "214: ;protocol=udp",
          "215: ;bind=192.168.2.1:5060",
          "216: ;",
          "217: ;",
          "218: ;[myprovider-a]",
          "219: ;type=endpoint",
          "220: ;transport=transport-eth0",
          "221: ;identify_by=transport",
          "222: ;",
          "223: ;[myprovider-b]",
          "224: ;type=endpoint",
          "225: ;transport=transport-eth1",
          "226: ;identify_by=transport",
          "227: ;",
          "228: ;",
          "229: ;[identify-a]",
          "230: ;type=identify",
          "231: ;endpoint=myprovider-a",
          "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
          "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
          "234: ;",
          "235: ;[identify-b]",
          "236: ;type=identify",
          "237: ;endpoint=myprovider-b",
          "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
          "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:                         ; identified.",
          "726:                         ; \"username\": Identify by the From or To username and domain",
          "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
          "729:                         ; \"header\": Identify by a configured SIP header value.",
          "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
          "732:                         ; In the username and auth_username cases, if an exact match",
          "733:                         ; on both username and domain/realm fails, the match is",
          "734:                         ; retried with just the username.",
          "",
          "[Removed Lines]",
          "728:                         ; \"ip\": Identify by the source (remote) IP address",
          "731:                         ; \"transport\": Identify by the bound (local) IP address",
          "",
          "[Added Lines]",
          "687:                         ; \"ip\": Identify by the source IP address",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:             ; (default: \"no\")",
          "1314: ;endpoint_identifier_order=ip,username,anonymous",
          "1315:             ; The order by which endpoint identifiers are given priority.",
          "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
          "1321:             ; to see the identifiers currently available.",
          "1322:             ; (default: ip,username,anonymous)",
          "",
          "[Removed Lines]",
          "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
          "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
          "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
          "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "[Added Lines]",
          "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
          "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
          "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
          "1505:         ; against (default: \"\")",
          "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
          "1509: ;type=  ; Must be of type identify (default: \"\")",
          "",
          "[Removed Lines]",
          "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
          "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
          "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
          "3: Revision ID: bd9c5159c7ea",
          "4: Revises: 6c475a93f48a",
          "5: Create Date: 2024-05-17 08:30:58.299083",
          "7: \"\"\"",
          "9: # revision identifiers, used by Alembic.",
          "10: revision = 'bd9c5159c7ea'",
          "11: down_revision = '6c475a93f48a'",
          "13: from alembic import op",
          "14: import sqlalchemy as sa",
          "17: def upgrade():",
          "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
          "21: def downgrade():",
          "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
          "",
          "---------------"
        ],
        "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
          "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
          "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
          "622: };",
          "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
          "",
          "[Removed Lines]",
          "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
          "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
          "427:   str = \"request_uri\";",
          "428:   break;",
          "432:  }",
          "433:  return str;",
          "434: }",
          "",
          "[Removed Lines]",
          "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
          "430:   str = \"transport\";",
          "431:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
          "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
          "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
          "461:  } else {",
          "462:   method = -1;",
          "463:  }",
          "",
          "[Removed Lines]",
          "459:  } else if (!strcasecmp(str, \"transport\")) {",
          "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
          "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       </para></note>",
          "125:      </description>",
          "126:     </configOption>",
          "137:     <configOption name=\"type\">",
          "138:      <synopsis>Must be of type 'identify'.</synopsis>",
          "139:     </configOption>",
          "",
          "[Removed Lines]",
          "127:     <configOption name=\"transport\">",
          "128:      <synopsis>Match against a transport type.</synopsis>",
          "129:      <description>",
          "130:       <para>When using the ip or transport identifier, this option",
          "131:       can be used to match the transport type <literal>(udp or tcp)",
          "132:       </literal> as well.</para>",
          "133:       <para>When omitted, or left empty, which is the default, it",
          "134:       won't match against the transport type.</para>",
          "135:      </description>",
          "136:     </configOption>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   AST_STRING_FIELD(match_header_name);",
          "163:   AST_STRING_FIELD(match_header_value);",
          "166:  );",
          "168:  regex_t regex_header_buf;",
          "",
          "[Removed Lines]",
          "165:   AST_STRING_FIELD(transport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  unsigned int is_request_uri_regex:1;",
          "181: };",
          "190: static void ip_identify_destroy(void *obj)",
          "191: {",
          "",
          "[Removed Lines]",
          "184: struct ast_sockaddr_with_tp {",
          "185:  struct ast_sockaddr addr;",
          "186:  char tp[128];",
          "187: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
          "322: {",
          "323:  struct ip_identify_match *identify = obj;",
          "326:  int sense;",
          "329:  if (sense != AST_SENSE_ALLOW) {",
          "341:     ast_sorcery_object_get_id(identify));",
          "344:  } else {",
          "347:     ast_sorcery_object_get_id(identify));",
          "348:   return 0;",
          "349:  }",
          "",
          "[Removed Lines]",
          "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
          "325:  struct ast_sockaddr address = addr_with_tp->addr;",
          "328:  sense = ast_apply_ha(identify->matches, &address);",
          "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
          "331:     ast_sockaddr_stringify(&address),",
          "332:     ast_sorcery_object_get_id(identify));",
          "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
          "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
          "335:     addr_with_tp->tp,",
          "336:     ast_sorcery_object_get_id(identify));",
          "337:    return CMP_MATCH;",
          "338:   } else {",
          "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
          "340:     addr_with_tp->tp,",
          "342:    return 0;",
          "343:   }",
          "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
          "346:     ast_sockaddr_stringify(&address),",
          "",
          "[Added Lines]",
          "306:  struct ast_sockaddr *addr = arg;",
          "309:  sense = ast_apply_ha(identify->matches, addr);",
          "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
          "312:     ast_sockaddr_stringify(addr),",
          "314:   return CMP_MATCH;",
          "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
          "317:     ast_sockaddr_stringify(addr),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
          "386: {",
          "425: }",
          "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
          "428:  .identify_endpoint = ip_identify,",
          "429: };",
          "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
          "436: {",
          "437:  return common_identify(header_identify_match_check, rdata);",
          "",
          "[Removed Lines]",
          "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
          "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
          "394: }",
          "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
          "397: {",
          "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
          "399:  pj_status_t status;",
          "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
          "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
          "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
          "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
          "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
          "409:   }",
          "410:  } else {",
          "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
          "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
          "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
          "414:   }",
          "415:  }",
          "417:  if (status == PJ_SUCCESS) {",
          "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
          "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
          "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
          "422:  } else {",
          "423:   return NULL;",
          "424:  }",
          "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
          "432:  .identify_endpoint = transport_identify,",
          "433: };",
          "",
          "[Added Lines]",
          "358:  struct ast_sockaddr addr = { { 0, } };",
          "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
          "363:  return common_identify(ip_identify_match_check, &addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:   return -1;",
          "596:  }",
          "604:  if (!ast_strlen_zero(identify->match_header)) {",
          "605:   char *c_header;",
          "606:   char *c_value;",
          "",
          "[Removed Lines]",
          "598:  if (!ast_strlen_zero(identify->transport)) {",
          "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
          "600:    return -1;",
          "601:   }",
          "602:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
          "951:   }",
          "960:   if (!ast_strlen_zero(ident->match_header)) {",
          "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "962:     indent,",
          "",
          "[Removed Lines]",
          "953:   if (!ast_strlen_zero(ident->transport)) {",
          "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "955:     indent,",
          "956:     \"Transport\",",
          "957:     ident->transport);",
          "958:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
          "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
          "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
          "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
          "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
          "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
          "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
          "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
          "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
          "",
          "[Removed Lines]",
          "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
          "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
          "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
          "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
          "1080:  return 0;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "463cf883d943e88d64b9d28b411a9966484a395e",
      "candidate_info": {
        "commit_hash": "463cf883d943e88d64b9d28b411a9966484a395e",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/463cf883d943e88d64b9d28b411a9966484a395e",
        "files": [
          "configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_config.xml",
          "res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c"
        ],
        "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
        "before_after_code_files": [
          "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ],
          "candidate": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
          "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
          "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
          "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
          "242: ;",
          "243: ; This is a simple registration that works with some SIP trunking providers.",
          "",
          "[Removed Lines]",
          "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
          "201: ;",
          "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
          "203: ; other means of identification (e.g.: username), the transports' bind addresses",
          "204: ; can be used to identify them. Can be useful in case you're connecting to the",
          "205: ; same ITSP multiple times on different IPs / NICs.",
          "206: ;",
          "207: ;[transport-eth0]",
          "208: ;type=transport",
          "209: ;protocol=tcp",
          "210: ;bind=192.168.1.1:5060",
          "211: ;",
          "212: ;[transport-eth1]",
          "213: ;type=transport",
          "214: ;protocol=udp",
          "215: ;bind=192.168.2.1:5060",
          "216: ;",
          "217: ;",
          "218: ;[myprovider-a]",
          "219: ;type=endpoint",
          "220: ;transport=transport-eth0",
          "221: ;identify_by=transport",
          "222: ;",
          "223: ;[myprovider-b]",
          "224: ;type=endpoint",
          "225: ;transport=transport-eth1",
          "226: ;identify_by=transport",
          "227: ;",
          "228: ;",
          "229: ;[identify-a]",
          "230: ;type=identify",
          "231: ;endpoint=myprovider-a",
          "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
          "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
          "234: ;",
          "235: ;[identify-b]",
          "236: ;type=identify",
          "237: ;endpoint=myprovider-b",
          "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
          "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:                         ; identified.",
          "726:                         ; \"username\": Identify by the From or To username and domain",
          "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
          "729:                         ; \"header\": Identify by a configured SIP header value.",
          "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
          "732:                         ; In the username and auth_username cases, if an exact match",
          "733:                         ; on both username and domain/realm fails, the match is",
          "734:                         ; retried with just the username.",
          "",
          "[Removed Lines]",
          "728:                         ; \"ip\": Identify by the source (remote) IP address",
          "731:                         ; \"transport\": Identify by the bound (local) IP address",
          "",
          "[Added Lines]",
          "687:                         ; \"ip\": Identify by the source IP address",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:             ; (default: \"no\")",
          "1314: ;endpoint_identifier_order=ip,username,anonymous",
          "1315:             ; The order by which endpoint identifiers are given priority.",
          "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
          "1321:             ; to see the identifiers currently available.",
          "1322:             ; (default: ip,username,anonymous)",
          "",
          "[Removed Lines]",
          "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
          "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
          "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
          "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "[Added Lines]",
          "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
          "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
          "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
          "1505:         ; against (default: \"\")",
          "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
          "1509: ;type=  ; Must be of type identify (default: \"\")",
          "",
          "[Removed Lines]",
          "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
          "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
          "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
          "3: Revision ID: bd9c5159c7ea",
          "4: Revises: 6c475a93f48a",
          "5: Create Date: 2024-05-17 08:30:58.299083",
          "7: \"\"\"",
          "9: # revision identifiers, used by Alembic.",
          "10: revision = 'bd9c5159c7ea'",
          "11: down_revision = '6c475a93f48a'",
          "13: from alembic import op",
          "14: import sqlalchemy as sa",
          "17: def upgrade():",
          "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
          "21: def downgrade():",
          "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
          "",
          "---------------"
        ],
        "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
          "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
          "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
          "622: };",
          "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
          "",
          "[Removed Lines]",
          "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
          "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
          "427:   str = \"request_uri\";",
          "428:   break;",
          "432:  }",
          "433:  return str;",
          "434: }",
          "",
          "[Removed Lines]",
          "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
          "430:   str = \"transport\";",
          "431:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
          "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
          "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
          "461:  } else {",
          "462:   method = -1;",
          "463:  }",
          "",
          "[Removed Lines]",
          "459:  } else if (!strcasecmp(str, \"transport\")) {",
          "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
          "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       </para></note>",
          "125:      </description>",
          "126:     </configOption>",
          "137:     <configOption name=\"type\">",
          "138:      <synopsis>Must be of type 'identify'.</synopsis>",
          "139:     </configOption>",
          "",
          "[Removed Lines]",
          "127:     <configOption name=\"transport\">",
          "128:      <synopsis>Match against a transport type.</synopsis>",
          "129:      <description>",
          "130:       <para>When using the ip or transport identifier, this option",
          "131:       can be used to match the transport type <literal>(udp or tcp)",
          "132:       </literal> as well.</para>",
          "133:       <para>When omitted, or left empty, which is the default, it",
          "134:       won't match against the transport type.</para>",
          "135:      </description>",
          "136:     </configOption>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   AST_STRING_FIELD(match_header_name);",
          "163:   AST_STRING_FIELD(match_header_value);",
          "166:  );",
          "168:  regex_t regex_header_buf;",
          "",
          "[Removed Lines]",
          "165:   AST_STRING_FIELD(transport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  unsigned int is_request_uri_regex:1;",
          "181: };",
          "190: static void ip_identify_destroy(void *obj)",
          "191: {",
          "",
          "[Removed Lines]",
          "184: struct ast_sockaddr_with_tp {",
          "185:  struct ast_sockaddr addr;",
          "186:  char tp[128];",
          "187: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
          "322: {",
          "323:  struct ip_identify_match *identify = obj;",
          "326:  int sense;",
          "329:  if (sense != AST_SENSE_ALLOW) {",
          "341:     ast_sorcery_object_get_id(identify));",
          "344:  } else {",
          "347:     ast_sorcery_object_get_id(identify));",
          "348:   return 0;",
          "349:  }",
          "",
          "[Removed Lines]",
          "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
          "325:  struct ast_sockaddr address = addr_with_tp->addr;",
          "328:  sense = ast_apply_ha(identify->matches, &address);",
          "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
          "331:     ast_sockaddr_stringify(&address),",
          "332:     ast_sorcery_object_get_id(identify));",
          "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
          "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
          "335:     addr_with_tp->tp,",
          "336:     ast_sorcery_object_get_id(identify));",
          "337:    return CMP_MATCH;",
          "338:   } else {",
          "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
          "340:     addr_with_tp->tp,",
          "342:    return 0;",
          "343:   }",
          "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
          "346:     ast_sockaddr_stringify(&address),",
          "",
          "[Added Lines]",
          "306:  struct ast_sockaddr *addr = arg;",
          "309:  sense = ast_apply_ha(identify->matches, addr);",
          "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
          "312:     ast_sockaddr_stringify(addr),",
          "314:   return CMP_MATCH;",
          "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
          "317:     ast_sockaddr_stringify(addr),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
          "386: {",
          "425: }",
          "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
          "428:  .identify_endpoint = ip_identify,",
          "429: };",
          "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
          "436: {",
          "437:  return common_identify(header_identify_match_check, rdata);",
          "",
          "[Removed Lines]",
          "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
          "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
          "394: }",
          "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
          "397: {",
          "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
          "399:  pj_status_t status;",
          "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
          "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
          "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
          "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
          "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
          "409:   }",
          "410:  } else {",
          "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
          "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
          "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
          "414:   }",
          "415:  }",
          "417:  if (status == PJ_SUCCESS) {",
          "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
          "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
          "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
          "422:  } else {",
          "423:   return NULL;",
          "424:  }",
          "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
          "432:  .identify_endpoint = transport_identify,",
          "433: };",
          "",
          "[Added Lines]",
          "358:  struct ast_sockaddr addr = { { 0, } };",
          "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
          "363:  return common_identify(ip_identify_match_check, &addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:   return -1;",
          "596:  }",
          "604:  if (!ast_strlen_zero(identify->match_header)) {",
          "605:   char *c_header;",
          "606:   char *c_value;",
          "",
          "[Removed Lines]",
          "598:  if (!ast_strlen_zero(identify->transport)) {",
          "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
          "600:    return -1;",
          "601:   }",
          "602:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
          "951:   }",
          "960:   if (!ast_strlen_zero(ident->match_header)) {",
          "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "962:     indent,",
          "",
          "[Removed Lines]",
          "953:   if (!ast_strlen_zero(ident->transport)) {",
          "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "955:     indent,",
          "956:     \"Transport\",",
          "957:     ident->transport);",
          "958:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
          "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
          "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
          "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
          "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
          "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
          "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
          "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
          "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
          "",
          "[Removed Lines]",
          "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
          "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
          "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
          "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
          "1080:  return 0;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "741183d7ac58ec0ee1f32ee93a94379e49ff6875",
      "candidate_info": {
        "commit_hash": "741183d7ac58ec0ee1f32ee93a94379e49ff6875",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/741183d7ac58ec0ee1f32ee93a94379e49ff6875",
        "files": [
          "configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_config.xml",
          "res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c"
        ],
        "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
        "before_after_code_files": [
          "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ],
          "candidate": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
          "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
          "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
          "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
          "242: ;",
          "243: ; This is a simple registration that works with some SIP trunking providers.",
          "",
          "[Removed Lines]",
          "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
          "201: ;",
          "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
          "203: ; other means of identification (e.g.: username), the transports' bind addresses",
          "204: ; can be used to identify them. Can be useful in case you're connecting to the",
          "205: ; same ITSP multiple times on different IPs / NICs.",
          "206: ;",
          "207: ;[transport-eth0]",
          "208: ;type=transport",
          "209: ;protocol=tcp",
          "210: ;bind=192.168.1.1:5060",
          "211: ;",
          "212: ;[transport-eth1]",
          "213: ;type=transport",
          "214: ;protocol=udp",
          "215: ;bind=192.168.2.1:5060",
          "216: ;",
          "217: ;",
          "218: ;[myprovider-a]",
          "219: ;type=endpoint",
          "220: ;transport=transport-eth0",
          "221: ;identify_by=transport",
          "222: ;",
          "223: ;[myprovider-b]",
          "224: ;type=endpoint",
          "225: ;transport=transport-eth1",
          "226: ;identify_by=transport",
          "227: ;",
          "228: ;",
          "229: ;[identify-a]",
          "230: ;type=identify",
          "231: ;endpoint=myprovider-a",
          "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
          "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
          "234: ;",
          "235: ;[identify-b]",
          "236: ;type=identify",
          "237: ;endpoint=myprovider-b",
          "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
          "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:                         ; identified.",
          "726:                         ; \"username\": Identify by the From or To username and domain",
          "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
          "729:                         ; \"header\": Identify by a configured SIP header value.",
          "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
          "732:                         ; In the username and auth_username cases, if an exact match",
          "733:                         ; on both username and domain/realm fails, the match is",
          "734:                         ; retried with just the username.",
          "",
          "[Removed Lines]",
          "728:                         ; \"ip\": Identify by the source (remote) IP address",
          "731:                         ; \"transport\": Identify by the bound (local) IP address",
          "",
          "[Added Lines]",
          "687:                         ; \"ip\": Identify by the source IP address",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:             ; (default: \"no\")",
          "1314: ;endpoint_identifier_order=ip,username,anonymous",
          "1315:             ; The order by which endpoint identifiers are given priority.",
          "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
          "1321:             ; to see the identifiers currently available.",
          "1322:             ; (default: ip,username,anonymous)",
          "",
          "[Removed Lines]",
          "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
          "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
          "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
          "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "[Added Lines]",
          "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
          "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
          "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
          "1505:         ; against (default: \"\")",
          "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
          "1509: ;type=  ; Must be of type identify (default: \"\")",
          "",
          "[Removed Lines]",
          "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
          "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
          "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
          "3: Revision ID: bd9c5159c7ea",
          "4: Revises: 6c475a93f48a",
          "5: Create Date: 2024-05-17 08:30:58.299083",
          "7: \"\"\"",
          "9: # revision identifiers, used by Alembic.",
          "10: revision = 'bd9c5159c7ea'",
          "11: down_revision = '6c475a93f48a'",
          "13: from alembic import op",
          "14: import sqlalchemy as sa",
          "17: def upgrade():",
          "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
          "21: def downgrade():",
          "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
          "",
          "---------------"
        ],
        "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
          "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
          "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
          "622: };",
          "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
          "",
          "[Removed Lines]",
          "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
          "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
          "427:   str = \"request_uri\";",
          "428:   break;",
          "432:  }",
          "433:  return str;",
          "434: }",
          "",
          "[Removed Lines]",
          "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
          "430:   str = \"transport\";",
          "431:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
          "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
          "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
          "461:  } else {",
          "462:   method = -1;",
          "463:  }",
          "",
          "[Removed Lines]",
          "459:  } else if (!strcasecmp(str, \"transport\")) {",
          "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
          "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       </para></note>",
          "125:      </description>",
          "126:     </configOption>",
          "137:     <configOption name=\"type\">",
          "138:      <synopsis>Must be of type 'identify'.</synopsis>",
          "139:     </configOption>",
          "",
          "[Removed Lines]",
          "127:     <configOption name=\"transport\">",
          "128:      <synopsis>Match against a transport type.</synopsis>",
          "129:      <description>",
          "130:       <para>When using the ip or transport identifier, this option",
          "131:       can be used to match the transport type <literal>(udp or tcp)",
          "132:       </literal> as well.</para>",
          "133:       <para>When omitted, or left empty, which is the default, it",
          "134:       won't match against the transport type.</para>",
          "135:      </description>",
          "136:     </configOption>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   AST_STRING_FIELD(match_header_name);",
          "163:   AST_STRING_FIELD(match_header_value);",
          "166:  );",
          "168:  regex_t regex_header_buf;",
          "",
          "[Removed Lines]",
          "165:   AST_STRING_FIELD(transport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  unsigned int is_request_uri_regex:1;",
          "181: };",
          "190: static void ip_identify_destroy(void *obj)",
          "191: {",
          "",
          "[Removed Lines]",
          "184: struct ast_sockaddr_with_tp {",
          "185:  struct ast_sockaddr addr;",
          "186:  char tp[128];",
          "187: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
          "322: {",
          "323:  struct ip_identify_match *identify = obj;",
          "326:  int sense;",
          "329:  if (sense != AST_SENSE_ALLOW) {",
          "341:     ast_sorcery_object_get_id(identify));",
          "344:  } else {",
          "347:     ast_sorcery_object_get_id(identify));",
          "348:   return 0;",
          "349:  }",
          "",
          "[Removed Lines]",
          "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
          "325:  struct ast_sockaddr address = addr_with_tp->addr;",
          "328:  sense = ast_apply_ha(identify->matches, &address);",
          "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
          "331:     ast_sockaddr_stringify(&address),",
          "332:     ast_sorcery_object_get_id(identify));",
          "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
          "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
          "335:     addr_with_tp->tp,",
          "336:     ast_sorcery_object_get_id(identify));",
          "337:    return CMP_MATCH;",
          "338:   } else {",
          "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
          "340:     addr_with_tp->tp,",
          "342:    return 0;",
          "343:   }",
          "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
          "346:     ast_sockaddr_stringify(&address),",
          "",
          "[Added Lines]",
          "306:  struct ast_sockaddr *addr = arg;",
          "309:  sense = ast_apply_ha(identify->matches, addr);",
          "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
          "312:     ast_sockaddr_stringify(addr),",
          "314:   return CMP_MATCH;",
          "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
          "317:     ast_sockaddr_stringify(addr),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
          "386: {",
          "425: }",
          "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
          "428:  .identify_endpoint = ip_identify,",
          "429: };",
          "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
          "436: {",
          "437:  return common_identify(header_identify_match_check, rdata);",
          "",
          "[Removed Lines]",
          "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
          "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
          "394: }",
          "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
          "397: {",
          "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
          "399:  pj_status_t status;",
          "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
          "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
          "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
          "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
          "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
          "409:   }",
          "410:  } else {",
          "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
          "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
          "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
          "414:   }",
          "415:  }",
          "417:  if (status == PJ_SUCCESS) {",
          "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
          "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
          "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
          "422:  } else {",
          "423:   return NULL;",
          "424:  }",
          "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
          "432:  .identify_endpoint = transport_identify,",
          "433: };",
          "",
          "[Added Lines]",
          "358:  struct ast_sockaddr addr = { { 0, } };",
          "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
          "363:  return common_identify(ip_identify_match_check, &addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:   return -1;",
          "596:  }",
          "604:  if (!ast_strlen_zero(identify->match_header)) {",
          "605:   char *c_header;",
          "606:   char *c_value;",
          "",
          "[Removed Lines]",
          "598:  if (!ast_strlen_zero(identify->transport)) {",
          "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
          "600:    return -1;",
          "601:   }",
          "602:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
          "951:   }",
          "960:   if (!ast_strlen_zero(ident->match_header)) {",
          "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "962:     indent,",
          "",
          "[Removed Lines]",
          "953:   if (!ast_strlen_zero(ident->transport)) {",
          "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "955:     indent,",
          "956:     \"Transport\",",
          "957:     ident->transport);",
          "958:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
          "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
          "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
          "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
          "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
          "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
          "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
          "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
          "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
          "",
          "[Removed Lines]",
          "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
          "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
          "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
          "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
          "1080:  return 0;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22c3ff2b0c7c15e84342e9fa87b2cb9751b26c98",
      "candidate_info": {
        "commit_hash": "22c3ff2b0c7c15e84342e9fa87b2cb9751b26c98",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/22c3ff2b0c7c15e84342e9fa87b2cb9751b26c98",
        "files": [
          "configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_config.xml",
          "res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c"
        ],
        "message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
        "before_after_code_files": [
          "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
          "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
          "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
          "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ],
          "candidate": [
            "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample",
            "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
            "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h",
            "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c",
            "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "configs/samples/pjsip.conf.sample||configs/samples/pjsip.conf.sample": [
          "File: configs/samples/pjsip.conf.sample -> configs/samples/pjsip.conf.sample",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: ;tcp_keepalive_interval_time=10  ; The time in seconds between individual keepalive probes",
          "198: ;tcp_keepalive_probe_count=5     ; The maximum number of keepalive probes TCP should send before dropping the connection",
          "241: ;===============OUTBOUND REGISTRATION WITH OUTBOUND AUTHENTICATION============",
          "242: ;",
          "243: ; This is a simple registration that works with some SIP trunking providers.",
          "",
          "[Removed Lines]",
          "200: ;===============ENDPOINT IDENTIFIER TRANSPORT EXAMPLE==========================",
          "201: ;",
          "202: ; When Asterisk has multiple bound IP addresses, and endpoints don't use any",
          "203: ; other means of identification (e.g.: username), the transports' bind addresses",
          "204: ; can be used to identify them. Can be useful in case you're connecting to the",
          "205: ; same ITSP multiple times on different IPs / NICs.",
          "206: ;",
          "207: ;[transport-eth0]",
          "208: ;type=transport",
          "209: ;protocol=tcp",
          "210: ;bind=192.168.1.1:5060",
          "211: ;",
          "212: ;[transport-eth1]",
          "213: ;type=transport",
          "214: ;protocol=udp",
          "215: ;bind=192.168.2.1:5060",
          "216: ;",
          "217: ;",
          "218: ;[myprovider-a]",
          "219: ;type=endpoint",
          "220: ;transport=transport-eth0",
          "221: ;identify_by=transport",
          "222: ;",
          "223: ;[myprovider-b]",
          "224: ;type=endpoint",
          "225: ;transport=transport-eth1",
          "226: ;identify_by=transport",
          "227: ;",
          "228: ;",
          "229: ;[identify-a]",
          "230: ;type=identify",
          "231: ;endpoint=myprovider-a",
          "232: ;match=192.168.1.1:5060 ; This is the bind address of [transport-eth0]",
          "233: ;;transport=tcp  ; Optionally, this is the transport protocol of [transport-eth0]",
          "234: ;",
          "235: ;[identify-b]",
          "236: ;type=identify",
          "237: ;endpoint=myprovider-b",
          "238: ;match=192.168.2.1:5060 ; This is the bind address of [transport-eth1]",
          "239: ;;transport=udp  ; Optionally, This is the transport protocol of [transport-eth1]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:                         ; identified.",
          "726:                         ; \"username\": Identify by the From or To username and domain",
          "727:                         ; \"auth_username\": Identify by the Authorization username and realm",
          "729:                         ; \"header\": Identify by a configured SIP header value.",
          "730:                         ; \"request_uri\": Identify by the configured SIP request URI.",
          "732:                         ; In the username and auth_username cases, if an exact match",
          "733:                         ; on both username and domain/realm fails, the match is",
          "734:                         ; retried with just the username.",
          "",
          "[Removed Lines]",
          "728:                         ; \"ip\": Identify by the source (remote) IP address",
          "731:                         ; \"transport\": Identify by the bound (local) IP address",
          "",
          "[Added Lines]",
          "687:                         ; \"ip\": Identify by the source IP address",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1313:             ; (default: \"no\")",
          "1314: ;endpoint_identifier_order=ip,username,anonymous",
          "1315:             ; The order by which endpoint identifiers are given priority.",
          "1320:             ; more than one identifier.  Use the CLI command \"pjsip show identifiers\"",
          "1321:             ; to see the identifiers currently available.",
          "1322:             ; (default: ip,username,anonymous)",
          "",
          "[Removed Lines]",
          "1316:             ; Currently, \"ip\", \"header\", \"request_uri\", \"transport\", \"username\",",
          "1317:             ; \"auth_username\" and \"anonymous\"  are valid identifiers as registered by",
          "1318:             ; the res_pjsip_endpoint_identifier_* modules.",
          "1319:             ; Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "[Added Lines]",
          "1274:             ; Currently, \"ip\", \"header\", \"username\", \"auth_username\" and \"anonymous\"",
          "1275:             ; are valid identifiers as registered by the res_pjsip_endpoint_identifier_*",
          "1276:             ; modules.  Some modules like res_pjsip_endpoint_identifier_user register",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1504: ;match= ; Comma separated list of IP addresses, networks, or hostnames to match",
          "1505:         ; against (default: \"\")",
          "1506: ;match_header= ; SIP header with specified value to match against (default: \"\")",
          "1509: ;type=  ; Must be of type identify (default: \"\")",
          "",
          "[Removed Lines]",
          "1507: ;match_request_uri= ; SIP request URI to match against (default: \"\")",
          "1508: ;transport= ; Match ageinst the transport protocol (tcp or udp) (default: \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py||contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py": [
          "File: contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py -> contrib/ast-db-manage/config/versions/bd9c5159c7ea_revert_d5122576cca8_add_transport_.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Revert d5122576cca8 add transport attribute to identify",
          "3: Revision ID: bd9c5159c7ea",
          "4: Revises: 6c475a93f48a",
          "5: Create Date: 2024-05-17 08:30:58.299083",
          "7: \"\"\"",
          "9: # revision identifiers, used by Alembic.",
          "10: revision = 'bd9c5159c7ea'",
          "11: down_revision = '6c475a93f48a'",
          "13: from alembic import op",
          "14: import sqlalchemy as sa",
          "17: def upgrade():",
          "18:     op.drop_column('ps_endpoint_id_ips', 'transport')",
          "21: def downgrade():",
          "22:     op.add_column('ps_endpoint_id_ips', sa.Column('transport', sa.String(128)))",
          "",
          "---------------"
        ],
        "include/asterisk/res_pjsip.h||include/asterisk/res_pjsip.h": [
          "File: include/asterisk/res_pjsip.h -> include/asterisk/res_pjsip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:  AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
          "619:  AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
          "622: };",
          "623: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
          "",
          "[Removed Lines]",
          "621:  AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip/pjsip_configuration.c||res/res_pjsip/pjsip_configuration.c": [
          "File: res/res_pjsip/pjsip_configuration.c -> res/res_pjsip/pjsip_configuration.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:  case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
          "427:   str = \"request_uri\";",
          "428:   break;",
          "432:  }",
          "433:  return str;",
          "434: }",
          "",
          "[Removed Lines]",
          "429:  case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
          "430:   str = \"transport\";",
          "431:   break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
          "457:  } else if (!strcasecmp(str, \"request_uri\")) {",
          "458:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
          "461:  } else {",
          "462:   method = -1;",
          "463:  }",
          "",
          "[Removed Lines]",
          "459:  } else if (!strcasecmp(str, \"transport\")) {",
          "460:   method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "res/res_pjsip_endpoint_identifier_ip.c||res/res_pjsip_endpoint_identifier_ip.c": [
          "File: res/res_pjsip_endpoint_identifier_ip.c -> res/res_pjsip_endpoint_identifier_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       </para></note>",
          "125:      </description>",
          "126:     </configOption>",
          "137:     <configOption name=\"type\">",
          "138:      <synopsis>Must be of type 'identify'.</synopsis>",
          "139:     </configOption>",
          "",
          "[Removed Lines]",
          "127:     <configOption name=\"transport\">",
          "128:      <synopsis>Match against a transport type.</synopsis>",
          "129:      <description>",
          "130:       <para>When using the ip or transport identifier, this option",
          "131:       can be used to match the transport type <literal>(udp or tcp)",
          "132:       </literal> as well.</para>",
          "133:       <para>When omitted, or left empty, which is the default, it",
          "134:       won't match against the transport type.</para>",
          "135:      </description>",
          "136:     </configOption>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   AST_STRING_FIELD(match_header_name);",
          "163:   AST_STRING_FIELD(match_header_value);",
          "166:  );",
          "168:  regex_t regex_header_buf;",
          "",
          "[Removed Lines]",
          "165:   AST_STRING_FIELD(transport);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  unsigned int is_request_uri_regex:1;",
          "181: };",
          "190: static void ip_identify_destroy(void *obj)",
          "191: {",
          "",
          "[Removed Lines]",
          "184: struct ast_sockaddr_with_tp {",
          "185:  struct ast_sockaddr addr;",
          "186:  char tp[128];",
          "187: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321: static int ip_identify_match_check(void *obj, void *arg, int flags)",
          "322: {",
          "323:  struct ip_identify_match *identify = obj;",
          "326:  int sense;",
          "329:  if (sense != AST_SENSE_ALLOW) {",
          "341:     ast_sorcery_object_get_id(identify));",
          "344:  } else {",
          "347:     ast_sorcery_object_get_id(identify));",
          "348:   return 0;",
          "349:  }",
          "",
          "[Removed Lines]",
          "324:  struct ast_sockaddr_with_tp *addr_with_tp = arg;",
          "325:  struct ast_sockaddr address = addr_with_tp->addr;",
          "328:  sense = ast_apply_ha(identify->matches, &address);",
          "330:   ast_debug(3, \"Address %s matches identify '%s'\\n\",",
          "331:     ast_sockaddr_stringify(&address),",
          "332:     ast_sorcery_object_get_id(identify));",
          "333:   if (ast_strlen_zero(identify->transport) || !strcasecmp(identify->transport, addr_with_tp->tp)) {",
          "334:    ast_debug(3, \"Transport %s matches identify '%s'\\n\",",
          "335:     addr_with_tp->tp,",
          "336:     ast_sorcery_object_get_id(identify));",
          "337:    return CMP_MATCH;",
          "338:   } else {",
          "339:    ast_debug(3, \"Transport %s match not matched identify '%s'\\n\",",
          "340:     addr_with_tp->tp,",
          "342:    return 0;",
          "343:   }",
          "345:   ast_debug(3, \"Address %s does not match identify '%s'\\n\",",
          "346:     ast_sockaddr_stringify(&address),",
          "",
          "[Added Lines]",
          "306:  struct ast_sockaddr *addr = arg;",
          "309:  sense = ast_apply_ha(identify->matches, addr);",
          "311:   ast_debug(3, \"Source address %s matches identify '%s'\\n\",",
          "312:     ast_sockaddr_stringify(addr),",
          "314:   return CMP_MATCH;",
          "316:   ast_debug(3, \"Source address %s does not match identify '%s'\\n\",",
          "317:     ast_sockaddr_stringify(addr),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "385: static struct ast_sip_endpoint *ip_identify(pjsip_rx_data *rdata)",
          "386: {",
          "425: }",
          "427: static struct ast_sip_endpoint_identifier ip_identifier = {",
          "428:  .identify_endpoint = ip_identify,",
          "429: };",
          "435: static struct ast_sip_endpoint *header_identify(pjsip_rx_data *rdata)",
          "436: {",
          "437:  return common_identify(header_identify_match_check, rdata);",
          "",
          "[Removed Lines]",
          "387:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "388:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "390:  ast_sockaddr_parse(&addr_with_tp.addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "391:  ast_sockaddr_set_port(&addr_with_tp.addr, rdata->pkt_info.src_port);",
          "393:  return common_identify(ip_identify_match_check, &addr_with_tp);",
          "394: }",
          "396: static struct ast_sip_endpoint *transport_identify(pjsip_rx_data *rdata)",
          "397: {",
          "398:  char buffer[PJ_INET6_ADDRSTRLEN];",
          "399:  pj_status_t status;",
          "400:  struct ast_sockaddr_with_tp addr_with_tp = { { { 0, } }, };",
          "401:  union pj_sockaddr sock = rdata->tp_info.transport->local_addr;",
          "403:  pj_ansi_strxcpy(addr_with_tp.tp, rdata->tp_info.transport->type_name, sizeof(addr_with_tp.tp));",
          "405:  if (sock.addr.sa_family == PJ_AF_INET6) {",
          "406:   status = pj_inet_ntop(PJ_AF_INET6, &(sock.ipv6.sin6_addr), buffer, PJ_INET6_ADDRSTRLEN);",
          "407:   if (status == PJ_SUCCESS && !strcmp(buffer, \"::\")) {",
          "408:    ast_log(LOG_WARNING, \"Matching against '::' may be unpredictable.\\n\");",
          "409:   }",
          "410:  } else {",
          "411:   status = pj_inet_ntop(PJ_AF_INET, &(sock.ipv4.sin_addr), buffer, PJ_INET_ADDRSTRLEN);",
          "412:   if (status == PJ_SUCCESS && !strcmp(buffer, \"0.0.0.0\")) {",
          "413:    ast_log(LOG_WARNING, \"Matching against '0.0.0.0' may be unpredictable.\\n\");",
          "414:   }",
          "415:  }",
          "417:  if (status == PJ_SUCCESS) {",
          "418:   ast_sockaddr_parse(&addr_with_tp.addr, buffer, PARSE_PORT_FORBID);",
          "419:   ast_sockaddr_set_port(&addr_with_tp.addr, rdata->tp_info.transport->local_name.port);",
          "421:   return common_identify(ip_identify_match_check, &addr_with_tp);",
          "422:  } else {",
          "423:   return NULL;",
          "424:  }",
          "431: static struct ast_sip_endpoint_identifier transport_identifier = {",
          "432:  .identify_endpoint = transport_identify,",
          "433: };",
          "",
          "[Added Lines]",
          "358:  struct ast_sockaddr addr = { { 0, } };",
          "360:  ast_sockaddr_parse(&addr, rdata->pkt_info.src_name, PARSE_PORT_FORBID);",
          "361:  ast_sockaddr_set_port(&addr, rdata->pkt_info.src_port);",
          "363:  return common_identify(ip_identify_match_check, &addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:   return -1;",
          "596:  }",
          "604:  if (!ast_strlen_zero(identify->match_header)) {",
          "605:   char *c_header;",
          "606:   char *c_value;",
          "",
          "[Removed Lines]",
          "598:  if (!ast_strlen_zero(identify->transport)) {",
          "599:   if (ast_string_field_set(identify, transport, identify->transport)) {",
          "600:    return -1;",
          "601:   }",
          "602:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950:     addr, ast_sockaddr_cidr_bits(&match->netmask));",
          "951:   }",
          "960:   if (!ast_strlen_zero(ident->match_header)) {",
          "961:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "962:     indent,",
          "",
          "[Removed Lines]",
          "953:   if (!ast_strlen_zero(ident->transport)) {",
          "954:    ast_str_append(&context->output_buffer, 0, \"%*s: %s\\n\",",
          "955:     indent,",
          "956:     \"Transport\",",
          "957:     ident->transport);",
          "958:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1032:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_header\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_header));",
          "1033:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"match_request_uri\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, match_request_uri));",
          "1034:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"srv_lookups\", \"yes\", OPT_BOOL_T, 1, FLDSET(struct ip_identify_match, srv_lookups));",
          "1036:  ast_sorcery_load_object(ast_sip_get_sorcery(), \"identify\");",
          "1038:  ast_sip_register_endpoint_identifier_with_name(&ip_identifier, \"ip\");",
          "1039:  ast_sip_register_endpoint_identifier_with_name(&header_identifier, \"header\");",
          "1040:  ast_sip_register_endpoint_identifier_with_name(&request_identifier, \"request_uri\");",
          "1042:  ast_sip_register_endpoint_formatter(&endpoint_identify_formatter);",
          "1044:  cli_formatter = ao2_alloc(sizeof(struct ast_sip_cli_formatter_entry), NULL);",
          "",
          "[Removed Lines]",
          "1035:  ast_sorcery_object_field_register(ast_sip_get_sorcery(), \"identify\", \"transport\", \"\", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ip_identify_match, transport));",
          "1041:  ast_sip_register_endpoint_identifier_with_name(&transport_identifier, \"transport\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1075:  ast_sip_unregister_endpoint_identifier(&header_identifier);",
          "1076:  ast_sip_unregister_endpoint_identifier(&request_identifier);",
          "1077:  ast_sip_unregister_endpoint_identifier(&ip_identifier);",
          "1080:  return 0;",
          "1081: }",
          "",
          "[Removed Lines]",
          "1078:  ast_sip_unregister_endpoint_identifier(&transport_identifier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}