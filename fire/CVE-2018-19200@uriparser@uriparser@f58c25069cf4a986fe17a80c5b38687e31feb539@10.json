{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6175f5aee9ded57e1bac2eff8cef1bf29f780792",
      "candidate_info": {
        "commit_hash": "6175f5aee9ded57e1bac2eff8cef1bf29f780792",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/6175f5aee9ded57e1bac2eff8cef1bf29f780792",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriResolve.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function AddBaseUriExMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriResolve.c||src/UriResolve.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405: int URI_FUNC(AddBaseUriExMm)(URI_TYPE(Uri) * absoluteDest,",
          "406:   const URI_TYPE(Uri) * relativeSource,",
          "407:   const URI_TYPE(Uri) * absoluteBase,",
          "408:   UriResolutionOptions options, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #ifndef URI_DOXYGEN",
          "65: # include <uriparser/Uri.h>",
          "66: # include \"UriCommon.h\"",
          "67: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304: int URI_FUNC(AddBaseUriEx)(URI_TYPE(Uri) * absDest,",
          "305:   const URI_TYPE(Uri) * relSource, const URI_TYPE(Uri) * absBase,",
          "306:   UriResolutionOptions options) {",
          "309:  if ((res != URI_SUCCESS) && (absDest != NULL)) {",
          "310:   URI_FUNC(FreeUriMembers)(absDest);",
          "311:  }",
          "",
          "[Removed Lines]",
          "308:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, options, memory);",
          "",
          "[Added Lines]",
          "308:  return URI_FUNC(AddBaseUriExMm)(absDest, relSource, absBase, options, NULL);",
          "309: }",
          "313: int URI_FUNC(AddBaseUriExMm)(URI_TYPE(Uri) * absDest,",
          "314:   const URI_TYPE(Uri) * relSource, const URI_TYPE(Uri) * absBase,",
          "315:   UriResolutionOptions options, UriMemoryManager * memory) {",
          "316:  int res;",
          "320:  res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, options, memory);",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: TEST(FailingMemoryManagerSuite, NormalizeSyntaxExMm) {",
          "88:  UriUriA uri = parse(\"hTTp://example.org/path\");",
          "89:  const unsigned int mask = URI_NORMALIZE_SCHEME;  // anything but URI_NORMALIZED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: TEST(FailingMemoryManagerSuite, AddBaseUriExMm) {",
          "88:  UriUriA absoluteDest;",
          "89:  UriUriA relativeSource = parse(\"foo\");",
          "90:  UriUriA absoluteBase = parse(\"http://example.org/bar\");",
          "91:  const UriResolutionOptions options = URI_RESOLVE_STRICTLY;",
          "93:  ASSERT_EQ(uriAddBaseUriExMmA(&absoluteDest, &relativeSource,",
          "94:    &absoluteBase, options, &failingMemoryManager),",
          "95:    URI_ERROR_MALLOC);",
          "97:  uriFreeUriMembersA(&relativeSource);",
          "98:  uriFreeUriMembersA(&absoluteBase);",
          "99: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5175d4486ff11020f2514a9b5b5c5933edd1eec5",
      "candidate_info": {
        "commit_hash": "5175d4486ff11020f2514a9b5b5c5933edd1eec5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/5175d4486ff11020f2514a9b5b5c5933edd1eec5",
        "files": [
          "src/UriMemory.c",
          "test/VersionSuite.cpp"
        ],
        "message": "Rely on -I<builddir> for config.h to support VPATH builds\n\nPreviously, to see things fail:\n$ make distclean ; mkdir -p build && ( cd build && ../configure && make clean all check )\n\nThanks to Periklis Akritidis!",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c",
          "test/VersionSuite.cpp||test/VersionSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #ifdef HAVE_CONFIG_H",
          "47: #endif",
          "49: #if HAVE_REALLOCARRAY",
          "",
          "[Removed Lines]",
          "46: # include \"../config.h\"",
          "",
          "[Added Lines]",
          "46: # include <config.h>",
          "",
          "---------------"
        ],
        "test/VersionSuite.cpp||test/VersionSuite.cpp": [
          "File: test/VersionSuite.cpp -> test/VersionSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdio.h>",
          "30: #include <uriparser/UriBase.h>",
          "",
          "[Removed Lines]",
          "29: #include \"../config.h\"  // for PACKAGE_VERSION",
          "",
          "[Added Lines]",
          "29: #include <config.h>  // for PACKAGE_VERSION",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8493ee931f0909a04c70e90703680a3a33d86051",
      "candidate_info": {
        "commit_hash": "8493ee931f0909a04c70e90703680a3a33d86051",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/8493ee931f0909a04c70e90703680a3a33d86051",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseOwnHost",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "165: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:  if (first >= afterLast) {",
          "955:   return afterLast;",
          "",
          "[Removed Lines]",
          "950: static URI_INLINE const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "950: static URI_INLINE const URI_CHAR * URI_FUNC(ParseOwnHost)(",
          "951:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "952:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1164:  case _UT('@'):",
          "1169:  default:",
          "1170:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Removed Lines]",
          "1167:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1169:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1269:  default:",
          "1270:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first)) {",
          "",
          "[Removed Lines]",
          "1267:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1271:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1328:  default:",
          "1329:   URI_FUNC(StopSyntax)(state, first);",
          "",
          "[Removed Lines]",
          "1326:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1332:   return URI_FUNC(ParseOwnHost)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98f7c28b8ee062baa395447beb522587283b5669",
      "candidate_info": {
        "commit_hash": "98f7c28b8ee062baa395447beb522587283b5669",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/98f7c28b8ee062baa395447beb522587283b5669",
        "files": [
          "ChangeLog",
          "configure.ac",
          "include/uriparser/UriDefsConfig.h"
        ],
        "message": "Remove pointless define URI_SIZEDOWN\n\nRelated configure options --(enable|disable)-sizedown dropped as well",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uriparser/UriDefsConfig.h||include/uriparser/UriDefsConfig.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: AC_CHECK_FUNCS([reallocarray])  # needs AC_USE_SYSTEM_EXTENSIONS (#define _GNU_SOURCE)",
          "32: ==============================================================================",
          "33: Extra options:",
          "34: AS_HELP_STRING(",
          "49:  [--disable-test], [disable 'make check' and libgtest dependency]",
          "50: )], [",
          "51:  URI_TEST_YESNO=${enableval}",
          "",
          "[Removed Lines]",
          "30: ## Option for URI_SIZEDOWN",
          "31: AC_ARG_ENABLE(sizedown, [",
          "35:  [--enable-sizedown], [save space whereever possible])",
          "36: AS_HELP_STRING(",
          "37:  [], [(resulting in slower code)])], [",
          "38:  URI_SIZE_DOWN_YESNO=${enableval}",
          "39:  if test ${enableval} = yes ; then",
          "40:   CPPFLAGS=\"${CPPFLAGS} -DURI_SIZEDOWN\"",
          "41:  fi",
          "42: ],[",
          "43:  URI_SIZE_DOWN_YESNO=no",
          "44: ])",
          "47: ## Option --disable-test",
          "48: AC_ARG_ENABLE(test, [AS_HELP_STRING(",
          "",
          "[Added Lines]",
          "30: ## Option --disable-test",
          "31: AC_ARG_ENABLE(test, [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: Configuration",
          "158:   Prefix ............... ${prefix}",
          "160:   Code for char * ...... ${CHAR_YESNO}",
          "161:   Code for wchar_t * ... ${WCHAR_T_YESNO}",
          "162:   Test suite ........... ${URI_TEST_YESNO}",
          "",
          "[Removed Lines]",
          "159:   Size down ............ ${URI_SIZE_DOWN_YESNO}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uriparser/UriDefsConfig.h||include/uriparser/UriDefsConfig.h": [
          "File: include/uriparser/UriDefsConfig.h -> include/uriparser/UriDefsConfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: # define URI_INLINE",
          "81: #elif defined(__INTEL_COMPILER)",
          "",
          "[Removed Lines]",
          "79: #if (defined(URI_DOXYGEN) || defined(URI_SIZEDOWN))",
          "",
          "[Added Lines]",
          "79: #if defined(URI_DOXYGEN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b265384691d31dd12dd47c84d8a2b0a4657115f0",
      "candidate_info": {
        "commit_hash": "b265384691d31dd12dd47c84d8a2b0a4657115f0",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b265384691d31dd12dd47c84d8a2b0a4657115f0",
        "files": [
          "configure.ac"
        ],
        "message": "configure.ac: Streamline detection of wprintf",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: AM_CONDITIONAL([WIN32], test \"$WIN32\" = \"yes\")",
          "43: AC_CHECK_FUNCS([reallocarray])  # needs AC_USE_SYSTEM_EXTENSIONS (#define _GNU_SOURCE)",
          "",
          "[Removed Lines]",
          "25: ## Check for wprintf",
          "26: AC_MSG_CHECKING(for wprintf)",
          "27: AC_LINK_IFELSE([AC_LANG_SOURCE([",
          "28:  #include <stdio.h>",
          "29:  #include <wchar.h>",
          "30:  int main() {",
          "31:      wprintf((wchar_t *)0, 0);",
          "32:      return 0;",
          "33:  }",
          "34: ])],[",
          "35:  AC_DEFINE([HAVE_WPRINTF],, [Define if your C runtime provides the wprintf function.])",
          "36:  AC_MSG_RESULT(yes)",
          "37: ],[",
          "38:  AC_MSG_RESULT(no)",
          "39: ])",
          "42: ## Check for reallocarray",
          "",
          "[Added Lines]",
          "25: ## Check for functions",
          "26: AC_CHECK_FUNCS([wprintf])",
          "",
          "---------------"
        ]
      }
    }
  ]
}