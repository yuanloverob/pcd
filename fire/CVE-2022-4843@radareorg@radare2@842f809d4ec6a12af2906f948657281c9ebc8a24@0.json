{
  "cve_id": "CVE-2022-4843",
  "cve_desc": "NULL Pointer Dereference in GitHub repository radareorg/radare2 prior to 5.8.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "842f809d4ec6a12af2906f948657281c9ebc8a24",
  "patch_info": {
    "commit_hash": "842f809d4ec6a12af2906f948657281c9ebc8a24",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/842f809d4ec6a12af2906f948657281c9ebc8a24",
    "files": [
      "libr/io/io_bank.c"
    ],
    "message": "Fix null deref in io.bank ##crash\n\n* BountyID: 075b2760-66a0-4d38-b3b5-e9934956ab7f\n* Reported by @coolkingcole\n* Reproducer `POCbank`",
    "before_after_code_files": [
      "libr/io/io_bank.c||libr/io/io_bank.c"
    ]
  },
  "patch_diff": {
    "libr/io/io_bank.c||libr/io/io_bank.c": [
      "File: libr/io/io_bank.c -> libr/io/io_bank.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "786:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
      "787:   const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
      "788:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
      "790:    ret &= map->reloc_map->read (io, map, addr + buf_off, &buf[buf_off], read_len);",
      "791:   } else {",
      "792:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
      "",
      "[Removed Lines]",
      "789:   if (map->perm & R_PERM_RELOC) {",
      "",
      "[Added Lines]",
      "789:   if (map->perm & R_PERM_RELOC && map->reloc_map) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "875:   return -1;",
      "876:  }",
      "877:  const int read_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);",
      "879:   return map->reloc_map->read (io, map, addr, buf, read_len);",
      "880:  }",
      "881:  const ut64 paddr = addr - r_io_map_from (map) + map->delta;",
      "",
      "[Removed Lines]",
      "878:  if (map->perm & R_PERM_RELOC) {",
      "",
      "[Added Lines]",
      "878:  if (map->perm & R_PERM_RELOC && map->reloc_map) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "718230073320121268a8b4c666b9f347ad385685",
      "candidate_info": {
        "commit_hash": "718230073320121268a8b4c666b9f347ad385685",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/718230073320121268a8b4c666b9f347ad385685",
        "files": [
          "libr/io/io_bank.c",
          "libr/io/p/io_null.c"
        ],
        "message": "Revert \"Large null:// allocation causing negative pointer issues on iobank ##io\"\n\nThis reverts commit 9f90b761557ff24cb9f116ff15f82d4b1c4fefe4.",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/io/p/io_null.c||libr/io/p/io_null.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: static int _find_sm_by_from_vaddr_cb(void *incoming, void *in, void *user) {",
          "136:  RIOSubMap *bd = (RIOSubMap *)incoming, *sm = (RIOSubMap *)in;",
          "140:   return -1;",
          "141:  }",
          "143:   return 1;",
          "144:  }",
          "145:  return 0;",
          "",
          "[Removed Lines]",
          "137:  ut64 a = r_io_submap_from (bd);",
          "138:  ut64 b = r_io_submap_from (sm);",
          "139:  if (a < b) {",
          "142:  if (a > b) {",
          "",
          "[Added Lines]",
          "137:  if (r_io_submap_from (bd) < r_io_submap_from (sm)) {",
          "140:  if (r_io_submap_from (bd) > r_io_submap_from (sm)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:    return false;",
          "806:   }",
          "816:   }",
          "818:   node = r_rbnode_next (node);",
          "",
          "[Removed Lines]",
          "807:   if (map->perm & R_PERM_R) {",
          "808:    const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "809:    const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "810:            r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "811:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "812:    ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "813:    if (io->overlay) {",
          "814:     r_io_map_read_from_overlay (map, addr + buf_off, buf + buf_off, read_len);",
          "815:    }",
          "",
          "[Added Lines]",
          "805:   if (!(map->perm & R_PERM_R)) {",
          "806:    node = r_rbnode_next (node);",
          "807:    sm = node ? (RIOSubMap *)node->data : NULL;",
          "808:    continue;",
          "809:   }",
          "810:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "811:   const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "812:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "813:   const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "814:   ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "815:   if (io->overlay) {",
          "816:    r_io_map_read_from_overlay (map, addr + buf_off, buf + buf_off, read_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1059:  r_return_if_fail (io);",
          "1061:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "1063:  if (!bank || !map) {",
          "1064:   return;",
          "1065:  }",
          "",
          "[Removed Lines]",
          "1062:  RIOMap *map = r_io_map_get (io, mapid); // is this needed?",
          "",
          "[Added Lines]",
          "1063:  RIOMap *map = r_io_map_get (io, mapid); //is this needed?",
          "",
          "---------------"
        ],
        "libr/io/p/io_null.c||libr/io/p/io_null.c": [
          "File: libr/io/p/io_null.c -> libr/io/p/io_null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:    RIONull *null = R_NEW0 (RIONull);",
          "93:    if (null) {",
          "94:     null->size = r_num_math (NULL, pathname + 7) + 1;",
          "99:     null->offset = 0LL;",
          "100:     return r_io_desc_new (io, &r_io_plugin_null, pathname, rw & R_PERM_RWX, mode, null);",
          "101:    }",
          "",
          "[Removed Lines]",
          "95:     if (null->size > ST32_MAX) {",
          "96:      R_LOG_ERROR (\"Large null allocation is not valid\");",
          "97:      return NULL;",
          "98:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9e434acba929d975e89dc6972b62c7afbe77079",
      "candidate_info": {
        "commit_hash": "c9e434acba929d975e89dc6972b62c7afbe77079",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/c9e434acba929d975e89dc6972b62c7afbe77079",
        "files": [
          "libr/io/io_bank.c",
          "libr/io/io_desc.c",
          "libr/io/io_map.c",
          "libr/io/p/io_http.c",
          "libr/io/p/io_isotp.c",
          "libr/io/p/io_malloc.c",
          "libr/io/p/io_null.c",
          "libr/io/p/io_serial.c",
          "libr/io/p/io_socket.c",
          "libr/io/p/io_tcpslurp.c",
          "libr/io/p/io_xalz.c",
          "libr/io/p/io_xattr.c"
        ],
        "message": "Fix hypothetical arbitrary code execution vuln in r_io ##io",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/io/io_desc.c||libr/io/io_desc.c",
          "libr/io/io_map.c||libr/io/io_map.c",
          "libr/io/p/io_http.c||libr/io/p/io_http.c",
          "libr/io/p/io_isotp.c||libr/io/p/io_isotp.c",
          "libr/io/p/io_malloc.c||libr/io/p/io_malloc.c",
          "libr/io/p/io_null.c||libr/io/p/io_null.c",
          "libr/io/p/io_serial.c||libr/io/p/io_serial.c",
          "libr/io/p/io_socket.c||libr/io/p/io_socket.c",
          "libr/io/p/io_tcpslurp.c||libr/io/p/io_tcpslurp.c",
          "libr/io/p/io_xalz.c||libr/io/p/io_xalz.c",
          "libr/io/p/io_xattr.c||libr/io/p/io_xattr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:    const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "786:            r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "787:    if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "789:     ret &= map->reloc_map->read (io, map, addr + buf_off, buf + buf_off, read_len);",
          "790:    } else {",
          "791:     const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "",
          "[Removed Lines]",
          "788:     eprintf (\" (%s) %p\\n\", map->name, map->reloc_map);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/io/io_desc.c||libr/io/io_desc.c": [
          "File: libr/io/io_desc.c -> libr/io/io_desc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   desc->io = io;",
          "18:   desc->plugin = plugin;",
          "19:   desc->data = data;",
          "22:   desc->uri = strdup (uri);",
          "23:  }",
          "",
          "[Removed Lines]",
          "20:   desc->perm = perm;",
          "",
          "[Added Lines]",
          "20:   desc->perm = perm & (R_PERM_RWX | R_PERM_CREAT);",
          "",
          "---------------"
        ],
        "libr/io/io_map.c||libr/io/io_map.c": [
          "File: libr/io/io_map.c -> libr/io/io_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  RIODesc* desc = r_io_desc_get (io, fd);",
          "150:  if (desc) {",
          "153:   RIOMap *map[2] = {NULL, NULL};",
          "154:   if (R_UNLIKELY ((UT64_MAX - size + 1) < addr)) {",
          "155:    const ut64 new_size = UT64_MAX - addr + 1;",
          "",
          "[Removed Lines]",
          "152:   perm &= desc->perm | R_PERM_X;",
          "",
          "[Added Lines]",
          "152:   perm &= (desc->perm | R_PERM_X) & ~R_PERM_RELOC;",
          "",
          "---------------"
        ],
        "libr/io/p/io_http.c||libr/io/p/io_http.c": [
          "File: libr/io/p/io_http.c -> libr/io/p/io_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   mal->buf = (ut8*)r_socket_http_get (pathname, &code, &rlen);",
          "22:   if (mal->buf && rlen > 0) {",
          "23:    mal->size = rlen;",
          "25:   }",
          "26:   R_LOG_ERROR (\"No HTTP response\");",
          "27:   free (mal);",
          "",
          "[Removed Lines]",
          "24:    return r_io_desc_new (io, &r_io_plugin_malloc, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "24:    return r_io_desc_new (io, &r_io_plugin_malloc, pathname,",
          "25:     R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_isotp.c||libr/io/p/io_isotp.c": [
          "File: libr/io/p/io_isotp.c -> libr/io/p/io_isotp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  if (io->va) {",
          "128:   R_LOG_WARN (\"This is a raw stream and growing io plugin, You may disable io.va to not depend on maps\");",
          "129:  }",
          "131: }",
          "133: RIOPlugin r_io_plugin_isotp = {",
          "",
          "[Removed Lines]",
          "130:  return r_io_desc_new (io, &r_io_plugin_isotp, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "130:  return r_io_desc_new (io, &r_io_plugin_isotp, pathname, R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_malloc.c||libr/io/p/io_malloc.c": [
          "File: libr/io/p/io_malloc.c -> libr/io/p/io_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   }",
          "67:   mal->offset = 0;",
          "68:   if (mal->buf) {",
          "70:   }",
          "71:   R_LOG_ERROR (\"Cannot allocate (%s) %d byte(s)\", pathname + 9, mal->size);",
          "72:   free (mal);",
          "",
          "[Removed Lines]",
          "69:    return r_io_desc_new (io, &r_io_plugin_malloc, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "69:    return r_io_desc_new (io, &r_io_plugin_malloc, pathname,",
          "70:     R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_null.c||libr/io/p/io_null.c": [
          "File: libr/io/p/io_null.c -> libr/io/p/io_null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:      return NULL;",
          "99:     }",
          "100:     null->offset = 0LL;",
          "102:    }",
          "103:   }",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:     return r_io_desc_new (io, &r_io_plugin_null, pathname, rw, mode, null);",
          "",
          "[Added Lines]",
          "101:     return r_io_desc_new (io, &r_io_plugin_null, pathname, rw & R_PERM_RWX, mode, null);",
          "",
          "---------------"
        ],
        "libr/io/p/io_serial.c||libr/io/p/io_serial.c": [
          "File: libr/io/p/io_serial.c -> libr/io/p/io_serial.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  if (io->va) {",
          "143:   R_LOG_WARN (\"This is a raw stream and growing io plugin, You may disable io.va to not depend on maps\");",
          "144:  }",
          "146: }",
          "148: static char *__system(RIO *io, RIODesc *desc, const char *cmd) {",
          "",
          "[Removed Lines]",
          "145:  return r_io_desc_new (io, &r_io_plugin_serial, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "145:  return r_io_desc_new (io, &r_io_plugin_serial, pathname, R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_socket.c||libr/io/p/io_socket.c": [
          "File: libr/io/p/io_socket.c -> libr/io/p/io_socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:  if (io->va) {",
          "151:   R_LOG_WARN (\"This is a raw stream and growing io plugin, You may disable io.va to not depend on maps\");",
          "152:  }",
          "154: }",
          "156: static char *__system(RIO *io, RIODesc *desc, const char *cmd) {",
          "",
          "[Removed Lines]",
          "153:  return r_io_desc_new (io, &r_io_plugin_socket, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "153:  return r_io_desc_new (io, &r_io_plugin_socket, pathname, R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_tcpslurp.c||libr/io/p/io_tcpslurp.c": [
          "File: libr/io/p/io_tcpslurp.c -> libr/io/p/io_tcpslurp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   mal->buf = tcpme (pathname, &code, &rlen);",
          "74:   if (mal->buf && rlen > 0) {",
          "75:    mal->size = rlen;",
          "77:   }",
          "78:   free (mal);",
          "79:  }",
          "",
          "[Removed Lines]",
          "76:    return r_io_desc_new (io, &r_io_plugin_tcpslurp, pathname, rw, mode, mal);",
          "",
          "[Added Lines]",
          "76:    return r_io_desc_new (io, &r_io_plugin_tcpslurp, pathname, rw & R_PERM_RWX, mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_xalz.c||libr/io/p/io_xalz.c": [
          "File: libr/io/p/io_xalz.c -> libr/io/p/io_xalz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     }",
          "31:     mal->buf = obuf;",
          "32:     mal->size = osz;",
          "34:    }",
          "35:    free (data);",
          "36:   }",
          "",
          "[Removed Lines]",
          "33:     return r_io_desc_new (io, &r_io_plugin_xalz, diskpath, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "33:     return r_io_desc_new (io, &r_io_plugin_xalz, diskpath,",
          "34:      R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ],
        "libr/io/p/io_xattr.c||libr/io/p/io_xattr.c": [
          "File: libr/io/p/io_xattr.c -> libr/io/p/io_xattr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  mal->buf = (ut8*)attrvalue;",
          "91:  mal->offset = 0;",
          "92:  if (mal->buf) {",
          "94:  }",
          "95:  R_LOG_ERROR (\"Cannot allocate %d bytes for %s\", mal->size, pathname);",
          "96:  free (mal);",
          "",
          "[Removed Lines]",
          "93:   return r_io_desc_new (io, &r_io_plugin_xattr, pathname, R_PERM_RW | rw, mode, mal);",
          "",
          "[Added Lines]",
          "93:   return r_io_desc_new (io, &r_io_plugin_xattr, pathname,",
          "94:    R_PERM_RW | (rw & R_PERM_X), mode, mal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f90b761557ff24cb9f116ff15f82d4b1c4fefe4",
      "candidate_info": {
        "commit_hash": "9f90b761557ff24cb9f116ff15f82d4b1c4fefe4",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/9f90b761557ff24cb9f116ff15f82d4b1c4fefe4",
        "files": [
          "libr/io/io_bank.c",
          "libr/io/io_map.c",
          "libr/io/p/io_null.c"
        ],
        "message": "Large null:// allocation causing negative pointer issues on iobank ##io\n\n* Crash reproducer 9e248945-73a7-4cd7-906b-1544a0a3cc36",
        "before_after_code_files": [
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/io/io_map.c||libr/io/io_map.c",
          "libr/io/p/io_null.c||libr/io/p/io_null.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: static int _find_sm_by_from_vaddr_cb(void *incoming, void *in, void *user) {",
          "112:  RIOSubMap *bd = (RIOSubMap *)incoming, *sm = (RIOSubMap *)in;",
          "114:   return -1;",
          "115:  }",
          "117:   return 1;",
          "118:  }",
          "119:  return 0;",
          "",
          "[Removed Lines]",
          "113:  if (r_io_submap_from (bd) < r_io_submap_from (sm)) {",
          "116:  if (r_io_submap_from (bd) > r_io_submap_from (sm)) {",
          "",
          "[Added Lines]",
          "113:  ut64 a = r_io_submap_from (bd);",
          "114:  ut64 b = r_io_submap_from (sm);",
          "115:  if (a < b) {",
          "118:  if (a > b) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:    return false;",
          "780:   }",
          "794:   }",
          "796:   node = r_rbnode_next (node);",
          "",
          "[Removed Lines]",
          "781:   if (!(map->perm & R_PERM_R)) {",
          "782:    node = r_rbnode_next (node);",
          "783:    sm = node ? (RIOSubMap *)node->data : NULL;",
          "784:    continue;",
          "785:   }",
          "786:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "787:   const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "788:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "789:   if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "790:    ret &= map->reloc_map->read (io, map, addr + buf_off, &buf[buf_off], read_len);",
          "791:   } else {",
          "792:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "793:    ret &= (r_io_fd_read_at (io, map->fd, paddr, &buf[buf_off], read_len) == read_len);",
          "",
          "[Added Lines]",
          "783:   if (map->perm & R_PERM_R) {",
          "784:    const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "785:    const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "786:            r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "787:    if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "788:     eprintf (\" (%s) %p\\n\", map->name, map->reloc_map);",
          "789:     ret &= map->reloc_map->read (io, map, addr + buf_off, buf + buf_off, read_len);",
          "790:    } else {",
          "791:     const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "792:     ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "793:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:  r_return_if_fail (io);",
          "943:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "945:  if (!bank || !map) {",
          "946:   return;",
          "947:  }",
          "",
          "[Removed Lines]",
          "944:  RIOMap *map = r_io_map_get (io, mapid); //is this needed?",
          "",
          "[Added Lines]",
          "944:  RIOMap *map = r_io_map_get (io, mapid); // is this needed?",
          "",
          "---------------"
        ],
        "libr/io/io_map.c||libr/io/io_map.c": [
          "File: libr/io/io_map.c -> libr/io/io_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  map->ts = io->mts++;",
          "26:  map->itv = (RInterval){ addr, size };",
          "27:  map->perm = perm;",
          "28:  map->delta = delta;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  map->reloc_map = NULL;",
          "",
          "---------------"
        ],
        "libr/io/p/io_null.c||libr/io/p/io_null.c": [
          "File: libr/io/p/io_null.c -> libr/io/p/io_null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:    RIONull *null = R_NEW0 (RIONull);",
          "94:    if (null) {",
          "95:     null->size = r_num_math (NULL, pathname + 7) + 1;",
          "96:     null->offset = 0LL;",
          "97:     return r_io_desc_new (io, &r_io_plugin_null, pathname, rw, mode, null);",
          "98:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     if (null->size > ST32_MAX) {",
          "97:      R_LOG_ERROR (\"Large null allocation is not valid\");",
          "98:      return NULL;",
          "99:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "151330b0a465a690423c6bcbe68f2bca8ff90ced",
      "candidate_info": {
        "commit_hash": "151330b0a465a690423c6bcbe68f2bca8ff90ced",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/151330b0a465a690423c6bcbe68f2bca8ff90ced",
        "files": [
          "libr/include/r_io.h",
          "libr/include/r_types.h",
          "libr/io/io.c",
          "libr/io/io_bank.c",
          "libr/io/io_map.c"
        ],
        "message": "Deprecate RIORelocMap; Introduce RIOMap overlay ##io",
        "before_after_code_files": [
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/include/r_types.h||libr/include/r_types.h",
          "libr/io/io.c||libr/io/io.c",
          "libr/io/io_bank.c||libr/io/io_bank.c",
          "libr/io/io_map.c||libr/io/io_map.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:  bool (*check)(RIO *io, const char *, bool many);",
          "223: } RIOPlugin;",
          "235: typedef struct r_io_map_t {",
          "236:  int fd;",
          "237:  int perm;",
          "238:  ut32 id;",
          "239:  ut64 ts;",
          "240:  RInterval itv;",
          "245:  char *name;",
          "246: } RIOMap;",
          "",
          "[Removed Lines]",
          "225: struct r_io_map_t;",
          "227: typedef struct r_io_reloc_map_t {",
          "228:  void *data;",
          "229:  int (*read)(RIO *io, struct r_io_map_t *map, ut64 addr, ut8 *buf, int len);",
          "230:  int (*write)(RIO *io, struct r_io_map_t *map, ut64 addr, const ut8 *buf, int len);",
          "231:  bool (*remap)(RIO *io, struct r_io_map_t *map, ut64 addr);",
          "232:  void (*free)(void *data);",
          "233: } RIORelocMap;",
          "241:  union {",
          "242:   ut64 delta; // paddr = vaddr - itv.addr + delta",
          "243:   RIORelocMap *reloc_map;",
          "244:  };",
          "",
          "[Added Lines]",
          "231:  ut64 delta; // paddr = vaddr - itv.addr + delta",
          "232:  RRBTree *overlay;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357: R_API bool r_io_map_exists_for_id(RIO *io, ut32 id);",
          "358: R_API RIOMap *r_io_map_get(RIO *io, ut32 id);",
          "359: R_API RIOMap *r_io_map_add(RIO *io, int fd, int flags, ut64 delta, ut64 addr, ut64 size);",
          "361: R_API RIOMap *r_io_map_add_bottom(RIO *io, int fd, int flags, ut64 delta, ut64 addr, ut64 size);",
          "362: R_API RIOMap *r_io_map_get_at(RIO *io, ut64 vaddr); // returns the map at vaddr with the highest priority",
          "363: R_API RIOMap *r_io_map_get_by_ref(RIO *io, RIOMapRef *ref);",
          "",
          "[Removed Lines]",
          "360: R_API RIOMap *r_io_reloc_map_add(RIO *io, int fd, int perm, RIORelocMap *rm, ut64 addr, ut64 size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376: R_API void r_io_map_del_name(RIOMap *map);",
          "377: R_API RList* r_io_map_get_by_fd(RIO *io, int fd);",
          "378: R_API bool r_io_map_resize(RIO *io, ut32 id, ut64 newsize);",
          "381: R_API bool r_io_map_locate(RIO *io, ut64 *addr, const ut64 size, ut64 load_align);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: R_API void r_io_map_read_from_overlay(RIOMap *map, ut64 addr, ut8 *buf, int len);",
          "367: R_API bool r_io_map_write_to_overlay(RIOMap *map, ut64 addr, const ut8 *buf, int len);",
          "368: R_IPI bool _io_map_get_overlay_intersects(RIOMap *map, RQueue *q, ut64 addr, int len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411: R_API RIOMap *r_io_bank_get_map_at(RIO *io, const ut32 bankid, const ut64 addr);",
          "412: R_API bool r_io_bank_read_at(RIO *io, const ut32 bankid, ut64 addr, ut8 *buf, int len);",
          "413: R_API bool r_io_bank_write_at(RIO *io, const ut32 bankid, ut64 addr, const ut8 *buf, int len);",
          "414: R_API int r_io_bank_read_from_submap_at(RIO *io, const ut32 bankid, ut64 addr, ut8 *buf, int len);",
          "415: R_API int r_io_bank_write_to_submap_at(RIO *io, const ut32 bankid, ut64 addr, const ut8 *buf, int len);",
          "416: R_API void r_io_bank_drain(RIO *io, const ut32 bankid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404: R_API bool r_io_bank_write_to_overlay_at(RIO *io, const ut32 bankid, ut64 addr, const ut8 *buf, int len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "419: R_API RIO *r_io_new(void);",
          "420: R_API void r_io_init(RIO *io);",
          "422: R_API RIODesc *r_io_open(RIO *io, const char *uri, int flags, int mode);",
          "423: R_API RIODesc *r_io_open_at(RIO *io, const char *uri, int flags, int mode, ut64 at);",
          "424: R_API RList *r_io_open_many(RIO *io, const char *uri, int flags, int mode);",
          "",
          "[Removed Lines]",
          "421: R_API RIODesc *r_io_open_nomap(RIO *io, const char *uri, int flags, int mode);  //should return int",
          "",
          "[Added Lines]",
          "412: R_API RIODesc *r_io_open_nomap(RIO *io, const char *uri, int flags, int mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "430: R_API int r_io_pwrite_at(RIO *io, ut64 paddr, const ut8 *buf, int len);",
          "431: R_API bool r_io_vread_at(RIO *io, ut64 vaddr, ut8 *buf, int len);",
          "432: R_API bool r_io_vwrite_at(RIO *io, ut64 vaddr, const ut8 *buf, int len);",
          "433: R_API bool r_io_read_at(RIO *io, ut64 addr, ut8 *buf, int len);",
          "434: R_API int r_io_nread_at(RIO *io, ut64 addr, ut8 *buf, int len);",
          "435: R_API bool r_io_write_at(RIO *io, ut64 addr, const ut8 *buf, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424: R_API bool r_io_vwrite_to_overlay_at(RIO *io, ut64 caddr, const ut8 *buf, int len);",
          "",
          "---------------"
        ],
        "libr/include/r_types.h||libr/include/r_types.h": [
          "File: libr/include/r_types.h -> libr/include/r_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: #define R_PERM_PRIV 16",
          "88: #define R_PERM_ACCESS 32",
          "89: #define R_PERM_CREAT 64",
          "",
          "[Removed Lines]",
          "90: #define R_PERM_RELOC 128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/io/io.c||libr/io/io.c": [
          "File: libr/io/io.c -> libr/io/io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:  return r_io_bank_read_at (io, io->bank, vaddr, buf, len);",
          "214: }",
          "217:  r_return_val_if_fail (io && buf && len > 0, false);",
          "218:  if ((UT64_MAX - (len - 1)) < vaddr) {",
          "219:   int _len = UT64_MAX - vaddr + 1;",
          "",
          "[Removed Lines]",
          "216: R_API bool r_io_vwrite_at(RIO *io, ut64 vaddr, const ut8* buf, int len) {",
          "",
          "[Added Lines]",
          "216: R_API bool r_io_vwrite_at(RIO *io, ut64 vaddr, const ut8 *buf, int len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:  return r_io_bank_write_at (io, io->bank, vaddr, buf, len);",
          "227: }",
          "229: static bool internal_r_io_read_at(RIO *io, ut64 addr, ut8 *buf, int len) {",
          "230:  if (len < 1) {",
          "231:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: R_API bool r_io_vwrite_to_overlay_at(RIO *io, ut64 caddr, const ut8 *buf, int len) {",
          "230:  r_return_val_if_fail (io && buf && len > 0, false);",
          "231:  if ((UT64_MAX - (len - 1)) < vaddr) {",
          "232:   int _len = UT64_MAX - vaddr + 1;",
          "233:   len -= _len;",
          "234:   if (!r_io_vwrite_to_overlay_at (io, 0ULL, &buf[_len], len)) {",
          "235:    return false;",
          "236:   }",
          "237:   len = _len;",
          "238:  }",
          "239:  return r_io_bank_write_to_overlay_at (io, io->bank, vaddr, buf, len);",
          "240: }",
          "",
          "---------------"
        ],
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:    const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "785:    const int read_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "786:            r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "793:   }",
          "795:   node = r_rbnode_next (node);",
          "",
          "[Removed Lines]",
          "787:    if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "788:     ret &= map->reloc_map->read (io, map, addr + buf_off, buf + buf_off, read_len);",
          "789:    } else {",
          "790:     const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "791:     ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "792:    }",
          "",
          "[Added Lines]",
          "787:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "788:    ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "789:    r_io_map_read_from_overlay (map, addr + buf_off, buf + buf_off, read_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "828:    ret = false;",
          "829:    continue;",
          "830:   }",
          "831:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "832:   const int write_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "833:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "836:   } else {",
          "837:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "838:    ret &= (r_io_fd_write_at (io, map->fd, paddr, &buf[buf_off], write_len) == write_len);",
          "",
          "[Removed Lines]",
          "834:   if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "835:    ret &= map->reloc_map->write (io, map, addr + buf_off, &buf[buf_off], write_len);",
          "",
          "[Added Lines]",
          "832:   if (_io_map_get_overlay_intersects (map, bank->todo, addr + buf_off, write_len) &&",
          "833:    !r_queue_is_empty (bank->todo)) {",
          "834:    ut64 _buf_off = buf_off;",
          "835:    int _write_len = write_len;",
          "836:    do {",
          "837:     RInterval *itv = (RInterval *)r_queue_dequeue (bank->todo);",
          "838:     RInterval vitv = *itv;",
          "839:     vitv.addr += r_io_map_from (map);",
          "840:     if ((addr + _buf_off) < r_itv_begin (vitv)) {",
          "841:      const int w = r_itv_begin (vitv) - (addr + _buf_off);",
          "842:      const ut64 paddr = addr + _buf_off - r_io_map_from (map) + map->delta;",
          "843:      ret &= (r_io_fd_write_at (io, map->fd, paddr, &buf[_buf_off], w) == w);",
          "844:      _buf_off += w;",
          "845:      _write_len -= w;",
          "846:     }",
          "848:     const int w = R_MIN (_write_len, r_itv_end (vitv) - (addr + _buf_off));",
          "849:     ret &= r_io_map_write_to_overlay (map, addr + _buf_off, &buf[_buf_off], w);",
          "850:     _buf_off += w;",
          "851:     _write_len -= w;",
          "852:    } while (!r_queue_is_empty (bank->todo));",
          "853:    if (_write_len) {",
          "854:     const ut64 paddr = addr + _buf_off - r_io_map_from (map) + map->delta;",
          "855:     ret &= (r_io_fd_write_at (io, map->fd, paddr, &buf[_buf_off], _write_len) == _write_len);",
          "856:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "844:  return ret;",
          "845: }",
          "849: R_API int r_io_bank_read_from_submap_at(RIO *io, const ut32 bankid, ut64 addr, ut8 *buf, int len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868: R_API bool r_io_bank_write_to_overlay_at(RIO *io, const ut32 bankid, ut64 addr, const ut8 *buf, int len) {",
          "869:  r_return_val_if_fail (io, false);",
          "870:  RIOBank *bank = r_io_bank_get (io, bankid);",
          "871:  if (!bank) {",
          "872:   return false;",
          "873:  }",
          "874:  RIOSubMap fake_sm = {{0}};",
          "875:  fake_sm.itv.addr = addr;",
          "876:  fake_sm.itv.size = len;",
          "877:  RRBNode *node;",
          "878:  if (bank->last_used && r_io_submap_contain (((RIOSubMap *)bank->last_used->data), addr)) {",
          "879:   node = bank->last_used;",
          "880:  } else {",
          "881:   node = _find_entry_submap_node (bank, &fake_sm);",
          "882:  }",
          "883:  RIOSubMap *sm = node ? (RIOSubMap *)node->data : NULL;",
          "884:  bool ret = true;",
          "885:  while (sm && r_io_submap_overlap ((&fake_sm), sm)) {",
          "886:   bank->last_used = node;",
          "887:   RIOMap *map = r_io_map_get_by_ref (io, &sm->mapref);",
          "888:   if (!map) {",
          "890:    return false;",
          "891:   }",
          "892:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "893:   const int write_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "894:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "895:   ret &= r_io_map_write_to_overlay (map, addr + buf_off, &buf[buf_off], write_len);",
          "896:   node = r_rbnode_next (node);",
          "897:   sm = node ? (RIOSubMap *)node->data : NULL;",
          "898:  }",
          "899:  return ret;",
          "900: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:   return -1;",
          "875:  }",
          "876:  const int read_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);",
          "880:  const ut64 paddr = addr - r_io_map_from (map) + map->delta;",
          "882: }",
          "",
          "[Removed Lines]",
          "877:  if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "878:   return map->reloc_map->read (io, map, addr, buf, read_len);",
          "879:  }",
          "881:  return r_io_fd_read_at (io, map->fd, paddr, buf, read_len);",
          "",
          "[Added Lines]",
          "933:  const int ret = r_io_fd_read_at (io, map->fd, paddr, buf, read_len);",
          "934:  r_io_map_read_from_overlay (map, addr, buf, read_len);",
          "935:  return ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "911:   return -1;",
          "912:  }",
          "913:  const int write_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);",
          "917:  const ut64 paddr = addr - r_io_map_from (map) + map->delta;",
          "918:  return r_io_fd_write_at (io, map->fd, paddr, buf, write_len);",
          "919: }",
          "",
          "[Removed Lines]",
          "914:  if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "915:   return map->reloc_map->write (io, map, addr, buf, write_len);",
          "916:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/io/io_map.c||libr/io/io_map.c": [
          "File: libr/io/io_map.c -> libr/io/io_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  map->ts = io->mts++;",
          "27:  map->itv = (RInterval){ addr, size };",
          "28:  map->perm = perm;",
          "29:  map->delta = delta;",
          "",
          "[Removed Lines]",
          "26:  map->reloc_map = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  const ut64 ofrom = r_io_map_from (map);",
          "40:  const ut64 oto = r_io_map_to (map);",
          "41:  ut64 size = r_io_map_size (map);",
          "43:   if (R_UNLIKELY (UT64_MAX - size + 1 < addr)) {",
          "49:    return false;",
          "50:   }",
          "51:  }",
          "",
          "[Removed Lines]",
          "42:  if (map->perm & R_PERM_RELOC && map->reloc_map) {",
          "44:    R_LOG_ERROR (\"Mapsplit for reloc maps is not possible\");",
          "45:    return false;",
          "46:   }",
          "47:   if (map->reloc_map->remap && !map->reloc_map->remap (io, map, addr)) {",
          "48:    R_LOG_ERROR (\"Remapping reloc map %u failed\", map->id);",
          "",
          "[Added Lines]",
          "41:  if (map->overlay) {",
          "43:    R_LOG_ERROR (\"Mapsplit for overlay maps is not possible\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: static bool _map_free_cb(void *user, void *data, ut32 id) {",
          "101:  RIOMap *map = (RIOMap *)data;",
          "102:  if (map) {",
          "107:   free (map->name);",
          "108:   free (map);",
          "109:  }",
          "",
          "[Removed Lines]",
          "103:   if ((map->perm & R_PERM_RELOC) && map->reloc_map && map->reloc_map->free) {",
          "104:    map->reloc_map->free (map->reloc_map->data);",
          "106:   }",
          "",
          "[Added Lines]",
          "98:   r_crbtree_free (map->overlay);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:  RIODesc* desc = r_io_desc_get (io, fd);",
          "150:  if (desc) {",
          "153:   RIOMap *map[2] = {NULL, NULL};",
          "154:   if (R_UNLIKELY ((UT64_MAX - size + 1) < addr)) {",
          "155:    const ut64 new_size = UT64_MAX - addr + 1;",
          "",
          "[Removed Lines]",
          "152:   perm &= (desc->perm | R_PERM_X) & ~R_PERM_RELOC;",
          "",
          "[Added Lines]",
          "144:   perm &= (desc->perm | R_PERM_X);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:  return NULL;",
          "188: }",
          "221: R_API RIOMap *r_io_map_add_bottom(RIO *io, int fd, int perm, ut64 delta, ut64 addr, ut64 size) {",
          "222:  r_return_val_if_fail (io, NULL);",
          "223:  if (!size) {",
          "",
          "[Removed Lines]",
          "190: R_API RIOMap *r_io_reloc_map_add(RIO *io, int fd, int perm, RIORelocMap *rm, ut64 addr, ut64 size) {",
          "191:  r_return_val_if_fail (io && rm, NULL);",
          "192:  if (!size) {",
          "193:   return NULL;",
          "194:  }",
          "196:  if ((UT64_MAX - size + 1) < addr) {",
          "197:   return NULL;",
          "198:  }",
          "200:  RIODesc* desc = r_io_desc_get (io, fd);",
          "201:  if (!desc) {",
          "202:   return NULL;",
          "203:  }",
          "204:  perm &= desc->perm | R_PERM_X;",
          "205:  perm |= R_PERM_RELOC;",
          "206:  RIOMap *map = io_map_new (io, fd, perm, 0, addr, size);",
          "207:  if (map) {",
          "208:   if (!r_io_bank_map_add_top (io, io->bank, map->id)) {",
          "209:    r_id_storage_delete (io->maps, map->id);",
          "210:    free (map);",
          "211:    if (rm->free) {",
          "212:     rm->free (rm->data);",
          "213:    }",
          "214:    return NULL;",
          "215:   }",
          "216:   map->reloc_map = rm;",
          "217:  }",
          "218:  return map;",
          "219: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "442:  if (!newsize || !(map = r_io_map_get (io, id))) {",
          "443:   return false;",
          "444:  }",
          "449:  ut64 addr = r_io_map_begin (map);",
          "450:  const ut64 oto = r_io_map_to (map);",
          "451:  if (UT64_MAX - newsize + 1 < addr) {",
          "",
          "[Removed Lines]",
          "445:  if (map->perm & R_PERM_RELOC) {",
          "446:   R_LOG_WARN (\"Resizing reloc maps is not possible\");",
          "447:   return false;",
          "448:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494:  return (map && map->ts == ref->ts) ? map : NULL;",
          "495: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454: typedef struct map_overlay_chunk_t {",
          "457:  RInterval itv;",
          "458:  ut8 *buf;",
          "459: } MapOverlayChunk;",
          "461: static int _overlay_chunk_find (void *incoming, void *in, void *user) {",
          "462:  RInterval *itv = (RInterval *)incoming;",
          "463:  MapOverlayChunk *chunk = (MapOverlayChunk *)in;",
          "464:  if (r_itv_overlap (itv[0], chunk->itv)) {",
          "465:   return 0;",
          "466:  }",
          "467:  if (r_itv_begin (itv[0]) < r_itv_begin (chunk->itv)) {",
          "468:   return -1;",
          "469:  }",
          "470:  return 1;",
          "471: }",
          "473: R_API void r_io_map_read_from_overlay(RIOMap *map, ut64 addr, ut8 *buf, int len) {",
          "474:  r_return_if_fail (map && buf);",
          "475:  if (!map->overlay || !len || addr > r_io_map_to (map)) {",
          "476:   return;",
          "477:  }",
          "478:  RInterval x = {addr, len};",
          "479:  RInterval search_itv = r_itv_intersect (map->itv, x);",
          "480:  search_itv.addr -= map->itv.addr; // to keep things remappable",
          "481:  RRBNode *node = r_crbtree_find_node (map->overlay, &search_itv, _overlay_chunk_find, NULL);",
          "482:  if (!node) {",
          "483:   return;",
          "484:  }",
          "485:  MapOverlayChunk *chunk = NULL;",
          "486:  RRBNode *prev = r_rbnode_prev (node);",
          "487:  while (prev) {",
          "488:   chunk = (MapOverlayChunk *)prev->data;",
          "489:   if (!r_itv_overlap (chunk->itv, search_itv)) {",
          "490:    break;",
          "491:   }",
          "492:   node = prev;",
          "493:   prev = r_rbnode_prev (prev);",
          "494:  }",
          "495:  chunk = (MapOverlayChunk *)node->data;",
          "496:  do {",
          "497:   addr = R_MAX (r_itv_begin (search_itv), r_itv_begin (chunk->itv));",
          "498:   ut8 *dst = &buf[addr - r_itv_begin (search_itv)];",
          "499:   ut8 *src = &chunk->buf[addr - r_itv_begin (chunk->itv)];",
          "500:   memcpy (dst, src, (size_t)(R_MIN (r_itv_end (search_itv), r_itv_end (chunk->itv)) - addr));",
          "501:   node = r_rbnode_next (node);",
          "502:   chunk = node? (MapOverlayChunk *)node->data: NULL;",
          "503:  } while (chunk && r_itv_overlap (chunk->itv, search_itv));",
          "504: }",
          "506: static void _overlay_chunk_free(void *data) {",
          "507:  if (!data) {",
          "508:   return;",
          "509:  }",
          "510:  MapOverlayChunk *chunk = (MapOverlayChunk *)data;",
          "511:  free (chunk->buf);",
          "512:  free (chunk);",
          "513: }",
          "515: static int _overlay_chunk_insert (void *incoming, void *in, void *user) {",
          "516:  MapOverlayChunk *incoming_chunk = (MapOverlayChunk *)incoming;",
          "517:  MapOverlayChunk *in_chunk = (MapOverlayChunk *)in;",
          "518:  if (r_itv_begin (incoming_chunk->itv) < r_itv_begin (in_chunk->itv)) {",
          "519:   return -1;",
          "520:  }",
          "521:  if (r_itv_begin (incoming_chunk->itv) > r_itv_begin (in_chunk->itv)) {",
          "522:   return 1;",
          "523:  }",
          "524:  return 0;",
          "525: }",
          "527: R_API bool r_io_map_write_to_overlay(RIOMap *map, ut64 addr, const ut8 *buf, int len) {",
          "528:  r_return_val_if_fail (map && buf, false);",
          "529:  RInterval x = {addr, len};",
          "530:  RInterval search_itv = r_itv_intersect (map->itv, x);",
          "531:  if (!r_itv_size (search_itv)) {",
          "532:   return true; // is this correct?",
          "533:  }",
          "534:  if (!map->overlay) {",
          "535:   if (!(map->overlay = r_crbtree_new (_overlay_chunk_free))) {",
          "536:    return false;",
          "537:   }",
          "538:  }",
          "539:  search_itv.addr -= map->itv.addr;",
          "540:  RRBNode *node = r_crbtree_find_node (map->overlay, &search_itv, _overlay_chunk_find, NULL);",
          "541:  if (!node) {",
          "542:   MapOverlayChunk *chunk = R_NEW0 (MapOverlayChunk);",
          "543:   if (!chunk) {",
          "544:    return false;",
          "545:   }",
          "546:   chunk->buf = R_NEWS (ut8, r_itv_size (search_itv));",
          "547:   chunk->itv = search_itv;",
          "548:   if (!chunk->buf || !r_crbtree_insert (map->overlay, chunk, _overlay_chunk_insert, NULL)) {",
          "549:    free (chunk->buf);",
          "550:    free (chunk);",
          "551:    return false;",
          "552:   }",
          "553:   memcpy (chunk->buf, buf, r_itv_size (search_itv));",
          "554:   return true;",
          "555:  }",
          "556:  MapOverlayChunk *chunk = NULL;",
          "557:  RRBNode *prev = r_rbnode_prev (node);",
          "558:  while (prev) {",
          "559:   chunk = (MapOverlayChunk *)prev->data;",
          "560:   if (!r_itv_overlap (chunk->itv, search_itv)) {",
          "561:    break;",
          "562:   }",
          "563:   node = prev;",
          "564:   prev = r_rbnode_prev (prev);",
          "565:  }",
          "566:  chunk = (MapOverlayChunk *)node->data;",
          "567:  if (r_itv_include (chunk->itv, search_itv)) {",
          "568:   ut8 *dst = &chunk->buf[r_itv_begin (search_itv) - r_itv_begin (chunk->itv)];",
          "569:   memcpy (dst, buf, r_itv_size (search_itv));",
          "570:   return true;",
          "571:  }",
          "572:  if (r_itv_begin (chunk->itv) < r_itv_begin (search_itv)) {",
          "573:   chunk->itv.size = r_itv_begin (search_itv) - r_itv_begin (chunk->itv);",
          "574:   chunk->buf = realloc (chunk->buf, r_itv_size (chunk->itv));",
          "575:   node = r_rbnode_next (node);",
          "576:  }",
          "577:  if (node) {",
          "578:   chunk = (MapOverlayChunk *)node->data;",
          "579:   while (chunk && r_itv_include (search_itv, chunk->itv)) {",
          "580:    node = r_rbnode_next (node);",
          "581:    r_crbtree_delete (map->overlay, &chunk->itv, _overlay_chunk_find, NULL);",
          "582:    chunk = node? (MapOverlayChunk *)node->data: NULL;",
          "583:   }",
          "584:  }",
          "585:  if (chunk && r_itv_end (search_itv) >= r_itv_begin (chunk->itv)) {",
          "586:   chunk->buf = realloc (chunk->buf, r_itv_end (chunk->itv) - r_itv_begin (search_itv));",
          "587:   memmove (&chunk->buf[r_itv_size (search_itv)],",
          "588:    &chunk->buf[r_itv_end (search_itv) - r_itv_begin (chunk->itv)],",
          "589:    r_itv_end (chunk->itv) - r_itv_end (search_itv));",
          "590:   memcpy (chunk->buf, buf, r_itv_size (search_itv));",
          "591:   chunk->itv.size = r_itv_end (chunk->itv) - r_itv_begin (search_itv);",
          "592:   chunk->itv.addr = search_itv.addr;",
          "593:   return true;",
          "594:  }",
          "595:  chunk = R_NEW0 (MapOverlayChunk);",
          "596:  chunk->buf = R_NEWS (ut8, r_itv_size (search_itv));",
          "597:  chunk->itv = search_itv;",
          "598:  memcpy (chunk->buf, buf, r_itv_size (search_itv));",
          "599:  r_crbtree_insert (map->overlay, chunk, _overlay_chunk_insert, NULL);",
          "600:  return true;",
          "601: }",
          "603: R_IPI bool _io_map_get_overlay_intersects(RIOMap *map, RQueue *q, ut64 addr, int len) {",
          "604:  r_return_val_if_fail (map && q, false);",
          "605:  if (!map->overlay) {",
          "606:   return true;",
          "607:  }",
          "608:  RInterval search_itv = {addr - map->itv.addr, len};",
          "609:  RRBNode *node = r_crbtree_find_node (map->overlay, &search_itv, _overlay_chunk_find, NULL);",
          "610:  if (!node) {",
          "611:   return true;",
          "612:  }",
          "613:  MapOverlayChunk *chunk = NULL;",
          "614:  RRBNode *prev = r_rbnode_prev (node);",
          "615:  while (prev) {",
          "616:   chunk = (MapOverlayChunk *)prev->data;",
          "617:   if (!r_itv_overlap (chunk->itv, search_itv)) {",
          "618:    break;",
          "619:   }",
          "620:   node = prev;",
          "621:   prev = r_rbnode_prev (prev);",
          "622:  }",
          "623:  chunk = (MapOverlayChunk *)node->data;",
          "624:  do {",
          "625:   if (!r_queue_enqueue (q, &chunk->itv)) {",
          "627:    while (!r_queue_is_empty (q)) {",
          "628:     r_queue_dequeue (q);",
          "629:    }",
          "630:    return false;",
          "631:   }",
          "632:   node = r_rbnode_next (node);",
          "633:   chunk = node ? (MapOverlayChunk *)node->data : NULL;",
          "634:  } while (chunk && r_itv_overlap (search_itv, chunk->itv));",
          "635:  return true;",
          "636: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1eb7cf2114c058c9e7af55e05c9a7a17b5d5ea26",
      "candidate_info": {
        "commit_hash": "1eb7cf2114c058c9e7af55e05c9a7a17b5d5ea26",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/1eb7cf2114c058c9e7af55e05c9a7a17b5d5ea26",
        "files": [
          "libr/core/cconfig.c",
          "libr/include/r_io.h",
          "libr/io/io.c",
          "libr/io/io_bank.c"
        ],
        "message": "Add io.overlay config var",
        "before_after_code_files": [
          "libr/core/cconfig.c||libr/core/cconfig.c",
          "libr/include/r_io.h||libr/include/r_io.h",
          "libr/io/io.c||libr/io/io.c",
          "libr/io/io_bank.c||libr/io/io_bank.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ],
          "candidate": [
            "libr/io/io_bank.c||libr/io/io_bank.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cconfig.c||libr/core/cconfig.c": [
          "File: libr/core/cconfig.c -> libr/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1976:  return true;",
          "1977: }",
          "1979: static bool cb_hex_header(void *user, void *data) {",
          "1980:  RCore *core = (RCore *) user;",
          "1981:  RConfigNode *node = (RConfigNode *) data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1979: static bool cb_io_overlay(void *user, void *data) {",
          "1980:  RCore *core = (RCore *) user;",
          "1981:  RConfigNode *node = (RConfigNode *) data;",
          "1982:  core->io->overlay = node->i_value;",
          "1983:  return true;",
          "1984: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4338:  SETCB (\"io.autofd\", \"true\", &cb_ioautofd, \"change fd when opening a new file\");",
          "4339:  SETCB (\"io.unalloc\", \"false\", &cb_io_unalloc, \"check each byte if it's allocated\");",
          "4340:  SETCB (\"io.unalloc.ch\", \".\", &cb_io_unalloc_ch, \"char to display if byte is unallocated\");",
          "4343:  SETBPREF (\"file.info\", \"true\", \"RBin info loaded\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4348:  SETCB (\"io.overlay\", \"true\", &cb_io_overlay, \"honor io overlay\");",
          "",
          "---------------"
        ],
        "libr/include/r_io.h||libr/include/r_io.h": [
          "File: libr/include/r_io.h -> libr/include/r_io.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  size_t addrbytes; // XXX also available in RArchConfig.addrbytes",
          "141:  bool aslr;",
          "142:  bool autofd;",
          "144:  bool cachemode; // write in cache all the read operations (EXPERIMENTAL)",
          "145:  ut32 p_cache; // uses 1, 2, 4.. probably R_PERM_RWX :D",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  bool overlay;",
          "",
          "---------------"
        ],
        "libr/io/io.c||libr/io/io.c": [
          "File: libr/io/io.c -> libr/io/io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: R_API void r_io_init(RIO* io) {",
          "16:  r_return_if_fail (io);",
          "17:  io->addrbytes = 1;",
          "18:  io->cb_printf = printf;",
          "19:  r_io_desc_init (io);",
          "20:  r_io_bank_init (io);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  io->overlay = true;",
          "",
          "---------------"
        ],
        "libr/io/io_bank.c||libr/io/io_bank.c": [
          "File: libr/io/io_bank.c -> libr/io/io_bank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "786:            r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "787:    const ut64 paddr = addr + buf_off - r_io_map_from (map) + map->delta;",
          "788:    ret &= (r_io_fd_read_at (io, map->fd, paddr, buf + buf_off, read_len) == read_len);",
          "790:   }",
          "792:   node = r_rbnode_next (node);",
          "",
          "[Removed Lines]",
          "789:    r_io_map_read_from_overlay (map, addr + buf_off, buf + buf_off, read_len);",
          "",
          "[Added Lines]",
          "789:    if (io->overlay) {",
          "790:     r_io_map_read_from_overlay (map, addr + buf_off, buf + buf_off, read_len);",
          "791:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:   const ut64 buf_off = R_MAX (addr, r_io_submap_from (sm)) - addr;",
          "830:   const int write_len = R_MIN (r_io_submap_to ((&fake_sm)),",
          "831:           r_io_submap_to (sm)) - (addr + buf_off) + 1;",
          "833:    !r_queue_is_empty (bank->todo)) {",
          "834:    ut64 _buf_off = buf_off;",
          "835:    int _write_len = write_len;",
          "",
          "[Removed Lines]",
          "832:   if (io_map_get_overlay_intersects (map, bank->todo, addr + buf_off, write_len) &&",
          "",
          "[Added Lines]",
          "834:   if (io->overlay && io_map_get_overlay_intersects (map, bank->todo, addr + buf_off, write_len) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "932:  const int read_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);",
          "933:  const ut64 paddr = addr - r_io_map_from (map) + map->delta;",
          "934:  const int ret = r_io_fd_read_at (io, map->fd, paddr, buf, read_len);",
          "936:  return ret;",
          "937: }",
          "",
          "[Removed Lines]",
          "935:  r_io_map_read_from_overlay (map, addr, buf, read_len);",
          "",
          "[Added Lines]",
          "937:  if (io->overlay) {",
          "938:   r_io_map_read_from_overlay (map, addr, buf, read_len);",
          "939:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "968:  ut64 buf_off = 0;",
          "969:  int write_len = R_MIN (len, r_io_submap_to (sm) - addr + 1);",
          "970:  int ret = 0;",
          "972:   !r_queue_is_empty (bank->todo)) {",
          "973:   do {",
          "974:    RInterval *itv = (RInterval *)r_queue_dequeue (bank->todo);",
          "",
          "[Removed Lines]",
          "971:  if (io_map_get_overlay_intersects (map, bank->todo, addr, write_len) &&",
          "",
          "[Added Lines]",
          "975:  if (io->overlay && io_map_get_overlay_intersects (map, bank->todo, addr, write_len) &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}