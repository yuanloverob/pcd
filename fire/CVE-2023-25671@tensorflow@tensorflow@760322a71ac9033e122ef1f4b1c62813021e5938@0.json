{
  "cve_id": "CVE-2023-25671",
  "cve_desc": "TensorFlow is an open source platform for machine learning. There is out-of-bounds access due to mismatched integer type sizes. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.\n",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "760322a71ac9033e122ef1f4b1c62813021e5938",
  "patch_info": {
    "commit_hash": "760322a71ac9033e122ef1f4b1c62813021e5938",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/760322a71ac9033e122ef1f4b1c62813021e5938",
    "files": [
      "tensorflow/core/ir/importexport/functiondef_import.cc",
      "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
    ],
    "message": "[tfg] Fix out-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder\n\nPiperOrigin-RevId: 497419488",
    "before_after_code_files": [
      "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
      "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc": [
      "File: tensorflow/core/ir/importexport/functiondef_import.cc -> tensorflow/core/ir/importexport/functiondef_import.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:     return ::tensorflow::OkStatus();",
      "87:   }",
      "90:     StringRef node_name;",
      "91:     StringRef output_name = \"\";",
      "92:     bool is_control_dep = full_name[0] == '^';",
      "94:     if (is_control_dep) full_name = full_name.drop_front();",
      "95:     {",
      "96:       size_t colon_sep = full_name.find_first_of(':');",
      "",
      "[Removed Lines]",
      "89:   Value GetValueOrCreatePlaceholder(StringRef full_name) {",
      "93:     int output_num = 0;",
      "",
      "[Added Lines]",
      "89:   tensorflow::StatusOr<Value> GetValueOrCreatePlaceholder(StringRef full_name) {",
      "93:     size_t output_num = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:         unsigned long long value;",
      "107:         if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),",
      "110:         output_name = output_name.take_front(colon_sep);",
      "111:       }",
      "112:     }",
      "",
      "[Removed Lines]",
      "108:                                         10, value))",
      "109:           output_num = value;",
      "",
      "[Added Lines]",
      "108:                                         10, value)) {",
      "109:           if (LLVM_LIKELY(",
      "110:                   value <=",
      "111:                   std::numeric_limits<llvm::SmallVectorSizeType<Value>>::max() -",
      "112:                       1))",
      "113:             output_num = value;",
      "114:           else",
      "115:             return InvalidArgument(\"Output index \", value,",
      "116:                                    \" is invalid (too large)\");",
      "117:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     for (const std::string& input : node.input()) {",
      "172:       if (input.empty())",
      "173:         return InvalidArgument(\"Node '\", node.name(), \"' has an empty input\");",
      "176:     }",
      "",
      "[Removed Lines]",
      "174:       state.operands.push_back(",
      "175:           value_manager.GetValueOrCreatePlaceholder(input));",
      "",
      "[Added Lines]",
      "182:       TF_ASSIGN_OR_RETURN(Value value,",
      "183:                           value_manager.GetValueOrCreatePlaceholder(input));",
      "184:       state.operands.push_back(value);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "470:       return InvalidArgument(\"Function '\", func.signature().name(),",
      "471:                              \"' has empty result name\");",
      "472:     }",
      "475:   }",
      "476:   for (const auto& ret_val : func.control_ret()) {",
      "477:     auto position = control_output_to_position.find(ret_val.first);",
      "",
      "[Removed Lines]",
      "473:     ret_vals[position->second] =",
      "474:         value_manager.GetValueOrCreatePlaceholder(ret_val.second);",
      "",
      "[Added Lines]",
      "482:     TF_ASSIGN_OR_RETURN(",
      "483:         ret_vals[position->second],",
      "484:         value_manager.GetValueOrCreatePlaceholder(ret_val.second));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "485:       return InvalidArgument(\"Function '\", func.signature().name(),",
      "486:                              \"' has empty control result name\");",
      "487:     }",
      "490:     if (!result.getType().isa<ControlType>())",
      "491:       return InvalidArgument(\"failed to map returned value \", ret_val.second,",
      "492:                              \", isn't a control output\");",
      "",
      "[Removed Lines]",
      "488:     Value result = value_manager.GetValueOrCreatePlaceholder(",
      "489:         (Twine(\"^\") + ret_val.second).str());",
      "",
      "[Added Lines]",
      "498:     TF_ASSIGN_OR_RETURN(Value result, value_manager.GetValueOrCreatePlaceholder(",
      "499:                                           (Twine(\"^\") + ret_val.second).str()));",
      "",
      "---------------"
    ],
    "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt": [
      "File: tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt -> tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # RUN: not tfg-translate -graphdef-to-mlir %s 2>&1 | FileCheck %s",
      "3: # CHECK: Output index 18446744073709551615 is invalid (too large)",
      "5: library {",
      "6:   function {",
      "7:     signature {",
      "8:       name: \"foo\"",
      "9:       attr {",
      "10:         name: \"T\"",
      "11:         type: \"type\"",
      "12:       }",
      "13:     }",
      "14:     node_def {",
      "15:       name: \"two\"",
      "16:       op: \"Const\"",
      "17:       attr {",
      "18:         key: \"dtype\"",
      "19:         value {",
      "20:           type: DT_INT64",
      "21:         }",
      "22:       }",
      "23:       attr {",
      "24:         key: \"value\"",
      "25:         value {",
      "26:           tensor {",
      "27:             dtype: DT_INT64",
      "28:             tensor_shape {}",
      "29:             int64_val: 2",
      "30:           }",
      "31:         }",
      "32:       }",
      "33:     }",
      "34:     node_def {",
      "35:       name: \"a\"",
      "36:       op: \"Cast\"",
      "37:       input: \"two:output:18446744073709551615\"",
      "38:       attr {",
      "39:         key: \"DstT\"",
      "40:         value {",
      "41:           placeholder: \"T\"",
      "42:         }",
      "43:       }",
      "44:       attr {",
      "45:         key: \"SrcT\"",
      "46:         value {",
      "47:           type: DT_INT64",
      "48:         }",
      "49:       }",
      "50:     }",
      "51:   }",
      "52: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec5e54727d395bb57cedc738edf6329c88cff177",
      "candidate_info": {
        "commit_hash": "ec5e54727d395bb57cedc738edf6329c88cff177",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ec5e54727d395bb57cedc738edf6329c88cff177",
        "files": [
          "tensorflow/core/ir/importexport/functiondef_import.cc",
          "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
        ],
        "message": "[tfg] Fix out-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder\n\nPiperOrigin-RevId: 497419488",
        "before_after_code_files": [
          "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
          "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
            "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
          ],
          "candidate": [
            "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
            "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc": [
          "File: tensorflow/core/ir/importexport/functiondef_import.cc -> tensorflow/core/ir/importexport/functiondef_import.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     return ::tensorflow::OkStatus();",
          "87:   }",
          "90:     StringRef node_name;",
          "91:     StringRef output_name = \"\";",
          "92:     bool is_control_dep = full_name[0] == '^';",
          "94:     if (is_control_dep) full_name = full_name.drop_front();",
          "95:     {",
          "96:       size_t colon_sep = full_name.find_first_of(':');",
          "",
          "[Removed Lines]",
          "89:   Value GetValueOrCreatePlaceholder(StringRef full_name) {",
          "93:     int output_num = 0;",
          "",
          "[Added Lines]",
          "89:   tensorflow::StatusOr<Value> GetValueOrCreatePlaceholder(StringRef full_name) {",
          "93:     size_t output_num = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         unsigned long long value;",
          "107:         if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),",
          "110:         output_name = output_name.take_front(colon_sep);",
          "111:       }",
          "112:     }",
          "",
          "[Removed Lines]",
          "108:                                         10, value))",
          "109:           output_num = value;",
          "",
          "[Added Lines]",
          "108:                                         10, value)) {",
          "109:           if (LLVM_LIKELY(",
          "110:                   value <=",
          "111:                   std::numeric_limits<llvm::SmallVectorSizeType<Value>>::max() -",
          "112:                       1))",
          "113:             output_num = value;",
          "114:           else",
          "115:             return InvalidArgument(\"Output index \", value,",
          "116:                                    \" is invalid (too large)\");",
          "117:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     for (const std::string& input : node.input()) {",
          "172:       if (input.empty())",
          "173:         return InvalidArgument(\"Node '\", node.name(), \"' has an empty input\");",
          "176:     }",
          "",
          "[Removed Lines]",
          "174:       state.operands.push_back(",
          "175:           value_manager.GetValueOrCreatePlaceholder(input));",
          "",
          "[Added Lines]",
          "182:       TF_ASSIGN_OR_RETURN(Value value,",
          "183:                           value_manager.GetValueOrCreatePlaceholder(input));",
          "184:       state.operands.push_back(value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:       return InvalidArgument(\"Function '\", func.signature().name(),",
          "473:                              \"' has empty result name\");",
          "474:     }",
          "477:   }",
          "478:   for (const auto& ret_val : func.control_ret()) {",
          "479:     auto position = control_output_to_position.find(ret_val.first);",
          "",
          "[Removed Lines]",
          "475:     ret_vals[position->second] =",
          "476:         value_manager.GetValueOrCreatePlaceholder(ret_val.second);",
          "",
          "[Added Lines]",
          "484:     TF_ASSIGN_OR_RETURN(",
          "485:         ret_vals[position->second],",
          "486:         value_manager.GetValueOrCreatePlaceholder(ret_val.second));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487:       return InvalidArgument(\"Function '\", func.signature().name(),",
          "488:                              \"' has empty control result name\");",
          "489:     }",
          "492:     if (!result.getType().isa<ControlType>())",
          "493:       return InvalidArgument(\"failed to map returned value \", ret_val.second,",
          "494:                              \", isn't a control output\");",
          "",
          "[Removed Lines]",
          "490:     Value result = value_manager.GetValueOrCreatePlaceholder(",
          "491:         (Twine(\"^\") + ret_val.second).str());",
          "",
          "[Added Lines]",
          "500:     TF_ASSIGN_OR_RETURN(Value result, value_manager.GetValueOrCreatePlaceholder(",
          "501:                                           (Twine(\"^\") + ret_val.second).str()));",
          "",
          "---------------"
        ],
        "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt": [
          "File: tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt -> tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # RUN: not tfg-translate -graphdef-to-mlir %s 2>&1 | FileCheck %s",
          "3: # CHECK: Output index 18446744073709551615 is invalid (too large)",
          "5: library {",
          "6:   function {",
          "7:     signature {",
          "8:       name: \"foo\"",
          "9:       attr {",
          "10:         name: \"T\"",
          "11:         type: \"type\"",
          "12:       }",
          "13:     }",
          "14:     node_def {",
          "15:       name: \"two\"",
          "16:       op: \"Const\"",
          "17:       attr {",
          "18:         key: \"dtype\"",
          "19:         value {",
          "20:           type: DT_INT64",
          "21:         }",
          "22:       }",
          "23:       attr {",
          "24:         key: \"value\"",
          "25:         value {",
          "26:           tensor {",
          "27:             dtype: DT_INT64",
          "28:             tensor_shape {}",
          "29:             int64_val: 2",
          "30:           }",
          "31:         }",
          "32:       }",
          "33:     }",
          "34:     node_def {",
          "35:       name: \"a\"",
          "36:       op: \"Cast\"",
          "37:       input: \"two:output:18446744073709551615\"",
          "38:       attr {",
          "39:         key: \"DstT\"",
          "40:         value {",
          "41:           placeholder: \"T\"",
          "42:         }",
          "43:       }",
          "44:       attr {",
          "45:         key: \"SrcT\"",
          "46:         value {",
          "47:           type: DT_INT64",
          "48:         }",
          "49:       }",
          "50:     }",
          "51:   }",
          "52: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2680d9966ee972b63571a2df786435ef29ac6c7",
      "candidate_info": {
        "commit_hash": "f2680d9966ee972b63571a2df786435ef29ac6c7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f2680d9966ee972b63571a2df786435ef29ac6c7",
        "files": [
          "tensorflow/core/ir/importexport/functiondef_import.cc",
          "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
        ],
        "message": "[tfg] Fix out-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder\n\nPiperOrigin-RevId: 497419488",
        "before_after_code_files": [
          "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
          "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
            "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
          ],
          "candidate": [
            "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc",
            "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ir/importexport/functiondef_import.cc||tensorflow/core/ir/importexport/functiondef_import.cc": [
          "File: tensorflow/core/ir/importexport/functiondef_import.cc -> tensorflow/core/ir/importexport/functiondef_import.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     return ::tensorflow::OkStatus();",
          "87:   }",
          "90:     StringRef node_name;",
          "91:     StringRef output_name = \"\";",
          "92:     bool is_control_dep = full_name[0] == '^';",
          "94:     if (is_control_dep) full_name = full_name.drop_front();",
          "95:     {",
          "96:       size_t colon_sep = full_name.find_first_of(':');",
          "",
          "[Removed Lines]",
          "89:   Value GetValueOrCreatePlaceholder(StringRef full_name) {",
          "93:     int output_num = 0;",
          "",
          "[Added Lines]",
          "89:   tensorflow::StatusOr<Value> GetValueOrCreatePlaceholder(StringRef full_name) {",
          "93:     size_t output_num = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         unsigned long long value;",
          "107:         if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),",
          "110:         output_name = output_name.take_front(colon_sep);",
          "111:       }",
          "112:     }",
          "",
          "[Removed Lines]",
          "108:                                         10, value))",
          "109:           output_num = value;",
          "",
          "[Added Lines]",
          "108:                                         10, value)) {",
          "109:           if (LLVM_LIKELY(",
          "110:                   value <=",
          "111:                   std::numeric_limits<llvm::SmallVectorSizeType<Value>>::max() -",
          "112:                       1))",
          "113:             output_num = value;",
          "114:           else",
          "115:             return InvalidArgument(\"Output index \", value,",
          "116:                                    \" is invalid (too large)\");",
          "117:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     for (const std::string& input : node.input()) {",
          "172:       if (input.empty())",
          "173:         return InvalidArgument(\"Node '\", node.name(), \"' has an empty input\");",
          "176:     }",
          "",
          "[Removed Lines]",
          "174:       state.operands.push_back(",
          "175:           value_manager.GetValueOrCreatePlaceholder(input));",
          "",
          "[Added Lines]",
          "182:       TF_ASSIGN_OR_RETURN(Value value,",
          "183:                           value_manager.GetValueOrCreatePlaceholder(input));",
          "184:       state.operands.push_back(value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:       return InvalidArgument(\"Function '\", func.signature().name(),",
          "473:                              \"' has empty result name\");",
          "474:     }",
          "477:   }",
          "478:   for (const auto& ret_val : func.control_ret()) {",
          "479:     auto position = control_output_to_position.find(ret_val.first);",
          "",
          "[Removed Lines]",
          "475:     ret_vals[position->second] =",
          "476:         value_manager.GetValueOrCreatePlaceholder(ret_val.second);",
          "",
          "[Added Lines]",
          "484:     TF_ASSIGN_OR_RETURN(",
          "485:         ret_vals[position->second],",
          "486:         value_manager.GetValueOrCreatePlaceholder(ret_val.second));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487:       return InvalidArgument(\"Function '\", func.signature().name(),",
          "488:                              \"' has empty control result name\");",
          "489:     }",
          "492:     if (!result.getType().isa<ControlType>())",
          "493:       return InvalidArgument(\"failed to map returned value \", ret_val.second,",
          "494:                              \", isn't a control output\");",
          "",
          "[Removed Lines]",
          "490:     Value result = value_manager.GetValueOrCreatePlaceholder(",
          "491:         (Twine(\"^\") + ret_val.second).str());",
          "",
          "[Added Lines]",
          "500:     TF_ASSIGN_OR_RETURN(Value result, value_manager.GetValueOrCreatePlaceholder(",
          "501:                                           (Twine(\"^\") + ret_val.second).str()));",
          "",
          "---------------"
        ],
        "tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt||tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt": [
          "File: tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt -> tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_function_named_edge_index.pbtxt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # RUN: not tfg-translate -graphdef-to-mlir %s 2>&1 | FileCheck %s",
          "3: # CHECK: Output index 18446744073709551615 is invalid (too large)",
          "5: library {",
          "6:   function {",
          "7:     signature {",
          "8:       name: \"foo\"",
          "9:       attr {",
          "10:         name: \"T\"",
          "11:         type: \"type\"",
          "12:       }",
          "13:     }",
          "14:     node_def {",
          "15:       name: \"two\"",
          "16:       op: \"Const\"",
          "17:       attr {",
          "18:         key: \"dtype\"",
          "19:         value {",
          "20:           type: DT_INT64",
          "21:         }",
          "22:       }",
          "23:       attr {",
          "24:         key: \"value\"",
          "25:         value {",
          "26:           tensor {",
          "27:             dtype: DT_INT64",
          "28:             tensor_shape {}",
          "29:             int64_val: 2",
          "30:           }",
          "31:         }",
          "32:       }",
          "33:     }",
          "34:     node_def {",
          "35:       name: \"a\"",
          "36:       op: \"Cast\"",
          "37:       input: \"two:output:18446744073709551615\"",
          "38:       attr {",
          "39:         key: \"DstT\"",
          "40:         value {",
          "41:           placeholder: \"T\"",
          "42:         }",
          "43:       }",
          "44:       attr {",
          "45:         key: \"SrcT\"",
          "46:         value {",
          "47:           type: DT_INT64",
          "48:         }",
          "49:       }",
          "50:     }",
          "51:   }",
          "52: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}