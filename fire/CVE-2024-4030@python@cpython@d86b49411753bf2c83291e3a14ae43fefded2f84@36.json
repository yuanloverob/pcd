{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "732c00550f20e73edeac03d9e222c4a719362649",
      "candidate_info": {
        "commit_hash": "732c00550f20e73edeac03d9e222c4a719362649",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/732c00550f20e73edeac03d9e222c4a719362649",
        "files": [
          "Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_misc.py",
          "Misc/NEWS.d/next/Library/2024-06-23-17-50-40.gh-issue-119614.vwPGLB.rst",
          "Modules/_tkinter.c"
        ],
        "message": "[3.13] gh-119614: Fix truncation of strings with embedded null characters in Tkinter (GH-120909) (GH-120938)\n\nNow the null character is always represented as \\xc0\\x80 for\nTcl_NewStringObj().\n(cherry picked from commit c38e2f64d012929168dfef7363c9e48bd1a6c731)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tcl.py||Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py",
          "Modules/_tkinter.c||Modules/_tkinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tcl.py||Lib/test/test_tcl.py": [
          "File: Lib/test/test_tcl.py -> Lib/test/test_tcl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         tcl.call('set','a','1')",
          "74:         self.assertEqual(tcl.call('set','a'),'1')",
          "76:     def testCallException(self):",
          "77:         tcl = self.interp",
          "78:         self.assertRaises(TclError,tcl.call,'set','a')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     def test_call_passing_null(self):",
          "77:         tcl = self.interp",
          "78:         tcl.call('set', 'a', 'a\\0b')  # ASCII-only",
          "79:         self.assertEqual(tcl.getvar('a'), 'a\\x00b')",
          "80:         self.assertEqual(tcl.call('set', 'a'), 'a\\x00b')",
          "81:         self.assertEqual(tcl.eval('set a'), 'a\\x00b')",
          "83:         tcl.call('set', 'a', '\\u20ac\\0')  # non-ASCII",
          "84:         self.assertEqual(tcl.getvar('a'), '\\u20ac\\x00')",
          "85:         self.assertEqual(tcl.call('set', 'a'), '\\u20ac\\x00')",
          "86:         self.assertEqual(tcl.eval('set a'), '\\u20ac\\x00')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         tcl.setvar('a','1')",
          "99:         self.assertEqual(tcl.eval('set a'),'1')",
          "101:     def testSetVarArray(self):",
          "102:         tcl = self.interp",
          "103:         tcl.setvar('a(1)','1')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     def test_setvar_passing_null(self):",
          "114:         tcl = self.interp",
          "115:         tcl.setvar('a', 'a\\0b')  # ASCII-only",
          "116:         self.assertEqual(tcl.getvar('a'), 'a\\x00b')",
          "117:         self.assertEqual(tcl.call('set', 'a'), 'a\\x00b')",
          "118:         self.assertEqual(tcl.eval('set a'), 'a\\x00b')",
          "120:         tcl.setvar('a', '\\u20ac\\0')  # non-ASCII",
          "121:         self.assertEqual(tcl.getvar('a'), '\\u20ac\\x00')",
          "122:         self.assertEqual(tcl.call('set', 'a'), '\\u20ac\\x00')",
          "123:         self.assertEqual(tcl.eval('set a'), '\\u20ac\\x00')",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py": [
          "File: Lib/test/test_tkinter/test_misc.py -> Lib/test/test_tkinter/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:             self.assertEqual(vi.micro, 0)",
          "477:         self.assertTrue(str(vi).startswith(f'{vi.major}.{vi.minor}'))",
          "480: class WmTest(AbstractTkTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:     def test_embedded_null(self):",
          "480:         widget = tkinter.Entry(self.root)",
          "481:         widget.insert(0, 'abc\\0def')  # ASCII-only",
          "482:         widget.selection_range(0, 'end')",
          "483:         self.assertEqual(widget.selection_get(), 'abc\\x00def')",
          "484:         widget.insert(0, '\\u20ac\\0')  # non-ASCII",
          "485:         widget.selection_range(0, 'end')",
          "486:         self.assertEqual(widget.selection_get(), '\\u20ac\\0abc\\x00def')",
          "",
          "---------------"
        ],
        "Modules/_tkinter.c||Modules/_tkinter.c": [
          "File: Modules/_tkinter.c -> Modules/_tkinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:         else",
          "513:             Py_UNREACHABLE();",
          "514:     }",
          "516:     const char *s = Tcl_GetStringFromObj(value, &len);",
          "517:     return unicodeFromTclStringAndSize(s, len);",
          "518: }",
          "",
          "[Removed Lines]",
          "515: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1018:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1019:             return NULL;",
          "1020:         }",
          "1022:             return Tcl_NewStringObj((const char *)PyUnicode_DATA(value),",
          "1023:                                     (int)size);",
          "1024:         }",
          "",
          "[Removed Lines]",
          "1021:         if (PyUnicode_IS_ASCII(value)) {",
          "",
          "[Added Lines]",
          "1021:         if (PyUnicode_IS_ASCII(value) &&",
          "1022:             strlen(PyUnicode_DATA(value)) == (size_t)PyUnicode_GET_LENGTH(value))",
          "1023:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1033:                     \"surrogatepass\", NATIVE_BYTEORDER);",
          "1034:         else",
          "1035:             Py_UNREACHABLE();",
          "1039:         if (!encoded) {",
          "1040:             return NULL;",
          "1041:         }",
          "",
          "[Removed Lines]",
          "1036: #else",
          "1037:         encoded = _PyUnicode_AsUTF8String(value, \"surrogateescape\");",
          "1038: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1045:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1046:             return NULL;",
          "1047:         }",
          "1049:         result = Tcl_NewUnicodeObj((const Tcl_UniChar *)PyBytes_AS_STRING(encoded),",
          "1050:                                    (int)(size / sizeof(Tcl_UniChar)));",
          "1051: #else",
          "1052:         result = Tcl_NewStringObj(PyBytes_AS_STRING(encoded), (int)size);",
          "1054:         Py_DECREF(encoded);",
          "1055:         return result;",
          "1056:     }",
          "",
          "[Removed Lines]",
          "1048: #if USE_TCL_UNICODE",
          "1053: #endif",
          "",
          "[Added Lines]",
          "1050:         encoded = _PyUnicode_AsUTF8String(value, \"surrogateescape\");",
          "1051:         if (!encoded) {",
          "1052:             return NULL;",
          "1053:         }",
          "1054:         size = PyBytes_GET_SIZE(encoded);",
          "1055:         if (strlen(PyBytes_AS_STRING(encoded)) != (size_t)size) {",
          "1064:             Py_SETREF(encoded,",
          "1065:                       PyObject_CallMethod(encoded, \"replace\", \"y#y#\",",
          "1066:                                           \"\\0\", (Py_ssize_t)1,",
          "1067:                                           \"\\xc0\\x80\", (Py_ssize_t)2));",
          "1068:             if (!encoded) {",
          "1069:                 return NULL;",
          "1070:             }",
          "1071:             size = PyBytes_GET_SIZE(encoded);",
          "1072:         }",
          "1073:         if (size > INT_MAX) {",
          "1074:             Py_DECREF(encoded);",
          "1075:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1076:             return NULL;",
          "1077:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
      "candidate_info": {
        "commit_hash": "c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
        "files": [
          "Lib/ensurepip/__init__.py",
          "Lib/ensurepip/_bundled/pip-24.0-py3-none-any.whl",
          "Lib/ensurepip/_bundled/pip-24.1.1-py3-none-any.whl",
          "Misc/NEWS.d/next/Library/2024-06-22-22-52-24.gh-issue-120888.sd8I3N.rst"
        ],
        "message": "[3.13] gh-120888: Bump bundled pip to 24.1.1 (GH-120889) (#121080)\n\ngh-120888: Bump bundled pip to 24.1.1 (GH-120889)\n(cherry picked from commit 4999e0bda091826fcdf303dd439364e1d303a5ce)\n\nCo-authored-by: Pradyun Gedam <pradyunsg@gmail.com>\nCo-authored-by: Pradyun Gedam <pradyunsg@users.noreply.github.com>\nCo-authored-by: blurb-it[bot] <43283697+blurb-it[bot]@users.noreply.github.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>",
        "before_after_code_files": [
          "Lib/ensurepip/__init__.py||Lib/ensurepip/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/ensurepip/__init__.py||Lib/ensurepip/__init__.py": [
          "File: Lib/ensurepip/__init__.py -> Lib/ensurepip/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: __all__ = [\"version\", \"bootstrap\"]",
          "15: # Directory of system wheel packages. Some Linux distribution packaging",
          "16: # policies recommend against bundling dependencies. For example, Fedora",
          "",
          "[Removed Lines]",
          "13: _PIP_VERSION = \"24.0\"",
          "",
          "[Added Lines]",
          "13: _PIP_VERSION = \"24.1.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a23970478a8e10476f4c3095060ef00e07826a2",
      "candidate_info": {
        "commit_hash": "0a23970478a8e10476f4c3095060ef00e07826a2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0a23970478a8e10476f4c3095060ef00e07826a2",
        "files": [
          "Include/internal/mimalloc/mimalloc/internal.h",
          "Include/internal/mimalloc/mimalloc/types.h",
          "Include/internal/pycore_mimalloc.h",
          "Misc/NEWS.d/next/C API/2024-05-08-23-14-06.gh-issue-116984.5sgcDo.rst"
        ],
        "message": "[3.13] gh-116984: Make mimalloc header includes relative to the current file (GH-118808) (#118866)\n\nSome embedders and extensions include parts of the internal API. The\npycore_mimalloc.h file is transitively include by a number of other\ninternal headers. This avoids include errors for code that was\nalready including those headers.\n(cherry picked from commit 71cc0651e79041abd648595f3030dfa41009137a)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/mimalloc/mimalloc/internal.h||Include/internal/mimalloc/mimalloc/internal.h",
          "Include/internal/mimalloc/mimalloc/types.h||Include/internal/mimalloc/mimalloc/types.h",
          "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/mimalloc/mimalloc/internal.h||Include/internal/mimalloc/mimalloc/internal.h": [
          "File: Include/internal/mimalloc/mimalloc/internal.h -> Include/internal/mimalloc/mimalloc/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #if (MI_DEBUG>0)",
          "21: #define mi_trace_message(...)  _mi_trace_message(__VA_ARGS__)",
          "",
          "[Removed Lines]",
          "17: #include \"mimalloc/types.h\"",
          "18: #include \"mimalloc/track.h\"",
          "",
          "[Added Lines]",
          "17: #include \"types.h\"",
          "18: #include \"track.h\"",
          "",
          "---------------"
        ],
        "Include/internal/mimalloc/mimalloc/types.h||Include/internal/mimalloc/mimalloc/types.h": [
          "File: Include/internal/mimalloc/mimalloc/types.h -> Include/internal/mimalloc/mimalloc/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stddef.h>   // ptrdiff_t",
          "23: #include <stdint.h>   // uintptr_t, uint16_t, etc",
          "26: #ifdef _MSC_VER",
          "27: #pragma warning(disable:4214) // bitfield is not int",
          "",
          "[Removed Lines]",
          "24: #include \"mimalloc/atomic.h\"  // _Atomic",
          "",
          "[Added Lines]",
          "24: #include \"atomic.h\"   // _Atomic",
          "",
          "---------------"
        ],
        "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h": [
          "File: Include/internal/pycore_mimalloc.h -> Include/internal/pycore_mimalloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #  define MI_TSAN 1",
          "37: #endif",
          "42: #endif",
          "44: #ifdef Py_GIL_DISABLED",
          "",
          "[Removed Lines]",
          "39: #include \"mimalloc.h\"",
          "40: #include \"mimalloc/types.h\"",
          "41: #include \"mimalloc/internal.h\"",
          "",
          "[Added Lines]",
          "39: #include \"mimalloc/mimalloc.h\"",
          "40: #include \"mimalloc/mimalloc/types.h\"",
          "41: #include \"mimalloc/mimalloc/internal.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
      "candidate_info": {
        "commit_hash": "ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
        "files": [
          "Lib/platform.py",
          "Misc/NEWS.d/next/Build/2024-05-17-19-53-27.gh-issue-119132.wepPgM.rst",
          "Python/getversion.c"
        ],
        "message": "[3.13] gh-119132: Update sys.version to identify free-threaded or not. (gh-119134) (#119153)\n\ngh-119132: Update sys.version to identify free-threaded or not. (gh-119134)\n(cherry picked from commit c141d4393750c827cbcb3867f0f42997a3bb3528)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Lib/platform.py||Lib/platform.py",
          "Python/getversion.c||Python/getversion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/platform.py||Lib/platform.py": [
          "File: Lib/platform.py -> Lib/platform.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:     if result is not None:",
          "1154:         return result",
          "1163:     if sys.platform.startswith('java'):",
          "1164:         # Jython",
          "1165:         name = 'Jython'",
          "1167:         if match is None:",
          "1168:             raise ValueError(",
          "1169:                 'failed to parse Jython sys.version: %s' %",
          "",
          "[Removed Lines]",
          "1156:     sys_version_parser = re.compile(",
          "1157:         r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1158:         r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1159:         r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1160:         r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1161:         r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1166:         match = sys_version_parser.match(sys_version)",
          "",
          "[Added Lines]",
          "1158:         jython_sys_version_parser = re.compile(",
          "1159:             r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1160:             r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1161:             r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1162:             r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1163:             r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1165:         match = jython_sys_version_parser.match(sys_version)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:     else:",
          "1192:         # CPython",
          "1194:         if match is None:",
          "1195:             raise ValueError(",
          "1196:                 'failed to parse CPython sys.version: %s' %",
          "",
          "[Removed Lines]",
          "1193:         match = sys_version_parser.match(sys_version)",
          "",
          "[Added Lines]",
          "1192:         cpython_sys_version_parser = re.compile(",
          "1193:             r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1194:             r'(?:experimental free-threading build\\s+)?' # \"free-threading-build<space>\"",
          "1195:             r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1196:             r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1197:             r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1198:             r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1199:         match = cpython_sys_version_parser.match(sys_version)",
          "",
          "---------------"
        ],
        "Python/getversion.c||Python/getversion.c": [
          "File: Python/getversion.c -> Python/getversion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"patchlevel.h\"",
          "8: static int initialized = 0;",
          "11: void _Py_InitVersion(void)",
          "12: {",
          "",
          "[Removed Lines]",
          "9: static char version[250];",
          "",
          "[Added Lines]",
          "9: static char version[300];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:         return;",
          "15:     }",
          "16:     initialized = 1;",
          "18:                   PY_VERSION, Py_GetBuildInfo(), Py_GetCompiler());",
          "19: }",
          "",
          "[Removed Lines]",
          "17:     PyOS_snprintf(version, sizeof(version), \"%.80s (%.80s) %.80s\",",
          "",
          "[Added Lines]",
          "17: #ifdef Py_GIL_DISABLED",
          "18:     const char *buildinfo_format = \"%.80s experimental free-threading build (%.80s) %.80s\";",
          "19: #else",
          "20:     const char *buildinfo_format = \"%.80s (%.80s) %.80s\";",
          "21: #endif",
          "22:     PyOS_snprintf(version, sizeof(version), buildinfo_format,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
      "candidate_info": {
        "commit_hash": "b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
        "files": [
          "Lib/pdb.py",
          "Lib/test/test_pdb.py",
          "Misc/NEWS.d/next/Library/2024-05-31-21-17-43.gh-issue-119824.CQlxWV.rst",
          "Misc/NEWS.d/next/Library/2024-06-20-01-31-24.gh-issue-120769.PfiMrc.rst"
        ],
        "message": "[3.13] gh-119824: Revert the `where` solution and use meta commands (#120919)",
        "before_after_code_files": [
          "Lib/pdb.py||Lib/pdb.py",
          "Lib/test/test_pdb.py||Lib/test/test_pdb.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pdb.py||Lib/pdb.py": [
          "File: Lib/pdb.py -> Lib/pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     # Called before loop, handles display expressions",
          "521:     # Set up convenience variable containers",
          "523:         displaying = self.displaying.get(self.curframe)",
          "524:         if displaying:",
          "525:             for expr, oldvalue in displaying.items():",
          "",
          "[Removed Lines]",
          "522:     def preloop(self):",
          "",
          "[Added Lines]",
          "522:     def _show_display(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:             self.setup(frame, tb)",
          "608:             # We should print the stack entry if and only if the user input",
          "609:             # is expected, and we should print it right before the user input.",
          "616:             self._cmdloop()",
          "619:                 self.cmdqueue.pop()",
          "620:             self.forget()",
          "",
          "[Removed Lines]",
          "610:             # If self.cmdqueue is not empty, we append a \"w 0\" command to the",
          "611:             # queue, which is equivalent to print_stack_entry",
          "612:             if self.cmdqueue:",
          "613:                 self.cmdqueue.append('w 0')",
          "614:             else:",
          "615:                 self.print_stack_entry(self.stack[self.curindex])",
          "617:             # If \"w 0\" is not used, pop it out",
          "618:             if self.cmdqueue and self.cmdqueue[-1] == 'w 0':",
          "",
          "[Added Lines]",
          "610:             # We achieve this by appending _pdbcmd_print_frame_status to the",
          "611:             # command queue. If cmdqueue is not exausted, the user input is",
          "612:             # not expected and we will not print the stack entry.",
          "613:             self.cmdqueue.append('_pdbcmd_print_frame_status')",
          "615:             # If _pdbcmd_print_frame_status is not used, pop it out",
          "616:             if self.cmdqueue and self.cmdqueue[-1] == '_pdbcmd_print_frame_status':",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "848:         \"\"\"",
          "849:         if not self.commands_defining:",
          "850:             self._validate_file_mtime()",
          "851:             return cmd.Cmd.onecmd(self, line)",
          "852:         else:",
          "853:             return self.handle_command_def(line)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:             if line.startswith('_pdbcmd'):",
          "850:                 command, arg, line = self.parseline(line)",
          "851:                 if hasattr(self, command):",
          "852:                     return getattr(self, command)(arg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "981:             state += 1",
          "982:         return matches",
          "984:     # Command definitions, called by cmdloop()",
          "985:     # The argument is the remaining string on the command line",
          "986:     # Return true to exit from the command loop",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986:     # Pdb meta commands, only intended to be used internally by pdb",
          "988:     def _pdbcmd_print_frame_status(self, arg):",
          "989:         self.print_stack_entry(self.stack[self.curindex])",
          "990:         self._show_display()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1411:     complete_cl = _complete_location",
          "1413:     def do_where(self, arg):",
          "1420:         An arrow indicates the \"current frame\", which determines the",
          "1421:         context of most commands.  'bt' is an alias for this command.",
          "1422:         \"\"\"",
          "1432:     do_w = do_where",
          "1433:     do_bt = do_where",
          "",
          "[Removed Lines]",
          "1414:         \"\"\"w(here) [count]",
          "1416:         Print a stack trace. If count is not specified, print the full stack.",
          "1417:         If count is 0, print the current frame entry. If count is positive,",
          "1418:         print count entries from the most recent frame. If count is negative,",
          "1419:         print -count entries from the least recent frame.",
          "1423:         if not arg:",
          "1424:             count = None",
          "1425:         else:",
          "1426:             try:",
          "1427:                 count = int(arg)",
          "1428:             except ValueError:",
          "1429:                 self.error('Invalid count (%s)' % arg)",
          "1430:                 return",
          "1431:         self.print_stack_trace(count)",
          "",
          "[Added Lines]",
          "1422:         \"\"\"w(here)",
          "1424:         Print a stack trace, with the most recent frame at the bottom.",
          "1428:         if arg:",
          "1429:             self._print_invalid_arg(arg)",
          "1430:             return",
          "1431:         self.print_stack_trace()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2083:     # It is also consistent with the up/down commands (which are",
          "2084:     # compatible with dbx and gdb: up moves towards 'main()'",
          "2085:     # and down moves towards the most recent stack frame).",
          "2100:         try:",
          "2102:                 self.print_stack_entry(frame_lineno)",
          "2103:         except KeyboardInterrupt:",
          "2104:             pass",
          "",
          "[Removed Lines]",
          "2086:     #     * if count is None, prints the full stack",
          "2087:     #     * if count = 0, prints the current frame entry",
          "2088:     #     * if count < 0, prints -count least recent frame entries",
          "2089:     #     * if count > 0, prints count most recent frame entries",
          "2091:     def print_stack_trace(self, count=None):",
          "2092:         if count is None:",
          "2093:             stack_to_print = self.stack",
          "2094:         elif count == 0:",
          "2095:             stack_to_print = [self.stack[self.curindex]]",
          "2096:         elif count < 0:",
          "2097:             stack_to_print = self.stack[:-count]",
          "2098:         else:",
          "2099:             stack_to_print = self.stack[-count:]",
          "2101:             for frame_lineno in stack_to_print:",
          "",
          "[Added Lines]",
          "2087:     def print_stack_trace(self):",
          "2089:             for frame_lineno in self.stack:",
          "",
          "---------------"
        ],
        "Lib/test/test_pdb.py||Lib/test/test_pdb.py": [
          "File: Lib/test/test_pdb.py -> Lib/test/test_pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:     (Pdb) continue",
          "492:     \"\"\"",
          "495: def do_nothing():",
          "496:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: def test_pdb_empty_line():",
          "495:     \"\"\"Test that empty line repeats the last command.",
          "497:     >>> def test_function():",
          "498:     ...     x = 1",
          "499:     ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "500:     ...     y = 2",
          "502:     >>> with PdbTestInput([  # doctest: +NORMALIZE_WHITESPACE",
          "503:     ...     'p x',",
          "504:     ...     '',  # Should repeat p x",
          "505:     ...     'n ;; p 0 ;; p x',  # Fill cmdqueue with multiple commands",
          "506:     ...     '',  # Should still repeat p x",
          "507:     ...     'continue',",
          "508:     ... ]):",
          "509:     ...    test_function()",
          "510:     > <doctest test.test_pdb.test_pdb_empty_line[0]>(3)test_function()",
          "511:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "512:     (Pdb) p x",
          "513:     1",
          "514:     (Pdb)",
          "515:     1",
          "516:     (Pdb) n ;; p 0 ;; p x",
          "517:     0",
          "518:     1",
          "519:     > <doctest test.test_pdb.test_pdb_empty_line[0]>(4)test_function()",
          "520:     -> y = 2",
          "521:     (Pdb)",
          "522:     1",
          "523:     (Pdb) continue",
          "524:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:     ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "783:     >>> def f():",
          "786:     >>> def test_function():",
          "787:     ...     f()",
          "",
          "[Removed Lines]",
          "784:     ...     g()",
          "",
          "[Added Lines]",
          "815:     ...     g();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789:     >>> with PdbTestInput([  # doctest: +ELLIPSIS",
          "790:     ...     'w',",
          "791:     ...     'where',",
          "794:     ...     'u',",
          "795:     ...     'w',",
          "799:     ...     'continue',",
          "800:     ... ]):",
          "801:     ...    test_function()",
          "",
          "[Removed Lines]",
          "792:     ...     'w 1',",
          "793:     ...     'w invalid',",
          "796:     ...     'w 0',",
          "797:     ...     'w 100',",
          "798:     ...     'w -100',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "803:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "804:     (Pdb) w",
          "805:     ...",
          "807:     -> test_function()",
          "808:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "809:     -> f()",
          "810:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "812:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "813:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "814:     (Pdb) where",
          "815:     ...",
          "817:     -> test_function()",
          "818:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "819:     -> f()",
          "820:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "822:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "823:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "829:     (Pdb) u",
          "830:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "832:     (Pdb) w",
          "833:     ...",
          "858:     -> test_function()",
          "859:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "860:     -> f()",
          "861:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "863:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "864:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "865:     (Pdb) continue",
          "",
          "[Removed Lines]",
          "806:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "811:     -> g()",
          "816:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "821:     -> g()",
          "824:     (Pdb) w 1",
          "825:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "826:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "827:     (Pdb) w invalid",
          "831:     -> g()",
          "834:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "835:     -> test_function()",
          "836:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "837:     -> f()",
          "838:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "839:     -> g()",
          "840:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "841:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "842:     (Pdb) w 0",
          "843:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "844:     -> g()",
          "845:     (Pdb) w 100",
          "846:     ...",
          "847:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "848:     -> test_function()",
          "849:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "850:     -> f()",
          "851:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "852:     -> g()",
          "853:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "854:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "855:     (Pdb) w -100",
          "856:     ...",
          "857:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "862:     -> g()",
          "",
          "[Added Lines]",
          "832:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "837:     -> g();",
          "842:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "847:     -> g();",
          "852:     -> g();",
          "855:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "860:     -> g();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3198:         stdout, stderr = self.run_pdb_script(script, 'q\\n', pdbrc=pdbrc, remove_home=True)",
          "3199:         self.assertNotIn(\"SyntaxError\", stdout)",
          "3200:         self.assertIn(\"a+8=9\", stdout)",
          "3203:     def test_pdbrc_empty_line(self):",
          "3204:         \"\"\"Test that empty lines in .pdbrc are ignored.\"\"\"",
          "",
          "[Removed Lines]",
          "3201:         self.assertIn(\"-> b = 2\", stdout)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}