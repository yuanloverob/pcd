{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
      "candidate_info": {
        "commit_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/4408617e90456fc1b614f14f09ee1bddce3ac310",
        "files": [
          "modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c"
        ],
        "message": "rtpproxy+rtpengine: fair election when the first try is disabled\n\nWhen a first attempt to use a rtpproxy/rtpengine node picks a disabled\nnode, the next attempt should not consider the disabled nodes at all.\n\n(cherry picked from commit 9d5dd9539d54b2186f31d2447823cae9108b9c31)",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2608:     continue;",
          "2609:    }",
          "2610:   }",
          "2612:   node = node->rn_next;",
          "2613:  }",
          "",
          "[Removed Lines]",
          "2611:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2611:   if (!node->rn_disabled || !was_forced)",
          "2612:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ],
        "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c": [
          "File: modules/rtpproxy/rtpproxy.c -> modules/rtpproxy/rtpproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2307:     continue;",
          "2308:    }",
          "2309:   }",
          "2311:   node = node->rn_next;",
          "2312:  }",
          "",
          "[Removed Lines]",
          "2310:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2310:   if (!node->rn_disabled || !was_forced)",
          "2311:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
      "candidate_info": {
        "commit_hash": "7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7ed3f00e8b2c8bb9ec6ac5ae91598aa8d0a7792c",
        "files": [
          "modules/rtp_relay/rtp_relay_ctx.c"
        ],
        "message": "rtp_relay: reset late flag for new negotiations\n\n(cherry picked from commit 22fe3bef705e3de98b950065bb2a948789c8b3ae)",
        "before_after_code_files": [
          "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtp_relay/rtp_relay_ctx.c||modules/rtp_relay/rtp_relay_ctx.c": [
          "File: modules/rtp_relay/rtp_relay_ctx.c -> modules/rtp_relay/rtp_relay_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "742:   } else {",
          "743:    rtp_sess_set_late(ctx->main);",
          "744:   }",
          "745:  }",
          "746:  RTP_RELAY_CTX_UNLOCK(ctx);",
          "747:  if (!ret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745:  } else if (body && msg->REQ_METHOD == METHOD_INVITE) {",
          "746:   rtp_sess_reset_late(ctx->main);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35dfd3a201a91730f09b1f58998985a94d84f7a2",
      "candidate_info": {
        "commit_hash": "35dfd3a201a91730f09b1f58998985a94d84f7a2",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/35dfd3a201a91730f09b1f58998985a94d84f7a2",
        "files": [
          "modules/b2b_entities/dlg.c",
          "modules/tracer/doc/tracer_admin.xml",
          "modules/tracer/tracer.c"
        ],
        "message": "Merge pull request #2757 from nikbyte/master\n\nFix crash in tracer module when negative hop-by-hop ACK received during b2b tracing\n\n(cherry picked from commit 34f3947b48640cfede8b0d281a6d32163057c3d6)",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c",
          "modules/tracer/tracer.c||modules/tracer/tracer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092:   tm_tran = tmb.t_gett();",
          "1097:   if(method_value != METHOD_ACK)",
          "1098:   {",
          "1099:    if(method_value == METHOD_UPDATE)",
          "",
          "[Removed Lines]",
          "1095:   b2b_run_tracer( dlg, msg, tm_tran);",
          "",
          "[Added Lines]",
          "1095:      NOTE that the end2end ACK forms a separate transaction",
          "1096:      (even if TM will return a NULL transaction) and",
          "1097:      we will trace it as standalone request, while a negative hop-by-hop ACK",
          "1098:      (part of INVITE transaction) we will get T_UNDEFINED, so not to be traced",
          "1100:   if (tm_tran != T_UNDEFINED)",
          "1101:    b2b_run_tracer(dlg, msg, tm_tran);",
          "",
          "---------------"
        ],
        "modules/tracer/tracer.c||modules/tracer/tracer.c": [
          "File: modules/tracer/tracer.c -> modules/tracer/tracer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369:  SET_TRACER_CONTEXT( info );",
          "1371:  if (t==NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1371:  if (t==T_UNDEFINED) {",
          "1373:   LM_BUG(\"undefined transaction received here\\n\");",
          "1374:   return 0;",
          "1375:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
      "candidate_info": {
        "commit_hash": "ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ef2ac0d8fc9ff25283be3d9f336286c55b0bbf9b",
        "files": [
          "modules/b2b_logic_xml/b2b_logic.c",
          "modules/b2b_logic_xml/logic.c"
        ],
        "message": "b2b_logic_xml: keep compatibility with b2b_context changes",
        "before_after_code_files": [
          "modules/b2b_logic_xml/b2b_logic.c||modules/b2b_logic_xml/b2b_logic.c",
          "modules/b2b_logic_xml/logic.c||modules/b2b_logic_xml/logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_logic_xml/b2b_logic.c||modules/b2b_logic_xml/b2b_logic.c": [
          "File: modules/b2b_logic_xml/b2b_logic.c -> modules/b2b_logic_xml/b2b_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1665:  return NULL;",
          "1666: }",
          "1670: {",
          "1671:  b2bl_tuple_t *tuple;",
          "1675:  if (!tuple) {",
          "1689:     ctx->b2bl_key.s);",
          "1692:    return NULL;",
          "1693:   }",
          "1700:  }",
          "1702:  return tuple;",
          "1703: }",
          "1706: {",
          "1707:  b2bl_tuple_t *tuple;",
          "1708:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1669: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx)",
          "1672:  unsigned int hash_index, local_index;",
          "1674:  tuple = ctx->data;",
          "1677:   if (b2bl_parse_key(&ctx->b2bl_key, &hash_index, &local_index) < 0) {",
          "1678:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1679:     ctx->b2bl_key.s);",
          "1680:    return NULL;",
          "1681:   }",
          "1683:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1684:    lock_get(&b2bl_htable[hash_index].lock);",
          "1686:   tuple = b2bl_search_tuple_safe(hash_index, local_index);",
          "1687:   if (!tuple) {",
          "1688:    LM_ERR(\"Tuple [%.*s] not found\\n\", ctx->b2bl_key.len,",
          "1690:    if (b2bl_htable[hash_index].locked_by != process_no)",
          "1691:     lock_release(&b2bl_htable[hash_index].lock);",
          "1696:   ctx->data = tuple;",
          "1698:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1699:    lock_release(&b2bl_htable[hash_index].lock);",
          "1705: b2bl_tuple_t *get_ctx_tuple(void)",
          "",
          "[Added Lines]",
          "1668: static b2bl_tuple_t *ctx_search_tuple(struct b2b_context *ctx, int *locked)",
          "1673:  if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1674:   lock_get(&b2bl_htable[ctx->hash_index].lock);",
          "1676:  tuple = b2bl_search_tuple_safe(ctx->hash_index, ctx->local_index);",
          "1679:   LM_ERR(\"Tuple [%u, %u] not found\\n\", ctx->hash_index, ctx->local_index);",
          "1680:   if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1681:    lock_release(&b2bl_htable[ctx->hash_index].lock);",
          "1682:   locked = 0;",
          "1683:   return NULL;",
          "1684:  }",
          "1686:  return tuple;",
          "1687: }",
          "1690: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx, int *locked)",
          "1691: {",
          "1692:  b2bl_tuple_t *tuple;",
          "1694:  if (!ctx->init) {",
          "1696:   if (b2bl_parse_key(&ctx->b2bl_key,",
          "1697:    &ctx->hash_index, &ctx->local_index) < 0) {",
          "1698:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1702:   tuple = ctx_search_tuple(ctx, locked);",
          "1703:   if (tuple)",
          "1704:    ctx->init = 1;",
          "1705:   } else {",
          "1706:    tuple = ctx_search_tuple(ctx, locked);",
          "1712: b2bl_tuple_t *get_ctx_tuple(int *locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1718:    LM_DBG(\"b2b_logic key not set in b2b_entities context\\n\");",
          "1722:   }",
          "1725:   if (!tuple) {",
          "1726:    LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1727:     ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1721:    return ctx->data;",
          "1724:   tuple = get_entities_ctx_tuple(ctx);",
          "",
          "[Added Lines]",
          "1728:    if (!ctx->init)",
          "1729:     return NULL;",
          "1730:    else",
          "1731:     return ctx_search_tuple(ctx, locked);",
          "1734:   tuple = get_entities_ctx_tuple(ctx, locked);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1739: int pv_get_b2bl_key(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1740: {",
          "1741:  b2bl_tuple_t *tuple;",
          "1744:  if (!tuple) {",
          "1745:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1746:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1743:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1752:  int locked = 0;",
          "1754:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1749:  res->flags = PV_VAL_STR;",
          "1750:  res->rs = *tuple->key;",
          "1752:  return 0;",
          "1753: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1763:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1764:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1808:  b2b_dlginfo_t dummy_dlginfo;",
          "1809:  str callid;",
          "1810:  int i;",
          "1813:  if (!tuple) {",
          "1814:   LM_ERR(\"Failed to get the tuple from the current context\\n\");",
          "1815:   return pv_get_null(msg, param, res);",
          "1816:  }",
          "1819:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1821:  curr_entities[0] = tuple->bridge_entities[0];",
          "",
          "[Removed Lines]",
          "1812:  tuple = get_ctx_tuple();",
          "1818:  if (b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1825:  int locked = 0;",
          "1827:  tuple = get_ctx_tuple(&locked);",
          "1833:  if (!locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2038:  return 0;",
          "2039: }",
          "2042: {",
          "2043:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "2041: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple)",
          "",
          "[Added Lines]",
          "2056: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple, int *locked)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2050:   }",
          "2052:   if (!ctx->b2bl_key.s) {",
          "2054:     LM_DBG(\"tuple not created yet\\n\");",
          "2057:     return 0;",
          "2058:    } else {",
          "2060:    }",
          "2061:   } else {",
          "2063:    if (*tuple == NULL) {",
          "2064:     LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "2065:      ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "2053:    if (!ctx->data) {",
          "",
          "[Added Lines]",
          "2068:    if (!ctx->init) {",
          "2075:     if (*tuple == NULL)",
          "2076:      return -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2079: {",
          "2080:  struct b2b_ctx_val **vals;",
          "2081:  b2bl_tuple_t *tuple = NULL;",
          "2083:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "2084:   LM_ERR(\"Bad parameters!\\n\");",
          "2085:   return -1;",
          "2086:  }",
          "2089:   LM_ERR(\"Failed to get context values list\\n\");",
          "2090:   return pv_get_null(msg, param, res);",
          "2091:  }",
          "2094:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2096:  if (fetch_ctx_value(*vals, &param->pvn.u.isname.name.s, &param->pvv) != 0) {",
          "",
          "[Removed Lines]",
          "2088:  if (get_ctx_vals(&vals, &tuple) < 0) {",
          "2093:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2099:  int locked = 0;",
          "2106:  if (get_ctx_vals(&vals, &tuple, &locked) < 0) {",
          "2111:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2111: {",
          "2112:  struct b2b_ctx_val **ctx_vals = NULL;",
          "2113:  b2bl_tuple_t *tuple = NULL;",
          "2115:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "2116:   LM_ERR(\"Bad parameters!\\n\");",
          "2117:   return -1;",
          "2118:  }",
          "2121:   LM_ERR(\"Failed to get context values list\\n\");",
          "2122:   return -1;",
          "2123:  }",
          "2126:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2128:  if (val==NULL || val->flags&(PV_VAL_NONE|PV_VAL_NULL|PV_VAL_EMPTY)) {",
          "",
          "[Removed Lines]",
          "2120:  if (get_ctx_vals(&ctx_vals, &tuple) < 0) {",
          "2125:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2132:  int locked = 0;",
          "2139:  if (get_ctx_vals(&ctx_vals, &tuple, &locked) < 0) {",
          "2144:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------"
        ],
        "modules/b2b_logic_xml/logic.c||modules/b2b_logic_xml/logic.c": [
          "File: modules/b2b_logic_xml/logic.c -> modules/b2b_logic_xml/logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2775:   LM_ERR(\"Failed to get b2b context\\n\");",
          "2776:   goto error;",
          "2777:  }",
          "2781:  tuple->lifetime = params->init_timeout + get_ticks();",
          "",
          "[Removed Lines]",
          "2778:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "2778:  ctx->init = 1;",
          "2779:  ctx->hash_index = hash_index;",
          "2780:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3351:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3352:   goto error;",
          "3353:  }",
          "3357:  node = xmlNodeGetChildByName(scenario_struct->init_node, \"state\");",
          "",
          "[Removed Lines]",
          "3354:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3356:  ctx->init = 1;",
          "3357:  ctx->hash_index = hash_index;",
          "3358:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4322:   LM_ERR(\"Failed to get b2b context\\n\");",
          "4323:   goto error;",
          "4324:  }",
          "4327:  if(entity_no!=0 && entity_no!=1)",
          "4328:  {",
          "",
          "[Removed Lines]",
          "4325:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "4329:  ctx->init = 1;",
          "4330:  ctx->hash_index = hash_index;",
          "4331:  ctx->local_index = tuple->id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b93fbafed4cca67d2393f90c25710e7492b737f1",
      "candidate_info": {
        "commit_hash": "b93fbafed4cca67d2393f90c25710e7492b737f1",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b93fbafed4cca67d2393f90c25710e7492b737f1",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c",
          "modules/clusterer/doc/clusterer_admin.xml"
        ],
        "message": "clusterer: add ability to disable replication packets dispatching\n\nAdd a new \"dispatch_jobs\" modparam which controls whether the processing of\nreplicated packets is dispatched through IPC or not.\nDisabling the dispatching mechanism prevents high CPU loads caused by\nthe \"thundering herd\" problem.\n\nCredits go to Rizwan Syed and Connex Carrier Services for supporting the\ntroubleshooting of this issue.\n\n(cherry picked from commit 0c66936f3d343226930042bc463b467d8a62fde3)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h",
          "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: extern int seed_fb_interval;",
          "57: extern int sync_timeout;",
          "59: void sync_check_timer(utime_t ticks, void *param)",
          "60: {",
          "61:  cluster_info_t *cl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: int dispatch_jobs = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1354:    lock_stop_read(cl_list_lock);",
          "1355:    packet->src_id = source_id;",
          "1360:    return;",
          "1361:   }",
          "",
          "[Removed Lines]",
          "1357:    if (ipc_dispatch_mod_packet(packet, cap) < 0)",
          "1358:     LM_ERR(\"Failed to dispatch handling of module packet\\n\");",
          "",
          "[Added Lines]",
          "1359:    if (dispatch_jobs) {",
          "1360:     if (ipc_dispatch_mod_packet(packet, cap) < 0)",
          "1361:      LM_ERR(\"Failed to dispatch handling of module packet\\n\");",
          "1362:    } else {",
          "1363:     cap->packet_cb(packet);",
          "1364:    }",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h": [
          "File: modules/clusterer/clusterer.h -> modules/clusterer/clusterer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: extern str cl_internal_cap;",
          "147: extern str cl_extra_cap;",
          "149: void sync_check_timer(utime_t ticks, void *param);",
          "151: void bin_rcv_cl_packets(bin_packet_t *packet, int packet_type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: extern int dispatch_jobs;",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer_mod.c||modules/clusterer/clusterer_mod.c": [
          "File: modules/clusterer/clusterer_mod.c -> modules/clusterer/clusterer_mod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  {\"sharing_tag\",   STR_PARAM|USE_FUNC_PARAM,",
          "164:   (void*)&shtag_modparam_func},",
          "165:  {\"sync_packet_size\", INT_PARAM, &sync_packet_size },",
          "166:  {0, 0, 0}",
          "167: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:  {\"dispatch_jobs\",  INT_PARAM, &dispatch_jobs  },",
          "",
          "---------------"
        ]
      }
    }
  ]
}