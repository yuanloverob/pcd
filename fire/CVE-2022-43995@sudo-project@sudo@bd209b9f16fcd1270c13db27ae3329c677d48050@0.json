{
  "cve_id": "CVE-2022-43995",
  "cve_desc": "Sudo 1.8.0 through 1.9.12, with the crypt() password backend, contains a plugins/sudoers/auth/passwd.c array-out-of-bounds error that can result in a heap-based buffer over-read. This can be triggered by arbitrary local users with access to Sudo by entering a password of seven characters or fewer. The impact could vary depending on the system libraries, compiler, and processor architecture.",
  "repo": "sudo-project/sudo",
  "patch_hash": "bd209b9f16fcd1270c13db27ae3329c677d48050",
  "patch_info": {
    "commit_hash": "bd209b9f16fcd1270c13db27ae3329c677d48050",
    "repo": "sudo-project/sudo",
    "commit_url": "https://github.com/sudo-project/sudo/commit/bd209b9f16fcd1270c13db27ae3329c677d48050",
    "files": [
      "plugins/sudoers/auth/passwd.c"
    ],
    "message": "Fix CVE-2022-43995, potential heap overflow for passwords < 8 characters. Starting with sudo 1.8.0 the plaintext password buffer is dynamically sized so it is not safe to assume that it is at least 9 bytes in size. Found by Hugo Lefeuvre (University of Manchester) with ConfFuzz.",
    "before_after_code_files": [
      "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c"
    ]
  },
  "patch_diff": {
    "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c": [
      "File: plugins/sudoers/auth/passwd.c -> plugins/sudoers/auth/passwd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: int",
      "64: sudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)",
      "65: {",
      "67:     char *pw_epasswd = auth->data;",
      "68:     size_t pw_len;",
      "69:     int matched = 0;",
      "",
      "[Removed Lines]",
      "66:     char sav, *epass;",
      "",
      "[Added Lines]",
      "66:     char des_pass[9], *epass;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     pw_len = strlen(pw_epasswd);",
      "",
      "[Removed Lines]",
      "80:     sav = pass[8];",
      "82:     if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len))",
      "83:  pass[8] = '\\0';",
      "",
      "[Added Lines]",
      "80:     if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {",
      "81:  strlcpy(des_pass, pass, sizeof(des_pass));",
      "82:  pass = des_pass;",
      "83:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     epass = (char *) crypt(pass, pw_epasswd);",
      "92:     if (epass != NULL) {",
      "93:  if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)",
      "94:      matched = !strncmp(pw_epasswd, epass, DESLEN);",
      "",
      "[Removed Lines]",
      "91:     pass[8] = sav;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7873f8334c8d31031f8cfa83bd97ac6029309e4f",
      "candidate_info": {
        "commit_hash": "7873f8334c8d31031f8cfa83bd97ac6029309e4f",
        "repo": "sudo-project/sudo",
        "commit_url": "https://github.com/sudo-project/sudo/commit/7873f8334c8d31031f8cfa83bd97ac6029309e4f",
        "files": [
          "plugins/sudoers/auth/passwd.c",
          "plugins/sudoers/auth/sudo_auth.c",
          "plugins/sudoers/auth/sudo_auth.h",
          "plugins/sudoers/lookup.c",
          "plugins/sudoers/match.c",
          "plugins/sudoers/parse.h"
        ],
        "message": "Try to make sudo less vulnerable to ROWHAMMER attacks.\n\nWe now use ROWHAMMER-resistent values for ALLOW, DENY, AUTH_SUCCESS,\nAUTH_FAILURE, AUTH_ERROR and AUTH_NONINTERACTIVE.  In addition, we\nexplicitly test for expected values instead of using a negated test\nagainst an error value.  In the parser match functions this means\nexplicitly checking for ALLOW or DENY instead of accepting anything\nthat is not set to UNSPEC.\n\nThanks to Andrew J. Adiletta, M. Caner Tol, Yarkin Doroz, and Berk\nSunar, all affiliated with the Vernam Applied Cryptography and\nCybersecurity Lab at Worcester Polytechnic Institute, for the report.\nPaper preprint: https://arxiv.org/abs/2309.02545",
        "before_after_code_files": [
          "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c",
          "plugins/sudoers/auth/sudo_auth.c||plugins/sudoers/auth/sudo_auth.c",
          "plugins/sudoers/auth/sudo_auth.h||plugins/sudoers/auth/sudo_auth.h",
          "plugins/sudoers/lookup.c||plugins/sudoers/lookup.c",
          "plugins/sudoers/match.c||plugins/sudoers/match.c",
          "plugins/sudoers/parse.h||plugins/sudoers/parse.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c"
          ],
          "candidate": [
            "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c"
          ]
        }
      },
      "candidate_diff": {
        "plugins/sudoers/auth/passwd.c||plugins/sudoers/auth/passwd.c": [
          "File: plugins/sudoers/auth/passwd.c -> plugins/sudoers/auth/passwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     char des_pass[9], *epass;",
          "69:     char *pw_epasswd = auth->data;",
          "70:     size_t pw_len;",
          "72:     debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);",
          "",
          "[Removed Lines]",
          "71:     int matched = 0;",
          "",
          "[Added Lines]",
          "71:     int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     pw_len = strlen(pw_epasswd);",
          "82:     if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {",
          "84:  pass = des_pass;",
          "85:     }",
          "",
          "[Removed Lines]",
          "83:  strlcpy(des_pass, pass, sizeof(des_pass));",
          "",
          "[Added Lines]",
          "83:  (void)strlcpy(des_pass, pass, sizeof(des_pass));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     epass = (char *) crypt(pass, pw_epasswd);",
          "93:     if (epass != NULL) {",
          "98:     }",
          "100:     explicit_bzero(des_pass, sizeof(des_pass));",
          "103: }",
          "104: #else",
          "105: int",
          "",
          "[Removed Lines]",
          "94:  if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)",
          "95:      matched = !strncmp(pw_epasswd, epass, DESLEN);",
          "96:  else",
          "97:      matched = !strcmp(pw_epasswd, epass);",
          "102:     debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);",
          "",
          "[Added Lines]",
          "93:     ret = AUTH_FAILURE;",
          "95:  if (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN) {",
          "96:      if (strncmp(pw_epasswd, epass, DESLEN) == 0)",
          "97:   ret = AUTH_SUCCESS;",
          "98:  } else {",
          "99:      if (strcmp(pw_epasswd, epass) == 0)",
          "100:   ret = AUTH_SUCCESS;",
          "101:  }",
          "106:     debug_return_int(ret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     const char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)",
          "108: {",
          "109:     char *pw_passwd = auth->data;",
          "111:     debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);",
          "117: }",
          "118: #endif",
          "",
          "[Removed Lines]",
          "110:     int matched;",
          "114:     matched = !strcmp(pass, pw_passwd);",
          "116:     debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);",
          "",
          "[Added Lines]",
          "114:     int ret;",
          "118:     if (strcmp(pass, pw_passwd) == 0)",
          "119:  ret = AUTH_SUCCESS;",
          "120:     else",
          "121:  ret = AUTH_FAILURE;",
          "123:     debug_return_int(ret);",
          "",
          "---------------"
        ],
        "plugins/sudoers/auth/sudo_auth.c||plugins/sudoers/auth/sudo_auth.c": [
          "File: plugins/sudoers/auth/sudo_auth.c -> plugins/sudoers/auth/sudo_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  if (auth->init && !IS_DISABLED(auth)) {",
          "118:      status = (auth->init)(ctx, pw, auth);",
          "120:   SET(auth->flags, FLAG_DISABLED);",
          "123:  }",
          "124:     }",
          "",
          "[Removed Lines]",
          "119:      if (status == AUTH_FAILURE)",
          "121:      else if (status == AUTH_ERROR)",
          "",
          "[Added Lines]",
          "119:      switch (status) {",
          "120:      case AUTH_SUCCESS:",
          "121:   break;",
          "122:      case AUTH_FAILURE:",
          "124:   break;",
          "125:      default:",
          "127:   debug_return_int(-1);",
          "128:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:  }",
          "167:     }",
          "170: }",
          "",
          "[Removed Lines]",
          "169:     debug_return_int(status == AUTH_ERROR ? -1 : 0);",
          "",
          "[Added Lines]",
          "175:     debug_return_int(0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:     for (auth = auth_switch; auth->name; auth++) {",
          "210:  if (auth->cleanup && !IS_DISABLED(auth)) {",
          "211:      int status = (auth->cleanup)(ctx, pw, auth, force);",
          "214:   debug_return_int(-1);",
          "215:      }",
          "",
          "[Removed Lines]",
          "212:      if (status == AUTH_ERROR) {",
          "",
          "[Added Lines]",
          "218:      if (status != AUTH_SUCCESS) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306:       SET(auth->flags, FLAG_DISABLED);",
          "307:   else if (status == AUTH_NONINTERACTIVE)",
          "308:       goto done;",
          "311:      }",
          "312:  }",
          "",
          "[Removed Lines]",
          "309:   else if (status == AUTH_ERROR || user_interrupted())",
          "",
          "[Added Lines]",
          "315:   else if (status != AUTH_SUCCESS || user_interrupted())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:  case AUTH_NONINTERACTIVE:",
          "366:      SET(validated, FLAG_NO_USER_INPUT);",
          "367:      FALLTHROUGH;",
          "369:  default:",
          "370:      log_auth_failure(ctx, validated, 0);",
          "371:      ret = -1;",
          "",
          "[Removed Lines]",
          "368:  case AUTH_ERROR:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382: int",
          "383: sudo_auth_begin_session(const struct sudoers_context *ctx, struct passwd *pw,",
          "384:     char **user_env[])",
          "385: {",
          "386:     sudo_auth *auth;",
          "387:     debug_decl(sudo_auth_begin_session, SUDOERS_DEBUG_AUTH);",
          "389:     for (auth = auth_switch; auth->name; auth++) {",
          "390:  if (auth->begin_session && !IS_DISABLED(auth)) {",
          "391:      int status = (auth->begin_session)(ctx, pw, user_env, auth);",
          "395:      }",
          "396:  }",
          "397:     }",
          "399: }",
          "401: bool",
          "",
          "[Removed Lines]",
          "392:      if (status != AUTH_SUCCESS) {",
          "394:   debug_return_int(-1);",
          "398:     debug_return_int(1);",
          "",
          "[Added Lines]",
          "392:     int ret = true;",
          "398:      switch (status) {",
          "399:      case AUTH_SUCCESS:",
          "400:   break;",
          "401:      case AUTH_FAILURE:",
          "402:   ret = false;",
          "403:   break;",
          "404:      default:",
          "406:   ret = -1;",
          "407:   break;",
          "411:     debug_return_int(ret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "421: int",
          "422: sudo_auth_end_session(void)",
          "423: {",
          "424:     sudo_auth *auth;",
          "425:     int status;",
          "426:     debug_decl(sudo_auth_end_session, SUDOERS_DEBUG_AUTH);",
          "428:     for (auth = auth_switch; auth->name; auth++) {",
          "429:  if (auth->end_session && !IS_DISABLED(auth)) {",
          "430:      status = (auth->end_session)(auth);",
          "434:      }",
          "435:  }",
          "436:     }",
          "438: }",
          "",
          "[Removed Lines]",
          "431:      if (status == AUTH_ERROR) {",
          "433:   debug_return_int(-1);",
          "437:     debug_return_int(1);",
          "",
          "[Added Lines]",
          "438:     int ret = true;",
          "445:      switch (status) {",
          "446:      case AUTH_SUCCESS:",
          "447:   break;",
          "448:      case AUTH_FAILURE:",
          "449:   ret = false;",
          "450:   break;",
          "451:      default:",
          "453:   ret = -1;",
          "454:   break;",
          "458:     debug_return_int(ret);",
          "",
          "---------------"
        ],
        "plugins/sudoers/auth/sudo_auth.h||plugins/sudoers/auth/sudo_auth.h": [
          "File: plugins/sudoers/auth/sudo_auth.h -> plugins/sudoers/auth/sudo_auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #ifndef SUDO_AUTH_H",
          "20: #define SUDO_AUTH_H",
          "29: typedef struct sudo_auth {",
          "",
          "[Removed Lines]",
          "23: #define AUTH_SUCCESS  0",
          "24: #define AUTH_FAILURE  1",
          "25: #define AUTH_INTR  2",
          "26: #define AUTH_ERROR  3",
          "27: #define AUTH_NONINTERACTIVE 4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "plugins/sudoers/lookup.c||plugins/sudoers/lookup.c": [
          "File: plugins/sudoers/lookup.c -> plugins/sudoers/lookup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:      int user_match = userlist_matches(nss->parse_tree, ctx->user.pw,",
          "101:   &us->users);",
          "102:      if (user_match != ALLOW) {",
          "104:       callback(nss->parse_tree, us, user_match, NULL, UNSPEC,",
          "105:    NULL, UNSPEC, UNSPEC, UNSPEC, cb_data);",
          "106:   }",
          "",
          "[Removed Lines]",
          "103:   if (callback != NULL && user_match != UNSPEC) {",
          "",
          "[Added Lines]",
          "103:   if (callback != NULL && user_match == DENY) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:        host_match, cs, date_match, runas_match,",
          "190:        cmnd_match, cb_data);",
          "191:       }",
          "",
          "[Removed Lines]",
          "192:       if (cmnd_match != UNSPEC) {",
          "",
          "[Added Lines]",
          "192:       if (SPECIFIED(cmnd_match)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:     TAILQ_FOREACH_REVERSE(us, &nss->parse_tree->userspecs, userspec_list, entries) {",
          "246:  int user_match = userlist_matches(nss->parse_tree, ctx->user.pw, &us->users);",
          "247:  if (user_match != ALLOW) {",
          "249:   callback(nss->parse_tree, us, user_match, NULL, UNSPEC, NULL,",
          "250:       UNSPEC, UNSPEC, UNSPEC, cb_data);",
          "251:      }",
          "",
          "[Removed Lines]",
          "248:      if (callback != NULL && user_match != UNSPEC) {",
          "",
          "[Added Lines]",
          "248:      if (callback != NULL && user_match == DENY) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:    cs, date_match, runas_match, cmnd_match, cb_data);",
          "291:   }",
          "",
          "[Removed Lines]",
          "293:   if (cmnd_match != UNSPEC) {",
          "",
          "[Added Lines]",
          "293:   if (SPECIFIED(cmnd_match)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "543:  m = sudoers_lookup_check(nss, ctx, &validated, &info, now, callback,",
          "544:      cb_data, &cs, &defs);",
          "546:      match = m;",
          "547:      parse_tree = nss->parse_tree;",
          "548:  }",
          "",
          "[Removed Lines]",
          "545:  if (m != UNSPEC) {",
          "",
          "[Added Lines]",
          "545:  if (SPECIFIED(m)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "550:  if (!sudo_nss_can_continue(nss, m))",
          "551:      break;",
          "552:     }",
          "554:  if (info.cmnd_path != NULL) {",
          "556:      free(ctx->user.cmnd);",
          "",
          "[Removed Lines]",
          "553:     if (match != UNSPEC) {",
          "",
          "[Added Lines]",
          "553:     if (SPECIFIED(match)) {",
          "",
          "---------------"
        ],
        "plugins/sudoers/match.c||plugins/sudoers/match.c": [
          "File: plugins/sudoers/match.c -> plugins/sudoers/match.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:      if ((a = alias_get(parse_tree, m->name, USERALIAS)) != NULL) {",
          "93:   const int rc = userlist_matches(parse_tree, pw, &a->members);",
          "95:       if (m->negated) {",
          "96:    matched = rc == ALLOW ? DENY : ALLOW;",
          "97:       } else {",
          "",
          "[Removed Lines]",
          "94:   if (rc != UNSPEC) {",
          "",
          "[Added Lines]",
          "94:   if (SPECIFIED(rc)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     debug_decl(userlist_matches, SUDOERS_DEBUG_MATCH);",
          "125:     TAILQ_FOREACH_REVERSE(m, list, member_list, entries) {",
          "127:      break;",
          "128:     }",
          "129:     debug_return_int(matched);",
          "",
          "[Removed Lines]",
          "126:  if ((matched = user_matches(parse_tree, pw, m)) != UNSPEC)",
          "",
          "[Added Lines]",
          "126:  matched = user_matches(parse_tree, pw, m);",
          "127:  if (SPECIFIED(matched))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:   if (a != NULL) {",
          "185:       const int rc = runas_userlist_matches(parse_tree,",
          "186:    &a->members, matching_user);",
          "188:    if (m->negated) {",
          "189:        user_matched = rc == ALLOW ? DENY : ALLOW;",
          "190:    } else {",
          "",
          "[Removed Lines]",
          "187:       if (rc != UNSPEC) {",
          "",
          "[Added Lines]",
          "188:       if (SPECIFIED(rc)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:       user_matched = m->negated ? DENY : ALLOW;",
          "212:   break;",
          "213:  }",
          "215:      if (matching_user != NULL && m->type != ALIAS)",
          "217:      break;",
          "",
          "[Removed Lines]",
          "214:  if (user_matched != UNSPEC) {",
          "",
          "[Added Lines]",
          "215:  if (SPECIFIED(user_matched)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:       if (a != NULL) {",
          "247:    const int rc = runas_grouplist_matches(parse_tree,",
          "248:        &a->members, matching_group);",
          "250:        if (m->negated) {",
          "251:     group_matched = rc == ALLOW ? DENY : ALLOW;",
          "252:        } else {",
          "",
          "[Removed Lines]",
          "249:    if (rc != UNSPEC) {",
          "",
          "[Added Lines]",
          "250:    if (SPECIFIED(rc)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:    group_matched = m->negated ? DENY : ALLOW;",
          "263:       break;",
          "264:      }",
          "266:   if (matching_group != NULL && m->type != ALIAS)",
          "268:   break;",
          "269:      }",
          "270:  }",
          "271:     }",
          "273:  struct gid_list *runas_groups;",
          "",
          "[Removed Lines]",
          "265:      if (group_matched != UNSPEC) {",
          "272:     if (group_matched == UNSPEC) {",
          "",
          "[Added Lines]",
          "266:      if (SPECIFIED(group_matched)) {",
          "273:     if (!SPECIFIED(group_matched)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "350:     TAILQ_FOREACH_REVERSE(m, list, member_list, entries) {",
          "351:  matched = host_matches(parse_tree, pw, lhost, shost, m);",
          "353:      break;",
          "354:     }",
          "355:     debug_return_int(matched);",
          "",
          "[Removed Lines]",
          "352:  if (matched != UNSPEC)",
          "",
          "[Added Lines]",
          "353:  if (SPECIFIED(matched))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403:   const int rc = hostlist_matches_int(parse_tree, pw, lhost,",
          "404:       shost, &a->members);",
          "406:       if (m->negated) {",
          "407:    matched = rc == ALLOW ? DENY : ALLOW;",
          "408:       } else {",
          "",
          "[Removed Lines]",
          "405:   if (rc != UNSPEC) {",
          "",
          "[Added Lines]",
          "406:   if (SPECIFIED(rc)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "441:     TAILQ_FOREACH_REVERSE(m, list, member_list, entries) {",
          "442:  matched = cmnd_matches(parse_tree, m, runchroot, info);",
          "444:      break;",
          "445:     }",
          "446:     debug_return_int(matched);",
          "",
          "[Removed Lines]",
          "443:  if (matched != UNSPEC)",
          "",
          "[Added Lines]",
          "444:  if (SPECIFIED(matched))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471:      a = alias_get(parse_tree, m->name, CMNDALIAS);",
          "472:      if (a != NULL) {",
          "473:   rc = cmndlist_matches(parse_tree, &a->members, runchroot, info);",
          "475:       if (m->negated) {",
          "476:    matched = rc == ALLOW ? DENY : ALLOW;",
          "477:       } else {",
          "",
          "[Removed Lines]",
          "474:   if (rc != UNSPEC) {",
          "",
          "[Added Lines]",
          "475:   if (SPECIFIED(rc)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "511:      if (a != NULL) {",
          "512:   TAILQ_FOREACH_REVERSE(m, &a->members, member_list, entries) {",
          "513:       matched = cmnd_matches_all(parse_tree, m, runchroot, info);",
          "515:    if (negated)",
          "516:        matched = matched == ALLOW ? DENY : ALLOW;",
          "517:    break;",
          "",
          "[Removed Lines]",
          "514:       if (matched != UNSPEC) {",
          "",
          "[Added Lines]",
          "515:       if (SPECIFIED(matched)) {",
          "",
          "---------------"
        ],
        "plugins/sudoers/parse.h||plugins/sudoers/parse.h": [
          "File: plugins/sudoers/parse.h -> plugins/sudoers/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # define SUDOERS_NAME_MATCH",
          "37: #endif",
          "39: #undef UNSPEC",
          "40: #define UNSPEC -1",
          "45: #undef IMPLIED",
          "46: #define IMPLIED  2",
          "",
          "[Removed Lines]",
          "41: #undef DENY",
          "42: #define DENY  0",
          "43: #undef ALLOW",
          "44: #define ALLOW  1",
          "",
          "[Added Lines]",
          "40: #undef ALLOW",
          "44: #undef DENY",
          "59: #define SPECIFIED(_v) ((_v) == ALLOW || (_v) == DENY)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: #define TAG_SET(tt) \\",
          "",
          "[Removed Lines]",
          "97:     ((tt) != UNSPEC && (tt) != IMPLIED)",
          "",
          "[Added Lines]",
          "110:     ((tt) == true || (tt) == false)",
          "",
          "---------------"
        ]
      }
    }
  ]
}