{
  "cve_id": "CVE-2023-48231",
  "cve_desc": "Vim is an open source command line text editor. When closing a window, vim may try to access already freed window structure. Exploitation beyond crashing the application has not been shown to be viable. This issue has been addressed in commit `25aabc2b` which has been included in release version 9.0.2106. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "vim/vim",
  "patch_hash": "25aabc2b8ee1e19ced6f4da9d866cf9378fc4c5a",
  "patch_info": {
    "commit_hash": "25aabc2b8ee1e19ced6f4da9d866cf9378fc4c5a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/25aabc2b8ee1e19ced6f4da9d866cf9378fc4c5a",
    "files": [
      "src/testdir/crash/poc1",
      "src/testdir/test_crash.vim",
      "src/version.c",
      "src/window.c"
    ],
    "message": "patch 9.0.2106: [security]: Use-after-free in win_close()\n\nProblem:  [security]: Use-after-free in win_close()\nSolution: Check window is valid, before accessing it\n\nIf the current window structure is no longer valid (because a previous\nautocommand has already freed this window), fail and return before\nattempting to set win->w_closing variable.\n\nAdd a test to trigger ASAN in CI\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
      "src/version.c||src/version.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
      "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:   call delete('X_crash1_result.txt')",
      "111: endfunc",
      "113: func Test_crash2()",
      "114:   \" The following used to crash Vim",
      "115:   let opts = #{wait_for_ruler: 0, rows: 20}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113: func Test_crash1_2()",
      "114:   CheckNotBSD",
      "115:   CheckExecutable dash",
      "117:   \" The following used to crash Vim",
      "118:   let opts = #{cmd: 'sh'}",
      "119:   let vim  = GetVimProg()",
      "120:   let result = 'X_crash1_1_result.txt'",
      "122:   let buf = RunVimInTerminal('sh', opts)",
      "124:   let file = 'crash/poc1'",
      "125:   let cmn_args = \"%s -u NONE -i NONE -n -e -s -S %s -c ':qa!'\"",
      "126:   let args = printf(cmn_args, vim, file)",
      "127:   call term_sendkeys(buf, args ..",
      "128:     \\ '  && echo \"crash 1: [OK]\" > '.. result .. \"\\<cr>\")",
      "129:   call TermWait(buf, 150)",
      "131:   \" clean up",
      "132:   exe buf .. \"bw!\"",
      "134:   exe \"sp \" .. result",
      "136:   let expected = [",
      "137:       \\ 'crash 1: [OK]',",
      "138:       \\ ]",
      "140:   call assert_equal(expected, getline(1, '$'))",
      "141:   bw!",
      "143:   call delete(result)",
      "144: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705: static int included_patches[] =",
      "708:     2105,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     2106,",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2682:      reset_VIsual_and_resel(); // stop Visual mode",
      "2684:      other_buffer = TRUE;",
      "2685:      win->w_closing = TRUE;",
      "2686:      apply_autocmds(EVENT_BUFLEAVE, NULL, NULL, FALSE, curbuf);",
      "2687:      if (!win_valid(win))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2685:      if (!win_valid(win))",
      "2686:   return FAIL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abfa13ebe92d81aaf66669c428d767847b577453",
      "candidate_info": {
        "commit_hash": "abfa13ebe92d81aaf66669c428d767847b577453",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/abfa13ebe92d81aaf66669c428d767847b577453",
        "files": [
          "src/ex_cmds.c",
          "src/testdir/crash/poc_ex_substitute",
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.2143: [security]: buffer-overflow in ex_substitute\n\nProblem:  [security]: buffer-overflow in ex_substitute\nSolution: clear memory after allocating\n\nWhen allocating the new_start pointer in ex_substitute() the memory\npointer points to some garbage that the following for loop in\nex_cmds.c:4743 confuses and causes it to accessing the new_start pointer\nbeyond it's size, leading to a buffer-overlow.\n\nSo fix this by using alloc_clear() instead of alloc(), which will\nclear the memory by NUL and therefore cause the loop to terminate\ncorrectly.\n\nReported by @henices, thanks!\n\ncloses: #13596\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4652:       new_start_len = needed_len + 50;",
          "4654:    goto outofmem;",
          "4656:       new_end = new_start;",
          "",
          "[Removed Lines]",
          "4653:       if ((new_start = alloc(new_start_len)) == NULL)",
          "",
          "[Added Lines]",
          "4653:       if ((new_start = alloc_clear(new_start_len)) == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4667:       if (needed_len > (int)new_start_len)",
          "4668:       {",
          "4669:    new_start_len = needed_len + 50;",
          "4671:    {",
          "4672:        vim_free(new_start);",
          "4673:        goto outofmem;",
          "",
          "[Removed Lines]",
          "4670:    if ((p1 = alloc(new_start_len)) == NULL)",
          "",
          "[Added Lines]",
          "4670:    if ((p1 = alloc_clear(new_start_len)) == NULL)",
          "",
          "---------------"
        ],
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   \" The following used to crash Vim",
          "118:   let opts = #{cmd: 'sh'}",
          "119:   let vim  = GetVimProg()",
          "122:   let buf = RunVimInTerminal('sh', opts)",
          "",
          "[Removed Lines]",
          "120:   let result = 'X_crash1_1_result.txt'",
          "",
          "[Added Lines]",
          "120:   let result = 'X_crash1_2_result.txt'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     \\ ' ; echo \"crash 4: [OK]\" >> '.. result .. \"\\<cr>\")",
          "150:   call TermWait(buf, 150)",
          "152:   \" clean up",
          "153:   exe buf .. \"bw!\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   let file = 'crash/poc_ex_substitute'",
          "153:   let cmn_args = \"%s -u NONE -i NONE -n -e -s -S %s -c ':qa!'\"",
          "154:   let args = printf(cmn_args, vim, file)",
          "155:   \" just make sure it runs, we don't care about the resulting echo",
          "156:   call term_sendkeys(buf, args .. \"\\<cr>\")",
          "157:   \" There is no output generated in Github CI for the asan clang build.",
          "158:   \" so just skip generating the ouput.",
          "159:   \" call term_sendkeys(buf, args ..",
          "160:   \"   \\ ' &&  echo \"crash 5: [OK]\" >> '.. result .. \"\\<cr>\")",
          "161:   call TermWait(buf, 150)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2142,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2143,",
          "",
          "---------------"
        ]
      }
    }
  ]
}