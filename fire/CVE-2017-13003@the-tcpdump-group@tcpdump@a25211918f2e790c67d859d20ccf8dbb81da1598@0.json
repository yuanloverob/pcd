{
  "cve_id": "CVE-2017-13003",
  "cve_desc": "The LMP parser in tcpdump before 4.9.2 has a buffer over-read in print-lmp.c:lmp_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "a25211918f2e790c67d859d20ccf8dbb81da1598",
  "patch_info": {
    "commit_hash": "a25211918f2e790c67d859d20ccf8dbb81da1598",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/a25211918f2e790c67d859d20ccf8dbb81da1598",
    "files": [
      "extract.h",
      "print-lmp.c",
      "tests/TESTLIST",
      "tests/lmpv1_busyloop.out",
      "tests/lmpv1_busyloop.pcap"
    ],
    "message": "CVE-2017-13003/Clean up the LMP dissector.\n\nDo a lot more bounds and length checks.\n\nAdd a EXTRACT_8BITS() macro, for completeness, and so as not to confuse\npeople into thinking that, to fetch a 1-byte value from a packet, they\nneed to use EXTRACT_16BITS() to fetch a 2-byte value and then use\nshifting and masking to extract the desired byte.  Use that rather than\nusing EXTRACT_16BITS() to fetch a 2-byte value and then shifting and\nmasking to extract the desired byte.\n\nDon't treat IPv4 addresses and unnumbered interface IDs the same; the\nfirst should be printed as an IPv4 address but the latter should just be\nprinted as numbers.  Handle IPv6 addresses in more object types while\nwe're at it.\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom\u00e4ki.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "extract.h||extract.h",
      "print-lmp.c||print-lmp.c"
    ]
  },
  "patch_diff": {
    "extract.h||extract.h": [
      "File: extract.h -> extract.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: #define EXTRACT_8BITS(p) (*(p))",
      "27: #define EXTRACT_LE_8BITS(p) (*(p))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "230: #define EXTRACT_LE_16BITS(p) \\",
      "231:  ((uint16_t)(((uint16_t)(*((const uint8_t *)(p) + 1)) << 8) | \\",
      "232:              ((uint16_t)(*((const uint8_t *)(p) + 0)) << 0)))",
      "",
      "[Removed Lines]",
      "229: #define EXTRACT_LE_8BITS(p) (*(p))",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "print-lmp.c||print-lmp.c": [
      "File: print-lmp.c -> print-lmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:     { 0, NULL}",
      "354: };",
      "356: void",
      "357: lmp_print(netdissect_options *ndo,",
      "358:           register const u_char *pptr, register u_int len)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "357: static int",
      "358: lmp_print_data_link_subobjs(netdissect_options *ndo, const u_char *obj_tptr,",
      "359:                             int total_subobj_len, int offset)",
      "360: {",
      "361:     int hexdump = FALSE;",
      "362:     int subobj_type, subobj_len;",
      "365:         float f;",
      "366:         uint32_t i;",
      "367:     } bw;",
      "369:     while (total_subobj_len > 0 && hexdump == FALSE ) {",
      "370:  subobj_type = EXTRACT_8BITS(obj_tptr+offset);",
      "371:  subobj_len  = EXTRACT_8BITS(obj_tptr+offset+1);",
      "372:  ND_PRINT((ndo, \"\\n\\t    Subobject, Type: %s (%u), Length: %u\",",
      "373:   tok2str(lmp_data_link_subobj,",
      "374:    \"Unknown\",",
      "375:    subobj_type),",
      "376:    subobj_type,",
      "377:    subobj_len));",
      "378:  if (subobj_len < 4) {",
      "379:      ND_PRINT((ndo, \" (too short)\"));",
      "380:      break;",
      "381:  }",
      "382:  if ((subobj_len % 4) != 0) {",
      "383:      ND_PRINT((ndo, \" (not a multiple of 4)\"));",
      "384:      break;",
      "385:  }",
      "386:  if (total_subobj_len < subobj_len) {",
      "387:      ND_PRINT((ndo, \" (goes past the end of the object)\"));",
      "388:      break;",
      "389:  }",
      "390:  switch(subobj_type) {",
      "391:  case INT_SWITCHING_TYPE_SUBOBJ:",
      "392:      ND_PRINT((ndo, \"\\n\\t      Switching Type: %s (%u)\",",
      "393:   tok2str(gmpls_switch_cap_values,",
      "394:    \"Unknown\",",
      "395:    EXTRACT_8BITS(obj_tptr+offset+2)),",
      "396:   EXTRACT_8BITS(obj_tptr+offset+2)));",
      "397:      ND_PRINT((ndo, \"\\n\\t      Encoding Type: %s (%u)\",",
      "398:   tok2str(gmpls_encoding_values,",
      "399:    \"Unknown\",",
      "400:    EXTRACT_8BITS(obj_tptr+offset+3)),",
      "401:   EXTRACT_8BITS(obj_tptr+offset+3)));",
      "402:      bw.i = EXTRACT_32BITS(obj_tptr+offset+4);",
      "403:      ND_PRINT((ndo, \"\\n\\t      Min Reservable Bandwidth: %.3f Mbps\",",
      "404:                 bw.f*8/1000000));",
      "405:      bw.i = EXTRACT_32BITS(obj_tptr+offset+8);",
      "406:      ND_PRINT((ndo, \"\\n\\t      Max Reservable Bandwidth: %.3f Mbps\",",
      "407:                 bw.f*8/1000000));",
      "408:      break;",
      "409:  case WAVELENGTH_SUBOBJ:",
      "410:      ND_PRINT((ndo, \"\\n\\t      Wavelength: %u\",",
      "411:   EXTRACT_32BITS(obj_tptr+offset+4)));",
      "412:      break;",
      "413:  default:",
      "415:      hexdump=TRUE;",
      "416:      break;",
      "417:  }",
      "418:  total_subobj_len-=subobj_len;",
      "419:  offset+=subobj_len;",
      "420:     }",
      "421:     return (hexdump);",
      "422: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "360:     const struct lmp_common_header *lmp_com_header;",
      "361:     const struct lmp_object_header *lmp_obj_header;",
      "362:     const u_char *tptr,*obj_tptr;",
      "364:     int hexdump;",
      "369:         float f;",
      "",
      "[Removed Lines]",
      "363:     int tlen,lmp_obj_len,lmp_obj_ctype,obj_tlen;",
      "365:     int offset,subobj_type,subobj_len,total_subobj_len;",
      "366:     int link_type;",
      "",
      "[Added Lines]",
      "431:     u_int tlen,lmp_obj_len,lmp_obj_ctype,obj_tlen;",
      "433:     u_int offset;",
      "434:     u_int link_type;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "401:            tok2str(lmp_msg_type_values, \"unknown, type: %u\",lmp_com_header->msg_type),",
      "402:            bittok2str(lmp_header_flag_values,\"none\",lmp_com_header->flags),",
      "403:            tlen));",
      "405:     tptr+=sizeof(const struct lmp_common_header);",
      "406:     tlen-=sizeof(const struct lmp_common_header);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:     if (tlen < sizeof(const struct lmp_common_header)) {",
      "473:         ND_PRINT((ndo, \" (too short)\"));",
      "474:         return;",
      "475:     }",
      "476:     if (tlen > len) {",
      "477:         ND_PRINT((ndo, \" (too long)\"));",
      "478:         tlen = len;",
      "479:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "413:         lmp_obj_len=EXTRACT_16BITS(lmp_obj_header->length);",
      "414:         lmp_obj_ctype=(lmp_obj_header->ctype)&0x7f;",
      "419:         ND_PRINT((ndo, \"\\n\\t  %s Object (%u), Class-Type: %s (%u) Flags: [%snegotiable], length: %u\",",
      "420:                tok2str(lmp_obj_values,",
      "421:                        \"Unknown\",",
      "",
      "[Removed Lines]",
      "416:         if(lmp_obj_len % 4 || lmp_obj_len < 4)",
      "417:             return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "428:                (lmp_obj_header->ctype)&0x80 ? \"\" : \"non-\",",
      "429:                lmp_obj_len));",
      "431:         obj_tptr=tptr+sizeof(struct lmp_object_header);",
      "432:         obj_tlen=lmp_obj_len-sizeof(struct lmp_object_header);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "504:         if (lmp_obj_len < 4) {",
      "505:             ND_PRINT((ndo, \" (too short)\"));",
      "506:             return;",
      "507:         }",
      "508:         if ((lmp_obj_len % 4) != 0) {",
      "509:             ND_PRINT((ndo, \" (not a multiple of 4)\"));",
      "510:             return;",
      "511:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "441:             switch(lmp_obj_ctype) {",
      "442:             case LMP_CTYPE_LOC:",
      "443:             case LMP_CTYPE_RMT:",
      "444:                 ND_PRINT((ndo, \"\\n\\t    Control Channel ID: %u (0x%08x)\",",
      "445:                        EXTRACT_32BITS(obj_tptr),",
      "446:                        EXTRACT_32BITS(obj_tptr)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "526:                 if (obj_tlen != 4) {",
      "527:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "528:                     break;",
      "529:                 }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "456:             switch(lmp_obj_ctype) {",
      "457:             case LMP_CTYPE_IPV4_LOC:",
      "458:             case LMP_CTYPE_IPV4_RMT:",
      "459:                 ND_PRINT((ndo, \"\\n\\t    IPv4 Link ID: %s (0x%08x)\",",
      "460:                        ipaddr_string(ndo, obj_tptr),",
      "461:                        EXTRACT_32BITS(obj_tptr)));",
      "462:                 break;",
      "463:             case LMP_CTYPE_IPV6_LOC:",
      "464:             case LMP_CTYPE_IPV6_RMT:",
      "465:                 ND_PRINT((ndo, \"\\n\\t    IPv6 Link ID: %s (0x%08x)\",",
      "466:                        ip6addr_string(ndo, obj_tptr),",
      "467:                        EXTRACT_32BITS(obj_tptr)));",
      "468:                 break;",
      "469:             case LMP_CTYPE_UNMD_LOC:",
      "470:             case LMP_CTYPE_UNMD_RMT:",
      "471:                 ND_PRINT((ndo, \"\\n\\t    Link ID: %u (0x%08x)\",",
      "472:                        EXTRACT_32BITS(obj_tptr),",
      "473:                        EXTRACT_32BITS(obj_tptr)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545:                 if (obj_tlen != 4) {",
      "546:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "547:                     break;",
      "548:                 }",
      "555:                 if (obj_tlen != 16) {",
      "556:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "557:                     break;",
      "558:                 }",
      "565:                 if (obj_tlen != 4) {",
      "566:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "567:                     break;",
      "568:                 }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "480:         case LMP_OBJ_MESSAGE_ID:",
      "481:             switch(lmp_obj_ctype) {",
      "482:             case LMP_CTYPE_1:",
      "483:                 ND_PRINT((ndo, \"\\n\\t    Message ID: %u (0x%08x)\",",
      "484:                        EXTRACT_32BITS(obj_tptr),",
      "485:                        EXTRACT_32BITS(obj_tptr)));",
      "486:                 break;",
      "487:             case LMP_CTYPE_2:",
      "488:                 ND_PRINT((ndo, \"\\n\\t    Message ID Ack: %u (0x%08x)\",",
      "489:                        EXTRACT_32BITS(obj_tptr),",
      "490:                        EXTRACT_32BITS(obj_tptr)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "581:                 if (obj_tlen != 4) {",
      "582:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "583:                     break;",
      "584:                 }",
      "590:                 if (obj_tlen != 4) {",
      "591:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "592:                     break;",
      "593:                 }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "498:             switch(lmp_obj_ctype) {",
      "499:             case LMP_CTYPE_LOC:",
      "500:             case LMP_CTYPE_RMT:",
      "501:                 ND_PRINT((ndo, \"\\n\\t    Node ID: %s (0x%08x)\",",
      "502:                        ipaddr_string(ndo, obj_tptr),",
      "503:                        EXTRACT_32BITS(obj_tptr)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "607:                 if (obj_tlen != 4) {",
      "608:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "609:                     break;",
      "610:                 }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "511:         case LMP_OBJ_CONFIG:",
      "512:             switch(lmp_obj_ctype) {",
      "513:             case LMP_CTYPE_HELLO_CONFIG:",
      "514:                 ND_PRINT((ndo, \"\\n\\t    Hello Interval: %u\\n\\t    Hello Dead Interval: %u\",",
      "515:                        EXTRACT_16BITS(obj_tptr),",
      "516:                        EXTRACT_16BITS(obj_tptr+2)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "624:                 if (obj_tlen != 4) {",
      "625:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "626:                     break;",
      "627:                 }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "524:         case LMP_OBJ_HELLO:",
      "525:             switch(lmp_obj_ctype) {",
      "526:      case LMP_CTYPE_HELLO:",
      "527:                 ND_PRINT((ndo, \"\\n\\t    Tx Seq: %u, Rx Seq: %u\",",
      "528:                        EXTRACT_32BITS(obj_tptr),",
      "529:                        EXTRACT_32BITS(obj_tptr+4)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "641:                 if (obj_tlen != 8) {",
      "642:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "643:                     break;",
      "644:                 }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "535:             break;",
      "537:         case LMP_OBJ_TE_LINK:",
      "538:   ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "540:    \"none\",",
      "545:   ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %s (0x%08x)\"",
      "546:          \"\\n\\t    Remote Link-ID: %s (0x%08x)\",",
      "547:                        ipaddr_string(ndo, obj_tptr+4),",
      "",
      "[Removed Lines]",
      "539:   bittok2str(lmp_obj_te_link_flag_values,",
      "541:    EXTRACT_16BITS(obj_tptr)>>8)));",
      "543:      switch(lmp_obj_ctype) {",
      "544:      case LMP_CTYPE_IPV4:",
      "",
      "[Added Lines]",
      "656:      switch(lmp_obj_ctype) {",
      "657:      case LMP_CTYPE_IPV4:",
      "658:                 if (obj_tlen != 12) {",
      "659:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "660:                     break;",
      "661:                 }",
      "663:       bittok2str(lmp_obj_te_link_flag_values,",
      "665:    EXTRACT_8BITS(obj_tptr))));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "551:   break;",
      "553:      case LMP_CTYPE_IPV6:",
      "554:      case LMP_CTYPE_UNMD:",
      "555:             default:",
      "556:                 hexdump=TRUE;",
      "557:             }",
      "558:             break;",
      "560:         case LMP_OBJ_DATA_LINK:",
      "566:      switch(lmp_obj_ctype) {",
      "567:      case LMP_CTYPE_IPV4:",
      "569:                 ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\"",
      "570:                        \"\\n\\t    Remote Interface ID: %s (0x%08x)\",",
      "571:                        ipaddr_string(ndo, obj_tptr+4),",
      "",
      "[Removed Lines]",
      "561:   ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "562:   bittok2str(lmp_obj_data_link_flag_values,",
      "563:    \"none\",",
      "564:    EXTRACT_16BITS(obj_tptr)>>8)));",
      "568:      case LMP_CTYPE_UNMD:",
      "",
      "[Added Lines]",
      "676:                 if (obj_tlen != 36) {",
      "677:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "678:                     break;",
      "679:                 }",
      "680:   ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "681:       bittok2str(lmp_obj_te_link_flag_values,",
      "682:    \"none\",",
      "683:    EXTRACT_8BITS(obj_tptr))));",
      "685:   ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %s (0x%08x)\"",
      "686:          \"\\n\\t    Remote Link-ID: %s (0x%08x)\",",
      "687:                        ip6addr_string(ndo, obj_tptr+4),",
      "688:                        EXTRACT_32BITS(obj_tptr+4),",
      "689:                        ip6addr_string(ndo, obj_tptr+20),",
      "690:                        EXTRACT_32BITS(obj_tptr+20)));",
      "691:                 break;",
      "694:                 if (obj_tlen != 12) {",
      "695:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "696:                     break;",
      "697:                 }",
      "698:   ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "699:       bittok2str(lmp_obj_te_link_flag_values,",
      "700:    \"none\",",
      "701:    EXTRACT_8BITS(obj_tptr))));",
      "703:   ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %u (0x%08x)\"",
      "704:          \"\\n\\t    Remote Link-ID: %u (0x%08x)\",",
      "705:                        EXTRACT_32BITS(obj_tptr+4),",
      "706:                        EXTRACT_32BITS(obj_tptr+4),",
      "707:                        EXTRACT_32BITS(obj_tptr+8),",
      "708:                        EXTRACT_32BITS(obj_tptr+8)));",
      "709:   break;",
      "719:                 if (obj_tlen < 12) {",
      "720:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "721:                     break;",
      "722:                 }",
      "723:          ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "724:       bittok2str(lmp_obj_data_link_flag_values,",
      "725:    \"none\",",
      "726:    EXTRACT_8BITS(obj_tptr))));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "573:                        ipaddr_string(ndo, obj_tptr+8),",
      "574:                        EXTRACT_32BITS(obj_tptr+8)));",
      "619:   break;",
      "620:      case LMP_CTYPE_IPV6:",
      "621:             default:",
      "622:                 hexdump=TRUE;",
      "623:             }",
      "",
      "[Removed Lines]",
      "576:   total_subobj_len = lmp_obj_len - 16;",
      "577:   offset = 12;",
      "578:   while (total_subobj_len > 0 && hexdump == FALSE ) {",
      "579:    subobj_type = EXTRACT_16BITS(obj_tptr+offset)>>8;",
      "580:    subobj_len  = EXTRACT_16BITS(obj_tptr+offset)&0x00FF;",
      "581:    ND_PRINT((ndo, \"\\n\\t    Subobject, Type: %s (%u), Length: %u\",",
      "582:     tok2str(lmp_data_link_subobj,",
      "583:      \"Unknown\",",
      "584:      subobj_type),",
      "585:      subobj_type,",
      "586:      subobj_len));",
      "587:    switch(subobj_type) {",
      "588:    case INT_SWITCHING_TYPE_SUBOBJ:",
      "589:     ND_PRINT((ndo, \"\\n\\t      Switching Type: %s (%u)\",",
      "590:      tok2str(gmpls_switch_cap_values,",
      "591:       \"Unknown\",",
      "592:       EXTRACT_16BITS(obj_tptr+offset+2)>>8),",
      "593:      EXTRACT_16BITS(obj_tptr+offset+2)>>8));",
      "594:     ND_PRINT((ndo, \"\\n\\t      Encoding Type: %s (%u)\",",
      "595:      tok2str(gmpls_encoding_values,",
      "596:       \"Unknown\",",
      "597:       EXTRACT_16BITS(obj_tptr+offset+2)&0x00FF),",
      "598:      EXTRACT_16BITS(obj_tptr+offset+2)&0x00FF));",
      "599:     bw.i = EXTRACT_32BITS(obj_tptr+offset+4);",
      "600:     ND_PRINT((ndo, \"\\n\\t      Min Reservable Bandwidth: %.3f Mbps\",",
      "601:                                        bw.f*8/1000000));",
      "602:     bw.i = EXTRACT_32BITS(obj_tptr+offset+8);",
      "603:     ND_PRINT((ndo, \"\\n\\t      Max Reservable Bandwidth: %.3f Mbps\",",
      "604:                                        bw.f*8/1000000));",
      "605:     break;",
      "606:    case WAVELENGTH_SUBOBJ:",
      "607:     ND_PRINT((ndo, \"\\n\\t      Wavelength: %u\",",
      "608:      EXTRACT_32BITS(obj_tptr+offset+4)));",
      "609:     break;",
      "610:    default:",
      "612:     hexdump=TRUE;",
      "613:     break;",
      "614:    }",
      "615:    total_subobj_len-=subobj_len;",
      "616:    offset+=subobj_len;",
      "617:   }",
      "",
      "[Added Lines]",
      "734:   if (lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 12, 12))",
      "735:       hexdump=TRUE;",
      "739:                 if (obj_tlen < 36) {",
      "740:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "741:                     break;",
      "742:                 }",
      "743:          ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "744:       bittok2str(lmp_obj_data_link_flag_values,",
      "745:    \"none\",",
      "746:    EXTRACT_8BITS(obj_tptr))));",
      "747:                 ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\"",
      "748:                        \"\\n\\t    Remote Interface ID: %s (0x%08x)\",",
      "749:                        ip6addr_string(ndo, obj_tptr+4),",
      "750:                        EXTRACT_32BITS(obj_tptr+4),",
      "751:                        ip6addr_string(ndo, obj_tptr+20),",
      "752:                        EXTRACT_32BITS(obj_tptr+20)));",
      "754:   if (lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 36, 36))",
      "755:       hexdump=TRUE;",
      "756:   break;",
      "758:      case LMP_CTYPE_UNMD:",
      "759:                 if (obj_tlen < 12) {",
      "760:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "761:                     break;",
      "762:                 }",
      "763:          ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\",",
      "764:       bittok2str(lmp_obj_data_link_flag_values,",
      "765:    \"none\",",
      "766:    EXTRACT_8BITS(obj_tptr))));",
      "767:                 ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %u (0x%08x)\"",
      "768:                        \"\\n\\t    Remote Interface ID: %u (0x%08x)\",",
      "769:                        EXTRACT_32BITS(obj_tptr+4),",
      "770:                        EXTRACT_32BITS(obj_tptr+4),",
      "771:                        EXTRACT_32BITS(obj_tptr+8),",
      "772:                        EXTRACT_32BITS(obj_tptr+8)));",
      "774:   if (lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 12, 12))",
      "775:       hexdump=TRUE;",
      "776:   break;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "626:         case LMP_OBJ_VERIFY_BEGIN:",
      "627:      switch(lmp_obj_ctype) {",
      "628:             case LMP_CTYPE_1:",
      "629:   ND_PRINT((ndo, \"\\n\\t    Flags: %s\",",
      "630:   bittok2str(lmp_obj_begin_verify_flag_values,",
      "631:    \"none\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "786:                 if (obj_tlen != 20) {",
      "787:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "788:                     break;",
      "789:                 }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "654:         case LMP_OBJ_VERIFY_BEGIN_ACK:",
      "655:      switch(lmp_obj_ctype) {",
      "656:             case LMP_CTYPE_1:",
      "657:                 ND_PRINT((ndo, \"\\n\\t    Verify Dead Interval: %u\"",
      "658:                        \"\\n\\t    Verify Transport Response: %u\",",
      "659:                        EXTRACT_16BITS(obj_tptr),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "818:                 if (obj_tlen != 4) {",
      "819:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "820:                     break;",
      "821:                 }",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "668:  case LMP_OBJ_VERIFY_ID:",
      "669:      switch(lmp_obj_ctype) {",
      "670:             case LMP_CTYPE_1:",
      "671:                 ND_PRINT((ndo, \"\\n\\t    Verify ID: %u\",",
      "672:                        EXTRACT_32BITS(obj_tptr)));",
      "673:                 break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "836:                 if (obj_tlen != 4) {",
      "837:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "838:                     break;",
      "839:                 }",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "680:  case LMP_OBJ_CHANNEL_STATUS:",
      "681:             switch(lmp_obj_ctype) {",
      "682:      case LMP_CTYPE_IPV4:",
      "684:   offset = 0;",
      "687:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\",",
      "688:    ipaddr_string(ndo, obj_tptr+offset),",
      "689:    EXTRACT_32BITS(obj_tptr+offset)));",
      "692:       \"Allocated\" : \"Non-allocated\",",
      "693:     (EXTRACT_32BITS(obj_tptr+offset+4)>>31)));",
      "696:       \"Transmit\" : \"Receive\",",
      "697:     (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1));",
      "",
      "[Removed Lines]",
      "683:      case LMP_CTYPE_UNMD:",
      "686:   while (offset < (lmp_obj_len-(int)sizeof(struct lmp_object_header)) ) {",
      "691:    ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\",   (EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?",
      "695:    ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\", (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?",
      "",
      "[Added Lines]",
      "854:   while (offset+8 <= obj_tlen) {",
      "859:    ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\",",
      "860:     (EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?",
      "864:    ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\",",
      "865:     (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "704:    offset+=8;",
      "705:   }",
      "706:                 break;",
      "707:      case LMP_CTYPE_IPV6:",
      "708:             default:",
      "709:                 hexdump=TRUE;",
      "710:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "879:   offset = 0;",
      "881:   while (offset+20 <= obj_tlen) {",
      "882:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\",",
      "883:    ip6addr_string(ndo, obj_tptr+offset),",
      "884:    EXTRACT_32BITS(obj_tptr+offset)));",
      "886:    ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\",",
      "887:     (EXTRACT_32BITS(obj_tptr+offset+16)>>31) ?",
      "888:       \"Allocated\" : \"Non-allocated\",",
      "889:     (EXTRACT_32BITS(obj_tptr+offset+16)>>31)));",
      "891:    ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\",",
      "892:     (EXTRACT_32BITS(obj_tptr+offset+16)>>30)&0x1 ?",
      "893:       \"Transmit\" : \"Receive\",",
      "894:     (EXTRACT_32BITS(obj_tptr+offset+16)>>30)&0x1));",
      "896:    ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\",",
      "897:      tok2str(lmp_obj_channel_status_values,",
      "898:      \"Unknown\",",
      "899:      EXTRACT_32BITS(obj_tptr+offset+16)&0x3FFFFFF),",
      "900:    EXTRACT_32BITS(obj_tptr+offset+16)&0x3FFFFFF));",
      "901:    offset+=20;",
      "902:   }",
      "903:                 break;",
      "905:      case LMP_CTYPE_UNMD:",
      "906:   offset = 0;",
      "908:   while (offset+8 <= obj_tlen) {",
      "909:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %u (0x%08x)\",",
      "910:    EXTRACT_32BITS(obj_tptr+offset),",
      "911:    EXTRACT_32BITS(obj_tptr+offset)));",
      "913:    ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\",",
      "914:     (EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?",
      "915:       \"Allocated\" : \"Non-allocated\",",
      "916:     (EXTRACT_32BITS(obj_tptr+offset+4)>>31)));",
      "918:    ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\",",
      "919:     (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?",
      "920:       \"Transmit\" : \"Receive\",",
      "921:     (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1));",
      "923:    ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\",",
      "924:      tok2str(lmp_obj_channel_status_values,",
      "925:      \"Unknown\",",
      "926:      EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF),",
      "927:    EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF));",
      "928:    offset+=8;",
      "929:   }",
      "930:                 break;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "713:  case LMP_OBJ_CHANNEL_STATUS_REQ:",
      "714:             switch(lmp_obj_ctype) {",
      "715:      case LMP_CTYPE_IPV4:",
      "717:   offset = 0;",
      "719:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\",",
      "720:    ipaddr_string(ndo, obj_tptr+offset),",
      "721:    EXTRACT_32BITS(obj_tptr+offset)));",
      "722:    offset+=4;",
      "723:   }",
      "724:                 break;",
      "725:      case LMP_CTYPE_IPV6:",
      "726:      default:",
      "727:                 hexdump=TRUE;",
      "728:             }",
      "",
      "[Removed Lines]",
      "716:      case LMP_CTYPE_UNMD:",
      "718:   while (offset < (lmp_obj_len-(int)sizeof(struct lmp_object_header)) ) {",
      "",
      "[Added Lines]",
      "941:   while (offset+4 <= obj_tlen) {",
      "950:   offset = 0;",
      "951:   while (offset+16 <= obj_tlen) {",
      "952:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\",",
      "953:    ip6addr_string(ndo, obj_tptr+offset),",
      "954:    EXTRACT_32BITS(obj_tptr+offset)));",
      "955:    offset+=16;",
      "956:   }",
      "957:                 break;",
      "959:      case LMP_CTYPE_UNMD:",
      "960:   offset = 0;",
      "961:   while (offset+4 <= obj_tlen) {",
      "962:    ND_PRINT((ndo, \"\\n\\t    Interface ID: %u (0x%08x)\",",
      "963:    EXTRACT_32BITS(obj_tptr+offset),",
      "964:    EXTRACT_32BITS(obj_tptr+offset)));",
      "965:    offset+=4;",
      "966:   }",
      "967:                 break;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "731:         case LMP_OBJ_ERROR_CODE:",
      "732:      switch(lmp_obj_ctype) {",
      "733:             case LMP_CTYPE_BEGIN_VERIFY_ERROR:",
      "734:   ND_PRINT((ndo, \"\\n\\t    Error Code: %s\",",
      "735:   bittok2str(lmp_obj_begin_verify_error_values,",
      "736:    \"none\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "977:                 if (obj_tlen != 4) {",
      "978:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "979:                     break;",
      "980:                 }",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "738:                 break;",
      "740:             case LMP_CTYPE_LINK_SUMMARY_ERROR:",
      "741:   ND_PRINT((ndo, \"\\n\\t    Error Code: %s\",",
      "742:   bittok2str(lmp_obj_link_summary_error_values,",
      "743:    \"none\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "988:                 if (obj_tlen != 4) {",
      "989:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "990:                     break;",
      "991:                 }",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "751:  case LMP_OBJ_SERVICE_CONFIG:",
      "752:      switch (lmp_obj_ctype) {",
      "753:      case LMP_CTYPE_SERVICE_CONFIG_SP:",
      "755:   ND_PRINT((ndo, \"\\n\\t Flags: %s\",",
      "756:          bittok2str(lmp_obj_service_config_sp_flag_values,",
      "757:       \"none\",",
      "760:   ND_PRINT((ndo, \"\\n\\t  UNI Version: %u\",",
      "763:   break;",
      "765:             case LMP_CTYPE_SERVICE_CONFIG_CPSA:",
      "769:   ND_PRINT((ndo, \"\\n\\t Link Type: %s (%u)\",",
      "770:          tok2str(lmp_sd_service_config_cpsa_link_type_values,",
      "771:           \"Unknown\", link_type),",
      "772:          link_type));",
      "775:       ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\",",
      "776:       tok2str(lmp_sd_service_config_cpsa_signal_type_sdh_values,",
      "777:        \"Unknown\",",
      "783:       ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\",",
      "784:       tok2str(lmp_sd_service_config_cpsa_signal_type_sonet_values,",
      "785:        \"Unknown\",",
      "788:   }",
      "790:   ND_PRINT((ndo, \"\\n\\t Transparency: %s\",",
      "791:          bittok2str(lmp_obj_service_config_cpsa_tp_flag_values,",
      "792:       \"none\",",
      "795:   ND_PRINT((ndo, \"\\n\\t Contiguous Concatenation Types: %s\",",
      "796:          bittok2str(lmp_obj_service_config_cpsa_cct_flag_values,",
      "797:       \"none\",",
      "800:   ND_PRINT((ndo, \"\\n\\t Minimum NCC: %u\",",
      "801:          EXTRACT_16BITS(obj_tptr+4)));",
      "",
      "[Removed Lines]",
      "758:       EXTRACT_16BITS(obj_tptr)>>8)));",
      "761:          EXTRACT_16BITS(obj_tptr) & 0x00FF));",
      "767:   link_type = EXTRACT_16BITS(obj_tptr)>>8;",
      "774:   if (link_type == LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SDH) {",
      "778:        EXTRACT_16BITS(obj_tptr) & 0x00FF),",
      "779:       EXTRACT_16BITS(obj_tptr) & 0x00FF));",
      "780:   }",
      "782:   if (link_type == LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SONET) {",
      "786:        EXTRACT_16BITS(obj_tptr) & 0x00FF),",
      "787:       EXTRACT_16BITS(obj_tptr) & 0x00FF));",
      "793:       EXTRACT_16BITS(obj_tptr+2)>>8)));",
      "798:       EXTRACT_16BITS(obj_tptr+2)>>8 & 0x00FF)));",
      "",
      "[Added Lines]",
      "1005:                 if (obj_tlen != 4) {",
      "1006:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "1007:                     break;",
      "1008:                 }",
      "1012:       EXTRACT_8BITS(obj_tptr))));",
      "1015:          EXTRACT_8BITS(obj_tptr+1)));",
      "1020:                 if (obj_tlen != 16) {",
      "1021:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "1022:                     break;",
      "1023:                 }",
      "1025:   link_type = EXTRACT_8BITS(obj_tptr);",
      "1032:   switch (link_type) {",
      "1033:   case LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SDH:",
      "1037:        EXTRACT_8BITS(obj_tptr+1)),",
      "1038:       EXTRACT_8BITS(obj_tptr+1)));",
      "1039:       break;",
      "1041:   case LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SONET:",
      "1045:        EXTRACT_8BITS(obj_tptr+1)),",
      "1046:       EXTRACT_8BITS(obj_tptr+1)));",
      "1047:       break;",
      "1053:       EXTRACT_8BITS(obj_tptr+2))));",
      "1058:       EXTRACT_8BITS(obj_tptr+3))));",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "816:   break;",
      "818:      case LMP_CTYPE_SERVICE_CONFIG_TRANSPARENCY_TCM:",
      "820:   ND_PRINT((ndo, \"\\n\\t Transparency Flags: %s\",",
      "821:          bittok2str(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1079:                 if (obj_tlen != 8) {",
      "1080:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "1081:                     break;",
      "1082:                 }",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "827:          bittok2str(",
      "828:       lmp_obj_service_config_nsa_tcm_flag_values,",
      "829:       \"none\",",
      "832:   break;",
      "834:      case LMP_CTYPE_SERVICE_CONFIG_NETWORK_DIVERSITY:",
      "836:   ND_PRINT((ndo, \"\\n\\t Diversity: Flags: %s\",",
      "837:          bittok2str(",
      "838:       lmp_obj_service_config_nsa_network_diversity_flag_values,",
      "839:       \"none\",",
      "841:   break;",
      "843:      default:",
      "",
      "[Removed Lines]",
      "830:       EXTRACT_16BITS(obj_tptr+6) & 0x00FF)));",
      "840:       EXTRACT_16BITS(obj_tptr+2) & 0x00FF)));",
      "",
      "[Added Lines]",
      "1094:       EXTRACT_8BITS(obj_tptr+7))));",
      "1099:                 if (obj_tlen != 4) {",
      "1100:                     ND_PRINT((ndo, \" (not correct for object)\"));",
      "1101:                     break;",
      "1102:                 }",
      "1108:       EXTRACT_8BITS(obj_tptr+3))));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6426a304dc4c074404a24982a7b2a84985d2421",
      "candidate_info": {
        "commit_hash": "f6426a304dc4c074404a24982a7b2a84985d2421",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f6426a304dc4c074404a24982a7b2a84985d2421",
        "files": [
          "print-lmp.c"
        ],
        "message": "Fix spaces",
        "before_after_code_files": [
          "print-lmp.c||print-lmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-lmp.c||print-lmp.c"
          ],
          "candidate": [
            "print-lmp.c||print-lmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-lmp.c||print-lmp.c": [
          "File: print-lmp.c -> print-lmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:     } bw;",
          "369:     while (total_subobj_len > 0 && hexdump == FALSE ) {",
          "372:  ND_PRINT((ndo, \"\\n\\t    Subobject, Type: %s (%u), Length: %u\",",
          "373:   tok2str(lmp_data_link_subobj,",
          "374:    \"Unknown\",",
          "",
          "[Removed Lines]",
          "370:  subobj_type = EXTRACT_8BITS(obj_tptr+offset);",
          "371:  subobj_len  = EXTRACT_8BITS(obj_tptr+offset+1);",
          "",
          "[Added Lines]",
          "370:  subobj_type = EXTRACT_8BITS(obj_tptr + offset);",
          "371:  subobj_len  = EXTRACT_8BITS(obj_tptr + offset + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:      ND_PRINT((ndo, \"\\n\\t      Switching Type: %s (%u)\",",
          "393:   tok2str(gmpls_switch_cap_values,",
          "394:    \"Unknown\",",
          "397:      ND_PRINT((ndo, \"\\n\\t      Encoding Type: %s (%u)\",",
          "398:   tok2str(gmpls_encoding_values,",
          "399:    \"Unknown\",",
          "402:      bw.i = EXTRACT_32BITS(obj_tptr+offset+4);",
          "403:      ND_PRINT((ndo, \"\\n\\t      Min Reservable Bandwidth: %.3f Mbps\",",
          "404:                 bw.f*8/1000000));",
          "",
          "[Removed Lines]",
          "395:    EXTRACT_8BITS(obj_tptr+offset+2)),",
          "396:   EXTRACT_8BITS(obj_tptr+offset+2)));",
          "400:    EXTRACT_8BITS(obj_tptr+offset+3)),",
          "401:   EXTRACT_8BITS(obj_tptr+offset+3)));",
          "",
          "[Added Lines]",
          "395:    EXTRACT_8BITS(obj_tptr + offset + 2)),",
          "396:    EXTRACT_8BITS(obj_tptr + offset + 2)));",
          "400:    EXTRACT_8BITS(obj_tptr + offset + 3)),",
          "401:    EXTRACT_8BITS(obj_tptr + offset + 3)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1012:       EXTRACT_8BITS(obj_tptr))));",
          "1014:   ND_PRINT((ndo, \"\\n\\t  UNI Version: %u\",",
          "1017:   break;",
          "",
          "[Removed Lines]",
          "1015:          EXTRACT_8BITS(obj_tptr+1)));",
          "",
          "[Added Lines]",
          "1015:          EXTRACT_8BITS(obj_tptr + 1)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1034:       ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\",",
          "1035:       tok2str(lmp_sd_service_config_cpsa_signal_type_sdh_values,",
          "1036:        \"Unknown\",",
          "1039:       break;",
          "1041:   case LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SONET:",
          "1042:       ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\",",
          "1043:       tok2str(lmp_sd_service_config_cpsa_signal_type_sonet_values,",
          "1044:        \"Unknown\",",
          "1047:       break;",
          "1048:   }",
          "1050:   ND_PRINT((ndo, \"\\n\\t Transparency: %s\",",
          "1051:          bittok2str(lmp_obj_service_config_cpsa_tp_flag_values,",
          "1052:       \"none\",",
          "1055:   ND_PRINT((ndo, \"\\n\\t Contiguous Concatenation Types: %s\",",
          "1056:          bittok2str(lmp_obj_service_config_cpsa_cct_flag_values,",
          "1057:       \"none\",",
          "1060:   ND_PRINT((ndo, \"\\n\\t Minimum NCC: %u\",",
          "1061:          EXTRACT_16BITS(obj_tptr+4)));",
          "",
          "[Removed Lines]",
          "1037:        EXTRACT_8BITS(obj_tptr+1)),",
          "1038:       EXTRACT_8BITS(obj_tptr+1)));",
          "1045:        EXTRACT_8BITS(obj_tptr+1)),",
          "1046:       EXTRACT_8BITS(obj_tptr+1)));",
          "1053:       EXTRACT_8BITS(obj_tptr+2))));",
          "1058:       EXTRACT_8BITS(obj_tptr+3))));",
          "",
          "[Added Lines]",
          "1037:        EXTRACT_8BITS(obj_tptr + 1)),",
          "1038:        EXTRACT_8BITS(obj_tptr + 1)));",
          "1045:        EXTRACT_8BITS(obj_tptr + 1)),",
          "1046:        EXTRACT_8BITS(obj_tptr + 1)));",
          "1053:       EXTRACT_8BITS(obj_tptr + 2))));",
          "1058:       EXTRACT_8BITS(obj_tptr + 3))));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1091:          bittok2str(",
          "1092:       lmp_obj_service_config_nsa_tcm_flag_values,",
          "1093:       \"none\",",
          "1096:   break;",
          "",
          "[Removed Lines]",
          "1094:       EXTRACT_8BITS(obj_tptr+7))));",
          "",
          "[Added Lines]",
          "1094:       EXTRACT_8BITS(obj_tptr + 7))));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1105:          bittok2str(",
          "1106:       lmp_obj_service_config_nsa_network_diversity_flag_values,",
          "1107:       \"none\",",
          "1109:   break;",
          "1111:      default:",
          "",
          "[Removed Lines]",
          "1108:       EXTRACT_8BITS(obj_tptr+3))));",
          "",
          "[Added Lines]",
          "1108:       EXTRACT_8BITS(obj_tptr + 3))));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "413840cf188d748819f718655db02e8927d590b0",
      "candidate_info": {
        "commit_hash": "413840cf188d748819f718655db02e8927d590b0",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/413840cf188d748819f718655db02e8927d590b0",
        "files": [
          "print-bfd.c",
          "print-cfm.c",
          "print-eap.c",
          "print-eigrp.c",
          "print-isoclns.c",
          "print-ldp.c",
          "print-lmp.c",
          "print-lspping.c",
          "print-lwapp.c",
          "print-mpcp.c",
          "print-rsvp.c",
          "print-sflow.c",
          "print-vqp.c"
        ],
        "message": "Don't specify struct as \"const\" within sizeof().\n\nThe only difference the const qualifier makes in this context is visual,\nmake it consistent with the rest of the source code.",
        "before_after_code_files": [
          "print-bfd.c||print-bfd.c",
          "print-cfm.c||print-cfm.c",
          "print-eap.c||print-eap.c",
          "print-eigrp.c||print-eigrp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-ldp.c||print-ldp.c",
          "print-lmp.c||print-lmp.c",
          "print-lspping.c||print-lspping.c",
          "print-lwapp.c||print-lwapp.c",
          "print-mpcp.c||print-mpcp.c",
          "print-rsvp.c||print-rsvp.c",
          "print-sflow.c||print-sflow.c",
          "print-vqp.c||print-vqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-lmp.c||print-lmp.c"
          ],
          "candidate": [
            "print-lmp.c||print-lmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bfd.c||print-bfd.c": [
          "File: print-bfd.c -> print-bfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:         const struct bfd_auth_header_t *bfd_auth_header;",
          "184:         int i;",
          "187:         bfd_auth_header = (const struct bfd_auth_header_t *)pptr;",
          "188:         ND_TCHECK(*bfd_auth_header);",
          "189:         ND_PRINT((ndo, \"\\n\\tAuthentication: %s (%u), length: %u\",",
          "",
          "[Removed Lines]",
          "186:         pptr += sizeof (const struct bfd_header_t);",
          "",
          "[Added Lines]",
          "186:         pptr += sizeof (struct bfd_header_t);",
          "",
          "---------------"
        ],
        "print-cfm.c||print-cfm.c": [
          "File: print-cfm.c -> print-cfm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     ND_PRINT((ndo, \"\\n\\tFirst TLV offset %u\", cfm_common_header->first_tlv_offset));",
          "324:     tlen = length - sizeof(struct cfm_common_header_t);",
          "",
          "[Removed Lines]",
          "323:     tptr += sizeof(const struct cfm_common_header_t);",
          "",
          "[Added Lines]",
          "323:     tptr += sizeof(struct cfm_common_header_t);",
          "",
          "---------------"
        ],
        "print-eap.c||print-eap.c": [
          "File: print-eap.c -> print-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:            eap->version,",
          "178:            EXTRACT_16BITS(eap->length)));",
          "183:     switch (eap->type) {",
          "184:     case EAP_FRAME_TYPE_PACKET:",
          "",
          "[Removed Lines]",
          "180:     tptr += sizeof(const struct eap_frame_t);",
          "181:     tlen -= sizeof(const struct eap_frame_t);",
          "",
          "[Added Lines]",
          "180:     tptr += sizeof(struct eap_frame_t);",
          "181:     tlen -= sizeof(struct eap_frame_t);",
          "",
          "---------------"
        ],
        "print-eigrp.c||print-eigrp.c": [
          "File: print-eigrp.c -> print-eigrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:            EXTRACT_32BITS(&eigrp_com_header->asn),",
          "270:            tlen));",
          "274:     while(tlen>0) {",
          "",
          "[Removed Lines]",
          "272:     tptr+=sizeof(const struct eigrp_common_header);",
          "",
          "[Added Lines]",
          "272:     tptr+=sizeof(struct eigrp_common_header);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:                isonsap_string(ndo, dest_address, dest_address_length)));",
          "879:         if (clnp_flags & CLNP_SEGMENT_PART) {",
          "881:                     ND_PRINT((ndo, \"li < size of fixed part of CLNP header, addresses, and segment part\"));",
          "882:                     return (0);",
          "883:                 }",
          "",
          "[Removed Lines]",
          "880:                 if (li < sizeof(const struct clnp_segment_header_t)) {",
          "",
          "[Added Lines]",
          "880:                 if (li < sizeof(struct clnp_segment_header_t)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "887:                        EXTRACT_16BITS(clnp_segment_header->data_unit_id),",
          "888:                        EXTRACT_16BITS(clnp_segment_header->segment_offset),",
          "889:                        EXTRACT_16BITS(clnp_segment_header->total_length)));",
          "892:         }",
          "",
          "[Removed Lines]",
          "890:                 pptr+=sizeof(const struct clnp_segment_header_t);",
          "891:                 li-=sizeof(const struct clnp_segment_header_t);",
          "",
          "[Added Lines]",
          "890:                 pptr+=sizeof(struct clnp_segment_header_t);",
          "891:                 li-=sizeof(struct clnp_segment_header_t);",
          "",
          "---------------"
        ],
        "print-ldp.c||print-ldp.c": [
          "File: print-ldp.c -> print-ldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     }",
          "583:     pdu_len = EXTRACT_16BITS(&ldp_com_header->pdu_length);",
          "586:         ND_PRINT((ndo, \"%sLDP, pdu-length: %u (too short, < %u)\",",
          "587:                (ndo->ndo_vflag < 1) ? \"\" : \"\\n\\t\",",
          "588:                pdu_len,",
          "590:         return 0;",
          "591:     }",
          "",
          "[Removed Lines]",
          "584:     if (pdu_len < sizeof(const struct ldp_common_header)-4) {",
          "589:                (u_int)(sizeof(const struct ldp_common_header)-4)));",
          "",
          "[Added Lines]",
          "584:     if (pdu_len < sizeof(struct ldp_common_header)-4) {",
          "589:                (u_int)(sizeof(struct ldp_common_header)-4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:         return 0;",
          "608:     while(tlen>0) {",
          "",
          "[Removed Lines]",
          "605:     tptr = pptr + sizeof(const struct ldp_common_header);",
          "",
          "[Added Lines]",
          "605:     tptr = pptr + sizeof(struct ldp_common_header);",
          "",
          "---------------"
        ],
        "print-lmp.c||print-lmp.c": [
          "File: print-lmp.c -> print-lmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "469:            tok2str(lmp_msg_type_values, \"unknown, type: %u\",lmp_com_header->msg_type),",
          "470:            bittok2str(lmp_header_flag_values,\"none\",lmp_com_header->flags),",
          "471:            tlen));",
          "473:         ND_PRINT((ndo, \" (too short)\"));",
          "474:         return;",
          "475:     }",
          "",
          "[Removed Lines]",
          "472:     if (tlen < sizeof(const struct lmp_common_header)) {",
          "",
          "[Added Lines]",
          "472:     if (tlen < sizeof(struct lmp_common_header)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:         tlen = len;",
          "479:     }",
          "484:     while(tlen>0) {",
          "",
          "[Removed Lines]",
          "481:     tptr+=sizeof(const struct lmp_common_header);",
          "482:     tlen-=sizeof(const struct lmp_common_header);",
          "",
          "[Added Lines]",
          "481:     tptr+=sizeof(struct lmp_common_header);",
          "482:     tlen-=sizeof(struct lmp_common_header);",
          "",
          "---------------"
        ],
        "print-lspping.c||print-lspping.c": [
          "File: print-lspping.c -> print-lspping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     tptr=pptr;",
          "525:     lspping_com_header = (const struct lspping_common_header *)pptr;",
          "527:         goto tooshort;",
          "528:     ND_TCHECK(*lspping_com_header);",
          "",
          "[Removed Lines]",
          "526:     if (len < sizeof(const struct lspping_common_header))",
          "",
          "[Added Lines]",
          "526:     if (len < sizeof(struct lspping_common_header))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:     else",
          "597:         ND_PRINT((ndo, \"no timestamp\"));",
          "602:     while (tlen != 0) {",
          "",
          "[Removed Lines]",
          "599:     tptr+=sizeof(const struct lspping_common_header);",
          "600:     tlen-=sizeof(const struct lspping_common_header);",
          "",
          "[Added Lines]",
          "599:     tptr+=sizeof(struct lspping_common_header);",
          "600:     tlen-=sizeof(struct lspping_common_header);",
          "",
          "---------------"
        ],
        "print-lwapp.c||print-lwapp.c": [
          "File: print-lwapp.c -> print-lwapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     if (has_ap_ident) {",
          "216:         ND_PRINT((ndo, \"\\n\\tAP identity: %s\", etheraddr_string(ndo, tptr)));",
          "218:     } else {",
          "220:     }",
          "222:     while(tlen>0) {",
          "",
          "[Removed Lines]",
          "217:         tptr+=sizeof(const struct lwapp_transport_header)+6;",
          "219:         tptr+=sizeof(const struct lwapp_transport_header);",
          "",
          "[Added Lines]",
          "217:         tptr+=sizeof(struct lwapp_transport_header)+6;",
          "219:         tptr+=sizeof(struct lwapp_transport_header);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:            lwapp_trans_header->frag_id,",
          "330:            tlen));",
          "336:     print_unknown_data(ndo, tptr, \"\\n\\t\", tlen);",
          "",
          "[Removed Lines]",
          "332:     tptr+=sizeof(const struct lwapp_transport_header);",
          "333:     tlen-=sizeof(const struct lwapp_transport_header);",
          "",
          "[Added Lines]",
          "332:     tptr+=sizeof(struct lwapp_transport_header);",
          "333:     tlen-=sizeof(struct lwapp_transport_header);",
          "",
          "---------------"
        ],
        "print-mpcp.c||print-mpcp.c": [
          "File: print-mpcp.c -> print-mpcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     tptr=pptr;",
          "141:     mpcp.common_header = (const struct mpcp_common_header_t *)pptr;",
          "144:     opcode = EXTRACT_16BITS(mpcp.common_header->opcode);",
          "145:     ND_PRINT((ndo, \"MPCP, Opcode %s\", tok2str(mpcp_opcode_values, \"Unknown (%u)\", opcode)));",
          "146:     if (opcode != MPCP_OPCODE_PAUSE) {",
          "",
          "[Removed Lines]",
          "143:     ND_TCHECK2(*tptr, sizeof(const struct mpcp_common_header_t));",
          "",
          "[Added Lines]",
          "143:     ND_TCHECK2(*tptr, sizeof(struct mpcp_common_header_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if (!ndo->ndo_vflag)",
          "152:         return;",
          "156:     switch (opcode) {",
          "157:     case MPCP_OPCODE_PAUSE:",
          "",
          "[Removed Lines]",
          "154:     tptr += sizeof(const struct mpcp_common_header_t);",
          "",
          "[Added Lines]",
          "154:     tptr += sizeof(struct mpcp_common_header_t);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:         tptr++;",
          "170:         for (grant = 1; grant <= grant_numbers; grant++) {",
          "172:             mpcp.grant = (const struct mpcp_grant_t *)tptr;",
          "173:             ND_PRINT((ndo, \"\\n\\tGrant #%u, Start-Time %u ticks, duration %u ticks\",",
          "174:                    grant,",
          "175:                    EXTRACT_32BITS(mpcp.grant->starttime),",
          "176:                    EXTRACT_16BITS(mpcp.grant->duration)));",
          "178:         }",
          "180:         ND_TCHECK2(*tptr, MPCP_TIMESTAMP_DURATION_LEN);",
          "",
          "[Removed Lines]",
          "171:             ND_TCHECK2(*tptr, sizeof(const struct mpcp_grant_t));",
          "177:             tptr += sizeof(const struct mpcp_grant_t);",
          "",
          "[Added Lines]",
          "171:             ND_TCHECK2(*tptr, sizeof(struct mpcp_grant_t));",
          "177:             tptr += sizeof(struct mpcp_grant_t);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:         break;",
          "214:     case MPCP_OPCODE_REG_REQ:",
          "216:         mpcp.reg_req = (const struct mpcp_reg_req_t *)tptr;",
          "217:         ND_PRINT((ndo, \"\\n\\tFlags [ %s ], Pending-Grants %u\",",
          "218:                bittok2str(mpcp_reg_req_flag_values, \"Reserved\", mpcp.reg_req->flags),",
          "",
          "[Removed Lines]",
          "215:         ND_TCHECK2(*tptr, sizeof(const struct mpcp_reg_req_t));",
          "",
          "[Added Lines]",
          "215:         ND_TCHECK2(*tptr, sizeof(struct mpcp_reg_req_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "220:         break;",
          "222:     case MPCP_OPCODE_REG:",
          "224:         mpcp.reg = (const struct mpcp_reg_t *)tptr;",
          "225:         ND_PRINT((ndo, \"\\n\\tAssigned-Port %u, Flags [ %s ]\" \\",
          "226:                \"\\n\\tSync-Time %u ticks, Echoed-Pending-Grants %u\",",
          "",
          "[Removed Lines]",
          "223:         ND_TCHECK2(*tptr, sizeof(const struct mpcp_reg_t));",
          "",
          "[Added Lines]",
          "223:         ND_TCHECK2(*tptr, sizeof(struct mpcp_reg_t));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "231:         break;",
          "233:     case MPCP_OPCODE_REG_ACK:",
          "235:         mpcp.reg_ack = (const struct mpcp_reg_ack_t *)tptr;",
          "236:         ND_PRINT((ndo, \"\\n\\tEchoed-Assigned-Port %u, Flags [ %s ]\" \\",
          "237:                \"\\n\\tEchoed-Sync-Time %u ticks\",",
          "",
          "[Removed Lines]",
          "234:         ND_TCHECK2(*tptr, sizeof(const struct mpcp_reg_ack_t));",
          "",
          "[Added Lines]",
          "234:         ND_TCHECK2(*tptr, sizeof(struct mpcp_reg_ack_t));",
          "",
          "---------------"
        ],
        "print-rsvp.c||print-rsvp.c": [
          "File: print-rsvp.c -> print-rsvp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:         }",
          "694:         if(rsvp_obj_len < sizeof(struct rsvp_object_header)) {",
          "695:             ND_PRINT((ndo, \"%sERROR: object header too short %u < %lu\", ident, rsvp_obj_len,",
          "697:             return -1;",
          "698:         }",
          "",
          "[Removed Lines]",
          "696:                    (unsigned long)sizeof(const struct rsvp_object_header)));",
          "",
          "[Added Lines]",
          "696:                    (unsigned long)sizeof(struct rsvp_object_header)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1889:            rsvp_com_header->ttl,",
          "1890:            EXTRACT_16BITS(rsvp_com_header->checksum)));",
          "1893:         ND_PRINT((ndo, \"ERROR: common header too short %u < %lu\", tlen,",
          "1895:         return;",
          "1896:     }",
          "1901:     switch(rsvp_com_header->msg_type) {",
          "",
          "[Removed Lines]",
          "1892:     if (tlen < sizeof(const struct rsvp_common_header)) {",
          "1894:                (unsigned long)sizeof(const struct rsvp_common_header)));",
          "1898:     tptr+=sizeof(const struct rsvp_common_header);",
          "1899:     tlen-=sizeof(const struct rsvp_common_header);",
          "",
          "[Added Lines]",
          "1892:     if (tlen < sizeof(struct rsvp_common_header)) {",
          "1894:                (unsigned long)sizeof(struct rsvp_common_header)));",
          "1898:     tptr+=sizeof(struct rsvp_common_header);",
          "1899:     tlen-=sizeof(struct rsvp_common_header);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1935:                    rsvp_com_header->ttl,",
          "1936:                    EXTRACT_16BITS(rsvp_com_header->checksum)));",
          "1939:                 ND_PRINT((ndo, \"ERROR: common header too short %u < %lu\", subtlen,",
          "1941:                 return;",
          "1942:             }",
          "",
          "[Removed Lines]",
          "1938:             if (subtlen < sizeof(const struct rsvp_common_header)) {",
          "1940:                        (unsigned long)sizeof(const struct rsvp_common_header)));",
          "",
          "[Added Lines]",
          "1938:             if (subtlen < sizeof(struct rsvp_common_header)) {",
          "1940:                        (unsigned long)sizeof(struct rsvp_common_header)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1947:                 return;",
          "1948:             }",
          "",
          "[Removed Lines]",
          "1950:             subtptr+=sizeof(const struct rsvp_common_header);",
          "1951:             subtlen-=sizeof(const struct rsvp_common_header);",
          "",
          "[Added Lines]",
          "1950:             subtptr+=sizeof(struct rsvp_common_header);",
          "1951:             subtlen-=sizeof(struct rsvp_common_header);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1956:             if (rsvp_obj_print(ndo, subpptr, subplen, subtptr, \"\\n\\t    \", subtlen, rsvp_com_header) == -1)",
          "1957:                 return;",
          "1961:         }",
          "1963:         break;",
          "",
          "[Removed Lines]",
          "1959:             tptr+=subtlen+sizeof(const struct rsvp_common_header);",
          "1960:             tlen-=subtlen+sizeof(const struct rsvp_common_header);",
          "",
          "[Added Lines]",
          "1959:             tptr+=subtlen+sizeof(struct rsvp_common_header);",
          "1960:             tlen-=subtlen+sizeof(struct rsvp_common_header);",
          "",
          "---------------"
        ],
        "print-sflow.c||print-sflow.c": [
          "File: print-sflow.c -> print-sflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "915:            len));",
          "921:     while (nsamples > 0 && tlen > 0) {",
          "922:         sflow_sample = (const struct sflow_sample_header *)tptr;",
          "",
          "[Removed Lines]",
          "918:     tptr += sizeof(const struct sflow_datagram_t);",
          "919:     tlen -= sizeof(const struct sflow_datagram_t);",
          "",
          "[Added Lines]",
          "918:     tptr += sizeof(struct sflow_datagram_t);",
          "919:     tlen -= sizeof(struct sflow_datagram_t);",
          "",
          "---------------"
        ],
        "print-vqp.c||print-vqp.c": [
          "File: print-vqp.c -> print-vqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:            len));",
          "154:     while (nitems > 0 && tlen > 0) {",
          "",
          "[Removed Lines]",
          "151:     tptr+=sizeof(const struct vqp_common_header_t);",
          "152:     tlen-=sizeof(const struct vqp_common_header_t);",
          "",
          "[Added Lines]",
          "151:     tptr+=sizeof(struct vqp_common_header_t);",
          "152:     tlen-=sizeof(struct vqp_common_header_t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3efcefafd85931ad0c24c68dd0425f89c2021c58",
      "candidate_info": {
        "commit_hash": "3efcefafd85931ad0c24c68dd0425f89c2021c58",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3efcefafd85931ad0c24c68dd0425f89c2021c58",
        "files": [
          "extract.h"
        ],
        "message": "Add a cast to the EXTRACT_U_1() macro\n\nThis change may avoid sign bit extension problem.",
        "before_after_code_files": [
          "extract.h||extract.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extract.h||extract.h"
          ],
          "candidate": [
            "extract.h||extract.h"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define EXTRACT_S_1(p) ((int8_t)(*(p)))",
          "",
          "[Removed Lines]",
          "28: #define EXTRACT_U_1(p) (*(p))",
          "",
          "[Added Lines]",
          "28: #define EXTRACT_U_1(p) ((uint8_t)(*(p)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c0a26f648f1cc30621193715c39722d69d33370",
      "candidate_info": {
        "commit_hash": "5c0a26f648f1cc30621193715c39722d69d33370",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/5c0a26f648f1cc30621193715c39722d69d33370",
        "files": [
          "print-lmp.c"
        ],
        "message": "Use nd_ types, add EXTRACT_ calls.",
        "before_after_code_files": [
          "print-lmp.c||print-lmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-lmp.c||print-lmp.c"
          ],
          "candidate": [
            "print-lmp.c||print-lmp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-lmp.c||print-lmp.c": [
          "File: print-lmp.c -> print-lmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: struct lmp_common_header {",
          "52: };",
          "54: #define LMP_VERSION            1",
          "57: static const struct tok lmp_header_flag_values[] = {",
          "58:     { 0x01, \"Control Channel Down\"},",
          "",
          "[Removed Lines]",
          "47:     uint8_t version_res[2];",
          "48:     uint8_t flags;",
          "49:     uint8_t msg_type;",
          "50:     uint8_t length[2];",
          "51:     uint8_t reserved[2];",
          "55: #define LMP_EXTRACT_VERSION(x) (((x)&0xf0)>>4)",
          "",
          "[Added Lines]",
          "47:     nd_uint16_t version_res;",
          "48:     nd_uint8_t  flags;",
          "49:     nd_uint8_t  msg_type;",
          "50:     nd_uint16_t length;",
          "51:     nd_byte     reserved[2];",
          "55: #define LMP_EXTRACT_VERSION(x) (((x)&0xf000)>>12)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216: struct lmp_object_header {",
          "220: };",
          "222: #define LMP_OBJ_CC_ID                 1",
          "",
          "[Removed Lines]",
          "217:     uint8_t ctype;",
          "218:     uint8_t class_num;",
          "219:     uint8_t length[2];",
          "",
          "[Added Lines]",
          "217:     nd_uint8_t  ctype;",
          "218:     nd_uint8_t  class_num;",
          "219:     nd_uint16_t length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:     const struct lmp_common_header *lmp_com_header;",
          "429:     const struct lmp_object_header *lmp_obj_header;",
          "430:     const u_char *tptr,*obj_tptr;",
          "432:     int hexdump;",
          "433:     u_int offset;",
          "434:     u_int link_type;",
          "",
          "[Removed Lines]",
          "431:     u_int tlen,lmp_obj_len,lmp_obj_ctype,obj_tlen;",
          "",
          "[Added Lines]",
          "431:     u_int version_res, tlen, lmp_obj_len, lmp_obj_ctype, obj_tlen;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "442:     lmp_com_header = (const struct lmp_common_header *)pptr;",
          "443:     ND_TCHECK(*lmp_com_header);",
          "449:  ND_PRINT((ndo, \"LMP version %u packet not supported\",",
          "451:  return;",
          "452:     }",
          "455:     if (ndo->ndo_vflag < 1) {",
          "456:         ND_PRINT((ndo, \"LMPv%u %s Message, length: %u\",",
          "459:                len));",
          "460:         return;",
          "461:     }",
          "",
          "[Removed Lines]",
          "448:     if (LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]) != LMP_VERSION) {",
          "450:                LMP_EXTRACT_VERSION(lmp_com_header->version_res[0])));",
          "457:                LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),",
          "458:                tok2str(lmp_msg_type_values, \"unknown (%u)\",lmp_com_header->msg_type),",
          "",
          "[Added Lines]",
          "445:     version_res = EXTRACT_BE_U_2(lmp_com_header->version_res);",
          "450:     if (LMP_EXTRACT_VERSION(version_res) != LMP_VERSION) {",
          "452:                LMP_EXTRACT_VERSION(version_res)));",
          "459:                LMP_EXTRACT_VERSION(version_res),",
          "460:                tok2str(lmp_msg_type_values, \"unknown (%u)\",EXTRACT_U_1(lmp_com_header->msg_type)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:     tlen=EXTRACT_BE_U_2(lmp_com_header->length);",
          "467:     ND_PRINT((ndo, \"\\n\\tLMPv%u, msg-type: %s, Flags: [%s], length: %u\",",
          "471:            tlen));",
          "472:     if (tlen < sizeof(struct lmp_common_header)) {",
          "473:         ND_PRINT((ndo, \" (too short)\"));",
          "",
          "[Removed Lines]",
          "468:            LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),",
          "469:            tok2str(lmp_msg_type_values, \"unknown, type: %u\",lmp_com_header->msg_type),",
          "470:            bittok2str(lmp_header_flag_values,\"none\",lmp_com_header->flags),",
          "",
          "[Added Lines]",
          "470:            LMP_EXTRACT_VERSION(version_res),",
          "471:            tok2str(lmp_msg_type_values, \"unknown, type: %u\",EXTRACT_U_1(lmp_com_header->msg_type)),",
          "472:            bittok2str(lmp_header_flag_values,\"none\",EXTRACT_U_1(lmp_com_header->flags)),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "488:         lmp_obj_header = (const struct lmp_object_header *)tptr;",
          "489:         lmp_obj_len=EXTRACT_BE_U_2(lmp_obj_header->length);",
          "492:         ND_PRINT((ndo, \"\\n\\t  %s Object (%u), Class-Type: %s (%u) Flags: [%snegotiable], length: %u\",",
          "493:                tok2str(lmp_obj_values,",
          "494:                        \"Unknown\",",
          "497:                tok2str(lmp_ctype_values,",
          "498:                        \"Unknown\",",
          "500:                lmp_obj_ctype,",
          "502:                lmp_obj_len));",
          "504:         if (lmp_obj_len < 4) {",
          "",
          "[Removed Lines]",
          "490:         lmp_obj_ctype=(lmp_obj_header->ctype)&0x7f;",
          "495:                        lmp_obj_header->class_num),",
          "496:                lmp_obj_header->class_num,",
          "499:                        ((lmp_obj_header->class_num)<<8)+lmp_obj_ctype),",
          "501:                (lmp_obj_header->ctype)&0x80 ? \"\" : \"non-\",",
          "",
          "[Added Lines]",
          "492:         lmp_obj_ctype=EXTRACT_U_1(lmp_obj_header->ctype)&0x7f;",
          "497:                        EXTRACT_U_1(lmp_obj_header->class_num)),",
          "498:                EXTRACT_U_1(lmp_obj_header->class_num),",
          "501:                        (EXTRACT_U_1(lmp_obj_header->class_num)<<8)+lmp_obj_ctype),",
          "503:                EXTRACT_U_1(lmp_obj_header->ctype)&0x80 ? \"\" : \"non-\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "517:         ND_TCHECK_LEN(tptr, lmp_obj_len);",
          "518:         hexdump=FALSE;",
          "522:         case LMP_OBJ_CC_ID:",
          "523:             switch(lmp_obj_ctype) {",
          "",
          "[Removed Lines]",
          "520:         switch(lmp_obj_header->class_num) {",
          "",
          "[Added Lines]",
          "522:         switch(EXTRACT_U_1(lmp_obj_header->class_num)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb3e918e0ad657a73260c849c3576de437bb04c5",
      "candidate_info": {
        "commit_hash": "eb3e918e0ad657a73260c849c3576de437bb04c5",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/eb3e918e0ad657a73260c849c3576de437bb04c5",
        "files": [
          "extract.h"
        ],
        "message": "Add EXTRACT_ macros/functions to get signed integers.",
        "before_after_code_files": [
          "extract.h||extract.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "extract.h||extract.h"
          ],
          "candidate": [
            "extract.h||extract.h"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define EXTRACT_8BITS(p) (*(p))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #define EXTRACT_INT8(p)  ((int8_t)(*(p)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  return ((uint16_t)ntohs(*(const uint16_t *)(p)));",
          "88: }",
          "90: static inline uint32_t UNALIGNED_OK",
          "91: EXTRACT_BE_32BITS(const void *p)",
          "92: {",
          "93:  return ((uint32_t)ntohl(*(const uint32_t *)(p)));",
          "94: }",
          "96: static inline uint64_t UNALIGNED_OK",
          "97: EXTRACT_BE_64BITS(const void *p)",
          "98: {",
          "99:  return ((uint64_t)(((uint64_t)ntohl(*((const uint32_t *)(p) + 0))) << 32 |",
          "100:   ((uint64_t)ntohl(*((const uint32_t *)(p) + 1))) << 0));",
          "102: }",
          "103: #elif defined(__GNUC__) && defined(HAVE___ATTRIBUTE__) && \\",
          "104:     (defined(__alpha) || defined(__alpha__) || \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: static inline int16_t UNALIGNED_OK",
          "92: EXTRACT_BE_INT16(const void *p)",
          "93: {",
          "94:  return ((int16_t)ntohs(*(const int16_t *)(p)));",
          "95: }",
          "103: static inline int32_t UNALIGNED_OK",
          "104: EXTRACT_BE_INT32(const void *p)",
          "105: {",
          "106:  return ((int32_t)ntohl(*(const int32_t *)(p)));",
          "107: }",
          "115: }",
          "117: static inline int64_t UNALIGNED_OK",
          "118: EXTRACT_BE_INT64(const void *p)",
          "119: {",
          "120:  return ((int64_t)(((int64_t)ntohl(*((const uint32_t *)(p) + 0))) << 32 |",
          "121:   ((uint64_t)ntohl(*((const uint32_t *)(p) + 1))) << 0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:  uint16_t val;",
          "159: } __attribute__((packed)) unaligned_uint16_t;",
          "161: typedef struct {",
          "162:  uint32_t val;",
          "163: } __attribute__((packed)) unaligned_uint32_t;",
          "165: UNALIGNED_OK static inline uint16_t",
          "166: EXTRACT_BE_16BITS(const void *p)",
          "167: {",
          "168:  return ((uint16_t)ntohs(((const unaligned_uint16_t *)(p))->val));",
          "169: }",
          "171: UNALIGNED_OK static inline uint32_t",
          "172: EXTRACT_BE_32BITS(const void *p)",
          "173: {",
          "174:  return ((uint32_t)ntohl(((const unaligned_uint32_t *)(p))->val));",
          "175: }",
          "177: UNALIGNED_OK static inline uint64_t",
          "178: EXTRACT_BE_64BITS(const void *p)",
          "179: {",
          "180:  return ((uint64_t)(((uint64_t)ntohl(((const unaligned_uint32_t *)(p) + 0)->val)) << 32 |",
          "181:   ((uint64_t)ntohl(((const unaligned_uint32_t *)(p) + 1)->val)) << 0));",
          "182: }",
          "183: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: typedef struct {",
          "183:  int16_t  val;",
          "184: } __attribute__((packed)) unaligned_int16_t;",
          "190: typedef struct {",
          "191:  int32_t  val;",
          "192: } __attribute__((packed)) unaligned_int32_t;",
          "200: UNALIGNED_OK static inline int16_t",
          "201: EXTRACT_BE_INT16(const void *p)",
          "202: {",
          "203:  return ((int16_t)ntohs(((const unaligned_int16_t *)(p))->val));",
          "204: }",
          "212: UNALIGNED_OK static inline int32_t",
          "213: EXTRACT_BE_INT32(const void *p)",
          "214: {",
          "215:  return ((int32_t)ntohl(((const unaligned_int32_t *)(p))->val));",
          "216: }",
          "225: UNALIGNED_OK static inline int64_t",
          "226: EXTRACT_BE_INT64(const void *p)",
          "227: {",
          "228:  return ((int64_t)(((uint64_t)ntohl(((const unaligned_uint32_t *)(p) + 0)->val)) << 32 |",
          "229:   ((uint64_t)ntohl(((const unaligned_uint32_t *)(p) + 1)->val)) << 0));",
          "230: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192: #define EXTRACT_BE_16BITS(p) \\",
          "193:  ((uint16_t)(((uint16_t)(*((const uint8_t *)(p) + 0)) << 8) | \\",
          "194:              ((uint16_t)(*((const uint8_t *)(p) + 1)) << 0)))",
          "195: #define EXTRACT_BE_32BITS(p) \\",
          "196:  ((uint32_t)(((uint32_t)(*((const uint8_t *)(p) + 0)) << 24) | \\",
          "197:              ((uint32_t)(*((const uint8_t *)(p) + 1)) << 16) | \\",
          "198:              ((uint32_t)(*((const uint8_t *)(p) + 2)) << 8) | \\",
          "199:              ((uint32_t)(*((const uint8_t *)(p) + 3)) << 0)))",
          "200: #define EXTRACT_BE_64BITS(p) \\",
          "201:  ((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 56) | \\",
          "202:              ((uint64_t)(*((const uint8_t *)(p) + 1)) << 48) | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #define EXTRACT_BE_INT16(p) \\",
          "244:  ((int16_t)(((uint16_t)(*((const uint8_t *)(p) + 0)) << 8) | \\",
          "245:             ((uint16_t)(*((const uint8_t *)(p) + 1)) << 0)))",
          "251: #define EXTRACT_BE_INT32(p) \\",
          "252:  ((int32_t)(((uint32_t)(*((const uint8_t *)(p) + 0)) << 24) | \\",
          "253:             ((uint32_t)(*((const uint8_t *)(p) + 1)) << 16) | \\",
          "254:             ((uint32_t)(*((const uint8_t *)(p) + 2)) << 8) | \\",
          "255:             ((uint32_t)(*((const uint8_t *)(p) + 3)) << 0)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:              ((uint64_t)(*((const uint8_t *)(p) + 5)) << 16) | \\",
          "207:              ((uint64_t)(*((const uint8_t *)(p) + 6)) << 8) | \\",
          "208:              ((uint64_t)(*((const uint8_t *)(p) + 7)) << 0)))",
          "211: #define EXTRACT_BE_24BITS(p) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: #define EXTRACT_BE_INT64(p) \\",
          "266:  ((int64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 56) | \\",
          "267:             ((uint64_t)(*((const uint8_t *)(p) + 1)) << 48) | \\",
          "268:             ((uint64_t)(*((const uint8_t *)(p) + 2)) << 40) | \\",
          "269:             ((uint64_t)(*((const uint8_t *)(p) + 3)) << 32) | \\",
          "270:             ((uint64_t)(*((const uint8_t *)(p) + 4)) << 24) | \\",
          "271:             ((uint64_t)(*((const uint8_t *)(p) + 5)) << 16) | \\",
          "272:             ((uint64_t)(*((const uint8_t *)(p) + 6)) << 8) | \\",
          "273:             ((uint64_t)(*((const uint8_t *)(p) + 7)) << 0)))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:              ((uint32_t)(*((const uint8_t *)(p) + 1)) << 8) | \\",
          "214:              ((uint32_t)(*((const uint8_t *)(p) + 2)) << 0)))",
          "216: #define EXTRACT_BE_40BITS(p) \\",
          "217:  ((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 32) | \\",
          "218:              ((uint64_t)(*((const uint8_t *)(p) + 1)) << 24) | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: #define EXTRACT_BE_INT24(p) \\",
          "282:  (((*((const uint8_t *)(p) + 0)) & 0x80) ? \\",
          "283:    ((int32_t)(((uint32_t)(*((const uint8_t *)(p) + 0)) << 16) | \\",
          "284:               ((uint32_t)(*((const uint8_t *)(p) + 1)) << 8) | \\",
          "285:               ((uint32_t)(*((const uint8_t *)(p) + 2)) << 0))) : \\",
          "286:    ((int32_t)(0xFF000000U | \\",
          "287:               ((uint32_t)(*((const uint8_t *)(p) + 0)) << 16) | \\",
          "288:               ((uint32_t)(*((const uint8_t *)(p) + 1)) << 8) | \\",
          "289:               ((uint32_t)(*((const uint8_t *)(p) + 2)) << 0))))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "220:              ((uint64_t)(*((const uint8_t *)(p) + 3)) << 8) | \\",
          "221:              ((uint64_t)(*((const uint8_t *)(p) + 4)) << 0)))",
          "223: #define EXTRACT_BE_48BITS(p) \\",
          "224:  ((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 40) | \\",
          "225:              ((uint64_t)(*((const uint8_t *)(p) + 1)) << 32) | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: #define EXTRACT_BE_INT40(p) \\",
          "299:  (((*((const uint8_t *)(p) + 0)) & 0x80) ? \\",
          "300:    ((int64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 32) | \\",
          "301:               ((uint64_t)(*((const uint8_t *)(p) + 1)) << 24) | \\",
          "302:               ((uint64_t)(*((const uint8_t *)(p) + 2)) << 16) | \\",
          "303:               ((uint64_t)(*((const uint8_t *)(p) + 3)) << 8) | \\",
          "304:               ((uint64_t)(*((const uint8_t *)(p) + 4)) << 0))) : \\",
          "305:    ((int64_t)(INT64_T_CONSTANT(0xFFFFFF0000000000U) | \\",
          "306:               ((uint64_t)(*((const uint8_t *)(p) + 0)) << 32) | \\",
          "307:               ((uint64_t)(*((const uint8_t *)(p) + 1)) << 24) | \\",
          "308:               ((uint64_t)(*((const uint8_t *)(p) + 2)) << 16) | \\",
          "309:               ((uint64_t)(*((const uint8_t *)(p) + 3)) << 8) | \\",
          "310:               ((uint64_t)(*((const uint8_t *)(p) + 4)) << 0))))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "228:              ((uint64_t)(*((const uint8_t *)(p) + 4)) << 8) | \\",
          "229:              ((uint64_t)(*((const uint8_t *)(p) + 5)) << 0)))",
          "231: #define EXTRACT_BE_56BITS(p) \\",
          "232:  ((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 48) | \\",
          "233:              ((uint64_t)(*((const uint8_t *)(p) + 1)) << 40) | \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: #define EXTRACT_BE_INT48(p) \\",
          "321:  (((*((const uint8_t *)(p) + 0)) & 0x80) ? \\",
          "322:    ((uint64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 40) | \\",
          "323:                ((uint64_t)(*((const uint8_t *)(p) + 1)) << 32) | \\",
          "324:                ((uint64_t)(*((const uint8_t *)(p) + 2)) << 24) | \\",
          "325:                ((uint64_t)(*((const uint8_t *)(p) + 3)) << 16) | \\",
          "326:                ((uint64_t)(*((const uint8_t *)(p) + 4)) << 8) | \\",
          "327:                ((uint64_t)(*((const uint8_t *)(p) + 5)) << 0))) : \\",
          "328:    ((int64_t)(INT64_T_CONSTANT(0xFFFFFFFF00000000U) | \\",
          "329:                ((uint64_t)(*((const uint8_t *)(p) + 0)) << 40) | \\",
          "330:                ((uint64_t)(*((const uint8_t *)(p) + 1)) << 32) | \\",
          "331:                ((uint64_t)(*((const uint8_t *)(p) + 2)) << 24) | \\",
          "332:                ((uint64_t)(*((const uint8_t *)(p) + 3)) << 16) | \\",
          "333:                ((uint64_t)(*((const uint8_t *)(p) + 4)) << 8) | \\",
          "334:                ((uint64_t)(*((const uint8_t *)(p) + 5)) << 0))))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "237:              ((uint64_t)(*((const uint8_t *)(p) + 5)) << 8) | \\",
          "238:              ((uint64_t)(*((const uint8_t *)(p) + 6)) << 0)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: #define EXTRACT_BE_INT56(p) \\",
          "346:  (((*((const uint8_t *)(p) + 0)) & 0x80) ? \\",
          "347:    ((int64_t)(((uint64_t)(*((const uint8_t *)(p) + 0)) << 48) | \\",
          "348:               ((uint64_t)(*((const uint8_t *)(p) + 1)) << 40) | \\",
          "349:               ((uint64_t)(*((const uint8_t *)(p) + 2)) << 32) | \\",
          "350:               ((uint64_t)(*((const uint8_t *)(p) + 3)) << 24) | \\",
          "351:               ((uint64_t)(*((const uint8_t *)(p) + 4)) << 16) | \\",
          "352:               ((uint64_t)(*((const uint8_t *)(p) + 5)) << 8) | \\",
          "353:               ((uint64_t)(*((const uint8_t *)(p) + 6)) << 0))) : \\",
          "354:      ((int64_t)(INT64_T_CONSTANT(0xFFFFFFFFFF000000U) | \\",
          "355:               ((uint64_t)(*((const uint8_t *)(p) + 0)) << 48) | \\",
          "356:               ((uint64_t)(*((const uint8_t *)(p) + 1)) << 40) | \\",
          "357:               ((uint64_t)(*((const uint8_t *)(p) + 2)) << 32) | \\",
          "358:               ((uint64_t)(*((const uint8_t *)(p) + 3)) << 24) | \\",
          "359:               ((uint64_t)(*((const uint8_t *)(p) + 4)) << 16) | \\",
          "360:               ((uint64_t)(*((const uint8_t *)(p) + 5)) << 8) | \\",
          "361:               ((uint64_t)(*((const uint8_t *)(p) + 6)) << 0))))",
          "",
          "---------------"
        ]
      }
    }
  ]
}