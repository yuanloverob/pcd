{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5cad250133f518433e025fbf81c5be9f5a58573",
      "candidate_info": {
        "commit_hash": "b5cad250133f518433e025fbf81c5be9f5a58573",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b5cad250133f518433e025fbf81c5be9f5a58573",
        "files": [
          "lib/cJSON.c"
        ],
        "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr\n(cherry picked from commit 417568707520af25ec5c5dd91da18e6db3649dcb)",
        "before_after_code_files": [
          "lib/cJSON.c||lib/cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/cJSON.c||lib/cJSON.c"
          ],
          "candidate": [
            "lib/cJSON.c||lib/cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/cJSON.c||lib/cJSON.c": [
          "File: lib/cJSON.c -> lib/cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483: fail:",
          "1484:     if (item->child != NULL)",
          "1485:     {",
          "1487:         item->child = NULL;",
          "1488:     }",
          "",
          "[Removed Lines]",
          "1486:         cJSON_Delete(child);",
          "",
          "[Added Lines]",
          "1486:         cJSON_Delete(item->child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92614e94def104e947f89112e55114ab0730831e",
      "candidate_info": {
        "commit_hash": "92614e94def104e947f89112e55114ab0730831e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/92614e94def104e947f89112e55114ab0730831e",
        "files": [
          "lib/cJSON.c"
        ],
        "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr\n(cherry picked from commit 417568707520af25ec5c5dd91da18e6db3649dcb)",
        "before_after_code_files": [
          "lib/cJSON.c||lib/cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/cJSON.c||lib/cJSON.c"
          ],
          "candidate": [
            "lib/cJSON.c||lib/cJSON.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/cJSON.c||lib/cJSON.c": [
          "File: lib/cJSON.c -> lib/cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483: fail:",
          "1484:     if (item->child != NULL)",
          "1485:     {",
          "1487:         item->child = NULL;",
          "1488:     }",
          "",
          "[Removed Lines]",
          "1486:         cJSON_Delete(child);",
          "",
          "[Added Lines]",
          "1486:         cJSON_Delete(item->child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0823797713251ae530e06a622ea6f77fb923fac3",
      "candidate_info": {
        "commit_hash": "0823797713251ae530e06a622ea6f77fb923fac3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0823797713251ae530e06a622ea6f77fb923fac3",
        "files": [
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: fix accessing $b2b_logic variables for PRACK requests\n\nFixes #2686\n\n(cherry picked from commit 3b6cf1640fc569a721574faaff4132b2e2d7c477)",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:    return SCB_RUN_ALL;",
          "995:   }",
          "996:  }",
          "997:  if (method_value == METHOD_PRACK)",
          "998:  {",
          "999:   lock_release(&table[hash_index].lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998:  ctx = b2b_get_context();",
          "999:  if (!ctx) {",
          "1000:   LM_ERR(\"Failed to get b2b context\\n\");",
          "1001:   lock_release(&server_htable[hash_index].lock);",
          "1002:   return SCB_DROP_MSG;",
          "1003:  }",
          "1004:  if (dlg->param.s && pkg_str_dup(&ctx->b2bl_key, &dlg->param) < 0) {",
          "1005:   LM_ERR(\"Failed to copy b2b_logic key to b2b context\\n\");",
          "1006:   lock_release(&server_htable[hash_index].lock);",
          "1007:   return SCB_DROP_MSG;",
          "1008:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015:   goto done;",
          "1016:  }",
          "1030:  if(dlg->state < B2B_CONFIRMED)",
          "1031:  {",
          "1032:   if(method_value != METHOD_UPDATE)",
          "",
          "[Removed Lines]",
          "1018:  ctx = b2b_get_context();",
          "1019:  if (!ctx) {",
          "1020:   LM_ERR(\"Failed to get b2b context\\n\");",
          "1021:   lock_release(&server_htable[hash_index].lock);",
          "1022:   return SCB_DROP_MSG;",
          "1023:  }",
          "1024:  if (dlg->param.s && pkg_str_dup(&ctx->b2bl_key, &dlg->param) < 0) {",
          "1025:   LM_ERR(\"Failed to copy b2b_logic key to b2b context\\n\");",
          "1026:   lock_release(&server_htable[hash_index].lock);",
          "1027:   return SCB_DROP_MSG;",
          "1028:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94b37404316da5148349c960336d5a9f68bc37ae",
      "candidate_info": {
        "commit_hash": "94b37404316da5148349c960336d5a9f68bc37ae",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/94b37404316da5148349c960336d5a9f68bc37ae",
        "files": [
          "context.c",
          "context.h"
        ],
        "message": "context API: Fix ctx cleanup API; Document context_destroy() behavior\n\nAlthough this patch fixes a memory leak in clear_global_context(), this\nfunction is not being used at all.\n\n(cherry picked from commit 02e1177714b91fa8b7e29f0162c8e9385767f6b1)",
        "before_after_code_files": [
          "context.c||context.c",
          "context.h||context.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "context.c||context.c": [
          "File: context.c -> context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: {",
          "147:  if (current_processing_ctx) {",
          "148:   context_destroy(CONTEXT_GLOBAL, current_processing_ctx);",
          "149:   current_processing_ctx = NULL;",
          "150:  }",
          "151: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   context_free(current_processing_ctx);",
          "",
          "---------------"
        ],
        "context.h||context.h": [
          "File: context.h -> context.h"
        ]
      }
    },
    {
      "candidate_hash": "c32349f4833bf4b57dc3597346fdafc241a301ec",
      "candidate_info": {
        "commit_hash": "c32349f4833bf4b57dc3597346fdafc241a301ec",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c32349f4833bf4b57dc3597346fdafc241a301ec",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Avoid dereferencing invalid memory on error logging\n\n(cherry picked from commit 99c9a828dd80f2874e89a520150565fa9e9162c7)\n(cherry picked from commit 7df9ff7176497c3109ac0648f381aad751ec90dd)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1604: error_bad_char:",
          "1605:  LM_ERR(\"bad char '%c' in state %d\"",
          "1606:    \" parsed: <%.*s> (%d) / <%.*s> (%d)\\n\",",
          "1609:  goto error_exit;",
          "1610: error_bad_host:",
          "1611:  LM_ERR(\"bad host in uri (error at char %c in\"",
          "1612:    \" state %d) parsed: <%.*s>(%d) /<%.*s> (%d)\\n\",",
          "1615:  goto error_exit;",
          "1616: error_bad_port:",
          "1617:  LM_ERR(\"bad port in uri (error at char '%c' in\"",
          "1618:    \" state %d) parsed: <%.*s>(%d) /<%.*s> (%d)\\n\",",
          "1621:  goto error_exit;",
          "1622: error_bad_uri:",
          "1623:  LM_ERR(\"bad uri, state %d parsed: <%.*s> (%d) / <%.*s> (%d)\\n\",",
          "",
          "[Removed Lines]",
          "1608:    len, ZSW(buf), len);",
          "1614:    len, ZSW(buf), len);",
          "1620:    len, ZSW(buf), len);",
          "",
          "[Added Lines]",
          "1607:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1608:    (int)(p-buf), len, ZSW(buf), len);",
          "1613:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1614:    (int)(p-buf), len, ZSW(buf), len);",
          "1619:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1620:    (int)(p-buf), len, ZSW(buf), len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}