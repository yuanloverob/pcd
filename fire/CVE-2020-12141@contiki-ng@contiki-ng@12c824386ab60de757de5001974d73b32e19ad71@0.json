{
  "cve_id": "CVE-2020-12141",
  "cve_desc": "An out-of-bounds read in the SNMP stack in Contiki-NG 4.4 and earlier allows an attacker to cause a denial of service and potentially disclose information via crafted SNMP packets to snmp_ber_decode_string_len_buffer in os/net/app-layer/snmp/snmp-ber.c.",
  "repo": "contiki-ng/contiki-ng",
  "patch_hash": "12c824386ab60de757de5001974d73b32e19ad71",
  "patch_info": {
    "commit_hash": "12c824386ab60de757de5001974d73b32e19ad71",
    "repo": "contiki-ng/contiki-ng",
    "commit_url": "https://github.com/contiki-ng/contiki-ng/commit/12c824386ab60de757de5001974d73b32e19ad71",
    "files": [
      "examples/snmp-server/project-conf.h",
      "examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c",
      "examples/snmp-server/snmp-server.c",
      "os/net/app-layer/snmp/snmp-api.c",
      "os/net/app-layer/snmp/snmp-api.h",
      "os/net/app-layer/snmp/snmp-ber.c",
      "os/net/app-layer/snmp/snmp-ber.h",
      "os/net/app-layer/snmp/snmp-conf.h",
      "os/net/app-layer/snmp/snmp-engine.c",
      "os/net/app-layer/snmp/snmp-engine.h",
      "os/net/app-layer/snmp/snmp-message.c",
      "os/net/app-layer/snmp/snmp-message.h",
      "os/net/app-layer/snmp/snmp-mib.c",
      "os/net/app-layer/snmp/snmp-mib.h",
      "os/net/app-layer/snmp/snmp-oid.c",
      "os/net/app-layer/snmp/snmp-oid.h",
      "os/net/app-layer/snmp/snmp.c",
      "os/net/app-layer/snmp/snmp.h",
      "tests/08-native-runs/10-snmp-server.sh"
    ],
    "message": "Refactored SNMP engine after vulnerabilities",
    "before_after_code_files": [
      "examples/snmp-server/project-conf.h||examples/snmp-server/project-conf.h",
      "examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c||examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c",
      "examples/snmp-server/snmp-server.c||examples/snmp-server/snmp-server.c",
      "os/net/app-layer/snmp/snmp-api.c||os/net/app-layer/snmp/snmp-api.c",
      "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h",
      "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c",
      "os/net/app-layer/snmp/snmp-ber.h||os/net/app-layer/snmp/snmp-ber.h",
      "os/net/app-layer/snmp/snmp-conf.h||os/net/app-layer/snmp/snmp-conf.h",
      "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c",
      "os/net/app-layer/snmp/snmp-engine.h||os/net/app-layer/snmp/snmp-engine.h",
      "os/net/app-layer/snmp/snmp-message.c||os/net/app-layer/snmp/snmp-message.c",
      "os/net/app-layer/snmp/snmp-message.h||os/net/app-layer/snmp/snmp-message.h",
      "os/net/app-layer/snmp/snmp-mib.c||os/net/app-layer/snmp/snmp-mib.c",
      "os/net/app-layer/snmp/snmp-mib.h||os/net/app-layer/snmp/snmp-mib.h",
      "os/net/app-layer/snmp/snmp-oid.c||os/net/app-layer/snmp/snmp-oid.c",
      "os/net/app-layer/snmp/snmp-oid.h||os/net/app-layer/snmp/snmp-oid.h",
      "os/net/app-layer/snmp/snmp.c||os/net/app-layer/snmp/snmp.c",
      "os/net/app-layer/snmp/snmp.h||os/net/app-layer/snmp/snmp.h",
      "tests/08-native-runs/10-snmp-server.sh||tests/08-native-runs/10-snmp-server.sh"
    ]
  },
  "patch_diff": {
    "examples/snmp-server/project-conf.h||examples/snmp-server/project-conf.h": [
      "File: examples/snmp-server/project-conf.h -> examples/snmp-server/project-conf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #define LOG_CONF_LEVEL_SNMP     LOG_LEVEL_NONE",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: #define SNMP_CONF_MAX_NR_VALUES 3",
      "",
      "---------------"
    ],
    "examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c||examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c": [
      "File: examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c -> examples/snmp-server/resources/snmp-SNMP-MIB-2-System.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: static void",
      "38: MIB_RESOURCE(sysDescr, sysDescr_handler, 1, 3, 6, 1, 2, 1, 1, 1, 0);",
      "40: static void",
      "42: {",
      "43:   snmp_api_set_string(varbind, oid, CONTIKI_VERSION_STRING);",
      "44: }",
      "",
      "[Removed Lines]",
      "36: sysDescr_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "41: sysDescr_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "36: sysDescr_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "41: sysDescr_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: static void",
      "51: MIB_RESOURCE(sysObjectID, sysObjectID_handler, 1, 3, 6, 1, 2, 1, 1, 2, 0);",
      "53: static void",
      "55: {",
      "56:   OID(sysObjectID_oid, 1, 3, 6, 1, 4, 1, 54352);",
      "58: }",
      "62: static void",
      "65: MIB_RESOURCE(sysUpTime, sysUpTime_handler, 1, 3, 6, 1, 2, 1, 1, 3, 0);",
      "67: static void",
      "69: {",
      "70:   snmp_api_set_time_ticks(varbind, oid, clock_seconds() * 100);",
      "71: }",
      "",
      "[Removed Lines]",
      "49: sysObjectID_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "54: sysObjectID_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "57:   snmp_api_set_oid(varbind, oid, sysObjectID_oid);",
      "63: sysUpTime_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "68: sysUpTime_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "49: sysObjectID_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "54: sysObjectID_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "57:   snmp_api_set_oid(varbind, oid, &sysObjectID_oid);",
      "63: sysUpTime_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "68: sysUpTime_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75: static void",
      "78: MIB_RESOURCE(sysContact, sysContact_handler, 1, 3, 6, 1, 2, 1, 1, 4, 0);",
      "80: static void",
      "82: {",
      "83:   snmp_api_set_string(varbind, oid, \"Contiki-NG, https://github.com/contiki-ng/contiki-ng\");",
      "84: }",
      "",
      "[Removed Lines]",
      "76: sysContact_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "81: sysContact_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "76: sysContact_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "81: sysContact_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "88: static void",
      "91: MIB_RESOURCE(sysName, sysName_handler, 1, 3, 6, 1, 2, 1, 1, 5, 0);",
      "93: static void",
      "95: {",
      "96:   snmp_api_set_string(varbind, oid, \"Contiki-NG - \"CONTIKI_TARGET_STRING);",
      "97: }",
      "",
      "[Removed Lines]",
      "89: sysName_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "94: sysName_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "89: sysName_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "94: sysName_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "101: static void",
      "104: MIB_RESOURCE(sysLocation, sysLocation_handler, 1, 3, 6, 1, 2, 1, 1, 6, 0);",
      "106: static void",
      "108: {",
      "109:   snmp_api_set_string(varbind, oid, \"\");",
      "110: }",
      "",
      "[Removed Lines]",
      "102: sysLocation_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "107: sysLocation_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "102: sysLocation_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "107: sysLocation_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "114: static void",
      "117: MIB_RESOURCE(sysServices, sysServices_handler, 1, 3, 6, 1, 2, 1, 1, 7, 0);",
      "119: static void",
      "121: {",
      "122:   snmp_api_set_time_ticks(varbind, oid, clock_seconds() * 100);",
      "123: }",
      "",
      "[Removed Lines]",
      "115: sysServices_handler(snmp_varbind_t *varbind, uint32_t *oid);",
      "120: sysServices_handler(snmp_varbind_t *varbind, uint32_t *oid)",
      "",
      "[Added Lines]",
      "115: sysServices_handler(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "120: sysServices_handler(snmp_varbind_t *varbind, snmp_oid_t *oid)",
      "",
      "---------------"
    ],
    "examples/snmp-server/snmp-server.c||examples/snmp-server/snmp-server.c": [
      "File: examples/snmp-server/snmp-server.c -> examples/snmp-server/snmp-server.c"
    ],
    "os/net/app-layer/snmp/snmp-api.c||os/net/app-layer/snmp/snmp-api.c": [
      "File: os/net/app-layer/snmp/snmp-api.c -> os/net/app-layer/snmp/snmp-api.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #include \"snmp-message.h\"",
      "45: #include \"snmp-ber.h\"",
      "61: void",
      "63: {",
      "66:   varbind->value_type = BER_DATA_TYPE_OCTET_STRING;",
      "67:   varbind->value.string.string = string;",
      "68:   varbind->value.string.length = strlen(string);",
      "69: }",
      "71: void",
      "73: {",
      "77:   varbind->value.integer = integer;",
      "78: }",
      "80: void",
      "82: {",
      "87: }",
      "89: void",
      "",
      "[Removed Lines]",
      "46: #include \"snmp-oid.h\"",
      "48: static void",
      "49: snmp_api_replace_oid(snmp_varbind_t *varbind, uint32_t *oid)",
      "50: {",
      "51:   uint8_t i;",
      "53:   i = 0;",
      "54:   while(oid[i] != ((uint32_t)-1)) {",
      "55:     varbind->oid[i] = oid[i];",
      "56:     i++;",
      "57:   }",
      "58:   varbind->oid[i] = ((uint32_t)-1);",
      "59: }",
      "62: snmp_api_set_string(snmp_varbind_t *varbind, uint32_t *oid, char *string)",
      "65:   snmp_api_replace_oid(varbind, oid);",
      "72: snmp_api_set_time_ticks(snmp_varbind_t *varbind, uint32_t *oid, uint32_t integer)",
      "75:   snmp_api_replace_oid(varbind, oid);",
      "76:   varbind->value_type = SNMP_DATA_TYPE_TIME_TICKS;",
      "81: snmp_api_set_oid(snmp_varbind_t *varbind, uint32_t *oid, uint32_t *ret_oid)",
      "84:   snmp_api_replace_oid(varbind, oid);",
      "85:   varbind->value_type = BER_DATA_TYPE_OID;",
      "86:   varbind->value.oid = ret_oid;",
      "",
      "[Added Lines]",
      "49: snmp_api_set_string(snmp_varbind_t *varbind, snmp_oid_t *oid, char *string)",
      "51:   memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));",
      "58: snmp_api_set_time_ticks(snmp_varbind_t *varbind, snmp_oid_t *oid, uint32_t integer)",
      "60:   memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));",
      "61:   varbind->value_type = BER_DATA_TYPE_TIMETICKS;",
      "66: snmp_api_set_oid(snmp_varbind_t *varbind, snmp_oid_t *oid, snmp_oid_t *ret_oid)",
      "68:   memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));",
      "69:   varbind->value_type = BER_DATA_TYPE_OBJECT_IDENTIFIER;",
      "70:   memcpy(&varbind->value.oid, ret_oid, sizeof(snmp_oid_t));",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h": [
      "File: os/net/app-layer/snmp/snmp-api.h -> os/net/app-layer/snmp/snmp-api.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "65: typedef void (*snmp_mib_resource_handler_t)(snmp_varbind_t *varbind, uint32_t *oid);",
      "",
      "[Added Lines]",
      "64: typedef void (*snmp_mib_resource_handler_t)(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80: #define OID(name, ...) \\",
      "",
      "[Removed Lines]",
      "81:   static uint32_t name[] = { __VA_ARGS__, -1 };",
      "",
      "[Added Lines]",
      "80:   static snmp_oid_t name = { \\",
      "81:     .data = __VA_ARGS__, \\",
      "82:     .length = (sizeof((uint32_t[]){ __VA_ARGS__ }) / sizeof(uint32_t)) \\",
      "83:   };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90: #define MIB_RESOURCE(name, handler, ...) \\",
      "",
      "[Removed Lines]",
      "91:   uint32_t name##_oid[] = { __VA_ARGS__, -1 }; \\",
      "92:   snmp_mib_resource_t name = { NULL, name##_oid, handler };",
      "",
      "[Added Lines]",
      "93:   snmp_mib_resource_t name = { \\",
      "94:     NULL, \\",
      "95:     { \\",
      "96:       .data = __VA_ARGS__, \\",
      "97:       .length = (sizeof((uint32_t[]){ __VA_ARGS__ }) / sizeof(uint32_t)) \\",
      "98:     }, \\",
      "99:     handler \\",
      "100:   };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "103: void",
      "",
      "[Removed Lines]",
      "104: snmp_api_set_string(snmp_varbind_t *varbind, uint32_t *oid, char *string);",
      "",
      "[Added Lines]",
      "112: snmp_api_set_string(snmp_varbind_t *varbind, snmp_oid_t *oid, char *string);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "115: void",
      "",
      "[Removed Lines]",
      "116: snmp_api_set_time_ticks(snmp_varbind_t *varbind, uint32_t *oid, uint32_t integer);",
      "",
      "[Added Lines]",
      "124: snmp_api_set_time_ticks(snmp_varbind_t *varbind, snmp_oid_t *oid, uint32_t integer);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "127: void",
      "",
      "[Removed Lines]",
      "128: snmp_api_set_oid(snmp_varbind_t *varbind, uint32_t *oid, uint32_t *ret_oid);",
      "",
      "[Added Lines]",
      "136: snmp_api_set_oid(snmp_varbind_t *varbind, snmp_oid_t *oid, snmp_oid_t *ret_oid);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c": [
      "File: os/net/app-layer/snmp/snmp-ber.c -> os/net/app-layer/snmp/snmp-ber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: #define LOG_LEVEL LOG_LEVEL_SNMP",
      "51: {",
      "71:   do {",
      "74:     number >>= 8;",
      "75:   } while(number);",
      "81: }",
      "85: {",
      "99: }",
      "103: {",
      "104:   uint32_t i;",
      "106:   str += length - 1;",
      "107:   for(i = 0; i < length; ++i) {",
      "110:   }",
      "126: }",
      "130: {",
      "133:   }",
      "139: }",
      "143: {",
      "146:   }",
      "152: }",
      "156: {",
      "157:   uint8_t i, len, type;",
      "167:   }",
      "177:   }",
      "181:   }",
      "185:   for(i = 1; i < len; ++i) {",
      "189:   }",
      "192: }",
      "196: {",
      "207:   }",
      "221:   }",
      "232: }",
      "236: {",
      "237:   uint8_t type, i, length_bytes;",
      "247:   }",
      "252:   } else {",
      "256:     if(length_bytes > 4) {",
      "262:     }",
      "266:     for(i = 1; i < length_bytes; ++i) {",
      "270:     }",
      "271:   }",
      "277: }",
      "281: {",
      "289: }",
      "",
      "[Removed Lines]",
      "49: unsigned char *",
      "50: snmp_ber_encode_type(unsigned char *out, uint32_t *out_len, uint8_t type)",
      "53:   (*out_len)++;",
      "54:   return out;",
      "55: }",
      "57: unsigned char *",
      "58: snmp_ber_encode_length(unsigned char *out, uint32_t *out_len, uint8_t length)",
      "59: {",
      "61:   (*out_len)++;",
      "62:   return out;",
      "63: }",
      "65: unsigned char *",
      "66: snmp_ber_encode_integer(unsigned char *out, uint32_t *out_len, uint32_t number)",
      "67: {",
      "68:   uint32_t original_out_len;",
      "70:   original_out_len = *out_len;",
      "72:     (*out_len)++;",
      "77:   out = snmp_ber_encode_length(out, out_len, ((*out_len - original_out_len) & 0xFF));",
      "78:   out = snmp_ber_encode_type(out, out_len, BER_DATA_TYPE_INTEGER);",
      "80:   return out;",
      "83: unsigned char *",
      "84: snmp_ber_encode_unsigned_integer(unsigned char *out, uint32_t *out_len, uint8_t type, uint32_t number)",
      "86:   uint32_t original_out_len;",
      "88:   original_out_len = *out_len;",
      "89:   do {",
      "90:     (*out_len)++;",
      "92:     number >>= 8;",
      "93:   } while(number);",
      "95:   out = snmp_ber_encode_length(out, out_len, ((*out_len - original_out_len) & 0xFF));",
      "96:   out = snmp_ber_encode_type(out, out_len, type);",
      "98:   return out;",
      "101: unsigned char *",
      "102: snmp_ber_encode_string_len(unsigned char *out, uint32_t *out_len, const char *str, uint32_t length)",
      "108:     (*out_len)++;",
      "112:   out = snmp_ber_encode_length(out, out_len, length);",
      "113:   out = snmp_ber_encode_type(out, out_len, BER_DATA_TYPE_OCTET_STRING);",
      "115:   return out;",
      "116: }",
      "118: unsigned char *",
      "119: snmp_ber_encode_null(unsigned char *out, uint32_t *out_len, uint8_t type)",
      "120: {",
      "121:   (*out_len)++;",
      "123:   out = snmp_ber_encode_type(out, out_len, type);",
      "125:   return out;",
      "128: unsigned char *",
      "129: snmp_ber_decode_type(unsigned char *buff, uint32_t *buff_len, uint8_t *type)",
      "131:   if(*buff_len == 0) {",
      "132:     return NULL;",
      "136:   (*buff_len)--;",
      "138:   return buff;",
      "141: unsigned char *",
      "142: snmp_ber_decode_length(unsigned char *buff, uint32_t *buff_len, uint8_t *length)",
      "144:   if(*buff_len == 0) {",
      "145:     return NULL;",
      "149:   (*buff_len)--;",
      "151:   return buff;",
      "154: unsigned char *",
      "155: snmp_ber_decode_integer(unsigned char *buf, uint32_t *buff_len, uint32_t *num)",
      "159:   buf = snmp_ber_decode_type(buf, buff_len, &type);",
      "161:   if(buf == NULL || type != BER_DATA_TYPE_INTEGER) {",
      "166:     return NULL;",
      "169:   buf = snmp_ber_decode_length(buf, buff_len, &len);",
      "171:   if(buf == NULL || len > 4) {",
      "176:     return NULL;",
      "179:   if(*buff_len < len) {",
      "180:     return NULL;",
      "184:   (*buff_len)--;",
      "188:     (*buff_len)--;",
      "191:   return buf;",
      "194: unsigned char *",
      "195: snmp_ber_decode_unsigned_integer(unsigned char *buf, uint32_t *buff_len, uint8_t expected_type, uint32_t *num)",
      "197:   uint8_t i, len, type;",
      "199:   buf = snmp_ber_decode_type(buf, buff_len, &type);",
      "201:   if(buf == NULL || type != expected_type) {",
      "206:     return NULL;",
      "209:   buf = snmp_ber_decode_length(buf, buff_len, &len);",
      "211:   if(buf == NULL || len > 4) {",
      "216:     return NULL;",
      "217:   }",
      "219:   if(*buff_len < len) {",
      "220:     return NULL;",
      "224:   (*buff_len)--;",
      "225:   for(i = 1; i < len; ++i) {",
      "228:     (*buff_len)--;",
      "229:   }",
      "231:   return buf;",
      "234: unsigned char *",
      "235: snmp_ber_decode_string_len_buffer(unsigned char *buf, uint32_t *buff_len, const char **str, uint32_t *length)",
      "239:   buf = snmp_ber_decode_type(buf, buff_len, &type);",
      "241:   if(buf == NULL || type != BER_DATA_TYPE_OCTET_STRING) {",
      "246:     return NULL;",
      "249:   if((*buf & 0x80) == 0) {",
      "251:     (*buff_len)--;",
      "254:     length_bytes = (uint8_t)(*buf++ & 0x7F);",
      "255:     (*buff_len)--;",
      "261:       return NULL;",
      "265:     (*buff_len)--;",
      "269:       (*buff_len)--;",
      "276:   return buf + *length;",
      "279: unsigned char *",
      "280: snmp_ber_decode_null(unsigned char *buf, uint32_t *buff_len)",
      "282:   buf++;",
      "283:   (*buff_len)--;",
      "285:   buf++;",
      "286:   (*buff_len)--;",
      "288:   return buf;",
      "",
      "[Added Lines]",
      "49: static inline int",
      "50: snmp_ber_encode_unsigned_integer(snmp_packet_t *snmp_packet, uint8_t type, uint32_t number)",
      "52:   uint16_t original_out_len;",
      "54:   original_out_len = snmp_packet->used;",
      "56:     if(snmp_packet->used == snmp_packet->max) {",
      "57:       return 0;",
      "58:     }",
      "61:     snmp_packet->used++;",
      "63: #ifdef __MSPGCC__",
      "64:     number >>= 4;",
      "65:     number >>= 4;",
      "71:   if(!snmp_ber_encode_length(snmp_packet, snmp_packet->used - original_out_len)) {",
      "72:     return 0;",
      "73:   }",
      "75:   if(!snmp_ber_encode_type(snmp_packet, type)) {",
      "76:     return 0;",
      "77:   }",
      "79:   return 1;",
      "82: int",
      "83: snmp_ber_encode_type(snmp_packet_t *snmp_packet, uint8_t type)",
      "85:   if(snmp_packet->used == snmp_packet->max) {",
      "86:     return 0;",
      "87:   }",
      "90:   snmp_packet->used++;",
      "92:   return 1;",
      "93: }",
      "95: int",
      "96: snmp_ber_encode_length(snmp_packet_t *snmp_packet, uint16_t length)",
      "97: {",
      "98:   if(length > 0xFF) {",
      "99:     if(snmp_packet->used == snmp_packet->max) {",
      "100:       return 0;",
      "101:     }",
      "104:     snmp_packet->used++;",
      "106:     if(snmp_packet->used == snmp_packet->max) {",
      "107:       return 0;",
      "108:     }",
      "111:     snmp_packet->used++;",
      "113:     if(snmp_packet->used == snmp_packet->max) {",
      "114:       return 0;",
      "115:     }",
      "118:     snmp_packet->used++;",
      "119:   } else if(length > 0x7F) {",
      "120:     if(snmp_packet->used == snmp_packet->max) {",
      "121:       return 0;",
      "122:     }",
      "125:     snmp_packet->used++;",
      "127:     if(snmp_packet->used == snmp_packet->max) {",
      "128:       return 0;",
      "129:     }",
      "132:     snmp_packet->used++;",
      "133:   } else {",
      "134:     if(snmp_packet->used == snmp_packet->max) {",
      "135:       return 0;",
      "136:     }",
      "139:     snmp_packet->used++;",
      "140:   }",
      "142:   return 1;",
      "143: }",
      "145: int",
      "146: snmp_ber_encode_timeticks(snmp_packet_t *snmp_packet, uint32_t timeticks)",
      "147: {",
      "148:   return snmp_ber_encode_unsigned_integer(snmp_packet, BER_DATA_TYPE_TIMETICKS, timeticks);",
      "149: }",
      "151: int",
      "152: snmp_ber_encode_integer(snmp_packet_t *snmp_packet, uint32_t number)",
      "153: {",
      "154:   return snmp_ber_encode_unsigned_integer(snmp_packet, BER_DATA_TYPE_INTEGER, number);",
      "157: int",
      "158: snmp_ber_encode_string_len(snmp_packet_t *snmp_packet, const char *str, uint32_t length)",
      "164:     if(snmp_packet->used == snmp_packet->max) {",
      "165:       return 0;",
      "166:     }",
      "169:     snmp_packet->used++;",
      "172:   if(!snmp_ber_encode_length(snmp_packet, length)) {",
      "173:     return 0;",
      "174:   }",
      "176:   if(!snmp_ber_encode_type(snmp_packet, BER_DATA_TYPE_OCTET_STRING)) {",
      "177:     return 0;",
      "178:   }",
      "180:   return 1;",
      "183: int",
      "184: snmp_ber_encode_oid(snmp_packet_t *snmp_packet, snmp_oid_t *oid)",
      "186:   uint32_t val;",
      "187:   uint16_t original_out_len;",
      "188:   uint8_t pos;",
      "190:   original_out_len = snmp_packet->used;",
      "192:   pos = oid->length - 1;",
      "193:   while(pos) {",
      "194:     val = oid->data[pos];",
      "196:     if(snmp_packet->used == snmp_packet->max) {",
      "197:       return 0;",
      "198:     }",
      "201:     snmp_packet->used++;",
      "202:     val >>= 7;",
      "204:     while(val) {",
      "205:       if(snmp_packet->used == snmp_packet->max) {",
      "206:         return 0;",
      "207:       }",
      "210:       snmp_packet->used++;",
      "212:       val >>= 7;",
      "213:     }",
      "214:     pos--;",
      "215:   }",
      "217:   if(snmp_packet->used == snmp_packet->max) {",
      "218:     return 0;",
      "219:   }",
      "221:   val = *(snmp_packet->out + 1) + 40 * oid->data[pos];",
      "222:   snmp_packet->used--;",
      "223:   snmp_packet->out++;",
      "225:   if(snmp_packet->used == snmp_packet->max) {",
      "226:     return 0;",
      "227:   }",
      "230:   snmp_packet->used++;",
      "232:   val >>= 7;",
      "234:   while(val) {",
      "235:     if(snmp_packet->used == snmp_packet->max) {",
      "236:       return 0;",
      "237:     }",
      "240:     snmp_packet->used++;",
      "242:     val >>= 7;",
      "243:   }",
      "245:   if(!snmp_ber_encode_length(snmp_packet, snmp_packet->used - original_out_len)) {",
      "246:     return 0;",
      "249:   if(!snmp_ber_encode_type(snmp_packet, BER_DATA_TYPE_OBJECT_IDENTIFIER)) {",
      "250:     return 0;",
      "251:   }",
      "253:   return 1;",
      "256: int",
      "257: snmp_ber_encode_null(snmp_packet_t *snmp_packet, uint8_t type)",
      "260:   if(snmp_packet->used == snmp_packet->max) {",
      "261:     return 0;",
      "265:   snmp_packet->used++;",
      "267:   return snmp_ber_encode_type(snmp_packet, type);",
      "270: static inline int",
      "271: snmp_ber_decode_unsigned_integer(snmp_packet_t *snmp_packet, uint8_t expected_type, uint32_t *num)",
      "275:   if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "276:     return 0;",
      "277:   }",
      "279:   if(type != expected_type) {",
      "284:     return 0;",
      "287:   if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "288:     return 0;",
      "289:   }",
      "291:   if(len > 4) {",
      "296:     return 0;",
      "299:   if(snmp_packet->used == 0) {",
      "300:     return 0;",
      "304:   snmp_packet->used--;",
      "308:     if(snmp_packet->used == 0) {",
      "309:       return 0;",
      "310:     }",
      "312:     snmp_packet->used--;",
      "315:   return 1;",
      "318: int",
      "319: snmp_ber_decode_type(snmp_packet_t *snmp_packet, uint8_t *type)",
      "321:   if(snmp_packet->used == 0) {",
      "322:     return 0;",
      "326:   snmp_packet->used--;",
      "328:   return 1;",
      "329: }",
      "331: int",
      "332: snmp_ber_decode_length(snmp_packet_t *snmp_packet, uint8_t *length)",
      "333: {",
      "334:   if(snmp_packet->used == 0) {",
      "335:     return 0;",
      "339:   snmp_packet->used--;",
      "341:   return 1;",
      "342: }",
      "344: int",
      "345: snmp_ber_decode_timeticks(snmp_packet_t *snmp_packet, uint32_t *timeticks)",
      "346: {",
      "347:   return snmp_ber_decode_unsigned_integer(snmp_packet, BER_DATA_TYPE_TIMETICKS, timeticks);",
      "350: int",
      "351: snmp_ber_decode_integer(snmp_packet_t *snmp_packet, uint32_t *num)",
      "352: {",
      "353:   return snmp_ber_decode_unsigned_integer(snmp_packet, BER_DATA_TYPE_INTEGER, num);",
      "354: }",
      "356: int",
      "357: snmp_ber_decode_string_len_buffer(snmp_packet_t *snmp_packet, const char **str, uint32_t *length)",
      "361:   if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "362:     return 0;",
      "363:   }",
      "365:   if(type != BER_DATA_TYPE_OCTET_STRING) {",
      "370:     return 0;",
      "373:   if((*snmp_packet->in & 0x80) == 0) {",
      "375:     if(snmp_packet->used == 0) {",
      "376:       return 0;",
      "377:     }",
      "380:     snmp_packet->used--;",
      "383:     if(snmp_packet->used == 0) {",
      "384:       return 0;",
      "385:     }",
      "387:     length_bytes = (uint8_t)(*snmp_packet->in++ & 0x7F);",
      "388:     snmp_packet->used--;",
      "395:       return 0;",
      "396:     }",
      "398:     if(snmp_packet->used == 0) {",
      "399:       return 0;",
      "403:     snmp_packet->used--;",
      "408:       if(snmp_packet->used == 0) {",
      "409:         return 0;",
      "410:       }",
      "413:       snmp_packet->used--;",
      "419:   if(snmp_packet->used == 0 || snmp_packet->used - *length <= 0) {",
      "420:     return 0;",
      "421:   }",
      "423:   snmp_packet->used -= *length;",
      "424:   snmp_packet->in += *length;",
      "426:   return 1;",
      "427: }",
      "429: int",
      "430: snmp_ber_decode_oid(snmp_packet_t *snmp_packet, snmp_oid_t *oid)",
      "431: {",
      "432:   uint8_t *buf_end, type;",
      "433:   uint8_t len, j;",
      "434:   div_t first;",
      "436:   if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "437:     return 0;",
      "438:   }",
      "440:   if(type != BER_DATA_TYPE_OBJECT_IDENTIFIER) {",
      "441:     return 0;",
      "442:   }",
      "444:   if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "445:     return 0;",
      "446:   }",
      "448:   buf_end = snmp_packet->in + len;",
      "450:   if(snmp_packet->used == 0) {",
      "451:     return 0;",
      "452:   }",
      "454:   snmp_packet->used--;",
      "455:   first = div(*snmp_packet->in++, 40);",
      "457:   oid->length = 0;",
      "459:   oid->data[oid->length++] = (uint32_t)first.quot;",
      "460:   oid->data[oid->length++] = (uint32_t)first.rem;",
      "462:   while(snmp_packet->in != buf_end) {",
      "463:     if(oid->length >= SNMP_MSG_OID_MAX_LEN) {",
      "464:       return 0;",
      "465:     }",
      "467:     if(snmp_packet->used == 0) {",
      "468:       return 0;",
      "469:     }",
      "470:     oid->data[oid->length] = (uint32_t)(*snmp_packet->in & 0x7F);",
      "471:     for(j = 0; j < 4; j++) {",
      "472:       snmp_packet->used--;",
      "473:       if((*snmp_packet->in++ & 0x80) == 0) {",
      "474:         break;",
      "475:       }",
      "477:       if(snmp_packet->used == 0) {",
      "478:         return 0;",
      "479:       }",
      "481:       oid->data[oid->length] <<= 7;",
      "482:       oid->data[oid->length] |= (*snmp_packet->in & 0x7F);",
      "483:     }",
      "485:     oid->length++;",
      "486:   }",
      "488:   return 1;",
      "491: int",
      "492: snmp_ber_decode_null(snmp_packet_t *snmp_packet)",
      "494:   if(snmp_packet->used == 0) {",
      "495:     return 0;",
      "496:   }",
      "498:   snmp_packet->in++;",
      "499:   snmp_packet->used--;",
      "501:   if(snmp_packet->used == 0) {",
      "502:     return 0;",
      "503:   }",
      "505:   snmp_packet->in++;",
      "506:   snmp_packet->used--;",
      "508:   return 1;",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-ber.h||os/net/app-layer/snmp/snmp-ber.h": [
      "File: os/net/app-layer/snmp/snmp-ber.h -> os/net/app-layer/snmp/snmp-ber.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #ifndef SNMP_BER_H_",
      "46: #define SNMP_BER_H_",
      "",
      "[Removed Lines]",
      "48: #define BER_DATA_TYPE_INTEGER           0x02",
      "49: #define BER_DATA_TYPE_OCTET_STRING      0x04",
      "50: #define BER_DATA_TYPE_NULL              0x05",
      "51: #define BER_DATA_TYPE_OID               0x06",
      "52: #define BER_DATA_TYPE_SEQUENCE          0x30",
      "63: unsigned char *",
      "64: snmp_ber_encode_type(unsigned char *out, uint32_t *out_len, uint8_t type);",
      "75: unsigned char *",
      "76: snmp_ber_encode_length(unsigned char *out, uint32_t *out_len, uint8_t length);",
      "87: unsigned char *",
      "88: snmp_ber_encode_integer(unsigned char *out, uint32_t *out_len, uint32_t integer);",
      "100: unsigned char *",
      "101: snmp_ber_encode_unsigned_integer(unsigned char *out, uint32_t *out_len, uint8_t type, uint32_t number);",
      "113: unsigned char *",
      "114: snmp_ber_encode_string_len(unsigned char *out, uint32_t *out_len, const char *str, uint32_t length);",
      "125: unsigned char *",
      "126: snmp_ber_encode_null(unsigned char *out, uint32_t *out_len, uint8_t type);",
      "137: unsigned char *",
      "138: snmp_ber_decode_type(unsigned char *buff, uint32_t *buff_len, uint8_t *type);",
      "149: unsigned char *",
      "150: snmp_ber_decode_length(unsigned char *buff, uint32_t *buff_len, uint8_t *length);",
      "161: unsigned char *",
      "162: snmp_ber_decode_integer(unsigned char *buff, uint32_t *buff_len, uint32_t *integer);",
      "174: unsigned char *",
      "175: snmp_ber_decode_unsigned_integer(unsigned char *buff, uint32_t *buff_len, uint8_t expected_type, uint32_t *number);",
      "187: unsigned char *",
      "188: snmp_ber_decode_string_len_buffer(unsigned char *buff, uint32_t *buff_len, const char **str, uint32_t *length);",
      "198: unsigned char *",
      "199: snmp_ber_decode_null(unsigned char *buff, uint32_t *buff_len);",
      "",
      "[Added Lines]",
      "66: #define BER_DATA_TYPE_EOC                   0x00",
      "72: #define BER_DATA_TYPE_INTEGER               0x02",
      "78: #define BER_DATA_TYPE_OCTET_STRING          0x04",
      "84: #define BER_DATA_TYPE_NULL                  0x05",
      "90: #define BER_DATA_TYPE_OBJECT_IDENTIFIER     0x06",
      "96: #define BER_DATA_TYPE_SEQUENCE              0x30",
      "102: #define BER_DATA_TYPE_TIMETICKS             0x43",
      "108: #define BER_DATA_TYPE_NO_SUCH_INSTANCE      0x81",
      "114: #define BER_DATA_TYPE_END_OF_MIB_VIEW       0x82",
      "120: #define BER_DATA_TYPE_PDU_GET_REQUEST       0xA0",
      "126: #define BER_DATA_TYPE_PDU_GET_NEXT_REQUEST  0xA1",
      "132: #define BER_DATA_TYPE_PDU_GET_RESPONSE      0xA2",
      "138: #define BER_DATA_TYPE_PDU_SET_REQUEST       0xA3",
      "144: #define BER_DATA_TYPE_PDU_TRAP              0xA4",
      "150: #define BER_DATA_TYPE_PDU_GET_BULK          0xA5",
      "160: int",
      "161: snmp_ber_encode_type(snmp_packet_t *snmp_packet, uint8_t type);",
      "171: int",
      "172: snmp_ber_encode_length(snmp_packet_t *snmp_packet, uint16_t length);",
      "182: int",
      "183: snmp_ber_encode_integer(snmp_packet_t *snmp_packet, uint32_t integer);",
      "193: int",
      "194: snmp_ber_encode_timeticks(snmp_packet_t *snmp_packet, uint32_t timeticks);",
      "205: int",
      "206: snmp_ber_encode_string_len(snmp_packet_t *snmp_packet, const char *str, uint32_t length);",
      "216: int",
      "217: snmp_ber_encode_oid(snmp_packet_t *snmp_packet, snmp_oid_t *oid);",
      "227: int",
      "228: snmp_ber_encode_null(snmp_packet_t *snmp_packet, uint8_t type);",
      "238: int",
      "239: snmp_ber_decode_type(snmp_packet_t *snmp_packet, uint8_t *type);",
      "249: int",
      "250: snmp_ber_decode_length(snmp_packet_t *snmp_packet, uint8_t *length);",
      "260: int",
      "261: snmp_ber_decode_integer(snmp_packet_t *snmp_packet, uint32_t *integer);",
      "271: int",
      "272: snmp_ber_decode_timeticks(snmp_packet_t *snmp_packet, uint32_t *timeticks);",
      "283: int",
      "284: snmp_ber_decode_string_len_buffer(snmp_packet_t *snmp_packet, const char **str, uint32_t *length);",
      "293: int",
      "294: snmp_ber_decode_null(snmp_packet_t *snmp_packet);",
      "304: int",
      "305: snmp_ber_decode_oid(snmp_packet_t *snmp_packet, snmp_oid_t *oid);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-conf.h||os/net/app-layer/snmp/snmp-conf.h": [
      "File: os/net/app-layer/snmp/snmp-conf.h -> os/net/app-layer/snmp/snmp-conf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: #endif",
      "65: #ifdef SNMP_CONF_MSG_OID_MAX_LEN",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: #if SNMP_CONF_MSG_OID_MAX_LEN > 128",
      "76: #error \"OID is limited to 128 in the standard\"",
      "77: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75: #endif",
      "77: #ifdef SNMP_CONF_MAX_NR_VALUES",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90: #if SNMP_CONF_MAX_NR_VALUES > 255",
      "91: #error \"Number of OID's per packet is limited to 255 in this implementation\"",
      "92: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87: #endif",
      "89: #ifdef SNMP_CONF_MAX_PACKET_SIZE",
      "101: #ifdef SNMP_CONF_PORT",
      "",
      "[Removed Lines]",
      "93: #define SNMP_MAX_PACKET_SIZE SNMP_CONF_MAX_PACKET_SIZE",
      "94: #else",
      "98: #define SNMP_MAX_PACKET_SIZE 512",
      "99: #endif",
      "",
      "[Added Lines]",
      "105: #error \"SNMP_CONF_MAX_PACKET_SIZE is obsolete. Use UIP_CONF_BUFFER_SIZE\"",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c": [
      "File: os/net/app-layer/snmp/snmp-engine.c -> os/net/app-layer/snmp/snmp-engine.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #include \"snmp-engine.h\"",
      "43: #include \"snmp-message.h\"",
      "44: #include \"snmp-mib.h\"",
      "47: #define LOG_MODULE \"SNMP [engine]\"",
      "48: #define LOG_LEVEL LOG_LEVEL_SNMP",
      "53: {",
      "54:   snmp_mib_resource_t *resource;",
      "59:     if(!resource) {",
      "60:       switch(header->version) {",
      "61:       case SNMP_VERSION_1:",
      "67:         break;",
      "68:       case SNMP_VERSION_2C:",
      "70:         break;",
      "71:       default:",
      "74:       }",
      "75:     } else {",
      "77:     }",
      "78:   }",
      "80:   return 0;",
      "81: }",
      "85: {",
      "86:   snmp_mib_resource_t *resource;",
      "91:     if(!resource) {",
      "92:       switch(header->version) {",
      "93:       case SNMP_VERSION_1:",
      "99:         break;",
      "100:       case SNMP_VERSION_2C:",
      "102:         break;",
      "103:       default:",
      "106:       }",
      "107:     } else {",
      "109:     }",
      "110:   }",
      "112:   return 0;",
      "113: }",
      "117: {",
      "118:   snmp_mib_resource_t *resource;",
      "121:   uint8_t repeater;",
      "130:   }",
      "133:   for(i = 0; i < original_varbinds_length; i++) {",
      "135:       break;",
      "136:     }",
      "139:     if(!resource) {",
      "140:       switch(header->version) {",
      "141:       case SNMP_VERSION_1:",
      "147:         break;",
      "148:       case SNMP_VERSION_2C:",
      "150:         break;",
      "151:       default:",
      "154:       }",
      "155:     } else {",
      "159:       }",
      "160:     }",
      "161:   }",
      "164:     repeater = 0;",
      "167:       if(!resource) {",
      "168:         switch(header->version) {",
      "169:         case SNMP_VERSION_1:",
      "175:           break;",
      "176:         case SNMP_VERSION_2C:",
      "181:           }",
      "182:           break;",
      "183:         default:",
      "186:         }",
      "187:       } else {",
      "192:           repeater++;",
      "193:         }",
      "194:       }",
      "195:     }",
      "",
      "[Removed Lines]",
      "45: #include \"snmp-oid.h\"",
      "51: int",
      "52: snmp_engine_get(snmp_header_t *header, snmp_varbind_t *varbinds, uint32_t varbinds_length)",
      "55:   uint32_t i;",
      "57:   for(i = 0; i < varbinds_length; i++) {",
      "58:     resource = snmp_mib_find(varbinds[i].oid);",
      "62:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "66:         header->error_index_max_repetitions.error_index = i + 1;",
      "69:         (&varbinds[i])->value_type = SNMP_DATA_TYPE_NO_SUCH_INSTANCE;",
      "72:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "73:         header->error_index_max_repetitions.error_index = 0;",
      "76:       resource->handler(&varbinds[i], resource->oid);",
      "83: int",
      "84: snmp_engine_get_next(snmp_header_t *header, snmp_varbind_t *varbinds, uint32_t varbinds_length)",
      "87:   uint32_t i;",
      "89:   for(i = 0; i < varbinds_length; i++) {",
      "90:     resource = snmp_mib_find_next(varbinds[i].oid);",
      "94:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "98:         header->error_index_max_repetitions.error_index = i + 1;",
      "101:         (&varbinds[i])->value_type = SNMP_DATA_TYPE_END_OF_MIB_VIEW;",
      "104:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "105:         header->error_index_max_repetitions.error_index = 0;",
      "108:       resource->handler(&varbinds[i], resource->oid);",
      "115: int",
      "116: snmp_engine_get_bulk(snmp_header_t *header, snmp_varbind_t *varbinds, uint32_t *varbinds_length)",
      "119:   uint32_t i, j, original_varbinds_length;",
      "120:   uint32_t oid[SNMP_MAX_NR_VALUES][SNMP_MSG_OID_MAX_LEN];",
      "127:   original_varbinds_length = *varbinds_length;",
      "128:   for(i = 0; i < original_varbinds_length; i++) {",
      "129:     snmp_oid_copy(oid[i], varbinds[i].oid);",
      "134:     if(i >= header->error_status_non_repeaters.non_repeaters) {",
      "138:     resource = snmp_mib_find_next(oid[i]);",
      "142:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "146:         header->error_index_max_repetitions.error_index = i + 1;",
      "149:         (&varbinds[i])->value_type = SNMP_DATA_TYPE_END_OF_MIB_VIEW;",
      "152:         header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "153:         header->error_index_max_repetitions.error_index = 0;",
      "156:       if(*varbinds_length < SNMP_MAX_NR_VALUES) {",
      "157:         resource->handler(&varbinds[*varbinds_length], resource->oid);",
      "158:         (*varbinds_length)++;",
      "163:   for(i = 0; i < header->error_index_max_repetitions.max_repetitions; i++) {",
      "165:     for(j = header->error_status_non_repeaters.non_repeaters; j < original_varbinds_length; j++) {",
      "166:       resource = snmp_mib_find_next(oid[j]);",
      "170:           header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "174:           header->error_index_max_repetitions.error_index = *varbinds_length + 1;",
      "177:           if(*varbinds_length < SNMP_MAX_NR_VALUES) {",
      "178:             (&varbinds[*varbinds_length])->value_type = SNMP_DATA_TYPE_END_OF_MIB_VIEW;",
      "179:             snmp_oid_copy((&varbinds[*varbinds_length])->oid, oid[j]);",
      "180:             (*varbinds_length)++;",
      "184:           header->error_status_non_repeaters.error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "185:           header->error_index_max_repetitions.error_index = 0;",
      "188:         if(*varbinds_length < SNMP_MAX_NR_VALUES) {",
      "189:           resource->handler(&varbinds[*varbinds_length], resource->oid);",
      "190:           (*varbinds_length)++;",
      "191:           snmp_oid_copy(oid[j], resource->oid);",
      "",
      "[Added Lines]",
      "45: #include \"snmp-ber.h\"",
      "51: static inline int",
      "52: snmp_engine_get(snmp_header_t *header, snmp_varbind_t *varbinds)",
      "55:   uint8_t i;",
      "57:   i = 0;",
      "58:   while(varbinds[i].value_type != BER_DATA_TYPE_EOC && i < SNMP_MAX_NR_VALUES) {",
      "59:     resource = snmp_mib_find(&varbinds[i].oid);",
      "63:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "67:         header->error_index = i + 1;",
      "70:         (&varbinds[i])->value_type = BER_DATA_TYPE_NO_SUCH_INSTANCE;",
      "73:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "74:         header->error_index = 0;",
      "77:       resource->handler(&varbinds[i], &resource->oid);",
      "80:     i++;",
      "86: static inline int",
      "87: snmp_engine_get_next(snmp_header_t *header, snmp_varbind_t *varbinds)",
      "90:   uint8_t i;",
      "92:   i = 0;",
      "93:   while(varbinds[i].value_type != BER_DATA_TYPE_EOC && i < SNMP_MAX_NR_VALUES) {",
      "94:     resource = snmp_mib_find_next(&varbinds[i].oid);",
      "98:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "102:         header->error_index = i + 1;",
      "105:         (&varbinds[i])->value_type = BER_DATA_TYPE_END_OF_MIB_VIEW;",
      "108:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "109:         header->error_index = 0;",
      "112:       resource->handler(&varbinds[i], &resource->oid);",
      "115:     i++;",
      "121: static inline int",
      "122: snmp_engine_get_bulk(snmp_header_t *header, snmp_varbind_t *varbinds)",
      "125:   snmp_oid_t oids[SNMP_MAX_NR_VALUES];",
      "126:   uint32_t j, original_varbinds_length;",
      "128:   uint8_t i, varbinds_length;",
      "134:   original_varbinds_length = 0;",
      "135:   while(varbinds[original_varbinds_length].value_type != BER_DATA_TYPE_EOC && original_varbinds_length < SNMP_MAX_NR_VALUES) {",
      "136:     memcpy(&oids[original_varbinds_length], &varbinds[original_varbinds_length].oid, sizeof(snmp_oid_t));",
      "137:     original_varbinds_length++;",
      "140:   varbinds_length = 0;",
      "142:     if(i >= header->non_repeaters) {",
      "146:     resource = snmp_mib_find_next(&oids[i]);",
      "150:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "154:         header->error_index = i + 1;",
      "157:         (&varbinds[i])->value_type = BER_DATA_TYPE_END_OF_MIB_VIEW;",
      "160:         header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "161:         header->error_index = 0;",
      "164:       if(varbinds_length < SNMP_MAX_NR_VALUES) {",
      "165:         resource->handler(&varbinds[varbinds_length], &resource->oid);",
      "166:         (varbinds_length)++;",
      "167:       } else {",
      "168:         return -1;",
      "173:   for(i = 0; i < header->max_repetitions; i++) {",
      "175:     for(j = header->non_repeaters; j < original_varbinds_length; j++) {",
      "176:       resource = snmp_mib_find_next(&oids[j]);",
      "180:           header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "184:           header->error_index = varbinds_length + 1;",
      "187:           if(varbinds_length < SNMP_MAX_NR_VALUES) {",
      "188:             (&varbinds[varbinds_length])->value_type = BER_DATA_TYPE_END_OF_MIB_VIEW;",
      "189:             memcpy(&varbinds[varbinds_length].oid, &oids[j], sizeof(snmp_oid_t));",
      "190:             (varbinds_length)++;",
      "191:           } else {",
      "192:             return -1;",
      "196:           header->error_status = SNMP_STATUS_NO_SUCH_NAME;",
      "197:           header->error_index = 0;",
      "200:         if(varbinds_length < SNMP_MAX_NR_VALUES) {",
      "201:           resource->handler(&varbinds[varbinds_length], &resource->oid);",
      "202:           (varbinds_length)++;",
      "203:           memcpy(&oids[j], &resource->oid, sizeof(snmp_oid_t));",
      "205:         } else {",
      "206:           return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "201:   return 0;",
      "202: }",
      "206: {",
      "214:   }",
      "216:   if(header.version != SNMP_VERSION_1) {",
      "217:     if(strncmp(header.community.community, SNMP_COMMUNITY, header.community.length)) {",
      "218:       LOG_ERR(\"Request with invalid community\\n\");",
      "220:     }",
      "221:   }",
      "",
      "[Removed Lines]",
      "204: unsigned char *",
      "205: snmp_engine(unsigned char *buff, uint32_t buff_len, unsigned char *out, uint32_t *out_len)",
      "207:   static snmp_header_t header;",
      "208:   static snmp_varbind_t varbinds[SNMP_MAX_NR_VALUES];",
      "209:   static uint32_t varbind_length = SNMP_MAX_NR_VALUES;",
      "211:   buff = snmp_message_decode(buff, buff_len, &header, varbinds, &varbind_length);",
      "212:   if(buff == NULL) {",
      "213:     return NULL;",
      "219:       return NULL;",
      "",
      "[Added Lines]",
      "218: int",
      "219: snmp_engine(snmp_packet_t *snmp_packet)",
      "221:   snmp_header_t header;",
      "222:   snmp_varbind_t varbinds[SNMP_MAX_NR_VALUES];",
      "224:   memset(&header, 0, sizeof(header));",
      "225:   memset(varbinds, 0, sizeof(varbinds));",
      "227:   if(!snmp_message_decode(snmp_packet, &header, varbinds)) {",
      "228:     return 0;",
      "234:       return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "226:   switch(header.pdu_type) {",
      "230:     }",
      "231:     break;",
      "236:     }",
      "237:     break;",
      "242:     }",
      "243:     break;",
      "245:   default:",
      "246:     LOG_ERR(\"Invalid request type\");",
      "248:   }",
      "254: }",
      "",
      "[Removed Lines]",
      "227:   case SNMP_DATA_TYPE_PDU_GET_REQUEST:",
      "228:     if(snmp_engine_get(&header, varbinds, varbind_length) == -1) {",
      "229:       return NULL;",
      "233:   case SNMP_DATA_TYPE_PDU_GET_NEXT_REQUEST:",
      "234:     if(snmp_engine_get_next(&header, varbinds, varbind_length) == -1) {",
      "235:       return NULL;",
      "239:   case SNMP_DATA_TYPE_PDU_GET_BULK:",
      "240:     if(snmp_engine_get_bulk(&header, varbinds, &varbind_length) == -1) {",
      "241:       return NULL;",
      "247:     return NULL;",
      "250:   header.pdu_type = SNMP_DATA_TYPE_PDU_GET_RESPONSE;",
      "251:   out = snmp_message_encode(out, out_len, &header, varbinds, varbind_length);",
      "253:   return ++out;",
      "",
      "[Added Lines]",
      "242:   case BER_DATA_TYPE_PDU_GET_REQUEST:",
      "243:     if(snmp_engine_get(&header, varbinds) == -1) {",
      "244:       return 0;",
      "248:   case BER_DATA_TYPE_PDU_GET_NEXT_REQUEST:",
      "249:     if(snmp_engine_get_next(&header, varbinds) == -1) {",
      "250:       return 0;",
      "254:   case BER_DATA_TYPE_PDU_GET_BULK:",
      "255:     if(snmp_engine_get_bulk(&header, varbinds) == -1) {",
      "256:       return 0;",
      "262:     return 0;",
      "265:   header.pdu_type = BER_DATA_TYPE_PDU_GET_RESPONSE;",
      "267:   return snmp_message_encode(snmp_packet, &header, varbinds);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-engine.h||os/net/app-layer/snmp/snmp-engine.h": [
      "File: os/net/app-layer/snmp/snmp-engine.h -> os/net/app-layer/snmp/snmp-engine.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #ifndef SNMP_ENGINE_H_",
      "46: #define SNMP_ENGINE_H_",
      "48: #include \"snmp.h\"",
      "",
      "[Removed Lines]",
      "60: unsigned char *",
      "61: snmp_engine(unsigned char *buff, uint32_t buff_len, unsigned char *out, uint32_t *out_len);",
      "",
      "[Added Lines]",
      "68: int",
      "69: snmp_engine(snmp_packet_t *snmp_packet);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-message.c||os/net/app-layer/snmp/snmp-message.c": [
      "File: os/net/app-layer/snmp/snmp-message.c -> os/net/app-layer/snmp/snmp-message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #include \"snmp-message.h\"",
      "43: #include \"snmp-ber.h\"",
      "46: #define LOG_MODULE \"SNMP [message]\"",
      "47: #define LOG_LEVEL LOG_LEVEL_SNMP",
      "52: {",
      "55:   int8_t i;",
      "64:     case BER_DATA_TYPE_INTEGER:",
      "66:       break;",
      "69:       break;",
      "70:     case BER_DATA_TYPE_OCTET_STRING:",
      "72:       break;",
      "75:       break;",
      "76:     case BER_DATA_TYPE_NULL:",
      "80:       break;",
      "81:     default:",
      "83:     }",
      "88:   }",
      "99:   }",
      "112: }",
      "116: {",
      "122:     LOG_DBG(\"Could not decode type\\n\");",
      "124:   }",
      "126:   if(type != BER_DATA_TYPE_SEQUENCE) {",
      "127:     LOG_DBG(\"Invalid type\\n\");",
      "129:   }",
      "133:     LOG_DBG(\"Could not decode length\\n\");",
      "135:   }",
      "139:     LOG_DBG(\"Could not decode version\\n\");",
      "141:   }",
      "147:   }",
      "153:   }",
      "159:   }",
      "169:   }",
      "173:     LOG_DBG(\"Could not decode length\\n\");",
      "175:   }",
      "179:     LOG_DBG(\"Could not decode request id\\n\");",
      "181:   }",
      "188:     }",
      "194:     }",
      "198:       LOG_DBG(\"Could not decode error status\\n\");",
      "200:     }",
      "204:       LOG_DBG(\"Could not decode error index\\n\");",
      "206:     }",
      "207:   }",
      "211:     LOG_DBG(\"Could not decode type\\n\");",
      "213:   }",
      "215:   if(type != BER_DATA_TYPE_SEQUENCE) {",
      "216:     LOG_DBG(\"Invalid type\\n\");",
      "218:   }",
      "222:     LOG_DBG(\"Could not decode length\\n\");",
      "224:   }",
      "229:     }",
      "233:       LOG_DBG(\"Could not decode type\\n\");",
      "235:     }",
      "237:     if(type != BER_DATA_TYPE_SEQUENCE) {",
      "238:       LOG_DBG(\"Invalid (%X) type\\n\", type);",
      "240:     }",
      "244:       LOG_DBG(\"Could not decode length\\n\");",
      "246:     }",
      "250:       LOG_DBG(\"Could not decode oid\\n\");",
      "252:     }",
      "256:     switch(varbinds[i].value_type) {",
      "257:     case BER_DATA_TYPE_INTEGER:",
      "259:       break;",
      "262:       break;",
      "263:     case BER_DATA_TYPE_OCTET_STRING:",
      "265:       break;",
      "266:     case BER_DATA_TYPE_NULL:",
      "268:       break;",
      "269:     default:",
      "270:       LOG_DBG(\"Invalid varbind type\\n\");",
      "277:     }",
      "278:   }",
      "283: }",
      "",
      "[Removed Lines]",
      "44: #include \"snmp-oid.h\"",
      "49: unsigned char *",
      "50: snmp_message_encode(unsigned char *out, uint32_t *out_len, snmp_header_t *header,",
      "51:                     snmp_varbind_t *varbinds, uint32_t varbind_num)",
      "53:   snmp_varbind_t *varbind;",
      "54:   uint32_t original_out_len, last_out_len;",
      "57:   original_out_len = *out_len;",
      "58:   for(i = varbind_num - 1; i >= 0; i--) {",
      "59:     varbind = &varbinds[i];",
      "61:     last_out_len = *out_len;",
      "63:     switch(varbind->value_type) {",
      "65:       out = snmp_ber_encode_integer(out, out_len, varbind->value.integer);",
      "67:     case SNMP_DATA_TYPE_TIME_TICKS:",
      "68:       out = snmp_ber_encode_unsigned_integer(out, out_len, varbind->value_type, varbind->value.integer);",
      "71:       out = snmp_ber_encode_string_len(out, out_len, varbind->value.string.string, varbind->value.string.length);",
      "73:     case BER_DATA_TYPE_OID:",
      "74:       out = snmp_oid_encode_oid(out, out_len, varbind->value.oid);",
      "77:     case SNMP_DATA_TYPE_NO_SUCH_INSTANCE:",
      "78:     case SNMP_DATA_TYPE_END_OF_MIB_VIEW:",
      "79:       out = snmp_ber_encode_null(out, out_len, varbind->value_type);",
      "82:       return NULL;",
      "85:     out = snmp_oid_encode_oid(out, out_len, varbind->oid);",
      "86:     out = snmp_ber_encode_length(out, out_len, ((*out_len - last_out_len) & 0xFF));",
      "87:     out = snmp_ber_encode_type(out, out_len, BER_DATA_TYPE_SEQUENCE);",
      "90:   out = snmp_ber_encode_length(out, out_len, ((*out_len - original_out_len) & 0xFF));",
      "91:   out = snmp_ber_encode_type(out, out_len, BER_DATA_TYPE_SEQUENCE);",
      "93:   if(header->pdu_type == SNMP_DATA_TYPE_PDU_GET_BULK) {",
      "94:     out = snmp_ber_encode_integer(out, out_len, header->error_index_max_repetitions.max_repetitions);",
      "95:     out = snmp_ber_encode_integer(out, out_len, header->error_status_non_repeaters.non_repeaters);",
      "96:   } else {",
      "97:     out = snmp_ber_encode_integer(out, out_len, header->error_index_max_repetitions.error_index);",
      "98:     out = snmp_ber_encode_integer(out, out_len, header->error_status_non_repeaters.error_status);",
      "100:   out = snmp_ber_encode_integer(out, out_len, header->request_id);",
      "102:   out = snmp_ber_encode_length(out, out_len, ((*out_len - original_out_len) & 0xFF));",
      "103:   out = snmp_ber_encode_type(out, out_len, header->pdu_type);",
      "105:   out = snmp_ber_encode_string_len(out, out_len, header->community.community, header->community.length);",
      "106:   out = snmp_ber_encode_integer(out, out_len, header->version);",
      "108:   out = snmp_ber_encode_length(out, out_len, ((*out_len - original_out_len) & 0xFF));",
      "109:   out = snmp_ber_encode_type(out, out_len, BER_DATA_TYPE_SEQUENCE);",
      "111:   return out;",
      "113: uint8_t *",
      "114: snmp_message_decode(uint8_t *buf, uint32_t buf_len, snmp_header_t *header,",
      "115:                     snmp_varbind_t *varbinds, uint32_t *varbind_num)",
      "117:   uint8_t type, len;",
      "118:   uint32_t i, oid_len = SNMP_MSG_OID_MAX_LEN;",
      "120:   buf = snmp_ber_decode_type(buf, &buf_len, &type);",
      "121:   if(buf == NULL) {",
      "123:     return NULL;",
      "128:     return NULL;",
      "131:   buf = snmp_ber_decode_length(buf, &buf_len, &len);",
      "132:   if(buf == NULL) {",
      "134:     return NULL;",
      "137:   buf = snmp_ber_decode_integer(buf, &buf_len, &header->version);",
      "138:   if(buf == NULL) {",
      "140:     return NULL;",
      "143:   buf = snmp_ber_decode_string_len_buffer(buf, &buf_len, &header->community.community, &header->community.length);",
      "144:   if(buf == NULL) {",
      "145:     LOG_DBG(\"Could not decode community\\n\");",
      "146:     return NULL;",
      "149:   if(header->version != SNMP_VERSION_1 &&",
      "150:      header->version != SNMP_VERSION_2C) {",
      "151:     LOG_DBG(\"Invalid version\\n\");",
      "152:     return NULL;",
      "155:   buf = snmp_ber_decode_type(buf, &buf_len, &type);",
      "156:   if(buf == NULL) {",
      "157:     LOG_DBG(\"Could not decode type\\n\");",
      "158:     return NULL;",
      "161:   header->pdu_type = type;",
      "162:   if(header->pdu_type != SNMP_DATA_TYPE_PDU_GET_REQUEST &&",
      "163:      header->pdu_type != SNMP_DATA_TYPE_PDU_GET_NEXT_REQUEST &&",
      "164:      header->pdu_type != SNMP_DATA_TYPE_PDU_GET_RESPONSE &&",
      "165:      header->pdu_type != SNMP_DATA_TYPE_PDU_SET_REQUEST &&",
      "166:      header->pdu_type != SNMP_DATA_TYPE_PDU_GET_BULK) {",
      "167:     LOG_DBG(\"Invalid pdu type\\n\");",
      "168:     return NULL;",
      "171:   buf = snmp_ber_decode_length(buf, &buf_len, &len);",
      "172:   if(buf == NULL) {",
      "174:     return NULL;",
      "177:   buf = snmp_ber_decode_integer(buf, &buf_len, &header->request_id);",
      "178:   if(buf == NULL) {",
      "180:     return NULL;",
      "183:   if(header->pdu_type == SNMP_DATA_TYPE_PDU_GET_BULK) {",
      "184:     buf = snmp_ber_decode_integer(buf, &buf_len, &header->error_status_non_repeaters.non_repeaters);",
      "185:     if(buf == NULL) {",
      "186:       LOG_DBG(\"Could not decode error status\\n\");",
      "187:       return NULL;",
      "190:     buf = snmp_ber_decode_integer(buf, &buf_len, &header->error_index_max_repetitions.max_repetitions);",
      "191:     if(buf == NULL) {",
      "192:       LOG_DBG(\"Could not decode error index\\n\");",
      "193:       return NULL;",
      "195:   } else {",
      "196:     buf = snmp_ber_decode_integer(buf, &buf_len, &header->error_status_non_repeaters.error_status);",
      "197:     if(buf == NULL) {",
      "199:       return NULL;",
      "202:     buf = snmp_ber_decode_integer(buf, &buf_len, &header->error_index_max_repetitions.error_index);",
      "203:     if(buf == NULL) {",
      "205:       return NULL;",
      "209:   buf = snmp_ber_decode_type(buf, &buf_len, &type);",
      "210:   if(buf == NULL) {",
      "212:     return NULL;",
      "217:     return NULL;",
      "220:   buf = snmp_ber_decode_length(buf, &buf_len, &len);",
      "221:   if(buf == NULL) {",
      "223:     return NULL;",
      "226:   for(i = 0; buf_len > 0; ++i) {",
      "227:     if(i >= *varbind_num) {",
      "228:       return NULL;",
      "231:     buf = snmp_ber_decode_type(buf, &buf_len, &type);",
      "232:     if(buf == NULL) {",
      "234:       return NULL;",
      "239:       return NULL;",
      "242:     buf = snmp_ber_decode_length(buf, &buf_len, &len);",
      "243:     if(buf == NULL) {",
      "245:       return NULL;",
      "248:     buf = snmp_oid_decode_oid(buf, &buf_len, varbinds[i].oid, &oid_len);",
      "249:     if(buf == NULL) {",
      "251:       return NULL;",
      "254:     varbinds[i].value_type = *buf;",
      "258:       buf = snmp_ber_decode_integer(buf, &buf_len, &varbinds[i].value.integer);",
      "260:     case SNMP_DATA_TYPE_TIME_TICKS:",
      "261:       buf = snmp_ber_decode_unsigned_integer(buf, &buf_len, varbinds[i].value_type, &varbinds[i].value.integer);",
      "264:       buf = snmp_ber_decode_string_len_buffer(buf, &buf_len, &varbinds[i].value.string.string, &varbinds[i].value.string.length);",
      "267:       buf = snmp_ber_decode_null(buf, &buf_len);",
      "271:       return NULL;",
      "272:     }",
      "274:     if(buf == NULL) {",
      "275:       LOG_DBG(\"Could varbind type\\n\");",
      "276:       return NULL;",
      "282:   return buf;",
      "",
      "[Added Lines]",
      "48: int",
      "49: snmp_message_encode(snmp_packet_t *snmp_packet, snmp_header_t *header, snmp_varbind_t *varbinds)",
      "51:   uint32_t last_out_len;",
      "54:   for(i = SNMP_MAX_NR_VALUES - 1; i >= 0; i--) {",
      "55:     if(varbinds[i].value_type == BER_DATA_TYPE_EOC) {",
      "56:       continue;",
      "57:     }",
      "59:     last_out_len = snmp_packet->used;",
      "61:     switch(varbinds[i].value_type) {",
      "63:       if(!snmp_ber_encode_integer(snmp_packet, varbinds[i].value.integer)) {",
      "64:         LOG_DBG(\"Could not encode integer type\\n\");",
      "65:         return 0;",
      "66:       }",
      "68:     case BER_DATA_TYPE_TIMETICKS:",
      "69:       if(!snmp_ber_encode_timeticks(snmp_packet, varbinds[i].value.integer)) {",
      "70:         LOG_DBG(\"Could not encode timeticks type\\n\");",
      "71:         return 0;",
      "72:       }",
      "75:       if(!snmp_ber_encode_string_len(snmp_packet, varbinds[i].value.string.string, varbinds[i].value.string.length)) {",
      "76:         LOG_DBG(\"Could not encode octet string type\\n\");",
      "77:         return 0;",
      "78:       }",
      "80:     case BER_DATA_TYPE_OBJECT_IDENTIFIER:",
      "81:       if(!snmp_ber_encode_oid(snmp_packet, &varbinds[i].value.oid)) {",
      "82:         LOG_DBG(\"Could not encode oid type\\n\");",
      "83:         return 0;",
      "84:       }",
      "87:     case BER_DATA_TYPE_NO_SUCH_INSTANCE:",
      "88:     case BER_DATA_TYPE_END_OF_MIB_VIEW:",
      "89:       if(!snmp_ber_encode_null(snmp_packet, varbinds[i].value_type)) {",
      "90:         LOG_DBG(\"Could not encode null type\\n\");",
      "91:         return 0;",
      "92:       }",
      "95:       LOG_DBG(\"Could not encode invlid type\\n\");",
      "96:       return 0;",
      "97:     }",
      "99:     if(!snmp_ber_encode_oid(snmp_packet, &varbinds[i].oid)) {",
      "100:       LOG_DBG(\"Could not encode oid\\n\");",
      "101:       return 0;",
      "102:     }",
      "104:     if(!snmp_ber_encode_length(snmp_packet, (snmp_packet->used - last_out_len))) {",
      "105:       LOG_DBG(\"Could not encode length\\n\");",
      "106:       return 0;",
      "109:     if(!snmp_ber_encode_type(snmp_packet, BER_DATA_TYPE_SEQUENCE)) {",
      "110:       LOG_DBG(\"Could not encode type\\n\");",
      "111:       return 0;",
      "112:     }",
      "115:   if(!snmp_ber_encode_length(snmp_packet, snmp_packet->used)) {",
      "116:     LOG_DBG(\"Could not encode length\\n\");",
      "117:     return 0;",
      "118:   }",
      "119:   if(!snmp_ber_encode_type(snmp_packet, BER_DATA_TYPE_SEQUENCE)) {",
      "120:     LOG_DBG(\"Could not encode type\\n\");",
      "121:     return 0;",
      "122:   }",
      "124:   switch(header->pdu_type) {",
      "125:   case BER_DATA_TYPE_PDU_GET_BULK:",
      "126:     if(!snmp_ber_encode_integer(snmp_packet, header->max_repetitions)) {",
      "127:       LOG_DBG(\"Could not encode max repetition\\n\");",
      "128:       return 0;",
      "129:     }",
      "131:     if(!snmp_ber_encode_integer(snmp_packet, header->non_repeaters)) {",
      "132:       LOG_DBG(\"Could not encode non repeaters\\n\");",
      "133:       return 0;",
      "134:     }",
      "135:     break;",
      "136:   default:",
      "137:     if(!snmp_ber_encode_integer(snmp_packet, header->error_index)) {",
      "138:       LOG_DBG(\"Could not encode error index\\n\");",
      "139:       return 0;",
      "140:     }",
      "142:     if(!snmp_ber_encode_integer(snmp_packet, header->error_status)) {",
      "143:       LOG_DBG(\"Could not encode error status\\n\");",
      "144:       return 0;",
      "145:     }",
      "146:     break;",
      "149:   if(!snmp_ber_encode_integer(snmp_packet, header->request_id)) {",
      "150:     LOG_DBG(\"Could not encode request id\\n\");",
      "151:     return 0;",
      "152:   }",
      "154:   if(!snmp_ber_encode_length(snmp_packet, snmp_packet->used)) {",
      "155:     LOG_DBG(\"Could not encode length\\n\");",
      "156:     return 0;",
      "157:   }",
      "159:   if(!snmp_ber_encode_type(snmp_packet, header->pdu_type)) {",
      "160:     LOG_DBG(\"Could not encode pdu type\\n\");",
      "161:     return 0;",
      "162:   }",
      "164:   if(!snmp_ber_encode_string_len(snmp_packet, header->community.community, header->community.length)) {",
      "165:     LOG_DBG(\"Could not encode community\\n\");",
      "166:     return 0;",
      "167:   }",
      "169:   if(!snmp_ber_encode_integer(snmp_packet, header->version)) {",
      "170:     LOG_DBG(\"Could not encode version\\n\");",
      "171:     return 0;",
      "172:   }",
      "174:   if(!snmp_ber_encode_length(snmp_packet, snmp_packet->used)) {",
      "175:     LOG_DBG(\"Could not encode length\\n\");",
      "176:     return 0;",
      "177:   }",
      "179:   if(!snmp_ber_encode_type(snmp_packet, BER_DATA_TYPE_SEQUENCE)) {",
      "180:     LOG_DBG(\"Could not encode type\\n\");",
      "181:     return 0;",
      "182:   }",
      "185:   snmp_packet->out++;",
      "186:   return 1;",
      "188: int",
      "189: snmp_message_decode(snmp_packet_t *snmp_packet, snmp_header_t *header, snmp_varbind_t *varbinds)",
      "191:   uint8_t type, len, i;",
      "193:   if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "195:     return 0;",
      "200:     return 0;",
      "203:   if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "205:     return 0;",
      "208:   if(!snmp_ber_decode_integer(snmp_packet, &header->version)) {",
      "210:     return 0;",
      "213:   switch(header->version) {",
      "214:   case SNMP_VERSION_1:",
      "215:   case SNMP_VERSION_2C:",
      "216:     break;",
      "217:   default:",
      "218:     LOG_DBG(\"Invalid version\\n\");",
      "219:     return 0;",
      "222:   if(!snmp_ber_decode_string_len_buffer(snmp_packet, &header->community.community, &header->community.length)) {",
      "223:     LOG_DBG(\"Could not decode community\\n\");",
      "224:     return 0;",
      "227:   if(!snmp_ber_decode_type(snmp_packet, &header->pdu_type)) {",
      "228:     LOG_DBG(\"Could not decode pdu type\\n\");",
      "229:     return 0;",
      "232:   switch(header->pdu_type) {",
      "233:   case BER_DATA_TYPE_PDU_GET_REQUEST:",
      "234:   case BER_DATA_TYPE_PDU_GET_NEXT_REQUEST:",
      "235:   case BER_DATA_TYPE_PDU_GET_RESPONSE:",
      "236:   case BER_DATA_TYPE_PDU_SET_REQUEST:",
      "237:   case BER_DATA_TYPE_PDU_GET_BULK:",
      "238:     break;",
      "239:   default:",
      "240:     LOG_DBG(\"Invalid version\\n\");",
      "241:     return 0;",
      "244:   if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "246:     return 0;",
      "249:   if(!snmp_ber_decode_integer(snmp_packet, &header->request_id)) {",
      "251:     return 0;",
      "254:   switch(header->pdu_type) {",
      "255:   case BER_DATA_TYPE_PDU_GET_BULK:",
      "256:     if(!snmp_ber_decode_integer(snmp_packet, &header->non_repeaters)) {",
      "257:       LOG_DBG(\"Could not decode non repeaters\\n\");",
      "258:       return 0;",
      "261:     if(!snmp_ber_decode_integer(snmp_packet, &header->max_repetitions)) {",
      "262:       LOG_DBG(\"Could not decode max repetition\\n\");",
      "263:       return 0;",
      "265:     break;",
      "266:   default:",
      "267:     if(!snmp_ber_decode_integer(snmp_packet, &header->error_status)) {",
      "269:       return 0;",
      "272:     if(!snmp_ber_decode_integer(snmp_packet, &header->error_index)) {",
      "274:       return 0;",
      "276:     break;",
      "279:   if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "281:     return 0;",
      "286:     return 0;",
      "289:   if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "291:     return 0;",
      "294:   for(i = 0; snmp_packet->used > 0; ++i) {",
      "295:     if(i >= SNMP_MAX_NR_VALUES) {",
      "296:       LOG_DBG(\"OID's overflow\\n\");",
      "297:       return 0;",
      "300:     if(!snmp_ber_decode_type(snmp_packet, &type)) {",
      "302:       return 0;",
      "307:       return 0;",
      "310:     if(!snmp_ber_decode_length(snmp_packet, &len)) {",
      "312:       return 0;",
      "315:     if(!snmp_ber_decode_oid(snmp_packet, &varbinds[i].oid)) {",
      "317:       return 0;",
      "320:     varbinds[i].value_type = *snmp_packet->in;",
      "324:       if(!snmp_ber_decode_integer(snmp_packet, &varbinds[i].value.integer)) {",
      "325:         LOG_DBG(\"Could not decode integer type\\n\");",
      "326:         return 0;",
      "327:       }",
      "329:     case BER_DATA_TYPE_TIMETICKS:",
      "330:       if(!snmp_ber_decode_timeticks(snmp_packet, &varbinds[i].value.integer)) {",
      "331:         LOG_DBG(\"Could not decode timeticks type\\n\");",
      "332:         return 0;",
      "333:       }",
      "336:       if(!snmp_ber_decode_string_len_buffer(snmp_packet, &varbinds[i].value.string.string, &varbinds[i].value.string.length)) {",
      "337:         LOG_DBG(\"Could not decode octed string type\\n\");",
      "338:         return 0;",
      "339:       }",
      "342:       if(!snmp_ber_decode_null(snmp_packet)) {",
      "343:         LOG_DBG(\"Could not decode null type\\n\");",
      "344:         return 0;",
      "345:       }",
      "349:       return 0;",
      "353:   return 1;",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-message.h||os/net/app-layer/snmp/snmp-message.h": [
      "File: os/net/app-layer/snmp/snmp-message.h -> os/net/app-layer/snmp/snmp-message.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #ifndef SNMP_MESSAGE_H_",
      "46: #define SNMP_MESSAGE_H_",
      "",
      "[Removed Lines]",
      "48: #include \"snmp.h\"",
      "50: #define SNMP_DATA_TYPE_TIME_TICKS               0x43",
      "51: #define SNMP_DATA_TYPE_NO_SUCH_INSTANCE         0x81",
      "52: #define SNMP_DATA_TYPE_END_OF_MIB_VIEW          0x82",
      "54: #define SNMP_DATA_TYPE_PDU_GET_REQUEST          0xA0",
      "55: #define SNMP_DATA_TYPE_PDU_GET_NEXT_REQUEST     0xA1",
      "56: #define SNMP_DATA_TYPE_PDU_GET_RESPONSE         0xA2",
      "57: #define SNMP_DATA_TYPE_PDU_SET_REQUEST          0xA3",
      "58: #define SNMP_DATA_TYPE_PDU_TRAP                 0xA4",
      "59: #define SNMP_DATA_TYPE_PDU_GET_BULK             0xA5",
      "72: unsigned char *",
      "73: snmp_message_encode(unsigned char *out, uint32_t *out_len, snmp_header_t *header,",
      "74:                     snmp_varbind_t *varbinds, uint32_t varbinds_length);",
      "86: uint8_t *",
      "87: snmp_message_decode(uint8_t *buf, uint32_t buf_len, snmp_header_t *header,",
      "88:                     snmp_varbind_t *varbinds, uint32_t *varbinds_length);",
      "",
      "[Added Lines]",
      "55: #include \"snmp.h\"",
      "73: int",
      "74: snmp_message_encode(snmp_packet_t *snmp_packet, snmp_header_t *header, snmp_varbind_t *varbinds);",
      "84: int",
      "85: snmp_message_decode(snmp_packet_t *snmp_packet, snmp_header_t *header, snmp_varbind_t *varbinds);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-mib.c||os/net/app-layer/snmp/snmp-mib.c": [
      "File: os/net/app-layer/snmp/snmp-mib.c -> os/net/app-layer/snmp/snmp-mib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: #include \"contiki.h\"",
      "42: #include \"snmp-mib.h\"",
      "44: #include \"lib/list.h\"",
      "46: #define LOG_MODULE \"SNMP [mib]\"",
      "",
      "[Removed Lines]",
      "43: #include \"snmp-oid.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49: LIST(snmp_mib);",
      "51: snmp_mib_resource_t *",
      "53: {",
      "54:   snmp_mib_resource_t *resource;",
      "",
      "[Removed Lines]",
      "52: snmp_mib_find(uint32_t *oid)",
      "",
      "[Added Lines]",
      "59: static inline int",
      "60: snmp_mib_cmp_oid(snmp_oid_t *oid1, snmp_oid_t *oid2)",
      "61: {",
      "62:   uint8_t i;",
      "64:   i = 0;",
      "65:   while(i < oid1->length && i < oid2->length) {",
      "66:     if(oid1->data[i] != oid2->data[i]) {",
      "67:       if(oid1->data[i] < oid2->data[i]) {",
      "68:         return -1;",
      "69:       }",
      "70:       return 1;",
      "71:     }",
      "72:     i++;",
      "73:   }",
      "75:   if(i == oid1->length &&",
      "76:      i < oid2->length) {",
      "77:     return -1;",
      "78:   }",
      "80:   if(i < oid1->length &&",
      "81:      i == oid2->length) {",
      "82:     return 1;",
      "83:   }",
      "85:   return 0;",
      "86: }",
      "89: snmp_mib_find(snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:   for(resource = list_head(snmp_mib);",
      "58:       resource; resource = resource->next) {",
      "61:       return resource;",
      "62:     }",
      "63:   }",
      "65:   return NULL;",
      "66: }",
      "67: snmp_mib_resource_t *",
      "69: {",
      "70:   snmp_mib_resource_t *resource;",
      "",
      "[Removed Lines]",
      "60:     if(!snmp_oid_cmp_oid(oid, resource->oid)) {",
      "68: snmp_mib_find_next(uint32_t *oid)",
      "",
      "[Added Lines]",
      "97:     if(!snmp_mib_cmp_oid(oid, &resource->oid)) {",
      "106: snmp_mib_find_next(snmp_oid_t *oid)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "73:   for(resource = list_head(snmp_mib);",
      "74:       resource; resource = resource->next) {",
      "77:       return resource;",
      "78:     }",
      "79:   }",
      "81:   return NULL;",
      "82: }",
      "83: void",
      "84: snmp_mib_add(snmp_mib_resource_t *new_resource)",
      "85: {",
      "86:   snmp_mib_resource_t *resource;",
      "88:   for(resource = list_head(snmp_mib);",
      "89:       resource; resource = resource->next) {",
      "92:       break;",
      "93:     }",
      "94:   }",
      "",
      "[Removed Lines]",
      "76:     if(snmp_oid_cmp_oid(resource->oid, oid) > 0) {",
      "91:     if(snmp_oid_cmp_oid(resource->oid, new_resource->oid) > 0) {",
      "",
      "[Added Lines]",
      "114:     if(snmp_mib_cmp_oid(&resource->oid, oid) > 0) {",
      "126:   uint8_t i;",
      "131:     if(snmp_mib_cmp_oid(&resource->oid, &new_resource->oid) > 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "98:     list_insert(snmp_mib, new_resource, resource);",
      "99:   }",
      "110:   }",
      "112: }",
      "113: void",
      "114: snmp_mib_init(void)",
      "115: {",
      "",
      "[Removed Lines]",
      "101: #if LOG_LEVEL == LOG_LEVEL_DBG",
      "105:   LOG_DBG(\"Table after insert.\\n\");",
      "106:   for(resource = list_head(snmp_mib);",
      "107:       resource; resource = resource->next) {",
      "109:     snmp_oid_print(resource->oid);",
      "",
      "[Added Lines]",
      "141:   if(LOG_DBG_ENABLED) {",
      "145:     LOG_DBG(\"Table after insert.\\n\");",
      "146:     for(resource = list_head(snmp_mib);",
      "147:         resource; resource = resource->next) {",
      "149:       i = 0;",
      "150:       LOG_DBG(\"{\");",
      "151:       while(i < resource->oid.length) {",
      "152:         LOG_DBG_(\"%lu\", (unsigned long)resource->oid.data[i]);",
      "153:         i++;",
      "154:         if(i < resource->oid.length) {",
      "155:           LOG_DBG_(\".\");",
      "156:         }",
      "157:       }",
      "158:       LOG_DBG_(\"}\\n\");",
      "159:     }",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-mib.h||os/net/app-layer/snmp/snmp-mib.h": [
      "File: os/net/app-layer/snmp/snmp-mib.h -> os/net/app-layer/snmp/snmp-mib.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #ifndef SNMP_MIB_H_",
      "46: #define SNMP_MIB_H_",
      "48: #include \"snmp.h\"",
      "",
      "[Removed Lines]",
      "56: typedef void (*snmp_mib_resource_handler_t)(snmp_varbind_t *varbind, uint32_t *oid);",
      "",
      "[Added Lines]",
      "70: typedef void (*snmp_mib_resource_handler_t)(snmp_varbind_t *varbind, snmp_oid_t *oid);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:   struct snmp_mib_resource_s *next;",
      "",
      "[Removed Lines]",
      "73:   uint32_t *oid;",
      "",
      "[Added Lines]",
      "85:   snmp_oid_t oid;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87: snmp_mib_resource_t *",
      "",
      "[Removed Lines]",
      "88: snmp_mib_find(uint32_t *oid);",
      "",
      "[Added Lines]",
      "100: snmp_mib_find(snmp_oid_t *oid);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "97: snmp_mib_resource_t *",
      "",
      "[Removed Lines]",
      "98: snmp_mib_find_next(uint32_t *oid);",
      "",
      "[Added Lines]",
      "110: snmp_mib_find_next(snmp_oid_t *oid);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-oid.c||os/net/app-layer/snmp/snmp-oid.c": [
      "File: os/net/app-layer/snmp/snmp-oid.c -> os/net/app-layer/snmp/snmp-oid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp-oid.h||os/net/app-layer/snmp/snmp-oid.h": [
      "File: os/net/app-layer/snmp/snmp-oid.h -> os/net/app-layer/snmp/snmp-oid.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp.c||os/net/app-layer/snmp/snmp.c": [
      "File: os/net/app-layer/snmp/snmp.c -> os/net/app-layer/snmp/snmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: #include \"contiki.h\"",
      "42: #include \"snmp.h\"",
      "43: #include \"snmp-mib.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: #include \"contiki-net.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50: #define SNMP_SERVER_PORT UIP_HTONS(SNMP_PORT)",
      "51: PROCESS(snmp_process, \"SNMP Process\");",
      "85: void",
      "86: snmp_init()",
      "",
      "[Removed Lines]",
      "53: static struct uip_udp_conn *snmp_udp_conn = NULL;",
      "56: static void",
      "57: snmp_process_data(void)",
      "58: {",
      "59:   static unsigned char packet[SNMP_MAX_PACKET_SIZE];",
      "60:   unsigned char *packet_end;",
      "61:   static uint32_t packet_len;",
      "63:   packet_end = packet + sizeof(packet) - 1;",
      "64:   packet_len = 0;",
      "66:   LOG_DBG(\"receiving UDP datagram from [\");",
      "67:   LOG_DBG_6ADDR(&UIP_IP_BUF->srcipaddr);",
      "68:   LOG_DBG_(\"]:%u\", uip_ntohs(UIP_UDP_BUF->srcport));",
      "69:   LOG_DBG_(\" Length: %u\\n\", uip_datalen());",
      "74:   if((packet_end = snmp_engine(uip_appdata, uip_datalen(), packet_end, &packet_len)) == NULL) {",
      "75:     LOG_DBG(\"Error while handling the request\\n\");",
      "76:   } else {",
      "77:     LOG_DBG(\"Sending response\\n\");",
      "81:     uip_udp_packet_sendto(snmp_udp_conn, packet_end, packet_len, &UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport);",
      "82:   }",
      "83: }",
      "",
      "[Added Lines]",
      "54: static struct uip_udp_conn *snmp_udp_conn;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95: {",
      "96:   PROCESS_BEGIN();",
      "99:   snmp_udp_conn = udp_new(NULL, 0, NULL);",
      "100:   udp_bind(snmp_udp_conn, SNMP_SERVER_PORT);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:   snmp_packet_t snmp_packet;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "103:   while(1) {",
      "104:     PROCESS_YIELD();",
      "110:     }",
      "113:   PROCESS_END();",
      "",
      "[Removed Lines]",
      "106:     if(ev == tcpip_event) {",
      "107:       if(uip_newdata()) {",
      "108:         snmp_process_data();",
      "109:       }",
      "",
      "[Added Lines]",
      "79:     if(ev != tcpip_event) {",
      "80:       continue;",
      "81:     }",
      "83:     if(!uip_newdata()) {",
      "84:       continue;",
      "87:     LOG_DBG(\"receiving UDP datagram from [\");",
      "88:     LOG_DBG_6ADDR(&UIP_IP_BUF->srcipaddr);",
      "89:     LOG_DBG_(\"]:%u\", uip_ntohs(UIP_UDP_BUF->srcport));",
      "90:     LOG_DBG_(\" Length: %u\\n\", uip_datalen());",
      "93:     snmp_packet.in = (uint8_t *)uip_appdata;",
      "94:     snmp_packet.used = uip_datalen();",
      "96:     snmp_packet.out = (uint8_t *)(uip_appdata + UIP_BUFSIZE - UIP_IPUDPH_LEN);",
      "97:     snmp_packet.max = UIP_BUFSIZE - UIP_IPUDPH_LEN;",
      "100:     if(!snmp_engine(&snmp_packet)) {",
      "101:       LOG_DBG(\"Error while handling the request\\n\");",
      "102:       continue;",
      "103:     }",
      "105:     LOG_DBG(\"Sending response\\n\");",
      "107:     uip_udp_packet_sendto(snmp_udp_conn, snmp_packet.out, snmp_packet.used, &UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport);",
      "",
      "---------------"
    ],
    "os/net/app-layer/snmp/snmp.h||os/net/app-layer/snmp/snmp.h": [
      "File: os/net/app-layer/snmp/snmp.h -> os/net/app-layer/snmp/snmp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #ifndef SNMP_H_",
      "51: #define SNMP_H_",
      "53: #include \"contiki.h\"",
      "56: #include \"sys/log.h\"",
      "",
      "[Removed Lines]",
      "54: #include \"contiki-net.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121:   uint32_t request_id;",
      "152: } snmp_header_t;",
      "157: typedef struct snmp_varbind_s {",
      "",
      "[Removed Lines]",
      "127:   union error_status_non_repeaters_u {",
      "131:     uint32_t error_status;",
      "135:     uint32_t non_repeaters;",
      "136:   } error_status_non_repeaters;",
      "142:   union error_index_max_repetitions_u {",
      "146:     uint32_t error_index;",
      "150:     uint32_t max_repetitions;",
      "151:   } error_index_max_repetitions;",
      "163:   uint32_t oid[SNMP_MSG_OID_MAX_LEN];",
      "",
      "[Added Lines]",
      "126:   uint32_t error_status;",
      "130:   uint32_t non_repeaters;",
      "134:   uint32_t error_index;",
      "138:   uint32_t max_repetitions;",
      "144: typedef struct snmp_oid_s {",
      "148:   uint32_t data[SNMP_MSG_OID_MAX_LEN];",
      "153:   uint8_t length;",
      "154: } snmp_oid_t;",
      "163:   snmp_oid_t oid;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "173:   union snmp_varbind_val_u {",
      "",
      "[Added Lines]",
      "173:   union {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "181:     struct snmp_varbind_string_s {",
      "",
      "[Added Lines]",
      "181:     struct {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "193:       uint32_t length;",
      "194:     } string;",
      "199:   } value;",
      "200: } snmp_varbind_t;",
      "",
      "[Removed Lines]",
      "198:     uint32_t *oid;",
      "",
      "[Added Lines]",
      "198:     snmp_oid_t oid;",
      "206: typedef struct {",
      "211:   uint16_t used;",
      "216:   uint16_t max;",
      "221:   uint8_t *in;",
      "226:   uint8_t *out;",
      "227: } snmp_packet_t;",
      "",
      "---------------"
    ],
    "tests/08-native-runs/10-snmp-server.sh||tests/08-native-runs/10-snmp-server.sh": [
      "File: tests/08-native-runs/10-snmp-server.sh -> tests/08-native-runs/10-snmp-server.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: IPADDR=fd00::302:304:506:708",
      "46: # We do not want Make to stop -> Return 0",
      "47: # The Makefile will check if a log contains FAIL at the end",
      "",
      "[Removed Lines]",
      "11: # Starting Contiki-NG native node",
      "12: echo \"Starting native node\"",
      "13: make -C $CONTIKI/examples/snmp-server > make.log 2> make.err",
      "14: sudo $CONTIKI/examples/snmp-server/snmp-server.native > node.log 2> node.err &",
      "15: CPID=$!",
      "16: sleep 2",
      "18: # Do Walk",
      "19: echo \"WALK!\"",
      "20: snmpwalk -t 4 -v 2c -c public udp6:[$IPADDR]:161 1 | tee $BASENAME.log",
      "21: # Fetch snmpwalk status code (not $? because this is piped)",
      "22: STATUS=${PIPESTATUS[0]}",
      "24: echo \"Closing native node\"",
      "25: sleep 2",
      "26: kill_bg $CPID",
      "28: if [ $STATUS -eq 0 ] ; then",
      "29:   cp $BASENAME.log $BASENAME.testlog",
      "30:   printf \"%-32s TEST OK\\n\" \"$BASENAME\" | tee $BASENAME.testlog;",
      "31: else",
      "32:   echo \"==== make.log ====\" ; cat make.log;",
      "33:   echo \"==== make.err ====\" ; cat make.err;",
      "34:   echo \"==== node.log ====\" ; cat node.log;",
      "35:   echo \"==== node.err ====\" ; cat node.err;",
      "36:   echo \"==== $BASENAME.log ====\" ; cat $BASENAME.log;",
      "38:   printf \"%-32s TEST FAIL\\n\" \"$BASENAME\" | tee $BASENAME.testlog;",
      "39: fi",
      "41: rm make.log",
      "42: rm make.err",
      "43: rm node.log",
      "44: rm node.err",
      "",
      "[Added Lines]",
      "11: test_handler () {",
      "12:   # Starting Contiki-NG native node",
      "13:   make -C $CONTIKI/examples/snmp-server > make.log 2> make.err",
      "14:   sudo $CONTIKI/examples/snmp-server/snmp-server.native > node.log 2> node.err &",
      "15:   CPID=$!",
      "16:   sleep 2",
      "18:   $1 2>&1 | grep -z -E \"$2\" >> $BASENAME.log 2>&1",
      "19:   STATUS=$?",
      "21:   sleep 2",
      "22:   kill_bg $CPID > /dev/null 2>&1",
      "23:   wait $CPID > /dev/null 2>&1",
      "25:   if [ $STATUS -eq 0 ] ; then",
      "26:     cp $BASENAME.log $BASENAME.testlog",
      "27:     printf \"%-32s TEST OK\\n\" \"$BASENAME\" | tee $BASENAME.testlog;",
      "28:   else",
      "29:     echo \"==== make.log ====\" ; cat make.log;",
      "30:     echo \"==== make.err ====\" ; cat make.err;",
      "31:     echo \"==== node.log ====\" ; cat node.log;",
      "32:     echo \"==== node.err ====\" ; cat node.err;",
      "33:     echo \"==== $BASENAME.log ====\" ; cat $BASENAME.log;",
      "35:     printf \"%-32s TEST FAIL\\n\" \"$BASENAME\" | tee $BASENAME.testlog;",
      "36:   fi",
      "38:   rm make.log",
      "39:   rm make.err",
      "40:   rm node.log",
      "41:   rm node.err",
      "42: }",
      "44: # v1",
      "45: ## snmpget - pass",
      "46: test_handler \"snmpget -t2 -v1 -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.0\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0\"",
      "47: ## snmpwalk - pass",
      "48: test_handler \"snmpwalk -t2 -v1 -c public udp6:[$IPADDR]:161 1\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.2\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.3\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.4\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.5\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.6\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.7\\.0.*End of MIB\"",
      "50: ## snmpget - fail - noSuchName",
      "51: test_handler \"snmpget -t2 -v1 -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1\" \".*noSuchName.*\"",
      "52: ## snmpget - fail - timeout - 16 Ids in OID",
      "53: test_handler \"snmpget -t2 -v1 -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.1.3.6.1.2.1.1.1.1\" \"Timeout.*\"",
      "54: ## snmpget - fail - timeout - 4 OIDs",
      "55: test_handler \"snmpget -t2 -v1 -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0\" \"Timeout.*\"",
      "57: # v2",
      "58: ## snmpget - pass",
      "59: test_handler \"snmpget -t2 -v2c -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.0\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0\"",
      "60: ## snmpwalk - pass",
      "61: test_handler \"snmpwalk -t2 -v2c -c public udp6:[$IPADDR]:161 1\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.2\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.3\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.4\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.5\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.6\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.7\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.7\\.0\"",
      "62: ## snmpbulkget two non-repeater - pass",
      "63: test_handler \"snmpbulkget -v2c -Cn2 -c public udp6:[$IPADDR]:161 1 1\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0\"",
      "64: ## snmpbulkget two max-repetitions - pass",
      "65: test_handler \"snmpbulkget -t2 -v2c -Cr2 -c public udp6:[$IPADDR]:161 1\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.2\\.0\"",
      "66: ## snmpbulkget one non-repeater and two max-repetitions - pass",
      "67: test_handler \"snmpbulkget -t2 -v2c -Cn1 -Cr2 -c public udp6:[$IPADDR]:161 1 1\" \"iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.1\\.0.*iso\\.3\\.6\\.1\\.2\\.1\\.1\\.2\\.0\"",
      "69: ## snmpget - fail - noSuchName",
      "70: test_handler \"snmpget -t2 -v2c -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1\" \".*No Such Instance currently.*\"",
      "71: ## snmpget - fail - timeout - 16 Ids in OID",
      "72: test_handler \"snmpget -t2 -v2c -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.1.3.6.1.2.1.1.1.1\" \"Timeout.*\"",
      "73: ## snmpget - fail - timeout - 4 OIDs",
      "74: test_handler \"snmpget -t2 -v2c -c public udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0 1.3.6.1.2.1.1.1.0\" \"Timeout.*\"",
      "76: #v3",
      "77: ## snmpget - fail - timeout - v3 not implemented",
      "78: test_handler \"snmpget -t2 -v3 -l authPriv -u snmp-poller -a SHA -A \\\"PASSWORD1\\\" -x AES -X \\\"PASSWORD1\\\" udp6:[$IPADDR]:161 1.3.6.1.2.1.1.1.0\" \".*Timeout.*\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8436010de1dcf5f9e8b24a8d778b1f6f7af7602a",
      "candidate_info": {
        "commit_hash": "8436010de1dcf5f9e8b24a8d778b1f6f7af7602a",
        "repo": "contiki-ng/contiki-ng",
        "commit_url": "https://github.com/contiki-ng/contiki-ng/commit/8436010de1dcf5f9e8b24a8d778b1f6f7af7602a",
        "files": [
          "os/net/app-layer/snmp/snmp-engine.c"
        ],
        "message": "Check the offset before reading from the varbinds array.",
        "before_after_code_files": [
          "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c"
          ],
          "candidate": [
            "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c"
          ]
        }
      },
      "candidate_diff": {
        "os/net/app-layer/snmp/snmp-engine.c||os/net/app-layer/snmp/snmp-engine.c": [
          "File: os/net/app-layer/snmp/snmp-engine.c -> os/net/app-layer/snmp/snmp-engine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   uint8_t i;",
          "57:   i = 0;",
          "59:     resource = snmp_mib_find(&varbinds[i].oid);",
          "60:     if(!resource) {",
          "61:       switch(header->version) {",
          "",
          "[Removed Lines]",
          "58:   while(varbinds[i].value_type != BER_DATA_TYPE_EOC && i < SNMP_MAX_NR_VALUES) {",
          "",
          "[Added Lines]",
          "58:   while(i < SNMP_MAX_NR_VALUES && varbinds[i].value_type != BER_DATA_TYPE_EOC) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   uint8_t i;",
          "92:   i = 0;",
          "94:     resource = snmp_mib_find_next(&varbinds[i].oid);",
          "95:     if(!resource) {",
          "96:       switch(header->version) {",
          "",
          "[Removed Lines]",
          "93:   while(varbinds[i].value_type != BER_DATA_TYPE_EOC && i < SNMP_MAX_NR_VALUES) {",
          "",
          "[Added Lines]",
          "93:   while(i < SNMP_MAX_NR_VALUES && varbinds[i].value_type != BER_DATA_TYPE_EOC) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:   original_varbinds_length = 0;",
          "136:     memcpy(&oids[original_varbinds_length], &varbinds[original_varbinds_length].oid, sizeof(snmp_oid_t));",
          "137:     original_varbinds_length++;",
          "138:   }",
          "",
          "[Removed Lines]",
          "135:   while(varbinds[original_varbinds_length].value_type != BER_DATA_TYPE_EOC && original_varbinds_length < SNMP_MAX_NR_VALUES) {",
          "",
          "[Added Lines]",
          "135:   while(original_varbinds_length < SNMP_MAX_NR_VALUES &&",
          "136:         varbinds[original_varbinds_length].value_type != BER_DATA_TYPE_EOC) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a863e7e549ed2ceb23186697e2cfa5ae6a4216",
      "candidate_info": {
        "commit_hash": "41a863e7e549ed2ceb23186697e2cfa5ae6a4216",
        "repo": "contiki-ng/contiki-ng",
        "commit_url": "https://github.com/contiki-ng/contiki-ng/commit/41a863e7e549ed2ceb23186697e2cfa5ae6a4216",
        "files": [
          "os/net/app-layer/snmp/snmp-api.h",
          "tests/01-compile-base/Makefile",
          "tests/04-compile-nxp-ports/Makefile"
        ],
        "message": "Fix compilation on z1, sky and jn516x",
        "before_after_code_files": [
          "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h"
          ],
          "candidate": [
            "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h"
          ]
        }
      },
      "candidate_diff": {
        "os/net/app-layer/snmp/snmp-api.h||os/net/app-layer/snmp/snmp-api.h": [
          "File: os/net/app-layer/snmp/snmp-api.h -> os/net/app-layer/snmp/snmp-api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: #define OID(name, ...) \\",
          "80:   static snmp_oid_t name = { \\",
          "82:     .length = (sizeof((uint32_t[]){ __VA_ARGS__ }) / sizeof(uint32_t)) \\",
          "83:   };",
          "",
          "[Removed Lines]",
          "81:     .data = __VA_ARGS__, \\",
          "",
          "[Added Lines]",
          "81:     .data = { __VA_ARGS__ }, \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:   snmp_mib_resource_t name = { \\",
          "94:     NULL, \\",
          "95:     { \\",
          "97:       .length = (sizeof((uint32_t[]){ __VA_ARGS__ }) / sizeof(uint32_t)) \\",
          "98:     }, \\",
          "99:     handler \\",
          "",
          "[Removed Lines]",
          "96:       .data = __VA_ARGS__, \\",
          "",
          "[Added Lines]",
          "96:       .data = { __VA_ARGS__ }, \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09d3f2f07884d0f498bed3db2a5b8cba5e3ea82e",
      "candidate_info": {
        "commit_hash": "09d3f2f07884d0f498bed3db2a5b8cba5e3ea82e",
        "repo": "contiki-ng/contiki-ng",
        "commit_url": "https://github.com/contiki-ng/contiki-ng/commit/09d3f2f07884d0f498bed3db2a5b8cba5e3ea82e",
        "files": [
          "os/net/app-layer/snmp/snmp-ber.c"
        ],
        "message": "Fix the length field check that is done with unsigned integer arithmetic.",
        "before_after_code_files": [
          "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
          ],
          "candidate": [
            "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c": [
          "File: os/net/app-layer/snmp/snmp-ber.c -> os/net/app-layer/snmp/snmp-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:     return 0;",
          "421:   }",
          "",
          "[Removed Lines]",
          "419:   if(snmp_packet->used == 0 || snmp_packet->used - *length <= 0) {",
          "",
          "[Added Lines]",
          "419:   if(snmp_packet->used == 0 || snmp_packet->used < *length) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7678530e02dbeaeab40b37f5fb12525b99f338c",
      "candidate_info": {
        "commit_hash": "c7678530e02dbeaeab40b37f5fb12525b99f338c",
        "repo": "contiki-ng/contiki-ng",
        "commit_url": "https://github.com/contiki-ng/contiki-ng/commit/c7678530e02dbeaeab40b37f5fb12525b99f338c",
        "files": [
          "os/net/app-layer/snmp/snmp-ber.c"
        ],
        "message": "Avoid increasing str pointer with wrapped value when length is 0.",
        "before_after_code_files": [
          "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
          ],
          "candidate": [
            "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c"
          ]
        }
      },
      "candidate_diff": {
        "os/net/app-layer/snmp/snmp-ber.c||os/net/app-layer/snmp/snmp-ber.c": [
          "File: os/net/app-layer/snmp/snmp-ber.c -> os/net/app-layer/snmp/snmp-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: {",
          "160:   uint32_t i;",
          "170:   }",
          "172:   if(!snmp_ber_encode_length(snmp_packet, length)) {",
          "",
          "[Removed Lines]",
          "162:   str += length - 1;",
          "163:   for(i = 0; i < length; ++i) {",
          "164:     if(snmp_packet->used == snmp_packet->max) {",
          "165:       return 0;",
          "166:     }",
          "169:     snmp_packet->used++;",
          "",
          "[Added Lines]",
          "162:   if(length > 0) {",
          "163:     str += length - 1;",
          "164:     for(i = 0; i < length; ++i) {",
          "165:       if(snmp_packet->used == snmp_packet->max) {",
          "166:         return 0;",
          "167:       }",
          "170:       snmp_packet->used++;",
          "171:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}