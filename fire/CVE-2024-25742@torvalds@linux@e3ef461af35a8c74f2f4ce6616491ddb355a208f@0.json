{
  "cve_id": "CVE-2024-25742",
  "cve_desc": "In the Linux kernel before 6.9, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handler. This affects AMD SEV-SNP and AMD SEV-ES.",
  "repo": "torvalds/linux",
  "patch_hash": "e3ef461af35a8c74f2f4ce6616491ddb355a208f",
  "patch_info": {
    "commit_hash": "e3ef461af35a8c74f2f4ce6616491ddb355a208f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e3ef461af35a8c74f2f4ce6616491ddb355a208f",
    "files": [
      "arch/x86/boot/compressed/sev.c",
      "arch/x86/kernel/sev-shared.c",
      "arch/x86/kernel/sev.c"
    ],
    "message": "x86/sev: Harden #VC instruction emulation somewhat\n\nCompare the opcode bytes at rIP for each #VC exit reason to verify the\ninstruction which raised the #VC exception is actually the right one.\n\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nAcked-by: Tom Lendacky <thomas.lendacky@amd.com>\nLink: https://lore.kernel.org/r/20240105101407.11694-1-bp@alien8.de",
    "before_after_code_files": [
      "arch/x86/boot/compressed/sev.c||arch/x86/boot/compressed/sev.c",
      "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c",
      "arch/x86/kernel/sev.c||arch/x86/kernel/sev.c"
    ]
  },
  "patch_diff": {
    "arch/x86/boot/compressed/sev.c||arch/x86/boot/compressed/sev.c": [
      "File: arch/x86/boot/compressed/sev.c -> arch/x86/boot/compressed/sev.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:  if (result != ES_OK)",
      "305:   goto finish;",
      "307:  switch (exit_code) {",
      "308:  case SVM_EXIT_RDTSC:",
      "309:  case SVM_EXIT_RDTSCP:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:  result = vc_check_opcode_bytes(&ctxt, exit_code);",
      "308:  if (result != ES_OK)",
      "309:   goto finish;",
      "",
      "---------------"
    ],
    "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c": [
      "File: arch/x86/kernel/sev-shared.c -> arch/x86/kernel/sev-shared.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: #ifndef __BOOT_COMPRESSED",
      "15: #else",
      "16: #undef WARN",
      "17: #define WARN(condition, format...) (!!(condition))",
      "18: #endif",
      "",
      "[Removed Lines]",
      "13: #define error(v) pr_err(v)",
      "14: #define has_cpuflag(f) boot_cpu_has(f)",
      "",
      "[Added Lines]",
      "13: #define error(v)   pr_err(v)",
      "14: #define has_cpuflag(f)   boot_cpu_has(f)",
      "15: #define sev_printk(fmt, ...)  printk(fmt, ##__VA_ARGS__)",
      "16: #define sev_printk_rtl(fmt, ...) printk_ratelimited(fmt, ##__VA_ARGS__)",
      "20: #define sev_printk(fmt, ...)",
      "21: #define sev_printk_rtl(fmt, ...)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "574: {",
      "575:  unsigned int subfn = lower_bits(regs->cx, 32);",
      "576:  unsigned int fn = lower_bits(regs->ax, 32);",
      "577:  struct cpuid_leaf leaf;",
      "578:  int ret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "581:  u16 opcode = *(unsigned short *)regs->ip;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "581:  if (exit_code != SVM_EXIT_CPUID)",
      "582:   goto fail;",
      "584:  leaf.fn = fn;",
      "585:  leaf.subfn = subfn;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "590:  if (opcode != 0xa20f)",
      "591:   goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1170: out:",
      "1171:  return ret;",
      "1172: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1183: static enum es_result vc_check_opcode_bytes(struct es_em_ctxt *ctxt,",
      "1184:          unsigned long exit_code)",
      "1185: {",
      "1186:  unsigned int opcode = (unsigned int)ctxt->insn.opcode.value;",
      "1187:  u8 modrm = ctxt->insn.modrm.value;",
      "1189:  switch (exit_code) {",
      "1191:  case SVM_EXIT_IOIO:",
      "1192:  case SVM_EXIT_NPF:",
      "1194:   return ES_OK;",
      "1196:  case SVM_EXIT_CPUID:",
      "1197:   if (opcode == 0xa20f)",
      "1198:    return ES_OK;",
      "1199:   break;",
      "1201:  case SVM_EXIT_INVD:",
      "1202:   if (opcode == 0x080f)",
      "1203:    return ES_OK;",
      "1204:   break;",
      "1206:  case SVM_EXIT_MONITOR:",
      "1207:   if (opcode == 0x010f && modrm == 0xc8)",
      "1208:    return ES_OK;",
      "1209:   break;",
      "1211:  case SVM_EXIT_MWAIT:",
      "1212:   if (opcode == 0x010f && modrm == 0xc9)",
      "1213:    return ES_OK;",
      "1214:   break;",
      "1216:  case SVM_EXIT_MSR:",
      "1218:   if (opcode == 0x320f ||",
      "1220:       opcode == 0x300f)",
      "1221:    return ES_OK;",
      "1222:   break;",
      "1224:  case SVM_EXIT_RDPMC:",
      "1225:   if (opcode == 0x330f)",
      "1226:    return ES_OK;",
      "1227:   break;",
      "1229:  case SVM_EXIT_RDTSC:",
      "1230:   if (opcode == 0x310f)",
      "1231:    return ES_OK;",
      "1232:   break;",
      "1234:  case SVM_EXIT_RDTSCP:",
      "1235:   if (opcode == 0x010f && modrm == 0xf9)",
      "1236:    return ES_OK;",
      "1237:   break;",
      "1239:  case SVM_EXIT_READ_DR7:",
      "1240:   if (opcode == 0x210f &&",
      "1241:       X86_MODRM_REG(ctxt->insn.modrm.value) == 7)",
      "1242:    return ES_OK;",
      "1243:   break;",
      "1245:  case SVM_EXIT_VMMCALL:",
      "1246:   if (opcode == 0x010f && modrm == 0xd9)",
      "1247:    return ES_OK;",
      "1249:   break;",
      "1251:  case SVM_EXIT_WRITE_DR7:",
      "1252:   if (opcode == 0x230f &&",
      "1253:       X86_MODRM_REG(ctxt->insn.modrm.value) == 7)",
      "1254:    return ES_OK;",
      "1255:   break;",
      "1257:  case SVM_EXIT_WBINVD:",
      "1258:   if (opcode == 0x90f)",
      "1259:    return ES_OK;",
      "1260:   break;",
      "1262:  default:",
      "1263:   break;",
      "1264:  }",
      "1266:  sev_printk(KERN_ERR \"Wrong/unhandled opcode bytes: 0x%x, exit_code: 0x%lx, rIP: 0x%lx\\n\",",
      "1267:      opcode, exit_code, ctxt->regs->ip);",
      "1269:  return ES_UNSUPPORTED;",
      "1270: }",
      "",
      "---------------"
    ],
    "arch/x86/kernel/sev.c||arch/x86/kernel/sev.c": [
      "File: arch/x86/kernel/sev.c -> arch/x86/kernel/sev.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1752:       struct ghcb *ghcb,",
      "1753:       unsigned long exit_code)",
      "1754: {",
      "1757:  switch (exit_code) {",
      "1758:  case SVM_EXIT_READ_DR7:",
      "",
      "[Removed Lines]",
      "1755:  enum es_result result;",
      "",
      "[Added Lines]",
      "1755:  enum es_result result = vc_check_opcode_bytes(ctxt, exit_code);",
      "1757:  if (result != ES_OK)",
      "1758:   return result;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e70316d17f6ab49a6038ffd115397fd68f8c7be8",
      "candidate_info": {
        "commit_hash": "e70316d17f6ab49a6038ffd115397fd68f8c7be8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e70316d17f6ab49a6038ffd115397fd68f8c7be8",
        "files": [
          "arch/x86/kernel/sev-shared.c"
        ],
        "message": "x86/sev: Check for MWAITX and MONITORX opcodes in the #VC handler\n\nThe MWAITX and MONITORX instructions generate the same #VC error code as\nthe MWAIT and MONITOR instructions, respectively. Update the #VC handler\nopcode checking to also support the MWAITX and MONITORX opcodes.\n\nFixes: e3ef461af35a (\"x86/sev: Harden #VC instruction emulation somewhat\")\nSigned-off-by: Tom Lendacky <thomas.lendacky@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nLink: https://lore.kernel.org/r/453d5a7cfb4b9fe818b6fb67f93ae25468bc9e23.1713793161.git.thomas.lendacky@amd.com",
        "before_after_code_files": [
          "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c"
          ],
          "candidate": [
            "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/sev-shared.c||arch/x86/kernel/sev-shared.c": [
          "File: arch/x86/kernel/sev-shared.c -> arch/x86/kernel/sev-shared.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:   break;",
          "1205:  case SVM_EXIT_MONITOR:",
          "1207:    return ES_OK;",
          "1208:   break;",
          "1210:  case SVM_EXIT_MWAIT:",
          "1212:    return ES_OK;",
          "1213:   break;",
          "",
          "[Removed Lines]",
          "1206:   if (opcode == 0x010f && modrm == 0xc8)",
          "1211:   if (opcode == 0x010f && modrm == 0xc9)",
          "",
          "[Added Lines]",
          "1207:   if (opcode == 0x010f && (modrm == 0xc8 || modrm == 0xfa))",
          "1213:   if (opcode == 0x010f && (modrm == 0xc9 || modrm == 0xfb))",
          "",
          "---------------"
        ]
      }
    }
  ]
}