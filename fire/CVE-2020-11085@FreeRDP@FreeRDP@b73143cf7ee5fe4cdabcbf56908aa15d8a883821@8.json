{
  "cve_id": "CVE-2020-11085",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
  "patch_info": {
    "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "files": [
      "channels/cliprdr/cliprdr_common.c"
    ],
    "message": "Fixed oob read in cliprdr_read_format_list",
    "before_after_code_files": [
      "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
    ]
  },
  "patch_diff": {
    "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
      "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  int formatNameLength;",
      "401:  char* szFormatName;",
      "402:  WCHAR* wszFormatName;",
      "404:  CLIPRDR_FORMAT* formats = NULL;",
      "405:  UINT error = CHANNEL_RC_OK;",
      "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
      "409:  index = 0;",
      "410:  formatList->numFormats = 0;",
      "413:  if (!formatList->dataLen)",
      "414:  {",
      "418:  }",
      "419:  else if (!useLongFormatNames)",
      "420:  {",
      "424:   {",
      "426:    return ERROR_INTERNAL_ERROR;",
      "427:   }",
      "",
      "[Removed Lines]",
      "403:  UINT32 dataLen = formatList->dataLen;",
      "411:  position = Stream_GetPosition(s);",
      "416:   formatList->formats = NULL;",
      "417:   formatList->numFormats = 0;",
      "421:   formatList->numFormats = (dataLen / 36);",
      "423:   if ((formatList->numFormats * 36) != dataLen)",
      "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
      "",
      "[Added Lines]",
      "403:  wStream sub1, sub2;",
      "411:  formatList->formats = NULL;",
      "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
      "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
      "416:   return ERROR_INVALID_DATA;",
      "423:   const size_t cap = Stream_Capacity(&sub1);",
      "424:   formatList->numFormats = (cap / 36);",
      "426:   if ((formatList->numFormats * 36) != cap)",
      "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "438:   formatList->formats = formats;",
      "441:   {",
      "445:    formats[index].formatName = NULL;",
      "",
      "[Removed Lines]",
      "440:   while (dataLen)",
      "443:    dataLen -= 4;",
      "",
      "[Added Lines]",
      "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "455:    if (asciiNames)",
      "456:    {",
      "459:     if (szFormatName[0])",
      "460:     {",
      "",
      "[Removed Lines]",
      "457:     szFormatName = (char*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
      "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "459:    if (!Stream_SafeSeek(&sub1, 32))",
      "460:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    }",
      "473:    else",
      "474:    {",
      "477:     if (wszFormatName[0])",
      "478:     {",
      "",
      "[Removed Lines]",
      "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "489:     }",
      "490:    }",
      "494:    index++;",
      "495:   }",
      "496:  }",
      "497:  else",
      "498:  {",
      "500:   {",
      "514:    formatList->numFormats++;",
      "515:   }",
      "520:   if (formatList->numFormats)",
      "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
      "",
      "[Removed Lines]",
      "492:    Stream_Seek(s, 32);",
      "493:    dataLen -= 32;",
      "499:   while (dataLen)",
      "502:    dataLen -= 4;",
      "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "506:    if (!wszFormatName[0])",
      "507:     formatNameLength = 0;",
      "508:    else",
      "509:     formatNameLength = _wcslen(wszFormatName);",
      "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "512:    dataLen -= ((formatNameLength + 1) * 2);",
      "517:   dataLen = formatList->dataLen;",
      "518:   Stream_SetPosition(s, position);",
      "",
      "[Added Lines]",
      "499:   sub2 = sub1;",
      "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
      "502:    size_t rest;",
      "504:     goto error_out;",
      "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "507:    rest = Stream_GetRemainingLength(&sub1);",
      "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
      "511:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:   formatList->formats = formats;",
      "532:   {",
      "536:    formats[index].formatName = NULL;",
      "545:    if (formatNameLength)",
      "546:    {",
      "549:     {",
      "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
      "551:      error = ERROR_INTERNAL_ERROR;",
      "",
      "[Removed Lines]",
      "531:   while (dataLen)",
      "534:    dataLen -= 4;",
      "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "540:    if (!wszFormatName[0])",
      "541:     formatNameLength = 0;",
      "542:    else",
      "543:     formatNameLength = _wcslen(wszFormatName);",
      "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
      "548:                            0, NULL, NULL) < 1)",
      "",
      "[Added Lines]",
      "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
      "528:    size_t rest;",
      "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
      "534:    rest = Stream_GetRemainingLength(&sub2);",
      "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
      "537:     goto error_out;",
      "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
      "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "553:     }",
      "554:    }",
      "559:    index++;",
      "560:   }",
      "561:  }",
      "",
      "[Removed Lines]",
      "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "557:    dataLen -= ((formatNameLength + 1) * 2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "582:   }",
      "584:   free(formatList->formats);",
      "585:  }",
      "586: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "576:   formatList->formats = NULL;",
      "577:   formatList->numFormats = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
      "candidate_info": {
        "commit_hash": "f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fix short format name configuration and format list return.",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [
            "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
          ],
          "candidate": [
            "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                                         const CLIPRDR_CAPABILITIES* capabilities)",
          "540: {",
          "541:  wStream* s;",
          "542:  const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;",
          "543:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "544:  s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);",
          "546:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  UINT32 flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"ClientCapabilities\");",
          "560:  return cliprdr_packet_send(cliprdr, s);",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  flags = generalCapabilitySet->generalFlags;",
          "566:  if (!cliprdr->useLongFormatNames)",
          "567:   flags &= ~CB_USE_LONG_FORMAT_NAMES;",
          "568:  if (!cliprdr->streamFileClipEnabled)",
          "569:   flags &= ~CB_STREAM_FILECLIP_ENABLED;",
          "570:  if (!cliprdr->fileClipNoFilePaths)",
          "571:   flags &= ~CB_FILECLIP_NO_FILE_PATHS;",
          "572:  if (!cliprdr->canLockClipData)",
          "573:   flags &= CB_CAN_LOCK_CLIPDATA;",
          "575:  cliprdr->useLongFormatNames = flags & CB_USE_LONG_FORMAT_NAMES;",
          "576:  cliprdr->streamFileClipEnabled = flags & CB_STREAM_FILECLIP_ENABLED;",
          "577:  cliprdr->fileClipNoFilePaths = flags & CB_FILECLIP_NO_FILE_PATHS;",
          "578:  cliprdr->canLockClipData = flags & CB_CAN_LOCK_CLIPDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:  }",
          "1141:  cliprdr->log = WLog_Get(\"com.freerdp.channels.cliprdr.client\");",
          "1146:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"VirtualChannelEntryEx\");",
          "1147:  CopyMemory(&(cliprdr->channelEntryPoints), pEntryPoints,",
          "1148:             sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX));",
          "",
          "[Removed Lines]",
          "1142:  cliprdr->useLongFormatNames = TRUE;",
          "1143:  cliprdr->streamFileClipEnabled = FALSE;",
          "1144:  cliprdr->fileClipNoFilePaths = TRUE;",
          "1145:  cliprdr->canLockClipData = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  WCHAR* wszFormatName;",
          "403:  wStream sub1, sub2;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "405:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "405:  UINT error = ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:   }",
          "552:  }",
          "556: error_out:",
          "557:  cliprdr_free_format_list(formatList);",
          "",
          "[Removed Lines]",
          "554:  return error;",
          "",
          "[Added Lines]",
          "554:  return CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a5ae5a9eff3b0995f971a275fe516419954c1",
      "candidate_info": {
        "commit_hash": "fe9a5ae5a9eff3b0995f971a275fe516419954c1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/fe9a5ae5a9eff3b0995f971a275fe516419954c1",
        "files": [
          "client/Wayland/wlf_cliprdr.c"
        ],
        "message": "wlfreerdp/cliprdr: Initialize pointer before use\n\nIn `wlf_cliprdr_server_format_data_request()` `ConvertToUnicode()` may return 0\nwhile not allocating memory for `cdata` and not setting `cdata` to a valid\naddress. In this case, `data` points to a random address.\n\nSettting `cdata` to NULL before calling `ConvertToUnicode()` fixes this issues.",
        "before_after_code_files": [
          "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c": [
          "File: client/Wayland/wlf_cliprdr.c -> client/Wayland/wlf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:     rc = ERROR_INTERNAL_ERROR;",
          "625:    else",
          "626:    {",
          "627:     cnv = ConvertToUnicode(CP_UTF8, 0, (LPCSTR)data, (int)size, &cdata, 0);",
          "628:     free(data);",
          "629:     data = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:     cdata = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "738d4bff008da5873a2cbf73d032e9bc01d68198",
      "candidate_info": {
        "commit_hash": "738d4bff008da5873a2cbf73d032e9bc01d68198",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/738d4bff008da5873a2cbf73d032e9bc01d68198",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed oob read in update_recv\n\nproperly use update_type_to_string to print update type.\nThanks to hac425 CVE-2020-11019",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:  }",
          "779:  if (!update_begin_paint(update))",
          "780:   goto fail;",
          "",
          "[Removed Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", UPDATE_TYPE_STRINGS[updateType]);",
          "",
          "[Added Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", update_type_to_string(updateType));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b37e7fa11451747d251b80b6f882685f5ab50d9",
      "candidate_info": {
        "commit_hash": "8b37e7fa11451747d251b80b6f882685f5ab50d9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8b37e7fa11451747d251b80b6f882685f5ab50d9",
        "files": [
          "client/Wayland/wlfreerdp.c"
        ],
        "message": "Fixed primary monitor index for wayland fullscreen",
        "before_after_code_files": [
          "client/Wayland/wlfreerdp.c||client/Wayland/wlfreerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlfreerdp.c||client/Wayland/wlfreerdp.c": [
          "File: client/Wayland/wlfreerdp.c -> client/Wayland/wlfreerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  if (settings->Fullscreen)",
          "192:  {",
          "197:   {",
          "198:    settings->DesktopWidth = (UINT32)resolution.width;",
          "199:    settings->DesktopHeight = (UINT32)resolution.height;",
          "",
          "[Removed Lines]",
          "194:   output = UwacDisplayGetOutput(context->display, 1);",
          "196:   if (output != NULL && UwacOutputGetResolution(output, &resolution) == UWAC_SUCCESS)",
          "",
          "[Added Lines]",
          "194:   output = UwacDisplayGetOutput(context->display, 0);",
          "196:   if ((output != NULL) && (UwacOutputGetResolution(output, &resolution) == UWAC_SUCCESS))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
      "candidate_info": {
        "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
          "125: {",
          "126:  size_t size;",
          "127:  Stream_Read_UINT8(s, challenge->RespType);",
          "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
          "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (Stream_GetRemainingLength(s) < 28)",
          "128:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
          "165: {",
          "166:  Stream_Read(s, response->Response, 16);",
          "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  if (Stream_GetRemainingLength(s) < 16)",
          "170:   return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}