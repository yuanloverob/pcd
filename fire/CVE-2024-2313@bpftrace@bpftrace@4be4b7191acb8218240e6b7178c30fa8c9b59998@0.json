{
  "cve_id": "CVE-2024-2313",
  "cve_desc": "If kernel headers need to be extracted, bpftrace will attempt to load them from a temporary directory. An unprivileged attacker could use this to force bcc to load compromised linux headers. Linux distributions which provide kernel headers by default are not affected by default.",
  "repo": "bpftrace/bpftrace",
  "patch_hash": "4be4b7191acb8218240e6b7178c30fa8c9b59998",
  "patch_info": {
    "commit_hash": "4be4b7191acb8218240e6b7178c30fa8c9b59998",
    "repo": "bpftrace/bpftrace",
    "commit_url": "https://github.com/bpftrace/bpftrace/commit/4be4b7191acb8218240e6b7178c30fa8c9b59998",
    "files": [
      "src/utils.cpp",
      "src/utils.h",
      "tests/utils.cpp"
    ],
    "message": "Fix security hole checking unpacked kernel headers (#3033)\n\nMake sure to check that the unpacked kheaders tar\nis owned by root to prevent bpftrace from loading\ncompromised linux headers.\n\nCo-authored-by: Jordan Rome <jordalgo@fedoraproject.org>",
    "before_after_code_files": [
      "src/utils.cpp||src/utils.cpp",
      "src/utils.h||src/utils.h",
      "tests/utils.cpp||tests/utils.cpp"
    ]
  },
  "patch_diff": {
    "src/utils.cpp||src/utils.cpp": [
      "File: src/utils.cpp -> src/utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:   { nullptr, false },",
      "109: };",
      "111: static bool pid_in_different_mountns(int pid);",
      "112: static std::vector<std::string> resolve_binary_path(const std::string &cmd,",
      "113:                                                     const char *env_paths,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111: constexpr std::string_view PROC_KHEADERS_PATH = \"/sys/kernel/kheaders.tar.xz\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "683:   return std_filesystem::is_directory(buf, ec);",
      "684: }",
      "686: namespace {",
      "687: struct KernelHeaderTmpDir {",
      "688:   KernelHeaderTmpDir(const std::string &prefix) : path{ prefix + \"XXXXXX\" }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "688: bool file_exists_and_ownedby_root(const char *f)",
      "689: {",
      "690:   struct stat st;",
      "691:   if (stat(f, &st) == 0) {",
      "692:     if (st.st_uid != 0) {",
      "693:       LOG(ERROR) << \"header file ownership expected to be root: \"",
      "694:                  << std::string(f);",
      "695:       return false;",
      "696:     }",
      "697:     return true;",
      "698:   }",
      "699:   return false;",
      "700: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "721: #else",
      "722:   std_filesystem::path path_prefix{ \"/tmp\" };",
      "723: #endif",
      "725:   if (const char *tmpdir = ::getenv(\"TMPDIR\")) {",
      "726:     path_prefix = tmpdir;",
      "727:   }",
      "728:   path_prefix /= \"kheaders-\";",
      "729:   std_filesystem::path shared_path{ path_prefix.string() + utsname.release };",
      "733:     return shared_path.string();",
      "734:   }",
      "",
      "[Removed Lines]",
      "724:   std_filesystem::path path_kheaders{ \"/sys/kernel/kheaders.tar.xz\" };",
      "731:   if (std_filesystem::exists(shared_path, ec)) {",
      "",
      "[Added Lines]",
      "740:   std_filesystem::path path_kheaders{ PROC_KHEADERS_PATH };",
      "747:   if (file_exists_and_ownedby_root(shared_path.c_str())) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "750:   KernelHeaderTmpDir tmpdir{ path_prefix };",
      "754:   if (!tar) {",
      "755:     return \"\";",
      "756:   }",
      "",
      "[Removed Lines]",
      "752:   FILE *tar = ::popen(",
      "753:       (\"tar xf /sys/kernel/kheaders.tar.xz -C \" + tmpdir.path).c_str(), \"w\");",
      "",
      "[Added Lines]",
      "768:   FILE *tar = ::popen((\"tar xf \" + std::string(PROC_KHEADERS_PATH) + \" -C \" +",
      "769:                        tmpdir.path)",
      "770:                           .c_str(),",
      "771:                       \"w\");",
      "",
      "---------------"
    ],
    "src/utils.h||src/utils.h": [
      "File: src/utils.h -> src/utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "174: std::vector<int> get_online_cpus();",
      "175: std::vector<int> get_possible_cpus();",
      "176: bool is_dir(const std::string &path);",
      "177: std::tuple<std::string, std::string> get_kernel_dirs(",
      "178:     const struct utsname &utsname,",
      "179:     bool unpack_kheaders = true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "177: bool file_exists_and_ownedby_root(const char *f);",
      "",
      "---------------"
    ],
    "tests/utils.cpp||tests/utils.cpp": [
      "File: tests/utils.cpp -> tests/utils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "358:   ASSERT_EQ(pids.size(), 0);",
      "359: }",
      "361: } // namespace utils",
      "362: } // namespace test",
      "363: } // namespace bpftrace",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "361: TEST(utils, file_exists_and_ownedby_root)",
      "362: {",
      "363:   std::string tmpdir = \"/tmp/bpftrace-test-utils-XXXXXX\";",
      "364:   std::string file1 = \"/ownedby-user\";",
      "365:   std::string file2 = \"/no-exists\";",
      "366:   if (::mkdtemp(tmpdir.data()) == nullptr) {",
      "367:     throw std::runtime_error(\"creating temporary path for tests failed\");",
      "368:   }",
      "370:   int fd;",
      "371:   fd = open((tmpdir + file1).c_str(), O_CREAT, S_IRUSR);",
      "372:   close(fd);",
      "373:   ASSERT_GE(fd, 0);",
      "375:   EXPECT_FALSE(file_exists_and_ownedby_root((tmpdir + file1).c_str()));",
      "376:   EXPECT_FALSE(file_exists_and_ownedby_root((tmpdir + file2).c_str()));",
      "377:   EXPECT_TRUE(file_exists_and_ownedby_root(\"/proc/1/maps\"));",
      "379:   EXPECT_GT(std_filesystem::remove_all(tmpdir), 0);",
      "380: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "338fb98d794bbe4f265ad94e56ffb4227920ada3",
      "candidate_info": {
        "commit_hash": "338fb98d794bbe4f265ad94e56ffb4227920ada3",
        "repo": "bpftrace/bpftrace",
        "commit_url": "https://github.com/bpftrace/bpftrace/commit/338fb98d794bbe4f265ad94e56ffb4227920ada3",
        "files": [
          "src/utils.cpp",
          "src/utils.h",
          "tests/utils.cpp"
        ],
        "message": "Fix security hole checking unpacked kernel headers (#3033)\n\nMake sure to check that the unpacked kheaders tar\nis owned by root to prevent bpftrace from loading\ncompromised linux headers.\n\nCo-authored-by: Jordan Rome <jordalgo@fedoraproject.org>",
        "before_after_code_files": [
          "src/utils.cpp||src/utils.cpp",
          "src/utils.h||src/utils.h",
          "tests/utils.cpp||tests/utils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/utils.cpp||src/utils.cpp",
            "src/utils.h||src/utils.h",
            "tests/utils.cpp||tests/utils.cpp"
          ],
          "candidate": [
            "src/utils.cpp||src/utils.cpp",
            "src/utils.h||src/utils.h",
            "tests/utils.cpp||tests/utils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/utils.cpp||src/utils.cpp": [
          "File: src/utils.cpp -> src/utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   { nullptr, false },",
          "110: };",
          "112: static bool pid_in_different_mountns(int pid);",
          "113: static std::vector<std::string>",
          "114: resolve_binary_path(const std::string &cmd, const char *env_paths, int pid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: constexpr std::string_view PROC_KHEADERS_PATH = \"/sys/kernel/kheaders.tar.xz\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:   return std_filesystem::is_directory(buf, ec);",
          "701: }",
          "703: namespace {",
          "704:   struct KernelHeaderTmpDir {",
          "705:     KernelHeaderTmpDir(const std::string& prefix) : path{prefix + \"XXXXXX\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705: bool file_exists_and_ownedby_root(const char *f)",
          "706: {",
          "707:   struct stat st;",
          "708:   if (stat(f, &st) == 0)",
          "709:   {",
          "710:     if (st.st_uid != 0)",
          "711:     {",
          "712:       LOG(ERROR) << \"header file ownership expected to be root: \"",
          "713:                  << std::string(f);",
          "714:       return false;",
          "715:     }",
          "716:     return true;",
          "717:   }",
          "718:   return false;",
          "719: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736: #else",
          "737:     std_filesystem::path path_prefix{ \"/tmp\" };",
          "738: #endif",
          "740:     if (const char* tmpdir = ::getenv(\"TMPDIR\")) {",
          "741:       path_prefix = tmpdir;",
          "742:     }",
          "743:     path_prefix /= \"kheaders-\";",
          "744:     std_filesystem::path shared_path{ path_prefix.string() + utsname.release };",
          "747:     {",
          "749:       return shared_path.string();",
          "",
          "[Removed Lines]",
          "739:     std_filesystem::path path_kheaders{ \"/sys/kernel/kheaders.tar.xz\" };",
          "746:     if (std_filesystem::exists(shared_path, ec))",
          "",
          "[Added Lines]",
          "757:     std_filesystem::path path_kheaders{ PROC_KHEADERS_PATH };",
          "764:     if (file_exists_and_ownedby_root(shared_path.c_str()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "768:     KernelHeaderTmpDir tmpdir{path_prefix};",
          "771:     if (!tar) {",
          "772:       return \"\";",
          "773:     }",
          "",
          "[Removed Lines]",
          "770:     FILE* tar = ::popen((\"tar xf /sys/kernel/kheaders.tar.xz -C \" + tmpdir.path).c_str(), \"w\");",
          "",
          "[Added Lines]",
          "788:     FILE *tar = ::popen((\"tar xf \" + std::string(PROC_KHEADERS_PATH) + \" -C \" +",
          "789:                          tmpdir.path)",
          "790:                             .c_str(),",
          "791:                         \"w\");",
          "",
          "---------------"
        ],
        "src/utils.h||src/utils.h": [
          "File: src/utils.h -> src/utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: std::vector<int> get_online_cpus();",
          "186: std::vector<int> get_possible_cpus();",
          "187: bool is_dir(const std::string &path);",
          "188: std::tuple<std::string, std::string> get_kernel_dirs(",
          "189:     const struct utsname &utsname,",
          "190:     bool unpack_kheaders = true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: bool file_exists_and_ownedby_root(const char *f);",
          "",
          "---------------"
        ],
        "tests/utils.cpp||tests/utils.cpp": [
          "File: tests/utils.cpp -> tests/utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:   ASSERT_EQ(pids.size(), 0);",
          "364: }",
          "366: } // namespace utils",
          "367: } // namespace test",
          "368: } // namespace bpftrace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: TEST(utils, file_exists_and_ownedby_root)",
          "367: {",
          "368:   std::string tmpdir = \"/tmp/bpftrace-test-utils-XXXXXX\";",
          "369:   std::string file1 = \"/ownedby-user\";",
          "370:   std::string file2 = \"/no-exists\";",
          "371:   if (::mkdtemp(tmpdir.data()) == nullptr)",
          "372:   {",
          "373:     throw std::runtime_error(\"creating temporary path for tests failed\");",
          "374:   }",
          "376:   int fd;",
          "377:   fd = open((tmpdir + file1).c_str(), O_CREAT, S_IRUSR);",
          "378:   close(fd);",
          "379:   ASSERT_GE(fd, 0);",
          "381:   EXPECT_FALSE(file_exists_and_ownedby_root((tmpdir + file1).c_str()));",
          "382:   EXPECT_FALSE(file_exists_and_ownedby_root((tmpdir + file2).c_str()));",
          "383:   EXPECT_TRUE(file_exists_and_ownedby_root(\"/proc/1/maps\"));",
          "385:   EXPECT_GT(std_filesystem::remove_all(tmpdir), 0);",
          "386: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}