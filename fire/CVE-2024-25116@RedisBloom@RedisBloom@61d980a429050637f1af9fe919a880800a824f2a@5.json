{
  "cve_id": "CVE-2024-25116",
  "cve_desc": "RedisBloom adds a set of probabilistic data structures to Redis. Starting in version 2.0.0 and prior to version 2.4.7 and 2.6.10, authenticated users can use the `CF.RESERVE` command to trigger a runtime assertion and termination of the Redis server process. The problem is fixed in RedisBloom 2.4.7 and 2.6.10.",
  "repo": "RedisBloom/RedisBloom",
  "patch_hash": "61d980a429050637f1af9fe919a880800a824f2a",
  "patch_info": {
    "commit_hash": "61d980a429050637f1af9fe919a880800a824f2a",
    "repo": "RedisBloom/RedisBloom",
    "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/61d980a429050637f1af9fe919a880800a824f2a",
    "files": [
      "src/rebloom.c",
      "tests/flow/test_cuckoo.py"
    ],
    "message": "MOD-6343 Fix potential crash for cf.reserve (#724)\n\n* Enforce limits for cf.reserve arguments\n\n* comment\n\n* comment-2",
    "before_after_code_files": [
      "src/rebloom.c||src/rebloom.c",
      "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
    ]
  },
  "patch_diff": {
    "src/rebloom.c||src/rebloom.c": [
      "File: src/rebloom.c -> src/rebloom.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #define REDISBLOOM_GIT_SHA \"unknown\"",
      "25: #endif",
      "28: #define CF_DEFAULT_BUCKETSIZE 2",
      "29: #define CF_DEFAULT_EXPANSION 1",
      "30: #define BF_DEFAULT_EXPANSION 2",
      "",
      "[Removed Lines]",
      "27: #define CF_MAX_ITERATIONS 20",
      "",
      "[Added Lines]",
      "27: #define CF_DEFAULT_MAX_ITERATIONS 20",
      "30: #define CF_MAX_EXPANSION 32768",
      "31: #define CF_MAX_BUCKET_SIZE 255",
      "32: #define CF_MAX_ITERATIONS 65535",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     return sb;",
      "108: }",
      "112:     if (capacity < bucketSize * 2)",
      "113:         return NULL;",
      "",
      "[Removed Lines]",
      "110: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, size_t bucketSize,",
      "111:                               size_t maxIterations, size_t expansion) {",
      "",
      "[Added Lines]",
      "113: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, uint16_t bucketSize,",
      "114:                               uint16_t maxIterations, uint16_t expansion) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "529:         return RedisModule_ReplyWithError(ctx, \"Bad capacity\");",
      "530:     }",
      "533:     int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);",
      "534:     if (mi_loc != -1) {",
      "535:         if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {",
      "536:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");",
      "538:             return RedisModule_ReplyWithError(",
      "540:         }",
      "541:     }",
      "",
      "[Removed Lines]",
      "532:     long long maxIterations = CF_MAX_ITERATIONS;",
      "537:         } else if (maxIterations <= 0) {",
      "539:                 ctx, \"MAXITERATIONS parameter needs to be a positive integer\");",
      "",
      "[Added Lines]",
      "535:     long long maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
      "540:         } else if (maxIterations <= 0 || maxIterations > CF_MAX_ITERATIONS) {",
      "542:                 ctx, \"MAXITERATIONS: value must be an integer between 1 and 65535, inclusive.\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "545:     if (bs_loc != -1) {",
      "546:         if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {",
      "547:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");",
      "549:             return RedisModule_ReplyWithError(",
      "551:         }",
      "552:     }",
      "",
      "[Removed Lines]",
      "548:         } else if (bucketSize <= 0) {",
      "550:                 ctx, \"BUCKETSIZE parameter needs to be a positive integer\");",
      "",
      "[Added Lines]",
      "551:         } else if (bucketSize <= 0 || bucketSize > CF_MAX_BUCKET_SIZE) {",
      "553:                 ctx, \"BUCKETSIZE: value must be an integer between 1 and 255, inclusive.\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "556:     if (ex_loc != -1) {",
      "557:         if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {",
      "558:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");",
      "560:             return RedisModule_ReplyWithError(",
      "562:         }",
      "563:     }",
      "",
      "[Removed Lines]",
      "559:         } else if (expansion < 0) {",
      "561:                 ctx, \"EXPANSION parameter needs to be a non-negative integer\");",
      "",
      "[Added Lines]",
      "562:         } else if (expansion < 0 || expansion > CF_MAX_EXPANSION) {",
      "564:                 ctx, \"EXPANSION: value must be an integer between 0 and 32768, inclusive.\");",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "596:     int status = cfGetFilter(key, &cf);",
      "598:     if (status == SB_EMPTY && options->autocreate) {",
      "600:                            CF_DEFAULT_EXPANSION)) == NULL) {",
      "601:             return RedisModule_ReplyWithError(ctx, \"Could not create filter\"); // LCOV_EXCL_LINE",
      "602:         }",
      "",
      "[Removed Lines]",
      "599:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_MAX_ITERATIONS,",
      "",
      "[Added Lines]",
      "602:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_DEFAULT_MAX_ITERATIONS,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1252:     if (encver < CF_MIN_EXPANSION_VERSION) { // CF_ENCODING_VERSION when added",
      "1253:         cf->numDeletes = 0;                  // Didn't exist earlier. bug fix",
      "1254:         cf->bucketSize = CF_DEFAULT_BUCKETSIZE;",
      "1256:         cf->expansion = CF_DEFAULT_EXPANSION;",
      "1257:     } else {",
      "1258:         cf->numDeletes = RedisModule_LoadUnsigned(io);",
      "",
      "[Removed Lines]",
      "1255:         cf->maxIterations = CF_MAX_ITERATIONS;",
      "",
      "[Added Lines]",
      "1258:         cf->maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
      "",
      "---------------"
    ],
    "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
      "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "346:         self.assertRaises(ResponseError, self.cmd, 'CF.LOADCHUNK err iterator') # missing data",
      "347:         self.assertRaises(ResponseError, self.cmd, 'CF.SCANDUMP err')",
      "349: class testCuckooNoCodec():",
      "350:     def __init__(self):",
      "351:         self.env = Env(decodeResponses=False)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "349:     def test_reserve_limits(self):",
      "350:         self.cmd('FLUSHALL')",
      "351:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 BUCKETSIZE 33554432')",
      "352:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 MAXITERATIONS 165536')",
      "353:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 EXPANSION 327695')",
      "354:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE CF 67108864 BUCKETSIZE 33554432 MAXITERATIONS 1337 EXPANSION 1337')",
      "356:         self.cmd('CF.RESERVE cf 67108864 BUCKETSIZE 255 MAXITERATIONS 65535 EXPANSION 32768')",
      "357:         info = self.cmd('CF.INFO cf')",
      "358:         self.assertEqual(info[info.index('Bucket size') + 1], 255)",
      "359:         self.assertEqual(info[info.index('Expansion rate') + 1], 32768)",
      "360:         self.assertEqual(info[info.index('Max iterations') + 1], 65535)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8aefcb2dd38c18d43773bc317680dd0b167b7ca",
      "candidate_info": {
        "commit_hash": "c8aefcb2dd38c18d43773bc317680dd0b167b7ca",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/c8aefcb2dd38c18d43773bc317680dd0b167b7ca",
        "files": [
          "src/rebloom.c",
          "tests/flow/test_cuckoo.py"
        ],
        "message": "MOD-6343 Fix potential crash for cf.reserve (#724)\n\n* Enforce limits for cf.reserve arguments\n\n* comment\n\n* comment-2",
        "before_after_code_files": [
          "src/rebloom.c||src/rebloom.c",
          "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ],
          "candidate": [
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ]
        }
      },
      "candidate_diff": {
        "src/rebloom.c||src/rebloom.c": [
          "File: src/rebloom.c -> src/rebloom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define REDISBLOOM_GIT_SHA \"unknown\"",
          "25: #endif",
          "28: #define CF_DEFAULT_BUCKETSIZE 2",
          "29: #define CF_DEFAULT_EXPANSION 1",
          "30: #define BF_DEFAULT_EXPANSION 2",
          "",
          "[Removed Lines]",
          "27: #define CF_MAX_ITERATIONS 20",
          "",
          "[Added Lines]",
          "27: #define CF_DEFAULT_MAX_ITERATIONS 20",
          "30: #define CF_MAX_EXPANSION 32768",
          "31: #define CF_MAX_BUCKET_SIZE 255",
          "32: #define CF_MAX_ITERATIONS 65535",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     return sb;",
          "108: }",
          "112:     if (capacity < bucketSize * 2)",
          "113:         return NULL;",
          "",
          "[Removed Lines]",
          "110: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, size_t bucketSize,",
          "111:                               size_t maxIterations, size_t expansion) {",
          "",
          "[Added Lines]",
          "113: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, uint16_t bucketSize,",
          "114:                               uint16_t maxIterations, uint16_t expansion) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "514:         return RedisModule_ReplyWithError(ctx, \"Bad capacity\");",
          "515:     }",
          "518:     int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);",
          "519:     if (mi_loc != -1) {",
          "520:         if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {",
          "521:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");",
          "523:             return RedisModule_ReplyWithError(",
          "525:         }",
          "526:     }",
          "",
          "[Removed Lines]",
          "517:     long long maxIterations = CF_MAX_ITERATIONS;",
          "522:         } else if (maxIterations <= 0) {",
          "524:                 ctx, \"MAXITERATIONS parameter needs to be a positive integer\");",
          "",
          "[Added Lines]",
          "520:     long long maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
          "525:         } else if (maxIterations <= 0 || maxIterations > CF_MAX_ITERATIONS) {",
          "527:                 ctx, \"MAXITERATIONS: value must be an integer between 1 and 65535, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:     if (bs_loc != -1) {",
          "531:         if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {",
          "532:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");",
          "534:             return RedisModule_ReplyWithError(",
          "536:         }",
          "537:     }",
          "",
          "[Removed Lines]",
          "533:         } else if (bucketSize <= 0) {",
          "535:                 ctx, \"BUCKETSIZE parameter needs to be a positive integer\");",
          "",
          "[Added Lines]",
          "536:         } else if (bucketSize <= 0 || bucketSize > CF_MAX_BUCKET_SIZE) {",
          "538:                 ctx, \"BUCKETSIZE: value must be an integer between 1 and 255, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "541:     if (ex_loc != -1) {",
          "542:         if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {",
          "543:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");",
          "545:             return RedisModule_ReplyWithError(",
          "547:         }",
          "548:     }",
          "",
          "[Removed Lines]",
          "544:         } else if (expansion < 0) {",
          "546:                 ctx, \"EXPANSION parameter needs to be a non-negative integer\");",
          "",
          "[Added Lines]",
          "547:         } else if (expansion < 0 || expansion > CF_MAX_EXPANSION) {",
          "549:                 ctx, \"EXPANSION: value must be an integer between 0 and 32768, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "581:     int status = cfGetFilter(key, &cf);",
          "583:     if (status == SB_EMPTY && options->autocreate) {",
          "585:                            CF_DEFAULT_EXPANSION)) == NULL) {",
          "586:             return RedisModule_ReplyWithError(ctx, \"Could not create filter\"); // LCOV_EXCL_LINE",
          "587:         }",
          "",
          "[Removed Lines]",
          "584:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_MAX_ITERATIONS,",
          "",
          "[Added Lines]",
          "587:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_DEFAULT_MAX_ITERATIONS,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1194:     if (encver < CF_MIN_EXPANSION_VERSION) { // CF_ENCODING_VERSION when added",
          "1195:         cf->numDeletes = 0;                  // Didn't exist earlier. bug fix",
          "1196:         cf->bucketSize = CF_DEFAULT_BUCKETSIZE;",
          "1198:         cf->expansion = CF_DEFAULT_EXPANSION;",
          "1199:     } else {",
          "1200:         cf->numDeletes = RedisModule_LoadUnsigned(io);",
          "",
          "[Removed Lines]",
          "1197:         cf->maxIterations = CF_MAX_ITERATIONS;",
          "",
          "[Added Lines]",
          "1200:         cf->maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
          "",
          "---------------"
        ],
        "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
          "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:         self.assertRaises(ResponseError, self.cmd, 'CF.LOADCHUNK err iterator') # missing data",
          "347:         self.assertRaises(ResponseError, self.cmd, 'CF.SCANDUMP err')",
          "349: class testCuckooNoCodec():",
          "350:     def __init__(self):",
          "351:         self.env = Env(decodeResponses=False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:     def test_reserve_limits(self):",
          "350:         self.cmd('FLUSHALL')",
          "351:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 BUCKETSIZE 33554432')",
          "352:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 MAXITERATIONS 165536')",
          "353:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 EXPANSION 327695')",
          "354:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE CF 67108864 BUCKETSIZE 33554432 MAXITERATIONS 1337 EXPANSION 1337')",
          "356:         self.cmd('CF.RESERVE cf 67108864 BUCKETSIZE 255 MAXITERATIONS 65535 EXPANSION 32768')",
          "357:         info = self.cmd('CF.INFO cf')",
          "358:         self.assertEqual(info[info.index('Bucket size') + 1], 255)",
          "359:         self.assertEqual(info[info.index('Expansion rate') + 1], 32768)",
          "360:         self.assertEqual(info[info.index('Max iterations') + 1], 65535)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb9bd0f5f28f43da4f0d62598016a80ea2fba1cf",
      "candidate_info": {
        "commit_hash": "eb9bd0f5f28f43da4f0d62598016a80ea2fba1cf",
        "repo": "RedisBloom/RedisBloom",
        "commit_url": "https://github.com/RedisBloom/RedisBloom/commit/eb9bd0f5f28f43da4f0d62598016a80ea2fba1cf",
        "files": [
          "src/rebloom.c",
          "tests/flow/test_cuckoo.py"
        ],
        "message": "MOD-6343 Fix potential crash for cf.reserve (#724)\n\n* Enforce limits for cf.reserve arguments\n\n* comment\n\n* comment-2",
        "before_after_code_files": [
          "src/rebloom.c||src/rebloom.c",
          "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ],
          "candidate": [
            "src/rebloom.c||src/rebloom.c",
            "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py"
          ]
        }
      },
      "candidate_diff": {
        "src/rebloom.c||src/rebloom.c": [
          "File: src/rebloom.c -> src/rebloom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define REDISBLOOM_GIT_SHA \"unknown\"",
          "25: #endif",
          "28: #define CF_DEFAULT_BUCKETSIZE 2",
          "29: #define CF_DEFAULT_EXPANSION 1",
          "30: #define BF_DEFAULT_EXPANSION 2",
          "",
          "[Removed Lines]",
          "27: #define CF_MAX_ITERATIONS 20",
          "",
          "[Added Lines]",
          "27: #define CF_DEFAULT_MAX_ITERATIONS 20",
          "30: #define CF_MAX_EXPANSION 32768",
          "31: #define CF_MAX_BUCKET_SIZE 255",
          "32: #define CF_MAX_ITERATIONS 65535",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     return sb;",
          "108: }",
          "112:     if (capacity < bucketSize * 2)",
          "113:         return NULL;",
          "",
          "[Removed Lines]",
          "110: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, size_t bucketSize,",
          "111:                               size_t maxIterations, size_t expansion) {",
          "",
          "[Added Lines]",
          "113: static CuckooFilter *cfCreate(RedisModuleKey *key, size_t capacity, uint16_t bucketSize,",
          "114:                               uint16_t maxIterations, uint16_t expansion) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "514:         return RedisModule_ReplyWithError(ctx, \"Bad capacity\");",
          "515:     }",
          "518:     int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);",
          "519:     if (mi_loc != -1) {",
          "520:         if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {",
          "521:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");",
          "523:             return RedisModule_ReplyWithError(",
          "525:         }",
          "526:     }",
          "",
          "[Removed Lines]",
          "517:     long long maxIterations = CF_MAX_ITERATIONS;",
          "522:         } else if (maxIterations <= 0) {",
          "524:                 ctx, \"MAXITERATIONS parameter needs to be a positive integer\");",
          "",
          "[Added Lines]",
          "520:     long long maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
          "525:         } else if (maxIterations <= 0 || maxIterations > CF_MAX_ITERATIONS) {",
          "527:                 ctx, \"MAXITERATIONS: value must be an integer between 1 and 65535, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:     if (bs_loc != -1) {",
          "531:         if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {",
          "532:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");",
          "534:             return RedisModule_ReplyWithError(",
          "536:         }",
          "537:     }",
          "",
          "[Removed Lines]",
          "533:         } else if (bucketSize <= 0) {",
          "535:                 ctx, \"BUCKETSIZE parameter needs to be a positive integer\");",
          "",
          "[Added Lines]",
          "536:         } else if (bucketSize <= 0 || bucketSize > CF_MAX_BUCKET_SIZE) {",
          "538:                 ctx, \"BUCKETSIZE: value must be an integer between 1 and 255, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "541:     if (ex_loc != -1) {",
          "542:         if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {",
          "543:             return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");",
          "545:             return RedisModule_ReplyWithError(",
          "547:         }",
          "548:     }",
          "",
          "[Removed Lines]",
          "544:         } else if (expansion < 0) {",
          "546:                 ctx, \"EXPANSION parameter needs to be a non-negative integer\");",
          "",
          "[Added Lines]",
          "547:         } else if (expansion < 0 || expansion > CF_MAX_EXPANSION) {",
          "549:                 ctx, \"EXPANSION: value must be an integer between 0 and 32768, inclusive.\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "581:     int status = cfGetFilter(key, &cf);",
          "583:     if (status == SB_EMPTY && options->autocreate) {",
          "585:                            CF_DEFAULT_EXPANSION)) == NULL) {",
          "586:             return RedisModule_ReplyWithError(ctx, \"Could not create filter\"); // LCOV_EXCL_LINE",
          "587:         }",
          "",
          "[Removed Lines]",
          "584:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_MAX_ITERATIONS,",
          "",
          "[Added Lines]",
          "587:         if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_DEFAULT_MAX_ITERATIONS,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1194:     if (encver < CF_MIN_EXPANSION_VERSION) { // CF_ENCODING_VERSION when added",
          "1195:         cf->numDeletes = 0;                  // Didn't exist earlier. bug fix",
          "1196:         cf->bucketSize = CF_DEFAULT_BUCKETSIZE;",
          "1198:         cf->expansion = CF_DEFAULT_EXPANSION;",
          "1199:     } else {",
          "1200:         cf->numDeletes = RedisModule_LoadUnsigned(io);",
          "",
          "[Removed Lines]",
          "1197:         cf->maxIterations = CF_MAX_ITERATIONS;",
          "",
          "[Added Lines]",
          "1200:         cf->maxIterations = CF_DEFAULT_MAX_ITERATIONS;",
          "",
          "---------------"
        ],
        "tests/flow/test_cuckoo.py||tests/flow/test_cuckoo.py": [
          "File: tests/flow/test_cuckoo.py -> tests/flow/test_cuckoo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:         self.assertRaises(ResponseError, self.cmd, 'CF.LOADCHUNK err iterator') # missing data",
          "347:         self.assertRaises(ResponseError, self.cmd, 'CF.SCANDUMP err')",
          "349: class testCuckooNoCodec():",
          "350:     def __init__(self):",
          "351:         self.env = Env(decodeResponses=False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:     def test_reserve_limits(self):",
          "350:         self.cmd('FLUSHALL')",
          "351:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 BUCKETSIZE 33554432')",
          "352:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 MAXITERATIONS 165536')",
          "353:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE cf 100 EXPANSION 327695')",
          "354:         self.assertRaises(ResponseError, self.cmd, 'CF.RESERVE CF 67108864 BUCKETSIZE 33554432 MAXITERATIONS 1337 EXPANSION 1337')",
          "356:         self.cmd('CF.RESERVE cf 67108864 BUCKETSIZE 255 MAXITERATIONS 65535 EXPANSION 32768')",
          "357:         info = self.cmd('CF.INFO cf')",
          "358:         self.assertEqual(info[info.index('Bucket size') + 1], 255)",
          "359:         self.assertEqual(info[info.index('Expansion rate') + 1], 32768)",
          "360:         self.assertEqual(info[info.index('Max iterations') + 1], 65535)",
          "",
          "---------------"
        ]
      }
    }
  ]
}