{
  "cve_id": "CVE-2023-50245",
  "cve_desc": "OpenEXR-viewer is a viewer for OpenEXR files with detailed metadata probing. Versions prior to 0.6.1 have a memory overflow vulnerability. This issue is fixed in version 0.6.1.",
  "repo": "afichet/openexr-viewer",
  "patch_hash": "d0a7e85dfeb519951fb8a8d70f73f30d41cdd3d9",
  "patch_info": {
    "commit_hash": "d0a7e85dfeb519951fb8a8d70f73f30d41cdd3d9",
    "repo": "afichet/openexr-viewer",
    "commit_url": "https://github.com/afichet/openexr-viewer/commit/d0a7e85dfeb519951fb8a8d70f73f30d41cdd3d9",
    "files": [
      "src/model/framebuffer/FramebufferModel.cpp",
      "src/model/framebuffer/FramebufferModel.h",
      "src/model/framebuffer/RGBFramebufferModel.cpp",
      "src/model/framebuffer/YFramebufferModel.cpp"
    ],
    "message": "Early catch potential overflow issue #43\n\n`m_width` and `m_height` are of `int` type in the OpenEXR library. We\ncurrently keep the same types in our class but this may case issue\nwhen mapping 1D memory. In the most favorable case, they are\nmultiplied together (Y framebuffer). For RGB(A) case, the required\nmemory can also be 4 time larger. We check if resp. `m_width *\nm_height` and `4 * m_width * m_heigh` stay within the `int` higher\nlimit. Thanks to @GAP-dev for bringing this issue.\n\nThis commit also cleans a bit raw memory allocation in favor of\n`std::vector` container.",
    "before_after_code_files": [
      "src/model/framebuffer/FramebufferModel.cpp||src/model/framebuffer/FramebufferModel.cpp",
      "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h",
      "src/model/framebuffer/RGBFramebufferModel.cpp||src/model/framebuffer/RGBFramebufferModel.cpp",
      "src/model/framebuffer/YFramebufferModel.cpp||src/model/framebuffer/YFramebufferModel.cpp"
    ]
  },
  "patch_diff": {
    "src/model/framebuffer/FramebufferModel.cpp||src/model/framebuffer/FramebufferModel.cpp": [
      "File: src/model/framebuffer/FramebufferModel.cpp -> src/model/framebuffer/FramebufferModel.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: FramebufferModel::FramebufferModel(QObject* parent)",
      "41:   : QObject(parent)",
      "43:   , m_width(0)",
      "44:   , m_height(0)",
      "45:   , m_isImageLoaded(false)",
      "",
      "[Removed Lines]",
      "42:   , m_pixelBuffer(nullptr)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:     return m_dataWindow;",
      "60: }",
      "",
      "[Removed Lines]",
      "62: FramebufferModel::~FramebufferModel()",
      "63: {",
      "64:     delete[] m_pixelBuffer;",
      "65: }",
      "",
      "[Added Lines]",
      "61: FramebufferModel::~FramebufferModel() {}",
      "",
      "---------------"
    ],
    "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h": [
      "File: src/model/framebuffer/FramebufferModel.h -> src/model/framebuffer/FramebufferModel.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include <QObject>",
      "38: #include <QRect>",
      "39: #include <QVector>",
      "42: class FramebufferModel: public QObject",
      "43: {",
      "",
      "[Removed Lines]",
      "40: #include <array>",
      "",
      "[Added Lines]",
      "40: #include <vector>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:     void loadFailed(QString message);",
      "69:   protected:",
      "",
      "[Removed Lines]",
      "70:     float* m_pixelBuffer;",
      "71:     QImage m_image;",
      "",
      "[Added Lines]",
      "70:     std::vector<float> m_pixelBuffer;",
      "71:     QImage             m_image;",
      "",
      "---------------"
    ],
    "src/model/framebuffer/RGBFramebufferModel.cpp||src/model/framebuffer/RGBFramebufferModel.cpp": [
      "File: src/model/framebuffer/RGBFramebufferModel.cpp -> src/model/framebuffer/RGBFramebufferModel.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:             m_displayWindow",
      "82:               = QRect(dispW.min.x, dispW.min.y, dispW_width, dispW_height);",
      "86:             const Imf::ChromaticitiesAttribute* c",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:             const uint64_t partial_size",
      "91:               = (uint64_t)m_width * (uint64_t)m_height;",
      "93:             if (partial_size > 0x1FFFFFFF) {",
      "94:                 throw std::runtime_error(",
      "95:                   \"The total image size is too large. May be supported in a \"",
      "96:                   \"future revision.\");",
      "97:             }",
      "99:             m_pixelBuffer.resize(4 * m_width * m_height);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:                 chromaticities = c->value();",
      "94:             }",
      "99:             if (hasAlpha) {",
      "100:                 std::string      aLayer = m_parentLayer + \"A\";",
      "",
      "[Removed Lines]",
      "96:             m_pixelBuffer = new float[4 * m_width * m_height];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "191:                     Imf::FrameBuffer framebuffer;",
      "200:                     Imf::Slice ySlice = Imf::Slice::Make(",
      "201:                       Imf::PixelType::FLOAT,",
      "",
      "[Removed Lines]",
      "193:                     Imf::Rgba* buff1 = new Imf::Rgba[m_width * m_height];",
      "194:                     Imf::Rgba* buff2 = new Imf::Rgba[m_width * m_height];",
      "196:                     float* yBuffer  = new float[m_width * m_height];",
      "197:                     float* ryBuffer = new float[m_width / 2 * m_height / 2];",
      "198:                     float* byBuffer = new float[m_width / 2 * m_height / 2];",
      "",
      "[Added Lines]",
      "208:                     std::vector<Imf::Rgba> buff1(m_width * m_height);",
      "209:                     std::vector<Imf::Rgba> buff2(m_width * m_height);",
      "211:                     std::vector<float> yBuffer(m_width * m_height);",
      "212:                     std::vector<float> ryBuffer(m_width / 2 * m_height / 2);",
      "213:                     std::vector<float> byBuffer(m_width / 2 * m_height / 2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "335:                             m_pixelBuffer[4 * (y * m_width + x) + 2] = rgb.z;",
      "336:                         }",
      "337:                     }",
      "344:                 }",
      "346:                 break;",
      "",
      "[Removed Lines]",
      "339:                     delete[] yBuffer;",
      "340:                     delete[] ryBuffer;",
      "341:                     delete[] byBuffer;",
      "342:                     delete[] buff1;",
      "343:                     delete[] buff2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/model/framebuffer/YFramebufferModel.cpp||src/model/framebuffer/YFramebufferModel.cpp": [
      "File: src/model/framebuffer/YFramebufferModel.cpp -> src/model/framebuffer/YFramebufferModel.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:                   dispW_width / 2,",
      "91:                   dispW_height / 2);",
      "96:                 graySlice = Imf::Slice::Make(",
      "97:                   Imf::PixelType::FLOAT,",
      "99:                   datW,",
      "100:                   sizeof(float),",
      "101:                   m_width * sizeof(float),",
      "",
      "[Removed Lines]",
      "93:                 m_pixelBuffer = new float[m_width * m_height];",
      "98:                   m_pixelBuffer,",
      "",
      "[Added Lines]",
      "97:                 const uint64_t partial_size",
      "98:                   = (uint64_t)m_width * (uint64_t)m_height;",
      "100:                 if (partial_size > 0x7FFFFFFF) {",
      "101:                     throw std::runtime_error(",
      "102:                       \"The total image size is too large. May be supported in \"",
      "103:                       \"a future revision.\");",
      "104:                 }",
      "106:                 m_pixelBuffer.resize(m_width * m_height);",
      "111:                   m_pixelBuffer.data(),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:                 m_displayWindow",
      "113:                   = QRect(dispW.min.x, dispW.min.y, dispW_width, dispW_height);",
      "117:                 graySlice = Imf::Slice::Make(",
      "118:                   Imf::PixelType::FLOAT,",
      "120:                   datW);",
      "121:             }",
      "",
      "[Removed Lines]",
      "115:                 m_pixelBuffer = new float[m_width * m_height];",
      "119:                   m_pixelBuffer,",
      "",
      "[Added Lines]",
      "128:                 m_pixelBuffer.resize(m_width * m_height);",
      "132:                   m_pixelBuffer.data(),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70cc9412ef3c713f74dbd78761971e2a09bcb580",
      "candidate_info": {
        "commit_hash": "70cc9412ef3c713f74dbd78761971e2a09bcb580",
        "repo": "afichet/openexr-viewer",
        "commit_url": "https://github.com/afichet/openexr-viewer/commit/70cc9412ef3c713f74dbd78761971e2a09bcb580",
        "files": [
          "src/model/framebuffer/FramebufferModel.h"
        ],
        "message": "Adding a comment explaining the choice for int types instead of uint of a larger size",
        "before_after_code_files": [
          "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/afichet/openexr-viewer/pull/44"
        ],
        "olp_code_files": {
          "patch": [
            "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h"
          ],
          "candidate": [
            "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h"
          ]
        }
      },
      "candidate_diff": {
        "src/model/framebuffer/FramebufferModel.h||src/model/framebuffer/FramebufferModel.h": [
          "File: src/model/framebuffer/FramebufferModel.h -> src/model/framebuffer/FramebufferModel.h"
        ]
      }
    }
  ]
}