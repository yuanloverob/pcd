{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1f25f068f7100d80b936c439fbc860181b51387",
      "candidate_info": {
        "commit_hash": "b1f25f068f7100d80b936c439fbc860181b51387",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b1f25f068f7100d80b936c439fbc860181b51387",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Remove fat from CallCountLog, rename failingFree to countingFree",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: class CallCountLog {",
          "31: public:",
          "36:  unsigned int callCountFree;",
          "41:  }",
          "42: };",
          "48:  return NULL;",
          "49: }",
          "54:   size_t URI_UNUSED(nmemb), size_t URI_UNUSED(size)) {",
          "56:  return NULL;",
          "57: }",
          "62:   void * URI_UNUSED(ptr), size_t URI_UNUSED(size)) {",
          "64:  return NULL;",
          "65: }",
          "70:   void * URI_UNUSED(ptr), size_t URI_UNUSED(nmemb),",
          "71:   size_t URI_UNUSED(size)) {",
          "73:  return NULL;",
          "74: }",
          "79:  static_cast<CallCountLog *>(memory->userData)->callCountFree++;",
          "80:  free(ptr);",
          "81: }",
          "",
          "[Removed Lines]",
          "32:  unsigned int callCountMalloc;",
          "33:  unsigned int callCountCalloc;",
          "34:  unsigned int callCountRealloc;",
          "35:  unsigned int callCountReallocarray;",
          "38:  CallCountLog() : callCountMalloc(0), callCountCalloc(0),",
          "39:    callCountRealloc(0), callCountReallocarray(0), callCountFree(0) {",
          "46: static void * failingMalloc(UriMemoryManager * memory, size_t URI_UNUSED(size)) {",
          "47:  static_cast<CallCountLog *>(memory->userData)->callCountMalloc++;",
          "53: static void * failingCalloc(UriMemoryManager * memory,",
          "55:  static_cast<CallCountLog *>(memory->userData)->callCountCalloc++;",
          "61: static void * failingRealloc(UriMemoryManager * memory,",
          "63:  static_cast<CallCountLog *>(memory->userData)->callCountRealloc++;",
          "69: static void * failingReallocarray(UriMemoryManager * memory,",
          "72:  static_cast<CallCountLog *>(memory->userData)->callCountReallocarray++;",
          "78: static void failingFree(UriMemoryManager * memory, void * ptr) {",
          "",
          "[Added Lines]",
          "34:  CallCountLog() : callCountFree(0) {",
          "41: static void * failingMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "42:   size_t URI_UNUSED(size)) {",
          "48: static void * failingCalloc(UriMemoryManager * URI_UNUSED(memory),",
          "55: static void * failingRealloc(UriMemoryManager * URI_UNUSED(memory),",
          "62: static void * failingReallocarray(UriMemoryManager * URI_UNUSED(memory),",
          "70: static void countingFree(UriMemoryManager * memory, void * ptr) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:   this->calloc = failingCalloc,",
          "90:   this->realloc = failingRealloc,",
          "91:   this->reallocarray = failingReallocarray,",
          "94:   this->userData = new CallCountLog();",
          "",
          "[Removed Lines]",
          "92:   this->free = failingFree,",
          "",
          "[Added Lines]",
          "84:   this->free = countingFree,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf663d3f399b0da9613a6ac6cc4cce669da12208",
      "candidate_info": {
        "commit_hash": "bf663d3f399b0da9613a6ac6cc4cce669da12208",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bf663d3f399b0da9613a6ac6cc4cce669da12208",
        "files": [
          "include/uriparser/Uri.h",
          "include/uriparser/UriBase.h"
        ],
        "message": "include: Bump all 0.8.7 since markers to 0.9.0",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ],
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ]
      }
    },
    {
      "candidate_hash": "2b52b2b121f4fc0c7a504364066ceaee9f627b72",
      "candidate_info": {
        "commit_hash": "2b52b2b121f4fc0c7a504364066ceaee9f627b72",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2b52b2b121f4fc0c7a504364066ceaee9f627b72",
        "files": [
          "include/uriparser/UriBase.h"
        ],
        "message": "Promote Address Sanitizer with uriTestMemoryManager",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ]
      }
    },
    {
      "candidate_hash": "fdeea020dd16b6c394af4d941dfe28401e71ce9a",
      "candidate_info": {
        "commit_hash": "fdeea020dd16b6c394af4d941dfe28401e71ce9a",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/fdeea020dd16b6c394af4d941dfe28401e71ce9a",
        "files": [
          "configure.ac",
          "include/uriparser/UriBase.h",
          "src/UriMemory.c"
        ],
        "message": "Add calloc and reallocarray to memory manager",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h",
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: ])",
          "40: ## Option for URI_SIZEDOWN",
          "41: AC_ARG_ENABLE(sizedown, [",
          "42: ==============================================================================",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: ## Check for reallocarray",
          "41: AC_MSG_CHECKING(for reallocarray)",
          "42: AC_COMPILE_IFELSE([AC_LANG_SOURCE([",
          "44:     #include <stdlib.h>",
          "46:     int main() {",
          "47:         reallocarray(NULL, 0, 0);",
          "48:         return 0;",
          "49:     }",
          "50: ])],[",
          "51:     AC_DEFINE([HAVE_REALLOCARRAY], 1,",
          "52:         [Define to 1 if you have function reallocarray])",
          "53:     AC_MSG_RESULT(yes)",
          "54: ], [",
          "55:     AC_MSG_RESULT(no)",
          "56: ])",
          "",
          "---------------"
        ],
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: struct UriMemoryManagerStruct;",
          "158: typedef void * (*UriFuncMalloc)(struct UriMemoryManagerStruct *, size_t);",
          "159: typedef void * (*UriFuncRealloc)(struct UriMemoryManagerStruct *, void *, size_t);",
          "160: typedef void (*UriFuncFree)(struct UriMemoryManagerStruct *, void *);",
          "163: typedef struct UriMemoryManagerStruct {",
          "164:  UriFuncMalloc malloc;",
          "165:  UriFuncRealloc realloc;",
          "166:  UriFuncFree free;",
          "167:  void * userData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: typedef void * (*UriFuncCalloc)(struct UriMemoryManagerStruct *, size_t, size_t);",
          "161: typedef void * (*UriFuncReallocarray)(struct UriMemoryManagerStruct *, void *, size_t, size_t);",
          "167:  UriFuncCalloc calloc;",
          "169:  UriFuncReallocarray reallocarray;",
          "",
          "---------------"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #ifndef URI_DOXYGEN",
          "46: # include \"UriMemory.h\"",
          "47: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"../config.h\"",
          "47: #if HAVE_REALLOCARRAY",
          "48: # define _GNU_SOURCE",
          "49: #endif",
          "51: #include <errno.h>",
          "52: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: static void * uriDefaultRealloc(",
          "59:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "60:         void * ptr, size_t size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static void * uriDefaultCalloc(",
          "70:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "71:         size_t nmemb, size_t size) {",
          "72:     return calloc(nmemb, size);",
          "73: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66: static void uriDefaultFree(struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "67:         void * ptr) {",
          "68:     free(ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: static void * uriDefaultReallocarray(",
          "86:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "87:         void * ptr, size_t nmemb, size_t size) {",
          "88: #if HAVE_REALLOCARRAY",
          "89:     return reallocarray(ptr, nmemb, size);",
          "90: #else",
          "91:     const size_t total_size = nmemb * size;",
          "94:     if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "95:         errno = ENOMEM;",
          "96:         return NULL;",
          "97:     }",
          "99:     return realloc(ptr, total_size);",
          "100: #endif",
          "101: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:     uriDefaultMalloc,",
          "75:     uriDefaultRealloc,",
          "76:     uriDefaultFree,",
          "78: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     uriDefaultCalloc,",
          "116:     uriDefaultReallocarray,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ffb8e1fb8301a741941febe8340490d8d07e351",
      "candidate_info": {
        "commit_hash": "5ffb8e1fb8301a741941febe8340490d8d07e351",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/5ffb8e1fb8301a741941febe8340490d8d07e351",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "doc: Fix errorPos with ParseSingleUri*",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    }
  ]
}