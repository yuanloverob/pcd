{
  "cve_id": "CVE-2017-13030",
  "cve_desc": "The PIM parser in tcpdump before 4.9.2 has a buffer over-read in print-pim.c, several functions.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
  "patch_info": {
    "commit_hash": "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
    "files": [
      "print-pim.c",
      "tests/TESTLIST",
      "tests/heapoverflow-in_checksum.out",
      "tests/pim_header_asan.out",
      "tests/pim_header_asan.pcap"
    ],
    "message": "CVE-2017-13030/PIM: Redo bounds checks and add length checks.\n\nUse ND_TCHECK macros to do bounds checking, and add length checks before\nthe bounds checks.\n\nAdd a bounds check that the review process found was missing.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.\n\nUpdate one test output file to reflect the changes.",
    "before_after_code_files": [
      "print-pim.c||print-pim.c"
    ]
  },
  "patch_diff": {
    "print-pim.c||print-pim.c": [
      "File: print-pim.c -> print-pim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:   return;",
      "170:  }",
      "172:  ND_TCHECK2(bp[0], sizeof(struct in_addr));",
      "173:  if (ndo->ndo_vflag > 1)",
      "174:   ND_PRINT((ndo, \"\\n\"));",
      "175:  ND_PRINT((ndo, \" Upstream Nbr: %s\", ipaddr_string(ndo, bp)));",
      "177:  if (ndo->ndo_vflag > 1)",
      "178:   ND_PRINT((ndo, \"\\n\"));",
      "179:  ND_PRINT((ndo, \" Hold time: \"));",
      "181:  if (ndo->ndo_vflag < 2)",
      "182:   return;",
      "186:  ND_TCHECK2(bp[0], 4);",
      "187:  ngroups = bp[3];",
      "188:  bp += 4;",
      "",
      "[Removed Lines]",
      "176:  ND_TCHECK2(bp[6], 2);",
      "180:  unsigned_relts_print(ndo, EXTRACT_16BITS(&bp[6]));",
      "183:  bp += 8;",
      "184:  len -= 8;",
      "",
      "[Added Lines]",
      "172:  if (len < sizeof(struct in_addr))",
      "173:   goto trunc;",
      "178:  bp += 4;",
      "179:  len -= 4;",
      "180:  if (len < 4)",
      "181:   goto trunc;",
      "182:  ND_TCHECK2(bp[2], 2);",
      "186:  unsigned_relts_print(ndo, EXTRACT_16BITS(&bp[2]));",
      "189:  bp += 4;",
      "190:  len -= 4;",
      "192:  if (len < 4)",
      "193:   goto trunc;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:   ND_TCHECK2(bp[0], sizeof(struct in_addr));",
      "196:   ND_PRINT((ndo, \"\\n\\tGroup: %s\", ipaddr_string(ndo, bp)));",
      "203:   ND_PRINT((ndo, \" joined: %d pruned: %d\", njoin, nprune));",
      "206:   for (njp = 0; njp < (njoin + nprune); njp++) {",
      "207:    const char *type;",
      "",
      "[Removed Lines]",
      "197:   ND_TCHECK2(bp[4], sizeof(struct in_addr));",
      "198:   if (EXTRACT_32BITS(&bp[4]) != 0xffffffff)",
      "199:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[4])));",
      "200:   ND_TCHECK2(bp[8], 4);",
      "201:   njoin = EXTRACT_16BITS(&bp[8]);",
      "202:   nprune = EXTRACT_16BITS(&bp[10]);",
      "204:   bp += 12;",
      "205:   len -= 12;",
      "",
      "[Added Lines]",
      "203:   if (len < 4)",
      "204:    goto trunc;",
      "207:   bp += 4;",
      "208:   len -= 4;",
      "209:   if (len < 4)",
      "210:    goto trunc;",
      "211:   ND_TCHECK2(bp[0], sizeof(struct in_addr));",
      "212:   if (EXTRACT_32BITS(&bp[0]) != 0xffffffff)",
      "213:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[0])));",
      "214:   bp += 4;",
      "215:   len -= 4;",
      "216:   if (len < 4)",
      "217:    goto trunc;",
      "218:   ND_TCHECK2(bp[0], 4);",
      "219:   njoin = EXTRACT_16BITS(&bp[0]);",
      "220:   nprune = EXTRACT_16BITS(&bp[2]);",
      "222:   bp += 4;",
      "223:   len -= 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "210:     type = \"Join \";",
      "211:    else",
      "212:     type = \"Prune\";",
      "213:    ND_TCHECK2(bp[0], 6);",
      "214:    ND_PRINT((ndo, \"\\n\\t%s %s%s%s%s/%d\", type,",
      "215:        (bp[0] & 0x01) ? \"Sparse \" : \"Dense \",",
      "216:        (bp[1] & 0x80) ? \"WC \" : \"\",",
      "217:        (bp[1] & 0x40) ? \"RP \" : \"SPT \",",
      "219:    bp += 6;",
      "220:    len -= 6;",
      "221:   }",
      "",
      "[Removed Lines]",
      "218:    ipaddr_string(ndo, &bp[2]), bp[1] & 0x3f));",
      "",
      "[Added Lines]",
      "231:    if (len < 6)",
      "232:     goto trunc;",
      "238:        ipaddr_string(ndo, &bp[2]),",
      "239:        bp[1] & 0x3f));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "230: pimv1_print(netdissect_options *ndo,",
      "231:             register const u_char *bp, register u_int len)",
      "232: {",
      "234:  register u_char type;",
      "240:  ND_TCHECK(bp[1]);",
      "241:  type = bp[1];",
      "",
      "[Removed Lines]",
      "233:  register const u_char *ep;",
      "236:  ep = (const u_char *)ndo->ndo_snapend;",
      "237:  if (bp >= ep)",
      "238:   return;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "302:  case PIMV1_TYPE_JOIN_PRUNE:",
      "303:  case PIMV1_TYPE_GRAFT:",
      "304:  case PIMV1_TYPE_GRAFT_ACK:",
      "306:    pimv1_join_prune_print(ndo, &bp[8], len - 8);",
      "307:   break;",
      "308:  }",
      "309:  ND_TCHECK(bp[4]);",
      "",
      "[Removed Lines]",
      "305:   if (ndo->ndo_vflag)",
      "",
      "[Added Lines]",
      "321:   if (ndo->ndo_vflag) {",
      "322:    if (len < 8)",
      "323:     goto trunc;",
      "325:   }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "330:  int numrps;",
      "331:  int hold;",
      "333:  ND_TCHECK(bp[0]);",
      "334:  ND_PRINT((ndo, \" auto-rp \"));",
      "335:  type = bp[0];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "352:  if (len < 8)",
      "353:   goto trunc;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "377:   int nentries;",
      "378:   char s;",
      "380:   ND_TCHECK2(bp[0], 4);",
      "381:   ND_PRINT((ndo, \" RP %s\", ipaddr_string(ndo, bp)));",
      "384:   case 0: ND_PRINT((ndo, \" PIMv?\"));",
      "385:    break;",
      "386:   case 1: ND_PRINT((ndo, \" PIMv1\"));",
      "",
      "[Removed Lines]",
      "382:   ND_TCHECK(bp[4]);",
      "383:   switch (bp[4] & 0x3) {",
      "",
      "[Added Lines]",
      "401:   if (len < 4)",
      "402:    goto trunc;",
      "405:   bp += 4;",
      "406:   len -= 4;",
      "407:   if (len < 1)",
      "408:    goto trunc;",
      "409:   ND_TCHECK(bp[0]);",
      "410:   switch (bp[0] & 0x3) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "390:   case 3: ND_PRINT((ndo, \" PIMv1+2\"));",
      "391:    break;",
      "392:   }",
      "398:   s = ' ';",
      "399:   for (; nentries; nentries--) {",
      "400:    ND_TCHECK2(bp[0], 6);",
      "401:    ND_PRINT((ndo, \"%c%s%s/%d\", s, bp[0] & 1 ? \"!\" : \"\",",
      "402:              ipaddr_string(ndo, &bp[2]), bp[1]));",
      "",
      "[Removed Lines]",
      "393:   if (bp[4] & 0xfc)",
      "394:    ND_PRINT((ndo, \" [rsvd=0x%02x]\", bp[4] & 0xfc));",
      "395:   ND_TCHECK(bp[5]);",
      "396:   nentries = bp[5];",
      "397:   bp += 6; len -= 6;",
      "",
      "[Added Lines]",
      "420:   if (bp[0] & 0xfc)",
      "421:    ND_PRINT((ndo, \" [rsvd=0x%02x]\", bp[0] & 0xfc));",
      "422:   bp += 1;",
      "423:   len -= 1;",
      "424:   if (len < 1)",
      "425:    goto trunc;",
      "426:   ND_TCHECK(bp[0]);",
      "427:   nentries = bp[0];",
      "428:   bp += 1;",
      "429:   len -= 1;",
      "432:    if (len < 6)",
      "433:     goto trunc;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "421: pim_print(netdissect_options *ndo,",
      "422:           register const u_char *bp, register u_int len, const u_char *bp2)",
      "423: {",
      "425:  register const struct pim *pim = (const struct pim *)bp;",
      "431:  ND_TCHECK(pim->pim_rsv);",
      "432: #endif",
      "434:  switch (PIM_VER(pim->pim_typever)) {",
      "435:  case 2:",
      "436:   if (!ndo->ndo_vflag) {",
      "",
      "[Removed Lines]",
      "424:  register const u_char *ep;",
      "427:  ep = (const u_char *)ndo->ndo_snapend;",
      "428:  if (bp >= ep)",
      "429:   return;",
      "",
      "[Added Lines]",
      "464:  ND_TCHECK(pim->pim_typever);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "454:   break;",
      "455:  }",
      "456:  return;",
      "457: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "489: trunc:",
      "490:  ND_PRINT((ndo, \"[|pim]\"));",
      "491:  return;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "501: enum pimv2_addrtype {",
      "502:  pimv2_unicast, pimv2_group, pimv2_source",
      "503: };",
      "",
      "[Removed Lines]",
      "499: static int pimv2_addr_len;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "525: static int",
      "526: pimv2_addr_print(netdissect_options *ndo,",
      "528: {",
      "529:  int af;",
      "535:   ND_TCHECK(bp[1]);",
      "536:   switch (bp[0]) {",
      "537:   case 1:",
      "538:    af = AF_INET;",
      "540:    break;",
      "541:   case 2:",
      "542:    af = AF_INET6;",
      "544:    break;",
      "545:   default:",
      "546:    return -1;",
      "",
      "[Removed Lines]",
      "527:                  const u_char *bp, enum pimv2_addrtype at, int silent)",
      "530:  int len, hdrlen;",
      "532:  ND_TCHECK(bp[0]);",
      "534:  if (pimv2_addr_len == 0) {",
      "539:    len = sizeof(struct in_addr);",
      "543:    len = sizeof(struct in6_addr);",
      "",
      "[Added Lines]",
      "560:                  const u_char *bp, u_int len, enum pimv2_addrtype at,",
      "561:                  u_int addr_len, int silent)",
      "564:  int hdrlen;",
      "566:  if (addr_len == 0) {",
      "567:   if (len < 2)",
      "568:    goto trunc;",
      "573:    addr_len = (u_int)sizeof(struct in_addr);",
      "577:    addr_len = (u_int)sizeof(struct in6_addr);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "549:    return -1;",
      "550:   hdrlen = 2;",
      "551:  } else {",
      "553:   case sizeof(struct in_addr):",
      "554:    af = AF_INET;",
      "555:    break;",
      "",
      "[Removed Lines]",
      "552:   switch (pimv2_addr_len) {",
      "",
      "[Added Lines]",
      "586:   switch (addr_len) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "560:    return -1;",
      "561:    break;",
      "562:   }",
      "564:   hdrlen = 0;",
      "565:  }",
      "567:  bp += hdrlen;",
      "568:  switch (at) {",
      "569:  case pimv2_unicast:",
      "571:   if (af == AF_INET) {",
      "572:    if (!silent)",
      "573:     ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, bp)));",
      "",
      "[Removed Lines]",
      "563:   len = pimv2_addr_len;",
      "570:   ND_TCHECK2(bp[0], len);",
      "",
      "[Added Lines]",
      "601:  len -= hdrlen;",
      "604:   if (len < addr_len)",
      "605:    goto trunc;",
      "606:   ND_TCHECK2(bp[0], addr_len);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "576:    if (!silent)",
      "577:     ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, bp)));",
      "578:   }",
      "580:  case pimv2_group:",
      "581:  case pimv2_source:",
      "583:   if (af == AF_INET) {",
      "584:    if (!silent) {",
      "585:     ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, bp + 2)));",
      "",
      "[Removed Lines]",
      "579:   return hdrlen + len;",
      "582:   ND_TCHECK2(bp[0], len + 2);",
      "",
      "[Added Lines]",
      "615:   return hdrlen + addr_len;",
      "618:   if (len < addr_len + 2)",
      "619:    goto trunc;",
      "620:   ND_TCHECK2(bp[0], addr_len + 2);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "608:     ND_PRINT((ndo, \")\"));",
      "609:    }",
      "610:   }",
      "612:  default:",
      "613:   return -1;",
      "614:  }",
      "",
      "[Removed Lines]",
      "611:   return hdrlen + 2 + len;",
      "",
      "[Added Lines]",
      "649:   return hdrlen + 2 + addr_len;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "660:  register const struct pim *pim = (const struct pim *)bp;",
      "661:  int advance;",
      "662:  enum checksum_status cksum_status;",
      "664:  ep = (const u_char *)ndo->ndo_snapend;",
      "665:  if (bp >= ep)",
      "666:   return;",
      "667:  if (ep > bp + len)",
      "668:   ep = bp + len;",
      "669:  ND_TCHECK(pim->pim_rsv);",
      "670:  pimv2_addr_len = pim->pim_rsv;",
      "671:  if (pimv2_addr_len != 0)",
      "672:   ND_PRINT((ndo, \", RFC2117-encoding\"));",
      "674:  ND_PRINT((ndo, \", cksum 0x%04x \", EXTRACT_16BITS(&pim->pim_cksum)));",
      "675:  if (EXTRACT_16BITS(&pim->pim_cksum) == 0) {",
      "676:   ND_PRINT((ndo, \"(unverified)\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "701:  int pimv2_addr_len;",
      "708:  if (len < 2)",
      "709:   goto trunc;",
      "715:  if (len < 4)",
      "716:   goto trunc;",
      "717:  ND_TCHECK(pim->pim_cksum);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "711:    break;",
      "712:   }",
      "713:  }",
      "715:  switch (PIM_TYPE(pim->pim_typever)) {",
      "716:  case PIMV2_TYPE_HELLO:",
      "717:      {",
      "718:   uint16_t otype, olen;",
      "721:    ND_TCHECK2(bp[0], 4);",
      "722:    otype = EXTRACT_16BITS(&bp[0]);",
      "723:    olen = EXTRACT_16BITS(&bp[2]);",
      "725:    ND_PRINT((ndo, \"\\n\\t  %s Option (%u), length %u, Value: \",",
      "726:              tok2str(pimv2_hello_option_values, \"Unknown\", otype),",
      "727:              otype,",
      "728:              olen));",
      "729:    bp += 4;",
      "731:    switch (otype) {",
      "732:    case PIMV2_HELLO_OPTION_HOLDTIME:",
      "733:     if (olen != 2) {",
      "",
      "[Removed Lines]",
      "719:   bp += 4;",
      "720:   while (bp < ep) {",
      "724:    ND_TCHECK2(bp[0], 4 + olen);",
      "",
      "[Added Lines]",
      "758:  bp += 4;",
      "759:  len -= 4;",
      "765:   while (len > 0) {",
      "766:    if (len < 4)",
      "767:     goto trunc;",
      "776:    len -= 4;",
      "778:    if (len < olen)",
      "779:     goto trunc;",
      "780:    ND_TCHECK2(bp[0], olen);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "797:    case PIMV2_HELLO_OPTION_ADDRESS_LIST:",
      "798:     if (ndo->ndo_vflag > 1) {",
      "799:      const u_char *ptr = bp;",
      "800:      while (ptr < (bp+olen)) {",
      "801:       ND_PRINT((ndo, \"\\n\\t    \"));",
      "807:       ptr += advance;",
      "808:      }",
      "809:     }",
      "810:     break;",
      "",
      "[Removed Lines]",
      "802:       advance = pimv2_addr_print(ndo, ptr, pimv2_unicast, 0);",
      "803:       if (advance < 0) {",
      "804:        ND_PRINT((ndo, \"...\"));",
      "805:        break;",
      "806:       }",
      "",
      "[Added Lines]",
      "850:      u_int plen = len;",
      "853:       advance = pimv2_addr_print(ndo, ptr, plen, pimv2_unicast, pimv2_addr_len, 0);",
      "854:       if (advance < 0)",
      "855:        goto trunc;",
      "857:       plen -= advance;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "817:    if (ndo->ndo_vflag> 1)",
      "818:     print_unknown_data(ndo, bp, \"\\n\\t    \", olen);",
      "819:    bp += olen;",
      "820:   }",
      "821:   break;",
      "822:      }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "870:    len -= olen;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "825:  {",
      "826:   const struct ip *ip;",
      "830:   ND_PRINT((ndo, \", Flags [ %s ]\\n\\t\",",
      "831:             tok2str(pimv2_register_flag_values,",
      "832:             \"none\",",
      "837:   ip = (const struct ip *)bp;",
      "838:   switch (IP_V(ip)) {",
      "840:    ND_PRINT((ndo, \"IP-Null-header %s > %s\",",
      "841:              ipaddr_string(ndo, &ip->ip_src),",
      "842:              ipaddr_string(ndo, &ip->ip_dst)));",
      "",
      "[Removed Lines]",
      "828:   ND_TCHECK2(*(bp + 4), PIMV2_REGISTER_FLAG_LEN);",
      "833:             EXTRACT_32BITS(bp+4))));",
      "835:   bp += 8; len -= 8;",
      "",
      "[Added Lines]",
      "879:   if (len < 4)",
      "880:    goto trunc;",
      "881:   ND_TCHECK2(*bp, PIMV2_REGISTER_FLAG_LEN);",
      "886:             EXTRACT_32BITS(bp))));",
      "888:   bp += 4; len -= 4;",
      "890:   if (len == 0)",
      "891:    goto trunc;",
      "893:   ND_TCHECK(ip->ip_vhl);",
      "896:    ND_TCHECK(ip->ip_dst);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "858:  }",
      "860:  case PIMV2_TYPE_REGISTER_STOP:",
      "864:   ND_PRINT((ndo, \" group=\"));",
      "869:   bp += advance; len -= advance;",
      "872:   ND_PRINT((ndo, \" source=\"));",
      "877:   bp += advance; len -= advance;",
      "878:   break;",
      "",
      "[Removed Lines]",
      "861:   bp += 4; len -= 4;",
      "862:   if (bp >= ep)",
      "863:    break;",
      "865:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {",
      "866:    ND_PRINT((ndo, \"...\"));",
      "867:    break;",
      "868:   }",
      "870:   if (bp >= ep)",
      "871:    break;",
      "873:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "874:    ND_PRINT((ndo, \"...\"));",
      "875:    break;",
      "876:   }",
      "",
      "[Added Lines]",
      "919:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "920:    goto trunc;",
      "923:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "924:    goto trunc;",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "924:   uint16_t nprune;",
      "925:   int i, j;",
      "931:    ND_PRINT((ndo, \", upstream-neighbor: \"));",
      "936:    bp += advance; len -= advance;",
      "937:   }",
      "940:   ngroup = bp[1];",
      "941:   holdtime = EXTRACT_16BITS(&bp[2]);",
      "942:   ND_PRINT((ndo, \"\\n\\t  %u group(s)\", ngroup));",
      "",
      "[Removed Lines]",
      "927:   bp += 4; len -= 4;",
      "929:    if (bp >= ep)",
      "930:     break;",
      "932:    if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "933:     ND_PRINT((ndo, \"...\"));",
      "934:     break;",
      "935:    }",
      "938:   if (bp + 4 > ep)",
      "939:    break;",
      "",
      "[Added Lines]",
      "977:    if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "978:     goto trunc;",
      "981:   if (len < 4)",
      "982:    goto trunc;",
      "983:   ND_TCHECK2(*bp, 4);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "949:   }",
      "950:   bp += 4; len -= 4;",
      "951:   for (i = 0; i < ngroup; i++) {",
      "954:    ND_PRINT((ndo, \"\\n\\t    group #%u: \", i+1));",
      "959:    bp += advance; len -= advance;",
      "964:    njoin = EXTRACT_16BITS(&bp[0]);",
      "965:    nprune = EXTRACT_16BITS(&bp[2]);",
      "966:    ND_PRINT((ndo, \", joined sources: %u, pruned sources: %u\", njoin, nprune));",
      "967:    bp += 4; len -= 4;",
      "968:    for (j = 0; j < njoin; j++) {",
      "969:     ND_PRINT((ndo, \"\\n\\t      joined source #%u: \", j+1));",
      "974:     bp += advance; len -= advance;",
      "975:    }",
      "976:    for (j = 0; j < nprune; j++) {",
      "977:     ND_PRINT((ndo, \"\\n\\t      pruned source #%u: \", j+1));",
      "982:     bp += advance; len -= advance;",
      "983:    }",
      "984:   }",
      "986:   break;",
      "987:      }",
      "989:  case PIMV2_TYPE_BOOTSTRAP:",
      "990:  {",
      "991:   int i, j, frpcnt;",
      "996:   ND_PRINT((ndo, \" tag=%x\", EXTRACT_16BITS(bp)));",
      "999:   ND_PRINT((ndo, \" hashmlen=%d\", bp[0]));",
      "1001:   ND_PRINT((ndo, \" BSRprio=%d\", bp[1]));",
      "1002:   bp += 2;",
      "1006:   ND_PRINT((ndo, \" BSR=\"));",
      "1011:   bp += advance;",
      "1013:   for (i = 0; bp < ep; i++) {",
      "1015:    ND_PRINT((ndo, \" (group%d: \", i));",
      "1021:    bp += advance;",
      "1028:    ND_PRINT((ndo, \" RPcnt=%d\", bp[0]));",
      "1033:    ND_PRINT((ndo, \" FRPcnt=%d\", frpcnt = bp[1]));",
      "1034:    bp += 4;",
      "1036:    for (j = 0; j < frpcnt && bp < ep; j++) {",
      "1038:     ND_PRINT((ndo, \" RP%d=\", j));",
      "1040:         pimv2_unicast,",
      "1045:     bp += advance;",
      "1051:     ND_PRINT((ndo, \",holdtime=\"));",
      "1052:     unsigned_relts_print(ndo, EXTRACT_16BITS(bp));",
      "1057:     ND_PRINT((ndo, \",prio=%d\", bp[2]));",
      "1058:     bp += 4;",
      "1059:    }",
      "1060:    ND_PRINT((ndo, \")\"));",
      "1061:   }",
      "1063:   break;",
      "1064:  }",
      "1065:  case PIMV2_TYPE_ASSERT:",
      "1069:   ND_PRINT((ndo, \" group=\"));",
      "1074:   bp += advance; len -= advance;",
      "1077:   ND_PRINT((ndo, \" src=\"));",
      "1082:   bp += advance; len -= advance;",
      "1085:   if (bp[0] & 0x80)",
      "1086:    ND_PRINT((ndo, \" RPT\"));",
      "1087:   ND_PRINT((ndo, \" pref=%u\", EXTRACT_32BITS(&bp[0]) & 0x7fffffff));",
      "",
      "[Removed Lines]",
      "952:    if (bp >= ep)",
      "953:     goto jp_done;",
      "955:    if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {",
      "956:     ND_PRINT((ndo, \"...)\"));",
      "957:     goto jp_done;",
      "958:    }",
      "960:    if (bp + 4 > ep) {",
      "961:     ND_PRINT((ndo, \"...)\"));",
      "962:     goto jp_done;",
      "963:    }",
      "970:     if ((advance = pimv2_addr_print(ndo, bp, pimv2_source, 0)) < 0) {",
      "971:      ND_PRINT((ndo, \"...)\"));",
      "972:      goto jp_done;",
      "973:     }",
      "978:     if ((advance = pimv2_addr_print(ndo, bp, pimv2_source, 0)) < 0) {",
      "979:      ND_PRINT((ndo, \"...)\"));",
      "980:      goto jp_done;",
      "981:     }",
      "985:  jp_done:",
      "992:   bp += 4;",
      "995:   if (bp + sizeof(uint16_t) >= ep) break;",
      "997:   bp += sizeof(uint16_t);",
      "998:   if (bp >= ep) break;",
      "1000:   if (bp + 1 >= ep) break;",
      "1005:   if (bp >= ep) break;",
      "1007:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "1008:    ND_PRINT((ndo, \"...\"));",
      "1009:    break;",
      "1010:   }",
      "1016:    if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0))",
      "1017:        < 0) {",
      "1018:     ND_PRINT((ndo, \"...)\"));",
      "1019:     goto bs_done;",
      "1020:    }",
      "1024:    if (bp >= ep) {",
      "1025:     ND_PRINT((ndo, \"...)\"));",
      "1026:     goto bs_done;",
      "1027:    }",
      "1029:    if (bp + 1 >= ep) {",
      "1030:     ND_PRINT((ndo, \"...)\"));",
      "1031:     goto bs_done;",
      "1032:    }",
      "1039:     if ((advance = pimv2_addr_print(ndo, bp,",
      "1041:         0)) < 0) {",
      "1042:      ND_PRINT((ndo, \"...)\"));",
      "1043:      goto bs_done;",
      "1044:     }",
      "1047:     if (bp + 1 >= ep) {",
      "1048:      ND_PRINT((ndo, \"...)\"));",
      "1049:      goto bs_done;",
      "1050:     }",
      "1053:     if (bp + 2 >= ep) {",
      "1054:      ND_PRINT((ndo, \"...)\"));",
      "1055:      goto bs_done;",
      "1056:     }",
      "1062:     bs_done:",
      "1066:   bp += 4; len -= 4;",
      "1067:   if (bp >= ep)",
      "1068:    break;",
      "1070:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {",
      "1071:    ND_PRINT((ndo, \"...\"));",
      "1072:    break;",
      "1073:   }",
      "1075:   if (bp >= ep)",
      "1076:    break;",
      "1078:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "1079:    ND_PRINT((ndo, \"...\"));",
      "1080:    break;",
      "1081:   }",
      "1083:   if (bp + 8 > ep)",
      "1084:    break;",
      "",
      "[Added Lines]",
      "997:    if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "998:     goto trunc;",
      "1000:    if (len < 4)",
      "1001:     goto trunc;",
      "1002:    ND_TCHECK2(*bp, 4);",
      "1009:     if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_source, pimv2_addr_len, 0)) < 0)",
      "1010:      goto trunc;",
      "1015:     if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_source, pimv2_addr_len, 0)) < 0)",
      "1016:      goto trunc;",
      "1028:   if (len < 2)",
      "1029:    goto trunc;",
      "1030:   ND_TCHECK_16BITS(bp);",
      "1032:   bp += 2;",
      "1033:   len -= 2;",
      "1034:   if (len < 1)",
      "1035:    goto trunc;",
      "1036:   ND_TCHECK(bp[0]);",
      "1038:   if (len < 2)",
      "1039:    goto trunc;",
      "1040:   ND_TCHECK(bp[2]);",
      "1043:   len -= 2;",
      "1047:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "1048:    goto trunc;",
      "1050:   len -= advance;",
      "1055:    if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "1056:     goto trunc;",
      "1058:    len -= advance;",
      "1061:    if (len < 1)",
      "1062:     goto trunc;",
      "1063:    ND_TCHECK(bp[0]);",
      "1065:    if (len < 2)",
      "1066:     goto trunc;",
      "1067:    ND_TCHECK(bp[1]);",
      "1069:    if (len < 4)",
      "1070:     goto trunc;",
      "1072:    len -= 4;",
      "1077:     if ((advance = pimv2_addr_print(ndo, bp, len,",
      "1079:         pimv2_addr_len,",
      "1080:         0)) < 0)",
      "1081:      goto trunc;",
      "1083:     len -= advance;",
      "1085:     if (len < 2)",
      "1086:      goto trunc;",
      "1087:     ND_TCHECK_16BITS(bp);",
      "1090:     if (len < 3)",
      "1091:      goto trunc;",
      "1092:     ND_TCHECK(bp[2]);",
      "1094:     if (len < 4)",
      "1095:      goto trunc;",
      "1097:     len -= 4;",
      "1105:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "1106:    goto trunc;",
      "1109:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "1110:    goto trunc;",
      "1112:   if (len < 8)",
      "1113:    goto trunc;",
      "1114:   ND_TCHECK2(*bp, 8);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1091:  case PIMV2_TYPE_CANDIDATE_RP:",
      "1092:  {",
      "1093:   int i, pfxcnt;",
      "1098:   ND_PRINT((ndo, \" prefix-cnt=%d\", bp[0]));",
      "1099:   pfxcnt = bp[0];",
      "1101:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
      "1103:   ND_PRINT((ndo, \" holdtime=\"));",
      "1104:   unsigned_relts_print(ndo, EXTRACT_16BITS(&bp[2]));",
      "1105:   bp += 4;",
      "1109:   ND_PRINT((ndo, \" RP=\"));",
      "1114:   bp += advance;",
      "1117:   for (i = 0; i < pfxcnt && bp < ep; i++) {",
      "1118:    ND_PRINT((ndo, \" Group%d=\", i));",
      "1124:    bp += advance;",
      "1125:   }",
      "1126:   break;",
      "1127:  }",
      "1129:  case PIMV2_TYPE_PRUNE_REFRESH:",
      "1130:   ND_PRINT((ndo, \" src=\"));",
      "1135:   bp += advance;",
      "1136:   ND_PRINT((ndo, \" grp=\"));",
      "1141:   bp += advance;",
      "1142:   ND_PRINT((ndo, \" forwarder=\"));",
      "1147:   bp += advance;",
      "1149:   ND_PRINT((ndo, \" TUNR \"));",
      "1150:   unsigned_relts_print(ndo, EXTRACT_16BITS(bp));",
      "1151:   break;",
      "",
      "[Removed Lines]",
      "1094:   bp += 4;",
      "1097:   if (bp >= ep) break;",
      "1100:   if (bp + 1 >= ep) break;",
      "1102:   if (bp + 3 >= ep) break;",
      "1108:   if (bp >= ep) break;",
      "1110:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "1111:    ND_PRINT((ndo, \"...\"));",
      "1112:    break;",
      "1113:   }",
      "1119:    if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0))",
      "1120:        < 0) {",
      "1121:     ND_PRINT((ndo, \"...\"));",
      "1122:     break;",
      "1123:    }",
      "1131:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "1132:    ND_PRINT((ndo, \"...\"));",
      "1133:    break;",
      "1134:   }",
      "1137:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {",
      "1138:    ND_PRINT((ndo, \"...\"));",
      "1139:    break;",
      "1140:   }",
      "1143:   if ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {",
      "1144:    ND_PRINT((ndo, \"...\"));",
      "1145:    break;",
      "1146:   }",
      "1148:   ND_TCHECK2(bp[0], 2);",
      "",
      "[Added Lines]",
      "1126:   if (len < 1)",
      "1127:    goto trunc;",
      "1128:   ND_TCHECK(bp[0]);",
      "1131:   if (len < 2)",
      "1132:    goto trunc;",
      "1133:   ND_TCHECK(bp[1]);",
      "1135:   if (len < 4)",
      "1136:    goto trunc;",
      "1137:   ND_TCHECK_16BITS(&bp[2]);",
      "1141:   len -= 4;",
      "1145:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "1146:    goto trunc;",
      "1148:   len -= advance;",
      "1153:    if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "1154:     goto trunc;",
      "1156:    len -= advance;",
      "1163:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "1164:    goto trunc;",
      "1166:   len -= advance;",
      "1168:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)",
      "1169:    goto trunc;",
      "1171:   len -= advance;",
      "1173:   if ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)",
      "1174:    goto trunc;",
      "1176:   len -= advance;",
      "1177:   if (len < 2)",
      "1178:    goto trunc;",
      "1179:   ND_TCHECK_16BITS(bp);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "575188b5bf4fc1c26a2766319fcb7ca57d393868",
      "candidate_info": {
        "commit_hash": "575188b5bf4fc1c26a2766319fcb7ca57d393868",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/575188b5bf4fc1c26a2766319fcb7ca57d393868",
        "files": [
          "print-dhcp6.c",
          "print-hncp.c",
          "print-icmp6.c",
          "print-igmp.c",
          "print-ip.c",
          "print-ip6opts.c",
          "print-mobility.c",
          "print-pim.c"
        ],
        "message": "Use pointer expressions like in most similar cases",
        "before_after_code_files": [
          "print-dhcp6.c||print-dhcp6.c",
          "print-hncp.c||print-hncp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-igmp.c||print-igmp.c",
          "print-ip.c||print-ip.c",
          "print-ip6opts.c||print-ip6opts.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pim.c||print-pim.c"
          ],
          "candidate": [
            "print-pim.c||print-pim.c"
          ]
        }
      },
      "candidate_diff": {
        "print-dhcp6.c||print-dhcp6.c": [
          "File: print-dhcp6.c -> print-dhcp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     break;",
          "371:    }",
          "372:    tp = (const u_char *)(dh6o + 1);",
          "374:    ND_PRINT((ndo, \" pltime:%u vltime:%u\",",
          "375:        EXTRACT_BE_U_4(tp + 16),",
          "376:        EXTRACT_BE_U_4(tp + 20)));",
          "",
          "[Removed Lines]",
          "373:    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, &tp[0])));",
          "",
          "[Added Lines]",
          "373:    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, tp)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:    }",
          "561:    tp = (const u_char *)(dh6o + 1);",
          "562:    for (i = 0; i < optlen; i += 16)",
          "564:    ND_PRINT((ndo, \")\"));",
          "565:    break;",
          "566:   case DH6OPT_SIP_SERVER_D:",
          "",
          "[Removed Lines]",
          "563:     ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, &tp[i])));",
          "",
          "[Added Lines]",
          "563:     ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, tp + i)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "617:     break;",
          "618:    }",
          "619:    tp = (const u_char *)(dh6o + 1);",
          "621:    ND_PRINT((ndo, \" pltime:%u vltime:%u\",",
          "622:        EXTRACT_BE_U_4(tp),",
          "623:        EXTRACT_BE_U_4(tp + 4)));",
          "",
          "[Removed Lines]",
          "620:    ND_PRINT((ndo, \" %s/%d\", ip6addr_string(ndo, &tp[9]), tp[8]));",
          "",
          "[Added Lines]",
          "620:    ND_PRINT((ndo, \" %s/%d\", ip6addr_string(ndo, tp + 9), tp[8]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "668:     ND_PRINT((ndo, \" type_%u\", dh6_lq_query_type));",
          "669:     break;",
          "670:    }",
          "672:    if (optlen > 17) {",
          "674:     dhcp6opt_print(ndo, tp + 17, tp + optlen);",
          "",
          "[Removed Lines]",
          "671:    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, &tp[1])));",
          "",
          "[Added Lines]",
          "671:    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, tp + 1)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "689:     break;",
          "690:    }",
          "691:    tp = (const u_char *)(dh6o + 1);",
          "",
          "[Removed Lines]",
          "692:    ND_PRINT((ndo, \" %s \", ip6addr_string(ndo, &tp[0])));",
          "",
          "[Added Lines]",
          "692:    ND_PRINT((ndo, \" %s \", ip6addr_string(ndo, tp)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "718:       ND_PRINT((ndo, \" ?\"));",
          "719:       break;",
          "720:      }",
          "722:      break;",
          "723:     case DH6OPT_NTP_SUBOPTION_SRV_FQDN:",
          "724:      ND_PRINT((ndo, \" \"));",
          "",
          "[Removed Lines]",
          "721:      ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, &tp[0])));",
          "",
          "[Added Lines]",
          "721:      ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, tp)));",
          "",
          "---------------"
        ],
        "print-hncp.c||print-hncp.c": [
          "File: print-hncp.c -> print-hncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     char buf[sizeof(\"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx::/128\")];",
          "209:     if (prefix[0] >= 96 && max_length >= IPV4_MAPPED_HEADING_LEN + 1 &&",
          "211:         struct in_addr addr;",
          "212:         u_int plen;",
          "",
          "[Removed Lines]",
          "210:         is_ipv4_mapped_address(&prefix[1])) {",
          "",
          "[Added Lines]",
          "210:         is_ipv4_mapped_address(prefix + 1)) {",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1430:                     return;",
          "1431:      }",
          "1432:             ND_TCHECK2(bp[group + 4], sizeof(struct in6_addr));",
          "1434:      ND_PRINT((ndo,\" %s\", tok2str(mldv2report2str, \" [v2-report-#%d]\",",
          "1435:                                          EXTRACT_U_1(bp + group))));",
          "1436:             nsrcs = (bp[group + 2] << 8) + bp[group + 3];",
          "",
          "[Removed Lines]",
          "1433:             ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, &bp[group + 4])));",
          "",
          "[Added Lines]",
          "1433:             ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1447:                 for (j = 0; j < nsrcs; j++) {",
          "1448:                     ND_TCHECK2(bp[group + 20 + j * sizeof(struct in6_addr)],",
          "1449:                             sizeof(struct in6_addr));",
          "1451:   }",
          "1452:                 ND_PRINT((ndo,\" }\"));",
          "1453:             }",
          "",
          "[Removed Lines]",
          "1450:       ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, &bp[group + 20 + j * sizeof(struct in6_addr)])));",
          "",
          "[Added Lines]",
          "1450:       ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(struct in6_addr)))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1487:             ND_PRINT((ndo,\" [max resp delay=%d]\", mrt));",
          "1488:     }",
          "1489:     ND_TCHECK2(bp[8], sizeof(struct in6_addr));",
          "1492:     if (ndo->ndo_vflag) {",
          "1493:         ND_TCHECK(bp[25]);",
          "",
          "[Removed Lines]",
          "1490:     ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, &bp[8])));",
          "",
          "[Added Lines]",
          "1490:     ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + 8)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1515:      for (i = 0; i < nsrcs; i++) {",
          "1516:   ND_TCHECK2(bp[28 + i * sizeof(struct in6_addr)],",
          "1517:                         sizeof(struct in6_addr));",
          "1519:      }",
          "1520:      ND_PRINT((ndo,\" }\"));",
          "1521:  } else",
          "",
          "[Removed Lines]",
          "1518:   ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, &bp[28 + i * sizeof(struct in6_addr)])));",
          "",
          "[Added Lines]",
          "1518:   ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(struct in6_addr)))));",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   return;",
          "177:      }",
          "178:      ND_TCHECK_4(bp + (group + 4));",
          "180:      ND_PRINT((ndo, \" %s\", tok2str(igmpv3report2str, \" [v3-report-#%d]\",",
          "181:         EXTRACT_U_1(bp + group))));",
          "182:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "",
          "[Removed Lines]",
          "179:             ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[group+4])));",
          "",
          "[Added Lines]",
          "179:             ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, bp + group + 4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:                 ND_PRINT((ndo, \" {\"));",
          "193:                 for (j=0; j<nsrcs; j++) {",
          "194:       ND_TCHECK_4(bp + (group + 8 + (j << 2)));",
          "196:   }",
          "197:                 ND_PRINT((ndo, \" }\"));",
          "198:             }",
          "",
          "[Removed Lines]",
          "195:       ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, &bp[group+8+(j<<2)])));",
          "",
          "[Added Lines]",
          "195:       ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, bp + group + 8 + (j << 2))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:     ND_TCHECK_4(bp + 4);",
          "241:     if (EXTRACT_BE_U_4(bp + 4) == 0)",
          "242:  return;",
          "244:     ND_TCHECK_2(bp + 10);",
          "245:     nsrcs = EXTRACT_BE_U_2(bp + 10);",
          "246:     if (nsrcs > 0) {",
          "",
          "[Removed Lines]",
          "243:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[4])));",
          "",
          "[Added Lines]",
          "243:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, bp + 4)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:      ND_PRINT((ndo, \" {\"));",
          "251:      for (i=0; i<nsrcs; i++) {",
          "252:   ND_TCHECK_4(bp + (12 + (i << 2)));",
          "254:      }",
          "255:      ND_PRINT((ndo, \" }\"));",
          "256:  } else",
          "",
          "[Removed Lines]",
          "253:   ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, &bp[12+(i<<2)])));",
          "",
          "[Added Lines]",
          "253:   ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, bp + 12 + (i << 2))));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:   ND_PRINT((ndo, \" v1\"));",
          "290:             ND_TCHECK_4(bp + 4);",
          "291:      if (EXTRACT_BE_U_4(bp + 4))",
          "293:             if (len != 8)",
          "294:                 ND_PRINT((ndo, \" [len %d]\", len));",
          "295:  }",
          "296:         break;",
          "297:     case 0x12:",
          "298:         ND_TCHECK_4(bp + 4);",
          "300:         if (len != 8)",
          "301:             ND_PRINT((ndo, \" [len %d]\", len));",
          "302:         break;",
          "303:     case 0x16:",
          "304:         ND_TCHECK_4(bp + 4);",
          "306:         break;",
          "307:     case 0x22:",
          "308:         ND_PRINT((ndo, \"igmp v3 report\"));",
          "",
          "[Removed Lines]",
          "292:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, &bp[4])));",
          "299:         ND_PRINT((ndo, \"igmp v1 report %s\", ipaddr_string(ndo, &bp[4])));",
          "305:         ND_PRINT((ndo, \"igmp v2 report %s\", ipaddr_string(ndo, &bp[4])));",
          "",
          "[Added Lines]",
          "292:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, bp + 4)));",
          "299:         ND_PRINT((ndo, \"igmp v1 report %s\", ipaddr_string(ndo, bp + 4)));",
          "305:         ND_PRINT((ndo, \"igmp v2 report %s\", ipaddr_string(ndo, bp + 4)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:         break;",
          "311:     case 0x17:",
          "312:         ND_TCHECK_4(bp + 4);",
          "314:         break;",
          "315:     case 0x13:",
          "316:         ND_PRINT((ndo, \"igmp dvmrp\"));",
          "",
          "[Removed Lines]",
          "313:         ND_PRINT((ndo, \"igmp leave %s\", ipaddr_string(ndo, &bp[4])));",
          "",
          "[Added Lines]",
          "313:         ND_PRINT((ndo, \"igmp leave %s\", ipaddr_string(ndo, bp + 4)));",
          "",
          "---------------"
        ],
        "print-ip.c||print-ip.c": [
          "File: print-ip.c -> print-ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  for (len = 3; len < length; len += 4) {",
          "76:   ND_TCHECK_4(cp + len);",
          "78:   if (ptr > len)",
          "79:    ND_PRINT((ndo, \",\"));",
          "80:  }",
          "",
          "[Removed Lines]",
          "77:   ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, &cp[len])));",
          "",
          "[Added Lines]",
          "77:   ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, cp + len)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:    type = \" ^ \";",
          "222:   ND_TCHECK2(cp[len], hoplen);",
          "223:   ND_PRINT((ndo, \"%s%d@%s\", type, EXTRACT_BE_U_4(cp + len + hoplen - 4),",
          "225:   type = \" \";",
          "226:  }",
          "",
          "[Removed Lines]",
          "224:      hoplen!=8 ? \"\" : ipaddr_string(ndo, &cp[len])));",
          "",
          "[Added Lines]",
          "224:      hoplen!=8 ? \"\" : ipaddr_string(ndo, cp + len)));",
          "",
          "---------------"
        ],
        "print-ip6opts.c||print-ip6opts.c": [
          "File: print-ip6opts.c -> print-ip6opts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   ND_PRINT((ndo, \"(homeaddr: invalid len %d)\", bp[i + 1]));",
          "148:   goto trunc;",
          "149:      }",
          "151:             if (bp[i + 1] > IP6OPT_HOMEADDR_MINLEN - 2) {",
          "152:   ip6_sopt_print(ndo, &bp[i + IP6OPT_HOMEADDR_MINLEN],",
          "153:       (optlen - IP6OPT_HOMEADDR_MINLEN));",
          "",
          "[Removed Lines]",
          "150:      ND_PRINT((ndo, \"(homeaddr: %s\", ip6addr_string(ndo, &bp[i + 2])));",
          "",
          "[Added Lines]",
          "150:      ND_PRINT((ndo, \"(homeaddr: %s\", ip6addr_string(ndo, bp + i + 2)));",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     goto trunc;",
          "161:    }",
          "162:    ND_TCHECK_16(bp + i + 2);",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "166:    if (len - i < IP6MOPT_NONCEID_MINLEN) {",
          "",
          "[Removed Lines]",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "",
          "[Added Lines]",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, bp + i + 2)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   hlen = IP6M_MINLEN;",
          "326:   ND_TCHECK_16(bp + hlen);",
          "328:   hlen += 16;",
          "329:   break;",
          "330:  default:",
          "",
          "[Removed Lines]",
          "327:   ND_PRINT((ndo, \" homeaddr %s\", ip6addr_string(ndo, &bp[hlen])));",
          "",
          "[Added Lines]",
          "327:   ND_PRINT((ndo, \" homeaddr %s\", ip6addr_string(ndo, bp + hlen)));",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:    unsigned_relts_print(ndo, hold);",
          "159:   }",
          "160:   ND_PRINT((ndo, \"%s (%s/%d, %s\", njoin ? \"Join\" : \"Prune\",",
          "163:   if (EXTRACT_BE_U_4(bp + 16) != 0xffffffff)",
          "165:   ND_PRINT((ndo, \") %s%s %s\",",
          "166:       (bp[24] & 0x01) ? \"Sparse\" : \"Dense\",",
          "167:       (bp[25] & 0x80) ? \" WC\" : \"\",",
          "",
          "[Removed Lines]",
          "161:   ipaddr_string(ndo, &bp[26]), bp[25] & 0x3f,",
          "162:   ipaddr_string(ndo, &bp[12])));",
          "164:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[16])));",
          "",
          "[Added Lines]",
          "161:   ipaddr_string(ndo, bp + 26), bp[25] & 0x3f,",
          "162:   ipaddr_string(ndo, bp + 12)));",
          "164:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, bp + 16)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:    goto trunc;",
          "211:   ND_TCHECK2(bp[0], sizeof(struct in_addr));",
          "212:   if (EXTRACT_BE_U_4(bp) != 0xffffffff)",
          "214:   bp += 4;",
          "215:   len -= 4;",
          "216:   if (len < 4)",
          "",
          "[Removed Lines]",
          "213:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[0])));",
          "",
          "[Added Lines]",
          "213:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, bp)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:        (bp[0] & 0x01) ? \"Sparse \" : \"Dense \",",
          "236:        (bp[1] & 0x80) ? \"WC \" : \"\",",
          "237:        (bp[1] & 0x40) ? \"RP \" : \"SPT \",",
          "239:        bp[1] & 0x3f));",
          "240:    bp += 6;",
          "241:    len -= 6;",
          "",
          "[Removed Lines]",
          "238:        ipaddr_string(ndo, &bp[2]),",
          "",
          "[Added Lines]",
          "238:        ipaddr_string(ndo, bp + 2),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:  case PIMV1_TYPE_REGISTER:",
          "290:   break;",
          "291:  case PIMV1_TYPE_REGISTER_STOP:",
          "292:   ND_TCHECK2(bp[12], sizeof(struct in_addr));",
          "295:   break;",
          "296:  case PIMV1_TYPE_RP_REACHABILITY:",
          "297:   if (ndo->ndo_vflag) {",
          "298:    ND_TCHECK_2(bp + 22);",
          "300:    if (EXTRACT_BE_U_4(bp + 12) != 0xffffffff)",
          "303:    unsigned_relts_print(ndo, EXTRACT_BE_U_2(bp + 22));",
          "304:   }",
          "305:   break;",
          "306:  case PIMV1_TYPE_ASSERT:",
          "307:   ND_TCHECK2(bp[16], sizeof(struct in_addr));",
          "310:   if (EXTRACT_BE_U_4(bp + 12) != 0xffffffff)",
          "312:   ND_TCHECK_4(bp + 24);",
          "313:   ND_PRINT((ndo, \" %s pref %d metric %d\",",
          "314:       (bp[20] & 0x80) ? \"RP-tree\" : \"SPT\",",
          "",
          "[Removed Lines]",
          "288:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, &bp[20]),",
          "289:       ipaddr_string(ndo, &bp[24])));",
          "293:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, &bp[8]),",
          "294:       ipaddr_string(ndo, &bp[12])));",
          "299:    ND_PRINT((ndo, \" group %s\", ipaddr_string(ndo, &bp[8])));",
          "301:     ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[12])));",
          "302:    ND_PRINT((ndo, \" RP %s hold \", ipaddr_string(ndo, &bp[16])));",
          "308:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, &bp[16]),",
          "309:       ipaddr_string(ndo, &bp[8])));",
          "311:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[12])));",
          "",
          "[Added Lines]",
          "288:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, bp + 20),",
          "289:      ipaddr_string(ndo, bp + 24)));",
          "293:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, bp + 8),",
          "294:      ipaddr_string(ndo, bp + 12)));",
          "299:    ND_PRINT((ndo, \" group %s\", ipaddr_string(ndo, bp + 8)));",
          "301:     ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, bp + 12)));",
          "302:    ND_PRINT((ndo, \" RP %s hold \", ipaddr_string(ndo, bp + 16)));",
          "308:   ND_PRINT((ndo, \" for %s > %s\", ipaddr_string(ndo, bp + 16),",
          "309:      ipaddr_string(ndo, bp + 8)));",
          "311:    ND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, bp + 12)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:     goto trunc;",
          "434:    ND_TCHECK_6(bp);",
          "435:    ND_PRINT((ndo, \"%c%s%s/%d\", s, bp[0] & 1 ? \"!\" : \"\",",
          "437:    if (bp[0] & 0x02) {",
          "438:     ND_PRINT((ndo, \" bidir\"));",
          "439:    }",
          "",
          "[Removed Lines]",
          "436:              ipaddr_string(ndo, &bp[2]), bp[1]));",
          "",
          "[Added Lines]",
          "436:              ipaddr_string(ndo, bp + 2), bp[1]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
      "candidate_info": {
        "commit_hash": "f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f68c3e3ec0113a70c35d5a76d42096e8bdb40ae7",
        "files": [
          "print-isakmp.c",
          "print-mobility.c",
          "print-pim.c",
          "print-smb.c"
        ],
        "message": "Use pointer expressions like in most similar cases",
        "before_after_code_files": [
          "print-isakmp.c||print-isakmp.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c",
          "print-smb.c||print-smb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pim.c||print-pim.c"
          ],
          "candidate": [
            "print-pim.c||print-pim.c"
          ]
        }
      },
      "candidate_diff": {
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_U_2(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_U_2(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_U_2(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_U_2(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(bp + i + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(bp + i + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_U_2(bp + i + 2),",
          "174:     EXTRACT_BE_U_2(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(bp + i + 2);",
          "171:    ND_TCHECK_2(bp + i + 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_U_2(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_U_4(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(bp + hlen + 4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_U_2(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_U_2(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_U_2(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_U_2(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(bp + hlen);",
          "316:   ND_TCHECK_2(bp + hlen);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_U_2(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(bp + 2);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     if (ndo->ndo_vflag < 2)",
          "824:  return;",
          "827:     flags2 = EXTRACT_LE_U_2(buf + 10);",
          "828:     unicodestr = flags2 & 0x8000;",
          "829:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "826:     ND_TCHECK_2(&buf[10]);",
          "",
          "[Added Lines]",
          "826:     ND_TCHECK_2(buf + 10);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
      "candidate_info": {
        "commit_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "files": [
          "extract.h",
          "print-ah.c",
          "print-bgp.c",
          "print-bootp.c",
          "print-chdlc.c",
          "print-domain.c",
          "print-dvmrp.c",
          "print-eap.c",
          "print-fr.c",
          "print-icmp.c",
          "print-igmp.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ppp.c",
          "print-rpki-rtr.c",
          "print-rx.c",
          "print-smb.c",
          "print-stp.c",
          "print-tftp.c",
          "print-udp.c",
          "print-vtp.c"
        ],
        "message": "Rename ND_TCHECK_/ND_TTEST_ macros\n\nNow all the macros have a name meaning a count in bytes.\n\ne.g.:\nND_TCHECK_32BITS -> ND_TCHECK_4\nND_TTEST_32BITS -> ND_TTEST_4",
        "before_after_code_files": [
          "extract.h||extract.h",
          "print-ah.c||print-ah.c",
          "print-bgp.c||print-bgp.c",
          "print-bootp.c||print-bootp.c",
          "print-chdlc.c||print-chdlc.c",
          "print-domain.c||print-domain.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-eap.c||print-eap.c",
          "print-fr.c||print-fr.c",
          "print-icmp.c||print-icmp.c",
          "print-igmp.c||print-igmp.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ppp.c||print-ppp.c",
          "print-rpki-rtr.c||print-rpki-rtr.c",
          "print-rx.c||print-rx.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-tftp.c||print-tftp.c",
          "print-udp.c||print-udp.c",
          "print-vtp.c||print-vtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pim.c||print-pim.c"
          ],
          "candidate": [
            "print-pim.c||print-pim.c"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "392: #define ND_TTEST_8BITS(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_8BITS(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_16BITS(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_16BITS(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_24BITS(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_24BITS(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_32BITS(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_32BITS(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_40BITS(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_40BITS(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_48BITS(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_48BITS(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_56BITS(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_56BITS(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_64BITS(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_64BITS(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_128BITS(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_128BITS(p) ND_TCHECK2(*(p), 16)",
          "",
          "[Added Lines]",
          "392: #define ND_TTEST_1(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_1(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_2(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_2(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_3(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_3(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_4(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_4(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_5(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_5(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_6(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_6(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_7(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_7(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_8(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_8(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_16(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_16(p) ND_TCHECK2(*(p), 16)",
          "",
          "---------------"
        ],
        "print-ah.c||print-ah.c": [
          "File: print-ah.c -> print-ah.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  ND_PRINT((ndo, \"AH(spi=0x%08x\", EXTRACT_BE_32BITS(&ah->ah_spi)));",
          "50:  if (ndo->ndo_vflag)",
          "51:   ND_PRINT((ndo, \",sumlen=%d\", sumlen));",
          "53:  ND_PRINT((ndo, \",seq=0x%x\", EXTRACT_BE_32BITS(ah + 1)));",
          "54:  if (!ND_TTEST2(*bp, sizeof(struct ah) + sumlen)) {",
          "55:   ND_PRINT((ndo, \"[truncated]):\"));",
          "",
          "[Removed Lines]",
          "52:  ND_TCHECK_32BITS(ah + 1);",
          "",
          "[Added Lines]",
          "52:  ND_TCHECK_4(ah + 1);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     total_length = 0;",
          "684:     addr_length = EXTRACT_8BITS(pptr);",
          "685:     pptr++;",
          "",
          "[Removed Lines]",
          "683:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "683:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     }",
          "699:     addr_length = EXTRACT_8BITS(pptr);",
          "700:     pptr++;",
          "",
          "[Removed Lines]",
          "698:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "698:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784:   return -1;",
          "788:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_32BITS(pptr + 1));",
          "",
          "[Removed Lines]",
          "787:  ND_TCHECK_32BITS(pptr + 1);",
          "",
          "[Added Lines]",
          "787:  ND_TCHECK_4(pptr + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037: {",
          "1038:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1041:         plen=EXTRACT_BE_16BITS(pptr);",
          "1042:         tlen=plen;",
          "1043:         pptr+=2;",
          "",
          "[Removed Lines]",
          "1040:  ND_TCHECK_16BITS(pptr);",
          "",
          "[Added Lines]",
          "1040:  ND_TCHECK_2(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:   if (len != 4)",
          "1459:    ND_PRINT((ndo, \"invalid len\"));",
          "1460:   else {",
          "1462:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_32BITS(tptr)));",
          "1463:   }",
          "1464:   break;",
          "",
          "[Removed Lines]",
          "1461:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1461:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   }",
          "1505:   while (tlen>0) {",
          "1506:    uint32_t comm;",
          "1508:    comm = EXTRACT_BE_32BITS(tptr);",
          "1509:    switch (comm) {",
          "1510:    case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1507:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1507:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2064:                 while (tlen>0) {",
          "2065:                     uint16_t extd_comm;",
          "2068:                     extd_comm=EXTRACT_BE_16BITS(tptr);",
          "2070:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2067:                     ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2067:                     ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2250:   break;",
          "2251:  }",
          "2252:         case BGPTYPE_ATTR_SET:",
          "2254:                 if (len < 4)",
          "2255:                  goto trunc;",
          "2256:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "",
          "[Removed Lines]",
          "2253:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2253:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2516:  length -= BGP_SIZE;",
          "2520:  if (length < 2)",
          "2521:   goto trunc;",
          "2522:  withdrawn_routes_len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2519:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2519:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2536:   length -= withdrawn_routes_len;",
          "2537:  }",
          "2540:  if (length < 2)",
          "2541:   goto trunc;",
          "2542:  len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2539:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2539:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2716:   bgpn.bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2717:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2718:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2720:       shutdown_comm_length = EXTRACT_8BITS(tptr);",
          "2721:       remainder_offset = 0;",
          "",
          "[Removed Lines]",
          "2719:       ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2719:       ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-bootp.c||print-bootp.c": [
          "File: print-bootp.c -> print-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  bp += sizeof(int32_t);",
          "615:   tag = EXTRACT_8BITS(bp);",
          "616:   bp++;",
          "617:   if (tag == TAG_PAD && ndo->ndo_vflag < 3)",
          "",
          "[Removed Lines]",
          "614:  while (ND_TTEST_8BITS(bp)) {",
          "",
          "[Added Lines]",
          "614:  while (ND_TTEST_1(bp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   if (tag == TAG_END && ndo->ndo_vflag < 3)",
          "620:    return;",
          "621:   if (tag == TAG_EXTENDED_OPTION) {",
          "623:    tag = EXTRACT_BE_16BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "622:    ND_TCHECK_16BITS(bp + 1);",
          "",
          "[Added Lines]",
          "622:    ND_TCHECK_2(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:    len = 0;",
          "635:   else {",
          "638:    len = EXTRACT_8BITS(bp);",
          "639:    bp++;",
          "640:   }",
          "",
          "[Removed Lines]",
          "637:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "637:    ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "645:   if (tag == TAG_PAD && ndo->ndo_vflag > 2) {",
          "646:    u_int ntag = 1;",
          "649:     bp++;",
          "650:     ntag++;",
          "651:    }",
          "",
          "[Removed Lines]",
          "647:    while (ND_TTEST_8BITS(bp) &&",
          "648:        EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "[Added Lines]",
          "647:    while (ND_TTEST_1(bp) &&",
          "648:           EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "---------------"
        ],
        "print-chdlc.c||print-chdlc.c": [
          "File: print-chdlc.c -> print-chdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:                 if (length < 2)",
          "96:                     goto trunc;",
          "98:                 if (*(p+1) == NLPID_CLNP ||",
          "",
          "[Removed Lines]",
          "97:                 ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "97:                 ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: {",
          "57:  register u_char i;",
          "60:   return (NULL);",
          "61:  i = EXTRACT_8BITS(cp);",
          "62:  cp++;",
          "",
          "[Removed Lines]",
          "59:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "59:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:    if ((i & ~INDIR_MASK) != EDNS0_ELT_BITLABEL)",
          "72:     return (NULL);",
          "73:    if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "74:     bitlen = 256;",
          "",
          "[Removed Lines]",
          "71:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "71:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:    cp += bytelen;",
          "78:   } else",
          "79:    cp += i;",
          "81:    return (NULL);",
          "82:   i = EXTRACT_8BITS(cp);",
          "83:   cp++;",
          "",
          "[Removed Lines]",
          "80:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "80:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  const u_char *bitp, *lim;",
          "95:  char tc;",
          "98:   return(NULL);",
          "99:  if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "100:   bitlen = 256;",
          "",
          "[Removed Lines]",
          "97:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "97:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: {",
          "132:  register u_int i;",
          "135:   return(-1);",
          "136:  i = EXTRACT_8BITS(cp);",
          "137:  if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "",
          "[Removed Lines]",
          "134:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "134:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:    ND_PRINT((ndo, \"<ELT %d>\", elt));",
          "141:    return(-1);",
          "142:   }",
          "144:    return(-1);",
          "145:   if ((bitlen = EXTRACT_8BITS(cp + 1)) == 0)",
          "146:    bitlen = 256;",
          "",
          "[Removed Lines]",
          "143:   if (!ND_TTEST_8BITS(cp + 1))",
          "",
          "[Added Lines]",
          "143:   if (!ND_TTEST_1(cp + 1))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:  if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "163:   return(NULL);",
          "165:   return(NULL);",
          "166:  max_offset = (u_int)(cp - bp);",
          "167:  i = EXTRACT_8BITS(cp);",
          "",
          "[Removed Lines]",
          "164:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "164:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:      rp = cp + 1;",
          "179:      compress = 1;",
          "180:     }",
          "182:      return(NULL);",
          "183:     offset = (((i << 8) | EXTRACT_8BITS(cp)) & 0x3fff);",
          "",
          "[Removed Lines]",
          "181:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "181:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     cp = bp + offset;",
          "200:     if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "201:      return(NULL);",
          "203:      return(NULL);",
          "204:     i = EXTRACT_8BITS(cp);",
          "205:     cp++;",
          "",
          "[Removed Lines]",
          "202:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "202:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:    ND_PRINT((ndo, \".\"));",
          "227:    if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "228:     return(NULL);",
          "230:     return(NULL);",
          "231:    i = EXTRACT_8BITS(cp);",
          "232:    cp++;",
          "",
          "[Removed Lines]",
          "229:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "229:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245: {",
          "246:  register u_int i;",
          "249:   return (NULL);",
          "250:  i = EXTRACT_8BITS(cp);",
          "251:  cp++;",
          "",
          "[Removed Lines]",
          "248:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "248:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "512:   int pbit, pbyte;",
          "513:   char ntop_buf[INET6_ADDRSTRLEN];",
          "516:    return(NULL);",
          "517:   pbit = EXTRACT_8BITS(cp);",
          "518:   pbyte = (pbit & ~7) / 8;",
          "",
          "[Removed Lines]",
          "515:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "515:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "558:   if ((cp = ns_nprint(ndo, cp, bp)) == NULL)",
          "559:    return(NULL);",
          "560:   cp += 6;",
          "562:    return(NULL);",
          "563:   ND_PRINT((ndo, \" fudge=%u\", EXTRACT_BE_16BITS(cp)));",
          "564:   cp += 2;",
          "566:    return(NULL);",
          "567:   ND_PRINT((ndo, \" maclen=%u\", EXTRACT_BE_16BITS(cp)));",
          "568:   cp += 2 + EXTRACT_BE_16BITS(cp);",
          "570:    return(NULL);",
          "571:   ND_PRINT((ndo, \" origid=%u\", EXTRACT_BE_16BITS(cp)));",
          "572:   cp += 2;",
          "574:    return(NULL);",
          "575:   ND_PRINT((ndo, \" error=%u\", EXTRACT_BE_16BITS(cp)));",
          "576:   cp += 2;",
          "578:    return(NULL);",
          "579:   ND_PRINT((ndo, \" otherlen=%u\", EXTRACT_BE_16BITS(cp)));",
          "580:   cp += 2;",
          "",
          "[Removed Lines]",
          "561:   if (!ND_TTEST_16BITS(cp))",
          "565:   if (!ND_TTEST_16BITS(cp))",
          "569:   if (!ND_TTEST_16BITS(cp))",
          "573:   if (!ND_TTEST_16BITS(cp))",
          "577:   if (!ND_TTEST_16BITS(cp))",
          "",
          "[Added Lines]",
          "561:   if (!ND_TTEST_2(cp))",
          "565:   if (!ND_TTEST_2(cp))",
          "569:   if (!ND_TTEST_2(cp))",
          "573:   if (!ND_TTEST_2(cp))",
          "577:   if (!ND_TTEST_2(cp))",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  if (bp >= ep)",
          "78:   return;",
          "81:  type = EXTRACT_8BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "80:  ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "80:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:    }",
          "199:    origin = 0;",
          "200:    for (i = 0; i < width; ++i) {",
          "202:     origin = origin << 8 | EXTRACT_8BITS(bp);",
          "203:     bp++;",
          "204:    }",
          "205:    for ( ; i < 4; ++i)",
          "206:     origin <<= 8;",
          "209:    metric = EXTRACT_8BITS(bp);",
          "210:    bp++;",
          "211:    done = metric & 0x80;",
          "",
          "[Removed Lines]",
          "201:     ND_TCHECK_8BITS(bp);",
          "208:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "201:     ND_TCHECK_1(bp);",
          "208:    ND_TCHECK_1(bp);",
          "",
          "---------------"
        ],
        "print-eap.c||print-eap.c": [
          "File: print-eap.c -> print-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     switch (eap->type) {",
          "184:     case EAP_FRAME_TYPE_PACKET:",
          "186:         type = *(tptr);",
          "188:         len = EXTRACT_BE_16BITS(tptr + 2);",
          "189:         ND_PRINT((ndo, \", %s (%u), id %u, len %u\",",
          "190:                tok2str(eap_code_values, \"unknown\", type),",
          "",
          "[Removed Lines]",
          "185:         ND_TCHECK_8BITS(tptr);",
          "187:         ND_TCHECK_16BITS(tptr+2);",
          "",
          "[Added Lines]",
          "185:         ND_TCHECK_1(tptr);",
          "187:         ND_TCHECK_2(tptr + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         ND_TCHECK2(*tptr, len);",
          "199:             subtype = EXTRACT_8BITS(tptr + 4);",
          "200:             ND_PRINT((ndo, \"\\n\\t\\t Type %s (%u)\",",
          "201:                    tok2str(eap_type_values, \"unknown\", subtype),",
          "",
          "[Removed Lines]",
          "198:             ND_TCHECK_8BITS(tptr+4);",
          "",
          "[Added Lines]",
          "198:             ND_TCHECK_1(tptr + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:                 while (count < len) {",
          "229:                     ND_PRINT((ndo, \" %s (%u),\",",
          "230:                            tok2str(eap_type_values, \"unknown\", EXTRACT_8BITS((tptr + count))),",
          "",
          "[Removed Lines]",
          "228:                     ND_TCHECK_8BITS(tptr+count);",
          "",
          "[Added Lines]",
          "228:                     ND_TCHECK_1(tptr + count);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:             case EAP_TYPE_TTLS:",
          "237:             case EAP_TYPE_TLS:",
          "239:                 if (subtype == EAP_TYPE_TTLS)",
          "240:                     ND_PRINT((ndo, \" TTLSv%u\",",
          "241:                            EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "",
          "[Removed Lines]",
          "238:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "238:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "248:       ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "249:                 }",
          "250:                 break;",
          "252:             case EAP_TYPE_FAST:",
          "254:                 ND_PRINT((ndo, \" FASTv%u\",",
          "255:                        EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "256:                 ND_PRINT((ndo, \" flags [%s] 0x%02x,\",",
          "",
          "[Removed Lines]",
          "247:                     ND_TCHECK_32BITS(tptr + 6);",
          "253:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "247:                     ND_TCHECK_4(tptr + 6);",
          "253:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "262:                     ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     ND_TCHECK_32BITS(tptr + 6);",
          "",
          "[Added Lines]",
          "261:                     ND_TCHECK_4(tptr + 6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:             case EAP_TYPE_AKA:",
          "269:             case EAP_TYPE_SIM:",
          "271:                 ND_PRINT((ndo, \" subtype [%s] 0x%02x,\",",
          "272:                        tok2str(eap_aka_subtype_values, \"unknown\", EXTRACT_8BITS((tptr + 5))),",
          "",
          "[Removed Lines]",
          "270:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "270:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------"
        ],
        "print-fr.c||print-fr.c": [
          "File: print-fr.c -> print-fr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                            const u_char *p, u_int *dlci,",
          "103:                            u_int *addr_len, uint8_t *flags, u_int length)",
          "104: {",
          "106:   return -1;",
          "107:  if ((EXTRACT_8BITS(p) & FR_EA_BIT))",
          "108:   return 0;",
          "111:   return -1;",
          "",
          "[Removed Lines]",
          "105:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "110:  if (!ND_TTEST_8BITS(p+1) || length < 2)",
          "",
          "[Added Lines]",
          "105:  if (!ND_TTEST_1(p) || length < 1)",
          "110:  if (!ND_TTEST_1(p + 1) || length < 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  p += 2;",
          "124:  length -= 2;",
          "126:   return -1;",
          "128:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0) {",
          "",
          "[Removed Lines]",
          "125:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "125:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   length--;",
          "133:  }",
          "136:   return -1;",
          "137:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0)",
          "",
          "[Removed Lines]",
          "135:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "135:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   return 0;",
          "254:  }",
          "257:  if (length < addr_len + 1)",
          "258:   goto trunc;",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK_8BITS(p + addr_len);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(p + addr_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "269:                 } else {",
          "",
          "[Removed Lines]",
          "266:   if (!ND_TTEST_16BITS(p + addr_len) || length < addr_len + 2) {",
          "",
          "[Added Lines]",
          "266:   if (!ND_TTEST_2(p + addr_len) || length < addr_len + 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:                 }",
          "286:         }",
          "289:  if (length < addr_len + 2)",
          "290:   goto trunc;",
          "",
          "[Removed Lines]",
          "288:  ND_TCHECK_8BITS(p + addr_len + 1);",
          "",
          "[Added Lines]",
          "288:  ND_TCHECK_1(p + addr_len + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "307:   hdr_len = addr_len + 1 /* UI */ + 1 /* NLPID */;",
          "308:  }",
          "311:  if (length < hdr_len)",
          "312:   goto trunc;",
          "313:  nlpid = EXTRACT_8BITS(p + hdr_len - 1);",
          "",
          "[Removed Lines]",
          "310:         ND_TCHECK_8BITS(p + hdr_len - 1);",
          "",
          "[Added Lines]",
          "310:         ND_TCHECK_1(p + hdr_len - 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:  ND_PRINT((ndo, \"%s, codeset %u\", is_ansi ? \"ANSI\" : \"CCITT\", codeset));",
          "909:  if (call_ref_length != 0) {",
          "911:   if (call_ref_length > 1 || EXTRACT_8BITS(p) != 0) {",
          "",
          "[Removed Lines]",
          "910:   ND_TCHECK_8BITS(p);",
          "",
          "[Added Lines]",
          "910:   ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-icmp.c||print-icmp.c": [
          "File: print-icmp.c -> print-icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   ND_PRINT((ndo, \"\\n\\t\"));",
          "582:   ip = (const struct ip *)bp;",
          "583:                 snapend_save = ndo->ndo_snapend;",
          "585:   ip_print(ndo, bp, EXTRACT_BE_16BITS(&ip->ip_len));",
          "586:                 ndo->ndo_snapend = snapend_save;",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:   ND_TCHECK_16BITS(&ip->ip_len);",
          "",
          "[Added Lines]",
          "584:   ND_TCHECK_2(&ip->ip_len);",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "159:  return;",
          "160:     }",
          "162:     ngroups = EXTRACT_BE_16BITS(bp + 6);",
          "163:     ND_PRINT((ndo, \", %d group record(s)\", ngroups));",
          "164:     if (ndo->ndo_vflag > 0) {",
          "",
          "[Removed Lines]",
          "161:     ND_TCHECK_16BITS(bp + 6);",
          "",
          "[Added Lines]",
          "161:     ND_TCHECK_2(bp + 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "216:  return;",
          "217:     }",
          "219:     mrc = EXTRACT_8BITS(bp + 1);",
          "220:     if (mrc < 128) {",
          "221:  mrt = mrc;",
          "",
          "[Removed Lines]",
          "218:     ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "218:     ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         }",
          "232:  ND_PRINT((ndo, \"]\"));",
          "233:     }",
          "235:     if (EXTRACT_BE_32BITS(bp + 4) == 0)",
          "236:  return;",
          "237:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[4])));",
          "239:     nsrcs = EXTRACT_BE_16BITS(bp + 10);",
          "240:     if (nsrcs > 0) {",
          "241:  if (len < 12 + (nsrcs << 2))",
          "",
          "[Removed Lines]",
          "234:     ND_TCHECK_32BITS(bp + 4);",
          "238:     ND_TCHECK_16BITS(bp + 10);",
          "",
          "[Added Lines]",
          "234:     ND_TCHECK_4(bp + 4);",
          "238:     ND_TCHECK_2(bp + 10);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:         return;",
          "268:     }",
          "271:     switch (EXTRACT_8BITS(bp)) {",
          "272:     case 0x11:",
          "273:         ND_PRINT((ndo, \"igmp query\"));",
          "274:  if (len >= 12)",
          "275:      print_igmpv3_query(ndo, bp, len);",
          "276:  else {",
          "278:      if (EXTRACT_8BITS(bp + 1)) {",
          "279:   ND_PRINT((ndo, \" v2\"));",
          "280:   if (EXTRACT_8BITS(bp + 1) != 100)",
          "281:       ND_PRINT((ndo, \" [max resp time %u]\", EXTRACT_8BITS(bp + 1)));",
          "282:      } else",
          "283:   ND_PRINT((ndo, \" v1\"));",
          "285:      if (EXTRACT_BE_32BITS(bp + 4))",
          "286:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, &bp[4])));",
          "287:             if (len != 8)",
          "",
          "[Removed Lines]",
          "270:     ND_TCHECK_8BITS(bp);",
          "277:             ND_TCHECK_8BITS(bp + 1);",
          "284:             ND_TCHECK_32BITS(bp + 4);",
          "",
          "[Added Lines]",
          "270:     ND_TCHECK_1(bp);",
          "277:             ND_TCHECK_1(bp + 1);",
          "284:             ND_TCHECK_4(bp + 4);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_16BITS(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:             case ESIS_OPTION_PROTOCOLS:",
          "1344:                 while (opli>0) {",
          "1346:                     ND_PRINT((ndo, \"%s (0x%02x)\",",
          "1347:                            tok2str(nlpid_values,",
          "1348:                                    \"unknown\",",
          "",
          "[Removed Lines]",
          "1345:                     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "1345:                     ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625:           stlv_len = stlv_len - 8;",
          "1627:           while (stlv_len >= 4) {",
          "1629:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "1630:                     (EXTRACT_BE_32BITS(tptr) >> 31),",
          "1631:                     (EXTRACT_BE_32BITS(tptr) >> 30) & 0x01,",
          "",
          "[Removed Lines]",
          "1628:             ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1628:             ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2000:     tptr+=NODE_ID_LEN;",
          "2004:      return(0);",
          "2005:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_24BITS(tptr)));",
          "2006:  tptr+=3;",
          "2007:     }",
          "2010:         return(0);",
          "2012:     tptr++;",
          "",
          "[Removed Lines]",
          "2009:     if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2009:     if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041: isis_print_mtid(netdissect_options *ndo,",
          "2042:                 const uint8_t *tptr, const char *ident)",
          "2043: {",
          "2045:         return(0);",
          "2047:     ND_PRINT((ndo, \"%s%s\",",
          "",
          "[Removed Lines]",
          "2044:     if (!ND_TTEST_16BITS(tptr))",
          "",
          "[Added Lines]",
          "2044:     if (!ND_TTEST_2(tptr))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2073:     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;",
          "2076:         return (0);",
          "2077:     metric = EXTRACT_BE_32BITS(tptr);",
          "2078:     processed=4;",
          "2079:     tptr+=4;",
          "2081:     if (afi == AF_INET) {",
          "2083:             return (0);",
          "2084:         status_byte=EXTRACT_8BITS(tptr);",
          "2085:         tptr++;",
          "",
          "[Removed Lines]",
          "2075:     if (!ND_TTEST_32BITS(tptr))",
          "",
          "[Added Lines]",
          "2075:     if (!ND_TTEST_4(tptr))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2145:            than one subTLV - therefore the first byte must reflect",
          "2146:            the aggregate bytecount of the subTLVs for this prefix",
          "2149:             return (0);",
          "2150:         sublen=EXTRACT_8BITS(tptr);",
          "2151:         tptr++;",
          "",
          "[Removed Lines]",
          "2148:         if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2148:         if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2589:  switch (tlv_type) {",
          "2590:  case ISIS_TLV_AREA_ADDR:",
          "2592:      alen = EXTRACT_8BITS(tptr);",
          "2593:      tptr++;",
          "2594:      while (tmp && alen < tmp) {",
          "",
          "[Removed Lines]",
          "2591:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2591:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2600:   tmp -= alen + 1;",
          "2602:                     break;",
          "2604:   alen = EXTRACT_8BITS(tptr);",
          "2605:   tptr++;",
          "2606:      }",
          "",
          "[Removed Lines]",
          "2603:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2603:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2774:      }",
          "2775:      break;",
          "2776:  case ISIS_TLV_AUTH:",
          "2779:             ND_PRINT((ndo, \"\\n\\t      %s: \",",
          "2780:                    tok2str(isis_subtlv_auth_values,",
          "",
          "[Removed Lines]",
          "2777:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2777:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2788:   break;",
          "2789:      case ISIS_SUBTLV_AUTH_MD5:",
          "2790:   for(i=1;i<tlv_len;i++) {",
          "2792:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2793:   }",
          "2794:   if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)",
          "",
          "[Removed Lines]",
          "2791:       ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2791:       ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2802:   break;",
          "2803:             case ISIS_SUBTLV_AUTH_GENERIC:",
          "2805:                 key_id = EXTRACT_BE_16BITS(tptr + 1);",
          "2806:                 ND_PRINT((ndo, \"%u, password: \", key_id));",
          "2807:                 for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {",
          "2809:                     ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2810:                 }",
          "2811:                 break;",
          "",
          "[Removed Lines]",
          "2804:   ND_TCHECK_16BITS(tptr + 1);",
          "2808:                     ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2804:   ND_TCHECK_2(tptr + 1);",
          "2808:                     ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2820:  case ISIS_TLV_PTP_ADJ:",
          "2821:      tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;",
          "2822:      if(tmp>=1) {",
          "2824:   ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\",",
          "2825:          tok2str(isis_ptp_adjancey_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "2826:          EXTRACT_8BITS(tptr)));",
          "",
          "[Removed Lines]",
          "2823:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2823:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2848:  case ISIS_TLV_PROTOCOLS:",
          "2849:      ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));",
          "2850:      while (tmp>0) {",
          "2852:   ND_PRINT((ndo, \"%s (0x%02x)\",",
          "2853:                        tok2str(nlpid_values,",
          "2854:                                \"unknown\",",
          "",
          "[Removed Lines]",
          "2851:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2851:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2864:     case ISIS_TLV_MT_PORT_CAP:",
          "2865:     {",
          "2868:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "2869:               (EXTRACT_BE_16BITS(tptr) >> 12),",
          "",
          "[Removed Lines]",
          "2866:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2866:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2881:     case ISIS_TLV_MT_CAPABILITY:",
          "2885:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "2886:                 (EXTRACT_BE_16BITS(tptr) >> 15) & 0x01,",
          "",
          "[Removed Lines]",
          "2883:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2883:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2926:      if (tmp < 1)",
          "2927:          break;",
          "2929:      ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(EXTRACT_8BITS(tptr)) ? \"numbered\" : \"unnumbered\"));",
          "2930:      tptr++;",
          "2931:      tmp--;",
          "",
          "[Removed Lines]",
          "2928:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2928:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2945:      tmp-=sizeof(struct in_addr);",
          "2947:      while (tmp>=4) {",
          "2949:                 ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_BE_32BITS(tptr)));",
          "2950:                 tptr+=4;",
          "2951:                 tmp-=4;",
          "",
          "[Removed Lines]",
          "2948:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2948:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3095:             tmp-=sizeof(struct isis_metric_block);",
          "3097:             while(tmp>0) {",
          "3100:                 tptr++;",
          "3101:                 if (prefix_len < 2) {",
          "",
          "[Removed Lines]",
          "3098:                 ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "3098:                 ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1373:             l2info->proto = EXTRACT_BE_16BITS(p + l2info->cookie_len);",
          "1374:             break;",
          "1375:         }",
          "",
          "[Removed Lines]",
          "1372:             ND_TCHECK_16BITS(p+l2info->cookie_len);",
          "",
          "[Added Lines]",
          "1372:             ND_TCHECK_2(p + l2info->cookie_len);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_16BITS(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_16BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_128BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_16BITS(bp + i + 2),",
          "174:     EXTRACT_BE_16BITS(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_16BITS(&bp[i+2]);",
          "171:    ND_TCHECK_16BITS(&bp[i+4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_16BITS(&bp[hlen]);",
          "316:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:  case OSPF_TYPE_HELLO: {",
          "738:   register const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "741:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "742:             bittok2str(ospf6_option_values, \"none\",",
          "743:             EXTRACT_BE_32BITS(&hellop->hello_options))));",
          "",
          "[Removed Lines]",
          "740:   ND_TCHECK_32BITS(&hellop->hello_options);",
          "",
          "[Added Lines]",
          "740:   ND_TCHECK_4(&hellop->hello_options);",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:      bp += (2 * sizeof(uint16_t));",
          "365:      switch (EXTRACT_BE_16BITS(bp)) {",
          "366:      case AFNUM_INET:",
          "367:   ND_TCHECK2(*bp, sizeof(struct in_addr));",
          "",
          "[Removed Lines]",
          "364:      ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "364:      ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (len < 2)",
          "1024:    goto trunc;",
          "1026:   ND_PRINT((ndo, \" tag=%x\", EXTRACT_BE_16BITS(bp)));",
          "1027:   bp += 2;",
          "1028:   len -= 2;",
          "",
          "[Removed Lines]",
          "1025:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1025:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     if (len < 2)",
          "1081:      goto trunc;",
          "1083:     ND_PRINT((ndo, \",holdtime=\"));",
          "1084:     unsigned_relts_print(ndo,",
          "1085:            EXTRACT_BE_16BITS(bp));",
          "",
          "[Removed Lines]",
          "1082:     ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1082:     ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_16BITS(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:   len -= advance;",
          "1173:   if (len < 2)",
          "1174:    goto trunc;",
          "1176:   ND_PRINT((ndo, \" TUNR \"));",
          "1177:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp));",
          "1178:   break;",
          "",
          "[Removed Lines]",
          "1175:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1175:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:    ND_PRINT((ndo, \" (length bogus, should be >= 6)\"));",
          "614:    return len;",
          "615:   }",
          "617:   ND_PRINT((ndo, \": Vendor: %s (%u)\",",
          "618:    tok2str(oui_values,\"Unknown\",EXTRACT_BE_24BITS(p + 2)),",
          "619:    EXTRACT_BE_24BITS(p + 2)));",
          "",
          "[Removed Lines]",
          "616:   ND_TCHECK_24BITS(p + 2);",
          "",
          "[Added Lines]",
          "616:   ND_TCHECK_3(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "633:    return len;",
          "634:   }",
          "636:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "637:   break;",
          "638:  case LCPOPT_ACCM:",
          "",
          "[Removed Lines]",
          "635:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "635:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "641:    return len;",
          "642:   }",
          "644:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "645:   break;",
          "646:  case LCPOPT_AP:",
          "",
          "[Removed Lines]",
          "643:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "643:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "649:    return len;",
          "650:   }",
          "652:   ND_PRINT((ndo, \": %s\", tok2str(ppptype2str, \"Unknown Auth Proto (0x04x)\", EXTRACT_BE_16BITS(p + 2))));",
          "654:   switch (EXTRACT_BE_16BITS(p + 2)) {",
          "",
          "[Removed Lines]",
          "651:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "651:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "671:    return 0;",
          "672:   }",
          "674:   if (EXTRACT_BE_16BITS(p + 2) == PPP_LQM)",
          "675:    ND_PRINT((ndo, \": LQR\"));",
          "676:   else",
          "",
          "[Removed Lines]",
          "673:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "673:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "682:    return 0;",
          "683:   }",
          "685:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "686:   break;",
          "687:  case LCPOPT_PFC:",
          "",
          "[Removed Lines]",
          "684:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "684:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "694:    return 0;",
          "695:   }",
          "697:   ND_PRINT((ndo, \": 0x%04x\", EXTRACT_BE_16BITS(p + 2)));",
          "698:   break;",
          "699:  case LCPOPT_CBACK:",
          "",
          "[Removed Lines]",
          "696:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "696:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "713:    return 0;",
          "714:   }",
          "716:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "717:   break;",
          "718:  case LCPOPT_MLED:",
          "",
          "[Removed Lines]",
          "715:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "715:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "818:         return;",
          "819:     }",
          "821:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "822:         return;",
          "823:     }",
          "",
          "[Removed Lines]",
          "820:     if (!ND_TTEST_16BITS(p)) {",
          "",
          "[Added Lines]",
          "820:     if (!ND_TTEST_2(p)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1072:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1073:    return 0;",
          "1074:   }",
          "1076:   compproto = EXTRACT_BE_16BITS(p + 2);",
          "1078:   ND_PRINT((ndo, \": %s (0x%02x):\",",
          "",
          "[Removed Lines]",
          "1075:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "1075:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1353:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "1354:    return len;",
          "1355:   }",
          "1357:   ND_PRINT((ndo, \": Magic-Num 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "1358:   break;",
          "1359:  default:",
          "",
          "[Removed Lines]",
          "1356:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "1356:   ND_TCHECK_4(p + 2);",
          "",
          "---------------"
        ],
        "print-rpki-rtr.c||print-rpki-rtr.c": [
          "File: print-rpki-rtr.c -> print-rpki-rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     const u_char *msg;",
          "186:     if (*tptr != 0) {",
          "",
          "[Removed Lines]",
          "185:     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "185:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-rx.c||print-rx.c": [
          "File: print-rx.c -> print-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:  struct rx_cache_entry *rxent;",
          "683:  const struct rx_header *rxh = (const struct rx_header *) bp;",
          "686:   return;",
          "688:  rxent = &rx_cache[rx_cache_next];",
          "",
          "[Removed Lines]",
          "685:  if (!ND_TTEST_32BITS(bp + sizeof(struct rx_header)))",
          "",
          "[Added Lines]",
          "685:  if (!ND_TTEST_4(bp + sizeof(struct rx_header)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   }",
          "773: #define INTOUT() { int32_t _i; \\",
          "775:    _i = EXTRACT_BE_INT32(bp); \\",
          "776:    bp += sizeof(int32_t); \\",
          "777:    ND_PRINT((ndo, \" %d\", _i)); \\",
          "778:   }",
          "780: #define UINTOUT() { uint32_t _i; \\",
          "782:    _i = EXTRACT_BE_32BITS(bp); \\",
          "783:    bp += sizeof(uint32_t); \\",
          "784:    ND_PRINT((ndo, \" %u\", _i)); \\",
          "",
          "[Removed Lines]",
          "774:    ND_TCHECK_32BITS(bp); \\",
          "781:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "774:    ND_TCHECK_4(bp); \\",
          "781:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:   }",
          "794: #define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\",
          "796:    _t = (time_t) EXTRACT_BE_INT32(bp); \\",
          "797:    bp += sizeof(int32_t); \\",
          "798:    tm = localtime(&_t); \\",
          "",
          "[Removed Lines]",
          "795:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "795:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "900:  fs_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "902:  ND_PRINT((ndo, \" fs call %s\", tok2str(fs_req, \"op#%u\", fs_op)));",
          "",
          "[Removed Lines]",
          "899:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "899:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1006:   {",
          "1007:    uint32_t j;",
          "1009:    j = EXTRACT_BE_32BITS(bp);",
          "1010:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1008:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1008:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1082:   {",
          "1083:    char a[AFSOPAQUEMAX+1];",
          "1085:    i = EXTRACT_BE_32BITS(bp);",
          "1086:    bp += sizeof(uint32_t);",
          "1087:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1084:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1084:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1113:   int32_t errcode;",
          "1116:   errcode = EXTRACT_BE_INT32(bp);",
          "1117:   bp += sizeof(int32_t);",
          "",
          "[Removed Lines]",
          "1115:   ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1115:   ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1233:  cb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1235:  ND_PRINT((ndo, \" cb call %s\", tok2str(cb_req, \"op#%u\", cb_op)));",
          "",
          "[Removed Lines]",
          "1232:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1232:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1246:   {",
          "1247:    uint32_t j, t;",
          "1249:    j = EXTRACT_BE_32BITS(bp);",
          "1250:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1248:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1248:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1258:    if (j == 0)",
          "1259:     ND_PRINT((ndo, \" <none!>\"));",
          "1262:    j = EXTRACT_BE_32BITS(bp);",
          "1263:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1261:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1261:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1270:     INTOUT();",
          "1271:     ND_PRINT((ndo, \" expires\"));",
          "1272:     DATEOUT();",
          "1274:     t = EXTRACT_BE_32BITS(bp);",
          "1275:     bp += sizeof(uint32_t);",
          "1276:     tok2str(cb_types, \"type %u\", t);",
          "",
          "[Removed Lines]",
          "1273:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1273:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1364:  pt_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1366:  ND_PRINT((ndo, \" pt\"));",
          "",
          "[Removed Lines]",
          "1363:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1363:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1414:   {",
          "1415:    uint32_t j;",
          "1417:    j = EXTRACT_BE_32BITS(bp);",
          "1418:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1416:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1416:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1435:   {",
          "1436:    uint32_t j;",
          "1437:    ND_PRINT((ndo, \" ids:\"));",
          "1439:    i = EXTRACT_BE_32BITS(bp);",
          "1440:    bp += sizeof(uint32_t);",
          "1441:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1438:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1438:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1525:   {",
          "1526:    uint32_t j;",
          "1527:    ND_PRINT((ndo, \" ids:\"));",
          "1529:    i = EXTRACT_BE_32BITS(bp);",
          "1530:    bp += sizeof(uint32_t);",
          "1531:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1528:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1528:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1538:   {",
          "1539:    uint32_t j;",
          "1541:    j = EXTRACT_BE_32BITS(bp);",
          "1542:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1540:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1540:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1563:   {",
          "1564:    uint32_t j;",
          "1566:    j = EXTRACT_BE_32BITS(bp);",
          "1567:    bp += sizeof(uint32_t);",
          "1568:    for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "1565:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1565:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1618:  vldb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1620:  ND_PRINT((ndo, \" vldb\"));",
          "",
          "[Removed Lines]",
          "1617:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1617:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1645:    ND_PRINT((ndo, \" volid\"));",
          "1646:    INTOUT();",
          "1648:    i = EXTRACT_BE_32BITS(bp);",
          "1649:    bp += sizeof(uint32_t);",
          "1650:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1647:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1647:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1665:    ND_PRINT((ndo, \" volid\"));",
          "1666:    INTOUT();",
          "1668:    i = EXTRACT_BE_32BITS(bp);",
          "1669:    bp += sizeof(uint32_t);",
          "1670:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1667:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1667:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1735:   { uint32_t nservers, j;",
          "1736:    VECOUT(VLNAMEMAX);",
          "1738:    bp += sizeof(uint32_t);",
          "1739:    ND_PRINT((ndo, \" numservers\"));",
          "1741:    nservers = EXTRACT_BE_32BITS(bp);",
          "1742:    bp += sizeof(uint32_t);",
          "1743:    ND_PRINT((ndo, \" %u\", nservers));",
          "1744:    ND_PRINT((ndo, \" servers\"));",
          "1745:    for (i = 0; i < 8; i++) {",
          "1747:     if (i < nservers)",
          "1748:      ND_PRINT((ndo, \" %s\",",
          "1749:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1737:    ND_TCHECK_32BITS(bp);",
          "1740:    ND_TCHECK_32BITS(bp);",
          "1746:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1737:    ND_TCHECK_4(bp);",
          "1740:    ND_TCHECK_4(bp);",
          "1746:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1751:    }",
          "1752:    ND_PRINT((ndo, \" partitions\"));",
          "1753:    for (i = 0; i < 8; i++) {",
          "1755:     j = EXTRACT_BE_32BITS(bp);",
          "1756:     if (i < nservers && j <= 26)",
          "1757:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1754:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1754:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1784:   { uint32_t nservers, j;",
          "1785:    VECOUT(VLNAMEMAX);",
          "1786:    ND_PRINT((ndo, \" numservers\"));",
          "1788:    nservers = EXTRACT_BE_32BITS(bp);",
          "1789:    bp += sizeof(uint32_t);",
          "1790:    ND_PRINT((ndo, \" %u\", nservers));",
          "1791:    ND_PRINT((ndo, \" servers\"));",
          "1792:    for (i = 0; i < 13; i++) {",
          "1794:     if (i < nservers)",
          "1795:      ND_PRINT((ndo, \" %s\",",
          "1796:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1787:    ND_TCHECK_32BITS(bp);",
          "1793:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1787:    ND_TCHECK_4(bp);",
          "1793:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1798:    }",
          "1799:    ND_PRINT((ndo, \" partitions\"));",
          "1800:    for (i = 0; i < 13; i++) {",
          "1802:     j = EXTRACT_BE_32BITS(bp);",
          "1803:     if (i < nservers && j <= 26)",
          "1804:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1801:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1801:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1821:   { uint32_t nservers, j;",
          "1822:    VECOUT(VLNAMEMAX);",
          "1823:    ND_PRINT((ndo, \" numservers\"));",
          "1825:    nservers = EXTRACT_BE_32BITS(bp);",
          "1826:    bp += sizeof(uint32_t);",
          "1827:    ND_PRINT((ndo, \" %u\", nservers));",
          "",
          "[Removed Lines]",
          "1824:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1824:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1839:    bp += 4 * 13;",
          "1840:    ND_PRINT((ndo, \" partitions\"));",
          "1841:    for (i = 0; i < 13; i++) {",
          "1843:     j = EXTRACT_BE_32BITS(bp);",
          "1844:     if (i < nservers && j <= 26)",
          "1845:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1842:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1842:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1896:  kauth_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1898:  ND_PRINT((ndo, \" kauth\"));",
          "",
          "[Removed Lines]",
          "1895:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1895:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1934:    INTOUT();",
          "1935:    ND_PRINT((ndo, \" domain\"));",
          "1936:    STROUT(KANAMEMAX);",
          "1938:    i = EXTRACT_BE_32BITS(bp);",
          "1939:    bp += sizeof(uint32_t);",
          "1940:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1937:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1937:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2039:  vol_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2041:  ND_PRINT((ndo, \" vol call %s\", tok2str(vol_req, \"op#%u\", vol_op)));",
          "",
          "[Removed Lines]",
          "2038:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2038:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2187:    DATEOUT();",
          "2188:    {",
          "2189:     uint32_t i, j;",
          "2191:     j = EXTRACT_BE_32BITS(bp);",
          "2192:     bp += sizeof(uint32_t);",
          "2193:     for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2190:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2190:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2316:     {",
          "2317:      uint32_t i, j;",
          "2319:      j = EXTRACT_BE_32BITS(bp);",
          "2320:      bp += sizeof(uint32_t);",
          "2321:      for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2318:      ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2318:      ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2373:  bos_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2375:  ND_PRINT((ndo, \" bos call %s\", tok2str(bos_req, \"op#%u\", bos_op)));",
          "",
          "[Removed Lines]",
          "2372:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2372:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2532:  switch (ubik_op) {",
          "2535:    temp = EXTRACT_BE_32BITS(bp);",
          "2536:    bp += sizeof(uint32_t);",
          "2537:    ND_PRINT((ndo, \" syncsite %s\", temp ? \"yes\" : \"no\"));",
          "",
          "[Removed Lines]",
          "2534:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2534:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2563:    INTOUT();",
          "2564:    ND_PRINT((ndo, \" length\"));",
          "2565:    INTOUT();",
          "2567:    temp = EXTRACT_BE_32BITS(bp);",
          "2568:    bp += sizeof(uint32_t);",
          "2569:    tok2str(ubik_lock_types, \"type %u\", temp);",
          "",
          "[Removed Lines]",
          "2566:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2566:    ND_TCHECK_4(bp);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:     if (ndo->ndo_vflag < 2)",
          "821:  return;",
          "824:     flags2 = EXTRACT_LE_16BITS(buf + 10);",
          "825:     unicodestr = flags2 & 0x8000;",
          "826:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "823:     ND_TCHECK_16BITS(&buf[10]);",
          "",
          "[Added Lines]",
          "823:     ND_TCHECK_2(&buf[10]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1167:      p = smb_fdata(ndo, p, \"Name=[n1]\\n#\", maxbuf, 0);",
          "1168:      if (p == NULL)",
          "1169:   goto out;",
          "1171:      restype = EXTRACT_BE_16BITS(p);",
          "1172:      p = smb_fdata(ndo, p, \"ResType=[rw]\\nResClass=[rw]\\nTTL=[rD]\\n\", p + 8, 0);",
          "1173:      if (p == NULL)",
          "1174:   goto out;",
          "1176:      rdlen = EXTRACT_BE_16BITS(p);",
          "1177:      ND_PRINT((ndo, \"ResourceLength=%d\\nResourceData=\\n\", rdlen));",
          "1178:      p += 2;",
          "",
          "[Removed Lines]",
          "1170:      ND_TCHECK_16BITS(p);",
          "1175:      ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "1170:      ND_TCHECK_2(p);",
          "1175:      ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:            (float) EXTRACT_BE_16BITS(&stp_bpdu->hello_time) / STP_TIME_BASE,",
          "282:            (float) EXTRACT_BE_16BITS(&stp_bpdu->forward_delay) / STP_TIME_BASE));",
          "285:     ND_PRINT((ndo, \"\\n\\tv3len %d, \", EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET)));",
          "287:     ND_PRINT((ndo, \"MCID Name \"));",
          "288:     if (fn_printzp(ndo, ptr + MST_BPDU_CONFIG_NAME_OFFSET, 32, ndo->ndo_snapend))",
          "289:  goto trunc;",
          "",
          "[Removed Lines]",
          "284:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "[Added Lines]",
          "284:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_4(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 8),",
          "296:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12)));",
          "299:     ND_PRINT((ndo, \"CIST int-root-pathcost %u,\",",
          "300:             EXTRACT_BE_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET)));",
          "",
          "[Removed Lines]",
          "298:     ND_TCHECK_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "[Added Lines]",
          "298:     ND_TCHECK_4(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     ND_PRINT((ndo, \"CIST remaining-hops %d\", ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]));",
          "311:     v3len = EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "312:     if (v3len > MST_BPDU_CONFIG_INFO_LENGTH) {",
          "313:         len = v3len - MST_BPDU_CONFIG_INFO_LENGTH;",
          "",
          "[Removed Lines]",
          "310:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "310:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:     }",
          "357:     ptr = (const u_char *)stp_bpdu;",
          "360:     ND_PRINT((ndo, \"\\n\\tv4len %d, \", EXTRACT_BE_16BITS(ptr + offset)));",
          "361:     ND_PRINT((ndo, \"AUXMCID Name \"));",
          "",
          "[Removed Lines]",
          "358:     ND_TCHECK_32BITS(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "[Added Lines]",
          "358:     ND_TCHECK_4(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:             }",
          "466:             mstp_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "468:             if (length < (sizeof(struct stp_bpdu_) + mstp_len)) {",
          "",
          "[Removed Lines]",
          "465:             ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "465:             ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:             if (stp_bpdu->protocol_version == STP_PROTO_SPB)",
          "475:             {",
          "478:               spb_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "479:               spb_len += 2;",
          "480:               if (length < (sizeof(struct stp_bpdu_) + mstp_len + spb_len) ||",
          "",
          "[Removed Lines]",
          "477:               ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "[Added Lines]",
          "477:               ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "---------------"
        ],
        "print-tftp.c||print-tftp.c": [
          "File: print-tftp.c -> print-tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  if (length < 2)",
          "103:   goto trunc;",
          "105:  opcode = EXTRACT_BE_16BITS(bp);",
          "106:  cp = tok2str(op2str, \"tftp-#%d\", opcode);",
          "107:  ND_PRINT((ndo, \" %s\", cp));",
          "",
          "[Removed Lines]",
          "104:  ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "104:  ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  case DATA:",
          "169:   if (length < 2)",
          "172:   ND_PRINT((ndo, \" block %d\", EXTRACT_BE_16BITS(bp)));",
          "173:   break;",
          "",
          "[Removed Lines]",
          "171:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "171:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   if (length < 2)",
          "180:   ND_PRINT((ndo, \" %s\", tok2str(err2str, \"tftp-err-#%d \\\"\",",
          "181:            EXTRACT_BE_16BITS(bp))));",
          "182:   bp += 2;",
          "",
          "[Removed Lines]",
          "179:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "179:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-udp.c||print-udp.c": [
          "File: print-udp.c -> print-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  u_int ts;",
          "106:  ts = EXTRACT_BE_16BITS(hdr);",
          "107:  if ((ts & 0xf060) != 0) {",
          "110:   ND_PRINT((ndo, \"udp/vt %u %d / %d\",",
          "111:         (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up)),",
          "112:         ts & 0x3ff, ts >> 10));",
          "",
          "[Removed Lines]",
          "105:  ND_TCHECK_16BITS((const u_int *)hdr);",
          "109:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "105:  ND_TCHECK_2((const u_int *)hdr);",
          "109:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   uint32_t i0, i1;",
          "118:   i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "120:   i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "122:   ND_PRINT((ndo, \"udp/vat %u c%d %u%s\",",
          "123:    (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8),",
          "124:    i0 & 0xffff,",
          "",
          "[Removed Lines]",
          "117:   ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "117:   ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  uint32_t i0, i1;",
          "145:  const char * ptype;",
          "148:  i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "150:  i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "152:  dlen = EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8;",
          "153:  ip += 2;",
          "154:  len >>= 2;",
          "",
          "[Removed Lines]",
          "147:  ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "147:  ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   i0 & 0xffff,",
          "181:   i1));",
          "182:  if (ndo->ndo_vflag) {",
          "184:   ND_PRINT((ndo, \" %u\", EXTRACT_BE_32BITS(&((const u_int *)hdr)[2])));",
          "185:   if (hasopt) {",
          "186:    u_int i2, optlen;",
          "187:    do {",
          "189:     i2 = EXTRACT_BE_32BITS(ip);",
          "190:     optlen = (i2 >> 16) & 0xff;",
          "191:     if (optlen == 0 || optlen > len) {",
          "",
          "[Removed Lines]",
          "183:   ND_TCHECK_32BITS(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "183:   ND_TCHECK_4(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:   }",
          "199:   if (hasext) {",
          "200:    u_int i2, extlen;",
          "202:    i2 = EXTRACT_BE_32BITS(ip);",
          "203:    extlen = (i2 & 0xffff) + 1;",
          "204:    if (extlen > len) {",
          "",
          "[Removed Lines]",
          "201:    ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "201:    ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:    }",
          "208:    ip += extlen;",
          "209:   }",
          "212:    ND_PRINT((ndo, \" 0x%04x\", EXTRACT_BE_32BITS(ip) >> 16));",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:   ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "210:   ND_TCHECK_4(ip);",
          "",
          "---------------"
        ],
        "print-vtp.c||print-vtp.c": [
          "File: print-vtp.c -> print-vtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  ND_PRINT((ndo, \", Config Rev %x\", EXTRACT_BE_32BITS(tptr)));",
          "",
          "[Removed Lines]",
          "225:  ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "225:  ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  tptr += 4;",
          "244:  while (tptr < (pptr+length)) {",
          "247:      len = *tptr;",
          "248:      if (len == 0)",
          "249:   break;",
          "",
          "[Removed Lines]",
          "246:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "246:      ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61c422a88caefe986c2bc0a7f2f3028f696fa5cd",
      "candidate_info": {
        "commit_hash": "61c422a88caefe986c2bc0a7f2f3028f696fa5cd",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/61c422a88caefe986c2bc0a7f2f3028f696fa5cd",
        "files": [
          "print-babel.c",
          "print-bgp.c",
          "print-dvmrp.c",
          "print-hncp.c",
          "print-icmp6.c",
          "print-ip6opts.c",
          "print-isakmp.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-pim.c",
          "print-radius.c",
          "print-smb.c",
          "print-telnet.c",
          "print-vjc.c",
          "smbutil.c"
        ],
        "message": "Use more the EXTRACT_U_1() macro (43/n)\n\nIn: if (... p[n] ...) ...",
        "before_after_code_files": [
          "print-babel.c||print-babel.c",
          "print-bgp.c||print-bgp.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-hncp.c||print-hncp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip6opts.c||print-ip6opts.c",
          "print-isakmp.c||print-isakmp.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-pim.c||print-pim.c",
          "print-radius.c||print-radius.c",
          "print-smb.c||print-smb.c",
          "print-telnet.c||print-telnet.c",
          "print-vjc.c||print-vjc.c",
          "smbutil.c||smbutil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pim.c||print-pim.c"
          ],
          "candidate": [
            "print-pim.c||print-pim.c"
          ]
        }
      },
      "candidate_diff": {
        "print-babel.c||print-babel.c": [
          "File: print-babel.c -> print-babel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:         message = cp + 4 + i;",
          "369:         ND_TCHECK_1(message);",
          "371:             ND_PRINT((ndo, ndo->ndo_vflag ? \"\\n\\tPad 1\" : \" pad1\"));",
          "372:             i += 1;",
          "373:             continue;",
          "",
          "[Removed Lines]",
          "370:         if((type = message[0]) == MESSAGE_PAD1) {",
          "",
          "[Added Lines]",
          "370:         if((type = EXTRACT_U_1(message)) == MESSAGE_PAD1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518:                        (EXTRACT_U_1(message + 3) & 0x3f) ? \"/unknown\" : \"\",",
          "519:                        format_prefix(ndo, prefix, plen),",
          "520:                        metric, seqno, format_interval_update(interval)));",
          "522:                     if(message[2] == 1)",
          "523:                         memcpy(v4_prefix, prefix, 16);",
          "524:                     else",
          "",
          "[Removed Lines]",
          "521:                 if(message[3] & 0x80) {",
          "",
          "[Added Lines]",
          "521:                 if(EXTRACT_U_1(message + 3) & 0x80) {",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1351:             goto trunc;",
          "1352:         }",
          "1353:         ND_TCHECK(tptr[1]);",
          "",
          "[Removed Lines]",
          "1350:         if (tptr[0] < BGP_AS_SEG_TYPE_MIN || tptr[0] > BGP_AS_SEG_TYPE_MAX) {",
          "",
          "[Added Lines]",
          "1350:         if (EXTRACT_U_1(tptr) < BGP_AS_SEG_TYPE_MIN || EXTRACT_U_1(tptr) > BGP_AS_SEG_TYPE_MAX) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2860:  while (p < ep) {",
          "2861:   if (!ND_TTEST_1(p))",
          "2862:    break;",
          "2864:    p++;",
          "2865:    continue;",
          "2866:   }",
          "",
          "[Removed Lines]",
          "2863:   if (p[0] != 0xff) {",
          "",
          "[Added Lines]",
          "2863:   if (EXTRACT_U_1(p) != 0xff) {",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   ND_TCHECK_3(bp);",
          "178:   mask = (uint32_t)0xff << 24 | bp[0] << 16 | bp[1] << 8 | bp[2];",
          "179:   width = 1;",
          "181:    width = 2;",
          "183:    width = 3;",
          "185:    width = 4;",
          "187:   ND_PRINT((ndo, \"\\n\\tMask %s\", intoa(htonl(mask))));",
          "",
          "[Removed Lines]",
          "180:   if (bp[0])",
          "182:   if (bp[1])",
          "184:   if (bp[2])",
          "",
          "[Added Lines]",
          "180:   if (EXTRACT_U_1(bp))",
          "182:   if (EXTRACT_U_1(bp + 1))",
          "184:   if (EXTRACT_U_1(bp + 2))",
          "",
          "---------------"
        ],
        "print-hncp.c||print-hncp.c": [
          "File: print-hncp.c -> print-hncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:         case HNCP_DELEGATED_PREFIX: {",
          "616:             int l;",
          "618:                 ND_PRINT((ndo, \" %s\", istr));",
          "619:                 break;",
          "620:             }",
          "",
          "[Removed Lines]",
          "617:             if (bodylen < 9 || bodylen < 9 + (value[8] + 7) / 8) {",
          "",
          "[Added Lines]",
          "617:             if (bodylen < 9 || bodylen < 9 + (EXTRACT_U_1(value + 8) + 7) / 8) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:         case HNCP_ASSIGNED_PREFIX: {",
          "726:             uint8_t prty;",
          "727:             int l;",
          "729:                 ND_PRINT((ndo, \" %s\", istr));",
          "730:                 break;",
          "731:             }",
          "",
          "[Removed Lines]",
          "728:             if (bodylen < 6 || bodylen < 6 + (value[5] + 7) / 8) {",
          "",
          "[Added Lines]",
          "728:             if (bodylen < 6 || bodylen < 6 + (EXTRACT_U_1(value + 5) + 7) / 8) {",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1492:     if (ndo->ndo_vflag) {",
          "1493:         ND_TCHECK(bp[25]);",
          "1495:   ND_PRINT((ndo,\" sflag\"));",
          "1496:  }",
          "1498:   ND_PRINT((ndo,\" robustness=%d\", EXTRACT_U_1(bp + 24) & 0x07));",
          "1499:  }",
          "1500:  if (bp[25] < 128) {",
          "",
          "[Removed Lines]",
          "1494:  if (bp[24] & 0x08) {",
          "1497:  if (bp[24] & 0x07) {",
          "",
          "[Added Lines]",
          "1494:  if (EXTRACT_U_1(bp + 24) & 0x08) {",
          "1497:  if (EXTRACT_U_1(bp + 24) & 0x07) {",
          "",
          "---------------"
        ],
        "print-ip6opts.c||print-ip6opts.c": [
          "File: print-ip6opts.c -> print-ip6opts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   ND_PRINT((ndo, \"(rtalert: trunc)\"));",
          "122:   goto trunc;",
          "123:      }",
          "125:   ND_PRINT((ndo, \"(rtalert: invalid len %d)\", EXTRACT_U_1(bp + i + 1)));",
          "126:   goto trunc;",
          "127:      }",
          "",
          "[Removed Lines]",
          "124:      if (bp[i + 1] != IP6OPT_RTALERT_LEN - 2) {",
          "",
          "[Added Lines]",
          "124:      if (EXTRACT_U_1(bp + i + 1) != IP6OPT_RTALERT_LEN - 2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   ND_PRINT((ndo, \"(jumbo: trunc)\"));",
          "133:   goto trunc;",
          "134:      }",
          "136:   ND_PRINT((ndo, \"(jumbo: invalid len %d)\", EXTRACT_U_1(bp + i + 1)));",
          "137:   goto trunc;",
          "138:      }",
          "",
          "[Removed Lines]",
          "135:      if (bp[i + 1] != IP6OPT_JUMBO_LEN - 2) {",
          "",
          "[Added Lines]",
          "135:      if (EXTRACT_U_1(bp + i + 1) != IP6OPT_JUMBO_LEN - 2) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   ND_PRINT((ndo, \"(homeaddr: trunc)\"));",
          "144:   goto trunc;",
          "145:      }",
          "147:   ND_PRINT((ndo, \"(homeaddr: invalid len %d)\", EXTRACT_U_1(bp + i + 1)));",
          "148:   goto trunc;",
          "149:      }",
          "150:      ND_PRINT((ndo, \"(homeaddr: %s\", ip6addr_string(ndo, bp + i + 2)));",
          "152:   ip6_sopt_print(ndo, bp + i + IP6OPT_HOMEADDR_MINLEN,",
          "153:                                (optlen - IP6OPT_HOMEADDR_MINLEN));",
          "154:      }",
          "",
          "[Removed Lines]",
          "146:      if (bp[i + 1] < IP6OPT_HOMEADDR_MINLEN - 2) {",
          "151:             if (bp[i + 1] > IP6OPT_HOMEADDR_MINLEN - 2) {",
          "",
          "[Added Lines]",
          "146:      if (EXTRACT_U_1(bp + i + 1) < IP6OPT_HOMEADDR_MINLEN - 2) {",
          "151:             if (EXTRACT_U_1(bp + i + 1) > IP6OPT_HOMEADDR_MINLEN - 2) {",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3096:        const u_char *bp2)",
          "3097: {",
          "3098:  ND_TCHECK(bp[0]);",
          "3100:   ND_PRINT((ndo, \"isakmp-nat-keep-alive\"));",
          "3101:   return;",
          "3102:  }",
          "",
          "[Removed Lines]",
          "3099:  if(length == 1 && bp[0]==0xff) {",
          "",
          "[Added Lines]",
          "3099:  if(length == 1 && EXTRACT_U_1(bp)==0xff) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3113:   ND_PRINT((ndo, \"NONESP-encap: \"));",
          "3114:   isakmp_print(ndo, bp+4, length-4, bp2);",
          "3115:   return;",
          "",
          "[Removed Lines]",
          "3112:  if(bp[0]==0 && bp[1]==0 && bp[2]==0 && bp[3]==0) {",
          "",
          "[Added Lines]",
          "3112:  if (EXTRACT_U_1(bp) == 0 && EXTRACT_U_1(bp + 1) == 0 &&",
          "3113:      EXTRACT_U_1(bp + 2) == 0 && EXTRACT_U_1(bp + 3) == 0) {",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1342: #ifdef DLT_JUNIPER_MFR",
          "1344:             if (l2info->pictype == DLT_JUNIPER_MFR &&",
          "1346:                 l2info->cookie_len = 0;",
          "1347:             }",
          "1348: #endif",
          "",
          "[Removed Lines]",
          "1345:                 (p[0] & MFR_BE_MASK) == MFR_BE_MASK) {",
          "",
          "[Added Lines]",
          "1345:                 (EXTRACT_U_1(p) & MFR_BE_MASK) == MFR_BE_MASK) {",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_U_2(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "284:   ND_TCHECK_2(bp + hlen);",
          "286:    ND_PRINT((ndo, \" \"));",
          "288:     ND_PRINT((ndo, \"A\"));",
          "290:     ND_PRINT((ndo, \"H\"));",
          "292:     ND_PRINT((ndo, \"L\"));",
          "294:     ND_PRINT((ndo, \"K\"));",
          "295:   }",
          "",
          "[Removed Lines]",
          "285:   if (bp[hlen] & 0xf0) {",
          "287:    if (bp[hlen] & 0x80)",
          "289:    if (bp[hlen] & 0x40)",
          "291:    if (bp[hlen] & 0x20)",
          "293:    if (bp[hlen] & 0x10)",
          "",
          "[Added Lines]",
          "285:   if (EXTRACT_U_1(bp + hlen) & 0xf0) {",
          "287:    if (EXTRACT_U_1(bp + hlen) & 0x80)",
          "289:    if (EXTRACT_U_1(bp + hlen) & 0x40)",
          "291:    if (EXTRACT_U_1(bp + hlen) & 0x20)",
          "293:    if (EXTRACT_U_1(bp + hlen) & 0x10)",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  int njp;",
          "151:      ((njoin = EXTRACT_BE_U_2(bp + 20)) + EXTRACT_BE_U_2(bp + 22)) == 1) {",
          "152:   int hold;",
          "",
          "[Removed Lines]",
          "150:  if (ND_TTEST2(bp[0], 30) && bp[11] == 1 &&",
          "",
          "[Added Lines]",
          "150:  if (ND_TTEST2(bp[0], 30) && EXTRACT_U_1(bp + 11) == 1 &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:   break;",
          "327:  }",
          "328:  ND_TCHECK(bp[4]);",
          "330:   ND_PRINT((ndo, \" [v%d]\", EXTRACT_U_1(bp + 4) >> 4));",
          "331:  return;",
          "",
          "[Removed Lines]",
          "329:  if ((bp[4] >> 4) != 1)",
          "",
          "[Added Lines]",
          "329:  if ((EXTRACT_U_1(bp + 4) >> 4) != 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "417:   case 3: ND_PRINT((ndo, \" PIMv1+2\"));",
          "418:    break;",
          "419:   }",
          "421:    ND_PRINT((ndo, \" [rsvd=0x%02x]\", EXTRACT_U_1(bp) & 0xfc));",
          "422:   bp += 1;",
          "423:   len -= 1;",
          "",
          "[Removed Lines]",
          "420:   if (bp[0] & 0xfc)",
          "",
          "[Added Lines]",
          "420:   if (EXTRACT_U_1(bp) & 0xfc)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:    ND_TCHECK_6(bp);",
          "435:    ND_PRINT((ndo, \"%c%s%s/%d\", s, EXTRACT_U_1(bp) & 1 ? \"!\" : \"\",",
          "436:              ipaddr_string(ndo, bp + 2), EXTRACT_U_1(bp + 1)));",
          "438:     ND_PRINT((ndo, \" bidir\"));",
          "439:    }",
          "441:     ND_PRINT((ndo, \"[rsvd=0x%02x]\", EXTRACT_U_1(bp) & 0xfc));",
          "442:    }",
          "443:    s = ',';",
          "",
          "[Removed Lines]",
          "437:    if (bp[0] & 0x02) {",
          "440:    if (bp[0] & 0xfc) {",
          "",
          "[Added Lines]",
          "437:    if (EXTRACT_U_1(bp) & 0x02) {",
          "440:    if (EXTRACT_U_1(bp) & 0xfc) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "579:   default:",
          "580:    return -1;",
          "581:   }",
          "583:    return -1;",
          "584:   hdrlen = 2;",
          "585:  } else {",
          "",
          "[Removed Lines]",
          "582:   if (bp[1] != 0)",
          "",
          "[Added Lines]",
          "582:   if (EXTRACT_U_1(bp + 1) != 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "621:   if (af == AF_INET) {",
          "622:    if (!silent) {",
          "623:     ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, bp + 2)));",
          "625:      ND_PRINT((ndo, \"/%u\", EXTRACT_U_1(bp + 1)));",
          "626:    }",
          "627:   }",
          "628:   else if (af == AF_INET6) {",
          "629:    if (!silent) {",
          "630:     ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, bp + 2)));",
          "632:      ND_PRINT((ndo, \"/%u\", EXTRACT_U_1(bp + 1)));",
          "633:    }",
          "634:   }",
          "636:    if (at == pimv2_group) {",
          "637:     ND_PRINT((ndo, \"(0x%02x)\", EXTRACT_U_1(bp)));",
          "638:    } else {",
          "",
          "[Removed Lines]",
          "624:     if (bp[1] != 32)",
          "631:     if (bp[1] != 128)",
          "635:   if (bp[0] && !silent) {",
          "",
          "[Added Lines]",
          "624:     if (EXTRACT_U_1(bp + 1) != 32)",
          "631:     if (EXTRACT_U_1(bp + 1) != 128)",
          "635:   if (EXTRACT_U_1(bp) && !silent) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "640:      EXTRACT_U_1(bp) & 0x04 ? \"S\" : \"\",",
          "641:      EXTRACT_U_1(bp) & 0x02 ? \"W\" : \"\",",
          "642:      EXTRACT_U_1(bp) & 0x01 ? \"R\" : \"\"));",
          "644:      ND_PRINT((ndo, \"+0x%02x\", EXTRACT_U_1(bp) & 0xf8));",
          "645:     }",
          "646:     ND_PRINT((ndo, \")\"));",
          "",
          "[Removed Lines]",
          "643:     if (bp[0] & 0xf8) {",
          "",
          "[Added Lines]",
          "643:     if (EXTRACT_U_1(bp) & 0xf8) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1109:   if (len < 8)",
          "1110:    goto trunc;",
          "1111:   ND_TCHECK_8(bp);",
          "1113:    ND_PRINT((ndo, \" RPT\"));",
          "1114:   ND_PRINT((ndo, \" pref=%u\", EXTRACT_BE_U_4(bp) & 0x7fffffff));",
          "1115:   ND_PRINT((ndo, \" metric=%u\", EXTRACT_BE_U_4(bp + 4)));",
          "",
          "[Removed Lines]",
          "1112:   if (bp[0] & 0x80)",
          "",
          "[Added Lines]",
          "1112:   if (EXTRACT_U_1(bp) & 0x80)",
          "",
          "---------------"
        ],
        "print-radius.c||print-radius.c": [
          "File: print-radius.c -> print-radius.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:        return;",
          "908:    }",
          "909:    ND_TCHECK2(data[0], length);",
          "911:    {",
          "912:       ND_PRINT((ndo, \"ERROR: netmask %u not in range (0..128)\", EXTRACT_U_1(data + 1)));",
          "913:       return;",
          "",
          "[Removed Lines]",
          "910:    if (data[1] > 128)",
          "",
          "[Added Lines]",
          "910:    if (EXTRACT_U_1(data + 1) > 128)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "920:    ND_PRINT((ndo, \"%s/%u\", ip6addr_string(ndo, data2), EXTRACT_U_1(data + 1)));",
          "923:       ND_PRINT((ndo, \" (inconsistent prefix length)\"));",
          "925:    return;",
          "",
          "[Removed Lines]",
          "922:    if (data[1] > 8 * (length - 2))",
          "",
          "[Added Lines]",
          "922:    if (EXTRACT_U_1(data + 1) > 8 * (length - 2))",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:  data = buf + EXTRACT_LE_U_2(w + 12 * 2);",
          "189:  fn = smbfindint(EXTRACT_LE_U_2(w + 14 * 2), trans2_fns);",
          "190:     } else {",
          "192:      ND_PRINT((ndo, \"%s\\n\", fn->name));",
          "193:      ND_PRINT((ndo, \"Trans2Interim\\n\"));",
          "194:      return;",
          "",
          "[Removed Lines]",
          "191:  if (words[0] == 0) {",
          "",
          "[Added Lines]",
          "191:  if (EXTRACT_U_1(words) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "836:  if (nterror)",
          "837:      ND_PRINT((ndo, \"NTError = %s\\n\", nt_errstr(nterror)));",
          "838:     } else {",
          "840:      ND_PRINT((ndo, \"SMBError = %s\\n\", smb_errstr(EXTRACT_U_1(buf + 5),",
          "841:         EXTRACT_LE_U_2(buf + 7))));",
          "842:     }",
          "",
          "[Removed Lines]",
          "839:  if (buf[5])",
          "",
          "[Added Lines]",
          "839:  if (EXTRACT_U_1(buf + 5))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1198:    if (p == NULL)",
          "1199:        goto out;",
          "1200:    ND_TCHECK(*p);",
          "1202:        ND_PRINT((ndo, \"<GROUP> \"));",
          "1203:    switch (p[0] & 0x60) {",
          "1204:    case 0x00: ND_PRINT((ndo, \"B \")); break;",
          "",
          "[Removed Lines]",
          "1201:    if (p[0] & 0x80)",
          "",
          "[Added Lines]",
          "1201:    if (EXTRACT_U_1(p) & 0x80)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1206:    case 0x40: ND_PRINT((ndo, \"M \")); break;",
          "1207:    case 0x60: ND_PRINT((ndo, \"_ \")); break;",
          "1208:    }",
          "1210:        ND_PRINT((ndo, \"<DEREGISTERING> \"));",
          "1212:        ND_PRINT((ndo, \"<CONFLICT> \"));",
          "1214:        ND_PRINT((ndo, \"<ACTIVE> \"));",
          "1216:        ND_PRINT((ndo, \"<PERMANENT> \"));",
          "1217:    ND_PRINT((ndo, \"\\n\"));",
          "1218:    p += 2;",
          "",
          "[Removed Lines]",
          "1209:    if (p[0] & 0x10)",
          "1211:    if (p[0] & 0x08)",
          "1213:    if (p[0] & 0x04)",
          "1215:    if (p[0] & 0x02)",
          "",
          "[Added Lines]",
          "1209:    if (EXTRACT_U_1(p) & 0x10)",
          "1211:    if (EXTRACT_U_1(p) & 0x08)",
          "1213:    if (EXTRACT_U_1(p) & 0x04)",
          "1215:    if (EXTRACT_U_1(p) & 0x02)",
          "",
          "---------------"
        ],
        "print-telnet.c||print-telnet.c": [
          "File: print-telnet.c -> print-telnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:   p = sp;",
          "440:   while (length > (u_int)(p + 1 - sp)) {",
          "441:    ND_TCHECK_2(p);",
          "443:     break;",
          "444:    p++;",
          "445:   }",
          "",
          "[Removed Lines]",
          "442:    if (p[0] == IAC && p[1] == SE)",
          "",
          "[Added Lines]",
          "442:    if (EXTRACT_U_1(p) == IAC && EXTRACT_U_1(p + 1) == SE)",
          "",
          "---------------"
        ],
        "print-vjc.c||print-vjc.c": [
          "File: print-vjc.c -> print-vjc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <netdissect-stdinc.h>",
          "32: #include \"netdissect.h\"",
          "33: #include \"slcompress.h\"",
          "34: #include \"ppp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"extract.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   if (ndo->ndo_eflag)",
          "101:    ND_PRINT((ndo, \"(vjc type=compressed TCP) \"));",
          "102:   for (i = 0; i < 8; i++) {",
          "104:     ND_PRINT((ndo, \"%c\", \"?CI?SAWU\"[i]));",
          "105:   }",
          "107:    ND_PRINT((ndo, \" \"));",
          "108:   ND_PRINT((ndo, \"C=0x%02x \", bp[2]));",
          "109:   ND_PRINT((ndo, \"sum=0x%04x \", *(const u_short *)(bp + 3)));",
          "",
          "[Removed Lines]",
          "103:    if (bp[1] & (0x80 >> i))",
          "106:   if (bp[1])",
          "",
          "[Added Lines]",
          "104:    if (EXTRACT_U_1(bp + 1) & (0x80 >> i))",
          "107:   if (EXTRACT_U_1(bp + 1))",
          "",
          "---------------"
        ],
        "smbutil.c||smbutil.c": [
          "File: smbutil.c -> smbutil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  ND_TCHECK_2(in);",
          "146:  if (in + 1 >= maxbuf)",
          "150:      return(0);",
          "151:  }",
          "",
          "[Removed Lines]",
          "148:  if (in[0] < 'A' || in[0] > 'P' || in[1] < 'A' || in[1] > 'P') {",
          "",
          "[Added Lines]",
          "148:  if (EXTRACT_U_1(in) < 'A' || EXTRACT_U_1(in) > 'P' ||",
          "149:      EXTRACT_U_1(in + 1) < 'A' || EXTRACT_U_1(in + 1) > 'P') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:      for (;;) {",
          "368:   ND_TCHECK(sp[0]);",
          "371:       break;",
          "372:   sp++;",
          "373:      }",
          "",
          "[Removed Lines]",
          "370:   if (sp[0] == 0)",
          "",
          "[Added Lines]",
          "371:   if (EXTRACT_U_1(sp) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:      for (;;) {",
          "377:   ND_TCHECK_2(sp);",
          "380:       break;",
          "381:   sp += 2;",
          "382:      }",
          "",
          "[Removed Lines]",
          "379:   if (sp[0] == 0 && sp[1] == 0)",
          "",
          "[Added Lines]",
          "380:   if (EXTRACT_U_1(sp) == 0 && EXTRACT_U_1(sp + 1) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "396:      if (ND_ISPRINT(EXTRACT_U_1(s)))",
          "397:   buf[l] = s[0];",
          "398:      else {",
          "400:       break;",
          "401:   buf[l] = '.';",
          "402:      }",
          "",
          "[Removed Lines]",
          "399:   if (s[0] == 0)",
          "",
          "[Added Lines]",
          "400:   if (EXTRACT_U_1(s) == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "414:   buf[l] = s[0];",
          "415:      } else {",
          "418:       break;",
          "419:   buf[l] = '.';",
          "420:      }",
          "",
          "[Removed Lines]",
          "417:   if (s[0] == 0 && s[1] == 0)",
          "",
          "[Added Lines]",
          "418:   if (EXTRACT_U_1(s) == 0 && EXTRACT_U_1(s + 1) == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
      "candidate_info": {
        "commit_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "files": [
          "print-aodv.c",
          "print-bgp.c",
          "print-domain.c",
          "print-esp.c",
          "print-icmp6.c",
          "print-ip6.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-ldp.c",
          "print-lwres.c",
          "print-olsr.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ripng.c",
          "print-rsvp.c"
        ],
        "message": "Use nd_ipv6 rather than struct in6_addr in packet-layout structures.\n\nAlso, use it, and nd_ipv4, in sizeof() operations.",
        "before_after_code_files": [
          "print-aodv.c||print-aodv.c",
          "print-bgp.c||print-bgp.c",
          "print-domain.c||print-domain.c",
          "print-esp.c||print-esp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip6.c||print-ip6.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-ldp.c||print-ldp.c",
          "print-lwres.c||print-lwres.c",
          "print-olsr.c||print-olsr.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ripng.c||print-ripng.c",
          "print-rsvp.c||print-rsvp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-pim.c||print-pim.c"
          ],
          "candidate": [
            "print-pim.c||print-pim.c"
          ]
        }
      },
      "candidate_diff": {
        "print-aodv.c||print-aodv.c": [
          "File: print-aodv.c -> print-aodv.c"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     char *pos = addr;",
          "635:     switch(addr_length) {",
          "638:         nd_snprintf(pos, sizeof(addr), \"%s\", ipaddr_string(ndo, pptr));",
          "639:         break;",
          "642:         nd_snprintf(pos, sizeof(addr), \"%s\", ip6addr_string(ndo, pptr));",
          "643:         break;",
          "644:     default:",
          "",
          "[Removed Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     pptr += 8;",
          "892:     vpn_ip = pptr;",
          "898:     nd_snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "899:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "",
          "[Removed Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "893:     pptr += sizeof(struct in_addr);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "893:     pptr += sizeof(nd_ipv4);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1717:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1718:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1720:                         ND_PRINT(\"invalid len\");",
          "1721:                         tlen = 0;",
          "1722:                     } else {",
          "1724:                         ND_PRINT(\"%s\",ipaddr_string(ndo, tptr));",
          "1727:                     }",
          "1728:                     break;",
          "1729:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1730:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1731:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1733:                         ND_PRINT(\"invalid len\");",
          "1734:                         tlen = 0;",
          "1735:                     } else {",
          "1736:                         ND_TCHECK_LEN(tptr,",
          "1738:                         ND_PRINT(\"RD: %s, %s\",",
          "1739:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1740:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1743:                     }",
          "1744:                     break;",
          "1745:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1746:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1747:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1748:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1750:                         ND_PRINT(\"invalid len\");",
          "1751:                         tlen = 0;",
          "1752:                     } else {",
          "1754:                         ND_PRINT(\"%s\", ip6addr_string(ndo, tptr));",
          "1757:                     }",
          "1758:                     break;",
          "1759:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1760:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1761:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1763:                         ND_PRINT(\"invalid len\");",
          "1764:                         tlen = 0;",
          "1765:                     } else {",
          "1766:                         ND_TCHECK_LEN(tptr,",
          "1768:                         ND_PRINT(\"RD: %s, %s\",",
          "1769:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1770:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1773:                     }",
          "1774:                     break;",
          "1775:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1776:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1777:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1778:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1780:                         ND_PRINT(\"invalid len\");",
          "1781:                         tlen = 0;",
          "1782:                     } else {",
          "1784:                         ND_PRINT(\"%s\", ipaddr_string(ndo, tptr));",
          "1787:                     }",
          "1788:                     break;",
          "1789:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "",
          "[Removed Lines]",
          "1719:                     if (tlen < sizeof(struct in_addr)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1725:                         tlen -= sizeof(struct in_addr);",
          "1726:                         tptr += sizeof(struct in_addr);",
          "1732:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(struct in6_addr)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1755:                         tlen -= sizeof(struct in6_addr);",
          "1756:                         tptr += sizeof(struct in6_addr);",
          "1762:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(struct in_addr)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1785:                         tlen -= (sizeof(struct in_addr));",
          "1786:                         tptr += (sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "1719:                     if (tlen < sizeof(nd_ipv4)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1725:                         tlen -= sizeof(nd_ipv4);",
          "1726:                         tptr += sizeof(nd_ipv4);",
          "1732:                     if (tlen < sizeof(nd_ipv4)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(nd_ipv4) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(nd_ipv6)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "1755:                         tlen -= sizeof(nd_ipv6);",
          "1756:                         tptr += sizeof(nd_ipv6);",
          "1762:                     if (tlen < sizeof(nd_ipv6)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(nd_ipv6) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(nd_ipv4)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1785:                         tlen -= (sizeof(nd_ipv4));",
          "1786:                         tptr += (sizeof(nd_ipv4));",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:  switch (typ) {",
          "433:  case T_A:",
          "435:    return(NULL);",
          "436:   ND_PRINT(\" %s\", intoa(EXTRACT_IPV4_TO_NETWORK_ORDER(cp)));",
          "437:   break;",
          "",
          "[Removed Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(struct in_addr)))",
          "",
          "[Added Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv4)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:      {",
          "503:   char ntop_buf[INET6_ADDRSTRLEN];",
          "506:    return(NULL);",
          "507:   ND_PRINT(\" %s\",",
          "508:       addrtostr6(cp, ntop_buf, sizeof(ntop_buf)));",
          "",
          "[Removed Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(struct in6_addr)))",
          "",
          "[Added Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv6)))",
          "",
          "---------------"
        ],
        "print-esp.c||print-esp.c": [
          "File: print-esp.c -> print-esp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "718:        sa->daddr_version == 6 &&",
          "719:        UNALIGNED_MEMCMP(&sa->daddr.in6, &ip6->ip6_dst,",
          "721:     break;",
          "722:    }",
          "723:   }",
          "",
          "[Removed Lines]",
          "720:        sizeof(struct in6_addr)) == 0) {",
          "",
          "[Added Lines]",
          "720:        sizeof(nd_ipv6)) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "734:        sa->daddr_version == 4 &&",
          "735:        UNALIGNED_MEMCMP(&sa->daddr.in4, &ip->ip_dst,",
          "737:     break;",
          "738:    }",
          "739:   }",
          "",
          "[Removed Lines]",
          "736:        sizeof(struct in_addr)) == 0) {",
          "",
          "[Added Lines]",
          "736:        sizeof(nd_ipv4)) == 0) {",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: #define ND_OPT_DNSSL   31",
          "297: };",
          "299: #define ND_OPT_PI_FLAG_ONLINK  0x80",
          "",
          "[Removed Lines]",
          "289:  nd_uint8_t  nd_opt_pi_type;",
          "290:  nd_uint8_t  nd_opt_pi_len;",
          "291:  nd_uint8_t  nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t  nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t  nd_opt_pi_valid_time;",
          "294:  nd_uint32_t  nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t  nd_opt_pi_reserved2;",
          "296:  struct in6_addr nd_opt_pi_prefix;",
          "",
          "[Added Lines]",
          "289:  nd_uint8_t nd_opt_pi_type;",
          "290:  nd_uint8_t nd_opt_pi_len;",
          "291:  nd_uint8_t nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t nd_opt_pi_valid_time;",
          "294:  nd_uint32_t nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t nd_opt_pi_reserved2;",
          "296:  nd_ipv6  nd_opt_pi_prefix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275:                 break;",
          "1276:  case ICMP6_HADISCOV_REPLY:",
          "1277:   if (ndo->ndo_vflag) {",
          "1279:    const u_char *cp;",
          "1281:    ND_TCHECK_2(dp->icmp6_data16[0]);",
          "1282:    ND_PRINT(\", id 0x%04x\", EXTRACT_BE_U_2(dp->icmp6_data16[0]));",
          "1283:    cp = (const u_char *)dp + length;",
          "1285:    for (; (const u_char *)in6 < cp; in6++) {",
          "1286:     ND_TCHECK_SIZE(in6);",
          "1287:     ND_PRINT(\", %s\", ip6addr_string(ndo, in6));",
          "",
          "[Removed Lines]",
          "1278:    const struct in6_addr *in6;",
          "1284:    in6 = (const struct in6_addr *)(dp + 1);",
          "",
          "[Added Lines]",
          "1278:    const nd_ipv6 *in6;",
          "1284:    in6 = (const nd_ipv6 *)(dp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1511:    opri = (const struct nd_opt_route_info *)op;",
          "1512:    ND_TCHECK_4(opri->nd_opt_rti_lifetime);",
          "1513:    memset(&in6, 0, sizeof(in6));",
          "1515:    switch (opt_len) {",
          "1516:    case 1:",
          "1517:     break;",
          "",
          "[Removed Lines]",
          "1514:    in6p = (const struct in6_addr *)(opri + 1);",
          "",
          "[Added Lines]",
          "1514:    in6p = (const nd_ipv6 *)(opri + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:                     ND_PRINT(\" [invalid number of groups]\");",
          "1596:                     return;",
          "1597:      }",
          "1599:             ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4));",
          "1600:      ND_PRINT(\" %s\", tok2str(mldv2report2str, \" [v2-report-#%u]\",",
          "1601:                                          EXTRACT_U_1(bp + group)));",
          "1602:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "1605:                     ND_PRINT(\" [invalid number of sources %u]\", nsrcs);",
          "1606:                     return;",
          "1607:      }",
          "",
          "[Removed Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(struct in6_addr));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "",
          "[Added Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(nd_ipv6));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(nd_ipv6))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1612:                     ND_PRINT(\" {\");",
          "1613:                 for (j = 0; j < nsrcs; j++) {",
          "1617:   }",
          "1618:                 ND_PRINT(\" }\");",
          "1619:             }",
          "1622:      ND_PRINT(\"]\");",
          "1623:         }",
          "1624:     }",
          "",
          "[Removed Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(struct in6_addr)),",
          "1615:                                   sizeof(struct in6_addr));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(struct in6_addr))));",
          "1621:             group += 20 + nsrcs * sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(nd_ipv6)),",
          "1615:                                   sizeof(nd_ipv6));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(nd_ipv6))));",
          "1621:             group += 20 + nsrcs * sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1652:     if (ndo->ndo_vflag) {",
          "1653:             ND_PRINT(\" [max resp delay=%u]\", mrt);",
          "1654:     }",
          "1656:     ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + 8));",
          "1658:     if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1675:     ND_TCHECK_2(bp + 26);",
          "1676:     nsrcs = EXTRACT_BE_U_2(bp + 26);",
          "1677:     if (nsrcs > 0) {",
          "1679:      ND_PRINT(\" [invalid number of sources]\");",
          "1680:  else if (ndo->ndo_vflag > 1) {",
          "1681:      ND_PRINT(\" {\");",
          "1682:      for (i = 0; i < nsrcs; i++) {",
          "1686:      }",
          "1687:      ND_PRINT(\" }\");",
          "1688:  } else",
          "",
          "[Removed Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(struct in6_addr))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(struct in6_addr)),",
          "1684:                               sizeof(struct in6_addr));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(struct in6_addr))));",
          "",
          "[Added Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(nd_ipv6))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(nd_ipv6)),",
          "1684:                               sizeof(nd_ipv6));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(nd_ipv6))));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1813:   switch (EXTRACT_U_1(ni6->ni_code)) {",
          "1814:   case ICMP6_NI_SUBJ_IPV6:",
          "1816:     break;",
          "1818:     if (ndo->ndo_vflag)",
          "1819:      ND_PRINT(\", invalid subject len\");",
          "1820:     break;",
          "",
          "[Removed Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in6_addr)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv6)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1840:     dnsname_print(ndo, cp, ep);",
          "1841:    break;",
          "1842:   case ICMP6_NI_SUBJ_IPV4:",
          "1844:     break;",
          "1846:     if (ndo->ndo_vflag)",
          "1847:      ND_PRINT(\", invalid subject len\");",
          "1848:     break;",
          "",
          "[Removed Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in_addr)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(struct in_addr)) {",
          "",
          "[Added Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv4)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(nd_ipv4)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1945:    ND_PRINT(\"node addresses\");",
          "1946:    i = sizeof(*ni6);",
          "1947:    while (i < siz) {",
          "1949:      break;",
          "1950:     ND_PRINT(\" %s(%u)\",",
          "1951:         ip6addr_string(ndo, bp + i + sizeof(uint32_t)),",
          "1952:         EXTRACT_BE_U_4(bp + i));",
          "1954:    }",
          "1955:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "1956:    if (!i)",
          "",
          "[Removed Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(struct in6_addr) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(nd_ipv6) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ip6.c||print-ip6.c": [
          "File: print-ip6.c -> print-ip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: done:",
          "153: trunc:",
          "155: }",
          "",
          "[Removed Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(nd_ipv6));",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  switch (IP_V(ip)) {",
          "781:  case 4:",
          "782:   cookiecache[ninitiator].version = 4;",
          "785:   break;",
          "786:  case 6:",
          "787:   ip6 = (const struct ip6_hdr *)bp2;",
          "788:   cookiecache[ninitiator].version = 6;",
          "791:   break;",
          "792:  default:",
          "793:   return;",
          "",
          "[Removed Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(struct in_addr));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(struct in_addr));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(struct in6_addr));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(nd_ipv4));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(nd_ipv4));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(nd_ipv6));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:   if (cookiecache[i].version != 4)",
          "811:    return 0;",
          "812:   if (initiator) {",
          "814:     return 1;",
          "815:   } else {",
          "817:     return 1;",
          "818:   }",
          "819:   break;",
          "",
          "[Removed Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(struct in_addr)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(struct in_addr)) == 0)",
          "",
          "[Added Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(nd_ipv4)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(nd_ipv4)) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:    return 0;",
          "823:   ip6 = (const struct ip6_hdr *)bp2;",
          "824:   if (initiator) {",
          "826:     return 1;",
          "827:   } else {",
          "829:     return 1;",
          "830:   }",
          "831:   break;",
          "",
          "[Removed Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(struct in6_addr)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(struct in6_addr)) == 0)",
          "",
          "[Added Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(nd_ipv6)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(nd_ipv6)) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1402:    if (len < 8)",
          "1403:     ND_PRINT(\" len=%u [bad: < 8]\", len);",
          "1404:    else {",
          "1406:     ND_PRINT(\" len=%u %s/%u.%u.%u.%u\", len,",
          "1407:        ipaddr_string(ndo, data),",
          "1408:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1),",
          "",
          "[Removed Lines]",
          "1405:     mask = data + sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "1405:     mask = data + sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424:    if (len < 32)",
          "1425:     ND_PRINT(\" len=%u [bad: < 32]\", len);",
          "1426:    else {",
          "1429:     ND_PRINT(\" len=%u %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "1430:        ip6addr_string(ndo, data),",
          "",
          "[Removed Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:    else {",
          "1443:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1444:        ipaddr_string(ndo, data),",
          "1446:    }",
          "1447:    len = 0;",
          "1448:    break;",
          "",
          "[Removed Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1452:    else {",
          "1453:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1454:        ip6addr_string(ndo, data),",
          "1456:    }",
          "1457:    len = 0;",
          "1458:    break;",
          "",
          "[Removed Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(struct in6_addr)));",
          "",
          "[Added Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(nd_ipv6)));",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:                 break;",
          "1930:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR:",
          "1931:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR:",
          "1933:                     ND_PRINT(\", %s\", ipaddr_string(ndo, tptr));",
          "1934:                 break;",
          "1935:             case ISIS_SUBTLV_EXT_IS_REACH_MAX_LINK_BW :",
          "",
          "[Removed Lines]",
          "1932:                 if (subtlv_len >= sizeof(struct in_addr))",
          "",
          "[Added Lines]",
          "1932:                 if (subtlv_len >= sizeof(nd_ipv4))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2825:      break;",
          "2827:  case ISIS_TLV_IP6ADDR:",
          "2831:                 ND_PRINT(\"\\n\\t      IPv6 interface address: %s\",",
          "2832:          ip6addr_string(ndo, tptr));",
          "2836:      }",
          "2837:      break;",
          "2838:  case ISIS_TLV_AUTH:",
          "",
          "[Removed Lines]",
          "2828:      while (tmp>=sizeof(struct in6_addr)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "2834:   tptr += sizeof(struct in6_addr);",
          "2835:   tmp -= sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "2828:      while (tmp>=sizeof(nd_ipv6)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "2834:   tptr += sizeof(nd_ipv6);",
          "2835:   tmp -= sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2958:       break;",
          "2960:  case ISIS_TLV_TE_ROUTER_ID:",
          "2962:      ND_PRINT(\"\\n\\t      Traffic Engineering Router ID: %s\", ipaddr_string(ndo, pptr));",
          "2963:      break;",
          "2965:  case ISIS_TLV_IPADDR:",
          "2968:   ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "2971:      }",
          "2972:      break;",
          "",
          "[Removed Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "2966:      while (tmp>=sizeof(struct in_addr)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2969:   tptr += sizeof(struct in_addr);",
          "2970:   tmp -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "2966:      while (tmp>=sizeof(nd_ipv4)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2969:   tptr += sizeof(nd_ipv4);",
          "2970:   tmp -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2992:      tptr++;",
          "2993:      tmp--;",
          "2996:          break;",
          "2998:      ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "3003:          break;",
          "3005:      ND_PRINT(\"\\n\\t      IPv4 neighbor address: %s\", ipaddr_string(ndo, tptr));",
          "3009:      while (tmp>=4) {",
          "3010:                 ND_TCHECK_4(tptr);",
          "",
          "[Removed Lines]",
          "2995:      if (tmp < sizeof(struct in_addr))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2999:      tptr+=sizeof(struct in_addr);",
          "3000:      tmp-=sizeof(struct in_addr);",
          "3002:      if (tmp < sizeof(struct in_addr))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "3006:      tptr+=sizeof(struct in_addr);",
          "3007:      tmp-=sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2995:      if (tmp < sizeof(nd_ipv4))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2999:      tptr+=sizeof(nd_ipv4);",
          "3000:      tmp-=sizeof(nd_ipv4);",
          "3002:      if (tmp < sizeof(nd_ipv4))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "3006:      tptr+=sizeof(nd_ipv4);",
          "3007:      tmp-=sizeof(nd_ipv4);",
          "",
          "---------------"
        ],
        "print-ldp.c||print-ldp.c": [
          "File: print-ldp.c -> print-ldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:                tok2str(af_values, \"Unknown (%u)\", af));",
          "304:         switch (af) {",
          "305:         case AFNUM_INET:",
          "308:   ND_PRINT(\" %s\", ipaddr_string(ndo, tptr));",
          "311:      }",
          "312:             break;",
          "313:         case AFNUM_INET6:",
          "316:   ND_PRINT(\" %s\", ip6addr_string(ndo, tptr));",
          "319:      }",
          "320:             break;",
          "321:         default:",
          "",
          "[Removed Lines]",
          "306:      while(tlv_tlen >= sizeof(struct in_addr)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "309:   tlv_tlen-=sizeof(struct in_addr);",
          "310:   tptr+=sizeof(struct in_addr);",
          "314:      while(tlv_tlen >= sizeof(struct in6_addr)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "317:   tlv_tlen-=sizeof(struct in6_addr);",
          "318:   tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "306:      while(tlv_tlen >= sizeof(nd_ipv4)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "309:   tlv_tlen-=sizeof(nd_ipv4);",
          "310:   tptr+=sizeof(nd_ipv4);",
          "314:      while(tlv_tlen >= sizeof(nd_ipv6)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "317:   tlv_tlen-=sizeof(nd_ipv6);",
          "318:   tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-lwres.c||print-lwres.c": [
          "File: print-lwres.c -> print-lwres.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   if (l < 4)",
          "282:    return -1;",
          "283:   ND_PRINT(\" %s\", ipaddr_string(ndo, p));",
          "285:   break;",
          "287:   if (l < 16)",
          "288:    return -1;",
          "289:   ND_PRINT(\" %s\", ip6addr_string(ndo, p));",
          "291:   break;",
          "292:  default:",
          "293:   ND_PRINT(\" %u/\", EXTRACT_BE_U_4(ap->family));",
          "",
          "[Removed Lines]",
          "284:   p += sizeof(struct in_addr);",
          "290:   p += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "284:   p += sizeof(nd_ipv4);",
          "290:   p += sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-olsr.c||print-olsr.c": [
          "File: print-olsr.c -> print-olsr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:     ND_PRINT(\"\\n\\t      neighbor\\n\\t\\t\");",
          "291:     neighbor = 1;",
          "296:             return (-1);",
          "299:         ND_PRINT(\"%s%s\", ipaddr_string(ndo, msg_data),",
          "300:                neighbor % 4 == 0 ? \"\\n\\t\\t\" : \" \");",
          "304:     }",
          "305:     return (0);",
          "306: }",
          "",
          "[Removed Lines]",
          "293:     while (hello_len >= sizeof(struct in_addr)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(struct in_addr)))",
          "302:         msg_data += sizeof(struct in_addr);",
          "303:         hello_len -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "293:     while (hello_len >= sizeof(nd_ipv4)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(nd_ipv4)))",
          "302:         msg_data += sizeof(nd_ipv4);",
          "303:         hello_len -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:         case OLSR_MID_MSG:",
          "516:         {",
          "519:             if (is_ipv6)",
          "522:             while (msg_tlen >= addr_size) {",
          "523:                 ND_TCHECK_LEN(msg_data, addr_size);",
          "",
          "[Removed Lines]",
          "517:             size_t addr_size = sizeof(struct in_addr);",
          "520:                 addr_size = sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "517:             size_t addr_size = sizeof(nd_ipv4);",
          "520:                 addr_size = sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:      } llsa_priandopt;",
          "209: #define llsa_priority llsa_priandopt.pri",
          "210: #define llsa_options llsa_priandopt.opt",
          "212:      nd_uint32_t llsa_nprefix;",
          "213:      struct lsa6_prefix llsa_prefix[1];",
          "214:  } un_llsa;",
          "",
          "[Removed Lines]",
          "211:      struct in6_addr llsa_lladdr;",
          "",
          "[Added Lines]",
          "211:      nd_ipv6 llsa_lladdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:  lsa_length -= sizeof (*lsapp) - IPV6_ADDR_LEN_BYTES;",
          "420:  ND_TCHECK_LEN(lsapp, sizeof(*lsapp) - IPV6_ADDR_LEN_BYTES);",
          "421:  wordlen = (EXTRACT_U_1(lsapp->lsa_p_len) + 31) / 32;",
          "423:   ND_PRINT(\" bogus prefixlen /%u\", EXTRACT_U_1(lsapp->lsa_p_len));",
          "424:   goto trunc;",
          "425:  }",
          "",
          "[Removed Lines]",
          "422:  if (wordlen * 4 > sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "422:  if (wordlen * 4 > sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:   tptr += bytelen;",
          "604:   if ((flags32 & ASLA_FLAG_FWDADDR) != 0) {",
          "608:    if (lsa_length < sizeof (*fwdaddr6))",
          "609:     return (1);",
          "610:    lsa_length -= sizeof (*fwdaddr6);",
          "",
          "[Removed Lines]",
          "605:    const struct in6_addr *fwdaddr6;",
          "607:    fwdaddr6 = (const struct in6_addr *)tptr;",
          "",
          "[Added Lines]",
          "605:    const nd_ipv6 *fwdaddr6;",
          "607:    fwdaddr6 = (const nd_ipv6 *)tptr;",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:      switch (EXTRACT_BE_U_2(spm->pgms_nla_afi)) {",
          "232:      case AFNUM_INET:",
          "234:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "236:   break;",
          "237:      case AFNUM_INET6:",
          "239:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "241:   break;",
          "242:      default:",
          "243:   goto trunc;",
          "",
          "[Removed Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "235:   bp += sizeof(struct in_addr);",
          "238:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "240:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "235:   bp += sizeof(nd_ipv4);",
          "238:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "240:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:      switch (EXTRACT_BE_U_2(polr->pgmp_nla_afi)) {",
          "275:      case AFNUM_INET:",
          "277:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "279:   break;",
          "280:      case AFNUM_INET6:",
          "282:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "284:   break;",
          "285:      default:",
          "286:   goto trunc;",
          "",
          "[Removed Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "278:   bp += sizeof(struct in_addr);",
          "281:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "283:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "278:   bp += sizeof(nd_ipv4);",
          "281:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "283:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:      switch (EXTRACT_BE_U_2(nak->pgmn_source_afi)) {",
          "346:      case AFNUM_INET:",
          "348:   addrtostr(bp, source_buf, sizeof(source_buf));",
          "350:   break;",
          "351:      case AFNUM_INET6:",
          "353:   addrtostr6(bp, source_buf, sizeof(source_buf));",
          "355:   break;",
          "356:      default:",
          "357:   goto trunc;",
          "",
          "[Removed Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "349:   bp += sizeof(struct in_addr);",
          "352:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "354:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "349:   bp += sizeof(nd_ipv4);",
          "352:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "354:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:      ND_TCHECK_2(bp);",
          "367:      switch (EXTRACT_BE_U_2(bp)) {",
          "368:      case AFNUM_INET:",
          "370:   addrtostr(bp, group_buf, sizeof(group_buf));",
          "372:   break;",
          "373:      case AFNUM_INET6:",
          "375:   addrtostr6(bp, group_buf, sizeof(group_buf));",
          "377:   break;",
          "378:      default:",
          "379:   goto trunc;",
          "",
          "[Removed Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "371:   bp += sizeof(struct in_addr);",
          "374:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "376:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "371:   bp += sizeof(nd_ipv4);",
          "374:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "376:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:       bp += 2+2;",
          "590:       switch (nla_afnum) {",
          "591:       case AFNUM_INET:",
          "593:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "594:            opt_len, PGM_OPT_REDIRECT_FIXED_LEN);",
          "595:        return;",
          "596:    }",
          "598:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "601:    break;",
          "602:       case AFNUM_INET6:",
          "604:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "605:            PGM_OPT_REDIRECT_FIXED_LEN, opt_len);",
          "606:        return;",
          "607:    }",
          "609:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "612:    break;",
          "613:       default:",
          "614:    goto trunc;",
          "",
          "[Removed Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "599:    bp += sizeof(struct in_addr);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "610:    bp += sizeof(struct in6_addr);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "599:    bp += sizeof(nd_ipv4);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "610:    bp += sizeof(nd_ipv6);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:       bp += 2+2;",
          "747:       switch (nla_afnum) {",
          "748:       case AFNUM_INET:",
          "750:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "751:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "752:        return;",
          "753:    }",
          "755:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "758:    break;",
          "759:       case AFNUM_INET6:",
          "761:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "762:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "763:        return;",
          "764:    }",
          "766:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "769:    break;",
          "770:       default:",
          "771:    goto trunc;",
          "",
          "[Removed Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "756:    bp += sizeof(struct in_addr);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "767:    bp += sizeof(struct in6_addr);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "756:    bp += sizeof(nd_ipv4);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "767:    bp += sizeof(nd_ipv6);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "789:       bp += 2+2;",
          "790:       switch (nla_afnum) {",
          "791:       case AFNUM_INET:",
          "793:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "794:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "795:        return;",
          "796:    }",
          "798:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "801:    break;",
          "802:       case AFNUM_INET6:",
          "804:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "805:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "806:        return;",
          "807:    }",
          "809:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "812:    break;",
          "813:       default:",
          "814:    goto trunc;",
          "",
          "[Removed Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "799:    bp += sizeof(struct in_addr);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "810:    bp += sizeof(struct in6_addr);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "799:    bp += sizeof(nd_ipv4);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "810:    bp += sizeof(nd_ipv6);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   return;",
          "170:  }",
          "173:   goto trunc;",
          "175:  if (ndo->ndo_vflag > 1)",
          "176:   ND_PRINT(\"\\n\");",
          "177:  ND_PRINT(\" Upstream Nbr: %s\", ipaddr_string(ndo, bp));",
          "",
          "[Removed Lines]",
          "172:  if (len < sizeof(struct in_addr))",
          "174:  ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "172:  if (len < sizeof(nd_ipv4))",
          "174:  ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:   if (len < 4)",
          "204:    goto trunc;",
          "206:   ND_PRINT(\"\\n\\tGroup: %s\", ipaddr_string(ndo, bp));",
          "207:   bp += 4;",
          "208:   len -= 4;",
          "209:   if (len < 4)",
          "210:    goto trunc;",
          "212:   if (EXTRACT_BE_U_4(bp) != 0xffffffff)",
          "213:    ND_PRINT(\"/%s\", ipaddr_string(ndo, bp));",
          "214:   bp += 4;",
          "",
          "[Removed Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "211:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "211:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:      ipaddr_string(ndo, bp + 24));",
          "291:   break;",
          "292:  case PIMV1_TYPE_REGISTER_STOP:",
          "294:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 8),",
          "295:      ipaddr_string(ndo, bp + 12));",
          "296:   break;",
          "",
          "[Removed Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:   }",
          "306:   break;",
          "307:  case PIMV1_TYPE_ASSERT:",
          "309:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 16),",
          "310:      ipaddr_string(ndo, bp + 8));",
          "311:   if (EXTRACT_BE_U_4(bp + 12) != 0xffffffff)",
          "",
          "[Removed Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:   switch (EXTRACT_U_1(bp)) {",
          "576:   case 1:",
          "577:    af = AF_INET;",
          "579:    break;",
          "580:   case 2:",
          "581:    af = AF_INET6;",
          "583:    break;",
          "584:   default:",
          "585:    return -1;",
          "",
          "[Removed Lines]",
          "578:    addr_len = (u_int)sizeof(struct in_addr);",
          "582:    addr_len = (u_int)sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "578:    addr_len = (u_int)sizeof(nd_ipv4);",
          "582:    addr_len = (u_int)sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:   hdrlen = 2;",
          "590:  } else {",
          "591:   switch (addr_len) {",
          "593:    af = AF_INET;",
          "594:    break;",
          "596:    af = AF_INET6;",
          "597:    break;",
          "598:   default:",
          "",
          "[Removed Lines]",
          "592:   case sizeof(struct in_addr):",
          "595:   case sizeof(struct in6_addr):",
          "",
          "[Added Lines]",
          "592:   case sizeof(nd_ipv4):",
          "595:   case sizeof(nd_ipv6):",
          "",
          "---------------"
        ],
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define RIP6_RESPONSE 2",
          "67: struct netinfo6 {",
          "69:  nd_uint16_t rip6_tag;",
          "70:  nd_uint8_t rip6_plen;",
          "71:  nd_uint8_t rip6_metric;",
          "",
          "[Removed Lines]",
          "68:  struct in6_addr rip6_dest;",
          "",
          "[Added Lines]",
          "68:  nd_ipv6  rip6_dest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #define HOPCNT_INFINITY6 16",
          "90: {",
          "92:     return (memcmp(addr, &in6addr_any, sizeof(*addr)) == 0);",
          "93: }",
          "96: static int",
          "97: rip6_entry_print(netdissect_options *ndo, const struct netinfo6 *ni, u_int metric)",
          "",
          "[Removed Lines]",
          "89: static int IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr *addr)",
          "94: #endif",
          "",
          "[Added Lines]",
          "88: static int ND_IN6_IS_ADDR_UNSPECIFIED(const nd_ipv6 *addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   if (j == 1) {",
          "131:    ND_TCHECK_SIZE(rp->rip6_nets);",
          "132:    if (EXTRACT_U_1(rp->rip6_nets->rip6_metric) == HOPCNT_INFINITY6",
          "134:     ND_PRINT(\" ripng-req dump\");",
          "135:     break;",
          "136:    }",
          "",
          "[Removed Lines]",
          "133:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "[Added Lines]",
          "131:        && ND_IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "---------------"
        ],
        "print-rsvp.c||print-rsvp.c": [
          "File: print-rsvp.c -> print-rsvp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:                 ND_PRINT(\"%s  IPv4 DestAddress: %s, Protocol ID: 0x%02x\",",
          "744:                        indent,",
          "745:                        ipaddr_string(ndo, obj_tptr),",
          "747:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "748:                        indent,",
          "749:                        EXTRACT_U_1((obj_tptr + 5)),",
          "",
          "[Removed Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "757:                 ND_PRINT(\"%s  IPv6 DestAddress: %s, Protocol ID: 0x%02x\",",
          "758:                        indent,",
          "759:                        ip6addr_string(ndo, obj_tptr),",
          "761:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "762:                        indent,",
          "765:                 obj_tlen-=20;",
          "766:                 obj_tptr+=20;",
          "767:                 break;",
          "",
          "[Removed Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(struct in6_addr)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(struct in6_addr) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(struct in6_addr) + 2));",
          "",
          "[Added Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv6)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(nd_ipv6) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(nd_ipv6) + 2));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:         case RSVP_OBJ_CONFIRM:",
          "821:             switch(rsvp_obj_ctype) {",
          "822:             case RSVP_CTYPE_IPV4:",
          "824:                     return -1;",
          "825:                 ND_PRINT(\"%s  IPv4 Receiver Address: %s\",",
          "826:                        indent,",
          "827:                        ipaddr_string(ndo, obj_tptr));",
          "830:                 break;",
          "831:             case RSVP_CTYPE_IPV6:",
          "833:                     return -1;",
          "834:                 ND_PRINT(\"%s  IPv6 Receiver Address: %s\",",
          "835:                        indent,",
          "836:                        ip6addr_string(ndo, obj_tptr));",
          "839:                 break;",
          "840:             default:",
          "841:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "823:                 if (obj_tlen < sizeof(struct in_addr))",
          "828:                 obj_tlen-=sizeof(struct in_addr);",
          "829:                 obj_tptr+=sizeof(struct in_addr);",
          "832:                 if (obj_tlen < sizeof(struct in6_addr))",
          "837:                 obj_tlen-=sizeof(struct in6_addr);",
          "838:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "823:                 if (obj_tlen < sizeof(nd_ipv4))",
          "828:                 obj_tlen-=sizeof(nd_ipv4);",
          "829:                 obj_tptr+=sizeof(nd_ipv4);",
          "832:                 if (obj_tlen < sizeof(nd_ipv6))",
          "837:                 obj_tlen-=sizeof(nd_ipv6);",
          "838:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "845:         case RSVP_OBJ_NOTIFY_REQ:",
          "846:             switch(rsvp_obj_ctype) {",
          "847:             case RSVP_CTYPE_IPV4:",
          "849:                     return -1;",
          "850:                 ND_PRINT(\"%s  IPv4 Notify Node Address: %s\",",
          "851:                        indent,",
          "852:                        ipaddr_string(ndo, obj_tptr));",
          "855:                 break;",
          "856:             case RSVP_CTYPE_IPV6:",
          "858:                     return-1;",
          "859:                 ND_PRINT(\"%s  IPv6 Notify Node Address: %s\",",
          "860:                        indent,",
          "861:                        ip6addr_string(ndo, obj_tptr));",
          "864:                 break;",
          "865:             default:",
          "866:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "848:                 if (obj_tlen < sizeof(struct in_addr))",
          "853:                 obj_tlen-=sizeof(struct in_addr);",
          "854:                 obj_tptr+=sizeof(struct in_addr);",
          "857:                 if (obj_tlen < sizeof(struct in6_addr))",
          "862:                 obj_tlen-=sizeof(struct in6_addr);",
          "863:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "848:                 if (obj_tlen < sizeof(nd_ipv4))",
          "853:                 obj_tlen-=sizeof(nd_ipv4);",
          "854:                 obj_tptr+=sizeof(nd_ipv4);",
          "857:                 if (obj_tlen < sizeof(nd_ipv6))",
          "862:                 obj_tlen-=sizeof(nd_ipv6);",
          "863:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ]
      }
    }
  ]
}