{
  "cve_id": "CVE-2018-1152",
  "cve_desc": "libjpeg-turbo 1.5.90 is vulnerable to a denial of service vulnerability caused by a divide by zero when processing a crafted BMP image.",
  "repo": "libjpeg-turbo/libjpeg-turbo",
  "patch_hash": "43e84cff1bb2bd8293066f6ac4eb0df61ddddbc6",
  "patch_info": {
    "commit_hash": "43e84cff1bb2bd8293066f6ac4eb0df61ddddbc6",
    "repo": "libjpeg-turbo/libjpeg-turbo",
    "commit_url": "https://github.com/libjpeg-turbo/libjpeg-turbo/commit/43e84cff1bb2bd8293066f6ac4eb0df61ddddbc6",
    "files": [
      "ChangeLog.md",
      "rdbmp.c"
    ],
    "message": "tjLoadImage(): Fix FPE triggered by malformed BMP\n\nIn rdbmp.c, it is necessary to guard against 32-bit overflow/wraparound\nwhen allocating the row buffer, because since BMP files have 32-bit\nwidth and height fields, the value of biWidth can be up to 4294967295.\nSpecifically, if biWidth is 1073741824 and cinfo->input_components = 4,\nthen the samplesperrow argument in alloc_sarray() would wrap around to\n0, and a division by zero error would occur at line 458 in jmemmgr.c.\n\nIf biWidth is set to a higher value, then samplesperrow would wrap\naround to a small number, which would likely cause a buffer overflow\n(this has not been tested or verified.)",
    "before_after_code_files": [
      "rdbmp.c||rdbmp.c"
    ]
  },
  "patch_diff": {
    "rdbmp.c||rdbmp.c": [
      "File: rdbmp.c -> rdbmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     }",
      "624:   }",
      "627:   source->pub.buffer = (*cinfo->mem->alloc_sarray)",
      "628:     ((j_common_ptr)cinfo, JPOOL_IMAGE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "627:      value of the JDIMENSION type.  This is only a danger with BMP files, since",
      "629:   if ((unsigned long long)biWidth *",
      "630:       (unsigned long long)cinfo->input_components > 0xFFFFFFFFULL)",
      "631:     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1322acf6cdc8c25db0075d7d32dc2f25ed9d477",
      "candidate_info": {
        "commit_hash": "f1322acf6cdc8c25db0075d7d32dc2f25ed9d477",
        "repo": "libjpeg-turbo/libjpeg-turbo",
        "commit_url": "https://github.com/libjpeg-turbo/libjpeg-turbo/commit/f1322acf6cdc8c25db0075d7d32dc2f25ed9d477",
        "files": [
          "rdbmp.c"
        ],
        "message": "rdbmp.c: Fix FPE triggered by malformed BMP\n\nIn rdbmp.c, it is necessary to guard against 32-bit overflow/wraparound\nwhen allocating the row buffer, because since BMP files have 32-bit\nwidth and height fields, the value of biWidth can be up to 4294967295.\nSpecifically, high values of biWidth could cause the samplesperrow\nargument in alloc_sarray() to wrap around to 0, triggering a division by\nzero error at line 460 in jmemmgr.c, or to wrap around to a small\nnumber, likely triggering a buffer overflow.\n\nThis fix is not documented in the change log for this branch, because\nthe bug was exposed using the tjLoadImage() function in the 2.0.x\nbranch.  However, it is posited that the issue could be triggered using\nTJBench in this branch.",
        "before_after_code_files": [
          "rdbmp.c||rdbmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rdbmp.c||rdbmp.c"
          ],
          "candidate": [
            "rdbmp.c||rdbmp.c"
          ]
        }
      },
      "candidate_diff": {
        "rdbmp.c||rdbmp.c": [
          "File: rdbmp.c -> rdbmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:   }",
          "438:   source->pub.buffer = (*cinfo->mem->alloc_sarray)",
          "439:     ((j_common_ptr) cinfo, JPOOL_IMAGE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:      JDIMENSION type.  This is only a danger with BMP files, since their width",
          "440:   if ((unsigned long long)biWidth * 3ULL > 0xFFFFFFFFULL)",
          "441:     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);",
          "",
          "---------------"
        ]
      }
    }
  ]
}