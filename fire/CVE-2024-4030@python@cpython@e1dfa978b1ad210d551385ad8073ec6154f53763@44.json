{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f0269d6aed1b61996b95dc0730a4008de012011",
      "candidate_info": {
        "commit_hash": "9f0269d6aed1b61996b95dc0730a4008de012011",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9f0269d6aed1b61996b95dc0730a4008de012011",
        "files": [
          "Python/bltinmodule.c"
        ],
        "message": "[3.13] gh-120526: Correct signature of map() builtin (GH-120528) (GH-120539)\n\nmap() requires at least one iterable arg.\n\n(cherry picked from commit d4039d3f6f8cb7738c5cd272dde04171446dfd2b)\n\nSigned-off-by: Adam Williamson <awilliam@redhat.com>\nCo-authored-by: Adam Williamson <adam@blueradius.ca>",
        "before_after_code_files": [
          "Python/bltinmodule.c||Python/bltinmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/bltinmodule.c||Python/bltinmodule.c": [
          "File: Python/bltinmodule.c -> Python/bltinmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477: PyDoc_STRVAR(map_doc,",
          "1479: --\\n\\",
          "1480: \\n\\",
          "1481: Make an iterator that computes the function using arguments from\\n\\",
          "",
          "[Removed Lines]",
          "1478: \"map(function, /, *iterables)\\n\\",
          "",
          "[Added Lines]",
          "1478: \"map(function, iterable, /, *iterables)\\n\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c052b192aaa05eeedb1bd50e0658e2d836ffa581",
      "candidate_info": {
        "commit_hash": "c052b192aaa05eeedb1bd50e0658e2d836ffa581",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c052b192aaa05eeedb1bd50e0658e2d836ffa581",
        "files": [
          "Include/cpython/pystate.h",
          "Include/internal/pycore_pystate.h",
          "Include/internal/pycore_tstate.h",
          "Modules/_testinternalcapi.c",
          "Python/crossinterp.c",
          "Python/import.c",
          "Python/pylifecycle.c",
          "Python/pystate.c"
        ],
        "message": "[3.13] gh-120838: Add _PyThreadState_WHENCE_FINI (gh-121013)\n\nWe also add _PyThreadState_NewBound() and drop _PyThreadState_SetWhence().\n\nThis change only affects internal API.\n\n(cherry picked from commit a905721b9c5c15279e67c2f7785034b7356b2d46, AKA gh-121010)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Include/cpython/pystate.h||Include/cpython/pystate.h",
          "Include/internal/pycore_pystate.h||Include/internal/pycore_pystate.h",
          "Include/internal/pycore_tstate.h||Include/internal/pycore_tstate.h",
          "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c",
          "Python/crossinterp.c||Python/crossinterp.c",
          "Python/import.c||Python/import.c",
          "Python/pylifecycle.c||Python/pylifecycle.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/pystate.h||Include/cpython/pystate.h": [
          "File: Include/cpython/pystate.h -> Include/cpython/pystate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: #ifdef Py_BUILD_CORE",
          "98: #  define _PyThreadState_WHENCE_NOTSET -1",
          "99: #  define _PyThreadState_WHENCE_UNKNOWN 0",
          "104: #endif",
          "105:     int _whence;",
          "",
          "[Removed Lines]",
          "100: #  define _PyThreadState_WHENCE_INTERP 1",
          "101: #  define _PyThreadState_WHENCE_THREADING 2",
          "102: #  define _PyThreadState_WHENCE_GILSTATE 3",
          "103: #  define _PyThreadState_WHENCE_EXEC 4",
          "",
          "[Added Lines]",
          "100: #  define _PyThreadState_WHENCE_INIT 1",
          "101: #  define _PyThreadState_WHENCE_FINI 2",
          "102: #  define _PyThreadState_WHENCE_THREADING 3",
          "103: #  define _PyThreadState_WHENCE_GILSTATE 4",
          "104: #  define _PyThreadState_WHENCE_EXEC 5",
          "",
          "---------------"
        ],
        "Include/internal/pycore_pystate.h||Include/internal/pycore_pystate.h": [
          "File: Include/internal/pycore_pystate.h -> Include/internal/pycore_pystate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     PyInterpreterState *interp,",
          "222:     int whence);",
          "223: extern void _PyThreadState_Bind(PyThreadState *tstate);",
          "224: extern PyThreadState * _PyThreadState_RemoveExcept(PyThreadState *tstate);",
          "225: extern void _PyThreadState_DeleteList(PyThreadState *list);",
          "226: extern void _PyThreadState_ClearMimallocHeaps(PyThreadState *tstate);",
          "",
          "[Removed Lines]",
          "220: extern PyThreadState * _PyThreadState_New(",
          "",
          "[Added Lines]",
          "221: PyAPI_FUNC(PyThreadState *) _PyThreadState_New(",
          "225: PyAPI_FUNC(PyThreadState *) _PyThreadState_NewBound(",
          "226:     PyInterpreterState *interp,",
          "227:     int whence);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_tstate.h||Include/internal/pycore_tstate.h": [
          "File: Include/internal/pycore_tstate.h -> Include/internal/pycore_tstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include \"pycore_qsbr.h\"          // struct qsbr",
          "",
          "[Removed Lines]",
          "17: static inline void",
          "18: _PyThreadState_SetWhence(PyThreadState *tstate, int whence)",
          "19: {",
          "20:     tstate->_whence = whence;",
          "21: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c": [
          "File: Modules/_testinternalcapi.c -> Modules/_testinternalcapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1585:     }",
          "1587:     PyObject *res = NULL;",
          "1591:     PyThreadState *save_tstate = PyThreadState_Swap(tstate);",
          "",
          "[Removed Lines]",
          "1588:     PyThreadState *tstate = PyThreadState_New(interp);",
          "1589:     _PyThreadState_SetWhence(tstate, _PyThreadState_WHENCE_EXEC);",
          "",
          "[Added Lines]",
          "1588:     PyThreadState *tstate =",
          "1589:         _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_EXEC);",
          "",
          "---------------"
        ],
        "Python/crossinterp.c||Python/crossinterp.c": [
          "File: Python/crossinterp.c -> Python/crossinterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1544:     PyThreadState *tstate = PyThreadState_Get();",
          "1545:     PyThreadState *prev = tstate;",
          "1546:     if (interp != tstate->interp) {",
          "1550:         session->prev_tstate = PyThreadState_Swap(tstate);",
          "1551:         assert(session->prev_tstate == prev);",
          "",
          "[Removed Lines]",
          "1547:         tstate = PyThreadState_New(interp);",
          "1548:         _PyThreadState_SetWhence(tstate, _PyThreadState_WHENCE_EXEC);",
          "",
          "[Added Lines]",
          "1547:         tstate = _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_EXEC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1895:             tstate = cur_tstate;",
          "1896:         }",
          "1897:         else {",
          "1900:             assert(tstate != NULL);",
          "1901:             save_tstate = PyThreadState_Swap(tstate);",
          "1902:         }",
          "",
          "[Removed Lines]",
          "1898:             tstate = PyThreadState_New(interp);",
          "1899:             _PyThreadState_SetWhence(tstate, _PyThreadState_WHENCE_INTERP);",
          "",
          "[Added Lines]",
          "1897:             tstate = _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_FINI);",
          "",
          "---------------"
        ],
        "Python/import.c||Python/import.c": [
          "File: Python/import.c -> Python/import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1518:     if (_Py_IsMainInterpreter(tstate->interp)) {",
          "1519:         return tstate;",
          "1520:     }",
          "1522:     if (main_tstate == NULL) {",
          "1523:         return NULL;",
          "1524:     }",
          "1526: #ifndef NDEBUG",
          "1527:     PyThreadState *old_tstate = PyThreadState_Swap(main_tstate);",
          "1528:     assert(old_tstate == tstate);",
          "",
          "[Removed Lines]",
          "1521:     PyThreadState *main_tstate = PyThreadState_New(_PyInterpreterState_Main());",
          "1525:     main_tstate->_whence = _PyThreadState_WHENCE_EXEC;",
          "",
          "[Added Lines]",
          "1521:     PyThreadState *main_tstate = _PyThreadState_NewBound(",
          "1522:             _PyInterpreterState_Main(), _PyThreadState_WHENCE_EXEC);",
          "",
          "---------------"
        ],
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:     }",
          "679:     PyThreadState *tstate = _PyThreadState_New(interp,",
          "681:     if (tstate == NULL) {",
          "682:         return _PyStatus_ERR(\"can't make first thread\");",
          "683:     }",
          "",
          "[Removed Lines]",
          "680:                                                _PyThreadState_WHENCE_INTERP);",
          "",
          "[Added Lines]",
          "680:                                                _PyThreadState_WHENCE_INIT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2233:         goto error;",
          "2234:     }",
          "2237:     if (tstate == NULL) {",
          "2238:         status = _PyStatus_NO_MEMORY();",
          "2239:         goto error;",
          "",
          "[Removed Lines]",
          "2236:     tstate = _PyThreadState_New(interp, _PyThreadState_WHENCE_INTERP);",
          "",
          "[Added Lines]",
          "2236:     tstate = _PyThreadState_New(interp, _PyThreadState_WHENCE_INIT);",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1293:     PyThread_release_lock(interp->id_mutex);",
          "1295:     if (refcount == 0 && interp->requires_idref) {",
          "1301:         PyThreadState *save_tstate = _PyThreadState_Swap(runtime, tstate);",
          "",
          "[Removed Lines]",
          "1296:         PyThreadState *tstate = _PyThreadState_New(interp,",
          "1297:                                                    _PyThreadState_WHENCE_INTERP);",
          "1298:         _PyThreadState_Bind(tstate);",
          "",
          "[Added Lines]",
          "1296:         PyThreadState *tstate =",
          "1297:             _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_FINI);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1603: PyThreadState *",
          "1604: PyThreadState_New(PyInterpreterState *interp)",
          "1605: {",
          "1608:     if (tstate) {",
          "1609:         bind_tstate(tstate);",
          "",
          "[Removed Lines]",
          "1606:     PyThreadState *tstate = new_threadstate(interp,",
          "1607:                                             _PyThreadState_WHENCE_UNKNOWN);",
          "",
          "[Added Lines]",
          "1605:     return _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_UNKNOWN);",
          "1606: }",
          "1608: PyThreadState *",
          "1609: _PyThreadState_NewBound(PyInterpreterState *interp, int whence)",
          "1610: {",
          "1611:     PyThreadState *tstate = new_threadstate(interp, whence);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "312a32a74296229ae1c0c103a3ad2e31af79ff39",
      "candidate_info": {
        "commit_hash": "312a32a74296229ae1c0c103a3ad2e31af79ff39",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/312a32a74296229ae1c0c103a3ad2e31af79ff39",
        "files": [
          "Lib/test/exception_hierarchy.txt",
          "Lib/test/test_baseexception.py"
        ],
        "message": "[3.13] gh-119521: Remove _IncompleteInputError from the docs (GH-120993) (GH-121076)\n\ngh-119521: Remove _IncompleteInputError from the docs (GH-120993)\n(cherry picked from commit 1167a9a30b4b2f327ed987e845e378990d1ae6bf)\n\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_baseexception.py||Lib/test/test_baseexception.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_baseexception.py||Lib/test/test_baseexception.py": [
          "File: Lib/test/test_baseexception.py -> Lib/test/test_baseexception.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:                 last_depth = depth",
          "79:         finally:",
          "80:             inheritance_tree.close()",
          "81:         self.assertEqual(len(exc_set), 0, \"%s not accounted for\" % exc_set)",
          "83:     interface_tests = (\"length\", \"args\", \"str\", \"repr\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         # Underscore-prefixed (private) exceptions don't need to be documented",
          "83:         exc_set = set(e for e in exc_set if not e.startswith('_'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f021f9e50e3e4b82b3358dbc977043700179b0f5",
      "candidate_info": {
        "commit_hash": "f021f9e50e3e4b82b3358dbc977043700179b0f5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f021f9e50e3e4b82b3358dbc977043700179b0f5",
        "files": [
          "Lib/test/test_interpreters/test_stress.py"
        ],
        "message": "[3.13] gh-120524: Temporarily Skip test_create_many_threaded In test_interpreters.test_stress (gh-120527)",
        "before_after_code_files": [
          "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py": [
          "File: Lib/test/test_interpreters/test_stress.py -> Lib/test/test_interpreters/test_stress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:             interp = interpreters.create()",
          "23:             alive.append(interp)",
          "25:     @support.requires_resource('cpu')",
          "26:     def test_create_many_threaded(self):",
          "27:         alive = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     @unittest.skip('(temporary) gh-120524: there is a race that needs fixing')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afef6b57376af65ec43ba7ffb8c6f41986afe04b",
      "candidate_info": {
        "commit_hash": "afef6b57376af65ec43ba7ffb8c6f41986afe04b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/afef6b57376af65ec43ba7ffb8c6f41986afe04b",
        "files": [
          "Objects/memoryobject.c"
        ],
        "message": "[3.13] gh-120155: Fix copy/paste error in HAVE_SUBOFFSETS_IN_LAST_DIM() (GH-120228) (#120238)\n\ngh-120155: Fix copy/paste error in HAVE_SUBOFFSETS_IN_LAST_DIM() (GH-120228)\n\nDon't hardcode 'dest' in HAVE_SUBOFFSETS_IN_LAST_DIM() macro of\nmemoryobject.c, but use its 'view' parameter instead.\n\nFix the Coverity issue:\n\nError: COPY_PASTE_ERROR (CWE-398):\nPython-3.12.2/Objects/memoryobject.c:273:14: original: \"\"dest->suboffsets + (dest->ndim - 1)\"\" looks like the original copy.\nPython-3.12.2/Objects/memoryobject.c:274:14: copy_paste_error: \"\"dest\"\" in \"\"src->suboffsets + (dest->ndim - 1)\"\" looks like a copy-paste error.\nPython-3.12.2/Objects/memoryobject.c:274:14: remediation: Should it say \"\"src\"\" instead?\nGH-  272|       assert(dest->ndim > 0 && src->ndim > 0);\nGH-  273|       return (!HAVE_SUBOFFSETS_IN_LAST_DIM(dest) &&\nGH-  274|->             !HAVE_SUBOFFSETS_IN_LAST_DIM(src) &&\nGH-  275|               dest->strides[dest->ndim-1] == dest->itemsize &&\nGH-  276|               src->strides[src->ndim-1] == src->itemsize);\n(cherry picked from commit 90b75405260467814c93738a3325645918d4ea51)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Objects/memoryobject.c||Objects/memoryobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/memoryobject.c||Objects/memoryobject.c": [
          "File: Objects/memoryobject.c -> Objects/memoryobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270: #define HAVE_SUBOFFSETS_IN_LAST_DIM(view) \\",
          "273: static inline int",
          "274: last_dim_is_contiguous(const Py_buffer *dest, const Py_buffer *src)",
          "",
          "[Removed Lines]",
          "271:     (view->suboffsets && view->suboffsets[dest->ndim-1] >= 0)",
          "",
          "[Added Lines]",
          "271:     (view->suboffsets && view->suboffsets[view->ndim-1] >= 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}