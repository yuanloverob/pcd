{
  "cve_id": "CVE-2024-32660",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol. Prior to version 3.5.1, a malicious server can crash the FreeRDP client by sending invalid huge allocation size. Version 3.5.1 contains a patch for the issue. No known workarounds are available.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "5e5d27cf310e4c10b854be7667bfb7a5d774eb47",
  "patch_info": {
    "commit_hash": "5e5d27cf310e4c10b854be7667bfb7a5d774eb47",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5e5d27cf310e4c10b854be7667bfb7a5d774eb47",
    "files": [
      "libfreerdp/codec/zgfx.c"
    ],
    "message": "[codec,zgfx] allocate in segment steps\n\ndo not trust the uncompressedSize of a ZGFX_SEGMENTED_MULTIPART and\nallocate the output buffer in steps after decoding a segment.",
    "before_after_code_files": [
      "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
      "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "382:  return malloc(size + 64);",
      "383: }",
      "385: int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData,",
      "386:                     UINT32* pDstSize, UINT32 flags)",
      "387: {",
      "388:  int status = -1;",
      "389:  BYTE descriptor = 0;",
      "390:  wStream sbuffer = { 0 };",
      "391:  wStream* stream = Stream_StaticConstInit(&sbuffer, pSrcData, SrcSize);",
      "393:  WINPR_ASSERT(zgfx);",
      "394:  WINPR_ASSERT(stream);",
      "396:  if (!Stream_CheckAndLogRequiredLength(TAG, stream, 1))",
      "397:   goto fail;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "385: static BOOL zgfx_append(ZGFX_CONTEXT* zgfx, BYTE** ppConcatenated, size_t uncompressedSize,",
      "386:                         size_t* pUsed)",
      "387: {",
      "388:  WINPR_ASSERT(zgfx);",
      "389:  WINPR_ASSERT(ppConcatenated);",
      "390:  WINPR_ASSERT(pUsed);",
      "392:  const size_t used = *pUsed;",
      "393:  if (zgfx->OutputCount > UINT32_MAX - used)",
      "394:   return FALSE;",
      "396:  if (used + zgfx->OutputCount > uncompressedSize)",
      "397:   return FALSE;",
      "399:  BYTE* tmp = realloc(*ppConcatenated, used + zgfx->OutputCount + 64ull);",
      "400:  if (!tmp)",
      "401:   return FALSE;",
      "403:  CopyMemory(&tmp[used], zgfx->OutputBuffer, zgfx->OutputCount);",
      "405:  return TRUE;",
      "406: }",
      "414:  size_t used = 0;",
      "415:  BYTE* pConcatenated = NULL;",
      "420:  WINPR_ASSERT(ppDstData);",
      "421:  WINPR_ASSERT(pDstSize);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:   if (!zgfx_decompress_segment(zgfx, stream, Stream_GetRemainingLength(stream)))",
      "404:    goto fail;",
      "408:   if (zgfx->OutputCount > 0)",
      "416:  }",
      "417:  else if (descriptor == ZGFX_SEGMENTED_MULTIPART)",
      "418:  {",
      "",
      "[Removed Lines]",
      "411:   if (!*ppDstData)",
      "412:    goto fail;",
      "415:   CopyMemory(*ppDstData, zgfx->OutputBuffer, zgfx->OutputCount);",
      "",
      "[Added Lines]",
      "437:   {",
      "438:    if (!zgfx_append(zgfx, &pConcatenated, zgfx->OutputCount, &used))",
      "439:     goto fail;",
      "440:    if (used != zgfx->OutputCount)",
      "441:     goto fail;",
      "444:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420:   UINT16 segmentNumber = 0;",
      "421:   UINT16 segmentCount = 0;",
      "422:   UINT32 uncompressedSize = 0;",
      "426:   if (!Stream_CheckAndLogRequiredLength(TAG, stream, 6))",
      "427:    goto fail;",
      "",
      "[Removed Lines]",
      "423:   BYTE* pConcatenated = NULL;",
      "424:   size_t used = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "443:   for (segmentNumber = 0; segmentNumber < segmentCount; segmentNumber++)",
      "444:   {",
      "445:    if (!Stream_CheckAndLogRequiredLength(TAG, stream, sizeof(UINT32)))",
      "",
      "[Removed Lines]",
      "432:   if (!Stream_CheckAndLogRequiredLengthOfSize(TAG, stream, segmentCount, sizeof(UINT32)))",
      "433:    goto fail;",
      "435:   pConcatenated = aligned_zgfx_malloc(uncompressedSize);",
      "437:   if (!pConcatenated)",
      "438:    goto fail;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "450:    if (!zgfx_decompress_segment(zgfx, stream, segmentSize))",
      "451:     goto fail;",
      "454:     goto fail;",
      "463:  }",
      "464:  else",
      "465:  {",
      "",
      "[Removed Lines]",
      "453:    if (zgfx->OutputCount > UINT32_MAX - used)",
      "456:    if (used + zgfx->OutputCount > uncompressedSize)",
      "457:     goto fail;",
      "459:    CopyMemory(pConcatenated, zgfx->OutputBuffer, zgfx->OutputCount);",
      "460:    pConcatenated += zgfx->OutputCount;",
      "461:    used += zgfx->OutputCount;",
      "462:   }",
      "",
      "[Added Lines]",
      "469:    if (!zgfx_append(zgfx, &pConcatenated, uncompressedSize, &used))",
      "471:   }",
      "473:   if (used != uncompressedSize)",
      "474:    goto fail;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "469:  status = 1;",
      "470: fail:",
      "471:  return status;",
      "472: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "486:  if (status < 0)",
      "487:   free(pConcatenated);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a755d898ddc028cc818d0dd9d49d5acff4c44bf",
      "candidate_info": {
        "commit_hash": "1a755d898ddc028cc818d0dd9d49d5acff4c44bf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1a755d898ddc028cc818d0dd9d49d5acff4c44bf",
        "files": [
          "libfreerdp/codec/interleaved.c"
        ],
        "message": "[codec,interleaved] fix offset error",
        "before_after_code_files": [
          "libfreerdp/codec/interleaved.c||libfreerdp/codec/interleaved.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10107"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/interleaved.c||libfreerdp/codec/interleaved.c": [
          "File: libfreerdp/codec/interleaved.c -> libfreerdp/codec/interleaved.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:  runLength = (*pbOrderHdr) & g_MaskRegularRunLength;",
          "213:  if (runLength == 0)",
          "214:  {",
          "216:   {",
          "218:    return 0;",
          "",
          "[Removed Lines]",
          "215:   if (!buffer_within_range(pbOrderHdr, 1, pbEnd))",
          "",
          "[Added Lines]",
          "215:   if (!buffer_within_range(pbOrderHdr, 2, pbEnd))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:  WINPR_ASSERT(pbEnd);",
          "283:  WINPR_ASSERT(advance);",
          "286:  {",
          "288:   return 0;",
          "",
          "[Removed Lines]",
          "285:  if (!buffer_within_range(pbOrderHdr, 2, pbEnd))",
          "",
          "[Added Lines]",
          "285:  if (!buffer_within_range(pbOrderHdr, 3, pbEnd))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f34189aaef63b4759eb7e36631dc3d06efd5e9d0",
      "candidate_info": {
        "commit_hash": "f34189aaef63b4759eb7e36631dc3d06efd5e9d0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f34189aaef63b4759eb7e36631dc3d06efd5e9d0",
        "files": [
          "include/freerdp/codec/zgfx.h",
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "[codec,zgfx] restrict and inline keywords",
        "before_after_code_files": [
          "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h",
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
          ],
          "candidate": [
            "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
          ]
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/zgfx.h||include/freerdp/codec/zgfx.h": [
          "File: include/freerdp/codec/zgfx.h -> include/freerdp/codec/zgfx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  typedef struct S_ZGFX_CONTEXT ZGFX_CONTEXT;",
          "52:  FREERDP_API void zgfx_context_free(ZGFX_CONTEXT* zgfx);",
          "",
          "[Removed Lines]",
          "42:  FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
          "43:                                  BYTE** ppDstData, UINT32* pDstSize, UINT32 flags);",
          "44:  FREERDP_API int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize,",
          "45:                                BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags);",
          "46:  FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst,",
          "47:                                          const BYTE* pUncompressed, UINT32 uncompressedSize,",
          "48:                                          UINT32* pFlags);",
          "50:  FREERDP_API void zgfx_context_reset(ZGFX_CONTEXT* zgfx, BOOL flush);",
          "",
          "[Added Lines]",
          "42:  FREERDP_API int zgfx_decompress(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "43:                                  const BYTE* WINPR_RESTRICT pSrcData, UINT32 SrcSize,",
          "44:                                  BYTE** WINPR_RESTRICT ppDstData,",
          "45:                                  UINT32* WINPR_RESTRICT pDstSize, UINT32 flags);",
          "46:  FREERDP_API int zgfx_compress(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "47:                                const BYTE* WINPR_RESTRICT pSrcData, UINT32 SrcSize,",
          "48:                                BYTE** WINPR_RESTRICT ppDstData, UINT32* pDstSize,",
          "49:                                UINT32* WINPR_RESTRICT pFlags);",
          "50:  FREERDP_API int zgfx_compress_to_stream(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "51:                                          wStream* WINPR_RESTRICT sDst,",
          "52:                                          const BYTE* WINPR_RESTRICT pUncompressed,",
          "53:                                          UINT32 uncompressedSize, UINT32* WINPR_RESTRICT pFlags);",
          "55:  FREERDP_API void zgfx_context_reset(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, BOOL flush);",
          "",
          "---------------"
        ],
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  { 0 }",
          "115: };",
          "118: {",
          "119:  if (!zgfx)",
          "120:   return FALSE;",
          "",
          "[Removed Lines]",
          "117: static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* zgfx, UINT32 nbits)",
          "",
          "[Added Lines]",
          "117: static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, UINT32 nbits)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:  return TRUE;",
          "137: }",
          "140: {",
          "141:  UINT32 front = 0;",
          "",
          "[Removed Lines]",
          "139: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "",
          "[Added Lines]",
          "139: static INLINE void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "140:                                                   const BYTE* WINPR_RESTRICT src, size_t count)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:  }",
          "168: }",
          "171: {",
          "172:  UINT32 front = 0;",
          "173:  UINT32 index = 0;",
          "",
          "[Removed Lines]",
          "170: static void zgfx_history_buffer_ring_read(ZGFX_CONTEXT* zgfx, int offset, BYTE* dst, UINT32 count)",
          "",
          "[Added Lines]",
          "171: static INLINE void zgfx_history_buffer_ring_read(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, int offset,",
          "172:                                                  BYTE* WINPR_RESTRICT dst, UINT32 count)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:  } while ((bytesLeft -= bytes) > 0);",
          "215: }",
          "218: {",
          "219:  BYTE c = 0;",
          "220:  BYTE flags = 0;",
          "",
          "[Removed Lines]",
          "217: static BOOL zgfx_decompress_segment(ZGFX_CONTEXT* zgfx, wStream* stream, size_t segmentSize)",
          "",
          "[Added Lines]",
          "219: static INLINE BOOL zgfx_decompress_segment(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "220:                                            wStream* WINPR_RESTRICT stream, size_t segmentSize)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381: {",
          "382:  return malloc(size + 64);",
          "383: }",
          "387: {",
          "388:  WINPR_ASSERT(zgfx);",
          "389:  WINPR_ASSERT(ppConcatenated);",
          "",
          "[Removed Lines]",
          "380: static BYTE* aligned_zgfx_malloc(size_t size)",
          "385: static BOOL zgfx_append(ZGFX_CONTEXT* zgfx, BYTE** ppConcatenated, size_t uncompressedSize,",
          "386:                         size_t* pUsed)",
          "",
          "[Added Lines]",
          "383: static INLINE BYTE* aligned_zgfx_malloc(size_t size)",
          "388: static INLINE BOOL zgfx_append(ZGFX_CONTEXT* WINPR_RESTRICT zgfx,",
          "389:                                BYTE** WINPR_RESTRICT ppConcatenated, size_t uncompressedSize,",
          "390:                                size_t* WINPR_RESTRICT pUsed)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:  return TRUE;",
          "406: }",
          "410: {",
          "411:  int status = -1;",
          "412:  BYTE descriptor = 0;",
          "",
          "[Removed Lines]",
          "408: int zgfx_decompress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData,",
          "409:                     UINT32* pDstSize, UINT32 flags)",
          "",
          "[Added Lines]",
          "412: int zgfx_decompress(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, const BYTE* WINPR_RESTRICT pSrcData,",
          "413:                     UINT32 SrcSize, BYTE** WINPR_RESTRICT ppDstData,",
          "414:                     UINT32* WINPR_RESTRICT pDstSize, UINT32 flags)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "488:  return status;",
          "489: }",
          "493: {",
          "495:  if (!Stream_EnsureRemainingCapacity(s, SrcSize + 1))",
          "",
          "[Removed Lines]",
          "491: static BOOL zgfx_compress_segment(ZGFX_CONTEXT* zgfx, wStream* s, const BYTE* pSrcData,",
          "492:                                   UINT32 SrcSize, UINT32* pFlags)",
          "",
          "[Added Lines]",
          "496: static BOOL zgfx_compress_segment(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, wStream* WINPR_RESTRICT s,",
          "497:                                   const BYTE* WINPR_RESTRICT pSrcData, UINT32 SrcSize,",
          "498:                                   UINT32* WINPR_RESTRICT pFlags)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "504:  return TRUE;",
          "505: }",
          "509: {",
          "510:  int fragment = 0;",
          "511:  UINT16 maxLength = 0;",
          "",
          "[Removed Lines]",
          "507: int zgfx_compress_to_stream(ZGFX_CONTEXT* zgfx, wStream* sDst, const BYTE* pUncompressed,",
          "508:                             UINT32 uncompressedSize, UINT32* pFlags)",
          "",
          "[Added Lines]",
          "513: int zgfx_compress_to_stream(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, wStream* WINPR_RESTRICT sDst,",
          "514:                             const BYTE* WINPR_RESTRICT pUncompressed, UINT32 uncompressedSize,",
          "515:                             UINT32* WINPR_RESTRICT pFlags)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "586:  return status;",
          "587: }",
          "591: {",
          "592:  int status = 0;",
          "593:  wStream* s = Stream_New(NULL, SrcSize);",
          "",
          "[Removed Lines]",
          "589: int zgfx_compress(ZGFX_CONTEXT* zgfx, const BYTE* pSrcData, UINT32 SrcSize, BYTE** ppDstData,",
          "590:                   UINT32* pDstSize, UINT32* pFlags)",
          "",
          "[Added Lines]",
          "596: int zgfx_compress(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, const BYTE* WINPR_RESTRICT pSrcData,",
          "597:                   UINT32 SrcSize, BYTE** WINPR_RESTRICT ppDstData, UINT32* WINPR_RESTRICT pDstSize,",
          "598:                   UINT32* WINPR_RESTRICT pFlags)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598:  return status;",
          "599: }",
          "602: {",
          "603:  zgfx->HistoryIndex = 0;",
          "604: }",
          "",
          "[Removed Lines]",
          "601: void zgfx_context_reset(ZGFX_CONTEXT* zgfx, BOOL flush)",
          "",
          "[Added Lines]",
          "609: void zgfx_context_reset(ZGFX_CONTEXT* WINPR_RESTRICT zgfx, BOOL flush)",
          "",
          "---------------"
        ]
      }
    }
  ]
}