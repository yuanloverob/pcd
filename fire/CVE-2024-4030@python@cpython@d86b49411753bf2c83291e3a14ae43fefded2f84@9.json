{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
      "candidate_info": {
        "commit_hash": "50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "[3.13] gh-121137: Add missing Py_DECREF calls for ADDITEMS opcode of _pickle.c (GH-121136) (#121139)\n\ngh-121137: Add missing Py_DECREF calls for ADDITEMS opcode of _pickle.c (GH-121136)\n\nPyObject_GetAttr returns a new reference, but this reference is never decremented using Py_DECREF, so Py_DECREF calls to this referece are added\n(cherry picked from commit 92893fd8dc803ed7cdde55d29d25f84ccb5e3ef0)\n\nCo-authored-by: Justin Applegate <70449145+Legoclones@users.noreply.github.com>",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6524:             if (result == NULL) {",
          "6525:                 Pdata_clear(self->stack, i + 1);",
          "6526:                 Py_SET_SIZE(self->stack, mark);",
          "6527:                 return -1;",
          "6528:             }",
          "6529:             Py_DECREF(result);",
          "6530:         }",
          "6531:         Py_SET_SIZE(self->stack, mark);",
          "6532:     }",
          "6534:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6527:                 Py_DECREF(add_func);",
          "6533:         Py_DECREF(add_func);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a98e44a5bf935a46822c2ea3619eec49dbecbba8",
      "candidate_info": {
        "commit_hash": "a98e44a5bf935a46822c2ea3619eec49dbecbba8",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a98e44a5bf935a46822c2ea3619eec49dbecbba8",
        "files": [
          "Lib/test/test_os.py"
        ],
        "message": "gh-118802: Fix ACL use in test for non-English Windows (GH-118831)\n\n(cherry picked from commit 82acc5f2113bffd0ed902851f4ccf5b9be8980b2)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3226:             self.skipTest(\"Unable to create inaccessible file\")",
          "3228:         def cleanup():",
          "3232:                                     stderr=subprocess.STDOUT)",
          "3233:             os.unlink(filename)",
          "",
          "[Removed Lines]",
          "3229:             # Give delete permission. We are the file owner, so we can do this",
          "3230:             # even though we removed all permissions earlier.",
          "3231:             subprocess.check_output([ICACLS, filename, \"/grant\", \"Everyone:(D)\"],",
          "",
          "[Added Lines]",
          "3229:             # Give delete permission to the owner (us)",
          "3230:             subprocess.check_output([ICACLS, filename, \"/grant\", \"*WD:(D)\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9435124d4ae0c223fa144c638838ac3e2dd1c836",
      "candidate_info": {
        "commit_hash": "9435124d4ae0c223fa144c638838ac3e2dd1c836",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9435124d4ae0c223fa144c638838ac3e2dd1c836",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-111201: auto-indentation in _pyrepl (GH-119348) (#119427)\n\n(cherry picked from commit cd516cd1f5e94dba887353f421513fd172efadf3)\n\nCo-authored-by: Arnon Yaari <wiggin15@yahoo.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     # Instance fields",
          "100:     config: ReadlineConfig",
          "101:     more_lines: MoreLinesCallable | None = None",
          "103:     def __post_init__(self) -> None:",
          "104:         super().__post_init__()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     last_used_indentation: str | None = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             cut = 0",
          "158:         return self.history[cut:]",
          "160:     # --- simplified support for reading multiline Python statements ---",
          "162:     def collect_keymap(self) -> tuple[tuple[KeySpec, CommandName], ...]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     def update_last_used_indentation(self) -> None:",
          "162:         indentation = _get_first_indentation(self.buffer)",
          "163:         if indentation is not None:",
          "164:             self.last_used_indentation = indentation",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     return prevlinestart, indent",
          "214: class maybe_accept(commands.Command):",
          "215:     def do(self) -> None:",
          "216:         r: ReadlineAlikeReader",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: def _get_first_indentation(buffer: list[str]) -> str | None:",
          "221:     indented_line_start = None",
          "222:     for i in range(len(buffer)):",
          "223:         if (i < len(buffer) - 1",
          "224:             and buffer[i] == \"\\n\"",
          "225:             and buffer[i + 1] in \" \\t\"",
          "226:         ):",
          "227:             indented_line_start = i + 1",
          "228:         elif indented_line_start is not None and buffer[i] not in \" \\t\\n\":",
          "229:             return ''.join(buffer[indented_line_start : i])",
          "230:     return None",
          "233: def _is_last_char_colon(buffer: list[str]) -> bool:",
          "234:     i = len(buffer)",
          "235:     while i > 0:",
          "236:         i -= 1",
          "237:         if buffer[i] not in \" \\t\\n\":  # ignore whitespaces",
          "238:             return buffer[i] == \":\"",
          "239:     return False",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:             # auto-indent the next line like the previous line",
          "228:             prevlinestart, indent = _get_previous_line_indent(r.buffer, r.pos)",
          "229:             r.insert(\"\\n\")",
          "233:         elif not self.reader.paste_mode:",
          "234:             self.finish = True",
          "235:         else:",
          "",
          "[Removed Lines]",
          "230:             if not self.reader.paste_mode and indent:",
          "231:                 for i in range(prevlinestart, prevlinestart + indent):",
          "232:                     r.insert(r.buffer[i])",
          "",
          "[Added Lines]",
          "258:             if not self.reader.paste_mode:",
          "259:                 if indent:",
          "260:                     for i in range(prevlinestart, prevlinestart + indent):",
          "261:                         r.insert(r.buffer[i])",
          "262:                 r.update_last_used_indentation()",
          "263:                 if _is_last_char_colon(r.buffer):",
          "264:                     if r.last_used_indentation is not None:",
          "265:                         indentation = r.last_used_indentation",
          "266:                     else:",
          "267:                         # default",
          "268:                         indentation = \" \" * 4",
          "269:                     r.insert(indentation)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from unittest import TestCase",
          "6: from unittest.mock import patch",
          "10: from _pyrepl.console import Event",
          "11: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "12: from _pyrepl.readline import multiline_input as readline_multiline_input",
          "15: class TestCursorPosition(TestCase):",
          "16:     def test_up_arrow_simple(self):",
          "17:         # fmt: off",
          "18:         code = (",
          "21:         )",
          "22:         # fmt: on",
          "23:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "8: from .support import FakeConsole, handle_all_events, handle_events_narrow_console",
          "9: from .support import more_lines, multiline_input, code_to_events",
          "19:             'def f():\\n'",
          "20:             '  ...\\n'",
          "",
          "[Added Lines]",
          "8: from .support import (",
          "9:     FakeConsole,",
          "10:     handle_all_events,",
          "11:     handle_events_narrow_console,",
          "12:     more_lines,",
          "13:     multiline_input,",
          "14:     code_to_events,",
          "15: )",
          "22:     def prepare_reader(self, events):",
          "23:         console = FakeConsole(events)",
          "24:         config = ReadlineConfig(readline_completer=None)",
          "25:         reader = ReadlineAlikeReader(console=console, config=config)",
          "26:         return reader",
          "31:             \"def f():\\n\"",
          "32:             \"  ...\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     def test_down_arrow_end_of_input(self):",
          "35:         # fmt: off",
          "36:         code = (",
          "39:         )",
          "40:         # fmt: on",
          "41:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "37:             'def f():\\n'",
          "38:             '  ...\\n'",
          "",
          "[Added Lines]",
          "49:             \"def f():\\n\"",
          "50:             \"  ...\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:         self.assertEqual(reader.pos, 10)",
          "301:         self.assertEqual(reader.cxy, (1, 1))",
          "304: class TestPyReplOutput(TestCase):",
          "305:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:     def test_auto_indent_default(self):",
          "316:         # fmt: off",
          "317:         input_code = (",
          "318:             \"def f():\\n\"",
          "319:                 \"pass\\n\\n\"",
          "320:         )",
          "322:         output_code = (",
          "323:             \"def f():\\n\"",
          "324:             \"    pass\\n\"",
          "325:             \"    \"",
          "326:         )",
          "327:         # fmt: on",
          "329:     def test_auto_indent_continuation(self):",
          "330:         # auto indenting according to previous user indentation",
          "331:         # fmt: off",
          "332:         events = itertools.chain(",
          "333:             code_to_events(\"def f():\\n\"),",
          "334:             # add backspace to delete default auto-indent",
          "335:             [",
          "336:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "337:             ],",
          "338:             code_to_events(",
          "339:                 \"  pass\\n\"",
          "340:                   \"pass\\n\\n\"",
          "341:             ),",
          "342:         )",
          "344:         output_code = (",
          "345:             \"def f():\\n\"",
          "346:             \"  pass\\n\"",
          "347:             \"  pass\\n\"",
          "348:             \"  \"",
          "349:         )",
          "350:         # fmt: on",
          "352:         reader = self.prepare_reader(events)",
          "353:         output = multiline_input(reader)",
          "354:         self.assertEqual(output, output_code)",
          "356:     def test_auto_indent_prev_block(self):",
          "357:         # auto indenting according to indentation in different block",
          "358:         # fmt: off",
          "359:         events = itertools.chain(",
          "360:             code_to_events(\"def f():\\n\"),",
          "361:             # add backspace to delete default auto-indent",
          "362:             [",
          "363:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "364:             ],",
          "365:             code_to_events(",
          "366:                 \"  pass\\n\"",
          "367:                 \"pass\\n\\n\"",
          "368:             ),",
          "369:             code_to_events(",
          "370:                 \"def g():\\n\"",
          "371:                   \"pass\\n\\n\"",
          "372:             ),",
          "373:         )",
          "376:         output_code = (",
          "377:             \"def g():\\n\"",
          "378:             \"  pass\\n\"",
          "379:             \"  \"",
          "380:         )",
          "381:         # fmt: on",
          "383:         reader = self.prepare_reader(events)",
          "384:         output1 = multiline_input(reader)",
          "385:         output2 = multiline_input(reader)",
          "386:         self.assertEqual(output2, output_code)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:     def test_multiline_edit(self):",
          "318:         events = itertools.chain(",
          "320:             [",
          "321:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "322:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "323:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "324:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "327:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "328:                 Event(evt=\"key\", data=\"g\", raw=bytearray(b\"g\")),",
          "329:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "",
          "[Removed Lines]",
          "319:             code_to_events(\"def f():\\n  ...\\n\\n\"),",
          "325:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "326:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "",
          "[Added Lines]",
          "404:             code_to_events(\"def f():\\n...\\n\\n\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:         reader = self.prepare_reader(events)",
          "336:         output = multiline_input(reader)",
          "338:         output = multiline_input(reader)",
          "341:     def test_history_navigation_with_up_arrow(self):",
          "342:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "337:         self.assertEqual(output, \"def f():\\n  ...\\n  \")",
          "339:         self.assertEqual(output, \"def g():\\n  ...\\n  \")",
          "",
          "[Added Lines]",
          "420:         self.assertEqual(output, \"def f():\\n    ...\\n    \")",
          "422:         self.assertEqual(output, \"def g():\\n    ...\\n    \")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "508:     def test_paste(self):",
          "509:         # fmt: off",
          "510:         code = (",
          "517:         )",
          "518:         # fmt: on",
          "",
          "[Removed Lines]",
          "511:             'def a():\\n'",
          "512:             '  for x in range(10):\\n'",
          "513:             '    if x%2:\\n'",
          "514:             '      print(x)\\n'",
          "515:             '    else:\\n'",
          "516:             '      pass\\n'",
          "",
          "[Added Lines]",
          "595:             \"def a():\\n\"",
          "596:             \"  for x in range(10):\\n\"",
          "597:             \"    if x%2:\\n\"",
          "598:             \"      print(x)\\n\"",
          "599:             \"    else:\\n\"",
          "600:             \"      pass\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "534:     def test_paste_mid_newlines(self):",
          "535:         # fmt: off",
          "536:         code = (",
          "541:         )",
          "542:         # fmt: on",
          "",
          "[Removed Lines]",
          "537:             'def f():\\n'",
          "538:             '  x = y\\n'",
          "539:             '  \\n'",
          "540:             '  y = z\\n'",
          "",
          "[Added Lines]",
          "621:             \"def f():\\n\"",
          "622:             \"  x = y\\n\"",
          "623:             \"  \\n\"",
          "624:             \"  y = z\\n\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "558:     def test_paste_mid_newlines_not_in_paste_mode(self):",
          "559:         # fmt: off",
          "560:         code = (",
          "565:         )",
          "567:         expected = (",
          "571:         )",
          "572:         # fmt: on",
          "",
          "[Removed Lines]",
          "561:             'def f():\\n'",
          "562:             '  x = y\\n'",
          "563:             '  \\n'",
          "564:             '  y = z\\n\\n'",
          "568:             'def f():\\n'",
          "569:             '  x = y\\n'",
          "570:             '    '",
          "",
          "[Added Lines]",
          "645:             \"def f():\\n\"",
          "646:                 \"x = y\\n\"",
          "647:                 \"\\n\"",
          "648:                 \"y = z\\n\\n\"",
          "652:             \"def f():\\n\"",
          "653:             \"    x = y\\n\"",
          "654:             \"    \"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579:     def test_paste_not_in_paste_mode(self):",
          "580:         # fmt: off",
          "581:         input_code = (",
          "588:         )",
          "590:         output_code = (",
          "596:         )",
          "597:         # fmt: on",
          "",
          "[Removed Lines]",
          "582:             'def a():\\n'",
          "583:             '  for x in range(10):\\n'",
          "584:             '    if x%2:\\n'",
          "585:             '      print(x)\\n'",
          "586:             '    else:\\n'",
          "587:             '      pass\\n\\n'",
          "591:             'def a():\\n'",
          "592:             '  for x in range(10):\\n'",
          "593:             '      if x%2:\\n'",
          "594:             '            print(x)\\n'",
          "595:             '                else:'",
          "",
          "[Added Lines]",
          "666:             \"def a():\\n\"",
          "667:                 \"for x in range(10):\\n\"",
          "668:                     \"if x%2:\\n\"",
          "669:                         \"print(x)\\n\"",
          "670:                     \"else:\\n\"",
          "671:                         \"pass\\n\\n\"",
          "675:             \"def a():\\n\"",
          "676:             \"    for x in range(10):\\n\"",
          "677:             \"        if x%2:\\n\"",
          "678:             \"            print(x)\\n\"",
          "679:             \"            else:\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "605:         \"\"\"Test that bracketed paste using \\x1b[200~ and \\x1b[201~ works.\"\"\"",
          "606:         # fmt: off",
          "607:         input_code = (",
          "616:         )",
          "618:         output_code = (",
          "627:         )",
          "628:         # fmt: on",
          "",
          "[Removed Lines]",
          "608:             'def a():\\n'",
          "609:             '  for x in range(10):\\n'",
          "610:             '\\n'",
          "611:             '    if x%2:\\n'",
          "612:             '      print(x)\\n'",
          "613:             '\\n'",
          "614:             '    else:\\n'",
          "615:             '      pass\\n'",
          "619:             'def a():\\n'",
          "620:             '  for x in range(10):\\n'",
          "621:             '\\n'",
          "622:             '    if x%2:\\n'",
          "623:             '      print(x)\\n'",
          "624:             '\\n'",
          "625:             '    else:\\n'",
          "626:             '      pass\\n'",
          "",
          "[Added Lines]",
          "692:             \"def a():\\n\"",
          "693:             \"  for x in range(10):\\n\"",
          "694:             \"\\n\"",
          "695:             \"    if x%2:\\n\"",
          "696:             \"      print(x)\\n\"",
          "697:             \"\\n\"",
          "698:             \"    else:\\n\"",
          "699:             \"      pass\\n\"",
          "703:             \"def a():\\n\"",
          "704:             \"  for x in range(10):\\n\"",
          "705:             \"\\n\"",
          "706:             \"    if x%2:\\n\"",
          "707:             \"      print(x)\\n\"",
          "708:             \"\\n\"",
          "709:             \"    else:\\n\"",
          "710:             \"      pass\\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
      "candidate_info": {
        "commit_hash": "c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
        "files": [
          "Lib/pydoc.py"
        ],
        "message": "[3.13] gh-119856: Support exiting help() with just \"exit\" (GH-119858) (#119967)\n\ngh-119856: Support exiting help() with just \"exit\" (GH-119858)\n(cherry picked from commit 4223f1d828d3a3e1c8d803e3fdd420afd7d85faf)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/pydoc.py||Lib/pydoc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pydoc.py||Lib/pydoc.py": [
          "File: Lib/pydoc.py -> Lib/pydoc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2008:             if (len(request) > 2 and request[0] == request[-1] in (\"'\", '\"')",
          "2009:                     and request[0] not in request[1:-1]):",
          "2010:                 request = request[1:-1]",
          "2012:             if request == 'help':",
          "2013:                 self.intro()",
          "2014:             else:",
          "",
          "[Removed Lines]",
          "2011:             if request.lower() in ('q', 'quit'): break",
          "",
          "[Added Lines]",
          "2011:             if request.lower() in ('q', 'quit', 'exit'): break",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2060: enter \"modules spam\".",
          "2062: To quit this help utility and return to the interpreter,",
          "2064: '''.format('%d.%d' % sys.version_info[:2]))",
          "2066:     def list(self, items, columns=4, width=80):",
          "",
          "[Removed Lines]",
          "2063: enter \"q\" or \"quit\".",
          "",
          "[Added Lines]",
          "2063: enter \"q\", \"quit\" or \"exit\".",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5289c450a324bd560b328ecd42ac9faf578276e",
      "candidate_info": {
        "commit_hash": "f5289c450a324bd560b328ecd42ac9faf578276e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f5289c450a324bd560b328ecd42ac9faf578276e",
        "files": [
          "Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_repl.py",
          "Misc/NEWS.d/next/Library/2024-05-25-10-40-38.gh-issue-118908.XcZiq4.rst"
        ],
        "message": "[3.13] gh-118908: Limit exposed globals from internal imports and definitions on new REPL startup (GH-119547) (#120362)",
        "before_after_code_files": [
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_repl.py||Lib/test/test_repl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import _sitebuiltins",
          "29: import linecache",
          "30: import sys",
          "31: import code",
          "32: from types import ModuleType",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import builtins",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: from .console import InteractiveColoredConsole",
          "35: from .readline import _get_reader, multiline_input",
          "37: _error: tuple[type[Exception], ...] | type[Exception]",
          "38: try:",
          "39:     from .unix_console import _error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: TYPE_CHECKING = False",
          "40: if TYPE_CHECKING:",
          "41:     from typing import Any",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     \"clear\": _clear_screen,",
          "74: }",
          "77: def run_multiline_interactive_console(",
          "78:     mainmodule: ModuleType | None = None,",
          "79:     future_flags: int = 0,",
          "80:     console: code.InteractiveConsole | None = None,",
          "81: ) -> None:",
          "83:     from .readline import _setup",
          "84:     _setup()",
          "87:     if console is None:",
          "88:         console = InteractiveColoredConsole(",
          "90:         )",
          "91:     if future_flags:",
          "92:         console.compile.compiler.flags |= future_flags",
          "",
          "[Removed Lines]",
          "82:     import __main__",
          "86:     mainmodule = mainmodule or __main__",
          "89:             mainmodule.__dict__, filename=\"<stdin>\"",
          "",
          "[Added Lines]",
          "83: DEFAULT_NAMESPACE: dict[str, Any] = {",
          "84:     '__name__': '__main__',",
          "85:     '__doc__': None,",
          "86:     '__package__': None,",
          "87:     '__loader__': None,",
          "88:     '__spec__': None,",
          "89:     '__annotations__': {},",
          "90:     '__builtins__': builtins,",
          "91: }",
          "101:     namespace = mainmodule.__dict__ if mainmodule else DEFAULT_NAMESPACE",
          "104:             namespace, filename=\"<stdin>\"",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import io",
          "3: import os",
          "4: import rlcompleter",
          "6: from unittest.mock import patch",
          "8: from .support import (",
          "9:     FakeConsole,",
          "",
          "[Removed Lines]",
          "1: import itertools",
          "5: from unittest import TestCase",
          "",
          "[Added Lines]",
          "2: import itertools",
          "5: import select",
          "6: import subprocess",
          "7: import sys",
          "8: from unittest import TestCase, skipUnless",
          "10: from test.support import force_not_colorized",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "18: from _pyrepl.readline import multiline_input as readline_multiline_input",
          "21: class TestCursorPosition(TestCase):",
          "22:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: try:",
          "25:     import pty",
          "26: except ImportError:",
          "27:     pty = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:         reader = self.prepare_reader(events)",
          "829:         output = multiline_input(reader)",
          "830:         self.assertEqual(output, input_code)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: @skipUnless(pty, \"requires pty\")",
          "842: class TestMain(TestCase):",
          "843:     @force_not_colorized",
          "844:     def test_exposed_globals_in_repl(self):",
          "845:         expected_output = (",
          "846:             \"[\\'__annotations__\\', \\'__builtins__\\', \\'__doc__\\', \\'__loader__\\', \"",
          "847:             \"\\'__name__\\', \\'__package__\\', \\'__spec__\\']\"",
          "848:         )",
          "849:         output, exit_code = self.run_repl([\"sorted(dir())\", \"exit\"])",
          "850:         if \"can\\'t use pyrepl\" in output:",
          "851:             self.skipTest(\"pyrepl not available\")",
          "852:         self.assertEqual(exit_code, 0)",
          "853:         self.assertIn(expected_output, output)",
          "855:     def test_dumb_terminal_exits_cleanly(self):",
          "856:         env = os.environ.copy()",
          "857:         env.update({\"TERM\": \"dumb\"})",
          "858:         output, exit_code = self.run_repl(\"exit()\\n\", env=env)",
          "859:         self.assertEqual(exit_code, 0)",
          "860:         self.assertIn(\"warning: can\\'t use pyrepl\", output)",
          "861:         self.assertNotIn(\"Exception\", output)",
          "862:         self.assertNotIn(\"Traceback\", output)",
          "864:     def run_repl(self, repl_input: str | list[str], env: dict | None = None) -> tuple[str, int]:",
          "865:         master_fd, slave_fd = pty.openpty()",
          "866:         process = subprocess.Popen(",
          "867:             [sys.executable, \"-i\", \"-u\"],",
          "868:             stdin=slave_fd,",
          "869:             stdout=slave_fd,",
          "870:             stderr=slave_fd,",
          "871:             text=True,",
          "872:             close_fds=True,",
          "873:             env=env if env else os.environ,",
          "874:        )",
          "875:         if isinstance(repl_input, list):",
          "876:             repl_input = \"\\n\".join(repl_input) + \"\\n\"",
          "877:         os.write(master_fd, repl_input.encode(\"utf-8\"))",
          "879:         output = []",
          "880:         while select.select([master_fd], [], [], 0.5)[0]:",
          "881:             data = os.read(master_fd, 1024).decode(\"utf-8\")",
          "882:             if not data:",
          "883:                 break",
          "884:             output.append(data)",
          "886:         os.close(master_fd)",
          "887:         os.close(slave_fd)",
          "888:         exit_code = process.wait()",
          "889:         return \"\\n\".join(output), exit_code",
          "",
          "---------------"
        ],
        "Lib/test/test_repl.py||Lib/test/test_repl.py": [
          "File: Lib/test/test_repl.py -> Lib/test/test_repl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Test the interactive interpreter.\"\"\"",
          "4: import os",
          "6: import subprocess",
          "7: from textwrap import dedent",
          "8: from test import support",
          "9: from test.support import cpython_only, has_subprocess_support, SuppressCrashReport",
          "",
          "[Removed Lines]",
          "3: import sys",
          "5: import unittest",
          "",
          "[Added Lines]",
          "5: import sys",
          "6: import unittest",
          "",
          "---------------"
        ]
      }
    }
  ]
}