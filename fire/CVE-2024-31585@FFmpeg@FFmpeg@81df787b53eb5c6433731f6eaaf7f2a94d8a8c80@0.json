{
  "cve_id": "CVE-2024-31585",
  "cve_desc": "FFmpeg version n5.1 to n6.1 was discovered to contain an Off-by-one Error vulnerability in libavfilter/avf_showspectrum.c. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted input.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "81df787b53eb5c6433731f6eaaf7f2a94d8a8c80",
  "patch_info": {
    "commit_hash": "81df787b53eb5c6433731f6eaaf7f2a94d8a8c80",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/81df787b53eb5c6433731f6eaaf7f2a94d8a8c80",
    "files": [
      "libavfilter/avf_showspectrum.c"
    ],
    "message": "avfilter/avf_showspectrum: stop using AVAudioFifo to keep samples\n\nFixes limitation of input duration that showspectrumpic can process.",
    "before_after_code_files": [
      "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c"
    ]
  },
  "patch_diff": {
    "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c": [
      "File: libavfilter/avf_showspectrum.c -> libavfilter/avf_showspectrum.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <math.h>",
      "32: #include \"libavutil/tx.h\"",
      "34: #include \"libavutil/avassert.h\"",
      "35: #include \"libavutil/avstring.h\"",
      "36: #include \"libavutil/channel_layout.h\"",
      "",
      "[Removed Lines]",
      "33: #include \"libavutil/audio_fifo.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53: enum SlideMode    { REPLACE, SCROLL, FULLFRAME, RSCROLL, LREPLACE, NB_SLIDES };",
      "54: enum Orientation  { VERTICAL, HORIZONTAL, NB_ORIENTATIONS };",
      "56: typedef struct ShowSpectrumContext {",
      "57:     const AVClass *class;",
      "58:     int w, h;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55: #define DEFAULT_LENGTH 300",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "60:     AVRational auto_frame_rate;",
      "61:     AVRational frame_rate;",
      "62:     AVFrame *outpicref;",
      "63:     int nb_display_channels;",
      "64:     int orientation;",
      "65:     int channel_width;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:     AVFrame *in_frame;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     int hop_size;",
      "96:     float *combine_buffer;      ///< color combining buffer (3 * h items)",
      "97:     float **color_buffer;       ///< color buffer (3 * h * ch items)",
      "99:     int64_t pts;",
      "100:     int64_t old_pts;",
      "101:     int old_len;",
      "",
      "[Removed Lines]",
      "98:     AVAudioFifo *fifo;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "104:     int start_x, start_y;",
      "105:     float drange, limit;",
      "106:     float dmin, dmax;",
      "107:     int (*plot_channel)(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs);",
      "108: } ShowSpectrumContext;",
      "110: #define OFFSET(x) offsetof(ShowSpectrumContext, x)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     uint64_t samples;",
      "111:     AVFrame **frames;",
      "112:     unsigned int nb_frames;",
      "113:     unsigned int frames_size;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "330:     }",
      "331:     av_freep(&s->magnitudes);",
      "332:     av_frame_free(&s->outpicref);",
      "334:     if (s->phases) {",
      "335:         for (i = 0; i < s->nb_display_channels; i++)",
      "336:             av_freep(&s->phases[i]);",
      "337:     }",
      "338:     av_freep(&s->phases);",
      "339: }",
      "341: static int query_formats(AVFilterContext *ctx)",
      "",
      "[Removed Lines]",
      "333:     av_audio_fifo_free(s->fifo);",
      "",
      "[Added Lines]",
      "339:     av_frame_free(&s->in_frame);",
      "346:     while (s->nb_frames > 0) {",
      "347:         av_frame_free(&s->frames[s->nb_frames - 1]);",
      "348:         s->nb_frames--;",
      "349:     }",
      "351:     av_freep(&s->frames);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "382:     const float *p = (float *)fin->extended_data[ch];",
      "384:     if (s->stop) {",
      "385:         float theta, phi, psi, a, b, S, c;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "396:     float *in_frame = (float *)s->in_frame->extended_data[ch];",
      "398:     memmove(in_frame, in_frame + s->hop_size, (s->fft_size - s->hop_size) * sizeof(float));",
      "399:     memcpy(in_frame + s->fft_size - s->hop_size, p, fin->nb_samples * sizeof(float));",
      "401:     for (int i = fin->nb_samples; i < s->hop_size; i++)",
      "402:         in_frame[i + s->fft_size - s->hop_size] = 0.f;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "391:         int M = s->win_size / 2;",
      "393:         for (n = 0; n < s->win_size; n++) {",
      "395:             s->fft_data[ch][n].im = 0;",
      "396:         }",
      "",
      "[Removed Lines]",
      "394:             s->fft_data[ch][n].re = p[n] * window_func_lut[n];",
      "",
      "[Added Lines]",
      "414:             s->fft_data[ch][n].re = in_frame[n] * window_func_lut[n];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "458:         }",
      "459:     } else {",
      "460:         for (n = 0; n < s->win_size; n++) {",
      "462:             s->fft_in[ch][n].im = 0;",
      "463:         }",
      "",
      "[Removed Lines]",
      "461:             s->fft_in[ch][n].re = p[n] * window_func_lut[n];",
      "",
      "[Added Lines]",
      "481:             s->fft_in[ch][n].re = in_frame[n] * window_func_lut[n];",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "726:     return a;",
      "727: }",
      "730: {",
      "731:     ShowSpectrumContext *s = ctx->priv;",
      "732:     AVFilterLink *inlink = ctx->inputs[0];",
      "",
      "[Removed Lines]",
      "729: static int draw_legend(AVFilterContext *ctx, int samples)",
      "",
      "[Added Lines]",
      "749: static int draw_legend(AVFilterContext *ctx, uint64_t samples)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1239:     av_log(ctx, AV_LOG_VERBOSE, \"s:%dx%d FFT window size:%d\\n\",",
      "1240:            s->w, s->h, s->win_size);",
      "1245:         return AVERROR(ENOMEM);",
      "1246:     return 0;",
      "1247: }",
      "",
      "[Removed Lines]",
      "1242:     av_audio_fifo_free(s->fifo);",
      "1243:     s->fifo = av_audio_fifo_alloc(inlink->format, inlink->channels, s->win_size);",
      "1244:     if (!s->fifo)",
      "",
      "[Added Lines]",
      "1262:     s->in_frame = ff_get_audio_buffer(inlink, s->win_size);",
      "1263:     if (!s->in_frame)",
      "1264:         return AVERROR(ENOMEM);",
      "1266:     s->frames = av_fast_realloc(NULL, &s->frames_size,",
      "1267:                                 DEFAULT_LENGTH * sizeof(*(s->frames)));",
      "1268:     if (!s->frames)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1439:     }",
      "1441:     if (s->sliding != FULLFRAME || s->xpos == 0)",
      "1444:     if (s->sliding == LREPLACE) {",
      "1445:         s->xpos--;",
      "",
      "[Removed Lines]",
      "1442:         outpicref->pts = av_rescale_q(insamples->pts, inlink->time_base, outlink->time_base);",
      "",
      "[Added Lines]",
      "1467:         s->pts = outpicref->pts = av_rescale_q(insamples->pts, inlink->time_base, outlink->time_base);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1507:     AVFilterLink *inlink = ctx->inputs[0];",
      "1508:     AVFilterLink *outlink = ctx->outputs[0];",
      "1509:     ShowSpectrumContext *s = ctx->priv;",
      "1512:     FF_FILTER_FORWARD_STATUS_BACK(outlink, inlink);",
      "1518:         if (ret < 0)",
      "1519:             return ret;",
      "1520:         if (ret > 0) {",
      "1540:             av_frame_free(&fin);",
      "1542:         }",
      "1563:     }",
      "1565:     if (ff_outlink_get_status(inlink) == AVERROR_EOF &&",
      "1566:         s->sliding == FULLFRAME &&",
      "1567:         s->xpos > 0 && s->outpicref) {",
      "1570:         if (s->orientation == VERTICAL) {",
      "1571:             for (int i = 0; i < outlink->h; i++) {",
      "",
      "[Removed Lines]",
      "1510:     int ret;",
      "1514:     if (av_audio_fifo_size(s->fifo) < s->win_size) {",
      "1515:         AVFrame *frame = NULL;",
      "1517:         ret = ff_inlink_consume_frame(inlink, &frame);",
      "1521:             s->pts = frame->pts;",
      "1522:             s->consumed = 0;",
      "1524:             av_audio_fifo_write(s->fifo, (void **)frame->extended_data, frame->nb_samples);",
      "1525:             av_frame_free(&frame);",
      "1526:         }",
      "1527:     }",
      "1529:     if (s->outpicref && (av_audio_fifo_size(s->fifo) >= s->win_size ||",
      "1530:         ff_outlink_get_status(inlink))) {",
      "1531:         AVFrame *fin = ff_get_audio_buffer(inlink, s->win_size);",
      "1532:         if (!fin)",
      "1533:             return AVERROR(ENOMEM);",
      "1535:         fin->pts = s->pts + s->consumed;",
      "1536:         s->consumed += s->hop_size;",
      "1537:         ret = av_audio_fifo_peek(s->fifo, (void **)fin->extended_data,",
      "1538:                                  FFMIN(s->win_size, av_audio_fifo_size(s->fifo)));",
      "1539:         if (ret < 0) {",
      "1541:             return ret;",
      "1544:         av_assert0(fin->nb_samples == s->win_size);",
      "1546:         ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);",
      "1548:         if (s->data == D_MAGNITUDE)",
      "1549:             ff_filter_execute(ctx, calc_channel_magnitudes, NULL, NULL, s->nb_display_channels);",
      "1551:         if (s->data == D_PHASE)",
      "1552:             ff_filter_execute(ctx, calc_channel_phases, NULL, NULL, s->nb_display_channels);",
      "1554:         if (s->data == D_UPHASE)",
      "1555:             ff_filter_execute(ctx, calc_channel_uphases, NULL, NULL, s->nb_display_channels);",
      "1557:         ret = plot_spectrum_column(inlink, fin);",
      "1559:         av_frame_free(&fin);",
      "1560:         av_audio_fifo_drain(s->fifo, s->hop_size);",
      "1561:         if (ret <= 0 && !ff_outlink_get_status(inlink))",
      "1562:             return ret;",
      "1568:         int64_t pts;",
      "",
      "[Added Lines]",
      "1535:     int ret, status;",
      "1536:     int64_t pts;",
      "1540:     if (s->outpicref) {",
      "1541:         AVFrame *fin;",
      "1543:         ret = ff_inlink_consume_samples(inlink, s->hop_size, s->hop_size, &fin);",
      "1547:             s->consumed += fin->nb_samples;",
      "1548:             ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);",
      "1550:             if (s->data == D_MAGNITUDE)",
      "1551:                 ff_filter_execute(ctx, calc_channel_magnitudes, NULL, NULL, s->nb_display_channels);",
      "1553:             if (s->data == D_PHASE)",
      "1554:                 ff_filter_execute(ctx, calc_channel_phases, NULL, NULL, s->nb_display_channels);",
      "1556:             if (s->data == D_UPHASE)",
      "1557:                 ff_filter_execute(ctx, calc_channel_uphases, NULL, NULL, s->nb_display_channels);",
      "1559:             ret = plot_spectrum_column(inlink, fin);",
      "1561:             if (ret <= 0)",
      "1562:                 return ret;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1588:         return 0;",
      "1589:     }",
      "1595:         ff_filter_set_ready(ctx, 10);",
      "1596:         return 0;",
      "1597:     }",
      "1602:         ff_inlink_request_frame(inlink);",
      "1603:         return 0;",
      "1604:     }",
      "",
      "[Removed Lines]",
      "1591:     FF_FILTER_FORWARD_STATUS(inlink, outlink);",
      "1592:     if (av_audio_fifo_size(s->fifo) >= s->win_size ||",
      "1593:         ff_inlink_queued_frames(inlink) > 0 ||",
      "1594:         ff_outlink_get_status(inlink) == AVERROR_EOF) {",
      "1599:     if (ff_outlink_frame_wanted(outlink) && av_audio_fifo_size(s->fifo) < s->win_size &&",
      "1600:         ff_inlink_queued_frames(inlink) == 0 &&",
      "1601:         ff_outlink_get_status(inlink) != AVERROR_EOF) {",
      "",
      "[Added Lines]",
      "1591:     if (ff_inlink_acknowledge_status(inlink, &status, &pts)) {",
      "1592:         if (status == AVERROR_EOF) {",
      "1593:             ff_outlink_set_status(outlink, status, s->pts);",
      "1594:             return 0;",
      "1595:         }",
      "1596:     }",
      "1598:     if (ff_inlink_queued_samples(inlink) >= s->hop_size) {",
      "1603:     if (ff_outlink_frame_wanted(outlink)) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1691:     AVFilterContext *ctx = outlink->src;",
      "1692:     ShowSpectrumContext *s = ctx->priv;",
      "1693:     AVFilterLink *inlink = ctx->inputs[0];",
      "1696:     ret = ff_request_frame(inlink);",
      "1699:         int consumed = 0;",
      "1700:         int x = 0, sz = s->orientation == VERTICAL ? s->w : s->h;",
      "1701:         int ch, spf, spb;",
      "1702:         AVFrame *fin;",
      "1705:         spf = FFMAX(1, spf);",
      "1710:         if (!fin)",
      "1711:             return AVERROR(ENOMEM);",
      "1713:         while (x < sz) {",
      "1726:                 }",
      "1727:             }",
      "1729:             ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);",
      "",
      "[Removed Lines]",
      "1694:     int ret, samples;",
      "1697:     samples = av_audio_fifo_size(s->fifo);",
      "1698:     if (ret == AVERROR_EOF && s->outpicref && samples > 0) {",
      "1704:         spf = s->win_size * (samples / ((s->win_size * sz) * ceil(samples / (float)(s->win_size * sz))));",
      "1707:         spb = (samples / (spf * sz)) * spf;",
      "1709:         fin = ff_get_audio_buffer(inlink, s->win_size);",
      "1714:             ret = av_audio_fifo_peek(s->fifo, (void **)fin->extended_data, s->win_size);",
      "1715:             if (ret < 0) {",
      "1716:                 av_frame_free(&fin);",
      "1717:                 return ret;",
      "1718:             }",
      "1720:             av_audio_fifo_drain(s->fifo, spf);",
      "1722:             if (ret < s->win_size) {",
      "1723:                 for (ch = 0; ch < s->nb_display_channels; ch++) {",
      "1724:                     memset(fin->extended_data[ch] + ret * sizeof(float), 0,",
      "1725:                            (s->win_size - ret) * sizeof(float));",
      "",
      "[Added Lines]",
      "1696:     int ret;",
      "1699:     if (ret == AVERROR_EOF && s->outpicref && s->samples > 0) {",
      "1702:         unsigned int nb_frame = 0;",
      "1704:         int src_offset = 0;",
      "1707:         spf = s->win_size * (s->samples / ((s->win_size * sz) * ceil(s->samples / (float)(s->win_size * sz))));",
      "1710:         spb = (s->samples / (spf * sz)) * spf;",
      "1712:         fin = ff_get_audio_buffer(inlink, spf);",
      "1717:             int acc_samples = 0;",
      "1718:             int dst_offset = 0;",
      "1720:             while (nb_frame <= s->nb_frames) {",
      "1721:                 AVFrame *cur_frame = s->frames[nb_frame];",
      "1722:                 int cur_frame_samples = cur_frame->nb_samples;",
      "1723:                 int nb_samples = 0;",
      "1725:                 if (acc_samples < spf) {",
      "1726:                     nb_samples = FFMIN(spf - acc_samples, cur_frame_samples - src_offset);",
      "1727:                     acc_samples += nb_samples;",
      "1728:                     av_samples_copy(fin->extended_data, cur_frame->extended_data,",
      "1729:                                     dst_offset, src_offset, nb_samples,",
      "1730:                                     cur_frame->channels, AV_SAMPLE_FMT_FLTP);",
      "1731:                 }",
      "1733:                 src_offset += nb_samples;",
      "1734:                 dst_offset += nb_samples;",
      "1735:                 if (cur_frame_samples <= src_offset) {",
      "1736:                     av_frame_free(&s->frames[nb_frame]);",
      "1737:                     nb_frame++;",
      "1738:                     src_offset = 0;",
      "1741:                 if (acc_samples == spf)",
      "1742:                     break;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1746:         s->outpicref->pts = 0;",
      "1748:         if (s->legend)",
      "1751:         ret = ff_filter_frame(outlink, s->outpicref);",
      "1752:         s->outpicref = NULL;",
      "",
      "[Removed Lines]",
      "1749:             draw_legend(ctx, samples);",
      "",
      "[Added Lines]",
      "1765:             draw_legend(ctx, s->samples);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1759: {",
      "1760:     AVFilterContext *ctx = inlink->dst;",
      "1761:     ShowSpectrumContext *s = ctx->priv;",
      "1767: }",
      "1769: static const AVFilterPad showspectrumpic_inputs[] = {",
      "",
      "[Removed Lines]",
      "1762:     int ret;",
      "1764:     ret = av_audio_fifo_write(s->fifo, (void **)insamples->extended_data, insamples->nb_samples);",
      "1765:     av_frame_free(&insamples);",
      "1766:     return ret;",
      "",
      "[Added Lines]",
      "1778:     void *ptr;",
      "1780:     if (s->nb_frames + 1ULL > s->frames_size / sizeof(*(s->frames))) {",
      "1781:         ptr = av_fast_realloc(s->frames, &s->frames_size, s->frames_size * 2);",
      "1782:         if (!ptr)",
      "1783:             return AVERROR(ENOMEM);",
      "1784:         s->frames = ptr;",
      "1785:     }",
      "1787:     s->frames[s->nb_frames] = insamples;",
      "1788:     s->samples += insamples->nb_samples;",
      "1789:     s->nb_frames++;",
      "1791:     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07b8d6a897b927a187c3d3268202e7160aa93900",
      "candidate_info": {
        "commit_hash": "07b8d6a897b927a187c3d3268202e7160aa93900",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/07b8d6a897b927a187c3d3268202e7160aa93900",
        "files": [
          "libavfilter/avf_showspectrum.c"
        ],
        "message": "avfilter/avf_showspectrum: stop rewriting pts\n\nAlso fix dropping of first frame for fullframe sliding.",
        "before_after_code_files": [
          "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c"
          ],
          "candidate": [
            "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/avf_showspectrum.c||libavfilter/avf_showspectrum.c": [
          "File: libavfilter/avf_showspectrum.c -> libavfilter/avf_showspectrum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     double win_scale;",
          "94:     float overlap;",
          "95:     float gain;",
          "97:     int hop_size;",
          "98:     float *combine_buffer;      ///< color combining buffer (3 * h items)",
          "99:     float **color_buffer;       ///< color buffer (3 * h * ch items)",
          "100:     int64_t pts;",
          "101:     int64_t old_pts;",
          "102:     int old_len;",
          "103:     int single_pic;",
          "104:     int legend;",
          "",
          "[Removed Lines]",
          "96:     int consumed;",
          "",
          "[Added Lines]",
          "101:     int64_t in_pts;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1464:     }",
          "1466:     if (s->sliding != FULLFRAME || s->xpos == 0)",
          "1469:     if (s->sliding == LREPLACE) {",
          "1470:         s->xpos--;",
          "",
          "[Removed Lines]",
          "1467:         s->pts = outpicref->pts = av_rescale_q(insamples->pts, inlink->time_base, outlink->time_base);",
          "",
          "[Added Lines]",
          "1467:         s->pts = outpicref->pts = av_rescale_q(s->in_pts, inlink->time_base, outlink->time_base);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1481:     }",
          "1483:     if (!s->single_pic && (s->sliding != FULLFRAME || s->xpos == 0)) {",
          "1485:             AVFrame *clone;",
          "1487:             if (s->legend) {",
          "",
          "[Removed Lines]",
          "1484:         if (s->old_pts < outpicref->pts) {",
          "",
          "[Added Lines]",
          "1484:         if (s->old_pts < outpicref->pts || s->sliding == FULLFRAME) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1544:         if (ret < 0)",
          "1545:             return ret;",
          "1546:         if (ret > 0) {",
          "1548:             ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);",
          "1550:             if (s->data == D_MAGNITUDE)",
          "",
          "[Removed Lines]",
          "1547:             s->consumed += fin->nb_samples;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1556:             if (s->data == D_UPHASE)",
          "1557:                 ff_filter_execute(ctx, calc_channel_uphases, NULL, NULL, s->nb_display_channels);",
          "1559:             ret = plot_spectrum_column(inlink, fin);",
          "1560:             av_frame_free(&fin);",
          "1561:             if (ret <= 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:             if (s->xpos == 0 || s->sliding != FULLFRAME)",
          "1559:                 s->in_pts = fin->pts;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1580:                 memset(s->outpicref->data[2] + i * s->outpicref->linesize[2], 128, outlink->w);",
          "1581:             }",
          "1582:         }",
          "1584:         pts = s->outpicref->pts;",
          "1585:         ret = ff_filter_frame(outlink, s->outpicref);",
          "1586:         s->outpicref = NULL;",
          "",
          "[Removed Lines]",
          "1583:         s->outpicref->pts += av_rescale_q(s->consumed, inlink->time_base, outlink->time_base);",
          "",
          "[Added Lines]",
          "1584:         s->outpicref->pts = av_rescale_q(s->in_pts, inlink->time_base, outlink->time_base);",
          "",
          "---------------"
        ]
      }
    }
  ]
}