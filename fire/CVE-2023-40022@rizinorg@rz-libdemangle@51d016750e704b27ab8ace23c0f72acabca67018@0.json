{
  "cve_id": "CVE-2023-40022",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.6.0 and prior are vulnerable to integer overflow in `consume_count` of `src/gnu_v2/cplus-dem.c`. The overflow check is valid logic but, is missing the modulus if the block once compiled. The compiler sees this block as unreachable code since the prior statement is multiplication by 10 and fails to consider overflow assuming the count will always be a multiple of 10. Rizin version 0.6.1 contains a fix for the issue. A temporary workaround would be disabling C++ demangling using the configuration option `bin.demangle=false`.",
  "repo": "rizinorg/rz-libdemangle",
  "patch_hash": "51d016750e704b27ab8ace23c0f72acabca67018",
  "patch_info": {
    "commit_hash": "51d016750e704b27ab8ace23c0f72acabca67018",
    "repo": "rizinorg/rz-libdemangle",
    "commit_url": "https://github.com/rizinorg/rz-libdemangle/commit/51d016750e704b27ab8ace23c0f72acabca67018",
    "files": [
      "src/gnu_v2/cplus-dem.c",
      "test/test_cxx_gnu_v2.c"
    ],
    "message": "[gnuv2] Fix multiplication overflow check due compiler optimizations (#54)\n\nVulnerability found by @ifyGecko",
    "before_after_code_files": [
      "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c",
      "test/test_cxx_gnu_v2.c||test/test_cxx_gnu_v2.c"
    ]
  },
  "patch_diff": {
    "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c": [
      "File: src/gnu_v2/cplus-dem.c -> src/gnu_v2/cplus-dem.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:  consume_count(type)",
      "421:   const char **type;",
      "422: {",
      "425:  if (!isdigit((unsigned char)**type))",
      "426:   return -1;",
      "",
      "[Removed Lines]",
      "423:  int count = 0;",
      "",
      "[Added Lines]",
      "426:  volatile int count = 0;",
      "",
      "---------------"
    ],
    "test/test_cxx_gnu_v2.c||test/test_cxx_gnu_v2.c": [
      "File: test/test_cxx_gnu_v2.c -> test/test_cxx_gnu_v2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"minunit.h\"",
      "6: mu_demangle_tests(gnu_v2,",
      "7:  mu_demangle_test(\"_vt.foo\", \"foo virtual table\"),",
      "8:  mu_demangle_test(\"_vt$foo\", \"foo virtual table\"),",
      "9:  mu_demangle_test(\"_vt$foo$bar\", \"foo::bar virtual table\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  mu_demangle_test(\"_ITM_deregisterTMCCCCCCCCCCCCCCCCCCCtart__5555555555555555CloneTable\", NULL),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "498e00785ebdff8867f403799e6b709d98cd82f6",
      "candidate_info": {
        "commit_hash": "498e00785ebdff8867f403799e6b709d98cd82f6",
        "repo": "rizinorg/rz-libdemangle",
        "commit_url": "https://github.com/rizinorg/rz-libdemangle/commit/498e00785ebdff8867f403799e6b709d98cd82f6",
        "files": [
          "src/gnu_v2/cplus-dem.c"
        ],
        "message": "Fix integer overflow in gnuv2 c++ demangler.",
        "before_after_code_files": [
          "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c"
          ],
          "candidate": [
            "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gnu_v2/cplus-dem.c||src/gnu_v2/cplus-dem.c": [
          "File: src/gnu_v2/cplus-dem.c -> src/gnu_v2/cplus-dem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <string.h>",
          "38: #include <stdio.h>",
          "39: #include <stdlib.h>",
          "41: #include \"cplus-dem.h\"",
          "42: #undef CURRENT_DEMANGLING_STYLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <stdint.h>",
          "42: #define UT32_MAX 0xffffffffu",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408: static const char *",
          "409:  demangle_qualifier PARAMS((int));",
          "412:    Conversion terminates on the first non-digit character.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: #define overflow_check_mul(a, b) \\",
          "415:  do { \\",
          "416:   if ((b) && (a) > (UT32_MAX / (b))) { \\",
          "417:    return -1; \\",
          "418:   } \\",
          "419:  } while (0)",
          "421: #define overflow_check_add(a, b) \\",
          "422:  do { \\",
          "423:   if ((a) > (UT32_MAX - (b))) { \\",
          "424:    return -1; \\",
          "425:   } \\",
          "426:  } while (0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:  if (!isdigit((unsigned char)**type))",
          "429:   return -1;",
          "431:  while (isdigit((unsigned char)**type)) {",
          "432:   count *= 10;",
          "446:   (*type)++;",
          "447:  }",
          "",
          "[Removed Lines]",
          "426:  volatile int count = 0;",
          "435:      We assume that count is represented using two's-complement;",
          "436:      no power of two is divisible by ten, so if an overflow occurs",
          "437:      when multiplying by ten, the result will not be a multiple of",
          "439:   if ((count % 10) != 0) {",
          "440:    while (isdigit((unsigned char)**type))",
          "441:     (*type)++;",
          "442:    return -1;",
          "443:   }",
          "445:   count += **type - '0';",
          "",
          "[Added Lines]",
          "443:  uint32_t count = 0;",
          "449:   overflow_check_mul(count, 10);",
          "452:   uint32_t num = **type - '0';",
          "453:   overflow_check_add(count, num);",
          "454:   count += num;",
          "",
          "---------------"
        ]
      }
    }
  ]
}