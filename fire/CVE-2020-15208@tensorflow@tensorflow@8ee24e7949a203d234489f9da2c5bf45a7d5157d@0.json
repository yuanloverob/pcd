{
  "cve_id": "CVE-2020-15208",
  "cve_desc": "In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue is patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "8ee24e7949a203d234489f9da2c5bf45a7d5157d",
  "patch_info": {
    "commit_hash": "8ee24e7949a203d234489f9da2c5bf45a7d5157d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/8ee24e7949a203d234489f9da2c5bf45a7d5157d",
    "files": [
      "tensorflow/lite/kernels/internal/types.h"
    ],
    "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
    "before_after_code_files": [
      "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
      "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "438: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
      "439:                        const RuntimeShape& shape2, int index2) {",
      "440:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
      "442: }",
      "444: template <typename... Args>",
      "",
      "[Removed Lines]",
      "441:   return shape1.Dims(index1);",
      "",
      "[Added Lines]",
      "441:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79deaeb06c7e947f6669976b4a505211c0a7ac9e",
      "candidate_info": {
        "commit_hash": "79deaeb06c7e947f6669976b4a505211c0a7ac9e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/79deaeb06c7e947f6669976b4a505211c0a7ac9e",
        "files": [
          "tensorflow/lite/kernels/internal/types.h"
        ],
        "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
          "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
          "433:                        const RuntimeShape& shape2, int index2) {",
          "434:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
          "436: }",
          "438: template <typename... Args>",
          "",
          "[Removed Lines]",
          "435:   return shape1.Dims(index1);",
          "",
          "[Added Lines]",
          "435:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "537cce161dc1d5afb5f463ca565fc29221b343c3",
      "candidate_info": {
        "commit_hash": "537cce161dc1d5afb5f463ca565fc29221b343c3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/537cce161dc1d5afb5f463ca565fc29221b343c3",
        "files": [
          "tensorflow/lite/kernels/internal/types.h"
        ],
        "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
          "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
          "433:                        const RuntimeShape& shape2, int index2) {",
          "434:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
          "436: }",
          "438: template <typename... Args>",
          "",
          "[Removed Lines]",
          "435:   return shape1.Dims(index1);",
          "",
          "[Added Lines]",
          "435:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd671a90fc4af7cd9793be82a014d971c8869aea",
      "candidate_info": {
        "commit_hash": "cd671a90fc4af7cd9793be82a014d971c8869aea",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cd671a90fc4af7cd9793be82a014d971c8869aea",
        "files": [
          "tensorflow/lite/kernels/internal/types.h"
        ],
        "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
          "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
          "433:                        const RuntimeShape& shape2, int index2) {",
          "434:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
          "436: }",
          "438: template <typename... Args>",
          "",
          "[Removed Lines]",
          "435:   return shape1.Dims(index1);",
          "",
          "[Added Lines]",
          "435:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ba2508c5fd26396387235784834509b55d0315b",
      "candidate_info": {
        "commit_hash": "5ba2508c5fd26396387235784834509b55d0315b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5ba2508c5fd26396387235784834509b55d0315b",
        "files": [
          "tensorflow/lite/kernels/internal/types.h"
        ],
        "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
          "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
          "433:                        const RuntimeShape& shape2, int index2) {",
          "434:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
          "436: }",
          "438: template <typename... Args>",
          "",
          "[Removed Lines]",
          "435:   return shape1.Dims(index1);",
          "",
          "[Added Lines]",
          "435:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28a9887abefa982812d3c769b2c1e7578f32c7dd",
      "candidate_info": {
        "commit_hash": "28a9887abefa982812d3c769b2c1e7578f32c7dd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/28a9887abefa982812d3c769b2c1e7578f32c7dd",
        "files": [
          "tensorflow/lite/kernels/internal/types.h"
        ],
        "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/types.h||tensorflow/lite/kernels/internal/types.h": [
          "File: tensorflow/lite/kernels/internal/types.h -> tensorflow/lite/kernels/internal/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: inline int MatchingDim(const RuntimeShape& shape1, int index1,",
          "433:                        const RuntimeShape& shape2, int index2) {",
          "434:   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));",
          "436: }",
          "438: template <typename... Args>",
          "",
          "[Removed Lines]",
          "435:   return shape1.Dims(index1);",
          "",
          "[Added Lines]",
          "435:   return std::min(shape1.Dims(index1), shape2.Dims(index2));",
          "",
          "---------------"
        ]
      }
    }
  ]
}