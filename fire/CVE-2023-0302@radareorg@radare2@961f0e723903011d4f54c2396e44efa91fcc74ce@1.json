{
  "cve_id": "CVE-2023-0302",
  "cve_desc": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) in GitHub repository radareorg/radare2 prior to 5.8.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "patch_info": {
    "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
    "files": [
      "libr/anal/meta.c",
      "libr/bin/dwarf.c",
      "libr/cons/hud.c",
      "libr/core/cmd_meta.c",
      "libr/core/cmd_print.c",
      "libr/util/str.c",
      "test/db/cmd/dwarf"
    ],
    "message": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\n* Reproducer: dwarf_test_func_patched",
    "before_after_code_files": [
      "libr/anal/meta.c||libr/anal/meta.c",
      "libr/bin/dwarf.c||libr/bin/dwarf.c",
      "libr/cons/hud.c||libr/cons/hud.c",
      "libr/core/cmd_meta.c||libr/core/cmd_meta.c",
      "libr/core/cmd_print.c||libr/core/cmd_print.c",
      "libr/util/str.c||libr/util/str.c"
    ]
  },
  "patch_diff": {
    "libr/anal/meta.c||libr/anal/meta.c": [
      "File: libr/anal/meta.c -> libr/anal/meta.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:  item->subtype = subtype;",
      "112:  item->space = space;",
      "113:  free (item->str);",
      "120:  }",
      "121:  R_DIRTY (a);",
      "122:  if (!node) {",
      "",
      "[Removed Lines]",
      "114:  item->str = str ? strdup (str) : NULL;",
      "115:  if (str && !item->str) {",
      "116:   if (!node) { // If we just created this",
      "117:    free (item);",
      "118:   }",
      "119:   return false;",
      "",
      "[Added Lines]",
      "114:  if (R_STR_ISNOTEMPTY (str)) {",
      "115:   item->str = strdup (str);",
      "119:  } else {",
      "120:   item->str = NULL;",
      "",
      "---------------"
    ],
    "libr/bin/dwarf.c||libr/bin/dwarf.c": [
      "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "431:  int i = 0;",
      "432:  size_t count;",
      "433:  const ut8 *tmp_buf = NULL;",
      "435:  if (mode == R_MODE_PRINT) {",
      "436:   print (\" The Directory Table:\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "434:  char *fn = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "465:  for (i = 0; i < 2; i++) {",
      "466:   while (buf + 1 < buf_end) {",
      "468:    size_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);",
      "469:    ut64 id_idx, mod_time, file_len;",
      "472:    if (!len) {",
      "473:     buf++;",
      "",
      "[Removed Lines]",
      "467:    const char *filename = (const char *)buf;",
      "470:    size_t len = r_str_nlen (filename, maxlen);",
      "",
      "[Added Lines]",
      "470:    free (fn);",
      "471:    fn = r_str_ndup ((const char *)buf, maxlen);",
      "472:    r_str_ansi_strip (fn);",
      "473:    size_t len = strlen (fn);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:     }",
      "514:     if (hdr->file_names) {",
      "516:      hdr->file_names[count].id_idx = id_idx;",
      "517:      hdr->file_names[count].mod_time = mod_time;",
      "518:      hdr->file_names[count].file_len = file_len;",
      "",
      "[Removed Lines]",
      "515:      hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);",
      "",
      "[Added Lines]",
      "518:      hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "525:    }",
      "526:    count++;",
      "527:    if (mode == R_MODE_PRINT && i) {",
      "529:    }",
      "530:   }",
      "531:   if (i == 0) {",
      "",
      "[Removed Lines]",
      "528:     print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);",
      "",
      "[Added Lines]",
      "531:     print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",",
      "532:       entry_index++, id_idx, mod_time, file_len, fn);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "544:  }",
      "546: beach:",
      "547:  sdb_free (sdb);",
      "549:  return buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "551:  free (fn);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "678: static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, int mode, PrintfCallback print) {",
      "679:  const char *p;",
      "681:  char offset[SDB_NUM_BUFSZ];",
      "682:  char *offset_ptr;",
      "",
      "[Removed Lines]",
      "680:  char *fileline;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "706: #else",
      "707:  p = file;",
      "708: #endif",
      "710:  offset_ptr = sdb_itoa (addr, 16, offset, sizeof (offset));",
      "711:  sdb_add (s, offset_ptr, fileline, 0);",
      "712:  sdb_add (s, fileline, offset_ptr, 0);",
      "",
      "[Removed Lines]",
      "709:  fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);",
      "",
      "[Added Lines]",
      "713:  char *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);",
      "714:  r_str_ansi_strip (fileline);",
      "715:  r_str_replace_ch (fileline, '\\n', 0, true);",
      "716:  r_str_replace_ch (fileline, '\\t', 0, true);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1666:   break;",
      "1667:  case DW_FORM_string:",
      "1668:   value->kind = DW_AT_KIND_STRING;",
      "1670:   if (value->string.content) {",
      "1671:    buf += strlen (value->string.content) + 1;",
      "1672:   }",
      "",
      "[Removed Lines]",
      "1669:   value->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;",
      "",
      "[Added Lines]",
      "1676:   if (*buf) {",
      "1677:    char *name = r_str_ndup ((const char *)buf, buf_end - buf);",
      "1678:    r_str_ansi_strip (name);",
      "1679:    r_str_replace_ch (name, '\\n', 0, true);",
      "1680:    r_str_replace_ch (name, '\\t', 0, true);",
      "1681:    value->string.content = name;",
      "1682:   } else {",
      "1683:    value->string.content = NULL;",
      "1684:   }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1711:   value->kind = DW_AT_KIND_STRING;",
      "1712:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);",
      "1713:   if (debug_str && value->string.offset < debug_str_len) {",
      "1716:   } else {",
      "1717:    value->string.content = NULL; // Means malformed DWARF, should we print error message?",
      "1718:   }",
      "",
      "[Removed Lines]",
      "1714:    const char *ds = (const char *)(debug_str + value->string.offset);",
      "1715:    value->string.content = strdup (ds); // r_str_ndup (ds, debug_str_len - value->string.offset);",
      "",
      "[Added Lines]",
      "1729:    char *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);",
      "1730:    if (ds) {",
      "1731:     r_str_ansi_strip (ds);",
      "1732:     r_str_replace_ch (ds, '\\n', 0, true);",
      "1733:     r_str_replace_ch (ds, '\\t', 0, true);",
      "1734:     value->string.content = ds;",
      "1735:    } else {",
      "1736:     value->string.content = NULL;",
      "1737:    }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1905:   if (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {",
      "1908:   }",
      "1909:   die->count++;",
      "1910:  }",
      "",
      "[Removed Lines]",
      "1906:    const char *name = attribute->string.content;",
      "1907:    sdb_set (sdb, \"DW_AT_comp_dir\", name, 0);",
      "",
      "[Added Lines]",
      "1928:    char *name = strdup (attribute->string.content);",
      "1929:    r_str_ansi_strip (name);",
      "1930:    r_str_replace_ch (name, '\\n', 0, true);",
      "1931:    r_str_replace_ch (name, '\\t', 0, true);",
      "1932:    sdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);",
      "",
      "---------------"
    ],
    "libr/cons/hud.c||libr/cons/hud.c": [
      "File: libr/cons/hud.c -> libr/cons/hud.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: R_API char *r_cons_hud_file(const char *f) {",
      "10:  char *s = r_file_slurp (f, NULL);",
      "11:  if (s) {",
      "12:   char *ret = r_cons_hud_string (s);",
      "13:   free (s);",
      "14:   return ret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:   r_str_ansi_strip (s);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  }",
      "30:  r_str_replace_ch (o, '\\r', 0, true);",
      "31:  r_str_replace_ch (o, '\\t', 0, true);",
      "32:  RList *fl = r_list_new ();",
      "33:  int i;",
      "34:  if (!fl) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:  r_str_ansi_strip (o);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66:  if (!o) {",
      "67:   return NULL;",
      "68:  }",
      "69:  r_str_replace_ch (o, '\\r', 0, true);",
      "70:  r_str_replace_ch (o, '\\t', 0, true);",
      "71:  RList *fl = r_list_new ();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:  r_str_ansi_strip (o);",
      "",
      "---------------"
    ],
    "libr/core/cmd_meta.c||libr/core/cmd_meta.c": [
      "File: libr/core/cmd_meta.c -> libr/core/cmd_meta.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "539:   break;",
      "540:  case '!':",
      "541:   {",
      "543:    const char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);",
      "545:    if (out) {",
      "547:     r_core_cmdf (core, \"CC-@0x%08\"PFMT64x, addr);",
      "",
      "[Removed Lines]",
      "542:    char *out;",
      "544:    out = r_core_editor (core, NULL, comment);",
      "",
      "[Added Lines]",
      "543:    char *out = r_core_editor (core, NULL, comment);",
      "545:     r_str_ansi_strip (out);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "560:   char *text;",
      "561:   char *nc = strdup (newcomment);",
      "562:   r_str_unescape (nc);",
      "563:   if (comment) {",
      "564:    text = malloc (strlen (comment) + strlen (newcomment) + 2);",
      "565:    if (text) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "563:   r_str_ansi_strip (nc);",
      "",
      "---------------"
    ],
    "libr/core/cmd_print.c||libr/core/cmd_print.c": [
      "File: libr/core/cmd_print.c -> libr/core/cmd_print.c"
    ],
    "libr/util/str.c||libr/util/str.c": [
      "File: libr/util/str.c -> libr/util/str.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1957: }",
      "1960: R_API size_t r_str_ansi_strip(char *str) {",
      "1961:  size_t i = 0;",
      "1962:  while (str[i]) {",
      "1963:   size_t chlen = __str_ansi_length (str + i);",
      "1964:   if (chlen > 1) {",
      "1966:   }",
      "1968:  }",
      "1969:  return i;",
      "1970: }",
      "",
      "[Removed Lines]",
      "1965:    r_str_cpy (str + i + 1, str + i + chlen);",
      "1967:   i++;",
      "",
      "[Added Lines]",
      "1966:    r_str_cpy (str + i, str + i + chlen);",
      "1967:   } else {",
      "1968:    i++;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38318bc588809d2817cdf226c8ff668a1d1087e3",
      "candidate_info": {
        "commit_hash": "38318bc588809d2817cdf226c8ff668a1d1087e3",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/38318bc588809d2817cdf226c8ff668a1d1087e3",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Warn when finding compressed dwarf sections ##bin\n\n* Not yet supported, but will do soon",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:  if (R_LIKELY (o && o->sections)) {",
          "336:   r_list_foreach (o->sections, iter, section) {",
          "337:    if (strstr (section->name, sn)) {",
          "338:     return section;",
          "339:    }",
          "340:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     if (strstr (section->name, \"zdebug\")) {",
          "339:      R_LOG_WARN (\"Compressed dwarf sections not yet supported\");",
          "340:      return NULL;",
          "341:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935:   value->kind = DW_AT_KIND_STRING;",
          "1936:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "1944:   char *str = get_section_string (bin, section, value->string.offset);",
          "1945:   if (str) {",
          "1946:    r_str_ansi_strip (str);",
          "",
          "[Removed Lines]",
          "1938:   RBinSection *section;",
          "1939:   if (def->attr_form == DW_FORM_strp) {",
          "1940:    section = getsection (bin, \"debug_str\");",
          "1941:   } else {",
          "1942:    section = getsection (bin, \"debug_line_str\");",
          "1943:   }",
          "",
          "[Added Lines]",
          "1942:   RBinSection *section = (def->attr_form == DW_FORM_strp)",
          "1943:    ? getsection (bin, \"debug_str\") : getsection (bin, \"debug_line_str\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf6c6f867e525f9e033b7c60199c6fd4b73d2573",
      "candidate_info": {
        "commit_hash": "cf6c6f867e525f9e033b7c60199c6fd4b73d2573",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/cf6c6f867e525f9e033b7c60199c6fd4b73d2573",
        "files": [
          "libr/bin/dwarf.c",
          "test/db/formats/xcoff64"
        ],
        "message": "Support DWARF section names for XCOFF64 ##bin",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  [DW_UT_hi_user] = \"DW_UT_hi_user\",",
          "327: };",
          "331:  RListIter *iter;",
          "332:  RBinSection *section = NULL;",
          "335:  if (R_LIKELY (o && o->sections)) {",
          "336:   r_list_foreach (o->sections, iter, section) {",
          "338:     if (strstr (section->name, \"zdebug\")) {",
          "339:      R_LOG_WARN (\"Compressed dwarf sections not yet supported\");",
          "340:      return NULL;",
          "",
          "[Removed Lines]",
          "330: static RBinSection *getsection(RBin *a, const char *sn) {",
          "333:  RBinFile *binfile = a ? a->cur: NULL;",
          "334:  RBinObject *o = binfile ? binfile->bo : NULL;",
          "337:    if (strstr (section->name, sn)) {",
          "",
          "[Added Lines]",
          "329: enum {",
          "330:  DWARF_SN_ABBREV,",
          "331:  DWARF_SN_INFO,",
          "332:  DWARF_SN_FRAME,",
          "333:  DWARF_SN_LINE,",
          "334:  DWARF_SN_LOC,",
          "335:  DWARF_SN_STR,",
          "336:  DWARF_SN_LINE_STR,",
          "337:  DWARF_SN_RANGES,",
          "338:  DWARF_SN_ARANGES,",
          "339:  DWARF_SN_PUBNAMES,",
          "340:  DWARF_SN_PUBTYPES,",
          "342:  DWARF_SN_MAX",
          "343: };",
          "345: static const char *dwarf_sn_elf[DWARF_SN_MAX] = {",
          "346:  [DWARF_SN_ABBREV] = \"debug_abbrev\",",
          "347:  [DWARF_SN_INFO] = \"debug_info\",",
          "348:  [DWARF_SN_FRAME] = \"debug_frame\",",
          "349:  [DWARF_SN_LINE] = \"debug_line\",",
          "350:  [DWARF_SN_LOC] = \"debug_loc\",",
          "351:  [DWARF_SN_STR] = \"debug_str\",",
          "352:  [DWARF_SN_LINE_STR] = \"debug_line_str\",",
          "353:  [DWARF_SN_RANGES] = \"debug_ranges\",",
          "354:  [DWARF_SN_ARANGES] = \"debug_aranges\",",
          "355:  [DWARF_SN_PUBNAMES] = \"debug_pubnames\",",
          "356:  [DWARF_SN_PUBTYPES] = \"debug_pubtypes\",",
          "357: };",
          "360: static const char *dwarf_sn_xcoff64[DWARF_SN_MAX] = {",
          "361:  [DWARF_SN_ABBREV] = \"dwabrev\",",
          "362:  [DWARF_SN_INFO] = \"dwinfo\",",
          "363:  [DWARF_SN_FRAME] = \"dwframe\",",
          "364:  [DWARF_SN_LINE] = \"dwline\",",
          "365:  [DWARF_SN_LOC] = \"dwloc\",",
          "366:  [DWARF_SN_RANGES] = \"dwrnges\",",
          "367:  [DWARF_SN_ARANGES] = \"dwarnge\",",
          "369:  [DWARF_SN_PUBNAMES] = \"dwpbnms\",",
          "370:  [DWARF_SN_PUBTYPES] = \"dwpbtyp\"",
          "371: };",
          "374: static RBinSection *getsection(RBin *bin, int sn) {",
          "377:  RBinObject *o = R_UNWRAP3 (bin, cur, bo);",
          "378:  char const *rclass = R_UNWRAP3 (o, info, rclass);",
          "379:  r_return_val_if_fail (sn >= 0 && sn < DWARF_SN_MAX, NULL);",
          "382:   const char * const *name_tab = rclass && !strcmp (o->info->rclass, \"xcoff64\")",
          "383:    ? dwarf_sn_xcoff64",
          "384:    : dwarf_sn_elf;",
          "385:   const char *name_str = name_tab[sn];",
          "387:    if (strstr (section->name, name_str)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347: }",
          "352:  RBinSection *section = getsection (bin, sect_name);",
          "353:  RBinFile *binfile = bin ? bin->cur: NULL;",
          "354:  if (!section || !binfile) {",
          "",
          "[Removed Lines]",
          "350: static ut8 *get_section_bytes(RBin *bin, const char *sect_name, size_t *len) {",
          "351:  r_return_val_if_fail (bin && sect_name && len, NULL);",
          "",
          "[Added Lines]",
          "400: static ut8 *get_section_bytes(RBin *bin, int sect_name, size_t *len) {",
          "401:  r_return_val_if_fail (bin && len, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:      {",
          "727:      ut64 section_offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "728:      RBinSection *section = (form_code == DW_FORM_strp)",
          "731:      name = get_section_string (bin, section, section_offset);",
          "732:      if (name) {",
          "733:       r_str_ansi_strip (name);",
          "",
          "[Removed Lines]",
          "729:       ? getsection (bin, \"debug_str\")",
          "730:       : getsection (bin, \"debug_line_str\");",
          "",
          "[Added Lines]",
          "779:       ? getsection (bin, DWARF_SN_STR)",
          "780:       : getsection (bin, DWARF_SN_LINE_STR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1942:  case DW_FORM_line_strp:",
          "1943:   value->kind = DW_AT_KIND_STRING;",
          "1944:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "1946:   RBinSection *section = (def->attr_form == DW_FORM_strp)",
          "1948:   char *str = get_section_string (bin, section, value->string.offset);",
          "1949:   if (str) {",
          "1950:    r_str_ansi_strip (str);",
          "",
          "[Removed Lines]",
          "1947:    ? getsection (bin, \"debug_str\") : getsection (bin, \"debug_line_str\");",
          "",
          "[Added Lines]",
          "1997:    ? getsection (bin, DWARF_SN_STR) : getsection (bin, DWARF_SN_LINE_STR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2432: R_API RBinDwarfDebugInfo *r_bin_dwarf_parse_info(RBinDwarfDebugAbbrev *da, RBin *bin, int mode) {",
          "2433:  r_return_val_if_fail (da && bin, NULL);",
          "2434:  RBinDwarfDebugInfo *info = NULL;",
          "2436:  RBinFile *binfile = bin->cur;",
          "2438:  ut64 debug_str_len = 0;",
          "",
          "[Removed Lines]",
          "2435:  RBinSection *section = getsection (bin, \"debug_info\");",
          "",
          "[Added Lines]",
          "2485:  RBinSection *section = getsection (bin, DWARF_SN_INFO);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2441:  const bool be = r_bin_is_big_endian (bin);",
          "2442:  if (binfile && section) {",
          "2444:   if (debug_str) {",
          "2445:    debug_str_len = debug_str->size;",
          "2446:    debug_str_buf = calloc (1, debug_str_len + 1);",
          "",
          "[Removed Lines]",
          "2443:   RBinSection *debug_str = getsection (bin, \"debug_str\");",
          "",
          "[Added Lines]",
          "2493:   RBinSection *debug_str = getsection (bin, DWARF_SN_STR);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2518:  RList *list = NULL;",
          "2519:  int len, ret;",
          "2520:  const bool be = r_bin_is_big_endian (bin);",
          "2522:  RBinFile *binfile = bin->cur;",
          "2523:  if (binfile && section) {",
          "2524:   len = section->size;",
          "",
          "[Removed Lines]",
          "2521:  RBinSection *section = getsection (bin, \"debug_line\");",
          "",
          "[Added Lines]",
          "2571:  RBinSection *section = getsection (bin, DWARF_SN_LINE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2582: }",
          "2584: R_API void r_bin_dwarf_parse_aranges(RBin *bin, int mode) {",
          "2586:  RBinFile *binfile = bin ? bin->cur: NULL;",
          "2587:  if (binfile && section) {",
          "2588:   size_t len = section->size;",
          "",
          "[Removed Lines]",
          "2585:  RBinSection *section = getsection (bin, \"debug_aranges\");",
          "",
          "[Added Lines]",
          "2635:  RBinSection *section = getsection (bin, DWARF_SN_ARANGES);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2607: R_API RBinDwarfDebugAbbrev *r_bin_dwarf_parse_abbrev(RBin *bin, int mode) {",
          "2608:  size_t len = 0;",
          "2610:  if (!buf) {",
          "2611:   return NULL;",
          "2612:  }",
          "",
          "[Removed Lines]",
          "2609:  ut8 *buf = get_section_bytes (bin, \"debug_abbrev\", &len);",
          "",
          "[Added Lines]",
          "2659:  ut8 *buf = get_section_bytes (bin, DWARF_SN_ABBREV, &len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2721:  size_t len = 0;",
          "2722:  const bool be = r_bin_is_big_endian (bin);",
          "2724:  if (!buf) {",
          "2725:   return NULL;",
          "2726:  }",
          "",
          "[Removed Lines]",
          "2723:  ut8 *buf = get_section_bytes (bin, \"debug_loc\", &len);",
          "",
          "[Added Lines]",
          "2773:  ut8 *buf = get_section_bytes (bin, DWARF_SN_LOC, &len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a378cca412c5848a597d702647eeb8617571ac6",
      "candidate_info": {
        "commit_hash": "8a378cca412c5848a597d702647eeb8617571ac6",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/8a378cca412c5848a597d702647eeb8617571ac6",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Store column information in the addr2line database ##dwarf",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869:  return buf;",
          "870: }",
          "874:  char offset[SDB_NUM_BUFSZ];",
          "875:  char *offset_ptr;",
          "878:   return;",
          "879:  }",
          "881:  if (p) {",
          "882:   p++;",
          "883:  } else {",
          "",
          "[Removed Lines]",
          "872: static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, int mode, PrintfCallback print) {",
          "873:  const char *p;",
          "877:  if (!s || !file) {",
          "880:  p = r_str_rchr (file, NULL, '/');",
          "",
          "[Added Lines]",
          "872: static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, ut64 column, int mode, PrintfCallback print) {",
          "875:  if (!s || R_STR_ISEMPTY (file)) {",
          "879:  const char *p = r_str_rchr (file, NULL, '/');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:  case 1:",
          "889:  case 'r':",
          "890:  case '*':",
          "892:   break;",
          "893:  }",
          "894: #if 0",
          "",
          "[Removed Lines]",
          "891:   print (\"CL %s:%d 0x%08\"PFMT64x\"\\n\", p, (int)line, addr);",
          "",
          "[Added Lines]",
          "890: #if R2_590",
          "892:   print (\"\\\"\\\"CL %s|%d|%d 0x%08\"PFMT64x\"\\n\", p, (int)line, (int)column, addr);",
          "893: #else",
          "894:   if (column) {",
          "895:    print (\"\\\"\\\"CL %s:%d:%d 0x%08\"PFMT64x\"\\n\", p, (int)line, (int)column, addr);",
          "896:   } else if (line > 0) {",
          "897:    print (\"\\\"\\\"CL %s:%d 0x%08\"PFMT64x\"\\n\", p, (int)line, addr);",
          "898:   }",
          "899: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "899: #else",
          "900:  p = file;",
          "901: #endif",
          "903:  r_str_ansi_strip (fileline);",
          "904:  r_str_replace_ch (fileline, '\\n', 0, true);",
          "905:  r_str_replace_ch (fileline, '\\t', 0, true);",
          "",
          "[Removed Lines]",
          "902:  char *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);",
          "",
          "[Added Lines]",
          "910:  char *fileline = (column > 0)",
          "911:   ? r_str_newf (\"%s|%\"PFMT64d\"|%\"PFMT64d, p, line, column)",
          "912:   : r_str_newf (\"%s|%\"PFMT64d, p, line);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "945:    int fnidx = regs->file - 1;",
          "946:    if (fnidx >= 0 && fnidx < hdr->file_names_count) {",
          "947:     add_sdb_addrline (binfile->sdb_addrinfo, regs->address,",
          "949:    }",
          "950:   }",
          "",
          "[Removed Lines]",
          "948:       hdr->file_names[fnidx].name, regs->line, mode, print);",
          "",
          "[Added Lines]",
          "958:       hdr->file_names[fnidx].name,",
          "959:       regs->line, regs->column, mode, print);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1036:   if (idx >= 0 && idx < hdr->file_names_count) {",
          "1037:    add_sdb_addrline (binfile->sdb_addrinfo, regs->address,",
          "1038:      hdr->file_names[idx].name,",
          "1040:   }",
          "1041:  }",
          "1042:  regs->basic_block = DWARF_FALSE;",
          "",
          "[Removed Lines]",
          "1039:      regs->line, mode, print);",
          "",
          "[Added Lines]",
          "1050:      regs->line, regs->column, mode, print);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1075:     add_sdb_addrline (binfile->sdb_addrinfo,",
          "1076:      regs->address,",
          "1077:      hdr->file_names[fnidx].name,",
          "1079:    }",
          "1080:   }",
          "1081:   regs->basic_block = DWARF_FALSE;",
          "",
          "[Removed Lines]",
          "1078:      regs->line, mode, print);",
          "",
          "[Added Lines]",
          "1089:      regs->line, regs->column, mode, print);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1301:  const ut8 *buf = obuf;",
          "1302:  int idx = 0;",
          "1305:   return false;",
          "1306:  }",
          "",
          "[Removed Lines]",
          "1304:  if (!buf || len< 4) {",
          "",
          "[Added Lines]",
          "1315:  if (!buf || len < 4) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1406:   return false;",
          "1407:  }",
          "1408:  RBinDwarfDie *tmp = (RBinDwarfDie *)realloc (cu->dies, cu->capacity * 2 * sizeof (RBinDwarfDie));",
          "1411:  }",
          "1417: }",
          "1419: static bool init_abbrev_decl(RBinDwarfAbbrevDecl *ad) {",
          "",
          "[Removed Lines]",
          "1409:  if (!tmp) {",
          "1410:   return false;",
          "1412:  memset ((ut8 *)tmp + cu->capacity * sizeof (RBinDwarfDie),",
          "1413:   0, cu->capacity * sizeof (RBinDwarfDie));",
          "1414:  cu->dies = tmp;",
          "1415:  cu->capacity *= 2;",
          "1416:  return true;",
          "",
          "[Added Lines]",
          "1415:  if (tmp) {",
          "1416:   memset ((ut8 *)tmp + cu->capacity * sizeof (RBinDwarfDie),",
          "1417:     0, cu->capacity * sizeof (RBinDwarfDie));",
          "1418:   cu->dies = tmp;",
          "1419:   cu->capacity *= 2;",
          "1420:   return true;",
          "1422:  return false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2527:      int line = atoi (tok);",
          "2528:      int column = 0;",
          "2529:      ut64 addr = r_num_get (NULL, key);",
          "2530:      RBinDwarfRow *row = row_new (addr, file, line, column);",
          "2531:      if (row) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2535:      char *tok2 = strchr (tok, '|');",
          "2536:      if (tok2) {",
          "2537:       column = atoi (tok2 + 1);",
          "2538:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e0243be4b2bdb6ae436efef5b0cccdf98e79880",
      "candidate_info": {
        "commit_hash": "1e0243be4b2bdb6ae436efef5b0cccdf98e79880",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/1e0243be4b2bdb6ae436efef5b0cccdf98e79880",
        "files": [
          "libr/bin/dwarf.c"
        ],
        "message": "Optimize dwarf parser reducing getsection for strp ##bin\n\n* Down loading times from 20 minutes to 20s",
        "before_after_code_files": [
          "libr/bin/dwarf.c||libr/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ],
          "candidate": [
            "libr/bin/dwarf.c||libr/bin/dwarf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/dwarf.c||libr/bin/dwarf.c": [
          "File: libr/bin/dwarf.c -> libr/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:  [DW_UT_hi_user] = \"DW_UT_hi_user\",",
          "335: };",
          "338:  RListIter *iter;",
          "339:  RBinSection *section = NULL;",
          "340:  RBinFile *binfile = a ? a->cur: NULL;",
          "341:  RBinObject *o = binfile ? binfile->o : NULL;",
          "345:   r_list_foreach (o->sections, iter, section) {",
          "346:    if (strstr (section->name, sn)) {",
          "347:     return section;",
          "",
          "[Removed Lines]",
          "337: RBinSection *getsection(RBin *a, const char *sn) {",
          "344:  if (o && o->sections) {",
          "",
          "[Added Lines]",
          "338: static RBinSection *getsection(RBin *a, const char *sn) {",
          "343:  if (R_LIKELY (o && o->sections)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:  return buf;",
          "370: }",
          "373: static int abbrev_cmp(const void *a, const void *b) {",
          "374:  const RBinDwarfAbbrevDecl *first = a;",
          "375:  const RBinDwarfAbbrevDecl *second = b;",
          "377:  if (first->offset > second->offset) {",
          "378:   return 1;",
          "380:   return -1;",
          "383:  }",
          "384: }",
          "386: static bool is_printable_lang(ut64 attr_code) {",
          "",
          "[Removed Lines]",
          "379:  } else if (first->offset < second->offset) {",
          "381:  } else {",
          "382:   return 0;",
          "",
          "[Added Lines]",
          "377:  }",
          "378:  if (first->offset < second->offset) {",
          "381:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1736:  return buf;",
          "1737: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1737: static char *get_section_string(RBin *bin, RBinSection * section, size_t offset) {",
          "1738:  ut8 str[32], str2[128], str3[2048];",
          "1739:  RBinFile *bf = bin ? bin->cur: NULL;",
          "1740:  if (!section || (section->paddr + offset + 2) > bf->size) {",
          "1741:   return NULL;",
          "1742:  }",
          "1743:  size_t len = R_MIN (section->size - offset, sizeof (str));",
          "1744:  r_buf_read_at (bf->buf, section->paddr + offset, str, len);",
          "1745:  if (r_str_nlen ((const char *)str, len) != len) {",
          "1747:   return r_str_ndup ((const char *)str, sizeof (str));",
          "1748:  }",
          "1749:  len = R_MIN (section->size - offset, sizeof (str2));",
          "1750:  r_buf_read_at (bf->buf, section->paddr + offset, str2, len);",
          "1751:  if (r_str_nlen ((const char *)str2, len) != len) {",
          "1753:   return r_str_ndup ((const char *)str2, sizeof (str2));",
          "1754:  }",
          "1755:  len = R_MIN (section->size - offset, sizeof (str3));",
          "1756:  r_buf_read_at (bf->buf, section->paddr + offset, str3, len);",
          "1757:  if (r_str_nlen ((const char *)str3, len) != len) {",
          "1759:   return r_str_ndup ((const char *)str3, sizeof (str3));",
          "1760:  }",
          "1761:  R_LOG_WARN (\"TRUNCATED (%s)\\n\", str3);",
          "1762:  return r_str_ndup ((const char *)str3, sizeof (str3));",
          "1763: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1877:  case DW_FORM_line_strp:",
          "1878:   value->kind = DW_AT_KIND_STRING;",
          "1879:   value->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end, be);",
          "1893:   } else {",
          "1895:   }",
          "1897:   break;",
          "1899:  case DW_FORM_ref_addr:",
          "",
          "[Removed Lines]",
          "1880:   const char *section_name = def->attr_form == DW_FORM_strp? \"debug_str\": \"debug_line_str\";",
          "1881:   size_t section_len = 0;",
          "1882:   ut8 *section = get_section_bytes (bin, section_name, &section_len);",
          "1883:   if (section && value->string.offset < section_len) {",
          "1884:    char *ds = r_str_ndup ((const char *)(section + value->string.offset), section_len - value->string.offset);",
          "1885:    if (ds) {",
          "1886:     r_str_ansi_strip (ds);",
          "1887:     r_str_replace_ch (ds, '\\n', 0, true);",
          "1888:     r_str_replace_ch (ds, '\\t', 0, true);",
          "1889:     value->string.content = ds;",
          "1890:    } else {",
          "1891:     value->string.content = NULL;",
          "1892:    }",
          "1894:    value->string.content = NULL; // Means malformed DWARF, should we print error message?",
          "1896:   free (section);",
          "",
          "[Added Lines]",
          "1905:   RBinSection *section;",
          "1906:   if (def->attr_form == DW_FORM_strp) {",
          "1907:    section = getsection (bin, \"debug_str\");",
          "1908:   } else {",
          "1909:    section = getsection (bin, \"debug_line_str\");;",
          "1910:   }",
          "1912:   char *str = get_section_string (bin, section, value->string.offset);",
          "1913:   if (str) {",
          "1914:    r_str_ansi_strip (str);",
          "1915:    r_str_replace_ch (str, '\\n', 0, true);",
          "1916:    r_str_replace_ch (str, '\\t', 0, true);",
          "1917:    value->string.content = str;",
          "1919:    value->string.content = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2067:   memset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));",
          "2069:   const ut8 *nbuf = parse_attr_value (bin, buf, buf_end - buf,",
          "2073:   if (!nbuf) {",
          "2074:    break;",
          "2075:   }",
          "",
          "[Removed Lines]",
          "2070:    &abbrev->defs[i],",
          "2071:    &die->attr_values[i],",
          "2072:    hdr, be);",
          "",
          "[Added Lines]",
          "2094:    &abbrev->defs[i], &die->attr_values[i], hdr, be);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2207:  hdr->header_size = buf - tmp; // header size excluding length field",
          "2208:  return buf;",
          "2209: }",
          "2213:  RBinDwarfCompUnit *tmp = realloc (info->comp_units,",
          "2214:   info->capacity * 2 * sizeof (RBinDwarfCompUnit));",
          "2215:  if (!tmp) {",
          "2217:  }",
          "2219:  memset ((ut8 *)tmp + info->capacity * sizeof (RBinDwarfCompUnit),",
          "2220:   0, info->capacity * sizeof (RBinDwarfCompUnit));",
          "2222:  info->comp_units = tmp;",
          "2223:  info->capacity *= 2;",
          "2226: }",
          "",
          "[Removed Lines]",
          "2210: static int expand_info(RBinDwarfDebugInfo *info) {",
          "2211:  r_return_val_if_fail (info && info->capacity == info->count, -1);",
          "2216:   return -1;",
          "2225:  return 0;",
          "",
          "[Added Lines]",
          "2232: static bool expand_info(RBinDwarfDebugInfo *info) {",
          "2233:  r_return_val_if_fail (info && info->capacity == info->count, -1);",
          "2237:   return false;",
          "2243:  return true;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2251:  while (buf < buf_end) {",
          "2252:   if (info->count >= info->capacity) {",
          "2254:     break;",
          "2255:    }",
          "2256:   }",
          "",
          "[Removed Lines]",
          "2253:    if (expand_info (info)) {",
          "",
          "[Added Lines]",
          "2271:    if (!expand_info (info)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2336:   }",
          "2338:   tmpdecl->code = tmp;",
          "2340:   tmpdecl->tag = tmp;",
          "2342:   tmpdecl->offset = offset;",
          "",
          "[Removed Lines]",
          "2339:   buf = r_uleb128 (buf, (size_t)(buf_end-buf), &tmp, NULL);",
          "",
          "[Added Lines]",
          "2355:   buf = r_uleb128 (buf, (size_t)(buf_end - buf), &tmp, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2380: R_API RBinDwarfDebugInfo *r_bin_dwarf_parse_info(RBinDwarfDebugAbbrev *da, RBin *bin, int mode) {",
          "2381:  r_return_val_if_fail (da && bin, NULL);",
          "2382:  RBinDwarfDebugInfo *info = NULL;",
          "2384:  RBinSection *section = getsection (bin, \"debug_info\");",
          "2385:  RBinFile *binfile = bin->cur;",
          "",
          "[Removed Lines]",
          "2383:  RBinSection *debug_str;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2390:  const bool be = r_bin_is_big_endian (bin);",
          "2391:  if (binfile && section) {",
          "2393:   if (debug_str) {",
          "2394:    debug_str_len = debug_str->size;",
          "2395:    debug_str_buf = calloc (1, debug_str_len + 1);",
          "",
          "[Removed Lines]",
          "2392:   debug_str = getsection (bin, \"debug_str\");",
          "",
          "[Added Lines]",
          "2407:   RBinSection *debug_str = getsection (bin, \"debug_str\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2445: static RBinDwarfRow *row_new(ut64 addr, const char *file, int line, int col) {",
          "2446:  r_return_val_if_fail (file, NULL);",
          "2447:  RBinDwarfRow *row = R_NEW0 (RBinDwarfRow);",
          "2450:  }",
          "2455:  return row;",
          "2456: }",
          "",
          "[Removed Lines]",
          "2448:  if (!row) {",
          "2449:   return NULL;",
          "2451:  row->file = strdup (file);",
          "2452:  row->address = addr;",
          "2453:  row->line = line;",
          "2454:  row->column = 0;",
          "",
          "[Added Lines]",
          "2462:  if (R_LIKELY (row)) {",
          "2463:   row->file = strdup (file);",
          "2464:   row->address = addr;",
          "2465:   row->line = line;",
          "2466:   row->column = col;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2512:     if (tok) {",
          "2514:      int line = atoi (tok);",
          "2518:     }",
          "2519:     free (file);",
          "2520:    }",
          "",
          "[Removed Lines]",
          "2515:      ut64 addr = r_num_math (NULL, key);",
          "2516:      RBinDwarfRow *row = row_new (addr, file, line, 0);",
          "2517:      r_list_append (list, row);",
          "",
          "[Added Lines]",
          "2528:      int column = 0;",
          "2529:      ut64 addr = r_num_get (NULL, key);",
          "2530:      RBinDwarfRow *row = row_new (addr, file, line, column);",
          "2531:      if (row) {",
          "2532:       r_list_append (list, row);",
          "2533:      }",
          "",
          "---------------"
        ]
      }
    }
  ]
}