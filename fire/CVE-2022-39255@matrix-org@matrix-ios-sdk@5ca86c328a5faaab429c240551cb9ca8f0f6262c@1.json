{
  "cve_id": "CVE-2022-39255",
  "cve_desc": "Matrix iOS SDK allows developers to build iOS apps compatible with Matrix. Prior to version 0.23.19, an attacker cooperating with a malicious homeserver can construct messages that legitimately appear to have come from another person, without any indication such as a grey shield. Additionally, a sophisticated attacker cooperating with a malicious homeserver could employ this vulnerability to perform a targeted attack in order to send fake to-device messages appearing to originate from another user. This can allow, for example, to inject the key backup secret during a self-verification, to make a targeted device start using a malicious key backup spoofed by the homeserver. These attacks are possible due to a protocol confusion vulnerability that accepts to-device messages encrypted with Megolm instead of Olm. matrix-ios-sdk version 0.23.19 has been modified to only accept Olm-encrypted to-device messages. Out of caution, several other checks have been audited or added. This attack requires coordination between a malicious home server and an attacker, so those who trust their home servers do not need a workaround. To avoid malicious backup attacks, one should not verify one's new logins using emoji/QR verifications methods until patched.",
  "repo": "matrix-org/matrix-ios-sdk",
  "patch_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
  "patch_info": {
    "commit_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "repo": "matrix-org/matrix-ios-sdk",
    "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "files": [
      "CHANGES.md",
      "MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ],
    "message": "Resolve multiple CVEs\n\nCVE-2022-39255\nCVE-2022-39257",
    "before_after_code_files": [
      "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ]
  },
  "patch_diff": {
    "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
      "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "1801:   ECF29BDF264195320053E6D6 /* MXAssertedIdentityModel.h in Headers */ = {isa = PBXBuildFile; fileRef = ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1802:   ECF29BE52641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1803:   ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1804:   ED1AE92A2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1805:   ED1AE92B2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1806:   ED21F68528104DA2002FF83D /* MXMegolmEncryptionTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1804:   ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1805:   ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1806:   ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1807:   ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1808:   ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1809:   ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1810:   ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1811:   ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1846:   ED5C754928B3E80300D24E85 /* MXLogObjcWrapper.h in Headers */ = {isa = PBXBuildFile; fileRef = ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1847:   ED5C95CE2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1848:   ED5C95CF2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1849:   ED7019DD2886C24100FC31B9 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D242885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift */; };",
      "1850:   ED7019DE2886C24A00FC31B9 /* MXTrustLevelSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D2F2885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift */; };",
      "1851:   ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D1B2885909E00F897E7 /* MXDeviceInfoUnitTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1857:   ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1858:   ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1859:   ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1860:   ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1861:   ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1862:   ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1863:   ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1864:   ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1865:   ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1866:   ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1867:   ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1868:   ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1869:   ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1870:   ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1871:   ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1872:   ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1873:   ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1874:   ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1875:   ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1876:   ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1877:   ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "1878:   ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2910:   ECF29BD2264194BB0053E6D6 /* MXCallAssertedIdentityEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXCallAssertedIdentityEventContent.m; sourceTree = \"<group>\"; };",
      "2911:   ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXAssertedIdentityModel.h; sourceTree = \"<group>\"; };",
      "2912:   ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXAssertedIdentityModel.m; sourceTree = \"<group>\"; };",
      "2913:   ED1AE9292881AC7100D3432A /* MXWarnings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXWarnings.h; sourceTree = \"<group>\"; };",
      "2914:   ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMegolmEncryptionTests.swift; sourceTree = \"<group>\"; };",
      "2915:   ED2DD111286C450600F06731 /* MXCryptoMachine.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoMachine.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2943:   ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXForwardedRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2944:   ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "2945:   ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2946:   ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXForwardedRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2935:   ED5C753A28B3E80300D24E85 /* MXLogger.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXLogger.m; sourceTree = \"<group>\"; };",
      "2936:   ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXLogObjcWrapper.h; sourceTree = \"<group>\"; };",
      "2937:   ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXOlmDeviceUnitTests.swift; sourceTree = \"<group>\"; };",
      "2938:   ED7019E42886C32900FC31B9 /* MXSASTransactionV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXSASTransactionV2.swift; sourceTree = \"<group>\"; };",
      "2939:   ED7019E72886C33100FC31B9 /* MXKeyVerificationRequestV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationRequestV2.swift; sourceTree = \"<group>\"; };",
      "2940:   ED7019EA2886C33A00FC31B9 /* MXKeyVerificationManagerV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationManagerV2.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2972:   ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactory.swift; sourceTree = \"<group>\"; };",
      "2973:   ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfo.swift; sourceTree = \"<group>\"; };",
      "2974:   ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXForwardedRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2975:   ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Dictionary.swift; sourceTree = \"<group>\"; };",
      "2976:   ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2977:   ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactoryUnitTests.swift; sourceTree = \"<group>\"; };",
      "2978:   ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMemoryCryptoStore.swift; sourceTree = \"<group>\"; };",
      "2979:   ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyResult.swift; sourceTree = \"<group>\"; };",
      "2980:   ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManager.swift; sourceTree = \"<group>\"; };",
      "2981:   ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManagerUnitTests.swift; sourceTree = \"<group>\"; };",
      "2982:   ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXDateProvider.swift; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3229:     B17B2BDB2369FC81009D6650 /* MXUIKitBackgroundTask.m */,",
      "3230:     EDF1B68F2876CD2C00BBBCEE /* MXTaskQueue.swift */,",
      "3231:     ED1AE9292881AC7100D3432A /* MXWarnings.h */,",
      "3232:    );",
      "3233:    path = Utils;",
      "3234:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3277:     ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3288:     32261B8723C749FB0018F1E2 /* Trust */,",
      "3289:     32A1513B1DAF768D00400192 /* Data */,",
      "3290:     3AC1379326432ED500EE1E74 /* Dehydration */,",
      "3291:     32BBAE642178E99100D85F46 /* KeyBackup */,",
      "3292:     32FA10B21FA1C28100E54233 /* KeySharing */,",
      "3293:     3A108A382580E979005EEBE9 /* KeyProvider */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3337:     ED6DAC0428C771D500ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4318:     32FA10BF1FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.h */,",
      "4319:     32FA10C01FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.m */,",
      "4320:     32A30B161FB4813400C8309E /* MXIncomingRoomKeyRequestManager.h */,",
      "4321:     32A30B171FB4813400C8309E /* MXIncomingRoomKeyRequestManager.m */,",
      "4322:     ED44F01328180EAB00452A5D /* MXSharedHistoryKeyManager.swift */,",
      "4323:     EDBCF335281A8AB900ED5044 /* MXSharedHistoryKeyService.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4368:     ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4329:   32FA10C31FA1C9F700E54233 /* Data */ = {",
      "4330:    isa = PBXGroup;",
      "4331:    children = (",
      "4332:     32F945F21FAB83D900622468 /* MXIncomingRoomKeyRequest.h */,",
      "4333:     32F945F31FAB83D900622468 /* MXIncomingRoomKeyRequest.m */,",
      "4334:     32F945F41FAB83D900622468 /* MXIncomingRoomKeyRequestCancellation.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4380:     ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */,",
      "4381:     ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */,",
      "4382:     ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */,",
      "4383:     ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5127:     ED8F1D1428857FD300F897E7 /* CrossSigning */,",
      "5128:     ED8F1D2E2885AAEB00F897E7 /* Trust */,",
      "5129:     ED8F1D292885A7DF00F897E7 /* Devices */,",
      "5130:     ED44F01628180F1300452A5D /* KeySharing */,",
      "5131:     ED35652A281150230002BF6A /* Data */,",
      "5132:     ED21F67B28104BA1002FF83D /* Algorithms */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5182:     ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5178:   ED35652A281150230002BF6A /* Data */ = {",
      "5179:    isa = PBXGroup;",
      "5180:    children = (",
      "5181:     ED35652B281150310002BF6A /* MXOlmInboundGroupSessionUnitTests.swift */,",
      "5182:     ED35652E281153480002BF6A /* MXMegolmSessionDataUnitTests.swift */,",
      "5183:    );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5234:     ED6DAC1328C78D3700ECDCB6 /* Store */,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5187:   ED44F01628180F1300452A5D /* KeySharing */ = {",
      "5188:    isa = PBXGroup;",
      "5189:    children = (",
      "5190:     ED44F01728180F1C00452A5D /* MXSharedHistoryKeyManagerUnitTests.swift */,",
      "5191:    );",
      "5192:    path = KeySharing;",
      "5193:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5244:     ED6DAC0528C77E0600ECDCB6 /* Data */,",
      "5246:     ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5206:    path = Logs;",
      "5207:    sourceTree = \"<group>\";",
      "5208:   };",
      "5209:   ED7019ED2886CA6C00FC31B9 /* Verification */ = {",
      "5210:    isa = PBXGroup;",
      "5211:    children = (",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5265:   ED6DAC0428C771D500ECDCB6 /* RoomKeys */ = {",
      "5266:    isa = PBXGroup;",
      "5267:    children = (",
      "5268:     ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */,",
      "5269:     ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */,",
      "5270:     ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */,",
      "5271:    );",
      "5272:    path = RoomKeys;",
      "5273:    sourceTree = \"<group>\";",
      "5274:   };",
      "5275:   ED6DAC0528C77E0600ECDCB6 /* Data */ = {",
      "5276:    isa = PBXGroup;",
      "5277:    children = (",
      "5278:     ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */,",
      "5279:     ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */,",
      "5280:    );",
      "5281:    path = Data;",
      "5282:    sourceTree = \"<group>\";",
      "5283:   };",
      "5284:   ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */ = {",
      "5285:    isa = PBXGroup;",
      "5286:    children = (",
      "5287:     ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */,",
      "5288:    );",
      "5289:    path = RoomKeys;",
      "5290:    sourceTree = \"<group>\";",
      "5291:   };",
      "5292:   ED6DAC1328C78D3700ECDCB6 /* Store */ = {",
      "5293:    isa = PBXGroup;",
      "5294:    children = (",
      "5295:     ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */,",
      "5296:    );",
      "5297:    path = Store;",
      "5298:    sourceTree = \"<group>\";",
      "5299:   };",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5365:    isa = PBXGroup;",
      "5366:    children = (",
      "5367:     3259D0072603705300C365DB /* Array.swift */,",
      "5368:     F08B8D5A1E014711006171A8 /* NSData+MatrixSDK.h */,",
      "5369:     F08B8D5B1E014711006171A8 /* NSData+MatrixSDK.m */,",
      "5370:     3259D02226037A7200C365DB /* NSDictionary.swift */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5459:     ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5704:     326056851C76FDF2009D44AD /* MXRoomEventTimeline.h in Headers */,",
      "5705:     3A59A49D25A7A16F00DDA1FC /* MXOlmOutboundGroupSession.h in Headers */,",
      "5706:     32AF927F240EA0190008A0FD /* MXSecretShareManager.h in Headers */,",
      "5707:     321CFDEE225264C4004D31DF /* NSArray+MatrixSDK.h in Headers */,",
      "5708:     1838928827031D1D003F0C4F /* MXSendReplyEventStringLocalizerProtocol.h in Headers */,",
      "5709:     B11BD44822CB56790064D8B0 /* MXReplyEventParser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5799:     ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5731:     32DC15D01A8CF7AE006F9AD3 /* MXNotificationCenter.h in Headers */,",
      "5732:     3275FD9C21A6B60B00B9C13D /* MXLoginPolicy.h in Headers */,",
      "5733:     EC05473425FF8A3C0047ECD7 /* MXVirtualRoomInfo.h in Headers */,",
      "5734:     F0173EAC1FCF0E8900B5F6A3 /* MXGroup.h in Headers */,",
      "5735:     32D2CC0523422462002BD8CA /* MX3PidAddSession.h in Headers */,",
      "5736:     329FB17F1A0B665800A5E88E /* MXUser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5827:     ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "6008:     B14EF3202397E90400758AF0 /* MXKeyBackupPassword.h in Headers */,",
      "6009:     B14EF3212397E90400758AF0 /* MXRestClient.h in Headers */,",
      "6010:     324DD2B2246BDC6800377005 /* MXSecretStorage_Private.h in Headers */,",
      "6011:     32B0E33A23A2989A0054FF1A /* MXEventReferenceChunk.h in Headers */,",
      "6012:     B1EE98C72804697400AB63F0 /* MXBeacon.h in Headers */,",
      "6013:     B14EF3222397E90400758AF0 /* MXKeyVerificationManager.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6105:     ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "6053:     EC60EE07265CFFF400B39A4E /* MXGroupSyncProfile.h in Headers */,",
      "6054:     EC11658E270F3ABF0089FA56 /* RLMRealm+MatrixSDK.h in Headers */,",
      "6055:     324AAC7E2399143400380A66 /* MXKeyVerificationCancel.h in Headers */,",
      "6056:     B14EF3372397E90400758AF0 /* MXRoomTombStoneContent.h in Headers */,",
      "6057:     3274538B23FD918800438328 /* MXKeyVerificationByToDeviceRequest.h in Headers */,",
      "6058:     B14EF3382397E90400758AF0 /* MXFilterObject.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6151:     ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "6470:     3275FD9D21A6B60B00B9C13D /* MXLoginPolicy.m in Sources */,",
      "6471:     327F8DB31C6112BA00581CA3 /* MXRoomThirdPartyInvite.m in Sources */,",
      "6472:     B17982FC2119E4A2001FD722 /* MXRoomPowerLevels.m in Sources */,",
      "6473:     B146D4E421A5AEF200D8C2C6 /* MXRealmMediaScanMapper.m in Sources */,",
      "6474:     B146D4E321A5AEF200D8C2C6 /* MXRealmMediaScan.m in Sources */,",
      "6475:     ED5C754628B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6569:     ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "6487:     B1136965230AC9D900E2B2FA /* MXIdentityService.m in Sources */,",
      "6488:     66836AB727CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "6489:     B11BD44922CB56790064D8B0 /* MXReplyEventParser.m in Sources */,",
      "6490:     ED8F1D3B2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "6491:     EC0B941127184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "6492:     EDBCF339281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6587:     ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "6598:     B1F04B1A2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "6599:     021AFBA52179E91900742B2C /* MXEncryptedContentKey.m in Sources */,",
      "6600:     32F634AC1FC5E3480054EF49 /* MXEventDecryptionResult.m in Sources */,",
      "6601:     327137281A24D50A00DB6757 /* MXMyUser.m in Sources */,",
      "6602:     ECDA763B27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "6603:     EC0B94242718E3EE00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6699:     ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6640:     A780625027B2CE74005780C0 /* FileManager+AppGroupContainer.swift in Sources */,",
      "6641:     9274AFE91EE580240009BEB6 /* MXCallKitAdapter.m in Sources */,",
      "6642:     3274538C23FD918800438328 /* MXKeyVerificationByToDeviceRequest.m in Sources */,",
      "6643:     ECB6FA952683811800A941E4 /* MXiOSAudioOutputRouter.swift in Sources */,",
      "6644:     EC131B0A2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "6645:     EC1848C52685F64D00865E16 /* MXiOSAudioOutputRoute.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6742:     ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6653:     EC383BA5253DE6C9002FBBE6 /* MXSyncResponseStore.swift in Sources */,",
      "6654:     32CEEF4523AD2A6C0039BA98 /* MXCrossSigningKey.m in Sources */,",
      "6655:     327E9AF02289C61100A98BC1 /* MXAggregations.m in Sources */,",
      "6656:     B18B0E4A25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "6657:     EDD578E52881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "6658:     EC2EACFF266625170038B61F /* MXRoomLastMessage.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6756:     ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6679:     32A31BC920D401FC005916C7 /* MXRoomFilter.m in Sources */,",
      "6680:     B190AC812833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "6681:     EC11658F270F3ABF0089FA56 /* RLMRealm+MatrixSDK.m in Sources */,",
      "6682:     32A151471DAF7C0C00400192 /* MXDeviceInfo.m in Sources */,",
      "6683:     ECDA764E27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "6684:     321CFDEB22525DEE004D31DF /* MXIncomingSASTransaction.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6783:     ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6754:     B146D47B21A5958400D8C2C6 /* MXAntivirusScanStatusFormatter.m in Sources */,",
      "6755:     EC8A53DE25B1BCC6004E0802 /* MXThirdpartyProtocolsResponse.m in Sources */,",
      "6756:     32133022228BF7BC0070BA9B /* MXReactionCountChange.m in Sources */,",
      "6757:     32A151491DAF7C0C00400192 /* MXKey.m in Sources */,",
      "6758:     324DD2AE246AEB7B00377005 /* MXSecretStoragePassphrase.m in Sources */,",
      "6759:     ECB5D98C2552C9B4000AD89C /* MXStopwatch.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6859:     ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6777:     3291D4D51A68FFEB00C3BA41 /* MXFileRoomStore.m in Sources */,",
      "6778:     329FB1801A0B665800A5E88E /* MXUser.m in Sources */,",
      "6779:     324AAC73239913AD00380A66 /* MXKeyVerificationDone.m in Sources */,",
      "6780:     B11556EE230C45C600B2A2CF /* MXIdentityServerRestClient.swift in Sources */,",
      "6781:     321CFDE722525A49004D31DF /* MXSASTransaction.m in Sources */,",
      "6782:     32720D9D222EAA6F0086FFF5 /* MXDiscoveredClientConfig.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6883:     ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6891:     EC51019D26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "6892:     EDB4209527DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "6893:     EC40385D28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "6894:     3265CB3B1A151C3800E24B2F /* MXRoomStateTests.m in Sources */,",
      "6895:     ED8F1D302885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift in Sources */,",
      "6896:     B135066927EA100000BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6998:     ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6901:     324BE45B1E3FA7A8008D99D4 /* MXMegolmExportEncryptionUnitTests.m in Sources */,",
      "6902:     327E9ACF2284783E00A98BC1 /* MXEventAnnotationUnitTests.swift in Sources */,",
      "6903:     EC40386128A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "6904:     32EEA84A2603FDD60041425B /* MXResponseUnitTests.swift in Sources */,",
      "6905:     32322A481E57264E005DD155 /* MXSelfSignedHomeserverTests.m in Sources */,",
      "6906:     325653831A2E14ED00CC0423 /* MXStoreTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7009:     ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6911:     32B477852638133C00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "6912:     ECB6FA8E267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "6913:     ED7019F52886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "6914:     3A108E6725826F52005EEBE9 /* MXKeyProviderUnitTests.m in Sources */,",
      "6915:     3A858DE8275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "6916:     EC116593270FB6970089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7020:     ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6925:     EDF4678727E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "6926:     EC746C59274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "6927:     32A31BC120D3F4C4005916C7 /* MXFilterTests.m in Sources */,",
      "6928:     32B477842638133C00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "6929:     32B0E3E423A384D40054FF1A /* MXAggregatedReferenceTests.m in Sources */,",
      "6930:     32D5D16323E400A600E3E37C /* MXRoomSummaryTrustTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7035:     ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6952:     EDE1B13B28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "6953:     EC746C56274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "6954:     ED8F1D252885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */,",
      "6955:     32A27D1F19EC335300BAFADE /* MXRoomTests.m in Sources */,",
      "6956:     32D8CAC219DEE6ED002AF8A0 /* MXRestClientNoAuthAPITests.m in Sources */,",
      "6957:     32FCAB4D19E578860049C555 /* MXRestClientTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7063:     ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "7069:     B14EF1EF2397E90400758AF0 /* MXIdentityService.m in Sources */,",
      "7070:     ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */,",
      "7071:     EC8A53C625B1BC77004E0802 /* MXTurnServerResponse.m in Sources */,",
      "7072:     B14EF1F02397E90400758AF0 /* MXReplyEventParser.m in Sources */,",
      "7073:     B14EF1F12397E90400758AF0 /* MXFileStore.m in Sources */,",
      "7074:     ED5C754728B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7181:     ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "7086:     3A108A8125810C96005EEBE9 /* MXKeyData.m in Sources */,",
      "7087:     66836AB827CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "7088:     3A59A4A025A7A16F00DDA1FC /* MXOlmOutboundGroupSession.m in Sources */,",
      "7089:     ED8F1D3C2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "7090:     EC0B941227184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "7091:     EDBCF33A281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7199:     ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "7197:     B1F04B1B2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "7198:     EC60EDDD265CFF0600B39A4E /* MXInvitedRoomSync.m in Sources */,",
      "7199:     B14EF2292397E90400758AF0 /* MXRealmEventScanMapper.m in Sources */,",
      "7200:     ECDA763C27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "7201:     EC0B94252718E3EF00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "7202:     B14EF22A2397E90400758AF0 /* MXReplyEventFormattedBodyParts.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7311:     ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "7239:     B14EF23B2397E90400758AF0 /* MXKeyBackupData.m in Sources */,",
      "7240:     B14EF23C2397E90400758AF0 /* MXJSONModels.m in Sources */,",
      "7241:     EC8A538E25B1BC77004E0802 /* MXCallSessionDescription.m in Sources */,",
      "7242:     EC131B0B2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "7243:     B14EF23D2397E90400758AF0 /* MXCallManager.m in Sources */,",
      "7244:     B14EF23E2397E90400758AF0 /* MXPeekingRoom.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7354:     ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "7252:     EC8A53A625B1BC77004E0802 /* MXCallInviteEventContent.m in Sources */,",
      "7253:     ECD2899226EB3B3400F268CF /* MXRoomListDataFetcher.swift in Sources */,",
      "7254:     B18B0E5025FB783F00E32151 /* MXSpaceService.swift in Sources */,",
      "7255:     B14EF2412397E90400758AF0 /* MXRoomFilter.m in Sources */,",
      "7256:     EDD578E62881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "7257:     EC8A53D925B1BCC6004E0802 /* MXThirdPartyProtocolInstance.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7368:     ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "7278:     B135066F27EA44C800BD3276 /* MXLocationServiceError.swift in Sources */,",
      "7279:     B190AC822833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "7280:     B14EF24B2397E90400758AF0 /* MXServiceTermsRestClient.m in Sources */,",
      "7281:     EC1165C527107E330089FA56 /* MXRoomListDataFilterOptions.swift in Sources */,",
      "7282:     3A858DE227528EEB006322C1 /* MXHomeserverCapabilitiesService.swift in Sources */,",
      "7283:     ECDA764F27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7395:     ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "7353:     B14EF26B2397E90400758AF0 /* MXMegolmBackupCreationInfo.m in Sources */,",
      "7354:     B14EF26C2397E90400758AF0 /* MXRoom.m in Sources */,",
      "7355:     B14EF26D2397E90400758AF0 /* NSData+MatrixSDK.m in Sources */,",
      "7356:     EC383BB22540688E002FBBE6 /* MXBackgroundStore.swift in Sources */,",
      "7357:     B14EF26E2397E90400758AF0 /* MXFileRoomStore.m in Sources */,",
      "7358:     EC60ED9D265CFE1700B39A4E /* MXRoomSyncState.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7471:     ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7376:     B18B0E4B25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "7377:     B14EF2752397E90400758AF0 /* MXResponse.swift in Sources */,",
      "7378:     B14EF2772397E90400758AF0 /* MXDecryptionResult.m in Sources */,",
      "7379:     B14EF2782397E90400758AF0 /* MXTransactionCancelCode.m in Sources */,",
      "7380:     B14EF2792397E90400758AF0 /* MXEventListener.m in Sources */,",
      "7381:     B1710B202613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7495:     ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7490:     EC51019E26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "7491:     EDB4209627DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "7492:     EC40385E28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "7493:     32B477AA2638186000EA5800 /* MXHTTPAdditionalHeadersUnitTests.m in Sources */,",
      "7494:     B135066A27EA100100BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "7495:     EC0B944727206D0B00B4D440 /* MXCoreDataRoomListDataManagerUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7610:     ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7500:     B1E09A3E2397FD820057C069 /* MXToolsUnitTests.m in Sources */,",
      "7501:     32B477912638133D00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "7502:     EC40386228A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "7503:     B1E09A1E2397FCE90057C069 /* MXCryptoShareTests.m in Sources */,",
      "7504:     B1E09A422397FD820057C069 /* MXCryptoTests.m in Sources */,",
      "7505:     B1E09A382397FD7D0057C069 /* MXUserTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7621:     ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7510:     32AF9293241112850008A0FD /* MXCryptoSecretShareTests.m in Sources */,",
      "7511:     B1E09A462397FD990057C069 /* MXMediaScanStoreUnitTests.m in Sources */,",
      "7512:     ED7019F62886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "7513:     ECB6FA8F267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "7514:     3A858DE9275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "7515:     ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7632:     ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "7524:     B1B4431A283D00CA00BB26F4 /* MXMegolmDecryptionUnitTests.swift in Sources */,",
      "7525:     EDF4678827E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "7526:     EC746C5A274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "7527:     B1E09A222397FCE90057C069 /* MXRoomSummaryTests.m in Sources */,",
      "7528:     B1E09A3A2397FD820057C069 /* MXStoreTests.m in Sources */,",
      "7529:     B1E09A342397FD750057C069 /* MXRoomStateDynamicTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7647:     ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "7551:     EDE1B13C28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "7552:     A816248525F60D0300A46F05 /* MXDeviceListOperationsPoolUnitTests.swift in Sources */,",
      "7553:     EC746C57274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "7554:     B1E09A312397FD750057C069 /* MXSessionTests.m in Sources */,",
      "7555:     32B477902638133D00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "7556:     EC116598270FCA8B0089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7675:     ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------"
    ],
    "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift": [
      "File: MatrixSDK/Background/MXBackgroundSyncService.swift -> MatrixSDK/Background/MXBackgroundSyncService.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:     }",
      "566:     private func handleToDeviceEvent(_ event: MXEvent) {",
      "567:         if event.isEncrypted {",
      "568:             do {",
      "569:                 try decryptEvent(event)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "568:         guard MXTools.isSupportedToDeviceEvent(event) else {",
      "569:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ignore unsupported event\")",
      "570:             return",
      "571:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "573:             }",
      "574:         }",
      "578:             return",
      "579:         }",
      "586:             return",
      "587:         }",
      "620:         }",
      "631:     }",
      "633:     private func updateBackgroundServiceStoresIfNeeded() {",
      "",
      "[Removed Lines]",
      "576:         guard let content = event.content else {",
      "577:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event content: \\(String(describing: event.jsonDictionary()))\")",
      "581:         guard let roomId = content[\"room_id\"] as? String,",
      "582:             let sessionId = content[\"session_id\"] as? String,",
      "583:             let sessionKey = content[\"session_key\"] as? String,",
      "584:             var senderKey = event.senderKey else {",
      "585:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event: \\(String(describing: event.jsonDictionary()))\")",
      "589:         var forwardingKeyChain: [String] = []",
      "590:         var exportFormat: Bool = false",
      "591:         var keysClaimed: [String: String] = [:]",
      "593:         switch event.eventType {",
      "594:         case .roomKey:",
      "595:             keysClaimed = event.keysClaimed as! [String: String]",
      "596:         case .roomForwardedKey:",
      "597:             exportFormat = true",
      "599:             if let array = content[\"forwarding_curve25519_key_chain\"] as? [String] {",
      "600:                 forwardingKeyChain = array",
      "601:             }",
      "602:             forwardingKeyChain.append(senderKey)",
      "604:             if let senderKeyInContent = content[\"sender_key\"] as? String {",
      "605:                 senderKey = senderKeyInContent",
      "606:             } else {",
      "607:                 return",
      "608:             }",
      "610:             guard let ed25519Key = event.content[\"sender_claimed_ed25519_key\"] as? String else {",
      "611:                 return",
      "612:             }",
      "614:             keysClaimed = [",
      "615:                 \"ed25519\": ed25519Key",
      "616:             ]",
      "617:         default:",
      "618:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: Not supported type: \\(event.eventType)\")",
      "619:             return",
      "622:         let sharedHistory = (content[kMXSharedHistoryKeyName] as? Bool) ?? false",
      "623:         olmDevice.addInboundGroupSession(sessionId,",
      "624:                                          sessionKey: sessionKey,",
      "625:                                          roomId: roomId,",
      "626:                                          senderKey: senderKey,",
      "627:                                          forwardingCurve25519KeyChain: forwardingKeyChain,",
      "628:                                          keysClaimed: keysClaimed,",
      "629:                                          exportFormat: exportFormat,",
      "630:                                          sharedHistory: sharedHistory)",
      "",
      "[Added Lines]",
      "582:         guard let userId = credentials.userId else {",
      "583:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot get userId\")",
      "587:         let factory = MXRoomKeyInfoFactory(myUserId: userId, store: cryptoStore)",
      "588:         guard let key = factory.roomKey(for: event) else {",
      "589:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot create megolm key from event\")",
      "593:         switch key.type {",
      "594:         case .safe:",
      "595:             olmDevice.addInboundGroupSession(",
      "596:                 key.info.sessionId,",
      "597:                 sessionKey: key.info.sessionKey,",
      "598:                 roomId: key.info.roomId,",
      "599:                 senderKey: key.info.senderKey,",
      "600:                 forwardingCurve25519KeyChain: key.info.forwardingKeyChain,",
      "601:                 keysClaimed: key.info.keysClaimed,",
      "602:                 exportFormat: key.info.exportFormat,",
      "603:                 sharedHistory: key.info.sharedHistory,",
      "604:                 untrusted: key.type != .safe",
      "605:             )",
      "606:         case .unsafe:",
      "607:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unsafe keys\")",
      "608:         case .unrequested:",
      "609:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unrequested keys\")",
      "",
      "---------------"
    ],
    "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift": [
      "File: MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift -> MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:     case keyVerificationMac",
      "74:     case keyVerificationCancel",
      "75:     case keyVerificationDone",
      "76:     case taggedEvents",
      "77:     case spaceChild",
      "78:     case spaceOrder",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     case secretRequest",
      "77:     case secretSend",
      "78:     case secretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "132:         case .keyVerificationMac: return kMXEventTypeStringKeyVerificationMac",
      "133:         case .keyVerificationCancel: return kMXEventTypeStringKeyVerificationCancel",
      "134:         case .keyVerificationDone: return kMXEventTypeStringKeyVerificationDone",
      "135:         case .taggedEvents: return kMXEventTypeStringTaggedEvents",
      "136:         case .spaceChild: return kMXEventTypeStringSpaceChild",
      "137:         case .spaceOrder: return kMXEventTypeStringSpaceOrderMSC3230",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:         case .secretRequest: return kMXEventTypeStringSecretRequest",
      "139:         case .secretSend: return kMXEventTypeStringSecretSend",
      "140:         case .secretStorageDefaultKey: return kMXEventTypeStringSecretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "151:     }",
      "153:     public init(identifier: String) {",
      "156:         if let type = events.first(where: { $0.identifier == identifier }) {",
      "157:             self = type",
      "",
      "[Removed Lines]",
      "154:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "[Added Lines]",
      "160:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .secretRequest, .secretSend, .secretStorageDefaultKey, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h": [
      "File: MatrixSDK/Crypto/Algorithms/MXDecrypting.h -> MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: #import \"MXEventDecryptionResult.h\"",
      "24: #import \"MXIncomingRoomKeyRequest.h\"",
      "29: @protocol MXDecrypting <NSObject>",
      "",
      "[Removed Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession;",
      "",
      "[Added Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession, MXRoomKeyResult;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: - (MXEventDecryptionResult *)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline;",
      "63: - (void)onRoomKeyEvent:(MXEvent*)event;",
      "66:  Notification that a room key has been imported.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  Handle a key event.",
      "61:  @param event the key event.",
      "66:  Handle new room key",
      "68:  @param key the domain object with key details and safety",
      "70: - (void)onRoomKey:(MXRoomKeyResult*)key;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #import \"MXTools.h\"",
      "27: #import \"MatrixSDKSwiftHeader.h\"",
      "28: #import \"MXSharedHistoryKeyService.h\"",
      "30: @interface MXMegolmDecryption ()",
      "31: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:         NSMutableDictionary<NSString* /* timelineId */,",
      "42:             NSMutableDictionary<NSString* /* eventId */, MXEvent*>*>*> *pendingEvents;",
      "43: }",
      "44: @end",
      "46: @implementation MXMegolmDecryption",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: @property (nonatomic, strong) MXRoomKeyInfoFactory *roomKeyInfoFactory;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:     {",
      "60:         crypto = theCrypto;",
      "61:         olmDevice = theCrypto.olmDevice;",
      "62:         pendingEvents = [NSMutableDictionary dictionary];",
      "63:     }",
      "64:     return self;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:         _roomKeyInfoFactory = [[MXRoomKeyInfoFactory alloc] initWithMyUserId:crypto.mxSession.credentials.userId store:crypto.store];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192: - (void)onRoomKeyEvent:(MXEvent *)event",
      "193: {",
      "209:     {",
      "211:         return;",
      "212:     }",
      "259:     }",
      "272:     [crypto.backup maybeSendKeyBackup];",
      "274:     MXWeakify(self);",
      "276:         MXStrongifyAndReturnIfNil(self);",
      "278:         if (allDecrypted)",
      "279:         {",
      "281:             [self->crypto cancelRoomKeyRequest:@{",
      "286:                                                  }];",
      "287:         }",
      "288:     }];",
      "",
      "[Removed Lines]",
      "194:     NSDictionary *content = event.content;",
      "195:     NSString *roomId, *sessionId, *sessionKey;",
      "197:     MXJSONModelSetString(roomId, content[@\"room_id\"]);",
      "198:     MXJSONModelSetString(sessionId, content[@\"session_id\"]);",
      "199:     MXJSONModelSetString(sessionKey, content[@\"session_key\"]);",
      "201:     if (!roomId || !sessionId || !sessionKey)",
      "202:     {",
      "203:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event is missing fields\");",
      "204:         return;",
      "205:     }",
      "207:     NSString *senderKey = event.senderKey;",
      "208:     if (!senderKey)",
      "210:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event has no sender key (not encrypted?)\");",
      "214:     NSArray<NSString*> *forwardingKeyChain;",
      "215:     BOOL exportFormat = NO;",
      "216:     NSDictionary *keysClaimed;",
      "217:     BOOL sharedHistory = NO;",
      "218:     if (content[kMXSharedHistoryKeyName] != nil)",
      "219:     {",
      "220:         MXJSONModelSetBoolean(sharedHistory, content[kMXSharedHistoryKeyName]);",
      "221:     }",
      "223:     if (event.eventType == MXEventTypeRoomForwardedKey)",
      "224:     {",
      "225:         exportFormat = YES;",
      "226:         MXJSONModelSetArray(forwardingKeyChain, content[@\"forwarding_curve25519_key_chain\"]);",
      "227:         if (!forwardingKeyChain)",
      "228:         {",
      "229:             forwardingKeyChain = @[];",
      "230:         }",
      "233:         NSMutableArray *forwardingKeyChain2 = [NSMutableArray arrayWithArray:forwardingKeyChain];",
      "234:         [forwardingKeyChain2 addObject:senderKey];",
      "235:         forwardingKeyChain = forwardingKeyChain2;",
      "237:         MXJSONModelSetString(senderKey, content[@\"sender_key\"]);",
      "238:         if (!senderKey)",
      "239:         {",
      "240:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key event is missing sender_key field\");",
      "241:             return;",
      "242:         }",
      "244:         NSString *ed25519Key;",
      "245:         MXJSONModelSetString(ed25519Key, content[@\"sender_claimed_ed25519_key\"]);",
      "246:         if (!ed25519Key)",
      "247:         {",
      "248:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key_event is missing sender_claimed_ed25519_key field\");",
      "249:             return;",
      "250:         }",
      "252:         keysClaimed = @{",
      "253:                         @\"ed25519\": ed25519Key",
      "254:                         };",
      "255:     }",
      "256:     else",
      "257:     {",
      "258:         keysClaimed = event.keysClaimed;",
      "261:     MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", senderKey, sessionId, event.type);",
      "263:     [olmDevice addInboundGroupSession:sessionId",
      "264:                            sessionKey:sessionKey",
      "265:                                roomId:roomId",
      "266:                             senderKey:senderKey",
      "267:          forwardingCurve25519KeyChain:forwardingKeyChain",
      "268:                           keysClaimed:keysClaimed",
      "269:                          exportFormat:exportFormat",
      "270:                         sharedHistory:sharedHistory];",
      "275:     [self retryDecryption:senderKey sessionId:content[@\"session_id\"] complete:^(BOOL allDecrypted) {",
      "282:                                                  @\"algorithm\": content[@\"algorithm\"],",
      "283:                                                  @\"room_id\": content[@\"room_id\"],",
      "284:                                                  @\"session_id\": content[@\"session_id\"],",
      "285:                                                  @\"sender_key\": senderKey",
      "",
      "[Added Lines]",
      "200:     MXRoomKeyResult *key = [self.roomKeyInfoFactory roomKeyFor:event];",
      "201:     if (!key)",
      "203:         MXLogError(@\"[MXMegolmDecryption] onRoomKeyEvent: Cannot create megolm key from event\");",
      "207:     switch (key.type) {",
      "208:         case MXRoomKeyTypeSafe:",
      "209:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", key.info.senderKey, key.info.sessionId, event.type);",
      "210:             [self onRoomKey:key];",
      "211:             break;",
      "212:         case MXRoomKeyTypeUnsafe:",
      "213:             MXLogWarning(@\"[MXMegolmDecryption] onRoomKeyEvent: Ignoring unsafe key\");",
      "214:             break;",
      "215:         case MXRoomKeyTypeUnrequested:",
      "216:             [crypto handleUnrequestedRoomKeyInfo:key.info senderId:event.sender senderKey:event.senderKey];",
      "217:             break;",
      "218:         default:",
      "219:             MXLogFailureDetails(@\"[MXMegolmDecryption] onRoomKeyEvent: Unknown key type\", @{",
      "220:                 @\"key_type\": @(key.type)",
      "221:             });",
      "222:             break;",
      "224: }",
      "226: - (void)onRoomKey:(MXRoomKeyResult *)key",
      "227: {",
      "228:     MXRoomKeyInfo *keyInfo = key.info;",
      "229:     [olmDevice addInboundGroupSession:keyInfo.sessionId",
      "230:                            sessionKey:keyInfo.sessionKey",
      "231:                                roomId:keyInfo.roomId",
      "232:                             senderKey:keyInfo.senderKey",
      "233:          forwardingCurve25519KeyChain:keyInfo.forwardingKeyChain",
      "234:                           keysClaimed:keyInfo.keysClaimed",
      "235:                          exportFormat:keyInfo.exportFormat",
      "236:                         sharedHistory:keyInfo.sharedHistory",
      "237:                             untrusted:key.type != MXRoomKeyTypeSafe];",
      "242:     [self retryDecryption:keyInfo.senderKey sessionId:keyInfo.sessionId complete:^(BOOL allDecrypted) {",
      "249:                                                  @\"algorithm\": keyInfo.algorithm,",
      "250:                                                  @\"room_id\": keyInfo.roomId,",
      "251:                                                  @\"session_id\": keyInfo.sessionId,",
      "252:                                                  @\"sender_key\": keyInfo.senderKey",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "340:                                                }",
      "341:                                 exportFormat:NO",
      "342:                                sharedHistory:sharedHistory",
      "343:      ];",
      "345:     [crypto.backup maybeSendKeyBackup];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:                                    untrusted:NO",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m -> MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "224: }",
      "226: - (void)didImportRoomKey:(MXOlmInboundGroupSession *)session",
      "227: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226: - (void)onRoomKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "227: {",
      "229: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: @property (nonatomic) NSArray<MXKeyBackupVersionTrustSignature*> *signatures;",
      "47: @end",
      "",
      "[Removed Lines]",
      "43:  Flag indicating the backup trusted locally.",
      "45: @property (nonatomic, getter=isTrustedLocally) BOOL trustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     {",
      "26:         _usable = NO;",
      "27:         _signatures = [NSArray new];",
      "29:     }",
      "30:     return self;",
      "31: }",
      "",
      "[Removed Lines]",
      "28:         _trustedLocally = NO;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m": [
      "File: MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m -> MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:         return keyBackupVersionTrust;",
      "1124:     }",
      "1137:     NSDictionary *mySigs = authData.signatures[myUserId];",
      "1138:     NSMutableArray<MXKeyBackupVersionTrustSignature*> *signatures = [NSMutableArray array];",
      "1139:     for (NSString *keyId in mySigs)",
      "",
      "[Removed Lines]",
      "1126:     NSData *privateKey = self.privateKeyFromCryptoStore;",
      "1127:     if (privateKey)",
      "1128:     {",
      "1129:         id<MXKeyBackupAlgorithm> algorithm = [self getOrCreateKeyBackupAlgorithmFor:keyBackupVersion privateKey:privateKey];",
      "1130:         if ([algorithm keyMatches:privateKey error:nil])",
      "1131:         {",
      "1132:             MXLogDebug(@\"[MXKeyBackup] trustForKeyBackupVersionFromCryptoQueue: Backup is trusted locally\");",
      "1133:             keyBackupVersionTrust.trustedLocally = YES;",
      "1134:         }",
      "1135:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1196:             keyBackupVersionTrust.usable = YES;",
      "1197:         }",
      "1198:     }",
      "1201:     return keyBackupVersionTrust;",
      "1202: }",
      "",
      "[Removed Lines]",
      "1199:     keyBackupVersionTrust.usable = keyBackupVersionTrust.usable || keyBackupVersionTrust.isTrustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXForwardedRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The Curve25519 key of the device which initiated the session originally",
      "36: @property (nonatomic) NSString *senderKey;",
      "39:  The ID of the session that the key is for",
      "41: @property (nonatomic) NSString *sessionId;",
      "44:  The key to be exchanged",
      "46: @property (nonatomic) NSString *sessionKey;",
      "49:  Chain of Curve25519 keys",
      "51:  It starts out empty, but each time the key is forwarded to another device, the previous sender",
      "52:  in the chain is added to the end of the list.",
      "54:  For example, if the key is forwarded from A to B to C, this field is empty between A and B,",
      "55:  and contains A's Curve25519 key between B and C",
      "57: @property (nonatomic) NSArray<NSString*> *forwardingCurve25519KeyChain;",
      "60:  The Ed25519 key of the device which initiated the session originally",
      "62:  It is 'claimed' because the receiving device has no way to tell that the original room_key actually",
      "63:  came from a device which owns the private part of this key unless they have done device verification.",
      "65: @property (nonatomic) NSString *senderClaimedEd25519Key;",
      "68:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "70: @property (nonatomic) BOOL sharedHistory;",
      "72: @end",
      "74: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXForwardedRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySenderKey = @\"sender_key\";",
      "22: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "23: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: static NSString* const kJSONKeyForwardingCurve25519KeyChain = @\"forwarding_curve25519_key_chain\";",
      "25: static NSString* const kJSONKeySenderClaimedEd25519Key = @\"sender_claimed_ed25519_key\";",
      "27: @implementation MXForwardedRoomKeyEventContent",
      "29: #pragma mark - MXJSONModel",
      "31: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "32: {",
      "33:     MXForwardedRoomKeyEventContent *result = [[MXForwardedRoomKeyEventContent alloc] init];",
      "34:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "35:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "36:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "37:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "38:     MXJSONModelSetString(result.senderKey, JSONDictionary[kJSONKeySenderKey]);",
      "39:     MXJSONModelSetString(result.senderClaimedEd25519Key, JSONDictionary[kJSONKeySenderClaimedEd25519Key]);",
      "40:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey || !result.senderKey || !result.senderClaimedEd25519Key)",
      "41:     {",
      "42:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "43:         return nil;",
      "44:     }",
      "46:     MXJSONModelSetArray(result.forwardingCurve25519KeyChain, JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] ?: @[]);",
      "47:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "49:     return result;",
      "50: }",
      "52: - (NSDictionary *)JSONDictionary",
      "53: {",
      "54:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "55:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "56:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "57:     JSONDictionary[kJSONKeySenderKey] = _senderKey;",
      "58:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "59:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "60:     JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] = _forwardingCurve25519KeyChain;",
      "61:     JSONDictionary[kJSONKeySenderClaimedEd25519Key] = _senderClaimedEd25519Key;",
      "62:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "63:     return JSONDictionary;",
      "64: }",
      "66: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The ID of the session that the key is for",
      "36: @property (nonatomic) NSString *sessionId;",
      "39:  The key to be exchanged",
      "41: @property (nonatomic) NSString *sessionKey;",
      "44:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "46: @property (nonatomic) BOOL sharedHistory;",
      "48: @end",
      "50: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "22: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: @implementation MXRoomKeyEventContent",
      "26: #pragma mark - MXJSONModel",
      "28: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "29: {",
      "30:     MXRoomKeyEventContent *result = [MXRoomKeyEventContent new];",
      "31:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "32:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "33:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "34:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "35:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey)",
      "36:     {",
      "37:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "38:         return nil;",
      "39:     }",
      "41:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "44:     return result;",
      "45: }",
      "47: - (NSDictionary *)JSONDictionary",
      "48: {",
      "49:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "50:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "51:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "52:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "53:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "54:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "55:     return JSONDictionary;",
      "56: }",
      "58: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift": [
      "File: MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift -> MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public protocol MXUnrequestedForwardedRoomKeyManagerDelegate: AnyObject {",
      "20:     func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void)",
      "21:     func acceptRoomKey(keyInfo: MXRoomKeyInfo)",
      "22: }",
      "24: @objcMembers",
      "25: public class MXUnrequestedForwardedRoomKeyManager: NSObject {",
      "26:     private typealias RoomId = String",
      "27:     private typealias UserId = String",
      "29:     static let MaximumTimeInterval: TimeInterval = 10 * 60",
      "31:     struct PendingKey {",
      "32:         let info: MXRoomKeyInfo",
      "33:         let date: Date",
      "34:     }",
      "36:     struct RoomInvite {",
      "37:         let roomId: String",
      "38:         let senderId: String",
      "39:         let date: Date",
      "40:     }",
      "42:     public weak var delegate: MXUnrequestedForwardedRoomKeyManagerDelegate?",
      "44:     private let dateProvider: MXDateProviding",
      "45:     private var pendingKeys = [RoomId: [UserId: [PendingKey]]]()",
      "46:     private var roomInvites = [RoomInvite]()",
      "48:     override public init() {",
      "49:         self.dateProvider = MXDateProvider()",
      "50:     }",
      "52:     init(dateProvider: MXDateProviding) {",
      "53:         self.dateProvider = dateProvider",
      "54:     }",
      "56:     public func close() {",
      "57:         pendingKeys = [:]",
      "58:         roomInvites = []",
      "59:     }",
      "61:     public func addPendingKey(keyInfo: MXRoomKeyInfo, senderId: String, senderKey: String) {",
      "62:         guard let delegate = delegate else {",
      "63:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: Delegate is not set\")",
      "64:             return",
      "65:         }",
      "68:         delegate.downloadDeviceKeys(userId: senderId) { [weak self] keys in",
      "69:             guard let self = self else { return }",
      "71:             guard let userId = self.matchingUserId(in: keys, userId: senderId, identityKey: senderKey) else {",
      "72:                 MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: senderId does not match the claimed senderKey\")",
      "73:                 return",
      "74:             }",
      "75:             self.addPendingKey(keyInfo: keyInfo, confirmedSenderId: userId)",
      "76:             self.processUnrequestedKeys()",
      "77:         }",
      "78:     }",
      "80:     public func onRoomInvite(roomId: String, senderId: String) {",
      "81:         roomInvites.append(",
      "82:             .init(",
      "83:                 roomId: roomId,",
      "84:                 senderId: senderId,",
      "85:                 date: dateProvider.currentDate()",
      "86:             )",
      "87:         )",
      "88:     }",
      "90:     public func processUnrequestedKeys() {",
      "91:         guard let delegate = delegate else {",
      "92:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] processUnrequestedKeys: Delegate is not set\")",
      "93:             return",
      "94:         }",
      "96:         let now = dateProvider.currentDate()",
      "98:         roomInvites.removeAll {",
      "99:             !$0.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: now)",
      "100:         }",
      "102:         for invite in roomInvites {",
      "103:             guard let roomKeys = pendingKeys[invite.roomId] else {",
      "104:                 continue",
      "105:             }",
      "107:             for (senderId, keys) in roomKeys {",
      "108:                 if invite.senderId == senderId {",
      "109:                     for key in keys {",
      "110:                         guard key.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: invite.date) else {",
      "111:                             continue",
      "112:                         }",
      "113:                         delegate.acceptRoomKey(keyInfo: key.info)",
      "114:                     }",
      "115:                 }",
      "116:             }",
      "118:             pendingKeys[invite.roomId] = nil",
      "119:         }",
      "120:     }",
      "124:     private func matchingUserId(in deviceKeys: MXUsersDevicesMap<MXDeviceInfo>, userId: String, identityKey: String) -> String? {",
      "125:         return deviceKeys",
      "126:             .objects(forUser: userId)?",
      "127:             .first { $0.identityKey == identityKey }",
      "128:             .flatMap { $0.userId }",
      "129:     }",
      "131:     private func addPendingKey(keyInfo: MXRoomKeyInfo, confirmedSenderId: String) {",
      "132:         if pendingKeys[keyInfo.roomId] == nil {",
      "133:             pendingKeys[keyInfo.roomId] = [:]",
      "134:         }",
      "136:         if pendingKeys[keyInfo.roomId]![confirmedSenderId] == nil {",
      "137:             pendingKeys[keyInfo.roomId]![confirmedSenderId] = []",
      "138:         }",
      "140:         pendingKeys[keyInfo.roomId]![confirmedSenderId]!.append(",
      "141:             .init(",
      "142:                 info: keyInfo,",
      "143:                 date: dateProvider.currentDate()",
      "144:             )",
      "145:         )",
      "146:     }",
      "147: }",
      "149: private extension Date {",
      "150:     func isWithin(timeInterval: TimeInterval, of date: Date) -> Bool {",
      "151:         return abs(self.timeIntervalSince(date)) < timeInterval",
      "152:     }",
      "153: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m": [
      "File: MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m -> MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "403: - (void)handleSecretSendEvent:(MXEvent*)event",
      "404: {",
      "405:     MXSecretShareSend *shareSend;",
      "406:     MXJSONModelSetMXJSONModel(shareSend, MXSecretShareSend, event.content);",
      "407:     if (!shareSend)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "405:     if (![self canAcceptSecretSendEvent:event])",
      "406:     {",
      "407:         MXLogDebug(@\"[MXSecretShareManager] handleSecretSendEvent: Rejecting unacceptable secret\");",
      "408:         return;",
      "409:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "428:     }",
      "429: }",
      "431: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437: - (BOOL)canAcceptSecretSendEvent:(MXEvent*)event",
      "438: {",
      "440:     MXDeviceInfo *sendingDevice = [self.crypto.store deviceWithIdentityKey:event.senderKey];",
      "441:     if (!sendingDevice)",
      "442:     {",
      "443:         MXLogError(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Unknown sending device\");",
      "444:         return NO;",
      "445:     }",
      "447:     if (![sendingDevice.userId isEqualToString:self.crypto.mxSession.myUserId])",
      "448:     {",
      "449:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from another user\");",
      "450:         return NO;",
      "451:     }",
      "453:     if (!sendingDevice.trustLevel.isVerified)",
      "454:     {",
      "455:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from untrusted device\");",
      "456:         return NO;",
      "457:     }",
      "458:     return YES;",
      "459: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
      "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: NSTimeInterval kMXCryptoUploadOneTimeKeysPeriod = 60.0; // one minute",
      "77: NSTimeInterval kMXCryptoMinForceSessionPeriod = 3600.0; // one hour",
      "80: {",
      "82:     NSMutableDictionary<NSString*, id<MXEncrypting>> *roomEncryptors;",
      "",
      "[Removed Lines]",
      "79: @interface MXCrypto ()",
      "",
      "[Added Lines]",
      "79: @interface MXCrypto () <MXUnrequestedForwardedRoomKeyManagerDelegate>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:     MXIncomingRoomKeyRequestManager *incomingRoomKeyRequestManager;",
      "112:     MXUsersDevicesMap<NSDate*> *lastNewSessionForcedDates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     MXUnrequestedForwardedRoomKeyManager *unrequestedForwardedRoomKeyManager;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "435:         [self->outgoingRoomKeyRequestManager close];",
      "436:         self->outgoingRoomKeyRequestManager = nil;",
      "438:         if (deleteStore)",
      "439:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:         [self->unrequestedForwardedRoomKeyManager close];",
      "442:         self->outgoingRoomKeyRequestManager = nil;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "983:         {",
      "984:             [self maybeUploadOneTimeKeys:nil failure:nil];",
      "985:             [self->incomingRoomKeyRequestManager processReceivedRoomKeyRequests];",
      "986:         }",
      "987:     });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "992:             [self->unrequestedForwardedRoomKeyManager processUnrequestedKeys];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2044:                                          cryptoStore:_store];",
      "2046:         incomingRoomKeyRequestManager = [[MXIncomingRoomKeyRequestManager alloc] initWithCrypto:self];",
      "2048:         _keyVerificationManager = [[MXKeyVerificationManager alloc] initWithCrypto:self];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2055:         unrequestedForwardedRoomKeyManager = [[MXUnrequestedForwardedRoomKeyManager alloc] init];",
      "2056:         unrequestedForwardedRoomKeyManager.delegate = self;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2583:     [outgoingRoomKeyRequestManager cancelRoomKeyRequest:requestBody];",
      "2584: }",
      "2586: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId  chainIndex:(NSNumber*)chainIndex",
      "2587: {",
      "2588:     NSDictionary *key = [self.olmDevice getInboundGroupSessionKey:roomId senderKey:senderKey sessionId:sessionId chainIndex:chainIndex];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2596: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey",
      "2597: {",
      "2598:     [unrequestedForwardedRoomKeyManager addPendingKeyWithKeyInfo:keyInfo senderId:senderId senderKey:senderKey];",
      "2599: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2803: - (void)onRoomMembership:(MXEvent*)event roomState:(MXRoomState*)roomState",
      "2804: {",
      "2813:     BOOL shouldTrack = NO;",
      "2814:     NSString *userId = event.stateKey;",
      "2815:     MXRoomMember *member = [roomState.members memberWithUserId:userId];",
      "2816:     if (member)",
      "2817:     {",
      "",
      "[Removed Lines]",
      "2805:     id<MXEncrypting> alg = roomEncryptors[event.roomId];",
      "2806:     if (!alg)",
      "2807:     {",
      "2809:         return;",
      "2810:     }",
      "",
      "[Added Lines]",
      "2824:     MXRoomMemberEventContent *content = [MXRoomMemberEventContent modelFromJSON:event.content];",
      "2825:     if ([userId isEqualToString:self.mxSession.credentials.userId] && [content.membership isEqualToString:kMXMembershipStringInvite])",
      "2826:     {",
      "2827:         [unrequestedForwardedRoomKeyManager onRoomInviteWithRoomId:event.roomId senderId:event.sender];",
      "2828:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3264:     }];",
      "3265: }",
      "3267: #endif",
      "3269: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3282: #pragma mark - MXUnrequestedForwardedRoomKeyManagerDelegate",
      "3284: - (void)downloadDeviceKeysWithUserId:(NSString *)userId completion:(void (^)(MXUsersDevicesMap<MXDeviceInfo *> *))completion",
      "3285: {",
      "3286:     [self downloadKeys:@[userId] forceDownload:YES success:^(MXUsersDevicesMap<MXDeviceInfo *> *usersDevicesInfoMap, NSDictionary<NSString *,MXCrossSigningInfo *> *crossSigningKeysMap) {",
      "3287:         completion(usersDevicesInfoMap);",
      "3288:     } failure:^(NSError *error) {",
      "3289:         MXLogError(@\"[MXCrypto]: Failed downloading keys for key forward manager\");",
      "3290:         completion([[MXUsersDevicesMap alloc] init]);",
      "3291:     }];",
      "3292: }",
      "3294: - (void)acceptRoomKeyWithKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "3295: {",
      "3296:     id<MXDecrypting> decryptor = [self getRoomDecryptor:keyInfo.roomId algorithm:keyInfo.algorithm];",
      "3297:     MXRoomKeyResult *key = [[MXRoomKeyResult alloc] initWithType:MXRoomKeyTypeUnsafe info:keyInfo];",
      "3298:     [decryptor onRoomKey:key];",
      "3299: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h": [
      "File: MatrixSDK/Crypto/MXCrypto_Private.h -> MatrixSDK/Crypto/MXCrypto_Private.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #import \"MXCrypto.h\"",
      "37:  The `MXCrypto_Private` extension exposes internal operations.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: @class MXRoomKeyInfo;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId chainIndex:(NSNumber*)chainIndex;",
      "227: @end",
      "229: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "230:  Handle forwarded room key that was not requested by this device",
      "232:  @param keyInfo details about the key",
      "233:  @param senderId userId of the person who sent us the key",
      "234:  @param senderKey identity of the person who sent us the room key",
      "236: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h": [
      "File: MatrixSDK/Crypto/MXOlmDevice.h -> MatrixSDK/Crypto/MXOlmDevice.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "242:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "243:                   exportFormat:(BOOL)exportFormat",
      "247:  Add previously-exported inbound group sessions to the session store.",
      "",
      "[Removed Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory",
      "245:                      untrusted:(BOOL)untrusted;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
      "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "351:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "352:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "353:                   exportFormat:(BOOL)exportFormat",
      "355: {",
      "356:     MXOlmInboundGroupSession *session;",
      "357:     if (exportFormat)",
      "",
      "[Removed Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory",
      "355:                      untrusted:(BOOL)untrusted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:     if (existingSession)",
      "373:     {",
      "379:         {",
      "382:         }",
      "383:     }",
      "",
      "[Removed Lines]",
      "375:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Update for megolm session %@|%@\", senderKey, sessionId);",
      "378:         if (existingSession.session.firstKnownIndex <= session.session.firstKnownIndex)",
      "380:             MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "381:             return NO;",
      "",
      "[Added Lines]",
      "376:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Considering updates for megolm session %@|%@\", senderKey, sessionId);",
      "378:         BOOL isExistingSessionBetter = existingSession.session.firstKnownIndex <= session.session.firstKnownIndex;",
      "379:         if (isExistingSessionBetter)",
      "381:             BOOL isNewSessionSafer = existingSession.isUntrusted && !session.isUntrusted;",
      "382:             if (!isNewSessionSafer)",
      "383:             {",
      "384:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "385:                 return NO;",
      "386:             }",
      "388:             if ([self connectsSession1:existingSession session2:session])",
      "389:             {",
      "390:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skipping new session, and upgrading the safety of existing session\");",
      "391:                 [self upgradeSafetyForSession:existingSession];",
      "392:                 return NO;",
      "393:             }",
      "394:             else",
      "395:             {",
      "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Recieved a safer but disconnected key, which will override the existing unsafe key\");",
      "397:                 existingSession = nil;",
      "398:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394:     session.roomId = roomId;",
      "395:     session.keysClaimed = keysClaimed;",
      "396:     session.forwardingCurve25519KeyChain = forwardingCurve25519KeyChain;",
      "399:     if (!existingSession && MXSDKOptions.sharedInstance.enableRoomSharedHistoryOnInvite)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "414:     session.untrusted = untrusted;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406:     return YES;",
      "407: }",
      "409: - (NSArray<MXOlmInboundGroupSession *>*)importInboundGroupSessions:(NSArray<MXMegolmSessionData *>*)inboundGroupSessionsData;",
      "410: {",
      "411:     NSMutableArray<MXOlmInboundGroupSession *> *sessions = [NSMutableArray arrayWithCapacity:inboundGroupSessionsData.count];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "427: - (void)upgradeSafetyForSession:(MXOlmInboundGroupSession *)session",
      "428: {",
      "429:     [self.store performSessionOperationWithGroupSessionWithId:session.session.sessionIdentifier senderKey:session.senderKey block:^(MXOlmInboundGroupSession *inboundGroupSession) {",
      "430:         inboundGroupSession.untrusted = NO;",
      "431:     }];",
      "432:     if (MXSDKOptions.sharedInstance.enableGroupSessionCache)",
      "433:     {",
      "434:         @synchronized (self.inboundGroupSessionCache)",
      "435:         {",
      "436:             session.untrusted = NO;",
      "437:             [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
      "438:         }",
      "439:     }",
      "440: }",
      "442: - (BOOL)connectsSession1:(MXOlmInboundGroupSession *)session1 session2:(MXOlmInboundGroupSession *)session2",
      "443: {",
      "445:     NSUInteger lowestCommonIndex = MAX(session1.session.firstKnownIndex, session2.session.firstKnownIndex);",
      "446:     MXMegolmSessionData *export1 = [session1 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "447:     MXMegolmSessionData *export2 = [session2 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "448:     return [export1.sessionKey isEqualToString:export2.sessionKey];",
      "449: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "20: @objcMembers",
      "21: public class MXRoomKeyInfo: NSObject {",
      "22:     public let algorithm: String",
      "23:     public let sessionId: String",
      "24:     public let sessionKey: String",
      "25:     public let roomId: String",
      "26:     public let senderKey: String",
      "27:     public let forwardingKeyChain: [String]?",
      "28:     public let keysClaimed: [String: String]",
      "29:     public let exportFormat: Bool",
      "30:     public let sharedHistory: Bool",
      "32:     public init(",
      "33:         algorithm: String,",
      "34:         sessionId: String,",
      "35:         sessionKey: String,",
      "36:         roomId: String,",
      "37:         senderKey: String,",
      "38:         forwardingKeyChain: [String]?,",
      "39:         keysClaimed: [String: String],",
      "40:         exportFormat: Bool,",
      "41:         sharedHistory: Bool",
      "42:     ) {",
      "43:         self.algorithm = algorithm",
      "44:         self.sessionId = sessionId",
      "45:         self.sessionKey = sessionKey",
      "46:         self.roomId = roomId",
      "47:         self.senderKey = senderKey",
      "48:         self.forwardingKeyChain = forwardingKeyChain",
      "49:         self.keysClaimed = keysClaimed",
      "50:         self.exportFormat = exportFormat",
      "51:         self.sharedHistory = sharedHistory",
      "52:         super.init()",
      "53:     }",
      "54: }",
      "56: extension MXRoomKeyInfo {",
      "57:     convenience init?(roomKey: MXRoomKeyEventContent, event: MXEvent) {",
      "58:         guard let senderKey = event.senderKey, let keysClaimed = event.keysClaimed as? [String: String] else {",
      "59:             return nil",
      "60:         }",
      "62:         self.init(",
      "63:             algorithm: roomKey.algorithm,",
      "64:             sessionId: roomKey.sessionId,",
      "65:             sessionKey: roomKey.sessionKey,",
      "66:             roomId: roomKey.roomId,",
      "67:             senderKey: senderKey,",
      "68:             forwardingKeyChain: nil,",
      "69:             keysClaimed: keysClaimed,",
      "70:             exportFormat: false,",
      "71:             sharedHistory: roomKey.sharedHistory",
      "72:         )",
      "73:     }",
      "74: }",
      "76: extension MXRoomKeyInfo {",
      "77:     convenience init(forwardedRoomKey: MXForwardedRoomKeyEventContent) {",
      "78:         self.init(",
      "79:             algorithm: forwardedRoomKey.algorithm,",
      "80:             sessionId: forwardedRoomKey.sessionId,",
      "81:             sessionKey: forwardedRoomKey.sessionKey,",
      "82:             roomId: forwardedRoomKey.roomId,",
      "83:             senderKey: forwardedRoomKey.senderKey,",
      "84:             forwardingKeyChain: forwardedRoomKey.forwardingCurve25519KeyChain,",
      "85:             keysClaimed: [\"ed25519\": forwardedRoomKey.senderClaimedEd25519Key],",
      "86:             exportFormat: true,",
      "87:             sharedHistory: forwardedRoomKey.sharedHistory",
      "88:         )",
      "89:     }",
      "90: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objcMembers",
      "20: public class MXRoomKeyInfoFactory: NSObject {",
      "21:     private let myUserId: String",
      "22:     private let store: MXCryptoStore",
      "23:     private let log = MXNamedLog(name: \"MXRoomKeyFactory\")",
      "25:     public init(myUserId: String, store: MXCryptoStore) {",
      "26:         self.myUserId = myUserId",
      "27:         self.store = store",
      "28:     }",
      "30:     public func roomKey(for event: MXEvent) -> MXRoomKeyResult? {",
      "31:         if event.eventType == .roomKey {",
      "32:             return roomKeyEventInfo(for: event)",
      "33:         } else if event.eventType == .roomForwardedKey {",
      "34:             return forwardedRoomKeyEventInfo(for: event)",
      "35:         } else {",
      "36:             log.error(\"Unknown event type\", context: event.eventType)",
      "37:             return nil",
      "38:         }",
      "39:     }",
      "41:     private func roomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "42:         guard",
      "43:             let content = MXRoomKeyEventContent(fromJSON: event.content),",
      "44:             let info = MXRoomKeyInfo(roomKey: content, event: event)",
      "45:         else {",
      "46:             log.error(\"Invalid room key\")",
      "47:             return nil",
      "48:         }",
      "50:         return .init(type: .safe, info: info)",
      "51:     }",
      "53:     private func forwardedRoomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "54:         guard let eventSenderKey = event.senderKey else {",
      "55:             log.error(\"Unknown event sender\")",
      "56:             return nil",
      "57:         }",
      "59:         guard let content = MXForwardedRoomKeyEventContent(fromJSON: event.content) else {",
      "60:             log.error(\"Invalid forwarded key\")",
      "61:             return nil",
      "62:         }",
      "64:         content.forwardingCurve25519KeyChain += [eventSenderKey]",
      "66:         return .init(",
      "67:             type: keyType(for: content, senderKey: eventSenderKey),",
      "68:             info: .init(forwardedRoomKey: content)",
      "69:         )",
      "70:     }",
      "72:     private func keyType(for content: MXForwardedRoomKeyEventContent, senderKey: String) -> MXRoomKeyType {",
      "73:         if !hasPendingRequest(for: content) {",
      "74:             log.debug(\"Key was not requested\")",
      "75:             return .unrequested",
      "76:         } else if isMyVerifiedDevice(identityKey: senderKey) {",
      "77:             return .safe",
      "78:         } else {",
      "79:             log.debug(\"Key forward is not from my verified device\")",
      "80:             return .unsafe",
      "81:         }",
      "82:     }",
      "84:     private func isMyVerifiedDevice(identityKey: String) -> Bool {",
      "85:         guard let device = store.device(withIdentityKey: identityKey) else {",
      "86:             return false",
      "87:         }",
      "88:         return device.userId == myUserId && device.trustLevel.isVerified",
      "89:     }",
      "91:     private func hasPendingRequest(for content: MXForwardedRoomKeyEventContent) -> Bool {",
      "92:         let request = store.outgoingRoomKeyRequest(withRequestBody: [",
      "93:             \"room_id\": content.roomId,",
      "94:             \"algorithm\": content.algorithm,",
      "95:             \"sender_key\": content.senderKey,",
      "96:             \"session_id\": content.sessionId",
      "97:         ])",
      "98:         return request != nil",
      "99:     }",
      "100: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public enum MXRoomKeyType: Int {",
      "20:     case safe",
      "21:     case unsafe",
      "22:     case unrequested",
      "23: }",
      "25: @objcMembers",
      "26: public class MXRoomKeyResult: NSObject {",
      "27:     public let type: MXRoomKeyType",
      "28:     public let info: MXRoomKeyInfo",
      "30:     public init(type: MXRoomKeyType, info: MXRoomKeyInfo) {",
      "31:         self.type = type",
      "32:         self.info = info",
      "33:     }",
      "34: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m": [
      "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "364:         __block MXTransactionCancelCode *cancelCode;",
      "365:         dispatch_group_t group = dispatch_group_create();",
      "367:         for (NSString *keyFullId in self.theirMac.mac)",
      "368:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "367:         MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:             MXDeviceInfo *device = [self.manager.crypto deviceWithDeviceId:key.keyId ofUser:self.otherDevice.userId];",
      "373:             if (device)",
      "374:             {",
      "375:                 if ([key.value isEqualToString:[self macUsingAgreedMethod:device.keys[keyFullId]",
      "376:                                                                      info:[NSString stringWithFormat:@\"%@%@\", baseInfo, keyFullId]]])",
      "377:                 {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:                 if ([device.deviceId isEqualToString:otherUserMasterKeys.keys])",
      "378:                 {",
      "379:                     MXLogWarning(@\"[MXKeyVerification][MXSASTransaction] verifyMacs: Device id should not be the same as master key\");",
      "380:                     cancelCode = MXTransactionCancelCode.invalidMessage;",
      "381:                     break;",
      "382:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "398:             else",
      "399:             {",
      "402:                 if (otherUserMasterKeys)",
      "403:                 {",
      "",
      "[Removed Lines]",
      "401:                 MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
      "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1965: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events  onComplete:(void (^)(void))onComplete",
      "1966: {",
      "1968:     {",
      "1969:         onComplete();",
      "1970:         return;",
      "1971:     }",
      "1974:         dispatch_group_t dispatchGroup = dispatch_group_create();",
      "1977:         {",
      "1978:             if (!event.decryptionError)",
      "1979:             {",
      "",
      "[Removed Lines]",
      "1967:     if (events.count == 0)",
      "1973:     [self decryptEvents:events inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1976:         for (MXEvent *event in events)",
      "",
      "[Added Lines]",
      "1967:     NSMutableArray *supportedEvents = [NSMutableArray arrayWithCapacity:events.count];",
      "1968:     for (MXEvent *event in events)",
      "1969:     {",
      "1970:         if ([MXTools isSupportedToDeviceEvent:event])",
      "1971:         {",
      "1972:             [supportedEvents addObject:event];",
      "1973:         }",
      "1974:     }",
      "1976:     if (supportedEvents.count == 0)",
      "1982:     [self decryptEvents:supportedEvents inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1985:         for (MXEvent *event in supportedEvents)",
      "",
      "---------------"
    ],
    "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h": [
      "File: MatrixSDK/MatrixSDK.h -> MatrixSDK/MatrixSDK.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "171: #import \"MXCachedSyncResponse.h\"",
      "172: #import \"MXBackgroundCryptoStore.h\"",
      "173: #import \"MXSharedHistoryKeyService.h\"",
      "176: #import \"MXSyncResponse.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174: #import \"MXRoomKeyEventContent.h\"",
      "175: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift": [
      "File: MatrixSDK/Utils/Categories/Dictionary.swift -> MatrixSDK/Utils/Categories/Dictionary.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: internal extension Dictionary {",
      "20:     func adding(key: Key, value: Value) -> [Key: Value] {",
      "21:         var dict = self",
      "22:         dict[key] = value",
      "23:         return dict",
      "24:     }",
      "26:     func removing(key: Key) -> [Key: Value] {",
      "27:         var dict = self",
      "28:         dict[key] = nil",
      "29:         return dict",
      "30:     }",
      "31: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift": [
      "File: MatrixSDK/Utils/MXDateProvider.swift -> MatrixSDK/Utils/MXDateProvider.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: protocol MXDateProviding {",
      "20:     func currentDate() -> Date",
      "21: }",
      "23: struct MXDateProvider: MXDateProviding {",
      "24:     func currentDate() -> Date {",
      "25:         Date()",
      "26:     }",
      "27: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m": [
      "File: MatrixSDK/Utils/MXLRUCache.m -> MatrixSDK/Utils/MXLRUCache.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:                 [cachedObjects addObject:item];",
      "150:                 [cachedKeys addObject:key];",
      "151:             }",
      "152:         }",
      "153:     }",
      "154: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152:             else",
      "153:             {",
      "154:                 MXLRUCacheItem* item = [cachedObjects objectAtIndex:pos];",
      "155:                 item.object = object;",
      "156:             }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift": [
      "File: MatrixSDK/Utils/MXTools.swift -> MatrixSDK/Utils/MXTools.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:         }",
      "45:         return urlString",
      "46:     }",
      "47: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     @objc",
      "52:     static func isSupportedToDeviceEvent(_ event: MXEvent) -> Bool {",
      "53:         if event.isEncrypted {",
      "55:             let algorithm = event.wireContent[\"algorithm\"] as? String",
      "56:             guard algorithm == kMXCryptoOlmAlgorithm else {",
      "57:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported event encrypted with other than OLM algorithm: \\(String(describing: algorithm))\")",
      "58:                 return false",
      "59:             }",
      "60:         } else {",
      "62:             let unsupportedPlainEvents = Set([",
      "63:                 MXEventType.roomKey.identifier,",
      "64:                 MXEventType.roomForwardedKey.identifier,",
      "65:                 MXEventType.secretSend.identifier",
      "66:             ])",
      "68:             if unsupportedPlainEvents.contains(event.type) {",
      "69:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported plain event with type: \\(String(describing: event.type))\")",
      "70:                 return false",
      "71:             }",
      "72:         }",
      "74:         return true",
      "75:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift -> MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:             forwardingCurve25519KeyChain: [String]!,",
      "36:             keysClaimed: [String : String]!,",
      "37:             exportFormat: Bool,",
      "39:         ) -> Bool {",
      "40:             sessions.append(",
      "41:                 .init(sharedHistory: sharedHistory)",
      "",
      "[Removed Lines]",
      "38:             sharedHistory: Bool",
      "",
      "[Added Lines]",
      "38:             sharedHistory: Bool,",
      "39:             untrusted: Bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         session.historyVisibility = kMXRoomHistoryVisibilityWorldReadable",
      "139:         for (eventValue, expectedValue) in eventToExpectation {",
      "141:             device.sessions = []",
      "143:             decryption.onRoomKeyEvent(event)",
      "",
      "[Removed Lines]",
      "140:             let event = makeRoomKeyEvent(sharedHistory: eventValue)",
      "",
      "[Added Lines]",
      "141:             let event = MXEvent.roomKeyFixture(",
      "142:                 sharedHistory: eventValue",
      "143:             )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213:             XCTAssertEqual(hasSharedHistory, expectedValue)",
      "214:         }",
      "215:     }",
      "241: }",
      "",
      "[Removed Lines]",
      "220:     private func makeRoomKeyEvent(sharedHistory: Bool? = nil) -> MXEvent? {",
      "221:         let event = MXEvent(fromJSON: [",
      "222:             \"sender_key\": senderKey,",
      "223:         ])",
      "225:         var content: [String: Any] = [",
      "226:             \"room_id\": roomId1,",
      "227:             \"session_id\": sessionId1,",
      "228:             \"session_key\": \"123\",",
      "229:             \"algorithm\": \"456\",",
      "230:         ]",
      "231:         if let sharedHistory = sharedHistory {",
      "232:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "233:         }",
      "235:         let result = MXEventDecryptionResult()",
      "236:         result.senderCurve25519Key = \"XYZ\"",
      "237:         result.clearEvent = [\"content\": content]",
      "238:         event?.setClearData(result)",
      "239:         return event",
      "240:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift": [
      "File: MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift -> MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import OLMKit",
      "20: public class MXMemoryCryptoStore: NSObject, MXCryptoStore {",
      "22:     private static var stores: [MXCredentials: MXMemoryCryptoStore] = [:]",
      "24:     private let credentials: MXCredentials",
      "25:     private var storeAccount: Account?",
      "26:     private var devices: [String: [MXDeviceInfo]] = [:]",
      "27:     private var algorithms: [String: RoomAlgorithm] = [:]",
      "28:     private var inboundSessions: [InboundSession] = []",
      "29:     private var outboundSessions: [String: MXOlmOutboundGroupSession] = [:]",
      "30:     private var secrets: [String: String] = [:]",
      "31:     private var incomingRoomKeyRequestsMap: [String: MXIncomingRoomKeyRequest] = [:]",
      "32:     private var outgoingRoomKeyRequests: [String: MXOutgoingRoomKeyRequest] = [:]",
      "33:     private var olmSessions: [OlmSessionMapKey: MXOlmSession] = [:]",
      "34:     private var crossSigningKeysMap: [String: MXCrossSigningInfo] = [:]",
      "35:     private var sharedOutboundSessions: [SharedOutboundSession] = []",
      "39:     public required init!(credentials: MXCredentials!) {",
      "40:         self.credentials = credentials",
      "41:         storeAccount = Account()",
      "42:         storeAccount?.userId = credentials.userId",
      "43:         storeAccount?.deviceId = credentials.deviceId",
      "44:         storeAccount?.cryptoVersion = MXCryptoVersion(rawValue: MXCryptoVersion.versionCount.rawValue - 1) ?? .versionUndefined",
      "45:         super.init()",
      "46:     }",
      "48:     public static func hasData(for credentials: MXCredentials!) -> Bool {",
      "49:         stores[credentials] != nil",
      "50:     }",
      "52:     public static func createStore(with credentials: MXCredentials!) -> Self! {",
      "53:         if let existingStore = stores[credentials] as? Self {",
      "54:             return existingStore",
      "55:         }",
      "56:         if let newStore = Self(credentials: credentials) {",
      "57:             stores[credentials] = newStore",
      "58:             return newStore",
      "59:         }",
      "60:         return nil",
      "61:     }",
      "63:     public static func delete(with credentials: MXCredentials!) {",
      "64:         stores.removeValue(forKey: credentials)",
      "65:     }",
      "67:     public static func deleteAllStores() {",
      "68:         stores.removeAll()",
      "69:     }",
      "71:     public static func deleteReadonlyStore(with credentials: MXCredentials!) {",
      "73:     }",
      "75:     public func open(_ onComplete: (() -> Void)!, failure: ((Error?) -> Void)!) {",
      "76:         onComplete?()",
      "77:     }",
      "81:     public func storeDeviceId(_ deviceId: String!) {",
      "82:         storeAccount?.deviceId = deviceId",
      "83:     }",
      "85:     public func deviceId() -> String! {",
      "86:         storeAccount?.deviceId",
      "87:     }",
      "91:     public func setAccount(_ account: OLMAccount!) {",
      "92:         storeAccount?.olmAccount = account",
      "93:     }",
      "95:     public func account() -> OLMAccount! {",
      "96:         storeAccount?.olmAccount",
      "97:     }",
      "99:     public func performAccountOperation(_ block: ((OLMAccount?) -> Void)!) {",
      "100:         block?(storeAccount?.olmAccount)",
      "101:     }",
      "105:     public func storeDeviceSyncToken(_ deviceSyncToken: String!) {",
      "106:         storeAccount?.deviceSyncToken = deviceSyncToken",
      "107:     }",
      "109:     public func deviceSyncToken() -> String! {",
      "110:         storeAccount?.deviceSyncToken",
      "111:     }",
      "115:     public func storeDevice(forUser userId: String!, device: MXDeviceInfo!) {",
      "116:         if devices[userId] == nil {",
      "117:             devices[userId] = []",
      "118:         }",
      "119:         devices[userId]?.append(device)",
      "120:     }",
      "122:     public func device(withDeviceId deviceId: String!, forUser userId: String!) -> MXDeviceInfo! {",
      "123:         devices[userId]?.first { $0.deviceId == deviceId }",
      "124:     }",
      "126:     public func device(withIdentityKey identityKey: String!) -> MXDeviceInfo! {",
      "127:         Array(devices.values).flatMap { $0 }.first { $0.identityKey == identityKey }",
      "128:     }",
      "130:     public func storeDevices(forUser userId: String!, devices: [String : MXDeviceInfo]!) {",
      "131:         if self.devices[userId] != nil {",
      "133:             self.devices.removeValue(forKey: userId)",
      "134:         }",
      "136:         self.devices[userId] = Array(devices.values)",
      "137:     }",
      "139:     public func devices(forUser userId: String!) -> [String : MXDeviceInfo]! {",
      "140:         let devices = devices[userId] ?? []",
      "142:         var result: [String: MXDeviceInfo] = [:]",
      "144:         for device in devices {",
      "145:             result[device.deviceId] = device",
      "146:         }",
      "148:         return result",
      "149:     }",
      "153:     public func deviceTrackingStatus() -> [String : NSNumber]! {",
      "154:         storeAccount?.deviceTrackingStatus",
      "155:     }",
      "157:     public func storeDeviceTrackingStatus(_ statusMap: [String : NSNumber]!) {",
      "158:         storeAccount?.deviceTrackingStatus = statusMap",
      "159:     }",
      "163:     public func storeCrossSigningKeys(_ crossSigningInfo: MXCrossSigningInfo!) {",
      "164:         crossSigningKeysMap[crossSigningInfo.userId] = crossSigningInfo",
      "165:     }",
      "167:     public func crossSigningKeys(forUser userId: String!) -> MXCrossSigningInfo! {",
      "168:         crossSigningKeysMap[userId]",
      "169:     }",
      "171:     public func crossSigningKeys() -> [MXCrossSigningInfo]! {",
      "172:         Array(crossSigningKeysMap.values)",
      "173:     }",
      "177:     public func storeAlgorithm(forRoom roomId: String!, algorithm: String!) {",
      "178:         algorithms[roomId] = RoomAlgorithm(algorithm: algorithm)",
      "179:     }",
      "181:     public func algorithm(forRoom roomId: String!) -> String! {",
      "182:         algorithms[roomId]?.algorithm",
      "183:     }",
      "187:     public func store(_ session: MXOlmSession!, forDevice deviceKey: String!) {",
      "188:         let key = OlmSessionMapKey(sessionId: session.session.sessionIdentifier(), deviceKey: deviceKey)",
      "189:         olmSessions[key] = session",
      "190:     }",
      "192:     public func session(withDevice deviceKey: String!, andSessionId sessionId: String!) -> MXOlmSession! {",
      "193:         let key = OlmSessionMapKey(sessionId: sessionId, deviceKey: deviceKey)",
      "194:         return olmSessions[key]",
      "195:     }",
      "197:     public func performSessionOperation(withDevice deviceKey: String!, andSessionId sessionId: String!, block: ((MXOlmSession?) -> Void)!) {",
      "198:         let session = session(withDevice: deviceKey, andSessionId: sessionId)",
      "199:         block?(session)",
      "200:     }",
      "202:     public func sessions(withDevice deviceKey: String!) -> [MXOlmSession]! {",
      "203:         Array(olmSessions.filter { $0.key.deviceKey == deviceKey }.values)",
      "204:     }",
      "208:     public func store(_ sessions: [MXOlmInboundGroupSession]!) {",
      "209:         inboundSessions.append(contentsOf: sessions.map { InboundSession(session: $0) } )",
      "210:     }",
      "212:     public func inboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) -> MXOlmInboundGroupSession! {",
      "213:         inboundSessions.first { $0.sessionId == sessionId && $0.session.senderKey == senderKey }?.session",
      "214:     }",
      "216:     public func performSessionOperationWithGroupSession(withId sessionId: String!, senderKey: String!, block: ((MXOlmInboundGroupSession?) -> Void)!) {",
      "217:         let session = inboundGroupSession(withId: sessionId, andSenderKey: senderKey)",
      "218:         block?(session)",
      "219:     }",
      "221:     public func inboundGroupSessions() -> [MXOlmInboundGroupSession]! {",
      "222:         inboundSessions.map { $0.session }",
      "223:     }",
      "225:     public func inboundGroupSessions(withSessionId sessionId: String!) -> [MXOlmInboundGroupSession]! {",
      "226:         inboundSessions.filter { $0.sessionId == sessionId }.map { $0.session }",
      "227:     }",
      "229:     public func removeInboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) {",
      "230:         inboundSessions.removeAll { $0.sessionId == sessionId && $0.session.senderKey == senderKey }",
      "231:     }",
      "235:     public func store(_ session: OLMOutboundGroupSession!, withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "236:         let creationTime: TimeInterval",
      "238:         if let existingSession = outboundSessions[roomId],",
      "239:            existingSession.sessionId == session.sessionIdentifier() {",
      "241:             creationTime = existingSession.creationTime",
      "242:         } else {",
      "243:             creationTime = Date().timeIntervalSince1970",
      "244:         }",
      "246:         if let newSession = MXOlmOutboundGroupSession(session: session, roomId: roomId, creationTime: creationTime) {",
      "247:             outboundSessions[roomId] = newSession",
      "248:             return newSession",
      "249:         }",
      "251:         return nil",
      "252:     }",
      "254:     public func outboundGroupSession(withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "255:         outboundSessions[roomId]",
      "256:     }",
      "258:     public func outboundGroupSessions() -> [MXOlmOutboundGroupSession]! {",
      "259:         Array(outboundSessions.values)",
      "260:     }",
      "262:     public func removeOutboundGroupSession(withRoomId roomId: String!) {",
      "263:         outboundSessions.removeValue(forKey: roomId)",
      "264:     }",
      "268:     public func storeSharedDevices(_ devices: MXUsersDevicesMap<NSNumber>!, messageIndex: UInt, forOutboundGroupSessionInRoomWithId roomId: String!, sessionId: String!) {",
      "269:         for userId in devices.userIds() {",
      "270:             for deviceId in devices.deviceIds(forUser: userId) {",
      "271:                 guard let device = device(withDeviceId: deviceId, forUser: userId) else {",
      "272:                     continue",
      "273:                 }",
      "275:                 let session = SharedOutboundSession(roomId: roomId, sessionId: sessionId, device: device, messageIndex: messageIndex)",
      "276:                 sharedOutboundSessions.append(session)",
      "277:             }",
      "278:         }",
      "279:     }",
      "281:     public func sharedDevicesForOutboundGroupSessionInRoom(withId roomId: String!, sessionId: String!) -> MXUsersDevicesMap<NSNumber>! {",
      "282:         let result = MXUsersDevicesMap<NSNumber>()",
      "284:         let sessions = sharedOutboundSessions.filter { $0.roomId == roomId && $0.sessionId == sessionId }",
      "286:         for session in sessions {",
      "287:             result.setObject(NSNumber(value: session.messageIndex),",
      "288:                              forUser: session.device.userId,",
      "289:                              andDevice: session.device.deviceId)",
      "290:         }",
      "292:         return result",
      "293:     }",
      "295:     public func messageIndexForSharedDeviceInRoom(withId roomId: String!, sessionId: String!, userId: String!, deviceId: String!) -> NSNumber! {",
      "296:         guard let index = sharedOutboundSessions.first(where: { $0.roomId == roomId",
      "297:             && $0.sessionId == sessionId",
      "298:             && $0.device.deviceId == deviceId })?.messageIndex else {",
      "299:             return nil",
      "300:         }",
      "301:         return NSNumber(value: index)",
      "302:     }",
      "306:     public var backupVersion: String! {",
      "307:         get {",
      "308:             storeAccount?.backupVersion",
      "309:         } set {",
      "310:             storeAccount?.backupVersion = newValue",
      "311:         }",
      "312:     }",
      "314:     public func resetBackupMarkers() {",
      "315:         inboundSessions.forEach { $0.backedUp = false }",
      "316:     }",
      "318:     public func markBackupDone(for sessions: [MXOlmInboundGroupSession]!) {",
      "319:         for session in sessions {",
      "320:             inboundSessions.filter({ $0.sessionId == session.session.sessionIdentifier() }).forEach { $0.backedUp = true }",
      "321:         }",
      "322:     }",
      "324:     public func inboundGroupSessions(toBackup limit: UInt) -> [MXOlmInboundGroupSession]! {",
      "325:         let toBackup = inboundSessions.filter { !$0.backedUp }",
      "326:         if toBackup.isEmpty {",
      "327:             return []",
      "328:         }",
      "329:         let toDrop = toBackup.count > limit ? toBackup.count - Int(limit) : 0",
      "330:         return toBackup.dropLast(toDrop).map { $0.session }",
      "331:     }",
      "333:     public func inboundGroupSessionsCount(_ onlyBackedUp: Bool) -> UInt {",
      "334:         UInt(onlyBackedUp ? inboundSessions.filter { $0.backedUp }.count : inboundSessions.count)",
      "335:     }",
      "339:     public func outgoingRoomKeyRequest(withRequestBody requestBody: [AnyHashable : Any]!) -> MXOutgoingRoomKeyRequest! {",
      "340:         outgoingRoomKeyRequests.first(where: { NSDictionary(dictionary: $1.requestBody).isEqual(to: requestBody) })?.value",
      "341:     }",
      "343:     public func outgoingRoomKeyRequest(with state: MXRoomKeyRequestState) -> MXOutgoingRoomKeyRequest! {",
      "344:         outgoingRoomKeyRequests.first(where: { $0.value.state == state })?.value",
      "345:     }",
      "347:     public func allOutgoingRoomKeyRequests(with state: MXRoomKeyRequestState) -> [MXOutgoingRoomKeyRequest]! {",
      "348:         Array(outgoingRoomKeyRequests.filter { $1.state == state }.values)",
      "349:     }",
      "351:     public func allOutgoingRoomKeyRequests(withRoomId roomId: String!, sessionId: String!, algorithm: String!, senderKey: String!) -> [MXOutgoingRoomKeyRequest]! {",
      "352:         Array(outgoingRoomKeyRequests.filter {",
      "353:             $1.roomId == roomId",
      "354:             && $1.sessionId == sessionId",
      "355:             && $1.algorithm == algorithm",
      "356:             && $1.senderKey == senderKey",
      "357:         }.values)",
      "358:     }",
      "360:     public func store(_ request: MXOutgoingRoomKeyRequest!) {",
      "361:         outgoingRoomKeyRequests[request.requestId] = request",
      "362:     }",
      "364:     public func update(_ request: MXOutgoingRoomKeyRequest!) {",
      "365:         outgoingRoomKeyRequests[request.requestId] = request",
      "366:     }",
      "368:     public func deleteOutgoingRoomKeyRequest(withRequestId requestId: String!) {",
      "369:         outgoingRoomKeyRequests.removeValue(forKey: requestId)",
      "370:     }",
      "374:     public func store(_ request: MXIncomingRoomKeyRequest!) {",
      "375:         incomingRoomKeyRequestsMap[request.requestId] = request",
      "376:     }",
      "378:     public func deleteIncomingRoomKeyRequest(_ requestId: String!, fromUser userId: String!, andDevice deviceId: String!) {",
      "379:         let toBeRemoved = incomingRoomKeyRequestsMap.filter { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId }",
      "380:         for identifier in toBeRemoved {",
      "381:             incomingRoomKeyRequestsMap.removeValue(forKey: identifier.key)",
      "382:         }",
      "383:     }",
      "385:     public func incomingRoomKeyRequest(withRequestId requestId: String!, fromUser userId: String!, andDevice deviceId: String!) -> MXIncomingRoomKeyRequest! {",
      "386:         incomingRoomKeyRequestsMap.first(where: { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId })?.value",
      "387:     }",
      "389:     public func incomingRoomKeyRequests() -> MXUsersDevicesMap<NSArray>! {",
      "390:         let result = MXUsersDevicesMap<NSMutableArray>()",
      "392:         for request in incomingRoomKeyRequestsMap {",
      "393:             if let requests = result.object(forDevice: request.value.deviceId, forUser: request.value.userId) {",
      "394:                 requests.add(request.value)",
      "395:             } else {",
      "396:                 let requests = NSMutableArray(object: request.value)",
      "397:                 result.setObject(requests, forUser: request.value.userId, andDevice: request.value.deviceId)",
      "398:             }",
      "399:         }",
      "401:         return result as? MXUsersDevicesMap<NSArray>",
      "402:     }",
      "406:     public func storeSecret(_ secret: String!, withSecretId secretId: String!) {",
      "407:         secrets[secretId] = secret",
      "408:     }",
      "410:     public func secret(withSecretId secretId: String!) -> String! {",
      "411:         secrets[secretId]",
      "412:     }",
      "414:     public func deleteSecret(withSecretId secretId: String!) {",
      "415:         secrets.removeValue(forKey: secretId)",
      "416:     }",
      "420:     public var globalBlacklistUnverifiedDevices: Bool {",
      "421:         get {",
      "422:             storeAccount?.globalBlacklistUnverifiedDevices ?? false",
      "423:         } set {",
      "424:             storeAccount?.globalBlacklistUnverifiedDevices = newValue",
      "425:         }",
      "426:     }",
      "428:     public func blacklistUnverifiedDevices(inRoom roomId: String!) -> Bool {",
      "429:         algorithms[roomId]?.blacklistUnverifiedDevices ?? false",
      "430:     }",
      "432:     public func storeBlacklistUnverifiedDevices(inRoom roomId: String!, blacklist: Bool) {",
      "433:         if let algorithm = algorithms[roomId] {",
      "434:             algorithm.blacklistUnverifiedDevices = blacklist",
      "435:         } else {",
      "436:             algorithms[roomId] = RoomAlgorithm(algorithm: nil, blacklistUnverifiedDevices: blacklist)",
      "437:         }",
      "438:     }",
      "442:     public var cryptoVersion: MXCryptoVersion {",
      "443:         get {",
      "444:             storeAccount?.cryptoVersion ?? .versionUndefined",
      "445:         } set {",
      "446:             storeAccount?.cryptoVersion = newValue",
      "447:         }",
      "448:     }",
      "450: }",
      "456: private class InboundSession {",
      "457:     let session: MXOlmInboundGroupSession",
      "458:     var backedUp: Bool",
      "460:     var sessionId: String {",
      "461:         session.session.sessionIdentifier()",
      "462:     }",
      "464:     init(session: MXOlmInboundGroupSession,",
      "465:          backedUp: Bool = false) {",
      "466:         self.session = session",
      "467:         self.backedUp = backedUp",
      "468:     }",
      "469: }",
      "473: private struct OlmSessionMapKey: Hashable {",
      "474:     let sessionId: String",
      "475:     let deviceKey: String",
      "476: }",
      "480: private struct Account {",
      "481:     var userId: String?",
      "482:     var deviceId: String?",
      "483:     var cryptoVersion: MXCryptoVersion = .versionUndefined",
      "484:     var deviceSyncToken: String?",
      "485:     var olmAccount: OLMAccount?",
      "486:     var backupVersion: String?",
      "487:     var globalBlacklistUnverifiedDevices: Bool = false",
      "488:     var deviceTrackingStatus: [String : NSNumber]?",
      "489: }",
      "493: private struct SharedOutboundSession {",
      "494:     let roomId: String",
      "495:     let sessionId: String",
      "496:     let device: MXDeviceInfo",
      "497:     let messageIndex: UInt",
      "498: }",
      "502: private class RoomAlgorithm {",
      "503:     let algorithm: String?",
      "504:     var blacklistUnverifiedDevices: Bool",
      "506:     init(algorithm: String?,",
      "507:          blacklistUnverifiedDevices: Bool = false) {",
      "508:         self.algorithm = algorithm",
      "509:         self.blacklistUnverifiedDevices = blacklistUnverifiedDevices",
      "510:     }",
      "511: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXForwardedRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"sender_key\": \"C\",",
      "30:             \"session_id\": \"D\",",
      "31:             \"session_key\": \"E\",",
      "32:             \"sender_claimed_ed25519_key\": \"F\",",
      "33:             \"forwarding_curve25519_key_chain\": [\"G\", \"H\"],",
      "34:             kMXSharedHistoryKeyName: false",
      "35:         ]",
      "36:     }",
      "38:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "39:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "40:             fromJSON: [:])",
      "41:         )",
      "43:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "44:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "45:         )",
      "47:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "48:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "49:         )",
      "51:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "52:             fromJSON: makeValidJSON().removing(key: \"sender_key\"))",
      "53:         )",
      "55:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "56:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "57:         )",
      "59:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "60:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "61:         )",
      "63:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "64:             fromJSON: makeValidJSON().removing(key: \"sender_claimed_ed25519_key\"))",
      "65:         )",
      "66:     }",
      "68:     func test_modelFromJSON_canCreateFromJSON() {",
      "69:         let content = MXForwardedRoomKeyEventContent(fromJSON: makeValidJSON())",
      "71:         XCTAssertNotNil(content)",
      "72:         XCTAssertEqual(content?.algorithm, \"A\")",
      "73:         XCTAssertEqual(content?.roomId, \"B\")",
      "74:         XCTAssertEqual(content?.senderKey, \"C\")",
      "75:         XCTAssertEqual(content?.sessionId, \"D\")",
      "76:         XCTAssertEqual(content?.sessionKey, \"E\")",
      "77:         XCTAssertEqual(content?.senderClaimedEd25519Key, \"F\")",
      "78:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [\"G\", \"H\"])",
      "79:         XCTAssertEqual(content?.sharedHistory, false)",
      "80:     }",
      "82:     func test_modelFromJSON_forwardingCurveChainDefaultsToEmpty() {",
      "83:         let json = makeValidJSON().removing(key: \"forwarding_curve25519_key_chain\")",
      "84:         let content = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "85:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [])",
      "86:     }",
      "88:     func test_modelFromJSON_sharedHistory() {",
      "89:         var json = makeValidJSON()",
      "91:         json[kMXSharedHistoryKeyName] = true",
      "92:         let content1 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "93:         XCTAssertEqual(content1?.sharedHistory, true)",
      "95:         json[kMXSharedHistoryKeyName] = false",
      "96:         let content2 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "97:         XCTAssertEqual(content2?.sharedHistory, false)",
      "99:         json[kMXSharedHistoryKeyName] = nil",
      "100:         let content3 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "101:         XCTAssertEqual(content3?.sharedHistory, false)",
      "102:     }",
      "106:     func test_JSONDictionary_canExportJSON() {",
      "107:         let content = MXForwardedRoomKeyEventContent()",
      "108:         content.algorithm = \"A\"",
      "109:         content.roomId = \"B\"",
      "110:         content.senderKey = \"C\"",
      "111:         content.sessionId = \"D\"",
      "112:         content.sessionKey = \"E\"",
      "113:         content.senderClaimedEd25519Key = \"F\"",
      "114:         content.forwardingCurve25519KeyChain = [\"G\", \"H\"]",
      "115:         content.sharedHistory = false",
      "117:         let json = content.jsonDictionary()",
      "119:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "120:     }",
      "121: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"session_id\": \"C\",",
      "30:             \"session_key\": \"D\",",
      "31:             kMXSharedHistoryKeyName: false",
      "32:         ]",
      "33:     }",
      "35:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "36:         XCTAssertNil(MXRoomKeyEventContent(",
      "37:             fromJSON: [:])",
      "38:         )",
      "40:         XCTAssertNil(MXRoomKeyEventContent(",
      "41:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "42:         )",
      "44:         XCTAssertNil(MXRoomKeyEventContent(",
      "45:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "46:         )",
      "48:         XCTAssertNil(MXRoomKeyEventContent(",
      "49:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "50:         )",
      "52:         XCTAssertNil(MXRoomKeyEventContent(",
      "53:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "54:         )",
      "55:     }",
      "57:     func test_modelFromJSON_canCreateFromJSON() {",
      "58:         let content = MXRoomKeyEventContent(fromJSON: makeValidJSON())",
      "60:         XCTAssertNotNil(content)",
      "61:         XCTAssertEqual(content?.algorithm, \"A\")",
      "62:         XCTAssertEqual(content?.roomId, \"B\")",
      "63:         XCTAssertEqual(content?.sessionId, \"C\")",
      "64:         XCTAssertEqual(content?.sessionKey, \"D\")",
      "65:         XCTAssertEqual(content?.sharedHistory, false)",
      "66:     }",
      "68:     func test_modelFromJSON_sharedHistory() {",
      "69:         var json = makeValidJSON()",
      "71:         json[kMXSharedHistoryKeyName] = true",
      "72:         let content1 = MXRoomKeyEventContent(fromJSON: json)",
      "73:         XCTAssertEqual(content1?.sharedHistory, true)",
      "75:         json[kMXSharedHistoryKeyName] = false",
      "76:         let content2 = MXRoomKeyEventContent(fromJSON: json)",
      "77:         XCTAssertEqual(content2?.sharedHistory, false)",
      "79:         json[kMXSharedHistoryKeyName] = nil",
      "80:         let content3 = MXRoomKeyEventContent(fromJSON: json)",
      "81:         XCTAssertEqual(content3?.sharedHistory, false)",
      "82:     }",
      "86:     func test_JSONDictionary_canExportJSON() {",
      "87:         let content = MXRoomKeyEventContent()",
      "88:         content.algorithm = \"A\"",
      "89:         content.roomId = \"B\"",
      "90:         content.sessionId = \"C\"",
      "91:         content.sessionKey = \"D\"",
      "92:         content.sharedHistory = false",
      "94:         let json = content.jsonDictionary()",
      "96:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "97:     }",
      "98: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: private let BobSenderKey = \"BobDeviceCurveKey\"",
      "23: class MXUnrequestedForwardedRoomKeyManagerUnitTests: XCTestCase {",
      "24:     class Delegate: MXUnrequestedForwardedRoomKeyManagerDelegate {",
      "25:         var stubbedUserKeys = [String: [MXDeviceInfo]]()",
      "26:         var spyKeys = [MXRoomKeyInfo]()",
      "28:         func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void) {",
      "29:             let map = MXUsersDevicesMap<MXDeviceInfo>()",
      "30:             for (userId, devices) in stubbedUserKeys {",
      "31:                 for device in devices {",
      "32:                     map.setObject(device, forUser: userId, andDevice: device.deviceId)",
      "33:                 }",
      "34:             }",
      "35:             completion(map)",
      "36:         }",
      "38:         func acceptRoomKey(keyInfo: MXRoomKeyInfo) {",
      "39:             spyKeys.append(keyInfo)",
      "40:         }",
      "41:     }",
      "43:     class StubDateProvider: MXDateProviding {",
      "44:         var stubbedDate: Date?",
      "45:         func currentDate() -> Date {",
      "46:             return stubbedDate ?? Date()",
      "47:         }",
      "48:     }",
      "50:     var dateProvider: StubDateProvider!",
      "51:     var manager: MXUnrequestedForwardedRoomKeyManager!",
      "52:     var delegate: Delegate!",
      "54:     override func setUp() {",
      "55:         dateProvider = StubDateProvider()",
      "56:         manager = MXUnrequestedForwardedRoomKeyManager(dateProvider: dateProvider)",
      "57:         delegate = Delegate()",
      "58:         manager.delegate = delegate",
      "60:         delegate.stubbedUserKeys = [",
      "61:             \"Bob\": [",
      "62:                 MXDeviceInfo(fromJSON: [",
      "63:                     \"user_id\": \"Bob\",",
      "64:                     \"device_id\": \"BobDevice\",",
      "65:                     \"keys\": [",
      "66:                         \"ed25519:BobDevice\": \"BobDeviceEdKey\",",
      "67:                         \"curve25519:BobDevice\": BobSenderKey,",
      "68:                     ]",
      "69:                 ])",
      "70:             ]",
      "71:         ]",
      "72:     }",
      "74:     func test_processUnrequestedKeys_doesNothingIfNoKeys() {",
      "75:         manager.processUnrequestedKeys()",
      "76:         XCTAssertEqual(delegate.spyKeys, [])",
      "77:     }",
      "79:     func test_processUnrequestedKeys_addsAllKeysForInvitedRooms() {",
      "80:         let keys = [",
      "81:             MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "82:             MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "83:             MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"B\"),",
      "84:             MXRoomKeyInfo.fixture(sessionId: \"4\", roomId: \"C\"),",
      "85:         ]",
      "86:         for info in keys {",
      "87:             manager.addPendingKey(keyInfo: info, senderId: \"Bob\", senderKey: BobSenderKey)",
      "88:         }",
      "89:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "90:         manager.onRoomInvite(roomId: \"C\", senderId: \"Bob\")",
      "92:         manager.processUnrequestedKeys()",
      "94:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "95:         XCTAssertEqual(Set(sessionIds), [\"1\", \"2\", \"4\"])",
      "96:     }",
      "98:     func test_processUnrequestedKeys_addsOnlyKeysFromRoomInviter() {",
      "99:         manager.addPendingKey(",
      "100:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "101:             senderId: \"Bob\",",
      "102:             senderKey: \"AliceKey\"",
      "103:         )",
      "104:         manager.addPendingKey(",
      "105:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "106:             senderId: \"Bob\",",
      "107:             senderKey: BobSenderKey",
      "108:         )",
      "109:         manager.addPendingKey(",
      "110:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"A\"),",
      "111:             senderId: \"Bob\",",
      "112:             senderKey: \"CharlieKey\"",
      "113:         )",
      "114:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "116:         manager.processUnrequestedKeys()",
      "118:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "119:         XCTAssertEqual(Set(sessionIds), [\"2\"])",
      "120:     }",
      "122:     func test_processUnrequestedKeys_doesNotAddKeysIfSenderNotValid() {",
      "123:         manager.addPendingKey(",
      "124:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "125:             senderId: \"Bob\",",
      "126:             senderKey: \"BobInvalidKey\"",
      "127:         )",
      "128:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "130:         manager.processUnrequestedKeys()",
      "132:         XCTAssertEqual(delegate.spyKeys, [])",
      "133:     }",
      "135:     func test_processUnrequestedKeys_removesProcessedKeys() {",
      "136:         delegate.spyKeys = []",
      "137:         manager.addPendingKey(",
      "138:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "139:             senderId: \"Bob\",",
      "140:             senderKey: BobSenderKey",
      "141:         )",
      "142:         manager.processUnrequestedKeys()",
      "143:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "145:         delegate.spyKeys = []",
      "146:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "147:         manager.processUnrequestedKeys()",
      "148:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "150:         delegate.spyKeys = []",
      "151:         manager.processUnrequestedKeys()",
      "152:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "153:     }",
      "155:     func test_processUnrequestedKeys_removesInvitesMoreThan10MinutesFromPresent() {",
      "156:         let minutesToRoom: [TimeInterval: String] = [",
      "157:             -10: \"A\",",
      "158:              -9: \"B\",",
      "159:              0: \"C\",",
      "160:              9: \"D\",",
      "161:              10: \"E\"",
      "162:         ]",
      "165:         for (minutes, roomId) in minutesToRoom {",
      "166:             stubDate(timeInterval: minutes * 60)",
      "167:             manager.addPendingKey(",
      "168:                 keyInfo: MXRoomKeyInfo.fixture(sessionId: roomId, roomId: roomId),",
      "169:                 senderId: \"Bob\",",
      "170:                 senderKey: BobSenderKey",
      "171:             )",
      "172:         }",
      "175:         for (minutes, roomId) in minutesToRoom {",
      "176:             stubDate(timeInterval: minutes * 60)",
      "177:             manager.onRoomInvite(roomId: roomId, senderId: \"Bob\")",
      "178:         }",
      "181:         stubDate(timeInterval: 0)",
      "184:         manager.processUnrequestedKeys()",
      "186:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "187:         XCTAssertEqual(Set(sessionIds), [\"B\", \"C\", \"D\"])",
      "188:     }",
      "190:     func test_processUnrequestedKeys_removesKeysOlderThan10MinutesOfInvite() {",
      "191:         stubDate(timeInterval: 0)",
      "192:         manager.addPendingKey(",
      "193:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "194:             senderId: \"Bob\",",
      "195:             senderKey: BobSenderKey",
      "196:         )",
      "197:         stubDate(timeInterval: 1 * 60)",
      "198:         manager.addPendingKey(",
      "199:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "200:             senderId: \"Bob\",",
      "201:             senderKey: BobSenderKey",
      "202:         )",
      "203:         stubDate(timeInterval: 10 * 60)",
      "204:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "205:         stubDate(timeInterval: 19 * 60)",
      "207:         manager.processUnrequestedKeys()",
      "209:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "210:         XCTAssertEqual(delegate.spyKeys.first?.sessionId, \"2\")",
      "211:     }",
      "215:     func stubDate(timeInterval: TimeInterval) {",
      "216:         dateProvider.stubbedDate = Date(timeIntervalSince1970: timeInterval)",
      "217:     }",
      "218: }",
      "220: private extension MXRoomKeyInfo {",
      "221:     static func fixture(",
      "222:         sessionId: String,",
      "223:         roomId: String",
      "224:     ) -> MXRoomKeyInfo {",
      "225:         return MXRoomKeyInfo(",
      "226:             algorithm: \"\",",
      "227:             sessionId: sessionId,",
      "228:             sessionKey: \"\",",
      "229:             roomId: roomId,",
      "230:             senderKey: \"\",",
      "231:             forwardingKeyChain: nil,",
      "232:             keysClaimed: [:],",
      "233:             exportFormat: false,",
      "234:             sharedHistory: false",
      "235:         )",
      "236:     }",
      "237: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift -> MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:             forwardingCurve25519KeyChain: [],",
      "72:             keysClaimed: [:],",
      "73:             exportFormat: false,",
      "75:         )",
      "76:     }",
      "",
      "[Removed Lines]",
      "74:             sharedHistory: sharedHistory",
      "",
      "[Added Lines]",
      "74:             sharedHistory: sharedHistory,",
      "75:             untrusted: false",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift -> MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyInfoFactoryUnitTests: XCTestCase {",
      "23:     var store: MXMemoryCryptoStore!",
      "24:     var factory: MXRoomKeyInfoFactory!",
      "25:     override func setUp() {",
      "26:         store = MXMemoryCryptoStore(credentials: MXCredentials(homeServer: \"\", userId: \"Alice\", accessToken: nil))",
      "27:         factory = MXRoomKeyInfoFactory(myUserId: \"Alice\", store: store)",
      "28:         storeOutgoingKeyRequest(requestId: \"1\")",
      "29:     }",
      "33:     func test_roomKeyInfo_isNilForInvalidEvent() {",
      "34:         let info = factory.roomKey(for: MXEvent(fromJSON: [:]))",
      "35:         XCTAssertNil(info)",
      "36:     }",
      "40:     func test_roomKeyInfo_createFromRoomKeyEvent() {",
      "41:         let event = MXEvent.roomKeyFixture()",
      "43:         let key = factory.roomKey(for: event)",
      "45:         let info = key?.info",
      "46:         XCTAssertNotNil(key)",
      "47:         XCTAssertEqual(key?.type, .safe)",
      "48:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "49:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "50:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "51:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "52:         XCTAssertEqual(info?.senderKey, \"<sender_key>\")",
      "53:         XCTAssertNil(info?.forwardingKeyChain)",
      "54:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "55:         XCTAssertEqual(info?.exportFormat, false)",
      "56:         XCTAssertEqual(info?.sharedHistory, false)",
      "57:     }",
      "61:     func test_roomKeyInfo_isUnrequestedIfKeyNotRequested() {",
      "62:         store.deleteOutgoingRoomKeyRequest(withRequestId: \"1\")",
      "63:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "64:         let event = MXEvent.forwardedRoomKeyFixture(",
      "65:             senderKey: \"AliceSender\"",
      "66:         )",
      "68:         let key = factory.roomKey(for: event)",
      "70:         let info = key?.info",
      "71:         XCTAssertNotNil(key)",
      "72:         XCTAssertEqual(key?.type, .unrequested)",
      "73:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "74:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "75:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "76:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "77:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "78:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "79:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "80:         XCTAssertEqual(info?.exportFormat, true)",
      "81:         XCTAssertEqual(info?.sharedHistory, false)",
      "82:     }",
      "84:     func test_roomKeyInfo_isUnsafeIfNotFromMyself() {",
      "85:         storeDevice(userId: \"Bob\", trusted: true, identityKey: \"AliceSender\")",
      "86:         let event = MXEvent.forwardedRoomKeyFixture(",
      "87:             senderKey: \"AliceSender\"",
      "88:         )",
      "90:         let key = factory.roomKey(for: event)",
      "92:         let info = key?.info",
      "93:         XCTAssertNotNil(key)",
      "94:         XCTAssertEqual(key?.type, .unsafe)",
      "95:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "96:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "97:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "98:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "99:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "100:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "101:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "102:         XCTAssertEqual(info?.exportFormat, true)",
      "103:         XCTAssertEqual(info?.sharedHistory, false)",
      "104:     }",
      "106:     func test_roomKeyInfo_isUnsafeIfFromUnverifiedDevice() {",
      "107:         storeDevice(userId: \"Alice\", trusted: false, identityKey: \"AliceSender\")",
      "108:         let event = MXEvent.forwardedRoomKeyFixture(",
      "109:             senderKey: \"AliceSender\"",
      "110:         )",
      "112:         let key = factory.roomKey(for: event)",
      "114:         let info = key?.info",
      "115:         XCTAssertNotNil(key)",
      "116:         XCTAssertEqual(key?.type, .unsafe)",
      "117:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "118:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "119:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "120:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "121:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "122:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "123:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "124:         XCTAssertEqual(info?.exportFormat, true)",
      "125:         XCTAssertEqual(info?.sharedHistory, false)",
      "126:     }",
      "128:     func test_roomKeyInfo_createFromForwardedRoomKeyEvent() {",
      "129:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "130:         let event = MXEvent.forwardedRoomKeyFixture(",
      "131:             senderKey: \"AliceSender\"",
      "132:         )",
      "134:         let key = factory.roomKey(for: event)",
      "136:         let info = key?.info",
      "137:         XCTAssertNotNil(key)",
      "138:         XCTAssertEqual(key?.type, .safe)",
      "139:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "140:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "141:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "142:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "143:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "144:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "145:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "146:         XCTAssertEqual(info?.exportFormat, true)",
      "147:         XCTAssertEqual(info?.sharedHistory, false)",
      "148:     }",
      "152:     func storeOutgoingKeyRequest(",
      "153:         requestId: String = \"1\",",
      "154:         algorithm: String = \"megolm\",",
      "155:         roomId: String = \"!123:matrix.org\",",
      "156:         sessionId: String = \"session1\",",
      "157:         senderKey: String = \"<initial_sender_key>\"",
      "158:     ) {",
      "159:         let request = MXOutgoingRoomKeyRequest()",
      "160:         request.requestId = requestId",
      "162:         request.requestBody = [",
      "163:             \"room_id\": roomId,",
      "164:             \"algorithm\": algorithm,",
      "165:             \"sender_key\": senderKey,",
      "166:             \"session_id\": sessionId",
      "167:         ]",
      "168:         store.store(request)",
      "169:     }",
      "171:     func storeDevice(userId: String, trusted: Bool, identityKey: String) {",
      "172:         let trust = MXDeviceTrustLevel(",
      "173:             localVerificationStatus: trusted ? .verified : .unverified,",
      "174:             crossSigningVerified: false",
      "175:         )",
      "176:         let device = MXDeviceInfo(fromJSON: [",
      "177:             \"user_id\": userId,",
      "178:             \"device_id\": \"ABC\",",
      "179:             \"keys\": [\"curve25519:ABC\": identityKey]",
      "180:         ])!",
      "181:         device.setValue(trust, forKey: \"trustLevel\")",
      "182:         store.storeDevice(forUser: userId, device: device)",
      "183:     }",
      "184: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift": [
      "File: MatrixSDKTests/JSONModels/MXEventFixtures.swift -> MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:             ]",
      "35:         ])!",
      "36:     }",
      "37: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:     static func roomKeyFixture(",
      "39:         algorithm: String = \"megolm\",",
      "40:         roomId: String = \"!123:matrix.org\",",
      "41:         sessionId: String = \"session1\",",
      "42:         sessionKey: String = \"<key>\",",
      "43:         senderKey: String = \"<sender_key>\",",
      "44:         claimedKey: String = \"<claimed_key>\",",
      "45:         sharedHistory: Bool? = nil",
      "46:     ) -> MXEvent {",
      "47:         var content: [String: Any] = [",
      "48:             \"type\": kMXEventTypeStringRoomKey,",
      "49:             \"room_id\": roomId,",
      "50:             \"session_id\": sessionId,",
      "51:             \"session_key\": sessionKey,",
      "52:             \"algorithm\": algorithm",
      "53:         ]",
      "55:         if let sharedHistory = sharedHistory {",
      "56:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "57:         }",
      "59:         let result = MXEventDecryptionResult()",
      "60:         result.senderCurve25519Key = senderKey",
      "61:         result.claimedEd25519Key = claimedKey",
      "62:         result.clearEvent = [",
      "63:             \"type\": kMXEventTypeStringRoomKey,",
      "64:             \"content\": content",
      "65:         ]",
      "67:         let event = MXEvent(fromJSON: [:])!",
      "68:         event.setClearData(result)",
      "69:         return event",
      "70:     }",
      "72:     static func forwardedRoomKeyFixture(",
      "73:         algorithm: String = \"megolm\",",
      "74:         roomId: String = \"!123:matrix.org\",",
      "75:         sessionId: String = \"session1\",",
      "76:         sessionKey: String = \"<key>\",",
      "77:         senderKey: String = \"<sender_key>\",",
      "78:         initialSenderKey: String = \"<initial_sender_key>\",",
      "79:         claimedKey: String = \"<claimed_key>\",",
      "80:         sharedHistory: Bool = false",
      "81:     ) -> MXEvent {",
      "82:         let content: [String: Any] = [",
      "83:             \"type\": kMXEventTypeStringRoomKey,",
      "84:             \"room_id\": roomId,",
      "85:             \"session_id\": sessionId,",
      "86:             \"session_key\": sessionKey,",
      "87:             \"algorithm\": algorithm,",
      "88:             \"sender_key\": initialSenderKey,",
      "89:             \"sender_claimed_ed25519_key\": claimedKey,",
      "90:             kMXSharedHistoryKeyName: sharedHistory",
      "91:         ]",
      "93:         let result = MXEventDecryptionResult()",
      "94:         result.senderCurve25519Key = senderKey",
      "95:         result.claimedEd25519Key = claimedKey",
      "96:         result.clearEvent = [",
      "97:             \"type\": kMXEventTypeStringRoomForwardedKey,",
      "98:             \"content\": content",
      "99:         ]",
      "101:         let event = MXEvent(fromJSON: [:])!",
      "102:         event.setClearData(result)",
      "103:         return event",
      "104:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m": [
      "File: MatrixSDKTests/MXCryptoSecretShareTests.m -> MatrixSDKTests/MXCryptoSecretShareTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:  - Alice has a secret on her 1st device",
      "84:  - Alice logs in on a new device",
      "86:  - Alice requests the secret from the new device",
      "87:  -> She gets the secret",
      "",
      "[Removed Lines]",
      "85:  - Alice trusts the new device",
      "",
      "[Added Lines]",
      "85:  - Alice trusts the new device and vice versa",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:             MXCredentials *newAlice = newAliceSession.matrixRestClient.credentials;",
      "105:             [aliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:newAlice.deviceId ofUser:newAlice.userId success:nil failure:nil];",
      "108:             [newAliceSession.crypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:             [newAliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:aliceSession.myDeviceId ofUser:aliceSession.myUserId success:nil failure:nil];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
      "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #import \"MXSendReplyEventDefaultStringLocalizer.h\"",
      "32: #import \"MXOutboundSessionInfo.h\"",
      "33: #import <OLMKit/OLMKit.h>",
      "35: #import \"MXKey.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #import \"MXLRUCache.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2082:                 id<MXCryptoStore> bobCryptoStore = (id<MXCryptoStore>)[bobSession.crypto.olmDevice valueForKey:@\"store\"];",
      "2083:                 [bobCryptoStore removeInboundGroupSessionWithId:sessionId andSenderKey:toDeviceEvent.senderKey];",
      "2086:                 [event setClearData:nil];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2085:                 MXLRUCache *cache = [bobSession.crypto.olmDevice valueForKey:@\"inboundGroupSessionCache\"];",
      "2086:                 [cache clear];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m": [
      "File: MatrixSDKTests/MXToolsUnitTests.m -> MatrixSDKTests/MXToolsUnitTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #import \"MXTools.h\"",
      "20: #import \"MatrixSDKTestsSwiftHeader.h\"",
      "22: @interface MXToolsUnitTests : XCTestCase",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #import \"MatrixSDKSwiftHeader.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "129:     XCTAssertNotEqualObjects(url, [MXTools urlStringWithBase:currentResult queryParameters:@[parameter]]);",
      "130: }",
      "132: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: #pragma mark - Supported To-Device events",
      "135: - (void)testSupportedToDeviceEvents",
      "136: {",
      "137:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "138:         @\"type\": @\"m.room.encrypted\",",
      "139:         @\"content\": @{",
      "140:             @\"algorithm\": kMXCryptoOlmAlgorithm",
      "141:         }",
      "142:     }];",
      "143:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event1]);",
      "145:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "146:         @\"type\": @\"m.room.message\",",
      "147:     }];",
      "148:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event2]);",
      "150:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "151:         @\"type\": @\"random\",",
      "152:     }];",
      "153:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event3]);",
      "154: }",
      "156: - (void)testUnsupportedToDeviceEvents",
      "157: {",
      "158:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "159:         @\"type\": @\"m.room.encrypted\",",
      "160:         @\"content\": @{",
      "161:             @\"algorithm\": kMXCryptoMegolmAlgorithm",
      "162:         }",
      "163:     }];",
      "164:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event1]);",
      "166:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "167:         @\"type\": @\"m.room_key\",",
      "168:     }];",
      "169:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event2]);",
      "171:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "172:         @\"type\": @\"m.forwarded_room_key\",",
      "173:     }];",
      "174:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event3]);",
      "176:     MXEvent *event4 = [MXEvent modelFromJSON:@{",
      "177:         @\"type\": @\"m.secret.send\",",
      "178:     }];",
      "179:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event4]);",
      "180: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         \"MXEventsByTypesEnumeratorOnArrayTests\",",
      "53:         \"MXEventsEnumeratorOnArrayTests\",",
      "54:         \"MXFilterUnitTests\",",
      "55:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "56:         \"MXJSONModelUnitTests\",",
      "57:         \"MXKeyBackupUnitTests\",",
      "58:         \"MXKeyProviderUnitTests\",",
      "59:         \"MXMediaScanStoreUnitTests\",",
      "60:         \"MXMegolmDecryptionUnitTests\",",
      "61:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "60:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         \"MXQRCodeDataUnitTests\",",
      "68:         \"MXReplyEventParserUnitTests\",",
      "69:         \"MXResponseUnitTests\",",
      "70:         \"MXRoomStateUnitTests\",",
      "71:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "72:         \"MXStoreRoomListDataManagerUnitTests\",",
      "73:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:         \"MXRoomKeyEventContentUnitTests\",",
      "73:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "75:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:         \"MXThreadEventTimelineUnitTests\",",
      "76:         \"MXThreadingServiceUnitTests\",",
      "77:         \"MXToolsUnitTests\",",
      "79:       ],",
      "80:       \"target\" : {",
      "81:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "78:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "83:         \"MXTrustLevelSourceUnitTests\",",
      "84:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         \"MXEventReferenceUnitTests\",",
      "61:         \"MXEventScanStoreUnitTests\",",
      "62:         \"MXFilterUnitTests\",",
      "63:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "64:         \"MXJSONModelUnitTests\",",
      "65:         \"MXKeyBackupUnitTests\",",
      "66:         \"MXKeyProviderUnitTests\",",
      "67:         \"MXMediaScanStoreUnitTests\",",
      "68:         \"MXMegolmDecryptionUnitTests\",",
      "69:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "68:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         \"MXQRCodeDataUnitTests\",",
      "76:         \"MXReplyEventParserUnitTests\",",
      "77:         \"MXResponseUnitTests\",",
      "78:         \"MXRoomStateUnitTests\",",
      "79:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "80:         \"MXStoreRoomListDataManagerUnitTests\",",
      "81:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:         \"MXRoomKeyEventContentUnitTests\",",
      "81:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "83:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:         \"MXThreadEventTimelineUnitTests\",",
      "84:         \"MXThreadingServiceUnitTests\",",
      "85:         \"MXToolsUnitTests\",",
      "87:       ],",
      "88:       \"target\" : {",
      "89:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "86:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "91:         \"MXTrustLevelSourceUnitTests\",",
      "92:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c614a8d7d92f846d191cc98ae1824113574ef83",
      "candidate_info": {
        "commit_hash": "3c614a8d7d92f846d191cc98ae1824113574ef83",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/3c614a8d7d92f846d191cc98ae1824113574ef83",
        "files": [
          "MatrixSDK/Background/MXBackgroundSyncService.swift",
          "MatrixSDK/Contrib/Swift/MXSession.swift",
          "MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m",
          "MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift",
          "MatrixSDK/MXSDKOptions.h",
          "MatrixSDK/MXSDKOptions.m",
          "MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m",
          "MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MatrixSDKTestsData.m",
          "changelog.d/pr-1772.change"
        ],
        "message": "Deprecate MXLegacyCrypto",
        "before_after_code_files": [
          "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
          "MatrixSDK/Contrib/Swift/MXSession.swift||MatrixSDK/Contrib/Swift/MXSession.swift",
          "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m||MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m",
          "MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift||MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift",
          "MatrixSDK/MXSDKOptions.h||MatrixSDK/MXSDKOptions.h",
          "MatrixSDK/MXSDKOptions.m||MatrixSDK/MXSDKOptions.m",
          "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDKTests/MXCryptoKeyVerificationTests.m||MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MatrixSDKTestsData.m||MatrixSDKTests/MatrixSDKTestsData.m",
          "changelog.d/pr-1772.change||changelog.d/pr-1772.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ],
          "candidate": [
            "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift": [
          "File: MatrixSDK/Background/MXBackgroundSyncService.swift -> MatrixSDK/Background/MXBackgroundSyncService.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     public init(",
          "69:         withCredentials credentials: MXCredentials,",
          "71:         persistTokenDataHandler: MXRestClientPersistTokenDataHandler? = nil,",
          "72:         unauthenticatedHandler: MXRestClientUnauthenticatedHandler? = nil",
          "73:     ) {",
          "",
          "[Removed Lines]",
          "70:         isCryptoSDKEnabled: Bool = false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         self.restClient = restClient",
          "92:         store = MXBackgroundStore(withCredentials: credentials)",
          "104:         pushRulesManager = MXBackgroundPushRulesManager(withCredentials: credentials)",
          "105:         MXLog.debug(\"[MXBackgroundSyncService] init complete\")",
          "",
          "[Removed Lines]",
          "94:         let resetBackgroundCryptoStore = syncResponseStoreManager.syncToken() == nil",
          "96:         if isCryptoSDKEnabled {",
          "97:             MXLog.debug(\"[MXBackgroundSyncService] init: constructing crypto v2\")",
          "98:             crypto = MXBackgroundCryptoV2(credentials: credentials, restClient: restClient)",
          "99:         } else {",
          "100:             MXLog.debug(\"[MXBackgroundSyncService] init: constructing legacy crypto\")",
          "101:             crypto = MXLegacyBackgroundCrypto(credentials: credentials, resetBackgroundCryptoStore: resetBackgroundCryptoStore)",
          "102:         }",
          "",
          "[Added Lines]",
          "93:         MXLog.debug(\"[MXBackgroundSyncService] init: constructing crypto\")",
          "94:         crypto = MXBackgroundCryptoV2(credentials: credentials, restClient: restClient)",
          "",
          "---------------"
        ],
        "MatrixSDK/Contrib/Swift/MXSession.swift||MatrixSDK/Contrib/Swift/MXSession.swift": [
          "File: MatrixSDK/Contrib/Swift/MXSession.swift -> MatrixSDK/Contrib/Swift/MXSession.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         __setStore(store, success: currySuccess(completion), failure: curryFailure(completion))",
          "128:     }",
          "",
          "[Removed Lines]",
          "132:      Enable End-to-End encryption.",
          "134:      In case of enabling, the operation will complete when the session will be ready",
          "135:      to make encrytion with other users devices",
          "137:      - parameters:",
          "138:         - isEnabled: `false` stops crypto and erases crypto data.",
          "139:         - completion: A block called when the SDK has completed a catchup, or times out.",
          "140:         - response: Indicates whether the sync was successful.",
          "142:     @nonobjc func enableCrypto(_ isEnabled: Bool, completion: @escaping (_ response: MXResponse<Void>) -> Void) {",
          "143:         __enableCrypto(isEnabled, success: currySuccess(completion), failure: curryFailure(completion))",
          "144:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
          "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     __block id<MXCrypto> crypto;",
          "158: #ifdef MX_CRYPTO",
          "165:     dispatch_queue_t cryptoQueue = [MXLegacyCrypto dispatchQueueForUser:mxSession.matrixRestClient.credentials.userId];",
          "166:     dispatch_sync(cryptoQueue, ^{",
          "",
          "[Removed Lines]",
          "159:     if (MXSDKOptions.sharedInstance.enableCryptoSDK)",
          "160:     {",
          "161:         MXLogFailure(@\"[MXCrypto] createCryptoWithMatrixSession: Crypto V2 should not be created directly, use initializeCryptoWithMatrixSession instead\");",
          "162:         return nil;",
          "163:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:                                  complete:(void (^)(id<MXCrypto> crypto, NSError *error))complete",
          "181: {",
          "182: #ifdef MX_CRYPTO",
          "206:     [self initalizeLegacyCryptoWithMatrixSession:mxSession complete:complete];",
          "207: #else",
          "208:     complete(nil);",
          "",
          "[Removed Lines]",
          "184:     if (MXSDKOptions.sharedInstance.enableCryptoSDK)",
          "185:     {",
          "186:         BOOL enableCrypto = [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession || [MXCryptoV2Factory.shared hasCryptoDataFor:mxSession];",
          "187:         if (enableCrypto)",
          "188:         {",
          "189:             [MXCryptoV2Factory.shared buildCryptoWithSession:mxSession",
          "190:                                            migrationProgress:migrationProgress",
          "191:                                                      success:^(id<MXCrypto> crypto) {",
          "192:                 complete(crypto, nil); }",
          "193:                                                      failure:^(NSError *error) {",
          "194:                 complete(nil, error);",
          "195:             }];",
          "196:         }",
          "197:         else",
          "198:         {",
          "199:             dispatch_async(dispatch_get_main_queue(), ^{",
          "200:                 complete(nil, nil);",
          "201:             });",
          "202:         }",
          "203:         return;",
          "204:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m||MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m": [
          "File: MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m -> MatrixSDK/Data/EventTimeline/Room/MXRoomEventTimeline.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: - (void)destroy",
          "144: {",
          "147:     if (httpOperation)",
          "148:     {",
          "",
          "[Removed Lines]",
          "145:     [room.mxSession resetReplayAttackCheckInTimeline:_timelineId];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: - (void)resetPagination",
          "192: {",
          "196:     backState = [[MXRoomState alloc] initBackStateWith:_state];",
          "",
          "[Removed Lines]",
          "193:     [room.mxSession resetReplayAttackCheckInTimeline:_timelineId];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: {",
          "204:     NSParameterAssert(success);",
          "205:     NSAssert(_initialEventId, @\"[MXRoomEventTimeline] resetPaginationAroundInitialEventWithLimit cannot be called on live timeline\");",
          "210:     if (!store.isPermanent)",
          "",
          "[Removed Lines]",
          "207:     [room.mxSession resetReplayAttackCheckInTimeline:_timelineId];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift||MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift": [
          "File: MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift -> MatrixSDK/Data/EventTimeline/Thread/MXThreadEventTimeline.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     }",
          "101:     public func destroy() {",
          "104:         removeAllListeners()",
          "106:         currentHttpOperation?.cancel()",
          "",
          "[Removed Lines]",
          "102:         thread.session?.resetReplayAttackCheck(inTimeline: timelineId)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:     }",
          "134:     public func resetPagination() {",
          "138:         storeMessagesEnumerator = store.messagesEnumerator(forRoom: thread.roomId)",
          "",
          "[Removed Lines]",
          "135:         thread.session?.resetReplayAttackCheck(inTimeline: timelineId)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:             fatalError(\"[MXThreadEventTimeline][\\(timelineId)] resetPaginationAroundInitialEventWithLimit cannot be called on live timeline\")",
          "151:         }",
          "156:         if !store.isPermanent {",
          "157:             store.deleteAllData()",
          "",
          "[Removed Lines]",
          "153:         thread.session?.resetReplayAttackCheck(inTimeline: timelineId)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSDKOptions.h||MatrixSDK/MXSDKOptions.h": [
          "File: MatrixSDK/MXSDKOptions.h -> MatrixSDK/MXSDKOptions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: @property (nonatomic) BOOL enableRoomSharedHistoryOnInvite;",
          "214:  Flag indicating whether this account requires a re-verification after migrating to Crypto SDK",
          "",
          "[Removed Lines]",
          "207:  Use the newer rust-based `MatrixCryptoSDK` instead of the legacy `MatrixSDK`'s internal crypto module.",
          "209:  @remark YES by default",
          "211: @property (nonatomic) BOOL enableCryptoSDK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: @property (nonatomic) BOOL needsVerificationUpgrade;",
          "229:  Enable symmetric room key backups",
          "",
          "[Removed Lines]",
          "224:  The text-based identifier for the crypto module being used (e.g. native vs rust)",
          "226: @property (nonatomic, readonly) NSString *cryptoModuleId;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240: @property (nonatomic) BOOL enableNewClientInformationFeature;",
          "250: @end",
          "252: NS_ASSUME_NONNULL_END",
          "",
          "[Removed Lines]",
          "243:  Enable the calculating and display of progress during session startup, incl store migration,",
          "244:  syncing and response processing.",
          "246:  @remark YES by default",
          "248: @property (nonatomic) BOOL enableStartupProgress;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSDKOptions.m||MatrixSDK/MXSDKOptions.m": [
          "File: MatrixSDK/MXSDKOptions.m -> MatrixSDK/MXSDKOptions.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         _authEnableRefreshTokens = NO;",
          "55:         _enableThreads = NO;",
          "56:         _enableRoomSharedHistoryOnInvite = NO;",
          "58:         _needsVerificationUpgrade = NO;",
          "59:         _enableSymmetricBackup = NO;",
          "60:         _enableNewClientInformationFeature = NO;",
          "62:     }",
          "64:     return self;",
          "65: }",
          "72: - (void)setRoomListDataManagerClass:(Class)roomListDataManagerClass",
          "73: {",
          "",
          "[Removed Lines]",
          "57:         _enableCryptoSDK = YES;",
          "61:         _enableStartupProgress = YES;",
          "67: - (NSString *)cryptoModuleId",
          "68: {",
          "69:     return self.enableCryptoSDK ? @\"rust\" : @\"native\";",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h": [
          "File: MatrixSDK/MXSession.h -> MatrixSDK/MXSession.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "776: - (void)enableVoIPWithCallStack:(id<MXCallStack>)callStack;",
          "792:  Get the versions of the specification supported by the server.",
          "",
          "[Removed Lines]",
          "779:  Enable End-to-End encryption.",
          "781:  In case of enabling, the operation will complete when the session will be ready",
          "782:  to make encrytion with other users devices",
          "784:  @param enableCrypto NO stops crypto and erases crypto data.",
          "786:  @param success A block object called when the operation succeeds.",
          "787:  @param failure A block object called when the operation fails.",
          "789: - (void)enableCrypto:(BOOL)enableCrypto success:(void (^)(void))success failure:(void (^)(NSError *error))failure NS_REFINED_FOR_SWIFT;",
          "",
          "[Added Lines]",
          "779:  Disable End-to-End encryption.",
          "781: - (void)disableCrypto;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:            inTimeline:(NSString*)timeline",
          "1597:            onComplete:(void (^)(NSArray<MXEvent*> *failedEvents))onComplete;",
          "1607: #pragma mark - Global events listeners",
          "1609:  Register a global listener to events related to the current session.",
          "",
          "[Removed Lines]",
          "1600:  Reset replay attack data for the given timeline.",
          "1602:  @param timeline the id of the timeline.",
          "1604: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:         _homeserverCapabilitiesService = [[MXHomeserverCapabilitiesService alloc] initWithSession: self];",
          "313:         [_homeserverCapabilitiesService updateWithCompletion:nil];",
          "320:         [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onDidDecryptEvent:) name:kMXEventDidDecryptNotification object:nil];",
          "",
          "[Removed Lines]",
          "315:         if (MXSDKOptions.sharedInstance.enableStartupProgress)",
          "316:         {",
          "317:             _startupProgress = [[MXSessionStartupProgress alloc] init];",
          "318:         }",
          "",
          "[Added Lines]",
          "315:         _startupProgress = [[MXSessionStartupProgress alloc] init];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:         MXWeakify(self);",
          "408:             MXStrongifyAndReturnIfNil(self);",
          "419:             self->_crypto = crypto;",
          "",
          "[Removed Lines]",
          "401:         [MXLegacyCrypto initializeCryptoWithMatrixSession:self migrationProgress:^(double progress) {",
          "402:             if (MXSDKOptions.sharedInstance.enableStartupProgress)",
          "403:             {",
          "404:                 [self.startupProgress updateProgressForStage:MXSessionStartupStageStoreMigration progress:progress];",
          "405:             }",
          "407:         } complete:^(id<MXCrypto> crypto, NSError *error) {",
          "410:             if (!crypto && error)",
          "411:             {",
          "412:                 if (failure)",
          "413:                 {",
          "414:                     failure(error);",
          "415:                 }",
          "416:                 return;",
          "417:             }",
          "",
          "[Added Lines]",
          "398:         [self initializeCryptoWithProgress:^(double progress) {",
          "399:             [self.startupProgress updateProgressForStage:MXSessionStartupStageStoreMigration progress:progress];",
          "401:         } success:^(id<MXCrypto> crypto) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:                 onStoreDataReady();",
          "541:             }",
          "542:         }];",
          "544:     } failure:^(NSError *error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:         } failure:^(NSError *error) {",
          "528:             if (failure)",
          "529:             {",
          "530:                 failure(error);",
          "531:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "551:     }];",
          "552: }",
          "554: - (void)setRoomListDataManager:(id<MXRoomListDataManager>)roomListDataManager",
          "555: {",
          "556:     NSParameterAssert(_roomListDataManager == nil);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544: - (void)initializeCryptoWithProgress:(void (^)(double))progress",
          "545:                              success:(void (^)(id<MXCrypto> crypto))success",
          "546:                              failure:(void (^)(NSError *error))failure",
          "547: {",
          "548:     BOOL enableCrypto = [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession || [MXCryptoV2Factory.shared hasCryptoDataFor:self];",
          "549:     if (!enableCrypto)",
          "550:     {",
          "551:         MXLogWarning(@\"[MXSession] initializeCrypto: Not starting crypto automatically due to SDK settings\");",
          "552:         dispatch_async(dispatch_get_main_queue(), ^{",
          "553:             success(nil);",
          "554:         });",
          "555:         return;",
          "556:     }",
          "558:     [MXCryptoV2Factory.shared buildCryptoWithSession:self",
          "559:                                    migrationProgress:progress",
          "560:                                              success:^(id<MXCrypto> crypto) {",
          "562:         MXLogDebug(@\"[MXSession] initializeCrypto: Successfully initialized crypto module\");",
          "563:         success(crypto);",
          "565:     } failure:^(NSError *error) {",
          "567:         MXLogErrorDetails(@\"[MXSession] initializeCrypto: Error initialized crypto module\", error);",
          "568:         failure(error);",
          "569:     }];",
          "570: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:     BOOL isInitialSync = !self.isEventStreamInitialised;",
          "579:         dispatch_group_t dispatchGroup = dispatch_group_create();",
          "",
          "[Removed Lines]",
          "577:     [self handleCryptoSyncResponse:syncResponse onComplete:^{",
          "",
          "[Added Lines]",
          "595:     [self handleCryptoEventsInSyncResponse:syncResponse onComplete:^{",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "591:         void(^dispatch_group_leave_with_progress)(dispatch_group_t) = ^(dispatch_group_t dispatchGroup) {",
          "592:             dispatch_group_leave(dispatchGroup);",
          "595:             {",
          "596:                 progress([self.startupProgress overallProgressForStep:completedRooms totalCount:totalRooms progress:1]);",
          "597:                 completedRooms += 1;",
          "",
          "[Removed Lines]",
          "594:             if (MXSDKOptions.sharedInstance.enableStartupProgress && progress)",
          "",
          "[Added Lines]",
          "612:             if (progress)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "780:         dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^{",
          "807:             MXLogDebug(@\"[MXSession] Next sync token: %@\", syncResponse.nextBatch);",
          "",
          "[Removed Lines]",
          "784:             if ([self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "785:             {",
          "787:                 if (syncResponse.deviceLists)",
          "788:                 {",
          "789:                     [(MXLegacyCrypto *)self.crypto handleDeviceListsChanges:syncResponse.deviceLists];",
          "790:                 }",
          "793:                 if (syncResponse.deviceOneTimeKeysCount)",
          "794:                 {",
          "795:                     [(MXLegacyCrypto *)self.crypto handleDeviceOneTimeKeysCount:syncResponse.deviceOneTimeKeysCount];",
          "796:                 }",
          "798:                 [(MXLegacyCrypto *)self.crypto handleDeviceUnusedFallbackKeys:syncResponse.unusedFallbackKeys];",
          "801:                 [(MXLegacyCrypto *)self.crypto onSyncCompleted:self.store.eventStreamToken",
          "802:                                                  nextSyncToken:syncResponse.nextBatch",
          "803:                                                     catchingUp:self.catchingUp];",
          "804:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1357: - (MXHTTPOperation*)logout:(void (^)(void))success",
          "1358:                    failure:(void (^)(NSError *error))failure",
          "1359: {",
          "1379: }",
          "1381: - (MXHTTPOperation*)deactivateAccountWithAuthParameters:(NSDictionary*)authParameters",
          "",
          "[Removed Lines]",
          "1361:     MXHTTPOperation *operation = [[MXHTTPOperation alloc] init];",
          "1366:     MXWeakify(self);",
          "1367:     [self enableCrypto:NO success:^{",
          "1368:         MXStrongifyAndReturnIfNil(self);",
          "1370:         if (!operation.isCancelled)",
          "1371:         {",
          "1372:             MXHTTPOperation *operation2 = [self.matrixRestClient logout:success failure:failure];",
          "1373:             [operation mutateTo:operation2];",
          "1374:         }",
          "1376:     } failure:nil];",
          "1378:     return operation;",
          "",
          "[Added Lines]",
          "1357:     [self disableCrypto];",
          "1359:     return [self.matrixRestClient logout:success failure:failure];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1458:                         setPresence:(NSString*)setPresence",
          "1459: {",
          "1462:     if (shoulReportStartupProgress)",
          "1463:     {",
          "",
          "[Removed Lines]",
          "1461:     BOOL shoulReportStartupProgress = MXSDKOptions.sharedInstance.enableStartupProgress && !self.isEventStreamInitialised;",
          "",
          "[Added Lines]",
          "1442:     BOOL shoulReportStartupProgress = !self.isEventStreamInitialised;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1994:             }",
          "1995:         }",
          "1998:         self.store.userAccountData = _accountData.accountData;",
          "",
          "[Removed Lines]",
          "1997:         [self validateAccountData];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2007:     }",
          "2008: }",
          "2031: - (void)updateSummaryDirectUserIdForRooms:(NSSet<NSString*> *)roomIds",
          "2032: {",
          "",
          "[Removed Lines]",
          "2011:  Private method to validate local account data and report any potential state corruption",
          "2013: - (void)validateAccountData",
          "2014: {",
          "2015:     if (![self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "2016:     {",
          "2017:         return;",
          "2018:     }",
          "2022:     NSInteger keysCount = ((MXLegacyCrypto *)self.crypto).secretStorage.numberOfValidKeys;",
          "2023:     if (keysCount > 1)",
          "2024:     {",
          "2025:         MXLogErrorDetails(@\"[MXSession] validateAccountData: Detected multiple valid SSSS keys, should only have one at most\", @{",
          "2026:             @\"count\": @(keysCount)",
          "2027:         });",
          "2028:     }",
          "2029: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2052:     }",
          "2053: }",
          "2060: {",
          "2086:     {",
          "2087:         onComplete();",
          "2088:         return;",
          "2089:     }",
          "2144: }",
          "",
          "[Removed Lines]",
          "2058: - (void)handleCryptoSyncResponse:(MXSyncResponse *)syncResponse",
          "2059:                       onComplete:(void (^)(void))onComplete",
          "2061:     if (!self.crypto || [self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "2062:     {",
          "2064:         [self handleToDeviceEvents:syncResponse.toDevice.events onComplete:onComplete];",
          "2065:     }",
          "2066:     else",
          "2067:     {",
          "2069:         [self.crypto handleSyncResponse:syncResponse onComplete:onComplete];",
          "2070:     }",
          "2071: }",
          "2073: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events onComplete:(void (^)(void))onComplete",
          "2074: {",
          "2075:     NSMutableArray *supportedEvents = [NSMutableArray arrayWithCapacity:events.count];",
          "2076:     for (MXEvent *event in events)",
          "2077:     {",
          "2078:         if ([MXTools isSupportedToDeviceEvent:event])",
          "2079:         {",
          "2080:             MXLogDebug(@\"[MXSession] handleToDeviceEvents: Processing new to-device event msgid: %@\", event.content[kMXToDeviceMessageId])",
          "2081:             [supportedEvents addObject:event];",
          "2082:         }",
          "2083:     }",
          "2085:     if (supportedEvents.count == 0)",
          "2091:     [self decryptEvents:supportedEvents inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
          "2092:         dispatch_group_t dispatchGroup = dispatch_group_create();",
          "2094:         for (MXEvent *event in supportedEvents)",
          "2095:         {",
          "2096:             if (!event.decryptionError)",
          "2097:             {",
          "2098:                 MXLogDebug(@\"[MXSession] handleToDeviceEvents: Received new to-device event `%@` from `%@` msgid: %@\", event.type, event.sender, event.wireContent[kMXToDeviceMessageId])",
          "2099:                 dispatch_group_enter(dispatchGroup);",
          "2100:                 [self handleToDeviceEvent:event onComplete:^{",
          "2101:                     dispatch_group_leave(dispatchGroup);",
          "2102:                 }];",
          "2103:             }",
          "2104:             else",
          "2105:             {",
          "2106:                 MXLogDebug(@\"[MXSession] handleToDeviceEvents: Warning: Unable to decrypt to-device event: %@\\nError: %@\", event.wireContent[kMXMessageBodyKey], event.decryptionError);",
          "2107:             }",
          "2108:         }",
          "2110:         dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^{",
          "2111:             onComplete();",
          "2112:         });",
          "2113:     }];",
          "2114: }",
          "2116: - (void)handleToDeviceEvent:(MXEvent *)event onComplete:(void (^)(void))onComplete",
          "2117: {",
          "2118:     void (^onHandleToDeviceEventDone)(void) = ^(void) {",
          "2119:         [[NSNotificationCenter defaultCenter] postNotificationName:kMXSessionOnToDeviceEventNotification",
          "2120:                                                             object:self",
          "2121:                                                           userInfo:@{",
          "2122:                                                               kMXSessionNotificationEventKey: event",
          "2123:                                                           }];",
          "2125:         onComplete();",
          "2126:     };",
          "2128:     switch (event.eventType)",
          "2129:     {",
          "2130:         case MXEventTypeRoomKey:",
          "2131:         {",
          "2132:             if ([_crypto isKindOfClass:[MXLegacyCrypto class]])",
          "2133:             {",
          "2134:                 [(MXLegacyCrypto *)_crypto handleRoomKeyEvent:event onComplete:onHandleToDeviceEventDone];",
          "2135:             }",
          "2136:             break;",
          "2137:         }",
          "2139:         default:",
          "2140:             onHandleToDeviceEventDone();",
          "2141:             break;",
          "2142:     }",
          "2143:     [_eventStreamService dispatchOnLiveToDeviceWithEvent:event];",
          "",
          "[Added Lines]",
          "2014: - (void)handleCryptoEventsInSyncResponse:(MXSyncResponse *)syncResponse onComplete:(void (^)(void))onComplete",
          "2016:     if (!self.crypto)",
          "2022:     [self.crypto handleSyncResponse:syncResponse onComplete:onComplete];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2221:     [asyncTaskQueue asyncWithExecute:^(void (^ taskCompleted)(void)) {",
          "2222:         [syncResponseStoreManager mergedSyncResponseFromSyncResponseIds:outdatedSyncResponseIds",
          "2223:                                                              completion:^(MXCachedSyncResponse * _Nullable outdatedCachedSyncResponse) {",
          "2233:                 taskCompleted();",
          "2235:         }];",
          "2236:     }];",
          "",
          "[Removed Lines]",
          "2224:             if (outdatedCachedSyncResponse)",
          "2225:             {",
          "2226:                 [self handleOutdatedSyncResponse:outdatedCachedSyncResponse.syncResponse",
          "2227:                                       completion:^{",
          "2228:                     taskCompleted();",
          "2229:                 }];",
          "2230:             }",
          "2231:             else",
          "2232:             {",
          "2234:             }",
          "",
          "[Added Lines]",
          "2104:             dispatch_async(dispatch_get_main_queue(), ^{",
          "2106:             });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2280:     }];",
          "2281: }",
          "2303: #pragma mark - Options",
          "2304: - (void)enableVoIPWithCallStack:(id<MXCallStack>)callStack",
          "2305: {",
          "",
          "[Removed Lines]",
          "2283: - (void)handleOutdatedSyncResponse:(MXSyncResponse *)syncResponse",
          "2284:                         completion:(void (^)(void))completion",
          "2285: {",
          "2286:     MXLogDebug(@\"[MXSession] handleOutdatedSyncResponse: %tu joined rooms, %tu invited rooms, %tu left rooms, %tu toDevice events.\", syncResponse.rooms.join.count, syncResponse.rooms.invite.count, syncResponse.rooms.leave.count, syncResponse.toDevice.events.count);",
          "2288:     if (!self.crypto || [self.crypto isKindOfClass:[MXLegacyCrypto class]])",
          "2289:     {",
          "2291:         [self handleToDeviceEvents:syncResponse.toDevice.events onComplete:completion];",
          "2292:     }",
          "2293:     else",
          "2294:     {",
          "2297:         dispatch_async(dispatch_get_main_queue(), ^{",
          "2298:             completion();",
          "2299:         });",
          "2300:     }",
          "2301: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2309:     _callManager = [[MXCallManager alloc] initWithMatrixSession:self andCallStack:callStack];",
          "2310: }",
          "2313: {",
          "2346:     {",
          "2348:         [_crypto close:YES];",
          "2349:         _crypto = nil;",
          "2362:     }",
          "2363: }",
          "",
          "[Removed Lines]",
          "2312: - (void)enableCrypto:(BOOL)enableCrypto success:(void (^)(void))success failure:(void (^)(NSError *))failure",
          "2314:     MXLogDebug(@\"[MXSesion] enableCrypto: %@\", @(enableCrypto));",
          "2316:     if (enableCrypto && !_crypto)",
          "2317:     {",
          "2318:         NSError *error;",
          "2319:         _crypto = [MXLegacyCrypto createCryptoWithMatrixSession:self error:&error];",
          "2320:         if (!_crypto && error)",
          "2321:         {",
          "2322:             if (failure)",
          "2323:             {",
          "2324:                 failure(error);",
          "2325:             }",
          "2326:             return;",
          "2327:         }",
          "2329:         if (_state == MXSessionStateRunning)",
          "2330:         {",
          "2331:             [self startCrypto:success failure:failure];",
          "2332:         }",
          "2333:         else",
          "2334:         {",
          "2335:             MXLogDebug(@\"[MXSesion] enableCrypto: crypto module will be start later (MXSession.state: %@)\", [MXTools readableSessionState:_state]);",
          "2337:             if (success)",
          "2338:             {",
          "2339:                 dispatch_async(dispatch_get_main_queue(), ^{",
          "2340:                     success();",
          "2341:                 });",
          "2342:             }",
          "2343:         }",
          "2344:     }",
          "2345:     else if (!enableCrypto && _crypto)",
          "2351:         if (success)",
          "2352:         {",
          "2353:             success();",
          "2354:         }",
          "2355:     }",
          "2356:     else",
          "2357:     {",
          "2358:         if (success)",
          "2359:         {",
          "2360:             success();",
          "2361:         }",
          "",
          "[Added Lines]",
          "2164: - (void)disableCrypto",
          "2166:     MXLogDebug(@\"[MXSesion] disableCrypto\");",
          "2168:     if (_crypto)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3415:     __block NSInteger completedRooms = 0;",
          "3416:     void(^dispatch_group_leave_with_progress)(dispatch_group_t) = ^(dispatch_group_t dispatchGroup) {",
          "3417:         dispatch_group_leave(dispatchGroup);",
          "3419:         {",
          "3420:             progress([self.startupProgress overallProgressForStep:completedRooms totalCount:self.rooms.count progress:1]);",
          "3421:             completedRooms += 1;",
          "",
          "[Removed Lines]",
          "3418:         if (MXSDKOptions.sharedInstance.enableStartupProgress && progress)",
          "",
          "[Added Lines]",
          "3229:         if (progress)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5056:     }",
          "5057: }",
          "5068: - (void)onDidDecryptEvent:(NSNotification *)notification",
          "5069: {",
          "",
          "[Removed Lines]",
          "5059: - (void)resetReplayAttackCheckInTimeline:(NSString*)timeline",
          "5060: {",
          "5061:     if ([_crypto isKindOfClass:[MXLegacyCrypto class]])",
          "5062:     {",
          "5063:         [(MXLegacyCrypto *)_crypto resetReplayAttackCheckInTimeline:timeline];",
          "5064:     }",
          "5065: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoKeyVerificationTests.m||MatrixSDKTests/MXCryptoKeyVerificationTests.m": [
          "File: MatrixSDKTests/MXCryptoKeyVerificationTests.m -> MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:                                                                                             success:^(id<MXKeyVerificationRequest> requestFromAliceDevice1POV)",
          "456:                  {",
          "464:                      MXKeyVerificationByToDeviceRequest *toDeviceRequestFromAliceDevice1POV = (MXKeyVerificationByToDeviceRequest*)requestFromAliceDevice1POV;",
          "465:                      XCTAssertNotNil(toDeviceRequestFromAliceDevice1POV.requestedOtherDeviceIds);",
          "466:                      NSSet *expectedRequestedDevices = [NSSet setWithArray:@[aliceSession2DeviceId, aliceSession3DeviceId]];",
          "",
          "[Removed Lines]",
          "458:                      if (MXSDKOptions.sharedInstance.enableCryptoSDK)",
          "459:                      {",
          "460:                         XCTFail(@\"This test uses `MXKeyVerificationByToDeviceRequest` which is only compatible with Crypto V1. Replace assertions to make it compatible with V2 as well\");",
          "461:                         [expectation fulfill];",
          "462:                         return;",
          "463:                      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
          "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #pragma mark - MXCrypto",
          "140: - (void)testMXSDKOptionsEnableCryptoWhenOpeningMXSession",
          "141: {",
          "142:     [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = YES;",
          "",
          "[Removed Lines]",
          "108: - (void)testEnableCrypto",
          "109: {",
          "110:     [matrixSDKTestsData doMXSessionTestWithBob:self readyToTest:^(MXSession *mxSession, XCTestExpectation *expectation) {",
          "112:         XCTAssertNil(mxSession.crypto, @\"Crypto is disabled by default\");",
          "114:         XCTAssertFalse([mxSession.legacyCrypto.store.class hasDataForCredentials:mxSession.matrixRestClient.credentials]);",
          "116:         [mxSession enableCrypto:YES success:^{",
          "118:             XCTAssert(mxSession.crypto);",
          "119:             XCTAssert([mxSession.legacyCrypto.store.class hasDataForCredentials:mxSession.matrixRestClient.credentials]);",
          "121:             [mxSession enableCrypto:NO success:^{",
          "123:                 XCTAssertNil(mxSession.crypto);",
          "124:                 XCTAssertFalse([mxSession.legacyCrypto.store.class hasDataForCredentials:mxSession.matrixRestClient.credentials], @\"Crypto data must have been trashed\");",
          "126:                 [expectation fulfill];",
          "128:             } failure:^(NSError *error) {",
          "129:                 XCTFail(@\"The request should not fail - NSError: %@\", error);",
          "130:                 [expectation fulfill];",
          "131:             }];",
          "133:         } failure:^(NSError *error) {",
          "134:             XCTFail(@\"The request should not fail - NSError: %@\", error);",
          "135:             [expectation fulfill];",
          "136:         }];",
          "137:     }];",
          "138: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         XCTAssert(mxSession.crypto);",
          "237:     }];",
          "238: }",
          "",
          "[Removed Lines]",
          "152:         [mxSession enableCrypto:NO success:^{",
          "154:             XCTAssertNil(mxSession.crypto);",
          "156:             [expectation fulfill];",
          "158:         } failure:^(NSError *error) {",
          "159:             XCTFail(@\"The request should not fail - NSError: %@\", error);",
          "160:             [expectation fulfill];",
          "161:         }];",
          "163:     }];",
          "164: }",
          "166: - (void)testCryptoNoDeviceId",
          "167: {",
          "168:     [matrixSDKTestsData doMXSessionTestWithBob:self readyToTest:^(MXSession *mxSession, XCTestExpectation *expectation) {",
          "170:         mxSession.matrixRestClient.credentials.deviceId = nil;",
          "172:         [mxSession enableCrypto:YES success:^{",
          "174:             XCTAssertGreaterThan(mxSession.legacyCrypto.store.deviceId.length, 0, \"If the hs did not provide a device id, the crypto module must create one\");",
          "175:             [expectation fulfill];",
          "177:         } failure:^(NSError *error) {",
          "178:             XCTFail(@\"The request should not fail - NSError: %@\", error);",
          "179:             [expectation fulfill];",
          "180:         }];",
          "182:     }];",
          "183: }",
          "185: - (void)testCryptoPersistenceInStore",
          "186: {",
          "187:     [matrixSDKTestsData doMXSessionTestWithBob:self readyToTest:^(MXSession *mxSession, XCTestExpectation *expectation) {",
          "189:         XCTAssertNil(mxSession.crypto, @\"Crypto is disabled by default\");",
          "191:         __block MXSession *mxSession2 = mxSession;",
          "193:         [mxSession enableCrypto:YES success:^{",
          "195:             XCTAssert(mxSession2.crypto);",
          "197:             NSString *deviceCurve25519Key = mxSession2.legacyCrypto.olmDevice.deviceCurve25519Key;",
          "198:             NSString *deviceEd25519Key = mxSession2.legacyCrypto.olmDevice.deviceEd25519Key;",
          "200:             NSArray<MXDeviceInfo *> *myUserDevices = [mxSession2.legacyCrypto.deviceList storedDevicesForUser:mxSession.myUserId];",
          "201:             XCTAssertEqual(myUserDevices.count, 1);",
          "203:             MXRestClient *bobRestClient = mxSession2.matrixRestClient;",
          "204:             [mxSession2 close];",
          "205:             mxSession2 = nil;",
          "208:             MXFileStore *store = [[MXFileStore alloc] init];",
          "210:             mxSession2 = [[MXSession alloc] initWithMatrixRestClient:bobRestClient];",
          "211:             [matrixSDKTestsData retain:mxSession2];",
          "213:             [mxSession2 setStore:store success:^{",
          "215:                 XCTAssert(mxSession2.crypto, @\"MXSession must recall that it has crypto engaged\");",
          "217:                 XCTAssertEqualObjects(deviceCurve25519Key, mxSession2.legacyCrypto.olmDevice.deviceCurve25519Key);",
          "218:                 XCTAssertEqualObjects(deviceEd25519Key, mxSession2.legacyCrypto.olmDevice.deviceEd25519Key);",
          "220:                 NSArray<MXDeviceInfo *> *myUserDevices2 = [mxSession2.legacyCrypto.deviceList storedDevicesForUser:mxSession2.myUser.userId];",
          "221:                 XCTAssertEqual(myUserDevices2.count, 1);",
          "223:                 XCTAssertEqualObjects(myUserDevices[0].deviceId, myUserDevices2[0].deviceId);",
          "225:                 [expectation fulfill];",
          "227:             } failure:^(NSError *error) {",
          "228:                 XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "229:                 [expectation fulfill];",
          "230:             }];",
          "232:         } failure:^(NSError *error) {",
          "233:             XCTFail(@\"The request should not fail - NSError: %@\", error);",
          "234:             [expectation fulfill];",
          "235:         }];",
          "",
          "[Added Lines]",
          "120:         [mxSession disableCrypto];",
          "122:         XCTAssertNil(mxSession.crypto);",
          "124:         [expectation fulfill];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2346:                                                 [expectation fulfill];",
          "2347:                                             }];",
          "2350:                                             XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2351:                                             [expectation fulfill];",
          "2352:                                         }];",
          "2354:                                     }];",
          "2359:                                 }];",
          "2361:                             } failure:^(NSError *error) {",
          "",
          "[Removed Lines]",
          "2321:                                 [bobSession enableCrypto:NO success:^{",
          "2324:                                     [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = YES;",
          "2325:                                     [matrixSDKTestsData relogUserSession:self session:bobSession withPassword:MXTESTS_BOB_PWD onComplete:^(MXSession *bobSession2) {",
          "2327:                                         [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2329:                                         [bobSession2 joinRoom:roomFromAlicePOV.roomId viaServers:nil success:^(MXRoom *roomFromBobPOV2) {",
          "2332:                                             [roomFromBobPOV2 liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "2333:                                                 [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomMessage, kMXEventTypeStringRoomEncrypted] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "2335:                                                     XCTAssert(event.clearEvent, @\"Bob must be able to decrypt this new message on his new device\");",
          "2337:                                                     XCTAssertEqual(0, [self checkEncryptedEvent:event roomId:roomFromBobPOV2.roomId clearMessage:message2FromAlice senderSession:aliceSession]);",
          "2339:                                                     [expectation fulfill];",
          "2341:                                                 }];",
          "2342:                                             }];",
          "2344:                                             [roomFromAlicePOV sendTextMessage:message2FromAlice threadId:nil success:nil failure:^(NSError *error) {",
          "2345:                                                 XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2349:                                         } failure:^(NSError *error) {",
          "2356:                                 } failure:^(NSError *error) {",
          "2357:                                     XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2358:                                     [expectation fulfill];",
          "",
          "[Added Lines]",
          "2210:                                 [bobSession disableCrypto];",
          "2213:                                 [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = YES;",
          "2214:                                 [matrixSDKTestsData relogUserSession:self session:bobSession withPassword:MXTESTS_BOB_PWD onComplete:^(MXSession *bobSession2) {",
          "2216:                                     [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2218:                                     [bobSession2 joinRoom:roomFromAlicePOV.roomId viaServers:nil success:^(MXRoom *roomFromBobPOV2) {",
          "2221:                                         [roomFromBobPOV2 liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "2222:                                             [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomMessage, kMXEventTypeStringRoomEncrypted] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "2224:                                                 XCTAssert(event.clearEvent, @\"Bob must be able to decrypt this new message on his new device\");",
          "2226:                                                 XCTAssertEqual(0, [self checkEncryptedEvent:event roomId:roomFromBobPOV2.roomId clearMessage:message2FromAlice senderSession:aliceSession]);",
          "2231:                                         }];",
          "2233:                                         [roomFromAlicePOV sendTextMessage:message2FromAlice threadId:nil success:nil failure:^(NSError *error) {",
          "2238:                                     } failure:^(NSError *error) {",
          "2239:                                         XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2240:                                         [expectation fulfill];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2529:                                 }];",
          "2539:                                 [expectation fulfill];",
          "2540:                             }];",
          "2541:                         }];",
          "2545:                     }];",
          "2547:                 } failure:^(NSError *error) {",
          "",
          "[Removed Lines]",
          "2500:                     [bobSession enableCrypto:NO success:^{",
          "2503:                         [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = YES;",
          "2504:                         [matrixSDKTestsData relogUserSession:self session:bobSession withPassword:MXTESTS_BOB_PWD onComplete:^(MXSession *newBobSession) {",
          "2506:                             [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2508:                             MXRoom *roomFromNewBobPOV = [newBobSession roomWithRoomId:roomFromAlicePOV.roomId];",
          "2510:                             NSDictionary<NSString*, MXDeviceInfo*> *bobDevices = [aliceSession.legacyCrypto.store devicesForUser:newBobSession.myUser.userId];",
          "2511:                             XCTAssertEqual(bobDevices.count, 0, @\"Alice should not have needed Bob's keys at this time\");",
          "2514:                             [roomFromAlicePOV enableEncryptionWithAlgorithm:kMXCryptoMegolmAlgorithm success:^{",
          "2516:                                 [roomFromNewBobPOV liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "2517:                                     [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomMessage, kMXEventTypeStringRoomEncrypted] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "2519:                                         XCTAssert(event.clearEvent, @\"Bob must be able to decrypt message from his new device after the crypto is ON\");",
          "2521:                                         XCTAssertEqual(0, [self checkEncryptedEvent:event roomId:roomFromNewBobPOV.roomId clearMessage:encryptedMessageFromAlice senderSession:aliceSession]);",
          "2523:                                         NSDictionary<NSString*, MXDeviceInfo*> *bobDevices = [aliceSession.legacyCrypto.store devicesForUser:newBobSession.myUser.userId];",
          "2524:                                         XCTAssertEqual(bobDevices.count, 1, @\"Alice must now know Bob's device keys\");",
          "2526:                                         [expectation fulfill];",
          "2528:                                     }];",
          "2532:                                 [roomFromAlicePOV sendTextMessage:encryptedMessageFromAlice threadId:nil success:nil failure:^(NSError *error) {",
          "2533:                                     XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2534:                                     [expectation fulfill];",
          "2535:                                 }];",
          "2537:                             } failure:^(NSError *error) {",
          "2538:                                 XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2542:                     } failure:^(NSError *error) {",
          "2543:                         XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2544:                         [expectation fulfill];",
          "",
          "[Added Lines]",
          "2384:                     [bobSession disableCrypto];",
          "2387:                     [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = YES;",
          "2388:                     [matrixSDKTestsData relogUserSession:self session:bobSession withPassword:MXTESTS_BOB_PWD onComplete:^(MXSession *newBobSession) {",
          "2390:                         [MXSDKOptions sharedInstance].enableCryptoWhenStartingMXSession = NO;",
          "2392:                         MXRoom *roomFromNewBobPOV = [newBobSession roomWithRoomId:roomFromAlicePOV.roomId];",
          "2394:                         NSDictionary<NSString*, MXDeviceInfo*> *bobDevices = [aliceSession.legacyCrypto.store devicesForUser:newBobSession.myUser.userId];",
          "2395:                         XCTAssertEqual(bobDevices.count, 0, @\"Alice should not have needed Bob's keys at this time\");",
          "2398:                         [roomFromAlicePOV enableEncryptionWithAlgorithm:kMXCryptoMegolmAlgorithm success:^{",
          "2400:                             [roomFromNewBobPOV liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "2401:                                 [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomMessage, kMXEventTypeStringRoomEncrypted] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "2403:                                     XCTAssert(event.clearEvent, @\"Bob must be able to decrypt message from his new device after the crypto is ON\");",
          "2405:                                     XCTAssertEqual(0, [self checkEncryptedEvent:event roomId:roomFromNewBobPOV.roomId clearMessage:encryptedMessageFromAlice senderSession:aliceSession]);",
          "2407:                                     NSDictionary<NSString*, MXDeviceInfo*> *bobDevices = [aliceSession.legacyCrypto.store devicesForUser:newBobSession.myUser.userId];",
          "2408:                                     XCTAssertEqual(bobDevices.count, 1, @\"Alice must now know Bob's device keys\");",
          "2410:                                     [expectation fulfill];",
          "2413:                             }];",
          "2416:                             [roomFromAlicePOV sendTextMessage:encryptedMessageFromAlice threadId:nil success:nil failure:^(NSError *error) {",
          "2417:                                 XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "2421:                         } failure:^(NSError *error) {",
          "2422:                             XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2423:                             [expectation fulfill];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2686: #pragma mark - import/export",
          "2769: - (void)testImportRoomKeysWithWrongPassword",
          "2770: {",
          "2771:     [matrixSDKTestsE2EData doE2ETestWithAliceAndBobInARoomWithCryptedMessages:self cryptedBob:YES readyToTest:^(MXSession *aliceSession, MXSession *bobSession, NSString *roomId, XCTestExpectation *expectation) {",
          "",
          "[Removed Lines]",
          "2689: - (void)testExportImportRoomKeysWithPassword",
          "2690: {",
          "2691:     [matrixSDKTestsE2EData doE2ETestWithAliceAndBobInARoomWithCryptedMessages:self cryptedBob:YES readyToTest:^(MXSession *aliceSession, MXSession *bobSession, NSString *roomId, XCTestExpectation *expectation) {",
          "2693:         NSString *password = @\"motdepasse\";",
          "2695:         [bobSession.crypto exportRoomKeysWithPassword:password success:^(NSData *keyFile) {",
          "2698:             [bobSession enableCrypto:NO success:^{",
          "2700:                 XCTAssertFalse([bobSession.legacyCrypto.store.class hasDataForCredentials:bobSession.matrixRestClient.credentials], @\"Bob's keys should have been deleted\");",
          "2702:                 [bobSession enableCrypto:YES success:^{",
          "2704:                     MXRoom *roomFromBobPOV = [bobSession roomWithRoomId:roomId];",
          "2707:                     NSMutableArray *encryptedEvents = [NSMutableArray array];",
          "2709:                     [roomFromBobPOV liveTimeline:^(id<MXEventTimeline> liveTimeline) {",
          "2710:                         [liveTimeline listenToEventsOfTypes:@[kMXEventTypeStringRoomEncrypted] onEvent:^(MXEvent *event, MXTimelineDirection direction, MXRoomState *roomState) {",
          "2712:                             [encryptedEvents addObject:event];",
          "2713:                         }];",
          "2716:                         [liveTimeline resetPagination];",
          "2717:                         [liveTimeline paginate:100 direction:MXTimelineDirectionBackwards onlyFromStore:NO complete:^{",
          "2719:                             XCTAssertEqual(encryptedEvents.count, 5, @\"There are 5 encrypted messages in the room. They cannot be decrypted at this step in the test\");",
          "2723:                             observer = [[NSNotificationCenter defaultCenter] addObserverForName:kMXEventDidDecryptNotification object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {",
          "2725:                                 [encryptedEvents removeObject:note.object];",
          "2726:                             }];",
          "2729:                             [bobSession.crypto importRoomKeys:keyFile withPassword:password success:^(NSUInteger total, NSUInteger imported) {",
          "2731:                                 XCTAssertGreaterThan(total, 0);",
          "2732:                                 XCTAssertEqual(total, imported);",
          "2734:                                 XCTAssertEqual(encryptedEvents.count, 0, @\"All events should have been decrypted after the keys import\");",
          "2736:                                 [expectation fulfill];",
          "2738:                             } failure:^(NSError *error) {",
          "2740:                                 XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2741:                                 [expectation fulfill];",
          "2742:                             }];",
          "2744:                         } failure:^(NSError *error) {",
          "2745:                             XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2746:                             [expectation fulfill];",
          "2747:                         }];",
          "2748:                     }];",
          "2750:                 } failure:^(NSError *error) {",
          "2751:                     XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2752:                     [expectation fulfill];",
          "2753:                 }];",
          "2756:             } failure:^(NSError *error) {",
          "2757:                 XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2758:                 [expectation fulfill];",
          "2759:             }];",
          "2761:         } failure:^(NSError *error) {",
          "2762:             XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2763:             [expectation fulfill];",
          "2764:         }];",
          "2766:     }];",
          "2767: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MatrixSDKTestsData.m||MatrixSDKTests/MatrixSDKTestsData.m": [
          "File: MatrixSDKTests/MatrixSDKTestsData.m -> MatrixSDKTests/MatrixSDKTestsData.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: {",
          "902:     NSString *userId = session.matrixRestClient.credentials.userId;",
          "928:         } failure:^(NSError *error) {",
          "930:         }];",
          "931:     } failure:^(NSError *error) {",
          "933:     }];",
          "934: }",
          "",
          "[Removed Lines]",
          "904:     [session enableCrypto:NO success:^{",
          "906:         [session close];",
          "908:         MXRestClient *mxRestClient = [[MXRestClient alloc] initWithHomeServer:kMXTestsHomeServerURL",
          "909:                                             andOnUnrecognizedCertificateBlock:nil];",
          "910:         [self retain:mxRestClient];",
          "912:         [mxRestClient loginWithLoginType:kMXLoginFlowTypePassword username:userId password:password success:^(MXCredentials *credentials) {",
          "914:             MXRestClient *mxRestClient2 = [[MXRestClient alloc] initWithCredentials:credentials andOnUnrecognizedCertificateBlock:nil];",
          "915:             [self retain:mxRestClient2];",
          "917:             MXSession *newSession = [[MXSession alloc] initWithMatrixRestClient:mxRestClient2];",
          "918:             [self retain:newSession];",
          "920:             [newSession start:^{",
          "922:                 onComplete(newSession);",
          "924:             } failure:^(NSError *error) {",
          "925:                 [self breakTestCase:testCase reason:@\"Cannot set up intial test conditions - error: %@\", error];",
          "926:             }];",
          "929:             [self breakTestCase:testCase reason:@\"Cannot relog %@. Error: %@\", userId, error];",
          "932:         [self breakTestCase:testCase reason:@\"Cannot logout %@. Error: %@\", userId, error];",
          "",
          "[Added Lines]",
          "904:     [session disableCrypto];",
          "906:     [session close];",
          "908:     MXRestClient *mxRestClient = [[MXRestClient alloc] initWithHomeServer:kMXTestsHomeServerURL",
          "909:                                         andOnUnrecognizedCertificateBlock:nil];",
          "910:     [self retain:mxRestClient];",
          "912:     [mxRestClient loginWithLoginType:kMXLoginFlowTypePassword username:userId password:password success:^(MXCredentials *credentials) {",
          "914:         MXRestClient *mxRestClient2 = [[MXRestClient alloc] initWithCredentials:credentials andOnUnrecognizedCertificateBlock:nil];",
          "915:         [self retain:mxRestClient2];",
          "917:         MXSession *newSession = [[MXSession alloc] initWithMatrixRestClient:mxRestClient2];",
          "918:         [self retain:newSession];",
          "920:         [newSession start:^{",
          "922:             onComplete(newSession);",
          "925:             [self breakTestCase:testCase reason:@\"Cannot set up intial test conditions - error: %@\", error];",
          "929:         [self breakTestCase:testCase reason:@\"Cannot relog %@. Error: %@\", userId, error];",
          "",
          "---------------"
        ],
        "changelog.d/pr-1772.change||changelog.d/pr-1772.change": [
          "File: changelog.d/pr-1772.change -> changelog.d/pr-1772.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Crypto: Deprecate MXLegacyCrypto",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02d33181857679d71fe4a3c50d04b4a4d27a4987",
      "candidate_info": {
        "commit_hash": "02d33181857679d71fe4a3c50d04b4a4d27a4987",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/02d33181857679d71fe4a3c50d04b4a4d27a4987",
        "files": [
          "MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Background/MXBackgroundCryptoStore.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift",
          "MatrixSDK/Crypto/Data/MXOlmSession.h",
          "MatrixSDK/Crypto/Data/MXOlmSession.m",
          "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift",
          "MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift",
          "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
          "MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift",
          "MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift",
          "MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/TestPlans/CryptoTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/pr-1681.change"
        ],
        "message": "Create Crypto V2 Migration Data",
        "before_after_code_files": [
          "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Background/MXBackgroundCryptoStore.m||MatrixSDK/Background/MXBackgroundCryptoStore.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift",
          "MatrixSDK/Crypto/Data/MXOlmSession.h||MatrixSDK/Crypto/Data/MXOlmSession.h",
          "MatrixSDK/Crypto/Data/MXOlmSession.m||MatrixSDK/Crypto/Data/MXOlmSession.m",
          "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m||MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m",
          "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift||MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift",
          "MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift||MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift",
          "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
          "MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift||MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift",
          "MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift||MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift",
          "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/TestPlans/CryptoTests.xctestplan||MatrixSDKTests/TestPlans/CryptoTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/pr-1681.change||changelog.d/pr-1681.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
            "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ],
          "candidate": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
            "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
          "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1874:   ED51943A28462D130006EEC6 /* MXRoomStateUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED51943828462D130006EEC6 /* MXRoomStateUnitTests.swift */; };",
          "1875:   ED51943C284630090006EEC6 /* MXRestClientStub.m in Sources */ = {isa = PBXBuildFile; fileRef = ED51943B284630090006EEC6 /* MXRestClientStub.m */; };",
          "1876:   ED51943D284630090006EEC6 /* MXRestClientStub.m in Sources */ = {isa = PBXBuildFile; fileRef = ED51943B284630090006EEC6 /* MXRestClientStub.m */; };",
          "1877:   ED5AE8C52816C8CF00105072 /* MXCoreDataRoomSummaryStore.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = ED5AE8C22816C8CF00105072 /* MXCoreDataRoomSummaryStore.xcdatamodeld */; };",
          "1878:   ED5AE8C62816C8CF00105072 /* MXCoreDataRoomSummaryStore.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = ED5AE8C22816C8CF00105072 /* MXCoreDataRoomSummaryStore.xcdatamodeld */; };",
          "1879:   ED5C753C28B3E80300D24E85 /* MXLogger.h in Headers */ = {isa = PBXBuildFile; fileRef = ED5C753528B3E80300D24E85 /* MXLogger.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1877:   ED558068296F0361003443E3 /* MXCryptoMigrationStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED558067296F0361003443E3 /* MXCryptoMigrationStore.swift */; };",
          "1878:   ED558069296F0361003443E3 /* MXCryptoMigrationStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED558067296F0361003443E3 /* MXCryptoMigrationStore.swift */; };",
          "1879:   ED55806D296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED55806C296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift */; };",
          "1880:   ED55806E296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED55806C296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift */; };",
          "1881:   ED558070296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED55806F296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift */; };",
          "1882:   ED558071296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED55806F296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift */; };",
          "1883:   ED5580732970265A003443E3 /* MXCryptoMachineLogger.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5580722970265A003443E3 /* MXCryptoMachineLogger.swift */; };",
          "1884:   ED5580742970265A003443E3 /* MXCryptoMachineLogger.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5580722970265A003443E3 /* MXCryptoMachineLogger.swift */; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2001:   EDC8C40E2968C37F003792C5 /* MXKeysQuerySchedulerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDC8C40A2968A9F7003792C5 /* MXKeysQuerySchedulerUnitTests.swift */; };",
          "2002:   EDCB65E22912AB0C00F55D4D /* MXRoomEventDecryption.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDCB65E12912AB0C00F55D4D /* MXRoomEventDecryption.swift */; };",
          "2003:   EDCB65E32912AB0C00F55D4D /* MXRoomEventDecryption.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDCB65E12912AB0C00F55D4D /* MXRoomEventDecryption.swift */; };",
          "2004:   EDD4197E28DCAA5F007F3757 /* MXNativeKeyBackupEngine.h in Headers */ = {isa = PBXBuildFile; fileRef = EDD4197D28DCAA5F007F3757 /* MXNativeKeyBackupEngine.h */; };",
          "2005:   EDD4197F28DCAA5F007F3757 /* MXNativeKeyBackupEngine.h in Headers */ = {isa = PBXBuildFile; fileRef = EDD4197D28DCAA5F007F3757 /* MXNativeKeyBackupEngine.h */; };",
          "2006:   EDD4198128DCAA7B007F3757 /* MXNativeKeyBackupEngine.m in Sources */ = {isa = PBXBuildFile; fileRef = EDD4198028DCAA7B007F3757 /* MXNativeKeyBackupEngine.m */; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2012:   EDCF802D2941FF220059E774 /* MXCryptoMigrationV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDCF802C2941FF220059E774 /* MXCryptoMigrationV2.swift */; };",
          "2013:   EDCF802E2941FF220059E774 /* MXCryptoMigrationV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDCF802C2941FF220059E774 /* MXCryptoMigrationV2.swift */; };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3065:   ED51943828462D130006EEC6 /* MXRoomStateUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomStateUnitTests.swift; sourceTree = \"<group>\"; };",
          "3066:   ED51943B284630090006EEC6 /* MXRestClientStub.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = MXRestClientStub.m; sourceTree = \"<group>\"; };",
          "3067:   ED51943E284630100006EEC6 /* MXRestClientStub.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXRestClientStub.h; sourceTree = \"<group>\"; };",
          "3068:   ED5AE8C32816C8CF00105072 /* MXRoomSummaryCoreDataStore2.xcdatamodel */ = {isa = PBXFileReference; lastKnownFileType = wrapper.xcdatamodel; path = MXRoomSummaryCoreDataStore2.xcdatamodel; sourceTree = \"<group>\"; };",
          "3069:   ED5AE8C42816C8CF00105072 /* MXRoomSummaryCoreDataStore.xcdatamodel */ = {isa = PBXFileReference; lastKnownFileType = wrapper.xcdatamodel; path = MXRoomSummaryCoreDataStore.xcdatamodel; sourceTree = \"<group>\"; };",
          "3070:   ED5C753528B3E80300D24E85 /* MXLogger.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXLogger.h; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3078:   ED558067296F0361003443E3 /* MXCryptoMigrationStore.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMigrationStore.swift; sourceTree = \"<group>\"; };",
          "3079:   ED55806C296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMigrationStoreUnitTests.swift; sourceTree = \"<group>\"; };",
          "3080:   ED55806F296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMigrationV2Tests.swift; sourceTree = \"<group>\"; };",
          "3081:   ED5580722970265A003443E3 /* MXCryptoMachineLogger.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMachineLogger.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3127:   EDC8C4072968A993003792C5 /* MXKeysQueryScheduler.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeysQueryScheduler.swift; sourceTree = \"<group>\"; };",
          "3128:   EDC8C40A2968A9F7003792C5 /* MXKeysQuerySchedulerUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeysQuerySchedulerUnitTests.swift; sourceTree = \"<group>\"; };",
          "3129:   EDCB65E12912AB0C00F55D4D /* MXRoomEventDecryption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomEventDecryption.swift; sourceTree = \"<group>\"; };",
          "3130:   EDD4197D28DCAA5F007F3757 /* MXNativeKeyBackupEngine.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXNativeKeyBackupEngine.h; sourceTree = \"<group>\"; };",
          "3131:   EDD4198028DCAA7B007F3757 /* MXNativeKeyBackupEngine.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = MXNativeKeyBackupEngine.m; sourceTree = \"<group>\"; };",
          "3132:   EDD578DC2881C37C006739DD /* MXDeviceInfoSource.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXDeviceInfoSource.swift; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3144:   EDCF802C2941FF220059E774 /* MXCryptoMigrationV2.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCryptoMigrationV2.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4401:   32C78B64256CFC4D008130B1 /* Migration */ = {",
          "4402:    isa = PBXGroup;",
          "4403:    children = (",
          "4404:     32C78B65256CFC4D008130B1 /* MXCryptoVersion.h */,",
          "4405:     32C78B66256CFC4D008130B1 /* MXCryptoMigration.m */,",
          "4406:     32C78B67256CFC4D008130B1 /* MXCryptoMigration.h */,",
          "4407:    );",
          "4408:    path = Migration;",
          "4409:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4419:     ED558066296F034F003443E3 /* Data */,",
          "4423:     EDCF802C2941FF220059E774 /* MXCryptoMigrationV2.swift */,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5350:   ED21F67A28104B9A002FF83D /* Crypto */ = {",
          "5351:    isa = PBXGroup;",
          "5352:    children = (",
          "5353:     ED8F1D1428857FD300F897E7 /* CrossSigning */,",
          "5354:     ED8F1D2E2885AAEB00F897E7 /* Trust */,",
          "5355:     ED8F1D292885A7DF00F897E7 /* Devices */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5370:     ED55806A296F0E18003443E3 /* Migration */,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5398:    isa = PBXGroup;",
          "5399:    children = (",
          "5400:     ED2DD111286C450600F06731 /* MXCryptoMachine.swift */,",
          "5401:     ED8F1D3A2885BB2D00F897E7 /* MXCryptoProtocols.swift */,",
          "5402:     ED2DD112286C450600F06731 /* MXEventDecryptionResult+DecryptedEvent.swift */,",
          "5403:     ED2DD113286C450600F06731 /* MXCryptoRequests.swift */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5419:     ED5580722970265A003443E3 /* MXCryptoMachineLogger.swift */,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5475:    path = Data;",
          "5476:    sourceTree = \"<group>\";",
          "5477:   };",
          "5478:   ED5C753428B3E80300D24E85 /* Logs */ = {",
          "5479:    isa = PBXGroup;",
          "5480:    children = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5497:   ED558066296F034F003443E3 /* Data */ = {",
          "5498:    isa = PBXGroup;",
          "5499:    children = (",
          "5500:     ED558067296F0361003443E3 /* MXCryptoMigrationStore.swift */,",
          "5501:    );",
          "5502:    path = Data;",
          "5503:    sourceTree = \"<group>\";",
          "5504:   };",
          "5505:   ED55806A296F0E18003443E3 /* Migration */ = {",
          "5506:    isa = PBXGroup;",
          "5507:    children = (",
          "5508:     ED55806B296F0E1D003443E3 /* Data */,",
          "5509:     ED55806F296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift */,",
          "5510:    );",
          "5511:    path = Migration;",
          "5512:    sourceTree = \"<group>\";",
          "5513:   };",
          "5514:   ED55806B296F0E1D003443E3 /* Data */ = {",
          "5515:    isa = PBXGroup;",
          "5516:    children = (",
          "5517:     ED55806C296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift */,",
          "5518:    );",
          "5519:    path = Data;",
          "5520:    sourceTree = \"<group>\";",
          "5521:   };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6801:     32999DE022DCD183004FF987 /* MXPusher.m in Sources */,",
          "6802:     F03EF4FF1DF014D9009DF592 /* MXMediaLoader.m in Sources */,",
          "6803:     ECDA763227B293D9000C48CF /* MXThreadProtocol.swift in Sources */,",
          "6804:     320A8841217F4E3F002EA952 /* MXCurve25519BackupAuthData.m in Sources */,",
          "6805:     B1A0270226162110001AADFF /* MXSpaceChildrenResponse.m in Sources */,",
          "6806:     66398BA527A4085B00466E89 /* MXRefreshResponse.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6848:     EDCF802D2941FF220059E774 /* MXCryptoMigrationV2.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6952:     ED647E3E292CE64400A47519 /* MXSessionSyncProgress.swift in Sources */,",
          "6953:     EC8A53C525B1BC77004E0802 /* MXTurnServerResponse.m in Sources */,",
          "6954:     32A151271DABB0CB00400192 /* MXMegolmDecryption.m in Sources */,",
          "6955:     18121F78273E6E1E00B68ADF /* PollBuilder.swift in Sources */,",
          "6956:     327A5F50239805F600ED6329 /* MXKeyVerificationKey.m in Sources */,",
          "6957:     B16C56E2261D0A9D00604765 /* MXSpaceChildInfo.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7000:     ED558068296F0361003443E3 /* MXCryptoMigrationStore.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7234:     B1F04B132811E9D300103EBE /* MXBeaconInfoSummaryStoreProtocol.swift in Sources */,",
          "7235:     183892802702F553003F0C4F /* MXRoomNameDefaultStringLocalizer.m in Sources */,",
          "7236:     C6F9358B1E5B3BE600FC34BF /* MXJSONModels.swift in Sources */,",
          "7237:     EC8A539725B1BC77004E0802 /* MXCallReplacesEventContent.m in Sources */,",
          "7238:     B135066E27EA44C800BD3276 /* MXLocationServiceError.swift in Sources */,",
          "7239:     32FA10C21FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7283:     ED5580732970265A003443E3 /* MXCryptoMachineLogger.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7271:     18121F75273E6D2400B68ADF /* MXPollBuilderTests.swift in Sources */,",
          "7272:     ED7019F72886CA6C00FC31B9 /* VerificationRequestStub.swift in Sources */,",
          "7273:     B14EECEE2578FE3F00448735 /* MXAuthenticationSessionUnitTests.swift in Sources */,",
          "7274:     ED2DD11D286C4F4400F06731 /* MXCryptoRequestsUnitTests.swift in Sources */,",
          "7275:     32832B5D1BCC048300241108 /* MXStoreMemoryStoreTests.m in Sources */,",
          "7276:     EDB4209927DF842F0036AF39 /* MXEventFixtures.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7321:     ED558070296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7349:     ED7019FB2886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift in Sources */,",
          "7350:     32B0E3E723A3864C0054FF1A /* MXEventReferenceUnitTests.swift in Sources */,",
          "7351:     32720DA2222EB5650086FFF5 /* MXAutoDiscoveryTests.m in Sources */,",
          "7352:     ED8943D427E34762000FC39C /* MXMemoryRoomStoreUnitTests.swift in Sources */,",
          "7353:     ED5C95CE2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */,",
          "7354:     327E37B91A977810007F026F /* MXLoggerUnitTests.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7400:     ED55806D296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7452:     ECDA763327B293D9000C48CF /* MXThreadProtocol.swift in Sources */,",
          "7453:     B14EF1E02397E90400758AF0 /* MXRealmCryptoStore.m in Sources */,",
          "7454:     B14EF1E12397E90400758AF0 /* MXRoomSummary.m in Sources */,",
          "7455:     66398BA627A4085B00466E89 /* MXRefreshResponse.m in Sources */,",
          "7456:     B14EF1E22397E90400758AF0 /* MXPushRuleRoomMemberCountConditionChecker.m in Sources */,",
          "7457:     B14EF1E32397E90400758AF0 /* MXCall.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7504:     EDCF802E2941FF220059E774 /* MXCryptoMigrationV2.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7603:     ED647E3F292CE64400A47519 /* MXSessionSyncProgress.swift in Sources */,",
          "7604:     B14EF2212397E90400758AF0 /* MX3PID.swift in Sources */,",
          "7605:     18121F79273E6E4100B68ADF /* PollBuilder.swift in Sources */,",
          "7606:     EC383BB325406892002FBBE6 /* MXSyncResponseStore.swift in Sources */,",
          "7607:     ECBF658826DE3DF800AA3A99 /* MXFileRoomOutgoingMessagesStore.m in Sources */,",
          "7608:     B14EF2222397E90400758AF0 /* MXMediaScan.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7656:     ED558069296F0361003443E3 /* MXCryptoMigrationStore.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7885:     B1F04B142811E9D300103EBE /* MXBeaconInfoSummaryStoreProtocol.swift in Sources */,",
          "7886:     EC8A53A225B1BC77004E0802 /* MXCallSelectAnswerEventContent.m in Sources */,",
          "7887:     183892812702F553003F0C4F /* MXRoomNameDefaultStringLocalizer.m in Sources */,",
          "7888:     B14EF2912397E90400758AF0 /* MXOutgoingRoomKeyRequestManager.m in Sources */,",
          "7889:     B14EF2922397E90400758AF0 /* MXWellKnown.m in Sources */,",
          "7890:     B1A026F926161EF5001AADFF /* MXSpaceChildSummaryResponse.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7939:     ED5580742970265A003443E3 /* MXCryptoMachineLogger.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "7922:     B1E09A442397FD940057C069 /* Dummy.swift in Sources */,",
          "7923:     ED7019F82886CA6C00FC31B9 /* VerificationRequestStub.swift in Sources */,",
          "7924:     18121F76273E6D2400B68ADF /* MXPollBuilderTests.swift in Sources */,",
          "7925:     B1E09A1A2397FCE90057C069 /* MXAggregatedEditsTests.m in Sources */,",
          "7926:     B1E09A1F2397FCE90057C069 /* MXAutoDiscoveryTests.m in Sources */,",
          "7927:     EDB4209A27DF842F0036AF39 /* MXEventFixtures.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7977:     ED558071296F1BEE003443E3 /* MXCryptoMigrationV2Tests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8000:     32B4778F2638133D00EA5800 /* MXJSONModelUnitTests.m in Sources */,",
          "8001:     B1F939F626289F2600D0E525 /* MXSpaceChildContentTests.swift in Sources */,",
          "8002:     EC40386828A279220067D5B8 /* MXKeyBackupUnitTests.swift in Sources */,",
          "8003:     B1E09A412397FD820057C069 /* MXAccountDataTests.m in Sources */,",
          "8004:     B1E09A2D2397FD750057C069 /* MXRestClientNoAuthAPITests.m in Sources */,",
          "8005:     ED8943D527E34762000FC39C /* MXMemoryRoomStoreUnitTests.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8056:     ED55806E296F0E3A003443E3 /* MXCryptoMigrationStoreUnitTests.swift in Sources */,",
          "",
          "---------------"
        ],
        "MatrixSDK/Background/MXBackgroundCryptoStore.m||MatrixSDK/Background/MXBackgroundCryptoStore.m": [
          "File: MatrixSDK/Background/MXBackgroundCryptoStore.m -> MatrixSDK/Background/MXBackgroundCryptoStore.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         if (olmSession)",
          "181:         {",
          "182:             MXLogDebug(@\"[MXBackgroundCryptoStore] performSessionOperationWithDevice: Transfer data for %@ from cryptoStore to bgCryptoStore\", sessionId);",
          "184:         }",
          "185:     }",
          "",
          "[Removed Lines]",
          "183:             [bgCryptoStore storeSession:olmSession forDevice:deviceKey];",
          "",
          "[Added Lines]",
          "183:             [bgCryptoStore storeSession:olmSession];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:     return sessions;",
          "210: }",
          "213: {",
          "215: }",
          "",
          "[Removed Lines]",
          "212: - (void)storeSession:(MXOlmSession*)session forDevice:(NSString*)deviceKey",
          "214:     [bgCryptoStore storeSession:session forDevice:deviceKey];",
          "",
          "[Added Lines]",
          "212: - (NSArray<MXOlmSession *> *)sessions",
          "214:     NSArray<MXOlmSession*> *bgSessions = [bgCryptoStore sessions] ?: @[];",
          "215:     NSArray<MXOlmSession*> *appSessions = [cryptoStore sessions] ?: @[];",
          "217:     NSMutableArray<MXOlmSession*> *sessions = [NSMutableArray array];",
          "218:     [sessions addObjectsFromArray:bgSessions];",
          "219:     [sessions addObjectsFromArray:appSessions];",
          "221:     return sessions;",
          "222: }",
          "224: - (void)storeSession:(MXOlmSession*)session",
          "225: {",
          "226:     [bgCryptoStore storeSession:session];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:     NSAssert(NO, @\"This method should be useless in the context of MXBackgroundCryptoStore\");",
          "323: }",
          "325: - (void)storeDeviceId:(NSString*)deviceId",
          "326: {",
          "327:     NSAssert(NO, @\"This method should be useless in the context of MXBackgroundCryptoStore\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: - (NSString *)userId",
          "338: {",
          "339:     NSAssert(NO, @\"This method should be useless in the context of MXBackgroundCryptoStore\");",
          "340:     return nil;",
          "341: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:             try await requests.queryKeys(users: users)",
          "94:         }",
          "95:         self.getRoomAction = getRoomAction",
          "98:     }",
          "100:     func start() async throws {",
          "",
          "[Removed Lines]",
          "97:         setLogger(logger: self)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:     }",
          "752: }",
          "760: #endif",
          "",
          "[Removed Lines]",
          "754: extension MXCryptoMachine: Logger {",
          "755:     func log(logLine: String) {",
          "756:         MXLog.debug(\"[MXCryptoMachine] \\(logLine)\")",
          "757:     }",
          "758: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachineLogger.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: #if DEBUG",
          "21: import MatrixSDKCrypto",
          "24: class MXCryptoMachineLogger: Logger {",
          "25:     init() {",
          "26:         setLogger(logger: self)",
          "27:     }",
          "29:     func log(logLine: String) {",
          "32:         guard !logLine.contains(\"::uniffi_api:\") else {",
          "33:             return",
          "34:         }",
          "36:         MXLog.debug(\"[MXCryptoMachine] \\(logLine)\")",
          "37:     }",
          "38: }",
          "40: #endif",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/MXOlmSession.h||MatrixSDK/Crypto/Data/MXOlmSession.h": [
          "File: MatrixSDK/Crypto/Data/MXOlmSession.h -> MatrixSDK/Crypto/Data/MXOlmSession.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: @interface MXOlmSession : NSObject",
          "36:  The associated olm session.",
          "",
          "[Removed Lines]",
          "33: - (instancetype)initWithOlmSession:(OLMSession*)session;",
          "",
          "[Added Lines]",
          "33: - (instancetype)initWithOlmSession:(OLMSession*)session",
          "34:                          deviceKey:(NSString*)deviceKey;",
          "37:  The curve25519 key of the other user that we share this session with.",
          "39: @property (nonatomic, readonly) NSString *deviceKey;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/MXOlmSession.m||MatrixSDK/Crypto/Data/MXOlmSession.m": [
          "File: MatrixSDK/Crypto/Data/MXOlmSession.m -> MatrixSDK/Crypto/Data/MXOlmSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @implementation MXOlmSession",
          "23: {",
          "24:     self = [super init];",
          "25:     if (self)",
          "26:     {",
          "27:         _session = session;",
          "28:         _lastReceivedMessageTs = 0;",
          "29:     }",
          "30:     return self;",
          "",
          "[Removed Lines]",
          "22: - (instancetype)initWithOlmSession:(OLMSession *)session",
          "",
          "[Added Lines]",
          "22: - (instancetype)initWithOlmSession:(OLMSession *)session deviceKey:(NSString *)deviceKey",
          "28:         _deviceKey = deviceKey;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/Store/MXCryptoStore.h||MatrixSDK/Crypto/Data/Store/MXCryptoStore.h": [
          "File: MatrixSDK/Crypto/Data/Store/MXCryptoStore.h -> MatrixSDK/Crypto/Data/Store/MXCryptoStore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: - (void)open:(void (^)(void))onComplete failure:(void (^)(NSError *error))failure;",
          "98:  Store the device id.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:  The user id.",
          "100: - (NSString*)userId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:  Store a session between this device and another device.",
          "260:  @param session the end-to-end session.",
          "265:  Retrieve an end-to-end session between this device and another device.",
          "",
          "[Removed Lines]",
          "259:  @param deviceKey the public key of the other device.",
          "262: - (void)storeSession:(MXOlmSession*)session forDevice:(NSString*)deviceKey;",
          "",
          "[Added Lines]",
          "266: - (void)storeSession:(MXOlmSession*)session;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292: - (NSArray<MXOlmSession*>*)sessionsWithDevice:(NSString*)deviceKey;",
          "296:  Store inbound group sessions.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:  Retrieve all end-to-end sessions between this device and all other devices",
          "301:  @return a array of end-to-end sessions.",
          "303: - (NSArray<MXOlmSession*>*)sessions;",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m||MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m": [
          "File: MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m -> MatrixSDK/Crypto/Data/Store/MXRealmCryptoStore/MXRealmCryptoStore.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:     onComplete();",
          "479: }",
          "481: - (void)storeDeviceId:(NSString*)deviceId",
          "482: {",
          "483:     MXRealmOlmAccount *account = self.accountInCurrentThread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: - (NSString *)userId",
          "482: {",
          "483:     return self.accountInCurrentThread.userId;",
          "484: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821: }",
          "825: {",
          "826:     __block BOOL isNew = NO;",
          "827:     NSDate *startDate = [NSDate date];",
          "",
          "[Removed Lines]",
          "824: - (void)storeSession:(MXOlmSession*)session forDevice:(NSString*)deviceKey",
          "",
          "[Added Lines]",
          "829: - (void)storeSession:(MXOlmSession*)session",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "829:     RLMRealm *realm = self.realm;",
          "830:     [realm transactionWithName:@\"[MXRealmCryptoStore] storeSession\" block:^{",
          "833:         if (realmOlmSession)",
          "834:         {",
          "",
          "[Removed Lines]",
          "832:         MXRealmOlmSession *realmOlmSession = [MXRealmOlmSession objectsInRealm:realm where:@\"sessionId = %@ AND deviceKey = %@\", session.session.sessionIdentifier, deviceKey].firstObject;",
          "",
          "[Added Lines]",
          "837:         MXRealmOlmSession *realmOlmSession = [MXRealmOlmSession objectsInRealm:realm where:@\"sessionId = %@ AND deviceKey = %@\", session.session.sessionIdentifier, session.deviceKey].firstObject;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:             isNew = YES;",
          "842:             realmOlmSession = [[MXRealmOlmSession alloc] initWithValue:@{",
          "843:                 @\"sessionId\": session.session.sessionIdentifier,",
          "845:                 @\"olmSessionData\": [NSKeyedArchiver archivedDataWithRootObject:session.session]",
          "846:             }];",
          "847:             realmOlmSession.lastReceivedMessageTs = session.lastReceivedMessageTs;",
          "",
          "[Removed Lines]",
          "844:                 @\"deviceKey\": deviceKey,",
          "",
          "[Added Lines]",
          "849:                 @\"deviceKey\": session.deviceKey,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "863:     {",
          "864:         OLMSession *olmSession = [NSKeyedUnarchiver unarchiveObjectWithData:realmOlmSession.olmSessionData];",
          "867:         mxOlmSession.lastReceivedMessageTs = realmOlmSession.lastReceivedMessageTs;",
          "868:     }",
          "",
          "[Removed Lines]",
          "866:         mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession];",
          "",
          "[Added Lines]",
          "871:         mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:realmOlmSession.deviceKey];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "879:         {",
          "880:             OLMSession *olmSession = [NSKeyedUnarchiver unarchiveObjectWithData:realmOlmSession.olmSessionData];",
          "883:             mxOlmSession.lastReceivedMessageTs = realmOlmSession.lastReceivedMessageTs;",
          "885:             block(mxOlmSession);",
          "",
          "[Removed Lines]",
          "882:             MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession];",
          "",
          "[Added Lines]",
          "887:             MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:realmOlmSession.deviceKey];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "914:         {",
          "915:             OLMSession *olmSession = [NSKeyedUnarchiver unarchiveObjectWithData:realmOlmSession.olmSessionData];",
          "918:             mxOlmSession.lastReceivedMessageTs = realmOlmSession.lastReceivedMessageTs;",
          "920:             [sessionsWithDevice addObject:mxOlmSession];",
          "",
          "[Removed Lines]",
          "917:             MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession];",
          "",
          "[Added Lines]",
          "922:             MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:realmOlmSession.deviceKey];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "924:     return sessionsWithDevice;",
          "925: }",
          "927: #pragma mark - MXRealmOlmInboundGroupSession",
          "929: - (void)storeInboundGroupSessions:(NSArray<MXOlmInboundGroupSession *>*)sessions",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "932: - (NSArray<MXOlmSession*>*)sessions",
          "933: {",
          "934:     NSMutableArray<MXOlmSession*> *sessions = [NSMutableArray array];",
          "936:     RLMResults<MXRealmOlmSession *> *realmOlmSessions = [MXRealmOlmSession allObjectsInRealm:self.realm];",
          "937:     for (MXRealmOlmSession *realmOlmSession in realmOlmSessions)",
          "938:     {",
          "939:         if (realmOlmSession.olmSessionData)",
          "940:         {",
          "941:             OLMSession *olmSession = [NSKeyedUnarchiver unarchiveObjectWithData:realmOlmSession.olmSessionData];",
          "943:             MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:realmOlmSession.deviceKey];",
          "944:             mxOlmSession.lastReceivedMessageTs = realmOlmSession.lastReceivedMessageTs;",
          "946:             [sessions addObject:mxOlmSession];",
          "947:         }",
          "948:     }",
          "950:     return sessions;",
          "951: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2.swift -> MatrixSDK/Crypto/MXCryptoV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     private let keyVerification: MXKeyVerificationManagerV2",
          "77:     private var startTask: Task<(), Never>?",
          "78:     private var roomEventObserver: Any?",
          "79:     private let log = MXNamedLog(name: \"MXCryptoV2\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     private let cryptoLog = MXCryptoMachineLogger()",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
          "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     if (olmSession)",
          "174:     {",
          "180:         [mxOlmSession didReceiveMessage];",
          "183:         return olmSession.sessionIdentifier;",
          "184:     }",
          "185:     else if (error)",
          "",
          "[Removed Lines]",
          "175:         MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession];",
          "182:         [store storeSession:mxOlmSession forDevice:theirIdentityKey];",
          "",
          "[Added Lines]",
          "175:         MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:theirIdentityKey];",
          "182:         [store storeSession:mxOlmSession];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:             MXLogDebug(@\"[MXOlmDevice] createInboundSession. decryptMessage error: %@\", error);",
          "222:         }",
          "228:         [mxOlmSession didReceiveMessage];",
          "231:     }",
          "233:     return olmSession.sessionIdentifier;",
          "",
          "[Removed Lines]",
          "224:         MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession];",
          "230:         [store storeSession:mxOlmSession forDevice:theirDeviceIdentityKey];",
          "",
          "[Added Lines]",
          "224:         MXOlmSession *mxOlmSession = [[MXOlmSession alloc] initWithOlmSession:olmSession deviceKey:theirDeviceIdentityKey];",
          "230:         [store storeSession:mxOlmSession];",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift||MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift": [
          "File: MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift -> MatrixSDK/Crypto/Migration/Data/MXCryptoMigrationStore.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: #if DEBUG",
          "21: import OLMKit",
          "22: import MatrixSDKCrypto",
          "24: struct MXCryptoMigrationStore {",
          "25:     enum Error: Swift.Error {",
          "26:         case missingAccount",
          "27:     }",
          "29:     let legacyStore: MXCryptoStore",
          "31:     func extractData(with pickleKey: Data) throws -> MigrationData {",
          "32:         return .init(",
          "33:             account: try pickledAccount(pickleKey: pickleKey),",
          "34:             sessions: olmSessions(pickleKey: pickleKey),",
          "35:             inboundGroupSessions: megolmSessions(pickleKey: pickleKey),",
          "36:             backupVersion: legacyStore.backupVersion,",
          "37:             backupRecoveryKey: backupRecoveryKey(),",
          "38:             pickleKey: [UInt8](pickleKey),",
          "39:             crossSigning: crossSigning(),",
          "40:             trackedUsers: trackedUsers()",
          "41:         )",
          "42:     }",
          "44:     private func pickledAccount(pickleKey: Data) throws -> PickledAccount {",
          "45:         guard",
          "46:             let userId = legacyStore.userId(),",
          "47:             let deviceId = legacyStore.deviceId(),",
          "48:             let account = legacyStore.account()",
          "49:         else {",
          "50:             throw Error.missingAccount",
          "51:         }",
          "52:         return try PickledAccount(",
          "53:             userId: userId,",
          "54:             deviceId: deviceId,",
          "55:             account: account,",
          "56:             pickleKey: pickleKey",
          "57:         )",
          "58:     }",
          "60:     private func olmSessions(pickleKey: Data) -> [PickledSession] {",
          "61:         return legacyStore",
          "62:             .sessions()?",
          "63:             .compactMap {",
          "64:                 do {",
          "65:                     return try PickledSession(session: $0, pickleKey: pickleKey)",
          "66:                 } catch {",
          "67:                     MXLog.error(\"[MXCryptoMigrationStore] cannot extract olm session\", context: error)",
          "68:                     return nil",
          "69:                 }",
          "70:             } ?? []",
          "71:     }",
          "73:     private func megolmSessions(pickleKey: Data) -> [PickledInboundGroupSession] {",
          "74:         guard let sessions = legacyStore.inboundGroupSessions() else {",
          "75:             return []",
          "76:         }",
          "78:         let sessionsToBackup = Set(",
          "79:             legacyStore.inboundGroupSessions(toBackup: UInt.max)",
          "80:                 .compactMap { $0.session?.sessionIdentifier() }",
          "81:         )",
          "83:         return sessions.compactMap {",
          "84:             do {",
          "85:                 return try PickledInboundGroupSession(",
          "86:                     session: $0,",
          "87:                     pickleKey: pickleKey,",
          "88:                     backedUp: !sessionsToBackup.contains($0.session?.sessionIdentifier() ?? \"\")",
          "89:                 )",
          "90:             } catch {",
          "91:                 MXLog.error(\"[MXCryptoMigrationStore] cannot extract megolm session\", context: error)",
          "92:                 return nil",
          "93:             }",
          "94:         }",
          "95:     }",
          "97:     private func backupRecoveryKey() -> String? {",
          "98:         guard let privateKey = secret(for: MXSecretId.keyBackup) else {",
          "99:             return nil",
          "100:         }",
          "102:         let data = MXBase64Tools.data(fromBase64: privateKey)",
          "103:         return MXRecoveryKey.encode(data)",
          "104:     }",
          "106:     private func crossSigning() -> CrossSigningKeyExport {",
          "107:         let master = secret(for: MXSecretId.crossSigningMaster)",
          "108:         let selfSigning = secret(for: MXSecretId.crossSigningSelfSigning)",
          "109:         let userSigning = secret(for: MXSecretId.crossSigningUserSigning)",
          "111:         return .init(",
          "112:             masterKey: master,",
          "113:             selfSigningKey: selfSigning,",
          "114:             userSigningKey: userSigning",
          "115:         )",
          "116:     }",
          "118:     private func trackedUsers() -> [String] {",
          "119:         var users = [String]()",
          "120:         for (user, status) in legacyStore.deviceTrackingStatus() ?? [:] {",
          "121:             if status != 0 {",
          "122:                 users.append(user)",
          "123:             }",
          "124:         }",
          "125:         return users",
          "126:     }",
          "128:     private func secret(for secretId: Unmanaged<NSString>) -> String? {",
          "129:         return legacyStore.secret(withSecretId: secretId.takeUnretainedValue() as String)",
          "130:     }",
          "131: }",
          "133: private extension PickledAccount {",
          "134:     init(",
          "135:         userId: String,",
          "136:         deviceId: String,",
          "137:         account: OLMAccount,",
          "138:         pickleKey: Data",
          "139:     ) throws {",
          "140:         let pickle = try account.serializeData(withKey: pickleKey)",
          "141:         self.init(",
          "142:             userId: userId,",
          "143:             deviceId: deviceId,",
          "144:             pickle: pickle,",
          "145:             shared: true, // Not yet implemented",
          "146:             uploadedSignedKeyCount: 50 // Not yet implemented",
          "147:         )",
          "148:     }",
          "149: }",
          "151: private extension PickledSession {",
          "152:     init(session: MXOlmSession, pickleKey: Data) throws {",
          "153:         let pickle = try session.session.serializeData(withKey: pickleKey)",
          "154:         let time = \"\\(Int(session.lastReceivedMessageTs))\"",
          "156:         self.init(",
          "157:             pickle: pickle,",
          "158:             senderKey: session.deviceKey,",
          "159:             createdUsingFallbackKey: false, // Not yet implemented",
          "160:             creationTime: time, // Not yet implemented",
          "161:             lastUseTime: time",
          "162:         )",
          "163:     }",
          "164: }",
          "166: private extension PickledInboundGroupSession {",
          "167:     enum Error: Swift.Error {",
          "168:         case invalidSession",
          "169:     }",
          "171:     init(session: MXOlmInboundGroupSession, pickleKey: Data, backedUp: Bool) throws {",
          "172:         guard",
          "173:             let senderKey = session.senderKey,",
          "174:             let roomId = session.roomId",
          "175:         else {",
          "176:             throw Error.invalidSession",
          "177:         }",
          "179:         let pickle = try session.session.serializeData(withKey: pickleKey)",
          "181:         self.init(",
          "182:             pickle: pickle,",
          "183:             senderKey: senderKey,",
          "184:             signingKey: session.keysClaimed ?? [:],",
          "185:             roomId: roomId,",
          "186:             forwardingChains: session.forwardingCurve25519KeyChain ?? [],",
          "187:             imported: session.isUntrusted,",
          "188:             backedUp: backedUp",
          "189:         )",
          "190:     }",
          "191: }",
          "193: #endif",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift||MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift": [
          "File: MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift -> MatrixSDK/Crypto/Migration/MXCryptoMigrationV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: #if DEBUG",
          "21: import OLMKit",
          "22: import MatrixSDKCrypto",
          "24: class MXCryptoMigrationV2: NSObject {",
          "25:     private let store: MXCryptoMigrationStore",
          "26:     private let log = MXNamedLog(name: \"MXCryptoMachineMigration\")",
          "28:     init(legacyStore: MXCryptoStore) {",
          "29:         store = .init(legacyStore: legacyStore)",
          "30:         super.init()",
          "31:         OLMKit.sharedInstance().pickleKeyDelegate = self",
          "32:     }",
          "34:     func migrateCrypto() throws {",
          "35:         log.debug(\"Starting migration\")",
          "37:         let data = try store.extractData(with: pickleKey())",
          "38:         let url = try MXCryptoMachine.storeURL(for: data.account.userId)",
          "40:         if FileManager.default.fileExists(atPath: url.path) {",
          "41:             try FileManager.default.removeItem(at: url)",
          "42:         }",
          "44:         let details = \"\"\"",
          "45:         Migration summary",
          "46:           - user id         : \\(data.account.userId)",
          "47:           - device id       : \\(data.account.deviceId)",
          "48:           - olm_sessions    : \\(data.sessions.count)",
          "49:           - megolm_sessions : \\(data.inboundGroupSessions.count)",
          "50:           - backup_key      : \\(data.backupRecoveryKey != nil ? \"true\" : \"false\")",
          "51:           - cross_signing   : \\(data.crossSigning.masterKey != nil ? \"true\" : \"false\")",
          "52:           - tracked_users   : \\(data.trackedUsers.count)",
          "53:         \"\"\"",
          "54:         log.debug(details)",
          "56:         try migrate(",
          "57:             data: data,",
          "58:             path: url.path,",
          "59:             passphrase: nil,",
          "60:             progressListener: self",
          "61:         )",
          "63:         log.debug(\"Migration complete\")",
          "64:     }",
          "65: }",
          "67: extension MXCryptoMigrationV2: OLMKitPickleKeyDelegate {",
          "68:     public func pickleKey() -> Data {",
          "69:         let key = MXKeyProvider.sharedInstance()",
          "70:             .keyDataForData(",
          "71:                 ofType: MXCryptoOlmPickleKeyDataType,",
          "72:                 isMandatory: true,",
          "73:                 expectedKeyType: .rawData",
          "74:             )",
          "76:         guard let key = key as? MXRawDataKey else {",
          "77:             log.failure(\"Wrong key\")",
          "78:             return Data()",
          "79:         }",
          "81:         return key.key",
          "82:     }",
          "83: }",
          "85: extension MXCryptoMigrationV2: ProgressListener {",
          "86:     func onProgress(progress: Int32, total: Int32) {",
          "87:         log.debug(\"Migration progress \\(progress) out of \\(total)\")",
          "88:     }",
          "89: }",
          "91: #endif",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift -> MatrixSDKTests/Crypto/CryptoMachine/MXKeysQuerySchedulerUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         users: Set<String>,",
          "72:         completion: @escaping (Response) -> Void,",
          "73:         failure: ((Swift.Error) -> Void)? = nil",
          "81:             }",
          "82:         }",
          "83:     }",
          "88:         let exp = expectation(description: \"exp\")",
          "91:             XCTAssertEqual(response, [",
          "92:                 \"alice\": [\"A\"]",
          "93:             ])",
          "94:             exp.fulfill()",
          "95:         }",
          "98:         XCTAssertQueriesCount(1)",
          "99:     }",
          "102:         let exp = expectation(description: \"exp\")",
          "105:             XCTAssertEqual(response, [",
          "106:                 \"alice\": [\"A\"],",
          "107:                 \"bob\": [\"B\"],",
          "",
          "[Removed Lines]",
          "74:     ) {",
          "75:         Task.detached {",
          "76:             do {",
          "77:                 let result = try await self.scheduler.query(users: users)",
          "78:                 completion(result)",
          "79:             } catch {",
          "80:                 failure?(error)",
          "87:     func test_queryAlice() {",
          "90:         query(users: [\"alice\"]) { response in",
          "97:         waitForExpectations(timeout: 1)",
          "101:     func test_queryAliceAndBob() {",
          "104:         query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "[Added Lines]",
          "74:     ) async {",
          "75:         return await withCheckedContinuation { continuation in",
          "76:             Task.detached {",
          "77:                 continuation.resume()",
          "79:                 do {",
          "80:                     let result = try await self.scheduler.query(users: users)",
          "81:                     completion(result)",
          "82:                 } catch {",
          "83:                     failure?(error)",
          "84:                 }",
          "91:     func test_queryAlice() async {",
          "94:         await query(users: [\"alice\"]) { response in",
          "101:         await waitForExpectations(timeout: 1)",
          "105:     func test_queryAliceAndBob() async {",
          "108:         await query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:             exp.fulfill()",
          "110:         }",
          "113:         XCTAssertQueriesCount(1)",
          "114:     }",
          "117:         let exp = expectation(description: \"exp\")",
          "118:         exp.expectedFulfillmentCount = 2",
          "121:             XCTAssertEqual(response, [",
          "122:                 \"alice\": [\"A\"],",
          "123:             ])",
          "124:             exp.fulfill()",
          "125:         }",
          "128:             XCTAssertEqual(response, [",
          "129:                 \"bob\": [\"B\"],",
          "130:             ])",
          "131:             exp.fulfill()",
          "132:         }",
          "135:         XCTAssertQueriesCount(2)",
          "136:     }",
          "139:         queryStartSpy = {",
          "140:             self.stubbedResult = .success([",
          "141:                 \"alice\": [\"A1\", \"A2\"]",
          "",
          "[Removed Lines]",
          "112:         waitForExpectations(timeout: 1)",
          "116:     func test_queryBobAfterAlice() {",
          "120:         query(users: [\"alice\"]) { response in",
          "127:         query(users: [\"bob\"]) { response in",
          "134:         waitForExpectations(timeout: 1)",
          "138:     func test_executeMultipleAliceQueriesOnce() {",
          "",
          "[Added Lines]",
          "116:         await waitForExpectations(timeout: 1)",
          "120:     func test_queryBobAfterAlice() async {",
          "124:         await query(users: [\"alice\"]) { response in",
          "131:         await query(users: [\"bob\"]) { response in",
          "138:         await waitForExpectations(timeout: 1)",
          "142:     func test_executeMultipleAliceQueriesOnce() async {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:         let exp = expectation(description: \"exp\")",
          "146:         exp.expectedFulfillmentCount = 3",
          "149:             XCTAssertEqual(response, [",
          "150:                 \"alice\": [\"A\"],",
          "151:             ])",
          "152:             exp.fulfill()",
          "153:         }",
          "156:             XCTAssertEqual(response, [",
          "157:                 \"alice\": [\"A\"],",
          "158:             ])",
          "159:             exp.fulfill()",
          "160:         }",
          "163:             XCTAssertEqual(response, [",
          "164:                 \"alice\": [\"A\"],",
          "165:             ])",
          "166:             exp.fulfill()",
          "167:         }",
          "",
          "[Removed Lines]",
          "148:         query(users: [\"alice\"]) { response in",
          "155:         query(users: [\"alice\"]) { response in",
          "162:         query(users: [\"alice\"]) { response in",
          "169:         waitForExpectations(timeout: 1)",
          "",
          "[Added Lines]",
          "152:         await query(users: [\"alice\"]) { response in",
          "159:         await query(users: [\"alice\"]) { response in",
          "166:         await query(users: [\"alice\"]) { response in",
          "173:         await waitForExpectations(timeout: 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:         XCTAssertQueriesCount(1)",
          "175:     }",
          "178:         queryStartSpy = {",
          "179:             self.stubbedResult = .success([",
          "180:                 \"alice\": [\"A1\", \"A2\"]",
          "",
          "[Removed Lines]",
          "177:     func test_executeEachAliceQuerySeparately() {",
          "",
          "[Added Lines]",
          "181:     func test_executeEachAliceQuerySeparately() async {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:         }",
          "184:         var exp = expectation(description: \"exp\")",
          "186:             XCTAssertEqual(response, [",
          "187:                 \"alice\": [\"A\"],",
          "188:             ])",
          "189:             exp.fulfill()",
          "190:         }",
          "193:         exp = expectation(description: \"exp\")",
          "195:             XCTAssertEqual(response, [",
          "196:                 \"alice\": [\"A1\", \"A2\"],",
          "197:             ])",
          "198:             exp.fulfill()",
          "199:         }",
          "202:         exp = expectation(description: \"exp\")",
          "204:             XCTAssertEqual(response, [",
          "205:                 \"alice\": [\"A1\", \"A2\"],",
          "206:             ])",
          "207:             exp.fulfill()",
          "208:         }",
          "214:         XCTAssertQueriesCount(3)",
          "215:     }",
          "218:         queryStartSpy = {",
          "219:             self.stubbedResult = .success([",
          "220:                 \"bob\": [\"B1\", \"B2\"]",
          "",
          "[Removed Lines]",
          "185:         query(users: [\"alice\"]) { response in",
          "191:         waitForExpectations(timeout: 1)",
          "194:         query(users: [\"alice\"]) { response in",
          "200:         waitForExpectations(timeout: 1)",
          "203:         query(users: [\"alice\"]) { response in",
          "210:         waitForExpectations(timeout: 1)",
          "217:     func test_executeMultipleBobQueriesOnce() {",
          "",
          "[Added Lines]",
          "189:         await query(users: [\"alice\"]) { response in",
          "195:         await waitForExpectations(timeout: 1)",
          "198:         await query(users: [\"alice\"]) { response in",
          "204:         await waitForExpectations(timeout: 1)",
          "207:         await query(users: [\"alice\"]) { response in",
          "214:         await waitForExpectations(timeout: 1)",
          "221:     func test_executeMultipleBobQueriesOnce() async {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:         let exp = expectation(description: \"exp\")",
          "225:         exp.expectedFulfillmentCount = 2",
          "228:             XCTAssertEqual(response, [",
          "229:                 \"alice\": [\"A\"],",
          "230:                 \"bob\": [\"B\"],",
          "",
          "[Removed Lines]",
          "227:         query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "[Added Lines]",
          "231:         await query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:             exp.fulfill()",
          "233:         }",
          "236:             XCTAssertEqual(response, [",
          "237:                 \"alice\": [\"A\"],",
          "238:                 \"bob\": [\"B\"],",
          "",
          "[Removed Lines]",
          "235:         query(users: [\"bob\"]) { response in",
          "",
          "[Added Lines]",
          "239:         await query(users: [\"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:             exp.fulfill()",
          "241:         }",
          "",
          "[Removed Lines]",
          "243:         waitForExpectations(timeout: 1)",
          "",
          "[Added Lines]",
          "247:         await waitForExpectations(timeout: 1)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "248:         XCTAssertQueriesCount(1)",
          "249:     }",
          "252:         queryStartSpy = {",
          "253:             self.stubbedResult = .success([",
          "254:                 \"bob\": [\"B1\", \"B2\"],",
          "",
          "[Removed Lines]",
          "251:     func test_executeSecondBobQuerySeparately() {",
          "",
          "[Added Lines]",
          "255:     func test_executeSecondBobQuerySeparately() async {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "259:         let exp = expectation(description: \"exp\")",
          "260:         exp.expectedFulfillmentCount = 2",
          "263:             XCTAssertEqual(response, [",
          "264:                 \"alice\": [\"A\"],",
          "265:                 \"bob\": [\"B\"],",
          "",
          "[Removed Lines]",
          "262:         query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "[Added Lines]",
          "266:         await query(users: [\"alice\", \"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "267:             exp.fulfill()",
          "268:         }",
          "271:             XCTAssertEqual(response, [",
          "272:                 \"bob\": [\"B1\", \"B2\"],",
          "273:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "270:         query(users: [\"bob\", \"carol\"]) { response in",
          "",
          "[Added Lines]",
          "274:         await query(users: [\"bob\", \"carol\"]) { response in",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "275:             exp.fulfill()",
          "276:         }",
          "",
          "[Removed Lines]",
          "278:         waitForExpectations(timeout: 1)",
          "",
          "[Added Lines]",
          "282:         await waitForExpectations(timeout: 1)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "283:         XCTAssertQueriesCount(2)",
          "284:     }",
          "287:         let exp = expectation(description: \"exp\")",
          "288:         exp.expectedFulfillmentCount = 4",
          "291:             XCTAssertEqual(response, [",
          "292:                 \"alice\": [\"A\"],",
          "293:             ])",
          "",
          "[Removed Lines]",
          "286:     func test_nextQueryAggregatesPendingUsers() {",
          "290:         query(users: [\"alice\"]) { response in",
          "",
          "[Added Lines]",
          "290:     func test_nextQueryAggregatesPendingUsers() async {",
          "294:         await query(users: [\"alice\"]) { response in",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "300:             XCTAssertEqual(response, [",
          "301:                 \"bob\": [\"B\"],",
          "302:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "299:         query(users: [\"bob\"]) { response in",
          "",
          "[Added Lines]",
          "303:         await query(users: [\"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "305:             exp.fulfill()",
          "306:         }",
          "309:             XCTAssertEqual(response, [",
          "310:                 \"bob\": [\"B\"],",
          "311:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "308:         query(users: [\"carol\"]) { response in",
          "",
          "[Added Lines]",
          "312:         await query(users: [\"carol\"]) { response in",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "314:             exp.fulfill()",
          "315:         }",
          "318:             XCTAssertEqual(response, [",
          "319:                 \"bob\": [\"B\"],",
          "320:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "317:         query(users: [\"david\"]) { response in",
          "",
          "[Added Lines]",
          "321:         await query(users: [\"david\"]) { response in",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "323:             exp.fulfill()",
          "324:         }",
          "327:         XCTAssertQueriesCount(2)",
          "328:     }",
          "331:         var exp = expectation(description: \"exp\")",
          "332:         exp.expectedFulfillmentCount = 3",
          "335:             XCTAssertEqual(response, [",
          "336:                 \"alice\": [\"A\"],",
          "337:             ])",
          "338:             exp.fulfill()",
          "339:         }",
          "342:             XCTAssertEqual(response, [",
          "343:                 \"bob\": [\"B\"],",
          "344:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "326:         waitForExpectations(timeout: 1)",
          "330:     func test_pendingUsersResetAfterQuery() {",
          "334:         query(users: [\"alice\"]) { response in",
          "341:         query(users: [\"bob\"]) { response in",
          "",
          "[Added Lines]",
          "330:         await waitForExpectations(timeout: 1)",
          "334:     func test_pendingUsersResetAfterQuery() async {",
          "338:         await query(users: [\"alice\"]) { response in",
          "345:         await query(users: [\"bob\"]) { response in",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "346:             exp.fulfill()",
          "347:         }",
          "350:             XCTAssertEqual(response, [",
          "351:                 \"bob\": [\"B\"],",
          "352:                 \"carol\": [\"C\"],",
          "",
          "[Removed Lines]",
          "349:         query(users: [\"carol\"]) { response in",
          "",
          "[Added Lines]",
          "353:         await query(users: [\"carol\"]) { response in",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "354:             exp.fulfill()",
          "355:         }",
          "359:         exp = expectation(description: \"exp\")",
          "360:         exp.expectedFulfillmentCount = 2",
          "363:             XCTAssertEqual(response, [",
          "364:                 \"alice\": [\"A\"],",
          "365:             ])",
          "",
          "[Removed Lines]",
          "357:         waitForExpectations(timeout: 1)",
          "362:         query(users: [\"alice\"]) { response in",
          "",
          "[Added Lines]",
          "361:         await waitForExpectations(timeout: 1)",
          "366:         await query(users: [\"alice\"]) { response in",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "373:             XCTAssertEqual(response, [",
          "374:                 \"david\": [\"D\"],",
          "375:             ])",
          "376:             exp.fulfill()",
          "377:         }",
          "381:         XCTAssertQueriesCount(4)",
          "382:     }",
          "385:         scheduler = MXKeysQueryScheduler { _ in",
          "386:             try! await Task.sleep(nanoseconds: 1_000_000)",
          "387:             throw Error.dummy",
          "",
          "[Removed Lines]",
          "372:         query(users: [\"david\"]) { response in",
          "379:         waitForExpectations(timeout: 1)",
          "384:     func test_queryFail() {",
          "",
          "[Added Lines]",
          "376:         await query(users: [\"david\"]) { response in",
          "383:         await waitForExpectations(timeout: 1)",
          "388:     func test_queryFail() async {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "390:         let exp = expectation(description: \"exp\")",
          "393:             XCTFail(\"Should not succeed\")",
          "394:         }, failure: { error in",
          "395:             XCTAssertEqual(error as? Error, Error.dummy)",
          "396:             exp.fulfill()",
          "397:         })",
          "400:     }",
          "403:         stubbedResult = .failure(Error.dummy)",
          "404:         queryStartSpy = {",
          "405:             self.stubbedResult = .success([",
          "",
          "[Removed Lines]",
          "392:         query(users: [\"alice\"], completion: { _ in",
          "399:         waitForExpectations(timeout: 1)",
          "402:     func test_queryBobAfterFail() {",
          "",
          "[Added Lines]",
          "396:         await query(users: [\"alice\"], completion: { _ in",
          "403:         await waitForExpectations(timeout: 1)",
          "406:     func test_queryBobAfterFail() async {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "410:         let exp = expectation(description: \"exp\")",
          "411:         exp.expectedFulfillmentCount = 2",
          "414:             XCTFail(\"Should not succeed\")",
          "415:         }, failure: { error in",
          "416:             XCTAssertEqual(error as? Error, Error.dummy)",
          "417:             exp.fulfill()",
          "418:         })",
          "421:             XCTAssertEqual(response, [",
          "422:                 \"bob\": [\"B\"]",
          "423:             ])",
          "424:             exp.fulfill()",
          "425:         }",
          "428:     }",
          "",
          "[Removed Lines]",
          "413:         query(users: [\"alice\"], completion: { _ in",
          "420:         query(users: [\"bob\"]) { response in",
          "427:         waitForExpectations(timeout: 1)",
          "",
          "[Added Lines]",
          "417:         await query(users: [\"alice\"], completion: { _ in",
          "424:         await query(users: [\"bob\"]) { response in",
          "431:         await waitForExpectations(timeout: 1)",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift": [
          "File: MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift -> MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     public func open(_ onComplete: (() -> Void)!, failure: ((Error?) -> Void)!) {",
          "76:         onComplete?()",
          "77:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     public func userId() -> String! {",
          "82:         storeAccount?.userId",
          "83:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         olmSessions[key] = session",
          "190:     }",
          "",
          "[Removed Lines]",
          "187:     public func store(_ session: MXOlmSession!, forDevice deviceKey: String!) {",
          "188:         let key = OlmSessionMapKey(sessionId: session.session.sessionIdentifier(), deviceKey: deviceKey)",
          "",
          "[Added Lines]",
          "193:     public func store(_ session: MXOlmSession!) {",
          "194:         let key = OlmSessionMapKey(sessionId: session.session.sessionIdentifier(), deviceKey: session.deviceKey)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     public func sessions(withDevice deviceKey: String!) -> [MXOlmSession]! {",
          "203:         Array(olmSessions.filter { $0.key.deviceKey == deviceKey }.values)",
          "204:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     public func sessions() -> [MXOlmSession]! {",
          "213:         Array(olmSessions.values)",
          "214:     }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift||MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift -> MatrixSDKTests/Crypto/Migration/Data/MXCryptoMigrationStoreUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "18: import XCTest",
          "19: @testable import MatrixSDK",
          "21: #if DEBUG",
          "23: import MatrixSDKCrypto",
          "25: class MXCryptoMigrationStoreUnitTests: XCTestCase {",
          "27:     var pickleKey: Data!",
          "28:     var legacyStore: MXMemoryCryptoStore!",
          "29:     var store: MXCryptoMigrationStore!",
          "31:     override func setUp() {",
          "32:         pickleKey = \"1234\".data(using: .ascii)!",
          "34:         let credentials = MXCredentials()",
          "35:         credentials.userId = \"Alice\"",
          "36:         credentials.deviceId = \"ABC\"",
          "38:         legacyStore = MXMemoryCryptoStore(credentials: credentials)",
          "39:         legacyStore.setAccount(OLMAccount(newAccount: ()))",
          "41:         store = .init(legacyStore: legacyStore)",
          "42:     }",
          "46:     func extractData(pickleKey: Data? = nil) throws -> MigrationData {",
          "47:         try store.extractData(with: pickleKey ?? self.pickleKey)",
          "48:     }",
          "50:     @discardableResult",
          "51:     func storeGroupSession(",
          "52:         roomId: String = \"ABC\",",
          "53:         senderKey: String? = \"Bob\",",
          "54:         isUntrusted: Bool = false,",
          "55:         backedUp: Bool = false",
          "56:     ) -> MXOlmInboundGroupSession {",
          "57:         let device = MXOlmDevice(store: legacyStore)!",
          "58:         let outbound = device.createOutboundGroupSessionForRoom(withRoomId: roomId)",
          "60:         let session = MXOlmInboundGroupSession(sessionKey: outbound!.sessionKey)!",
          "61:         session.senderKey = senderKey",
          "62:         session.roomId = roomId",
          "63:         session.keysClaimed = [\"A\": \"1\"]",
          "64:         session.isUntrusted = isUntrusted",
          "65:         legacyStore.store([session])",
          "67:         if backedUp {",
          "68:             legacyStore.markBackupDone(for: [session])",
          "69:         }",
          "70:         return session",
          "71:     }",
          "73:     func storeSecret(_ secret: String, secretId: Unmanaged<NSString>) {",
          "74:         legacyStore.storeSecret(secret, withSecretId: secretId.takeUnretainedValue() as String)",
          "75:     }",
          "79:     func test_missingAccountFailsExtraction() {",
          "80:         legacyStore.setAccount(nil)",
          "81:         do {",
          "82:             _ = try extractData()",
          "83:             XCTFail(\"Should not succeed\")",
          "84:         } catch MXCryptoMigrationStore.Error.missingAccount {",
          "85:             XCTAssert(true)",
          "86:         } catch {",
          "87:             XCTFail(\"Unknown error\")",
          "88:         }",
          "89:     }",
          "91:     func test_extractsAccount() throws {",
          "92:         let legacyPickle = try legacyStore.account().serializeData(withKey: pickleKey)",
          "94:         let account = try extractData().account",
          "96:         XCTAssertEqual(account.userId, \"Alice\")",
          "97:         XCTAssertEqual(account.deviceId, \"ABC\")",
          "98:         XCTAssertEqual(account.pickle, legacyPickle)",
          "99:         XCTAssertTrue(account.shared)",
          "100:         XCTAssertEqual(account.uploadedSignedKeyCount, 50)",
          "101:     }",
          "103:     func test_extractsSession() throws {",
          "104:         let session = MXOlmSession(olmSession: OLMSession(), deviceKey: \"XYZ\")",
          "105:         session.lastReceivedMessageTs = 123",
          "106:         legacyStore.store(session)",
          "107:         let pickle = try session.session.serializeData(withKey: pickleKey)",
          "109:         let sessions = try extractData().sessions",
          "111:         XCTAssertEqual(sessions.count, 1)",
          "112:         XCTAssertEqual(sessions[0].pickle, pickle)",
          "113:         XCTAssertEqual(sessions[0].senderKey, \"XYZ\")",
          "114:         XCTAssertFalse(sessions[0].createdUsingFallbackKey)",
          "115:         XCTAssertEqual(sessions[0].creationTime, \"123\")",
          "116:         XCTAssertEqual(sessions[0].lastUseTime, \"123\")",
          "117:     }",
          "119:     func test_extractsMultipleSession() throws {",
          "120:         for i in 0 ..< 3 {",
          "121:             legacyStore.store(MXOlmSession(olmSession: OLMSession(), deviceKey: \"\\(i)\"))",
          "122:         }",
          "124:         let sessions = try extractData().sessions",
          "126:         XCTAssertEqual(sessions.count, 3)",
          "127:     }",
          "129:     func test_extractsGroupSession() throws {",
          "130:         let session = storeGroupSession(roomId: \"abcd\")",
          "131:         let pickle = try session.session.serializeData(withKey: pickleKey)",
          "133:         let sessions = try extractData().inboundGroupSessions",
          "135:         XCTAssertEqual(sessions.count, 1)",
          "136:         XCTAssertEqual(sessions[0].pickle, pickle)",
          "137:         XCTAssertEqual(sessions[0].senderKey, \"Bob\")",
          "138:         XCTAssertEqual(sessions[0].signingKey, [\"A\": \"1\"])",
          "139:         XCTAssertEqual(sessions[0].roomId, \"abcd\")",
          "140:         XCTAssertEqual(sessions[0].forwardingChains, [])",
          "141:     }",
          "143:     func test_extractsOnlyValidGroupSessions() throws {",
          "144:         for i in 0 ..< 4 {",
          "145:             let isValid = i % 2 == 0",
          "146:             storeGroupSession(senderKey: isValid ? \"Bob\" : nil)",
          "147:         }",
          "149:         let sessions = try extractData().inboundGroupSessions",
          "151:         XCTAssertEqual(sessions.count, 2)",
          "152:     }",
          "154:     func test_extractsImportedGroupSessionStatus() throws {",
          "155:         storeGroupSession(isUntrusted: true)",
          "156:         storeGroupSession(isUntrusted: false)",
          "157:         storeGroupSession(isUntrusted: false)",
          "159:         let sessions = try extractData().inboundGroupSessions",
          "161:         XCTAssertEqual(sessions.count, 3)",
          "162:         XCTAssertTrue(sessions[0].imported)",
          "163:         XCTAssertFalse(sessions[1].imported)",
          "164:         XCTAssertFalse(sessions[1].imported)",
          "165:     }",
          "167:     func test_extractsBackedUpGroupSessionStatus() throws {",
          "168:         storeGroupSession(backedUp: false)",
          "169:         storeGroupSession(backedUp: true)",
          "170:         storeGroupSession(backedUp: false)",
          "172:         let sessions = try extractData().inboundGroupSessions",
          "174:         XCTAssertEqual(sessions.count, 3)",
          "175:         XCTAssertFalse(sessions[0].backedUp)",
          "176:         XCTAssertTrue(sessions[1].backedUp)",
          "177:         XCTAssertFalse(sessions[2].backedUp)",
          "178:     }",
          "180:     func test_extractsBackupVersion() throws {",
          "181:         legacyStore.backupVersion = \"5\"",
          "182:         let version = try extractData().backupVersion",
          "183:         XCTAssertEqual(version, \"5\")",
          "184:     }",
          "186:     func test_extractsBackupRecoveryKey() throws {",
          "187:         let privateKey = \"ABCD\"",
          "188:         storeSecret(privateKey, secretId: MXSecretId.keyBackup)",
          "190:         let key = try extractData().backupRecoveryKey",
          "192:         let recovery = MXRecoveryKey.encode(MXBase64Tools.data(fromBase64: privateKey))",
          "193:         XCTAssertNotNil(key)",
          "194:         XCTAssertNotNil(recovery)",
          "195:         XCTAssertEqual(key, recovery)",
          "196:     }",
          "198:     func test_extractsPickeKey() throws {",
          "199:         let pickleKey = \"some key\".data(using: .ascii)!",
          "200:         let key = try extractData(pickleKey: pickleKey).pickleKey",
          "201:         XCTAssertEqual(key, [UInt8](pickleKey))",
          "202:     }",
          "204:     func test_extractsCrossSigning() throws {",
          "205:         storeSecret(\"MASTER\", secretId: MXSecretId.crossSigningMaster)",
          "206:         storeSecret(\"USER\", secretId: MXSecretId.crossSigningUserSigning)",
          "207:         storeSecret(\"SELF\", secretId: MXSecretId.crossSigningSelfSigning)",
          "209:         let crossSigning = try extractData().crossSigning",
          "211:         XCTAssertEqual(crossSigning.masterKey, \"MASTER\")",
          "212:         XCTAssertEqual(crossSigning.userSigningKey, \"USER\")",
          "213:         XCTAssertEqual(crossSigning.selfSigningKey, \"SELF\")",
          "214:     }",
          "216:     func test_extractsOnlyTrackedUsers() throws {",
          "217:         let users = [",
          "218:             \"Alice\": MXDeviceTrackingStatusNotTracked,",
          "219:             \"Bob\": MXDeviceTrackingStatusPendingDownload,",
          "220:             \"Carol\": MXDeviceTrackingStatusDownloadInProgress,",
          "221:             \"Dave\": MXDeviceTrackingStatusUpToDate,",
          "222:         ].mapValues { NSNumber(value: $0.rawValue) }",
          "223:         legacyStore.storeDeviceTrackingStatus(users)",
          "225:         let trackedUsers = try extractData().trackedUsers",
          "227:         XCTAssertEqual(Set(trackedUsers), [\"Bob\", \"Carol\", \"Dave\"])",
          "228:     }",
          "229: }",
          "231: #endif",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift||MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift": [
          "File: MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift -> MatrixSDKTests/Crypto/Migration/MXCryptoMigrationV2Tests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: #if DEBUG",
          "21: import MatrixSDKCrypto",
          "22: @testable import MatrixSDK",
          "24: class MXCryptoMigrationV2Tests: XCTestCase {",
          "25:     class KeyProvider: NSObject, MXKeyProviderDelegate {",
          "26:         func isEncryptionAvailableForData(ofType dataType: String) -> Bool {",
          "27:             return true",
          "28:         }",
          "30:         func hasKeyForData(ofType dataType: String) -> Bool {",
          "31:             return true",
          "32:         }",
          "34:         func keyDataForData(ofType dataType: String) -> MXKeyData? {",
          "35:             MXRawDataKey(key: \"1234\".data(using: .ascii)!)",
          "36:         }",
          "37:     }",
          "39:     var data: MatrixSDKTestsData!",
          "40:     var e2eData: MatrixSDKTestsE2EData!",
          "41:     var keyProvider: KeyProvider!",
          "43:     override func setUp() {",
          "44:         data = MatrixSDKTestsData()",
          "45:         e2eData = MatrixSDKTestsE2EData(matrixSDKTestsData: data)",
          "47:         keyProvider = KeyProvider()",
          "48:         MXKeyProvider.sharedInstance().delegate = keyProvider",
          "49:     }",
          "51:     override func tearDown() {",
          "52:         MXKeyProvider.sharedInstance().delegate = nil",
          "53:     }",
          "55:     func test_canDecryptMessageAfterMigratingLegacyCrypto() throws {",
          "56:         e2eData.doE2ETestWithAliceAndBob(inARoom: self, cryptedBob: true, warnOnUnknowDevices: false) { aliceSession, bobSession, roomId, exp in",
          "57:             guard",
          "58:                 let session = aliceSession,",
          "59:                 let userId = session.myUserId,",
          "60:                 let deviceId = session.myDeviceId,",
          "61:                 let store = session.legacyCrypto?.store,",
          "62:                 let room = session.room(withRoomId: roomId)",
          "63:             else {",
          "64:                 XCTFail(\"Missing dependencies\")",
          "65:                 return",
          "66:             }",
          "68:             var event: MXEvent!",
          "69:             let clearTextMessage = \"Hi bob\"",
          "72:             room.sendTextMessage(clearTextMessage, localEcho: &event) { _ in",
          "75:                 event.setClearData(nil)",
          "76:                 XCTAssertTrue(event.isEncrypted)",
          "77:                 XCTAssertEqual(event.content[\"algorithm\"] as? String, kMXCryptoMegolmAlgorithm)",
          "78:                 XCTAssertNotNil(event.content[\"ciphertext\"])",
          "81:                 do {",
          "82:                     let migration = MXCryptoMigrationV2(legacyStore: store)",
          "83:                     try migration.migrateCrypto()",
          "84:                 } catch {",
          "85:                     XCTFail(\"Cannot migrate - \\(error)\")",
          "86:                 }",
          "90:                 do {",
          "91:                     let url = try MXCryptoMachine.storeURL(for: userId)",
          "92:                     let machine = try OlmMachine(",
          "93:                         userId: userId,",
          "94:                         deviceId: deviceId,",
          "95:                         path: url.path,",
          "96:                         passphrase: nil",
          "97:                     )",
          "99:                     let decrypted = try machine.decryptRoomEvent(event: event.jsonString() ?? \"\", roomId: roomId!)",
          "100:                     let result = try MXEventDecryptionResult(event: decrypted)",
          "101:                     let content = result.clearEvent[\"content\"] as? [String: Any]",
          "105:                     XCTAssertEqual(content?[\"body\"] as? String, clearTextMessage)",
          "107:                 } catch {",
          "108:                     XCTFail(\"Cannot decrypt - \\(error)\")",
          "109:                 }",
          "111:                 session.close()",
          "112:                 bobSession?.close()",
          "113:                 exp?.fulfill()",
          "114:             }",
          "115:         }",
          "116:     }",
          "117: }",
          "119: #endif",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
          "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "2174:                                 aliceSession2.legacyCrypto.warnOnUnknowDevices = NO;",
          "2180:                                 MXRoom *roomFromAlicePOV2 = [aliceSession2 roomWithRoomId:roomId];",
          "",
          "[Removed Lines]",
          "2177:                                 [aliceSession2.legacyCrypto.store storeSession:olmSession forDevice:bobSession.crypto.deviceCurve25519Key];",
          "",
          "[Added Lines]",
          "2177:                                 [aliceSession2.legacyCrypto.store storeSession:olmSession];",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/CryptoTests.xctestplan||MatrixSDKTests/TestPlans/CryptoTests.xctestplan": [
          "File: MatrixSDKTests/TestPlans/CryptoTests.xctestplan -> MatrixSDKTests/TestPlans/CryptoTests.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         \"MXCrossSigningTests\",",
          "34:         \"MXCrossSigningVerificationTests\",",
          "35:         \"MXCryptoKeyVerificationTests\",",
          "36:         \"MXCryptoSecretStorageTests\",",
          "37:         \"MXCryptoShareTests\",",
          "38:         \"MXCryptoTests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         \"MXCryptoMigrationV2Tests\",",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         \"MXCrossSigningV2UnitTests\",",
          "46:         \"MXCryptoKeyBackupEngineUnitTests\",",
          "47:         \"MXCryptoMachineUnitTests\",",
          "48:         \"MXCryptoRequestsUnitTests\",",
          "49:         \"MXDeviceInfoSourceUnitTests\",",
          "50:         \"MXDeviceInfoUnitTests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:         \"MXCryptoMigrationStoreUnitTests\",",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         \"MXCrossSigningV2UnitTests\",",
          "56:         \"MXCryptoKeyBackupEngineUnitTests\",",
          "57:         \"MXCryptoMachineUnitTests\",",
          "58:         \"MXCryptoRequestsUnitTests\",",
          "59:         \"MXDeviceInfoSourceUnitTests\",",
          "60:         \"MXDeviceInfoUnitTests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         \"MXCryptoMigrationStoreUnitTests\",",
          "",
          "---------------"
        ],
        "changelog.d/pr-1681.change||changelog.d/pr-1681.change": [
          "File: changelog.d/pr-1681.change -> changelog.d/pr-1681.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: CryptoV2: Create crypto migration data",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a08b434e512950e36e2e6f160dfcf2c580f06d1",
      "candidate_info": {
        "commit_hash": "2a08b434e512950e36e2e6f160dfcf2c580f06d1",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/2a08b434e512950e36e2e6f160dfcf2c580f06d1",
        "files": [
          "MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/MXSDKOptions.h",
          "MatrixSDK/MXSDKOptions.m",
          "MatrixSDK/MXSession.m",
          "changelog.d/pr-1606.change"
        ],
        "message": "Remove megolm decrypt cache build flag",
        "before_after_code_files": [
          "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/MXSDKOptions.h||MatrixSDK/MXSDKOptions.h",
          "MatrixSDK/MXSDKOptions.m||MatrixSDK/MXSDKOptions.m",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "changelog.d/pr-1606.change||changelog.d/pr-1606.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m"
          ],
          "candidate": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
          "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:     [self.store performSessionOperationWithGroupSessionWithId:session.session.sessionIdentifier senderKey:session.senderKey block:^(MXOlmInboundGroupSession *inboundGroupSession) {",
          "430:         inboundGroupSession.untrusted = NO;",
          "431:     }];",
          "433:     {",
          "439:     }",
          "440: }",
          "",
          "[Removed Lines]",
          "432:     if (MXSDKOptions.sharedInstance.enableGroupSessionCache)",
          "434:         @synchronized (self.inboundGroupSessionCache)",
          "435:         {",
          "436:             session.untrusted = NO;",
          "437:             [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
          "438:         }",
          "",
          "[Added Lines]",
          "432:     @synchronized (self.inboundGroupSessionCache)",
          "434:         session.untrusted = NO;",
          "435:         [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573: - (void)performGroupSessionOperationWithSessionId:(NSString*)sessionId senderKey:(NSString*)senderKey block:(void (^)(MXOlmInboundGroupSession *inboundGroupSession))block",
          "574: {",
          "588:     {",
          "590:         {",
          "598:         }",
          "603:     }",
          "604:     if (stopTracking)",
          "605:     {",
          "",
          "[Removed Lines]",
          "583:     BOOL enableCache = MXSDKOptions.sharedInstance.enableGroupSessionCache;",
          "584:     NSString *operation = enableCache ? @\"megolm.decrypt.cache\" : @\"megolm.decrypt.store\";",
          "585:     StopDurationTracking stopTracking = [MXSDKOptions.sharedInstance.analyticsDelegate startDurationTrackingForName:@\"MXOlmDevice\" operation:operation];",
          "587:     if (enableCache)",
          "589:         @synchronized (self.inboundGroupSessionCache)",
          "591:             MXOlmInboundGroupSession *session = (MXOlmInboundGroupSession *)[self.inboundGroupSessionCache get:sessionId];",
          "592:             if (!session)",
          "593:             {",
          "594:                 session = [store inboundGroupSessionWithId:sessionId andSenderKey:senderKey];",
          "595:                 [self.inboundGroupSessionCache put:sessionId object:session];",
          "596:             }",
          "597:             block(session);",
          "599:     }",
          "600:     else",
          "601:     {",
          "602:         [store performSessionOperationWithGroupSessionWithId:sessionId senderKey:senderKey block:block];",
          "",
          "[Added Lines]",
          "572:     StopDurationTracking stopTracking = [MXSDKOptions.sharedInstance.analyticsDelegate startDurationTrackingForName:@\"MXOlmDevice\" operation:@\"megolm.decrypt.cache\"];",
          "573:     @synchronized (self.inboundGroupSessionCache)",
          "575:         MXOlmInboundGroupSession *session = (MXOlmInboundGroupSession *)[self.inboundGroupSessionCache get:sessionId];",
          "576:         if (!session)",
          "578:             session = [store inboundGroupSessionWithId:sessionId andSenderKey:senderKey];",
          "579:             [self.inboundGroupSessionCache put:sessionId object:session];",
          "581:         block(session);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711: - (void)storeInboundGroupSessions:(NSArray <MXOlmInboundGroupSession *>*)sessions",
          "712: {",
          "713:     [store storeInboundGroupSessions:sessions];",
          "715:     {",
          "717:         {",
          "722:         }",
          "723:     }",
          "724: }",
          "",
          "[Removed Lines]",
          "714:     if (MXSDKOptions.sharedInstance.enableGroupSessionCache)",
          "716:         @synchronized (self.inboundGroupSessionCache)",
          "718:             for (MXOlmInboundGroupSession *session in sessions)",
          "719:             {",
          "720:                 [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
          "721:             }",
          "",
          "[Added Lines]",
          "693:     @synchronized (self.inboundGroupSessionCache)",
          "695:         for (MXOlmInboundGroupSession *session in sessions)",
          "697:             [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSDKOptions.h||MatrixSDK/MXSDKOptions.h": [
          "File: MatrixSDK/MXSDKOptions.h -> MatrixSDK/MXSDKOptions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: #endif",
          "228:  Enable symmetric room key backups",
          "",
          "[Removed Lines]",
          "220:  Enable performance optimization where inbound group sessions are cached between decryption of events",
          "221:  rather than fetched from the store every time.",
          "223:  @remark YES by default",
          "225: @property (nonatomic) BOOL enableGroupSessionCache;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSDKOptions.m||MatrixSDK/MXSDKOptions.m": [
          "File: MatrixSDK/MXSDKOptions.m -> MatrixSDK/MXSDKOptions.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         _enableCryptoV2 = NO;",
          "60:         #endif",
          "63:         _enableSymmetricBackup = NO;",
          "64:         _enableNewClientInformationFeature = NO;",
          "65:     }",
          "",
          "[Removed Lines]",
          "62:         _enableGroupSessionCache = YES;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1412:     dispatch_group_t initialSyncDispatchGroup = dispatch_group_create();",
          "1414:     __block MXTaskProfile *syncTaskProfile;",
          "1416:     __block MXSyncResponse *syncResponse;",
          "1417:     __block BOOL useLiveResponse = YES;",
          "",
          "[Removed Lines]",
          "1415:     __block StopDurationTracking stopDurationTracking;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1444:             BOOL isInitialSync = !self.isEventStreamInitialised;",
          "1445:             MXTaskProfileName taskName = isInitialSync ? MXTaskProfileNameStartupInitialSync : MXTaskProfileNameStartupIncrementalSync;",
          "1446:             syncTaskProfile = [MXSDKOptions.sharedInstance.profiler startMeasuringTaskWithName:taskName];",
          "1454:         }",
          "1456:         NSString * streamToken = self.store.eventStreamToken;",
          "",
          "[Removed Lines]",
          "1447:             if (isInitialSync) {",
          "1451:                 NSString *operation = MXSDKOptions.sharedInstance.enableGroupSessionCache ? @\"initialSync.enableGroupSessionCache\" : @\"initialSync.diableGroupSessionCache\";",
          "1452:                 stopDurationTracking = [MXSDKOptions.sharedInstance.analyticsDelegate startDurationTrackingForName:@\"MXSession\" operation:operation];",
          "1453:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1493:             syncTaskProfile.units = syncResponse.rooms.join.count;",
          "1495:             [MXSDKOptions.sharedInstance.profiler stopMeasuringTaskWithProfile:syncTaskProfile];",
          "1499:         }",
          "1501:         BOOL isInitialSync = !self.isEventStreamInitialised;",
          "",
          "[Removed Lines]",
          "1496:             if (stopDurationTracking) {",
          "1497:                 stopDurationTracking();",
          "1498:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "changelog.d/pr-1606.change||changelog.d/pr-1606.change": [
          "File: changelog.d/pr-1606.change -> changelog.d/pr-1606.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Crypto: Remove megolm decrypt cache build flag",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0efa1a1d32cee15297e57893f1021f72b78a482",
      "candidate_info": {
        "commit_hash": "d0efa1a1d32cee15297e57893f1021f72b78a482",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/d0efa1a1d32cee15297e57893f1021f72b78a482",
        "files": [
          "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift",
          "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/MXSessionStartupProgress.swift"
        ],
        "message": "Fix typos",
        "before_after_code_files": [
          "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift||MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift",
          "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift||MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/MXCryptoV2Factory.swift||MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/MXSessionStartupProgress.swift||MatrixSDK/MXSessionStartupProgress.swift"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m"
          ],
          "candidate": [
            "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift||MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift": [
          "File: MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift -> MatrixSDK/Background/Crypto/MXBackgroundCrypto.swift"
        ],
        "MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift||MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift": [
          "File: MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift -> MatrixSDK/Crypto/Algorithms/RoomEvent/MXRoomEventDecryption.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:             return",
          "82:         }",
          "85:         let events = undecryptedEvents[sessionId]?.map(\\.value) ?? []",
          "86:         retryDecryption(events: events)",
          "87:     }",
          "",
          "[Removed Lines]",
          "84:         log.debug(\"Recieved a new room key as `\\(event.type ?? \"\")` for session \\(sessionId)\")",
          "",
          "[Added Lines]",
          "84:         log.debug(\"Received a new room key as `\\(event.type ?? \"\")` for session \\(sessionId)\")",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift"
        ],
        "MatrixSDK/Crypto/MXCryptoV2Factory.swift||MatrixSDK/Crypto/MXCryptoV2Factory.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2Factory.swift -> MatrixSDK/Crypto/MXCryptoV2Factory.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         if",
          "81:             MXRealmCryptoStore.hasData(for: credentials),",
          "84:         {",
          "85:             log.debug(\"Legacy crypto store exists\")",
          "86:             return legacyStore",
          "",
          "[Removed Lines]",
          "82:             let legacyStore = MXRealmCryptoStore(credentials: credentials),",
          "83:             legacyStore.account() != nil",
          "",
          "[Added Lines]",
          "82:             let legacyStore = MXRealmCryptoStore(credentials: credentials)",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
          "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:             }",
          "394:             else",
          "395:             {",
          "397:                 existingSession = nil;",
          "398:             }",
          "399:         }",
          "",
          "[Removed Lines]",
          "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Recieved a safer but disconnected key, which will override the existing unsafe key\");",
          "",
          "[Added Lines]",
          "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Received a safer but disconnected key, which will override the existing unsafe key\");",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift -> MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift"
        ],
        "MatrixSDK/MXSessionStartupProgress.swift||MatrixSDK/MXSessionStartupProgress.swift": [
          "File: MatrixSDK/MXSessionStartupProgress.swift -> MatrixSDK/MXSessionStartupProgress.swift"
        ]
      }
    },
    {
      "candidate_hash": "5b75d4b3a81fad665218c0bc81e8e932e96ba62e",
      "candidate_info": {
        "commit_hash": "5b75d4b3a81fad665218c0bc81e8e932e96ba62e",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/5b75d4b3a81fad665218c0bc81e8e932e96ba62e",
        "files": [
          "MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Aggregations/MXAggregations.m",
          "MatrixSDK/Contrib/Swift/MXSession.swift",
          "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h",
          "MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift",
          "MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift",
          "MatrixSDKTests/JSONModels/MXEventFixtures.swift",
          "MatrixSDKTests/MXClientInformationServiceUnitTests.swift",
          "MatrixSDKTests/MXCrossSigningVerificationTests.m",
          "MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/6809.change"
        ],
        "message": "Incoming verification with Crypto V2",
        "before_after_code_files": [
          "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Aggregations/MXAggregations.m||MatrixSDK/Aggregations/MXAggregations.m",
          "MatrixSDK/Contrib/Swift/MXSession.swift||MatrixSDK/Contrib/Swift/MXSession.swift",
          "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift||MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift||MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift",
          "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m",
          "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h",
          "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift||MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift",
          "MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift||MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift",
          "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
          "MatrixSDKTests/MXClientInformationServiceUnitTests.swift||MatrixSDKTests/MXClientInformationServiceUnitTests.swift",
          "MatrixSDKTests/MXCrossSigningVerificationTests.m||MatrixSDKTests/MXCrossSigningVerificationTests.m",
          "MatrixSDKTests/MXCryptoKeyVerificationTests.m||MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/6809.change||changelog.d/6809.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ],
          "candidate": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
          "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249:   B16F35A325F916A00029AE98 /* MXRoomTypeMapper.swift in Sources */ = {isa = PBXBuildFile; fileRef = B16F35A125F9169F0029AE98 /* MXRoomTypeMapper.swift */; };",
          "1250:   B1710B1F2613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1710B1E2613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift */; };",
          "1251:   B1710B202613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */ = {isa = PBXBuildFile; fileRef = B1710B1E2613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift */; };",
          "1254:   B17982F52119E4A2001FD722 /* MXRoomCreateContent.h in Headers */ = {isa = PBXBuildFile; fileRef = B17982ED2119E49E001FD722 /* MXRoomCreateContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "1255:   B17982F62119E4A2001FD722 /* MXRoomTombStoneContent.m in Sources */ = {isa = PBXBuildFile; fileRef = B17982EE2119E49F001FD722 /* MXRoomTombStoneContent.m */; };",
          "1256:   B17982F72119E4A2001FD722 /* MXRoomPredecessorInfo.h in Headers */ = {isa = PBXBuildFile; fileRef = B17982EF2119E49F001FD722 /* MXRoomPredecessorInfo.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "",
          "[Removed Lines]",
          "1252:   B176B25123EB03E4001879C6 /* MXAggregationPaginatedResponse_Private.h in Headers */ = {isa = PBXBuildFile; fileRef = B176B25023EB03E3001879C6 /* MXAggregationPaginatedResponse_Private.h */; };",
          "1253:   B176B25223EB03E4001879C6 /* MXAggregationPaginatedResponse_Private.h in Headers */ = {isa = PBXBuildFile; fileRef = B176B25023EB03E3001879C6 /* MXAggregationPaginatedResponse_Private.h */; };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1913:   ED7019FA2886CA6C00FC31B9 /* Sas+Stub.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED7019F32886CA6C00FC31B9 /* Sas+Stub.swift */; };",
          "1914:   ED7019FB2886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED7019F42886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift */; };",
          "1915:   ED7019FC2886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED7019F42886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift */; };",
          "1916:   ED88999127F2065D00718486 /* MXRoomAliasResolution.h in Headers */ = {isa = PBXBuildFile; fileRef = ED88998F27F2065C00718486 /* MXRoomAliasResolution.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "1917:   ED88999227F2065D00718486 /* MXRoomAliasResolution.h in Headers */ = {isa = PBXBuildFile; fileRef = ED88998F27F2065C00718486 /* MXRoomAliasResolution.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "1918:   ED88999327F2065D00718486 /* MXRoomAliasResolution.m in Sources */ = {isa = PBXBuildFile; fileRef = ED88999027F2065D00718486 /* MXRoomAliasResolution.m */; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1914:   ED751DAA28EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED751DA928EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift */; };",
          "1915:   ED751DAB28EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED751DA928EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift */; };",
          "1916:   ED751DAE28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */; };",
          "1917:   ED751DAF28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */; };",
          "1918:   ED76A4AD28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */; };",
          "1919:   ED76A4AE28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */; };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2687:   B16C56E1261D0A9D00604765 /* MXSpaceChildInfo.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXSpaceChildInfo.swift; sourceTree = \"<group>\"; };",
          "2688:   B16F35A125F9169F0029AE98 /* MXRoomTypeMapper.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomTypeMapper.swift; sourceTree = \"<group>\"; };",
          "2689:   B1710B1E2613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXSpaceChildrenRequestParameters.swift; sourceTree = \"<group>\"; };",
          "2691:   B17982ED2119E49E001FD722 /* MXRoomCreateContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomCreateContent.h; sourceTree = \"<group>\"; };",
          "2692:   B17982EE2119E49F001FD722 /* MXRoomTombStoneContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomTombStoneContent.m; sourceTree = \"<group>\"; };",
          "2693:   B17982EF2119E49F001FD722 /* MXRoomPredecessorInfo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomPredecessorInfo.h; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "2690:   B176B25023EB03E3001879C6 /* MXAggregationPaginatedResponse_Private.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXAggregationPaginatedResponse_Private.h; sourceTree = \"<group>\"; };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3028:   ED7019F02886CA6C00FC31B9 /* VerificationRequest+Stub.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = \"VerificationRequest+Stub.swift\"; sourceTree = \"<group>\"; };",
          "3029:   ED7019F32886CA6C00FC31B9 /* Sas+Stub.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = \"Sas+Stub.swift\"; sourceTree = \"<group>\"; };",
          "3030:   ED7019F42886CA6C00FC31B9 /* MXSASTransactionV2UnitTests.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXSASTransactionV2UnitTests.swift; sourceTree = \"<group>\"; };",
          "3031:   ED88998F27F2065C00718486 /* MXRoomAliasResolution.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomAliasResolution.h; sourceTree = \"<group>\"; };",
          "3032:   ED88999027F2065D00718486 /* MXRoomAliasResolution.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomAliasResolution.m; sourceTree = \"<group>\"; };",
          "3033:   ED8943D327E34762000FC39C /* MXMemoryRoomStoreUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMemoryRoomStoreUnitTests.swift; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3034:   ED751DA928EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationManagerV2UnitTests.swift; sourceTree = \"<group>\"; };",
          "3035:   ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationStateResolverUnitTests.swift; sourceTree = \"<group>\"; };",
          "3036:   ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationStateResolver.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3785:    children = (",
          "3786:     327E9AE52285A8C400A98BC1 /* MXAggregationPaginatedResponse.h */,",
          "3787:     327E9AE62285A8C400A98BC1 /* MXAggregationPaginatedResponse.m */,",
          "3789:    );",
          "3790:    path = Aggregations;",
          "3791:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "3788:     B176B25023EB03E3001879C6 /* MXAggregationPaginatedResponse_Private.h */,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3950:     3297912623A93D4B00F7BB9B /* MXKeyVerification.m */,",
          "3951:     3297912C23AA126400F7BB9B /* MXKeyVerificationStatusResolver.h */,",
          "3952:     3297912D23AA126400F7BB9B /* MXKeyVerificationStatusResolver.m */,",
          "3953:    );",
          "3954:    path = Status;",
          "3955:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3958:     ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5390:   ED7019ED2886CA6C00FC31B9 /* Verification */ = {",
          "5391:    isa = PBXGroup;",
          "5392:    children = (",
          "5393:     ED7019EE2886CA6C00FC31B9 /* Requests */,",
          "5394:     ED7019F12886CA6C00FC31B9 /* Transactions */,",
          "5395:    );",
          "5396:    path = Verification;",
          "5397:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5399:     ED751DAC28EDEC50003748C3 /* Status */,",
          "5402:     ED751DA928EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift */,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5422:    path = SAS;",
          "5423:    sourceTree = \"<group>\";",
          "5424:   };",
          "5425:   ED8943D127E3474A000FC39C /* Store */ = {",
          "5426:    isa = PBXGroup;",
          "5427:    children = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5433:   ED751DAC28EDEC50003748C3 /* Status */ = {",
          "5434:    isa = PBXGroup;",
          "5435:    children = (",
          "5436:     ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */,",
          "5437:    );",
          "5438:    path = Status;",
          "5439:    sourceTree = \"<group>\";",
          "5440:   };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5696:     ECDA764627BA939E000C48CF /* MXRoomVersionsCapability.h in Headers */,",
          "5697:     325AD43F23BE3E7500FF5277 /* MXCrossSigningInfo.h in Headers */,",
          "5698:     32AF928F24110ADD0008A0FD /* MXSecretShareManager_Private.h in Headers */,",
          "5700:     ED5C753E28B3E80300D24E85 /* MXLog.h in Headers */,",
          "5701:     ECD289B426F9F00E00F268CF /* MXRoomSummarySentStatus.h in Headers */,",
          "5702:     021AFBA62179E91900742B2C /* MXEncryptedContentKey.h in Headers */,",
          "",
          "[Removed Lines]",
          "5699:     B176B25123EB03E4001879C6 /* MXAggregationPaginatedResponse_Private.h in Headers */,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6309:     B14EF3572397E90400758AF0 /* MX3PidAddSession.h in Headers */,",
          "6310:     B14EF3582397E90400758AF0 /* MXUser.h in Headers */,",
          "6311:     EC8A539025B1BC77004E0802 /* MXTurnServerResponse.h in Headers */,",
          "6313:     3297912823A93D4B00F7BB9B /* MXKeyVerification.h in Headers */,",
          "6314:     B14EF3592397E90400758AF0 /* MXError.h in Headers */,",
          "6315:     B14EF35A2397E90400758AF0 /* MXReplyEventFormattedBodyParts.h in Headers */,",
          "",
          "[Removed Lines]",
          "6312:     B176B25223EB03E4001879C6 /* MXAggregationPaginatedResponse_Private.h in Headers */,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6631:     B1710B1F2613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */,",
          "6632:     3A5787A528982D4600A0D8A8 /* MXBreadcrumbsRoomListDataFetcher.swift in Sources */,",
          "6633:     32CEEF4B23B0A8170039BA98 /* MXCrossSigningTools.m in Sources */,",
          "6634:     EC8A53A525B1BC77004E0802 /* MXCallInviteEventContent.m in Sources */,",
          "6635:     323F877D25546170009E9E67 /* MXBaseProfiler.m in Sources */,",
          "6636:     B1EE98DC280865A200AB63F0 /* MXBeaconAggregations.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6648:     ED76A4AD28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7095:     322A51D81D9E846800C8536D /* MXCryptoTests.m in Sources */,",
          "7096:     B146D4FF21A5C0BD00D8C2C6 /* MXMediaScanStoreUnitTests.m in Sources */,",
          "7097:     32BD34BE1E84134A006EDC0D /* MatrixSDKTestsE2EData.m in Sources */,",
          "7098:     B146D4FE21A5C0BD00D8C2C6 /* MXEventScanStoreUnitTests.m in Sources */,",
          "7099:     EDF1B6932876CD8600BBBCEE /* MXTaskQueueUnitTests.swift in Sources */,",
          "7100:     32684CB821085F770046D2F9 /* MXLazyLoadingTests.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7113:     ED751DAE28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7205:     ECE3DFA8270CF69500FB4C96 /* MockRoomSummary.swift in Sources */,",
          "7206:     EC1165CC27107F3E0089FA56 /* MXStoreRoomListDataManagerUnitTests.swift in Sources */,",
          "7207:     3246BDC51A1A0789000A7D62 /* MXRoomStateDynamicTests.m in Sources */,",
          "7208:     32B477832638133C00EA5800 /* MXJSONModelUnitTests.m in Sources */,",
          "7209:     321EA11D24893A0400E35B02 /* MXCryptoRecoveryServiceTests.m in Sources */,",
          "7210:     3A858DDD275121DB006322C1 /* MXHomeserverCapabilitiesTests.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7224:     ED751DAA28EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7254:     3A5787A628982D4600A0D8A8 /* MXBreadcrumbsRoomListDataFetcher.swift in Sources */,",
          "7255:     B14EF1D62397E90400758AF0 /* MXPusher.m in Sources */,",
          "7256:     B14EF1D72397E90400758AF0 /* MXMediaLoader.m in Sources */,",
          "7257:     32549AF823F2E2790002576B /* MXKeyVerificationReady.m in Sources */,",
          "7258:     B1EE98DD280865A200AB63F0 /* MXBeaconAggregations.swift in Sources */,",
          "7259:     B14EF1D82397E90400758AF0 /* MXCurve25519BackupAuthData.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7274:     ED76A4AE28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7718:     32B090FE26201C8D002924AA /* MXAsyncTaskQueueUnitTests.swift in Sources */,",
          "7719:     B1E09A242397FCE90057C069 /* MXPeekingRoomTests.m in Sources */,",
          "7720:     B1E09A452397FD990057C069 /* MXLazyLoadingTests.m in Sources */,",
          "7721:     B1E09A1C2397FCE90057C069 /* MXEventAnnotationUnitTests.swift in Sources */,",
          "7722:     B1E09A262397FCE90057C069 /* MXPushRuleUnitTests.m in Sources */,",
          "7723:     EDF1B6942876CD8600BBBCEE /* MXTaskQueueUnitTests.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7739:     ED751DAF28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7828:     B1660F1D260A20B900C3AA12 /* MXSpaceServiceTest.swift in Sources */,",
          "7829:     ECE3DFA9270CF69500FB4C96 /* MockRoomSummary.swift in Sources */,",
          "7830:     EC1165CD27107F3E0089FA56 /* MXStoreRoomListDataManagerUnitTests.swift in Sources */,",
          "7831:     B1E09A2A2397FD680057C069 /* MatrixSDKTestsData.m in Sources */,",
          "7832:     B1E09A302397FD750057C069 /* MXHTTPClientTests.m in Sources */,",
          "7833:     EC383BC02542F1E4002FBBE6 /* MXBackgroundSyncServiceTests.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7850:     ED751DAB28EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift in Sources */,",
          "",
          "---------------"
        ],
        "MatrixSDK/Aggregations/MXAggregations.m||MatrixSDK/Aggregations/MXAggregations.m": [
          "File: MatrixSDK/Aggregations/MXAggregations.m -> MatrixSDK/Aggregations/MXAggregations.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #import \"MXAggregatedEditsUpdater.h\"",
          "29: #import \"MXAggregatedReferencesUpdater.h\"",
          "30: #import \"MXEventEditsListener.h\"",
          "33: #import \"MatrixSDKSwiftHeader.h\"",
          "",
          "[Removed Lines]",
          "31: #import \"MXAggregationPaginatedResponse_Private.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Contrib/Swift/MXSession.swift||MatrixSDK/Contrib/Swift/MXSession.swift": [
          "File: MatrixSDK/Contrib/Swift/MXSession.swift -> MatrixSDK/Contrib/Swift/MXSession.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: public extension MXSession {",
          "16:     var threadingService: MXThreadingService {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:     enum Error: Swift.Error {",
          "15:         case missingRoom",
          "16:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:         return __createRoom(parameters, success: currySuccess(completion), failure: curryFailure(completion))",
          "250:     }",
          "257:      Join a room, optionally where the user has been invited by a 3PID invitation.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:      Return the first joined direct chat listed in account data for this user,",
          "257:      or it will create one if no room exists yet.",
          "259:     func getOrCreateDirectJoinedRoom(with userId: String) async throws -> MXRoom {",
          "260:         try await withCheckedThrowingContinuation { continuation in",
          "261:             _ = getOrCreateDirectJoinedRoom(withUserId: userId) { room in",
          "262:                 if let room = room {",
          "263:                     continuation.resume(returning: room)",
          "264:                 } else {",
          "265:                     continuation.resume(throwing: Error.missingRoom)",
          "266:                 }",
          "267:             } failure: { error in",
          "268:                 continuation.resume(throwing: error ?? Error.missingRoom)",
          "269:             }",
          "270:         }",
          "271:     }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m": [
          "File: MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m -> MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: }",
          "231: - (void)didImportRoomKey:(MXOlmInboundGroupSession *)session",
          "232: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: - (void)onRoomKey:(MXRoomKeyResult *)key",
          "232: {",
          "234: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:             .keysQuery(requestId: UUID().uuidString, users: users)",
          "314:         )",
          "315:     }",
          "316: }",
          "318: extension MXCryptoMachine: MXCryptoRoomEventEncrypting {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     func manuallyVerifyUser(userId: String) async throws {",
          "318:         let request = try machine.verifyIdentity(userId: userId)",
          "319:         try await requests.uploadSignatures(request: request)",
          "320:     }",
          "322:     func manuallyVerifyDevice(userId: String, deviceId: String) async throws {",
          "323:         let request = try machine.verifyDevice(userId: userId, deviceId: deviceId)",
          "324:         try await requests.uploadSignatures(request: request)",
          "325:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:         do {",
          "356:             let decryptedEvent = try machine.decryptRoomEvent(event: eventString, roomId: roomId)",
          "357:             let result = try MXEventDecryptionResult(event: decryptedEvent)",
          "359:             return result",
          "",
          "[Removed Lines]",
          "358:             log.debug(\"Successfully decrypted event\")",
          "",
          "[Added Lines]",
          "368:             log.debug(\"Successfully decrypted event `\\(result.clearEvent[\"type\"] ?? \"unknown\")`\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:         return request",
          "507:     }",
          "509:     func verificationRequest(userId: String, flowId: String) -> VerificationRequest? {",
          "510:         return machine.getVerificationRequest(userId: userId, flowId: flowId)",
          "511:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519:     func verificationRequests(userId: String) -> [VerificationRequest] {",
          "520:         return machine.getVerificationRequests(userId: userId)",
          "521:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "524:         try await handleOutgoingVerificationRequest(request)",
          "525:     }",
          "539:     private func handleOutgoingVerificationRequest(_ request: OutgoingVerificationRequest) async throws {",
          "",
          "[Removed Lines]",
          "527:     func manuallyVerifyUser(userId: String) async throws {",
          "528:         let request = try machine.verifyIdentity(userId: userId)",
          "529:         try await requests.uploadSignatures(request: request)",
          "530:     }",
          "532:     func manuallyVerifyDevice(userId: String, deviceId: String) async throws {",
          "533:         let request = try machine.verifyDevice(userId: userId, deviceId: deviceId)",
          "534:         try await requests.uploadSignatures(request: request)",
          "535:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "591:         return result.sas",
          "592:     }",
          "594:     func acceptSasVerification(userId: String, flowId: String) async throws {",
          "595:         guard let request = machine.acceptSasVerification(userId: userId, flowId: flowId) else {",
          "596:             throw Error.missingVerification",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:     func startSasVerification(userId: String, deviceId: String) async throws -> Sas {",
          "599:         guard let result = try machine.startSasWithDevice(userId: userId, deviceId: deviceId) else {",
          "600:             throw Error.missingVerification",
          "601:         }",
          "602:         try await handleOutgoingVerificationRequest(result.request)",
          "603:         return result.sas",
          "604:     }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoProtocols.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: protocol MXCryptoVerificationRequesting: MXCryptoIdentity {",
          "78:     func requestSelfVerification(methods: [String]) async throws -> VerificationRequest",
          "79:     func requestVerification(userId: String, roomId: String, methods: [String]) async throws -> VerificationRequest",
          "80:     func verificationRequest(userId: String, flowId: String) -> VerificationRequest?",
          "81:     func acceptVerificationRequest(userId: String, flowId: String, methods: [String]) async throws",
          "82:     func cancelVerification(userId: String, flowId: String, cancelCode: String) async throws",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     func verificationRequests(userId: String) -> [VerificationRequest]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: protocol MXCryptoSASVerifying: MXCryptoVerifying {",
          "94:     func startSasVerification(userId: String, flowId: String) async throws -> Sas",
          "95:     func acceptSasVerification(userId: String, flowId: String) async throws",
          "96:     func emojiIndexes(sas: Sas) throws -> [Int]",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     func startSasVerification(userId: String, deviceId: String) async throws -> Sas",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCryptoV2.swift||MatrixSDK/Crypto/MXCryptoV2.swift": [
          "File: MatrixSDK/Crypto/MXCryptoV2.swift -> MatrixSDK/Crypto/MXCryptoV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         )",
          "158:         keyVerification = MXKeyVerificationManagerV2(",
          "167:         )",
          "169:         secretsManager = MXSecretShareManager()",
          "",
          "[Removed Lines]",
          "159:             verification: machine,",
          "160:             getOrCreateDMRoomId: { [weak session] userId in",
          "162:                 guard let roomId = session?.directJoinedRoom(withUserId: userId)?.roomId else {",
          "163:                     throw Error.missingRoom",
          "164:                 }",
          "165:                 return roomId",
          "166:             }",
          "",
          "[Added Lines]",
          "159:             session: session,",
          "160:             handler: machine",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h -> MatrixSDK/Crypto/Verification/MXKeyVerificationManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  @return an HTTP operation or nil if the response is synchronous.",
          "172: - (nullable MXHTTPOperation *)keyVerificationFromKeyVerificationEvent:(MXEvent*)event",
          "173:                                                               success:(void(^)(MXKeyVerification *keyVerification))success",
          "174:                                                               failure:(void(^)(NSError *error))failure;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:                                                                roomId:(NSString *)roomId",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: - (void)removeQRCodeTransactionWithTransactionId:(NSString*)transactionId;",
          "192: - (void)notifyOthersOfAcceptanceWithTransactionId:(NSString*)transactionId",
          "193:                                acceptedUserId:(NSString*)acceptedUserId",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: @end",
          "194: @interface MXLegacyKeyVerificationManager : NSObject <MXKeyVerificationManager>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198: @end",
          "204: NS_ASSUME_NONNULL_END",
          "",
          "[Removed Lines]",
          "200: @interface MXLegacyKeyVerificationManager : NSObject <MXKeyVerificationManager>",
          "202: @end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m -> MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:     }",
          "194:     else",
          "195:     {",
          "220:     }",
          "221: }",
          "",
          "[Removed Lines]",
          "197:         MXRoom *room = [self.crypto.mxSession directJoinedRoomWithUserId:userId];",
          "198:         if (room)",
          "199:         {",
          "200:             [self requestVerificationByDMWithUserId2:userId roomId:room.roomId fallbackText:fallbackText methods:methods success:success failure:failure];",
          "201:         }",
          "202:         else",
          "203:         {",
          "205:             [self.crypto.mxSession canEnableE2EByDefaultInNewRoomWithUsers:@[userId] success:^(BOOL canEnableE2E) {",
          "206:                 MXRoomCreationParameters *roomCreationParameters = [MXRoomCreationParameters parametersForDirectRoomWithUser:userId];",
          "208:                 if (canEnableE2E)",
          "209:                 {",
          "210:                     roomCreationParameters.initialStateEvents = @[",
          "211:                                                                   [MXRoomCreationParameters initialStateEventForEncryptionWithAlgorithm:kMXCryptoMegolmAlgorithm",
          "212:                                                                    ]];",
          "213:                 }",
          "215:                 [self.crypto.mxSession createRoomWithParameters:roomCreationParameters success:^(MXRoom *room) {",
          "216:                     [self requestVerificationByDMWithUserId2:userId roomId:room.roomId fallbackText:fallbackText methods:methods success:success failure:failure];",
          "217:                 } failure:failure];",
          "218:             } failure:failure];",
          "219:         }",
          "",
          "[Added Lines]",
          "196:         [self.crypto.mxSession getOrCreateDirectJoinedRoomWithUserId:userId success:^(MXRoom *room) {",
          "197:             [self requestVerificationByDMWithUserId2:userId",
          "198:                                               roomId:room.roomId",
          "199:                                         fallbackText:fallbackText",
          "200:                                              methods:methods",
          "201:                                              success:success",
          "202:                                              failure:failure];",
          "203:         } failure:failure];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525: #pragma mark Verification status",
          "527: - (nullable MXHTTPOperation *)keyVerificationFromKeyVerificationEvent:(MXEvent*)event",
          "528:                                                               success:(void(^)(MXKeyVerification *keyVerification))success",
          "529:                                                               failure:(void(^)(NSError *error))failure",
          "530: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:                                                                roomId:(NSString *)roomId",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift||MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift -> MatrixSDK/Crypto/Verification/MXKeyVerificationManagerV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     case removed",
          "23: }",
          "27: class MXKeyVerificationManagerV2: NSObject, MXKeyVerificationManager {",
          "28:     enum Error: Swift.Error {",
          "30:     }",
          "40:     private var activeRequests: [String: MXKeyVerificationRequestV2]",
          "41:     private var activeTransactions: [String: MXSASTransactionV2]",
          "43:     private let log = MXNamedLog(name: \"MXKeyVerificationManagerV2\")",
          "49:         self.activeRequests = [:]",
          "50:         self.activeTransactions = [:]",
          "52:         super.init()",
          "53:     }",
          "90:     }",
          "92:     func requestVerificationByToDevice(",
          "",
          "[Removed Lines]",
          "25: typealias MXCryptoVerification = MXCryptoVerificationRequesting & MXCryptoSASVerifying",
          "29:         case notSupported",
          "32:     typealias GetOrCreateDMRoomId = (_ userId: String) async throws -> String",
          "34:     private let verification: MXCryptoVerification",
          "35:     private let getOrCreateDMRoomId: GetOrCreateDMRoomId",
          "45:     init(verification: MXCryptoVerification, getOrCreateDMRoomId: @escaping GetOrCreateDMRoomId) {",
          "46:         self.verification = verification",
          "47:         self.getOrCreateDMRoomId = getOrCreateDMRoomId",
          "55:     func handleDeviceEvents(_ events: [MXEvent]) {",
          "60:         let eventTypes: Set<String> = [",
          "61:             kMXMessageTypeKeyVerificationRequest,",
          "62:             kMXEventTypeStringKeyVerificationStart",
          "63:         ]",
          "65:         for event in events {",
          "66:             guard eventTypes.contains(event.type) else {",
          "67:                 continue",
          "68:             }",
          "70:             guard",
          "71:                 let userId = event.sender,",
          "72:                 let flowId = event.content[\"transaction_id\"] as? String",
          "73:             else {",
          "74:                 log.error(\"Missing userId or flowId in event\")",
          "75:                 continue",
          "76:             }",
          "78:             log.debug(\"Processing incoming verification event\")",
          "79:             switch event.type {",
          "80:             case kMXMessageTypeKeyVerificationRequest:",
          "81:                 incomingVerificationRequest(userId: userId, flowId: flowId)",
          "82:             case kMXEventTypeStringKeyVerificationStart:",
          "83:                 incomingVerificationStart(userId: userId, flowId: flowId)",
          "84:             default:",
          "85:                 log.failure(\"Event type should not be handled by key verification\", context: event.type)",
          "86:             }",
          "87:         }",
          "89:         updatePendingVerification()",
          "",
          "[Added Lines]",
          "25: typealias MXCryptoVerificationHandler = MXCryptoVerificationRequesting & MXCryptoSASVerifying",
          "29:         case methodNotSupported",
          "30:         case unknownFlowId",
          "31:         case missingRoom",
          "36:     private static let dmEventTypes: Set<MXEventType> = [",
          "37:         .roomMessage, // Verification request in DM is wrapped inside `m.room.message`",
          "38:         .keyVerificationReady,",
          "39:         .keyVerificationStart,",
          "40:         .keyVerificationAccept,",
          "41:         .keyVerificationKey,",
          "42:         .keyVerificationMac,",
          "43:         .keyVerificationCancel,",
          "44:         .keyVerificationDone,",
          "45:     ]",
          "49:     private static let toDeviceEventTypes: Set<String> = [",
          "50:         kMXMessageTypeKeyVerificationRequest,",
          "51:         kMXEventTypeStringKeyVerificationStart",
          "52:     ]",
          "54:     private weak var session: MXSession?",
          "55:     private var observer: Any?",
          "57:     private let handler: MXCryptoVerificationHandler",
          "64:     private let resolver: MXKeyVerificationStateResolver",
          "68:     init(",
          "69:         session: MXSession,",
          "70:         handler: MXCryptoVerificationHandler",
          "71:     ) {",
          "72:         self.session = session",
          "73:         self.handler = handler",
          "76:         self.resolver = MXKeyVerificationStateResolver(myUserId: session.myUserId, aggregations: session.aggregations)",
          "80:         listenToRoomEvents(in: session)",
          "83:     deinit {",
          "84:         session?.removeListener(observer)",
          "85:     }",
          "87:     var pendingRequests: [MXKeyVerificationRequest] {",
          "88:         return Array(activeRequests.values)",
          "89:     }",
          "91:     func transactions(_ complete: @escaping ([MXKeyVerificationTransaction]) -> Void) {",
          "92:         complete(Array(activeTransactions.values))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:         success: @escaping (MXKeyVerificationRequest) -> Void,",
          "97:         failure: @escaping (Swift.Error) -> Void",
          "98:     ) {",
          "100:             log.failure(\"To-device verification with other users is not supported\")",
          "102:             return",
          "103:         }",
          "106:         Task {",
          "107:             do {",
          "111:                 await MainActor.run {",
          "112:                     log.debug(\"Request successfully sent\")",
          "113:                     success(request)",
          "114:                 }",
          "115:             } catch {",
          "117:                 await MainActor.run {",
          "118:                     failure(error)",
          "119:                 }",
          "120:             }",
          "",
          "[Removed Lines]",
          "99:         guard userId == verification.userId else {",
          "101:             failure(Error.notSupported)",
          "105:         log.debug(\"Requesting verification by to-device\")",
          "108:                 let req = try await verification.requestSelfVerification(methods: methods)",
          "110:                 let request = addRequest(for: req, transport: .toDevice)",
          "116:                 log.error(\"Cannot request verification\", context: error)",
          "",
          "[Added Lines]",
          "102:         log.debug(\"->\")",
          "104:         guard userId == session?.myUserId else {",
          "106:             failure(Error.methodNotSupported)",
          "112:                 let request = try await requestSelfVerification(methods: methods)",
          "119:                     log.error(\"Cannot request verification\", context: error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         success: @escaping (MXKeyVerificationRequest) -> Void,",
          "130:         failure: @escaping (Swift.Error) -> Void",
          "131:     ) {",
          "133:         Task {",
          "134:             do {",
          "137:                     userId: userId,",
          "138:                     roomId: roomId,",
          "139:                     methods: methods",
          "140:                 )",
          "143:                 await MainActor.run {",
          "144:                     log.debug(\"Request successfully sent\")",
          "145:                     success(request)",
          "146:                 }",
          "147:             } catch {",
          "149:                 await MainActor.run {",
          "150:                     failure(error)",
          "151:                 }",
          "152:             }",
          "",
          "[Removed Lines]",
          "132:         log.debug(\"Requesting verification by DM\")",
          "135:                 let roomId = try await getOrCreateDMRoomId(userId)",
          "136:                 let req = try await verification.requestVerification(",
          "142:                 let request = addRequest(for: req, transport: .directMessage)",
          "148:                 log.error(\"Cannot request verification\", context: error)",
          "",
          "[Added Lines]",
          "134:         log.debug(\"->\")",
          "137:                 let roomId = try await getOrCreateDMRoomId(userId: userId)",
          "138:                 let request = try await requestVerification(",
          "149:                     log.error(\"Cannot request verification\", context: error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:         success: @escaping (MXKeyVerificationTransaction) -> Void,",
          "161:         failure: @escaping (Swift.Error) -> Void",
          "162:     ) {",
          "165:     }",
          "167:     func beginKeyVerification(",
          "",
          "[Removed Lines]",
          "163:         log.debug(\"Not implemented\")",
          "164:         success(MXLegacyKeyVerificationTransaction())",
          "",
          "[Added Lines]",
          "163:         log.debug(\"Starting \\(method) verification flow\")",
          "165:         Task {",
          "166:             do {",
          "167:                 let transaction = try await startSasVerification(userId: userId, deviceId: deviceId)",
          "168:                 await MainActor.run {",
          "169:                     log.debug(\"Created verification transaction\")",
          "170:                     success(transaction)",
          "171:                 }",
          "172:             } catch {",
          "173:                 await MainActor.run {",
          "174:                     log.error(\"Failed creating verification transaction\", context: error)",
          "175:                     failure(error)",
          "176:                 }",
          "177:             }",
          "178:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:         failure: @escaping (Swift.Error) -> Void",
          "172:     ) {",
          "173:         log.debug(\"Starting \\(method) verification flow\")",
          "174:         Task {",
          "175:             do {",
          "179:                 await MainActor.run {",
          "180:                     log.debug(\"Created verification transaction\")",
          "181:                     success(transaction)",
          "182:                 }",
          "183:             } catch {",
          "185:                 await MainActor.run {",
          "186:                     failure(error)",
          "187:                 }",
          "188:             }",
          "189:         }",
          "190:     }",
          "200:     func keyVerification(",
          "201:         fromKeyVerificationEvent event: MXEvent,",
          "202:         success: @escaping (MXKeyVerification) -> Void,",
          "203:         failure: @escaping (Swift.Error) -> Void",
          "204:     ) -> MXHTTPOperation? {",
          "208:     }",
          "210:     func qrCodeTransaction(withTransactionId transactionId: String) -> MXQRCodeTransaction? {",
          "",
          "[Removed Lines]",
          "176:                 let sas = try await verification.startSasVerification(userId: request.otherUser, flowId: request.requestId)",
          "177:                 let transaction = addSasTransaction(for: sas, transport: request.transport)",
          "184:                 log.error(\"Failed creating verification transaction\", context: error)",
          "192:     var pendingRequests: [MXKeyVerificationRequest] {",
          "193:         return Array(activeRequests.values)",
          "194:     }",
          "196:     func transactions(_ complete: @escaping ([MXKeyVerificationTransaction]) -> Void) {",
          "197:         complete(Array(activeTransactions.values))",
          "198:     }",
          "205:         log.debug(\"Not implemented\")",
          "206:         success(MXKeyVerification())",
          "207:         return MXHTTPOperation()",
          "",
          "[Added Lines]",
          "191:                 let transaction = try await startSasVerification(userId: request.otherUser, flowId: request.requestId, transport: request.transport)",
          "198:                     log.error(\"Failed creating verification transaction\", context: error)",
          "207:         roomId: String,",
          "211:         guard let flowId = event.relatesTo?.eventId ?? event.eventId else {",
          "212:             log.failure(\"Unknown flow id\")",
          "213:             failure(Error.unknownFlowId)",
          "214:             return nil",
          "215:         }",
          "217:         if let request = activeRequests[flowId] {",
          "218:             log.debug(\"Using active request\")",
          "219:             let result = MXKeyVerification()",
          "220:             result.request = request",
          "221:             success(result)",
          "223:         } else {",
          "224:             log.debug(\"Computing archived request\")",
          "226:             Task {",
          "227:                 do {",
          "231:                     let result = MXKeyVerification()",
          "232:                     result.state = try await resolver.verificationState(flowId: flowId, roomId: roomId)",
          "233:                     await MainActor.run {",
          "234:                         success(result)",
          "235:                     }",
          "236:                 } catch {",
          "237:                     await MainActor.run {",
          "238:                         failure(error)",
          "239:                     }",
          "240:                 }",
          "241:             }",
          "242:         }",
          "243:         return nil",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:         log.debug(\"Not implemented\")",
          "217:     }",
          "222:     }",
          "231:             return",
          "232:         }",
          "235:     }",
          "252:         }",
          "253:     }",
          "256:         for request in activeRequests.values {",
          "257:             switch request.processUpdates() {",
          "258:             case .noUpdates:",
          "",
          "[Removed Lines]",
          "219:     func notifyOthersOfAcceptance(withTransactionId transactionId: String, acceptedUserId: String, acceptedDeviceId: String, success: @escaping () -> Void, failure: @escaping (Swift.Error) -> Void) {",
          "220:         log.debug(\"Not implemented\")",
          "221:         success()",
          "226:     private func incomingVerificationRequest(userId: String, flowId: String) {",
          "227:         guard let request = verification.verificationRequest(userId: userId, flowId: flowId) else {",
          "228:             log.error(\"Verification request is not known\", context: [",
          "229:                 \"flow_id\": flowId",
          "230:             ])",
          "234:         _ = addRequest(for: request, transport: .toDevice, notify: true)",
          "237:     private func incomingVerificationStart(userId: String, flowId: String) {",
          "238:         guard let verif = verification.verification(userId: userId, flowId: flowId) else {",
          "239:             log.error(\"Verification is not known\", context: [",
          "240:                 \"flow_id\": flowId",
          "241:             ])",
          "242:             return",
          "243:         }",
          "245:         switch verif {",
          "246:         case .sasV1(let sas):",
          "247:             let transaction = addSasTransaction(for: sas, transport: .toDevice)",
          "248:             transaction.accept()",
          "250:         case .qrCodeV1:",
          "251:             assertionFailure(\"Not implemented\")",
          "255:     private func updatePendingVerification() {",
          "",
          "[Added Lines]",
          "257:     func handleDeviceEvents(_ events: [MXEvent]) {",
          "258:         for event in events {",
          "259:             guard Self.toDeviceEventTypes.contains(event.type) else {",
          "260:                 continue",
          "261:             }",
          "262:             handleDeviceEvent(event)",
          "263:         }",
          "264:         updatePendingVerification()",
          "267:     private func listenToRoomEvents(in session: MXSession) {",
          "268:         observer = session.listenToEvents(Array(Self.dmEventTypes)) { [weak self] event, direction, customObject in",
          "269:             if direction == .forwards {",
          "270:                 self?.handleRoomEvent(event)",
          "271:             }",
          "272:         }",
          "273:     }",
          "275:     private func handleDeviceEvent(_ event: MXEvent) {",
          "276:         guard",
          "277:             let userId = event.sender,",
          "278:             let flowId = event.content[\"transaction_id\"] as? String",
          "279:         else {",
          "280:             log.error(\"Missing userId or flowId in event\")",
          "284:         log.debug(\"->\")",
          "286:         switch event.type {",
          "287:         case kMXMessageTypeKeyVerificationRequest:",
          "288:             handleIncomingRequest(userId: userId, flowId: flowId, transport: .toDevice)",
          "290:         case kMXEventTypeStringKeyVerificationStart:",
          "291:             handleIncomingVerification(userId: userId, flowId: flowId, transport: .toDevice)",
          "293:         default:",
          "294:             log.failure(\"Event type should not be handled by key verification\", context: event.type)",
          "295:         }",
          "298:     private func handleRoomEvent(_ event: MXEvent) {",
          "299:         log.debug(\"->\")",
          "301:         if event.type == kMXEventTypeStringRoomMessage && event.content?[kMXMessageTypeKey] as? String == kMXMessageTypeKeyVerificationRequest {",
          "302:             handleIncomingRequest(userId: event.sender, flowId: event.eventId, transport: .directMessage)",
          "304:         } else if event.type == kMXEventTypeStringKeyVerificationStart, let flowId = event.relatesTo.eventId {",
          "305:             handleIncomingVerification(userId: event.sender, flowId: flowId, transport: .directMessage)",
          "307:         } else if Self.dmEventTypes.contains(where: { $0.identifier == event.type }) {",
          "308:             updatePendingVerification()",
          "310:         } else if event.type != kMXEventTypeStringRoomMessage {",
          "311:             log.failure(\"Event type should not be handled by key verification\", context: event.type)",
          "317:     func updatePendingVerification() {",
          "318:         if !activeRequests.isEmpty {",
          "319:             log.debug(\"Processing \\(activeRequests.count) pending requests\")",
          "320:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263:                 activeRequests[request.requestId] = nil",
          "264:             }",
          "265:         }",
          "267:         for transaction in activeTransactions.values {",
          "268:             switch transaction.processUpdates() {",
          "269:             case .noUpdates:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:         if !activeTransactions.isEmpty {",
          "334:             log.debug(\"Processing \\(activeTransactions.count) pending transactions\")",
          "335:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "276:         }",
          "277:     }",
          "279:     private func addRequest(",
          "280:         for request: VerificationRequest,",
          "281:         transport: MXKeyVerificationTransport,",
          "282:         notify: Bool = false",
          "283:     ) -> MXKeyVerificationRequestV2 {",
          "285:         let request = MXKeyVerificationRequestV2(",
          "286:             request: request,",
          "287:             transport: transport,",
          "289:         )",
          "290:         activeRequests[request.requestId] = request",
          "292:         if notify {",
          "293:             NotificationCenter.default.post(",
          "294:                 name: .MXKeyVerificationManagerNewRequest,",
          "",
          "[Removed Lines]",
          "288:             handler: verification",
          "",
          "[Added Lines]",
          "351:     private func requestVerification(userId: String, roomId: String, methods: [String]) async throws -> MXKeyVerificationRequest {",
          "352:         log.debug(\"->\")",
          "354:         let request = try await handler.requestVerification(",
          "355:             userId: userId,",
          "356:             roomId: roomId,",
          "357:             methods: methods",
          "358:         )",
          "359:         return addRequest(for: request, transport: .directMessage)",
          "360:     }",
          "362:     private func requestSelfVerification(methods: [String]) async throws -> MXKeyVerificationRequest {",
          "363:         log.debug(\"->\")",
          "365:         let request = try await handler.requestSelfVerification(methods: methods)",
          "366:         return addRequest(for: request, transport: .directMessage)",
          "367:     }",
          "369:     private func handleIncomingRequest(userId: String, flowId: String, transport: MXKeyVerificationTransport) {",
          "370:         log.debug(flowId)",
          "372:         guard activeRequests[flowId] == nil else {",
          "373:             log.debug(\"Request already known, ignoring\")",
          "374:             return",
          "375:         }",
          "377:         guard let req = handler.verificationRequest(userId: userId, flowId: flowId) else {",
          "378:             log.error(\"Verification request is not known\", context: [",
          "379:                 \"flow_id\": flowId",
          "380:             ])",
          "381:             return",
          "382:         }",
          "384:         log.debug(\"Tracking new verification request\")",
          "386:         _ = addRequest(for: req, transport: transport, notify: true)",
          "387:     }",
          "397:             handler: handler",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "301:         return request",
          "302:     }",
          "306:         activeTransactions[transaction.transactionId] = transaction",
          "307:         return transaction",
          "308:     }",
          "309: }",
          "311: extension MXKeyVerificationManagerV2: MXRecoveryServiceDelegate {",
          "",
          "[Removed Lines]",
          "304:     private func addSasTransaction(for sas: Sas, transport: MXKeyVerificationTransport) -> MXSASTransactionV2 {",
          "305:         let transaction = MXSASTransactionV2(sas: sas, transport: transport, handler: verification)",
          "",
          "[Added Lines]",
          "414:     private func startSasVerification(userId: String, flowId: String, transport: MXKeyVerificationTransport) async throws -> MXKeyVerificationTransaction {",
          "415:         log.debug(\"->\")",
          "416:         let sas = try await handler.startSasVerification(userId: userId, flowId: flowId)",
          "417:         return addSasTransaction(for: sas, transport: transport)",
          "418:     }",
          "420:     private func startSasVerification(userId: String, deviceId: String) async throws -> MXKeyVerificationTransaction {",
          "421:         log.debug(\"->\")",
          "422:         let sas = try await handler.startSasVerification(userId: userId, deviceId: deviceId)",
          "423:         return addSasTransaction(for: sas, transport: .toDevice)",
          "424:     }",
          "426:     private func handleIncomingVerification(userId: String, flowId: String, transport: MXKeyVerificationTransport) {",
          "427:         log.debug(flowId)",
          "429:         guard activeTransactions[flowId] == nil else {",
          "430:             log.debug(\"Transaction already known, ignoring\")",
          "431:             return",
          "432:         }",
          "434:         guard let verification = handler.verification(userId: userId, flowId: flowId) else {",
          "435:             log.error(\"Verification is not known\", context: [",
          "436:                 \"flow_id\": flowId",
          "437:             ])",
          "438:             return",
          "439:         }",
          "441:         log.debug(\"Tracking new verification transaction\")",
          "442:         switch verification {",
          "443:         case .sasV1(let sas):",
          "444:             let transaction = addSasTransaction(for: sas, transport: transport)",
          "445:             transaction.accept()",
          "446:         case .qrCodeV1:",
          "447:             log.failure(\"Not implemented\")",
          "448:         }",
          "449:     }",
          "451:     private func addSasTransaction(",
          "452:         for sas: Sas,",
          "453:         transport: MXKeyVerificationTransport",
          "454:     ) -> MXSASTransactionV2 {",
          "455:         let transaction = MXSASTransactionV2(",
          "456:             sas: sas,",
          "457:             transport: transport,",
          "458:             handler: handler",
          "459:         )",
          "466:     private func getOrCreateDMRoomId(userId: String) async throws -> String {",
          "467:         guard let session = session else {",
          "468:             log.error(\"Session not available\")",
          "469:             throw MXSession.Error.missingRoom",
          "470:         }",
          "471:         let room = try await session.getOrCreateDirectJoinedRoom(with: userId)",
          "472:         guard let roomId = room.roomId else {",
          "473:             log.failure(\"Missing room id\")",
          "474:             throw MXSession.Error.missingRoom",
          "475:         }",
          "476:         return roomId",
          "477:     }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift||MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift": [
          "File: MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift -> MatrixSDK/Crypto/Verification/Requests/MXKeyVerificationRequestV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     private let log = MXNamedLog(name: \"MXKeyVerificationRequestV2\")",
          "97:     init(request: VerificationRequest, transport: MXKeyVerificationTransport, handler: MXCryptoVerificationRequesting) {",
          "98:         self.request = request",
          "99:         self.transport = transport",
          "100:         self.handler = handler",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         log.debug(\"Creating new request\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     func processUpdates() -> MXKeyVerificationUpdateResult {",
          "104:         guard let request = handler.verificationRequest(userId: otherUser, flowId: requestId) else {",
          "105:             return .removed",
          "106:         }",
          "108:         guard self.request != request else {",
          "109:             return .noUpdates",
          "110:         }",
          "111:         self.request = request",
          "112:         return .updated",
          "113:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:             log.debug(\"Request was removed\")",
          "115:         log.debug(\"Request was updated\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:                     methods: methods",
          "126:                 )",
          "127:                 await MainActor.run {",
          "128:                     success()",
          "129:                 }",
          "130:             } catch {",
          "131:                 await MainActor.run {",
          "132:                     failure(error)",
          "133:                 }",
          "134:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:                     log.debug(\"Accepted request\")",
          "138:                     log.error(\"Failed accepting request\", context: error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:                     cancelCode: code.value",
          "149:                 )",
          "150:                 await MainActor.run {",
          "151:                     success?()",
          "152:                 }",
          "153:             } catch {",
          "154:                 await MainActor.run {",
          "155:                     failure?(error)",
          "156:                 }",
          "157:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:                     log.debug(\"Cancelled request\")",
          "163:                     log.error(\"Failed cancelling request\", context: error)",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift||MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift": [
          "File: MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift -> MatrixSDK/Crypto/Verification/Status/MXKeyVerificationStateResolver.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "22: @objcMembers",
          "23: public class MXKeyVerificationStateResolver: NSObject {",
          "24:     private let myUserId: String",
          "25:     private let aggregations: MXAggregations",
          "26:     private var states: [String: MXKeyVerificationState]",
          "27:     private let log = MXNamedLog(name: \"MXKeyVerificationStateResolver\")",
          "29:     public init(myUserId: String, aggregations: MXAggregations) {",
          "30:         self.myUserId = myUserId",
          "31:         self.aggregations = aggregations",
          "32:         self.states = [:]",
          "33:     }",
          "35:     public func verificationState(flowId: String, roomId: String) async throws -> MXKeyVerificationState {",
          "36:         log.debug(\"->\")",
          "38:         if let state = states[flowId] {",
          "39:             return state",
          "40:         }",
          "42:         let state = try await resolvedState(flowId: flowId, roomId: roomId)",
          "43:         states[flowId] = state",
          "44:         return state",
          "45:     }",
          "47:     private func resolvedState(flowId: String, roomId: String) async throws -> MXKeyVerificationState {",
          "48:         log.debug(\"Resolving state\")",
          "50:         return try await withCheckedThrowingContinuation { [weak self] continuation in",
          "51:             _ = aggregations.referenceEvents(",
          "52:                 forEvent: flowId,",
          "53:                 inRoom: roomId,",
          "54:                 from: nil,",
          "55:                 limit: -1,",
          "56:                 success: { response in",
          "57:                     guard let self = self else { return }",
          "59:                     let state = self.resolvedState(for: response.chunk)",
          "60:                     self.log.debug(\"Computed state:  \\(state)\")",
          "61:                     continuation.resume(returning: state)",
          "62:                 }, failure: { error in",
          "63:                     self?.log.error(\"Failed computing state\", context: error)",
          "64:                     continuation.resume(throwing: error)",
          "65:                 }",
          "66:             )",
          "67:         }",
          "68:     }",
          "70:     private func resolvedState(for events: [MXEvent]) -> MXKeyVerificationState {",
          "71:         var defaultState = MXKeyVerificationState.transactionStarted",
          "72:         for event in events {",
          "73:             switch event.eventType {",
          "74:             case .keyVerificationCancel:",
          "75:                 let code = event.content[\"code\"] as? String",
          "76:                 if code == MXTransactionCancelCode.user().value {",
          "77:                     if event.sender == myUserId {",
          "78:                         return .transactionCancelledByMe",
          "79:                     } else {",
          "80:                         return .transactionCancelled",
          "81:                     }",
          "82:                 } else if code == MXTransactionCancelCode.timeout().value {",
          "83:                     return .requestExpired",
          "84:                 } else {",
          "85:                     return .transactionFailed",
          "86:                 }",
          "87:             case .keyVerificationReady:",
          "88:                 defaultState = .requestReady",
          "89:             case .keyVerificationDone:",
          "90:                 return .verified",
          "91:             default:",
          "92:                 continue",
          "93:             }",
          "94:         }",
          "95:         return defaultState",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift": [
          "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransactionV2.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     private let log = MXNamedLog(name: \"MXSASTransactionV2\")",
          "106:     init(sas: Sas, transport: MXKeyVerificationTransport, handler: MXCryptoSASVerifying) {",
          "107:         self.sas = sas",
          "108:         self.transport = transport",
          "109:         self.handler = handler",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:         log.debug(\"Creating new transaction\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:             let verification = handler.verification(userId: otherUserId, flowId: transactionId),",
          "115:             case .sasV1(let sas) = verification",
          "116:         else {",
          "117:             return .removed",
          "118:         }",
          "120:         guard self.sas != sas else {",
          "121:             return .noUpdates",
          "122:         }",
          "123:         self.sas = sas",
          "124:         return .updated",
          "125:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:             log.debug(\"Transaction was removed\")",
          "127:         log.debug(\"Transaction was updated\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:         Task {",
          "129:             do {",
          "130:                 try await handler.acceptSasVerification(userId: otherUserId, flowId: transactionId)",
          "131:             } catch {",
          "132:                 log.error(\"Cannot accept transaction\", context: error)",
          "133:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:                 log.debug(\"Accepted transaction\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:         Task {",
          "139:             do {",
          "140:                 try await handler.confirmVerification(userId: otherUserId, flowId: transactionId)",
          "141:             } catch {",
          "142:                 log.error(\"Cannot confirm transaction\", context: error)",
          "143:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:                 log.debug(\"Confirmed transaction match\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:             do {",
          "158:                 try await handler.cancelVerification(userId: otherUserId, flowId: transactionId, cancelCode: code.value)",
          "159:                 await MainActor.run {",
          "160:                     success()",
          "161:                 }",
          "162:             } catch {",
          "163:                 await MainActor.run {",
          "164:                     failure(error)",
          "165:                 }",
          "166:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:                     log.debug(\"Cancelled transaction\")",
          "172:                     log.error(\"Failed cancelling transaction\", context: error)",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h": [
          "File: MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h -> MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: @property (nonatomic, readonly, nullable) MXEvent *originalEvent;",
          "32: @end",
          "34: NS_ASSUME_NONNULL_END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: - (instancetype)initWithOriginalEvent:(MXEvent*)originalEvent",
          "33:                                 chunk:(NSArray<MXEvent*> *)chunk",
          "34:                             nextBatch:(nullable NSString *)nextBatch;",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m": [
          "File: MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m -> MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #import \"MXAggregationPaginatedResponse.h\"",
          "20: @implementation MXAggregationPaginatedResponse",
          "",
          "[Removed Lines]",
          "18: #import \"MXAggregationPaginatedResponse_Private.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h||MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h": [
          "File: MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h -> MatrixSDK/JSONModels/Aggregations/MXAggregationPaginatedResponse_Private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.h||MatrixSDK/MXSession.h": [
          "File: MatrixSDK/MXSession.h -> MatrixSDK/MXSession.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "977: - (MXRoom *)directJoinedRoomWithUserId:(NSString*)userId;",
          "980:  Get the direct user id of a room.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "980:  Return the first joined direct chat listed in account data for this user,",
          "981:  or it will create one if no room exists yet.",
          "983: - (MXHTTPOperation *)getOrCreateDirectJoinedRoomWithUserId:(NSString*)userId",
          "984:                                                    success:(void (^)(MXRoom *))success",
          "985:                                                    failure:(void (^)(NSError *error))failure;",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "2763:     return nil;",
          "2764: }",
          "2767: - (NSSet<NSString*> *)directRoomIds",
          "2768: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2766: - (MXHTTPOperation *)getOrCreateDirectJoinedRoomWithUserId:(NSString *)userId",
          "2767:                                                    success:(void (^)(MXRoom *))success",
          "2768:                                                    failure:(void (^)(NSError *))failure",
          "2769: {",
          "2771:     MXRoom *room = [self directJoinedRoomWithUserId:userId];",
          "2772:     if (room)",
          "2773:     {",
          "2774:         success(room);",
          "2775:         return nil;",
          "2776:     }",
          "2779:     MXWeakify(self);",
          "2780:     return [self canEnableE2EByDefaultInNewRoomWithUsers:@[userId] success:^(BOOL canEnableE2E) {",
          "2781:         MXStrongifyAndReturnIfNil(self);",
          "2783:         MXRoomCreationParameters *roomCreationParameters = [MXRoomCreationParameters parametersForDirectRoomWithUser:userId];",
          "2785:         if (canEnableE2E)",
          "2786:         {",
          "2787:             roomCreationParameters.initialStateEvents = @[",
          "2788:                                                           [MXRoomCreationParameters initialStateEventForEncryptionWithAlgorithm:kMXCryptoMegolmAlgorithm",
          "2789:                                                            ]];",
          "2790:         }",
          "2792:         [self createRoomWithParameters:roomCreationParameters success:success failure:failure];",
          "2793:     } failure:failure];",
          "2794: }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift": [
          "File: MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift -> MatrixSDKTests/Crypto/CryptoMachine/MXCryptoProtocolStubs.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: extension CryptoVerificationStub: MXCryptoVerificationRequesting {",
          "115:     func requestSelfVerification(methods: [String]) async throws -> VerificationRequest {",
          "117:     }",
          "119:     func requestVerification(userId: String, roomId: String, methods: [String]) async throws -> VerificationRequest {",
          "121:     }",
          "123:     func verificationRequest(userId: String, flowId: String) -> VerificationRequest? {",
          "",
          "[Removed Lines]",
          "116:         .stub()",
          "120:         .stub()",
          "",
          "[Added Lines]",
          "116:         .stub(ourMethods: methods)",
          "120:         .stub(otherUserId: userId, roomId: roomId, ourMethods: methods)",
          "121:     }",
          "123:     func verificationRequests(userId: String) -> [VerificationRequest] {",
          "124:         return stubbedRequests.values.map { $0 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: extension CryptoVerificationStub: MXCryptoSASVerifying {",
          "150:     func startSasVerification(userId: String, flowId: String) async throws -> Sas {",
          "152:     }",
          "154:     func acceptSasVerification(userId: String, flowId: String) async throws {",
          "",
          "[Removed Lines]",
          "151:         .stub()",
          "",
          "[Added Lines]",
          "155:         .stub(otherUserId: userId, flowId: flowId)",
          "156:     }",
          "158:     func startSasVerification(userId: String, deviceId: String) async throws -> Sas {",
          "159:         .stub(otherUserId: userId, otherDeviceId: deviceId)",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift||MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift": [
          "File: MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift -> MatrixSDKTests/Crypto/Verification/MXKeyVerificationManagerV2UnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "18: import XCTest",
          "19: @testable import MatrixSDK",
          "21: #if DEBUG && os(iOS)",
          "23: class MXKeyVerificationManagerV2UnitTests: XCTestCase {",
          "24:     class MockSession: MXSession {",
          "25:         override var myUserId: String! {",
          "26:             return \"Alice\"",
          "27:         }",
          "29:         override var aggregations: MXAggregations! {",
          "30:             return MXAggregations()",
          "31:         }",
          "33:         override func getOrCreateDirectJoinedRoom(withUserId userId: String!, success: ((MXRoom?) -> Void)!, failure: ((Swift.Error?) -> Void)!) -> MXHTTPOperation! {",
          "34:             let room = MXRoom(roomId: \"ABC\", andMatrixSession: self)",
          "35:             success(room)",
          "36:             return nil",
          "37:         }",
          "38:     }",
          "40:     var session: MockSession!",
          "41:     var handler: CryptoVerificationStub!",
          "42:     var manager: MXKeyVerificationManagerV2!",
          "43:     override func setUp() {",
          "44:         session = MockSession()",
          "45:         handler = CryptoVerificationStub()",
          "46:         manager = MXKeyVerificationManagerV2(session: session, handler: handler)",
          "47:     }",
          "49:     func test_requestVerificationByToDevice() {",
          "50:         let exp = expectation(description: \"exp\")",
          "52:         manager.requestVerificationByToDevice(",
          "53:             withUserId: \"Alice\",",
          "54:             deviceIds: nil,",
          "55:             methods: [\"qr\", \"sas\"]) { request in",
          "57:                 XCTAssertEqual(self.manager.pendingRequests.first?.requestId, request.requestId)",
          "58:                 XCTAssertEqual(request.state, MXKeyVerificationRequestStatePending)",
          "59:                 XCTAssertEqual(request.myMethods, [\"qr\", \"sas\"])",
          "60:                 exp.fulfill()",
          "61:             } failure: {",
          "62:                 XCTFail(\"Failed with error \\($0)\")",
          "63:                 exp.fulfill()",
          "64:             }",
          "66:         waitForExpectations(timeout: 1)",
          "67:     }",
          "69:     func test_requestVerificationByDM() {",
          "70:         let exp = expectation(description: \"exp\")",
          "72:         manager.requestVerificationByDM(",
          "73:             withUserId: \"Bob\",",
          "74:             roomId: \"ABC\",",
          "75:             fallbackText: \"\",",
          "76:             methods: [\"qr\"]) { request in",
          "78:                 XCTAssertEqual(self.manager.pendingRequests.first?.requestId, request.requestId)",
          "79:                 XCTAssertEqual(request.state, MXKeyVerificationRequestStatePending)",
          "80:                 XCTAssertEqual(request.otherUser, \"Bob\")",
          "81:                 XCTAssertEqual(request.roomId, \"ABC\")",
          "82:                 XCTAssertEqual(request.myMethods, [\"qr\"])",
          "83:                 exp.fulfill()",
          "84:             } failure: {",
          "85:                 XCTFail(\"Failed with error \\($0)\")",
          "86:                 exp.fulfill()",
          "87:             }",
          "89:         waitForExpectations(timeout: 1)",
          "90:     }",
          "92:     func test_beginKeyVerification() {",
          "93:         let exp = expectation(description: \"exp\")",
          "95:         manager.beginKeyVerification(",
          "96:             withUserId: \"Bob\",",
          "97:             andDeviceId: \"BobDevice\",",
          "98:             method: \"QR\") { transaction in",
          "100:                 XCTAssertEqual(transaction.isIncoming, false)",
          "101:                 XCTAssertEqual(transaction.otherUserId, \"Bob\")",
          "102:                 XCTAssertEqual(transaction.otherDeviceId, \"BobDevice\")",
          "103:                 XCTAssertEqual(transaction.transport, .toDevice)",
          "105:                 self.manager.transactions {",
          "106:                     XCTAssertEqual($0.first?.transactionId, transaction.transactionId)",
          "107:                     exp.fulfill()",
          "108:                 }",
          "109:             } failure: {",
          "110:                 XCTFail(\"Failed with error \\($0)\")",
          "111:                 exp.fulfill()",
          "112:             }",
          "114:         waitForExpectations(timeout: 1)",
          "115:     }",
          "117:     func test_beginKeyVerificationFromRequest() {",
          "118:         let exp = expectation(description: \"exp\")",
          "120:         let request = MXKeyVerificationRequestV2(",
          "121:             request: .stub(otherUserId: \"Charlie\"),",
          "122:             transport: .directMessage,",
          "123:             handler: handler",
          "124:         )",
          "125:         manager.beginKeyVerification(",
          "126:             from: request,",
          "127:             method: \"QR\") { transaction in",
          "129:                 XCTAssertEqual(transaction.isIncoming, false)",
          "130:                 XCTAssertEqual(transaction.otherUserId, \"Charlie\")",
          "131:                 XCTAssertEqual(transaction.transport, .directMessage)",
          "133:                 self.manager.transactions {",
          "134:                     XCTAssertEqual($0.first?.transactionId, transaction.transactionId)",
          "135:                     exp.fulfill()",
          "136:                 }",
          "137:             } failure: {",
          "138:                 XCTFail(\"Failed with error \\($0)\")",
          "139:                 exp.fulfill()",
          "140:             }",
          "142:         waitForExpectations(timeout: 1)",
          "143:     }",
          "144: }",
          "146: #endif",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift||MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift -> MatrixSDKTests/Crypto/Verification/Status/MXKeyVerificationStateResolverUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "18: import XCTest",
          "19: @testable import MatrixSDK",
          "21: class MXKeyVerificationStateResolverUnitTests: XCTestCase {",
          "22:     class AggregationsStub: MXAggregations {",
          "23:         var stubbedEvents = [MXEvent]()",
          "24:         override func referenceEvents(",
          "25:             forEvent eventId: String,",
          "26:             inRoom roomId: String,",
          "27:             from: String?,",
          "28:             limit: Int,",
          "29:             success: @escaping (MXAggregationPaginatedResponse) -> Void,",
          "30:             failure: @escaping (Error) -> Void",
          "31:         ) -> MXHTTPOperation {",
          "32:             success(.init(originalEvent: MXEvent(), chunk: stubbedEvents, nextBatch: nil))",
          "33:             return MXHTTPOperation()",
          "34:         }",
          "35:     }",
          "37:     var aggregations: AggregationsStub!",
          "38:     var resolver: MXKeyVerificationStateResolver!",
          "39:     override func setUp() {",
          "40:         aggregations = AggregationsStub()",
          "41:         resolver = MXKeyVerificationStateResolver(myUserId: \"Alice\", aggregations: aggregations)",
          "42:     }",
          "44:     func verificationState() async throws -> MXKeyVerificationState {",
          "46:         return try await resolver.verificationState(flowId: \"\", roomId: \"\")",
          "47:     }",
          "49:     func test_defaultState() async throws {",
          "50:         let state = try await verificationState()",
          "51:         XCTAssertEqual(state, .transactionStarted)",
          "52:     }",
          "54:     func test_cancelledByMeState() async throws {",
          "55:         aggregations.stubbedEvents = [",
          "56:             MXEvent.fixture(",
          "57:                 type: kMXEventTypeStringKeyVerificationCancel,",
          "58:                 sender: \"Alice\",",
          "59:                 content: [",
          "60:                     \"code\": \"m.user\"",
          "61:                 ]",
          "62:             )",
          "63:         ]",
          "64:         let state = try await verificationState()",
          "65:         XCTAssertEqual(state, .transactionCancelledByMe)",
          "66:     }",
          "68:     func test_cancelledState() async throws {",
          "69:         aggregations.stubbedEvents = [",
          "70:             MXEvent.fixture(",
          "71:                 type: kMXEventTypeStringKeyVerificationCancel,",
          "72:                 sender: \"Bob\",",
          "73:                 content: [",
          "74:                     \"code\": \"m.user\"",
          "75:                 ]",
          "76:             )",
          "77:         ]",
          "78:         let state = try await verificationState()",
          "79:         XCTAssertEqual(state, .transactionCancelled)",
          "80:     }",
          "82:     func test_expiredState() async throws {",
          "83:         aggregations.stubbedEvents = [",
          "84:             MXEvent.fixture(",
          "85:                 type: kMXEventTypeStringKeyVerificationCancel,",
          "86:                 content: [",
          "87:                     \"code\": \"m.timeout\"",
          "88:                 ]",
          "89:             )",
          "90:         ]",
          "91:         let state = try await verificationState()",
          "92:         XCTAssertEqual(state, .requestExpired)",
          "93:     }",
          "95:     func test_failedState() async throws {",
          "96:         aggregations.stubbedEvents = [",
          "97:             MXEvent.fixture(",
          "98:                 type: kMXEventTypeStringKeyVerificationCancel",
          "99:             )",
          "100:         ]",
          "101:         let state = try await resolver.verificationState(flowId: \"\", roomId: \"\")",
          "102:         XCTAssertEqual(state, .transactionFailed)",
          "103:     }",
          "105:     func test_verifiedState() async throws {",
          "106:         aggregations.stubbedEvents = [",
          "107:             MXEvent.fixture(",
          "108:                 type: kMXEventTypeStringKeyVerificationDone",
          "109:             )",
          "110:         ]",
          "111:         let state = try await verificationState()",
          "112:         XCTAssertEqual(state, .verified)",
          "113:     }",
          "115:     func test_readyState() async throws {",
          "116:         aggregations.stubbedEvents = [",
          "117:             MXEvent.fixture(",
          "118:                 type: kMXEventTypeStringKeyVerificationReady",
          "119:             )",
          "120:         ]",
          "122:         let state = try await verificationState()",
          "123:         XCTAssertEqual(state, .requestReady)",
          "124:     }",
          "126:     func test_overrideReadyState() async throws {",
          "127:         aggregations.stubbedEvents = [",
          "128:             MXEvent.fixture(",
          "129:                 type: kMXEventTypeStringKeyVerificationReady",
          "130:             ),",
          "131:             MXEvent.fixture(",
          "132:                 type: kMXEventTypeStringKeyVerificationCancel",
          "133:             ),",
          "134:         ]",
          "136:         let state = try await verificationState()",
          "137:         XCTAssertEqual(state, .transactionFailed)",
          "138:     }",
          "140: }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift": [
          "File: MatrixSDKTests/JSONModels/MXEventFixtures.swift -> MatrixSDKTests/JSONModels/MXEventFixtures.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         ])!",
          "36:     }",
          "38:     static func roomKeyFixture(",
          "39:         algorithm: String = \"megolm\",",
          "40:         roomId: String = \"!123:matrix.org\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     static func fixture(",
          "39:         type: String,",
          "40:         sender: String = \"\",",
          "41:         content: [String: Any] = [:]",
          "42:     ) -> MXEvent {",
          "43:         let result = MXEventDecryptionResult()",
          "44:         result.clearEvent = [",
          "45:             \"type\": type,",
          "46:             \"content\": content",
          "47:         ]",
          "49:         let event = MXEvent(fromJSON: [:])!",
          "50:         event.sender = sender",
          "51:         event.setClearData(result)",
          "52:         return event",
          "53:     }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXClientInformationServiceUnitTests.swift||MatrixSDKTests/MXClientInformationServiceUnitTests.swift": [
          "File: MatrixSDKTests/MXClientInformationServiceUnitTests.swift -> MatrixSDKTests/MXClientInformationServiceUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     override func setAccountData(_ data: [AnyHashable : Any]!,",
          "120:                                  forType type: String!,",
          "121:                                  success: (() -> Void)!,",
          "123:         isSetAccountDataCalled = true",
          "124:         return super.setAccountData(data,",
          "125:                                     forType: type,",
          "",
          "[Removed Lines]",
          "122:                                  failure: ((Error?) -> Void)!) -> MXHTTPOperation! {",
          "",
          "[Added Lines]",
          "122:                                  failure: ((Swift.Error?) -> Void)!) -> MXHTTPOperation! {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCrossSigningVerificationTests.m||MatrixSDKTests/MXCrossSigningVerificationTests.m": [
          "File: MatrixSDKTests/MXCrossSigningVerificationTests.m -> MatrixSDKTests/MXCrossSigningVerificationTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:                     {",
          "572:                         MXEvent *event = [aliceSession.store eventWithEventId:requestId inRoom:roomId];",
          "575:                             XCTAssertEqual(verificationFromAlicePOV.state, MXKeyVerificationStateVerified);",
          "",
          "[Removed Lines]",
          "573:                         [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "[Added Lines]",
          "573:                         [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event roomId:roomId success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:                     {",
          "791:                         MXEvent *event = [aliceSession.store eventWithEventId:requestId inRoom:roomId];",
          "794:                             XCTAssertEqual(verificationFromAlicePOV.state, MXKeyVerificationStateVerified);",
          "",
          "[Removed Lines]",
          "792:                         [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "[Added Lines]",
          "792:                         [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event roomId:roomId success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoKeyVerificationTests.m||MatrixSDKTests/MXCryptoKeyVerificationTests.m": [
          "File: MatrixSDKTests/MXCryptoKeyVerificationTests.m -> MatrixSDKTests/MXCryptoKeyVerificationTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190:         {",
          "1192:             MXEvent *event = [aliceSession.store eventWithEventId:requestFromAlicePOV.requestId inRoom:roomId];",
          "1195:                 XCTAssertEqual(verificationFromAlicePOV.state, MXKeyVerificationStateVerified);",
          "",
          "[Removed Lines]",
          "1193:             [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "[Added Lines]",
          "1193:             [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event roomId:roomId success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1284:             if (cancelCancel.count == 2)",
          "1285:             {",
          "1289:                     XCTAssertEqual(verificationFromAlicePOV.state, MXKeyVerificationStateRequestCancelledByMe);",
          "",
          "[Removed Lines]",
          "1287:                 [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "[Added Lines]",
          "1287:                 [aliceSession.crypto.keyVerificationManager keyVerificationFromKeyVerificationEvent:event roomId:roomId success:^(MXKeyVerification * _Nonnull verificationFromAlicePOV) {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         \"MXJSONModelUnitTests\",",
          "60:         \"MXKeyBackupUnitTests\",",
          "61:         \"MXKeyProviderUnitTests\",",
          "62:         \"MXKeyVerificationRequestV2UnitTests\",",
          "63:         \"MXMediaScanStoreUnitTests\",",
          "64:         \"MXMegolmDecryptionUnitTests\",",
          "65:         \"MXMegolmExportEncryptionUnitTests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         \"MXKeyVerificationManagerV2UnitTests\",",
          "64:         \"MXKeyVerificationStateResolverUnitTests\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         \"MXThreadingServiceUnitTests\",",
          "84:         \"MXToolsUnitTests\",",
          "85:         \"MXTrustLevelSourceUnitTests\",",
          "87:       ],",
          "88:       \"target\" : {",
          "89:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
          "",
          "[Removed Lines]",
          "86:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
          "",
          "[Added Lines]",
          "88:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\"",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         \"MXJSONModelUnitTests\",",
          "68:         \"MXKeyBackupUnitTests\",",
          "69:         \"MXKeyProviderUnitTests\",",
          "70:         \"MXKeyVerificationRequestV2UnitTests\",",
          "71:         \"MXMediaScanStoreUnitTests\",",
          "72:         \"MXMegolmDecryptionUnitTests\",",
          "73:         \"MXMegolmExportEncryptionUnitTests\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         \"MXKeyVerificationManagerV2UnitTests\",",
          "72:         \"MXKeyVerificationStateResolverUnitTests\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         \"MXThreadingServiceUnitTests\",",
          "92:         \"MXToolsUnitTests\",",
          "93:         \"MXTrustLevelSourceUnitTests\",",
          "95:       ],",
          "96:       \"target\" : {",
          "97:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
          "",
          "[Removed Lines]",
          "94:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
          "",
          "[Added Lines]",
          "96:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\"",
          "",
          "---------------"
        ],
        "changelog.d/6809.change||changelog.d/6809.change": [
          "File: changelog.d/6809.change -> changelog.d/6809.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: CryptoV2: Incoming verification requests",
          "",
          "---------------"
        ]
      }
    }
  ]
}