{
  "cve_id": "CVE-2020-14976",
  "cve_desc": "GNS3 ubridge through 0.9.18 on macOS, as used in GNS3 server before 2.1.17, allows a local attacker to read arbitrary files because it handles configuration-file errors by printing the configuration file while executing in a setuid root context.",
  "repo": "GNS3/ubridge",
  "patch_hash": "2eb0d1dab6a6de76cf3556130a2d52af101077db",
  "patch_info": {
    "commit_hash": "2eb0d1dab6a6de76cf3556130a2d52af101077db",
    "repo": "GNS3/ubridge",
    "commit_url": "https://github.com/GNS3/ubridge/commit/2eb0d1dab6a6de76cf3556130a2d52af101077db",
    "files": [
      "src/iniparser/iniparser.c",
      "src/iniparser/iniparser.h",
      "src/parse.c"
    ],
    "message": "Hide errored line content during parsing configuration INI file on default",
    "before_after_code_files": [
      "src/iniparser/iniparser.c||src/iniparser/iniparser.c",
      "src/iniparser/iniparser.h||src/iniparser/iniparser.h",
      "src/parse.c||src/parse.c"
    ]
  },
  "patch_diff": {
    "src/iniparser/iniparser.c||src/iniparser/iniparser.c": [
      "File: src/iniparser/iniparser.c -> src/iniparser/iniparser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626:   The returned dictionary must be freed using iniparser_freedict().",
      "630: {",
      "631:     FILE * in ;",
      "",
      "[Removed Lines]",
      "629: dictionary * iniparser_load(const char * ininame)",
      "",
      "[Added Lines]",
      "629: dictionary * iniparser_load(const char * ininame, load_options options)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "707:             break ;",
      "709:             case LINE_ERROR:",
      "714:             errs++ ;",
      "715:             break;",
      "",
      "[Removed Lines]",
      "710:             fprintf(stderr, \"iniparser: syntax error in %s (%d):\\n\",",
      "711:                     ininame,",
      "712:                     lineno);",
      "713:             fprintf(stderr, \"-> %s\\n\", line);",
      "",
      "[Added Lines]",
      "711:             if(options & HIDE_ERRORED_LINE_CONTENT) {",
      "712:               fprintf(stderr, \"iniparser: syntax error in %s (%d)\\n\",",
      "713:                       ininame,",
      "714:                       lineno);",
      "715:             }",
      "716:             else {",
      "717:               fprintf(stderr, \"iniparser: syntax error in %s (%d):\\n\",",
      "718:                       ininame,",
      "719:                       lineno);",
      "720:               fprintf(stderr, \"-> %s\\n\", line);",
      "721:             }",
      "",
      "---------------"
    ],
    "src/iniparser/iniparser.h||src/iniparser/iniparser.h": [
      "File: src/iniparser/iniparser.h -> src/iniparser/iniparser.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: extern \"C\" {",
      "32: #endif",
      "36:   @brief    Get number of sections in a dictionary",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: typedef enum {",
      "35:   HIDE_ERRORED_LINE_CONTENT = (1<<0)",
      "36: } load_options;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "287:   @brief    Parse an ini file and return an allocated dictionary object",
      "288:   @param    ininame Name of the ini file to read.",
      "289:   @return   Pointer to newly allocated dictionary",
      "291:   This is the parser for ini files. This function is called, providing",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:   @param    options Name of the ini file to read.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "296:   The returned dictionary must be freed using iniparser_freedict().",
      "",
      "[Removed Lines]",
      "299: dictionary * iniparser_load(const char * ininame);",
      "",
      "[Added Lines]",
      "304: dictionary * iniparser_load(const char * ininame, load_options options);",
      "",
      "---------------"
    ],
    "src/parse.c||src/parse.c": [
      "File: src/parse.c -> src/parse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "186:     const char *bridge_name;",
      "187:     int i, nsec;",
      "190:        return FALSE;",
      "191:     }",
      "",
      "[Removed Lines]",
      "189:     if ((ubridge_config = iniparser_load(filename)) == NULL) {",
      "",
      "[Added Lines]",
      "189:     if ((ubridge_config = iniparser_load(filename, HIDE_ERRORED_LINE_CONTENT)) == NULL) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af29229b7511d857fe19a625b718ed8d01ba005c",
      "candidate_info": {
        "commit_hash": "af29229b7511d857fe19a625b718ed8d01ba005c",
        "repo": "GNS3/ubridge",
        "commit_url": "https://github.com/GNS3/ubridge/commit/af29229b7511d857fe19a625b718ed8d01ba005c",
        "files": [
          "src/iniparser/iniparser.h"
        ],
        "message": "iniparser_load in-doc fix",
        "before_after_code_files": [
          "src/iniparser/iniparser.h||src/iniparser/iniparser.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/iniparser/iniparser.h||src/iniparser/iniparser.h"
          ],
          "candidate": [
            "src/iniparser/iniparser.h||src/iniparser/iniparser.h"
          ]
        }
      },
      "candidate_diff": {
        "src/iniparser/iniparser.h||src/iniparser/iniparser.h": [
          "File: src/iniparser/iniparser.h -> src/iniparser/iniparser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:   @brief    Parse an ini file and return an allocated dictionary object",
          "292:   @param    ininame Name of the ini file to read.",
          "294:   @return   Pointer to newly allocated dictionary",
          "296:   This is the parser for ini files. This function is called, providing",
          "",
          "[Removed Lines]",
          "293:   @param    options Name of the ini file to read.",
          "",
          "[Added Lines]",
          "293:   @param    options Loading options.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d18c734fe414fee1dd9750ac4558da1c9ed7005b",
      "candidate_info": {
        "commit_hash": "d18c734fe414fee1dd9750ac4558da1c9ed7005b",
        "repo": "GNS3/ubridge",
        "commit_url": "https://github.com/GNS3/ubridge/commit/d18c734fe414fee1dd9750ac4558da1c9ed7005b",
        "files": [
          "src/iniparser/dictionary.c",
          "src/iniparser/iniparser.c",
          "src/iniparser/iniparser.h",
          "src/parse.c"
        ],
        "message": "Update iniparse to v4.1",
        "before_after_code_files": [
          "src/iniparser/dictionary.c||src/iniparser/dictionary.c",
          "src/iniparser/iniparser.c||src/iniparser/iniparser.c",
          "src/iniparser/iniparser.h||src/iniparser/iniparser.h",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/iniparser/iniparser.c||src/iniparser/iniparser.c",
            "src/iniparser/iniparser.h||src/iniparser/iniparser.h",
            "src/parse.c||src/parse.c"
          ],
          "candidate": [
            "src/iniparser/iniparser.c||src/iniparser/iniparser.c",
            "src/iniparser/iniparser.h||src/iniparser/iniparser.h",
            "src/parse.c||src/parse.c"
          ]
        }
      },
      "candidate_diff": {
        "src/iniparser/dictionary.c||src/iniparser/dictionary.c": [
          "File: src/iniparser/dictionary.c -> src/iniparser/dictionary.c"
        ],
        "src/iniparser/iniparser.c||src/iniparser/iniparser.c": [
          "File: src/iniparser/iniparser.c -> src/iniparser/iniparser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <ctype.h>",
          "11: #include \"iniparser.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <stdarg.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: {",
          "72: }",
          "",
          "[Removed Lines]",
          "60:   @brief    Copy string in a newly mallocced area",
          "61:   @param    str  String to copy.",
          "62:   @return   str  Copied version of the given string allocated with malloc",
          "64:   Original strdup is not portable, need to implement our own",
          "67: static char * _strdup(const char *s)",
          "69:     char * copy = (char*) malloc(strlen(s));",
          "70:     strcpy(copy, s);",
          "71:     return copy ;",
          "",
          "[Added Lines]",
          "61:   @brief    Duplicate a string",
          "62:   @param    s String to duplicate",
          "63:   @return   Pointer to a newly allocated string, to be freed with free()",
          "65:   This is a replacement for strdup(). This implementation is provided",
          "66:   for systems that do not have it.",
          "69: static char * xstrdup(const char * s)",
          "71:     char * t ;",
          "72:     size_t len ;",
          "73:     if (!s)",
          "74:         return NULL ;",
          "76:     len = strlen(s) + 1 ;",
          "77:     t = (char*) malloc(len) ;",
          "78:     if (t) {",
          "79:         memcpy(t, s, len) ;",
          "80:     }",
          "81:     return t ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   @return   unsigned New size of the string.",
          "82: {",
          "83:     char *last = NULL ;",
          "84:     char *dest = s;",
          "",
          "[Removed Lines]",
          "81: unsigned strstrip(char * s)",
          "",
          "[Added Lines]",
          "91: static unsigned strstrip(char * s)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:     return last - s;",
          "99: }",
          "103:   @brief    Get number of sections in a dictionary",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   @brief    Default error callback for iniparser: wraps `fprintf(stderr, ...)`.",
          "116: static int default_error_callback(const char *format, ...)",
          "117: {",
          "118:   int ret;",
          "119:   va_list argptr;",
          "120:   va_start(argptr, format);",
          "121:   ret = vfprintf(stderr, format, argptr);",
          "122:   va_end(argptr);",
          "123:   return ret;",
          "124: }",
          "126: static int (*iniparser_error_callback)(const char*, ...) = default_error_callback;",
          "130:   @brief    Configure a function to receive the error messages.",
          "131:   @param    errback  Function to call.",
          "133:   By default, the error will be printed on stderr. If a null pointer is passed",
          "134:   as errback the error callback will be switched back to default.",
          "137: void iniparser_set_error_callback(int (*errback)(const char *, ...))",
          "138: {",
          "139:   if (errback) {",
          "140:     iniparser_error_callback = errback;",
          "141:   } else {",
          "142:     iniparser_error_callback = default_error_callback;",
          "143:   }",
          "144: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:     if (! iniparser_find_entry(d, s)) return nkeys;",
          "296:     seclen  = (int)strlen(s);",
          "299:     for (j=0 ; j<d->size ; j++) {",
          "300:         if (d->key[j]==NULL)",
          "",
          "[Removed Lines]",
          "297:     sprintf(keym, \"%s:\", s);",
          "",
          "[Added Lines]",
          "342:     strlwc(s, keym, sizeof(keym));",
          "343:     keym[seclen] = ':';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "332:     if (! iniparser_find_entry(d, s)) return NULL;",
          "334:     seclen  = (int)strlen(s);",
          "337:     i = 0;",
          "",
          "[Removed Lines]",
          "335:     sprintf(keym, \"%s:\", s);",
          "",
          "[Added Lines]",
          "381:     strlwc(s, keym, sizeof(keym));",
          "382:     keym[seclen] = ':';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "383:   @param    d Dictionary to search",
          "384:   @param    key Key string to look for",
          "385:   @param    notfound Value to return in case of error",
          "388:   This function queries a dictionary for a key. A key as read from an",
          "389:   ini file is given as \"section:key\". If the key cannot be found,",
          "",
          "[Removed Lines]",
          "382:   @brief    Get the string associated to a key, convert to an int",
          "386:   @return   integer",
          "",
          "[Added Lines]",
          "429:   @brief    Get the string associated to a key, convert to an long int",
          "433:   @return   long integer",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "404:   Credits: Thanks to A. Becker for suggesting strtol()",
          "408: {",
          "409:     const char * str ;",
          "411:     str = iniparser_getstring(d, key, INI_INVALID_KEY);",
          "412:     if (str==INI_INVALID_KEY) return notfound ;",
          "414: }",
          "",
          "[Removed Lines]",
          "407: int iniparser_getint(const dictionary * d, const char * key, int notfound)",
          "413:     return (int)strtol(str, NULL, 0);",
          "",
          "[Added Lines]",
          "454: long int iniparser_getlongint(const dictionary * d, const char * key, long int notfound)",
          "460:     return strtol(str, NULL, 0);",
          "461: }",
          "466:   @brief    Get the string associated to a key, convert to an int",
          "467:   @param    d Dictionary to search",
          "468:   @param    key Key string to look for",
          "469:   @param    notfound Value to return in case of error",
          "470:   @return   integer",
          "472:   This function queries a dictionary for a key. A key as read from an",
          "473:   ini file is given as \"section:key\". If the key cannot be found,",
          "474:   the notfound value is returned.",
          "476:   Supported values for integers include the usual C notation",
          "477:   so decimal, octal (starting with 0) and hexadecimal (starting with 0x)",
          "478:   are supported. Examples:",
          "480:   \"42\"      ->  42",
          "481:   \"042\"     ->  34 (octal -> decimal)",
          "482:   \"0x42\"    ->  66 (hexa  -> decimal)",
          "484:   Warning: the conversion may overflow in various ways. Conversion is",
          "485:   totally outsourced to strtol(), see the associated man page for overflow",
          "486:   handling.",
          "488:   Credits: Thanks to A. Becker for suggesting strtol()",
          "491: int iniparser_getint(const dictionary * d, const char * key, int notfound)",
          "492: {",
          "493:     return (int)iniparser_getlongint(d, key, notfound);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "560:     char * line = NULL;",
          "561:     size_t      len ;",
          "564:     len = strstrip(line);",
          "566:     sta = LINE_UNPROCESSED ;",
          "",
          "[Removed Lines]",
          "563:     line = _strdup(input_line);",
          "",
          "[Added Lines]",
          "643:     line = xstrdup(input_line);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "577:         strlwc(section, section, len);",
          "578:         sta = LINE_SECTION ;",
          "579:     } else if (sscanf (line, \"%[^=] = \\\"%[^\\\"]\\\"\", key, value) == 2",
          "583:         strstrip(key);",
          "584:         strlwc(key, key, len);",
          "585:         strstrip(value);",
          "",
          "[Removed Lines]",
          "580:            ||  sscanf (line, \"%[^=] = '%[^\\']'\",   key, value) == 2",
          "581:            ||  sscanf (line, \"%[^=] = %[^;#]\",     key, value) == 2) {",
          "",
          "[Added Lines]",
          "660:            ||  sscanf (line, \"%[^=] = '%[^\\']'\",   key, value) == 2) {",
          "662:         strstrip(key);",
          "663:         strlwc(key, key, len);",
          "665:         sta = LINE_VALUE ;",
          "666:     } else if (sscanf (line, \"%[^=] = %[^;#]\", key, value) == 2) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "626:   The returned dictionary must be freed using iniparser_freedict().",
          "630: {",
          "631:     FILE * in ;",
          "",
          "[Removed Lines]",
          "629: dictionary * iniparser_load(const char * ininame, load_options options)",
          "",
          "[Added Lines]",
          "714: dictionary * iniparser_load(const char * ininame)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "640:     int  len ;",
          "641:     int  lineno=0 ;",
          "642:     int  errs=0;",
          "644:     dictionary * dict ;",
          "646:     if ((in=fopen(ininame, \"r\"))==NULL) {",
          "648:         return NULL ;",
          "649:     }",
          "",
          "[Removed Lines]",
          "647:         fprintf(stderr, \"iniparser: cannot open %s\\n\", ininame);",
          "",
          "[Added Lines]",
          "728:     int  mem_err=0;",
          "733:         iniparser_error_callback(\"iniparser: cannot open %s\\n\", ininame);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "663:     while (fgets(line+last, ASCIILINESZ-last, in)!=NULL) {",
          "664:         lineno++ ;",
          "665:         len = (int)strlen(line)-1;",
          "667:             continue;",
          "669:         if (line[len]!='\\n' && !feof(in)) {",
          "674:             dictionary_del(dict);",
          "675:             fclose(in);",
          "676:             return NULL ;",
          "",
          "[Removed Lines]",
          "666:         if (len==0)",
          "670:             fprintf(stderr,",
          "671:                     \"iniparser: input line too long in %s (%d)\\n\",",
          "672:                     ininame,",
          "673:                     lineno);",
          "",
          "[Added Lines]",
          "752:         if (len<=0)",
          "756:             iniparser_error_callback(",
          "757:               \"iniparser: input line too long in %s (%d)\\n\",",
          "758:               ininame,",
          "759:               lineno);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "698:             break ;",
          "700:             case LINE_SECTION:",
          "702:             break ;",
          "704:             case LINE_VALUE:",
          "705:             sprintf(tmp, \"%s:%s\", section, key);",
          "707:             break ;",
          "709:             case LINE_ERROR:",
          "722:             errs++ ;",
          "723:             break;",
          "",
          "[Removed Lines]",
          "701:             errs = dictionary_set(dict, section, NULL);",
          "706:             errs = dictionary_set(dict, tmp, val) ;",
          "711:             if(options & HIDE_ERRORED_LINE_CONTENT) {",
          "712:               fprintf(stderr, \"iniparser: syntax error in %s (%d)\\n\",",
          "713:                       ininame,",
          "714:                       lineno);",
          "715:             }",
          "716:             else {",
          "717:               fprintf(stderr, \"iniparser: syntax error in %s (%d):\\n\",",
          "718:                       ininame,",
          "719:                       lineno);",
          "720:               fprintf(stderr, \"-> %s\\n\", line);",
          "721:             }",
          "",
          "[Added Lines]",
          "787:             mem_err = dictionary_set(dict, section, NULL);",
          "792:             mem_err = dictionary_set(dict, tmp, val);",
          "796:             iniparser_error_callback(",
          "797:               \"iniparser: syntax error in %s (%d):\\n-> %s\\n\",",
          "798:               ininame,",
          "799:               lineno,",
          "800:               line);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "727:         }",
          "728:         memset(line, 0, ASCIILINESZ);",
          "729:         last=0;",
          "732:             break ;",
          "733:         }",
          "734:     }",
          "",
          "[Removed Lines]",
          "730:         if (errs<0) {",
          "731:             fprintf(stderr, \"iniparser: memory allocation failure\\n\");",
          "",
          "[Added Lines]",
          "809:         if (mem_err<0) {",
          "810:             iniparser_error_callback(\"iniparser: memory allocation failure\\n\");",
          "",
          "---------------"
        ],
        "src/iniparser/iniparser.h||src/iniparser/iniparser.h": [
          "File: src/iniparser/iniparser.h -> src/iniparser/iniparser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: extern \"C\" {",
          "32: #endif",
          "",
          "[Removed Lines]",
          "34: typedef enum {",
          "35:   HIDE_ERRORED_LINE_CONTENT = (1<<0)",
          "36: } load_options;",
          "",
          "[Added Lines]",
          "36:   @brief    Configure a function to receive the error messages.",
          "37:   @param    errback  Function to call.",
          "39:   By default, the error will be printed on stderr. If a null pointer is passed",
          "40:   as errback the error callback will be switched back to default.",
          "44: void iniparser_set_error_callback(int (*errback)(const char *, ...));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195: int iniparser_getint(const dictionary * d, const char * key, int notfound);",
          "199:   @brief    Get the string associated to a key, convert to a double",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   @brief    Get the string associated to a key, convert to an long int",
          "208:   @param    d Dictionary to search",
          "209:   @param    key Key string to look for",
          "210:   @param    notfound Value to return in case of error",
          "211:   @return   integer",
          "213:   This function queries a dictionary for a key. A key as read from an",
          "214:   ini file is given as \"section:key\". If the key cannot be found,",
          "215:   the notfound value is returned.",
          "217:   Supported values for integers include the usual C notation",
          "218:   so decimal, octal (starting with 0) and hexadecimal (starting with 0x)",
          "219:   are supported. Examples:",
          "221:   - \"42\"      ->  42",
          "222:   - \"042\"     ->  34 (octal -> decimal)",
          "223:   - \"0x42\"    ->  66 (hexa  -> decimal)",
          "225:   Warning: the conversion may overflow in various ways. Conversion is",
          "226:   totally outsourced to strtol(), see the associated man page for overflow",
          "227:   handling.",
          "230: long int iniparser_getlongint(const dictionary * d, const char * key, long int notfound);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:   @brief    Parse an ini file and return an allocated dictionary object",
          "292:   @param    ininame Name of the ini file to read.",
          "294:   @return   Pointer to newly allocated dictionary",
          "296:   This is the parser for ini files. This function is called, providing",
          "",
          "[Removed Lines]",
          "293:   @param    options Loading options.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:   The returned dictionary must be freed using iniparser_freedict().",
          "",
          "[Removed Lines]",
          "304: dictionary * iniparser_load(const char * ininame, load_options options);",
          "",
          "[Added Lines]",
          "339: dictionary * iniparser_load(const char * ininame);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     const char *bridge_name;",
          "187:     int i, nsec;",
          "190:        return FALSE;",
          "191:     }",
          "",
          "[Removed Lines]",
          "189:     if ((ubridge_config = iniparser_load(filename, HIDE_ERRORED_LINE_CONTENT)) == NULL) {",
          "",
          "[Added Lines]",
          "189:     if ((ubridge_config = iniparser_load(filename)) == NULL) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}