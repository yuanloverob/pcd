{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a821997cd90d9497e96567b7ffef3b00f3a371bc",
      "candidate_info": {
        "commit_hash": "a821997cd90d9497e96567b7ffef3b00f3a371bc",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a821997cd90d9497e96567b7ffef3b00f3a371bc",
        "files": [
          "modules/b2b_entities/b2be_db.c",
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: fix entity storage memory leak\n\nDo not reset the pointer to the storage buffer when there is nothing\nto serialize after running the callback.\n\n(cherry picked from commit e19ed6eaaf8d238ada6b9868760127f097412439)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c",
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c": [
          "File: modules/b2b_entities/b2be_db.c -> modules/b2b_entities/b2be_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:     }",
          "381:    }",
          "384:     shm_free(dlg->storage.s);",
          "385:     dlg->storage.len = 0;",
          "386:     dlg->storage.s = NULL;",
          "",
          "[Removed Lines]",
          "383:    if (b2be_db_mode == WRITE_BACK && dlg->storage.len) {",
          "",
          "[Added Lines]",
          "383:    if (dlg->storage.len) {",
          "",
          "---------------"
        ],
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "525: {",
          "526:  struct b2b_callback *cb;",
          "527:  str st;",
          "",
          "[Removed Lines]",
          "528:  char *prev_st;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:    !memcmp(dlg->mod_name.s, cb->mod_name.s, cb->mod_name.len))",
          "536:    break;",
          "542:  if (cbs_type == B2BCB_TRIGGER_EVENT) {",
          "543:   if (!cb) {",
          "",
          "[Removed Lines]",
          "538:  prev_st = dlg->storage.s;",
          "539:  dlg->storage.s = NULL;",
          "540:  dlg->storage.len = 0;",
          "",
          "[Added Lines]",
          "537:  if (b2be_db_mode == WRITE_THROUGH) {",
          "538:   dlg->storage.s = NULL;",
          "539:   dlg->storage.len = 0;",
          "540:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:     if (b2be_db_mode == WRITE_THROUGH) {",
          "562:      dlg->storage = st;",
          "563:     } else {",
          "566:      if (shm_str_dup(&dlg->storage, &st) < 0) {",
          "567:       LM_ERR(\"oom!\\n\");",
          "568:       return;",
          "",
          "[Removed Lines]",
          "564:      if (prev_st)",
          "565:       shm_free(prev_st);",
          "",
          "[Added Lines]",
          "564:      if (dlg->storage.s)",
          "565:       shm_free(dlg->storage.s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "592:   if (b2be_db_mode == WRITE_THROUGH) {",
          "593:    dlg->storage = st;",
          "594:   } else {",
          "597:    if (shm_str_dup(&dlg->storage, &st) < 0) {",
          "598:     LM_ERR(\"oom!\\n\");",
          "599:     return;",
          "",
          "[Removed Lines]",
          "595:    if (prev_st)",
          "596:     shm_free(prev_st);",
          "",
          "[Added Lines]",
          "595:    if (dlg->storage.s)",
          "596:     shm_free(dlg->storage.s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
      "candidate_info": {
        "commit_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b9c092ede40af311c9b27317a3029f785f0eb14c",
        "files": [
          "modules/b2b_entities/b2be_db.c"
        ],
        "message": "b2b_entities: fix the right number of rows when leg is missing\n\nThanks go to Norm Brandinger from Five9 for reporting, testing and\nproviding all the help to pinpoint this issue!\n\n(cherry picked from commit b005a3795f9a762011f488cb403f2e9bd7a7ade1)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c": [
          "File: modules/b2b_entities/b2be_db.c -> modules/b2b_entities/b2be_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:  int i;",
          "280:  dlg_leg_t* leg;",
          "281:  b2b_dlg_t* dlg;",
          "283:  if (!b2be_dbf.init)",
          "284:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  int cols_no = DB_COLS_NO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:    qvals[20].val.int_val = dlg->last_invite_cseq;",
          "347:    qvals[21].val.str_val = dlg->contact[0];",
          "348:    qvals[22].val.str_val = dlg->contact[1];",
          "350:    leg = dlg->legs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    cols_no = 23;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354:     qvals[24].val.int_val= leg->cseq;",
          "355:     qvals[25].val.str_val= leg->contact;",
          "356:     qvals[26].val.str_val= leg->route_set;",
          "357:    }",
          "359:    if(dlg->db_flag == INSERTDB_FLAG)",
          "360:    {",
          "363:     {",
          "364:      LM_ERR(\"Sql insert failed\\n\");",
          "365:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "362:     if(b2be_dbf.insert(b2be_db, qcols, qvals, DB_COLS_NO)< 0)",
          "",
          "[Added Lines]",
          "359:     cols_no = 27;",
          "365:     if(b2be_dbf.insert(b2be_db, qcols, qvals, cols_no)< 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371:    {",
          "372:     if(b2be_dbf.update(b2be_db, qcols, 0, qvals,",
          "373:        qcols+n_start_update, qvals+n_start_update,",
          "375:     {",
          "376:      LM_ERR(\"Sql update failed\\n\");",
          "377:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "374:        n_query_update, DB_COLS_NO-n_start_update)< 0)",
          "",
          "[Added Lines]",
          "377:        n_query_update, cols_no-n_start_update)< 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
      "candidate_info": {
        "commit_hash": "c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
        "files": [
          "modules/tm/t_cancel.c",
          "modules/tm/t_reply.c"
        ],
        "message": "tm: use INVITE's AVPs when sending locally generated msgs\n\nThis allows the TLS_MGM module to pick up the right tls_domain that\nshould be used for sending the ACK/CANCEL message\n\n(cherry picked from commit 84c1614ecea5025230b46950408c8343c693ec8b)",
        "before_after_code_files": [
          "modules/tm/t_cancel.c||modules/tm/t_cancel.c",
          "modules/tm/t_reply.c||modules/tm/t_reply.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/tm/t_cancel.c||modules/tm/t_cancel.c": [
          "File: modules/tm/t_cancel.c -> modules/tm/t_cancel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  char *cancel;",
          "89:  unsigned int len;",
          "90:  struct retr_buf *crb, *irb;",
          "92:  crb=&t->uac[branch].local_cancel;",
          "93:  irb=&t->uac[branch].request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  struct usr_avp **backup_list;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  LM_DBG(\"sending cancel...\\n\");",
          "124:  if (t->uac[branch].br_flags & tcp_no_new_conn_bflag)",
          "125:   tcp_no_new_conn = 1;",
          "126:  if (SEND_BUFFER( crb )==0) {",
          "127:   if ( has_tran_tmcbs( t, TMCB_MSG_SENT_OUT) ) {",
          "128:    set_extra_tmcb_params( &crb->buffer, &crb->dst);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  backup_list = set_avp_list( &t->user_avps );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     t, t->uas.request, 0, 0);",
          "131:   }",
          "132:  }",
          "133:  tcp_no_new_conn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:  set_avp_list(backup_list);",
          "",
          "---------------"
        ],
        "modules/tm/t_reply.c||modules/tm/t_reply.c": [
          "File: modules/tm/t_reply.c -> modules/tm/t_reply.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:  str method = str_init(ACK);",
          "291:  str to;",
          "292:  str ack_buf;",
          "294:  if(parse_headers(rpl,is_local(trans)?HDR_EOH_F:(HDR_TO_F|HDR_FROM_F),0)==-1",
          "295:  || !rpl->to || !rpl->from ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:  struct usr_avp **backup_list;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:  if (trans->uac[branch].br_flags & tcp_no_new_conn_bflag)",
          "311:   tcp_no_new_conn = 1;",
          "313:  if(SEND_PR_BUFFER(&trans->uac[branch].request, ack_buf.s, ack_buf.len)==0){",
          "315:   if ( has_tran_tmcbs( trans, TMCB_MSG_SENT_OUT) ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  backup_list = set_avp_list( &trans->user_avps );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     trans, trans->uas.request, 0, 0);",
          "319:   }",
          "320:  }",
          "322:  tcp_no_new_conn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:  set_avp_list(backup_list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b270ad04db8081bbb829f89fa515fa0c37698c7",
      "candidate_info": {
        "commit_hash": "0b270ad04db8081bbb829f89fa515fa0c37698c7",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0b270ad04db8081bbb829f89fa515fa0c37698c7",
        "files": [
          "net/net_tcp.c",
          "net/proto_tcp/proto_tcp.c"
        ],
        "message": "Fix crash in bogus OOM handling while TCP async in enabled.\n\nThe async support assums the c->async exists all the time, so error if we cannot alloc the c->async struct while creating a new TCP conn",
        "before_after_code_files": [
          "net/net_tcp.c||net/net_tcp.c",
          "net/proto_tcp/proto_tcp.c||net/proto_tcp/proto_tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/net_tcp.c||net/net_tcp.c": [
          "File: net/net_tcp.c -> net/net_tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "810:    c->async->allocated = protos[si->proto].net.async_chunks;",
          "811:    c->async->oldest = 0;",
          "812:    c->async->pending = 0;",
          "815:  }",
          "817:  tcp_connections_no++;",
          "",
          "[Removed Lines]",
          "813:   } else",
          "814:    LM_WARN(\"could not allocate async data for con!\\n\");",
          "",
          "[Added Lines]",
          "813:   } else {",
          "814:    LM_ERR(\"could not allocate async data for con!\\n\");",
          "815:    goto error;",
          "816:   }",
          "",
          "---------------"
        ],
        "net/proto_tcp/proto_tcp.c||net/proto_tcp/proto_tcp.c": [
          "File: net/proto_tcp/proto_tcp.c -> net/proto_tcp/proto_tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  }",
          "214:   pi->net.async_chunks= tcp_async_max_postponed_chunks;",
          "216:  return 0;",
          "217: }",
          "",
          "[Removed Lines]",
          "213:  if (tcp_async!=0)",
          "",
          "[Added Lines]",
          "213:  if (tcp_async!=0) {",
          "216:   if (tcp_async_max_postponed_chunks<=1)",
          "217:    tcp_async_max_postponed_chunks = 2;",
          "219:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07a6b2e3e83d992d76ff611bfa485768ed209389",
      "candidate_info": {
        "commit_hash": "07a6b2e3e83d992d76ff611bfa485768ed209389",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/07a6b2e3e83d992d76ff611bfa485768ed209389",
        "files": [
          "modules/clusterer/node_info.c",
          "modules/clusterer/topology.c"
        ],
        "message": "clusterer: make sure a discovered node is not added multiple times\n\nDo not insert a new node into the list multiple times when:\n* receiving multiple CLUSTERER_NODE_DESCRIPTION BIN messages\n* we receive a CLUSTERER_NODE_DESCRIPTION message and the node also\n  appears in CLUSTERER_FULL_TOP_UPDATE messages.\n\n(cherry picked from commit b8e107517fd032f16f16df242a02474efc2312d2)",
        "before_after_code_files": [
          "modules/clusterer/node_info.c||modules/clusterer/node_info.c",
          "modules/clusterer/topology.c||modules/clusterer/topology.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/node_info.c||modules/clusterer/node_info.c": [
          "File: modules/clusterer/node_info.c -> modules/clusterer/node_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  }",
          "114:  if (!*new_info) {",
          "115:   LM_ERR(\"no more shm memory\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  if (get_node_by_id(cluster, int_vals[INT_VALS_NODE_ID_COL])) {",
          "114:   LM_DBG(\"Node [%d] already exists\\n\", int_vals[INT_VALS_NODE_ID_COL]);",
          "115:   return 0;",
          "116:  }",
          "",
          "---------------"
        ],
        "modules/clusterer/topology.c||modules/clusterer/topology.c": [
          "File: modules/clusterer/topology.c -> modules/clusterer/topology.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:   lock_switch_read(cl_list_lock, lock_old_flag);",
          "699:   return NULL;",
          "700:  }",
          "707:  lock_switch_read(cl_list_lock, lock_old_flag);",
          "",
          "[Removed Lines]",
          "701:  if (!new_node) {",
          "702:   LM_ERR(\"Unable to add node info to backing list\\n\");",
          "703:   lock_switch_read(cl_list_lock, lock_old_flag);",
          "704:   return NULL;",
          "705:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}