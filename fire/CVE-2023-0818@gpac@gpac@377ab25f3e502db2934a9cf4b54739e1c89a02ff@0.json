{
  "cve_id": "CVE-2023-0818",
  "cve_desc": "Off-by-one Error in GitHub repository gpac/gpac prior to v2.3.0-DEV.",
  "repo": "gpac/gpac",
  "patch_hash": "377ab25f3e502db2934a9cf4b54739e1c89a02ff",
  "patch_info": {
    "commit_hash": "377ab25f3e502db2934a9cf4b54739e1c89a02ff",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/377ab25f3e502db2934a9cf4b54739e1c89a02ff",
    "files": [
      "src/filters/load_text.c"
    ],
    "message": "fix a5efec8 to cover more cases (#2397)",
    "before_after_code_files": [
      "src/filters/load_text.c||src/filters/load_text.c"
    ]
  },
  "patch_diff": {
    "src/filters/load_text.c||src/filters/load_text.c": [
      "File: src/filters/load_text.c -> src/filters/load_text.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "315:    if (!unicode_type && (szLine[i] & 0x80)) {",
      "317:     if ((szLine[i+1] & 0xc0) != 0x80) {",
      "318:      szLineConv[j] = 0xc0 | ( (szLine[i] >> 6) & 0x3 );",
      "319:      j++;",
      "320:      szLine[i] &= 0xbf;",
      "321:     }",
      "323:     else if ( (szLine[i] & 0xe0) == 0xc0) {",
      "324:      szLineConv[j] = szLine[i];",
      "325:      i++;",
      "326:      j++;",
      "327:     }",
      "329:     else if ( (szLine[i] & 0xf0) == 0xe0) {",
      "330:      szLineConv[j] = szLine[i];",
      "331:      i++;",
      "332:      j++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "318:      if (j >= GF_ARRAY_LENGTH(szLineConv))",
      "319:       break;",
      "326:      if (j >= GF_ARRAY_LENGTH(szLineConv))",
      "327:       break;",
      "334:      if (j+1 >= GF_ARRAY_LENGTH(szLineConv))",
      "335:       break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "336:     }",
      "338:     else if ( (szLine[i] & 0xf8) == 0xf0) {",
      "339:      szLineConv[j] = szLine[i];",
      "340:      i++;",
      "341:      j++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "345:      if (j+2 >= GF_ARRAY_LENGTH(szLineConv))",
      "346:       break;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "350:      continue;",
      "351:     }",
      "352:    }",
      "353:    szLineConv[j] = szLine[i];",
      "354:    j++;",
      "361:   }",
      "362:   szLineConv[j] = 0;",
      "363:   strcpy(szLine, szLineConv);",
      "",
      "[Removed Lines]",
      "356:    if (j >= GF_ARRAY_LENGTH(szLineConv) - 1) {",
      "357:     GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] Line too long to convert to utf8 (len: %d)\\n\", len));",
      "358:     break;",
      "359:    }",
      "",
      "[Added Lines]",
      "362:    if (j >= GF_ARRAY_LENGTH(szLineConv))",
      "363:     break;",
      "369:   }",
      "370:   if ( j >= GF_ARRAY_LENGTH(szLineConv) ) {",
      "371:    GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] Line too long to convert to utf8 (len: %d)\\n\", len));",
      "372:    j = GF_ARRAY_LENGTH(szLineConv) -1 ;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a616b4fa0a73ff57eff65fcc6beba6b79260a4fd",
      "candidate_info": {
        "commit_hash": "a616b4fa0a73ff57eff65fcc6beba6b79260a4fd",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/a616b4fa0a73ff57eff65fcc6beba6b79260a4fd",
        "files": [
          "src/filters/load_text.c"
        ],
        "message": "fix buffer overflow on utf8 conversion\n\nossfuzz issue 66187",
        "before_after_code_files": [
          "src/filters/load_text.c||src/filters/load_text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ],
          "candidate": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/load_text.c||src/filters/load_text.c": [
          "File: src/filters/load_text.c -> src/filters/load_text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:     }",
          "339:     else if ( (szLine[i] & 0xf0) == 0xe0) {",
          "341:       break;",
          "342:      szLineConv[j] = szLine[i];",
          "343:      i++;",
          "",
          "[Removed Lines]",
          "340:      if (j+1 >= GF_ARRAY_LENGTH(szLineConv))",
          "",
          "[Added Lines]",
          "340:      if (j+1 >= GF_ARRAY_LENGTH(szLineConv) || i+1 >= len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:     }",
          "350:     else if ( (szLine[i] & 0xf8) == 0xf0) {",
          "352:       break;",
          "353:      szLineConv[j] = szLine[i];",
          "354:      i++;",
          "",
          "[Removed Lines]",
          "351:      if (j+2 >= GF_ARRAY_LENGTH(szLineConv))",
          "",
          "[Added Lines]",
          "351:      if (j+2 >= GF_ARRAY_LENGTH(szLineConv) || i+2 >= len)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbbc4d343149c07896c4a3bed28849c576510b6c",
      "candidate_info": {
        "commit_hash": "cbbc4d343149c07896c4a3bed28849c576510b6c",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/cbbc4d343149c07896c4a3bed28849c576510b6c",
        "files": [
          "src/filters/load_text.c"
        ],
        "message": "fix a5efec8 to cover more cases (#2397)",
        "before_after_code_files": [
          "src/filters/load_text.c||src/filters/load_text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ],
          "candidate": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/load_text.c||src/filters/load_text.c": [
          "File: src/filters/load_text.c -> src/filters/load_text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:    if (!unicode_type && (szLine[i] & 0x80)) {",
          "307:     if ((szLine[i+1] & 0xc0) != 0x80) {",
          "308:      szLineConv[j] = 0xc0 | ( (szLine[i] >> 6) & 0x3 );",
          "309:      j++;",
          "310:      szLine[i] &= 0xbf;",
          "311:     }",
          "313:     else if ( (szLine[i] & 0xe0) == 0xc0) {",
          "314:      szLineConv[j] = szLine[i];",
          "315:      i++;",
          "316:      j++;",
          "317:     }",
          "319:     else if ( (szLine[i] & 0xf0) == 0xe0) {",
          "320:      szLineConv[j] = szLine[i];",
          "321:      i++;",
          "322:      j++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:      if (j >= GF_ARRAY_LENGTH(szLineConv))",
          "309:       break;",
          "316:      if (j >= GF_ARRAY_LENGTH(szLineConv))",
          "317:       break;",
          "324:      if (j+1 >= GF_ARRAY_LENGTH(szLineConv))",
          "325:       break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:     }",
          "328:     else if ( (szLine[i] & 0xf8) == 0xf0) {",
          "329:      szLineConv[j] = szLine[i];",
          "330:      i++;",
          "331:      j++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:      if (j+2 >= GF_ARRAY_LENGTH(szLineConv))",
          "336:       break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340:      continue;",
          "341:     }",
          "342:    }",
          "343:    szLineConv[j] = szLine[i];",
          "344:    j++;",
          "351:   }",
          "352:   szLineConv[j] = 0;",
          "353:   strcpy(szLine, szLineConv);",
          "",
          "[Removed Lines]",
          "346:    if (j >= GF_ARRAY_LENGTH(szLineConv) - 1) {",
          "347:     GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] Line too long to convert to utf8 (len: %d)\\n\", len));",
          "348:     break;",
          "349:    }",
          "",
          "[Added Lines]",
          "352:    if (j >= GF_ARRAY_LENGTH(szLineConv))",
          "353:     break;",
          "359:   }",
          "360:   if ( j >= GF_ARRAY_LENGTH(szLineConv) ) {",
          "361:    GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] Line too long to convert to utf8 (len: %d)\\n\", len));",
          "362:    j = GF_ARRAY_LENGTH(szLineConv) -1 ;",
          "",
          "---------------"
        ]
      }
    }
  ]
}