{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c41b421d48a86ed1c1406123e7ee6d084e462afa",
      "candidate_info": {
        "commit_hash": "c41b421d48a86ed1c1406123e7ee6d084e462afa",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/c41b421d48a86ed1c1406123e7ee6d084e462afa",
        "files": [
          "tests/extmod/machine_uart_tx.py",
          "tests/extmod/machine_uart_tx.py.exp"
        ],
        "message": "tests/extmod/machine_uart_tx.py: Add a test for timing of UART.flush().\n\nCurrently only runs on rp2 but could be extended to run on other targets.\n\nSigned-off-by: robert-hh <robert@hammelrath.com>",
        "before_after_code_files": [
          "tests/extmod/machine_uart_tx.py||tests/extmod/machine_uart_tx.py",
          "tests/extmod/machine_uart_tx.py.exp||tests/extmod/machine_uart_tx.py.exp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/extmod/machine_uart_tx.py||tests/extmod/machine_uart_tx.py": [
          "File: tests/extmod/machine_uart_tx.py -> tests/extmod/machine_uart_tx.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Test machine.UART transmission.",
          "2: # Does not require any external connections.",
          "4: try:",
          "5:     from machine import UART",
          "6: except ImportError:",
          "7:     print(\"SKIP\")",
          "8:     raise SystemExit",
          "10: import time, sys",
          "12: # Configure pins based on the target.",
          "13: if \"rp2\" in sys.platform:",
          "14:     uart_id = 0",
          "15:     tx_pin = \"GPIO0\"",
          "16:     rx_pin = \"GPIO1\"",
          "17: else:",
          "18:     print(\"SKIP\")",
          "19:     raise SystemExit",
          "21: # Test that write+flush takes the expected amount of time to execute.",
          "22: for bits_per_s in (2400, 9600, 115200):",
          "23:     text = \"Hello World\"",
          "24:     uart = UART(uart_id, bits_per_s, bits=8, parity=None, stop=1, tx=tx_pin, rx=rx_pin)",
          "26:     start_us = time.ticks_us()",
          "27:     uart.write(text)",
          "28:     uart.flush()",
          "29:     duration_us = time.ticks_diff(time.ticks_us(), start_us)",
          "31:     # 1(startbit) + 8(bits) + 1(stopbit) + 0(parity)",
          "32:     bits_per_char = 10",
          "33:     expect_us = (len(text)) * bits_per_char * 1_000_000 // bits_per_s",
          "34:     print(bits_per_s, duration_us <= expect_us)",
          "",
          "---------------"
        ],
        "tests/extmod/machine_uart_tx.py.exp||tests/extmod/machine_uart_tx.py.exp": [
          "File: tests/extmod/machine_uart_tx.py.exp -> tests/extmod/machine_uart_tx.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 2400 True",
          "2: 9600 True",
          "3: 115200 True",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7002a19be2bbc598b6dcdef4db2dd37e7e7753c5",
      "candidate_info": {
        "commit_hash": "7002a19be2bbc598b6dcdef4db2dd37e7e7753c5",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/7002a19be2bbc598b6dcdef4db2dd37e7e7753c5",
        "files": [
          "ports/stm32/mboot/main.c"
        ],
        "message": "stm32/mboot: Improve mass erase to erase all non-protected pages.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c": [
          "File: ports/stm32/mboot/main.c -> ports/stm32/mboot/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:            || addr >= (uint32_t)&_mboot_protected_flash_end_exclusive;",
          "450: }",
          "460: static int mboot_flash_page_erase(uint32_t addr, uint32_t *next_addr) {",
          "462:     uint32_t sector_size = 0;",
          "",
          "[Removed Lines]",
          "452: static int mboot_flash_mass_erase(void) {",
          "454:     uint32_t start_addr = (uint32_t)&_mboot_protected_flash_end_exclusive;",
          "455:     uint32_t num_words = (FLASH_END + 1 - start_addr) / sizeof(uint32_t);",
          "456:     int ret = flash_erase(start_addr, num_words);",
          "457:     return ret;",
          "458: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:     return 0;",
          "489: }",
          "491: static int mboot_flash_write(uint32_t addr, const uint8_t *src8, size_t len) {",
          "492:     bool valid = flash_is_valid_addr(addr);",
          "493:     if (!valid || !flash_is_modifiable_addr_range(addr, len)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483: static int mboot_flash_mass_erase(void) {",
          "485:     uint32_t addr = FLASH_START;",
          "486:     while (addr <= FLASH_END) {",
          "487:         int ret = mboot_flash_page_erase(addr, &addr);",
          "488:         if (ret != 0 && ret != -MBOOT_ERRNO_FLASH_ERASE_DISALLOWED) {",
          "489:             return ret;",
          "490:         }",
          "491:     }",
          "494:     dfu_context.status = DFU_STATUS_OK;",
          "495:     dfu_context.error = 0;",
          "497:     return 0;",
          "498: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9feb0689eeaca5ce88aedcc680f997a3b4d0221c",
      "candidate_info": {
        "commit_hash": "9feb0689eeaca5ce88aedcc680f997a3b4d0221c",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/9feb0689eeaca5ce88aedcc680f997a3b4d0221c",
        "files": [
          "py/mpconfig.h"
        ],
        "message": "all: Bump version to 1.22.0.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "py/mpconfig.h||py/mpconfig.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/mpconfig.h||py/mpconfig.h": [
          "File: py/mpconfig.h -> py/mpconfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define MICROPY_VERSION_MAJOR 1",
          "33: #define MICROPY_VERSION_MINOR 22",
          "34: #define MICROPY_VERSION_MICRO 0",
          "",
          "[Removed Lines]",
          "35: #define MICROPY_VERSION_PRERELEASE 1",
          "",
          "[Added Lines]",
          "35: #define MICROPY_VERSION_PRERELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bca93b2d00dec37b3770c3e4fac15f07e0b9f15",
      "candidate_info": {
        "commit_hash": "3bca93b2d00dec37b3770c3e4fac15f07e0b9f15",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/3bca93b2d00dec37b3770c3e4fac15f07e0b9f15",
        "files": [
          "ports/cc3200/hal/cc3200_hal.c",
          "ports/esp32/mphalport.c",
          "ports/esp8266/esp_mphal.c",
          "ports/mimxrt/mphalport.c",
          "ports/minimal/uart_core.c",
          "ports/nrf/drivers/bluetooth/ble_uart.c",
          "ports/nrf/drivers/usb/usb_cdc.c",
          "ports/nrf/mphalport.c",
          "ports/pic16bit/pic16bit_mphal.c",
          "ports/powerpc/uart_lpc_serial.c",
          "ports/powerpc/uart_potato.c",
          "ports/renesas-ra/mphalport.c",
          "ports/rp2/mphalport.c",
          "ports/samd/mphalport.c",
          "ports/stm32/mphalport.c",
          "ports/unix/unix_mphal.c",
          "ports/webassembly/mphalport.c",
          "ports/webassembly/mphalport.h",
          "ports/windows/windows_mphal.c",
          "ports/zephyr/uart_core.c",
          "py/mphal.h",
          "shared/runtime/sys_stdio_mphal.c"
        ],
        "message": "ports: Fix sys.stdout.buffer.write() return value.\n\nMicroPython code may rely on the return value of sys.stdout.buffer.write()\nto reflect the number of bytes actually written. While in most scenarios a\nwrite() operation is successful, there are cases where it fails, leading to\ndata loss. This problem arises because, currently, write() merely returns\nthe number of bytes it was supposed to write, without indication of\nfailure.\n\nOne scenario where write() might fail, is where USB is used and the\nreceiving end doesn't read quickly enough to empty the receive buffer. In\nthat case, write() on the MicroPython side can timeout, resulting in the\nloss of data without any indication, a behavior observed notably in\ncommunication between a Pi Pico as a client and a Linux host using the ACM\ndriver.\n\nA complex issue arises with mp_hal_stdout_tx_strn() when it involves\nmultiple outputs, such as USB, dupterm and hardware UART. The challenge is\nin handling cases where writing to one output is successful, but another\nfails, either fully or partially. This patch implements the following\nsolution:\n\nmp_hal_stdout_tx_strn() attempts to write len bytes to all of the possible\ndestinations for that data, and returns the minimum successful write\nlength.\n\nThe implementation of this is complicated by several factors:\n- multiple outputs may be enabled or disabled at compiled time\n- multiple outputs may be enabled or disabled at runtime\n- mp_os_dupterm_tx_strn() is one such output, optionally containing\n  multiple additional outputs\n- each of these outputs may or may not be able to report success\n- each of these outputs may or may not be able to report partial writes\n\nAs a result, there's no single strategy that fits all ports, necessitating\nunique logic for each instance of mp_hal_stdout_tx_strn().\n\nNote that addressing sys.stdout.write() is more complex due to its data\nmodification process (\"cooked\" output), and it remains unchanged in this\npatch. Developers who are concerned about accurate return values from\nwrite operations should use sys.stdout.buffer.write().\n\nThis patch might disrupt some existing code, but it's also expected to\nresolve issues, considering that the peculiar return value behavior of\nsys.stdout.buffer.write() is not well-documented and likely not widely\nknown. Therefore, it's improbable that much existing code relies on the\nprevious behavior.\n\nSigned-off-by: Maarten van der Schrieck <maarten@thingsconnected.nl>",
        "before_after_code_files": [
          "ports/cc3200/hal/cc3200_hal.c||ports/cc3200/hal/cc3200_hal.c",
          "ports/esp32/mphalport.c||ports/esp32/mphalport.c",
          "ports/esp8266/esp_mphal.c||ports/esp8266/esp_mphal.c",
          "ports/mimxrt/mphalport.c||ports/mimxrt/mphalport.c",
          "ports/minimal/uart_core.c||ports/minimal/uart_core.c",
          "ports/nrf/drivers/bluetooth/ble_uart.c||ports/nrf/drivers/bluetooth/ble_uart.c",
          "ports/nrf/drivers/usb/usb_cdc.c||ports/nrf/drivers/usb/usb_cdc.c",
          "ports/nrf/mphalport.c||ports/nrf/mphalport.c",
          "ports/pic16bit/pic16bit_mphal.c||ports/pic16bit/pic16bit_mphal.c",
          "ports/powerpc/uart_lpc_serial.c||ports/powerpc/uart_lpc_serial.c",
          "ports/powerpc/uart_potato.c||ports/powerpc/uart_potato.c",
          "ports/renesas-ra/mphalport.c||ports/renesas-ra/mphalport.c",
          "ports/rp2/mphalport.c||ports/rp2/mphalport.c",
          "ports/samd/mphalport.c||ports/samd/mphalport.c",
          "ports/stm32/mphalport.c||ports/stm32/mphalport.c",
          "ports/unix/unix_mphal.c||ports/unix/unix_mphal.c",
          "ports/webassembly/mphalport.c||ports/webassembly/mphalport.c",
          "ports/webassembly/mphalport.h||ports/webassembly/mphalport.h",
          "ports/windows/windows_mphal.c||ports/windows/windows_mphal.c",
          "ports/zephyr/uart_core.c||ports/zephyr/uart_core.c",
          "py/mphal.h||py/mphal.h",
          "shared/runtime/sys_stdio_mphal.c||shared/runtime/sys_stdio_mphal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/cc3200/hal/cc3200_hal.c||ports/cc3200/hal/cc3200_hal.c": [
          "File: ports/cc3200/hal/cc3200_hal.c -> ports/cc3200/hal/cc3200_hal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     }",
          "141: }",
          "146:     telnet_tx_strn(str, len);",
          "147: }",
          "149: int mp_hal_stdin_rx_chr(void) {",
          "",
          "[Removed Lines]",
          "143: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "144:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "143: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "144:     mp_uint_t ret = len;",
          "145:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "146:     if (dupterm_res >= 0) {",
          "147:         ret = dupterm_res;",
          "148:     }",
          "151:     return ret;",
          "",
          "---------------"
        ],
        "ports/esp32/mphalport.c||ports/esp32/mphalport.c": [
          "File: ports/esp32/mphalport.c -> ports/esp32/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     }",
          "126: }",
          "130:     bool release_gil = len > 20;",
          "131:     if (release_gil) {",
          "132:         MP_THREAD_GIL_EXIT();",
          "133:     }",
          "134:     #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "135:     usb_serial_jtag_tx_strn(str, len);",
          "136:     #elif CONFIG_USB_OTG_SUPPORTED",
          "137:     usb_tx_strn(str, len);",
          "138:     #endif",
          "139:     #if MICROPY_HW_ENABLE_UART_REPL",
          "140:     uart_stdout_tx_strn(str, len);",
          "141:     #endif",
          "142:     if (release_gil) {",
          "143:         MP_THREAD_GIL_ENTER();",
          "144:     }",
          "146: }",
          "148: uint32_t mp_hal_ticks_ms(void) {",
          "",
          "[Removed Lines]",
          "128: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "145:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "128: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "130:     mp_uint_t ret = len;",
          "131:     bool did_write = false;",
          "138:     did_write = true;",
          "141:     did_write = true;",
          "145:     did_write = true;",
          "150:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "151:     if (dupterm_res >= 0) {",
          "152:         did_write = true;",
          "153:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "154:     }",
          "155:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/esp8266/esp_mphal.c||ports/esp8266/esp_mphal.c": [
          "File: ports/esp8266/esp_mphal.c -> ports/esp8266/esp_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: }",
          "95: #endif",
          "99: }",
          "101: void mp_hal_debug_tx_strn_cooked(void *env, const char *str, uint32_t len) {",
          "",
          "[Removed Lines]",
          "97: void mp_hal_stdout_tx_strn(const char *str, uint32_t len) {",
          "98:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "97: mp_uint_t mp_hal_stdout_tx_strn(const char *str, uint32_t len) {",
          "98:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "99:     if (dupterm_res < 0) {",
          "101:         return 0;",
          "102:     } else {",
          "103:         return dupterm_res;",
          "104:     }",
          "",
          "---------------"
        ],
        "ports/mimxrt/mphalport.c||ports/mimxrt/mphalport.c": [
          "File: ports/mimxrt/mphalport.c -> ports/mimxrt/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     }",
          "113: }",
          "116:     if (tud_cdc_connected()) {",
          "118:             uint32_t n = len - i;",
          "119:             if (n > CFG_TUD_CDC_EP_BUFSIZE) {",
          "120:                 n = CFG_TUD_CDC_EP_BUFSIZE;",
          "",
          "[Removed Lines]",
          "115: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "117:         for (size_t i = 0; i < len;) {",
          "",
          "[Added Lines]",
          "115: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "116:     mp_uint_t ret = len;",
          "117:     bool did_write = false;",
          "119:         size_t i = 0;",
          "120:         while (i < len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:                 MICROPY_EVENT_POLL_HOOK",
          "126:             }",
          "127:             if (ticks_us64() >= timeout) {",
          "128:                 break;",
          "129:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:                 ret = i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:             tud_cdc_write_flush();",
          "133:             i += n2;",
          "134:         }",
          "135:     }",
          "136:     #if MICROPY_PY_OS_DUPTERM",
          "138:     #endif",
          "139: }",
          "141: uint64_t mp_hal_time_ns(void) {",
          "",
          "[Removed Lines]",
          "137:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "139:         did_write = true;",
          "140:         ret = MIN(i, ret);",
          "143:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "144:     if (dupterm_res >= 0) {",
          "145:         did_write = true;",
          "146:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "147:     }",
          "149:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/minimal/uart_core.c||ports/minimal/uart_core.c": [
          "File: ports/minimal/uart_core.c -> ports/minimal/uart_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:     #if MICROPY_MIN_USE_STDOUT",
          "34:     int r = write(STDOUT_FILENO, str, len);",
          "36:     #elif MICROPY_MIN_USE_STM32_MCU",
          "37:     while (len--) {",
          "",
          "[Removed Lines]",
          "32: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "35:     (void)r;",
          "",
          "[Added Lines]",
          "32: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "33:     mp_uint_t ret = len;",
          "36:     if (r >= 0) {",
          "38:         ret = 0;",
          "39:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         USART1->DR = *str++;",
          "42:     }",
          "43:     #endif",
          "44: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     return ret;",
          "",
          "---------------"
        ],
        "ports/nrf/drivers/bluetooth/ble_uart.c||ports/nrf/drivers/bluetooth/ble_uart.c": [
          "File: ports/nrf/drivers/bluetooth/ble_uart.c -> ports/nrf/drivers/bluetooth/ble_uart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     return (int)byte;",
          "111: }",
          "117:     uint8_t *buf = (uint8_t *)str;",
          "118:     size_t send_len;",
          "",
          "[Removed Lines]",
          "113: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "115:     if (!ble_uart_enabled()) return;",
          "",
          "[Added Lines]",
          "113: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "115:     if (!ble_uart_enabled()) return 0;",
          "117:     mp_uint_t ret = len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         len -= send_len;",
          "135:         buf += send_len;",
          "136:     }",
          "137: }",
          "139: void ble_uart_tx_char(char c) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     return ret;",
          "",
          "---------------"
        ],
        "ports/nrf/drivers/usb/usb_cdc.c||ports/nrf/drivers/usb/usb_cdc.c": [
          "File: ports/nrf/drivers/usb/usb_cdc.c -> ports/nrf/drivers/usb/usb_cdc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     return 0;",
          "232: }",
          "236:     for (const char *top = str + len; str < top; str++) {",
          "237:         ringbuf_put((ringbuf_t*)&tx_ringbuf, *str);",
          "238:         usb_cdc_loop();",
          "239:     }",
          "240: }",
          "242: void mp_hal_stdout_tx_strn_cooked(const char *str, mp_uint_t len) {",
          "",
          "[Removed Lines]",
          "234: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "[Added Lines]",
          "234: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "239:     return len;",
          "",
          "---------------"
        ],
        "ports/nrf/mphalport.c||ports/nrf/mphalport.c": [
          "File: ports/nrf/mphalport.c -> ports/nrf/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     return 0;",
          "197: }",
          "200:     if (MP_STATE_VM(dupterm_objs[0]) != MP_OBJ_NULL) {",
          "201:         uart_tx_strn(MP_STATE_VM(dupterm_objs[0]), str, len);",
          "202:     }",
          "203: }",
          "205: void mp_hal_stdout_tx_strn_cooked(const char *str, mp_uint_t len) {",
          "",
          "[Removed Lines]",
          "199: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "[Added Lines]",
          "199: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "202:         return len;",
          "204:     return 0;",
          "",
          "---------------"
        ],
        "ports/pic16bit/pic16bit_mphal.c||ports/pic16bit/pic16bit_mphal.c": [
          "File: ports/pic16bit/pic16bit_mphal.c -> ports/pic16bit/pic16bit_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     mp_hal_stdout_tx_strn(str, strlen(str));",
          "76: }",
          "79:     for (; len > 0; --len) {",
          "80:         uart_tx_char(*str++);",
          "81:     }",
          "82: }",
          "84: void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {",
          "",
          "[Removed Lines]",
          "78: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "",
          "[Added Lines]",
          "78: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "79:     mp_uint_t ret = len;",
          "83:     return ret;",
          "",
          "---------------"
        ],
        "ports/powerpc/uart_lpc_serial.c||ports/powerpc/uart_lpc_serial.c": [
          "File: ports/powerpc/uart_lpc_serial.c -> ports/powerpc/uart_lpc_serial.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: }",
          "112:     int i;",
          "113:     for (i = 0; i < len; i++) {",
          "114:         while (lpc_uart_tx_full()) {",
          "",
          "[Removed Lines]",
          "111: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "[Added Lines]",
          "111: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         }",
          "117:         lpc_uart_reg_write(REG_RBR, str[i]);",
          "118:     }",
          "119: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     return len;",
          "",
          "---------------"
        ],
        "ports/powerpc/uart_potato.c||ports/powerpc/uart_potato.c": [
          "File: ports/powerpc/uart_potato.c -> ports/powerpc/uart_potato.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     return (char)(val & 0x000000ff);",
          "119: }",
          "122:     int i;",
          "124:     for (i = 0; i < len; i++) {",
          "",
          "[Removed Lines]",
          "121: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "[Added Lines]",
          "121: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         }",
          "130:         potato_uart_reg_write(POTATO_CONSOLE_TX, val);",
          "131:     }",
          "132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     return len;",
          "",
          "---------------"
        ],
        "ports/renesas-ra/mphalport.c||ports/renesas-ra/mphalport.c": [
          "File: ports/renesas-ra/mphalport.c -> ports/renesas-ra/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: }",
          "158:     #if MICROPY_HW_ENABLE_UART_REPL",
          "159:     if (MP_STATE_PORT(pyb_stdio_uart) != NULL) {",
          "160:         uart_tx_strn(MP_STATE_PORT(pyb_stdio_uart), str, len);",
          "161:     }",
          "162:     #endif",
          "164:     #if MICROPY_HW_USB_CDC",
          "165:     if (tud_cdc_connected()) {",
          "167:             uint32_t n = len - i;",
          "168:             if (n > CFG_TUD_CDC_EP_BUFSIZE) {",
          "169:                 n = CFG_TUD_CDC_EP_BUFSIZE;",
          "",
          "[Removed Lines]",
          "157: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "166:         for (size_t i = 0; i < len;) {",
          "",
          "[Added Lines]",
          "157: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "158:     mp_uint_t ret = len;",
          "159:     bool did_write = false;",
          "163:         did_write = true;",
          "169:         size_t i = 0;",
          "170:         while (i < len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:             tud_cdc_write_flush();",
          "181:             i += n2;",
          "182:         }",
          "183:     }",
          "184:     #endif",
          "186:     #if MICROPY_PY_OS_DUPTERM",
          "188:     #endif",
          "189: }",
          "191: void mp_hal_ticks_cpu_enable(void) {",
          "",
          "[Removed Lines]",
          "187:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "187:         ret = MIN(i, ret);",
          "188:         did_write = true;",
          "193:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "194:     if (dupterm_res >= 0) {",
          "195:         did_write = true;",
          "196:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "197:     }",
          "200:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/rp2/mphalport.c||ports/rp2/mphalport.c": [
          "File: ports/rp2/mphalport.c -> ports/rp2/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: }",
          "155:     #if MICROPY_HW_ENABLE_UART_REPL",
          "156:     mp_uart_write_strn(str, len);",
          "157:     #endif",
          "159:     #if MICROPY_HW_USB_CDC",
          "160:     if (tud_cdc_connected()) {",
          "162:             uint32_t n = len - i;",
          "163:             if (n > CFG_TUD_CDC_EP_BUFSIZE) {",
          "164:                 n = CFG_TUD_CDC_EP_BUFSIZE;",
          "",
          "[Removed Lines]",
          "154: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "161:         for (size_t i = 0; i < len;) {",
          "",
          "[Added Lines]",
          "154: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "155:     mp_uint_t ret = len;",
          "156:     bool did_write = false;",
          "159:     did_write = true;",
          "164:         size_t i = 0;",
          "165:         while (i < len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:                 mp_usbd_task();",
          "174:             }",
          "175:             if (timeout >= MICROPY_HW_USB_CDC_TX_TIMEOUT) {",
          "176:                 break;",
          "177:             }",
          "178:             uint32_t n2 = tud_cdc_write(str + i, n);",
          "179:             tud_cdc_write_flush();",
          "180:             i += n2;",
          "181:         }",
          "182:     }",
          "183:     #endif",
          "185:     #if MICROPY_PY_OS_DUPTERM",
          "187:     #endif",
          "188: }",
          "190: void mp_hal_delay_ms(mp_uint_t ms) {",
          "",
          "[Removed Lines]",
          "186:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "180:                 ret = i;",
          "187:         ret = MIN(i, ret);",
          "188:         did_write = true;",
          "193:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "194:     if (dupterm_res >= 0) {",
          "195:         did_write = true;",
          "196:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "197:     }",
          "199:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/samd/mphalport.c||ports/samd/mphalport.c": [
          "File: ports/samd/mphalport.c -> ports/samd/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     }",
          "201: }",
          "204:     if (tud_cdc_connected()) {",
          "206:             uint32_t n = len - i;",
          "207:             if (n > CFG_TUD_CDC_EP_BUFSIZE) {",
          "208:                 n = CFG_TUD_CDC_EP_BUFSIZE;",
          "",
          "[Removed Lines]",
          "203: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "205:         for (size_t i = 0; i < len;) {",
          "",
          "[Added Lines]",
          "203: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "204:     mp_uint_t ret = len;",
          "205:     bool did_write = false;",
          "207:         size_t i = 0;",
          "208:         while (i < len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:                 MICROPY_EVENT_POLL_HOOK_WITH_USB;",
          "214:             }",
          "215:             if (timeout >= MICROPY_HW_USB_CDC_TX_TIMEOUT) {",
          "216:                 break;",
          "217:             }",
          "218:             uint32_t n2 = tud_cdc_write(str + i, n);",
          "219:             tud_cdc_write_flush();",
          "220:             i += n2;",
          "221:         }",
          "222:     }",
          "223:     #if MICROPY_PY_OS_DUPTERM",
          "225:     #endif",
          "226: }",
          "",
          "[Removed Lines]",
          "224:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "219:                 ret = i;",
          "226:         ret = MIN(i, ret);",
          "227:         did_write = true;",
          "230:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "231:     if (dupterm_res >= 0) {",
          "232:         did_write = true;",
          "233:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "234:     }",
          "236:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/stm32/mphalport.c||ports/stm32/mphalport.c": [
          "File: ports/stm32/mphalport.c -> ports/stm32/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     }",
          "58: }",
          "61:     if (MP_STATE_PORT(pyb_stdio_uart) != NULL) {",
          "62:         uart_tx_strn(MP_STATE_PORT(pyb_stdio_uart), str, len);",
          "63:     }",
          "64:     #if 0 && defined(USE_HOST_MODE) && MICROPY_HW_HAS_LCD",
          "65:     lcd_print_strn(str, len);",
          "66:     #endif",
          "68: }",
          "70: #if __CORTEX_M >= 0x03",
          "",
          "[Removed Lines]",
          "60: MP_WEAK void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "67:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "60: MP_WEAK mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "61:     mp_uint_t ret = len;",
          "62:     bool did_write = false;",
          "65:         did_write = true;",
          "70:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "71:     if (dupterm_res >= 0) {",
          "72:         did_write = true;",
          "73:         ret = MIN((mp_uint_t)dupterm_res, ret);",
          "74:     }",
          "75:     return did_write ? ret : 0;",
          "",
          "---------------"
        ],
        "ports/unix/unix_mphal.c||ports/unix/unix_mphal.c": [
          "File: ports/unix/unix_mphal.c -> ports/unix/unix_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     return c;",
          "185: }",
          "188:     ssize_t ret;",
          "189:     MP_HAL_RETRY_SYSCALL(ret, write(STDOUT_FILENO, str, len), {});",
          "191: }",
          "",
          "[Removed Lines]",
          "187: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "190:     mp_os_dupterm_tx_strn(str, len);",
          "",
          "[Added Lines]",
          "187: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "190:     mp_uint_t written = ret < 0 ? 0 : ret;",
          "191:     int dupterm_res = mp_os_dupterm_tx_strn(str, len);",
          "192:     if (dupterm_res >= 0) {",
          "193:         written = MIN((mp_uint_t)dupterm_res, written);",
          "194:     }",
          "195:     return written;",
          "",
          "---------------"
        ],
        "ports/webassembly/mphalport.c||ports/webassembly/mphalport.c": [
          "File: ports/webassembly/mphalport.c -> ports/webassembly/mphalport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"library.h\"",
          "28: #include \"mphalport.h\"",
          "31:     mp_js_write(str, len);",
          "32: }",
          "34: void mp_hal_delay_ms(mp_uint_t ms) {",
          "",
          "[Removed Lines]",
          "30: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "",
          "[Added Lines]",
          "30: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "32:     return len;",
          "",
          "---------------"
        ],
        "ports/webassembly/mphalport.h||ports/webassembly/mphalport.h": [
          "File: ports/webassembly/mphalport.h -> ports/webassembly/mphalport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"shared/runtime/interrupt_char.h\"",
          "30: #define mp_hal_stdin_rx_chr() (0)",
          "33: void mp_hal_delay_ms(mp_uint_t ms);",
          "34: void mp_hal_delay_us(mp_uint_t us);",
          "",
          "[Removed Lines]",
          "31: void mp_hal_stdout_tx_strn(const char *str, size_t len);",
          "",
          "[Added Lines]",
          "31: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len);",
          "",
          "---------------"
        ],
        "ports/windows/windows_mphal.c||ports/windows/windows_mphal.c": [
          "File: ports/windows/windows_mphal.c -> ports/windows/windows_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     }",
          "222: }",
          "225:     MP_THREAD_GIL_EXIT();",
          "227:     MP_THREAD_GIL_ENTER();",
          "228: }",
          "230: void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {",
          "",
          "[Removed Lines]",
          "224: void mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "226:     write(STDOUT_FILENO, str, len);",
          "",
          "[Added Lines]",
          "224: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len) {",
          "226:     int ret = write(STDOUT_FILENO, str, len);",
          "228:     return ret < 0 ? 0 : ret; // return the number of bytes written, so in case of an error in the syscall, return 0",
          "",
          "---------------"
        ],
        "ports/zephyr/uart_core.c||ports/zephyr/uart_core.c": [
          "File: ports/zephyr/uart_core.c -> ports/zephyr/uart_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: }",
          "48:     #ifdef CONFIG_CONSOLE_SUBSYS",
          "49:     while (len--) {",
          "50:         char c = *str++;",
          "",
          "[Removed Lines]",
          "47: void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "",
          "[Added Lines]",
          "47: mp_uint_t mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {",
          "48:     mp_uint_t ret = len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         uart_poll_out(uart_console_dev, *str++);",
          "61:     }",
          "62:     #endif",
          "63: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     return ret;",
          "",
          "---------------"
        ],
        "py/mphal.h||py/mphal.h": [
          "File: py/mphal.h -> py/mphal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #endif",
          "58: #ifndef mp_hal_stdout_tx_strn",
          "60: #endif",
          "62: #ifndef mp_hal_stdout_tx_strn_cooked",
          "",
          "[Removed Lines]",
          "59: void mp_hal_stdout_tx_strn(const char *str, size_t len);",
          "",
          "[Added Lines]",
          "59: mp_uint_t mp_hal_stdout_tx_strn(const char *str, size_t len);",
          "",
          "---------------"
        ],
        "shared/runtime/sys_stdio_mphal.c||shared/runtime/sys_stdio_mphal.c": [
          "File: shared/runtime/sys_stdio_mphal.c -> shared/runtime/sys_stdio_mphal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: }",
          "144: STATIC mp_uint_t stdio_buffer_write(mp_obj_t self_in, const void *buf, mp_uint_t size, int *errcode) {",
          "147: }",
          "149: STATIC const mp_stream_p_t stdio_buffer_obj_stream_p = {",
          "",
          "[Removed Lines]",
          "145:     mp_hal_stdout_tx_strn(buf, size);",
          "146:     return size;",
          "",
          "[Added Lines]",
          "145:     return mp_hal_stdout_tx_strn(buf, size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6ab9e420b0a874eb2f8f6b7597430ed9e526bf7",
      "candidate_info": {
        "commit_hash": "b6ab9e420b0a874eb2f8f6b7597430ed9e526bf7",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/b6ab9e420b0a874eb2f8f6b7597430ed9e526bf7",
        "files": [
          "ports/stm32/flash.c",
          "ports/stm32/flash.h",
          "ports/stm32/flashbdev.c",
          "ports/stm32/mboot/main.c"
        ],
        "message": "stm32/flash: Change flash_erase to only erase a single sector at a time.\n\nAn erase sector sits in a given flash bank and some MCUs have two flash\nbanks.  If trying to erase a range of sectors and that range crosses from\none flash bank into the next, the original implementation of\n`flash_erase()` would not handle this case and would do the wrong thing.\n\nThis commit changes `flash_erase()` to only erase a single sector, which\nsidesteps the need to handle flash-bank-crossing.  Most callers of this\nfunction only need to erase a single sector anyway.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/stm32/flash.c||ports/stm32/flash.c",
          "ports/stm32/flash.h||ports/stm32/flash.h",
          "ports/stm32/flashbdev.c||ports/stm32/flashbdev.c",
          "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/stm32/flash.c||ports/stm32/flash.c": [
          "File: ports/stm32/flash.c -> ports/stm32/flash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     return -1;",
          "273: }",
          "281:     #if MICROPY_HW_STM32WB_FLASH_SYNCRONISATION",
          "",
          "[Removed Lines]",
          "275: int flash_erase(uint32_t flash_dest, uint32_t num_word32) {",
          "277:     if (num_word32 == 0) {",
          "278:         return 0;",
          "279:     }",
          "",
          "[Added Lines]",
          "277: int flash_erase(uint32_t flash_dest) {",
          "278:     const unsigned int num_sectors = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);",
          "307:     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;",
          "308:     EraseInitStruct.PageAddress = flash_dest;",
          "310:     #elif defined(STM32G0) || defined(STM32G4)",
          "311:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);",
          "312:     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;",
          "313:     EraseInitStruct.Page = get_page(flash_dest);",
          "314:     EraseInitStruct.Banks = get_bank(flash_dest);",
          "316:     #elif defined(STM32L0) || defined(STM32L1)",
          "317:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);",
          "318:     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;",
          "319:     EraseInitStruct.PageAddress = flash_dest;",
          "321:     #elif (defined(STM32L4) && !defined(SYSCFG_MEMRMP_FB_MODE)) || defined(STM32WB) || defined(STM32WL)",
          "322:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);",
          "323:     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;",
          "324:     EraseInitStruct.Page = get_page(flash_dest);",
          "326:     #elif defined(STM32L4)",
          "327:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);",
          "",
          "[Removed Lines]",
          "309:     EraseInitStruct.NbPages = (4 * num_word32 + FLASH_PAGE_SIZE - 4) / FLASH_PAGE_SIZE;",
          "315:     EraseInitStruct.NbPages = (4 * num_word32 + FLASH_PAGE_SIZE - 4) / FLASH_PAGE_SIZE;",
          "320:     EraseInitStruct.NbPages = (4 * num_word32 + FLASH_PAGE_SIZE - 4) / FLASH_PAGE_SIZE;",
          "325:     EraseInitStruct.NbPages = (4 * num_word32 + FLASH_PAGE_SIZE - 4) / FLASH_PAGE_SIZE;",
          "",
          "[Added Lines]",
          "308:     EraseInitStruct.NbPages = num_sectors;",
          "314:     EraseInitStruct.NbPages = num_sectors;",
          "319:     EraseInitStruct.NbPages = num_sectors;",
          "324:     EraseInitStruct.NbPages = num_sectors;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:     EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;",
          "331:     EraseInitStruct.Banks = get_bank(flash_dest);",
          "332:     EraseInitStruct.Page = get_page(flash_dest);",
          "334:     #else",
          "336:     #if defined(STM32H5)",
          "",
          "[Removed Lines]",
          "333:     EraseInitStruct.NbPages = get_page(flash_dest + 4 * num_word32 - 1) - EraseInitStruct.Page + 1;",
          "",
          "[Added Lines]",
          "332:     EraseInitStruct.NbPages = num_sectors;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354:     EraseInitStruct.Banks = get_bank(flash_dest);",
          "355:     #endif",
          "356:     EraseInitStruct.Sector = flash_get_sector_info(flash_dest, NULL, NULL);",
          "358:     #if defined(STM32H5)",
          "359:     EraseInitStruct.Sector &= 0x7f; // second bank should start counting at 0",
          "360:     #endif",
          "",
          "[Removed Lines]",
          "357:     EraseInitStruct.NbSectors = flash_get_sector_info(flash_dest + 4 * num_word32 - 1, NULL, NULL) - EraseInitStruct.Sector + 1;",
          "",
          "[Added Lines]",
          "356:     EraseInitStruct.NbSectors = num_sectors;",
          "",
          "---------------"
        ],
        "ports/stm32/flash.h||ports/stm32/flash.h": [
          "File: ports/stm32/flash.h -> ports/stm32/flash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: bool flash_is_valid_addr(uint32_t addr);",
          "30: int32_t flash_get_sector_info(uint32_t addr, uint32_t *start_addr, uint32_t *size);",
          "32: int flash_write(uint32_t flash_dest, const uint32_t *src, uint32_t num_word32);",
          "34: #endif // MICROPY_INCLUDED_STM32_FLASH_H",
          "",
          "[Removed Lines]",
          "31: int flash_erase(uint32_t flash_dest, uint32_t num_word32);",
          "",
          "[Added Lines]",
          "31: int flash_erase(uint32_t flash_dest);",
          "",
          "---------------"
        ],
        "ports/stm32/flashbdev.c||ports/stm32/flashbdev.c": [
          "File: ports/stm32/flashbdev.c -> ports/stm32/flashbdev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     if (!(flash_flags & FLASH_FLAG_ERASED)) {",
          "165:         flash_flags |= FLASH_FLAG_ERASED;",
          "166:         return;",
          "167:     }",
          "",
          "[Removed Lines]",
          "164:         flash_erase(flash_cache_sector_start, flash_cache_sector_size / 4);",
          "",
          "[Added Lines]",
          "164:         flash_erase(flash_cache_sector_start);",
          "",
          "---------------"
        ],
        "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c": [
          "File: ports/stm32/mboot/main.c -> ports/stm32/mboot/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:     }",
          "469:     if (ret != 0) {",
          "470:         return ret;",
          "471:     }",
          "",
          "[Removed Lines]",
          "468:     ret = flash_erase(sector_start, sector_size / sizeof(uint32_t));",
          "",
          "[Added Lines]",
          "468:     ret = flash_erase(sector_start);",
          "",
          "---------------"
        ]
      }
    }
  ]
}