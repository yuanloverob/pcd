{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e26e0985d94f1b9812cf41f043df89185f247945",
      "candidate_info": {
        "commit_hash": "e26e0985d94f1b9812cf41f043df89185f247945",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e26e0985d94f1b9812cf41f043df89185f247945",
        "files": [
          "Include/Python.h",
          "Include/cpython/code.h",
          "Include/cpython/optimizer.h",
          "Include/internal/pycore_backoff.h",
          "Include/internal/pycore_code.h",
          "Include/internal/pycore_interp.h",
          "Include/internal/pycore_optimizer.h",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/C API/2024-06-19-21-27-42.gh-issue-120642.UlKClN.rst",
          "Misc/NEWS.d/next/C API/2024-06-26-11-29-01.gh-issue-120642.H7P9qK.rst",
          "Modules/_opcode.c",
          "Modules/_testinternalcapi.c",
          "PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters",
          "Python/optimizer.c",
          "Python/optimizer_analysis.c",
          "Python/optimizer_symbols.c",
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-120642: Move private PyCode APIs to the internal C API (#120643) (#121043)\n\ngh-120642: Move private PyCode APIs to the internal C API (#120643)\n\n* Move _Py_CODEUNIT and related functions to pycore_code.h.\n* Move _Py_BackoffCounter to pycore_backoff.h.\n* Move Include/cpython/optimizer.h content to pycore_optimizer.h.\n* Remove Include/cpython/optimizer.h.\n* Remove PyUnstable_Replace_Executor().\n\nRename functions:\n\n* PyUnstable_GetExecutor() => _Py_GetExecutor()\n* PyUnstable_GetOptimizer() => _Py_GetOptimizer()\n* PyUnstable_SetOptimizer() => _Py_SetTier2Optimizer()\n* PyUnstable_Optimizer_NewCounter() => _PyOptimizer_NewCounter()\n* PyUnstable_Optimizer_NewUOpOptimizer() => _PyOptimizer_NewUOpOptimizer()\n\n(cherry picked from commit 9e4a81f00fef689c6e18a64245aa064eaadc7ac7)",
        "before_after_code_files": [
          "Include/Python.h||Include/Python.h",
          "Include/cpython/code.h||Include/cpython/code.h",
          "Include/cpython/optimizer.h||Include/cpython/optimizer.h",
          "Include/internal/pycore_backoff.h||Include/internal/pycore_backoff.h",
          "Include/internal/pycore_code.h||Include/internal/pycore_code.h",
          "Include/internal/pycore_interp.h||Include/internal/pycore_interp.h",
          "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h",
          "Makefile.pre.in||Makefile.pre.in",
          "Modules/_opcode.c||Modules/_opcode.c",
          "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c",
          "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters",
          "Python/optimizer.c||Python/optimizer.c",
          "Python/optimizer_analysis.c||Python/optimizer_analysis.c",
          "Python/optimizer_symbols.c||Python/optimizer_symbols.c",
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/Python.h||Include/Python.h": [
          "File: Include/Python.h -> Include/Python.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: #include \"fileutils.h\"",
          "132: #include \"cpython/pyfpe.h\"",
          "133: #include \"cpython/tracemalloc.h\"",
          "",
          "[Removed Lines]",
          "134: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/cpython/code.h||Include/cpython/code.h": [
          "File: Include/cpython/code.h -> Include/cpython/code.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     uint8_t tools[_PY_MONITORING_UNGROUPED_EVENTS];",
          "25: } _Py_GlobalMonitors;",
          "80: typedef struct {",
          "81:     PyObject *_co_code;",
          "",
          "[Removed Lines]",
          "27: typedef struct {",
          "28:     union {",
          "29:         struct {",
          "30:             uint16_t backoff : 4;",
          "31:             uint16_t value : 12;",
          "32:         };",
          "33:         uint16_t as_counter;  // For printf(\"%#x\", ...)",
          "34:     };",
          "35: } _Py_BackoffCounter;",
          "46: typedef union {",
          "47:     uint16_t cache;",
          "48:     struct {",
          "49:         uint8_t code;",
          "50:         uint8_t arg;",
          "51:     } op;",
          "52:     _Py_BackoffCounter counter;  // First cache entry of specializable op",
          "53: } _Py_CODEUNIT;",
          "57: #define _Py_OPCODE(word) ((word).op.code)",
          "58: #define _Py_OPARG(word) ((word).op.arg)",
          "60: static inline _Py_CODEUNIT",
          "61: _py_make_codeunit(uint8_t opcode, uint8_t oparg)",
          "62: {",
          "64:     _Py_CODEUNIT word;",
          "65:     word.op.code = opcode;",
          "66:     word.op.arg = oparg;",
          "67:     return word;",
          "68: }",
          "70: static inline void",
          "71: _py_set_opcode(_Py_CODEUNIT *word, uint8_t opcode)",
          "72: {",
          "73:     word->op.code = opcode;",
          "74: }",
          "76: #define _Py_MAKE_CODEUNIT(opcode, oparg) _py_make_codeunit((opcode), (oparg))",
          "77: #define _Py_SET_OPCODE(word, opcode) _py_set_opcode(&(word), (opcode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/cpython/optimizer.h||Include/cpython/optimizer.h": [
          "File: Include/cpython/optimizer.h -> Include/cpython/optimizer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/internal/pycore_backoff.h||Include/internal/pycore_backoff.h": [
          "File: Include/internal/pycore_backoff.h -> Include/internal/pycore_backoff.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <stdbool.h>",
          "14: #include <stdint.h>",
          "18:    These are used by the adaptive specializer to count down until",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: typedef struct {",
          "18:     union {",
          "19:         struct {",
          "20:             uint16_t backoff : 4;",
          "21:             uint16_t value : 12;",
          "22:         };",
          "23:         uint16_t as_counter;  // For printf(\"%#x\", ...)",
          "24:     };",
          "25: } _Py_BackoffCounter;",
          "",
          "---------------"
        ],
        "Include/internal/pycore_code.h||Include/internal/pycore_code.h": [
          "File: Include/internal/pycore_code.h -> Include/internal/pycore_code.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #endif",
          "11: #include \"pycore_lock.h\"        // PyMutex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"pycore_backoff.h\"     // _Py_BackoffCounter",
          "24: typedef union {",
          "25:     uint16_t cache;",
          "26:     struct {",
          "27:         uint8_t code;",
          "28:         uint8_t arg;",
          "29:     } op;",
          "30:     _Py_BackoffCounter counter;  // First cache entry of specializable op",
          "31: } _Py_CODEUNIT;",
          "35: #define _Py_OPCODE(word) ((word).op.code)",
          "36: #define _Py_OPARG(word) ((word).op.arg)",
          "38: static inline _Py_CODEUNIT",
          "39: _py_make_codeunit(uint8_t opcode, uint8_t oparg)",
          "40: {",
          "42:     _Py_CODEUNIT word;",
          "43:     word.op.code = opcode;",
          "44:     word.op.arg = oparg;",
          "45:     return word;",
          "46: }",
          "48: static inline void",
          "49: _py_set_opcode(_Py_CODEUNIT *word, uint8_t opcode)",
          "50: {",
          "51:     word->op.code = opcode;",
          "52: }",
          "54: #define _Py_MAKE_CODEUNIT(opcode, oparg) _py_make_codeunit((opcode), (oparg))",
          "55: #define _Py_SET_OPCODE(word, opcode) _py_set_opcode(&(word), (opcode))",
          "",
          "---------------"
        ],
        "Include/internal/pycore_interp.h||Include/internal/pycore_interp.h": [
          "File: Include/internal/pycore_interp.h -> Include/internal/pycore_interp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"pycore_list.h\"          // struct _Py_list_state",
          "31: #include \"pycore_mimalloc.h\"      // struct _mimalloc_interp_state",
          "32: #include \"pycore_object_state.h\"  // struct _py_object_state",
          "33: #include \"pycore_obmalloc.h\"      // struct _obmalloc_state",
          "34: #include \"pycore_qsbr.h\"          // struct _qsbr_state",
          "35: #include \"pycore_tstate.h\"        // _PyThreadStateImpl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"pycore_optimizer.h\"     // _PyOptimizerObject",
          "",
          "---------------"
        ],
        "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h": [
          "File: Include/internal/pycore_optimizer.h -> Include/internal/pycore_optimizer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"pycore_uop_ids.h\"",
          "12: #include <stdbool.h>",
          "15: #define UOP_MAX_TRACE_LENGTH 800",
          "17: #define TRACE_STACK_SIZE 5",
          "20:     _PyUOpInstruction *trace, int trace_len, int curr_stackentries,",
          "21:     _PyBloomFilter *dependencies);",
          "",
          "[Removed Lines]",
          "19: int _Py_uop_analyze_and_optimize(_PyInterpreterFrame *frame,",
          "",
          "[Added Lines]",
          "15: typedef struct _PyExecutorLinkListNode {",
          "16:     struct _PyExecutorObject *next;",
          "17:     struct _PyExecutorObject *previous;",
          "18: } _PyExecutorLinkListNode;",
          "23: #define BLOOM_FILTER_WORDS 8",
          "25: typedef struct _bloom_filter {",
          "26:     uint32_t bits[BLOOM_FILTER_WORDS];",
          "27: } _PyBloomFilter;",
          "29: typedef struct {",
          "30:     uint8_t opcode;",
          "31:     uint8_t oparg;",
          "32:     uint8_t valid;",
          "33:     uint8_t linked;",
          "34:     int index;           // Index of ENTER_EXECUTOR (if code isn't NULL, below).",
          "35:     _PyBloomFilter bloom;",
          "36:     _PyExecutorLinkListNode links;",
          "37:     PyCodeObject *code;  // Weak (NULL if no corresponding ENTER_EXECUTOR).",
          "38: } _PyVMData;",
          "40: #define UOP_FORMAT_TARGET 0",
          "41: #define UOP_FORMAT_EXIT 1",
          "42: #define UOP_FORMAT_JUMP 2",
          "43: #define UOP_FORMAT_UNUSED 3",
          "56: typedef struct {",
          "57:     uint16_t opcode:14;",
          "58:     uint16_t format:2;",
          "59:     uint16_t oparg;",
          "60:     union {",
          "61:         uint32_t target;",
          "62:         struct {",
          "63:             union {",
          "64:                 uint16_t exit_index;",
          "65:                 uint16_t jump_target;",
          "66:             };",
          "67:             uint16_t error_target;",
          "68:         };",
          "69:     };",
          "70:     uint64_t operand;  // A cache entry",
          "71: } _PyUOpInstruction;",
          "73: static inline uint32_t uop_get_target(const _PyUOpInstruction *inst)",
          "74: {",
          "75:     assert(inst->format == UOP_FORMAT_TARGET);",
          "76:     return inst->target;",
          "77: }",
          "79: static inline uint16_t uop_get_exit_index(const _PyUOpInstruction *inst)",
          "80: {",
          "81:     assert(inst->format == UOP_FORMAT_EXIT);",
          "82:     return inst->exit_index;",
          "83: }",
          "85: static inline uint16_t uop_get_jump_target(const _PyUOpInstruction *inst)",
          "86: {",
          "87:     assert(inst->format == UOP_FORMAT_JUMP);",
          "88:     return inst->jump_target;",
          "89: }",
          "91: static inline uint16_t uop_get_error_target(const _PyUOpInstruction *inst)",
          "92: {",
          "93:     assert(inst->format != UOP_FORMAT_TARGET);",
          "94:     return inst->error_target;",
          "95: }",
          "97: typedef struct _exit_data {",
          "98:     uint32_t target;",
          "99:     _Py_BackoffCounter temperature;",
          "100:     const struct _PyExecutorObject *executor;",
          "101: } _PyExitData;",
          "103: typedef struct _PyExecutorObject {",
          "104:     PyObject_VAR_HEAD",
          "105:     const _PyUOpInstruction *trace;",
          "107:     uint32_t exit_count;",
          "108:     uint32_t code_size;",
          "109:     size_t jit_size;",
          "110:     void *jit_code;",
          "111:     void *jit_side_entry;",
          "112:     _PyExitData exits[1];",
          "113: } _PyExecutorObject;",
          "115: typedef struct _PyOptimizerObject _PyOptimizerObject;",
          "118: typedef int (*optimize_func)(",
          "119:     _PyOptimizerObject* self, struct _PyInterpreterFrame *frame,",
          "120:     _Py_CODEUNIT *instr, _PyExecutorObject **exec_ptr,",
          "121:     int curr_stackentries);",
          "123: struct _PyOptimizerObject {",
          "124:     PyObject_HEAD",
          "125:     optimize_func optimize;",
          "127: };",
          "130: typedef struct {",
          "131:     _PyOptimizerObject base;",
          "132:     int64_t count;",
          "133: } _PyCounterOptimizerObject;",
          "135: _PyOptimizerObject *_Py_SetOptimizer(PyInterpreterState *interp, _PyOptimizerObject* optimizer);",
          "137: PyAPI_FUNC(int) _Py_SetTier2Optimizer(_PyOptimizerObject* optimizer);",
          "139: PyAPI_FUNC(_PyOptimizerObject *) _Py_GetOptimizer(void);",
          "141: PyAPI_FUNC(_PyExecutorObject *) _Py_GetExecutor(PyCodeObject *code, int offset);",
          "143: void _Py_ExecutorInit(_PyExecutorObject *, const _PyBloomFilter *);",
          "144: void _Py_ExecutorDetach(_PyExecutorObject *);",
          "145: void _Py_BloomFilter_Init(_PyBloomFilter *);",
          "146: void _Py_BloomFilter_Add(_PyBloomFilter *bloom, void *obj);",
          "147: PyAPI_FUNC(void) _Py_Executor_DependsOn(_PyExecutorObject *executor, void *obj);",
          "149: PyAPI_FUNC(PyObject *) _PyOptimizer_NewCounter(void);",
          "150: PyAPI_FUNC(PyObject *) _PyOptimizer_NewUOpOptimizer(void);",
          "152: #define _Py_MAX_ALLOWED_BUILTINS_MODIFICATIONS 3",
          "153: #define _Py_MAX_ALLOWED_GLOBALS_MODIFICATIONS 6",
          "155: #ifdef _Py_TIER2",
          "156: PyAPI_FUNC(void) _Py_Executors_InvalidateDependency(PyInterpreterState *interp, void *obj, int is_invalidation);",
          "157: PyAPI_FUNC(void) _Py_Executors_InvalidateAll(PyInterpreterState *interp, int is_invalidation);",
          "158: #else",
          "159: #  define _Py_Executors_InvalidateDependency(A, B, C) ((void)0)",
          "160: #  define _Py_Executors_InvalidateAll(A, B) ((void)0)",
          "161: #endif",
          "169: int _Py_uop_analyze_and_optimize(struct _PyInterpreterFrame *frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: PyAPI_FUNC(PyObject *) _Py_uop_symbols_test(PyObject *self, PyObject *ignored);",
          "119: #ifdef __cplusplus",
          "120: }",
          "",
          "[Removed Lines]",
          "117: PyAPI_FUNC(int) _PyOptimizer_Optimize(_PyInterpreterFrame *frame, _Py_CODEUNIT *start, PyObject **stack_pointer, _PyExecutorObject **exec_ptr);",
          "",
          "[Added Lines]",
          "267: PyAPI_FUNC(int) _PyOptimizer_Optimize(struct _PyInterpreterFrame *frame, _Py_CODEUNIT *start, PyObject **stack_pointer, _PyExecutorObject **exec_ptr);",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1103:   $(srcdir)/Include/cpython/object.h \\",
          "1104:   $(srcdir)/Include/cpython/objimpl.h \\",
          "1105:   $(srcdir)/Include/cpython/odictobject.h \\",
          "1107:   $(srcdir)/Include/cpython/picklebufobject.h \\",
          "1108:   $(srcdir)/Include/cpython/pthread_stubs.h \\",
          "1109:   $(srcdir)/Include/cpython/pyatomic.h \\",
          "",
          "[Removed Lines]",
          "1106:   $(srcdir)/Include/cpython/optimizer.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Modules/_opcode.c||Modules/_opcode.c": [
          "File: Modules/_opcode.c -> Modules/_opcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"Python.h\"",
          "6: #include \"compile.h\"",
          "7: #include \"opcode.h\"",
          "13: module _opcode",
          "",
          "[Removed Lines]",
          "8: #include \"internal/pycore_code.h\"",
          "9: #include \"internal/pycore_compile.h\"",
          "10: #include \"internal/pycore_intrinsics.h\"",
          "",
          "[Added Lines]",
          "8: #include \"pycore_code.h\"",
          "9: #include \"pycore_compile.h\"",
          "10: #include \"pycore_intrinsics.h\"",
          "11: #include \"pycore_optimizer.h\"     // _Py_GetExecutor()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:         return NULL;",
          "369:     }",
          "370: #ifdef _Py_TIER2",
          "372: #else",
          "373:     PyErr_Format(PyExc_RuntimeError,",
          "374:                  \"Executors are not available in this build\");",
          "",
          "[Removed Lines]",
          "371:     return (PyObject *)PyUnstable_GetExecutor((PyCodeObject *)code, offset);",
          "",
          "[Added Lines]",
          "372:     return (PyObject *)_Py_GetExecutor((PyCodeObject *)code, offset);",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c": [
          "File: Modules/_testinternalcapi.c -> Modules/_testinternalcapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "990: static PyObject *",
          "991: new_counter_optimizer(PyObject *self, PyObject *arg)",
          "992: {",
          "994: }",
          "996: static PyObject *",
          "997: new_uop_optimizer(PyObject *self, PyObject *arg)",
          "998: {",
          "1000: }",
          "1002: static PyObject *",
          "",
          "[Removed Lines]",
          "993:     return PyUnstable_Optimizer_NewCounter();",
          "999:     return PyUnstable_Optimizer_NewUOpOptimizer();",
          "",
          "[Added Lines]",
          "993:     return _PyOptimizer_NewCounter();",
          "999:     return _PyOptimizer_NewUOpOptimizer();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:     if (opt == Py_None) {",
          "1006:         opt = NULL;",
          "1007:     }",
          "1009:         return NULL;",
          "1010:     }",
          "1011:     Py_RETURN_NONE;",
          "",
          "[Removed Lines]",
          "1008:     if (PyUnstable_SetOptimizer((_PyOptimizerObject*)opt) < 0) {",
          "",
          "[Added Lines]",
          "1008:     if (_Py_SetTier2Optimizer((_PyOptimizerObject*)opt) < 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016: {",
          "1017:     PyObject *opt = NULL;",
          "1018: #ifdef _Py_TIER2",
          "1020: #endif",
          "1021:     if (opt == NULL) {",
          "1022:         Py_RETURN_NONE;",
          "",
          "[Removed Lines]",
          "1019:     opt = (PyObject *)PyUnstable_GetOptimizer();",
          "",
          "[Added Lines]",
          "1019:     opt = (PyObject *)_Py_GetOptimizer();",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj": [
          "File: PCbuild/pythoncore.vcxproj -> PCbuild/pythoncore.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     <ClInclude Include=\"..\\Include\\cpython\\object.h\" />",
          "167:     <ClInclude Include=\"..\\Include\\cpython\\objimpl.h\" />",
          "168:     <ClInclude Include=\"..\\Include\\cpython\\odictobject.h\" />",
          "170:     <ClInclude Include=\"..\\Include\\cpython\\parser_interface.h\" />",
          "171:     <ClInclude Include=\"..\\Include\\cpython\\picklebufobject.h\" />",
          "172:     <ClInclude Include=\"..\\Include\\cpython\\pyarena.h\" />",
          "",
          "[Removed Lines]",
          "169:     <ClInclude Include=\"..\\Include\\cpython\\optimizer.h\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters": [
          "File: PCbuild/pythoncore.vcxproj.filters -> PCbuild/pythoncore.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     <ClInclude Include=\"..\\Include\\cpython\\odictobject.h\">",
          "418:       <Filter>Include</Filter>",
          "419:     </ClInclude>",
          "423:     <ClInclude Include=\"..\\Include\\cpython\\unicodeobject.h\">",
          "424:       <Filter>Include\\cpython</Filter>",
          "425:     </ClInclude>",
          "",
          "[Removed Lines]",
          "420:     <ClInclude Include=\"..\\Include\\cpython\\optimizer.h\">",
          "421:       <Filter>Include</Filter>",
          "422:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer.c||Python/optimizer.c": [
          "File: Python/optimizer.c -> Python/optimizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"pycore_pystate.h\"       // _PyInterpreterState_GET()",
          "13: #include \"pycore_uop_ids.h\"",
          "14: #include \"pycore_jit.h\"",
          "16: #include <stdbool.h>",
          "17: #include <stdint.h>",
          "18: #include <stddef.h>",
          "",
          "[Removed Lines]",
          "15: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     instr->op.arg = index;",
          "106: }",
          "121: static int",
          "122: never_optimize(",
          "",
          "[Removed Lines]",
          "108: int",
          "109: PyUnstable_Replace_Executor(PyCodeObject *code, _Py_CODEUNIT *instr, _PyExecutorObject *new)",
          "110: {",
          "111:     if (instr->op.code != ENTER_EXECUTOR) {",
          "112:         PyErr_Format(PyExc_ValueError, \"No executor to replace\");",
          "113:         return -1;",
          "114:     }",
          "115:     int index = instr->op.arg;",
          "116:     assert(index >= 0);",
          "117:     insert_executor(code, instr, index, new);",
          "118:     return 0;",
          "119: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: };",
          "146: _PyOptimizerObject *",
          "148: {",
          "149:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "150:     if (interp->optimizer == &_PyOptimizer_Default) {",
          "",
          "[Removed Lines]",
          "147: PyUnstable_GetOptimizer(void)",
          "",
          "[Added Lines]",
          "134: _Py_GetOptimizer(void)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195: }",
          "197: int",
          "199: {",
          "200:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "201:     _PyOptimizerObject *old = _Py_SetOptimizer(interp, optimizer);",
          "",
          "[Removed Lines]",
          "198: PyUnstable_SetOptimizer(_PyOptimizerObject *optimizer)",
          "",
          "[Added Lines]",
          "185: _Py_SetTier2Optimizer(_PyOptimizerObject *optimizer)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: }",
          "242: _PyExecutorObject *",
          "244: {",
          "245:     int code_len = (int)Py_SIZE(code);",
          "246:     for (int i = 0 ; i < code_len;) {",
          "",
          "[Removed Lines]",
          "243: PyUnstable_GetExecutor(PyCodeObject *code, int offset)",
          "",
          "[Added Lines]",
          "230: _Py_GetExecutor(PyCodeObject *code, int offset)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1349: };",
          "1351: PyObject *",
          "1353: {",
          "1354:     _PyOptimizerObject *opt = PyObject_New(_PyOptimizerObject, &_PyUOpOptimizer_Type);",
          "1355:     if (opt == NULL) {",
          "",
          "[Removed Lines]",
          "1352: PyUnstable_Optimizer_NewUOpOptimizer(void)",
          "",
          "[Added Lines]",
          "1339: _PyOptimizer_NewUOpOptimizer(void)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1437: };",
          "1439: PyObject *",
          "1441: {",
          "1442:     _PyCounterOptimizerObject *opt = (_PyCounterOptimizerObject *)_PyObject_New(&_PyCounterOptimizer_Type);",
          "1443:     if (opt == NULL) {",
          "",
          "[Removed Lines]",
          "1440: PyUnstable_Optimizer_NewCounter(void)",
          "",
          "[Added Lines]",
          "1427: _PyOptimizer_NewCounter(void)",
          "",
          "---------------"
        ],
        "Python/optimizer_analysis.c||Python/optimizer_analysis.c": [
          "File: Python/optimizer_analysis.c -> Python/optimizer_analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"pycore_uop_metadata.h\"",
          "22: #include \"pycore_dict.h\"",
          "23: #include \"pycore_long.h\"",
          "25: #include \"pycore_optimizer.h\"",
          "26: #include \"pycore_object.h\"",
          "27: #include \"pycore_dict.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer_symbols.c||Python/optimizer_symbols.c": [
          "File: Python/optimizer_symbols.c -> Python/optimizer_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"Python.h\"",
          "6: #include \"pycore_code.h\"",
          "7: #include \"pycore_frame.h\"",
          "8: #include \"pycore_long.h\"",
          "",
          "[Removed Lines]",
          "5: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"pycore_typevarobject.h\" // _Py_clear_generic_types()",
          "33: #include \"pycore_unicodeobject.h\" // _PyUnicode_InitTypes()",
          "34: #include \"pycore_weakref.h\"       // _PyWeakref_GET_REF()",
          "36: #include \"pycore_obmalloc.h\"      // _PyMem_init_obmalloc()",
          "38: #include \"opcode.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"cpython/optimizer.h\"    // _Py_MAX_ALLOWED_BUILTINS_MODIFICATIONS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1299:             enabled = *env != '0';",
          "1300:         }",
          "1301:         if (enabled) {",
          "1303:             if (opt == NULL) {",
          "1304:                 return _PyStatus_ERR(\"can't initialize optimizer\");",
          "1305:             }",
          "1307:                 return _PyStatus_ERR(\"can't install optimizer\");",
          "1308:             }",
          "1309:             Py_DECREF(opt);",
          "",
          "[Removed Lines]",
          "1302:             PyObject *opt = PyUnstable_Optimizer_NewUOpOptimizer();",
          "1306:             if (PyUnstable_SetOptimizer((_PyOptimizerObject *)opt)) {",
          "",
          "[Added Lines]",
          "1301:             PyObject *opt = _PyOptimizer_NewUOpOptimizer();",
          "1305:             if (_Py_SetTier2Optimizer((_PyOptimizerObject *)opt)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07145ddf19bc423e83d0290095833bc95861fc2f",
      "candidate_info": {
        "commit_hash": "07145ddf19bc423e83d0290095833bc95861fc2f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/07145ddf19bc423e83d0290095833bc95861fc2f",
        "files": [
          "Lib/test/test_interpreters/__init__.py"
        ],
        "message": "[3.13] gh-117953: Skip `test_interpreters` properly without GIL (gh-120707)\n\n(cherry picked from commit 1035fe0cfbeee23f61aed3332ebbae854e5da800, AKA gh-120689)\n\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_interpreters/__init__.py||Lib/test/test_interpreters/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_interpreters/__init__.py||Lib/test/test_interpreters/__init__.py": [
          "File: Lib/test/test_interpreters/__init__.py -> Lib/test/test_interpreters/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from test.support import load_package_tests, Py_GIL_DISABLED",
          "",
          "[Removed Lines]",
          "4: if not Py_GIL_DISABLED:",
          "5:     def load_tests(*args):",
          "6:         return load_package_tests(os.path.dirname(__file__), *args)",
          "",
          "[Added Lines]",
          "3: import unittest",
          "5: if Py_GIL_DISABLED:",
          "6:     raise unittest.SkipTest(\"GIL disabled\")",
          "8: def load_tests(*args):",
          "9:     return load_package_tests(os.path.dirname(__file__), *args)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8368b67d1b5db48807010936d9550e762fc8630d",
      "candidate_info": {
        "commit_hash": "8368b67d1b5db48807010936d9550e762fc8630d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8368b67d1b5db48807010936d9550e762fc8630d",
        "files": [
          "Lib/tkinter/ttk.py",
          "Misc/NEWS.d/next/Library/2024-06-07-13-21-11.gh-issue-120211.Rws_gf.rst"
        ],
        "message": "[3.13] gh-120211: Fix tkinter.ttk with Tcl/Tk 9.0 (GH-120213) (GH-120215)\n\n* Use new methods for tracing Tcl variable.\n* Fix Combobox.current() for empty combobox.\n(cherry picked from commit d68a22e7a68ae09f7db61d5a1a3bd9c0360cf3ee)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/tkinter/ttk.py||Lib/tkinter/ttk.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tkinter/ttk.py||Lib/tkinter/ttk.py": [
          "File: Lib/tkinter/ttk.py -> Lib/tkinter/ttk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:         returns the index of the current value in the list of values",
          "691:         or -1 if the current value does not appear in the list.\"\"\"",
          "692:         if newindex is None:",
          "694:         return self.tk.call(self._w, \"current\", newindex)",
          "",
          "[Removed Lines]",
          "693:             return self.tk.getint(self.tk.call(self._w, \"current\"))",
          "",
          "[Added Lines]",
          "693:             res = self.tk.call(self._w, \"current\")",
          "694:             if res == '':",
          "695:                 return -1",
          "696:             return self.tk.getint(res)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1522:         self.label.place(anchor='n' if label_side == 'top' else 's')",
          "1524:         # update the label as scale or variable changes",
          "1526:         self.bind('<Configure>', self._adjust)",
          "1527:         self.bind('<Map>', self._adjust)",
          "",
          "[Removed Lines]",
          "1525:         self.__tracecb = self._variable.trace_variable('w', self._adjust)",
          "",
          "[Added Lines]",
          "1528:         self.__tracecb = self._variable.trace_add('write', self._adjust)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1530:     def destroy(self):",
          "1531:         \"\"\"Destroy this widget and possibly its associated variable.\"\"\"",
          "1532:         try:",
          "1534:         except AttributeError:",
          "1535:             pass",
          "1536:         else:",
          "",
          "[Removed Lines]",
          "1533:             self._variable.trace_vdelete('w', self.__tracecb)",
          "",
          "[Added Lines]",
          "1536:             self._variable.trace_remove('write', self.__tracecb)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6be1048e27f1f2eb35c45d17f3bb8760ec694550",
      "candidate_info": {
        "commit_hash": "6be1048e27f1f2eb35c45d17f3bb8760ec694550",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6be1048e27f1f2eb35c45d17f3bb8760ec694550",
        "files": [
          "Lib/importlib/metadata/__init__.py",
          "Lib/test/test_importlib/metadata/fixtures.py",
          "Lib/test/test_importlib/metadata/test_api.py",
          "Misc/NEWS.d/next/Library/2024-06-23-11-21-27.gh-issue-120910.t0QXdB.rst"
        ],
        "message": "[3.13] gh-120910: Fix issue resolving relative paths outside site-packages. (GH-120911) (#120917)\n\ngh-120910: Fix issue resolving relative paths outside site-packages. (GH-120911)\n\nIncorporates changes from importlib_metadata 7.2.1.\n(cherry picked from commit 1ba0bb21ed4eb54023fdfccc9cb20be8fff946b1)\n\nCo-authored-by: Jason R. Coombs <jaraco@jaraco.com>",
        "before_after_code_files": [
          "Lib/importlib/metadata/__init__.py||Lib/importlib/metadata/__init__.py",
          "Lib/test/test_importlib/metadata/fixtures.py||Lib/test/test_importlib/metadata/fixtures.py",
          "Lib/test/test_importlib/metadata/test_api.py||Lib/test/test_importlib/metadata/test_api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/importlib/metadata/__init__.py||Lib/importlib/metadata/__init__.py": [
          "File: Lib/importlib/metadata/__init__.py -> Lib/importlib/metadata/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:         paths = (",
          "568:             (subdir / name)",
          "569:             .resolve()",
          "571:             .as_posix()",
          "572:             for name in text.splitlines()",
          "573:         )",
          "",
          "[Removed Lines]",
          "570:             .relative_to(self.locate_file('').resolve())",
          "",
          "[Added Lines]",
          "570:             .relative_to(self.locate_file('').resolve(), walk_up=True)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/metadata/fixtures.py||Lib/test/test_importlib/metadata/fixtures.py": [
          "File: Lib/test/test_importlib/metadata/fixtures.py -> Lib/test/test_importlib/metadata/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     }",
          "256: class EggInfoPkgPipInstalledNoModules(OnSysPath, SiteBuilder):",
          "257:     files: FilesSpec = {",
          "258:         \"egg_with_no_modules_pkg.egg-info\": {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:     }",
          "256: class EggInfoPkgPipInstalledExternalDataFiles(OnSysPath, SiteBuilder):",
          "257:     files: FilesSpec = {",
          "258:         \"egg_with_module_pkg.egg-info\": {",
          "259:             \"PKG-INFO\": \"Name: egg_with_module-pkg\",",
          "260:             # SOURCES.txt is made from the source archive, and contains files",
          "261:             # (setup.py) that are not present after installation.",
          "262:             \"SOURCES.txt\": \"\"\"",
          "263:                 egg_with_module.py",
          "264:                 setup.py",
          "265:                 egg_with_module.json",
          "266:                 egg_with_module_pkg.egg-info/PKG-INFO",
          "267:                 egg_with_module_pkg.egg-info/SOURCES.txt",
          "268:                 egg_with_module_pkg.egg-info/top_level.txt",
          "269:             \"\"\",",
          "270:             # installed-files.txt is written by pip, and is a strictly more",
          "271:             # accurate source than SOURCES.txt as to the installed contents of",
          "272:             # the package.",
          "273:             \"installed-files.txt\": \"\"\"",
          "274:                 ../../../etc/jupyter/jupyter_notebook_config.d/relative.json",
          "275:                 /etc/jupyter/jupyter_notebook_config.d/absolute.json",
          "276:                 ../egg_with_module.py",
          "277:                 PKG-INFO",
          "278:                 SOURCES.txt",
          "279:                 top_level.txt",
          "280:             \"\"\",",
          "281:             # missing top_level.txt (to trigger fallback to installed-files.txt)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/metadata/test_api.py||Lib/test/test_importlib/metadata/test_api.py": [
          "File: Lib/test/test_importlib/metadata/test_api.py -> Lib/test/test_importlib/metadata/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     fixtures.EggInfoPkg,",
          "30:     fixtures.EggInfoPkgPipInstalledNoToplevel,",
          "31:     fixtures.EggInfoPkgPipInstalledNoModules,",
          "32:     fixtures.EggInfoPkgSourcesFallback,",
          "33:     fixtures.DistInfoPkg,",
          "34:     fixtures.DistInfoPkgWithDot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     fixtures.EggInfoPkgPipInstalledExternalDataFiles,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
      "candidate_info": {
        "commit_hash": "899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
        "files": [
          "Lib/test/test_ast.py",
          "Misc/NEWS.d/next/Library/2024-06-05-08-02-46.gh-issue-120108.4U9BL8.rst",
          "Parser/asdl_c.py",
          "Python/Python-ast.c"
        ],
        "message": "[3.13] gh-120108: Fix deepcopying of AST trees with .parent attributes (GH-120114) (#121000)\n\n(cherry picked from commit 42b2c9d78da7ebd6bd5925a4d4c78aec3c9e78e6)",
        "before_after_code_files": [
          "Lib/test/test_ast.py||Lib/test/test_ast.py",
          "Parser/asdl_c.py||Parser/asdl_c.py",
          "Python/Python-ast.c||Python/Python-ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_ast.py||Lib/test/test_ast.py": [
          "File: Lib/test/test_ast.py -> Lib/test/test_ast.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import ast",
          "2: import builtins",
          "3: import dis",
          "4: import enum",
          "5: import os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import copy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: from test.support.ast_helper import ASTTestMixin",
          "25: def to_tuple(t):",
          "27:         return t",
          "28:     elif isinstance(t, list):",
          "29:         return [to_tuple(e) for e in t]",
          "",
          "[Removed Lines]",
          "26:     if t is None or isinstance(t, (str, int, complex)) or t is Ellipsis:",
          "",
          "[Added Lines]",
          "27:     if t is None or isinstance(t, (str, int, complex, float, bytes)) or t is Ellipsis:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "971:         x = ast.Sub()",
          "972:         self.assertEqual(x._fields, ())",
          "983:     def test_invalid_sum(self):",
          "984:         pos = dict(lineno=2, col_offset=3)",
          "985:         m = ast.Module([ast.Expr(ast.expr(**pos), **pos)], [])",
          "",
          "[Removed Lines]",
          "974:     def test_pickling(self):",
          "975:         import pickle",
          "977:         for protocol in range(pickle.HIGHEST_PROTOCOL + 1):",
          "978:             for ast in (compile(i, \"?\", \"exec\", 0x400) for i in exec_tests):",
          "979:                 with self.subTest(ast=ast, protocol=protocol):",
          "980:                     ast2 = pickle.loads(pickle.dumps(ast, protocol))",
          "981:                     self.assertEqual(to_tuple(ast2), to_tuple(ast))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1222:         for node, attr, source in tests:",
          "1223:             self.assert_none_check(node, attr, source)",
          "1225: class ASTHelpers_Test(unittest.TestCase):",
          "1226:     maxDiff = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218: class CopyTests(unittest.TestCase):",
          "1219:     \"\"\"Test copying and pickling AST nodes.\"\"\"",
          "1221:     def test_pickling(self):",
          "1222:         import pickle",
          "1224:         for protocol in range(pickle.HIGHEST_PROTOCOL + 1):",
          "1225:             for code in exec_tests:",
          "1226:                 with self.subTest(code=code, protocol=protocol):",
          "1227:                     tree = compile(code, \"?\", \"exec\", 0x400)",
          "1228:                     ast2 = pickle.loads(pickle.dumps(tree, protocol))",
          "1229:                     self.assertEqual(to_tuple(ast2), to_tuple(tree))",
          "1231:     def test_copy_with_parents(self):",
          "1232:         # gh-120108",
          "1233:         code = \"\"\"",
          "1234:         ('',)",
          "1235:         while i < n:",
          "1236:             if ch == '':",
          "1237:                 ch = format[i]",
          "1238:                 if ch == '':",
          "1239:                     if freplace is None:",
          "1240:                         '' % getattr(object)",
          "1241:                 elif ch == '':",
          "1242:                     if zreplace is None:",
          "1243:                         if hasattr:",
          "1244:                             offset = object.utcoffset()",
          "1245:                             if offset is not None:",
          "1246:                                 if offset.days < 0:",
          "1247:                                     offset = -offset",
          "1248:                                 h = divmod(timedelta(hours=0))",
          "1249:                                 if u:",
          "1250:                                     zreplace = '' % (sign,)",
          "1251:                                 elif s:",
          "1252:                                     zreplace = '' % (sign,)",
          "1253:                                 else:",
          "1254:                                     zreplace = '' % (sign,)",
          "1255:                 elif ch == '':",
          "1256:                     if Zreplace is None:",
          "1257:                         Zreplace = ''",
          "1258:                         if hasattr(object):",
          "1259:                             s = object.tzname()",
          "1260:                             if s is not None:",
          "1261:                                 Zreplace = s.replace('')",
          "1262:                     newformat.append(Zreplace)",
          "1263:                 else:",
          "1264:                     push('')",
          "1265:             else:",
          "1266:                 push(ch)",
          "1268:         \"\"\"",
          "1269:         tree = ast.parse(textwrap.dedent(code))",
          "1270:         for node in ast.walk(tree):",
          "1271:             for child in ast.iter_child_nodes(node):",
          "1272:                 child.parent = node",
          "1273:         try:",
          "1274:             with support.infinite_recursion(200):",
          "1275:                 tree2 = copy.deepcopy(tree)",
          "1276:         finally:",
          "1277:             # Singletons like ast.Load() are shared; make sure we don't",
          "1278:             # leave them mutated after this test.",
          "1279:             for node in ast.walk(tree):",
          "1280:                 if hasattr(node, \"parent\"):",
          "1281:                     del node.parent",
          "1283:         for node in ast.walk(tree2):",
          "1284:             for child in ast.iter_child_nodes(node):",
          "1285:                 if hasattr(child, \"parent\") and not isinstance(child, (",
          "1286:                     ast.expr_context, ast.boolop, ast.unaryop, ast.cmpop, ast.operator,",
          "1287:                 )):",
          "1288:                     self.assertEqual(to_tuple(child.parent), to_tuple(node))",
          "",
          "---------------"
        ],
        "Parser/asdl_c.py||Parser/asdl_c.py": [
          "File: Parser/asdl_c.py -> Parser/asdl_c.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1064:         return NULL;",
          "1065:     }",
          "1069:     if (PyObject_GetOptionalAttr(self, state->__dict__, &dict) < 0) {",
          "1070:         return NULL;",
          "1071:     }",
          "1072:     PyObject *result = NULL;",
          "1073:     if (dict) {",
          "1078:         if (PyObject_GetOptionalAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {",
          "1079:             goto cleanup;",
          "1080:         }",
          "",
          "[Removed Lines]",
          "1067:     PyObject *dict = NULL, *fields = NULL, *remaining_fields = NULL,",
          "",
          "[Added Lines]",
          "1067:     PyObject *dict = NULL, *fields = NULL, *positional_args = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1084:                 Py_DECREF(dict);",
          "1085:                 goto cleanup;",
          "1086:             }",
          "1092:             positional_args = PyList_New(0);",
          "1093:             if (!positional_args) {",
          "1094:                 goto cleanup;",
          "",
          "[Removed Lines]",
          "1087:             remaining_dict = PyDict_Copy(dict);",
          "1088:             Py_DECREF(dict);",
          "1089:             if (!remaining_dict) {",
          "1090:                 goto cleanup;",
          "1091:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1099:                     goto cleanup;",
          "1100:                 }",
          "1101:                 PyObject *value;",
          "1103:                 Py_DECREF(name);",
          "1104:                 if (rc < 0) {",
          "1105:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "1102:                 int rc = PyDict_Pop(remaining_dict, name, &value);",
          "",
          "[Added Lines]",
          "1102:                 int rc = PyDict_GetItemRef(dict, name, &value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1107:                 if (!value) {",
          "1108:                     break;",
          "1109:                 }",
          "1111:                 Py_DECREF(value);",
          "1112:                 if (rc < 0) {",
          "1113:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "1110:                 rc = PyList_Append(positional_args, value);",
          "",
          "[Added Lines]",
          "1110:                 rc = PyList_Append(positional_args, Py_None);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1117:             if (!args_tuple) {",
          "1118:                 goto cleanup;",
          "1119:             }",
          "1122:         }",
          "1123:         else {",
          "1124:             result = Py_BuildValue(\"O()N\", Py_TYPE(self), dict);",
          "",
          "[Removed Lines]",
          "1120:             result = Py_BuildValue(\"ONO\", Py_TYPE(self), args_tuple,",
          "1121:                                    remaining_dict);",
          "",
          "[Added Lines]",
          "1120:             result = Py_BuildValue(\"ONN\", Py_TYPE(self), args_tuple, dict);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1129:     }",
          "1130: cleanup:",
          "1131:     Py_XDECREF(fields);",
          "1134:     Py_XDECREF(positional_args);",
          "1135:     return result;",
          "1136: }",
          "",
          "[Removed Lines]",
          "1132:     Py_XDECREF(remaining_fields);",
          "1133:     Py_XDECREF(remaining_dict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/Python-ast.c||Python/Python-ast.c": [
          "File: Python/Python-ast.c -> Python/Python-ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5263:         return NULL;",
          "5264:     }",
          "5268:     if (PyObject_GetOptionalAttr(self, state->__dict__, &dict) < 0) {",
          "5269:         return NULL;",
          "5270:     }",
          "5271:     PyObject *result = NULL;",
          "5272:     if (dict) {",
          "5277:         if (PyObject_GetOptionalAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {",
          "5278:             goto cleanup;",
          "5279:         }",
          "",
          "[Removed Lines]",
          "5266:     PyObject *dict = NULL, *fields = NULL, *remaining_fields = NULL,",
          "",
          "[Added Lines]",
          "5266:     PyObject *dict = NULL, *fields = NULL, *positional_args = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5283:                 Py_DECREF(dict);",
          "5284:                 goto cleanup;",
          "5285:             }",
          "5291:             positional_args = PyList_New(0);",
          "5292:             if (!positional_args) {",
          "5293:                 goto cleanup;",
          "",
          "[Removed Lines]",
          "5286:             remaining_dict = PyDict_Copy(dict);",
          "5287:             Py_DECREF(dict);",
          "5288:             if (!remaining_dict) {",
          "5289:                 goto cleanup;",
          "5290:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5298:                     goto cleanup;",
          "5299:                 }",
          "5300:                 PyObject *value;",
          "5302:                 Py_DECREF(name);",
          "5303:                 if (rc < 0) {",
          "5304:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "5301:                 int rc = PyDict_Pop(remaining_dict, name, &value);",
          "",
          "[Added Lines]",
          "5301:                 int rc = PyDict_GetItemRef(dict, name, &value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5306:                 if (!value) {",
          "5307:                     break;",
          "5308:                 }",
          "5310:                 Py_DECREF(value);",
          "5311:                 if (rc < 0) {",
          "5312:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "5309:                 rc = PyList_Append(positional_args, value);",
          "",
          "[Added Lines]",
          "5309:                 rc = PyList_Append(positional_args, Py_None);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5316:             if (!args_tuple) {",
          "5317:                 goto cleanup;",
          "5318:             }",
          "5321:         }",
          "5322:         else {",
          "5323:             result = Py_BuildValue(\"O()N\", Py_TYPE(self), dict);",
          "",
          "[Removed Lines]",
          "5319:             result = Py_BuildValue(\"ONO\", Py_TYPE(self), args_tuple,",
          "5320:                                    remaining_dict);",
          "",
          "[Added Lines]",
          "5319:             result = Py_BuildValue(\"ONN\", Py_TYPE(self), args_tuple, dict);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5328:     }",
          "5329: cleanup:",
          "5330:     Py_XDECREF(fields);",
          "5333:     Py_XDECREF(positional_args);",
          "5334:     return result;",
          "5335: }",
          "",
          "[Removed Lines]",
          "5331:     Py_XDECREF(remaining_fields);",
          "5332:     Py_XDECREF(remaining_dict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}