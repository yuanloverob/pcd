{
  "cve_id": "CVE-2016-1249",
  "cve_desc": "The DBD::mysql module before 4.039 for Perl, when using server-side prepared statement support, allows attackers to cause a denial of service (out-of-bounds read) via vectors involving an unaligned number of placeholders in WHERE condition and output fields in SELECT expression.",
  "repo": "perl5-dbi/DBD-mysql",
  "patch_hash": "793b72b1a0baa5070adacaac0e12fd995a6fbabe",
  "patch_info": {
    "commit_hash": "793b72b1a0baa5070adacaac0e12fd995a6fbabe",
    "repo": "perl5-dbi/DBD-mysql",
    "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/793b72b1a0baa5070adacaac0e12fd995a6fbabe",
    "files": [
      "Changes",
      "dbdimp.c",
      "lib/Bundle/DBD/mysql.pm",
      "lib/DBD/mysql.pm",
      "mysql.xs",
      "t/40server_prepare_crash.t"
    ],
    "message": "Added Pali's fix for CVE-2016-1249",
    "before_after_code_files": [
      "dbdimp.c||dbdimp.c",
      "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
      "lib/DBD/mysql.pm||lib/DBD/mysql.pm",
      "mysql.xs||mysql.xs",
      "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
    ]
  },
  "patch_diff": {
    "dbdimp.c||dbdimp.c": [
      "File: dbdimp.c -> dbdimp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   int limit_flag=0;",
      "2751: #endif",
      "2752: #endif",
      "2754:   MYSQL_BIND *bind, *bind_end;",
      "2755:   imp_sth_phb_t *fbind;",
      "2756: #endif",
      "",
      "[Removed Lines]",
      "2753:   int col_type, prepare_retval;",
      "",
      "[Added Lines]",
      "2753:   int prepare_retval;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2947:       if (DBIc_NUM_PARAMS(imp_sth) > 0)",
      "2948:       {",
      "2951:         imp_sth->bind=            alloc_bind(DBIc_NUM_PARAMS(imp_sth));",
      "2952:         imp_sth->fbind=           alloc_fbind(DBIc_NUM_PARAMS(imp_sth));",
      "",
      "[Removed Lines]",
      "2949:         int has_statement_fields= imp_sth->stmt->fields != 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2960:              bind < bind_end ;",
      "2961:              bind++, fbind++, i++ )",
      "2962:         {",
      "2977:           bind->buffer=       NULL;",
      "2978:           bind->length=       &(fbind->length);",
      "2979:           bind->is_null=      (char*) &(fbind->is_null);",
      "",
      "[Removed Lines]",
      "2964:             if this statement has a result set, field types will be",
      "2965:             correctly identified. If there is no result set, such as",
      "2966:             with an INSERT, fields will not be defined, and all buffer_type",
      "2967:             will default to MYSQL_TYPE_VAR_STRING",
      "2969:           col_type= (has_statement_fields ?",
      "2970:                      imp_sth->stmt->fields[i].type : MYSQL_TYPE_STRING);",
      "2972:           bind->buffer_type=  mysql_to_perl_type(col_type);",
      "2974:           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
      "2975:             PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tmysql_to_perl_type returned %d\\n\", col_type);",
      "",
      "[Added Lines]",
      "2962:           bind->buffer_type=  MYSQL_TYPE_STRING;",
      "",
      "---------------"
    ],
    "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
      "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: use strict;",
      "4: use warnings;",
      "8: 1;",
      "",
      "[Removed Lines]",
      "6: our $VERSION = '4.038_01';",
      "",
      "[Added Lines]",
      "6: our $VERSION = '4.039';",
      "",
      "---------------"
    ],
    "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
      "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
      "16: # for version 5.x please switch to 5.00(_00) version numbering",
      "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
      "20: bootstrap DBD::mysql $VERSION;",
      "",
      "[Removed Lines]",
      "18: our $VERSION = '4.038_01';",
      "",
      "[Added Lines]",
      "18: our $VERSION = '4.039';",
      "",
      "---------------"
    ],
    "mysql.xs||mysql.xs": [
      "File: mysql.xs -> mysql.xs",
      "--- Hunk 1 ---",
      "[Context before]",
      "266:   STRLEN slen;",
      "267:   char            *str_ptr, *buffer;",
      "268:   int             has_binded;",
      "271:   int             buffer_length= slen;",
      "272:   int             buffer_type= 0;",
      "274:   int             use_server_side_prepare= 0;",
      "275:   MYSQL_STMT      *stmt= NULL;",
      "276:   MYSQL_BIND      *bind= NULL;",
      "278: #endif",
      "279:     ASYNC_CHECK_XS(dbh);",
      "280: #if MYSQL_VERSION_ID >= MULTIPLE_RESULT_SET_VERSION",
      "",
      "[Removed Lines]",
      "269:   int             col_type= MYSQL_TYPE_STRING;",
      "270:   int             buffer_is_null= 0;",
      "273:   int             param_type= SQL_VARCHAR;",
      "277:   imp_sth_phb_t   *fbind= NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368:         int i;",
      "369:         num_params= items - 3;",
      "372:         Newz(0, bind, (unsigned int) num_params, MYSQL_BIND);",
      "375:         for (i = 0; i < num_params; i++)",
      "376:         {",
      "377:           int defined= 0;",
      "381:           {",
      "385:               defined= 1;",
      "386:           }",
      "387:           if (defined)",
      "388:           {",
      "391:             buffer_length= slen;",
      "392:           }",
      "393:           else",
      "394:           {",
      "395:             buffer= NULL;",
      "397:             buffer_length= 0;",
      "498:           }",
      "500:           bind[i].buffer_type = buffer_type;",
      "501:           bind[i].buffer_length= buffer_length;",
      "502:           bind[i].buffer= buffer;",
      "506:         }",
      "507:         has_binded= 0;",
      "508:       }",
      "",
      "[Removed Lines]",
      "371:         Newz(0, params, sizeof(*params)*num_params, struct imp_sth_ph_st);",
      "373:         Newz(0, fbind, (unsigned int) num_params, imp_sth_phb_t);",
      "378:           params[i].value= ST(i+3);",
      "380:           if (params[i].value)",
      "382:             if (SvMAGICAL(params[i].value))",
      "383:               mg_get(params[i].value);",
      "384:             if (SvOK(params[i].value))",
      "389:             buffer= SvPV(params[i].value, slen);",
      "390:             buffer_is_null= 0;",
      "396:             buffer_is_null= 1;",
      "398:           }",
      "401:             if this statement has a result set, field types will be",
      "402:             correctly identified. If there is no result set, such as",
      "403:             with an INSERT, fields will not be defined, and all",
      "404:             buffer_type will default to MYSQL_TYPE_VAR_STRING",
      "406:           col_type= (stmt->fields) ? stmt->fields[i].type : MYSQL_TYPE_STRING;",
      "408:           switch (col_type) {",
      "409: #if MYSQL_VERSION_ID > 50003",
      "410:           case MYSQL_TYPE_NEWDECIMAL:",
      "411: #endif",
      "412:           case MYSQL_TYPE_DECIMAL:",
      "413:             param_type= SQL_DECIMAL;",
      "414:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "415:             break;",
      "417:           case MYSQL_TYPE_DOUBLE:",
      "418:             param_type= SQL_DOUBLE;",
      "419:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "420:             break;",
      "422:           case MYSQL_TYPE_FLOAT:",
      "423:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "424:             param_type= SQL_FLOAT;",
      "425:             break;",
      "427:           case MYSQL_TYPE_SHORT:",
      "428:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "429:             param_type= SQL_FLOAT;",
      "430:             break;",
      "432:           case MYSQL_TYPE_TINY:",
      "433:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "434:             param_type= SQL_FLOAT;",
      "435:             break;",
      "437:           case MYSQL_TYPE_LONG:",
      "438:             buffer_type= MYSQL_TYPE_LONG;",
      "439:             param_type= SQL_BIGINT;",
      "440:             break;",
      "442:           case MYSQL_TYPE_INT24:",
      "443:           case MYSQL_TYPE_YEAR:",
      "444:             buffer_type= MYSQL_TYPE_LONG;",
      "445:             param_type= SQL_INTEGER;",
      "446:             break;",
      "448:           case MYSQL_TYPE_LONGLONG:",
      "449: #if IVSIZE < 8",
      "452:             buffer_type= MYSQL_TYPE_STRING;",
      "453:             param_type= SQL_VARCHAR;",
      "454: #else",
      "455:             buffer_type= MYSQL_TYPE_LONG;",
      "456:             param_type= SQL_BIGINT;",
      "457: #endif",
      "458:             break;",
      "460:           case MYSQL_TYPE_NEWDATE:",
      "461:           case MYSQL_TYPE_DATE:",
      "462:             buffer_type= MYSQL_TYPE_STRING;",
      "463:             param_type= SQL_DATE;",
      "464:             break;",
      "466:           case MYSQL_TYPE_TIME:",
      "467:             buffer_type= MYSQL_TYPE_STRING;",
      "468:             param_type= SQL_TIME;",
      "469:             break;",
      "471:           case MYSQL_TYPE_TIMESTAMP:",
      "472:             buffer_type= MYSQL_TYPE_STRING;",
      "473:             param_type= SQL_TIMESTAMP;",
      "474:             break;",
      "476:           case MYSQL_TYPE_VAR_STRING:",
      "477:           case MYSQL_TYPE_STRING:",
      "478:           case MYSQL_TYPE_DATETIME:",
      "479:             buffer_type= MYSQL_TYPE_STRING;",
      "480:             param_type= SQL_VARCHAR;",
      "481:             break;",
      "483:           case MYSQL_TYPE_BLOB:",
      "484:             buffer_type= MYSQL_TYPE_BLOB;",
      "485:             param_type= SQL_BINARY;",
      "486:             break;",
      "488:           case MYSQL_TYPE_GEOMETRY:",
      "489:             buffer_type= MYSQL_TYPE_BLOB;",
      "490:             param_type= SQL_BINARY;",
      "491:             break;",
      "494:           default:",
      "495:             buffer_type= MYSQL_TYPE_STRING;",
      "496:             param_type= SQL_VARCHAR;",
      "497:             break;",
      "503:           fbind[i].length= buffer_length;",
      "504:           fbind[i].is_null= buffer_is_null;",
      "505:           params[i].type= param_type;",
      "",
      "[Added Lines]",
      "371:           SV *param= ST(i+3);",
      "373:           if (param)",
      "375:             if (SvMAGICAL(param))",
      "376:               mg_get(param);",
      "377:             if (SvOK(param))",
      "382:             buffer= SvPV(param, slen);",
      "384:             buffer_type= MYSQL_TYPE_STRING;",
      "390:             buffer_type= MYSQL_TYPE_NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "514:                                            &has_binded);",
      "515:       if (bind)",
      "516:         Safefree(bind);",
      "520:       if(mysql_stmt_close(stmt))",
      "521:       {",
      "",
      "[Removed Lines]",
      "517:       if (fbind)",
      "518:         Safefree(fbind);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
      "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: my $dbh = eval { DBI->connect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1 }) };",
      "11: plan skip_all => \"no database connection\" if $@ or not $dbh;",
      "15: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n TEXT)\");",
      "",
      "[Removed Lines]",
      "13: plan tests => 13;",
      "",
      "[Added Lines]",
      "13: plan tests => 17;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: ok $sth->execute();",
      "31: ok $sth->finish();",
      "33: ok $dbh->disconnect();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: ok $sth = $dbh->prepare(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000));",
      "34: ok $sth->execute((1) x (10001));",
      "35: ok $sth->finish();",
      "37: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eccf2e64b59b7c56d5cb4ca24b918da0956bfef4",
      "candidate_info": {
        "commit_hash": "eccf2e64b59b7c56d5cb4ca24b918da0956bfef4",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/eccf2e64b59b7c56d5cb4ca24b918da0956bfef4",
        "files": [
          "dbdimp.c",
          "dbdimp.h",
          "mysql.xs"
        ],
        "message": "Add support for encoding statements and bind parameters to UTF-8 when mysql_enable_utf8 is enabled\n\nBefore this commit perl scalars (statements or bind parameters) without\nUTF8 status flag were not encoded to UTF-8 even if mysql_enable_utf8 was\nenabled. It caused that perl scalars with internal Latin1 encoding were\nsend to mysql server as Latin1 even if mysql_enable_utf8 was enabled.\n\nNow all statements and bind parameters which are not of DBI binary type\n(SQL_BIT, SQL_BLOB, SQL_BINARY, SQL_VARBINARY and SQL_LONGVARBINARY) are\nautomatically encoded to UTF-8 when mysql_enable_utf8 is enabled.\n\nIf mysql_enable_utf8 is not enabled and statement or bind parameter\ncontains wide Unicode character then DBD::mysql shows warning. If binary\nparameter contains wide Unicode character then DBD::mysql shows warning\ntoo. Similar like function print without :utf8 perlio layer.\n\nPerl's SvPV() returns char* from perl scalar and following SvUTF8() call\nfor that scalar returns true if SvPV returned data in UTF-8 or Latin1.\n\nSvPVutf8() always returns data in UTF-8, but has side effect that it\nmodifies and upgrades scalar to UTF-8. To prevent modification of original\nscalar we create new mortal (temporary) one for modification. Because\ninvariant UTF-8 characters (7bit ASCII) are exaclty same also in Latin1, we\ndo not need to do any encoding when all characters are UTF-8 invariants.\n\nSvPVbyte() first downgrades scalar to Latin1 and then returns data in\nLatin1. If downgrade is not possible then it croaks. So instead SvPVbyte()\nfor binary data is used manual conversion which throws only warning.",
        "before_after_code_files": [
          "dbdimp.c||dbdimp.c",
          "dbdimp.h||dbdimp.h",
          "mysql.xs||mysql.xs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dbdimp.c||dbdimp.c",
            "mysql.xs||mysql.xs"
          ],
          "candidate": [
            "dbdimp.c||dbdimp.c",
            "mysql.xs||mysql.xs"
          ]
        }
      },
      "candidate_diff": {
        "dbdimp.c||dbdimp.c": [
          "File: dbdimp.c -> dbdimp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: }",
          "59: #endif",
          "61: static int parse_number(char *string, STRLEN len, char **end);",
          "63: DBISTATE_DECLARE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: PERL_STATIC_INLINE bool str_is_nonascii(const char *str, STRLEN len)",
          "62: {",
          "63:   STRLEN i;",
          "64:   for (i = 0; i < len; ++i)",
          "65:     if (!UTF8_IS_INVARIANT(str[i]))",
          "66:       return true;",
          "67:   return false;",
          "68: }",
          "70: void get_param(pTHX_ SV *param, int field, bool enable_utf8, bool is_binary, char **out_buf, STRLEN *out_len)",
          "71: {",
          "72:   char *buf;",
          "73:   STRLEN len;",
          "74:   int is_utf8;",
          "76:   buf = SvPV(param, len);",
          "77:   is_utf8 = SvUTF8(param);",
          "78:   if (enable_utf8 && !is_binary && !is_utf8 && str_is_nonascii(buf, len))",
          "79:   {",
          "80:     param = sv_2mortal(newSVpvn(buf, len));",
          "81:     buf = SvPVutf8(param, len);",
          "82:   }",
          "83:   else if ((!enable_utf8 || is_binary) && is_utf8)",
          "84:   {",
          "85:     param = sv_2mortal(newSVpvn(buf, len));",
          "86:     SvUTF8_on(param);",
          "87:     buf = SvPVutf8(param, len);",
          "88:     if (!utf8_to_bytes((U8 *)buf, &len))",
          "89:     {",
          "91:       len = SvCUR(param);",
          "92:       if (is_binary)",
          "93:         warn(\"Wide character in binary field %d\", field);",
          "94:       else",
          "95:         warn(\"Wide character in field %d but mysql_enable_utf8 not set\", field);",
          "97:     }",
          "98:   }",
          "102: }",
          "104: void get_statement(pTHX_ SV *statement, bool enable_utf8, char **out_buf, STRLEN *out_len)",
          "105: {",
          "106:   char *buf;",
          "107:   STRLEN len;",
          "108:   int is_utf8;",
          "110:   buf = SvPV(statement, len);",
          "111:   is_utf8 = SvUTF8(statement);",
          "112:   if (enable_utf8 && !is_utf8 && str_is_nonascii(buf, len))",
          "113:   {",
          "114:     statement = sv_2mortal(newSVpvn(buf, len));",
          "115:     buf = SvPVutf8(statement, len);",
          "116:   }",
          "117:   else if (!enable_utf8 && is_utf8)",
          "118:   {",
          "119:     statement = sv_2mortal(newSVpvn(buf, len));",
          "120:     SvUTF8_on(statement);",
          "121:     buf = SvPVutf8(statement, len);",
          "122:     if (!utf8_to_bytes((U8 *)buf, &len))",
          "123:     {",
          "125:       len = SvCUR(statement);",
          "126:       warn(\"Wide character in statement but mysql_enable_utf8 not set\");",
          "128:     }",
          "129:   }",
          "133: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461: }",
          "462: #endif",
          "465:   Returns true if DBI SQL type represents numeric value (regardless of how is stored)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:   Returns true if DBI SQL type should be treated as binary sequence of octets, not UNICODE string",
          "541: static bool sql_type_is_binary(IV sql_type)",
          "542: {",
          "543:   switch (sql_type) {",
          "544:   case SQL_BIT:",
          "545:   case SQL_BLOB:",
          "546:   case SQL_BINARY:",
          "547:   case SQL_VARBINARY:",
          "548:   case SQL_LONGVARBINARY:",
          "549:     return true;",
          "551:   default:",
          "552:     return false;",
          "553:   }",
          "554: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "862:   return(salloc);",
          "863: }",
          "866: {",
          "867:   dTHX;",
          "868:   char *buf;",
          "870:   if (ph->value)",
          "871:     Safefree(ph->value);",
          "873:   if (SvOK(value))",
          "874:   {",
          "876:     ph->value = savepvn(buf, ph->len);",
          "877:   }",
          "878:   else",
          "879:   {",
          "",
          "[Removed Lines]",
          "865: static void bind_param(imp_sth_ph_t *ph, SV *value, IV sql_type)",
          "875:     buf = SvPV(value, ph->len);",
          "",
          "[Added Lines]",
          "957: static void bind_param(imp_sth_ph_t *ph, SV *value, IV sql_type, int field, bool enable_utf8)",
          "961:   bool is_binary;",
          "968:     is_binary = sql_type_is_binary(sql_type);",
          "969:     get_param(aTHX_ value, field, enable_utf8, is_binary, &buf, &ph->len);",
          "971:     ph->utf8 = (enable_utf8 && !is_binary);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2882: #endif",
          "2883:   D_imp_xxh(sth);",
          "2884:   D_imp_dbh_from_sth;",
          "2887:   imp_sth->statement = savepvn(statement, statement_len);",
          "2888:   imp_sth->statement_len = statement_len;",
          "",
          "[Removed Lines]",
          "2886:   statement = SvPV(statement_sv, statement_len);",
          "",
          "[Added Lines]",
          "2980:   bool enable_utf8 = (imp_dbh->enable_utf8 || imp_dbh->enable_utf8mb4);",
          "2982:   get_statement(aTHX_ statement_sv, enable_utf8, &statement, &statement_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4964:             {",
          "4965:                 keylen= sprintf(key, \"%d\", n);",
          "4966:                 sv= newSVpvn(imp_sth->params[n].value, imp_sth->params[n].len);",
          "4967:                 (void)hv_store(pvhv, key, keylen, sv, 0);",
          "4968:             }",
          "4969:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5063:                 if (imp_sth->params[n].utf8) SvUTF8_on(sv);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5124:   int param_num= SvIV(param);",
          "5125:   int idx= param_num - 1;",
          "5126:   char *err_msg;",
          "5127:   D_imp_xxh(sth);",
          "5129: #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5224:   bool enable_utf8;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5139:   D_imp_dbh_from_sth;",
          "5140:   ASYNC_CHECK_RETURN(sth, FALSE);",
          "5142:   if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5143:     PerlIO_printf(DBIc_LOGPIO(imp_xxh),",
          "5144:                   \"   Called: dbd_bind_ph\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5240:   enable_utf8 = (imp_dbh->enable_utf8 || imp_dbh->enable_utf8mb4);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5173:     return FALSE;",
          "5174:   }",
          "5178: #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION",
          "5179:   if (imp_sth->use_server_side_prepare)",
          "",
          "[Removed Lines]",
          "5176:   bind_param(&imp_sth->params[idx], value, sql_type);",
          "",
          "[Added Lines]",
          "5276:   bind_param(&imp_sth->params[idx], value, sql_type, idx+1, enable_utf8);",
          "",
          "---------------"
        ],
        "dbdimp.h||dbdimp.h": [
          "File: dbdimp.h -> dbdimp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     char* value;",
          "206:     STRLEN len;",
          "207:     int type;",
          "208: } imp_sth_ph_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:     bool utf8;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388: int mysql_db_async_result(SV* h, MYSQL_RES** resp);",
          "389: int mysql_db_async_ready(SV* h);",
          "390: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: void get_param(pTHX_ SV *param, int field, bool enable_utf8, bool is_binary, char **out_buf, STRLEN *out_len);",
          "394: void get_statement(pTHX_ SV *statement, bool enable_utf8, char **out_buf, STRLEN *out_len);",
          "",
          "---------------"
        ],
        "mysql.xs||mysql.xs": [
          "File: mysql.xs -> mysql.xs",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:   struct imp_sth_ph_st* params= NULL;",
          "260:   MYSQL_RES* result= NULL;",
          "261:   SV* async = NULL;",
          "262: #if MYSQL_VERSION_ID >= MULTIPLE_RESULT_SET_VERSION",
          "263:   int next_result_rc;",
          "264: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   bool enable_utf8 = (imp_dbh->enable_utf8 || imp_dbh->enable_utf8mb4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   int             disable_fallback_for_server_prepare= 0;",
          "271:   MYSQL_STMT      *stmt= NULL;",
          "272:   MYSQL_BIND      *bind= NULL;",
          "273: #endif",
          "274:     ASYNC_CHECK_XS(dbh);",
          "275: #if MYSQL_VERSION_ID >= MULTIPLE_RESULT_SET_VERSION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   STRLEN          blen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:   (void)hv_store((HV*)SvRV(dbh), \"Statement\", 9, SvREFCNT_inc(statement), 0);",
          "319:   if(SvTRUE(async)) {",
          "320: #if MYSQL_ASYNC",
          "",
          "[Removed Lines]",
          "317:   str_ptr = SvPV(statement, slen);",
          "",
          "[Added Lines]",
          "319:   get_statement(aTHX_ statement, enable_utf8, &str_ptr, &slen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "381:             mg_get(param);",
          "382:           if (SvOK(param))",
          "383:           {",
          "386:             bind[i].buffer_type= MYSQL_TYPE_STRING;",
          "387:           }",
          "388:           else",
          "",
          "[Removed Lines]",
          "384:             bind[i].buffer= SvPV(param, slen);",
          "385:             bind[i].buffer_length= slen;",
          "",
          "[Added Lines]",
          "386:             get_param(aTHX_ param, i+1, enable_utf8, false, (char **)&bind[i].buffer, &blen);",
          "387:             bind[i].buffer_length= blen;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "436:         if (SvMAGICAL(param))",
          "437:           mg_get(param);",
          "438:         if (SvOK(param))",
          "440:         else",
          "441:           params[i].value= NULL;",
          "442:         params[i].type= SQL_VARCHAR;",
          "443:       }",
          "444:     }",
          "445:     retval = mysql_st_internal_execute(dbh, str_ptr, slen, attr, num_params,",
          "",
          "[Removed Lines]",
          "439:           params[i].value= SvPV(param, params[i].len);",
          "",
          "[Added Lines]",
          "441:           get_param(aTHX_ param, i+1, enable_utf8, false, &params[i].value, &params[i].len);",
          "445:         params[i].utf8= enable_utf8;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "753857e8d77ee8a88b7a4af806491de343f91d98",
      "candidate_info": {
        "commit_hash": "753857e8d77ee8a88b7a4af806491de343f91d98",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/753857e8d77ee8a88b7a4af806491de343f91d98",
        "files": [
          "Changes",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Update changelog, here we go again!",
        "before_after_code_files": [
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.043';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.043_01';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.043';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.043_01';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e28fd98ac5bb7243b53297e06355433df891c09",
      "candidate_info": {
        "commit_hash": "3e28fd98ac5bb7243b53297e06355433df891c09",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/3e28fd98ac5bb7243b53297e06355433df891c09",
        "files": [
          "Changes",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Release 4.042",
        "before_after_code_files": [
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.041_02';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.042';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.041_02';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.042';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4012410937ad245db6350c8c7026e14a134f7f02",
      "candidate_info": {
        "commit_hash": "4012410937ad245db6350c8c7026e14a134f7f02",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/4012410937ad245db6350c8c7026e14a134f7f02",
        "files": [
          "Changes",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Updated changelog",
        "before_after_code_files": [
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.041_01';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.041_02';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.041_01';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.041_02';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3619c170461a3107a258d1fd2d00ed4832adb1b1",
      "candidate_info": {
        "commit_hash": "3619c170461a3107a258d1fd2d00ed4832adb1b1",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/3619c170461a3107a258d1fd2d00ed4832adb1b1",
        "files": [
          "dbdimp.c",
          "t/40server_prepare_crash.t"
        ],
        "message": "Fix use-after-free for repeated fetchrow_arrayref calls when mysql_server_prepare=1\n\nFunction dbd_st_fetch() via Renew() can reallocate output buffer for\nmysql_stmt_fetch() call. But it does not update pointer to that buffer in\nimp_sth->stmt structure initialized by mysql_stmt_bind_result() function.\nThat leads to use-after-free in any mysql function which access\nimp_sth->stmt structure (e.g. mysql_stmt_fetch()).\n\nThis patch fix this problem and properly updates pointer in imp_sth->stmt\nstructure after Renew() call.\n\nTest 40server_prepare_crash.t is extended to check for that use-after-free\ncrash.",
        "before_after_code_files": [
          "dbdimp.c||dbdimp.c",
          "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dbdimp.c||dbdimp.c",
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ],
          "candidate": [
            "dbdimp.c||dbdimp.c",
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ]
        }
      },
      "candidate_diff": {
        "dbdimp.c||dbdimp.c": [
          "File: dbdimp.c -> dbdimp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4050:           Renew(fbh->data, fbh->length, char);",
          "4051:           buffer->buffer_length= fbh->length;",
          "4052:           buffer->buffer= (char *) fbh->data;",
          "4054:           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2) {",
          "4055:             int j;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4053:           imp_sth->stmt->bind[i].buffer_length = fbh->length;",
          "4054:           imp_sth->stmt->bind[i].buffer = (char *)fbh->data;",
          "",
          "---------------"
        ],
        "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
          "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: my $dbh = eval { DBI->connect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1, mysql_server_prepare_disable_fallback => 1 }) };",
          "11: plan skip_all => \"no database connection\" if $@ or not $dbh;",
          "19: ok $sth->bind_param(2, \"x\" x 1000000);",
          "20: ok $sth->bind_param(1, \"abcx\", 12);",
          "",
          "[Removed Lines]",
          "13: plan tests => 17;",
          "15: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n TEXT)\");",
          "17: ok my $sth = $dbh->prepare(\"SELECT * FROM t WHERE i=? AND n=?\");",
          "",
          "[Added Lines]",
          "13: plan tests => 39;",
          "15: my $sth;",
          "17: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n LONGBLOB)\");",
          "19: ok $sth = $dbh->prepare(\"INSERT INTO t(i, n) VALUES(?, ?)\");",
          "20: ok $sth->execute(1, \"x\" x 10);",
          "21: ok $sth->execute(2, \"x\" x 100);",
          "22: ok $sth->execute(3, \"x\" x 1000);",
          "23: ok $sth->execute(4, \"x\" x 10000);",
          "24: ok $sth->execute(5, \"x\" x 100000);",
          "25: ok $sth->execute(6, \"x\" x 1000000);",
          "26: ok $sth->finish();",
          "28: ok $sth = $dbh->prepare(\"SELECT * FROM t WHERE i=? AND n=?\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: ok $sth->execute((1) x (10001));",
          "35: ok $sth->finish();",
          "37: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
          "39: ok $dbh->disconnect();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: my $test;",
          "49: ok $sth = $dbh->prepare(\"SELECT i,n FROM t WHERE i = ?\");",
          "51: ok $sth->execute(1);",
          "52: ok $sth->fetchrow_arrayref();",
          "54: ok $sth->execute(2);",
          "55: $test = map { $_ } 'a';",
          "56: ok $sth->fetchrow_arrayref();",
          "58: ok $sth->execute(3);",
          "59: $test = map { $_ } 'b' x 10000000; # try to reuse released memory",
          "60: ok $sth->fetchrow_arrayref();",
          "62: ok $sth->execute(4);",
          "63: $test = map { $_ } 'cd' x 10000000; # try to reuse of released memory",
          "64: ok $sth->fetchrow_arrayref();",
          "66: ok $sth->execute(5);",
          "67: $test = map { $_ } 'efg' x 10000000; # try to reuse of released memory",
          "68: ok $sth->fetchrow_arrayref();",
          "70: ok $sth->execute(6);",
          "71: $test = map { $_ } 'hijk' x 10000000; # try to reuse of released memory",
          "72: ok $sth->fetchrow_arrayref();",
          "74: ok $sth->finish();",
          "",
          "---------------"
        ]
      }
    }
  ]
}