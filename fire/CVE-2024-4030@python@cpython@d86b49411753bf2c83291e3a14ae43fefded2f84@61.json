{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "c750061047ee520d8299334df4b112fd983d7e48",
      "candidate_info": {
        "commit_hash": "c750061047ee520d8299334df4b112fd983d7e48",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c750061047ee520d8299334df4b112fd983d7e48",
        "files": [
          "Lib/test/test_socket.py"
        ],
        "message": "[3.13] gh-119461: Fix ThreadedVSOCKSocketStreamTest (#119465) (#119479)\n\ngh-119461: Fix ThreadedVSOCKSocketStreamTest (#119465)\n\nFix ThreadedVSOCKSocketStreamTest: if get_cid() returns the host\naddress or the \"any\" address, use the local communication address\n(loopback): VMADDR_CID_LOCAL.\n\nOn Linux 6.9, apparently, the /dev/vsock device is now available but\nget_cid() returns VMADDR_CID_ANY (-1).\n\n(cherry picked from commit e94dbe4ed83460f18bd72563c5f09f6cdc71f604)",
        "before_after_code_files": [
          "Lib/test/test_socket.py||Lib/test/test_socket.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_socket.py||Lib/test/test_socket.py": [
          "File: Lib/test/test_socket.py -> Lib/test/test_socket.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: # test unicode string and carriage return",
          "48: MSG = 'Michael Gilfix was here\\u1234\\r\\n'.encode('utf-8')",
          "50: VSOCKPORT = 1234",
          "51: AIX = platform.system() == \"AIX\"",
          "52: WSL = \"microsoft-standard-WSL\" in platform.release()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: VMADDR_CID_LOCAL = 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: def _have_socket_vsock():",
          "162:     \"\"\"Check whether AF_VSOCK sockets are supported on this host.\"\"\"",
          "167: def _have_socket_bluetooth():",
          "",
          "[Removed Lines]",
          "163:     ret = get_cid() is not None",
          "164:     return ret",
          "",
          "[Added Lines]",
          "164:     cid = get_cid()",
          "165:     return (cid is not None)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520: @unittest.skipIf(WSL, 'VSOCK does not work on Microsoft WSL')",
          "521: @unittest.skipUnless(HAVE_SOCKET_VSOCK,",
          "522:           'VSOCK sockets required for this test.')",
          "525: class ThreadedVSOCKSocketStreamTest(unittest.TestCase, ThreadableTest):",
          "527:     def __init__(self, methodName='runTest'):",
          "",
          "[Removed Lines]",
          "523: @unittest.skipUnless(get_cid() != 2,",
          "524:           \"This test can only be run on a virtual guest.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "543:         self.cli = socket.socket(socket.AF_VSOCK, socket.SOCK_STREAM)",
          "544:         self.addCleanup(self.cli.close)",
          "545:         cid = get_cid()",
          "546:         self.cli.connect((cid, VSOCKPORT))",
          "548:     def testStream(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:         if cid in (socket.VMADDR_CID_HOST, socket.VMADDR_CID_ANY):",
          "546:             # gh-119461: Use the local communication address (loopback)",
          "547:             cid = VMADDR_CID_LOCAL",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
      "candidate_info": {
        "commit_hash": "f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
        "files": [
          "Lib/test/test_free_threading/test_dict.py"
        ],
        "message": "[3.13] gh-120579: Guard `_testcapi` import in `test_free_threading` (GH-120580) (#120583)\n\ngh-120579: Guard `_testcapi` import in `test_free_threading` (GH-120580)\n(cherry picked from commit 0c0348adbfca991f78b3aaa6790e5c26606a1c0f)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_free_threading/test_dict.py||Lib/test/test_free_threading/test_dict.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_free_threading/test_dict.py||Lib/test/test_free_threading/test_dict.py": [
          "File: Lib/test/test_free_threading/test_dict.py -> Lib/test/test_free_threading/test_dict.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from threading import Thread",
          "9: from unittest import TestCase",
          "13: from test.support import threading_helper",
          "",
          "[Removed Lines]",
          "11: from _testcapi import dict_version",
          "",
          "[Added Lines]",
          "11: try:",
          "12:     import _testcapi",
          "13: except ImportError:",
          "14:     _testcapi = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:             for ref in thread_list:",
          "140:                 self.assertIsNone(ref())",
          "142:     def test_dict_version(self):",
          "143:         THREAD_COUNT = 10",
          "144:         DICT_COUNT = 10000",
          "145:         lists = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "147:         dict_version = _testcapi.dict_version",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81eae217335fc66bec343b9f11f1b68fe85667bf",
      "candidate_info": {
        "commit_hash": "81eae217335fc66bec343b9f11f1b68fe85667bf",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/81eae217335fc66bec343b9f11f1b68fe85667bf",
        "files": [
          "Lib/test/test_unittest/testmock/testhelpers.py",
          "Lib/unittest/mock.py",
          "Misc/NEWS.d/next/Library/2024-06-04-08-57-02.gh-issue-65454.o9j4wF.rst"
        ],
        "message": "[3.13] gh-65454: avoid triggering call to a PropertyMock in NonCallableMock.__setattr__ (GH-120019) (#120336)\n\ngh-65454: avoid triggering call to a PropertyMock in NonCallableMock.__setattr__ (GH-120019)\n(cherry picked from commit 9e9ee50421c857b443e2060274f17fb884d54473)\n\nCo-authored-by: blhsing <blhsing@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_unittest/testmock/testhelpers.py||Lib/test/test_unittest/testmock/testhelpers.py",
          "Lib/unittest/mock.py||Lib/unittest/mock.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_unittest/testmock/testhelpers.py||Lib/test/test_unittest/testmock/testhelpers.py": [
          "File: Lib/test/test_unittest/testmock/testhelpers.py -> Lib/test/test_unittest/testmock/testhelpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:         p.assert_called_once_with()",
          "1130: class TestCallablePredicate(unittest.TestCase):",
          "1132:     def test_type(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:     def test_propertymock_attach(self):",
          "1131:         m = Mock()",
          "1132:         p = PropertyMock()",
          "1133:         type(m).foo = p",
          "1134:         m.attach_mock(p, 'foo')",
          "1135:         self.assertEqual(m.mock_calls, [])",
          "",
          "---------------"
        ],
        "Lib/unittest/mock.py||Lib/unittest/mock.py": [
          "File: Lib/unittest/mock.py -> Lib/unittest/mock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:             mock_name = f'{self._extract_mock_name()}.{name}'",
          "831:             raise AttributeError(f'Cannot set {mock_name}')",
          "833:         return object.__setattr__(self, name, value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:         if isinstance(value, PropertyMock):",
          "834:             self.__dict__[name] = value",
          "835:             return",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "015ddfeca5e39a3796ee144d07accb1d5c7e7522",
      "candidate_info": {
        "commit_hash": "015ddfeca5e39a3796ee144d07accb1d5c7e7522",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/015ddfeca5e39a3796ee144d07accb1d5c7e7522",
        "files": [
          "Lib/test/test_decimal.py"
        ],
        "message": "[3.13] Restore decimal context after decimal doctests (GH-120149) (GH-120167)\n\nThe modified context caused tests failures in several other tests.\n(cherry picked from commit 2d7ff6e0e7d4c08ba84079a5c19a4a485626e1de)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_decimal.py||Lib/test/test_decimal.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_decimal.py||Lib/test/test_decimal.py": [
          "File: Lib/test/test_decimal.py -> Lib/test/test_decimal.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5893:     if TODO_TESTS is None:",
          "5894:         from doctest import DocTestSuite, IGNORE_EXCEPTION_DETAIL",
          "5895:         for mod in C, P:",
          "5896:             if not mod:",
          "5897:                 continue",
          "5898:             def setUp(slf, mod=mod):",
          "5899:                 sys.modules['decimal'] = mod",
          "5901:                 sys.modules['decimal'] = orig_sys_decimal",
          "5902:             optionflags = IGNORE_EXCEPTION_DETAIL if mod is C else 0",
          "5903:             sys.modules['decimal'] = mod",
          "5904:             tests.addTest(DocTestSuite(mod, setUp=setUp, tearDown=tearDown,",
          "",
          "[Removed Lines]",
          "5900:             def tearDown(slf):",
          "",
          "[Added Lines]",
          "5895:         orig_context = orig_sys_decimal.getcontext().copy()",
          "5901:                 init(mod)",
          "5902:             def tearDown(slf, mod=mod):",
          "5904:                 mod.setcontext(ORIGINAL_CONTEXT[mod].copy())",
          "5905:                 orig_sys_decimal.setcontext(orig_context.copy())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5913:     TEST_ALL = ARITH if ARITH is not None else is_resource_enabled('decimal')",
          "5915: def tearDownModule():",
          "5918:     if not C:",
          "5919:         warnings.warn('C tests skipped: no module named _decimal.',",
          "5920:                       UserWarning)",
          "",
          "[Removed Lines]",
          "5916:     if C: C.setcontext(ORIGINAL_CONTEXT[C])",
          "5917:     P.setcontext(ORIGINAL_CONTEXT[P])",
          "",
          "[Added Lines]",
          "5920:     if C: C.setcontext(ORIGINAL_CONTEXT[C].copy())",
          "5921:     P.setcontext(ORIGINAL_CONTEXT[P].copy())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e0777df1fd7145e2e74104534645aabb648eea3",
      "candidate_info": {
        "commit_hash": "8e0777df1fd7145e2e74104534645aabb648eea3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8e0777df1fd7145e2e74104534645aabb648eea3",
        "files": [
          "Lib/test/audit-tests.py",
          "Lib/test/test_audit.py",
          "Lib/test/test_winapi.py",
          "Misc/NEWS.d/next/Windows/2024-05-29-11-06-12.gh-issue-119690.8q6e1p.rst",
          "Modules/_winapi.c",
          "Modules/clinic/_winapi.c.h"
        ],
        "message": "gh-119690: Adds Unicode support for named pipes in _winapi (GH-119717)\n\n(cherry picked from commit 78d697b7d5ec2a6fa046b0e1c34e804f49e750b4)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/audit-tests.py||Lib/test/audit-tests.py",
          "Lib/test/test_audit.py||Lib/test/test_audit.py",
          "Lib/test/test_winapi.py||Lib/test/test_winapi.py",
          "Modules/_winapi.c||Modules/_winapi.c",
          "Modules/clinic/_winapi.c.h||Modules/clinic/_winapi.c.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/audit-tests.py||Lib/test/audit-tests.py": [
          "File: Lib/test/audit-tests.py -> Lib/test/audit-tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:     sys.monitoring.register_callback(1, 1, None)",
          "559: if __name__ == \"__main__\":",
          "560:     from test.support import suppress_msvcrt_asserts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559: def test_winapi_createnamedpipe(pipe_name):",
          "560:     import _winapi",
          "562:     def hook(event, args):",
          "563:         if event == \"_winapi.CreateNamedPipe\":",
          "564:             print(event, args)",
          "566:     sys.addaudithook(hook)",
          "567:     _winapi.CreateNamedPipe(pipe_name, _winapi.PIPE_ACCESS_DUPLEX, 8, 2, 0, 0, 0, 0)",
          "",
          "---------------"
        ],
        "Lib/test/test_audit.py||Lib/test/test_audit.py": [
          "File: Lib/test/test_audit.py -> Lib/test/test_audit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:         self.assertEqual(actual, expected)",
          "295: if __name__ == \"__main__\":",
          "296:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:     def test_winapi_createnamedpipe(self):",
          "295:         winapi = import_helper.import_module(\"_winapi\")",
          "297:         pipe_name = r\"\\\\.\\pipe\\LOCAL\\test_winapi_createnamed_pipe\"",
          "298:         returncode, events, stderr = self.run_python(\"test_winapi_createnamedpipe\", pipe_name)",
          "299:         if returncode:",
          "300:             self.fail(stderr)",
          "302:         if support.verbose:",
          "303:             print(*events, sep='\\n')",
          "304:         actual = [(ev[0], ev[2]) for ev in events]",
          "305:         expected = [(\"_winapi.CreateNamedPipe\", f\"({pipe_name!r}, 3, 8)\")]",
          "307:         self.assertEqual(actual, expected)",
          "",
          "---------------"
        ],
        "Lib/test/test_winapi.py||Lib/test/test_winapi.py": [
          "File: Lib/test/test_winapi.py -> Lib/test/test_winapi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import threading",
          "8: import time",
          "9: import unittest",
          "12: _winapi = import_helper.import_module('_winapi', required_on=['win'])",
          "",
          "[Removed Lines]",
          "10: from test.support import import_helper",
          "",
          "[Added Lines]",
          "10: from test.support import import_helper, os_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         # Should contain \"PROGRA~\" but we can't predict the number",
          "129:         self.assertIsNotNone(re.match(r\".\\:\\\\PROGRA~\\d\", actual.upper()), actual)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     def test_namedpipe(self):",
          "132:         pipe_name = rf\"\\\\.\\pipe\\LOCAL\\{os_helper.TESTFN}\"",
          "134:         # Pipe does not exist, so this raises",
          "135:         with self.assertRaises(FileNotFoundError):",
          "136:             _winapi.WaitNamedPipe(pipe_name, 0)",
          "138:         pipe = _winapi.CreateNamedPipe(",
          "139:             pipe_name,",
          "140:             _winapi.PIPE_ACCESS_DUPLEX,",
          "141:             8, # 8=PIPE_REJECT_REMOTE_CLIENTS",
          "142:             2, # two instances available",
          "143:             32, 32, 0, 0)",
          "144:         self.addCleanup(_winapi.CloseHandle, pipe)",
          "146:         # Pipe instance is available, so this passes",
          "147:         _winapi.WaitNamedPipe(pipe_name, 0)",
          "149:         with open(pipe_name, 'w+b') as pipe2:",
          "150:             # No instances available, so this times out",
          "151:             # (WinError 121 does not get mapped to TimeoutError)",
          "152:             with self.assertRaises(OSError):",
          "153:                 _winapi.WaitNamedPipe(pipe_name, 0)",
          "155:             _winapi.WriteFile(pipe, b'testdata')",
          "156:             self.assertEqual(b'testdata', pipe2.read(8))",
          "158:             self.assertEqual((b'', 0), _winapi.PeekNamedPipe(pipe, 8)[:2])",
          "159:             pipe2.write(b'testdata')",
          "160:             pipe2.flush()",
          "161:             self.assertEqual((b'testdata', 8), _winapi.PeekNamedPipe(pipe, 8)[:2])",
          "",
          "---------------"
        ],
        "Modules/_winapi.c||Modules/_winapi.c": [
          "File: Modules/_winapi.c -> Modules/_winapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: create_converter('BOOL', 'i') # F_BOOL used previously (always 'i')",
          "226: create_converter('DWORD', 'k') # F_DWORD is always \"k\" (which is much shorter)",
          "228: create_converter('UINT', 'I') # F_UINT used previously (always 'I')",
          "230: class LPCWSTR_converter(Py_UNICODE_converter):",
          "",
          "[Removed Lines]",
          "227: create_converter('LPCTSTR', 's')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530: {",
          "531:     HANDLE handle;",
          "534:                     file_name, desired_access, share_mode,",
          "535:                     creation_disposition, flags_and_attributes) < 0) {",
          "536:         return INVALID_HANDLE_VALUE;",
          "",
          "[Removed Lines]",
          "533:     if (PySys_Audit(\"_winapi.CreateFile\", \"uIIII\",",
          "",
          "[Added Lines]",
          "532:     if (PySys_Audit(\"_winapi.CreateFile\", \"ukkkk\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "778: _winapi.CreateNamedPipe -> HANDLE",
          "781:     open_mode: DWORD",
          "782:     pipe_mode: DWORD",
          "783:     max_instances: DWORD",
          "",
          "[Removed Lines]",
          "780:     name: LPCTSTR",
          "",
          "[Added Lines]",
          "779:     name: LPCWSTR",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791: static HANDLE",
          "793:                              DWORD pipe_mode, DWORD max_instances,",
          "794:                              DWORD out_buffer_size, DWORD in_buffer_size,",
          "795:                              DWORD default_timeout,",
          "796:                              LPSECURITY_ATTRIBUTES security_attributes)",
          "798: {",
          "799:     HANDLE handle;",
          "802:                     name, open_mode, pipe_mode) < 0) {",
          "803:         return INVALID_HANDLE_VALUE;",
          "804:     }",
          "806:     Py_BEGIN_ALLOW_THREADS",
          "811:     Py_END_ALLOW_THREADS",
          "813:     if (handle == INVALID_HANDLE_VALUE)",
          "",
          "[Removed Lines]",
          "792: _winapi_CreateNamedPipe_impl(PyObject *module, LPCTSTR name, DWORD open_mode,",
          "801:     if (PySys_Audit(\"_winapi.CreateNamedPipe\", \"uII\",",
          "807:     handle = CreateNamedPipe(name, open_mode, pipe_mode,",
          "808:                              max_instances, out_buffer_size,",
          "809:                              in_buffer_size, default_timeout,",
          "810:                              security_attributes);",
          "",
          "[Added Lines]",
          "791: _winapi_CreateNamedPipe_impl(PyObject *module, LPCWSTR name, DWORD open_mode,",
          "800:     if (PySys_Audit(\"_winapi.CreateNamedPipe\", \"ukk\",",
          "806:     handle = CreateNamedPipeW(name, open_mode, pipe_mode,",
          "807:                               max_instances, out_buffer_size,",
          "808:                               in_buffer_size, default_timeout,",
          "809:                               security_attributes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1790: {",
          "1791:     HANDLE handle;",
          "1794:         return INVALID_HANDLE_VALUE;",
          "1795:     }",
          "",
          "[Removed Lines]",
          "1793:     if (PySys_Audit(\"_winapi.OpenEventW\", \"Iu\", desired_access, name) < 0) {",
          "",
          "[Added Lines]",
          "1792:     if (PySys_Audit(\"_winapi.OpenEventW\", \"ku\", desired_access, name) < 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1821: {",
          "1822:     HANDLE handle;",
          "1825:         return INVALID_HANDLE_VALUE;",
          "1826:     }",
          "",
          "[Removed Lines]",
          "1824:     if (PySys_Audit(\"_winapi.OpenMutexW\", \"Iu\", desired_access, name) < 0) {",
          "",
          "[Added Lines]",
          "1823:     if (PySys_Audit(\"_winapi.OpenMutexW\", \"ku\", desired_access, name) < 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1882: {",
          "1883:     HANDLE handle;",
          "1886:                     process_id, desired_access) < 0) {",
          "1887:         return INVALID_HANDLE_VALUE;",
          "1888:     }",
          "",
          "[Removed Lines]",
          "1885:     if (PySys_Audit(\"_winapi.OpenProcess\", \"II\",",
          "",
          "[Added Lines]",
          "1884:     if (PySys_Audit(\"_winapi.OpenProcess\", \"kk\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2237: _winapi.WaitNamedPipe",
          "2240:     timeout: DWORD",
          "2241:     /",
          "2244: static PyObject *",
          "2247: {",
          "2248:     BOOL success;",
          "2250:     Py_BEGIN_ALLOW_THREADS",
          "2252:     Py_END_ALLOW_THREADS",
          "2254:     if (!success)",
          "",
          "[Removed Lines]",
          "2239:     name: LPCTSTR",
          "2245: _winapi_WaitNamedPipe_impl(PyObject *module, LPCTSTR name, DWORD timeout)",
          "2251:     success = WaitNamedPipe(name, timeout);",
          "",
          "[Added Lines]",
          "2238:     name: LPCWSTR",
          "2244: _winapi_WaitNamedPipe_impl(PyObject *module, LPCWSTR name, DWORD timeout)",
          "2250:     success = WaitNamedPipeW(name, timeout);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2917:     HRESULT hr;",
          "2918:     COPYFILE2_EXTENDED_PARAMETERS params = { sizeof(COPYFILE2_EXTENDED_PARAMETERS) };",
          "2921:                     existing_file_name, new_file_name, flags) < 0) {",
          "2922:         return NULL;",
          "2923:     }",
          "",
          "[Removed Lines]",
          "2920:     if (PySys_Audit(\"_winapi.CopyFile2\", \"uuI\",",
          "",
          "[Added Lines]",
          "2919:     if (PySys_Audit(\"_winapi.CopyFile2\", \"uuk\",",
          "",
          "---------------"
        ],
        "Modules/clinic/_winapi.c.h||Modules/clinic/_winapi.c.h": [
          "File: Modules/clinic/_winapi.c.h -> Modules/clinic/_winapi.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:     {\"CreateNamedPipe\", _PyCFunction_CAST(_winapi_CreateNamedPipe), METH_FASTCALL, _winapi_CreateNamedPipe__doc__},",
          "447: static HANDLE",
          "449:                              DWORD pipe_mode, DWORD max_instances,",
          "450:                              DWORD out_buffer_size, DWORD in_buffer_size,",
          "451:                              DWORD default_timeout,",
          "",
          "[Removed Lines]",
          "448: _winapi_CreateNamedPipe_impl(PyObject *module, LPCTSTR name, DWORD open_mode,",
          "",
          "[Added Lines]",
          "448: _winapi_CreateNamedPipe_impl(PyObject *module, LPCWSTR name, DWORD open_mode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455: _winapi_CreateNamedPipe(PyObject *module, PyObject *const *args, Py_ssize_t nargs)",
          "456: {",
          "457:     PyObject *return_value = NULL;",
          "459:     DWORD open_mode;",
          "460:     DWORD pipe_mode;",
          "461:     DWORD max_instances;",
          "",
          "[Removed Lines]",
          "458:     LPCTSTR name;",
          "",
          "[Added Lines]",
          "458:     LPCWSTR name = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465:     LPSECURITY_ATTRIBUTES security_attributes;",
          "466:     HANDLE _return_value;",
          "470:         goto exit;",
          "471:     }",
          "472:     _return_value = _winapi_CreateNamedPipe_impl(module, name, open_mode, pipe_mode, max_instances, out_buffer_size, in_buffer_size, default_timeout, security_attributes);",
          "",
          "[Removed Lines]",
          "468:     if (!_PyArg_ParseStack(args, nargs, \"skkkkkk\" F_POINTER \":CreateNamedPipe\",",
          "469:         &name, &open_mode, &pipe_mode, &max_instances, &out_buffer_size, &in_buffer_size, &default_timeout, &security_attributes)) {",
          "",
          "[Added Lines]",
          "468:     if (!_PyArg_ParseStack(args, nargs, \"O&kkkkkk\" F_POINTER \":CreateNamedPipe\",",
          "469:         _PyUnicode_WideCharString_Converter, &name, &open_mode, &pipe_mode, &max_instances, &out_buffer_size, &in_buffer_size, &default_timeout, &security_attributes)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "479:     return_value = HANDLE_TO_PYNUM(_return_value);",
          "481: exit:",
          "482:     return return_value;",
          "483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:     PyMem_Free((void *)name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1660:     {\"WaitNamedPipe\", _PyCFunction_CAST(_winapi_WaitNamedPipe), METH_FASTCALL, _winapi_WaitNamedPipe__doc__},",
          "1662: static PyObject *",
          "1665: static PyObject *",
          "1666: _winapi_WaitNamedPipe(PyObject *module, PyObject *const *args, Py_ssize_t nargs)",
          "1667: {",
          "1668:     PyObject *return_value = NULL;",
          "1670:     DWORD timeout;",
          "1674:         goto exit;",
          "1675:     }",
          "1676:     return_value = _winapi_WaitNamedPipe_impl(module, name, timeout);",
          "1678: exit:",
          "1679:     return return_value;",
          "1680: }",
          "",
          "[Removed Lines]",
          "1663: _winapi_WaitNamedPipe_impl(PyObject *module, LPCTSTR name, DWORD timeout);",
          "1669:     LPCTSTR name;",
          "1672:     if (!_PyArg_ParseStack(args, nargs, \"sk:WaitNamedPipe\",",
          "1673:         &name, &timeout)) {",
          "",
          "[Added Lines]",
          "1666: _winapi_WaitNamedPipe_impl(PyObject *module, LPCWSTR name, DWORD timeout);",
          "1672:     LPCWSTR name = NULL;",
          "1675:     if (!_PyArg_ParseStack(args, nargs, \"O&k:WaitNamedPipe\",",
          "1676:         _PyUnicode_WideCharString_Converter, &name, &timeout)) {",
          "1683:     PyMem_Free((void *)name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}