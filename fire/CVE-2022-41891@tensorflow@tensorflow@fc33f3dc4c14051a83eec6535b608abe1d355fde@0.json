{
  "cve_id": "CVE-2022-41891",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `tf.raw_ops.TensorListConcat` is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit fc33f3dc4c14051a83eec6535b608abe1d355fde. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "fc33f3dc4c14051a83eec6535b608abe1d355fde",
  "patch_info": {
    "commit_hash": "fc33f3dc4c14051a83eec6535b608abe1d355fde",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/fc33f3dc4c14051a83eec6535b608abe1d355fde",
    "files": [
      "tensorflow/core/kernels/list_kernels.h",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ],
    "message": "Fix tf.raw_ops.TensorListConcat vulnerability (segfault).\n\nCheck that the element_shape input is valid.\nAdd graph/eager unit tests.\n\nNote: This fix will have to be cherry picked in r2.10, r2.9, and r2.8.\nPiperOrigin-RevId: 477544091",
    "before_after_code_files": [
      "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
      "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
      "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:   void Compute(OpKernelContext* c) override {",
      "396:     PartialTensorShape element_shape_except_first_dim;",
      "397:     if (!element_shape_.unknown_rank()) {",
      "400:     }",
      "",
      "[Removed Lines]",
      "398:       element_shape_except_first_dim = PartialTensorShape(",
      "399:           gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));",
      "",
      "[Added Lines]",
      "398:       auto dim_sizes = element_shape_.dim_sizes();",
      "399:       OP_REQUIRES(c, !dim_sizes.empty(),",
      "400:                   errors::InvalidArgument(\"element_shape must not be empty\"));",
      "401:       element_shape_except_first_dim =",
      "402:           PartialTensorShape(gtl::ArraySlice<int64_t>(dim_sizes).subspan(1));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1514:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
      "1515:       self.evaluate(t)",
      "1517:   def testEmptyTensorListInvalidShape(self):",
      "1518:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "1519:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1517:   @test_util.run_in_graph_and_eager_modes",
      "1518:   def testConcatWithInvalidElementShape(self):",
      "1519:     l = list_ops.tensor_list_reserve(",
      "1520:         element_dtype=dtypes.float32, element_shape=[], num_elements=0)",
      "1521:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "1522:                                 r\"element_shape must not be empty\"):",
      "1523:       self.evaluate(gen_list_ops.tensor_list_concat(",
      "1524:           input_handle=l, element_dtype=dtypes.float32, element_shape=[]))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32d74717d9bf04d0a07958129d93fade1677b390",
      "candidate_info": {
        "commit_hash": "32d74717d9bf04d0a07958129d93fade1677b390",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/32d74717d9bf04d0a07958129d93fade1677b390",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.TensorListConcat vulnerability (segfault). (#57899)\n\nCheck that the element_shape input is valid.\nAdd graph/eager unit tests.\n\nNote: This fix will have to be cherry picked in r2.10, r2.9, and r2.8.\nPiperOrigin-RevId: 477544091",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   void Compute(OpKernelContext* c) override {",
          "396:     PartialTensorShape element_shape_except_first_dim;",
          "397:     if (!element_shape_.unknown_rank()) {",
          "400:     }",
          "",
          "[Removed Lines]",
          "398:       element_shape_except_first_dim = PartialTensorShape(",
          "399:           gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));",
          "",
          "[Added Lines]",
          "398:       auto dim_sizes = element_shape_.dim_sizes();",
          "399:       OP_REQUIRES(c, !dim_sizes.empty(),",
          "400:                   errors::InvalidArgument(\"element_shape must not be empty\"));",
          "401:       element_shape_except_first_dim =",
          "402:           PartialTensorShape(gtl::ArraySlice<int64_t>(dim_sizes).subspan(1));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1514:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1515:       self.evaluate(t)",
          "1517:   def testEmptyTensorListInvalidShape(self):",
          "1518:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1519:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517:   @test_util.run_in_graph_and_eager_modes",
          "1518:   def testConcatWithInvalidElementShape(self):",
          "1519:     l = list_ops.tensor_list_reserve(",
          "1520:         element_dtype=dtypes.float32, element_shape=[], num_elements=0)",
          "1521:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1522:                                 r\"element_shape must not be empty\"):",
          "1523:       self.evaluate(gen_list_ops.tensor_list_concat(",
          "1524:           input_handle=l, element_dtype=dtypes.float32, element_shape=[]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bed6864eb8fdc193e395821fee9ff1f7dfd73bbc",
      "candidate_info": {
        "commit_hash": "bed6864eb8fdc193e395821fee9ff1f7dfd73bbc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bed6864eb8fdc193e395821fee9ff1f7dfd73bbc",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.TensorListConcat vulnerability (segfault). (#57900)\n\nCheck that the element_shape input is valid.\nAdd graph/eager unit tests.\n\nNote: This fix will have to be cherry picked in r2.10, r2.9, and r2.8.\nPiperOrigin-RevId: 477544091",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:   void Compute(OpKernelContext* c) override {",
          "394:     PartialTensorShape element_shape_except_first_dim;",
          "395:     if (!element_shape_.unknown_rank()) {",
          "398:     }",
          "",
          "[Removed Lines]",
          "396:       element_shape_except_first_dim = PartialTensorShape(",
          "397:           gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));",
          "",
          "[Added Lines]",
          "396:       auto dim_sizes = element_shape_.dim_sizes();",
          "397:       OP_REQUIRES(c, !dim_sizes.empty(),",
          "398:                   errors::InvalidArgument(\"element_shape must not be empty\"));",
          "399:       element_shape_except_first_dim =",
          "400:           PartialTensorShape(gtl::ArraySlice<int64_t>(dim_sizes).subspan(1));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1514:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1515:       self.evaluate(t)",
          "1517:   def testEmptyTensorListInvalidShape(self):",
          "1518:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1519:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517:   @test_util.run_in_graph_and_eager_modes",
          "1518:   def testConcatWithInvalidElementShape(self):",
          "1519:     l = list_ops.tensor_list_reserve(",
          "1520:         element_dtype=dtypes.float32, element_shape=[], num_elements=0)",
          "1521:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1522:                                 r\"element_shape must not be empty\"):",
          "1523:       self.evaluate(gen_list_ops.tensor_list_concat(",
          "1524:           input_handle=l, element_dtype=dtypes.float32, element_shape=[]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7889a8e0da8e6ced697d1a240fb2458070d3047f",
      "candidate_info": {
        "commit_hash": "7889a8e0da8e6ced697d1a240fb2458070d3047f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7889a8e0da8e6ced697d1a240fb2458070d3047f",
        "files": [
          "tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.TensorListConcat vulnerability (segfault). (#57901)\n\nCheck that the element_shape input is valid.\nAdd graph/eager unit tests.\n\nNote: This fix will have to be cherry picked in r2.10, r2.9, and r2.8.\nPiperOrigin-RevId: 477544091",
        "before_after_code_files": [
          "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
          "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h",
            "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/list_kernels.h||tensorflow/core/kernels/list_kernels.h": [
          "File: tensorflow/core/kernels/list_kernels.h -> tensorflow/core/kernels/list_kernels.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:   void Compute(OpKernelContext* c) override {",
          "394:     PartialTensorShape element_shape_except_first_dim;",
          "395:     if (!element_shape_.unknown_rank()) {",
          "398:     }",
          "",
          "[Removed Lines]",
          "396:       element_shape_except_first_dim = PartialTensorShape(",
          "397:           gtl::ArraySlice<int64_t>(element_shape_.dim_sizes()).subspan(1));",
          "",
          "[Added Lines]",
          "396:       auto dim_sizes = element_shape_.dim_sizes();",
          "397:       OP_REQUIRES(c, !dim_sizes.empty(),",
          "398:                   errors::InvalidArgument(\"element_shape must not be empty\"));",
          "399:       element_shape_except_first_dim =",
          "400:           PartialTensorShape(gtl::ArraySlice<int64_t>(dim_sizes).subspan(1));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/list_ops_test.py||tensorflow/python/kernel_tests/data_structures/list_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/list_ops_test.py -> tensorflow/python/kernel_tests/data_structures/list_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1514:       t = list_ops.tensor_list_concat(l, element_dtype=dtypes.float32)",
          "1515:       self.evaluate(t)",
          "1517:   def testEmptyTensorListInvalidShape(self):",
          "1518:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1519:                                 r\"Shape must be at most rank 1 but is rank 2\"):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1517:   @test_util.run_in_graph_and_eager_modes",
          "1518:   def testConcatWithInvalidElementShape(self):",
          "1519:     l = list_ops.tensor_list_reserve(",
          "1520:         element_dtype=dtypes.float32, element_shape=[], num_elements=0)",
          "1521:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "1522:                                 r\"element_shape must not be empty\"):",
          "1523:       self.evaluate(gen_list_ops.tensor_list_concat(",
          "1524:           input_handle=l, element_dtype=dtypes.float32, element_shape=[]))",
          "",
          "---------------"
        ]
      }
    }
  ]
}