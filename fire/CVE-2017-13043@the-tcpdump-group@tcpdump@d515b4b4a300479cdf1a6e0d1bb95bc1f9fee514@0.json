{
  "cve_id": "CVE-2017-13043",
  "cve_desc": "The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:decode_multicast_vpn().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514",
  "patch_info": {
    "commit_hash": "d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514",
    "files": [
      "print-bgp.c",
      "tests/TESTLIST",
      "tests/bgp_mvpn_6_and_7.out",
      "tests/bgp_mvpn_6_and_7.pcap"
    ],
    "message": "CVE-2017-13043/BGP: fix decoding of MVPN route types 6 and 7\n\nRFC 6514 Section 4.6 defines the structure for Shared Tree Join (6) and\nSource Tree Join (7) multicast VPN route types. decode_multicast_vpn()\ndidn't implement the Source AS field of that structure properly, adjust\nthe offsets to put it right.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-bgp.c||print-bgp.c"
    ]
  },
  "patch_diff": {
    "print-bgp.c||print-bgp.c": [
      "File: print-bgp.c -> print-bgp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "967:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
      "969:             offset = strlen(buf);",
      "970:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
      "971:   bgp_vpn_rd_print(ndo, pptr),",
      "972:   as_printf(ndo, astostr, sizeof(astostr),",
      "973:   EXTRACT_32BITS(pptr + BGP_VPN_RD_LEN)));",
      "976:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
      "977:             break;",
      "",
      "[Removed Lines]",
      "968:             ND_TCHECK2(pptr[0], BGP_VPN_RD_LEN);",
      "974:             pptr += BGP_VPN_RD_LEN;",
      "",
      "[Added Lines]",
      "968:             ND_TCHECK2(pptr[0], BGP_VPN_RD_LEN + 4);",
      "974:             pptr += BGP_VPN_RD_LEN + 4;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a859e9f5ce9c94bee91cf65aac9d3d531f76f66",
      "candidate_info": {
        "commit_hash": "1a859e9f5ce9c94bee91cf65aac9d3d531f76f66",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/1a859e9f5ce9c94bee91cf65aac9d3d531f76f66",
        "files": [
          "print-bgp.c"
        ],
        "message": "Re-fix indentation.",
        "before_after_code_files": [
          "print-bgp.c||print-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"l2vpn.h\"",
          "50: struct bgp {",
          "54: };",
          "61: #define BGP_ROUTE_REFRESH       5",
          "63: static const struct tok bgp_msg_values[] = {",
          "",
          "[Removed Lines]",
          "51:  nd_byte     bgp_marker[16];",
          "52:  nd_uint16_t bgp_len;",
          "53:  nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN  1",
          "58: #define BGP_UPDATE  2",
          "59: #define BGP_NOTIFICATION 3",
          "60: #define BGP_KEEPALIVE  4",
          "",
          "[Added Lines]",
          "51:     nd_byte     bgp_marker[16];",
          "52:     nd_uint16_t bgp_len;",
          "53:     nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN                1",
          "58: #define BGP_UPDATE              2",
          "59: #define BGP_NOTIFICATION        3",
          "60: #define BGP_KEEPALIVE           4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: };",
          "72: struct bgp_open {",
          "82: };",
          "85: struct bgp_opt {",
          "89: };",
          "93: struct bgp_notification {",
          "99: };",
          "102: struct bgp_route_refresh {",
          "109: };",
          "110: #define BGP_ROUTE_REFRESH_SIZE          23",
          "112: #define bgp_attr_lenlen(flags, p) \\",
          "114: #define bgp_attr_len(flags, p) \\",
          "",
          "[Removed Lines]",
          "73:  nd_byte     bgpo_marker[16];",
          "74:  nd_uint16_t bgpo_len;",
          "75:  nd_uint8_t  bgpo_type;",
          "76:  nd_uint8_t  bgpo_version;",
          "77:  nd_uint16_t bgpo_myas;",
          "78:  nd_uint16_t bgpo_holdtime;",
          "79:  nd_uint32_t bgpo_id;",
          "80:  nd_uint8_t  bgpo_optlen;",
          "86:  nd_uint8_t bgpopt_type;",
          "87:  nd_uint8_t bgpopt_len;",
          "94:  nd_byte     bgpn_marker[16];",
          "95:  nd_uint16_t bgpn_len;",
          "96:  nd_uint8_t  bgpn_type;",
          "97:  nd_uint8_t  bgpn_major;",
          "98:  nd_uint8_t  bgpn_minor;",
          "103:  nd_byte     bgp_marker[16];",
          "104:  nd_uint16_t len;",
          "106:  nd_uint16_t afi;",
          "107:  nd_uint8_t  res;",
          "108:  nd_uint8_t  safi;",
          "113:  (((flags) & 0x10) ? 2 : 1)",
          "115:  (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN   1",
          "118: #define BGPTYPE_AS_PATH   2",
          "119: #define BGPTYPE_NEXT_HOP  3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC  4",
          "121: #define BGPTYPE_LOCAL_PREF  5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE 6",
          "123: #define BGPTYPE_AGGREGATOR  7",
          "",
          "[Added Lines]",
          "73:     nd_byte     bgpo_marker[16];",
          "74:     nd_uint16_t bgpo_len;",
          "75:     nd_uint8_t  bgpo_type;",
          "76:     nd_uint8_t  bgpo_version;",
          "77:     nd_uint16_t bgpo_myas;",
          "78:     nd_uint16_t bgpo_holdtime;",
          "79:     nd_uint32_t bgpo_id;",
          "80:     nd_uint8_t  bgpo_optlen;",
          "86:     nd_uint8_t bgpopt_type;",
          "87:     nd_uint8_t bgpopt_len;",
          "94:     nd_byte     bgpn_marker[16];",
          "95:     nd_uint16_t bgpn_len;",
          "96:     nd_uint8_t  bgpn_type;",
          "97:     nd_uint8_t  bgpn_major;",
          "98:     nd_uint8_t  bgpn_minor;",
          "103:     nd_byte     bgp_marker[16];",
          "104:     nd_uint16_t len;",
          "106:     nd_uint16_t afi;",
          "107:     nd_uint8_t  res;",
          "108:     nd_uint8_t  safi;",
          "113:     (((flags) & 0x10) ? 2 : 1)",
          "115:     (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN                   1",
          "118: #define BGPTYPE_AS_PATH                  2",
          "119: #define BGPTYPE_NEXT_HOP                 3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC          4",
          "121: #define BGPTYPE_LOCAL_PREF               5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE         6",
          "123: #define BGPTYPE_AGGREGATOR               7",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404: };",
          "",
          "[Removed Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT   0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT   0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED 0xffffff03",
          "",
          "[Added Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT              0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT              0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED    0xffffff03",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444: #define BGP_EXT_COM_EIGRP_EXT_REMPROTO_REMMETRIC 0x8805",
          "446: static const struct tok bgp_extd_comm_flag_values[] = {",
          "",
          "[Removed Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN   0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY  0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW 0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU  0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID  0x8804",
          "",
          "[Added Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN                    0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY        0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW       0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU        0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID        0x8804",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "502: static const struct tok bgp_add_path_recvsend[] = {",
          "507: };",
          "509: static char astostr[20];",
          "",
          "[Removed Lines]",
          "503:   { 1, \"Receive\" },",
          "504:   { 2, \"Send\" },",
          "505:   { 3, \"Both\" },",
          "506:   { 0, NULL },",
          "",
          "[Added Lines]",
          "503:     { 1, \"Receive\" },",
          "504:     { 2, \"Send\" },",
          "505:     { 3, \"Both\" },",
          "506:     { 0, NULL },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521: as_printf(netdissect_options *ndo,",
          "522:           char *str, int size, u_int asnum)",
          "523: {",
          "530: }",
          "532: #define ITEMCHECK(minlen) if (itemlen < minlen) goto badtlv;",
          "",
          "[Removed Lines]",
          "524:  if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:   snprintf(str, size, \"%u\", asnum);",
          "526:  } else {",
          "527:   snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:  }",
          "529:  return str;",
          "",
          "[Added Lines]",
          "524:     if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:         snprintf(str, size, \"%u\", asnum);",
          "526:     } else {",
          "527:         snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:     }",
          "529:     return str;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "535: decode_prefix4(netdissect_options *ndo,",
          "536:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "537: {",
          "560: trunc:",
          "563: badtlv:",
          "565: }",
          "567: static int",
          "568: decode_labeled_prefix4(netdissect_options *ndo,",
          "569:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "570: {",
          "614: trunc:",
          "617: badtlv:",
          "619: }",
          "",
          "[Removed Lines]",
          "538:  struct in_addr addr;",
          "539:  u_int plen, plenbytes;",
          "541:  ND_TCHECK_1(pptr);",
          "542:  ITEMCHECK(1);",
          "543:  plen = EXTRACT_U_1(pptr);",
          "544:  if (32 < plen)",
          "545:   return -1;",
          "546:  itemlen -= 1;",
          "548:  memset(&addr, 0, sizeof(addr));",
          "549:  plenbytes = (plen + 7) / 8;",
          "550:  ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:  ITEMCHECK(plenbytes);",
          "552:  memcpy(&addr, pptr + 1, plenbytes);",
          "553:  if (plen % 8) {",
          "554:   ((u_char *)&addr)[plenbytes - 1] &=",
          "555:    ((0xff00 >> (plen % 8)) & 0xff);",
          "556:  }",
          "557:  snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "558:  return 1 + plenbytes;",
          "561:  return -2;",
          "564:  return -3;",
          "571:  struct in_addr addr;",
          "572:  u_int plen, plenbytes;",
          "575:  ND_TCHECK_4(pptr);",
          "576:  ITEMCHECK(4);",
          "580:            the label length (actually the label + COS bits)",
          "581:            is added to the prefix length;",
          "582:            we also do only read out just one label -",
          "583:            there is no real application for advertisement of",
          "584:            stacked labels in a single BGP message",
          "587:  if (24 > plen)",
          "588:   return -1;",
          "592:  if (32 < plen)",
          "593:   return -1;",
          "594:  itemlen -= 4;",
          "596:  memset(&addr, 0, sizeof(addr));",
          "597:  plenbytes = (plen + 7) / 8;",
          "598:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "599:  ITEMCHECK(plenbytes);",
          "600:  memcpy(&addr, pptr + 4, plenbytes);",
          "601:  if (plen % 8) {",
          "602:   ((u_char *)&addr)[plenbytes - 1] &=",
          "603:    ((0xff00 >> (plen % 8)) & 0xff);",
          "604:  }",
          "606:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "607:                  ipaddr_string(ndo, &addr),",
          "608:                  plen,",
          "609:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "610:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "612:  return 4 + plenbytes;",
          "615:  return -2;",
          "618:  return -3;",
          "",
          "[Added Lines]",
          "538:     struct in_addr addr;",
          "539:     u_int plen, plenbytes;",
          "541:     ND_TCHECK_1(pptr);",
          "542:     ITEMCHECK(1);",
          "543:     plen = EXTRACT_U_1(pptr);",
          "544:     if (32 < plen)",
          "545:         return -1;",
          "546:     itemlen -= 1;",
          "548:     memset(&addr, 0, sizeof(addr));",
          "549:     plenbytes = (plen + 7) / 8;",
          "550:     ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:     ITEMCHECK(plenbytes);",
          "552:     memcpy(&addr, pptr + 1, plenbytes);",
          "553:     if (plen % 8) {",
          "554:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "555:     }",
          "556:     snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "557:     return 1 + plenbytes;",
          "560:     return -2;",
          "563:     return -3;",
          "570:     struct in_addr addr;",
          "571:     u_int plen, plenbytes;",
          "574:     ND_TCHECK_4(pptr);",
          "575:     ITEMCHECK(4);",
          "579:        the label length (actually the label + COS bits)",
          "580:        is added to the prefix length;",
          "581:        we also do only read out just one label -",
          "582:        there is no real application for advertisement of",
          "583:        stacked labels in a single BGP message",
          "586:     if (24 > plen)",
          "587:         return -1;",
          "591:     if (32 < plen)",
          "592:         return -1;",
          "593:     itemlen -= 4;",
          "595:     memset(&addr, 0, sizeof(addr));",
          "596:     plenbytes = (plen + 7) / 8;",
          "597:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "598:     ITEMCHECK(plenbytes);",
          "599:     memcpy(&addr, pptr + 4, plenbytes);",
          "600:     if (plen % 8) {",
          "601:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "602:     }",
          "604:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "605:              ipaddr_string(ndo, &addr),",
          "606:              plen,",
          "607:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "608:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "610:     return 4 + plenbytes;",
          "613:     return -2;",
          "616:     return -3;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "690:     offset = strlen(buf);",
          "691:     if (addr_length) {",
          "692:         snprintf(buf + offset, buflen - offset, \", Source %s\",",
          "694:         pptr += (addr_length >> 3);",
          "695:     }",
          "",
          "[Removed Lines]",
          "693:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "691:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "705:     offset = strlen(buf);",
          "706:     if (addr_length) {",
          "707:         snprintf(buf + offset, buflen - offset, \", Group %s\",",
          "709:         pptr += (addr_length >> 3);",
          "710:     }",
          "",
          "[Removed Lines]",
          "708:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "706:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "740:     case 1:",
          "741:         snprintf(pos, sizeof(rd) - (pos - rd), \"%u.%u.%u.%u:%u\",",
          "745:         break;",
          "748:     case 2:",
          "754:         break;",
          "755:     default:",
          "756:         snprintf(pos, sizeof(rd) - (pos - rd), \"unknown RD format\");",
          "",
          "[Removed Lines]",
          "742:             EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "743:             EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "744:             EXTRACT_BE_U_2(pptr + 6));",
          "749:  snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "750:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "751:      EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "752:      EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "753:      EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "[Added Lines]",
          "740:                  EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "741:                  EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "742:                  EXTRACT_BE_U_2(pptr + 6));",
          "747:         snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "748:                  as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "749:                  EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "750:                  EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "751:                  EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "765: decode_rt_routing_info(netdissect_options *ndo,",
          "766:                        const u_char *pptr, char *buf, u_int buflen)",
          "767: {",
          "816: trunc:",
          "818: }",
          "820: static int",
          "821: decode_labeled_vpn_prefix4(netdissect_options *ndo,",
          "822:                            const u_char *pptr, char *buf, u_int buflen)",
          "823: {",
          "855: trunc:",
          "857: }",
          "",
          "[Removed Lines]",
          "768:  uint8_t route_target[8];",
          "769:  u_int plen;",
          "773:  ND_TCHECK_1(pptr);",
          "780:  if (0 == plen) {",
          "782:   snprintf(buf, buflen, \"default route target\");",
          "783:   return 1;",
          "784:  }",
          "786:  if (32 > plen)",
          "787:   return -1;",
          "790:  ND_TCHECK_4(pptr + 1);",
          "791:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "795:  if (64 < plen)",
          "796:   return -1;",
          "802:  memset(&route_target, 0, sizeof(route_target));",
          "803:  ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "804:  memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "806:  if (plen % 8) {",
          "807:   ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "808:    ((0xff00 >> (plen % 8)) & 0xff);",
          "809:  }",
          "810:  snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "811:      asbuf,",
          "812:      bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "814:  return 5 + (plen + 7) / 8;",
          "817:  return -2;",
          "824:  struct in_addr addr;",
          "825:  u_int plen;",
          "827:  ND_TCHECK_1(pptr);",
          "830:  if ((24+64) > plen)",
          "831:   return -1;",
          "835:  if (32 < plen)",
          "836:   return -1;",
          "838:  memset(&addr, 0, sizeof(addr));",
          "839:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "840:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "841:  if (plen % 8) {",
          "842:   ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "843:    ((0xff00 >> (plen % 8)) & 0xff);",
          "844:  }",
          "846:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "847:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "848:                  ipaddr_string(ndo, &addr),",
          "849:                  plen,",
          "850:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "851:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "853:  return 12 + (plen + 7) / 8;",
          "856:  return -2;",
          "",
          "[Added Lines]",
          "766:     uint8_t route_target[8];",
          "767:     u_int plen;",
          "771:     ND_TCHECK_1(pptr);",
          "778:     if (0 == plen) {",
          "780:         snprintf(buf, buflen, \"default route target\");",
          "781:         return 1;",
          "782:     }",
          "784:     if (32 > plen)",
          "785:         return -1;",
          "788:     ND_TCHECK_4(pptr + 1);",
          "789:     as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "793:     if (64 < plen)",
          "794:         return -1;",
          "800:     memset(&route_target, 0, sizeof(route_target));",
          "801:     ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "802:     memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "804:     if (plen % 8) {",
          "805:         ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "806:             ((0xff00 >> (plen % 8)) & 0xff);",
          "807:     }",
          "808:     snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "809:              asbuf,",
          "810:              bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "812:     return 5 + (plen + 7) / 8;",
          "815:     return -2;",
          "822:     struct in_addr addr;",
          "823:     u_int plen;",
          "825:     ND_TCHECK_1(pptr);",
          "828:     if ((24+64) > plen)",
          "829:         return -1;",
          "833:     if (32 < plen)",
          "834:         return -1;",
          "836:     memset(&addr, 0, sizeof(addr));",
          "837:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "838:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "839:     if (plen % 8) {",
          "840:         ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "841:             ((0xff00 >> (plen % 8)) & 0xff);",
          "842:     }",
          "844:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "845:              bgp_vpn_rd_print(ndo, pptr+4),",
          "846:              ipaddr_string(ndo, &addr),",
          "847:              plen,",
          "848:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "849:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "851:     return 12 + (plen + 7) / 8;",
          "854:     return -2;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "871: static int",
          "872: decode_mdt_vpn_nlri(netdissect_options *ndo,",
          "874: {",
          "876:     const u_char *rd;",
          "877:     const u_char *vpn_ip;",
          "",
          "[Removed Lines]",
          "873:                     const u_char *pptr, char *buf, u_int buflen)",
          "",
          "[Added Lines]",
          "871:             const u_char *pptr, char *buf, u_int buflen)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "882:     if (EXTRACT_U_1(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "884:     pptr++;",
          "887:     ND_TCHECK_8(pptr);",
          "888:     rd = pptr;",
          "892:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "893:     vpn_ip = pptr;",
          "897:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "899:     snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "902:     return MDT_VPN_NLRI_LEN + 1;",
          "904:  trunc:",
          "907: }",
          "909: #define BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI   1",
          "",
          "[Removed Lines]",
          "883:  return -1;",
          "889:     pptr+=8;",
          "894:     pptr+=sizeof(struct in_addr);",
          "900:       bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "906: return -2;",
          "",
          "[Added Lines]",
          "880:         return -1;",
          "886:     pptr += 8;",
          "891:     pptr += sizeof(struct in_addr);",
          "897:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "902:     return -2;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "928: static int",
          "929: decode_multicast_vpn(netdissect_options *ndo,",
          "931: {",
          "1013: trunc:",
          "1015: }",
          "",
          "[Removed Lines]",
          "930:                      const u_char *pptr, char *buf, u_int buflen)",
          "932:         uint8_t route_type, route_length, addr_length, sg_length;",
          "933:         u_int offset;",
          "935:  ND_TCHECK_2(pptr);",
          "936:         route_type = EXTRACT_U_1(pptr);",
          "937:         pptr++;",
          "938:         route_length = EXTRACT_U_1(pptr);",
          "939:         pptr++;",
          "941:         snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "942:                  tok2str(bgp_multicast_vpn_route_type_values,",
          "943:                          \"Unknown\", route_type),",
          "944:                  route_type, route_length);",
          "946:         switch(route_type) {",
          "947:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "948:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "949:             offset = strlen(buf);",
          "950:             snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "951:                      bgp_vpn_rd_print(ndo, pptr),",
          "952:                      bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "953:                                       (route_length - BGP_VPN_RD_LEN) << 3));",
          "954:             break;",
          "955:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "956:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "957:             offset = strlen(buf);",
          "958:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "959:   bgp_vpn_rd_print(ndo, pptr),",
          "960:   as_printf(ndo, astostr, sizeof(astostr),",
          "961:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "962:             break;",
          "964:         case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "965:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "966:             offset = strlen(buf);",
          "967:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "968:                      bgp_vpn_rd_print(ndo, pptr));",
          "969:             pptr += BGP_VPN_RD_LEN;",
          "971:             sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "972:             addr_length =  route_length - sg_length;",
          "974:             ND_TCHECK_LEN(pptr, addr_length);",
          "975:             offset = strlen(buf);",
          "976:             snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "977:                      bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "978:             break;",
          "980:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "981:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "982:             offset = strlen(buf);",
          "983:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "984:                      bgp_vpn_rd_print(ndo, pptr));",
          "985:             pptr += BGP_VPN_RD_LEN;",
          "987:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "988:             break;",
          "991:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "992:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "993:             offset = strlen(buf);",
          "994:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "995:   bgp_vpn_rd_print(ndo, pptr),",
          "996:   as_printf(ndo, astostr, sizeof(astostr),",
          "997:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "998:             pptr += BGP_VPN_RD_LEN + 4;",
          "1000:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "1001:             break;",
          "1006:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1007:         default:",
          "1008:             break;",
          "1009:         }",
          "1011:         return route_length + 2;",
          "1014:  return -2;",
          "",
          "[Added Lines]",
          "926:              const u_char *pptr, char *buf, u_int buflen)",
          "928:     uint8_t route_type, route_length, addr_length, sg_length;",
          "929:     u_int offset;",
          "931:     ND_TCHECK_2(pptr);",
          "932:     route_type = EXTRACT_U_1(pptr);",
          "933:     pptr++;",
          "934:     route_length = EXTRACT_U_1(pptr);",
          "935:     pptr++;",
          "937:     snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "938:          tok2str(bgp_multicast_vpn_route_type_values,",
          "939:                  \"Unknown\", route_type),",
          "940:          route_type, route_length);",
          "942:     switch(route_type) {",
          "943:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "944:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "945:         offset = strlen(buf);",
          "946:         snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "947:                  bgp_vpn_rd_print(ndo, pptr),",
          "948:                  bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "949:                                   (route_length - BGP_VPN_RD_LEN) << 3));",
          "950:         break;",
          "951:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "952:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "953:         offset = strlen(buf);",
          "954:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "955:         bgp_vpn_rd_print(ndo, pptr),",
          "956:         as_printf(ndo, astostr, sizeof(astostr),",
          "957:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "958:         break;",
          "960:     case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "961:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "962:         offset = strlen(buf);",
          "963:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "964:                  bgp_vpn_rd_print(ndo, pptr));",
          "965:         pptr += BGP_VPN_RD_LEN;",
          "967:         sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "968:         addr_length =  route_length - sg_length;",
          "970:         ND_TCHECK_LEN(pptr, addr_length);",
          "971:         offset = strlen(buf);",
          "972:         snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "973:                  bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "974:         break;",
          "976:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "977:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "978:         offset = strlen(buf);",
          "979:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "980:                  bgp_vpn_rd_print(ndo, pptr));",
          "981:         pptr += BGP_VPN_RD_LEN;",
          "983:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "984:         break;",
          "987:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "988:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "989:         offset = strlen(buf);",
          "990:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "991:         bgp_vpn_rd_print(ndo, pptr),",
          "992:         as_printf(ndo, astostr, sizeof(astostr),",
          "993:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "994:         pptr += BGP_VPN_RD_LEN + 4;",
          "996:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "997:         break;",
          "1002:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1003:     default:",
          "1004:         break;",
          "1005:     }",
          "1007:     return route_length + 2;",
          "1010:     return -2;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1027: #define UPDATE_BUF_BUFLEN(buf, buflen, stringlen) \\",
          "1028:     if (stringlen<0) \\",
          "1030:     else if ((u_int)stringlen>buflen) \\",
          "1031:         buflen=0; \\",
          "1032:     else { \\",
          "1033:         buflen-=stringlen; \\",
          "1035:     }",
          "1037: static int",
          "1038: decode_labeled_vpn_l2(netdissect_options *ndo,",
          "1040: {",
          "1126:         }",
          "1128: trunc:",
          "1130: }",
          "1132: int",
          "1133: decode_prefix6(netdissect_options *ndo,",
          "1134:                const u_char *pd, u_int itemlen, char *buf, u_int buflen)",
          "1135: {",
          "1158: trunc:",
          "1161: badtlv:",
          "1163: }",
          "1165: static int",
          "1166: decode_labeled_prefix6(netdissect_options *ndo,",
          "1168: {",
          "1203: trunc:",
          "1206: badtlv:",
          "1208: }",
          "1210: static int",
          "1211: decode_labeled_vpn_prefix6(netdissect_options *ndo,",
          "1212:                            const u_char *pptr, char *buf, u_int buflen)",
          "1213: {",
          "1245: trunc:",
          "1247: }",
          "1249: static int",
          "1250: decode_clnp_prefix(netdissect_options *ndo,",
          "1251:                    const u_char *pptr, char *buf, u_int buflen)",
          "1252: {",
          "1275: trunc:",
          "1277: }",
          "1279: static int",
          "1280: decode_labeled_vpn_clnp_prefix(netdissect_options *ndo,",
          "1282: {",
          "1314: trunc:",
          "1316: }",
          "",
          "[Removed Lines]",
          "1029:         buflen=0; \\",
          "1034:  buf+=stringlen; \\",
          "1039:                       const u_char *pptr, char *buf, u_int buflen)",
          "1041:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1043:  ND_TCHECK_2(pptr);",
          "1044:         plen=EXTRACT_BE_U_2(pptr);",
          "1045:         tlen=plen;",
          "1046:         pptr+=2;",
          "1051:         if (plen==12) {",
          "1053:      ND_TCHECK_LEN(pptr, 12);",
          "1054:      buf[0]='\\0';",
          "1055:      stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1056:           bgp_vpn_rd_print(ndo, pptr),",
          "1057:           ipaddr_string(ndo, pptr+8)",
          "1058:           );",
          "1059:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1060:      pptr+=12;",
          "1061:      tlen-=12;",
          "1062:      return plen;",
          "1063:         } else if (plen>17) {",
          "1067:      ND_TCHECK_LEN(pptr, 15);",
          "1068:      buf[0]='\\0';",
          "1069:      stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1070:           bgp_vpn_rd_print(ndo, pptr),",
          "1071:           EXTRACT_BE_U_2(pptr + 8),",
          "1072:           EXTRACT_BE_U_2(pptr + 10),",
          "1074:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1075:      pptr+=15;",
          "1076:      tlen-=15;",
          "1079:      while (tlen>0) {",
          "1080:   if (tlen < 3)",
          "1081:       return -1;",
          "1082:   ND_TCHECK_3(pptr);",
          "1083:   tlv_type=EXTRACT_U_1(pptr);",
          "1084:   pptr++;",
          "1085:   tlv_len=EXTRACT_BE_U_2(pptr);",
          "1086:   ttlv_len=tlv_len;",
          "1087:   pptr+=2;",
          "1089:   switch(tlv_type) {",
          "1090:   case 1:",
          "1091:       if (buflen!=0) {",
          "1092:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1093:         tlv_type,",
          "1094:         tlv_len);",
          "1095:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1096:       }",
          "1098:       while (ttlv_len>0) {",
          "1099:    ND_TCHECK_1(pptr);",
          "1100:    if (buflen!=0) {",
          "1101:        stringlen=snprintf(buf,buflen, \"%02x\",",
          "1102:                                                EXTRACT_U_1(pptr));",
          "1103:        pptr++;",
          "1104:        UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1105:    }",
          "1106:    ttlv_len--;",
          "1107:       }",
          "1108:       break;",
          "1109:   default:",
          "1110:       if (buflen!=0) {",
          "1111:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1112:         tlv_type,",
          "1113:         tlv_len);",
          "1114:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1115:       }",
          "1116:       break;",
          "1117:   }",
          "1119:      }",
          "1120:      return plen+2;",
          "1122:         } else {",
          "1125:             goto trunc;",
          "1129:         return -2;",
          "1136:  struct in6_addr addr;",
          "1137:  u_int plen, plenbytes;",
          "1139:  ND_TCHECK_1(pd);",
          "1140:  ITEMCHECK(1);",
          "1141:  plen = EXTRACT_U_1(pd);",
          "1142:  if (128 < plen)",
          "1143:   return -1;",
          "1144:  itemlen -= 1;",
          "1146:  memset(&addr, 0, sizeof(addr));",
          "1147:  plenbytes = (plen + 7) / 8;",
          "1148:  ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1149:  ITEMCHECK(plenbytes);",
          "1150:  memcpy(&addr, pd + 1, plenbytes);",
          "1151:  if (plen % 8) {",
          "1152:   addr.s6_addr[plenbytes - 1] &=",
          "1153:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1154:  }",
          "1155:  snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1156:  return 1 + plenbytes;",
          "1159:  return -2;",
          "1162:  return -3;",
          "1167:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1169:  struct in6_addr addr;",
          "1170:  u_int plen, plenbytes;",
          "1173:  ND_TCHECK_4(pptr);",
          "1174:  ITEMCHECK(4);",
          "1177:  if (24 > plen)",
          "1178:   return -1;",
          "1182:  if (128 < plen)",
          "1183:   return -1;",
          "1184:  itemlen -= 4;",
          "1186:  memset(&addr, 0, sizeof(addr));",
          "1187:  plenbytes = (plen + 7) / 8;",
          "1188:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1189:  memcpy(&addr, pptr + 4, plenbytes);",
          "1190:  if (plen % 8) {",
          "1191:   addr.s6_addr[plenbytes - 1] &=",
          "1192:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1193:  }",
          "1195:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1196:                  ip6addr_string(ndo, &addr),",
          "1197:                  plen,",
          "1198:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1199:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1201:  return 4 + plenbytes;",
          "1204:  return -2;",
          "1207:  return -3;",
          "1214:  struct in6_addr addr;",
          "1215:  u_int plen;",
          "1217:  ND_TCHECK_1(pptr);",
          "1220:  if ((24+64) > plen)",
          "1221:   return -1;",
          "1225:  if (128 < plen)",
          "1226:   return -1;",
          "1228:  memset(&addr, 0, sizeof(addr));",
          "1229:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1230:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1231:  if (plen % 8) {",
          "1232:   addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1233:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1234:  }",
          "1236:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1237:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1238:                  ip6addr_string(ndo, &addr),",
          "1239:                  plen,",
          "1240:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1241:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1243:  return 12 + (plen + 7) / 8;",
          "1246:  return -2;",
          "1253:         uint8_t addr[19];",
          "1254:  u_int plen;",
          "1256:  ND_TCHECK_1(pptr);",
          "1259:  if (152 < plen)",
          "1260:   return -1;",
          "1262:  memset(&addr, 0, sizeof(addr));",
          "1263:  ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1264:  memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1265:  if (plen % 8) {",
          "1266:   addr[(plen + 7) / 8 - 1] &=",
          "1267:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1268:  }",
          "1269:  snprintf(buf, buflen, \"%s/%d\",",
          "1270:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1271:                  plen);",
          "1273:  return 1 + (plen + 7) / 8;",
          "1276:  return -2;",
          "1281:                                const u_char *pptr, char *buf, u_int buflen)",
          "1283:         uint8_t addr[19];",
          "1284:  u_int plen;",
          "1286:  ND_TCHECK_1(pptr);",
          "1289:  if ((24+64) > plen)",
          "1290:   return -1;",
          "1294:  if (152 < plen)",
          "1295:   return -1;",
          "1297:  memset(&addr, 0, sizeof(addr));",
          "1298:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1299:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1300:  if (plen % 8) {",
          "1301:   addr[(plen + 7) / 8 - 1] &=",
          "1302:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1303:  }",
          "1305:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1306:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1307:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1308:                  plen,",
          "1309:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1310:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1312:  return 12 + (plen + 7) / 8;",
          "1315:  return -2;",
          "",
          "[Added Lines]",
          "1025:         buflen=0; \\",
          "1030:         buf+=stringlen; \\",
          "1035:               const u_char *pptr, char *buf, u_int buflen)",
          "1037:     int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1039:     ND_TCHECK_2(pptr);",
          "1040:     plen=EXTRACT_BE_U_2(pptr);",
          "1041:     tlen=plen;",
          "1042:     pptr += 2;",
          "1047:     if (plen==12) {",
          "1049:         ND_TCHECK_LEN(pptr, 12);",
          "1050:         buf[0]='\\0';",
          "1051:         stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1052:                            bgp_vpn_rd_print(ndo, pptr),",
          "1053:                            ipaddr_string(ndo, pptr+8)",
          "1054:                    );",
          "1055:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1056:         pptr+=12;",
          "1057:         tlen-=12;",
          "1058:         return plen;",
          "1059:     } else if (plen>17) {",
          "1063:         ND_TCHECK_LEN(pptr, 15);",
          "1064:         buf[0]='\\0';",
          "1065:         stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1066:                            bgp_vpn_rd_print(ndo, pptr),",
          "1067:                            EXTRACT_BE_U_2(pptr + 8),",
          "1068:                            EXTRACT_BE_U_2(pptr + 10),",
          "1070:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1071:         pptr+=15;",
          "1072:         tlen-=15;",
          "1075:         while (tlen>0) {",
          "1076:             if (tlen < 3)",
          "1077:                 return -1;",
          "1078:             ND_TCHECK_3(pptr);",
          "1079:             tlv_type=EXTRACT_U_1(pptr);",
          "1080:             pptr++;",
          "1081:             tlv_len=EXTRACT_BE_U_2(pptr);",
          "1082:             ttlv_len=tlv_len;",
          "1083:             pptr+=2;",
          "1085:             switch(tlv_type) {",
          "1086:             case 1:",
          "1087:                 if (buflen!=0) {",
          "1088:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1089:                                        tlv_type,",
          "1090:                                        tlv_len);",
          "1091:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1092:                 }",
          "1094:                 while (ttlv_len>0) {",
          "1095:                     ND_TCHECK_1(pptr);",
          "1096:                     if (buflen!=0) {",
          "1097:                         stringlen=snprintf(buf,buflen, \"%02x\",",
          "1098:                                            EXTRACT_U_1(pptr));",
          "1099:                         pptr++;",
          "1100:                         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1101:                     }",
          "1102:                     ttlv_len--;",
          "1103:                 }",
          "1104:                 break;",
          "1105:             default:",
          "1106:                 if (buflen!=0) {",
          "1107:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1108:                                        tlv_type,",
          "1109:                                        tlv_len);",
          "1110:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1111:                 }",
          "1112:                 break;",
          "1113:             }",
          "1116:         return plen+2;",
          "1118:     } else {",
          "1121:         goto trunc;",
          "1122:     }",
          "1125:     return -2;",
          "1132:     struct in6_addr addr;",
          "1133:     u_int plen, plenbytes;",
          "1135:     ND_TCHECK_1(pd);",
          "1136:     ITEMCHECK(1);",
          "1137:     plen = EXTRACT_U_1(pd);",
          "1138:     if (128 < plen)",
          "1139:         return -1;",
          "1140:     itemlen -= 1;",
          "1142:     memset(&addr, 0, sizeof(addr));",
          "1143:     plenbytes = (plen + 7) / 8;",
          "1144:     ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1145:     ITEMCHECK(plenbytes);",
          "1146:     memcpy(&addr, pd + 1, plenbytes);",
          "1147:     if (plen % 8) {",
          "1148:         addr.s6_addr[plenbytes - 1] &=",
          "1149:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1150:     }",
          "1151:     snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1152:     return 1 + plenbytes;",
          "1155:     return -2;",
          "1158:     return -3;",
          "1163:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1165:     struct in6_addr addr;",
          "1166:     u_int plen, plenbytes;",
          "1169:     ND_TCHECK_4(pptr);",
          "1170:     ITEMCHECK(4);",
          "1173:     if (24 > plen)",
          "1174:         return -1;",
          "1178:     if (128 < plen)",
          "1179:         return -1;",
          "1180:     itemlen -= 4;",
          "1182:     memset(&addr, 0, sizeof(addr));",
          "1183:     plenbytes = (plen + 7) / 8;",
          "1184:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1185:     memcpy(&addr, pptr + 4, plenbytes);",
          "1186:     if (plen % 8) {",
          "1187:         addr.s6_addr[plenbytes - 1] &=",
          "1188:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1189:     }",
          "1191:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1192:              ip6addr_string(ndo, &addr),",
          "1193:              plen,",
          "1194:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1195:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1197:     return 4 + plenbytes;",
          "1200:     return -2;",
          "1203:     return -3;",
          "1210:     struct in6_addr addr;",
          "1211:     u_int plen;",
          "1213:     ND_TCHECK_1(pptr);",
          "1216:     if ((24+64) > plen)",
          "1217:         return -1;",
          "1221:     if (128 < plen)",
          "1222:         return -1;",
          "1224:     memset(&addr, 0, sizeof(addr));",
          "1225:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1226:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1227:     if (plen % 8) {",
          "1228:         addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1229:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1230:     }",
          "1232:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1233:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1234:              ip6addr_string(ndo, &addr),",
          "1235:              plen,",
          "1236:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1237:               ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1239:     return 12 + (plen + 7) / 8;",
          "1242:     return -2;",
          "1249:     uint8_t addr[19];",
          "1250:     u_int plen;",
          "1252:     ND_TCHECK_1(pptr);",
          "1255:     if (152 < plen)",
          "1256:         return -1;",
          "1258:     memset(&addr, 0, sizeof(addr));",
          "1259:     ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1260:     memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1261:     if (plen % 8) {",
          "1262:         addr[(plen + 7) / 8 - 1] &=",
          "1263:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1264:     }",
          "1265:     snprintf(buf, buflen, \"%s/%d\",",
          "1266:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1267:              plen);",
          "1269:     return 1 + (plen + 7) / 8;",
          "1272:     return -2;",
          "1277:                    const u_char *pptr, char *buf, u_int buflen)",
          "1279:     uint8_t addr[19];",
          "1280:     u_int plen;",
          "1282:     ND_TCHECK_1(pptr);",
          "1285:     if ((24+64) > plen)",
          "1286:         return -1;",
          "1290:     if (152 < plen)",
          "1291:         return -1;",
          "1293:     memset(&addr, 0, sizeof(addr));",
          "1294:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1295:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1296:     if (plen % 8) {",
          "1297:         addr[(plen + 7) / 8 - 1] &=",
          "1298:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1299:     }",
          "1301:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1302:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1303:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1304:              plen,",
          "1305:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1306:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1308:     return 12 + (plen + 7) / 8;",
          "1311:     return -2;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1374: }",
          "",
          "[Removed Lines]",
          "1373:    return 4;",
          "",
          "[Added Lines]",
          "1369:     return 4;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1383: static int",
          "1386:     u_int offset, prefix_length;",
          "1387:     if (length < 5) {",
          "1388:         return 0;",
          "1389:     }",
          "1393:         offset += 4;",
          "1394:         prefix_length = pptr[offset];",
          "",
          "[Removed Lines]",
          "1384: check_add_path(const u_char *pptr, u_int length, u_int max_prefix_length) {",
          "1392:     for(offset = 0; offset < length;) {",
          "",
          "[Added Lines]",
          "1379: check_add_path(const u_char *pptr, u_int length, u_int",
          "1380: max_prefix_length)",
          "1381: {",
          "1388:     for (offset = 0; offset < length;) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1408:     }",
          "1412:         prefix_length = pptr[offset];",
          "",
          "[Removed Lines]",
          "1411:     for(offset = 0; offset < length; ) {",
          "",
          "[Added Lines]",
          "1407:     for (offset = 0; offset < length; ) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1428:     return 0;",
          "1429: }",
          "1432: static int",
          "1433: bgp_attr_print(netdissect_options *ndo,",
          "1434:                u_int atype, const u_char *pptr, u_int len)",
          "1435: {",
          "1550:                 break;",
          "1598:                 break;",
          "1612:                 break;",
          "1625:                 switch(af<<8 | safi) {",
          "1626:                 case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1627:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1628:                 case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1629:                 case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1630:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1631:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1632:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1633:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1636:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1637:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1638:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1639:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1640:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1641:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1642:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1643:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1644:                 case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1645:                 case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1646:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1647:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1648:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1653:                     break;",
          "1654:                 default:",
          "1655:                     ND_TCHECK_LEN(tptr, tlen);",
          "1657:                     if (ndo->ndo_vflag <= 1)",
          "1658:                         print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1659:                     goto done;",
          "1660:                     break;",
          "1661:                 }",
          "2239:                 }",
          "2240:                 break;",
          "2297:                 }",
          "2298:                 break;",
          "2299:         }",
          "2398:                 break;",
          "2422:             break;",
          "2427:         }",
          "2430: trunc:",
          "2432: }",
          "2434: static void",
          "2435: bgp_capabilities_print(netdissect_options *ndo,",
          "2436:                        const u_char *opt, u_int caps_len)",
          "2437: {",
          "2523:                     break;",
          "2524:                 }",
          "2529:         }",
          "2532: trunc:",
          "2534: }",
          "2536: static void",
          "2537: bgp_open_print(netdissect_options *ndo,",
          "2538:                const u_char *dat, u_int length)",
          "2539: {",
          "2603: trunc:",
          "2605: }",
          "2607: static void",
          "2608: bgp_update_print(netdissect_options *ndo,",
          "2609:                  const u_char *dat, int length)",
          "2610: {",
          "2671:                 }",
          "2675:         }",
          "2688:         }",
          "2772: trunc:",
          "2774: }",
          "2776: static void",
          "2777: bgp_notification_print(netdissect_options *ndo,",
          "2779: {",
          "2888:         }",
          "2891: trunc:",
          "2893: }",
          "2895: static void",
          "2896: bgp_route_refresh_print(netdissect_options *ndo,",
          "2898: {",
          "2923: trunc:",
          "2925: }",
          "2927: static int",
          "2928: bgp_pdu_print(netdissect_options *ndo,",
          "2930: {",
          "2966: trunc:",
          "2969: }",
          "2971: void",
          "2972: bgp_print(netdissect_options *ndo,",
          "2974: {",
          "2992:                 return;",
          "3041: trunc:",
          "3043: }",
          "",
          "[Removed Lines]",
          "1436:  int i;",
          "1437:  uint16_t af;",
          "1438:  uint8_t safi, snpa, nhlen;",
          "1440:             float f;",
          "1441:             uint32_t i;",
          "1442:         } bw;",
          "1443:  int advance;",
          "1444:  u_int tlen;",
          "1445:  const u_char *tptr;",
          "1446:  char buf[MAXHOSTNAMELEN + 100];",
          "1447:         int  as_size;",
          "1448:         int add_path4, add_path6, path_id;",
          "1450:         tptr = pptr;",
          "1451:         tlen=len;",
          "1453:  switch (atype) {",
          "1454:  case BGPTYPE_ORIGIN:",
          "1455:   if (len != 1)",
          "1456:    ND_PRINT((ndo, \"invalid len\"));",
          "1457:   else {",
          "1458:    ND_TCHECK_1(tptr);",
          "1459:    ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1460:       \"Unknown Origin Typecode\",",
          "1461:       EXTRACT_U_1(tptr))));",
          "1462:   }",
          "1463:   break;",
          "1468:  case BGPTYPE_AS4_PATH:",
          "1469:  case BGPTYPE_AS_PATH:",
          "1470:   if (len % 2) {",
          "1471:    ND_PRINT((ndo, \"invalid len\"));",
          "1472:    break;",
          "1473:   }",
          "1474:                 if (!len) {",
          "1475:    ND_PRINT((ndo, \"empty\"));",
          "1476:    break;",
          "1477:                 }",
          "1487:                 as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1489:   while (tptr < pptr + len) {",
          "1490:    ND_TCHECK_1(tptr);",
          "1491:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1492:       \"?\", EXTRACT_U_1(tptr))));",
          "1493:    ND_TCHECK_1(tptr + 1);",
          "1494:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1495:                             ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1496:        ND_PRINT((ndo, \"%s \",",
          "1497:     as_printf(ndo, astostr, sizeof(astostr),",
          "1498:     as_size == 2 ?",
          "1499:     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1500:     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1501:                         }",
          "1502:    ND_TCHECK_1(tptr);",
          "1503:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1504:       \"?\", EXTRACT_U_1(tptr))));",
          "1505:                         ND_TCHECK_1(tptr + 1);",
          "1506:                         tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1507:   }",
          "1508:   break;",
          "1509:  case BGPTYPE_NEXT_HOP:",
          "1510:   if (len != 4)",
          "1511:    ND_PRINT((ndo, \"invalid len\"));",
          "1512:   else {",
          "1513:    ND_TCHECK_4(tptr);",
          "1514:    ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1515:   }",
          "1516:   break;",
          "1517:  case BGPTYPE_MULTI_EXIT_DISC:",
          "1518:  case BGPTYPE_LOCAL_PREF:",
          "1519:   if (len != 4)",
          "1520:    ND_PRINT((ndo, \"invalid len\"));",
          "1521:   else {",
          "1522:    ND_TCHECK_4(tptr);",
          "1523:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1524:   }",
          "1525:   break;",
          "1526:  case BGPTYPE_ATOMIC_AGGREGATE:",
          "1527:   if (len != 0)",
          "1528:    ND_PRINT((ndo, \"invalid len\"));",
          "1529:   break;",
          "1530:         case BGPTYPE_AGGREGATOR:",
          "1536:                 if (len != 6 && len != 8) {",
          "1537:                     ND_PRINT((ndo, \"invalid len\"));",
          "1538:                     break;",
          "1539:                 }",
          "1540:                 ND_TCHECK_LEN(tptr, len);",
          "1541:                 if (len == 6) {",
          "1542:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1543:    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1544:    ipaddr_string(ndo, tptr + 2)));",
          "1545:                 } else {",
          "1546:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1547:    as_printf(ndo, astostr, sizeof(astostr),",
          "1548:    EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1549:                 }",
          "1551:  case BGPTYPE_AGGREGATOR4:",
          "1552:   if (len != 8) {",
          "1553:    ND_PRINT((ndo, \"invalid len\"));",
          "1554:    break;",
          "1555:   }",
          "1556:   ND_TCHECK_8(tptr);",
          "1557:   ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1558:          as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1559:          ipaddr_string(ndo, tptr + 4)));",
          "1560:   break;",
          "1561:  case BGPTYPE_COMMUNITIES:",
          "1562:   if (len % 4) {",
          "1563:    ND_PRINT((ndo, \"invalid len\"));",
          "1564:    break;",
          "1565:   }",
          "1566:   while (tlen>0) {",
          "1567:    uint32_t comm;",
          "1568:    ND_TCHECK_4(tptr);",
          "1569:    comm = EXTRACT_BE_U_4(tptr);",
          "1570:    switch (comm) {",
          "1571:    case BGP_COMMUNITY_NO_EXPORT:",
          "1572:     ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1573:     break;",
          "1574:    case BGP_COMMUNITY_NO_ADVERT:",
          "1575:     ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1576:     break;",
          "1577:    case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1578:     ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1579:     break;",
          "1580:    default:",
          "1581:     ND_PRINT((ndo, \"%u:%u%s\",",
          "1582:                                        (comm >> 16) & 0xffff,",
          "1583:                                        comm & 0xffff,",
          "1584:                                        (tlen>4) ? \", \" : \"\"));",
          "1585:     break;",
          "1586:    }",
          "1587:                         tlen -=4;",
          "1588:                         tptr +=4;",
          "1589:   }",
          "1590:   break;",
          "1591:         case BGPTYPE_ORIGINATOR_ID:",
          "1592:   if (len != 4) {",
          "1593:    ND_PRINT((ndo, \"invalid len\"));",
          "1594:    break;",
          "1595:   }",
          "1596:   ND_TCHECK_4(tptr);",
          "1597:                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1599:         case BGPTYPE_CLUSTER_LIST:",
          "1600:   if (len % 4) {",
          "1601:    ND_PRINT((ndo, \"invalid len\"));",
          "1602:    break;",
          "1603:   }",
          "1604:                 while (tlen>0) {",
          "1605:    ND_TCHECK_4(tptr);",
          "1606:                         ND_PRINT((ndo, \"%s%s\",",
          "1607:                                ipaddr_string(ndo, tptr),",
          "1608:                                 (tlen>4) ? \", \" : \"\"));",
          "1609:                         tlen -=4;",
          "1610:                         tptr +=4;",
          "1611:                 }",
          "1613:  case BGPTYPE_MP_REACH_NLRI:",
          "1614:   ND_TCHECK_3(tptr);",
          "1615:   af = EXTRACT_BE_U_2(tptr);",
          "1616:   safi = EXTRACT_U_1(tptr + 2);",
          "1618:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1619:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1620:                        af,",
          "1622:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1623:                        safi));",
          "1634:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1635:   case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1649:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1650:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1651:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1652:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1656:                     ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1663:                 tptr +=3;",
          "1665:   ND_TCHECK_1(tptr);",
          "1666:   nhlen = EXTRACT_U_1(tptr);",
          "1667:                 tlen = nhlen;",
          "1668:                 tptr++;",
          "1670:   if (tlen) {",
          "1671:                     int nnh = 0;",
          "1672:                     ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1673:                     while (tlen > 0) {",
          "1674:                         if ( nnh++ > 0 ) {",
          "1675:                             ND_PRINT((ndo,  \", \" ));",
          "1676:                         }",
          "1677:                         switch(af<<8 | safi) {",
          "1678:                         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1679:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1680:                         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1681:                         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1682:                         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1683:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1684:                         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1685:        if (tlen < sizeof(struct in_addr)) {",
          "1686:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1687:                                 tlen = 0;",
          "1688:                             } else {",
          "1689:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1690:                                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1691:                                 tlen -= sizeof(struct in_addr);",
          "1692:                                 tptr += sizeof(struct in_addr);",
          "1693:                             }",
          "1694:                             break;",
          "1695:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1696:                         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1697:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1698:                             if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1699:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1700:                                 tlen = 0;",
          "1701:                             } else {",
          "1702:                                 ND_TCHECK_LEN(tptr,",
          "1703:                                               sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1704:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1705:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1706:                                        ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1707:                                 tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1708:                                 tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1709:                             }",
          "1710:                             break;",
          "1711:                         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1712:                         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1713:                         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1714:                         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1715:                             if (tlen < sizeof(struct in6_addr)) {",
          "1716:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1717:                                 tlen = 0;",
          "1718:                             } else {",
          "1719:                                 ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1720:                                 ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1721:                                 tlen -= sizeof(struct in6_addr);",
          "1722:                                 tptr += sizeof(struct in6_addr);",
          "1723:                             }",
          "1724:                             break;",
          "1725:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1726:                         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1727:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1728:                             if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1729:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1730:                                 tlen = 0;",
          "1731:                             } else {",
          "1732:                                 ND_TCHECK_LEN(tptr,",
          "1733:                                               sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1734:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1735:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1736:                                        ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1737:                                 tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1738:                                 tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1739:                             }",
          "1740:                             break;",
          "1741:                         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1742:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1743:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1744:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1745:                             if (tlen < sizeof(struct in_addr)) {",
          "1746:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1747:                                 tlen = 0;",
          "1748:                             } else {",
          "1749:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1750:                                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1751:                                 tlen -= (sizeof(struct in_addr));",
          "1752:                                 tptr += (sizeof(struct in_addr));",
          "1753:                             }",
          "1754:                             break;",
          "1755:                         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1756:                         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1757:                         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1758:                             ND_TCHECK_LEN(tptr, tlen);",
          "1759:                             ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1760:                             tptr += tlen;",
          "1761:                             tlen = 0;",
          "1762:                             break;",
          "1764:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1765:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1766:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1767:                             if (tlen < BGP_VPN_RD_LEN+1) {",
          "1768:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1769:                                 tlen = 0;",
          "1770:                             } else {",
          "1771:                                 ND_TCHECK_LEN(tptr, tlen);",
          "1772:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1773:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1774:                                        isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1776:                                 if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1777:                                     ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1779:                                 else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1780:                                     ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1781:                                 tptr += tlen;",
          "1782:                                 tlen = 0;",
          "1783:                             }",
          "1784:                             break;",
          "1785:                         default:",
          "1786:                             ND_TCHECK_LEN(tptr, tlen);",
          "1787:                             ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1788:                             if (ndo->ndo_vflag <= 1)",
          "1789:                                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1790:                             tptr += tlen;",
          "1791:                             tlen = 0;",
          "1792:                             goto done;",
          "1793:                             break;",
          "1794:                         }",
          "1795:                     }",
          "1796:   }",
          "1797:   ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1798:   tptr += tlen;",
          "1800:   ND_TCHECK_1(tptr);",
          "1801:   snpa = EXTRACT_U_1(tptr);",
          "1802:   tptr++;",
          "1804:   if (snpa) {",
          "1805:    ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1806:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1807:     ND_TCHECK_1(tptr);",
          "1808:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1809:     tptr += EXTRACT_U_1(tptr) + 1;",
          "1810:    }",
          "1811:   } else {",
          "1812:    ND_PRINT((ndo, \", no SNPA\"));",
          "1813:                 }",
          "1815:                 add_path4 = check_add_path(tptr, (len-(tptr - pptr)), 32);",
          "1816:                 add_path6 = check_add_path(tptr, (len-(tptr - pptr)), 128);",
          "1818:   while (tptr < pptr + len) {",
          "1819:                     switch (af<<8 | safi) {",
          "1820:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1821:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1822:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1823:                         if (add_path4) {",
          "1824:                             path_id = EXTRACT_BE_U_4(tptr);",
          "1825:                             tptr += 4;",
          "1826:                         }",
          "1827:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1828:                         if (advance == -1)",
          "1829:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1830:                         else if (advance == -2)",
          "1831:                             goto trunc;",
          "1832:                         else if (advance == -3)",
          "1834:                         else",
          "1835:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1836:                             if (add_path4) {",
          "1837:                                 ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "1838:                             }",
          "1839:                         break;",
          "1840:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1841:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1842:                         if (advance == -1)",
          "1843:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1844:                         else if (advance == -2)",
          "1845:                             goto trunc;",
          "1846:                         else if (advance == -3)",
          "1848:                         else",
          "1849:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1850:                         break;",
          "1851:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1852:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1853:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1854:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1855:                         if (advance == -1)",
          "1856:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1857:                         else if (advance == -2)",
          "1858:                             goto trunc;",
          "1859:                         else",
          "1860:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1861:                         break;",
          "1862:                     case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1863:                         advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1864:                         if (advance == -1)",
          "1865:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1866:                         else if (advance == -2)",
          "1867:                             goto trunc;",
          "1868:                         else",
          "1869:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1870:                         break;",
          "1872:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1873:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1874:                         if (advance == -1)",
          "1875:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1876:                         else if (advance == -2)",
          "1877:                             goto trunc;",
          "1878:                         else",
          "1879:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1880:                         break;",
          "1882:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1883:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1884:         if (advance == -1)",
          "1885:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1886:                         else if (advance == -2)",
          "1887:                             goto trunc;",
          "1888:                         else",
          "1889:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1890:          break;",
          "1891:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1892:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1893:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1894:                         if (add_path6) {",
          "1895:                             path_id = EXTRACT_BE_U_4(tptr);",
          "1896:                             tptr += 4;",
          "1897:                         }",
          "1898:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1899:                         if (advance == -1)",
          "1900:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1901:                         else if (advance == -2)",
          "1902:                             goto trunc;",
          "1903:                         else if (advance == -3)",
          "1905:                         else",
          "1906:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1907:                             if (add_path6) {",
          "1908:                                 ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "1909:                             }",
          "1910:                         break;",
          "1911:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1912:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1913:                         if (advance == -1)",
          "1914:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1915:                         else if (advance == -2)",
          "1916:                             goto trunc;",
          "1917:                         else if (advance == -3)",
          "1919:                         else",
          "1920:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1921:                         break;",
          "1922:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1923:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1924:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1925:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1926:                         if (advance == -1)",
          "1927:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1928:                         else if (advance == -2)",
          "1929:                             goto trunc;",
          "1930:                         else",
          "1931:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1932:                         break;",
          "1933:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1934:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1935:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1936:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1937:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1938:                         if (advance == -1)",
          "1939:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1940:                         else if (advance == -2)",
          "1941:                             goto trunc;",
          "1942:                         else",
          "1943:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1944:                         break;",
          "1945:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1946:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1947:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1948:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1949:                         if (advance == -1)",
          "1950:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1951:                         else if (advance == -2)",
          "1952:                             goto trunc;",
          "1953:                         else",
          "1954:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1955:                         break;",
          "1956:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1957:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1958:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1959:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1960:                         if (advance == -1)",
          "1961:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1962:                         else if (advance == -2)",
          "1963:                             goto trunc;",
          "1964:                         else",
          "1965:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1966:                         break;",
          "1967:                     default:",
          "1968:                         ND_TCHECK_LEN(tptr, tlen);",
          "1969:                         ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1970:                         if (ndo->ndo_vflag <= 1)",
          "1971:                             print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1972:                         advance = 0;",
          "1973:                         tptr = pptr + len;",
          "1974:                         break;",
          "1975:                     }",
          "1976:                     if (advance < 0)",
          "1977:                         break;",
          "1978:                     tptr += advance;",
          "1979:   }",
          "1980:         done:",
          "1981:   break;",
          "1983:  case BGPTYPE_MP_UNREACH_NLRI:",
          "1984:   ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1985:   af = EXTRACT_BE_U_2(tptr);",
          "1986:   safi = EXTRACT_U_1(tptr + 2);",
          "1988:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1989:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1990:                        af,",
          "1992:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1993:                        safi));",
          "1995:                 if (len == BGP_MP_NLRI_MINSIZE)",
          "1996:                     ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1998:   tptr += 3;",
          "2000:                 add_path4 = check_add_path(tptr, (len-(tptr - pptr)), 32);",
          "2001:                 add_path6 = check_add_path(tptr, (len-(tptr - pptr)), 128);",
          "2003:   while (tptr < pptr + len) {",
          "2004:                     switch (af<<8 | safi) {",
          "2005:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "2006:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "2007:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "2008:                         if (add_path4) {",
          "2009:                             path_id = EXTRACT_BE_U_4(tptr);",
          "2010:                             tptr += 4;",
          "2011:                         }",
          "2012:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "2013:                         if (advance == -1)",
          "2014:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2015:                         else if (advance == -2)",
          "2016:                             goto trunc;",
          "2017:                         else if (advance == -3)",
          "2019:                         else",
          "2020:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2021:                             if (add_path4) {",
          "2022:                                 ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2023:                             }",
          "2024:                         break;",
          "2025:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "2026:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "2027:                         if (advance == -1)",
          "2028:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2029:                         else if (advance == -2)",
          "2030:                             goto trunc;",
          "2031:                         else if (advance == -3)",
          "2033:                         else",
          "2034:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2035:                         break;",
          "2036:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "2037:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "2038:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2039:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "2040:                         if (advance == -1)",
          "2041:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2042:                         else if (advance == -2)",
          "2043:                             goto trunc;",
          "2044:                         else",
          "2045:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2046:                         break;",
          "2047:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "2048:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "2049:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "2050:                         if (add_path6) {",
          "2051:                             path_id = EXTRACT_BE_U_4(tptr);",
          "2052:                             tptr += 4;",
          "2053:                         }",
          "2054:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "2055:                         if (advance == -1)",
          "2056:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2057:                         else if (advance == -2)",
          "2058:                             goto trunc;",
          "2059:                         else if (advance == -3)",
          "2061:                         else",
          "2062:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2063:                             if (add_path6) {",
          "2064:                                 ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2065:                             }",
          "2066:                         break;",
          "2067:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "2068:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "2069:                         if (advance == -1)",
          "2070:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2071:                         else if (advance == -2)",
          "2072:                             goto trunc;",
          "2073:                         else if (advance == -3)",
          "2075:                         else",
          "2076:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2077:                         break;",
          "2078:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "2079:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "2080:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2081:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "2082:                         if (advance == -1)",
          "2083:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2084:                         else if (advance == -2)",
          "2085:                             goto trunc;",
          "2086:                         else",
          "2087:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2088:                         break;",
          "2089:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "2090:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "2091:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "2092:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2093:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "2094:                         if (advance == -1)",
          "2095:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2096:                         else if (advance == -2)",
          "2097:                             goto trunc;",
          "2098:                         else",
          "2099:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2100:                         break;",
          "2101:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2102:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2103:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2104:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2105:                         if (advance == -1)",
          "2106:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2107:                         else if (advance == -2)",
          "2108:                             goto trunc;",
          "2109:                         else",
          "2110:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2111:                         break;",
          "2112:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2113:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2114:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2115:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2116:                         if (advance == -1)",
          "2117:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2118:                         else if (advance == -2)",
          "2119:                             goto trunc;",
          "2120:                         else",
          "2121:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2122:                         break;",
          "2123:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2124:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2125:         if (advance == -1)",
          "2126:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2127:                         else if (advance == -2)",
          "2128:                             goto trunc;",
          "2129:                         else",
          "2130:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2131:          break;",
          "2133:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2134:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2135:                         if (advance == -1)",
          "2136:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2137:                         else if (advance == -2)",
          "2138:                             goto trunc;",
          "2139:                         else",
          "2140:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2141:                         break;",
          "2142:                     default:",
          "2143:                         ND_TCHECK_LEN(tptr - 3, tlen);",
          "2144:                         ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2145:                         if (ndo->ndo_vflag <= 1)",
          "2146:                             print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2147:                         advance = 0;",
          "2148:                         tptr = pptr + len;",
          "2149:                         break;",
          "2150:                     }",
          "2151:                     if (advance < 0)",
          "2152:                         break;",
          "2153:                     tptr += advance;",
          "2154:   }",
          "2155:   break;",
          "2156:         case BGPTYPE_EXTD_COMMUNITIES:",
          "2157:   if (len % 8) {",
          "2158:    ND_PRINT((ndo, \"invalid len\"));",
          "2159:    break;",
          "2160:   }",
          "2161:                 while (tlen>0) {",
          "2162:                     uint16_t extd_comm;",
          "2164:                     ND_TCHECK_2(tptr);",
          "2165:                     extd_comm=EXTRACT_BE_U_2(tptr);",
          "2167:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2168:       tok2str(bgp_extd_comm_subtype_values,",
          "2169:           \"unknown extd community typecode\",",
          "2170:           extd_comm),",
          "2171:       extd_comm,",
          "2172:       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2174:                     ND_TCHECK_6(tptr + 2);",
          "2175:                     switch(extd_comm) {",
          "2176:                     case BGP_EXT_COM_RT_0:",
          "2177:                     case BGP_EXT_COM_RO_0:",
          "2178:                     case BGP_EXT_COM_L2VPN_RT_0:",
          "2179:                         ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2180:                                EXTRACT_BE_U_2(tptr + 2),",
          "2181:                                EXTRACT_BE_U_4(tptr + 4),",
          "2182:                                ipaddr_string(ndo, tptr+4)));",
          "2183:                         break;",
          "2184:                     case BGP_EXT_COM_RT_1:",
          "2185:                     case BGP_EXT_COM_RO_1:",
          "2186:                     case BGP_EXT_COM_L2VPN_RT_1:",
          "2187:                     case BGP_EXT_COM_VRF_RT_IMP:",
          "2188:                         ND_PRINT((ndo, \": %s:%u\",",
          "2189:                                ipaddr_string(ndo, tptr+2),",
          "2190:                                EXTRACT_BE_U_2(tptr + 6)));",
          "2191:                         break;",
          "2192:                     case BGP_EXT_COM_RT_2:",
          "2193:                     case BGP_EXT_COM_RO_2:",
          "2194:    ND_PRINT((ndo, \": %s:%u\",",
          "2195:        as_printf(ndo, astostr, sizeof(astostr),",
          "2196:        EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2197:    break;",
          "2198:                     case BGP_EXT_COM_LINKBAND:",
          "2199:           bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2200:                         ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2201:                                bw.f*8/1000000));",
          "2202:                         break;",
          "2203:                     case BGP_EXT_COM_VPN_ORIGIN:",
          "2204:                     case BGP_EXT_COM_VPN_ORIGIN2:",
          "2205:                     case BGP_EXT_COM_VPN_ORIGIN3:",
          "2206:                     case BGP_EXT_COM_VPN_ORIGIN4:",
          "2207:                     case BGP_EXT_COM_OSPF_RID:",
          "2208:                     case BGP_EXT_COM_OSPF_RID2:",
          "2209:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2210:                         break;",
          "2211:                     case BGP_EXT_COM_OSPF_RTYPE:",
          "2212:                     case BGP_EXT_COM_OSPF_RTYPE2:",
          "2213:                         ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2214:                                ipaddr_string(ndo, tptr+2),",
          "2215:                                tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2216:        \"unknown (0x%02x)\",",
          "2217:        EXTRACT_U_1((tptr + 6))),",
          "2218:                                (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2219:                                ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2220:                         break;",
          "2221:                     case BGP_EXT_COM_L2INFO:",
          "2222:                         ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2223:                                tok2str(l2vpn_encaps_values,",
          "2224:        \"unknown encaps\",",
          "2225:        EXTRACT_U_1((tptr + 2))),",
          "2226:                                EXTRACT_U_1((tptr + 3)),",
          "2227:                                EXTRACT_BE_U_2(tptr + 4)));",
          "2228:                         break;",
          "2229:                     case BGP_EXT_COM_SOURCE_AS:",
          "2230:                         ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2231:                         break;",
          "2232:                     default:",
          "2233:                         ND_TCHECK_8(tptr);",
          "2234:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2235:                         break;",
          "2236:                     }",
          "2237:                     tlen -=8;",
          "2238:                     tptr +=8;",
          "2242:         case BGPTYPE_PMSI_TUNNEL:",
          "2243:         {",
          "2244:                 uint8_t tunnel_type, flags;",
          "2246:                 ND_TCHECK_5(tptr);",
          "2247:                 flags = EXTRACT_U_1(tptr);",
          "2248:                 tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2249:                 tlen = len;",
          "2251:                 ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2252:                        tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2253:                        tunnel_type,",
          "2254:                        bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2255:                        EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2257:                 tptr +=5;",
          "2258:                 tlen -= 5;",
          "2260:                 switch (tunnel_type) {",
          "2262:                 case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2263:                     ND_TCHECK_8(tptr);",
          "2264:                     ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2265:                            ipaddr_string(ndo, tptr),",
          "2266:                            ipaddr_string(ndo, tptr+4)));",
          "2267:                     break;",
          "2269:                 case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2270:                     ND_TCHECK_8(tptr);",
          "2271:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2272:                            ipaddr_string(ndo, tptr),",
          "2273:                            ipaddr_string(ndo, tptr+4)));",
          "2274:                     break;",
          "2275:                 case BGP_PMSI_TUNNEL_INGRESS:",
          "2276:                     ND_TCHECK_4(tptr);",
          "2277:                     ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2278:                            ipaddr_string(ndo, tptr)));",
          "2279:                     break;",
          "2281:                 case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2282:                     ND_TCHECK_8(tptr);",
          "2283:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2284:                            ipaddr_string(ndo, tptr),",
          "2285:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2286:                     break;",
          "2287:                 case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2288:                     ND_TCHECK_8(tptr);",
          "2289:                     ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2290:                            ipaddr_string(ndo, tptr),",
          "2291:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2292:                     break;",
          "2293:                 default:",
          "2294:                     if (ndo->ndo_vflag <= 1) {",
          "2295:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2296:                     }",
          "2300:  case BGPTYPE_AIGP:",
          "2301:  {",
          "2302:   uint8_t type;",
          "2303:   uint16_t length;",
          "2305:   tlen = len;",
          "2307:   while (tlen >= 3) {",
          "2309:       ND_TCHECK_3(tptr);",
          "2311:       type = EXTRACT_U_1(tptr);",
          "2312:       length = EXTRACT_BE_U_2(tptr + 1);",
          "2313:       tptr += 3;",
          "2314:       tlen -= 3;",
          "2316:       ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2317:          tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2318:          type, length));",
          "2320:       if (length < 3)",
          "2321:    goto trunc;",
          "2322:       length -= 3;",
          "2327:       ND_TCHECK_LEN(tptr + 3, length);",
          "2329:       switch (type) {",
          "2331:       case BGP_AIGP_TLV:",
          "2332:           if (length < 8)",
          "2333:               goto trunc;",
          "2334:    ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2335:       EXTRACT_BE_U_8(tptr)));",
          "2336:    break;",
          "2338:       default:",
          "2339:    if (ndo->ndo_vflag <= 1) {",
          "2340:        print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2341:    }",
          "2342:       }",
          "2344:       tptr += length;",
          "2345:       tlen -= length;",
          "2346:   }",
          "2347:   break;",
          "2348:  }",
          "2349:         case BGPTYPE_ATTR_SET:",
          "2350:                 ND_TCHECK_4(tptr);",
          "2351:                 if (len < 4)",
          "2352:                  goto trunc;",
          "2353:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2354:       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2355:   tptr+=4;",
          "2356:                 len -=4;",
          "2358:                 while (len) {",
          "2359:                     u_int aflags, alenlen, alen;",
          "2361:                     ND_TCHECK_2(tptr);",
          "2362:                     if (len < 2)",
          "2363:                         goto trunc;",
          "2364:                     aflags = EXTRACT_U_1(tptr);",
          "2365:                     atype = EXTRACT_U_1(tptr + 1);",
          "2366:                     tptr += 2;",
          "2367:                     len -= 2;",
          "2368:                     alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2369:                     ND_TCHECK_LEN(tptr, alenlen);",
          "2370:                     if (len < alenlen)",
          "2371:                         goto trunc;",
          "2372:                     alen = bgp_attr_len(aflags, tptr);",
          "2373:                     tptr += alenlen;",
          "2374:                     len -= alenlen;",
          "2376:                     ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2377:                            tok2str(bgp_attr_values,",
          "2378:                                       \"Unknown Attribute\", atype),",
          "2379:                            atype,",
          "2380:                            alen));",
          "2382:                     if (aflags) {",
          "2383:                         ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2384:                                aflags & 0x80 ? \"O\" : \"\",",
          "2385:                                aflags & 0x40 ? \"T\" : \"\",",
          "2386:                                aflags & 0x20 ? \"P\" : \"\",",
          "2387:                                aflags & 0x10 ? \"E\" : \"\"));",
          "2388:                         if (aflags & 0xf)",
          "2389:                             ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2390:                         ND_PRINT((ndo, \"]: \"));",
          "2391:                     }",
          "2393:                     if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2394:                         return 0;",
          "2395:                     tptr += alen;",
          "2396:                     len -= alen;",
          "2397:   }",
          "2400:  case BGPTYPE_LARGE_COMMUNITY:",
          "2401:   if (len == 0 || len % 12) {",
          "2402:    ND_PRINT((ndo, \"invalid len\"));",
          "2403:    break;",
          "2404:   }",
          "2405:   ND_PRINT((ndo, \"\\n\\t    \"));",
          "2406:   while (len > 0) {",
          "2407:    ND_TCHECK_LEN(tptr, 12);",
          "2408:    ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2409:      EXTRACT_BE_U_4(tptr),",
          "2410:      EXTRACT_BE_U_4(tptr + 4),",
          "2411:      EXTRACT_BE_U_4(tptr + 8),",
          "2412:      (len > 12) ? \", \" : \"\"));",
          "2413:                         tptr += 12;",
          "2414:                         len -= 12;",
          "2415:   }",
          "2416:   break;",
          "2417:  default:",
          "2418:      ND_TCHECK_LEN(pptr, len);",
          "2420:             if (ndo->ndo_vflag <= 1)",
          "2421:                 print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2423:  }",
          "2425:             ND_TCHECK_LEN(pptr, len);",
          "2426:             print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2428:         return 1;",
          "2431:         return 0;",
          "2438:  u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2439:         u_int i = 0;",
          "2441:         while (i < caps_len) {",
          "2442:                 ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2443:                 cap_type=EXTRACT_U_1(opt + i);",
          "2444:                 cap_len=EXTRACT_U_1(opt + i + 1);",
          "2445:                 tcap_len=cap_len;",
          "2446:                 ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2447:                        tok2str(bgp_capcode_values, \"Unknown\",",
          "2448:                                   cap_type),",
          "2449:                        cap_type,",
          "2450:                        cap_len));",
          "2451:                 ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2452:                 switch (cap_type) {",
          "2453:                 case BGP_CAPCODE_MP:",
          "2454:                     ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2455:                            tok2str(af_values, \"Unknown\",",
          "2456:                                       EXTRACT_BE_U_2(opt + i + 2)),",
          "2457:                            EXTRACT_BE_U_2(opt + i + 2),",
          "2458:                            tok2str(bgp_safi_values, \"Unknown\",",
          "2459:                                       EXTRACT_U_1(opt + i + 5)),",
          "2460:                            EXTRACT_U_1(opt + i + 5)));",
          "2461:                     break;",
          "2462:                 case BGP_CAPCODE_RESTART:",
          "2463:                     ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2464:                            ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2465:                            EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2466:                     tcap_len-=2;",
          "2467:                     cap_offset=4;",
          "2468:                     while(tcap_len>=4) {",
          "2469:                         ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2470:                                tok2str(af_values,\"Unknown\",",
          "2471:                                           EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2472:                                EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2473:                                tok2str(bgp_safi_values,\"Unknown\",",
          "2474:                                           EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2475:                                EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2476:                                ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2477:                         tcap_len-=4;",
          "2478:                         cap_offset+=4;",
          "2479:                     }",
          "2480:                     break;",
          "2481:                 case BGP_CAPCODE_RR:",
          "2482:                 case BGP_CAPCODE_RR_CISCO:",
          "2483:                     break;",
          "2484:                 case BGP_CAPCODE_AS_NEW:",
          "2489:                     if (cap_len == 4) {",
          "2490:                         ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2491:                             as_printf(ndo, astostr, sizeof(astostr),",
          "2492:                             EXTRACT_BE_U_4(opt + i + 2))));",
          "2493:                     }",
          "2494:                     break;",
          "2495:                 case BGP_CAPCODE_ADD_PATH:",
          "2496:                     cap_offset=2;",
          "2497:                     if (tcap_len == 0) {",
          "2499:                         break;",
          "2500:                     }",
          "2501:                     while (tcap_len > 0) {",
          "2502:                         if (tcap_len < 4) {",
          "2503:                             ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2504:                             break;",
          "2505:                         }",
          "2506:                         ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2507:                                   tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2508:                                   EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2509:                                   tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2510:                                   EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2511:                                   tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2512:                         ));",
          "2513:                         tcap_len-=4;",
          "2514:                         cap_offset+=4;",
          "2515:                     }",
          "2516:                     break;",
          "2517:                 default:",
          "2518:                     ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2519:                            cap_type));",
          "2520:                     if (ndo->ndo_vflag <= 1)",
          "2521:                         print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2522:         cap_len);",
          "2525:                 if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2526:                     print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2527:                 }",
          "2528:                 i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2530:         return;",
          "2533:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2540:  const struct bgp_open *bgp_open_header;",
          "2541:  u_int optslen;",
          "2542:  const struct bgp_opt *bgpopt;",
          "2543:  const u_char *opt;",
          "2544:  u_int i;",
          "2546:  ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2547:  if (length < BGP_OPEN_SIZE)",
          "2548:   goto trunc;",
          "2550:  bgp_open_header = (const struct bgp_open *)dat;",
          "2552:  ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2553:      EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2554:  ND_PRINT((ndo, \"my AS %s, \",",
          "2555:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2556:  ND_PRINT((ndo, \"Holdtime %us, \",",
          "2557:      EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2558:  ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2559:  optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2560:  ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2562:  opt = dat + BGP_OPEN_SIZE;",
          "2563:  length -= BGP_OPEN_SIZE;",
          "2565:  i = 0;",
          "2566:  while (i < optslen) {",
          "2567:   uint8_t opt_type, opt_len;",
          "2569:   ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2570:   if (length < BGP_OPT_SIZE + i)",
          "2571:    goto trunc;",
          "2572:   bgpopt = (const struct bgp_opt *)(opt + i);",
          "2573:   opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2574:   opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2575:   if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2576:    ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2577:        opt_type, opt_len));",
          "2578:    break;",
          "2579:   }",
          "2581:   ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2582:          tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2583:          opt_type,",
          "2584:          opt_len));",
          "2587:   switch(opt_type) {",
          "2589:   case BGP_OPT_CAP:",
          "2590:    bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2591:             opt_len);",
          "2592:    break;",
          "2594:   case BGP_OPT_AUTH:",
          "2595:   default:",
          "2596:          ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2597:       opt_type));",
          "2598:          break;",
          "2599:   }",
          "2600:   i += BGP_OPT_SIZE + opt_len;",
          "2601:  }",
          "2602:  return;",
          "2604:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2611:  const struct bgp *bgp_header;",
          "2612:  const u_char *p;",
          "2613:  int withdrawn_routes_len;",
          "2614:         char buf[MAXHOSTNAMELEN + 100];",
          "2615:         int wpfx;",
          "2616:  int len;",
          "2617:  int i;",
          "2618:         int add_path;",
          "2619:         int path_id;",
          "2621:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2622:  if (length < BGP_SIZE)",
          "2623:   goto trunc;",
          "2624:  bgp_header = (const struct bgp *)dat;",
          "2625:  p = dat + BGP_SIZE;",
          "2626:  length -= BGP_SIZE;",
          "2629:  ND_TCHECK_2(p);",
          "2630:  if (length < 2)",
          "2631:   goto trunc;",
          "2632:  withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2633:  p += 2;",
          "2634:  length -= 2;",
          "2635:  if (withdrawn_routes_len > 1) {",
          "2641:   ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2642:   if (length < withdrawn_routes_len)",
          "2643:    goto trunc;",
          "2645:                 ND_PRINT((ndo, \"\\n\\t  Withdrawn routes:\"));",
          "2646:                 add_path = check_add_path(p, withdrawn_routes_len, 32);",
          "2647:                 while(withdrawn_routes_len > 0) {",
          "2648:                         if (add_path) {",
          "2649:                                 path_id = EXTRACT_BE_U_4(p);",
          "2650:                                 p += 4;",
          "2651:                                 length -= 4;",
          "2652:                                 withdrawn_routes_len -= 4;",
          "2653:                         }",
          "2654:                         wpfx = decode_prefix4(ndo, p, withdrawn_routes_len, buf, sizeof(buf));",
          "2655:                         if (wpfx == -1) {",
          "2656:                                 ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2657:                                 break;",
          "2658:                         } else if (wpfx == -2)",
          "2659:                                 goto trunc;",
          "2660:                         else if (wpfx == -3)",
          "2662:                         else {",
          "2663:                                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2664:                                 if (add_path) {",
          "2665:                                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2666:                                 }",
          "2667:                                 p += wpfx;",
          "2668:                                 length -= wpfx;",
          "2669:                                 withdrawn_routes_len -= wpfx;",
          "2670:                         }",
          "2672:  } else {",
          "2673:                 p += withdrawn_routes_len;",
          "2674:                 length -= withdrawn_routes_len;",
          "2677:  ND_TCHECK_2(p);",
          "2678:  if (length < 2)",
          "2679:   goto trunc;",
          "2680:  len = EXTRACT_BE_U_2(p);",
          "2681:  p += 2;",
          "2682:  length -= 2;",
          "2684:         if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2686:             ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2687:             return;",
          "2690:  if (len) {",
          "2692:   while (len) {",
          "2693:    int aflags, atype, alenlen, alen;",
          "2695:    ND_TCHECK_2(p);",
          "2696:    if (len < 2)",
          "2697:        goto trunc;",
          "2698:    if (length < 2)",
          "2699:        goto trunc;",
          "2700:    aflags = EXTRACT_U_1(p);",
          "2701:    atype = EXTRACT_U_1(p + 1);",
          "2702:    p += 2;",
          "2703:    len -= 2;",
          "2704:    length -= 2;",
          "2705:    alenlen = bgp_attr_lenlen(aflags, p);",
          "2706:    ND_TCHECK_LEN(p, alenlen);",
          "2707:    if (len < alenlen)",
          "2708:        goto trunc;",
          "2709:    if (length < alenlen)",
          "2710:        goto trunc;",
          "2711:    alen = bgp_attr_len(aflags, p);",
          "2712:    p += alenlen;",
          "2713:    len -= alenlen;",
          "2714:    length -= alenlen;",
          "2716:    ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2717:                               tok2str(bgp_attr_values, \"Unknown Attribute\",",
          "2718:       atype),",
          "2719:                               atype,",
          "2720:                               alen));",
          "2722:    if (aflags) {",
          "2723:     ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2724:      aflags & 0x80 ? \"O\" : \"\",",
          "2725:      aflags & 0x40 ? \"T\" : \"\",",
          "2726:      aflags & 0x20 ? \"P\" : \"\",",
          "2727:      aflags & 0x10 ? \"E\" : \"\"));",
          "2728:     if (aflags & 0xf)",
          "2729:      ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2730:     ND_PRINT((ndo, \"]: \"));",
          "2731:    }",
          "2732:    if (len < alen)",
          "2733:     goto trunc;",
          "2734:    if (length < alen)",
          "2735:     goto trunc;",
          "2736:    if (!bgp_attr_print(ndo, atype, p, alen))",
          "2737:     goto trunc;",
          "2738:    p += alen;",
          "2739:    len -= alen;",
          "2740:    length -= alen;",
          "2741:   }",
          "2742:  }",
          "2744:  if (length) {",
          "2745:                 add_path = check_add_path(p, length, 32);",
          "2746:   ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2747:   while (length > 0) {",
          "2748:           if (add_path) {",
          "2749:                                 path_id = EXTRACT_BE_U_4(p);",
          "2750:                                 p += 4;",
          "2751:                                 length -= 4;",
          "2752:                         }",
          "2753:    i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2754:    if (i == -1) {",
          "2755:     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2756:     break;",
          "2757:    } else if (i == -2)",
          "2758:     goto trunc;",
          "2759:    else if (i == -3)",
          "2761:    else {",
          "2762:                                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2763:            if (add_path) {",
          "2764:                                         ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2765:     }",
          "2766:            p += i;",
          "2767:                                 length -= i;",
          "2768:    }",
          "2769:   }",
          "2770:  }",
          "2771:  return;",
          "2773:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2778:                        const u_char *dat, int length)",
          "2780:  const struct bgp_notification *bgp_notification_header;",
          "2781:  const u_char *tptr;",
          "2782:  uint8_t bgpn_major, bgpn_minor;",
          "2783:  uint8_t shutdown_comm_length;",
          "2784:  uint8_t remainder_offset;",
          "2786:  ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2787:         if (length<BGP_NOTIFICATION_SIZE)",
          "2788:             return;",
          "2790:  bgp_notification_header = (const struct bgp_notification *)dat;",
          "2791:  bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2792:  bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2794:  ND_PRINT((ndo, \", %s (%u)\",",
          "2795:         tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2796:      bgpn_major),",
          "2797:         bgpn_major));",
          "2799:         switch (bgpn_major) {",
          "2801:         case BGP_NOTIFY_MAJOR_MSG:",
          "2802:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2803:      tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2804:          bgpn_minor),",
          "2805:      bgpn_minor));",
          "2806:             break;",
          "2807:         case BGP_NOTIFY_MAJOR_OPEN:",
          "2808:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2809:      tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2810:          bgpn_minor),",
          "2811:      bgpn_minor));",
          "2812:             break;",
          "2813:         case BGP_NOTIFY_MAJOR_UPDATE:",
          "2814:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2815:      tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2816:          bgpn_minor),",
          "2817:      bgpn_minor));",
          "2818:             break;",
          "2819:         case BGP_NOTIFY_MAJOR_FSM:",
          "2820:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2821:      tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2822:          bgpn_minor),",
          "2823:      bgpn_minor));",
          "2824:             break;",
          "2825:         case BGP_NOTIFY_MAJOR_CAP:",
          "2826:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2827:      tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2828:          bgpn_minor),",
          "2829:      bgpn_minor));",
          "2830:             break;",
          "2831:         case BGP_NOTIFY_MAJOR_CEASE:",
          "2832:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2833:      tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2834:          bgpn_minor),",
          "2835:      bgpn_minor));",
          "2840:      if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2841:   tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2842:   ND_TCHECK_7(tptr);",
          "2843:   ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2844:          tok2str(af_values, \"Unknown\",",
          "2845:       EXTRACT_BE_U_2(tptr)),",
          "2846:          EXTRACT_BE_U_2(tptr),",
          "2847:          tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2848:          EXTRACT_U_1((tptr + 2)),",
          "2849:          EXTRACT_BE_U_4(tptr + 3)));",
          "2850:      }",
          "2855:      if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2856:   bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2857:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2858:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2859:       ND_TCHECK_1(tptr);",
          "2860:       shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2861:       remainder_offset = 0;",
          "2863:       if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2864:    shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2865:        ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2866:       }",
          "2867:       else if (shutdown_comm_length == 0) {",
          "2868:        ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2869:        remainder_offset += 1;",
          "2870:       }",
          "2872:       else {",
          "2873:        ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2874:        ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2875:        (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2876:        ND_PRINT((ndo, \"\\\"\"));",
          "2877:        remainder_offset += shutdown_comm_length + 1;",
          "2878:       }",
          "2880:       if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2881:        ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2882:        hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2883:       }",
          "2884:      }",
          "2885:      break;",
          "2886:  default:",
          "2887:             break;",
          "2890:  return;",
          "2892:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2897:                         const u_char *pptr, int len)",
          "2899:         const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2901:  ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2904:         if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2905:             return;",
          "2907:         bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2909:         ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2910:                tok2str(af_values,\"Unknown\",",
          "2911:      EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2912:                EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2913:                tok2str(bgp_safi_values,\"Unknown\",",
          "2914:      EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2915:                EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2917:         if (ndo->ndo_vflag > 1) {",
          "2918:             ND_TCHECK_LEN(pptr, len);",
          "2919:             print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2920:         }",
          "2922:         return;",
          "2924:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2929:                  const u_char *dat, u_int length)",
          "2931:  const struct bgp *bgp_header;",
          "2932:  uint8_t bgp_type;",
          "2934:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2935:  bgp_header = (const struct bgp *)dat;",
          "2936:  bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2938:  ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2939:                tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2940:                bgp_type,",
          "2941:                length));",
          "2943:  switch (bgp_type) {",
          "2944:  case BGP_OPEN:",
          "2945:   bgp_open_print(ndo, dat, length);",
          "2946:   break;",
          "2947:  case BGP_UPDATE:",
          "2948:   bgp_update_print(ndo, dat, length);",
          "2949:   break;",
          "2950:  case BGP_NOTIFICATION:",
          "2951:   bgp_notification_print(ndo, dat, length);",
          "2952:   break;",
          "2953:         case BGP_KEEPALIVE:",
          "2954:                 break;",
          "2955:         case BGP_ROUTE_REFRESH:",
          "2956:                 bgp_route_refresh_print(ndo, dat, length);",
          "2957:                 break;",
          "2958:         default:",
          "2960:                 ND_TCHECK_LEN(dat, length);",
          "2961:                 ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2962:                 print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2963:                 break;",
          "2964:  }",
          "2965:  return 1;",
          "2967:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2968:  return 0;",
          "2973:           const u_char *dat, int length)",
          "2975:  const u_char *p;",
          "2976:  const u_char *ep;",
          "2977:  const u_char *start;",
          "2978:  const u_char marker[] = {",
          "2979:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2980:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2981:  };",
          "2982:  const struct bgp *bgp_header;",
          "2983:  uint16_t hlen;",
          "2985:  ep = dat + length;",
          "2986:  if (ndo->ndo_snapend < dat + length)",
          "2987:   ep = ndo->ndo_snapend;",
          "2989:  ND_PRINT((ndo, \": BGP\"));",
          "2994:  p = dat;",
          "2995:  start = p;",
          "2996:  while (p < ep) {",
          "2997:   if (!ND_TTEST_1(p))",
          "2998:    break;",
          "2999:   if (EXTRACT_U_1(p) != 0xff) {",
          "3000:    p++;",
          "3001:    continue;",
          "3002:   }",
          "3004:   if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "3005:    break;",
          "3006:   if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "3007:    p++;",
          "3008:    continue;",
          "3009:   }",
          "3012:   ND_TCHECK_LEN(p, BGP_SIZE);",
          "3013:   bgp_header = (const struct bgp *)p;",
          "3015:   if (start != p)",
          "3016:    ND_PRINT((ndo, \" [|BGP]\"));",
          "3018:   hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "3019:   if (hlen < BGP_SIZE) {",
          "3020:    ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "3021:        BGP_SIZE));",
          "3022:    break;",
          "3023:   }",
          "3025:   if (ND_TTEST_LEN(p, hlen)) {",
          "3026:    if (!bgp_pdu_print(ndo, p, hlen))",
          "3027:     return;",
          "3028:    p += hlen;",
          "3029:    start = p;",
          "3030:   } else {",
          "3031:    ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "3032:           tok2str(bgp_msg_values,",
          "3033:        \"Unknown Message Type\",",
          "3034:        EXTRACT_U_1(bgp_header->bgp_type))));",
          "3035:    break;",
          "3036:   }",
          "3037:  }",
          "3039:  return;",
          "3042:  ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "[Added Lines]",
          "1431:     int i;",
          "1432:     uint16_t af;",
          "1433:     uint8_t safi, snpa, nhlen;",
          "1435:         float f;",
          "1436:         uint32_t i;",
          "1437:     } bw;",
          "1438:     int advance;",
          "1439:     u_int tlen;",
          "1440:     const u_char *tptr;",
          "1441:     char buf[MAXHOSTNAMELEN + 100];",
          "1442:     int as_size;",
          "1443:     int add_path4, add_path6, path_id;",
          "1445:     tptr = pptr;",
          "1446:     tlen = len;",
          "1448:     switch (atype) {",
          "1449:     case BGPTYPE_ORIGIN:",
          "1450:         if (len != 1)",
          "1451:             ND_PRINT((ndo, \"invalid len\"));",
          "1452:         else {",
          "1453:             ND_TCHECK_1(tptr);",
          "1454:             ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1455:                       \"Unknown Origin Typecode\",",
          "1456:                       EXTRACT_U_1(tptr))));",
          "1457:         }",
          "1458:         break;",
          "1463:     case BGPTYPE_AS4_PATH:",
          "1464:     case BGPTYPE_AS_PATH:",
          "1465:         if (len % 2) {",
          "1466:             ND_PRINT((ndo, \"invalid len\"));",
          "1467:             break;",
          "1468:         }",
          "1469:         if (!len) {",
          "1470:             ND_PRINT((ndo, \"empty\"));",
          "1471:             break;",
          "1472:         }",
          "1482:         as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1484:         while (tptr < pptr + len) {",
          "1485:             ND_TCHECK_1(tptr);",
          "1486:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1487:                       \"?\", EXTRACT_U_1(tptr))));",
          "1488:             ND_TCHECK_1(tptr + 1);",
          "1489:             for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1490:                 ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1491:                 ND_PRINT((ndo, \"%s \",",
          "1492:                           as_printf(ndo, astostr, sizeof(astostr),",
          "1493:                 as_size == 2 ?",
          "1494:                     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1495:                     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1496:             }",
          "1497:             ND_TCHECK_1(tptr);",
          "1498:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1499:                       \"?\", EXTRACT_U_1(tptr))));",
          "1500:             ND_TCHECK_1(tptr + 1);",
          "1501:             tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1502:         }",
          "1503:         break;",
          "1504:     case BGPTYPE_NEXT_HOP:",
          "1505:         if (len != 4)",
          "1506:             ND_PRINT((ndo, \"invalid len\"));",
          "1507:         else {",
          "1508:             ND_TCHECK_4(tptr);",
          "1509:             ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1510:         }",
          "1511:         break;",
          "1512:     case BGPTYPE_MULTI_EXIT_DISC:",
          "1513:     case BGPTYPE_LOCAL_PREF:",
          "1514:         if (len != 4)",
          "1515:             ND_PRINT((ndo, \"invalid len\"));",
          "1516:         else {",
          "1517:             ND_TCHECK_4(tptr);",
          "1518:             ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1519:         }",
          "1520:         break;",
          "1521:     case BGPTYPE_ATOMIC_AGGREGATE:",
          "1522:         if (len != 0)",
          "1523:             ND_PRINT((ndo, \"invalid len\"));",
          "1524:         break;",
          "1525:     case BGPTYPE_AGGREGATOR:",
          "1531:         if (len != 6 && len != 8) {",
          "1532:             ND_PRINT((ndo, \"invalid len\"));",
          "1533:             break;",
          "1534:         }",
          "1535:         ND_TCHECK_LEN(tptr, len);",
          "1536:         if (len == 6) {",
          "1537:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1538:                       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1539:                       ipaddr_string(ndo, tptr + 2)));",
          "1540:         } else {",
          "1541:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1542:                       as_printf(ndo, astostr, sizeof(astostr),",
          "1543:                       EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1544:         }",
          "1545:         break;",
          "1546:     case BGPTYPE_AGGREGATOR4:",
          "1547:         if (len != 8) {",
          "1548:             ND_PRINT((ndo, \"invalid len\"));",
          "1549:             break;",
          "1550:         }",
          "1551:         ND_TCHECK_8(tptr);",
          "1552:         ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1553:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1554:                   ipaddr_string(ndo, tptr + 4)));",
          "1555:         break;",
          "1556:     case BGPTYPE_COMMUNITIES:",
          "1557:         if (len % 4) {",
          "1558:             ND_PRINT((ndo, \"invalid len\"));",
          "1559:             break;",
          "1560:         }",
          "1561:         while (tlen>0) {",
          "1562:             uint32_t comm;",
          "1563:             ND_TCHECK_4(tptr);",
          "1564:             comm = EXTRACT_BE_U_4(tptr);",
          "1565:             switch (comm) {",
          "1566:             case BGP_COMMUNITY_NO_EXPORT:",
          "1567:                 ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1569:             case BGP_COMMUNITY_NO_ADVERT:",
          "1570:                 ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1572:             case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1573:                 ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1575:             default:",
          "1576:                 ND_PRINT((ndo, \"%u:%u%s\",",
          "1577:                          (comm >> 16) & 0xffff,",
          "1578:                          comm & 0xffff,",
          "1579:                          (tlen>4) ? \", \" : \"\"));",
          "1580:                 break;",
          "1581:             }",
          "1582:             tlen -=4;",
          "1583:             tptr +=4;",
          "1584:         }",
          "1585:         break;",
          "1586:     case BGPTYPE_ORIGINATOR_ID:",
          "1587:         if (len != 4) {",
          "1588:             ND_PRINT((ndo, \"invalid len\"));",
          "1589:             break;",
          "1590:         }",
          "1591:         ND_TCHECK_4(tptr);",
          "1592:         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1593:         break;",
          "1594:     case BGPTYPE_CLUSTER_LIST:",
          "1595:         if (len % 4) {",
          "1596:             ND_PRINT((ndo, \"invalid len\"));",
          "1597:             break;",
          "1598:         }",
          "1599:         while (tlen>0) {",
          "1600:             ND_TCHECK_4(tptr);",
          "1601:             ND_PRINT((ndo, \"%s%s\",",
          "1602:                       ipaddr_string(ndo, tptr),",
          "1603:                       (tlen>4) ? \", \" : \"\"));",
          "1604:             tlen -=4;",
          "1605:             tptr +=4;",
          "1606:         }",
          "1607:         break;",
          "1608:     case BGPTYPE_MP_REACH_NLRI:",
          "1609:         ND_TCHECK_3(tptr);",
          "1610:         af = EXTRACT_BE_U_2(tptr);",
          "1611:         safi = EXTRACT_U_1(tptr + 2);",
          "1613:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1614:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1615:                   af,",
          "1617:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1618:                   safi));",
          "1620:         switch(af<<8 | safi) {",
          "1621:         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1622:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1623:         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1624:         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1625:         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1626:         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1627:         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1628:         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1629:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1630:         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1631:         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1632:         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1633:         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1634:         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1635:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1636:         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1637:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1638:         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1639:         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1640:         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1641:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1642:         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1643:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1644:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1645:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1646:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1647:         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1648:             break;",
          "1649:         default:",
          "1650:             ND_TCHECK_LEN(tptr, tlen);",
          "1651:             ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1652:             if (ndo->ndo_vflag <= 1)",
          "1653:                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1654:             goto done;",
          "1655:             break;",
          "1656:         }",
          "1658:         tptr +=3;",
          "1660:         ND_TCHECK_1(tptr);",
          "1661:         nhlen = EXTRACT_U_1(tptr);",
          "1662:         tlen = nhlen;",
          "1663:         tptr++;",
          "1665:         if (tlen) {",
          "1666:             int nnh = 0;",
          "1667:             ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1668:             while (tlen > 0) {",
          "1669:                 if (nnh++ > 0) {",
          "1670:                     ND_PRINT((ndo,  \", \" ));",
          "1671:                 }",
          "1678:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1679:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1680:                     if (tlen < sizeof(struct in_addr)) {",
          "1681:                         ND_PRINT((ndo, \"invalid len\"));",
          "1682:                         tlen = 0;",
          "1683:                     } else {",
          "1684:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1685:                         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1686:                         tlen -= sizeof(struct in_addr);",
          "1687:                         tptr += sizeof(struct in_addr);",
          "1688:                     }",
          "1689:                     break;",
          "1693:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1694:                         ND_PRINT((ndo, \"invalid len\"));",
          "1695:                         tlen = 0;",
          "1696:                     } else {",
          "1697:                         ND_TCHECK_LEN(tptr,",
          "1698:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1699:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1700:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1701:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1702:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1703:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1704:                     }",
          "1705:                     break;",
          "1710:                     if (tlen < sizeof(struct in6_addr)) {",
          "1711:                         ND_PRINT((ndo, \"invalid len\"));",
          "1712:                         tlen = 0;",
          "1713:                     } else {",
          "1714:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1715:                         ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1716:                         tlen -= sizeof(struct in6_addr);",
          "1717:                         tptr += sizeof(struct in6_addr);",
          "1718:                     }",
          "1719:                     break;",
          "1723:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1724:                         ND_PRINT((ndo, \"invalid len\"));",
          "1725:                         tlen = 0;",
          "1726:                     } else {",
          "1727:                         ND_TCHECK_LEN(tptr,",
          "1728:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1729:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1730:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1731:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1732:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1733:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1734:                     }",
          "1735:                     break;",
          "1736:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1737:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1738:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1739:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1740:                     if (tlen < sizeof(struct in_addr)) {",
          "1741:                         ND_PRINT((ndo, \"invalid len\"));",
          "1742:                         tlen = 0;",
          "1743:                     } else {",
          "1744:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1745:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1746:                         tlen -= (sizeof(struct in_addr));",
          "1747:                         tptr += (sizeof(struct in_addr));",
          "1748:                     }",
          "1749:                     break;",
          "1753:                     ND_TCHECK_LEN(tptr, tlen);",
          "1754:                     ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1755:                     tptr += tlen;",
          "1756:                     tlen = 0;",
          "1757:                     break;",
          "1762:                     if (tlen < BGP_VPN_RD_LEN+1) {",
          "1763:                         ND_PRINT((ndo, \"invalid len\"));",
          "1764:                         tlen = 0;",
          "1765:                     } else {",
          "1766:                         ND_TCHECK_LEN(tptr, tlen);",
          "1767:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1768:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1769:                                   isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1771:                         if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1772:                             ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1774:                         else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1775:                             ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1776:                         tptr += tlen;",
          "1777:                         tlen = 0;",
          "1778:                     }",
          "1782:                     ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1785:                     tptr += tlen;",
          "1786:                     tlen = 0;",
          "1790:             }",
          "1791:         }",
          "1792:         ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1793:         tptr += tlen;",
          "1795:         ND_TCHECK_1(tptr);",
          "1796:         snpa = EXTRACT_U_1(tptr);",
          "1797:         tptr++;",
          "1799:         if (snpa) {",
          "1800:             ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1801:             for (/*nothing*/; snpa > 0; snpa--) {",
          "1802:                 ND_TCHECK_1(tptr);",
          "1803:                 ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1804:                 tptr += EXTRACT_U_1(tptr) + 1;",
          "1805:             }",
          "1806:         } else {",
          "1807:             ND_PRINT((ndo, \", no SNPA\"));",
          "1808:         }",
          "1810:         add_path4 = check_add_path(tptr, (len-(tptr - pptr)), 32);",
          "1811:         add_path6 = check_add_path(tptr, (len-(tptr - pptr)), 128);",
          "1813:         while (tptr < pptr + len) {",
          "1814:             switch (af<<8 | safi) {",
          "1815:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1816:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1817:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1818:                 if (add_path4) {",
          "1819:                     path_id = EXTRACT_BE_U_4(tptr);",
          "1820:                     tptr += 4;",
          "1821:                 }",
          "1822:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1823:                 if (advance == -1)",
          "1824:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1825:                 else if (advance == -2)",
          "1826:                     goto trunc;",
          "1827:                 else if (advance == -3)",
          "1829:                 else",
          "1830:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1831:                 if (add_path4) {",
          "1832:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "1835:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1836:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1837:                 if (advance == -1)",
          "1838:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1839:                 else if (advance == -2)",
          "1840:                     goto trunc;",
          "1841:                 else if (advance == -3)",
          "1843:                 else",
          "1844:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1845:                 break;",
          "1846:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1847:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1848:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1849:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1850:                 if (advance == -1)",
          "1851:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1852:                 else if (advance == -2)",
          "1853:                     goto trunc;",
          "1854:                 else",
          "1855:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1856:                 break;",
          "1857:             case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1858:                 advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1859:                 if (advance == -1)",
          "1860:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1861:                 else if (advance == -2)",
          "1862:                     goto trunc;",
          "1863:                 else",
          "1864:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1865:                 break;",
          "1867:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1868:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1869:                 if (advance == -1)",
          "1870:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1871:                 else if (advance == -2)",
          "1872:                     goto trunc;",
          "1873:                 else",
          "1874:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1875:                 break;",
          "1877:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1878:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1879:                 if (advance == -1)",
          "1880:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1881:                 else if (advance == -2)",
          "1882:                     goto trunc;",
          "1883:                 else",
          "1884:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1885:                 break;",
          "1886:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1887:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1888:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1889:                 if (add_path6) {",
          "1890:                     path_id = EXTRACT_BE_U_4(tptr);",
          "1891:                     tptr += 4;",
          "1892:                 }",
          "1893:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1894:                 if (advance == -1)",
          "1895:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1896:                 else if (advance == -2)",
          "1897:                     goto trunc;",
          "1898:                 else if (advance == -3)",
          "1900:                 else",
          "1901:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1902:                 if (add_path6) {",
          "1903:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "1904:                 }",
          "1905:                 break;",
          "1906:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1907:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1908:                 if (advance == -1)",
          "1909:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1910:                 else if (advance == -2)",
          "1911:                     goto trunc;",
          "1912:                 else if (advance == -3)",
          "1914:                 else",
          "1915:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1916:                 break;",
          "1917:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1918:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1919:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1920:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1921:                 if (advance == -1)",
          "1922:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1923:                 else if (advance == -2)",
          "1924:                     goto trunc;",
          "1925:                 else",
          "1926:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1927:                 break;",
          "1928:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1929:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1930:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1931:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1932:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1933:                 if (advance == -1)",
          "1934:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1935:                 else if (advance == -2)",
          "1936:                     goto trunc;",
          "1937:                 else",
          "1938:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1939:                 break;",
          "1940:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1941:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1942:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1943:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1944:                 if (advance == -1)",
          "1945:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1946:                 else if (advance == -2)",
          "1947:                     goto trunc;",
          "1948:                 else",
          "1949:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1950:                 break;",
          "1951:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1952:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1953:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1954:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1955:                 if (advance == -1)",
          "1956:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1957:                 else if (advance == -2)",
          "1958:                     goto trunc;",
          "1959:                 else",
          "1960:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1961:                 break;",
          "1962:             default:",
          "1963:                 ND_TCHECK_LEN(tptr, tlen);",
          "1964:                 ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1965:                 if (ndo->ndo_vflag <= 1)",
          "1966:                     print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1967:                 advance = 0;",
          "1968:                 tptr = pptr + len;",
          "1969:                 break;",
          "1970:             }",
          "1971:             if (advance < 0)",
          "1972:                 break;",
          "1973:             tptr += advance;",
          "1974:         }",
          "1975:     done:",
          "1976:         break;",
          "1978:     case BGPTYPE_MP_UNREACH_NLRI:",
          "1979:         ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1980:         af = EXTRACT_BE_U_2(tptr);",
          "1981:         safi = EXTRACT_U_1(tptr + 2);",
          "1983:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1984:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1985:                   af,",
          "1987:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1988:                   safi));",
          "1990:         if (len == BGP_MP_NLRI_MINSIZE)",
          "1991:             ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1993:         tptr += 3;",
          "1995:         add_path4 = check_add_path(tptr, (len-(tptr - pptr)), 32);",
          "1996:         add_path6 = check_add_path(tptr, (len-(tptr - pptr)), 128);",
          "1998:         while (tptr < pptr + len) {",
          "1999:             switch (af<<8 | safi) {",
          "2000:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "2001:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "2002:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "2003:                 if (add_path4) {",
          "2004:                     path_id = EXTRACT_BE_U_4(tptr);",
          "2005:                     tptr += 4;",
          "2006:                 }",
          "2007:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "2008:                 if (advance == -1)",
          "2009:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2010:                 else if (advance == -2)",
          "2011:                     goto trunc;",
          "2012:                 else if (advance == -3)",
          "2014:                 else",
          "2015:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2016:                 if (add_path4) {",
          "2017:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2018:                 }",
          "2019:                 break;",
          "2020:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "2021:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "2022:                 if (advance == -1)",
          "2023:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2024:                 else if (advance == -2)",
          "2025:                     goto trunc;",
          "2026:                 else if (advance == -3)",
          "2028:                 else",
          "2029:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2030:                 break;",
          "2031:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "2032:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "2033:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2034:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "2035:                 if (advance == -1)",
          "2036:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2037:                 else if (advance == -2)",
          "2038:                     goto trunc;",
          "2039:                 else",
          "2040:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2041:                 break;",
          "2042:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "2043:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "2044:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "2045:                 if (add_path6) {",
          "2046:                     path_id = EXTRACT_BE_U_4(tptr);",
          "2047:                     tptr += 4;",
          "2049:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "2050:                 if (advance == -1)",
          "2051:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2052:                 else if (advance == -2)",
          "2053:                     goto trunc;",
          "2054:                 else if (advance == -3)",
          "2056:                 else",
          "2057:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2058:                 if (add_path6) {",
          "2059:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2060:                 }",
          "2061:                 break;",
          "2062:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "2063:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "2064:                 if (advance == -1)",
          "2065:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2066:                 else if (advance == -2)",
          "2067:                     goto trunc;",
          "2068:                 else if (advance == -3)",
          "2070:                 else",
          "2071:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2072:                 break;",
          "2073:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "2074:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "2075:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2076:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "2077:                 if (advance == -1)",
          "2078:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2079:                 else if (advance == -2)",
          "2080:                     goto trunc;",
          "2081:                 else",
          "2082:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2083:                 break;",
          "2084:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "2085:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "2086:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "2087:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2088:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "2089:                 if (advance == -1)",
          "2090:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2091:                 else if (advance == -2)",
          "2092:                     goto trunc;",
          "2093:                 else",
          "2094:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2095:                 break;",
          "2096:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2097:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2098:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2099:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2100:                 if (advance == -1)",
          "2101:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2102:                 else if (advance == -2)",
          "2103:                     goto trunc;",
          "2104:                 else",
          "2105:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2106:                 break;",
          "2107:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2108:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2109:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2110:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2111:                 if (advance == -1)",
          "2112:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2113:                 else if (advance == -2)",
          "2114:                     goto trunc;",
          "2115:                 else",
          "2116:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2118:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2119:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2120:                 if (advance == -1)",
          "2121:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2122:                 else if (advance == -2)",
          "2123:                     goto trunc;",
          "2124:                 else",
          "2125:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2126:                 break;",
          "2128:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2129:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2130:                 if (advance == -1)",
          "2131:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2132:                 else if (advance == -2)",
          "2133:                     goto trunc;",
          "2134:                 else",
          "2135:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2136:                 break;",
          "2137:             default:",
          "2138:                 ND_TCHECK_LEN(tptr - 3, tlen);",
          "2139:                 ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2140:                 if (ndo->ndo_vflag <= 1)",
          "2141:                     print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2142:                 advance = 0;",
          "2143:                 tptr = pptr + len;",
          "2144:                 break;",
          "2145:             }",
          "2146:             if (advance < 0)",
          "2147:                 break;",
          "2148:             tptr += advance;",
          "2150:         break;",
          "2151:     case BGPTYPE_EXTD_COMMUNITIES:",
          "2152:         if (len % 8) {",
          "2153:             ND_PRINT((ndo, \"invalid len\"));",
          "2154:             break;",
          "2155:         }",
          "2156:         while (tlen>0) {",
          "2157:             uint16_t extd_comm;",
          "2159:             ND_TCHECK_2(tptr);",
          "2160:             extd_comm=EXTRACT_BE_U_2(tptr);",
          "2162:             ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2163:                       tok2str(bgp_extd_comm_subtype_values,",
          "2164:                               \"unknown extd community typecode\",",
          "2165:                               extd_comm),",
          "2166:                       extd_comm,",
          "2167:                       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2169:             ND_TCHECK_6(tptr + 2);",
          "2170:             switch(extd_comm) {",
          "2171:             case BGP_EXT_COM_RT_0:",
          "2172:             case BGP_EXT_COM_RO_0:",
          "2173:             case BGP_EXT_COM_L2VPN_RT_0:",
          "2174:                 ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2175:                           EXTRACT_BE_U_2(tptr + 2),",
          "2176:                           EXTRACT_BE_U_4(tptr + 4),",
          "2177:                           ipaddr_string(ndo, tptr+4)));",
          "2178:                 break;",
          "2179:             case BGP_EXT_COM_RT_1:",
          "2180:             case BGP_EXT_COM_RO_1:",
          "2181:             case BGP_EXT_COM_L2VPN_RT_1:",
          "2182:             case BGP_EXT_COM_VRF_RT_IMP:",
          "2183:                 ND_PRINT((ndo, \": %s:%u\",",
          "2184:                           ipaddr_string(ndo, tptr+2),",
          "2185:                           EXTRACT_BE_U_2(tptr + 6)));",
          "2186:                 break;",
          "2187:             case BGP_EXT_COM_RT_2:",
          "2188:             case BGP_EXT_COM_RO_2:",
          "2189:                 ND_PRINT((ndo, \": %s:%u\",",
          "2190:                           as_printf(ndo, astostr, sizeof(astostr),",
          "2191:                           EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2192:                 break;",
          "2193:             case BGP_EXT_COM_LINKBAND:",
          "2194:                 bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2195:                 ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2196:                           bw.f*8/1000000));",
          "2197:                 break;",
          "2198:             case BGP_EXT_COM_VPN_ORIGIN:",
          "2199:             case BGP_EXT_COM_VPN_ORIGIN2:",
          "2200:             case BGP_EXT_COM_VPN_ORIGIN3:",
          "2201:             case BGP_EXT_COM_VPN_ORIGIN4:",
          "2202:             case BGP_EXT_COM_OSPF_RID:",
          "2203:             case BGP_EXT_COM_OSPF_RID2:",
          "2204:                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2206:             case BGP_EXT_COM_OSPF_RTYPE:",
          "2207:             case BGP_EXT_COM_OSPF_RTYPE2:",
          "2208:                 ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2209:                           ipaddr_string(ndo, tptr+2),",
          "2210:                           tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2211:                                   \"unknown (0x%02x)\",",
          "2212:                                   EXTRACT_U_1((tptr + 6))),",
          "2213:                           (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2214:                           ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2215:                 break;",
          "2216:             case BGP_EXT_COM_L2INFO:",
          "2217:                 ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2218:                           tok2str(l2vpn_encaps_values,",
          "2219:                                   \"unknown encaps\",",
          "2220:                                   EXTRACT_U_1((tptr + 2))),",
          "2221:                           EXTRACT_U_1((tptr + 3)),",
          "2222:                           EXTRACT_BE_U_2(tptr + 4)));",
          "2223:                 break;",
          "2224:             case BGP_EXT_COM_SOURCE_AS:",
          "2225:                 ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2226:                 break;",
          "2227:             default:",
          "2228:                 ND_TCHECK_8(tptr);",
          "2229:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2230:                 break;",
          "2231:             }",
          "2232:             tlen -= 8;",
          "2233:             tptr += 8;",
          "2234:         }",
          "2235:         break;",
          "2237:     case BGPTYPE_PMSI_TUNNEL:",
          "2238:     {",
          "2239:         uint8_t tunnel_type, flags;",
          "2241:         ND_TCHECK_5(tptr);",
          "2242:         flags = EXTRACT_U_1(tptr);",
          "2243:         tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2244:         tlen = len;",
          "2246:         ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2247:                   tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2248:                   tunnel_type,",
          "2249:                   bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2250:                   EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2252:         tptr +=5;",
          "2253:         tlen -= 5;",
          "2255:         switch (tunnel_type) {",
          "2257:         case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2258:             ND_TCHECK_8(tptr);",
          "2259:             ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2260:                       ipaddr_string(ndo, tptr),",
          "2261:                       ipaddr_string(ndo, tptr+4)));",
          "2264:         case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2265:             ND_TCHECK_8(tptr);",
          "2266:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2267:                       ipaddr_string(ndo, tptr),",
          "2268:                       ipaddr_string(ndo, tptr+4)));",
          "2269:             break;",
          "2270:         case BGP_PMSI_TUNNEL_INGRESS:",
          "2271:             ND_TCHECK_4(tptr);",
          "2272:             ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2273:                       ipaddr_string(ndo, tptr)));",
          "2274:             break;",
          "2276:         case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2277:             ND_TCHECK_8(tptr);",
          "2278:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2279:                       ipaddr_string(ndo, tptr),",
          "2280:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2281:             break;",
          "2282:         case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2283:             ND_TCHECK_8(tptr);",
          "2284:             ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2285:                       ipaddr_string(ndo, tptr),",
          "2286:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2287:             break;",
          "2288:         default:",
          "2289:             if (ndo->ndo_vflag <= 1) {",
          "2290:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2291:             }",
          "2293:         break;",
          "2294:     }",
          "2295:     case BGPTYPE_AIGP:",
          "2296:     {",
          "2297:         uint8_t type;",
          "2298:         uint16_t length;",
          "2300:         tlen = len;",
          "2302:         while (tlen >= 3) {",
          "2304:             ND_TCHECK_3(tptr);",
          "2306:             type = EXTRACT_U_1(tptr);",
          "2307:             length = EXTRACT_BE_U_2(tptr + 1);",
          "2308:             tptr += 3;",
          "2309:             tlen -= 3;",
          "2311:             ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2312:                       tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2313:                       type, length));",
          "2315:             if (length < 3)",
          "2316:                 goto trunc;",
          "2317:             length -= 3;",
          "2322:             ND_TCHECK_LEN(tptr + 3, length);",
          "2324:             switch (type) {",
          "2326:             case BGP_AIGP_TLV:",
          "2327:                 if (length < 8)",
          "2328:                     goto trunc;",
          "2329:                 ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2330:                           EXTRACT_BE_U_8(tptr)));",
          "2331:                 break;",
          "2333:             default:",
          "2334:                 if (ndo->ndo_vflag <= 1) {",
          "2335:                     print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2336:                 }",
          "2337:             }",
          "2339:             tptr += length;",
          "2340:             tlen -= length;",
          "2341:         }",
          "2342:         break;",
          "2343:     }",
          "2344:     case BGPTYPE_ATTR_SET:",
          "2345:         ND_TCHECK_4(tptr);",
          "2346:         if (len < 4)",
          "2347:             goto trunc;",
          "2348:         ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2349:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2350:         tptr += 4;",
          "2351:         len -= 4;",
          "2353:         while (len) {",
          "2354:             u_int aflags, alenlen, alen;",
          "2356:             ND_TCHECK_2(tptr);",
          "2357:             if (len < 2)",
          "2358:                 goto trunc;",
          "2359:             aflags = EXTRACT_U_1(tptr);",
          "2360:             atype = EXTRACT_U_1(tptr + 1);",
          "2361:             tptr += 2;",
          "2362:             len -= 2;",
          "2363:             alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2364:             ND_TCHECK_LEN(tptr, alenlen);",
          "2365:             if (len < alenlen)",
          "2366:                 goto trunc;",
          "2367:             alen = bgp_attr_len(aflags, tptr);",
          "2368:             tptr += alenlen;",
          "2369:             len -= alenlen;",
          "2371:             ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2372:                       tok2str(bgp_attr_values,",
          "2373:                               \"Unknown Attribute\", atype),",
          "2374:                       atype,",
          "2375:                       alen));",
          "2377:             if (aflags) {",
          "2378:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2379:                           aflags & 0x80 ? \"O\" : \"\",",
          "2380:                           aflags & 0x40 ? \"T\" : \"\",",
          "2381:                           aflags & 0x20 ? \"P\" : \"\",",
          "2382:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2383:                 if (aflags & 0xf)",
          "2384:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2385:                 ND_PRINT((ndo, \"]: \"));",
          "2386:             }",
          "2388:             if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2389:             return 0;",
          "2390:             tptr += alen;",
          "2391:             len -= alen;",
          "2392:         }",
          "2393:         break;",
          "2395:     case BGPTYPE_LARGE_COMMUNITY:",
          "2396:         if (len == 0 || len % 12) {",
          "2397:             ND_PRINT((ndo, \"invalid len\"));",
          "2398:             break;",
          "2399:         }",
          "2400:         ND_PRINT((ndo, \"\\n\\t    \"));",
          "2401:         while (len > 0) {",
          "2402:             ND_TCHECK_LEN(tptr, 12);",
          "2403:             ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2404:                       EXTRACT_BE_U_4(tptr),",
          "2405:                       EXTRACT_BE_U_4(tptr + 4),",
          "2406:                       EXTRACT_BE_U_4(tptr + 8),",
          "2407:                       (len > 12) ? \", \" : \"\"));",
          "2408:             tptr += 12;",
          "2409:             len -= 12;",
          "2410:         }",
          "2411:         break;",
          "2412:     default:",
          "2413:         ND_TCHECK_LEN(pptr, len);",
          "2415:         if (ndo->ndo_vflag <= 1)",
          "2416:             print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2417:         break;",
          "2418:     }",
          "2420:         ND_TCHECK_LEN(pptr, len);",
          "2421:         print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2422:     }",
          "2423:     return 1;",
          "2426:     return 0;",
          "2433:     u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2434:     u_int i = 0;",
          "2436:     while (i < caps_len) {",
          "2437:         ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2438:         cap_type=EXTRACT_U_1(opt + i);",
          "2439:         cap_len=EXTRACT_U_1(opt + i + 1);",
          "2440:         tcap_len=cap_len;",
          "2441:         ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2442:                   tok2str(bgp_capcode_values, \"Unknown\", cap_type),",
          "2443:                   cap_type,",
          "2444:                   cap_len));",
          "2445:         ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2446:         switch (cap_type) {",
          "2447:         case BGP_CAPCODE_MP:",
          "2448:             ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2449:                tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(opt + i + 2)),",
          "2450:                EXTRACT_BE_U_2(opt + i + 2),",
          "2451:                tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1(opt + i + 5)),",
          "2452:                EXTRACT_U_1(opt + i + 5)));",
          "2453:             break;",
          "2454:         case BGP_CAPCODE_RESTART:",
          "2455:             ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2456:                       ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2457:                       EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2458:             tcap_len-=2;",
          "2459:             cap_offset=4;",
          "2460:             while(tcap_len>=4) {",
          "2461:                 ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2462:                           tok2str(af_values,\"Unknown\",",
          "2463:                                   EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2464:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2465:                           tok2str(bgp_safi_values,\"Unknown\",",
          "2466:                                   EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2467:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2468:                           ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2469:                 tcap_len -= 4;",
          "2470:                 cap_offset += 4;",
          "2471:             }",
          "2472:             break;",
          "2473:         case BGP_CAPCODE_RR:",
          "2474:         case BGP_CAPCODE_RR_CISCO:",
          "2475:             break;",
          "2476:         case BGP_CAPCODE_AS_NEW:",
          "2481:             if (cap_len == 4) {",
          "2482:             ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2483:                       as_printf(ndo, astostr, sizeof(astostr),",
          "2484:                       EXTRACT_BE_U_4(opt + i + 2))));",
          "2485:             }",
          "2486:             break;",
          "2487:         case BGP_CAPCODE_ADD_PATH:",
          "2488:             cap_offset=2;",
          "2489:             if (tcap_len == 0) {",
          "2491:                 break;",
          "2492:             }",
          "2493:             while (tcap_len > 0) {",
          "2494:                 if (tcap_len < 4) {",
          "2495:                     ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2498:                 ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2499:                           tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2500:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2501:                           tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2502:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2503:                           tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2504:                 ));",
          "2505:                 tcap_len -= 4;",
          "2506:                 cap_offset += 4;",
          "2507:             }",
          "2508:             break;",
          "2509:         default:",
          "2510:             ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2511:                       cap_type));",
          "2512:             if (ndo->ndo_vflag <= 1)",
          "2513:                 print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2514:                                    cap_len);",
          "2515:             break;",
          "2517:         if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2518:             print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2519:         }",
          "2520:         i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2521:     }",
          "2522:     return;",
          "2525:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2532:     const struct bgp_open *bgp_open_header;",
          "2533:     u_int optslen;",
          "2534:     const struct bgp_opt *bgpopt;",
          "2535:     const u_char *opt;",
          "2536:     u_int i;",
          "2538:     ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2539:     if (length < BGP_OPEN_SIZE)",
          "2540:         goto trunc;",
          "2542:     bgp_open_header = (const struct bgp_open *)dat;",
          "2544:     ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2545:         EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2546:     ND_PRINT((ndo, \"my AS %s, \",",
          "2547:         as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2548:     ND_PRINT((ndo, \"Holdtime %us, \",",
          "2549:         EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2550:     ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2551:     optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2552:     ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2554:     opt = dat + BGP_OPEN_SIZE;",
          "2555:     length -= BGP_OPEN_SIZE;",
          "2557:     i = 0;",
          "2558:     while (i < optslen) {",
          "2559:         uint8_t opt_type, opt_len;",
          "2561:         ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2562:         if (length < BGP_OPT_SIZE + i)",
          "2563:             goto trunc;",
          "2564:         bgpopt = (const struct bgp_opt *)(opt + i);",
          "2565:         opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2566:         opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2567:         if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2568:             ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2569:                       opt_type, opt_len));",
          "2570:             break;",
          "2571:         }",
          "2573:         ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2574:                   tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2575:                   opt_type,",
          "2576:                   opt_len));",
          "2579:         switch(opt_type) {",
          "2581:         case BGP_OPT_CAP:",
          "2582:             bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2583:                                    opt_len);",
          "2584:             break;",
          "2586:         case BGP_OPT_AUTH:",
          "2587:         default:",
          "2588:                ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2589:                opt_type));",
          "2590:                break;",
          "2591:         }",
          "2592:         i += BGP_OPT_SIZE + opt_len;",
          "2593:     }",
          "2594:     return;",
          "2596:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2603:     const struct bgp *bgp_header;",
          "2604:     const u_char *p;",
          "2605:     int withdrawn_routes_len;",
          "2606:     char buf[MAXHOSTNAMELEN + 100];",
          "2607:     int wpfx;",
          "2608:     int len;",
          "2609:     int i;",
          "2610:     int add_path;",
          "2611:     int path_id;",
          "2613:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2614:     if (length < BGP_SIZE)",
          "2615:         goto trunc;",
          "2616:     bgp_header = (const struct bgp *)dat;",
          "2617:     p = dat + BGP_SIZE;",
          "2618:     length -= BGP_SIZE;",
          "2621:     ND_TCHECK_2(p);",
          "2622:     if (length < 2)",
          "2623:         goto trunc;",
          "2624:     withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2625:     p += 2;",
          "2626:     length -= 2;",
          "2627:     if (withdrawn_routes_len > 1) {",
          "2633:         ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2634:         if (length < withdrawn_routes_len)",
          "2635:             goto trunc;",
          "2636:         ND_PRINT((ndo, \"\\n\\t  Withdrawn routes:\"));",
          "2637:         add_path = check_add_path(p, withdrawn_routes_len, 32);",
          "2638:         while (withdrawn_routes_len > 0) {",
          "2639:             if (add_path) {",
          "2640:                 path_id = EXTRACT_BE_U_4(p);",
          "2641:                 p += 4;",
          "2642:                 length -= 4;",
          "2643:                 withdrawn_routes_len -= 4;",
          "2644:             }",
          "2645:             wpfx = decode_prefix4(ndo, p, withdrawn_routes_len, buf, sizeof(buf));",
          "2646:             if (wpfx == -1) {",
          "2647:                 ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2648:                 break;",
          "2649:             } else if (wpfx == -2)",
          "2650:                 goto trunc;",
          "2651:             else if (wpfx == -3)",
          "2653:             else {",
          "2654:                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2655:                 if (add_path) {",
          "2656:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2658:                 p += wpfx;",
          "2659:                 length -= wpfx;",
          "2660:                 withdrawn_routes_len -= wpfx;",
          "2661:             }",
          "2663:     } else {",
          "2664:         p += withdrawn_routes_len;",
          "2665:         length -= withdrawn_routes_len;",
          "2666:     }",
          "2668:     ND_TCHECK_2(p);",
          "2669:     if (length < 2)",
          "2670:         goto trunc;",
          "2671:     len = EXTRACT_BE_U_2(p);",
          "2672:     p += 2;",
          "2673:     length -= 2;",
          "2675:     if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2677:         ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2678:         return;",
          "2679:     }",
          "2681:     if (len) {",
          "2683:         while (len) {",
          "2684:             int aflags, atype, alenlen, alen;",
          "2686:             ND_TCHECK_2(p);",
          "2687:             if (len < 2)",
          "2688:                 goto trunc;",
          "2689:             if (length < 2)",
          "2690:                 goto trunc;",
          "2691:             aflags = EXTRACT_U_1(p);",
          "2692:             atype = EXTRACT_U_1(p + 1);",
          "2693:             p += 2;",
          "2694:             len -= 2;",
          "2695:             length -= 2;",
          "2696:             alenlen = bgp_attr_lenlen(aflags, p);",
          "2697:             ND_TCHECK_LEN(p, alenlen);",
          "2698:             if (len < alenlen)",
          "2699:                 goto trunc;",
          "2700:             if (length < alenlen)",
          "2701:                 goto trunc;",
          "2702:             alen = bgp_attr_len(aflags, p);",
          "2703:             p += alenlen;",
          "2704:             len -= alenlen;",
          "2705:             length -= alenlen;",
          "2707:             ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2708:                       tok2str(bgp_attr_values, \"Unknown Attribute\", atype),",
          "2709:                       atype,",
          "2710:                       alen));",
          "2712:             if (aflags) {",
          "2713:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2714:                           aflags & 0x80 ? \"O\" : \"\",",
          "2715:                           aflags & 0x40 ? \"T\" : \"\",",
          "2716:                           aflags & 0x20 ? \"P\" : \"\",",
          "2717:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2718:                 if (aflags & 0xf)",
          "2719:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2720:                 ND_PRINT((ndo, \"]: \"));",
          "2721:             }",
          "2722:             if (len < alen)",
          "2723:                 goto trunc;",
          "2724:             if (length < alen)",
          "2725:                 goto trunc;",
          "2726:             if (!bgp_attr_print(ndo, atype, p, alen))",
          "2727:                 goto trunc;",
          "2728:             p += alen;",
          "2729:             len -= alen;",
          "2730:             length -= alen;",
          "2732:     }",
          "2734:     if (length) {",
          "2735:         add_path = check_add_path(p, length, 32);",
          "2736:         ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2737:         while (length > 0) {",
          "2738:             if (add_path) {",
          "2739:                 path_id = EXTRACT_BE_U_4(p);",
          "2740:                 p += 4;",
          "2741:                 length -= 4;",
          "2742:             }",
          "2743:             i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2744:             if (i == -1) {",
          "2745:                 ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2746:                 break;",
          "2747:             } else if (i == -2)",
          "2748:                 goto trunc;",
          "2749:             else if (i == -3)",
          "2751:             else {",
          "2752:                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2753:                 if (add_path) {",
          "2754:                     ND_PRINT((ndo, \"   Path Id: %d\", path_id));",
          "2755:                 }",
          "2756:                 p += i;",
          "2757:                 length -= i;",
          "2758:             }",
          "2759:         }",
          "2760:     }",
          "2761:     return;",
          "2763:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2768:                const u_char *dat, int length)",
          "2770:     const struct bgp_notification *bgp_notification_header;",
          "2771:     const u_char *tptr;",
          "2772:     uint8_t bgpn_major, bgpn_minor;",
          "2773:     uint8_t shutdown_comm_length;",
          "2774:     uint8_t remainder_offset;",
          "2776:     ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2777:     if (length<BGP_NOTIFICATION_SIZE)",
          "2778:         return;",
          "2780:     bgp_notification_header = (const struct bgp_notification *)dat;",
          "2781:     bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2782:     bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2784:     ND_PRINT((ndo, \", %s (%u)\",",
          "2785:               tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2786:                       bgpn_major),",
          "2787:               bgpn_major));",
          "2789:     switch (bgpn_major) {",
          "2791:     case BGP_NOTIFY_MAJOR_MSG:",
          "2792:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2793:                   tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2794:                           bgpn_minor),",
          "2795:                   bgpn_minor));",
          "2796:         break;",
          "2797:     case BGP_NOTIFY_MAJOR_OPEN:",
          "2798:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2799:                   tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2800:                           bgpn_minor),",
          "2801:                   bgpn_minor));",
          "2802:         break;",
          "2803:     case BGP_NOTIFY_MAJOR_UPDATE:",
          "2804:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2805:                   tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2806:                           bgpn_minor),",
          "2807:                   bgpn_minor));",
          "2808:         break;",
          "2809:     case BGP_NOTIFY_MAJOR_FSM:",
          "2810:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2811:                   tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2812:                           bgpn_minor),",
          "2813:                   bgpn_minor));",
          "2814:         break;",
          "2815:     case BGP_NOTIFY_MAJOR_CAP:",
          "2816:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2817:                   tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2818:                           bgpn_minor),",
          "2819:                   bgpn_minor));",
          "2820:         break;",
          "2821:     case BGP_NOTIFY_MAJOR_CEASE:",
          "2822:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2823:                   tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2824:                           bgpn_minor),",
          "2825:                   bgpn_minor));",
          "2830:         if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2831:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2832:             ND_TCHECK_7(tptr);",
          "2833:             ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2834:                       tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(tptr)),",
          "2835:                       EXTRACT_BE_U_2(tptr),",
          "2836:                       tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2837:                       EXTRACT_U_1((tptr + 2)),",
          "2838:                       EXTRACT_BE_U_4(tptr + 3)));",
          "2839:         }",
          "2844:         if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2845:              bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2846:              length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2847:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2848:             ND_TCHECK_1(tptr);",
          "2849:             shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2850:             remainder_offset = 0;",
          "2852:             if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2853:                 shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2854:                 ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2855:             }",
          "2856:             else if (shutdown_comm_length == 0) {",
          "2857:                 ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2858:                 remainder_offset += 1;",
          "2859:             }",
          "2861:             else {",
          "2862:                 ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2863:                 ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2864:                 (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2865:                 ND_PRINT((ndo, \"\\\"\"));",
          "2866:                 remainder_offset += shutdown_comm_length + 1;",
          "2867:             }",
          "2869:             if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2870:                 ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2871:                 hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2872:             }",
          "2874:         break;",
          "2875:     default:",
          "2876:         break;",
          "2877:     }",
          "2879:     return;",
          "2881:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2886:             const u_char *pptr, int len)",
          "2888:     const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2890:     ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2893:     if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2894:         return;",
          "2896:     bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2898:     ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2899:               tok2str(af_values,\"Unknown\",",
          "2900:                       EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2901:               EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2902:               tok2str(bgp_safi_values,\"Unknown\",",
          "2903:                       EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2904:               EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2906:     if (ndo->ndo_vflag > 1) {",
          "2907:         ND_TCHECK_LEN(pptr, len);",
          "2908:         print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2909:     }",
          "2911:     return;",
          "2913:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2918:          const u_char *dat, u_int length)",
          "2920:     const struct bgp *bgp_header;",
          "2921:     uint8_t bgp_type;",
          "2923:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2924:     bgp_header = (const struct bgp *)dat;",
          "2925:     bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2927:     ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2928:               tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2929:               bgp_type,",
          "2930:               length));",
          "2932:     switch (bgp_type) {",
          "2933:     case BGP_OPEN:",
          "2934:         bgp_open_print(ndo, dat, length);",
          "2935:         break;",
          "2936:     case BGP_UPDATE:",
          "2937:         bgp_update_print(ndo, dat, length);",
          "2938:         break;",
          "2939:     case BGP_NOTIFICATION:",
          "2940:         bgp_notification_print(ndo, dat, length);",
          "2941:         break;",
          "2942:     case BGP_KEEPALIVE:",
          "2943:         break;",
          "2944:     case BGP_ROUTE_REFRESH:",
          "2945:         bgp_route_refresh_print(ndo, dat, length);",
          "2946:         break;",
          "2947:     default:",
          "2949:         ND_TCHECK_LEN(dat, length);",
          "2950:         ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2951:         print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2952:         break;",
          "2953:     }",
          "2954:     return 1;",
          "2956:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2957:     return 0;",
          "2962:       const u_char *dat, int length)",
          "2964:     const u_char *p;",
          "2965:     const u_char *ep;",
          "2966:     const u_char *start;",
          "2967:     const u_char marker[] = {",
          "2968:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2969:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2970:     };",
          "2971:     const struct bgp *bgp_header;",
          "2972:     uint16_t hlen;",
          "2974:     ep = dat + length;",
          "2975:     if (ndo->ndo_snapend < dat + length)",
          "2976:         ep = ndo->ndo_snapend;",
          "2978:     ND_PRINT((ndo, \": BGP\"));",
          "2981:         return;",
          "2983:     p = dat;",
          "2984:     start = p;",
          "2985:     while (p < ep) {",
          "2986:         if (!ND_TTEST_1(p))",
          "2987:             break;",
          "2988:         if (EXTRACT_U_1(p) != 0xff) {",
          "2989:             p++;",
          "2990:             continue;",
          "2991:         }",
          "2993:         if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "2994:             break;",
          "2995:         if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "2996:             p++;",
          "2997:             continue;",
          "2998:         }",
          "3001:         ND_TCHECK_LEN(p, BGP_SIZE);",
          "3002:         bgp_header = (const struct bgp *)p;",
          "3004:         if (start != p)",
          "3005:             ND_PRINT((ndo, \" [|BGP]\"));",
          "3007:         hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "3008:         if (hlen < BGP_SIZE) {",
          "3009:             ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "3010:                       BGP_SIZE));",
          "3011:             break;",
          "3012:         }",
          "3014:         if (ND_TTEST_LEN(p, hlen)) {",
          "3015:             if (!bgp_pdu_print(ndo, p, hlen))",
          "3017:             p += hlen;",
          "3018:             start = p;",
          "3019:         } else {",
          "3020:             ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "3021:                       tok2str(bgp_msg_values,",
          "3022:                               \"Unknown Message Type\",",
          "3023:                               EXTRACT_U_1(bgp_header->bgp_type))));",
          "3024:             break;",
          "3025:         }",
          "3026:     }",
          "3028:     return;",
          "3031:     ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae1a0ebcd662b1d1f5f66b89c4b94ac090143282",
      "candidate_info": {
        "commit_hash": "ae1a0ebcd662b1d1f5f66b89c4b94ac090143282",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/ae1a0ebcd662b1d1f5f66b89c4b94ac090143282",
        "files": [
          "print-bgp.c"
        ],
        "message": "Clean up white space.\n\nConsistently use 4-space, no-tab indentation.",
        "before_after_code_files": [
          "print-bgp.c||print-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"l2vpn.h\"",
          "50: struct bgp {",
          "54: };",
          "61: #define BGP_ROUTE_REFRESH       5",
          "63: static const struct tok bgp_msg_values[] = {",
          "",
          "[Removed Lines]",
          "51:  nd_byte     bgp_marker[16];",
          "52:  nd_uint16_t bgp_len;",
          "53:  nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN  1",
          "58: #define BGP_UPDATE  2",
          "59: #define BGP_NOTIFICATION 3",
          "60: #define BGP_KEEPALIVE  4",
          "",
          "[Added Lines]",
          "51:     nd_byte     bgp_marker[16];",
          "52:     nd_uint16_t bgp_len;",
          "53:     nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN                1",
          "58: #define BGP_UPDATE              2",
          "59: #define BGP_NOTIFICATION        3",
          "60: #define BGP_KEEPALIVE           4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: };",
          "72: struct bgp_open {",
          "82: };",
          "85: struct bgp_opt {",
          "89: };",
          "93: struct bgp_notification {",
          "99: };",
          "102: struct bgp_route_refresh {",
          "109: };",
          "110: #define BGP_ROUTE_REFRESH_SIZE          23",
          "112: #define bgp_attr_lenlen(flags, p) \\",
          "114: #define bgp_attr_len(flags, p) \\",
          "",
          "[Removed Lines]",
          "73:  nd_byte     bgpo_marker[16];",
          "74:  nd_uint16_t bgpo_len;",
          "75:  nd_uint8_t  bgpo_type;",
          "76:  nd_uint8_t  bgpo_version;",
          "77:  nd_uint16_t bgpo_myas;",
          "78:  nd_uint16_t bgpo_holdtime;",
          "79:  nd_uint32_t bgpo_id;",
          "80:  nd_uint8_t  bgpo_optlen;",
          "86:  nd_uint8_t bgpopt_type;",
          "87:  nd_uint8_t bgpopt_len;",
          "94:  nd_byte     bgpn_marker[16];",
          "95:  nd_uint16_t bgpn_len;",
          "96:  nd_uint8_t  bgpn_type;",
          "97:  nd_uint8_t  bgpn_major;",
          "98:  nd_uint8_t  bgpn_minor;",
          "103:  nd_byte     bgp_marker[16];",
          "104:  nd_uint16_t len;",
          "106:  nd_uint16_t afi;",
          "107:  nd_uint8_t  res;",
          "108:  nd_uint8_t  safi;",
          "113:  (((flags) & 0x10) ? 2 : 1)",
          "115:  (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN   1",
          "118: #define BGPTYPE_AS_PATH   2",
          "119: #define BGPTYPE_NEXT_HOP  3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC  4",
          "121: #define BGPTYPE_LOCAL_PREF  5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE 6",
          "123: #define BGPTYPE_AGGREGATOR  7",
          "",
          "[Added Lines]",
          "73:     nd_byte     bgpo_marker[16];",
          "74:     nd_uint16_t bgpo_len;",
          "75:     nd_uint8_t  bgpo_type;",
          "76:     nd_uint8_t  bgpo_version;",
          "77:     nd_uint16_t bgpo_myas;",
          "78:     nd_uint16_t bgpo_holdtime;",
          "79:     nd_uint32_t bgpo_id;",
          "80:     nd_uint8_t  bgpo_optlen;",
          "86:     nd_uint8_t bgpopt_type;",
          "87:     nd_uint8_t bgpopt_len;",
          "94:     nd_byte     bgpn_marker[16];",
          "95:     nd_uint16_t bgpn_len;",
          "96:     nd_uint8_t  bgpn_type;",
          "97:     nd_uint8_t  bgpn_major;",
          "98:     nd_uint8_t  bgpn_minor;",
          "103:     nd_byte     bgp_marker[16];",
          "104:     nd_uint16_t len;",
          "106:     nd_uint16_t afi;",
          "107:     nd_uint8_t  res;",
          "108:     nd_uint8_t  safi;",
          "113:     (((flags) & 0x10) ? 2 : 1)",
          "115:     (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN                   1",
          "118: #define BGPTYPE_AS_PATH                  2",
          "119: #define BGPTYPE_NEXT_HOP                 3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC          4",
          "121: #define BGPTYPE_LOCAL_PREF               5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE         6",
          "123: #define BGPTYPE_AGGREGATOR               7",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404: };",
          "",
          "[Removed Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT   0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT   0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED 0xffffff03",
          "",
          "[Added Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT              0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT              0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED    0xffffff03",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444: #define BGP_EXT_COM_EIGRP_EXT_REMPROTO_REMMETRIC 0x8805",
          "446: static const struct tok bgp_extd_comm_flag_values[] = {",
          "",
          "[Removed Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN   0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY  0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW 0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU  0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID  0x8804",
          "",
          "[Added Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN                    0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY        0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW       0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU        0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID        0x8804",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "502: static const struct tok bgp_add_path_recvsend[] = {",
          "507: };",
          "509: static char astostr[20];",
          "",
          "[Removed Lines]",
          "503:   { 1, \"Receive\" },",
          "504:   { 2, \"Send\" },",
          "505:   { 3, \"Both\" },",
          "506:   { 0, NULL },",
          "",
          "[Added Lines]",
          "503:     { 1, \"Receive\" },",
          "504:     { 2, \"Send\" },",
          "505:     { 3, \"Both\" },",
          "506:     { 0, NULL },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521: as_printf(netdissect_options *ndo,",
          "522:           char *str, int size, u_int asnum)",
          "523: {",
          "530: }",
          "532: #define ITEMCHECK(minlen) if (itemlen < minlen) goto badtlv;",
          "",
          "[Removed Lines]",
          "524:  if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:   snprintf(str, size, \"%u\", asnum);",
          "526:  } else {",
          "527:   snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:  }",
          "529:  return str;",
          "",
          "[Added Lines]",
          "524:     if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:         snprintf(str, size, \"%u\", asnum);",
          "526:     } else {",
          "527:         snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:     }",
          "529:     return str;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "535: decode_prefix4(netdissect_options *ndo,",
          "536:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "537: {",
          "560: trunc:",
          "563: badtlv:",
          "565: }",
          "567: static int",
          "568: decode_labeled_prefix4(netdissect_options *ndo,",
          "569:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "570: {",
          "614: trunc:",
          "617: badtlv:",
          "619: }",
          "",
          "[Removed Lines]",
          "538:  struct in_addr addr;",
          "539:  u_int plen, plenbytes;",
          "541:  ND_TCHECK_1(pptr);",
          "542:  ITEMCHECK(1);",
          "543:  plen = EXTRACT_U_1(pptr);",
          "544:  if (32 < plen)",
          "545:   return -1;",
          "546:  itemlen -= 1;",
          "548:  memset(&addr, 0, sizeof(addr));",
          "549:  plenbytes = (plen + 7) / 8;",
          "550:  ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:  ITEMCHECK(plenbytes);",
          "552:  memcpy(&addr, pptr + 1, plenbytes);",
          "553:  if (plen % 8) {",
          "554:   ((u_char *)&addr)[plenbytes - 1] &=",
          "555:    ((0xff00 >> (plen % 8)) & 0xff);",
          "556:  }",
          "557:  snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "558:  return 1 + plenbytes;",
          "561:  return -2;",
          "564:  return -3;",
          "571:  struct in_addr addr;",
          "572:  u_int plen, plenbytes;",
          "575:  ND_TCHECK_4(pptr);",
          "576:  ITEMCHECK(4);",
          "580:            the label length (actually the label + COS bits)",
          "581:            is added to the prefix length;",
          "582:            we also do only read out just one label -",
          "583:            there is no real application for advertisement of",
          "584:            stacked labels in a single BGP message",
          "587:  if (24 > plen)",
          "588:   return -1;",
          "592:  if (32 < plen)",
          "593:   return -1;",
          "594:  itemlen -= 4;",
          "596:  memset(&addr, 0, sizeof(addr));",
          "597:  plenbytes = (plen + 7) / 8;",
          "598:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "599:  ITEMCHECK(plenbytes);",
          "600:  memcpy(&addr, pptr + 4, plenbytes);",
          "601:  if (plen % 8) {",
          "602:   ((u_char *)&addr)[plenbytes - 1] &=",
          "603:    ((0xff00 >> (plen % 8)) & 0xff);",
          "604:  }",
          "606:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "607:                  ipaddr_string(ndo, &addr),",
          "608:                  plen,",
          "609:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "610:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "612:  return 4 + plenbytes;",
          "615:  return -2;",
          "618:  return -3;",
          "",
          "[Added Lines]",
          "538:     struct in_addr addr;",
          "539:     u_int plen, plenbytes;",
          "541:     ND_TCHECK_1(pptr);",
          "542:     ITEMCHECK(1);",
          "543:     plen = EXTRACT_U_1(pptr);",
          "544:     if (32 < plen)",
          "545:         return -1;",
          "546:     itemlen -= 1;",
          "548:     memset(&addr, 0, sizeof(addr));",
          "549:     plenbytes = (plen + 7) / 8;",
          "550:     ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:     ITEMCHECK(plenbytes);",
          "552:     memcpy(&addr, pptr + 1, plenbytes);",
          "553:     if (plen % 8) {",
          "554:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "555:     }",
          "556:     snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "557:     return 1 + plenbytes;",
          "560:     return -2;",
          "563:     return -3;",
          "570:     struct in_addr addr;",
          "571:     u_int plen, plenbytes;",
          "574:     ND_TCHECK_4(pptr);",
          "575:     ITEMCHECK(4);",
          "579:        the label length (actually the label + COS bits)",
          "580:        is added to the prefix length;",
          "581:        we also do only read out just one label -",
          "582:        there is no real application for advertisement of",
          "583:        stacked labels in a single BGP message",
          "586:     if (24 > plen)",
          "587:         return -1;",
          "591:     if (32 < plen)",
          "592:         return -1;",
          "593:     itemlen -= 4;",
          "595:     memset(&addr, 0, sizeof(addr));",
          "596:     plenbytes = (plen + 7) / 8;",
          "597:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "598:     ITEMCHECK(plenbytes);",
          "599:     memcpy(&addr, pptr + 4, plenbytes);",
          "600:     if (plen % 8) {",
          "601:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "602:     }",
          "604:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "605:              ipaddr_string(ndo, &addr),",
          "606:              plen,",
          "607:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "608:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "610:     return 4 + plenbytes;",
          "613:     return -2;",
          "616:     return -3;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "690:     offset = strlen(buf);",
          "691:     if (addr_length) {",
          "692:         snprintf(buf + offset, buflen - offset, \", Source %s\",",
          "694:         pptr += (addr_length >> 3);",
          "695:     }",
          "",
          "[Removed Lines]",
          "693:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "691:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "705:     offset = strlen(buf);",
          "706:     if (addr_length) {",
          "707:         snprintf(buf + offset, buflen - offset, \", Group %s\",",
          "709:         pptr += (addr_length >> 3);",
          "710:     }",
          "",
          "[Removed Lines]",
          "708:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "706:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "740:     case 1:",
          "741:         snprintf(pos, sizeof(rd) - (pos - rd), \"%u.%u.%u.%u:%u\",",
          "745:         break;",
          "748:     case 2:",
          "754:         break;",
          "755:     default:",
          "756:         snprintf(pos, sizeof(rd) - (pos - rd), \"unknown RD format\");",
          "",
          "[Removed Lines]",
          "742:             EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "743:             EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "744:             EXTRACT_BE_U_2(pptr + 6));",
          "749:  snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "750:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "751:      EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "752:      EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "753:      EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "[Added Lines]",
          "740:                  EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "741:                  EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "742:                  EXTRACT_BE_U_2(pptr + 6));",
          "747:         snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "748:                  as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "749:                  EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "750:                  EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "751:                  EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "765: decode_rt_routing_info(netdissect_options *ndo,",
          "766:                        const u_char *pptr, char *buf, u_int buflen)",
          "767: {",
          "816: trunc:",
          "818: }",
          "820: static int",
          "821: decode_labeled_vpn_prefix4(netdissect_options *ndo,",
          "822:                            const u_char *pptr, char *buf, u_int buflen)",
          "823: {",
          "855: trunc:",
          "857: }",
          "",
          "[Removed Lines]",
          "768:  uint8_t route_target[8];",
          "769:  u_int plen;",
          "773:  ND_TCHECK_1(pptr);",
          "780:  if (0 == plen) {",
          "782:   snprintf(buf, buflen, \"default route target\");",
          "783:   return 1;",
          "784:  }",
          "786:  if (32 > plen)",
          "787:   return -1;",
          "790:  ND_TCHECK_4(pptr + 1);",
          "791:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "795:  if (64 < plen)",
          "796:   return -1;",
          "802:  memset(&route_target, 0, sizeof(route_target));",
          "803:  ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "804:  memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "806:  if (plen % 8) {",
          "807:   ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "808:    ((0xff00 >> (plen % 8)) & 0xff);",
          "809:  }",
          "810:  snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "811:      asbuf,",
          "812:      bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "814:  return 5 + (plen + 7) / 8;",
          "817:  return -2;",
          "824:  struct in_addr addr;",
          "825:  u_int plen;",
          "827:  ND_TCHECK_1(pptr);",
          "830:  if ((24+64) > plen)",
          "831:   return -1;",
          "835:  if (32 < plen)",
          "836:   return -1;",
          "838:  memset(&addr, 0, sizeof(addr));",
          "839:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "840:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "841:  if (plen % 8) {",
          "842:   ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "843:    ((0xff00 >> (plen % 8)) & 0xff);",
          "844:  }",
          "846:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "847:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "848:                  ipaddr_string(ndo, &addr),",
          "849:                  plen,",
          "850:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "851:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "853:  return 12 + (plen + 7) / 8;",
          "856:  return -2;",
          "",
          "[Added Lines]",
          "766:     uint8_t route_target[8];",
          "767:     u_int plen;",
          "771:     ND_TCHECK_1(pptr);",
          "778:     if (0 == plen) {",
          "780:         snprintf(buf, buflen, \"default route target\");",
          "781:         return 1;",
          "782:     }",
          "784:     if (32 > plen)",
          "785:         return -1;",
          "788:     ND_TCHECK_4(pptr + 1);",
          "789:     as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "793:     if (64 < plen)",
          "794:         return -1;",
          "800:     memset(&route_target, 0, sizeof(route_target));",
          "801:     ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "802:     memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "804:     if (plen % 8) {",
          "805:         ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "806:             ((0xff00 >> (plen % 8)) & 0xff);",
          "807:     }",
          "808:     snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "809:              asbuf,",
          "810:              bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "812:     return 5 + (plen + 7) / 8;",
          "815:     return -2;",
          "822:     struct in_addr addr;",
          "823:     u_int plen;",
          "825:     ND_TCHECK_1(pptr);",
          "828:     if ((24+64) > plen)",
          "829:         return -1;",
          "833:     if (32 < plen)",
          "834:         return -1;",
          "836:     memset(&addr, 0, sizeof(addr));",
          "837:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "838:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "839:     if (plen % 8) {",
          "840:         ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "841:             ((0xff00 >> (plen % 8)) & 0xff);",
          "842:     }",
          "844:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "845:              bgp_vpn_rd_print(ndo, pptr+4),",
          "846:              ipaddr_string(ndo, &addr),",
          "847:              plen,",
          "848:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "849:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "851:     return 12 + (plen + 7) / 8;",
          "854:     return -2;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "871: static int",
          "872: decode_mdt_vpn_nlri(netdissect_options *ndo,",
          "874: {",
          "876:     const u_char *rd;",
          "877:     const u_char *vpn_ip;",
          "",
          "[Removed Lines]",
          "873:                     const u_char *pptr, char *buf, u_int buflen)",
          "",
          "[Added Lines]",
          "871:             const u_char *pptr, char *buf, u_int buflen)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "882:     if (EXTRACT_U_1(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "884:     pptr++;",
          "887:     ND_TCHECK_8(pptr);",
          "888:     rd = pptr;",
          "892:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "893:     vpn_ip = pptr;",
          "897:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "899:     snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "902:     return MDT_VPN_NLRI_LEN + 1;",
          "904:  trunc:",
          "907: }",
          "909: #define BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI   1",
          "",
          "[Removed Lines]",
          "883:  return -1;",
          "889:     pptr+=8;",
          "894:     pptr+=sizeof(struct in_addr);",
          "900:       bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "906: return -2;",
          "",
          "[Added Lines]",
          "880:         return -1;",
          "886:     pptr += 8;",
          "891:     pptr += sizeof(struct in_addr);",
          "897:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "902:     return -2;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "928: static int",
          "929: decode_multicast_vpn(netdissect_options *ndo,",
          "931: {",
          "1013: trunc:",
          "1015: }",
          "",
          "[Removed Lines]",
          "930:                      const u_char *pptr, char *buf, u_int buflen)",
          "932:         uint8_t route_type, route_length, addr_length, sg_length;",
          "933:         u_int offset;",
          "935:  ND_TCHECK_2(pptr);",
          "936:         route_type = EXTRACT_U_1(pptr);",
          "937:         pptr++;",
          "938:         route_length = EXTRACT_U_1(pptr);",
          "939:         pptr++;",
          "941:         snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "942:                  tok2str(bgp_multicast_vpn_route_type_values,",
          "943:                          \"Unknown\", route_type),",
          "944:                  route_type, route_length);",
          "946:         switch(route_type) {",
          "947:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "948:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "949:             offset = strlen(buf);",
          "950:             snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "951:                      bgp_vpn_rd_print(ndo, pptr),",
          "952:                      bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "953:                                       (route_length - BGP_VPN_RD_LEN) << 3));",
          "954:             break;",
          "955:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "956:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "957:             offset = strlen(buf);",
          "958:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "959:   bgp_vpn_rd_print(ndo, pptr),",
          "960:   as_printf(ndo, astostr, sizeof(astostr),",
          "961:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "962:             break;",
          "964:         case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "965:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "966:             offset = strlen(buf);",
          "967:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "968:                      bgp_vpn_rd_print(ndo, pptr));",
          "969:             pptr += BGP_VPN_RD_LEN;",
          "971:             sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "972:             addr_length =  route_length - sg_length;",
          "974:             ND_TCHECK_LEN(pptr, addr_length);",
          "975:             offset = strlen(buf);",
          "976:             snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "977:                      bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "978:             break;",
          "980:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "981:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "982:             offset = strlen(buf);",
          "983:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "984:                      bgp_vpn_rd_print(ndo, pptr));",
          "985:             pptr += BGP_VPN_RD_LEN;",
          "987:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "988:             break;",
          "991:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "992:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "993:             offset = strlen(buf);",
          "994:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "995:   bgp_vpn_rd_print(ndo, pptr),",
          "996:   as_printf(ndo, astostr, sizeof(astostr),",
          "997:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "998:             pptr += BGP_VPN_RD_LEN + 4;",
          "1000:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "1001:             break;",
          "1006:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1007:         default:",
          "1008:             break;",
          "1009:         }",
          "1011:         return route_length + 2;",
          "1014:  return -2;",
          "",
          "[Added Lines]",
          "926:              const u_char *pptr, char *buf, u_int buflen)",
          "928:     uint8_t route_type, route_length, addr_length, sg_length;",
          "929:     u_int offset;",
          "931:     ND_TCHECK_2(pptr);",
          "932:     route_type = EXTRACT_U_1(pptr);",
          "933:     pptr++;",
          "934:     route_length = EXTRACT_U_1(pptr);",
          "935:     pptr++;",
          "937:     snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "938:          tok2str(bgp_multicast_vpn_route_type_values,",
          "939:                  \"Unknown\", route_type),",
          "940:          route_type, route_length);",
          "942:     switch(route_type) {",
          "943:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "944:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "945:         offset = strlen(buf);",
          "946:         snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "947:                  bgp_vpn_rd_print(ndo, pptr),",
          "948:                  bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "949:                                   (route_length - BGP_VPN_RD_LEN) << 3));",
          "950:         break;",
          "951:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "952:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "953:         offset = strlen(buf);",
          "954:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "955:         bgp_vpn_rd_print(ndo, pptr),",
          "956:         as_printf(ndo, astostr, sizeof(astostr),",
          "957:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "958:         break;",
          "960:     case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "961:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "962:         offset = strlen(buf);",
          "963:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "964:                  bgp_vpn_rd_print(ndo, pptr));",
          "965:         pptr += BGP_VPN_RD_LEN;",
          "967:         sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "968:         addr_length =  route_length - sg_length;",
          "970:         ND_TCHECK_LEN(pptr, addr_length);",
          "971:         offset = strlen(buf);",
          "972:         snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "973:                  bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "974:         break;",
          "976:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "977:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "978:         offset = strlen(buf);",
          "979:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "980:                  bgp_vpn_rd_print(ndo, pptr));",
          "981:         pptr += BGP_VPN_RD_LEN;",
          "983:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "984:         break;",
          "987:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "988:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "989:         offset = strlen(buf);",
          "990:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "991:         bgp_vpn_rd_print(ndo, pptr),",
          "992:         as_printf(ndo, astostr, sizeof(astostr),",
          "993:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "994:         pptr += BGP_VPN_RD_LEN + 4;",
          "996:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "997:         break;",
          "1002:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1003:     default:",
          "1004:         break;",
          "1005:     }",
          "1007:     return route_length + 2;",
          "1010:     return -2;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1027: #define UPDATE_BUF_BUFLEN(buf, buflen, stringlen) \\",
          "1028:     if (stringlen<0) \\",
          "1030:     else if ((u_int)stringlen>buflen) \\",
          "1031:         buflen=0; \\",
          "1032:     else { \\",
          "1033:         buflen-=stringlen; \\",
          "1035:     }",
          "1037: static int",
          "1038: decode_labeled_vpn_l2(netdissect_options *ndo,",
          "1040: {",
          "1126:         }",
          "1128: trunc:",
          "1130: }",
          "1132: int",
          "1133: decode_prefix6(netdissect_options *ndo,",
          "1134:                const u_char *pd, u_int itemlen, char *buf, u_int buflen)",
          "1135: {",
          "1158: trunc:",
          "1161: badtlv:",
          "1163: }",
          "1165: static int",
          "1166: decode_labeled_prefix6(netdissect_options *ndo,",
          "1168: {",
          "1203: trunc:",
          "1206: badtlv:",
          "1208: }",
          "1210: static int",
          "1211: decode_labeled_vpn_prefix6(netdissect_options *ndo,",
          "1212:                            const u_char *pptr, char *buf, u_int buflen)",
          "1213: {",
          "1245: trunc:",
          "1247: }",
          "1249: static int",
          "1250: decode_clnp_prefix(netdissect_options *ndo,",
          "1251:                    const u_char *pptr, char *buf, u_int buflen)",
          "1252: {",
          "1275: trunc:",
          "1277: }",
          "1279: static int",
          "1280: decode_labeled_vpn_clnp_prefix(netdissect_options *ndo,",
          "1282: {",
          "1314: trunc:",
          "1316: }",
          "",
          "[Removed Lines]",
          "1029:         buflen=0; \\",
          "1034:  buf+=stringlen; \\",
          "1039:                       const u_char *pptr, char *buf, u_int buflen)",
          "1041:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1043:  ND_TCHECK_2(pptr);",
          "1044:         plen=EXTRACT_BE_U_2(pptr);",
          "1045:         tlen=plen;",
          "1046:         pptr+=2;",
          "1051:         if (plen==12) {",
          "1053:      ND_TCHECK_LEN(pptr, 12);",
          "1054:      buf[0]='\\0';",
          "1055:      stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1056:           bgp_vpn_rd_print(ndo, pptr),",
          "1057:           ipaddr_string(ndo, pptr+8)",
          "1058:           );",
          "1059:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1060:      pptr+=12;",
          "1061:      tlen-=12;",
          "1062:      return plen;",
          "1063:         } else if (plen>17) {",
          "1067:      ND_TCHECK_LEN(pptr, 15);",
          "1068:      buf[0]='\\0';",
          "1069:      stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1070:           bgp_vpn_rd_print(ndo, pptr),",
          "1071:           EXTRACT_BE_U_2(pptr + 8),",
          "1072:           EXTRACT_BE_U_2(pptr + 10),",
          "1074:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1075:      pptr+=15;",
          "1076:      tlen-=15;",
          "1079:      while (tlen>0) {",
          "1080:   if (tlen < 3)",
          "1081:       return -1;",
          "1082:   ND_TCHECK_3(pptr);",
          "1083:   tlv_type=EXTRACT_U_1(pptr);",
          "1084:   pptr++;",
          "1085:   tlv_len=EXTRACT_BE_U_2(pptr);",
          "1086:   ttlv_len=tlv_len;",
          "1087:   pptr+=2;",
          "1089:   switch(tlv_type) {",
          "1090:   case 1:",
          "1091:       if (buflen!=0) {",
          "1092:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1093:         tlv_type,",
          "1094:         tlv_len);",
          "1095:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1096:       }",
          "1098:       while (ttlv_len>0) {",
          "1099:    ND_TCHECK_1(pptr);",
          "1100:    if (buflen!=0) {",
          "1101:        stringlen=snprintf(buf,buflen, \"%02x\",",
          "1102:                                                EXTRACT_U_1(pptr));",
          "1103:        pptr++;",
          "1104:        UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1105:    }",
          "1106:    ttlv_len--;",
          "1107:       }",
          "1108:       break;",
          "1109:   default:",
          "1110:       if (buflen!=0) {",
          "1111:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1112:         tlv_type,",
          "1113:         tlv_len);",
          "1114:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1115:       }",
          "1116:       break;",
          "1117:   }",
          "1119:      }",
          "1120:      return plen+2;",
          "1122:         } else {",
          "1125:             goto trunc;",
          "1129:         return -2;",
          "1136:  struct in6_addr addr;",
          "1137:  u_int plen, plenbytes;",
          "1139:  ND_TCHECK_1(pd);",
          "1140:  ITEMCHECK(1);",
          "1141:  plen = EXTRACT_U_1(pd);",
          "1142:  if (128 < plen)",
          "1143:   return -1;",
          "1144:  itemlen -= 1;",
          "1146:  memset(&addr, 0, sizeof(addr));",
          "1147:  plenbytes = (plen + 7) / 8;",
          "1148:  ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1149:  ITEMCHECK(plenbytes);",
          "1150:  memcpy(&addr, pd + 1, plenbytes);",
          "1151:  if (plen % 8) {",
          "1152:   addr.s6_addr[plenbytes - 1] &=",
          "1153:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1154:  }",
          "1155:  snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1156:  return 1 + plenbytes;",
          "1159:  return -2;",
          "1162:  return -3;",
          "1167:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1169:  struct in6_addr addr;",
          "1170:  u_int plen, plenbytes;",
          "1173:  ND_TCHECK_4(pptr);",
          "1174:  ITEMCHECK(4);",
          "1177:  if (24 > plen)",
          "1178:   return -1;",
          "1182:  if (128 < plen)",
          "1183:   return -1;",
          "1184:  itemlen -= 4;",
          "1186:  memset(&addr, 0, sizeof(addr));",
          "1187:  plenbytes = (plen + 7) / 8;",
          "1188:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1189:  memcpy(&addr, pptr + 4, plenbytes);",
          "1190:  if (plen % 8) {",
          "1191:   addr.s6_addr[plenbytes - 1] &=",
          "1192:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1193:  }",
          "1195:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1196:                  ip6addr_string(ndo, &addr),",
          "1197:                  plen,",
          "1198:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1199:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1201:  return 4 + plenbytes;",
          "1204:  return -2;",
          "1207:  return -3;",
          "1214:  struct in6_addr addr;",
          "1215:  u_int plen;",
          "1217:  ND_TCHECK_1(pptr);",
          "1220:  if ((24+64) > plen)",
          "1221:   return -1;",
          "1225:  if (128 < plen)",
          "1226:   return -1;",
          "1228:  memset(&addr, 0, sizeof(addr));",
          "1229:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1230:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1231:  if (plen % 8) {",
          "1232:   addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1233:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1234:  }",
          "1236:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1237:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1238:                  ip6addr_string(ndo, &addr),",
          "1239:                  plen,",
          "1240:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1241:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1243:  return 12 + (plen + 7) / 8;",
          "1246:  return -2;",
          "1253:         uint8_t addr[19];",
          "1254:  u_int plen;",
          "1256:  ND_TCHECK_1(pptr);",
          "1259:  if (152 < plen)",
          "1260:   return -1;",
          "1262:  memset(&addr, 0, sizeof(addr));",
          "1263:  ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1264:  memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1265:  if (plen % 8) {",
          "1266:   addr[(plen + 7) / 8 - 1] &=",
          "1267:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1268:  }",
          "1269:  snprintf(buf, buflen, \"%s/%d\",",
          "1270:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1271:                  plen);",
          "1273:  return 1 + (plen + 7) / 8;",
          "1276:  return -2;",
          "1281:                                const u_char *pptr, char *buf, u_int buflen)",
          "1283:         uint8_t addr[19];",
          "1284:  u_int plen;",
          "1286:  ND_TCHECK_1(pptr);",
          "1289:  if ((24+64) > plen)",
          "1290:   return -1;",
          "1294:  if (152 < plen)",
          "1295:   return -1;",
          "1297:  memset(&addr, 0, sizeof(addr));",
          "1298:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1299:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1300:  if (plen % 8) {",
          "1301:   addr[(plen + 7) / 8 - 1] &=",
          "1302:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1303:  }",
          "1305:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1306:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1307:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1308:                  plen,",
          "1309:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1310:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1312:  return 12 + (plen + 7) / 8;",
          "1315:  return -2;",
          "",
          "[Added Lines]",
          "1025:         buflen=0; \\",
          "1030:         buf+=stringlen; \\",
          "1035:               const u_char *pptr, char *buf, u_int buflen)",
          "1037:     int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1039:     ND_TCHECK_2(pptr);",
          "1040:     plen=EXTRACT_BE_U_2(pptr);",
          "1041:     tlen=plen;",
          "1042:     pptr += 2;",
          "1047:     if (plen==12) {",
          "1049:         ND_TCHECK_LEN(pptr, 12);",
          "1050:         buf[0]='\\0';",
          "1051:         stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1052:                            bgp_vpn_rd_print(ndo, pptr),",
          "1053:                            ipaddr_string(ndo, pptr+8)",
          "1054:                    );",
          "1055:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1056:         pptr+=12;",
          "1057:         tlen-=12;",
          "1058:         return plen;",
          "1059:     } else if (plen>17) {",
          "1063:         ND_TCHECK_LEN(pptr, 15);",
          "1064:         buf[0]='\\0';",
          "1065:         stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1066:                            bgp_vpn_rd_print(ndo, pptr),",
          "1067:                            EXTRACT_BE_U_2(pptr + 8),",
          "1068:                            EXTRACT_BE_U_2(pptr + 10),",
          "1070:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1071:         pptr+=15;",
          "1072:         tlen-=15;",
          "1075:         while (tlen>0) {",
          "1076:             if (tlen < 3)",
          "1077:                 return -1;",
          "1078:             ND_TCHECK_3(pptr);",
          "1079:             tlv_type=EXTRACT_U_1(pptr);",
          "1080:             pptr++;",
          "1081:             tlv_len=EXTRACT_BE_U_2(pptr);",
          "1082:             ttlv_len=tlv_len;",
          "1083:             pptr+=2;",
          "1085:             switch(tlv_type) {",
          "1086:             case 1:",
          "1087:                 if (buflen!=0) {",
          "1088:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1089:                                        tlv_type,",
          "1090:                                        tlv_len);",
          "1091:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1092:                 }",
          "1094:                 while (ttlv_len>0) {",
          "1095:                     ND_TCHECK_1(pptr);",
          "1096:                     if (buflen!=0) {",
          "1097:                         stringlen=snprintf(buf,buflen, \"%02x\",",
          "1098:                                            EXTRACT_U_1(pptr));",
          "1099:                         pptr++;",
          "1100:                         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1101:                     }",
          "1102:                     ttlv_len--;",
          "1103:                 }",
          "1104:                 break;",
          "1105:             default:",
          "1106:                 if (buflen!=0) {",
          "1107:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1108:                                        tlv_type,",
          "1109:                                        tlv_len);",
          "1110:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1111:                 }",
          "1112:                 break;",
          "1113:             }",
          "1116:         return plen+2;",
          "1118:     } else {",
          "1121:         goto trunc;",
          "1122:     }",
          "1125:     return -2;",
          "1132:     struct in6_addr addr;",
          "1133:     u_int plen, plenbytes;",
          "1135:     ND_TCHECK_1(pd);",
          "1136:     ITEMCHECK(1);",
          "1137:     plen = EXTRACT_U_1(pd);",
          "1138:     if (128 < plen)",
          "1139:         return -1;",
          "1140:     itemlen -= 1;",
          "1142:     memset(&addr, 0, sizeof(addr));",
          "1143:     plenbytes = (plen + 7) / 8;",
          "1144:     ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1145:     ITEMCHECK(plenbytes);",
          "1146:     memcpy(&addr, pd + 1, plenbytes);",
          "1147:     if (plen % 8) {",
          "1148:         addr.s6_addr[plenbytes - 1] &=",
          "1149:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1150:     }",
          "1151:     snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1152:     return 1 + plenbytes;",
          "1155:     return -2;",
          "1158:     return -3;",
          "1163:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1165:     struct in6_addr addr;",
          "1166:     u_int plen, plenbytes;",
          "1169:     ND_TCHECK_4(pptr);",
          "1170:     ITEMCHECK(4);",
          "1173:     if (24 > plen)",
          "1174:         return -1;",
          "1178:     if (128 < plen)",
          "1179:         return -1;",
          "1180:     itemlen -= 4;",
          "1182:     memset(&addr, 0, sizeof(addr));",
          "1183:     plenbytes = (plen + 7) / 8;",
          "1184:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1185:     memcpy(&addr, pptr + 4, plenbytes);",
          "1186:     if (plen % 8) {",
          "1187:         addr.s6_addr[plenbytes - 1] &=",
          "1188:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1189:     }",
          "1191:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1192:              ip6addr_string(ndo, &addr),",
          "1193:              plen,",
          "1194:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1195:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1197:     return 4 + plenbytes;",
          "1200:     return -2;",
          "1203:     return -3;",
          "1210:     struct in6_addr addr;",
          "1211:     u_int plen;",
          "1213:     ND_TCHECK_1(pptr);",
          "1216:     if ((24+64) > plen)",
          "1217:         return -1;",
          "1221:     if (128 < plen)",
          "1222:         return -1;",
          "1224:     memset(&addr, 0, sizeof(addr));",
          "1225:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1226:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1227:     if (plen % 8) {",
          "1228:         addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1229:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1230:     }",
          "1232:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1233:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1234:              ip6addr_string(ndo, &addr),",
          "1235:              plen,",
          "1236:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1237:               ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1239:     return 12 + (plen + 7) / 8;",
          "1242:     return -2;",
          "1249:     uint8_t addr[19];",
          "1250:     u_int plen;",
          "1252:     ND_TCHECK_1(pptr);",
          "1255:     if (152 < plen)",
          "1256:         return -1;",
          "1258:     memset(&addr, 0, sizeof(addr));",
          "1259:     ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1260:     memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1261:     if (plen % 8) {",
          "1262:         addr[(plen + 7) / 8 - 1] &=",
          "1263:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1264:     }",
          "1265:     snprintf(buf, buflen, \"%s/%d\",",
          "1266:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1267:              plen);",
          "1269:     return 1 + (plen + 7) / 8;",
          "1272:     return -2;",
          "1277:                    const u_char *pptr, char *buf, u_int buflen)",
          "1279:     uint8_t addr[19];",
          "1280:     u_int plen;",
          "1282:     ND_TCHECK_1(pptr);",
          "1285:     if ((24+64) > plen)",
          "1286:         return -1;",
          "1290:     if (152 < plen)",
          "1291:         return -1;",
          "1293:     memset(&addr, 0, sizeof(addr));",
          "1294:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1295:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1296:     if (plen % 8) {",
          "1297:         addr[(plen + 7) / 8 - 1] &=",
          "1298:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1299:     }",
          "1301:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1302:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1303:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1304:              plen,",
          "1305:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1306:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1308:     return 12 + (plen + 7) / 8;",
          "1311:     return -2;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1374: }",
          "1376: static int",
          "1377: bgp_attr_print(netdissect_options *ndo,",
          "1378:                u_int atype, const u_char *pptr, u_int len)",
          "1379: {",
          "1493:                 break;",
          "1541:                 break;",
          "1555:                 break;",
          "1568:                 switch(af<<8 | safi) {",
          "1569:                 case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1570:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1571:                 case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1572:                 case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1573:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1574:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1575:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1576:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1579:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1580:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1581:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1582:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1583:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1584:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1585:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1586:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1587:                 case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1588:                 case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1589:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1590:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1591:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1596:                     break;",
          "1597:                 default:",
          "1598:                     ND_TCHECK_LEN(tptr, tlen);",
          "1600:                     if (ndo->ndo_vflag <= 1)",
          "1601:                         print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1602:                     goto done;",
          "1603:                     break;",
          "1604:                 }",
          "2149:                 break;",
          "2207:                 break;",
          "2208:         }",
          "2307:                 break;",
          "2331:             break;",
          "2336:         }",
          "2339: trunc:",
          "2341: }",
          "2343: static void",
          "2344: bgp_capabilities_print(netdissect_options *ndo,",
          "2345:                        const u_char *opt, u_int caps_len)",
          "2346: {",
          "2432:                     break;",
          "2433:                 }",
          "2438:         }",
          "2441: trunc:",
          "2443: }",
          "2445: static void",
          "2446: bgp_open_print(netdissect_options *ndo,",
          "2447:                const u_char *dat, u_int length)",
          "2448: {",
          "2512: trunc:",
          "2514: }",
          "2516: static void",
          "2517: bgp_update_print(netdissect_options *ndo,",
          "2519: {",
          "2565:         }",
          "2649: trunc:",
          "2651: }",
          "2653: static void",
          "2654: bgp_notification_print(netdissect_options *ndo,",
          "2656: {",
          "2765:         }",
          "2768: trunc:",
          "2770: }",
          "2772: static void",
          "2773: bgp_route_refresh_print(netdissect_options *ndo,",
          "2775: {",
          "2800: trunc:",
          "2802: }",
          "2804: static int",
          "2805: bgp_pdu_print(netdissect_options *ndo,",
          "2807: {",
          "2843: trunc:",
          "2846: }",
          "2848: void",
          "2849: bgp_print(netdissect_options *ndo,",
          "2851: {",
          "2869:                 return;",
          "2918: trunc:",
          "2920: }",
          "",
          "[Removed Lines]",
          "1373:    return 4;",
          "1380:  int i;",
          "1381:  uint16_t af;",
          "1382:  uint8_t safi, snpa, nhlen;",
          "1384:             float f;",
          "1385:             uint32_t i;",
          "1386:         } bw;",
          "1387:  int advance;",
          "1388:  u_int tlen;",
          "1389:  const u_char *tptr;",
          "1390:  char buf[MAXHOSTNAMELEN + 100];",
          "1391:         int  as_size;",
          "1393:         tptr = pptr;",
          "1394:         tlen=len;",
          "1396:  switch (atype) {",
          "1397:  case BGPTYPE_ORIGIN:",
          "1398:   if (len != 1)",
          "1399:    ND_PRINT((ndo, \"invalid len\"));",
          "1400:   else {",
          "1401:    ND_TCHECK_1(tptr);",
          "1402:    ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1403:       \"Unknown Origin Typecode\",",
          "1404:       EXTRACT_U_1(tptr))));",
          "1405:   }",
          "1406:   break;",
          "1411:  case BGPTYPE_AS4_PATH:",
          "1412:  case BGPTYPE_AS_PATH:",
          "1413:   if (len % 2) {",
          "1414:    ND_PRINT((ndo, \"invalid len\"));",
          "1415:    break;",
          "1416:   }",
          "1417:                 if (!len) {",
          "1418:    ND_PRINT((ndo, \"empty\"));",
          "1419:    break;",
          "1420:                 }",
          "1430:                 as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1432:   while (tptr < pptr + len) {",
          "1433:    ND_TCHECK_1(tptr);",
          "1434:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1435:       \"?\", EXTRACT_U_1(tptr))));",
          "1436:    ND_TCHECK_1(tptr + 1);",
          "1437:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1438:                             ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1439:        ND_PRINT((ndo, \"%s \",",
          "1440:     as_printf(ndo, astostr, sizeof(astostr),",
          "1441:     as_size == 2 ?",
          "1442:     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1443:     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1444:                         }",
          "1445:    ND_TCHECK_1(tptr);",
          "1446:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1447:       \"?\", EXTRACT_U_1(tptr))));",
          "1448:                         ND_TCHECK_1(tptr + 1);",
          "1449:                         tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1450:   }",
          "1451:   break;",
          "1452:  case BGPTYPE_NEXT_HOP:",
          "1453:   if (len != 4)",
          "1454:    ND_PRINT((ndo, \"invalid len\"));",
          "1455:   else {",
          "1456:    ND_TCHECK_4(tptr);",
          "1457:    ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1458:   }",
          "1459:   break;",
          "1460:  case BGPTYPE_MULTI_EXIT_DISC:",
          "1461:  case BGPTYPE_LOCAL_PREF:",
          "1462:   if (len != 4)",
          "1463:    ND_PRINT((ndo, \"invalid len\"));",
          "1464:   else {",
          "1465:    ND_TCHECK_4(tptr);",
          "1466:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1467:   }",
          "1468:   break;",
          "1469:  case BGPTYPE_ATOMIC_AGGREGATE:",
          "1470:   if (len != 0)",
          "1471:    ND_PRINT((ndo, \"invalid len\"));",
          "1472:   break;",
          "1473:         case BGPTYPE_AGGREGATOR:",
          "1479:                 if (len != 6 && len != 8) {",
          "1480:                     ND_PRINT((ndo, \"invalid len\"));",
          "1481:                     break;",
          "1482:                 }",
          "1483:                 ND_TCHECK_LEN(tptr, len);",
          "1484:                 if (len == 6) {",
          "1485:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1486:    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1487:    ipaddr_string(ndo, tptr + 2)));",
          "1488:                 } else {",
          "1489:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1490:    as_printf(ndo, astostr, sizeof(astostr),",
          "1491:    EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1492:                 }",
          "1494:  case BGPTYPE_AGGREGATOR4:",
          "1495:   if (len != 8) {",
          "1496:    ND_PRINT((ndo, \"invalid len\"));",
          "1497:    break;",
          "1498:   }",
          "1499:   ND_TCHECK_8(tptr);",
          "1500:   ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1501:          as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1502:          ipaddr_string(ndo, tptr + 4)));",
          "1503:   break;",
          "1504:  case BGPTYPE_COMMUNITIES:",
          "1505:   if (len % 4) {",
          "1506:    ND_PRINT((ndo, \"invalid len\"));",
          "1507:    break;",
          "1508:   }",
          "1509:   while (tlen>0) {",
          "1510:    uint32_t comm;",
          "1511:    ND_TCHECK_4(tptr);",
          "1512:    comm = EXTRACT_BE_U_4(tptr);",
          "1513:    switch (comm) {",
          "1514:    case BGP_COMMUNITY_NO_EXPORT:",
          "1515:     ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1516:     break;",
          "1517:    case BGP_COMMUNITY_NO_ADVERT:",
          "1518:     ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1519:     break;",
          "1520:    case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1521:     ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1522:     break;",
          "1523:    default:",
          "1524:     ND_PRINT((ndo, \"%u:%u%s\",",
          "1525:                                        (comm >> 16) & 0xffff,",
          "1526:                                        comm & 0xffff,",
          "1527:                                        (tlen>4) ? \", \" : \"\"));",
          "1528:     break;",
          "1529:    }",
          "1530:                         tlen -=4;",
          "1531:                         tptr +=4;",
          "1532:   }",
          "1533:   break;",
          "1534:         case BGPTYPE_ORIGINATOR_ID:",
          "1535:   if (len != 4) {",
          "1536:    ND_PRINT((ndo, \"invalid len\"));",
          "1537:    break;",
          "1538:   }",
          "1539:   ND_TCHECK_4(tptr);",
          "1540:                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1542:         case BGPTYPE_CLUSTER_LIST:",
          "1543:   if (len % 4) {",
          "1544:    ND_PRINT((ndo, \"invalid len\"));",
          "1545:    break;",
          "1546:   }",
          "1547:                 while (tlen>0) {",
          "1548:    ND_TCHECK_4(tptr);",
          "1549:                         ND_PRINT((ndo, \"%s%s\",",
          "1550:                                ipaddr_string(ndo, tptr),",
          "1551:                                 (tlen>4) ? \", \" : \"\"));",
          "1552:                         tlen -=4;",
          "1553:                         tptr +=4;",
          "1554:                 }",
          "1556:  case BGPTYPE_MP_REACH_NLRI:",
          "1557:   ND_TCHECK_3(tptr);",
          "1558:   af = EXTRACT_BE_U_2(tptr);",
          "1559:   safi = EXTRACT_U_1(tptr + 2);",
          "1561:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1562:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1563:                        af,",
          "1565:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1566:                        safi));",
          "1577:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1578:   case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1592:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1593:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1594:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1595:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1599:                     ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1606:                 tptr +=3;",
          "1608:   ND_TCHECK_1(tptr);",
          "1609:   nhlen = EXTRACT_U_1(tptr);",
          "1610:                 tlen = nhlen;",
          "1611:                 tptr++;",
          "1613:   if (tlen) {",
          "1614:                     int nnh = 0;",
          "1615:                     ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1616:                     while (tlen > 0) {",
          "1617:                         if ( nnh++ > 0 ) {",
          "1618:                             ND_PRINT((ndo,  \", \" ));",
          "1619:                         }",
          "1620:                         switch(af<<8 | safi) {",
          "1621:                         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1622:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1623:                         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1624:                         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1625:                         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1626:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1627:                         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1628:        if (tlen < sizeof(struct in_addr)) {",
          "1629:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1630:                                 tlen = 0;",
          "1631:                             } else {",
          "1632:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1633:                                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1634:                                 tlen -= sizeof(struct in_addr);",
          "1635:                                 tptr += sizeof(struct in_addr);",
          "1636:                             }",
          "1637:                             break;",
          "1638:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1639:                         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1640:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1641:                             if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1642:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1643:                                 tlen = 0;",
          "1644:                             } else {",
          "1645:                                 ND_TCHECK_LEN(tptr,",
          "1646:                                               sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1647:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1648:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1649:                                        ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1650:                                 tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1651:                                 tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1652:                             }",
          "1653:                             break;",
          "1654:                         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1655:                         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1656:                         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1657:                         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1658:                             if (tlen < sizeof(struct in6_addr)) {",
          "1659:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1660:                                 tlen = 0;",
          "1661:                             } else {",
          "1662:                                 ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1663:                                 ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1664:                                 tlen -= sizeof(struct in6_addr);",
          "1665:                                 tptr += sizeof(struct in6_addr);",
          "1666:                             }",
          "1667:                             break;",
          "1668:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1669:                         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1670:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1671:                             if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1672:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1673:                                 tlen = 0;",
          "1674:                             } else {",
          "1675:                                 ND_TCHECK_LEN(tptr,",
          "1676:                                               sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1677:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1678:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1679:                                        ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1680:                                 tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1681:                                 tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1682:                             }",
          "1683:                             break;",
          "1684:                         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1685:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1686:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1687:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1688:                             if (tlen < sizeof(struct in_addr)) {",
          "1689:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1690:                                 tlen = 0;",
          "1691:                             } else {",
          "1692:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1693:                                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1694:                                 tlen -= (sizeof(struct in_addr));",
          "1695:                                 tptr += (sizeof(struct in_addr));",
          "1696:                             }",
          "1697:                             break;",
          "1698:                         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1699:                         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1700:                         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1701:                             ND_TCHECK_LEN(tptr, tlen);",
          "1702:                             ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1703:                             tptr += tlen;",
          "1704:                             tlen = 0;",
          "1705:                             break;",
          "1707:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1708:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1709:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1710:                             if (tlen < BGP_VPN_RD_LEN+1) {",
          "1711:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1712:                                 tlen = 0;",
          "1713:                             } else {",
          "1714:                                 ND_TCHECK_LEN(tptr, tlen);",
          "1715:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1716:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1717:                                        isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1719:                                 if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1720:                                     ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1722:                                 else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1723:                                     ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1724:                                 tptr += tlen;",
          "1725:                                 tlen = 0;",
          "1726:                             }",
          "1727:                             break;",
          "1728:                         default:",
          "1729:                             ND_TCHECK_LEN(tptr, tlen);",
          "1730:                             ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1731:                             if (ndo->ndo_vflag <= 1)",
          "1732:                                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1733:                             tptr += tlen;",
          "1734:                             tlen = 0;",
          "1735:                             goto done;",
          "1736:                             break;",
          "1737:                         }",
          "1738:                     }",
          "1739:   }",
          "1740:   ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1741:   tptr += tlen;",
          "1743:   ND_TCHECK_1(tptr);",
          "1744:   snpa = EXTRACT_U_1(tptr);",
          "1745:   tptr++;",
          "1747:   if (snpa) {",
          "1748:    ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1749:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1750:     ND_TCHECK_1(tptr);",
          "1751:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1752:     tptr += EXTRACT_U_1(tptr) + 1;",
          "1753:    }",
          "1754:   } else {",
          "1755:    ND_PRINT((ndo, \", no SNPA\"));",
          "1756:                 }",
          "1758:   while (tptr < pptr + len) {",
          "1759:                     switch (af<<8 | safi) {",
          "1760:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1761:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1762:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1763:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1764:                         if (advance == -1)",
          "1765:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1766:                         else if (advance == -2)",
          "1767:                             goto trunc;",
          "1768:                         else if (advance == -3)",
          "1770:                         else",
          "1771:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1772:                         break;",
          "1773:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1774:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1775:                         if (advance == -1)",
          "1776:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1777:                         else if (advance == -2)",
          "1778:                             goto trunc;",
          "1779:                         else if (advance == -3)",
          "1781:                         else",
          "1782:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1783:                         break;",
          "1784:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1785:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1786:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1787:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1788:                         if (advance == -1)",
          "1789:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1790:                         else if (advance == -2)",
          "1791:                             goto trunc;",
          "1792:                         else",
          "1793:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1794:                         break;",
          "1795:                     case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1796:                         advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1797:                         if (advance == -1)",
          "1798:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1799:                         else if (advance == -2)",
          "1800:                             goto trunc;",
          "1801:                         else",
          "1802:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1803:                         break;",
          "1805:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1806:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1807:                         if (advance == -1)",
          "1808:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1809:                         else if (advance == -2)",
          "1810:                             goto trunc;",
          "1811:                         else",
          "1812:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1813:                         break;",
          "1815:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1816:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1817:         if (advance == -1)",
          "1818:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1819:                         else if (advance == -2)",
          "1820:                             goto trunc;",
          "1821:                         else",
          "1822:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1823:          break;",
          "1824:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1825:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1826:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1827:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1828:                         if (advance == -1)",
          "1829:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1830:                         else if (advance == -2)",
          "1831:                             goto trunc;",
          "1832:                         else if (advance == -3)",
          "1834:                         else",
          "1835:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1836:                         break;",
          "1837:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1838:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1839:                         if (advance == -1)",
          "1840:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1841:                         else if (advance == -2)",
          "1842:                             goto trunc;",
          "1843:                         else if (advance == -3)",
          "1845:                         else",
          "1846:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1847:                         break;",
          "1848:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1849:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1850:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1851:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1852:                         if (advance == -1)",
          "1853:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1854:                         else if (advance == -2)",
          "1855:                             goto trunc;",
          "1856:                         else",
          "1857:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1858:                         break;",
          "1859:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1860:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1861:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1862:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1863:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1864:                         if (advance == -1)",
          "1865:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1866:                         else if (advance == -2)",
          "1867:                             goto trunc;",
          "1868:                         else",
          "1869:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1870:                         break;",
          "1871:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1872:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1873:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1874:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1875:                         if (advance == -1)",
          "1876:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1877:                         else if (advance == -2)",
          "1878:                             goto trunc;",
          "1879:                         else",
          "1880:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1881:                         break;",
          "1882:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1883:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1884:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1885:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1886:                         if (advance == -1)",
          "1887:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1888:                         else if (advance == -2)",
          "1889:                             goto trunc;",
          "1890:                         else",
          "1891:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1892:                         break;",
          "1893:                     default:",
          "1894:                         ND_TCHECK_LEN(tptr, tlen);",
          "1895:                         ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1896:                         if (ndo->ndo_vflag <= 1)",
          "1897:                             print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1898:                         advance = 0;",
          "1899:                         tptr = pptr + len;",
          "1900:                         break;",
          "1901:                     }",
          "1902:                     if (advance < 0)",
          "1903:                         break;",
          "1904:                     tptr += advance;",
          "1905:   }",
          "1906:         done:",
          "1907:   break;",
          "1909:  case BGPTYPE_MP_UNREACH_NLRI:",
          "1910:   ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1911:   af = EXTRACT_BE_U_2(tptr);",
          "1912:   safi = EXTRACT_U_1(tptr + 2);",
          "1914:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1915:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1916:                        af,",
          "1918:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1919:                        safi));",
          "1921:                 if (len == BGP_MP_NLRI_MINSIZE)",
          "1922:                     ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1924:   tptr += 3;",
          "1926:   while (tptr < pptr + len) {",
          "1927:                     switch (af<<8 | safi) {",
          "1928:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1929:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1930:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1931:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1932:                         if (advance == -1)",
          "1933:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1934:                         else if (advance == -2)",
          "1935:                             goto trunc;",
          "1936:                         else if (advance == -3)",
          "1938:                         else",
          "1939:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1940:                         break;",
          "1941:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1942:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1943:                         if (advance == -1)",
          "1944:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1945:                         else if (advance == -2)",
          "1946:                             goto trunc;",
          "1947:                         else if (advance == -3)",
          "1949:                         else",
          "1950:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1951:                         break;",
          "1952:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1953:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1954:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1955:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1956:                         if (advance == -1)",
          "1957:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1958:                         else if (advance == -2)",
          "1959:                             goto trunc;",
          "1960:                         else",
          "1961:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1962:                         break;",
          "1963:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1964:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1965:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1966:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1967:                         if (advance == -1)",
          "1968:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1969:                         else if (advance == -2)",
          "1970:                             goto trunc;",
          "1971:                         else if (advance == -3)",
          "1973:                         else",
          "1974:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1975:                         break;",
          "1976:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1977:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1978:                         if (advance == -1)",
          "1979:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1980:                         else if (advance == -2)",
          "1981:                             goto trunc;",
          "1982:                         else if (advance == -3)",
          "1984:                         else",
          "1985:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1986:                         break;",
          "1987:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1988:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1989:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1990:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1991:                         if (advance == -1)",
          "1992:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1993:                         else if (advance == -2)",
          "1994:                             goto trunc;",
          "1995:                         else",
          "1996:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1997:                         break;",
          "1998:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1999:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "2000:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "2001:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2002:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "2003:                         if (advance == -1)",
          "2004:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2005:                         else if (advance == -2)",
          "2006:                             goto trunc;",
          "2007:                         else",
          "2008:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2009:                         break;",
          "2010:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2011:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2012:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2013:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2014:                         if (advance == -1)",
          "2015:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2016:                         else if (advance == -2)",
          "2017:                             goto trunc;",
          "2018:                         else",
          "2019:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2020:                         break;",
          "2021:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2022:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2023:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2024:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2025:                         if (advance == -1)",
          "2026:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2027:                         else if (advance == -2)",
          "2028:                             goto trunc;",
          "2029:                         else",
          "2030:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2031:                         break;",
          "2032:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2033:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2034:         if (advance == -1)",
          "2035:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2036:                         else if (advance == -2)",
          "2037:                             goto trunc;",
          "2038:                         else",
          "2039:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2040:          break;",
          "2042:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2043:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2044:                         if (advance == -1)",
          "2045:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2046:                         else if (advance == -2)",
          "2047:                             goto trunc;",
          "2048:                         else",
          "2049:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2050:                         break;",
          "2051:                     default:",
          "2052:                         ND_TCHECK_LEN(tptr - 3, tlen);",
          "2053:                         ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2054:                         if (ndo->ndo_vflag <= 1)",
          "2055:                             print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2056:                         advance = 0;",
          "2057:                         tptr = pptr + len;",
          "2058:                         break;",
          "2059:                     }",
          "2060:                     if (advance < 0)",
          "2061:                         break;",
          "2062:                     tptr += advance;",
          "2063:   }",
          "2064:   break;",
          "2065:         case BGPTYPE_EXTD_COMMUNITIES:",
          "2066:   if (len % 8) {",
          "2067:    ND_PRINT((ndo, \"invalid len\"));",
          "2068:    break;",
          "2069:   }",
          "2070:                 while (tlen>0) {",
          "2071:                     uint16_t extd_comm;",
          "2073:                     ND_TCHECK_2(tptr);",
          "2074:                     extd_comm=EXTRACT_BE_U_2(tptr);",
          "2076:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2077:       tok2str(bgp_extd_comm_subtype_values,",
          "2078:           \"unknown extd community typecode\",",
          "2079:           extd_comm),",
          "2080:       extd_comm,",
          "2081:       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2083:                     ND_TCHECK_6(tptr + 2);",
          "2084:                     switch(extd_comm) {",
          "2085:                     case BGP_EXT_COM_RT_0:",
          "2086:                     case BGP_EXT_COM_RO_0:",
          "2087:                     case BGP_EXT_COM_L2VPN_RT_0:",
          "2088:                         ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2089:                                EXTRACT_BE_U_2(tptr + 2),",
          "2090:                                EXTRACT_BE_U_4(tptr + 4),",
          "2091:                                ipaddr_string(ndo, tptr+4)));",
          "2092:                         break;",
          "2093:                     case BGP_EXT_COM_RT_1:",
          "2094:                     case BGP_EXT_COM_RO_1:",
          "2095:                     case BGP_EXT_COM_L2VPN_RT_1:",
          "2096:                     case BGP_EXT_COM_VRF_RT_IMP:",
          "2097:                         ND_PRINT((ndo, \": %s:%u\",",
          "2098:                                ipaddr_string(ndo, tptr+2),",
          "2099:                                EXTRACT_BE_U_2(tptr + 6)));",
          "2100:                         break;",
          "2101:                     case BGP_EXT_COM_RT_2:",
          "2102:                     case BGP_EXT_COM_RO_2:",
          "2103:    ND_PRINT((ndo, \": %s:%u\",",
          "2104:        as_printf(ndo, astostr, sizeof(astostr),",
          "2105:        EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2106:    break;",
          "2107:                     case BGP_EXT_COM_LINKBAND:",
          "2108:           bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2109:                         ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2110:                                bw.f*8/1000000));",
          "2111:                         break;",
          "2112:                     case BGP_EXT_COM_VPN_ORIGIN:",
          "2113:                     case BGP_EXT_COM_VPN_ORIGIN2:",
          "2114:                     case BGP_EXT_COM_VPN_ORIGIN3:",
          "2115:                     case BGP_EXT_COM_VPN_ORIGIN4:",
          "2116:                     case BGP_EXT_COM_OSPF_RID:",
          "2117:                     case BGP_EXT_COM_OSPF_RID2:",
          "2118:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2119:                         break;",
          "2120:                     case BGP_EXT_COM_OSPF_RTYPE:",
          "2121:                     case BGP_EXT_COM_OSPF_RTYPE2:",
          "2122:                         ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2123:                                ipaddr_string(ndo, tptr+2),",
          "2124:                                tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2125:        \"unknown (0x%02x)\",",
          "2126:        EXTRACT_U_1((tptr + 6))),",
          "2127:                                (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2128:                                ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2129:                         break;",
          "2130:                     case BGP_EXT_COM_L2INFO:",
          "2131:                         ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2132:                                tok2str(l2vpn_encaps_values,",
          "2133:        \"unknown encaps\",",
          "2134:        EXTRACT_U_1((tptr + 2))),",
          "2135:                                EXTRACT_U_1((tptr + 3)),",
          "2136:                                EXTRACT_BE_U_2(tptr + 4)));",
          "2137:                         break;",
          "2138:                     case BGP_EXT_COM_SOURCE_AS:",
          "2139:                         ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2140:                         break;",
          "2141:                     default:",
          "2142:                         ND_TCHECK_8(tptr);",
          "2143:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2144:                         break;",
          "2145:                     }",
          "2146:                     tlen -=8;",
          "2147:                     tptr +=8;",
          "2148:                 }",
          "2151:         case BGPTYPE_PMSI_TUNNEL:",
          "2152:         {",
          "2153:                 uint8_t tunnel_type, flags;",
          "2155:                 ND_TCHECK_5(tptr);",
          "2156:                 flags = EXTRACT_U_1(tptr);",
          "2157:                 tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2158:                 tlen = len;",
          "2160:                 ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2161:                        tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2162:                        tunnel_type,",
          "2163:                        bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2164:                        EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2166:                 tptr +=5;",
          "2167:                 tlen -= 5;",
          "2169:                 switch (tunnel_type) {",
          "2171:                 case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2172:                     ND_TCHECK_8(tptr);",
          "2173:                     ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2174:                            ipaddr_string(ndo, tptr),",
          "2175:                            ipaddr_string(ndo, tptr+4)));",
          "2176:                     break;",
          "2178:                 case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2179:                     ND_TCHECK_8(tptr);",
          "2180:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2181:                            ipaddr_string(ndo, tptr),",
          "2182:                            ipaddr_string(ndo, tptr+4)));",
          "2183:                     break;",
          "2184:                 case BGP_PMSI_TUNNEL_INGRESS:",
          "2185:                     ND_TCHECK_4(tptr);",
          "2186:                     ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2187:                            ipaddr_string(ndo, tptr)));",
          "2188:                     break;",
          "2190:                 case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2191:                     ND_TCHECK_8(tptr);",
          "2192:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2193:                            ipaddr_string(ndo, tptr),",
          "2194:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2195:                     break;",
          "2196:                 case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2197:                     ND_TCHECK_8(tptr);",
          "2198:                     ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2199:                            ipaddr_string(ndo, tptr),",
          "2200:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2201:                     break;",
          "2202:                 default:",
          "2203:                     if (ndo->ndo_vflag <= 1) {",
          "2204:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2205:                     }",
          "2206:                 }",
          "2209:  case BGPTYPE_AIGP:",
          "2210:  {",
          "2211:   uint8_t type;",
          "2212:   uint16_t length;",
          "2214:   tlen = len;",
          "2216:   while (tlen >= 3) {",
          "2218:       ND_TCHECK_3(tptr);",
          "2220:       type = EXTRACT_U_1(tptr);",
          "2221:       length = EXTRACT_BE_U_2(tptr + 1);",
          "2222:       tptr += 3;",
          "2223:       tlen -= 3;",
          "2225:       ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2226:          tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2227:          type, length));",
          "2229:       if (length < 3)",
          "2230:    goto trunc;",
          "2231:       length -= 3;",
          "2236:       ND_TCHECK_LEN(tptr + 3, length);",
          "2238:       switch (type) {",
          "2240:       case BGP_AIGP_TLV:",
          "2241:           if (length < 8)",
          "2242:               goto trunc;",
          "2243:    ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2244:       EXTRACT_BE_U_8(tptr)));",
          "2245:    break;",
          "2247:       default:",
          "2248:    if (ndo->ndo_vflag <= 1) {",
          "2249:        print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2250:    }",
          "2251:       }",
          "2253:       tptr += length;",
          "2254:       tlen -= length;",
          "2255:   }",
          "2256:   break;",
          "2257:  }",
          "2258:         case BGPTYPE_ATTR_SET:",
          "2259:                 ND_TCHECK_4(tptr);",
          "2260:                 if (len < 4)",
          "2261:                  goto trunc;",
          "2262:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2263:       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2264:   tptr+=4;",
          "2265:                 len -=4;",
          "2267:                 while (len) {",
          "2268:                     u_int aflags, alenlen, alen;",
          "2270:                     ND_TCHECK_2(tptr);",
          "2271:                     if (len < 2)",
          "2272:                         goto trunc;",
          "2273:                     aflags = EXTRACT_U_1(tptr);",
          "2274:                     atype = EXTRACT_U_1(tptr + 1);",
          "2275:                     tptr += 2;",
          "2276:                     len -= 2;",
          "2277:                     alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2278:                     ND_TCHECK_LEN(tptr, alenlen);",
          "2279:                     if (len < alenlen)",
          "2280:                         goto trunc;",
          "2281:                     alen = bgp_attr_len(aflags, tptr);",
          "2282:                     tptr += alenlen;",
          "2283:                     len -= alenlen;",
          "2285:                     ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2286:                            tok2str(bgp_attr_values,",
          "2287:                                       \"Unknown Attribute\", atype),",
          "2288:                            atype,",
          "2289:                            alen));",
          "2291:                     if (aflags) {",
          "2292:                         ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2293:                                aflags & 0x80 ? \"O\" : \"\",",
          "2294:                                aflags & 0x40 ? \"T\" : \"\",",
          "2295:                                aflags & 0x20 ? \"P\" : \"\",",
          "2296:                                aflags & 0x10 ? \"E\" : \"\"));",
          "2297:                         if (aflags & 0xf)",
          "2298:                             ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2299:                         ND_PRINT((ndo, \"]: \"));",
          "2300:                     }",
          "2302:                     if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2303:                         return 0;",
          "2304:                     tptr += alen;",
          "2305:                     len -= alen;",
          "2306:   }",
          "2309:  case BGPTYPE_LARGE_COMMUNITY:",
          "2310:   if (len == 0 || len % 12) {",
          "2311:    ND_PRINT((ndo, \"invalid len\"));",
          "2312:    break;",
          "2313:   }",
          "2314:   ND_PRINT((ndo, \"\\n\\t    \"));",
          "2315:   while (len > 0) {",
          "2316:    ND_TCHECK_LEN(tptr, 12);",
          "2317:    ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2318:      EXTRACT_BE_U_4(tptr),",
          "2319:      EXTRACT_BE_U_4(tptr + 4),",
          "2320:      EXTRACT_BE_U_4(tptr + 8),",
          "2321:      (len > 12) ? \", \" : \"\"));",
          "2322:                         tptr += 12;",
          "2323:                         len -= 12;",
          "2324:   }",
          "2325:   break;",
          "2326:  default:",
          "2327:      ND_TCHECK_LEN(pptr, len);",
          "2329:             if (ndo->ndo_vflag <= 1)",
          "2330:                 print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2332:  }",
          "2334:             ND_TCHECK_LEN(pptr, len);",
          "2335:             print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2337:         return 1;",
          "2340:         return 0;",
          "2347:  u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2348:         u_int i = 0;",
          "2350:         while (i < caps_len) {",
          "2351:                 ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2352:                 cap_type=EXTRACT_U_1(opt + i);",
          "2353:                 cap_len=EXTRACT_U_1(opt + i + 1);",
          "2354:                 tcap_len=cap_len;",
          "2355:                 ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2356:                        tok2str(bgp_capcode_values, \"Unknown\",",
          "2357:                                   cap_type),",
          "2358:                        cap_type,",
          "2359:                        cap_len));",
          "2360:                 ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2361:                 switch (cap_type) {",
          "2362:                 case BGP_CAPCODE_MP:",
          "2363:                     ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2364:                            tok2str(af_values, \"Unknown\",",
          "2365:                                       EXTRACT_BE_U_2(opt + i + 2)),",
          "2366:                            EXTRACT_BE_U_2(opt + i + 2),",
          "2367:                            tok2str(bgp_safi_values, \"Unknown\",",
          "2368:                                       EXTRACT_U_1(opt + i + 5)),",
          "2369:                            EXTRACT_U_1(opt + i + 5)));",
          "2370:                     break;",
          "2371:                 case BGP_CAPCODE_RESTART:",
          "2372:                     ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2373:                            ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2374:                            EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2375:                     tcap_len-=2;",
          "2376:                     cap_offset=4;",
          "2377:                     while(tcap_len>=4) {",
          "2378:                         ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2379:                                tok2str(af_values,\"Unknown\",",
          "2380:                                           EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2381:                                EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2382:                                tok2str(bgp_safi_values,\"Unknown\",",
          "2383:                                           EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2384:                                EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2385:                                ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2386:                         tcap_len-=4;",
          "2387:                         cap_offset+=4;",
          "2388:                     }",
          "2389:                     break;",
          "2390:                 case BGP_CAPCODE_RR:",
          "2391:                 case BGP_CAPCODE_RR_CISCO:",
          "2392:                     break;",
          "2393:                 case BGP_CAPCODE_AS_NEW:",
          "2398:                     if (cap_len == 4) {",
          "2399:                         ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2400:                             as_printf(ndo, astostr, sizeof(astostr),",
          "2401:                             EXTRACT_BE_U_4(opt + i + 2))));",
          "2402:                     }",
          "2403:                     break;",
          "2404:                 case BGP_CAPCODE_ADD_PATH:",
          "2405:                     cap_offset=2;",
          "2406:                     if (tcap_len == 0) {",
          "2408:                         break;",
          "2409:                     }",
          "2410:                     while (tcap_len > 0) {",
          "2411:                         if (tcap_len < 4) {",
          "2412:                             ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2413:                             break;",
          "2414:                         }",
          "2415:                         ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2416:                                   tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2417:                                   EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2418:                                   tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2419:                                   EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2420:                                   tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2421:                         ));",
          "2422:                         tcap_len-=4;",
          "2423:                         cap_offset+=4;",
          "2424:                     }",
          "2425:                     break;",
          "2426:                 default:",
          "2427:                     ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2428:                            cap_type));",
          "2429:                     if (ndo->ndo_vflag <= 1)",
          "2430:                         print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2431:         cap_len);",
          "2434:                 if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2435:                     print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2436:                 }",
          "2437:                 i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2439:         return;",
          "2442:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2449:  const struct bgp_open *bgp_open_header;",
          "2450:  u_int optslen;",
          "2451:  const struct bgp_opt *bgpopt;",
          "2452:  const u_char *opt;",
          "2453:  u_int i;",
          "2455:  ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2456:  if (length < BGP_OPEN_SIZE)",
          "2457:   goto trunc;",
          "2459:  bgp_open_header = (const struct bgp_open *)dat;",
          "2461:  ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2462:      EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2463:  ND_PRINT((ndo, \"my AS %s, \",",
          "2464:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2465:  ND_PRINT((ndo, \"Holdtime %us, \",",
          "2466:      EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2467:  ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2468:  optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2469:  ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2471:  opt = dat + BGP_OPEN_SIZE;",
          "2472:  length -= BGP_OPEN_SIZE;",
          "2474:  i = 0;",
          "2475:  while (i < optslen) {",
          "2476:   uint8_t opt_type, opt_len;",
          "2478:   ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2479:   if (length < BGP_OPT_SIZE + i)",
          "2480:    goto trunc;",
          "2481:   bgpopt = (const struct bgp_opt *)(opt + i);",
          "2482:   opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2483:   opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2484:   if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2485:    ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2486:        opt_type, opt_len));",
          "2487:    break;",
          "2488:   }",
          "2490:   ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2491:          tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2492:          opt_type,",
          "2493:          opt_len));",
          "2496:   switch(opt_type) {",
          "2498:   case BGP_OPT_CAP:",
          "2499:    bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2500:             opt_len);",
          "2501:    break;",
          "2503:   case BGP_OPT_AUTH:",
          "2504:   default:",
          "2505:          ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2506:       opt_type));",
          "2507:          break;",
          "2508:   }",
          "2509:   i += BGP_OPT_SIZE + opt_len;",
          "2510:  }",
          "2511:  return;",
          "2513:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2518:                  const u_char *dat, int length)",
          "2520:  const struct bgp *bgp_header;",
          "2521:  const u_char *p;",
          "2522:  int withdrawn_routes_len;",
          "2523:  int len;",
          "2524:  int i;",
          "2526:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2527:  if (length < BGP_SIZE)",
          "2528:   goto trunc;",
          "2529:  bgp_header = (const struct bgp *)dat;",
          "2530:  p = dat + BGP_SIZE;",
          "2531:  length -= BGP_SIZE;",
          "2534:  ND_TCHECK_2(p);",
          "2535:  if (length < 2)",
          "2536:   goto trunc;",
          "2537:  withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2538:  p += 2;",
          "2539:  length -= 2;",
          "2540:  if (withdrawn_routes_len) {",
          "2546:   ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2547:   if (length < withdrawn_routes_len)",
          "2548:    goto trunc;",
          "2549:   ND_PRINT((ndo, \"\\n\\t  Withdrawn routes: %d bytes\", withdrawn_routes_len));",
          "2550:   p += withdrawn_routes_len;",
          "2551:   length -= withdrawn_routes_len;",
          "2552:  }",
          "2554:  ND_TCHECK_2(p);",
          "2555:  if (length < 2)",
          "2556:   goto trunc;",
          "2557:  len = EXTRACT_BE_U_2(p);",
          "2558:  p += 2;",
          "2559:  length -= 2;",
          "2561:         if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2563:             ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2564:             return;",
          "2567:  if (len) {",
          "2569:   while (len) {",
          "2570:    int aflags, atype, alenlen, alen;",
          "2572:    ND_TCHECK_2(p);",
          "2573:    if (len < 2)",
          "2574:        goto trunc;",
          "2575:    if (length < 2)",
          "2576:        goto trunc;",
          "2577:    aflags = EXTRACT_U_1(p);",
          "2578:    atype = EXTRACT_U_1(p + 1);",
          "2579:    p += 2;",
          "2580:    len -= 2;",
          "2581:    length -= 2;",
          "2582:    alenlen = bgp_attr_lenlen(aflags, p);",
          "2583:    ND_TCHECK_LEN(p, alenlen);",
          "2584:    if (len < alenlen)",
          "2585:        goto trunc;",
          "2586:    if (length < alenlen)",
          "2587:        goto trunc;",
          "2588:    alen = bgp_attr_len(aflags, p);",
          "2589:    p += alenlen;",
          "2590:    len -= alenlen;",
          "2591:    length -= alenlen;",
          "2593:    ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2594:                               tok2str(bgp_attr_values, \"Unknown Attribute\",",
          "2595:       atype),",
          "2596:                               atype,",
          "2597:                               alen));",
          "2599:    if (aflags) {",
          "2600:     ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2601:      aflags & 0x80 ? \"O\" : \"\",",
          "2602:      aflags & 0x40 ? \"T\" : \"\",",
          "2603:      aflags & 0x20 ? \"P\" : \"\",",
          "2604:      aflags & 0x10 ? \"E\" : \"\"));",
          "2605:     if (aflags & 0xf)",
          "2606:      ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2607:     ND_PRINT((ndo, \"]: \"));",
          "2608:    }",
          "2609:    if (len < alen)",
          "2610:     goto trunc;",
          "2611:    if (length < alen)",
          "2612:     goto trunc;",
          "2613:    if (!bgp_attr_print(ndo, atype, p, alen))",
          "2614:     goto trunc;",
          "2615:    p += alen;",
          "2616:    len -= alen;",
          "2617:    length -= alen;",
          "2618:   }",
          "2619:  }",
          "2621:  if (length) {",
          "2630:   ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2631:   while (length) {",
          "2632:    char buf[MAXHOSTNAMELEN + 100];",
          "2633:    i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2634:    if (i == -1) {",
          "2635:     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2636:     break;",
          "2637:    } else if (i == -2)",
          "2638:     goto trunc;",
          "2639:    else if (i == -3)",
          "2641:    else {",
          "2642:     ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2643:     p += i;",
          "2644:     length -= i;",
          "2645:    }",
          "2646:   }",
          "2647:  }",
          "2648:  return;",
          "2650:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2655:                        const u_char *dat, int length)",
          "2657:  const struct bgp_notification *bgp_notification_header;",
          "2658:  const u_char *tptr;",
          "2659:  uint8_t bgpn_major, bgpn_minor;",
          "2660:  uint8_t shutdown_comm_length;",
          "2661:  uint8_t remainder_offset;",
          "2663:  ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2664:         if (length<BGP_NOTIFICATION_SIZE)",
          "2665:             return;",
          "2667:  bgp_notification_header = (const struct bgp_notification *)dat;",
          "2668:  bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2669:  bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2671:  ND_PRINT((ndo, \", %s (%u)\",",
          "2672:         tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2673:      bgpn_major),",
          "2674:         bgpn_major));",
          "2676:         switch (bgpn_major) {",
          "2678:         case BGP_NOTIFY_MAJOR_MSG:",
          "2679:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2680:      tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2681:          bgpn_minor),",
          "2682:      bgpn_minor));",
          "2683:             break;",
          "2684:         case BGP_NOTIFY_MAJOR_OPEN:",
          "2685:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2686:      tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2687:          bgpn_minor),",
          "2688:      bgpn_minor));",
          "2689:             break;",
          "2690:         case BGP_NOTIFY_MAJOR_UPDATE:",
          "2691:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2692:      tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2693:          bgpn_minor),",
          "2694:      bgpn_minor));",
          "2695:             break;",
          "2696:         case BGP_NOTIFY_MAJOR_FSM:",
          "2697:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2698:      tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2699:          bgpn_minor),",
          "2700:      bgpn_minor));",
          "2701:             break;",
          "2702:         case BGP_NOTIFY_MAJOR_CAP:",
          "2703:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2704:      tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2705:          bgpn_minor),",
          "2706:      bgpn_minor));",
          "2707:             break;",
          "2708:         case BGP_NOTIFY_MAJOR_CEASE:",
          "2709:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2710:      tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2711:          bgpn_minor),",
          "2712:      bgpn_minor));",
          "2717:      if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2718:   tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2719:   ND_TCHECK_7(tptr);",
          "2720:   ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2721:          tok2str(af_values, \"Unknown\",",
          "2722:       EXTRACT_BE_U_2(tptr)),",
          "2723:          EXTRACT_BE_U_2(tptr),",
          "2724:          tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2725:          EXTRACT_U_1((tptr + 2)),",
          "2726:          EXTRACT_BE_U_4(tptr + 3)));",
          "2727:      }",
          "2732:      if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2733:   bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2734:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2735:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2736:       ND_TCHECK_1(tptr);",
          "2737:       shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2738:       remainder_offset = 0;",
          "2740:       if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2741:    shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2742:        ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2743:       }",
          "2744:       else if (shutdown_comm_length == 0) {",
          "2745:        ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2746:        remainder_offset += 1;",
          "2747:       }",
          "2749:       else {",
          "2750:        ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2751:        ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2752:        (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2753:        ND_PRINT((ndo, \"\\\"\"));",
          "2754:        remainder_offset += shutdown_comm_length + 1;",
          "2755:       }",
          "2757:       if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2758:        ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2759:        hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2760:       }",
          "2761:      }",
          "2762:      break;",
          "2763:  default:",
          "2764:             break;",
          "2767:  return;",
          "2769:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2774:                         const u_char *pptr, int len)",
          "2776:         const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2778:  ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2781:         if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2782:             return;",
          "2784:         bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2786:         ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2787:                tok2str(af_values,\"Unknown\",",
          "2788:      EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2789:                EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2790:                tok2str(bgp_safi_values,\"Unknown\",",
          "2791:      EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2792:                EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2794:         if (ndo->ndo_vflag > 1) {",
          "2795:             ND_TCHECK_LEN(pptr, len);",
          "2796:             print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2797:         }",
          "2799:         return;",
          "2801:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2806:                  const u_char *dat, u_int length)",
          "2808:  const struct bgp *bgp_header;",
          "2809:  uint8_t bgp_type;",
          "2811:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2812:  bgp_header = (const struct bgp *)dat;",
          "2813:  bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2815:  ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2816:                tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2817:                bgp_type,",
          "2818:                length));",
          "2820:  switch (bgp_type) {",
          "2821:  case BGP_OPEN:",
          "2822:   bgp_open_print(ndo, dat, length);",
          "2823:   break;",
          "2824:  case BGP_UPDATE:",
          "2825:   bgp_update_print(ndo, dat, length);",
          "2826:   break;",
          "2827:  case BGP_NOTIFICATION:",
          "2828:   bgp_notification_print(ndo, dat, length);",
          "2829:   break;",
          "2830:         case BGP_KEEPALIVE:",
          "2831:                 break;",
          "2832:         case BGP_ROUTE_REFRESH:",
          "2833:                 bgp_route_refresh_print(ndo, dat, length);",
          "2834:                 break;",
          "2835:         default:",
          "2837:                 ND_TCHECK_LEN(dat, length);",
          "2838:                 ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2839:                 print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2840:                 break;",
          "2841:  }",
          "2842:  return 1;",
          "2844:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2845:  return 0;",
          "2850:           const u_char *dat, int length)",
          "2852:  const u_char *p;",
          "2853:  const u_char *ep;",
          "2854:  const u_char *start;",
          "2855:  const u_char marker[] = {",
          "2856:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2857:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2858:  };",
          "2859:  const struct bgp *bgp_header;",
          "2860:  uint16_t hlen;",
          "2862:  ep = dat + length;",
          "2863:  if (ndo->ndo_snapend < dat + length)",
          "2864:   ep = ndo->ndo_snapend;",
          "2866:  ND_PRINT((ndo, \": BGP\"));",
          "2871:  p = dat;",
          "2872:  start = p;",
          "2873:  while (p < ep) {",
          "2874:   if (!ND_TTEST_1(p))",
          "2875:    break;",
          "2876:   if (EXTRACT_U_1(p) != 0xff) {",
          "2877:    p++;",
          "2878:    continue;",
          "2879:   }",
          "2881:   if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "2882:    break;",
          "2883:   if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "2884:    p++;",
          "2885:    continue;",
          "2886:   }",
          "2889:   ND_TCHECK_LEN(p, BGP_SIZE);",
          "2890:   bgp_header = (const struct bgp *)p;",
          "2892:   if (start != p)",
          "2893:    ND_PRINT((ndo, \" [|BGP]\"));",
          "2895:   hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "2896:   if (hlen < BGP_SIZE) {",
          "2897:    ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "2898:        BGP_SIZE));",
          "2899:    break;",
          "2900:   }",
          "2902:   if (ND_TTEST_LEN(p, hlen)) {",
          "2903:    if (!bgp_pdu_print(ndo, p, hlen))",
          "2904:     return;",
          "2905:    p += hlen;",
          "2906:    start = p;",
          "2907:   } else {",
          "2908:    ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "2909:           tok2str(bgp_msg_values,",
          "2910:        \"Unknown Message Type\",",
          "2911:        EXTRACT_U_1(bgp_header->bgp_type))));",
          "2912:    break;",
          "2913:   }",
          "2914:  }",
          "2916:  return;",
          "2919:  ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "[Added Lines]",
          "1369:     return 4;",
          "1376:     int i;",
          "1377:     uint16_t af;",
          "1378:     uint8_t safi, snpa, nhlen;",
          "1380:         float f;",
          "1381:         uint32_t i;",
          "1382:     } bw;",
          "1383:     int advance;",
          "1384:     u_int tlen;",
          "1385:     const u_char *tptr;",
          "1386:     char buf[MAXHOSTNAMELEN + 100];",
          "1387:     int  as_size;",
          "1389:     tptr = pptr;",
          "1390:     tlen = len;",
          "1392:     switch (atype) {",
          "1393:     case BGPTYPE_ORIGIN:",
          "1394:         if (len != 1)",
          "1395:             ND_PRINT((ndo, \"invalid len\"));",
          "1396:         else {",
          "1397:             ND_TCHECK_1(tptr);",
          "1398:             ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1399:                       \"Unknown Origin Typecode\",",
          "1400:                       EXTRACT_U_1(tptr))));",
          "1401:         }",
          "1402:         break;",
          "1407:     case BGPTYPE_AS4_PATH:",
          "1408:     case BGPTYPE_AS_PATH:",
          "1409:         if (len % 2) {",
          "1410:             ND_PRINT((ndo, \"invalid len\"));",
          "1411:             break;",
          "1412:         }",
          "1413:         if (!len) {",
          "1414:             ND_PRINT((ndo, \"empty\"));",
          "1415:             break;",
          "1416:         }",
          "1426:         as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1428:         while (tptr < pptr + len) {",
          "1429:             ND_TCHECK_1(tptr);",
          "1430:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1431:                       \"?\", EXTRACT_U_1(tptr))));",
          "1432:             ND_TCHECK_1(tptr + 1);",
          "1433:             for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1434:                 ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1435:                 ND_PRINT((ndo, \"%s \",",
          "1436:                           as_printf(ndo, astostr, sizeof(astostr),",
          "1437:                 as_size == 2 ?",
          "1438:                     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1439:                     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1440:             }",
          "1441:             ND_TCHECK_1(tptr);",
          "1442:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1443:                       \"?\", EXTRACT_U_1(tptr))));",
          "1444:             ND_TCHECK_1(tptr + 1);",
          "1445:             tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1446:         }",
          "1447:         break;",
          "1448:     case BGPTYPE_NEXT_HOP:",
          "1449:         if (len != 4)",
          "1450:             ND_PRINT((ndo, \"invalid len\"));",
          "1451:         else {",
          "1452:             ND_TCHECK_4(tptr);",
          "1453:             ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1454:         }",
          "1455:         break;",
          "1456:     case BGPTYPE_MULTI_EXIT_DISC:",
          "1457:     case BGPTYPE_LOCAL_PREF:",
          "1458:         if (len != 4)",
          "1459:             ND_PRINT((ndo, \"invalid len\"));",
          "1460:         else {",
          "1461:             ND_TCHECK_4(tptr);",
          "1462:             ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1463:         }",
          "1464:         break;",
          "1465:     case BGPTYPE_ATOMIC_AGGREGATE:",
          "1466:         if (len != 0)",
          "1467:             ND_PRINT((ndo, \"invalid len\"));",
          "1468:         break;",
          "1469:     case BGPTYPE_AGGREGATOR:",
          "1475:         if (len != 6 && len != 8) {",
          "1476:             ND_PRINT((ndo, \"invalid len\"));",
          "1477:             break;",
          "1478:         }",
          "1479:         ND_TCHECK_LEN(tptr, len);",
          "1480:         if (len == 6) {",
          "1481:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1482:                       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1483:                       ipaddr_string(ndo, tptr + 2)));",
          "1484:         } else {",
          "1485:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1486:                       as_printf(ndo, astostr, sizeof(astostr),",
          "1487:                       EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1488:         }",
          "1489:         break;",
          "1490:     case BGPTYPE_AGGREGATOR4:",
          "1491:         if (len != 8) {",
          "1492:             ND_PRINT((ndo, \"invalid len\"));",
          "1493:             break;",
          "1494:         }",
          "1495:         ND_TCHECK_8(tptr);",
          "1496:         ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1497:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1498:                   ipaddr_string(ndo, tptr + 4)));",
          "1499:         break;",
          "1500:     case BGPTYPE_COMMUNITIES:",
          "1501:         if (len % 4) {",
          "1502:             ND_PRINT((ndo, \"invalid len\"));",
          "1503:             break;",
          "1504:         }",
          "1505:         while (tlen>0) {",
          "1506:             uint32_t comm;",
          "1507:             ND_TCHECK_4(tptr);",
          "1508:             comm = EXTRACT_BE_U_4(tptr);",
          "1509:             switch (comm) {",
          "1510:             case BGP_COMMUNITY_NO_EXPORT:",
          "1511:                 ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1513:             case BGP_COMMUNITY_NO_ADVERT:",
          "1514:                 ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1516:             case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1517:                 ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1518:                 break;",
          "1519:             default:",
          "1520:                 ND_PRINT((ndo, \"%u:%u%s\",",
          "1521:                          (comm >> 16) & 0xffff,",
          "1522:                          comm & 0xffff,",
          "1523:                          (tlen>4) ? \", \" : \"\"));",
          "1525:             }",
          "1526:             tlen -=4;",
          "1527:             tptr +=4;",
          "1528:         }",
          "1529:         break;",
          "1530:     case BGPTYPE_ORIGINATOR_ID:",
          "1531:         if (len != 4) {",
          "1532:             ND_PRINT((ndo, \"invalid len\"));",
          "1533:             break;",
          "1534:         }",
          "1535:         ND_TCHECK_4(tptr);",
          "1536:         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1537:         break;",
          "1538:     case BGPTYPE_CLUSTER_LIST:",
          "1539:         if (len % 4) {",
          "1540:             ND_PRINT((ndo, \"invalid len\"));",
          "1541:             break;",
          "1542:         }",
          "1543:         while (tlen>0) {",
          "1544:             ND_TCHECK_4(tptr);",
          "1545:             ND_PRINT((ndo, \"%s%s\",",
          "1546:                       ipaddr_string(ndo, tptr),",
          "1547:                       (tlen>4) ? \", \" : \"\"));",
          "1548:             tlen -=4;",
          "1549:             tptr +=4;",
          "1550:         }",
          "1551:         break;",
          "1552:     case BGPTYPE_MP_REACH_NLRI:",
          "1553:         ND_TCHECK_3(tptr);",
          "1554:         af = EXTRACT_BE_U_2(tptr);",
          "1555:         safi = EXTRACT_U_1(tptr + 2);",
          "1557:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1558:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1559:                   af,",
          "1561:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1562:                   safi));",
          "1564:         switch(af<<8 | safi) {",
          "1565:         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1566:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1567:         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1568:         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1569:         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1570:         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1571:         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1572:         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1573:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1574:         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1575:         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1576:         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1577:         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1578:         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1579:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1580:         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1581:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1582:         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1583:         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1584:         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1585:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1586:         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1587:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1588:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1589:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1590:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1591:         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1592:             break;",
          "1593:         default:",
          "1594:             ND_TCHECK_LEN(tptr, tlen);",
          "1595:             ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1596:             if (ndo->ndo_vflag <= 1)",
          "1597:                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1598:             goto done;",
          "1599:             break;",
          "1600:         }",
          "1602:         tptr +=3;",
          "1604:         ND_TCHECK_1(tptr);",
          "1605:         nhlen = EXTRACT_U_1(tptr);",
          "1606:         tlen = nhlen;",
          "1607:         tptr++;",
          "1609:         if (tlen) {",
          "1610:             int nnh = 0;",
          "1611:             ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1612:             while (tlen > 0) {",
          "1613:                 if (nnh++ > 0) {",
          "1614:                     ND_PRINT((ndo,  \", \" ));",
          "1615:                 }",
          "1622:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1623:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1624:                     if (tlen < sizeof(struct in_addr)) {",
          "1625:                         ND_PRINT((ndo, \"invalid len\"));",
          "1626:                         tlen = 0;",
          "1627:                     } else {",
          "1628:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1629:                         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1630:                         tlen -= sizeof(struct in_addr);",
          "1631:                         tptr += sizeof(struct in_addr);",
          "1632:                     }",
          "1633:                     break;",
          "1637:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1638:                         ND_PRINT((ndo, \"invalid len\"));",
          "1639:                         tlen = 0;",
          "1640:                     } else {",
          "1641:                         ND_TCHECK_LEN(tptr,",
          "1642:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1643:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1644:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1645:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1646:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1647:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1648:                     }",
          "1649:                     break;",
          "1654:                     if (tlen < sizeof(struct in6_addr)) {",
          "1655:                         ND_PRINT((ndo, \"invalid len\"));",
          "1656:                         tlen = 0;",
          "1657:                     } else {",
          "1658:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1659:                         ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1660:                         tlen -= sizeof(struct in6_addr);",
          "1661:                         tptr += sizeof(struct in6_addr);",
          "1662:                     }",
          "1663:                     break;",
          "1667:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1668:                         ND_PRINT((ndo, \"invalid len\"));",
          "1669:                         tlen = 0;",
          "1670:                     } else {",
          "1671:                         ND_TCHECK_LEN(tptr,",
          "1672:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1673:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1674:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1675:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1676:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1677:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1678:                     }",
          "1679:                     break;",
          "1680:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1681:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1682:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1683:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1684:                     if (tlen < sizeof(struct in_addr)) {",
          "1685:                         ND_PRINT((ndo, \"invalid len\"));",
          "1686:                         tlen = 0;",
          "1687:                     } else {",
          "1688:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1689:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1690:                         tlen -= (sizeof(struct in_addr));",
          "1691:                         tptr += (sizeof(struct in_addr));",
          "1692:                     }",
          "1693:                     break;",
          "1697:                     ND_TCHECK_LEN(tptr, tlen);",
          "1698:                     ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1699:                     tptr += tlen;",
          "1700:                     tlen = 0;",
          "1701:                     break;",
          "1706:                     if (tlen < BGP_VPN_RD_LEN+1) {",
          "1707:                         ND_PRINT((ndo, \"invalid len\"));",
          "1708:                         tlen = 0;",
          "1709:                     } else {",
          "1710:                         ND_TCHECK_LEN(tptr, tlen);",
          "1711:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1712:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1713:                                   isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1715:                         if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1716:                             ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1718:                         else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1719:                             ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1720:                         tptr += tlen;",
          "1721:                         tlen = 0;",
          "1722:                     }",
          "1726:                     ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1729:                     tptr += tlen;",
          "1730:                     tlen = 0;",
          "1734:             }",
          "1735:         }",
          "1736:         ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1737:         tptr += tlen;",
          "1739:         ND_TCHECK_1(tptr);",
          "1740:         snpa = EXTRACT_U_1(tptr);",
          "1741:         tptr++;",
          "1743:         if (snpa) {",
          "1744:             ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1745:             for (/*nothing*/; snpa > 0; snpa--) {",
          "1746:                 ND_TCHECK_1(tptr);",
          "1747:                 ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1748:                 tptr += EXTRACT_U_1(tptr) + 1;",
          "1749:             }",
          "1750:         } else {",
          "1751:             ND_PRINT((ndo, \", no SNPA\"));",
          "1752:         }",
          "1754:         while (tptr < pptr + len) {",
          "1755:             switch (af<<8 | safi) {",
          "1756:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1757:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1758:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1759:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1760:                 if (advance == -1)",
          "1761:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1762:                 else if (advance == -2)",
          "1763:                     goto trunc;",
          "1764:                 else if (advance == -3)",
          "1766:                 else",
          "1767:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1768:                 break;",
          "1769:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1770:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1771:                 if (advance == -1)",
          "1772:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1773:                 else if (advance == -2)",
          "1774:                     goto trunc;",
          "1775:                 else if (advance == -3)",
          "1777:                 else",
          "1778:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1779:                 break;",
          "1780:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1781:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1782:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1783:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1784:                 if (advance == -1)",
          "1785:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1786:                 else if (advance == -2)",
          "1787:                     goto trunc;",
          "1788:                 else",
          "1789:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1790:                 break;",
          "1791:             case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1792:                 advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1793:                 if (advance == -1)",
          "1794:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1795:                 else if (advance == -2)",
          "1796:                     goto trunc;",
          "1797:                 else",
          "1798:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1799:                 break;",
          "1801:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1802:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1803:                 if (advance == -1)",
          "1804:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1805:                 else if (advance == -2)",
          "1806:                     goto trunc;",
          "1807:                 else",
          "1808:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1811:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1812:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1813:                 if (advance == -1)",
          "1814:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1815:                 else if (advance == -2)",
          "1816:                     goto trunc;",
          "1817:                 else",
          "1818:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1819:                 break;",
          "1820:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1821:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1822:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1823:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1824:                 if (advance == -1)",
          "1825:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1826:                 else if (advance == -2)",
          "1827:                     goto trunc;",
          "1828:                 else if (advance == -3)",
          "1830:                 else",
          "1831:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1832:                 break;",
          "1833:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1834:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1835:                 if (advance == -1)",
          "1836:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1837:                 else if (advance == -2)",
          "1838:                     goto trunc;",
          "1839:                 else if (advance == -3)",
          "1841:                 else",
          "1842:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1843:                 break;",
          "1844:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1845:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1846:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1847:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1848:                 if (advance == -1)",
          "1849:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1850:                 else if (advance == -2)",
          "1851:                     goto trunc;",
          "1852:                 else",
          "1853:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1854:                 break;",
          "1855:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1856:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1857:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1858:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1859:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1860:                 if (advance == -1)",
          "1861:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1862:                 else if (advance == -2)",
          "1863:                     goto trunc;",
          "1864:                 else",
          "1865:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1866:                 break;",
          "1867:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1868:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1869:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1870:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1871:                 if (advance == -1)",
          "1872:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1873:                 else if (advance == -2)",
          "1874:                     goto trunc;",
          "1875:                 else",
          "1876:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1877:                 break;",
          "1878:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1879:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1880:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1881:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1882:                 if (advance == -1)",
          "1883:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1884:                 else if (advance == -2)",
          "1885:                     goto trunc;",
          "1886:                 else",
          "1887:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1888:                 break;",
          "1889:             default:",
          "1890:                 ND_TCHECK_LEN(tptr, tlen);",
          "1891:                 ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1892:                 if (ndo->ndo_vflag <= 1)",
          "1893:                     print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1894:                 advance = 0;",
          "1895:                 tptr = pptr + len;",
          "1896:                 break;",
          "1897:             }",
          "1898:             if (advance < 0)",
          "1899:                 break;",
          "1900:             tptr += advance;",
          "1901:         }",
          "1902:     done:",
          "1903:         break;",
          "1905:     case BGPTYPE_MP_UNREACH_NLRI:",
          "1906:         ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1907:         af = EXTRACT_BE_U_2(tptr);",
          "1908:         safi = EXTRACT_U_1(tptr + 2);",
          "1910:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1911:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1912:                   af,",
          "1914:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1915:                   safi));",
          "1917:         if (len == BGP_MP_NLRI_MINSIZE)",
          "1918:             ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1920:         tptr += 3;",
          "1922:         while (tptr < pptr + len) {",
          "1923:             switch (af<<8 | safi) {",
          "1924:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1925:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1926:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1927:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1928:                 if (advance == -1)",
          "1929:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1930:                 else if (advance == -2)",
          "1931:                     goto trunc;",
          "1932:                 else if (advance == -3)",
          "1934:                 else",
          "1935:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1936:                 break;",
          "1937:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1938:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1939:                 if (advance == -1)",
          "1940:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1941:                 else if (advance == -2)",
          "1942:                     goto trunc;",
          "1943:                 else if (advance == -3)",
          "1945:                 else",
          "1946:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1947:                 break;",
          "1948:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1949:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1950:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1951:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1952:                 if (advance == -1)",
          "1953:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1954:                 else if (advance == -2)",
          "1955:                     goto trunc;",
          "1956:                 else",
          "1957:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1958:                 break;",
          "1959:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1960:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1961:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1962:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1963:                 if (advance == -1)",
          "1964:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1965:                 else if (advance == -2)",
          "1966:                     goto trunc;",
          "1967:                 else if (advance == -3)",
          "1969:                 else",
          "1970:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1971:                 break;",
          "1972:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1973:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1974:                 if (advance == -1)",
          "1975:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1976:                 else if (advance == -2)",
          "1977:                     goto trunc;",
          "1978:                 else if (advance == -3)",
          "1980:                 else",
          "1981:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1982:                 break;",
          "1983:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1984:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1985:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1986:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1987:                 if (advance == -1)",
          "1988:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1989:                 else if (advance == -2)",
          "1990:                     goto trunc;",
          "1991:                 else",
          "1992:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1993:                 break;",
          "1994:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1995:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1996:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1997:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1998:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1999:                 if (advance == -1)",
          "2000:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2001:                 else if (advance == -2)",
          "2002:                     goto trunc;",
          "2003:                 else",
          "2004:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2005:                 break;",
          "2006:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2007:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2008:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2009:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2010:                 if (advance == -1)",
          "2011:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2012:                 else if (advance == -2)",
          "2013:                     goto trunc;",
          "2014:                 else",
          "2015:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2016:                 break;",
          "2017:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2018:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2019:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2020:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2021:                 if (advance == -1)",
          "2022:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2023:                 else if (advance == -2)",
          "2024:                     goto trunc;",
          "2025:                 else",
          "2026:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2027:                 break;",
          "2028:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2029:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2030:                 if (advance == -1)",
          "2031:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2032:                 else if (advance == -2)",
          "2033:                     goto trunc;",
          "2034:                 else",
          "2035:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2036:                 break;",
          "2038:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2039:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2040:                 if (advance == -1)",
          "2041:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2042:                 else if (advance == -2)",
          "2043:                     goto trunc;",
          "2044:                 else",
          "2045:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2047:             default:",
          "2048:                 ND_TCHECK_LEN(tptr - 3, tlen);",
          "2049:                 ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2050:                 if (ndo->ndo_vflag <= 1)",
          "2051:                     print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2052:                 advance = 0;",
          "2053:                 tptr = pptr + len;",
          "2054:                 break;",
          "2055:             }",
          "2056:             if (advance < 0)",
          "2057:                 break;",
          "2058:             tptr += advance;",
          "2060:         break;",
          "2061:     case BGPTYPE_EXTD_COMMUNITIES:",
          "2062:         if (len % 8) {",
          "2063:             ND_PRINT((ndo, \"invalid len\"));",
          "2064:             break;",
          "2065:         }",
          "2066:         while (tlen>0) {",
          "2067:             uint16_t extd_comm;",
          "2069:             ND_TCHECK_2(tptr);",
          "2070:             extd_comm=EXTRACT_BE_U_2(tptr);",
          "2072:             ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2073:                       tok2str(bgp_extd_comm_subtype_values,",
          "2074:                               \"unknown extd community typecode\",",
          "2075:                               extd_comm),",
          "2076:                       extd_comm,",
          "2077:                       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2079:             ND_TCHECK_6(tptr + 2);",
          "2080:             switch(extd_comm) {",
          "2081:             case BGP_EXT_COM_RT_0:",
          "2082:             case BGP_EXT_COM_RO_0:",
          "2083:             case BGP_EXT_COM_L2VPN_RT_0:",
          "2084:                 ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2085:                           EXTRACT_BE_U_2(tptr + 2),",
          "2086:                           EXTRACT_BE_U_4(tptr + 4),",
          "2087:                           ipaddr_string(ndo, tptr+4)));",
          "2088:                 break;",
          "2089:             case BGP_EXT_COM_RT_1:",
          "2090:             case BGP_EXT_COM_RO_1:",
          "2091:             case BGP_EXT_COM_L2VPN_RT_1:",
          "2092:             case BGP_EXT_COM_VRF_RT_IMP:",
          "2093:                 ND_PRINT((ndo, \": %s:%u\",",
          "2094:                           ipaddr_string(ndo, tptr+2),",
          "2095:                           EXTRACT_BE_U_2(tptr + 6)));",
          "2096:                 break;",
          "2097:             case BGP_EXT_COM_RT_2:",
          "2098:             case BGP_EXT_COM_RO_2:",
          "2099:                 ND_PRINT((ndo, \": %s:%u\",",
          "2100:                           as_printf(ndo, astostr, sizeof(astostr),",
          "2101:                           EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2102:                 break;",
          "2103:             case BGP_EXT_COM_LINKBAND:",
          "2104:                 bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2105:                 ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2106:                           bw.f*8/1000000));",
          "2107:                 break;",
          "2108:             case BGP_EXT_COM_VPN_ORIGIN:",
          "2109:             case BGP_EXT_COM_VPN_ORIGIN2:",
          "2110:             case BGP_EXT_COM_VPN_ORIGIN3:",
          "2111:             case BGP_EXT_COM_VPN_ORIGIN4:",
          "2112:             case BGP_EXT_COM_OSPF_RID:",
          "2113:             case BGP_EXT_COM_OSPF_RID2:",
          "2114:                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2115:                 break;",
          "2116:             case BGP_EXT_COM_OSPF_RTYPE:",
          "2117:             case BGP_EXT_COM_OSPF_RTYPE2:",
          "2118:                 ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2119:                           ipaddr_string(ndo, tptr+2),",
          "2120:                           tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2121:                                   \"unknown (0x%02x)\",",
          "2122:                                   EXTRACT_U_1((tptr + 6))),",
          "2123:                           (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2124:                           ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2126:             case BGP_EXT_COM_L2INFO:",
          "2127:                 ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2128:                           tok2str(l2vpn_encaps_values,",
          "2129:                                   \"unknown encaps\",",
          "2130:                                   EXTRACT_U_1((tptr + 2))),",
          "2131:                           EXTRACT_U_1((tptr + 3)),",
          "2132:                           EXTRACT_BE_U_2(tptr + 4)));",
          "2133:                 break;",
          "2134:             case BGP_EXT_COM_SOURCE_AS:",
          "2135:                 ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2136:                 break;",
          "2137:             default:",
          "2138:                 ND_TCHECK_8(tptr);",
          "2139:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2140:                 break;",
          "2141:             }",
          "2142:             tlen -= 8;",
          "2143:             tptr += 8;",
          "2144:         }",
          "2145:         break;",
          "2147:     case BGPTYPE_PMSI_TUNNEL:",
          "2148:     {",
          "2149:         uint8_t tunnel_type, flags;",
          "2151:         ND_TCHECK_5(tptr);",
          "2152:         flags = EXTRACT_U_1(tptr);",
          "2153:         tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2154:         tlen = len;",
          "2156:         ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2157:                   tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2158:                   tunnel_type,",
          "2159:                   bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2160:                   EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2162:         tptr +=5;",
          "2163:         tlen -= 5;",
          "2165:         switch (tunnel_type) {",
          "2167:         case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2168:             ND_TCHECK_8(tptr);",
          "2169:             ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2170:                       ipaddr_string(ndo, tptr),",
          "2171:                       ipaddr_string(ndo, tptr+4)));",
          "2174:         case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2175:             ND_TCHECK_8(tptr);",
          "2176:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2177:                       ipaddr_string(ndo, tptr),",
          "2178:                       ipaddr_string(ndo, tptr+4)));",
          "2179:             break;",
          "2180:         case BGP_PMSI_TUNNEL_INGRESS:",
          "2181:             ND_TCHECK_4(tptr);",
          "2182:             ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2183:                       ipaddr_string(ndo, tptr)));",
          "2184:             break;",
          "2186:         case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2187:             ND_TCHECK_8(tptr);",
          "2188:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2189:                       ipaddr_string(ndo, tptr),",
          "2190:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2191:             break;",
          "2192:         case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2193:             ND_TCHECK_8(tptr);",
          "2194:             ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2195:                       ipaddr_string(ndo, tptr),",
          "2196:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2197:             break;",
          "2198:         default:",
          "2199:             if (ndo->ndo_vflag <= 1) {",
          "2200:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2201:             }",
          "2203:         break;",
          "2204:     }",
          "2205:     case BGPTYPE_AIGP:",
          "2206:     {",
          "2207:         uint8_t type;",
          "2208:         uint16_t length;",
          "2210:         tlen = len;",
          "2212:         while (tlen >= 3) {",
          "2214:             ND_TCHECK_3(tptr);",
          "2216:             type = EXTRACT_U_1(tptr);",
          "2217:             length = EXTRACT_BE_U_2(tptr + 1);",
          "2218:             tptr += 3;",
          "2219:             tlen -= 3;",
          "2221:             ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2222:                       tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2223:                       type, length));",
          "2225:             if (length < 3)",
          "2226:                 goto trunc;",
          "2227:             length -= 3;",
          "2232:             ND_TCHECK_LEN(tptr + 3, length);",
          "2234:             switch (type) {",
          "2236:             case BGP_AIGP_TLV:",
          "2237:                 if (length < 8)",
          "2238:                     goto trunc;",
          "2239:                 ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2240:                           EXTRACT_BE_U_8(tptr)));",
          "2241:                 break;",
          "2243:             default:",
          "2244:                 if (ndo->ndo_vflag <= 1) {",
          "2245:                     print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2246:                 }",
          "2247:             }",
          "2249:             tptr += length;",
          "2250:             tlen -= length;",
          "2251:         }",
          "2252:         break;",
          "2253:     }",
          "2254:     case BGPTYPE_ATTR_SET:",
          "2255:         ND_TCHECK_4(tptr);",
          "2256:         if (len < 4)",
          "2257:             goto trunc;",
          "2258:         ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2259:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2260:         tptr += 4;",
          "2261:         len -= 4;",
          "2263:         while (len) {",
          "2264:             u_int aflags, alenlen, alen;",
          "2266:             ND_TCHECK_2(tptr);",
          "2267:             if (len < 2)",
          "2268:                 goto trunc;",
          "2269:             aflags = EXTRACT_U_1(tptr);",
          "2270:             atype = EXTRACT_U_1(tptr + 1);",
          "2271:             tptr += 2;",
          "2272:             len -= 2;",
          "2273:             alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2274:             ND_TCHECK_LEN(tptr, alenlen);",
          "2275:             if (len < alenlen)",
          "2276:                 goto trunc;",
          "2277:             alen = bgp_attr_len(aflags, tptr);",
          "2278:             tptr += alenlen;",
          "2279:             len -= alenlen;",
          "2281:             ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2282:                       tok2str(bgp_attr_values,",
          "2283:                               \"Unknown Attribute\", atype),",
          "2284:                       atype,",
          "2285:                       alen));",
          "2287:             if (aflags) {",
          "2288:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2289:                           aflags & 0x80 ? \"O\" : \"\",",
          "2290:                           aflags & 0x40 ? \"T\" : \"\",",
          "2291:                           aflags & 0x20 ? \"P\" : \"\",",
          "2292:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2293:                 if (aflags & 0xf)",
          "2294:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2295:                 ND_PRINT((ndo, \"]: \"));",
          "2296:             }",
          "2298:             if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2299:             return 0;",
          "2300:             tptr += alen;",
          "2301:             len -= alen;",
          "2302:         }",
          "2303:         break;",
          "2305:     case BGPTYPE_LARGE_COMMUNITY:",
          "2306:         if (len == 0 || len % 12) {",
          "2307:             ND_PRINT((ndo, \"invalid len\"));",
          "2308:             break;",
          "2309:         }",
          "2310:         ND_PRINT((ndo, \"\\n\\t    \"));",
          "2311:         while (len > 0) {",
          "2312:             ND_TCHECK_LEN(tptr, 12);",
          "2313:             ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2314:                       EXTRACT_BE_U_4(tptr),",
          "2315:                       EXTRACT_BE_U_4(tptr + 4),",
          "2316:                       EXTRACT_BE_U_4(tptr + 8),",
          "2317:                       (len > 12) ? \", \" : \"\"));",
          "2318:             tptr += 12;",
          "2319:             len -= 12;",
          "2320:         }",
          "2321:         break;",
          "2322:     default:",
          "2323:         ND_TCHECK_LEN(pptr, len);",
          "2325:         if (ndo->ndo_vflag <= 1)",
          "2326:             print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2327:         break;",
          "2328:     }",
          "2330:         ND_TCHECK_LEN(pptr, len);",
          "2331:         print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2332:     }",
          "2333:     return 1;",
          "2336:     return 0;",
          "2343:     u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2344:     u_int i = 0;",
          "2346:     while (i < caps_len) {",
          "2347:         ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2348:         cap_type=EXTRACT_U_1(opt + i);",
          "2349:         cap_len=EXTRACT_U_1(opt + i + 1);",
          "2350:         tcap_len=cap_len;",
          "2351:         ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2352:                   tok2str(bgp_capcode_values, \"Unknown\", cap_type),",
          "2353:                   cap_type,",
          "2354:                   cap_len));",
          "2355:         ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2356:         switch (cap_type) {",
          "2357:         case BGP_CAPCODE_MP:",
          "2358:             ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2359:                tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(opt + i + 2)),",
          "2360:                EXTRACT_BE_U_2(opt + i + 2),",
          "2361:                tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1(opt + i + 5)),",
          "2362:                EXTRACT_U_1(opt + i + 5)));",
          "2363:             break;",
          "2364:         case BGP_CAPCODE_RESTART:",
          "2365:             ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2366:                       ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2367:                       EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2368:             tcap_len-=2;",
          "2369:             cap_offset=4;",
          "2370:             while(tcap_len>=4) {",
          "2371:                 ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2372:                           tok2str(af_values,\"Unknown\",",
          "2373:                                   EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2374:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2375:                           tok2str(bgp_safi_values,\"Unknown\",",
          "2376:                                   EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2377:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2378:                           ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2379:                 tcap_len -= 4;",
          "2380:                 cap_offset += 4;",
          "2381:             }",
          "2382:             break;",
          "2383:         case BGP_CAPCODE_RR:",
          "2384:         case BGP_CAPCODE_RR_CISCO:",
          "2385:             break;",
          "2386:         case BGP_CAPCODE_AS_NEW:",
          "2391:             if (cap_len == 4) {",
          "2392:             ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2393:                       as_printf(ndo, astostr, sizeof(astostr),",
          "2394:                       EXTRACT_BE_U_4(opt + i + 2))));",
          "2395:             }",
          "2396:             break;",
          "2397:         case BGP_CAPCODE_ADD_PATH:",
          "2398:             cap_offset=2;",
          "2399:             if (tcap_len == 0) {",
          "2401:                 break;",
          "2402:             }",
          "2403:             while (tcap_len > 0) {",
          "2404:                 if (tcap_len < 4) {",
          "2405:                     ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2408:                 ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2409:                           tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2410:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2411:                           tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2412:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2413:                           tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2414:                 ));",
          "2415:                 tcap_len -= 4;",
          "2416:                 cap_offset += 4;",
          "2417:             }",
          "2418:             break;",
          "2419:         default:",
          "2420:             ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2421:                       cap_type));",
          "2422:             if (ndo->ndo_vflag <= 1)",
          "2423:                 print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2424:                                    cap_len);",
          "2425:             break;",
          "2427:         if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2428:             print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2429:         }",
          "2430:         i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2431:     }",
          "2432:     return;",
          "2435:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2442:     const struct bgp_open *bgp_open_header;",
          "2443:     u_int optslen;",
          "2444:     const struct bgp_opt *bgpopt;",
          "2445:     const u_char *opt;",
          "2446:     u_int i;",
          "2448:     ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2449:     if (length < BGP_OPEN_SIZE)",
          "2450:         goto trunc;",
          "2452:     bgp_open_header = (const struct bgp_open *)dat;",
          "2454:     ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2455:         EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2456:     ND_PRINT((ndo, \"my AS %s, \",",
          "2457:         as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2458:     ND_PRINT((ndo, \"Holdtime %us, \",",
          "2459:         EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2460:     ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2461:     optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2462:     ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2464:     opt = dat + BGP_OPEN_SIZE;",
          "2465:     length -= BGP_OPEN_SIZE;",
          "2467:     i = 0;",
          "2468:     while (i < optslen) {",
          "2469:         uint8_t opt_type, opt_len;",
          "2471:         ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2472:         if (length < BGP_OPT_SIZE + i)",
          "2473:             goto trunc;",
          "2474:         bgpopt = (const struct bgp_opt *)(opt + i);",
          "2475:         opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2476:         opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2477:         if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2478:             ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2479:                       opt_type, opt_len));",
          "2480:             break;",
          "2481:         }",
          "2483:         ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2484:                   tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2485:                   opt_type,",
          "2486:                   opt_len));",
          "2489:         switch(opt_type) {",
          "2491:         case BGP_OPT_CAP:",
          "2492:             bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2493:                                    opt_len);",
          "2494:             break;",
          "2496:         case BGP_OPT_AUTH:",
          "2497:         default:",
          "2498:                ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2499:                opt_type));",
          "2500:                break;",
          "2501:         }",
          "2502:         i += BGP_OPT_SIZE + opt_len;",
          "2503:     }",
          "2504:     return;",
          "2506:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2511:          const u_char *dat, int length)",
          "2513:     const struct bgp *bgp_header;",
          "2514:     const u_char *p;",
          "2515:     int withdrawn_routes_len;",
          "2516:     int len;",
          "2517:     int i;",
          "2519:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2520:     if (length < BGP_SIZE)",
          "2521:         goto trunc;",
          "2522:     bgp_header = (const struct bgp *)dat;",
          "2523:     p = dat + BGP_SIZE;",
          "2524:     length -= BGP_SIZE;",
          "2527:     ND_TCHECK_2(p);",
          "2528:     if (length < 2)",
          "2529:         goto trunc;",
          "2530:     withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2531:     p += 2;",
          "2532:     length -= 2;",
          "2533:     if (withdrawn_routes_len) {",
          "2539:         ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2540:         if (length < withdrawn_routes_len)",
          "2541:             goto trunc;",
          "2542:         ND_PRINT((ndo, \"\\n\\t  Withdrawn routes: %d bytes\", withdrawn_routes_len));",
          "2543:         p += withdrawn_routes_len;",
          "2544:         length -= withdrawn_routes_len;",
          "2545:     }",
          "2547:     ND_TCHECK_2(p);",
          "2548:     if (length < 2)",
          "2549:         goto trunc;",
          "2550:     len = EXTRACT_BE_U_2(p);",
          "2551:     p += 2;",
          "2552:     length -= 2;",
          "2554:     if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2556:         ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2557:         return;",
          "2558:     }",
          "2560:     if (len) {",
          "2562:         while (len) {",
          "2563:             int aflags, atype, alenlen, alen;",
          "2565:             ND_TCHECK_2(p);",
          "2566:             if (len < 2)",
          "2567:                 goto trunc;",
          "2568:             if (length < 2)",
          "2569:                 goto trunc;",
          "2570:             aflags = EXTRACT_U_1(p);",
          "2571:             atype = EXTRACT_U_1(p + 1);",
          "2572:             p += 2;",
          "2573:             len -= 2;",
          "2574:             length -= 2;",
          "2575:             alenlen = bgp_attr_lenlen(aflags, p);",
          "2576:             ND_TCHECK_LEN(p, alenlen);",
          "2577:             if (len < alenlen)",
          "2578:                 goto trunc;",
          "2579:             if (length < alenlen)",
          "2580:                 goto trunc;",
          "2581:             alen = bgp_attr_len(aflags, p);",
          "2582:             p += alenlen;",
          "2583:             len -= alenlen;",
          "2584:             length -= alenlen;",
          "2586:             ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2587:                       tok2str(bgp_attr_values, \"Unknown Attribute\", atype),",
          "2588:                       atype,",
          "2589:                       alen));",
          "2591:             if (aflags) {",
          "2592:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2593:                           aflags & 0x80 ? \"O\" : \"\",",
          "2594:                           aflags & 0x40 ? \"T\" : \"\",",
          "2595:                           aflags & 0x20 ? \"P\" : \"\",",
          "2596:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2597:                 if (aflags & 0xf)",
          "2598:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2599:                 ND_PRINT((ndo, \"]: \"));",
          "2600:             }",
          "2601:             if (len < alen)",
          "2602:                 goto trunc;",
          "2603:             if (length < alen)",
          "2604:                 goto trunc;",
          "2605:             if (!bgp_attr_print(ndo, atype, p, alen))",
          "2606:                 goto trunc;",
          "2607:             p += alen;",
          "2608:             len -= alen;",
          "2609:             length -= alen;",
          "2611:     }",
          "2613:     if (length) {",
          "2622:         ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2623:         while (length) {",
          "2624:             char buf[MAXHOSTNAMELEN + 100];",
          "2625:             i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2626:             if (i == -1) {",
          "2627:                 ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2628:                 break;",
          "2629:             } else if (i == -2)",
          "2630:                 goto trunc;",
          "2631:             else if (i == -3)",
          "2633:             else {",
          "2634:                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2635:                 p += i;",
          "2636:                 length -= i;",
          "2637:             }",
          "2638:         }",
          "2639:     }",
          "2640:     return;",
          "2642:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2647:                const u_char *dat, int length)",
          "2649:     const struct bgp_notification *bgp_notification_header;",
          "2650:     const u_char *tptr;",
          "2651:     uint8_t bgpn_major, bgpn_minor;",
          "2652:     uint8_t shutdown_comm_length;",
          "2653:     uint8_t remainder_offset;",
          "2655:     ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2656:     if (length<BGP_NOTIFICATION_SIZE)",
          "2657:         return;",
          "2659:     bgp_notification_header = (const struct bgp_notification *)dat;",
          "2660:     bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2661:     bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2663:     ND_PRINT((ndo, \", %s (%u)\",",
          "2664:               tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2665:                       bgpn_major),",
          "2666:               bgpn_major));",
          "2668:     switch (bgpn_major) {",
          "2670:     case BGP_NOTIFY_MAJOR_MSG:",
          "2671:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2672:                   tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2673:                           bgpn_minor),",
          "2674:                   bgpn_minor));",
          "2675:         break;",
          "2676:     case BGP_NOTIFY_MAJOR_OPEN:",
          "2677:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2678:                   tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2679:                           bgpn_minor),",
          "2680:                   bgpn_minor));",
          "2681:         break;",
          "2682:     case BGP_NOTIFY_MAJOR_UPDATE:",
          "2683:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2684:                   tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2685:                           bgpn_minor),",
          "2686:                   bgpn_minor));",
          "2687:         break;",
          "2688:     case BGP_NOTIFY_MAJOR_FSM:",
          "2689:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2690:                   tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2691:                           bgpn_minor),",
          "2692:                   bgpn_minor));",
          "2693:         break;",
          "2694:     case BGP_NOTIFY_MAJOR_CAP:",
          "2695:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2696:                   tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2697:                           bgpn_minor),",
          "2698:                   bgpn_minor));",
          "2699:         break;",
          "2700:     case BGP_NOTIFY_MAJOR_CEASE:",
          "2701:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2702:                   tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2703:                           bgpn_minor),",
          "2704:                   bgpn_minor));",
          "2709:         if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2710:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2711:             ND_TCHECK_7(tptr);",
          "2712:             ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2713:                       tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(tptr)),",
          "2714:                       EXTRACT_BE_U_2(tptr),",
          "2715:                       tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2716:                       EXTRACT_U_1((tptr + 2)),",
          "2717:                       EXTRACT_BE_U_4(tptr + 3)));",
          "2718:         }",
          "2723:         if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2724:              bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2725:              length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2726:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2727:             ND_TCHECK_1(tptr);",
          "2728:             shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2729:             remainder_offset = 0;",
          "2731:             if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2732:                 shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2733:                 ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2734:             }",
          "2735:             else if (shutdown_comm_length == 0) {",
          "2736:                 ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2737:                 remainder_offset += 1;",
          "2738:             }",
          "2740:             else {",
          "2741:                 ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2742:                 ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2743:                 (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2744:                 ND_PRINT((ndo, \"\\\"\"));",
          "2745:                 remainder_offset += shutdown_comm_length + 1;",
          "2746:             }",
          "2748:             if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2749:                 ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2750:                 hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2751:             }",
          "2753:         break;",
          "2754:     default:",
          "2755:         break;",
          "2756:     }",
          "2758:     return;",
          "2760:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2765:             const u_char *pptr, int len)",
          "2767:     const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2769:     ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2772:     if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2773:         return;",
          "2775:     bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2777:     ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2778:               tok2str(af_values,\"Unknown\",",
          "2779:                       EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2780:               EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2781:               tok2str(bgp_safi_values,\"Unknown\",",
          "2782:                       EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2783:               EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2785:     if (ndo->ndo_vflag > 1) {",
          "2786:         ND_TCHECK_LEN(pptr, len);",
          "2787:         print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2788:     }",
          "2790:     return;",
          "2792:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2797:          const u_char *dat, u_int length)",
          "2799:     const struct bgp *bgp_header;",
          "2800:     uint8_t bgp_type;",
          "2802:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2803:     bgp_header = (const struct bgp *)dat;",
          "2804:     bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2806:     ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2807:               tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2808:               bgp_type,",
          "2809:               length));",
          "2811:     switch (bgp_type) {",
          "2812:     case BGP_OPEN:",
          "2813:         bgp_open_print(ndo, dat, length);",
          "2814:         break;",
          "2815:     case BGP_UPDATE:",
          "2816:         bgp_update_print(ndo, dat, length);",
          "2817:         break;",
          "2818:     case BGP_NOTIFICATION:",
          "2819:         bgp_notification_print(ndo, dat, length);",
          "2820:         break;",
          "2821:     case BGP_KEEPALIVE:",
          "2822:         break;",
          "2823:     case BGP_ROUTE_REFRESH:",
          "2824:         bgp_route_refresh_print(ndo, dat, length);",
          "2825:         break;",
          "2826:     default:",
          "2828:         ND_TCHECK_LEN(dat, length);",
          "2829:         ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2830:         print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2831:         break;",
          "2832:     }",
          "2833:     return 1;",
          "2835:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2836:     return 0;",
          "2841:       const u_char *dat, int length)",
          "2843:     const u_char *p;",
          "2844:     const u_char *ep;",
          "2845:     const u_char *start;",
          "2846:     const u_char marker[] = {",
          "2847:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2848:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2849:     };",
          "2850:     const struct bgp *bgp_header;",
          "2851:     uint16_t hlen;",
          "2853:     ep = dat + length;",
          "2854:     if (ndo->ndo_snapend < dat + length)",
          "2855:         ep = ndo->ndo_snapend;",
          "2857:     ND_PRINT((ndo, \": BGP\"));",
          "2860:         return;",
          "2862:     p = dat;",
          "2863:     start = p;",
          "2864:     while (p < ep) {",
          "2865:         if (!ND_TTEST_1(p))",
          "2866:             break;",
          "2867:         if (EXTRACT_U_1(p) != 0xff) {",
          "2868:             p++;",
          "2869:             continue;",
          "2870:         }",
          "2872:         if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "2873:             break;",
          "2874:         if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "2875:             p++;",
          "2876:             continue;",
          "2877:         }",
          "2880:         ND_TCHECK_LEN(p, BGP_SIZE);",
          "2881:         bgp_header = (const struct bgp *)p;",
          "2883:         if (start != p)",
          "2884:             ND_PRINT((ndo, \" [|BGP]\"));",
          "2886:         hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "2887:         if (hlen < BGP_SIZE) {",
          "2888:             ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "2889:                       BGP_SIZE));",
          "2890:             break;",
          "2891:         }",
          "2893:         if (ND_TTEST_LEN(p, hlen)) {",
          "2894:             if (!bgp_pdu_print(ndo, p, hlen))",
          "2896:             p += hlen;",
          "2897:             start = p;",
          "2898:         } else {",
          "2899:             ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "2900:                       tok2str(bgp_msg_values,",
          "2901:                               \"Unknown Message Type\",",
          "2902:                               EXTRACT_U_1(bgp_header->bgp_type))));",
          "2903:             break;",
          "2904:         }",
          "2905:     }",
          "2907:     return;",
          "2910:     ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ceeae50d82649235205e55323a210308d543639",
      "candidate_info": {
        "commit_hash": "6ceeae50d82649235205e55323a210308d543639",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/6ceeae50d82649235205e55323a210308d543639",
        "files": [
          "print-bgp.c"
        ],
        "message": "Temporarily undo whitespace cleanups to help a pull request.\n\nHopefully this will reduce the number of conflicts.",
        "before_after_code_files": [
          "print-bgp.c||print-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-bgp.c||print-bgp.c"
          ],
          "candidate": [
            "print-bgp.c||print-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"l2vpn.h\"",
          "50: struct bgp {",
          "54: };",
          "61: #define BGP_ROUTE_REFRESH       5",
          "63: static const struct tok bgp_msg_values[] = {",
          "",
          "[Removed Lines]",
          "51:     nd_byte     bgp_marker[16];",
          "52:     nd_uint16_t bgp_len;",
          "53:     nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN                1",
          "58: #define BGP_UPDATE              2",
          "59: #define BGP_NOTIFICATION        3",
          "60: #define BGP_KEEPALIVE           4",
          "",
          "[Added Lines]",
          "51:  nd_byte     bgp_marker[16];",
          "52:  nd_uint16_t bgp_len;",
          "53:  nd_uint8_t  bgp_type;",
          "57: #define BGP_OPEN  1",
          "58: #define BGP_UPDATE  2",
          "59: #define BGP_NOTIFICATION 3",
          "60: #define BGP_KEEPALIVE  4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: };",
          "72: struct bgp_open {",
          "82: };",
          "85: struct bgp_opt {",
          "89: };",
          "93: struct bgp_notification {",
          "99: };",
          "102: struct bgp_route_refresh {",
          "109: };",
          "110: #define BGP_ROUTE_REFRESH_SIZE          23",
          "112: #define bgp_attr_lenlen(flags, p) \\",
          "114: #define bgp_attr_len(flags, p) \\",
          "",
          "[Removed Lines]",
          "73:     nd_byte     bgpo_marker[16];",
          "74:     nd_uint16_t bgpo_len;",
          "75:     nd_uint8_t  bgpo_type;",
          "76:     nd_uint8_t  bgpo_version;",
          "77:     nd_uint16_t bgpo_myas;",
          "78:     nd_uint16_t bgpo_holdtime;",
          "79:     nd_uint32_t bgpo_id;",
          "80:     nd_uint8_t  bgpo_optlen;",
          "86:     nd_uint8_t bgpopt_type;",
          "87:     nd_uint8_t bgpopt_len;",
          "94:     nd_byte     bgpn_marker[16];",
          "95:     nd_uint16_t bgpn_len;",
          "96:     nd_uint8_t  bgpn_type;",
          "97:     nd_uint8_t  bgpn_major;",
          "98:     nd_uint8_t  bgpn_minor;",
          "103:     nd_byte     bgp_marker[16];",
          "104:     nd_uint16_t len;",
          "106:     nd_uint16_t afi;",
          "107:     nd_uint8_t  res;",
          "108:     nd_uint8_t  safi;",
          "113:     (((flags) & 0x10) ? 2 : 1)",
          "115:     (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN                   1",
          "118: #define BGPTYPE_AS_PATH                  2",
          "119: #define BGPTYPE_NEXT_HOP                 3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC          4",
          "121: #define BGPTYPE_LOCAL_PREF               5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE         6",
          "123: #define BGPTYPE_AGGREGATOR               7",
          "",
          "[Added Lines]",
          "73:  nd_byte     bgpo_marker[16];",
          "74:  nd_uint16_t bgpo_len;",
          "75:  nd_uint8_t  bgpo_type;",
          "76:  nd_uint8_t  bgpo_version;",
          "77:  nd_uint16_t bgpo_myas;",
          "78:  nd_uint16_t bgpo_holdtime;",
          "79:  nd_uint32_t bgpo_id;",
          "80:  nd_uint8_t  bgpo_optlen;",
          "86:  nd_uint8_t bgpopt_type;",
          "87:  nd_uint8_t bgpopt_len;",
          "94:  nd_byte     bgpn_marker[16];",
          "95:  nd_uint16_t bgpn_len;",
          "96:  nd_uint8_t  bgpn_type;",
          "97:  nd_uint8_t  bgpn_major;",
          "98:  nd_uint8_t  bgpn_minor;",
          "103:  nd_byte     bgp_marker[16];",
          "104:  nd_uint16_t len;",
          "106:  nd_uint16_t afi;",
          "107:  nd_uint8_t  res;",
          "108:  nd_uint8_t  safi;",
          "113:  (((flags) & 0x10) ? 2 : 1)",
          "115:  (((flags) & 0x10) ? EXTRACT_BE_U_2(p) : EXTRACT_U_1(p))",
          "117: #define BGPTYPE_ORIGIN   1",
          "118: #define BGPTYPE_AS_PATH   2",
          "119: #define BGPTYPE_NEXT_HOP  3",
          "120: #define BGPTYPE_MULTI_EXIT_DISC  4",
          "121: #define BGPTYPE_LOCAL_PREF  5",
          "122: #define BGPTYPE_ATOMIC_AGGREGATE 6",
          "123: #define BGPTYPE_AGGREGATOR  7",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404: };",
          "",
          "[Removed Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT              0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT              0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED    0xffffff03",
          "",
          "[Added Lines]",
          "407: #define BGP_COMMUNITY_NO_EXPORT   0xffffff01",
          "408: #define BGP_COMMUNITY_NO_ADVERT   0xffffff02",
          "409: #define BGP_COMMUNITY_NO_EXPORT_SUBCONFED 0xffffff03",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444: #define BGP_EXT_COM_EIGRP_EXT_REMPROTO_REMMETRIC 0x8805",
          "446: static const struct tok bgp_extd_comm_flag_values[] = {",
          "",
          "[Removed Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN                    0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY        0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW       0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU        0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID        0x8804",
          "",
          "[Added Lines]",
          "439: #define BGP_EXT_COM_EIGRP_GEN   0x8800",
          "440: #define BGP_EXT_COM_EIGRP_METRIC_AS_DELAY  0x8801",
          "441: #define BGP_EXT_COM_EIGRP_METRIC_REL_NH_BW 0x8802",
          "442: #define BGP_EXT_COM_EIGRP_METRIC_LOAD_MTU  0x8803",
          "443: #define BGP_EXT_COM_EIGRP_EXT_REMAS_REMID  0x8804",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "502: static const struct tok bgp_add_path_recvsend[] = {",
          "507: };",
          "509: static char astostr[20];",
          "",
          "[Removed Lines]",
          "503:     { 1, \"Receive\" },",
          "504:     { 2, \"Send\" },",
          "505:     { 3, \"Both\" },",
          "506:     { 0, NULL },",
          "",
          "[Added Lines]",
          "503:   { 1, \"Receive\" },",
          "504:   { 2, \"Send\" },",
          "505:   { 3, \"Both\" },",
          "506:   { 0, NULL },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521: as_printf(netdissect_options *ndo,",
          "522:           char *str, int size, u_int asnum)",
          "523: {",
          "530: }",
          "532: #define ITEMCHECK(minlen) if (itemlen < minlen) goto badtlv;",
          "",
          "[Removed Lines]",
          "524:     if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:         snprintf(str, size, \"%u\", asnum);",
          "526:     } else {",
          "527:         snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:     }",
          "529:     return str;",
          "",
          "[Added Lines]",
          "524:  if (!ndo->ndo_bflag || asnum <= 0xFFFF) {",
          "525:   snprintf(str, size, \"%u\", asnum);",
          "526:  } else {",
          "527:   snprintf(str, size, \"%u.%u\", asnum >> 16, asnum & 0xFFFF);",
          "528:  }",
          "529:  return str;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "535: decode_prefix4(netdissect_options *ndo,",
          "536:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "537: {",
          "559: trunc:",
          "562: badtlv:",
          "564: }",
          "566: static int",
          "567: decode_labeled_prefix4(netdissect_options *ndo,",
          "568:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "569: {",
          "612: trunc:",
          "615: badtlv:",
          "617: }",
          "",
          "[Removed Lines]",
          "538:     struct in_addr addr;",
          "539:     u_int plen, plenbytes;",
          "541:     ND_TCHECK_1(pptr);",
          "542:     ITEMCHECK(1);",
          "543:     plen = EXTRACT_U_1(pptr);",
          "544:     if (32 < plen)",
          "545:         return -1;",
          "546:     itemlen -= 1;",
          "548:     memset(&addr, 0, sizeof(addr));",
          "549:     plenbytes = (plen + 7) / 8;",
          "550:     ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:     ITEMCHECK(plenbytes);",
          "552:     memcpy(&addr, pptr + 1, plenbytes);",
          "553:     if (plen % 8) {",
          "554:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "555:     }",
          "556:     snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "557:     return 1 + plenbytes;",
          "560:     return -2;",
          "563:     return -3;",
          "570:     struct in_addr addr;",
          "571:     u_int plen, plenbytes;",
          "574:     ND_TCHECK_4(pptr);",
          "575:     ITEMCHECK(4);",
          "579:        the label length (actually the label + COS bits)",
          "580:        is added to the prefix length;",
          "581:        we also do only read out just one label -",
          "582:        there is no real application for advertisement of",
          "583:        stacked labels in a single BGP message",
          "586:     if (24 > plen)",
          "587:         return -1;",
          "591:     if (32 < plen)",
          "592:         return -1;",
          "593:     itemlen -= 4;",
          "595:     memset(&addr, 0, sizeof(addr));",
          "596:     plenbytes = (plen + 7) / 8;",
          "597:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "598:     ITEMCHECK(plenbytes);",
          "599:     memcpy(&addr, pptr + 4, plenbytes);",
          "600:     if (plen % 8) {",
          "601:         ((u_char *)&addr)[plenbytes - 1] &= ((0xff00 >> (plen % 8)) & 0xff);",
          "602:     }",
          "604:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "605:              ipaddr_string(ndo, &addr),",
          "606:              plen,",
          "607:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "608:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "610:     return 4 + plenbytes;",
          "613:     return -2;",
          "616:     return -3;",
          "",
          "[Added Lines]",
          "538:  struct in_addr addr;",
          "539:  u_int plen, plenbytes;",
          "541:  ND_TCHECK_1(pptr);",
          "542:  ITEMCHECK(1);",
          "543:  plen = EXTRACT_U_1(pptr);",
          "544:  if (32 < plen)",
          "545:   return -1;",
          "546:  itemlen -= 1;",
          "548:  memset(&addr, 0, sizeof(addr));",
          "549:  plenbytes = (plen + 7) / 8;",
          "550:  ND_TCHECK_LEN(pptr + 1, plenbytes);",
          "551:  ITEMCHECK(plenbytes);",
          "552:  memcpy(&addr, pptr + 1, plenbytes);",
          "553:  if (plen % 8) {",
          "554:   ((u_char *)&addr)[plenbytes - 1] &=",
          "555:    ((0xff00 >> (plen % 8)) & 0xff);",
          "556:  }",
          "557:  snprintf(buf, buflen, \"%s/%d\", ipaddr_string(ndo, &addr), plen);",
          "558:  return 1 + plenbytes;",
          "561:  return -2;",
          "564:  return -3;",
          "571:  struct in_addr addr;",
          "572:  u_int plen, plenbytes;",
          "575:  ND_TCHECK_4(pptr);",
          "576:  ITEMCHECK(4);",
          "580:            the label length (actually the label + COS bits)",
          "581:            is added to the prefix length;",
          "582:            we also do only read out just one label -",
          "583:            there is no real application for advertisement of",
          "584:            stacked labels in a single BGP message",
          "587:  if (24 > plen)",
          "588:   return -1;",
          "592:  if (32 < plen)",
          "593:   return -1;",
          "594:  itemlen -= 4;",
          "596:  memset(&addr, 0, sizeof(addr));",
          "597:  plenbytes = (plen + 7) / 8;",
          "598:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "599:  ITEMCHECK(plenbytes);",
          "600:  memcpy(&addr, pptr + 4, plenbytes);",
          "601:  if (plen % 8) {",
          "602:   ((u_char *)&addr)[plenbytes - 1] &=",
          "603:    ((0xff00 >> (plen % 8)) & 0xff);",
          "604:  }",
          "606:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "607:                  ipaddr_string(ndo, &addr),",
          "608:                  plen,",
          "609:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "610:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "612:  return 4 + plenbytes;",
          "615:  return -2;",
          "618:  return -3;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "688:     offset = strlen(buf);",
          "689:     if (addr_length) {",
          "690:         snprintf(buf + offset, buflen - offset, \", Source %s\",",
          "692:         pptr += (addr_length >> 3);",
          "693:     }",
          "",
          "[Removed Lines]",
          "691:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "693:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "703:     offset = strlen(buf);",
          "704:     if (addr_length) {",
          "705:         snprintf(buf + offset, buflen - offset, \", Group %s\",",
          "707:         pptr += (addr_length >> 3);",
          "708:     }",
          "",
          "[Removed Lines]",
          "706:              bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "[Added Lines]",
          "708:                  bgp_vpn_ip_print(ndo, pptr, addr_length));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "738:     case 1:",
          "739:         snprintf(pos, sizeof(rd) - (pos - rd), \"%u.%u.%u.%u:%u\",",
          "743:         break;",
          "746:     case 2:",
          "752:         break;",
          "753:     default:",
          "754:         snprintf(pos, sizeof(rd) - (pos - rd), \"unknown RD format\");",
          "",
          "[Removed Lines]",
          "740:                  EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "741:                  EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "742:                  EXTRACT_BE_U_2(pptr + 6));",
          "747:         snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "748:                  as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "749:                  EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "750:                  EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "751:                  EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "[Added Lines]",
          "742:             EXTRACT_U_1(pptr + 2), EXTRACT_U_1(pptr + 3),",
          "743:             EXTRACT_U_1(pptr + 4), EXTRACT_U_1(pptr + 5),",
          "744:             EXTRACT_BE_U_2(pptr + 6));",
          "749:  snprintf(pos, sizeof(rd) - (pos - rd), \"%s:%u (%u.%u.%u.%u:%u)\",",
          "750:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(pptr + 2)),",
          "751:      EXTRACT_BE_U_2(pptr + 6), EXTRACT_U_1(pptr + 2),",
          "752:      EXTRACT_U_1(pptr + 3), EXTRACT_U_1(pptr + 4),",
          "753:      EXTRACT_U_1(pptr + 5), EXTRACT_BE_U_2(pptr + 6));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "763: decode_rt_routing_info(netdissect_options *ndo,",
          "764:                        const u_char *pptr, char *buf, u_int buflen)",
          "765: {",
          "814: trunc:",
          "816: }",
          "818: static int",
          "819: decode_labeled_vpn_prefix4(netdissect_options *ndo,",
          "820:                            const u_char *pptr, char *buf, u_int buflen)",
          "821: {",
          "853: trunc:",
          "855: }",
          "",
          "[Removed Lines]",
          "766:     uint8_t route_target[8];",
          "767:     u_int plen;",
          "771:     ND_TCHECK_1(pptr);",
          "778:     if (0 == plen) {",
          "780:         snprintf(buf, buflen, \"default route target\");",
          "781:         return 1;",
          "782:     }",
          "784:     if (32 > plen)",
          "785:         return -1;",
          "788:     ND_TCHECK_4(pptr + 1);",
          "789:     as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "793:     if (64 < plen)",
          "794:         return -1;",
          "800:     memset(&route_target, 0, sizeof(route_target));",
          "801:     ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "802:     memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "804:     if (plen % 8) {",
          "805:         ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "806:             ((0xff00 >> (plen % 8)) & 0xff);",
          "807:     }",
          "808:     snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "809:              asbuf,",
          "810:              bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "812:     return 5 + (plen + 7) / 8;",
          "815:     return -2;",
          "822:     struct in_addr addr;",
          "823:     u_int plen;",
          "825:     ND_TCHECK_1(pptr);",
          "828:     if ((24+64) > plen)",
          "829:         return -1;",
          "833:     if (32 < plen)",
          "834:         return -1;",
          "836:     memset(&addr, 0, sizeof(addr));",
          "837:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "838:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "839:     if (plen % 8) {",
          "840:         ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "841:             ((0xff00 >> (plen % 8)) & 0xff);",
          "842:     }",
          "844:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "845:              bgp_vpn_rd_print(ndo, pptr+4),",
          "846:              ipaddr_string(ndo, &addr),",
          "847:              plen,",
          "848:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "849:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "851:     return 12 + (plen + 7) / 8;",
          "854:     return -2;",
          "",
          "[Added Lines]",
          "768:  uint8_t route_target[8];",
          "769:  u_int plen;",
          "773:  ND_TCHECK_1(pptr);",
          "780:  if (0 == plen) {",
          "782:   snprintf(buf, buflen, \"default route target\");",
          "783:   return 1;",
          "784:  }",
          "786:  if (32 > plen)",
          "787:   return -1;",
          "790:  ND_TCHECK_4(pptr + 1);",
          "791:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_U_4(pptr + 1));",
          "795:  if (64 < plen)",
          "796:   return -1;",
          "802:  memset(&route_target, 0, sizeof(route_target));",
          "803:  ND_TCHECK_LEN(pptr + 5, (plen + 7) / 8);",
          "804:  memcpy(&route_target, pptr + 5, (plen + 7) / 8);",
          "806:  if (plen % 8) {",
          "807:   ((u_char *)&route_target)[(plen + 7) / 8 - 1] &=",
          "808:    ((0xff00 >> (plen % 8)) & 0xff);",
          "809:  }",
          "810:  snprintf(buf, buflen, \"origin AS: %s, route target %s\",",
          "811:      asbuf,",
          "812:      bgp_vpn_rd_print(ndo, (u_char *)&route_target));",
          "814:  return 5 + (plen + 7) / 8;",
          "817:  return -2;",
          "824:  struct in_addr addr;",
          "825:  u_int plen;",
          "827:  ND_TCHECK_1(pptr);",
          "830:  if ((24+64) > plen)",
          "831:   return -1;",
          "835:  if (32 < plen)",
          "836:   return -1;",
          "838:  memset(&addr, 0, sizeof(addr));",
          "839:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "840:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "841:  if (plen % 8) {",
          "842:   ((u_char *)&addr)[(plen + 7) / 8 - 1] &=",
          "843:    ((0xff00 >> (plen % 8)) & 0xff);",
          "844:  }",
          "846:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "847:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "848:                  ipaddr_string(ndo, &addr),",
          "849:                  plen,",
          "850:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "851:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "853:  return 12 + (plen + 7) / 8;",
          "856:  return -2;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "869: static int",
          "870: decode_mdt_vpn_nlri(netdissect_options *ndo,",
          "872: {",
          "873:     const u_char *rd;",
          "874:     const u_char *vpn_ip;",
          "",
          "[Removed Lines]",
          "871:             const u_char *pptr, char *buf, u_int buflen)",
          "",
          "[Added Lines]",
          "873:                     const u_char *pptr, char *buf, u_int buflen)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "879:     if (EXTRACT_U_1(pptr) != MDT_VPN_NLRI_LEN * 8)",
          "881:     pptr++;",
          "884:     ND_TCHECK_8(pptr);",
          "885:     rd = pptr;",
          "889:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "890:     vpn_ip = pptr;",
          "894:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "896:     snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "899:     return MDT_VPN_NLRI_LEN + 1;",
          "901:  trunc:",
          "903: }",
          "905: #define BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI   1",
          "",
          "[Removed Lines]",
          "880:         return -1;",
          "886:     pptr += 8;",
          "891:     pptr += sizeof(struct in_addr);",
          "897:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "902:     return -2;",
          "",
          "[Added Lines]",
          "883:  return -1;",
          "889:     pptr+=8;",
          "894:     pptr+=sizeof(struct in_addr);",
          "900:       bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "906: return -2;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "924: static int",
          "925: decode_multicast_vpn(netdissect_options *ndo,",
          "927: {",
          "1009: trunc:",
          "1011: }",
          "",
          "[Removed Lines]",
          "926:              const u_char *pptr, char *buf, u_int buflen)",
          "928:     uint8_t route_type, route_length, addr_length, sg_length;",
          "929:     u_int offset;",
          "931:     ND_TCHECK_2(pptr);",
          "932:     route_type = EXTRACT_U_1(pptr);",
          "933:     pptr++;",
          "934:     route_length = EXTRACT_U_1(pptr);",
          "935:     pptr++;",
          "937:     snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "938:          tok2str(bgp_multicast_vpn_route_type_values,",
          "939:                  \"Unknown\", route_type),",
          "940:          route_type, route_length);",
          "942:     switch(route_type) {",
          "943:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "944:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "945:         offset = strlen(buf);",
          "946:         snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "947:                  bgp_vpn_rd_print(ndo, pptr),",
          "948:                  bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "949:                                   (route_length - BGP_VPN_RD_LEN) << 3));",
          "950:         break;",
          "951:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "952:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "953:         offset = strlen(buf);",
          "954:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "955:         bgp_vpn_rd_print(ndo, pptr),",
          "956:         as_printf(ndo, astostr, sizeof(astostr),",
          "957:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "958:         break;",
          "960:     case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "961:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "962:         offset = strlen(buf);",
          "963:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "964:                  bgp_vpn_rd_print(ndo, pptr));",
          "965:         pptr += BGP_VPN_RD_LEN;",
          "967:         sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "968:         addr_length =  route_length - sg_length;",
          "970:         ND_TCHECK_LEN(pptr, addr_length);",
          "971:         offset = strlen(buf);",
          "972:         snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "973:                  bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "974:         break;",
          "976:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "977:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "978:         offset = strlen(buf);",
          "979:         snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "980:                  bgp_vpn_rd_print(ndo, pptr));",
          "981:         pptr += BGP_VPN_RD_LEN;",
          "983:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "984:         break;",
          "987:     case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "988:         ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "989:         offset = strlen(buf);",
          "990:         snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "991:         bgp_vpn_rd_print(ndo, pptr),",
          "992:         as_printf(ndo, astostr, sizeof(astostr),",
          "993:         EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "994:         pptr += BGP_VPN_RD_LEN + 4;",
          "996:         bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "997:         break;",
          "1002:     case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1003:     default:",
          "1004:         break;",
          "1005:     }",
          "1007:     return route_length + 2;",
          "1010:     return -2;",
          "",
          "[Added Lines]",
          "930:                      const u_char *pptr, char *buf, u_int buflen)",
          "932:         uint8_t route_type, route_length, addr_length, sg_length;",
          "933:         u_int offset;",
          "935:  ND_TCHECK_2(pptr);",
          "936:         route_type = EXTRACT_U_1(pptr);",
          "937:         pptr++;",
          "938:         route_length = EXTRACT_U_1(pptr);",
          "939:         pptr++;",
          "941:         snprintf(buf, buflen, \"Route-Type: %s (%u), length: %u\",",
          "942:                  tok2str(bgp_multicast_vpn_route_type_values,",
          "943:                          \"Unknown\", route_type),",
          "944:                  route_type, route_length);",
          "946:         switch(route_type) {",
          "947:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_I_PMSI:",
          "948:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "949:             offset = strlen(buf);",
          "950:             snprintf(buf + offset, buflen - offset, \", RD: %s, Originator %s\",",
          "951:                      bgp_vpn_rd_print(ndo, pptr),",
          "952:                      bgp_vpn_ip_print(ndo, pptr + BGP_VPN_RD_LEN,",
          "953:                                       (route_length - BGP_VPN_RD_LEN) << 3));",
          "954:             break;",
          "955:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTER_AS_I_PMSI:",
          "956:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "957:             offset = strlen(buf);",
          "958:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "959:   bgp_vpn_rd_print(ndo, pptr),",
          "960:   as_printf(ndo, astostr, sizeof(astostr),",
          "961:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "962:             break;",
          "964:         case BGP_MULTICAST_VPN_ROUTE_TYPE_S_PMSI:",
          "965:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "966:             offset = strlen(buf);",
          "967:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "968:                      bgp_vpn_rd_print(ndo, pptr));",
          "969:             pptr += BGP_VPN_RD_LEN;",
          "971:             sg_length = bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "972:             addr_length =  route_length - sg_length;",
          "974:             ND_TCHECK_LEN(pptr, addr_length);",
          "975:             offset = strlen(buf);",
          "976:             snprintf(buf + offset, buflen - offset, \", Originator %s\",",
          "977:                      bgp_vpn_ip_print(ndo, pptr, addr_length << 3));",
          "978:             break;",
          "980:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_ACTIVE:",
          "981:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN);",
          "982:             offset = strlen(buf);",
          "983:             snprintf(buf + offset, buflen - offset, \", RD: %s\",",
          "984:                      bgp_vpn_rd_print(ndo, pptr));",
          "985:             pptr += BGP_VPN_RD_LEN;",
          "987:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "988:             break;",
          "991:         case BGP_MULTICAST_VPN_ROUTE_TYPE_SOURCE_TREE_JOIN:",
          "992:             ND_TCHECK_LEN(pptr, BGP_VPN_RD_LEN + 4);",
          "993:             offset = strlen(buf);",
          "994:      snprintf(buf + offset, buflen - offset, \", RD: %s, Source-AS %s\",",
          "995:   bgp_vpn_rd_print(ndo, pptr),",
          "996:   as_printf(ndo, astostr, sizeof(astostr),",
          "997:   EXTRACT_BE_U_4(pptr + BGP_VPN_RD_LEN)));",
          "998:             pptr += BGP_VPN_RD_LEN + 4;",
          "1000:             bgp_vpn_sg_print(ndo, pptr, buf, buflen);",
          "1001:             break;",
          "1006:         case BGP_MULTICAST_VPN_ROUTE_TYPE_INTRA_AS_SEG_LEAF:",
          "1007:         default:",
          "1008:             break;",
          "1009:         }",
          "1011:         return route_length + 2;",
          "1014:  return -2;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1023: #define UPDATE_BUF_BUFLEN(buf, buflen, stringlen) \\",
          "1024:     if (stringlen<0) \\",
          "1026:     else if ((u_int)stringlen>buflen) \\",
          "1027:         buflen=0; \\",
          "1028:     else { \\",
          "1029:         buflen-=stringlen; \\",
          "1031:     }",
          "1033: static int",
          "1034: decode_labeled_vpn_l2(netdissect_options *ndo,",
          "1036: {",
          "1124: trunc:",
          "1126: }",
          "1128: int",
          "1129: decode_prefix6(netdissect_options *ndo,",
          "1130:                const u_char *pd, u_int itemlen, char *buf, u_int buflen)",
          "1131: {",
          "1154: trunc:",
          "1157: badtlv:",
          "1159: }",
          "1161: static int",
          "1162: decode_labeled_prefix6(netdissect_options *ndo,",
          "1164: {",
          "1199: trunc:",
          "1202: badtlv:",
          "1204: }",
          "1206: static int",
          "1207: decode_labeled_vpn_prefix6(netdissect_options *ndo,",
          "1208:                            const u_char *pptr, char *buf, u_int buflen)",
          "1209: {",
          "1241: trunc:",
          "1243: }",
          "1245: static int",
          "1246: decode_clnp_prefix(netdissect_options *ndo,",
          "1247:                    const u_char *pptr, char *buf, u_int buflen)",
          "1248: {",
          "1271: trunc:",
          "1273: }",
          "1275: static int",
          "1276: decode_labeled_vpn_clnp_prefix(netdissect_options *ndo,",
          "1278: {",
          "1310: trunc:",
          "1312: }",
          "",
          "[Removed Lines]",
          "1025:         buflen=0; \\",
          "1030:         buf+=stringlen; \\",
          "1035:               const u_char *pptr, char *buf, u_int buflen)",
          "1037:     int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1039:     ND_TCHECK_2(pptr);",
          "1040:     plen=EXTRACT_BE_U_2(pptr);",
          "1041:     tlen=plen;",
          "1042:     pptr += 2;",
          "1047:     if (plen==12) {",
          "1049:         ND_TCHECK_LEN(pptr, 12);",
          "1050:         buf[0]='\\0';",
          "1051:         stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1052:                            bgp_vpn_rd_print(ndo, pptr),",
          "1053:                            ipaddr_string(ndo, pptr+8)",
          "1054:                    );",
          "1055:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1056:         pptr+=12;",
          "1057:         tlen-=12;",
          "1058:         return plen;",
          "1059:     } else if (plen>17) {",
          "1063:         ND_TCHECK_LEN(pptr, 15);",
          "1064:         buf[0]='\\0';",
          "1065:         stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1066:                            bgp_vpn_rd_print(ndo, pptr),",
          "1067:                            EXTRACT_BE_U_2(pptr + 8),",
          "1068:                            EXTRACT_BE_U_2(pptr + 10),",
          "1070:         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1071:         pptr+=15;",
          "1072:         tlen-=15;",
          "1075:         while (tlen>0) {",
          "1076:             if (tlen < 3)",
          "1077:                 return -1;",
          "1078:             ND_TCHECK_3(pptr);",
          "1079:             tlv_type=EXTRACT_U_1(pptr);",
          "1080:             pptr++;",
          "1081:             tlv_len=EXTRACT_BE_U_2(pptr);",
          "1082:             ttlv_len=tlv_len;",
          "1083:             pptr+=2;",
          "1085:             switch(tlv_type) {",
          "1086:             case 1:",
          "1087:                 if (buflen!=0) {",
          "1088:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1089:                                        tlv_type,",
          "1090:                                        tlv_len);",
          "1091:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1092:                 }",
          "1094:                 while (ttlv_len>0) {",
          "1095:                     ND_TCHECK_1(pptr);",
          "1096:                     if (buflen!=0) {",
          "1097:                         stringlen=snprintf(buf,buflen, \"%02x\",",
          "1098:                                            EXTRACT_U_1(pptr));",
          "1099:                         pptr++;",
          "1100:                         UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1101:                     }",
          "1102:                     ttlv_len--;",
          "1103:                 }",
          "1104:                 break;",
          "1105:             default:",
          "1106:                 if (buflen!=0) {",
          "1107:                     stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1108:                                        tlv_type,",
          "1109:                                        tlv_len);",
          "1110:                     UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1111:                 }",
          "1112:                 break;",
          "1113:             }",
          "1115:         }",
          "1116:         return plen+2;",
          "1118:     } else {",
          "1121:         goto trunc;",
          "1122:     }",
          "1125:     return -2;",
          "1132:     struct in6_addr addr;",
          "1133:     u_int plen, plenbytes;",
          "1135:     ND_TCHECK_1(pd);",
          "1136:     ITEMCHECK(1);",
          "1137:     plen = EXTRACT_U_1(pd);",
          "1138:     if (128 < plen)",
          "1139:         return -1;",
          "1140:     itemlen -= 1;",
          "1142:     memset(&addr, 0, sizeof(addr));",
          "1143:     plenbytes = (plen + 7) / 8;",
          "1144:     ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1145:     ITEMCHECK(plenbytes);",
          "1146:     memcpy(&addr, pd + 1, plenbytes);",
          "1147:     if (plen % 8) {",
          "1148:         addr.s6_addr[plenbytes - 1] &=",
          "1149:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1150:     }",
          "1151:     snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1152:     return 1 + plenbytes;",
          "1155:     return -2;",
          "1158:     return -3;",
          "1163:                const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1165:     struct in6_addr addr;",
          "1166:     u_int plen, plenbytes;",
          "1169:     ND_TCHECK_4(pptr);",
          "1170:     ITEMCHECK(4);",
          "1173:     if (24 > plen)",
          "1174:         return -1;",
          "1178:     if (128 < plen)",
          "1179:         return -1;",
          "1180:     itemlen -= 4;",
          "1182:     memset(&addr, 0, sizeof(addr));",
          "1183:     plenbytes = (plen + 7) / 8;",
          "1184:     ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1185:     memcpy(&addr, pptr + 4, plenbytes);",
          "1186:     if (plen % 8) {",
          "1187:         addr.s6_addr[plenbytes - 1] &=",
          "1188:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1189:     }",
          "1191:     snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1192:              ip6addr_string(ndo, &addr),",
          "1193:              plen,",
          "1194:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1195:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1197:     return 4 + plenbytes;",
          "1200:     return -2;",
          "1203:     return -3;",
          "1210:     struct in6_addr addr;",
          "1211:     u_int plen;",
          "1213:     ND_TCHECK_1(pptr);",
          "1216:     if ((24+64) > plen)",
          "1217:         return -1;",
          "1221:     if (128 < plen)",
          "1222:         return -1;",
          "1224:     memset(&addr, 0, sizeof(addr));",
          "1225:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1226:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1227:     if (plen % 8) {",
          "1228:         addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1229:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1230:     }",
          "1232:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1233:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1234:              ip6addr_string(ndo, &addr),",
          "1235:              plen,",
          "1236:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1237:               ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1239:     return 12 + (plen + 7) / 8;",
          "1242:     return -2;",
          "1249:     uint8_t addr[19];",
          "1250:     u_int plen;",
          "1252:     ND_TCHECK_1(pptr);",
          "1255:     if (152 < plen)",
          "1256:         return -1;",
          "1258:     memset(&addr, 0, sizeof(addr));",
          "1259:     ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1260:     memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1261:     if (plen % 8) {",
          "1262:         addr[(plen + 7) / 8 - 1] &=",
          "1263:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1264:     }",
          "1265:     snprintf(buf, buflen, \"%s/%d\",",
          "1266:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1267:              plen);",
          "1269:     return 1 + (plen + 7) / 8;",
          "1272:     return -2;",
          "1277:                    const u_char *pptr, char *buf, u_int buflen)",
          "1279:     uint8_t addr[19];",
          "1280:     u_int plen;",
          "1282:     ND_TCHECK_1(pptr);",
          "1285:     if ((24+64) > plen)",
          "1286:         return -1;",
          "1290:     if (152 < plen)",
          "1291:         return -1;",
          "1293:     memset(&addr, 0, sizeof(addr));",
          "1294:     ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1295:     memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1296:     if (plen % 8) {",
          "1297:         addr[(plen + 7) / 8 - 1] &=",
          "1298:             ((0xff00 >> (plen % 8)) & 0xff);",
          "1299:     }",
          "1301:     snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1302:              bgp_vpn_rd_print(ndo, pptr+4),",
          "1303:              isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1304:              plen,",
          "1305:              EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1306:              ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1308:     return 12 + (plen + 7) / 8;",
          "1311:     return -2;",
          "",
          "[Added Lines]",
          "1029:         buflen=0; \\",
          "1034:  buf+=stringlen; \\",
          "1039:                       const u_char *pptr, char *buf, u_int buflen)",
          "1041:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1043:  ND_TCHECK_2(pptr);",
          "1044:         plen=EXTRACT_BE_U_2(pptr);",
          "1045:         tlen=plen;",
          "1046:         pptr+=2;",
          "1051:         if (plen==12) {",
          "1053:      ND_TCHECK_LEN(pptr, 12);",
          "1054:      buf[0]='\\0';",
          "1055:      stringlen=snprintf(buf, buflen, \"RD: %s, BGPNH: %s\",",
          "1056:           bgp_vpn_rd_print(ndo, pptr),",
          "1057:           ipaddr_string(ndo, pptr+8)",
          "1058:           );",
          "1059:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1060:      pptr+=12;",
          "1061:      tlen-=12;",
          "1062:      return plen;",
          "1063:         } else if (plen>17) {",
          "1067:      ND_TCHECK_LEN(pptr, 15);",
          "1068:      buf[0]='\\0';",
          "1069:      stringlen=snprintf(buf, buflen, \"RD: %s, CE-ID: %u, Label-Block Offset: %u, Label Base %u\",",
          "1070:           bgp_vpn_rd_print(ndo, pptr),",
          "1071:           EXTRACT_BE_U_2(pptr + 8),",
          "1072:           EXTRACT_BE_U_2(pptr + 10),",
          "1074:      UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1075:      pptr+=15;",
          "1076:      tlen-=15;",
          "1079:      while (tlen>0) {",
          "1080:   if (tlen < 3)",
          "1081:       return -1;",
          "1082:   ND_TCHECK_3(pptr);",
          "1083:   tlv_type=EXTRACT_U_1(pptr);",
          "1084:   pptr++;",
          "1085:   tlv_len=EXTRACT_BE_U_2(pptr);",
          "1086:   ttlv_len=tlv_len;",
          "1087:   pptr+=2;",
          "1089:   switch(tlv_type) {",
          "1090:   case 1:",
          "1091:       if (buflen!=0) {",
          "1092:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tcircuit status vector (%u) length: %u: 0x\",",
          "1093:         tlv_type,",
          "1094:         tlv_len);",
          "1095:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1096:       }",
          "1098:       while (ttlv_len>0) {",
          "1099:    ND_TCHECK_1(pptr);",
          "1100:    if (buflen!=0) {",
          "1101:        stringlen=snprintf(buf,buflen, \"%02x\",",
          "1102:                                                EXTRACT_U_1(pptr));",
          "1103:        pptr++;",
          "1104:        UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1105:    }",
          "1106:    ttlv_len--;",
          "1107:       }",
          "1108:       break;",
          "1109:   default:",
          "1110:       if (buflen!=0) {",
          "1111:    stringlen=snprintf(buf,buflen, \"\\n\\t\\tunknown TLV #%u, length: %u\",",
          "1112:         tlv_type,",
          "1113:         tlv_len);",
          "1114:    UPDATE_BUF_BUFLEN(buf, buflen, stringlen);",
          "1115:       }",
          "1116:       break;",
          "1117:   }",
          "1119:      }",
          "1120:      return plen+2;",
          "1122:         } else {",
          "1125:             goto trunc;",
          "1126:         }",
          "1129:         return -2;",
          "1136:  struct in6_addr addr;",
          "1137:  u_int plen, plenbytes;",
          "1139:  ND_TCHECK_1(pd);",
          "1140:  ITEMCHECK(1);",
          "1141:  plen = EXTRACT_U_1(pd);",
          "1142:  if (128 < plen)",
          "1143:   return -1;",
          "1144:  itemlen -= 1;",
          "1146:  memset(&addr, 0, sizeof(addr));",
          "1147:  plenbytes = (plen + 7) / 8;",
          "1148:  ND_TCHECK_LEN(pd + 1, plenbytes);",
          "1149:  ITEMCHECK(plenbytes);",
          "1150:  memcpy(&addr, pd + 1, plenbytes);",
          "1151:  if (plen % 8) {",
          "1152:   addr.s6_addr[plenbytes - 1] &=",
          "1153:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1154:  }",
          "1155:  snprintf(buf, buflen, \"%s/%d\", ip6addr_string(ndo, &addr), plen);",
          "1156:  return 1 + plenbytes;",
          "1159:  return -2;",
          "1162:  return -3;",
          "1167:                        const u_char *pptr, u_int itemlen, char *buf, u_int buflen)",
          "1169:  struct in6_addr addr;",
          "1170:  u_int plen, plenbytes;",
          "1173:  ND_TCHECK_4(pptr);",
          "1174:  ITEMCHECK(4);",
          "1177:  if (24 > plen)",
          "1178:   return -1;",
          "1182:  if (128 < plen)",
          "1183:   return -1;",
          "1184:  itemlen -= 4;",
          "1186:  memset(&addr, 0, sizeof(addr));",
          "1187:  plenbytes = (plen + 7) / 8;",
          "1188:  ND_TCHECK_LEN(pptr + 4, plenbytes);",
          "1189:  memcpy(&addr, pptr + 4, plenbytes);",
          "1190:  if (plen % 8) {",
          "1191:   addr.s6_addr[plenbytes - 1] &=",
          "1192:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1193:  }",
          "1195:  snprintf(buf, buflen, \"%s/%d, label:%u %s\",",
          "1196:                  ip6addr_string(ndo, &addr),",
          "1197:                  plen,",
          "1198:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1199:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1201:  return 4 + plenbytes;",
          "1204:  return -2;",
          "1207:  return -3;",
          "1214:  struct in6_addr addr;",
          "1215:  u_int plen;",
          "1217:  ND_TCHECK_1(pptr);",
          "1220:  if ((24+64) > plen)",
          "1221:   return -1;",
          "1225:  if (128 < plen)",
          "1226:   return -1;",
          "1228:  memset(&addr, 0, sizeof(addr));",
          "1229:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1230:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1231:  if (plen % 8) {",
          "1232:   addr.s6_addr[(plen + 7) / 8 - 1] &=",
          "1233:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1234:  }",
          "1236:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1237:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1238:                  ip6addr_string(ndo, &addr),",
          "1239:                  plen,",
          "1240:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1241:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1243:  return 12 + (plen + 7) / 8;",
          "1246:  return -2;",
          "1253:         uint8_t addr[19];",
          "1254:  u_int plen;",
          "1256:  ND_TCHECK_1(pptr);",
          "1259:  if (152 < plen)",
          "1260:   return -1;",
          "1262:  memset(&addr, 0, sizeof(addr));",
          "1263:  ND_TCHECK_LEN(pptr + 4, (plen + 7) / 8);",
          "1264:  memcpy(&addr, pptr + 4, (plen + 7) / 8);",
          "1265:  if (plen % 8) {",
          "1266:   addr[(plen + 7) / 8 - 1] &=",
          "1267:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1268:  }",
          "1269:  snprintf(buf, buflen, \"%s/%d\",",
          "1270:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1271:                  plen);",
          "1273:  return 1 + (plen + 7) / 8;",
          "1276:  return -2;",
          "1281:                                const u_char *pptr, char *buf, u_int buflen)",
          "1283:         uint8_t addr[19];",
          "1284:  u_int plen;",
          "1286:  ND_TCHECK_1(pptr);",
          "1289:  if ((24+64) > plen)",
          "1290:   return -1;",
          "1294:  if (152 < plen)",
          "1295:   return -1;",
          "1297:  memset(&addr, 0, sizeof(addr));",
          "1298:  ND_TCHECK_LEN(pptr + 12, (plen + 7) / 8);",
          "1299:  memcpy(&addr, pptr + 12, (plen + 7) / 8);",
          "1300:  if (plen % 8) {",
          "1301:   addr[(plen + 7) / 8 - 1] &=",
          "1302:    ((0xff00 >> (plen % 8)) & 0xff);",
          "1303:  }",
          "1305:  snprintf(buf, buflen, \"RD: %s, %s/%d, label:%u %s\",",
          "1306:                  bgp_vpn_rd_print(ndo, pptr+4),",
          "1307:                  isonsap_string(ndo, addr,(plen + 7) / 8),",
          "1308:                  plen,",
          "1309:                  EXTRACT_BE_U_3(pptr + 1)>>4,",
          "1310:                  ((pptr[3]&1)==0) ? \"(BOGUS: Bottom of Stack NOT set!)\" : \"(bottom)\" );",
          "1312:  return 12 + (plen + 7) / 8;",
          "1315:  return -2;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1370: }",
          "1372: static int",
          "1373: bgp_attr_print(netdissect_options *ndo,",
          "1374:                u_int atype, const u_char *pptr, u_int len)",
          "1375: {",
          "1515:                 break;",
          "1518:                 break;",
          "1524:                 break;",
          "1616:                 switch(af<<8 | safi) {",
          "1617:                 case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1618:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1619:                 case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1620:                 case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1621:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1634:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1635:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1636:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1650:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1651:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1652:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1653:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1664:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1665:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1666:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1694:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1695:                 case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1696:                 case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1703:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1704:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1705:                 case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1723:                     break;",
          "1724:                 default:",
          "1725:                     ND_TCHECK_LEN(tptr, tlen);",
          "1727:                     if (ndo->ndo_vflag <= 1)",
          "1728:                         print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1731:                     goto done;",
          "1732:                     break;",
          "1733:                 }",
          "1809:                 break;",
          "2140:                 break;",
          "2144:         }",
          "2241:                 break;",
          "2308:             break;",
          "2326:             print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2335: trunc:",
          "2337: }",
          "2339: static void",
          "2340: bgp_capabilities_print(netdissect_options *ndo,",
          "2341:                        const u_char *opt, u_int caps_len)",
          "2342: {",
          "2406:                     break;",
          "2407:                 }",
          "2429:         }",
          "2434: trunc:",
          "2436: }",
          "2438: static void",
          "2439: bgp_open_print(netdissect_options *ndo,",
          "2440:                const u_char *dat, u_int length)",
          "2441: {",
          "2505: trunc:",
          "2507: }",
          "2509: static void",
          "2510: bgp_update_print(netdissect_options *ndo,",
          "2512: {",
          "2610:         }",
          "2641: trunc:",
          "2643: }",
          "2645: static void",
          "2646: bgp_notification_print(netdissect_options *ndo,",
          "2648: {",
          "2752:         }",
          "2759: trunc:",
          "2761: }",
          "2763: static void",
          "2764: bgp_route_refresh_print(netdissect_options *ndo,",
          "2766: {",
          "2791: trunc:",
          "2793: }",
          "2795: static int",
          "2796: bgp_pdu_print(netdissect_options *ndo,",
          "2798: {",
          "2834: trunc:",
          "2837: }",
          "2839: void",
          "2840: bgp_print(netdissect_options *ndo,",
          "2842: {",
          "2895:                 return;",
          "2909: trunc:",
          "2911: }",
          "",
          "[Removed Lines]",
          "1369:     return 4;",
          "1376:     int i;",
          "1377:     uint16_t af;",
          "1378:     uint8_t safi, snpa, nhlen;",
          "1380:         float f;",
          "1381:         uint32_t i;",
          "1382:     } bw;",
          "1383:     int advance;",
          "1384:     u_int tlen;",
          "1385:     const u_char *tptr;",
          "1386:     char buf[MAXHOSTNAMELEN + 100];",
          "1387:     int  as_size;",
          "1389:     tptr = pptr;",
          "1390:     tlen = len;",
          "1392:     switch (atype) {",
          "1393:     case BGPTYPE_ORIGIN:",
          "1394:         if (len != 1)",
          "1395:             ND_PRINT((ndo, \"invalid len\"));",
          "1396:         else {",
          "1397:             ND_TCHECK_1(tptr);",
          "1398:             ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1399:                       \"Unknown Origin Typecode\",",
          "1400:                       EXTRACT_U_1(tptr))));",
          "1401:         }",
          "1402:         break;",
          "1407:     case BGPTYPE_AS4_PATH:",
          "1408:     case BGPTYPE_AS_PATH:",
          "1409:         if (len % 2) {",
          "1410:             ND_PRINT((ndo, \"invalid len\"));",
          "1411:             break;",
          "1412:         }",
          "1413:         if (!len) {",
          "1414:             ND_PRINT((ndo, \"empty\"));",
          "1415:             break;",
          "1416:         }",
          "1426:         as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1428:         while (tptr < pptr + len) {",
          "1429:             ND_TCHECK_1(tptr);",
          "1430:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1431:                       \"?\", EXTRACT_U_1(tptr))));",
          "1432:             ND_TCHECK_1(tptr + 1);",
          "1433:             for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1434:                 ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1435:                 ND_PRINT((ndo, \"%s \",",
          "1436:                           as_printf(ndo, astostr, sizeof(astostr),",
          "1437:                 as_size == 2 ?",
          "1438:                     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1439:                     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1440:             }",
          "1441:             ND_TCHECK_1(tptr);",
          "1442:             ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1443:                       \"?\", EXTRACT_U_1(tptr))));",
          "1444:             ND_TCHECK_1(tptr + 1);",
          "1445:             tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1446:         }",
          "1447:         break;",
          "1448:     case BGPTYPE_NEXT_HOP:",
          "1449:         if (len != 4)",
          "1450:             ND_PRINT((ndo, \"invalid len\"));",
          "1451:         else {",
          "1452:             ND_TCHECK_4(tptr);",
          "1453:             ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1454:         }",
          "1455:         break;",
          "1456:     case BGPTYPE_MULTI_EXIT_DISC:",
          "1457:     case BGPTYPE_LOCAL_PREF:",
          "1458:         if (len != 4)",
          "1459:             ND_PRINT((ndo, \"invalid len\"));",
          "1460:         else {",
          "1461:             ND_TCHECK_4(tptr);",
          "1462:             ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1463:         }",
          "1464:         break;",
          "1465:     case BGPTYPE_ATOMIC_AGGREGATE:",
          "1466:         if (len != 0)",
          "1467:             ND_PRINT((ndo, \"invalid len\"));",
          "1468:         break;",
          "1469:     case BGPTYPE_AGGREGATOR:",
          "1475:         if (len != 6 && len != 8) {",
          "1476:             ND_PRINT((ndo, \"invalid len\"));",
          "1477:             break;",
          "1478:         }",
          "1479:         ND_TCHECK_LEN(tptr, len);",
          "1480:         if (len == 6) {",
          "1481:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1482:                       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1483:                       ipaddr_string(ndo, tptr + 2)));",
          "1484:         } else {",
          "1485:             ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1486:                       as_printf(ndo, astostr, sizeof(astostr),",
          "1487:                       EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1488:         }",
          "1489:         break;",
          "1490:     case BGPTYPE_AGGREGATOR4:",
          "1491:         if (len != 8) {",
          "1492:             ND_PRINT((ndo, \"invalid len\"));",
          "1493:             break;",
          "1494:         }",
          "1495:         ND_TCHECK_8(tptr);",
          "1496:         ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1497:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1498:                   ipaddr_string(ndo, tptr + 4)));",
          "1499:         break;",
          "1500:     case BGPTYPE_COMMUNITIES:",
          "1501:         if (len % 4) {",
          "1502:             ND_PRINT((ndo, \"invalid len\"));",
          "1503:             break;",
          "1504:         }",
          "1505:         while (tlen>0) {",
          "1506:             uint32_t comm;",
          "1507:             ND_TCHECK_4(tptr);",
          "1508:             comm = EXTRACT_BE_U_4(tptr);",
          "1509:             switch (comm) {",
          "1510:             case BGP_COMMUNITY_NO_EXPORT:",
          "1511:                 ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1512:                 break;",
          "1513:             case BGP_COMMUNITY_NO_ADVERT:",
          "1514:                 ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1516:             case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1517:                 ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1519:             default:",
          "1520:                 ND_PRINT((ndo, \"%u:%u%s\",",
          "1521:                          (comm >> 16) & 0xffff,",
          "1522:                          comm & 0xffff,",
          "1523:                          (tlen>4) ? \", \" : \"\"));",
          "1525:             }",
          "1526:             tlen -=4;",
          "1527:             tptr +=4;",
          "1528:         }",
          "1529:         break;",
          "1530:     case BGPTYPE_ORIGINATOR_ID:",
          "1531:         if (len != 4) {",
          "1532:             ND_PRINT((ndo, \"invalid len\"));",
          "1533:             break;",
          "1534:         }",
          "1535:         ND_TCHECK_4(tptr);",
          "1536:         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1537:         break;",
          "1538:     case BGPTYPE_CLUSTER_LIST:",
          "1539:         if (len % 4) {",
          "1540:             ND_PRINT((ndo, \"invalid len\"));",
          "1541:             break;",
          "1542:         }",
          "1543:         while (tlen>0) {",
          "1544:             ND_TCHECK_4(tptr);",
          "1545:             ND_PRINT((ndo, \"%s%s\",",
          "1546:                       ipaddr_string(ndo, tptr),",
          "1547:                       (tlen>4) ? \", \" : \"\"));",
          "1548:             tlen -=4;",
          "1549:             tptr +=4;",
          "1550:         }",
          "1551:         break;",
          "1552:     case BGPTYPE_MP_REACH_NLRI:",
          "1553:         ND_TCHECK_3(tptr);",
          "1554:         af = EXTRACT_BE_U_2(tptr);",
          "1555:         safi = EXTRACT_U_1(tptr + 2);",
          "1557:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1558:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1559:                   af,",
          "1561:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1562:                   safi));",
          "1564:         switch(af<<8 | safi) {",
          "1565:         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1566:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1567:         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1568:         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1569:         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1570:         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1571:         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1572:         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1573:         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1574:         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1575:         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1576:         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1577:         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1578:         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1579:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1580:         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1581:         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1582:         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1583:         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1584:         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1585:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1586:         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1587:         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1588:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1589:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1590:         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1591:         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1592:             break;",
          "1593:         default:",
          "1594:             ND_TCHECK_LEN(tptr, tlen);",
          "1595:             ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1596:             if (ndo->ndo_vflag <= 1)",
          "1597:                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1598:             goto done;",
          "1599:             break;",
          "1600:         }",
          "1602:         tptr +=3;",
          "1604:         ND_TCHECK_1(tptr);",
          "1605:         nhlen = EXTRACT_U_1(tptr);",
          "1606:         tlen = nhlen;",
          "1607:         tptr++;",
          "1609:         if (tlen) {",
          "1610:             int nnh = 0;",
          "1611:             ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1612:             while (tlen > 0) {",
          "1613:                 if (nnh++ > 0) {",
          "1614:                     ND_PRINT((ndo,  \", \" ));",
          "1615:                 }",
          "1622:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1623:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1624:                     if (tlen < sizeof(struct in_addr)) {",
          "1625:                         ND_PRINT((ndo, \"invalid len\"));",
          "1626:                         tlen = 0;",
          "1627:                     } else {",
          "1628:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1629:                         ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1630:                         tlen -= sizeof(struct in_addr);",
          "1631:                         tptr += sizeof(struct in_addr);",
          "1632:                     }",
          "1633:                     break;",
          "1637:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1638:                         ND_PRINT((ndo, \"invalid len\"));",
          "1639:                         tlen = 0;",
          "1640:                     } else {",
          "1641:                         ND_TCHECK_LEN(tptr,",
          "1642:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1643:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1644:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1645:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1646:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1647:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1648:                     }",
          "1649:                     break;",
          "1654:                     if (tlen < sizeof(struct in6_addr)) {",
          "1655:                         ND_PRINT((ndo, \"invalid len\"));",
          "1656:                         tlen = 0;",
          "1657:                     } else {",
          "1658:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1659:                         ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1660:                         tlen -= sizeof(struct in6_addr);",
          "1661:                         tptr += sizeof(struct in6_addr);",
          "1662:                     }",
          "1663:                     break;",
          "1667:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1668:                         ND_PRINT((ndo, \"invalid len\"));",
          "1669:                         tlen = 0;",
          "1670:                     } else {",
          "1671:                         ND_TCHECK_LEN(tptr,",
          "1672:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1673:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1674:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1675:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1676:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1677:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1678:                     }",
          "1679:                     break;",
          "1680:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1681:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1682:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1683:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1684:                     if (tlen < sizeof(struct in_addr)) {",
          "1685:                         ND_PRINT((ndo, \"invalid len\"));",
          "1686:                         tlen = 0;",
          "1687:                     } else {",
          "1688:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1689:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1690:                         tlen -= (sizeof(struct in_addr));",
          "1691:                         tptr += (sizeof(struct in_addr));",
          "1692:                     }",
          "1693:                     break;",
          "1697:                     ND_TCHECK_LEN(tptr, tlen);",
          "1698:                     ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1699:                     tptr += tlen;",
          "1700:                     tlen = 0;",
          "1701:                     break;",
          "1706:                     if (tlen < BGP_VPN_RD_LEN+1) {",
          "1707:                         ND_PRINT((ndo, \"invalid len\"));",
          "1708:                         tlen = 0;",
          "1709:                     } else {",
          "1710:                         ND_TCHECK_LEN(tptr, tlen);",
          "1711:                         ND_PRINT((ndo, \"RD: %s, %s\",",
          "1712:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1713:                                   isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1715:                         if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1716:                             ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1718:                         else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1719:                             ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1720:                         tptr += tlen;",
          "1721:                         tlen = 0;",
          "1722:                     }",
          "1726:                     ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1729:                     tptr += tlen;",
          "1730:                     tlen = 0;",
          "1734:             }",
          "1735:         }",
          "1736:         ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1737:         tptr += tlen;",
          "1739:         ND_TCHECK_1(tptr);",
          "1740:         snpa = EXTRACT_U_1(tptr);",
          "1741:         tptr++;",
          "1743:         if (snpa) {",
          "1744:             ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1745:             for (/*nothing*/; snpa > 0; snpa--) {",
          "1746:                 ND_TCHECK_1(tptr);",
          "1747:                 ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1748:                 tptr += EXTRACT_U_1(tptr) + 1;",
          "1749:             }",
          "1750:         } else {",
          "1751:             ND_PRINT((ndo, \", no SNPA\"));",
          "1752:         }",
          "1754:         while (tptr < pptr + len) {",
          "1755:             switch (af<<8 | safi) {",
          "1756:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1757:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1758:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1759:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1760:                 if (advance == -1)",
          "1761:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1762:                 else if (advance == -2)",
          "1763:                     goto trunc;",
          "1764:                 else if (advance == -3)",
          "1766:                 else",
          "1767:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1768:                 break;",
          "1769:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1770:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1771:                 if (advance == -1)",
          "1772:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1773:                 else if (advance == -2)",
          "1774:                     goto trunc;",
          "1775:                 else if (advance == -3)",
          "1777:                 else",
          "1778:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1779:                 break;",
          "1780:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1781:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1782:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1783:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1784:                 if (advance == -1)",
          "1785:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1786:                 else if (advance == -2)",
          "1787:                     goto trunc;",
          "1788:                 else",
          "1789:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1790:                 break;",
          "1791:             case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1792:                 advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1793:                 if (advance == -1)",
          "1794:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1795:                 else if (advance == -2)",
          "1796:                     goto trunc;",
          "1797:                 else",
          "1798:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1799:                 break;",
          "1801:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1802:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1803:                 if (advance == -1)",
          "1804:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1805:                 else if (advance == -2)",
          "1806:                     goto trunc;",
          "1807:                 else",
          "1808:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1811:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1812:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1813:                 if (advance == -1)",
          "1814:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1815:                 else if (advance == -2)",
          "1816:                     goto trunc;",
          "1817:                 else",
          "1818:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1819:                 break;",
          "1820:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1821:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1822:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1823:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1824:                 if (advance == -1)",
          "1825:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1826:                 else if (advance == -2)",
          "1827:                     goto trunc;",
          "1828:                 else if (advance == -3)",
          "1830:                 else",
          "1831:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1832:                 break;",
          "1833:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1834:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1835:                 if (advance == -1)",
          "1836:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1837:                 else if (advance == -2)",
          "1838:                     goto trunc;",
          "1839:                 else if (advance == -3)",
          "1841:                 else",
          "1842:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1843:                 break;",
          "1844:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1845:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1846:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1847:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1848:                 if (advance == -1)",
          "1849:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1850:                 else if (advance == -2)",
          "1851:                     goto trunc;",
          "1852:                 else",
          "1853:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1854:                 break;",
          "1855:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1856:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1857:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1858:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1859:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1860:                 if (advance == -1)",
          "1861:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1862:                 else if (advance == -2)",
          "1863:                     goto trunc;",
          "1864:                 else",
          "1865:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1866:                 break;",
          "1867:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1868:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1869:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1870:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1871:                 if (advance == -1)",
          "1872:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1873:                 else if (advance == -2)",
          "1874:                     goto trunc;",
          "1875:                 else",
          "1876:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1877:                 break;",
          "1878:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1879:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1880:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1881:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1882:                 if (advance == -1)",
          "1883:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1884:                 else if (advance == -2)",
          "1885:                     goto trunc;",
          "1886:                 else",
          "1887:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1888:                 break;",
          "1889:             default:",
          "1890:                 ND_TCHECK_LEN(tptr, tlen);",
          "1891:                 ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1892:                 if (ndo->ndo_vflag <= 1)",
          "1893:                     print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1894:                 advance = 0;",
          "1895:                 tptr = pptr + len;",
          "1896:                 break;",
          "1897:             }",
          "1898:             if (advance < 0)",
          "1899:                 break;",
          "1900:             tptr += advance;",
          "1901:         }",
          "1902:     done:",
          "1903:         break;",
          "1905:     case BGPTYPE_MP_UNREACH_NLRI:",
          "1906:         ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1907:         af = EXTRACT_BE_U_2(tptr);",
          "1908:         safi = EXTRACT_U_1(tptr + 2);",
          "1910:         ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1911:                   tok2str(af_values, \"Unknown AFI\", af),",
          "1912:                   af,",
          "1914:                   tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1915:                   safi));",
          "1917:         if (len == BGP_MP_NLRI_MINSIZE)",
          "1918:             ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1920:         tptr += 3;",
          "1922:         while (tptr < pptr + len) {",
          "1923:             switch (af<<8 | safi) {",
          "1924:             case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1925:             case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1926:             case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1927:                 advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1928:                 if (advance == -1)",
          "1929:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1930:                 else if (advance == -2)",
          "1931:                     goto trunc;",
          "1932:                 else if (advance == -3)",
          "1934:                 else",
          "1935:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1936:                 break;",
          "1937:             case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1938:                 advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1939:                 if (advance == -1)",
          "1940:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1941:                 else if (advance == -2)",
          "1942:                     goto trunc;",
          "1943:                 else if (advance == -3)",
          "1945:                 else",
          "1946:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1947:                 break;",
          "1948:             case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1949:             case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1950:             case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1951:                 advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1952:                 if (advance == -1)",
          "1953:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1954:                 else if (advance == -2)",
          "1955:                     goto trunc;",
          "1956:                 else",
          "1957:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1958:                 break;",
          "1959:             case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1960:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1961:             case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1962:                 advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1963:                 if (advance == -1)",
          "1964:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1965:                 else if (advance == -2)",
          "1966:                     goto trunc;",
          "1967:                 else if (advance == -3)",
          "1969:                 else",
          "1970:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1971:                 break;",
          "1972:             case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1973:                 advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1974:                 if (advance == -1)",
          "1975:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1976:                 else if (advance == -2)",
          "1977:                     goto trunc;",
          "1978:                 else if (advance == -3)",
          "1980:                 else",
          "1981:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1982:                 break;",
          "1983:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1984:             case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1985:             case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1986:                 advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1987:                 if (advance == -1)",
          "1988:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1989:                 else if (advance == -2)",
          "1990:                     goto trunc;",
          "1991:                 else",
          "1992:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1993:                 break;",
          "1994:             case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1995:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1996:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1997:             case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1998:                 advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1999:                 if (advance == -1)",
          "2000:                     ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2001:                 else if (advance == -2)",
          "2002:                     goto trunc;",
          "2003:                 else",
          "2004:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2005:                 break;",
          "2006:             case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2007:             case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2008:             case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2009:                 advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2010:                 if (advance == -1)",
          "2011:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2012:                 else if (advance == -2)",
          "2013:                     goto trunc;",
          "2014:                 else",
          "2015:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2016:                 break;",
          "2017:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2018:             case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2019:             case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2020:                 advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2021:                 if (advance == -1)",
          "2022:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2023:                 else if (advance == -2)",
          "2024:                     goto trunc;",
          "2025:                 else",
          "2026:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2027:                 break;",
          "2028:             case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2029:                 advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2030:                 if (advance == -1)",
          "2031:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2032:                 else if (advance == -2)",
          "2033:                     goto trunc;",
          "2034:                 else",
          "2035:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2036:                 break;",
          "2038:             case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2039:                 advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2040:                 if (advance == -1)",
          "2041:                     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2042:                 else if (advance == -2)",
          "2043:                     goto trunc;",
          "2044:                 else",
          "2045:                     ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2046:                 break;",
          "2047:             default:",
          "2048:                 ND_TCHECK_LEN(tptr - 3, tlen);",
          "2049:                 ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2050:                 if (ndo->ndo_vflag <= 1)",
          "2051:                     print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2052:                 advance = 0;",
          "2053:                 tptr = pptr + len;",
          "2054:                 break;",
          "2055:             }",
          "2056:             if (advance < 0)",
          "2057:                 break;",
          "2058:             tptr += advance;",
          "2059:         }",
          "2060:         break;",
          "2061:     case BGPTYPE_EXTD_COMMUNITIES:",
          "2062:         if (len % 8) {",
          "2063:             ND_PRINT((ndo, \"invalid len\"));",
          "2064:             break;",
          "2065:         }",
          "2066:         while (tlen>0) {",
          "2067:             uint16_t extd_comm;",
          "2069:             ND_TCHECK_2(tptr);",
          "2070:             extd_comm=EXTRACT_BE_U_2(tptr);",
          "2072:             ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2073:                       tok2str(bgp_extd_comm_subtype_values,",
          "2074:                               \"unknown extd community typecode\",",
          "2075:                               extd_comm),",
          "2076:                       extd_comm,",
          "2077:                       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2079:             ND_TCHECK_6(tptr + 2);",
          "2080:             switch(extd_comm) {",
          "2081:             case BGP_EXT_COM_RT_0:",
          "2082:             case BGP_EXT_COM_RO_0:",
          "2083:             case BGP_EXT_COM_L2VPN_RT_0:",
          "2084:                 ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2085:                           EXTRACT_BE_U_2(tptr + 2),",
          "2086:                           EXTRACT_BE_U_4(tptr + 4),",
          "2087:                           ipaddr_string(ndo, tptr+4)));",
          "2088:                 break;",
          "2089:             case BGP_EXT_COM_RT_1:",
          "2090:             case BGP_EXT_COM_RO_1:",
          "2091:             case BGP_EXT_COM_L2VPN_RT_1:",
          "2092:             case BGP_EXT_COM_VRF_RT_IMP:",
          "2093:                 ND_PRINT((ndo, \": %s:%u\",",
          "2094:                           ipaddr_string(ndo, tptr+2),",
          "2095:                           EXTRACT_BE_U_2(tptr + 6)));",
          "2096:                 break;",
          "2097:             case BGP_EXT_COM_RT_2:",
          "2098:             case BGP_EXT_COM_RO_2:",
          "2099:                 ND_PRINT((ndo, \": %s:%u\",",
          "2100:                           as_printf(ndo, astostr, sizeof(astostr),",
          "2101:                           EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2102:                 break;",
          "2103:             case BGP_EXT_COM_LINKBAND:",
          "2104:                 bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2105:                 ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2106:                           bw.f*8/1000000));",
          "2107:                 break;",
          "2108:             case BGP_EXT_COM_VPN_ORIGIN:",
          "2109:             case BGP_EXT_COM_VPN_ORIGIN2:",
          "2110:             case BGP_EXT_COM_VPN_ORIGIN3:",
          "2111:             case BGP_EXT_COM_VPN_ORIGIN4:",
          "2112:             case BGP_EXT_COM_OSPF_RID:",
          "2113:             case BGP_EXT_COM_OSPF_RID2:",
          "2114:                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2115:                 break;",
          "2116:             case BGP_EXT_COM_OSPF_RTYPE:",
          "2117:             case BGP_EXT_COM_OSPF_RTYPE2:",
          "2118:                 ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2119:                           ipaddr_string(ndo, tptr+2),",
          "2120:                           tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2121:                                   \"unknown (0x%02x)\",",
          "2122:                                   EXTRACT_U_1((tptr + 6))),",
          "2123:                           (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2124:                           ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2125:                 break;",
          "2126:             case BGP_EXT_COM_L2INFO:",
          "2127:                 ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2128:                           tok2str(l2vpn_encaps_values,",
          "2129:                                   \"unknown encaps\",",
          "2130:                                   EXTRACT_U_1((tptr + 2))),",
          "2131:                           EXTRACT_U_1((tptr + 3)),",
          "2132:                           EXTRACT_BE_U_2(tptr + 4)));",
          "2133:                 break;",
          "2134:             case BGP_EXT_COM_SOURCE_AS:",
          "2135:                 ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2136:                 break;",
          "2137:             default:",
          "2138:                 ND_TCHECK_8(tptr);",
          "2139:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2141:             }",
          "2142:             tlen -= 8;",
          "2143:             tptr += 8;",
          "2145:         break;",
          "2147:     case BGPTYPE_PMSI_TUNNEL:",
          "2148:     {",
          "2149:         uint8_t tunnel_type, flags;",
          "2151:         ND_TCHECK_5(tptr);",
          "2152:         flags = EXTRACT_U_1(tptr);",
          "2153:         tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2154:         tlen = len;",
          "2156:         ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2157:                   tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2158:                   tunnel_type,",
          "2159:                   bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2160:                   EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2162:         tptr +=5;",
          "2163:         tlen -= 5;",
          "2165:         switch (tunnel_type) {",
          "2167:         case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2168:             ND_TCHECK_8(tptr);",
          "2169:             ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2170:                       ipaddr_string(ndo, tptr),",
          "2171:                       ipaddr_string(ndo, tptr+4)));",
          "2172:             break;",
          "2174:         case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2175:             ND_TCHECK_8(tptr);",
          "2176:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2177:                       ipaddr_string(ndo, tptr),",
          "2178:                       ipaddr_string(ndo, tptr+4)));",
          "2179:             break;",
          "2180:         case BGP_PMSI_TUNNEL_INGRESS:",
          "2181:             ND_TCHECK_4(tptr);",
          "2182:             ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2183:                       ipaddr_string(ndo, tptr)));",
          "2184:             break;",
          "2186:         case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2187:             ND_TCHECK_8(tptr);",
          "2188:             ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2189:                       ipaddr_string(ndo, tptr),",
          "2190:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2191:             break;",
          "2192:         case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2193:             ND_TCHECK_8(tptr);",
          "2194:             ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2195:                       ipaddr_string(ndo, tptr),",
          "2196:                       EXTRACT_BE_U_4(tptr + 4)));",
          "2197:             break;",
          "2198:         default:",
          "2199:             if (ndo->ndo_vflag <= 1) {",
          "2200:                 print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2201:             }",
          "2202:         }",
          "2203:         break;",
          "2204:     }",
          "2205:     case BGPTYPE_AIGP:",
          "2206:     {",
          "2207:         uint8_t type;",
          "2208:         uint16_t length;",
          "2210:         tlen = len;",
          "2212:         while (tlen >= 3) {",
          "2214:             ND_TCHECK_3(tptr);",
          "2216:             type = EXTRACT_U_1(tptr);",
          "2217:             length = EXTRACT_BE_U_2(tptr + 1);",
          "2218:             tptr += 3;",
          "2219:             tlen -= 3;",
          "2221:             ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2222:                       tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2223:                       type, length));",
          "2225:             if (length < 3)",
          "2226:                 goto trunc;",
          "2227:             length -= 3;",
          "2232:             ND_TCHECK_LEN(tptr + 3, length);",
          "2234:             switch (type) {",
          "2236:             case BGP_AIGP_TLV:",
          "2237:                 if (length < 8)",
          "2238:                     goto trunc;",
          "2239:                 ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2240:                           EXTRACT_BE_U_8(tptr)));",
          "2243:             default:",
          "2244:                 if (ndo->ndo_vflag <= 1) {",
          "2245:                     print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2246:                 }",
          "2247:             }",
          "2249:             tptr += length;",
          "2250:             tlen -= length;",
          "2251:         }",
          "2252:         break;",
          "2253:     }",
          "2254:     case BGPTYPE_ATTR_SET:",
          "2255:         ND_TCHECK_4(tptr);",
          "2256:         if (len < 4)",
          "2257:             goto trunc;",
          "2258:         ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2259:                   as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2260:         tptr += 4;",
          "2261:         len -= 4;",
          "2263:         while (len) {",
          "2264:             u_int aflags, alenlen, alen;",
          "2266:             ND_TCHECK_2(tptr);",
          "2267:             if (len < 2)",
          "2268:                 goto trunc;",
          "2269:             aflags = EXTRACT_U_1(tptr);",
          "2270:             atype = EXTRACT_U_1(tptr + 1);",
          "2271:             tptr += 2;",
          "2272:             len -= 2;",
          "2273:             alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2274:             ND_TCHECK_LEN(tptr, alenlen);",
          "2275:             if (len < alenlen)",
          "2276:                 goto trunc;",
          "2277:             alen = bgp_attr_len(aflags, tptr);",
          "2278:             tptr += alenlen;",
          "2279:             len -= alenlen;",
          "2281:             ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2282:                       tok2str(bgp_attr_values,",
          "2283:                               \"Unknown Attribute\", atype),",
          "2284:                       atype,",
          "2285:                       alen));",
          "2287:             if (aflags) {",
          "2288:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2289:                           aflags & 0x80 ? \"O\" : \"\",",
          "2290:                           aflags & 0x40 ? \"T\" : \"\",",
          "2291:                           aflags & 0x20 ? \"P\" : \"\",",
          "2292:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2293:                 if (aflags & 0xf)",
          "2294:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2295:                 ND_PRINT((ndo, \"]: \"));",
          "2296:             }",
          "2298:             if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2299:             return 0;",
          "2300:             tptr += alen;",
          "2301:             len -= alen;",
          "2302:         }",
          "2303:         break;",
          "2305:     case BGPTYPE_LARGE_COMMUNITY:",
          "2306:         if (len == 0 || len % 12) {",
          "2307:             ND_PRINT((ndo, \"invalid len\"));",
          "2309:         }",
          "2310:         ND_PRINT((ndo, \"\\n\\t    \"));",
          "2311:         while (len > 0) {",
          "2312:             ND_TCHECK_LEN(tptr, 12);",
          "2313:             ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2314:                       EXTRACT_BE_U_4(tptr),",
          "2315:                       EXTRACT_BE_U_4(tptr + 4),",
          "2316:                       EXTRACT_BE_U_4(tptr + 8),",
          "2317:                       (len > 12) ? \", \" : \"\"));",
          "2318:             tptr += 12;",
          "2319:             len -= 12;",
          "2320:         }",
          "2321:         break;",
          "2322:     default:",
          "2323:         ND_TCHECK_LEN(pptr, len);",
          "2325:         if (ndo->ndo_vflag <= 1)",
          "2327:         break;",
          "2328:     }",
          "2330:         ND_TCHECK_LEN(pptr, len);",
          "2331:         print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2332:     }",
          "2333:     return 1;",
          "2336:     return 0;",
          "2343:     u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2344:     u_int i = 0;",
          "2346:     while (i < caps_len) {",
          "2347:         ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2348:         cap_type=EXTRACT_U_1(opt + i);",
          "2349:         cap_len=EXTRACT_U_1(opt + i + 1);",
          "2350:         tcap_len=cap_len;",
          "2351:         ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2352:                   tok2str(bgp_capcode_values, \"Unknown\", cap_type),",
          "2353:                   cap_type,",
          "2354:                   cap_len));",
          "2355:         ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2356:         switch (cap_type) {",
          "2357:         case BGP_CAPCODE_MP:",
          "2358:             ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2359:                tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(opt + i + 2)),",
          "2360:                EXTRACT_BE_U_2(opt + i + 2),",
          "2361:                tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1(opt + i + 5)),",
          "2362:                EXTRACT_U_1(opt + i + 5)));",
          "2363:             break;",
          "2364:         case BGP_CAPCODE_RESTART:",
          "2365:             ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2366:                       ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2367:                       EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2368:             tcap_len-=2;",
          "2369:             cap_offset=4;",
          "2370:             while(tcap_len>=4) {",
          "2371:                 ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2372:                           tok2str(af_values,\"Unknown\",",
          "2373:                                   EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2374:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2375:                           tok2str(bgp_safi_values,\"Unknown\",",
          "2376:                                   EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2377:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2378:                           ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2379:                 tcap_len -= 4;",
          "2380:                 cap_offset += 4;",
          "2381:             }",
          "2382:             break;",
          "2383:         case BGP_CAPCODE_RR:",
          "2384:         case BGP_CAPCODE_RR_CISCO:",
          "2385:             break;",
          "2386:         case BGP_CAPCODE_AS_NEW:",
          "2391:             if (cap_len == 4) {",
          "2392:             ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2393:                       as_printf(ndo, astostr, sizeof(astostr),",
          "2394:                       EXTRACT_BE_U_4(opt + i + 2))));",
          "2395:             }",
          "2396:             break;",
          "2397:         case BGP_CAPCODE_ADD_PATH:",
          "2398:             cap_offset=2;",
          "2399:             if (tcap_len == 0) {",
          "2401:                 break;",
          "2402:             }",
          "2403:             while (tcap_len > 0) {",
          "2404:                 if (tcap_len < 4) {",
          "2405:                     ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2408:                 ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2409:                           tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2410:                           EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2411:                           tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2412:                           EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2413:                           tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2414:                 ));",
          "2415:                 tcap_len -= 4;",
          "2416:                 cap_offset += 4;",
          "2417:             }",
          "2418:             break;",
          "2419:         default:",
          "2420:             ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2421:                       cap_type));",
          "2422:             if (ndo->ndo_vflag <= 1)",
          "2423:                 print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2424:                                    cap_len);",
          "2425:             break;",
          "2426:         }",
          "2427:         if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2428:             print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2430:         i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2431:     }",
          "2432:     return;",
          "2435:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2442:     const struct bgp_open *bgp_open_header;",
          "2443:     u_int optslen;",
          "2444:     const struct bgp_opt *bgpopt;",
          "2445:     const u_char *opt;",
          "2446:     u_int i;",
          "2448:     ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2449:     if (length < BGP_OPEN_SIZE)",
          "2450:         goto trunc;",
          "2452:     bgp_open_header = (const struct bgp_open *)dat;",
          "2454:     ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2455:         EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2456:     ND_PRINT((ndo, \"my AS %s, \",",
          "2457:         as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2458:     ND_PRINT((ndo, \"Holdtime %us, \",",
          "2459:         EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2460:     ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2461:     optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2462:     ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2464:     opt = dat + BGP_OPEN_SIZE;",
          "2465:     length -= BGP_OPEN_SIZE;",
          "2467:     i = 0;",
          "2468:     while (i < optslen) {",
          "2469:         uint8_t opt_type, opt_len;",
          "2471:         ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2472:         if (length < BGP_OPT_SIZE + i)",
          "2473:             goto trunc;",
          "2474:         bgpopt = (const struct bgp_opt *)(opt + i);",
          "2475:         opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2476:         opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2477:         if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2478:             ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2479:                       opt_type, opt_len));",
          "2480:             break;",
          "2481:         }",
          "2483:         ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2484:                   tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2485:                   opt_type,",
          "2486:                   opt_len));",
          "2489:         switch(opt_type) {",
          "2491:         case BGP_OPT_CAP:",
          "2492:             bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2493:                                    opt_len);",
          "2494:             break;",
          "2496:         case BGP_OPT_AUTH:",
          "2497:         default:",
          "2498:                ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2499:                opt_type));",
          "2500:                break;",
          "2501:         }",
          "2502:         i += BGP_OPT_SIZE + opt_len;",
          "2503:     }",
          "2504:     return;",
          "2506:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2511:          const u_char *dat, int length)",
          "2513:     const struct bgp *bgp_header;",
          "2514:     const u_char *p;",
          "2515:     int withdrawn_routes_len;",
          "2516:     int len;",
          "2517:     int i;",
          "2519:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2520:     if (length < BGP_SIZE)",
          "2521:         goto trunc;",
          "2522:     bgp_header = (const struct bgp *)dat;",
          "2523:     p = dat + BGP_SIZE;",
          "2524:     length -= BGP_SIZE;",
          "2527:     ND_TCHECK_2(p);",
          "2528:     if (length < 2)",
          "2529:         goto trunc;",
          "2530:     withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2531:     p += 2;",
          "2532:     length -= 2;",
          "2533:     if (withdrawn_routes_len) {",
          "2539:         ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2540:         if (length < withdrawn_routes_len)",
          "2541:             goto trunc;",
          "2542:         ND_PRINT((ndo, \"\\n\\t  Withdrawn routes: %d bytes\", withdrawn_routes_len));",
          "2543:         p += withdrawn_routes_len;",
          "2544:         length -= withdrawn_routes_len;",
          "2545:     }",
          "2547:     ND_TCHECK_2(p);",
          "2548:     if (length < 2)",
          "2549:         goto trunc;",
          "2550:     len = EXTRACT_BE_U_2(p);",
          "2551:     p += 2;",
          "2552:     length -= 2;",
          "2554:     if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2556:         ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2557:         return;",
          "2558:     }",
          "2560:     if (len) {",
          "2562:         while (len) {",
          "2563:             int aflags, atype, alenlen, alen;",
          "2565:             ND_TCHECK_2(p);",
          "2566:             if (len < 2)",
          "2567:                 goto trunc;",
          "2568:             if (length < 2)",
          "2569:                 goto trunc;",
          "2570:             aflags = EXTRACT_U_1(p);",
          "2571:             atype = EXTRACT_U_1(p + 1);",
          "2572:             p += 2;",
          "2573:             len -= 2;",
          "2574:             length -= 2;",
          "2575:             alenlen = bgp_attr_lenlen(aflags, p);",
          "2576:             ND_TCHECK_LEN(p, alenlen);",
          "2577:             if (len < alenlen)",
          "2578:                 goto trunc;",
          "2579:             if (length < alenlen)",
          "2580:                 goto trunc;",
          "2581:             alen = bgp_attr_len(aflags, p);",
          "2582:             p += alenlen;",
          "2583:             len -= alenlen;",
          "2584:             length -= alenlen;",
          "2586:             ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2587:                       tok2str(bgp_attr_values, \"Unknown Attribute\", atype),",
          "2588:                       atype,",
          "2589:                       alen));",
          "2591:             if (aflags) {",
          "2592:                 ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2593:                           aflags & 0x80 ? \"O\" : \"\",",
          "2594:                           aflags & 0x40 ? \"T\" : \"\",",
          "2595:                           aflags & 0x20 ? \"P\" : \"\",",
          "2596:                           aflags & 0x10 ? \"E\" : \"\"));",
          "2597:                 if (aflags & 0xf)",
          "2598:                     ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2599:                 ND_PRINT((ndo, \"]: \"));",
          "2600:             }",
          "2601:             if (len < alen)",
          "2602:                 goto trunc;",
          "2603:             if (length < alen)",
          "2604:                 goto trunc;",
          "2605:             if (!bgp_attr_print(ndo, atype, p, alen))",
          "2606:                 goto trunc;",
          "2607:             p += alen;",
          "2608:             len -= alen;",
          "2609:             length -= alen;",
          "2611:     }",
          "2613:     if (length) {",
          "2622:         ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2623:         while (length) {",
          "2624:             char buf[MAXHOSTNAMELEN + 100];",
          "2625:             i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2626:             if (i == -1) {",
          "2627:                 ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2628:                 break;",
          "2629:             } else if (i == -2)",
          "2630:                 goto trunc;",
          "2631:             else if (i == -3)",
          "2633:             else {",
          "2634:                 ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2635:                 p += i;",
          "2636:                 length -= i;",
          "2637:             }",
          "2638:         }",
          "2639:     }",
          "2640:     return;",
          "2642:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2647:                const u_char *dat, int length)",
          "2649:     const struct bgp_notification *bgp_notification_header;",
          "2650:     const u_char *tptr;",
          "2651:     uint8_t bgpn_major, bgpn_minor;",
          "2652:     uint8_t shutdown_comm_length;",
          "2653:     uint8_t remainder_offset;",
          "2655:     ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2656:     if (length<BGP_NOTIFICATION_SIZE)",
          "2657:         return;",
          "2659:     bgp_notification_header = (const struct bgp_notification *)dat;",
          "2660:     bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2661:     bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2663:     ND_PRINT((ndo, \", %s (%u)\",",
          "2664:               tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2665:                       bgpn_major),",
          "2666:               bgpn_major));",
          "2668:     switch (bgpn_major) {",
          "2670:     case BGP_NOTIFY_MAJOR_MSG:",
          "2671:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2672:                   tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2673:                           bgpn_minor),",
          "2674:                   bgpn_minor));",
          "2675:         break;",
          "2676:     case BGP_NOTIFY_MAJOR_OPEN:",
          "2677:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2678:                   tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2679:                           bgpn_minor),",
          "2680:                   bgpn_minor));",
          "2681:         break;",
          "2682:     case BGP_NOTIFY_MAJOR_UPDATE:",
          "2683:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2684:                   tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2685:                           bgpn_minor),",
          "2686:                   bgpn_minor));",
          "2687:         break;",
          "2688:     case BGP_NOTIFY_MAJOR_FSM:",
          "2689:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2690:                   tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2691:                           bgpn_minor),",
          "2692:                   bgpn_minor));",
          "2693:         break;",
          "2694:     case BGP_NOTIFY_MAJOR_CAP:",
          "2695:         ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2696:                   tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2697:                           bgpn_minor),",
          "2698:                   bgpn_minor));",
          "2699:         break;",
          "2700:     case BGP_NOTIFY_MAJOR_CEASE:",
          "2701:         ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2702:                   tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2703:                           bgpn_minor),",
          "2704:                   bgpn_minor));",
          "2709:         if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2710:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2711:             ND_TCHECK_7(tptr);",
          "2712:             ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2713:                       tok2str(af_values, \"Unknown\", EXTRACT_BE_U_2(tptr)),",
          "2714:                       EXTRACT_BE_U_2(tptr),",
          "2715:                       tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2716:                       EXTRACT_U_1((tptr + 2)),",
          "2717:                       EXTRACT_BE_U_4(tptr + 3)));",
          "2718:         }",
          "2723:         if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2724:              bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2725:              length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2726:             tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2727:             ND_TCHECK_1(tptr);",
          "2728:             shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2729:             remainder_offset = 0;",
          "2731:             if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2732:                 shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2733:                 ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2734:             }",
          "2735:             else if (shutdown_comm_length == 0) {",
          "2736:                 ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2737:                 remainder_offset += 1;",
          "2738:             }",
          "2740:             else {",
          "2741:                 ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2742:                 ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2743:                 (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2744:                 ND_PRINT((ndo, \"\\\"\"));",
          "2745:                 remainder_offset += shutdown_comm_length + 1;",
          "2746:             }",
          "2748:             if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2749:                 ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2750:                 hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2751:             }",
          "2753:         break;",
          "2754:     default:",
          "2755:         break;",
          "2756:     }",
          "2758:     return;",
          "2760:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2765:             const u_char *pptr, int len)",
          "2767:     const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2769:     ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2772:     if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2773:         return;",
          "2775:     bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2777:     ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2778:               tok2str(af_values,\"Unknown\",",
          "2779:                       EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2780:               EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2781:               tok2str(bgp_safi_values,\"Unknown\",",
          "2782:                       EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2783:               EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2785:     if (ndo->ndo_vflag > 1) {",
          "2786:         ND_TCHECK_LEN(pptr, len);",
          "2787:         print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2788:     }",
          "2790:     return;",
          "2792:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2797:          const u_char *dat, u_int length)",
          "2799:     const struct bgp *bgp_header;",
          "2800:     uint8_t bgp_type;",
          "2802:     ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2803:     bgp_header = (const struct bgp *)dat;",
          "2804:     bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2806:     ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2807:               tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2808:               bgp_type,",
          "2809:               length));",
          "2811:     switch (bgp_type) {",
          "2812:     case BGP_OPEN:",
          "2813:         bgp_open_print(ndo, dat, length);",
          "2814:         break;",
          "2815:     case BGP_UPDATE:",
          "2816:         bgp_update_print(ndo, dat, length);",
          "2817:         break;",
          "2818:     case BGP_NOTIFICATION:",
          "2819:         bgp_notification_print(ndo, dat, length);",
          "2820:         break;",
          "2821:     case BGP_KEEPALIVE:",
          "2822:         break;",
          "2823:     case BGP_ROUTE_REFRESH:",
          "2824:         bgp_route_refresh_print(ndo, dat, length);",
          "2825:         break;",
          "2826:     default:",
          "2828:         ND_TCHECK_LEN(dat, length);",
          "2829:         ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2830:         print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2831:         break;",
          "2832:     }",
          "2833:     return 1;",
          "2835:     ND_PRINT((ndo, \"[|BGP]\"));",
          "2836:     return 0;",
          "2841:       const u_char *dat, int length)",
          "2843:     const u_char *p;",
          "2844:     const u_char *ep;",
          "2845:     const u_char *start;",
          "2846:     const u_char marker[] = {",
          "2847:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2848:         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2849:     };",
          "2850:     const struct bgp *bgp_header;",
          "2851:     uint16_t hlen;",
          "2853:     ep = dat + length;",
          "2854:     if (ndo->ndo_snapend < dat + length)",
          "2855:         ep = ndo->ndo_snapend;",
          "2857:     ND_PRINT((ndo, \": BGP\"));",
          "2860:         return;",
          "2862:     p = dat;",
          "2863:     start = p;",
          "2864:     while (p < ep) {",
          "2865:         if (!ND_TTEST_1(p))",
          "2866:             break;",
          "2867:         if (EXTRACT_U_1(p) != 0xff) {",
          "2868:             p++;",
          "2869:             continue;",
          "2870:         }",
          "2872:         if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "2873:             break;",
          "2874:         if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "2875:             p++;",
          "2876:             continue;",
          "2877:         }",
          "2880:         ND_TCHECK_LEN(p, BGP_SIZE);",
          "2881:         bgp_header = (const struct bgp *)p;",
          "2883:         if (start != p)",
          "2884:             ND_PRINT((ndo, \" [|BGP]\"));",
          "2886:         hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "2887:         if (hlen < BGP_SIZE) {",
          "2888:             ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "2889:                       BGP_SIZE));",
          "2890:             break;",
          "2891:         }",
          "2893:         if (ND_TTEST_LEN(p, hlen)) {",
          "2894:             if (!bgp_pdu_print(ndo, p, hlen))",
          "2896:             p += hlen;",
          "2897:             start = p;",
          "2898:         } else {",
          "2899:             ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "2900:                       tok2str(bgp_msg_values,",
          "2901:                               \"Unknown Message Type\",",
          "2902:                               EXTRACT_U_1(bgp_header->bgp_type))));",
          "2903:             break;",
          "2904:         }",
          "2905:     }",
          "2907:     return;",
          "2910:     ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "[Added Lines]",
          "1373:    return 4;",
          "1380:  int i;",
          "1381:  uint16_t af;",
          "1382:  uint8_t safi, snpa, nhlen;",
          "1384:             float f;",
          "1385:             uint32_t i;",
          "1386:         } bw;",
          "1387:  int advance;",
          "1388:  u_int tlen;",
          "1389:  const u_char *tptr;",
          "1390:  char buf[MAXHOSTNAMELEN + 100];",
          "1391:         int  as_size;",
          "1393:         tptr = pptr;",
          "1394:         tlen=len;",
          "1396:  switch (atype) {",
          "1397:  case BGPTYPE_ORIGIN:",
          "1398:   if (len != 1)",
          "1399:    ND_PRINT((ndo, \"invalid len\"));",
          "1400:   else {",
          "1401:    ND_TCHECK_1(tptr);",
          "1402:    ND_PRINT((ndo, \"%s\", tok2str(bgp_origin_values,",
          "1403:       \"Unknown Origin Typecode\",",
          "1404:       EXTRACT_U_1(tptr))));",
          "1405:   }",
          "1406:   break;",
          "1411:  case BGPTYPE_AS4_PATH:",
          "1412:  case BGPTYPE_AS_PATH:",
          "1413:   if (len % 2) {",
          "1414:    ND_PRINT((ndo, \"invalid len\"));",
          "1415:    break;",
          "1416:   }",
          "1417:                 if (!len) {",
          "1418:    ND_PRINT((ndo, \"empty\"));",
          "1419:    break;",
          "1420:                 }",
          "1430:                 as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);",
          "1432:   while (tptr < pptr + len) {",
          "1433:    ND_TCHECK_1(tptr);",
          "1434:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_open_values,",
          "1435:       \"?\", EXTRACT_U_1(tptr))));",
          "1436:    ND_TCHECK_1(tptr + 1);",
          "1437:                         for (i = 0; i < tptr[1] * as_size; i += as_size) {",
          "1438:                             ND_TCHECK_LEN(tptr + 2 + i, as_size);",
          "1439:        ND_PRINT((ndo, \"%s \",",
          "1440:     as_printf(ndo, astostr, sizeof(astostr),",
          "1441:     as_size == 2 ?",
          "1442:     EXTRACT_BE_U_2(tptr + i + 2) :",
          "1443:     EXTRACT_BE_U_4(tptr + i + 2))));",
          "1444:                         }",
          "1445:    ND_TCHECK_1(tptr);",
          "1446:                         ND_PRINT((ndo, \"%s\", tok2str(bgp_as_path_segment_close_values,",
          "1447:       \"?\", EXTRACT_U_1(tptr))));",
          "1448:                         ND_TCHECK_1(tptr + 1);",
          "1449:                         tptr += 2 + EXTRACT_U_1(tptr + 1) * as_size;",
          "1450:   }",
          "1451:   break;",
          "1452:  case BGPTYPE_NEXT_HOP:",
          "1453:   if (len != 4)",
          "1454:    ND_PRINT((ndo, \"invalid len\"));",
          "1455:   else {",
          "1456:    ND_TCHECK_4(tptr);",
          "1457:    ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1458:   }",
          "1459:   break;",
          "1460:  case BGPTYPE_MULTI_EXIT_DISC:",
          "1461:  case BGPTYPE_LOCAL_PREF:",
          "1462:   if (len != 4)",
          "1463:    ND_PRINT((ndo, \"invalid len\"));",
          "1464:   else {",
          "1465:    ND_TCHECK_4(tptr);",
          "1466:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_U_4(tptr)));",
          "1467:   }",
          "1468:   break;",
          "1469:  case BGPTYPE_ATOMIC_AGGREGATE:",
          "1470:   if (len != 0)",
          "1471:    ND_PRINT((ndo, \"invalid len\"));",
          "1472:   break;",
          "1473:         case BGPTYPE_AGGREGATOR:",
          "1479:                 if (len != 6 && len != 8) {",
          "1480:                     ND_PRINT((ndo, \"invalid len\"));",
          "1481:                     break;",
          "1482:                 }",
          "1483:                 ND_TCHECK_LEN(tptr, len);",
          "1484:                 if (len == 6) {",
          "1485:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1486:    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(tptr)),",
          "1487:    ipaddr_string(ndo, tptr + 2)));",
          "1488:                 } else {",
          "1489:       ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1490:    as_printf(ndo, astostr, sizeof(astostr),",
          "1491:    EXTRACT_BE_U_4(tptr)), ipaddr_string(ndo, tptr + 4)));",
          "1492:                 }",
          "1494:  case BGPTYPE_AGGREGATOR4:",
          "1495:   if (len != 8) {",
          "1496:    ND_PRINT((ndo, \"invalid len\"));",
          "1497:    break;",
          "1498:   }",
          "1499:   ND_TCHECK_8(tptr);",
          "1500:   ND_PRINT((ndo, \" AS #%s, origin %s\",",
          "1501:          as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr)),",
          "1502:          ipaddr_string(ndo, tptr + 4)));",
          "1503:   break;",
          "1504:  case BGPTYPE_COMMUNITIES:",
          "1505:   if (len % 4) {",
          "1506:    ND_PRINT((ndo, \"invalid len\"));",
          "1507:    break;",
          "1508:   }",
          "1509:   while (tlen>0) {",
          "1510:    uint32_t comm;",
          "1511:    ND_TCHECK_4(tptr);",
          "1512:    comm = EXTRACT_BE_U_4(tptr);",
          "1513:    switch (comm) {",
          "1514:    case BGP_COMMUNITY_NO_EXPORT:",
          "1515:     ND_PRINT((ndo, \" NO_EXPORT\"));",
          "1516:     break;",
          "1517:    case BGP_COMMUNITY_NO_ADVERT:",
          "1518:     ND_PRINT((ndo, \" NO_ADVERTISE\"));",
          "1519:     break;",
          "1520:    case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:",
          "1521:     ND_PRINT((ndo, \" NO_EXPORT_SUBCONFED\"));",
          "1522:     break;",
          "1523:    default:",
          "1524:     ND_PRINT((ndo, \"%u:%u%s\",",
          "1525:                                        (comm >> 16) & 0xffff,",
          "1526:                                        comm & 0xffff,",
          "1527:                                        (tlen>4) ? \", \" : \"\"));",
          "1528:     break;",
          "1529:    }",
          "1530:                         tlen -=4;",
          "1531:                         tptr +=4;",
          "1532:   }",
          "1533:   break;",
          "1534:         case BGPTYPE_ORIGINATOR_ID:",
          "1535:   if (len != 4) {",
          "1536:    ND_PRINT((ndo, \"invalid len\"));",
          "1537:    break;",
          "1538:   }",
          "1539:   ND_TCHECK_4(tptr);",
          "1540:                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1542:         case BGPTYPE_CLUSTER_LIST:",
          "1543:   if (len % 4) {",
          "1544:    ND_PRINT((ndo, \"invalid len\"));",
          "1545:    break;",
          "1546:   }",
          "1547:                 while (tlen>0) {",
          "1548:    ND_TCHECK_4(tptr);",
          "1549:                         ND_PRINT((ndo, \"%s%s\",",
          "1550:                                ipaddr_string(ndo, tptr),",
          "1551:                                 (tlen>4) ? \", \" : \"\"));",
          "1552:                         tlen -=4;",
          "1553:                         tptr +=4;",
          "1554:                 }",
          "1556:  case BGPTYPE_MP_REACH_NLRI:",
          "1557:   ND_TCHECK_3(tptr);",
          "1558:   af = EXTRACT_BE_U_2(tptr);",
          "1559:   safi = EXTRACT_U_1(tptr + 2);",
          "1561:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1562:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1563:                        af,",
          "1565:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1566:                        safi));",
          "1577:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1578:   case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1592:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1593:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1594:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1595:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1599:                     ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1606:                 tptr +=3;",
          "1608:   ND_TCHECK_1(tptr);",
          "1609:   nhlen = EXTRACT_U_1(tptr);",
          "1610:                 tlen = nhlen;",
          "1611:                 tptr++;",
          "1613:   if (tlen) {",
          "1614:                     int nnh = 0;",
          "1615:                     ND_PRINT((ndo, \"\\n\\t    nexthop: \"));",
          "1616:                     while (tlen > 0) {",
          "1617:                         if ( nnh++ > 0 ) {",
          "1618:                             ND_PRINT((ndo,  \", \" ));",
          "1619:                         }",
          "1620:                         switch(af<<8 | safi) {",
          "1621:                         case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1622:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1623:                         case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1624:                         case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1625:                         case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1626:                         case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1627:                         case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1628:        if (tlen < sizeof(struct in_addr)) {",
          "1629:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1630:                                 tlen = 0;",
          "1631:                             } else {",
          "1632:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1633:                                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, tptr)));",
          "1634:                                 tlen -= sizeof(struct in_addr);",
          "1635:                                 tptr += sizeof(struct in_addr);",
          "1636:                             }",
          "1637:                             break;",
          "1638:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1639:                         case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1640:                         case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1641:                             if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1642:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1643:                                 tlen = 0;",
          "1644:                             } else {",
          "1645:                                 ND_TCHECK_LEN(tptr,",
          "1646:                                               sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1647:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1648:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1649:                                        ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1650:                                 tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1651:                                 tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1652:                             }",
          "1653:                             break;",
          "1654:                         case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1655:                         case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1656:                         case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1657:                         case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1658:                             if (tlen < sizeof(struct in6_addr)) {",
          "1659:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1660:                                 tlen = 0;",
          "1661:                             } else {",
          "1662:                                 ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1663:                                 ND_PRINT((ndo, \"%s\", ip6addr_string(ndo, tptr)));",
          "1664:                                 tlen -= sizeof(struct in6_addr);",
          "1665:                                 tptr += sizeof(struct in6_addr);",
          "1666:                             }",
          "1667:                             break;",
          "1668:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1669:                         case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1670:                         case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1671:                             if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1672:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1673:                                 tlen = 0;",
          "1674:                             } else {",
          "1675:                                 ND_TCHECK_LEN(tptr,",
          "1676:                                               sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1677:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1678:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1679:                                        ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));",
          "1680:                                 tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1681:                                 tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1682:                             }",
          "1683:                             break;",
          "1684:                         case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1685:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1686:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1687:                         case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1688:                             if (tlen < sizeof(struct in_addr)) {",
          "1689:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1690:                                 tlen = 0;",
          "1691:                             } else {",
          "1692:                                 ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1693:                                 ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr)));",
          "1694:                                 tlen -= (sizeof(struct in_addr));",
          "1695:                                 tptr += (sizeof(struct in_addr));",
          "1696:                             }",
          "1697:                             break;",
          "1698:                         case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1699:                         case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1700:                         case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1701:                             ND_TCHECK_LEN(tptr, tlen);",
          "1702:                             ND_PRINT((ndo, \"%s\", isonsap_string(ndo, tptr, tlen)));",
          "1703:                             tptr += tlen;",
          "1704:                             tlen = 0;",
          "1705:                             break;",
          "1707:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1708:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1709:                         case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1710:                             if (tlen < BGP_VPN_RD_LEN+1) {",
          "1711:                                 ND_PRINT((ndo, \"invalid len\"));",
          "1712:                                 tlen = 0;",
          "1713:                             } else {",
          "1714:                                 ND_TCHECK_LEN(tptr, tlen);",
          "1715:                                 ND_PRINT((ndo, \"RD: %s, %s\",",
          "1716:                                        bgp_vpn_rd_print(ndo, tptr),",
          "1717:                                        isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));",
          "1719:                                 if (EXTRACT_BE_U_4(tptr + BGP_VPN_RD_LEN) ==  0x47000601)",
          "1720:                                     ND_PRINT((ndo, \" = %s\", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));",
          "1722:                                 else if (EXTRACT_BE_U_3(tptr + BGP_VPN_RD_LEN) ==  0x350000)",
          "1723:                                     ND_PRINT((ndo, \" = %s\", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));",
          "1724:                                 tptr += tlen;",
          "1725:                                 tlen = 0;",
          "1726:                             }",
          "1727:                             break;",
          "1728:                         default:",
          "1729:                             ND_TCHECK_LEN(tptr, tlen);",
          "1730:                             ND_PRINT((ndo, \"no AFI %u/SAFI %u decoder\", af, safi));",
          "1731:                             if (ndo->ndo_vflag <= 1)",
          "1732:                                 print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1733:                             tptr += tlen;",
          "1734:                             tlen = 0;",
          "1735:                             goto done;",
          "1736:                             break;",
          "1737:                         }",
          "1738:                     }",
          "1739:   }",
          "1740:   ND_PRINT((ndo, \", nh-length: %u\", nhlen));",
          "1741:   tptr += tlen;",
          "1743:   ND_TCHECK_1(tptr);",
          "1744:   snpa = EXTRACT_U_1(tptr);",
          "1745:   tptr++;",
          "1747:   if (snpa) {",
          "1748:    ND_PRINT((ndo, \"\\n\\t    %u SNPA\", snpa));",
          "1749:    for (/*nothing*/; snpa > 0; snpa--) {",
          "1750:     ND_TCHECK_1(tptr);",
          "1751:     ND_PRINT((ndo, \"\\n\\t      %d bytes\", EXTRACT_U_1(tptr)));",
          "1752:     tptr += EXTRACT_U_1(tptr) + 1;",
          "1753:    }",
          "1754:   } else {",
          "1755:    ND_PRINT((ndo, \", no SNPA\"));",
          "1756:                 }",
          "1758:   while (tptr < pptr + len) {",
          "1759:                     switch (af<<8 | safi) {",
          "1760:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1761:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1762:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1763:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1764:                         if (advance == -1)",
          "1765:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1766:                         else if (advance == -2)",
          "1767:                             goto trunc;",
          "1768:                         else if (advance == -3)",
          "1770:                         else",
          "1771:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1772:                         break;",
          "1773:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1774:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1775:                         if (advance == -1)",
          "1776:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1777:                         else if (advance == -2)",
          "1778:                             goto trunc;",
          "1779:                         else if (advance == -3)",
          "1781:                         else",
          "1782:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1783:                         break;",
          "1784:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1785:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1786:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1787:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1788:                         if (advance == -1)",
          "1789:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1790:                         else if (advance == -2)",
          "1791:                             goto trunc;",
          "1792:                         else",
          "1793:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1794:                         break;",
          "1795:                     case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1796:                         advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));",
          "1797:                         if (advance == -1)",
          "1798:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1799:                         else if (advance == -2)",
          "1800:                             goto trunc;",
          "1801:                         else",
          "1802:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1803:                         break;",
          "1805:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "1806:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "1807:                         if (advance == -1)",
          "1808:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1809:                         else if (advance == -2)",
          "1810:                             goto trunc;",
          "1811:                         else",
          "1812:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1813:                         break;",
          "1815:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1816:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "1817:         if (advance == -1)",
          "1818:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1819:                         else if (advance == -2)",
          "1820:                             goto trunc;",
          "1821:                         else",
          "1822:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1823:          break;",
          "1824:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1825:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1826:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1827:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1828:                         if (advance == -1)",
          "1829:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1830:                         else if (advance == -2)",
          "1831:                             goto trunc;",
          "1832:                         else if (advance == -3)",
          "1834:                         else",
          "1835:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1836:                         break;",
          "1837:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1838:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1839:                         if (advance == -1)",
          "1840:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1841:                         else if (advance == -2)",
          "1842:                             goto trunc;",
          "1843:                         else if (advance == -3)",
          "1845:                         else",
          "1846:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1847:                         break;",
          "1848:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1849:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1850:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1851:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1852:                         if (advance == -1)",
          "1853:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1854:                         else if (advance == -2)",
          "1855:                             goto trunc;",
          "1856:                         else",
          "1857:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1858:                         break;",
          "1859:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1860:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1861:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1862:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1863:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "1864:                         if (advance == -1)",
          "1865:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "1866:                         else if (advance == -2)",
          "1867:                             goto trunc;",
          "1868:                         else",
          "1869:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1870:                         break;",
          "1871:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "1872:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "1873:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "1874:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1875:                         if (advance == -1)",
          "1876:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1877:                         else if (advance == -2)",
          "1878:                             goto trunc;",
          "1879:                         else",
          "1880:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1881:                         break;",
          "1882:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "1883:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "1884:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1885:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "1886:                         if (advance == -1)",
          "1887:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1888:                         else if (advance == -2)",
          "1889:                             goto trunc;",
          "1890:                         else",
          "1891:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1892:                         break;",
          "1893:                     default:",
          "1894:                         ND_TCHECK_LEN(tptr, tlen);",
          "1895:                         ND_PRINT((ndo, \"\\n\\t    no AFI %u / SAFI %u decoder\", af, safi));",
          "1896:                         if (ndo->ndo_vflag <= 1)",
          "1897:                             print_unknown_data(ndo, tptr, \"\\n\\t    \", tlen);",
          "1898:                         advance = 0;",
          "1899:                         tptr = pptr + len;",
          "1900:                         break;",
          "1901:                     }",
          "1902:                     if (advance < 0)",
          "1903:                         break;",
          "1904:                     tptr += advance;",
          "1905:   }",
          "1906:         done:",
          "1907:   break;",
          "1909:  case BGPTYPE_MP_UNREACH_NLRI:",
          "1910:   ND_TCHECK_LEN(tptr, BGP_MP_NLRI_MINSIZE);",
          "1911:   af = EXTRACT_BE_U_2(tptr);",
          "1912:   safi = EXTRACT_U_1(tptr + 2);",
          "1914:                 ND_PRINT((ndo, \"\\n\\t    AFI: %s (%u), %sSAFI: %s (%u)\",",
          "1915:                        tok2str(af_values, \"Unknown AFI\", af),",
          "1916:                        af,",
          "1918:                        tok2str(bgp_safi_values, \"Unknown SAFI\", safi),",
          "1919:                        safi));",
          "1921:                 if (len == BGP_MP_NLRI_MINSIZE)",
          "1922:                     ND_PRINT((ndo, \"\\n\\t      End-of-Rib Marker (empty NLRI)\"));",
          "1924:   tptr += 3;",
          "1926:   while (tptr < pptr + len) {",
          "1927:                     switch (af<<8 | safi) {",
          "1928:                     case (AFNUM_INET<<8 | SAFNUM_UNICAST):",
          "1929:                     case (AFNUM_INET<<8 | SAFNUM_MULTICAST):",
          "1930:                     case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):",
          "1931:                         advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1932:                         if (advance == -1)",
          "1933:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1934:                         else if (advance == -2)",
          "1935:                             goto trunc;",
          "1936:                         else if (advance == -3)",
          "1938:                         else",
          "1939:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1940:                         break;",
          "1941:                     case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):",
          "1942:                         advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));",
          "1943:                         if (advance == -1)",
          "1944:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1945:                         else if (advance == -2)",
          "1946:                             goto trunc;",
          "1947:                         else if (advance == -3)",
          "1949:                         else",
          "1950:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1951:                         break;",
          "1952:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1953:                     case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1954:                     case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1955:                         advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));",
          "1956:                         if (advance == -1)",
          "1957:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1958:                         else if (advance == -2)",
          "1959:                             goto trunc;",
          "1960:                         else",
          "1961:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1962:                         break;",
          "1963:                     case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1964:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1965:                     case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1966:                         advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1967:                         if (advance == -1)",
          "1968:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1969:                         else if (advance == -2)",
          "1970:                             goto trunc;",
          "1971:                         else if (advance == -3)",
          "1973:                         else",
          "1974:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1975:                         break;",
          "1976:                     case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1977:                         advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));",
          "1978:                         if (advance == -1)",
          "1979:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1980:                         else if (advance == -2)",
          "1981:                             goto trunc;",
          "1982:                         else if (advance == -3)",
          "1984:                         else",
          "1985:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1986:                         break;",
          "1987:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1988:                     case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1989:                     case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1990:                         advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));",
          "1991:                         if (advance == -1)",
          "1992:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "1993:                         else if (advance == -2)",
          "1994:                             goto trunc;",
          "1995:                         else",
          "1996:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "1997:                         break;",
          "1998:                     case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1999:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "2000:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "2001:                     case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2002:                         advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));",
          "2003:                         if (advance == -1)",
          "2004:                             ND_PRINT((ndo, \"\\n\\t    (illegal length)\"));",
          "2005:                         else if (advance == -2)",
          "2006:                             goto trunc;",
          "2007:                         else",
          "2008:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2009:                         break;",
          "2010:                     case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "2011:                     case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):",
          "2012:                     case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):",
          "2013:                         advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2014:                         if (advance == -1)",
          "2015:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2016:                         else if (advance == -2)",
          "2017:                             goto trunc;",
          "2018:                         else",
          "2019:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2020:                         break;",
          "2021:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):",
          "2022:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):",
          "2023:                     case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):",
          "2024:                         advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));",
          "2025:                         if (advance == -1)",
          "2026:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2027:                         else if (advance == -2)",
          "2028:                             goto trunc;",
          "2029:                         else",
          "2030:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2031:                         break;",
          "2032:       case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "2033:         advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));",
          "2034:         if (advance == -1)",
          "2035:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2036:                         else if (advance == -2)",
          "2037:                             goto trunc;",
          "2038:                         else",
          "2039:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2040:          break;",
          "2042:                     case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):",
          "2043:                         advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));",
          "2044:                         if (advance == -1)",
          "2045:                             ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2046:                         else if (advance == -2)",
          "2047:                             goto trunc;",
          "2048:                         else",
          "2049:                             ND_PRINT((ndo, \"\\n\\t      %s\", buf));",
          "2050:                         break;",
          "2051:                     default:",
          "2052:                         ND_TCHECK_LEN(tptr - 3, tlen);",
          "2053:                         ND_PRINT((ndo, \"no AFI %u / SAFI %u decoder\", af, safi));",
          "2054:                         if (ndo->ndo_vflag <= 1)",
          "2055:                             print_unknown_data(ndo, tptr-3, \"\\n\\t    \", tlen);",
          "2056:                         advance = 0;",
          "2057:                         tptr = pptr + len;",
          "2058:                         break;",
          "2059:                     }",
          "2060:                     if (advance < 0)",
          "2061:                         break;",
          "2062:                     tptr += advance;",
          "2063:   }",
          "2064:   break;",
          "2065:         case BGPTYPE_EXTD_COMMUNITIES:",
          "2066:   if (len % 8) {",
          "2067:    ND_PRINT((ndo, \"invalid len\"));",
          "2068:    break;",
          "2069:   }",
          "2070:                 while (tlen>0) {",
          "2071:                     uint16_t extd_comm;",
          "2073:                     ND_TCHECK_2(tptr);",
          "2074:                     extd_comm=EXTRACT_BE_U_2(tptr);",
          "2076:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "2077:       tok2str(bgp_extd_comm_subtype_values,",
          "2078:           \"unknown extd community typecode\",",
          "2079:           extd_comm),",
          "2080:       extd_comm,",
          "2081:       bittok2str(bgp_extd_comm_flag_values, \"none\", extd_comm)));",
          "2083:                     ND_TCHECK_6(tptr + 2);",
          "2084:                     switch(extd_comm) {",
          "2085:                     case BGP_EXT_COM_RT_0:",
          "2086:                     case BGP_EXT_COM_RO_0:",
          "2087:                     case BGP_EXT_COM_L2VPN_RT_0:",
          "2088:                         ND_PRINT((ndo, \": %u:%u (= %s)\",",
          "2089:                                EXTRACT_BE_U_2(tptr + 2),",
          "2090:                                EXTRACT_BE_U_4(tptr + 4),",
          "2091:                                ipaddr_string(ndo, tptr+4)));",
          "2092:                         break;",
          "2093:                     case BGP_EXT_COM_RT_1:",
          "2094:                     case BGP_EXT_COM_RO_1:",
          "2095:                     case BGP_EXT_COM_L2VPN_RT_1:",
          "2096:                     case BGP_EXT_COM_VRF_RT_IMP:",
          "2097:                         ND_PRINT((ndo, \": %s:%u\",",
          "2098:                                ipaddr_string(ndo, tptr+2),",
          "2099:                                EXTRACT_BE_U_2(tptr + 6)));",
          "2100:                         break;",
          "2101:                     case BGP_EXT_COM_RT_2:",
          "2102:                     case BGP_EXT_COM_RO_2:",
          "2103:    ND_PRINT((ndo, \": %s:%u\",",
          "2104:        as_printf(ndo, astostr, sizeof(astostr),",
          "2105:        EXTRACT_BE_U_4(tptr + 2)), EXTRACT_BE_U_2(tptr + 6)));",
          "2106:    break;",
          "2107:                     case BGP_EXT_COM_LINKBAND:",
          "2108:           bw.i = EXTRACT_BE_U_4(tptr + 2);",
          "2109:                         ND_PRINT((ndo, \": bandwidth: %.3f Mbps\",",
          "2110:                                bw.f*8/1000000));",
          "2111:                         break;",
          "2112:                     case BGP_EXT_COM_VPN_ORIGIN:",
          "2113:                     case BGP_EXT_COM_VPN_ORIGIN2:",
          "2114:                     case BGP_EXT_COM_VPN_ORIGIN3:",
          "2115:                     case BGP_EXT_COM_VPN_ORIGIN4:",
          "2116:                     case BGP_EXT_COM_OSPF_RID:",
          "2117:                     case BGP_EXT_COM_OSPF_RID2:",
          "2118:                         ND_PRINT((ndo, \"%s\", ipaddr_string(ndo, tptr+2)));",
          "2119:                         break;",
          "2120:                     case BGP_EXT_COM_OSPF_RTYPE:",
          "2121:                     case BGP_EXT_COM_OSPF_RTYPE2:",
          "2122:                         ND_PRINT((ndo, \": area:%s, router-type:%s, metric-type:%s%s\",",
          "2123:                                ipaddr_string(ndo, tptr+2),",
          "2124:                                tok2str(bgp_extd_comm_ospf_rtype_values,",
          "2125:        \"unknown (0x%02x)\",",
          "2126:        EXTRACT_U_1((tptr + 6))),",
          "2127:                                (EXTRACT_U_1(tptr + 7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? \"E2\" : \"\",",
          "2128:                                ((EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_EXT) || (EXTRACT_U_1(tptr + 6) == BGP_OSPF_RTYPE_NSSA)) ? \"E1\" : \"\"));",
          "2129:                         break;",
          "2130:                     case BGP_EXT_COM_L2INFO:",
          "2131:                         ND_PRINT((ndo, \": %s Control Flags [0x%02x]:MTU %u\",",
          "2132:                                tok2str(l2vpn_encaps_values,",
          "2133:        \"unknown encaps\",",
          "2134:        EXTRACT_U_1((tptr + 2))),",
          "2135:                                EXTRACT_U_1((tptr + 3)),",
          "2136:                                EXTRACT_BE_U_2(tptr + 4)));",
          "2137:                         break;",
          "2138:                     case BGP_EXT_COM_SOURCE_AS:",
          "2139:                         ND_PRINT((ndo, \": AS %u\", EXTRACT_BE_U_2(tptr + 2)));",
          "2140:                         break;",
          "2141:                     default:",
          "2142:                         ND_TCHECK_8(tptr);",
          "2143:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", 8);",
          "2144:                         break;",
          "2145:                     }",
          "2146:                     tlen -=8;",
          "2147:                     tptr +=8;",
          "2148:                 }",
          "2151:         case BGPTYPE_PMSI_TUNNEL:",
          "2152:         {",
          "2153:                 uint8_t tunnel_type, flags;",
          "2155:                 ND_TCHECK_5(tptr);",
          "2156:                 flags = EXTRACT_U_1(tptr);",
          "2157:                 tunnel_type = EXTRACT_U_1(tptr + 1);",
          "2158:                 tlen = len;",
          "2160:                 ND_PRINT((ndo, \"\\n\\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u\",",
          "2161:                        tok2str(bgp_pmsi_tunnel_values, \"Unknown\", tunnel_type),",
          "2162:                        tunnel_type,",
          "2163:                        bittok2str(bgp_pmsi_flag_values, \"none\", flags),",
          "2164:                        EXTRACT_BE_U_3(tptr + 2)>>4));",
          "2166:                 tptr +=5;",
          "2167:                 tlen -= 5;",
          "2169:                 switch (tunnel_type) {",
          "2171:                 case BGP_PMSI_TUNNEL_PIM_BIDIR:",
          "2172:                     ND_TCHECK_8(tptr);",
          "2173:                     ND_PRINT((ndo, \"\\n\\t      Sender %s, P-Group %s\",",
          "2174:                            ipaddr_string(ndo, tptr),",
          "2175:                            ipaddr_string(ndo, tptr+4)));",
          "2176:                     break;",
          "2178:                 case BGP_PMSI_TUNNEL_PIM_SSM:",
          "2179:                     ND_TCHECK_8(tptr);",
          "2180:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, P-Group %s\",",
          "2181:                            ipaddr_string(ndo, tptr),",
          "2182:                            ipaddr_string(ndo, tptr+4)));",
          "2183:                     break;",
          "2184:                 case BGP_PMSI_TUNNEL_INGRESS:",
          "2185:                     ND_TCHECK_4(tptr);",
          "2186:                     ND_PRINT((ndo, \"\\n\\t      Tunnel-Endpoint %s\",",
          "2187:                            ipaddr_string(ndo, tptr)));",
          "2188:                     break;",
          "2190:                 case BGP_PMSI_TUNNEL_LDP_MP2MP:",
          "2191:                     ND_TCHECK_8(tptr);",
          "2192:                     ND_PRINT((ndo, \"\\n\\t      Root-Node %s, LSP-ID 0x%08x\",",
          "2193:                            ipaddr_string(ndo, tptr),",
          "2194:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2195:                     break;",
          "2196:                 case BGP_PMSI_TUNNEL_RSVP_P2MP:",
          "2197:                     ND_TCHECK_8(tptr);",
          "2198:                     ND_PRINT((ndo, \"\\n\\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x\",",
          "2199:                            ipaddr_string(ndo, tptr),",
          "2200:                            EXTRACT_BE_U_4(tptr + 4)));",
          "2201:                     break;",
          "2202:                 default:",
          "2203:                     if (ndo->ndo_vflag <= 1) {",
          "2204:                         print_unknown_data(ndo, tptr, \"\\n\\t      \", tlen);",
          "2205:                     }",
          "2206:                 }",
          "2209:  case BGPTYPE_AIGP:",
          "2210:  {",
          "2211:   uint8_t type;",
          "2212:   uint16_t length;",
          "2214:   tlen = len;",
          "2216:   while (tlen >= 3) {",
          "2218:       ND_TCHECK_3(tptr);",
          "2220:       type = EXTRACT_U_1(tptr);",
          "2221:       length = EXTRACT_BE_U_2(tptr + 1);",
          "2222:       tptr += 3;",
          "2223:       tlen -= 3;",
          "2225:       ND_PRINT((ndo, \"\\n\\t    %s TLV (%u), length %u\",",
          "2226:          tok2str(bgp_aigp_values, \"Unknown\", type),",
          "2227:          type, length));",
          "2229:       if (length < 3)",
          "2230:    goto trunc;",
          "2231:       length -= 3;",
          "2236:       ND_TCHECK_LEN(tptr + 3, length);",
          "2238:       switch (type) {",
          "2240:       case BGP_AIGP_TLV:",
          "2241:           if (length < 8)",
          "2242:               goto trunc;",
          "2243:    ND_PRINT((ndo, \", metric %\" PRIu64,",
          "2244:       EXTRACT_BE_U_8(tptr)));",
          "2245:    break;",
          "2247:       default:",
          "2248:    if (ndo->ndo_vflag <= 1) {",
          "2249:        print_unknown_data(ndo, tptr,\"\\n\\t      \", length);",
          "2250:    }",
          "2251:       }",
          "2253:       tptr += length;",
          "2254:       tlen -= length;",
          "2255:   }",
          "2256:   break;",
          "2257:  }",
          "2258:         case BGPTYPE_ATTR_SET:",
          "2259:                 ND_TCHECK_4(tptr);",
          "2260:                 if (len < 4)",
          "2261:                  goto trunc;",
          "2262:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "2263:       as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_4(tptr))));",
          "2264:   tptr+=4;",
          "2265:                 len -=4;",
          "2267:                 while (len) {",
          "2268:                     u_int aflags, alenlen, alen;",
          "2270:                     ND_TCHECK_2(tptr);",
          "2271:                     if (len < 2)",
          "2272:                         goto trunc;",
          "2273:                     aflags = EXTRACT_U_1(tptr);",
          "2274:                     atype = EXTRACT_U_1(tptr + 1);",
          "2275:                     tptr += 2;",
          "2276:                     len -= 2;",
          "2277:                     alenlen = bgp_attr_lenlen(aflags, tptr);",
          "2278:                     ND_TCHECK_LEN(tptr, alenlen);",
          "2279:                     if (len < alenlen)",
          "2280:                         goto trunc;",
          "2281:                     alen = bgp_attr_len(aflags, tptr);",
          "2282:                     tptr += alenlen;",
          "2283:                     len -= alenlen;",
          "2285:                     ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2286:                            tok2str(bgp_attr_values,",
          "2287:                                       \"Unknown Attribute\", atype),",
          "2288:                            atype,",
          "2289:                            alen));",
          "2291:                     if (aflags) {",
          "2292:                         ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2293:                                aflags & 0x80 ? \"O\" : \"\",",
          "2294:                                aflags & 0x40 ? \"T\" : \"\",",
          "2295:                                aflags & 0x20 ? \"P\" : \"\",",
          "2296:                                aflags & 0x10 ? \"E\" : \"\"));",
          "2297:                         if (aflags & 0xf)",
          "2298:                             ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2299:                         ND_PRINT((ndo, \"]: \"));",
          "2300:                     }",
          "2302:                     if (!bgp_attr_print(ndo, atype, tptr, alen))",
          "2303:                         return 0;",
          "2304:                     tptr += alen;",
          "2305:                     len -= alen;",
          "2306:   }",
          "2309:  case BGPTYPE_LARGE_COMMUNITY:",
          "2310:   if (len == 0 || len % 12) {",
          "2311:    ND_PRINT((ndo, \"invalid len\"));",
          "2312:    break;",
          "2313:   }",
          "2314:   ND_PRINT((ndo, \"\\n\\t    \"));",
          "2315:   while (len > 0) {",
          "2316:    ND_TCHECK_LEN(tptr, 12);",
          "2317:    ND_PRINT((ndo, \"%u:%u:%u%s\",",
          "2318:      EXTRACT_BE_U_4(tptr),",
          "2319:      EXTRACT_BE_U_4(tptr + 4),",
          "2320:      EXTRACT_BE_U_4(tptr + 8),",
          "2321:      (len > 12) ? \", \" : \"\"));",
          "2322:                         tptr += 12;",
          "2323:                         len -= 12;",
          "2324:   }",
          "2325:   break;",
          "2326:  default:",
          "2327:      ND_TCHECK_LEN(pptr, len);",
          "2329:             if (ndo->ndo_vflag <= 1)",
          "2330:                 print_unknown_data(ndo, pptr, \"\\n\\t    \", len);",
          "2332:  }",
          "2334:             ND_TCHECK_LEN(pptr, len);",
          "2336:         }",
          "2337:         return 1;",
          "2340:         return 0;",
          "2347:  u_int cap_type, cap_len, tcap_len, cap_offset;",
          "2348:         u_int i = 0;",
          "2350:         while (i < caps_len) {",
          "2351:                 ND_TCHECK_LEN(opt + i, BGP_CAP_HEADER_SIZE);",
          "2352:                 cap_type=EXTRACT_U_1(opt + i);",
          "2353:                 cap_len=EXTRACT_U_1(opt + i + 1);",
          "2354:                 tcap_len=cap_len;",
          "2355:                 ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\",",
          "2356:                        tok2str(bgp_capcode_values, \"Unknown\",",
          "2357:                                   cap_type),",
          "2358:                        cap_type,",
          "2359:                        cap_len));",
          "2360:                 ND_TCHECK_LEN(opt + 2 + i, cap_len);",
          "2361:                 switch (cap_type) {",
          "2362:                 case BGP_CAPCODE_MP:",
          "2363:                     ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\",",
          "2364:                            tok2str(af_values, \"Unknown\",",
          "2365:                                       EXTRACT_BE_U_2(opt + i + 2)),",
          "2366:                            EXTRACT_BE_U_2(opt + i + 2),",
          "2367:                            tok2str(bgp_safi_values, \"Unknown\",",
          "2368:                                       EXTRACT_U_1(opt + i + 5)),",
          "2369:                            EXTRACT_U_1(opt + i + 5)));",
          "2370:                     break;",
          "2371:                 case BGP_CAPCODE_RESTART:",
          "2372:                     ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\",",
          "2373:                            ((EXTRACT_U_1(opt + i + 2))&0x80) ? \"R\" : \"none\",",
          "2374:                            EXTRACT_BE_U_2(opt + i + 2)&0xfff));",
          "2375:                     tcap_len-=2;",
          "2376:                     cap_offset=4;",
          "2377:                     while(tcap_len>=4) {",
          "2378:                         ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\",",
          "2379:                                tok2str(af_values,\"Unknown\",",
          "2380:                                           EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2381:                                EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2382:                                tok2str(bgp_safi_values,\"Unknown\",",
          "2383:                                           EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2384:                                EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2385:                                ((EXTRACT_U_1(opt + (i + cap_offset + 3)))&0x80) ? \"yes\" : \"no\" ));",
          "2386:                         tcap_len-=4;",
          "2387:                         cap_offset+=4;",
          "2388:                     }",
          "2389:                     break;",
          "2390:                 case BGP_CAPCODE_RR:",
          "2391:                 case BGP_CAPCODE_RR_CISCO:",
          "2392:                     break;",
          "2393:                 case BGP_CAPCODE_AS_NEW:",
          "2398:                     if (cap_len == 4) {",
          "2399:                         ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\",",
          "2400:                             as_printf(ndo, astostr, sizeof(astostr),",
          "2401:                             EXTRACT_BE_U_4(opt + i + 2))));",
          "2402:                     }",
          "2403:                     break;",
          "2404:                 case BGP_CAPCODE_ADD_PATH:",
          "2405:                     cap_offset=2;",
          "2406:                     if (tcap_len == 0) {",
          "2408:                         break;",
          "2409:                     }",
          "2410:                     while (tcap_len > 0) {",
          "2411:                         if (tcap_len < 4) {",
          "2412:                             ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));",
          "2413:                             break;",
          "2414:                         }",
          "2415:                         ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\",",
          "2416:                                   tok2str(af_values,\"Unknown\",EXTRACT_BE_U_2(opt + i + cap_offset)),",
          "2417:                                   EXTRACT_BE_U_2(opt + i + cap_offset),",
          "2418:                                   tok2str(bgp_safi_values,\"Unknown\",EXTRACT_U_1(opt + i + cap_offset + 2)),",
          "2419:                                   EXTRACT_U_1(opt + (i + cap_offset + 2)),",
          "2420:                                   tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",EXTRACT_U_1(opt + i + cap_offset + 3))",
          "2421:                         ));",
          "2422:                         tcap_len-=4;",
          "2423:                         cap_offset+=4;",
          "2424:                     }",
          "2425:                     break;",
          "2426:                 default:",
          "2427:                     ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\",",
          "2428:                            cap_type));",
          "2429:                     if (ndo->ndo_vflag <= 1)",
          "2430:                         print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\",",
          "2431:         cap_len);",
          "2434:                 if (ndo->ndo_vflag > 1 && cap_len > 0) {",
          "2435:                     print_unknown_data(ndo, opt + i + 2, \"\\n\\t\\t\", cap_len);",
          "2436:                 }",
          "2437:                 i += BGP_CAP_HEADER_SIZE + cap_len;",
          "2439:         return;",
          "2442:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2449:  const struct bgp_open *bgp_open_header;",
          "2450:  u_int optslen;",
          "2451:  const struct bgp_opt *bgpopt;",
          "2452:  const u_char *opt;",
          "2453:  u_int i;",
          "2455:  ND_TCHECK_LEN(dat, BGP_OPEN_SIZE);",
          "2456:  if (length < BGP_OPEN_SIZE)",
          "2457:   goto trunc;",
          "2459:  bgp_open_header = (const struct bgp_open *)dat;",
          "2461:  ND_PRINT((ndo, \"\\n\\t  Version %u, \",",
          "2462:      EXTRACT_U_1(bgp_open_header->bgpo_version)));",
          "2463:  ND_PRINT((ndo, \"my AS %s, \",",
          "2464:      as_printf(ndo, astostr, sizeof(astostr), EXTRACT_BE_U_2(bgp_open_header->bgpo_myas))));",
          "2465:  ND_PRINT((ndo, \"Holdtime %us, \",",
          "2466:      EXTRACT_BE_U_2(bgp_open_header->bgpo_holdtime)));",
          "2467:  ND_PRINT((ndo, \"ID %s\", ipaddr_string(ndo, &bgp_open_header->bgpo_id)));",
          "2468:  optslen = EXTRACT_U_1(bgp_open_header->bgpo_optlen);",
          "2469:  ND_PRINT((ndo, \"\\n\\t  Optional parameters, length: %u\", optslen));",
          "2471:  opt = dat + BGP_OPEN_SIZE;",
          "2472:  length -= BGP_OPEN_SIZE;",
          "2474:  i = 0;",
          "2475:  while (i < optslen) {",
          "2476:   uint8_t opt_type, opt_len;",
          "2478:   ND_TCHECK_LEN(opt + i, BGP_OPT_SIZE);",
          "2479:   if (length < BGP_OPT_SIZE + i)",
          "2480:    goto trunc;",
          "2481:   bgpopt = (const struct bgp_opt *)(opt + i);",
          "2482:   opt_type = EXTRACT_U_1(bgpopt->bgpopt_type);",
          "2483:   opt_len = EXTRACT_U_1(bgpopt->bgpopt_len);",
          "2484:   if (BGP_OPT_SIZE + i + opt_len > optslen) {",
          "2485:    ND_PRINT((ndo, \"\\n\\t     Option %u, length: %u, goes past the end of the options\",",
          "2486:        opt_type, opt_len));",
          "2487:    break;",
          "2488:   }",
          "2490:   ND_PRINT((ndo, \"\\n\\t    Option %s (%u), length: %u\",",
          "2491:          tok2str(bgp_opt_values,\"Unknown\",opt_type),",
          "2492:          opt_type,",
          "2493:          opt_len));",
          "2496:   switch(opt_type) {",
          "2498:   case BGP_OPT_CAP:",
          "2499:    bgp_capabilities_print(ndo, opt + BGP_OPT_SIZE + i,",
          "2500:             opt_len);",
          "2501:    break;",
          "2503:   case BGP_OPT_AUTH:",
          "2504:   default:",
          "2505:          ND_PRINT((ndo, \"\\n\\t      no decoder for option %u\",",
          "2506:       opt_type));",
          "2507:          break;",
          "2508:   }",
          "2509:   i += BGP_OPT_SIZE + opt_len;",
          "2510:  }",
          "2511:  return;",
          "2513:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2518:                  const u_char *dat, int length)",
          "2520:  const struct bgp *bgp_header;",
          "2521:  const u_char *p;",
          "2522:  int withdrawn_routes_len;",
          "2523:  int len;",
          "2524:  int i;",
          "2526:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2527:  if (length < BGP_SIZE)",
          "2528:   goto trunc;",
          "2529:  bgp_header = (const struct bgp *)dat;",
          "2530:  p = dat + BGP_SIZE;",
          "2531:  length -= BGP_SIZE;",
          "2534:  ND_TCHECK_2(p);",
          "2535:  if (length < 2)",
          "2536:   goto trunc;",
          "2537:  withdrawn_routes_len = EXTRACT_BE_U_2(p);",
          "2538:  p += 2;",
          "2539:  length -= 2;",
          "2540:  if (withdrawn_routes_len) {",
          "2546:   ND_TCHECK_LEN(p, withdrawn_routes_len);",
          "2547:   if (length < withdrawn_routes_len)",
          "2548:    goto trunc;",
          "2549:   ND_PRINT((ndo, \"\\n\\t  Withdrawn routes: %d bytes\", withdrawn_routes_len));",
          "2550:   p += withdrawn_routes_len;",
          "2551:   length -= withdrawn_routes_len;",
          "2552:  }",
          "2554:  ND_TCHECK_2(p);",
          "2555:  if (length < 2)",
          "2556:   goto trunc;",
          "2557:  len = EXTRACT_BE_U_2(p);",
          "2558:  p += 2;",
          "2559:  length -= 2;",
          "2561:         if (withdrawn_routes_len == 0 && len == 0 && length == 0) {",
          "2563:             ND_PRINT((ndo, \"\\n\\t  End-of-Rib Marker (empty NLRI)\"));",
          "2564:             return;",
          "2567:  if (len) {",
          "2569:   while (len) {",
          "2570:    int aflags, atype, alenlen, alen;",
          "2572:    ND_TCHECK_2(p);",
          "2573:    if (len < 2)",
          "2574:        goto trunc;",
          "2575:    if (length < 2)",
          "2576:        goto trunc;",
          "2577:    aflags = EXTRACT_U_1(p);",
          "2578:    atype = EXTRACT_U_1(p + 1);",
          "2579:    p += 2;",
          "2580:    len -= 2;",
          "2581:    length -= 2;",
          "2582:    alenlen = bgp_attr_lenlen(aflags, p);",
          "2583:    ND_TCHECK_LEN(p, alenlen);",
          "2584:    if (len < alenlen)",
          "2585:        goto trunc;",
          "2586:    if (length < alenlen)",
          "2587:        goto trunc;",
          "2588:    alen = bgp_attr_len(aflags, p);",
          "2589:    p += alenlen;",
          "2590:    len -= alenlen;",
          "2591:    length -= alenlen;",
          "2593:    ND_PRINT((ndo, \"\\n\\t  %s (%u), length: %u\",",
          "2594:                               tok2str(bgp_attr_values, \"Unknown Attribute\",",
          "2595:       atype),",
          "2596:                               atype,",
          "2597:                               alen));",
          "2599:    if (aflags) {",
          "2600:     ND_PRINT((ndo, \", Flags [%s%s%s%s\",",
          "2601:      aflags & 0x80 ? \"O\" : \"\",",
          "2602:      aflags & 0x40 ? \"T\" : \"\",",
          "2603:      aflags & 0x20 ? \"P\" : \"\",",
          "2604:      aflags & 0x10 ? \"E\" : \"\"));",
          "2605:     if (aflags & 0xf)",
          "2606:      ND_PRINT((ndo, \"+%x\", aflags & 0xf));",
          "2607:     ND_PRINT((ndo, \"]: \"));",
          "2608:    }",
          "2609:    if (len < alen)",
          "2610:     goto trunc;",
          "2611:    if (length < alen)",
          "2612:     goto trunc;",
          "2613:    if (!bgp_attr_print(ndo, atype, p, alen))",
          "2614:     goto trunc;",
          "2615:    p += alen;",
          "2616:    len -= alen;",
          "2617:    length -= alen;",
          "2618:   }",
          "2619:  }",
          "2621:  if (length) {",
          "2630:   ND_PRINT((ndo, \"\\n\\t  Updated routes:\"));",
          "2631:   while (length) {",
          "2632:    char buf[MAXHOSTNAMELEN + 100];",
          "2633:    i = decode_prefix4(ndo, p, length, buf, sizeof(buf));",
          "2634:    if (i == -1) {",
          "2635:     ND_PRINT((ndo, \"\\n\\t    (illegal prefix length)\"));",
          "2636:     break;",
          "2637:    } else if (i == -2)",
          "2638:     goto trunc;",
          "2639:    else if (i == -3)",
          "2641:    else {",
          "2642:     ND_PRINT((ndo, \"\\n\\t    %s\", buf));",
          "2643:     p += i;",
          "2644:     length -= i;",
          "2645:    }",
          "2646:   }",
          "2647:  }",
          "2648:  return;",
          "2650:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2655:                        const u_char *dat, int length)",
          "2657:  const struct bgp_notification *bgp_notification_header;",
          "2658:  const u_char *tptr;",
          "2659:  uint8_t bgpn_major, bgpn_minor;",
          "2660:  uint8_t shutdown_comm_length;",
          "2661:  uint8_t remainder_offset;",
          "2663:  ND_TCHECK_LEN(dat, BGP_NOTIFICATION_SIZE);",
          "2664:         if (length<BGP_NOTIFICATION_SIZE)",
          "2665:             return;",
          "2667:  bgp_notification_header = (const struct bgp_notification *)dat;",
          "2668:  bgpn_major = EXTRACT_U_1(bgp_notification_header->bgpn_major);",
          "2669:  bgpn_minor = EXTRACT_U_1(bgp_notification_header->bgpn_minor);",
          "2671:  ND_PRINT((ndo, \", %s (%u)\",",
          "2672:         tok2str(bgp_notify_major_values, \"Unknown Error\",",
          "2673:      bgpn_major),",
          "2674:         bgpn_major));",
          "2676:         switch (bgpn_major) {",
          "2678:         case BGP_NOTIFY_MAJOR_MSG:",
          "2679:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2680:      tok2str(bgp_notify_minor_msg_values, \"Unknown\",",
          "2681:          bgpn_minor),",
          "2682:      bgpn_minor));",
          "2683:             break;",
          "2684:         case BGP_NOTIFY_MAJOR_OPEN:",
          "2685:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2686:      tok2str(bgp_notify_minor_open_values, \"Unknown\",",
          "2687:          bgpn_minor),",
          "2688:      bgpn_minor));",
          "2689:             break;",
          "2690:         case BGP_NOTIFY_MAJOR_UPDATE:",
          "2691:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2692:      tok2str(bgp_notify_minor_update_values, \"Unknown\",",
          "2693:          bgpn_minor),",
          "2694:      bgpn_minor));",
          "2695:             break;",
          "2696:         case BGP_NOTIFY_MAJOR_FSM:",
          "2697:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2698:      tok2str(bgp_notify_minor_fsm_values, \"Unknown\",",
          "2699:          bgpn_minor),",
          "2700:      bgpn_minor));",
          "2701:             break;",
          "2702:         case BGP_NOTIFY_MAJOR_CAP:",
          "2703:             ND_PRINT((ndo, \" subcode %s (%u)\",",
          "2704:      tok2str(bgp_notify_minor_cap_values, \"Unknown\",",
          "2705:          bgpn_minor),",
          "2706:      bgpn_minor));",
          "2707:             break;",
          "2708:         case BGP_NOTIFY_MAJOR_CEASE:",
          "2709:             ND_PRINT((ndo, \", subcode %s (%u)\",",
          "2710:      tok2str(bgp_notify_minor_cease_values, \"Unknown\",",
          "2711:          bgpn_minor),",
          "2712:      bgpn_minor));",
          "2717:      if(bgpn_minor == BGP_NOTIFY_MINOR_CEASE_MAXPRFX && length >= BGP_NOTIFICATION_SIZE + 7) {",
          "2718:   tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2719:   ND_TCHECK_7(tptr);",
          "2720:   ND_PRINT((ndo, \", AFI %s (%u), SAFI %s (%u), Max Prefixes: %u\",",
          "2721:          tok2str(af_values, \"Unknown\",",
          "2722:       EXTRACT_BE_U_2(tptr)),",
          "2723:          EXTRACT_BE_U_2(tptr),",
          "2724:          tok2str(bgp_safi_values, \"Unknown\", EXTRACT_U_1((tptr + 2))),",
          "2725:          EXTRACT_U_1((tptr + 2)),",
          "2726:          EXTRACT_BE_U_4(tptr + 3)));",
          "2727:      }",
          "2732:      if ((bgpn_minor == BGP_NOTIFY_MINOR_CEASE_SHUT ||",
          "2733:   bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2734:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2735:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2736:       ND_TCHECK_1(tptr);",
          "2737:       shutdown_comm_length = EXTRACT_U_1(tptr);",
          "2738:       remainder_offset = 0;",
          "2740:       if (shutdown_comm_length > BGP_NOTIFY_MINOR_CEASE_ADMIN_SHUTDOWN_LEN ||",
          "2741:    shutdown_comm_length > length - (BGP_NOTIFICATION_SIZE + 1)) {",
          "2742:        ND_PRINT((ndo, \", invalid Shutdown Communication length\"));",
          "2743:       }",
          "2744:       else if (shutdown_comm_length == 0) {",
          "2745:        ND_PRINT((ndo, \", empty Shutdown Communication\"));",
          "2746:        remainder_offset += 1;",
          "2747:       }",
          "2749:       else {",
          "2750:        ND_TCHECK_LEN(tptr + 1, shutdown_comm_length);",
          "2751:        ND_PRINT((ndo, \", Shutdown Communication (length: %u): \\\"\", shutdown_comm_length));",
          "2752:        (void)fn_printn(ndo, tptr+1, shutdown_comm_length, NULL);",
          "2753:        ND_PRINT((ndo, \"\\\"\"));",
          "2754:        remainder_offset += shutdown_comm_length + 1;",
          "2755:       }",
          "2757:       if(length - (remainder_offset + BGP_NOTIFICATION_SIZE) > 0) {",
          "2758:        ND_PRINT((ndo, \", Data: (length: %u)\", length - (remainder_offset + BGP_NOTIFICATION_SIZE)));",
          "2759:        hex_print(ndo, \"\\n\\t\\t\", tptr + remainder_offset, length - (remainder_offset + BGP_NOTIFICATION_SIZE));",
          "2760:       }",
          "2761:      }",
          "2762:      break;",
          "2763:  default:",
          "2764:             break;",
          "2767:  return;",
          "2769:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2774:                         const u_char *pptr, int len)",
          "2776:         const struct bgp_route_refresh *bgp_route_refresh_header;",
          "2778:  ND_TCHECK_LEN(pptr, BGP_ROUTE_REFRESH_SIZE);",
          "2781:         if (len<BGP_ROUTE_REFRESH_SIZE)",
          "2782:             return;",
          "2784:         bgp_route_refresh_header = (const struct bgp_route_refresh *)pptr;",
          "2786:         ND_PRINT((ndo, \"\\n\\t  AFI %s (%u), SAFI %s (%u)\",",
          "2787:                tok2str(af_values,\"Unknown\",",
          "2788:      EXTRACT_BE_U_2(bgp_route_refresh_header->afi)),",
          "2789:                EXTRACT_BE_U_2(bgp_route_refresh_header->afi),",
          "2790:                tok2str(bgp_safi_values,\"Unknown\",",
          "2791:      EXTRACT_U_1(bgp_route_refresh_header->safi)),",
          "2792:                EXTRACT_U_1(bgp_route_refresh_header->safi)));",
          "2794:         if (ndo->ndo_vflag > 1) {",
          "2795:             ND_TCHECK_LEN(pptr, len);",
          "2796:             print_unknown_data(ndo, pptr, \"\\n\\t  \", len);",
          "2797:         }",
          "2799:         return;",
          "2801:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2806:                  const u_char *dat, u_int length)",
          "2808:  const struct bgp *bgp_header;",
          "2809:  uint8_t bgp_type;",
          "2811:  ND_TCHECK_LEN(dat, BGP_SIZE);",
          "2812:  bgp_header = (const struct bgp *)dat;",
          "2813:  bgp_type = EXTRACT_U_1(bgp_header->bgp_type);",
          "2815:  ND_PRINT((ndo, \"\\n\\t%s Message (%u), length: %u\",",
          "2816:                tok2str(bgp_msg_values, \"Unknown\", bgp_type),",
          "2817:                bgp_type,",
          "2818:                length));",
          "2820:  switch (bgp_type) {",
          "2821:  case BGP_OPEN:",
          "2822:   bgp_open_print(ndo, dat, length);",
          "2823:   break;",
          "2824:  case BGP_UPDATE:",
          "2825:   bgp_update_print(ndo, dat, length);",
          "2826:   break;",
          "2827:  case BGP_NOTIFICATION:",
          "2828:   bgp_notification_print(ndo, dat, length);",
          "2829:   break;",
          "2830:         case BGP_KEEPALIVE:",
          "2831:                 break;",
          "2832:         case BGP_ROUTE_REFRESH:",
          "2833:                 bgp_route_refresh_print(ndo, dat, length);",
          "2834:                 break;",
          "2835:         default:",
          "2837:                 ND_TCHECK_LEN(dat, length);",
          "2838:                 ND_PRINT((ndo, \"\\n\\t  no Message %u decoder\", bgp_type));",
          "2839:                 print_unknown_data(ndo, dat, \"\\n\\t  \", length);",
          "2840:                 break;",
          "2841:  }",
          "2842:  return 1;",
          "2844:  ND_PRINT((ndo, \"[|BGP]\"));",
          "2845:  return 0;",
          "2850:           const u_char *dat, int length)",
          "2852:  const u_char *p;",
          "2853:  const u_char *ep;",
          "2854:  const u_char *start;",
          "2855:  const u_char marker[] = {",
          "2856:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2857:   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
          "2858:  };",
          "2859:  const struct bgp *bgp_header;",
          "2860:  uint16_t hlen;",
          "2862:  ep = dat + length;",
          "2863:  if (ndo->ndo_snapend < dat + length)",
          "2864:   ep = ndo->ndo_snapend;",
          "2866:  ND_PRINT((ndo, \": BGP\"));",
          "2871:  p = dat;",
          "2872:  start = p;",
          "2873:  while (p < ep) {",
          "2874:   if (!ND_TTEST_1(p))",
          "2875:    break;",
          "2876:   if (EXTRACT_U_1(p) != 0xff) {",
          "2877:    p++;",
          "2878:    continue;",
          "2879:   }",
          "2881:   if (!ND_TTEST_LEN(p, sizeof(marker)))",
          "2882:    break;",
          "2883:   if (memcmp(p, marker, sizeof(marker)) != 0) {",
          "2884:    p++;",
          "2885:    continue;",
          "2886:   }",
          "2889:   ND_TCHECK_LEN(p, BGP_SIZE);",
          "2890:   bgp_header = (const struct bgp *)p;",
          "2892:   if (start != p)",
          "2893:    ND_PRINT((ndo, \" [|BGP]\"));",
          "2895:   hlen = EXTRACT_BE_U_2(bgp_header->bgp_len);",
          "2896:   if (hlen < BGP_SIZE) {",
          "2897:    ND_PRINT((ndo, \"\\n[|BGP Bogus header length %u < %u]\", hlen,",
          "2898:        BGP_SIZE));",
          "2899:    break;",
          "2900:   }",
          "2902:   if (ND_TTEST_LEN(p, hlen)) {",
          "2903:    if (!bgp_pdu_print(ndo, p, hlen))",
          "2904:     return;",
          "2905:    p += hlen;",
          "2906:    start = p;",
          "2907:   } else {",
          "2908:    ND_PRINT((ndo, \"\\n[|BGP %s]\",",
          "2909:           tok2str(bgp_msg_values,",
          "2910:        \"Unknown Message Type\",",
          "2911:        EXTRACT_U_1(bgp_header->bgp_type))));",
          "2912:    break;",
          "2913:   }",
          "2914:  }",
          "2916:  return;",
          "2919:  ND_PRINT((ndo, \" [|BGP]\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}