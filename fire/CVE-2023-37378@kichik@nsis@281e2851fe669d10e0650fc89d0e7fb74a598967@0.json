{
  "cve_id": "CVE-2023-37378",
  "cve_desc": "Nullsoft Scriptable Install System (NSIS) before 3.09 mishandles access control for an uninstaller directory.",
  "repo": "kichik/nsis",
  "patch_hash": "281e2851fe669d10e0650fc89d0e7fb74a598967",
  "patch_info": {
    "commit_hash": "281e2851fe669d10e0650fc89d0e7fb74a598967",
    "repo": "kichik/nsis",
    "commit_url": "https://github.com/kichik/nsis/commit/281e2851fe669d10e0650fc89d0e7fb74a598967",
    "files": [
      "Docs/src/history.but",
      "Source/build.cpp",
      "Source/exehead/Main.c",
      "Source/exehead/util.c"
    ],
    "message": "Use isolated uninstaller temp directory\n\ngit-svn-id: https://svn.code.sf.net/p/nsis/code/NSIS/trunk@7388 212acab6-be3b-0410-9dea-997c60f758d6",
    "before_after_code_files": [
      "Source/build.cpp||Source/build.cpp",
      "Source/exehead/Main.c||Source/exehead/Main.c",
      "Source/exehead/util.c||Source/exehead/util.c"
    ]
  },
  "patch_diff": {
    "Source/build.cpp||Source/build.cpp": [
      "File: Source/build.cpp -> Source/build.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2326: #ifdef NSIS_CONFIG_UNINSTALL_SUPPORT",
      "2327:   if (uninstall_mode)",
      "2328:   {",
      "2331:   }",
      "2332: #endif//NSIS_CONFIG_UNINSTALL_SUPPORT",
      "2333: #ifdef NSIS_SUPPORT_MOVEONREBOOT",
      "",
      "[Removed Lines]",
      "2329:     cur_header->str_uninstchild = add_asciistring(_T(\"$TEMP\\\\Un_$1.exe\"));",
      "2330:     cur_header->str_uninstcmd = add_asciistring(_T(\"\\\"$TEMP\\\\Un_$1.exe\\\" $0 _?=$INSTDIR\\\\\"));",
      "",
      "[Added Lines]",
      "2329:     cur_header->str_uninstchild = add_asciistring(_T(\"$TEMP\\\\Un.exe\"));",
      "2330:     cur_header->str_uninstcmd = add_asciistring(_T(\"\\\"$TEMP\\\\Un.exe\\\" $0 _?=$INSTDIR\\\\\"));",
      "",
      "---------------"
    ],
    "Source/exehead/Main.c||Source/exehead/Main.c": [
      "File: Source/exehead/Main.c -> Source/exehead/Main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:     }",
      "349:     else",
      "350:     {",
      "368:       mystrcpy(g_usrvars[0], realcmds);",
      "372:       {",
      "380:         {",
      "383:           {",
      "385: #ifdef NSIS_SUPPORT_MOVEONREBOOT",
      "387: #endif",
      "390:             if (hProc)",
      "391:             {",
      "392:               CloseHandle(hProc);",
      "395:             }",
      "396:           }",
      "397:         }",
      "399:       }",
      "405:       goto end;",
      "406:     }",
      "407:   }",
      "",
      "[Removed Lines]",
      "351:       int x, admin = UserIsAdminGrpMember();",
      "353:       mystrcat(state_temp_dir,_T(\"~nsu\"));",
      "354:       if (admin) mystrcat(state_temp_dir,_T(\"A\")); // Don't lock down the directory used by non-admins",
      "355:       mystrcat(state_temp_dir,_T(\".tmp\"));",
      "359:       if (!lstrcmpi(state_temp_dir,state_exe_directory))",
      "360:         goto end;",
      "362:       admin ? CreateRestrictedDirectory(state_temp_dir) : CreateNormalDirectory(state_temp_dir);",
      "363:       SetCurrentDirectory(state_temp_dir);",
      "365:       if (!(*state_install_directory))",
      "366:         mystrcpy(state_install_directory,state_exe_directory);",
      "369:       SET2CHAR(g_usrvars[1], _T(\"A\\0\"));",
      "371:       for (x = 0; x < 26; x ++)",
      "373:         static TCHAR buf2[NSIS_MAX_STRLEN];",
      "375:         GetNSISString(buf2,g_header->str_uninstchild); // $TEMP\\Un_$1.exe",
      "377:         DeleteFile(buf2); // clean up after all the other ones if they are there",
      "379:         if (m_Err) // not done yet",
      "382:           if (CopyFile(state_exe_path,buf2,TRUE))",
      "384:             HANDLE hProc;",
      "386:             MoveFileOnReboot(buf2,NULL);",
      "388:             GetNSISString(buf2,g_header->str_uninstcmd); // '\"$TEMP\\Un_$1.exe\" $0 _?=$INSTDIR\\'",
      "389:             hProc=myCreateProcess(buf2);",
      "394:               m_Err = 0;",
      "398:         (*(((NSIS_STRING *)g_usrvars)[1]))++;",
      "401: #ifdef NSIS_SUPPORT_MOVEONREBOOT",
      "402:       MoveFileOnReboot(state_temp_dir,NULL);",
      "403: #endif",
      "",
      "[Added Lines]",
      "351:       int admin = UserIsAdminGrpMember();",
      "352:       WORD tries; // 0xfffe attempts or bust",
      "353:       size_t cchtmpslash = mystrlen(state_temp_dir);",
      "354:       LPTSTR unexe = g_usrvars[5], unexecmd = g_usrvars[6];",
      "357:       if (!(*state_install_directory))",
      "359:         mystrcpy(state_install_directory, state_exe_directory);",
      "360:       }",
      "362:       for (tries = 0; ++tries != 0;)",
      "363:       {",
      "364:         DWORD retry = 0, ec;",
      "365: retry_un_dir:",
      "366:         wsprintf(state_temp_dir + cchtmpslash, _T(\"~nsu%X.tmp\"), tries);",
      "367:         GetNSISString(unexe, g_header->str_uninstchild); // '$TEMP\\Un.exe'",
      "368:         if (admin)",
      "369:         {",
      "370:           ec = CreateRestrictedDirectory(state_temp_dir);",
      "371:         }",
      "372:         else",
      "373:         {",
      "374:           ec = CreateNormalDirectory(state_temp_dir);",
      "375:         }",
      "377:         if (ec)",
      "380:           if (DeleteFile(unexe))",
      "381:           {",
      "382:             myDelete(state_temp_dir, DEL_DIR|DEL_RECURSE);",
      "383:             if (!retry++) goto retry_un_dir;",
      "384:           }",
      "385:         }",
      "386:         else",
      "387:         {",
      "388:           HANDLE hProc;",
      "389:           SetCurrentDirectory(state_temp_dir);",
      "390: #ifdef NSIS_SUPPORT_MOVEONREBOOT",
      "391:           MoveFileOnReboot(state_temp_dir, NULL);",
      "392: #endif",
      "393:           if (CopyFile(state_exe_path, unexe, TRUE))",
      "396:             MoveFileOnReboot(unexe, NULL);",
      "398:             GetNSISString(unexecmd, g_header->str_uninstcmd); // '\"$TEMP\\Un.exe\" $0 _?=$INSTDIR\\'",
      "399:             hProc = myCreateProcess(unexecmd);",
      "403:               m_Err = 0; // Success",
      "404:             }",
      "405:             else if (!retry++ && !file_exists(unexe))",
      "406:             {",
      "408:               goto retry_un_dir;",
      "411:           break; // We called CreateProcess; success or failure, we are done.",
      "",
      "---------------"
    ],
    "Source/exehead/util.c||Source/exehead/util.c": [
      "File: Source/exehead/util.c -> Source/exehead/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "69: DWORD NSISCALL CreateRestrictedDirectory(LPCTSTR path)",
      "70: {",
      "72:   PSID admingrpsid = GetAdminGrpSid();",
      "73:   SECURITY_DESCRIPTOR sd = { 1, 0, SE_DACL_PRESENT, admingrpsid, admingrpsid, NULL, GetAdminGrpAcl() };",
      "74:   SECURITY_ATTRIBUTES sa = { sizeof(SECURITY_ATTRIBUTES), &sd, FALSE };",
      "79: }",
      "80: DWORD NSISCALL CreateNormalDirectory(LPCTSTR path)",
      "81: {",
      "",
      "[Removed Lines]",
      "71:   const SECURITY_INFORMATION si = OWNER_SECURITY_INFORMATION|GROUP_SECURITY_INFORMATION|DACL_SECURITY_INFORMATION|PROTECTED_DACL_SECURITY_INFORMATION;",
      "75:   DWORD ec = CreateDirectory(path, &sa) ? ERROR_SUCCESS : GetLastError();",
      "76:   if (ERROR_ALREADY_EXISTS == ec)",
      "77:     ec = SetFileSecurity(path, si, &sd) ? ERROR_SUCCESS : GetLastError();",
      "78:   return ec;",
      "",
      "[Added Lines]",
      "74:   return CreateDirectory(path, &sa) ? ERROR_SUCCESS : GetLastError();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c40cf78994e74a1a3a381a850c996b251e3277c0",
      "candidate_info": {
        "commit_hash": "c40cf78994e74a1a3a381a850c996b251e3277c0",
        "repo": "kichik/nsis",
        "commit_url": "https://github.com/kichik/nsis/commit/c40cf78994e74a1a3a381a850c996b251e3277c0",
        "files": [
          "Source/exehead/Main.c"
        ],
        "message": "Don't delete old uninstaller if it points somewhere else\n\ngit-svn-id: https://svn.code.sf.net/p/nsis/code/NSIS/trunk@7394 212acab6-be3b-0410-9dea-997c60f758d6",
        "before_after_code_files": [
          "Source/exehead/Main.c||Source/exehead/Main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Source/exehead/Main.c||Source/exehead/Main.c"
          ],
          "candidate": [
            "Source/exehead/Main.c||Source/exehead/Main.c"
          ]
        }
      },
      "candidate_diff": {
        "Source/exehead/Main.c||Source/exehead/Main.c": [
          "File: Source/exehead/Main.c -> Source/exehead/Main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:         if (ec)",
          "378:         {",
          "381:           {",
          "383:             if (!retry++) goto retry_un_dir;",
          "384:           }",
          "385:         }",
          "",
          "[Removed Lines]",
          "380:           if (DeleteFile(unexe))",
          "382:             myDelete(state_temp_dir, DEL_DIR|DEL_RECURSE);",
          "",
          "[Added Lines]",
          "380:           if (!(GetFileAttributes(unexe) & FILE_ATTRIBUTE_REPARSE_POINT) && DeleteFile(unexe))",
          "382:             myDelete(state_temp_dir, DEL_DIR);",
          "",
          "---------------"
        ]
      }
    }
  ]
}