{
  "cve_id": "CVE-2020-11087",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_AuthenticateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
  "patch_info": {
    "commit_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_AuthenticateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682: SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "683: {",
      "684:  wStream* s;",
      "685:  size_t length;",
      "688:  UINT32 PayloadBufferOffset;",
      "689:  NTLM_AUTHENTICATE_MESSAGE* message;",
      "690:  SSPI_CREDENTIALS* credentials = context->credentials;",
      "693:  message = &context->AUTHENTICATE_MESSAGE;",
      "694:  ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));",
      "695:  s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);",
      "",
      "[Removed Lines]",
      "686:  UINT32 flags;",
      "687:  NTLM_AV_PAIR* AvFlags;",
      "691:  flags = 0;",
      "692:  AvFlags = NULL;",
      "",
      "[Added Lines]",
      "684:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "687:  UINT32 flags = 0;",
      "688:  NTLM_AV_PAIR* AvFlags = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "698:   return SEC_E_INTERNAL_ERROR;",
      "700:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "706:  if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)",
      "712:  if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <",
      "719:  if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <",
      "744:  if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <",
      "752:  context->NegotiateKeyExchange =",
      "753:      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;",
      "755:  if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||",
      "756:      (!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))",
      "762:  if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "763:  {",
      "769:  }",
      "771:  PayloadBufferOffset = Stream_GetPosition(s);",
      "791:  if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <",
      "798:  if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <",
      "805:  if (message->NtChallengeResponse.Len > 0)",
      "806:  {",
      "807:   size_t cbAvFlags;",
      "808:   wStream* snt =",
      "809:       Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
      "811:   if (!snt)",
      "824:   Stream_Free(snt, FALSE);",
      "825:   context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;",
      "826:   context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;",
      "827:   sspi_SecBufferFree(&(context->ChallengeTargetInfo));",
      "",
      "[Removed Lines]",
      "701:  {",
      "702:   Stream_Free(s, FALSE);",
      "703:   return SEC_E_INVALID_TOKEN;",
      "704:  }",
      "707:  {",
      "708:   Stream_Free(s, FALSE);",
      "709:   return SEC_E_INVALID_TOKEN;",
      "710:  }",
      "714:  {",
      "715:   Stream_Free(s, FALSE);",
      "716:   return SEC_E_INVALID_TOKEN;",
      "717:  }",
      "721:  {",
      "722:   Stream_Free(s, FALSE);",
      "723:   return SEC_E_INVALID_TOKEN;",
      "724:  }",
      "727:  {",
      "728:   Stream_Free(s, FALSE);",
      "729:   return SEC_E_INVALID_TOKEN;",
      "730:  }",
      "733:  {",
      "734:   Stream_Free(s, FALSE);",
      "735:   return SEC_E_INVALID_TOKEN;",
      "736:  }",
      "739:  {",
      "740:   Stream_Free(s, FALSE);",
      "741:   return SEC_E_INVALID_TOKEN;",
      "742:  }",
      "746:  {",
      "747:   Stream_Free(s, FALSE);",
      "748:   return SEC_E_INVALID_TOKEN;",
      "749:  }",
      "757:  {",
      "758:   Stream_Free(s, FALSE);",
      "759:   return SEC_E_INVALID_TOKEN;",
      "760:  }",
      "765:   {",
      "766:    Stream_Free(s, FALSE);",
      "767:    return SEC_E_INVALID_TOKEN;",
      "768:   }",
      "774:  {",
      "775:   Stream_Free(s, FALSE);",
      "776:   return SEC_E_INTERNAL_ERROR;",
      "777:  }",
      "780:  {",
      "781:   Stream_Free(s, FALSE);",
      "782:   return SEC_E_INTERNAL_ERROR;",
      "783:  }",
      "786:  {",
      "787:   Stream_Free(s, FALSE);",
      "788:   return SEC_E_INTERNAL_ERROR;",
      "789:  }",
      "793:  {",
      "794:   Stream_Free(s, FALSE);",
      "795:   return SEC_E_INTERNAL_ERROR;",
      "796:  }",
      "800:  {",
      "801:   Stream_Free(s, FALSE);",
      "802:   return SEC_E_INTERNAL_ERROR;",
      "803:  }",
      "812:   {",
      "813:    Stream_Free(s, FALSE);",
      "814:    return SEC_E_INTERNAL_ERROR;",
      "815:   }",
      "817:   if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)",
      "818:   {",
      "819:    Stream_Free(s, FALSE);",
      "820:    Stream_Free(snt, FALSE);",
      "821:    return SEC_E_INVALID_TOKEN;",
      "822:   }",
      "",
      "[Added Lines]",
      "701:   goto fail;",
      "704:   goto fail;",
      "708:   goto fail;",
      "712:   goto fail;",
      "715:   goto fail;",
      "718:   goto fail;",
      "721:   goto fail;",
      "725:   goto fail;",
      "727:  if (Stream_GetRemainingLength(s) < 4)",
      "728:   goto fail;",
      "735:   goto fail;",
      "740:    goto fail;",
      "745:  status = SEC_E_INTERNAL_ERROR;",
      "747:   goto fail;",
      "750:   goto fail;",
      "753:   goto fail;",
      "757:   goto fail;",
      "761:   goto fail;",
      "765:   int rc;",
      "771:    goto fail;",
      "773:   status = SEC_E_INVALID_TOKEN;",
      "774:   rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));",
      "776:   if (rc < 0)",
      "777:    goto fail;",
      "778:   status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "839:  if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <",
      "846:  if (message->EncryptedRandomSessionKey.Len > 0)",
      "847:  {",
      "848:   if (message->EncryptedRandomSessionKey.Len != 16)",
      "854:   CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,",
      "855:              16);",
      "",
      "[Removed Lines]",
      "841:  {",
      "842:   Stream_Free(s, FALSE);",
      "843:   return SEC_E_INTERNAL_ERROR;",
      "844:  }",
      "849:   {",
      "850:    Stream_Free(s, FALSE);",
      "851:    return SEC_E_INVALID_TOKEN;",
      "852:   }",
      "",
      "[Added Lines]",
      "796:   goto fail;",
      "801:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "858:  length = Stream_GetPosition(s);",
      "860:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
      "866:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
      "867:  buffer->cbBuffer = length;",
      "",
      "[Removed Lines]",
      "861:  {",
      "862:   Stream_Free(s, FALSE);",
      "863:   return SEC_E_INTERNAL_ERROR;",
      "864:  }",
      "",
      "[Added Lines]",
      "810:   goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "871:  {",
      "872:   context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);",
      "874:   if (Stream_GetRemainingLength(s) < 16)",
      "880:   Stream_Read(s, message->MessageIntegrityCheck, 16);",
      "881:  }",
      "883: #ifdef WITH_DEBUG_NTLM",
      "884:  WLog_DBG(TAG, \"AUTHENTICATE_MESSAGE (length = %\" PRIu32 \")\",",
      "885:           context->AuthenticateMessage.cbBuffer);",
      "",
      "[Removed Lines]",
      "875:   {",
      "876:    Stream_Free(s, FALSE);",
      "877:    return SEC_E_INVALID_TOKEN;",
      "878:   }",
      "",
      "[Added Lines]",
      "820:   status = SEC_E_INVALID_TOKEN;",
      "822:    goto fail;",
      "827:  status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:   credentials->identity.User = (UINT16*)malloc(message->UserName.Len);",
      "913:   if (!credentials->identity.User)",
      "919:   CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);",
      "920:   credentials->identity.UserLength = message->UserName.Len / 2;",
      "",
      "[Removed Lines]",
      "914:   {",
      "915:    Stream_Free(s, FALSE);",
      "916:    return SEC_E_INTERNAL_ERROR;",
      "917:   }",
      "",
      "[Added Lines]",
      "860:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "925:   credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);",
      "927:   if (!credentials->identity.Domain)",
      "933:   CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,",
      "934:              message->DomainName.Len);",
      "",
      "[Removed Lines]",
      "928:   {",
      "929:    Stream_Free(s, FALSE);",
      "930:    return SEC_E_INTERNAL_ERROR;",
      "931:   }",
      "",
      "[Added Lines]",
      "871:    goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "940:  context->state = NTLM_STATE_COMPLETION;",
      "941:  return SEC_I_COMPLETE_NEEDED;",
      "942: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "883: fail:",
      "884:  Stream_Free(s, FALSE);",
      "885:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
      "candidate_info": {
        "commit_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed wrong error return from drdynvc_write_data\n\nWhen the channel was closed a wrong error code was returned.",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
      "candidate_info": {
        "commit_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "files": [
          "channels/cliprdr/server/cliprdr_main.c"
        ],
        "message": "Fixed cliprdr_server_receive_capabilities\n\nThanks to hac425 CVE-2020-11017, CVE-2020-11018",
        "before_after_code_files": [
          "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c": [
          "File: channels/cliprdr/server/cliprdr_main.c -> channels/cliprdr/server/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: static UINT cliprdr_server_receive_general_capability(CliprdrServerContext* context, wStream* s,",
          "433:                                                       CLIPRDR_GENERAL_CAPABILITY_SET* cap_set)",
          "434: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (Stream_GetRemainingLength(s) < 8)",
          "436:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:  UINT16 index;",
          "465:  UINT16 capabilitySetType;",
          "466:  UINT16 capabilitySetLength;",
          "468:  size_t cap_sets_size = 0;",
          "470:  CLIPRDR_CAPABILITY_SET* capSet;",
          "473:  WINPR_UNUSED(header);",
          "478:  WLog_DBG(TAG, \"CliprdrClientCapabilities\");",
          "482:  for (index = 0; index < capabilities.cCapabilitiesSets; index++)",
          "483:  {",
          "487:   cap_sets_size += capabilitySetLength;",
          "490:   if (tmp == NULL)",
          "491:   {",
          "492:    WLog_ERR(TAG, \"capabilities.capabilitySets realloc failed!\");",
          "",
          "[Removed Lines]",
          "467:  UINT error = CHANNEL_RC_OK;",
          "469:  CLIPRDR_CAPABILITIES capabilities;",
          "471:  void* tmp;",
          "476:  capabilities.capabilitySets = NULL;",
          "489:   tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "[Added Lines]",
          "470:  UINT error = ERROR_INVALID_DATA;",
          "472:  CLIPRDR_CAPABILITIES capabilities = { 0 };",
          "479:  if (Stream_GetRemainingLength(s) < 4)",
          "480:   return ERROR_INVALID_DATA;",
          "487:   void* tmp = NULL;",
          "488:   if (Stream_GetRemainingLength(s) < 4)",
          "489:    goto out;",
          "495:   if (cap_sets_size > 0)",
          "496:    tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:   switch (capSet->capabilitySetType)",
          "505:   {",
          "506:    case CB_CAPSTYPE_GENERAL:",
          "509:     {",
          "510:      WLog_ERR(TAG,",
          "511:               \"cliprdr_server_receive_general_capability failed with error %\" PRIu32",
          "",
          "[Removed Lines]",
          "507:     if ((error = cliprdr_server_receive_general_capability(",
          "508:              context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet)))",
          "",
          "[Added Lines]",
          "514:     error = cliprdr_server_receive_general_capability(",
          "515:         context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet);",
          "516:     if (error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "518:    default:",
          "519:     WLog_ERR(TAG, \"unknown cliprdr capability set: %\" PRIu16 \"\",",
          "520:              capSet->capabilitySetType);",
          "522:     goto out;",
          "523:   }",
          "524:  }",
          "526:  IFCALLRET(context->ClientCapabilities, error, context, &capabilities);",
          "527: out:",
          "528:  free(capabilities.capabilitySets);",
          "",
          "[Removed Lines]",
          "521:     error = ERROR_INVALID_DATA;",
          "",
          "[Added Lines]",
          "533:  error = CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37344f443e06113a2f83ad04b4499da2371b5c58",
      "candidate_info": {
        "commit_hash": "37344f443e06113a2f83ad04b4499da2371b5c58",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/37344f443e06113a2f83ad04b4499da2371b5c58",
        "files": [
          "client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle"
        ],
        "message": "Increased android client build number to 100\n\nWe need to be able to release a few 2.0 builds before this master\nbuild will be ready.",
        "before_after_code_files": [
          "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle": [
          "File: client/Android/Studio/aFreeRDP/build.gradle -> client/Android/Studio/aFreeRDP/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         minSdkVersion 21",
          "10:         targetSdkVersion 28",
          "11:         vectorDrawables.useSupportLibrary = true",
          "13:         versionName = rootProject.ext.versionName",
          "14:     }",
          "",
          "[Removed Lines]",
          "12:         versionCode = 15",
          "",
          "[Added Lines]",
          "12:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "33:     println '----------------- Project configuration -------------------'",
          "34:     println 'VERSION_NAME:       ' + versionName",
          "35:     println 'RELEASE_STORE_FILE: '+ RELEASE_STORE_FILE",
          "36:     println 'RELEASE_KEY_ALIAS:  '+ RELEASE_KEY_ALIAS",
          "37:     println '-----------------------------------------------------------'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 100)",
          "36:     println 'VERSION_CODE:       ' + versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle": [
          "File: client/Android/Studio/freeRDPCore/build.gradle -> client/Android/Studio/freeRDPCore/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:         minSdkVersion 21",
          "9:         targetSdkVersion 28",
          "10:         vectorDrawables.useSupportLibrary = true",
          "12:         versionName = rootProject.ext.versionName",
          "13:     }",
          "",
          "[Removed Lines]",
          "11:         versionCode = 15",
          "",
          "[Added Lines]",
          "11:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
      "candidate_info": {
        "commit_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "files": [
          "libfreerdp/codec/progressive.c"
        ],
        "message": "Fixed possible int overflow.",
        "before_after_code_files": [
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:                                                       UINT16 blockType, UINT32 blockLen,",
          "1921:                                                       PROGRESSIVE_BLOCK_REGION* region)",
          "1922: {",
          "1925:  memset(region, 0, sizeof(PROGRESSIVE_BLOCK_REGION));",
          "1926:  if (Stream_GetRemainingLength(s) < 12)",
          "",
          "[Removed Lines]",
          "1923:  size_t offset, len;",
          "",
          "[Added Lines]",
          "1923:  size_t len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1965:  }",
          "1967:  len = Stream_GetRemainingLength(s);",
          "1970:  {",
          "1971:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->rects\");",
          "1972:   return -1015;",
          "1973:  }",
          "1977:  {",
          "1978:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->cQuant\");",
          "1979:   return -1018;",
          "1980:  }",
          "1984:  {",
          "1985:   WLog_Print(progressive->log, WLOG_ERROR,",
          "1986:              \"ProgressiveRegion data short for region->cProgQuant\");",
          "1987:   return -1021;",
          "1988:  }",
          "1992:  {",
          "1993:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->tiles\");",
          "1994:   return -1024;",
          "1995:  }",
          "1997:  return 0;",
          "1998: }",
          "",
          "[Removed Lines]",
          "1968:  offset = (region->numRects * 8);",
          "1969:  if (len < offset)",
          "1975:  offset += (region->numQuant * 5);",
          "1976:  if (len < offset)",
          "1982:  offset += (region->numProgQuant * 16);",
          "1983:  if (len < offset)",
          "1990:  offset += region->tileDataSize;",
          "1991:  if (len < offset)",
          "",
          "[Added Lines]",
          "1968:  if (len / 8 < region->numRects)",
          "1973:  len -= region->numRects * 8ULL;",
          "1975:  if (len / 5 < region->numQuant)",
          "1980:  len -= region->numQuant * 5ULL;",
          "1982:  if (len / 16 < region->numProgQuant)",
          "1988:  len -= region->numProgQuant * 16ULL;",
          "1990:  if (len < region->tileDataSize)",
          "1995:  len -= region->tileDataSize;",
          "1996:  if (len > 0)",
          "1997:   WLog_Print(progressive->log, WLOG_DEBUG,",
          "1998:              \"Unused byes detected, %\" PRIuz \" bytes not processed\", len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbee45aace1bb4fd485633224db5433443a201fe",
      "candidate_info": {
        "commit_hash": "cbee45aace1bb4fd485633224db5433443a201fe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cbee45aace1bb4fd485633224db5433443a201fe",
        "files": [
          "channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c"
        ],
        "message": "Fixed clipboard 'called with invalid type' warning",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m||client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c": [
          "File: channels/cliprdr/client/cliprdr_format.c -> channels/cliprdr/client/cliprdr_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: UINT cliprdr_process_format_list(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "44:                                  UINT16 msgFlags)",
          "45: {",
          "47:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "48:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: UINT cliprdr_process_format_list_response(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "83:                                           UINT16 msgFlags)",
          "84: {",
          "86:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "87:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse;",
          "",
          "[Added Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse = { 0 };",
          "",
          "---------------"
        ],
        "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c": [
          "File: client/Android/android_cliprdr.c -> client/Android/android_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  formatList.msgFlags = CB_RESPONSE_OK;",
          "82:  formatList.numFormats = numFormats;",
          "83:  formatList.formats = formats;",
          "85:  if (!afc->cliprdr->ClientFormatList)",
          "86:   goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Mac/Clipboard.m||client/Mac/Clipboard.m": [
          "File: client/Mac/Clipboard.m -> client/Mac/Clipboard.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  UINT32 *pFormatIds;",
          "29:  const char *formatName;",
          "30:  CLIPRDR_FORMAT *formats;",
          "32:  mfContext *mfc = (mfContext *)cliprdr->custom;",
          "34:  ZeroMemory(&formatList, sizeof(CLIPRDR_FORMAT_LIST));",
          "",
          "[Removed Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  formatList.msgFlags = CB_RESPONSE_OK;",
          "57:  formatList.numFormats = numFormats;",
          "58:  formatList.formats = formats;",
          "60:  mfc->cliprdr->ClientFormatList(mfc->cliprdr, &formatList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c": [
          "File: client/Wayland/wlf_cliprdr.c -> client/Wayland/wlf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:  formatList.msgFlags = CB_RESPONSE_OK;",
          "175:  formatList.numFormats = (UINT32)clipboard->numClientFormats;",
          "176:  formatList.formats = clipboard->clientFormats;",
          "177:  return clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c": [
          "File: client/Windows/wf_cliprdr.c -> client/Windows/wf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235:  UINT32 formatId = 0;",
          "1236:  char formatName[1024];",
          "1237:  CLIPRDR_FORMAT* formats = NULL;",
          "1240:  if (!clipboard)",
          "1241:   return ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288:  formatList.numFormats = numFormats;",
          "1289:  formatList.formats = formats;",
          "1290:  rc = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1292:  for (index = 0; index < numFormats; index++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c": [
          "File: client/X11/xf_cliprdr.c -> client/X11/xf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:  formatList.msgFlags = CB_RESPONSE_OK;",
          "534:  formatList.numFormats = numFormats;",
          "535:  formatList.formats = formats;",
          "536:  clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "537:  xf_cliprdr_free_formats(formats, numFormats);",
          "538: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:  formatList.msgFlags = CB_RESPONSE_OK;",
          "1101:  formatList.numFormats = numFormats;",
          "1102:  formatList.formats = formats;",
          "1103:  ret = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1104:  free(formats);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c": [
          "File: server/proxy/pf_cliprdr.c -> server/proxy/pf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:  if (pdata->config->TextOnly)",
          "296:  {",
          "298:   pf_cliprdr_create_text_only_format_list(&list);",
          "299:   return server->ServerFormatList(server, &list);",
          "300:  }",
          "",
          "[Removed Lines]",
          "297:   CLIPRDR_FORMAT_LIST list;",
          "",
          "[Added Lines]",
          "297:   CLIPRDR_FORMAT_LIST list = { 0 };",
          "",
          "---------------"
        ]
      }
    }
  ]
}