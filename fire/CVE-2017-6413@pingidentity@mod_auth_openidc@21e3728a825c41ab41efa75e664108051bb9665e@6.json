{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a187019cba247173b22d02b37de4d77a91580d46",
      "candidate_info": {
        "commit_hash": "a187019cba247173b22d02b37de4d77a91580d46",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/a187019cba247173b22d02b37de4d77a91580d46",
        "files": [
          "configure.ac",
          "src/util.c"
        ],
        "message": "safeguard oidc_util_request_matches_url to avoid crashes\n\non incomplete setups and/or oidc_content_handler requests\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "980: apr_byte_t oidc_util_request_matches_url(request_rec *r, const char *url) {",
          "981:  apr_uri_t uri;",
          "982:  memset(&uri, 0, sizeof(apr_uri_t));",
          "984:  oidc_debug(r, \"comparing \\\"%s\\\"==\\\"%s\\\"\", r->parsed_uri.path, uri.path);",
          "985:  if ((r->parsed_uri.path == NULL) || (uri.path == NULL))",
          "986:   return (r->parsed_uri.path == uri.path);",
          "",
          "[Removed Lines]",
          "983:  apr_uri_parse(r->pool, url, &uri);",
          "",
          "[Added Lines]",
          "983:  if ((url == NULL) || (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS))",
          "984:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e86b15d91337696e13cfdeea059485d57d7511a",
      "candidate_info": {
        "commit_hash": "7e86b15d91337696e13cfdeea059485d57d7511a",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/7e86b15d91337696e13cfdeea059485d57d7511a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c"
        ],
        "message": "2.3.2rc2: don't abort when mutex operations fail\n\nalso printout textual descriptions of errors returned by mutex\noperations\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  return ctx;",
          "83: }",
          "85: apr_byte_t oidc_cache_mutex_post_config(server_rec *s, oidc_cache_mutex_t *m,",
          "86:   const char *type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #define OIDC_CACHE_ERROR_STR_MAX 255",
          "90: char *oidc_cache_status2str(apr_status_t statcode) {",
          "91:  char buf[OIDC_CACHE_ERROR_STR_MAX];",
          "92:  return apr_strerror(statcode, buf, OIDC_CACHE_ERROR_STR_MAX);",
          "93: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:    APR_LOCK_DEFAULT, s->process->pool);",
          "100:  if (rv != APR_SUCCESS) {",
          "101:   oidc_serror(s,",
          "104:   return FALSE;",
          "105:  }",
          "",
          "[Removed Lines]",
          "102:     \"apr_global_mutex_create failed to create mutex on file %s\",",
          "103:     m->mutex_filename);",
          "",
          "[Added Lines]",
          "112:     \"apr_global_mutex_create failed to create mutex on file %s: %s (%d)\",",
          "113:     m->mutex_filename, oidc_cache_status2str(rv), rv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113: #endif",
          "114:  if (rv != APR_SUCCESS) {",
          "115:   oidc_serror(s,",
          "117:   return FALSE;",
          "118:  }",
          "119: #endif",
          "",
          "[Removed Lines]",
          "116:     \"unixd_set_global_mutex_perms failed; could not set permissions \");",
          "",
          "[Added Lines]",
          "126:     \"unixd_set_global_mutex_perms failed; could not set permissions: %s (%d)\",",
          "127:     oidc_cache_status2str(rv), rv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:  if (rv != APR_SUCCESS) {",
          "135:   oidc_serror(s,",
          "138:  }",
          "140:  return rv;",
          "",
          "[Removed Lines]",
          "136:     \"apr_global_mutex_child_init failed to reopen mutex on file %s\",",
          "137:     m->mutex_filename);",
          "",
          "[Added Lines]",
          "147:     \"apr_global_mutex_child_init failed to reopen mutex on file %s: %s (%d)\",",
          "148:     m->mutex_filename, oidc_cache_status2str(rv), rv);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:  apr_status_t rv = apr_global_mutex_lock(m->mutex);",
          "155:  return TRUE;",
          "156: }",
          "",
          "[Removed Lines]",
          "150:  if (rv != APR_SUCCESS) {",
          "151:   oidc_error(r, \"apr_global_mutex_lock() failed [%d]\", rv);",
          "152:   return FALSE;",
          "153:  }",
          "",
          "[Added Lines]",
          "161:  if (rv != APR_SUCCESS)",
          "162:   oidc_error(r, \"apr_global_mutex_lock() failed: %s (%d)\",",
          "163:     oidc_cache_status2str(rv), rv);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:  apr_status_t rv = apr_global_mutex_unlock(m->mutex);",
          "170:  return TRUE;",
          "171: }",
          "",
          "[Removed Lines]",
          "165:  if (rv != APR_SUCCESS) {",
          "166:   oidc_error(r, \"apr_global_mutex_unlock() failed [%d]\", rv);",
          "167:   return FALSE;",
          "168:  }",
          "",
          "[Added Lines]",
          "175:  if (rv != APR_SUCCESS)",
          "176:   oidc_error(r, \"apr_global_mutex_unlock() failed: %s (%d)\",",
          "177:     oidc_cache_status2str(rv), rv);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:  if (m->mutex != NULL) {",
          "181:   rv = apr_global_mutex_destroy(m->mutex);",
          "185:   m->mutex = NULL;",
          "186:  }",
          "",
          "[Removed Lines]",
          "182:   if (rv != APR_SUCCESS) {",
          "183:    oidc_swarn(s, \"apr_global_mutex_destroy failed: [%d]\", rv);",
          "184:   }",
          "",
          "[Added Lines]",
          "191:   if (rv != APR_SUCCESS)",
          "192:    oidc_swarn(s, \"apr_global_mutex_destroy failed: %s (%d)\",",
          "193:      oidc_cache_status2str(rv), rv);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c41226419503aa475d51982bed8ffacf5d7e9ba1",
      "candidate_info": {
        "commit_hash": "c41226419503aa475d51982bed8ffacf5d7e9ba1",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/c41226419503aa475d51982bed8ffacf5d7e9ba1",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "avoid cleaning our own state cookie twice when it is expired\n\nbump to 2.3.0rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:  return TRUE;",
          "673: }",
          "676:  char *cookie, *tokenizerCtx;",
          "677:  char *cookies = apr_pstrdup(r->pool, oidc_util_hdr_in_cookie_get(r));",
          "678:  if (cookies != NULL) {",
          "679:   cookie = apr_strtok(cookies, OIDC_STR_SEMI_COLON, &tokenizerCtx);",
          "682:     cookie++;",
          "683:    if (strstr(cookie, OIDCStateCookiePrefix) == cookie) {",
          "684:     char *cookieName = cookie;",
          "",
          "[Removed Lines]",
          "675: static void oidc_clean_expired_state_cookies(request_rec *r, oidc_cfg *c) {",
          "680:   do {",
          "681:    while (cookie != NULL && *cookie == OIDC_CHAR_SPACE)",
          "",
          "[Added Lines]",
          "675: static void oidc_clean_expired_state_cookies(request_rec *r, oidc_cfg *c, const char *currentCookieName) {",
          "680:   while (cookie != NULL) {",
          "681:    while (*cookie == OIDC_CHAR_SPACE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "687:     if (*cookie == OIDC_CHAR_EQUAL) {",
          "689:      cookie++;",
          "698:       }",
          "700:      }",
          "701:     }",
          "702:    }",
          "703:    cookie = apr_strtok(NULL, OIDC_STR_SEMI_COLON, &tokenizerCtx);",
          "705:  }",
          "706: }",
          "",
          "[Removed Lines]",
          "690:      oidc_proto_state_t *proto_state =",
          "691:        oidc_proto_state_from_cookie(r, c, cookie);",
          "692:      if (proto_state != NULL) {",
          "693:       json_int_t ts = oidc_proto_state_get_timestamp(",
          "694:         proto_state);",
          "695:       if (apr_time_now() > ts + apr_time_from_sec(c->state_timeout)) {",
          "696:        oidc_error(r, \"state has expired\");",
          "697:        oidc_util_set_cookie(r, cookieName, \"\", 0, NULL);",
          "699:       oidc_proto_state_destroy(proto_state);",
          "704:   } while (cookie != NULL);",
          "",
          "[Added Lines]",
          "690:      if ((currentCookieName == NULL) || (apr_strnatcmp(cookieName, currentCookieName) != 0)) {",
          "691:       oidc_proto_state_t *proto_state =",
          "692:         oidc_proto_state_from_cookie(r, c, cookie);",
          "693:       if (proto_state != NULL) {",
          "694:        json_int_t ts = oidc_proto_state_get_timestamp(",
          "695:          proto_state);",
          "696:        if (apr_time_now() > ts + apr_time_from_sec(c->state_timeout)) {",
          "697:         oidc_error(r, \"state (%s) has expired\", cookieName);",
          "698:         oidc_util_set_cookie(r, cookieName, \"\", 0, NULL);",
          "699:        }",
          "700:        oidc_proto_state_destroy(proto_state);",
          "706:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:  oidc_debug(r, \"enter\");",
          "719:  const char *cookieName = oidc_get_state_cookie_name(r, state);",
          "722:  char *cookieValue = oidc_util_get_cookie(r, cookieName);",
          "723:  if (cookieValue == NULL) {",
          "",
          "[Removed Lines]",
          "717:  oidc_clean_expired_state_cookies(r, c);",
          "",
          "[Added Lines]",
          "721:  oidc_clean_expired_state_cookies(r, c, cookieName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "787:   return FALSE;",
          "793:  const char *cookieName = oidc_get_state_cookie_name(r, state);",
          "",
          "[Removed Lines]",
          "790:  oidc_clean_expired_state_cookies(r, c);",
          "",
          "[Added Lines]",
          "792:  oidc_clean_expired_state_cookies(r, c, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f93932c11fe3063b042839b632e5a3b46ad00dd",
      "candidate_info": {
        "commit_hash": "5f93932c11fe3063b042839b632e5a3b46ad00dd",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/5f93932c11fe3063b042839b632e5a3b46ad00dd",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac"
        ],
        "message": "document #327; bump to 2.3.4rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c64e85e5c4644b36106f4c7178d3e00b06ab5775",
      "candidate_info": {
        "commit_hash": "c64e85e5c4644b36106f4c7178d3e00b06ab5775",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/c64e85e5c4644b36106f4c7178d3e00b06ab5775",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c",
          "src/util.c"
        ],
        "message": "support private_key_jwt & client_secret_jwt for introspection\n\nadd private_key_jwt and client_secret_jwt as options to authenticate a\nclient to the token introspection endpoint and bump to 2.3.1rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: # When not defined the default method from the specification is used, i.e. \"client_secret_basic\".",
          "71: # Used when OIDCProviderMetadataURL is not defined or the metadata obtained from that URL does not set it.",
          "72: # NB: this can be overridden for dynamic client registration on a per-OP basis in the .conf file using the key: token_endpoint_auth",
          "75: # Extra parameters that need to be passed in the POST request to the Token Endpoint.",
          "76: # Parameter names and values need to be provided in URL-encoded form.",
          "",
          "[Removed Lines]",
          "73: #OIDCProviderTokenEndpointAuth [client_secret_basic|client_secret_post|client_secret_jwt|private_key_jwt]",
          "",
          "[Added Lines]",
          "73: #OIDCProviderTokenEndpointAuth [ client_secret_basic | client_secret_post | client_secret_jwt | private_key_jwt]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275: #OIDCOAuthClientSecret <client_secret>",
          "277: # Authentication method for the OAuth 2.0 Authorization Server introspection endpoint,",
          "282: # Filename that contains the PEM-formatted client certificate used to authenticate the",
          "283: # caller in token introspection calls to the OAuth 2.0 Authorization server.",
          "",
          "[Removed Lines]",
          "278: # used to provide client_id/client_secret when OIDCOAuthClientID and OIDCOAuthClientSecret have been set.",
          "279: # Must be either \"client_secret_basic\" or \"client_secret_post; when not defined \"client_secret_basic\" is used.",
          "280: #OIDCOAuthIntrospectionEndpointAuth [client_secret_basic|client_secret_post]",
          "",
          "[Added Lines]",
          "278: # Used to authenticate the client to the introspection endpoint e.g. with a client_id/client_secret",
          "279: # when OIDCOAuthClientID and OIDCOAuthClientSecret have been set and \"client_secret_basic\" or \"client_secret_post\"",
          "280: # has been configured.",
          "281: # When \"private_key_jwt\" is used, OIDCPrivateKeyFiles and OIDCPublicKeyFiles must have been set.",
          "282: # When not defined \"client_secret_basic\" is used.",
          "283: #OIDCOAuthIntrospectionEndpointAuth [ client_secret_basic | client_secret_post | client_secret_jwt | private_key_jwt]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "568: void oidc_proto_state_set_pkce_state(oidc_proto_state_t *proto_state, const char *pkce_state);",
          "569: void oidc_proto_state_set_timestamp_now(oidc_proto_state_t *proto_state);",
          "571: char *oidc_proto_peek_jwt_header(request_rec *r, const char *jwt, char **alg);",
          "572: int oidc_proto_authorization_request(request_rec *r, struct oidc_provider_t *provider, const char *login_hint, const char *redirect_uri, const char *state, oidc_proto_state_t *proto_state, const char *id_token_hint, const char *code_challenge, const char *auth_request_params, const char *path_scope);",
          "573: apr_byte_t oidc_proto_is_post_authorization_response(request_rec *r, oidc_cfg *cfg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg, const char *token_endpoint_auth, const char *client_id, const char *client_secret, const char *audience, apr_table_t *params, char **basic_auth_str);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: static apr_byte_t oidc_oauth_validate_access_token(request_rec *r, oidc_cfg *c,",
          "65:   const char *token, char **response) {",
          "68:  apr_table_t *params = apr_table_make(r->pool, 4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:  char *basic_auth = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  apr_table_addn(params, c->oauth.introspection_token_param_name, token);",
          "93:  return apr_strnatcmp(c->oauth.introspection_endpoint_method,",
          "",
          "[Removed Lines]",
          "78:  const char *basic_auth = NULL;",
          "79:  if ((c->oauth.client_id != NULL) && (c->oauth.client_secret != NULL)) {",
          "80:   if ((c->oauth.introspection_endpoint_auth != NULL)",
          "81:     && (apr_strnatcmp(c->oauth.introspection_endpoint_auth,",
          "82:       OIDC_PROTO_CLIENT_SECRET_POST) == 0)) {",
          "83:    apr_table_addn(params, OIDC_PROTO_CLIENT_ID, c->oauth.client_id);",
          "84:    apr_table_addn(params, OIDC_PROTO_CLIENT_SECRET,",
          "85:      c->oauth.client_secret);",
          "86:   } else {",
          "87:    basic_auth = apr_psprintf(r->pool, \"%s:%s\", c->oauth.client_id,",
          "88:      c->oauth.client_secret);",
          "89:   }",
          "90:  }",
          "",
          "[Added Lines]",
          "80:  if (oidc_proto_token_endpoint_auth(r, c,",
          "81:    c->oauth.introspection_endpoint_auth, c->oauth.client_id,",
          "82:    c->oauth.client_secret, c->oauth.introspection_endpoint_url, params,",
          "83:    &basic_auth) == FALSE)",
          "84:   return FALSE;",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602: static apr_byte_t oidc_proto_endpoint_auth_none(request_rec *r,",
          "1604:  oidc_debug(r,",
          "1605:    \"no client secret is configured; calling the token endpoint without client authentication; only public clients are supported\");",
          "1607:  return TRUE;",
          "1608: }",
          "",
          "[Removed Lines]",
          "1603:   oidc_provider_t *provider, apr_table_t *params) {",
          "1606:  apr_table_addn(params, OIDC_PROTO_CLIENT_ID, provider->client_id);",
          "",
          "[Added Lines]",
          "1603:   const char *client_id, apr_table_t *params) {",
          "1606:  apr_table_addn(params, OIDC_PROTO_CLIENT_ID, client_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1613: static apr_byte_t oidc_proto_endpoint_auth_basic(request_rec *r,",
          "1616:   oidc_error(r, \"no client secret is configured\");",
          "1617:   return FALSE;",
          "1618:  }",
          "1621:  return TRUE;",
          "1622: }",
          "",
          "[Removed Lines]",
          "1614:   oidc_provider_t *provider, char **basic_auth_str) {",
          "1615:  if (provider->client_secret == NULL) {",
          "1620:    provider->client_secret);",
          "",
          "[Added Lines]",
          "1614:   const char *client_id, const char *client_secret, char **basic_auth_str) {",
          "1615:  oidc_debug(r, \"enter\");",
          "1616:  if (client_secret == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1627: static apr_byte_t oidc_proto_endpoint_auth_post(request_rec *r,",
          "1630:   oidc_error(r, \"no client secret is configured\");",
          "1631:   return FALSE;",
          "1632:  }",
          "1635:  return TRUE;",
          "1636: }",
          "",
          "[Removed Lines]",
          "1628:   oidc_provider_t *provider, apr_table_t *params) {",
          "1629:  if (provider->client_secret == NULL) {",
          "1633:  apr_table_addn(params, OIDC_PROTO_CLIENT_ID, provider->client_id);",
          "1634:  apr_table_addn(params, OIDC_PROTO_CLIENT_SECRET, provider->client_secret);",
          "",
          "[Added Lines]",
          "1628:   const char *client_id, const char *client_secret, apr_table_t *params) {",
          "1629:  oidc_debug(r, \"enter\");",
          "1630:  if (client_secret == NULL) {",
          "1634:  apr_table_addn(params, OIDC_PROTO_CLIENT_ID, client_id);",
          "1635:  apr_table_addn(params, OIDC_PROTO_CLIENT_SECRET, client_secret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1647:  oidc_jwt_t *jwt = *out;",
          "",
          "[Removed Lines]",
          "1643: static apr_byte_t oidc_proto_jwt_create(request_rec *r,",
          "1644:   oidc_provider_t *provider, oidc_jwt_t **out) {",
          "",
          "[Added Lines]",
          "1644: static apr_byte_t oidc_proto_jwt_create(request_rec *r, const char *client_id,",
          "1645:   const char *audience, oidc_jwt_t **out) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1650:  oidc_proto_generate_random_string(r, &jti, OIDC_PROTO_ASSERTION_JTI_LEN);",
          "1652:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_ISS,",
          "1654:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_SUB,",
          "1656:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_AUD,",
          "1658:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_JTI,",
          "1659:    json_string(jti));",
          "1660:  json_object_set_new(jwt->payload.value.json, OIDC_CLAIM_EXP,",
          "",
          "[Removed Lines]",
          "1653:    json_string(provider->client_id));",
          "1655:    json_string(provider->client_id));",
          "1657:    json_string(provider->token_endpoint_url));",
          "",
          "[Added Lines]",
          "1654:    json_string(client_id));",
          "1656:    json_string(client_id));",
          "1658:    json_string(audience));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695: #define OIDC_PROTO_JWT_ASSERTION_SYMMETRIC_ALG CJOSE_HDR_ALG_HS256",
          "1697: static apr_byte_t oidc_proto_endpoint_auth_client_secret_jwt(request_rec *r,",
          "1700:  oidc_jwt_t *jwt = NULL;",
          "1701:  oidc_jose_error_t err;",
          "1704:   return FALSE;",
          "1706:  oidc_jwk_t *jwk = oidc_jwk_create_symmetric_key(r->pool, NULL,",
          "1709:  if (jwk == NULL) {",
          "1710:   oidc_error(r, \"parsing of client secret into JWK failed: %s\",",
          "1711:     oidc_jose_e2s(r->pool, err));",
          "",
          "[Removed Lines]",
          "1698:   oidc_provider_t *provider, apr_table_t *params) {",
          "1703:  if (oidc_proto_jwt_create(r, provider, &jwt) == FALSE)",
          "1707:    (const unsigned char *) provider->client_secret,",
          "1708:    strlen(provider->client_secret), FALSE, &err);",
          "",
          "[Added Lines]",
          "1699:   const char *client_id, const char *client_secret, const char *audience,",
          "1700:   apr_table_t *params) {",
          "1704:  oidc_debug(r, \"enter\");",
          "1706:  if (oidc_proto_jwt_create(r, client_id, audience, &jwt) == FALSE)",
          "1710:    (const unsigned char *) client_secret, strlen(client_secret), FALSE,",
          "1711:    &err);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1713:   return FALSE;",
          "1714:  }",
          "1718:  oidc_proto_jwt_sign_and_add(r, params, jwt, jwk);",
          "",
          "[Removed Lines]",
          "1716:  jwt->header.alg = apr_pstrdup(r->pool, OIDC_PROTO_JWT_ASSERTION_SYMMETRIC_ALG);",
          "",
          "[Added Lines]",
          "1719:  jwt->header.alg = apr_pstrdup(r->pool,",
          "1720:    OIDC_PROTO_JWT_ASSERTION_SYMMETRIC_ALG);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1726: #define OIDC_PROTO_JWT_ASSERTION_ASYMMETRIC_ALG CJOSE_HDR_ALG_RS256",
          "1728: static apr_byte_t oidc_proto_endpoint_auth_private_key_jwt(request_rec *r,",
          "1731:  oidc_jwt_t *jwt = NULL;",
          "1732:  oidc_jwk_t *jwk = NULL;",
          "1735:   return FALSE;",
          "1737:  if (cfg->private_keys == NULL) {",
          "",
          "[Removed Lines]",
          "1729:   oidc_cfg *cfg, oidc_provider_t *provider, apr_table_t *params) {",
          "1734:  if (oidc_proto_jwt_create(r, provider, &jwt) == FALSE)",
          "",
          "[Added Lines]",
          "1733:   oidc_cfg *cfg, const char *client_id, const char *audience,",
          "1734:   apr_table_t *params) {",
          "1738:  oidc_debug(r, \"enter\");",
          "1740:  if (oidc_proto_jwt_create(r, client_id, audience, &jwt) == FALSE)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1754:  return TRUE;",
          "1755: }",
          "1770:    OIDC_PROTO_CLIENT_SECRET_POST) == 0)",
          "1774:    OIDC_PROTO_CLIENT_SECRET_JWT) == 0)",
          "1778:    OIDC_PROTO_PRIVATE_KEY_JWT) == 0)",
          "1782:  oidc_error(r, \"uhm, shouldn't be here...\");",
          "",
          "[Removed Lines]",
          "1757: static apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg,",
          "1758:   oidc_provider_t *provider, apr_table_t *params, char **basic_auth_str) {",
          "1760:  oidc_debug(r, \"oidc_proto_token_endpoint_request: token_endpoint_auth=%s\", provider->token_endpoint_auth);",
          "1762:  if (provider->token_endpoint_auth == NULL)",
          "1763:   return oidc_proto_endpoint_auth_none(r, provider, params);",
          "1765:  if (apr_strnatcmp(provider->token_endpoint_auth,",
          "1766:    OIDC_PROTO_CLIENT_SECRET_BASIC) == 0)",
          "1767:   return oidc_proto_endpoint_auth_basic(r, provider, basic_auth_str);",
          "1769:  if (apr_strnatcmp(provider->token_endpoint_auth,",
          "1771:   return oidc_proto_endpoint_auth_post(r, provider, params);",
          "1773:  if (apr_strnatcmp(provider->token_endpoint_auth,",
          "1775:   return oidc_proto_endpoint_auth_client_secret_jwt(r, provider, params);",
          "1777:  if (apr_strnatcmp(provider->token_endpoint_auth,",
          "1779:   return oidc_proto_endpoint_auth_private_key_jwt(r, cfg, provider,",
          "1780:     params);",
          "",
          "[Added Lines]",
          "1763: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg,",
          "1764:   const char *token_endpoint_auth, const char *client_id,",
          "1765:   const char *client_secret, const char *audience, apr_table_t *params,",
          "1766:   char **basic_auth_str) {",
          "1768:  oidc_debug(r, \"token_endpoint_auth=%s\", token_endpoint_auth);",
          "1771:  if ((token_endpoint_auth == NULL) && (client_secret == NULL))",
          "1772:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "1774:  if ((token_endpoint_auth == NULL) || (apr_strnatcmp(token_endpoint_auth,",
          "1775:    OIDC_PROTO_CLIENT_SECRET_BASIC) == 0))",
          "1776:   return oidc_proto_endpoint_auth_basic(r, client_id, client_secret,",
          "1777:     basic_auth_str);",
          "1779:  if (apr_strnatcmp(token_endpoint_auth,",
          "1781:   return oidc_proto_endpoint_auth_post(r, client_id, client_secret,",
          "1782:     params);",
          "1784:  if (apr_strnatcmp(token_endpoint_auth,",
          "1786:   return oidc_proto_endpoint_auth_client_secret_jwt(r, client_id,",
          "1787:     client_secret, audience, params);",
          "1789:  if (apr_strnatcmp(token_endpoint_auth,",
          "1791:   return oidc_proto_endpoint_auth_private_key_jwt(r, cfg, client_id,",
          "1792:     audience, params);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1796:  char *basic_auth = NULL;",
          "1801:   return FALSE;",
          "",
          "[Removed Lines]",
          "1799:  if (oidc_proto_token_endpoint_auth(r, cfg, provider, params,",
          "1800:    &basic_auth) == FALSE)",
          "",
          "[Added Lines]",
          "1811:  if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "1812:    provider->client_id, provider->client_secret,",
          "1813:    provider->token_endpoint_url, params, &basic_auth) == FALSE)",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:  oidc_debug(r,",
          "572:    url, data, content_type, basic_auth, bearer_token,",
          "575:  curl = curl_easy_init();",
          "576:  if (curl == NULL) {",
          "",
          "[Removed Lines]",
          "571:    \"url=%s, data=%s, content_type=%s, basic_auth=%s, bearer_token=%s, ssl_validate_server=%d\",",
          "573:    ssl_validate_server);",
          "",
          "[Added Lines]",
          "571:    \"url=%s, data=%s, content_type=%s, basic_auth=%s, bearer_token=%s, ssl_validate_server=%d, timeout=%d, outgoing_proxy=%s, pass_cookies=%pp, ssl_cert=%s, ssl_key=%s\",",
          "573:    ssl_validate_server, timeout, outgoing_proxy, pass_cookies,",
          "574:    ssl_cert, ssl_key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}