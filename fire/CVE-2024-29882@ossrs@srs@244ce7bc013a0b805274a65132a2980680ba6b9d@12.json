{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da5683e4784f4acf0e6eee8dce91fa52a7e770b4",
      "candidate_info": {
        "commit_hash": "da5683e4784f4acf0e6eee8dce91fa52a7e770b4",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/da5683e4784f4acf0e6eee8dce91fa52a7e770b4",
        "files": [
          "trunk/auto/auto_headers.sh",
          "trunk/auto/options.sh",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/main/srs_main_server.cpp"
        ],
        "message": "Fix crash when quiting. v6.0.151 (#4157)\n\n1. Remove the srs_global_dispose, which causes the crash when still\npublishing when quit.\n2. Always call _srs_thread_pool->initialize for single thread.\n3. Support `--signal-api` to send signal by HTTP API, because CLion\neliminate the signals.\n\n---\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh",
          "trunk/auto/options.sh||trunk/auto/options.sh",
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp",
          "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh": [
          "File: trunk/auto/auto_headers.sh -> trunk/auto/auto_headers.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: else",
          "202:     srs_undefine_macro \"SRS_SINGLE_THREAD\" $SRS_AUTO_HEADERS_H",
          "203: fi",
          "204: if [[ $SRS_LOG_LEVEL_V2 == YES ]]; then",
          "205:     srs_define_macro \"SRS_LOG_LEVEL_V2\" $SRS_AUTO_HEADERS_H",
          "206: else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: if [[ $SRS_SIGNAL_API == YES ]]; then",
          "205:     srs_define_macro \"SRS_SIGNAL_API\" $SRS_AUTO_HEADERS_H",
          "206: else",
          "207:     srs_undefine_macro \"SRS_SIGNAL_API\" $SRS_AUTO_HEADERS_H",
          "208: fi",
          "",
          "---------------"
        ],
        "trunk/auto/options.sh||trunk/auto/options.sh": [
          "File: trunk/auto/options.sh -> trunk/auto/options.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: SRS_SIMULATOR=NO # Whether enable RTC simulate API.",
          "86: SRS_GENERATE_OBJS=NO # Whether generate objs and quit.",
          "87: SRS_SINGLE_THREAD=YES # Whether force single thread mode.",
          "88: #",
          "89: ################################################################",
          "90: # Performance options.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: SRS_SIGNAL_API=NO # Use http API to simulate sending signal to SRS, for debugging.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   --simulator=on|off        RTC: Whether enable network simulator. Default: $(value2switch $SRS_SIMULATOR)",
          "236:   --generate-objs=on|off    RTC: Whether generate objs and quit. Default: $(value2switch $SRS_GENERATE_OBJS)",
          "237:   --single-thread=on|off    Whether force single thread mode. Default: $(value2switch $SRS_SINGLE_THREAD)",
          "238:   --build-tag=<TAG>         Set the build object directory suffix.",
          "239:   --debug=on|off            Whether enable the debug code, may hurt performance. Default: $(value2switch $SRS_DEBUG)",
          "240:   --debug-stats=on|off      Whether enable the debug stats, may hurt performance. Default: $(value2switch $SRS_DEBUG_STATS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   --signal-api=on|off       Whether support sending signal by HTTP API. Default: $(value2switch $SRS_SIGNAL_API)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:         --simulator)                    SRS_SIMULATOR=$(switch2value $value) ;;",
          "340:         --generate-objs)                SRS_GENERATE_OBJS=$(switch2value $value) ;;",
          "341:         --single-thread)                SRS_SINGLE_THREAD=$(switch2value $value) ;;",
          "342:         --ffmpeg-fit)                   SRS_FFMPEG_FIT=$(switch2value $value) ;;",
          "343:         --ffmpeg-opus)                  SRS_FFMPEG_OPUS=$(switch2value $value) ;;",
          "344:         --h265)                         SRS_H265=$(switch2value $value) ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:         --signal-api)                   SRS_SIGNAL_API=$(switch2value $value) ;;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --sanitizer-log=$(value2switch $SRS_SANITIZER_LOG)\"",
          "682:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --cygwin64=$(value2switch $SRS_CYGWIN64)\"",
          "683:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --single-thread=$(value2switch $SRS_SINGLE_THREAD)\"",
          "684:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --generic-linux=$(value2switch $SRS_GENERIC_LINUX)\"",
          "685:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --build-cache=$(value2switch $SRS_BUILD_CACHE)\"",
          "686:     if [[ $SRS_CROSS_BUILD_ARCH != \"\" ]]; then SRS_AUTO_CONFIGURE=\"$SRS_AUTO_CONFIGURE --arch=$SRS_CROSS_BUILD_ARCH\"; fi",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --signal-api=$(value2switch $SRS_SIGNAL_API)\"",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     urls->set(\"clusters\", SrsJsonAny::str(\"origin cluster server API\"));",
          "273:     urls->set(\"perf\", SrsJsonAny::str(\"System performance stat\"));",
          "274:     urls->set(\"tcmalloc\", SrsJsonAny::str(\"tcmalloc api with params ?page=summary|api\"));",
          "275:     urls->set(\"valgrind\", SrsJsonAny::str(\"valgrind api with params ?check=full|added|changed|new|quick\"));",
          "277:     SrsJsonObject* tests = SrsJsonAny::object();",
          "278:     obj->set(\"tests\", tests);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: #ifdef SRS_VALGRIND",
          "277: #endif",
          "278: #ifdef SRS_SIGNAL_API",
          "279:     urls->set(\"signal\", SrsJsonAny::str(\"simulate signal api with params ?signo=SIGHUP|SIGUSR1|SIGUSR2|SIGTERM|SIGQUIT|SIGABRT|SIGINT\"));",
          "280: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191: }",
          "1192: #endif",
          "1194: SrsGoApiMetrics::SrsGoApiMetrics()",
          "1195: {",
          "1196:     enabled_ = _srs_config->get_exporter_enabled();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198: #ifdef SRS_SIGNAL_API",
          "1199: SrsGoApiSignal::SrsGoApiSignal()",
          "1200: {",
          "1201: }",
          "1203: SrsGoApiSignal::~SrsGoApiSignal()",
          "1204: {",
          "1205: }",
          "1207: srs_error_t SrsGoApiSignal::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "1208: {",
          "1209:     srs_error_t err = srs_success;",
          "1211:     std::string signal = r->query_get(\"signo\");",
          "1212:     srs_trace(\"query signo=%s\", signal.c_str());",
          "1214:     int signo = SIGINT;",
          "1215:     if (signal == \"SIGHUP\") {",
          "1216:         signo = SRS_SIGNAL_RELOAD;",
          "1217:     } else if (signal == \"SIGUSR1\") {",
          "1218:         signo = SRS_SIGNAL_REOPEN_LOG;",
          "1219:     } else if (signal == \"SIGUSR2\") {",
          "1220:         signo = SRS_SIGNAL_UPGRADE;",
          "1221:     } else if (signal == \"SIGTERM\") {",
          "1222:         signo = SRS_SIGNAL_FAST_QUIT;",
          "1223:     } else if (signal == \"SIGQUIT\") {",
          "1224:         signo = SRS_SIGNAL_GRACEFULLY_QUIT;",
          "1225:     } else if (signal == \"SIGABRT\") {",
          "1226:         signo = SRS_SIGNAL_ASSERT_ABORT;",
          "1227:     }",
          "1229:     _srs_hybrid->srs()->instance()->on_signal(signo);",
          "1232:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "1234:     obj->set(\"code\", SrsJsonAny::integer(ERROR_SUCCESS));",
          "1236:     SrsJsonObject* res = SrsJsonAny::object();",
          "1237:     res->set(\"signal\", SrsJsonAny::str(signal.c_str()));",
          "1238:     res->set(\"help\", SrsJsonAny::str(\"?signo=SIGHUP|SIGUSR1|SIGUSR2|SIGTERM|SIGQUIT|SIGABRT|SIGINT\"));",
          "1239:     res->set(\"signo\", SrsJsonAny::integer(signo));",
          "1240:     obj->set(\"data\", res);",
          "1242:     return srs_api_response(w, r, obj->dumps());",
          "1243: }",
          "1244: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp": [
          "File: trunk/src/app/srs_app_http_api.hpp -> trunk/src/app/srs_app_http_api.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: };",
          "234: #endif",
          "236: class SrsGoApiMetrics : public ISrsHttpHandler",
          "237: {",
          "238: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: #ifdef SRS_SIGNAL_API",
          "237: class SrsGoApiSignal : public ISrsHttpHandler",
          "238: {",
          "239: public:",
          "240:     SrsGoApiSignal();",
          "241:     virtual ~SrsGoApiSignal();",
          "242: public:",
          "243:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "244: };",
          "245: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:     }",
          "785: #endif",
          "788:     if ((err = http_api_mux->handle(\"/metrics\", new SrsGoApiMetrics())) != srs_success) {",
          "789:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787: #ifdef SRS_SIGNAL_API",
          "789:     if ((err = http_api_mux->handle(\"/api/v1/signal\", new SrsGoApiSignal())) != srs_success) {",
          "790:         return srs_error_wrap(err, \"handle signal errors\");",
          "791:     }",
          "792: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp": [
          "File: trunk/src/app/srs_app_threads.cpp -> trunk/src/app/srs_app_threads.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:     return err;",
          "456: }",
          "606: SrsThreadMutex::SrsThreadMutex()",
          "607: {",
          "",
          "[Removed Lines]",
          "458: void srs_global_dispose()",
          "459: {",
          "461:     srs_freep(_srs_hybrid);",
          "462:     srs_freep(_srs_sources);",
          "464:     srs_freep(_srs_clock);",
          "466:     srs_freep(_srs_stages);",
          "467:     srs_freep(_srs_circuit_breaker);",
          "469: #ifdef SRS_SRT",
          "470:     srs_freep(_srs_srt_sources);",
          "471: #endif",
          "473: #ifdef SRS_RTC",
          "474:     srs_freep(_srs_rtc_sources);",
          "475:     srs_freep(_srs_blackhole);",
          "476:     srs_freep(_srs_rtc_manager);",
          "477:     srs_freep(_srs_rtc_dtls_certificate);",
          "478: #endif",
          "479: #ifdef SRS_GB28181",
          "480:     srs_freep(_srs_gb_manager);",
          "481: #endif",
          "483:     srs_freep(_srs_pps_ids);",
          "484:     srs_freep(_srs_pps_fids);",
          "485:     srs_freep(_srs_pps_fids_level0);",
          "486:     srs_freep(_srs_pps_dispose);",
          "488:     srs_freep(_srs_pps_timer);",
          "489:     srs_freep(_srs_pps_conn);",
          "490:     srs_freep(_srs_pps_pub);",
          "492: #ifdef SRS_RTC",
          "493:     srs_freep(_srs_pps_snack);",
          "494:     srs_freep(_srs_pps_snack2);",
          "495:     srs_freep(_srs_pps_snack3);",
          "496:     srs_freep(_srs_pps_snack4);",
          "497:     srs_freep(_srs_pps_sanack);",
          "498:     srs_freep(_srs_pps_svnack);",
          "500:     srs_freep(_srs_pps_rnack);",
          "501:     srs_freep(_srs_pps_rnack2);",
          "502:     srs_freep(_srs_pps_rhnack);",
          "503:     srs_freep(_srs_pps_rmnack);",
          "504: #endif",
          "506: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "507:     srs_freep(_srs_pps_recvfrom);",
          "508:     srs_freep(_srs_pps_recvfrom_eagain);",
          "509:     srs_freep(_srs_pps_sendto);",
          "510:     srs_freep(_srs_pps_sendto_eagain);",
          "512:     srs_freep(_srs_pps_read);",
          "513:     srs_freep(_srs_pps_read_eagain);",
          "514:     srs_freep(_srs_pps_readv);",
          "515:     srs_freep(_srs_pps_readv_eagain);",
          "516:     srs_freep(_srs_pps_writev);",
          "517:     srs_freep(_srs_pps_writev_eagain);",
          "519:     srs_freep(_srs_pps_recvmsg);",
          "520:     srs_freep(_srs_pps_recvmsg_eagain);",
          "521:     srs_freep(_srs_pps_sendmsg);",
          "522:     srs_freep(_srs_pps_sendmsg_eagain);",
          "524:     srs_freep(_srs_pps_epoll);",
          "525:     srs_freep(_srs_pps_epoll_zero);",
          "526:     srs_freep(_srs_pps_epoll_shake);",
          "527:     srs_freep(_srs_pps_epoll_spin);",
          "529:     srs_freep(_srs_pps_sched_15ms);",
          "530:     srs_freep(_srs_pps_sched_20ms);",
          "531:     srs_freep(_srs_pps_sched_25ms);",
          "532:     srs_freep(_srs_pps_sched_30ms);",
          "533:     srs_freep(_srs_pps_sched_35ms);",
          "534:     srs_freep(_srs_pps_sched_40ms);",
          "535:     srs_freep(_srs_pps_sched_80ms);",
          "536:     srs_freep(_srs_pps_sched_160ms);",
          "537:     srs_freep(_srs_pps_sched_s);",
          "538: #endif",
          "540:     srs_freep(_srs_pps_clock_15ms);",
          "541:     srs_freep(_srs_pps_clock_20ms);",
          "542:     srs_freep(_srs_pps_clock_25ms);",
          "543:     srs_freep(_srs_pps_clock_30ms);",
          "544:     srs_freep(_srs_pps_clock_35ms);",
          "545:     srs_freep(_srs_pps_clock_40ms);",
          "546:     srs_freep(_srs_pps_clock_80ms);",
          "547:     srs_freep(_srs_pps_clock_160ms);",
          "548:     srs_freep(_srs_pps_timer_s);",
          "550: #if defined(SRS_DEBUG) && defined(SRS_DEBUG_STATS)",
          "551:     srs_freep(_srs_pps_thread_run);",
          "552:     srs_freep(_srs_pps_thread_idle);",
          "553:     srs_freep(_srs_pps_thread_yield);",
          "554:     srs_freep(_srs_pps_thread_yield2);",
          "555: #endif",
          "557:     srs_freep(_srs_pps_rpkts);",
          "558:     srs_freep(_srs_pps_addrs);",
          "559:     srs_freep(_srs_pps_fast_addrs);",
          "561:     srs_freep(_srs_pps_spkts);",
          "562:     srs_freep(_srs_pps_objs_msgs);",
          "564: #ifdef SRS_RTC",
          "565:     srs_freep(_srs_pps_sstuns);",
          "566:     srs_freep(_srs_pps_srtcps);",
          "567:     srs_freep(_srs_pps_srtps);",
          "569:     srs_freep(_srs_pps_rstuns);",
          "570:     srs_freep(_srs_pps_rrtps);",
          "571:     srs_freep(_srs_pps_rrtcps);",
          "573:     srs_freep(_srs_pps_aloss2);",
          "575:     srs_freep(_srs_pps_pli);",
          "576:     srs_freep(_srs_pps_twcc);",
          "577:     srs_freep(_srs_pps_rr);",
          "579:     srs_freep(_srs_pps_objs_rtps);",
          "580:     srs_freep(_srs_pps_objs_rraw);",
          "581:     srs_freep(_srs_pps_objs_rfua);",
          "582:     srs_freep(_srs_pps_objs_rbuf);",
          "583:     srs_freep(_srs_pps_objs_rothers);",
          "584: #endif",
          "586:     srs_freep(_srs_dvr_async);",
          "588: #ifdef SRS_APM",
          "589:     srs_freep(_srs_cls);",
          "590:     srs_freep(_srs_apm);",
          "591: #endif",
          "593:     srs_freep(_srs_reload_err);",
          "603:     srs_st_destroy();",
          "604: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.hpp||trunk/src/app/srs_app_threads.hpp": [
          "File: trunk/src/app/srs_app_threads.hpp -> trunk/src/app/srs_app_threads.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: extern srs_error_t srs_global_initialize();",
          "59: class SrsThreadMutex",
          "",
          "[Removed Lines]",
          "56: extern void srs_global_dispose();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    150",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    151",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_server.cpp||trunk/src/main/srs_main_server.cpp": [
          "File: trunk/src/main/srs_main_server.cpp -> trunk/src/main/srs_main_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: srs_error_t run_hybrid_server(void* arg);",
          "464: srs_error_t run_in_thread_pool()",
          "465: {",
          "470:     srs_error_t err = srs_success;",
          "473:     if ((err = _srs_thread_pool->initialize()) != srs_success) {",
          "474:         return srs_error_wrap(err, \"init thread pool\");",
          "475:     }",
          "478:     if ((err = _srs_thread_pool->execute(\"hybrid\", run_hybrid_server, (void*)NULL)) != srs_success) {",
          "479:         return srs_error_wrap(err, \"start hybrid server thread\");",
          "",
          "[Removed Lines]",
          "466: #ifdef SRS_SINGLE_THREAD",
          "467:     srs_trace(\"Run in single thread mode\");",
          "468:     return run_hybrid_server(NULL);",
          "469: #else",
          "",
          "[Added Lines]",
          "473: #ifdef SRS_SINGLE_THREAD",
          "474:     srs_trace(\"Run in single thread mode\");",
          "475:     return run_hybrid_server(NULL);",
          "476: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:     _srs_hybrid->stop();",
          "532:     return err;",
          "533: }",
          "",
          "[Removed Lines]",
          "530:     srs_global_dispose();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dba99a1cc6a9c70be17991a460bb43f7e3c252e",
      "candidate_info": {
        "commit_hash": "9dba99a1cc6a9c70be17991a460bb43f7e3c252e",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/9dba99a1cc6a9c70be17991a460bb43f7e3c252e",
        "files": [
          ".github/workflows/test.yml",
          "trunk/3rdparty/srs-bench/blackbox/hevc_test.go",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_rtc_api.cpp",
          "trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_conn.hpp",
          "trunk/src/app/srs_app_rtc_server.cpp",
          "trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/app/srs_app_srt_conn.cpp",
          "trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/app/srs_app_srt_source.hpp",
          "trunk/src/app/srs_app_stream_bridge.cpp",
          "trunk/src/app/srs_app_stream_bridge.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_rtc.cpp"
        ],
        "message": "SmartPtr: Support shared ptr for RTC source. v6.0.128 (#4085)\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>",
        "before_after_code_files": [
          "trunk/3rdparty/srs-bench/blackbox/hevc_test.go||trunk/3rdparty/srs-bench/blackbox/hevc_test.go",
          "trunk/src/app/srs_app_rtc_api.cpp||trunk/src/app/srs_app_rtc_api.cpp",
          "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_conn.hpp||trunk/src/app/srs_app_rtc_conn.hpp",
          "trunk/src/app/srs_app_rtc_server.cpp||trunk/src/app/srs_app_rtc_server.cpp",
          "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/app/srs_app_srt_conn.cpp||trunk/src/app/srs_app_srt_conn.cpp",
          "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/app/srs_app_srt_source.hpp||trunk/src/app/srs_app_srt_source.hpp",
          "trunk/src/app/srs_app_stream_bridge.cpp||trunk/src/app/srs_app_stream_bridge.cpp",
          "trunk/src/app/srs_app_stream_bridge.hpp||trunk/src/app/srs_app_stream_bridge.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_rtc.cpp||trunk/src/utest/srs_utest_rtc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/3rdparty/srs-bench/blackbox/hevc_test.go||trunk/3rdparty/srs-bench/blackbox/hevc_test.go": [
          "File: trunk/3rdparty/srs-bench/blackbox/hevc_test.go -> trunk/3rdparty/srs-bench/blackbox/hevc_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   }",
          "935:   }",
          "937:   if v := m.Video(); v == nil {",
          "",
          "[Removed Lines]",
          "933:   if dv := m.Duration(); dv < duration {",
          "934:    r5 = errors.Errorf(\"short duration=%v < %v, %v, %v\", dv, duration, m.String(), str)",
          "",
          "[Added Lines]",
          "933:   if dv := m.Duration(); dv < duration / 2 {",
          "934:    r5 = errors.Errorf(\"short duration=%v < %v, %v, %v\", dv, duration / 2, m.String(), str)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_api.cpp||trunk/src/app/srs_app_rtc_api.cpp": [
          "File: trunk/src/app/srs_app_rtc_api.cpp -> trunk/src/app/srs_app_rtc_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     bool is_rtc_stream_active = false;",
          "220:     if (true) {",
          "223:     }",
          "",
          "[Removed Lines]",
          "221:         SrsRtcSource* source = _srs_rtc_sources->fetch(ruc->req_);",
          "222:         is_rtc_stream_active = (source && !source->can_publish());",
          "",
          "[Added Lines]",
          "221:         SrsSharedPtr<SrsRtcSource> source = _srs_rtc_sources->fetch(ruc->req_);",
          "222:         is_rtc_stream_active = (source.get() && !source->can_publish());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp": [
          "File: trunk/src/app/srs_app_rtc_conn.cpp -> trunk/src/app/srs_app_rtc_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:     return std::string(\"\");",
          "416: }",
          "419: {",
          "420:     cid_ = cid;",
          "421:     trd_ = NULL;",
          "423:     req_ = NULL;",
          "426:     is_started = false;",
          "427:     session_ = s;",
          "",
          "[Removed Lines]",
          "418: SrsRtcPlayStream::SrsRtcPlayStream(SrsRtcConnection* s, const SrsContextId& cid)",
          "424:     source_ = NULL;",
          "",
          "[Added Lines]",
          "418: SrsRtcPlayStream::SrsRtcPlayStream(SrsRtcConnection* s, const SrsContextId& cid) : source_(new SrsRtcSource())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:         return srs_error_wrap(err, \"rtc: stat client\");",
          "486:     }",
          "489:         return srs_error_wrap(err, \"rtc fetch source failed\");",
          "490:     }",
          "",
          "[Removed Lines]",
          "488:     if ((err = _srs_rtc_sources->fetch_or_create(req_, &source_)) != srs_success) {",
          "",
          "[Added Lines]",
          "487:     if ((err = _srs_rtc_sources->fetch_or_create(req_, source_)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "642: {",
          "643:     srs_error_t err = srs_success;",
          "647:     SrsRtcConsumer* consumer = NULL;",
          "648:     SrsAutoFree(SrsRtcConsumer, consumer);",
          "650:         return srs_error_wrap(err, \"create consumer, source=%s\", req_->get_stream_url().c_str());",
          "651:     }",
          "",
          "[Removed Lines]",
          "645:     SrsRtcSource* source = source_;",
          "649:     if ((err = source->create_consumer(consumer)) != srs_success) {",
          "",
          "[Added Lines]",
          "644:     SrsSharedPtr<SrsRtcSource>& source = source_;",
          "645:     srs_assert(source.get());",
          "649:     if ((err = source->create_consumer(source_, consumer)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "933: {",
          "934:     srs_error_t err = srs_success;",
          "939:     ISrsRtcPublishStream* publisher = source_->publish_stream();",
          "940:     if (!publisher) {",
          "941:         return err;",
          "",
          "[Removed Lines]",
          "937:     srs_assert(source_);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1076:     return std::string(\"\");",
          "1077: }",
          "1080: {",
          "1081:     cid_ = cid;",
          "1082:     is_started = false;",
          "",
          "[Removed Lines]",
          "1079: SrsRtcPublishStream::SrsRtcPublishStream(SrsRtcConnection* session, const SrsContextId& cid)",
          "",
          "[Added Lines]",
          "1076: SrsRtcPublishStream::SrsRtcPublishStream(SrsRtcConnection* session, const SrsContextId& cid) : source_(new SrsRtcSource())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1086:     twcc_epp_ = new SrsErrorPithyPrint(3.0);",
          "1088:     req_ = NULL;",
          "1090:     nn_simulate_nack_drop = 0;",
          "1091:     nack_enabled_ = false;",
          "1092:     nack_no_copy_ = false;",
          "",
          "[Removed Lines]",
          "1089:     source = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1113:     srs_freep(timer_rtcp_);",
          "1114:     srs_freep(timer_twcc_);",
          "1122:     for (int i = 0; i < (int)video_tracks_.size(); ++i) {",
          "1123:         SrsRtcVideoRecvTrack* track = video_tracks_.at(i);",
          "",
          "[Removed Lines]",
          "1117:     if (source) {",
          "1118:         source->set_publish_stream(NULL);",
          "1119:         source->on_unpublish();",
          "1120:     }",
          "",
          "[Added Lines]",
          "1112:     source_->set_publish_stream(NULL);",
          "1113:     source_->on_unpublish();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1203:     }",
          "1207:         return srs_error_wrap(err, \"create source\");",
          "1208:     }",
          "1212:     SrsLiveSource *rtmp = _srs_sources->fetch(r);",
          "",
          "[Removed Lines]",
          "1206:     if ((err = _srs_rtc_sources->fetch_or_create(req_, &source)) != srs_success) {",
          "1209:     source->set_publish_stream(this);",
          "",
          "[Added Lines]",
          "1199:     if ((err = _srs_rtc_sources->fetch_or_create(req_, source_)) != srs_success) {",
          "1202:     source_->set_publish_stream(this);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1250:             return srs_error_wrap(err, \"create bridge\");",
          "1251:         }",
          "1254:     }",
          "1255: #endif",
          "",
          "[Removed Lines]",
          "1253:         source->set_bridge(bridge);",
          "",
          "[Added Lines]",
          "1246:         source_->set_bridge(bridge);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1265:         return err;",
          "1266:     }",
          "1269:         return srs_error_wrap(err, \"on publish\");",
          "1270:     }",
          "",
          "[Removed Lines]",
          "1268:     if ((err = source->on_publish()) != srs_success) {",
          "",
          "[Added Lines]",
          "1261:     if ((err = source_->on_publish()) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1447:     SrsRtcVideoRecvTrack* video_track = get_video_track(ssrc);",
          "1448:     if (audio_track) {",
          "1449:         pkt->frame_type = SrsFrameTypeAudio;",
          "1451:             return srs_error_wrap(err, \"on audio\");",
          "1452:         }",
          "1453:     } else if (video_track) {",
          "1454:         pkt->frame_type = SrsFrameTypeVideo;",
          "1456:             return srs_error_wrap(err, \"on video\");",
          "1457:         }",
          "1458:     } else {",
          "",
          "[Removed Lines]",
          "1450:         if ((err = audio_track->on_rtp(source, pkt)) != srs_success) {",
          "1455:         if ((err = video_track->on_rtp(source, pkt)) != srs_success) {",
          "",
          "[Added Lines]",
          "1443:         if ((err = audio_track->on_rtp(source_, pkt)) != srs_success) {",
          "1448:         if ((err = video_track->on_rtp(source_, pkt)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1956:         return srs_error_wrap(err, \"generate local sdp\");",
          "1957:     }",
          "1961:         return srs_error_wrap(err, \"create source\");",
          "1962:     }",
          "",
          "[Removed Lines]",
          "1959:     SrsRtcSource* source = NULL;",
          "1960:     if ((err = _srs_rtc_sources->fetch_or_create(req, &source)) != srs_success) {",
          "",
          "[Added Lines]",
          "1952:     SrsSharedPtr<SrsRtcSource> source;",
          "1953:     if ((err = _srs_rtc_sources->fetch_or_create(req, source)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3057:     bool has_42e01f = srs_sdp_has_h264_profile(remote_sdp, \"42e01f\");",
          "3061:         return srs_error_wrap(err, \"fetch rtc source\");",
          "3062:     }",
          "",
          "[Removed Lines]",
          "3059:     SrsRtcSource* source = NULL;",
          "3060:     if ((err = _srs_rtc_sources->fetch_or_create(req, &source)) != srs_success) {",
          "",
          "[Added Lines]",
          "3052:     SrsSharedPtr<SrsRtcSource> source;",
          "3053:     if ((err = _srs_rtc_sources->fetch_or_create(req, source)) != srs_success) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_conn.hpp||trunk/src/app/srs_app_rtc_conn.hpp": [
          "File: trunk/src/app/srs_app_rtc_conn.hpp -> trunk/src/app/srs_app_rtc_conn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <srs_protocol_conn.hpp>",
          "25: #include <srs_app_conn.hpp>",
          "26: #include <srs_app_async_call.hpp>",
          "28: #include <string>",
          "29: #include <map>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     SrsRtcPLIWorker* pli_worker_;",
          "218: private:",
          "219:     SrsRequest* req_;",
          "222:     std::map<uint32_t, SrsRtcAudioSendTrack*> audio_tracks_;",
          "223:     std::map<uint32_t, SrsRtcVideoSendTrack*> video_tracks_;",
          "",
          "[Removed Lines]",
          "220:     SrsRtcSource* source_;",
          "",
          "[Added Lines]",
          "221:     SrsSharedPtr<SrsRtcSource> source_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:     SrsErrorPithyPrint* pli_epp;",
          "344: private:",
          "345:     SrsRequest* req_;",
          "348:     int nn_simulate_nack_drop;",
          "349: private:",
          "",
          "[Removed Lines]",
          "346:     SrsRtcSource* source;",
          "",
          "[Added Lines]",
          "347:     SrsSharedPtr<SrsRtcSource> source_;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_server.cpp||trunk/src/app/srs_app_rtc_server.cpp": [
          "File: trunk/src/app/srs_app_rtc_server.cpp -> trunk/src/app/srs_app_rtc_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:     SrsRequest* req = ruc->req_;",
          "507:         return srs_error_wrap(err, \"create source\");",
          "508:     }",
          "",
          "[Removed Lines]",
          "505:     SrsRtcSource* source = NULL;",
          "506:     if ((err = _srs_rtc_sources->fetch_or_create(req, &source)) != srs_success) {",
          "",
          "[Added Lines]",
          "505:     SrsSharedPtr<SrsRtcSource> source;",
          "506:     if ((err = _srs_rtc_sources->fetch_or_create(req, source)) != srs_success) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp": [
          "File: trunk/src/app/srs_app_rtc_source.cpp -> trunk/src/app/srs_app_rtc_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: {",
          "155: }",
          "158: {",
          "160:     should_update_source_id = false;",
          "161:     handler_ = NULL;",
          "",
          "[Removed Lines]",
          "157: SrsRtcConsumer::SrsRtcConsumer(SrsRtcSource* s)",
          "159:     source = s;",
          "",
          "[Added Lines]",
          "157: SrsRtcConsumer::SrsRtcConsumer(SrsSharedPtr<SrsRtcSource> s)",
          "159:     source_ = s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168: SrsRtcConsumer::~SrsRtcConsumer()",
          "169: {",
          "172:     vector<SrsRtpPacket*>::iterator it;",
          "173:     for (it = queue.begin(); it != queue.end(); ++it) {",
          "",
          "[Removed Lines]",
          "170:     source->on_consumer_destroy(this);",
          "",
          "[Added Lines]",
          "170:     source_->on_consumer_destroy(this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:     srs_error_t err = srs_success;",
          "207:     if (should_update_source_id) {",
          "209:         should_update_source_id = false;",
          "210:     }",
          "",
          "[Removed Lines]",
          "208:         srs_trace(\"update source_id=%s/%s\", source->source_id().c_str(), source->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "208:         srs_trace(\"update source_id=%s/%s\", source_->source_id().c_str(), source_->pre_source_id().c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:     srs_mutex_destroy(lock);",
          "252: }",
          "255: {",
          "256:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "254: srs_error_t SrsRtcSourceManager::fetch_or_create(SrsRequest* r, SrsRtcSource** pps)",
          "",
          "[Added Lines]",
          "254: srs_error_t SrsRtcSourceManager::fetch_or_create(SrsRequest* r, SrsSharedPtr<SrsRtcSource>& pps)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:     SrsLocker(lock);",
          "267:         source->update_auth(r);",
          "269:         return err;",
          "270:     }",
          "278:     srs_trace(\"new rtc source, stream_url=%s\", stream_url.c_str());",
          "281:     if ((err = source->initialize(r)) != srs_success) {",
          "282:         return srs_error_wrap(err, \"init source %s\", r->get_stream_url().c_str());",
          "283:     }",
          "285:     pool[stream_url] = source;",
          "289:     return err;",
          "290: }",
          "293: {",
          "296:     string stream_url = r->get_stream_url();",
          "303:     return source;",
          "304: }",
          "306: SrsRtcSourceManager* _srs_rtc_sources = NULL;",
          "308: ISrsRtcPublishStream::ISrsRtcPublishStream()",
          "",
          "[Removed Lines]",
          "262:     SrsRtcSource* source = NULL;",
          "263:     if ((source = fetch(r)) != NULL) {",
          "272:     string stream_url = r->get_stream_url();",
          "273:     string vhost = r->vhost;",
          "276:     srs_assert (pool.find(stream_url) == pool.end());",
          "280:     source = new SrsRtcSource();",
          "292: SrsRtcSource* SrsRtcSourceManager::fetch(SrsRequest* r)",
          "294:     SrsRtcSource* source = NULL;",
          "297:     if (pool.find(stream_url) == pool.end()) {",
          "298:         return NULL;",
          "299:     }",
          "301:     source = pool[stream_url];",
          "",
          "[Added Lines]",
          "262:     string stream_url = r->get_stream_url();",
          "263:     std::map< std::string, SrsSharedPtr<SrsRtcSource> >::iterator it = pool.find(stream_url);",
          "265:     if (it != pool.end()) {",
          "266:         SrsSharedPtr<SrsRtcSource> source = it->second;",
          "272:         pps = source;",
          "277:     SrsSharedPtr<SrsRtcSource> source = SrsSharedPtr<SrsRtcSource>(new SrsRtcSource());",
          "285:     pps = source;",
          "290: SrsSharedPtr<SrsRtcSource> SrsRtcSourceManager::fetch(SrsRequest* r)",
          "294:     SrsLocker(lock);",
          "297:     std::map< std::string, SrsSharedPtr<SrsRtcSource> >::iterator it = pool.find(stream_url);",
          "299:     SrsSharedPtr<SrsRtcSource> source;",
          "300:     if (it == pool.end()) {",
          "301:         return source;",
          "302:     }",
          "304:     source = it->second;",
          "308: void SrsRtcSourceManager::eliminate(SrsRequest* r)",
          "309: {",
          "312:     SrsLocker(lock);",
          "314:     string stream_url = r->get_stream_url();",
          "315:     std::map< std::string, SrsSharedPtr<SrsRtcSource> >::iterator it = pool.find(stream_url);",
          "316:     if (it != pool.end()) {",
          "317:         pool.erase(it);",
          "318:     }",
          "319: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "471: #endif",
          "472: }",
          "475: {",
          "476:     srs_error_t err = srs_success;",
          "479:     consumers.push_back(consumer);",
          "",
          "[Removed Lines]",
          "474: srs_error_t SrsRtcSource::create_consumer(SrsRtcConsumer*& consumer)",
          "478:     consumer = new SrsRtcConsumer(this);",
          "",
          "[Added Lines]",
          "489: srs_error_t SrsRtcSource::create_consumer(SrsSharedPtr<SrsRtcSource> source, SrsRtcConsumer*& consumer)",
          "493:     consumer = new SrsRtcConsumer(source);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "508:             h->on_consumers_finished();",
          "509:         }",
          "510:     }",
          "511: }",
          "513: bool SrsRtcSource::can_publish()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     if (!is_created_ && consumers.empty()) {",
          "529:         _srs_rtc_sources->eliminate(req);",
          "530:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "608:     SrsStatistic* stat = SrsStatistic::instance();",
          "609:     stat->on_stream_close(req);",
          "610: }",
          "612: void SrsRtcSource::subscribe(ISrsRtcSourceEventHandler* h)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:     if (!is_created_ && consumers.empty()) {",
          "633:         _srs_rtc_sources->eliminate(req);",
          "634:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2553: }",
          "2556: {",
          "2557:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "2555: srs_error_t SrsRtcAudioRecvTrack::on_rtp(SrsRtcSource* source, SrsRtpPacket* pkt)",
          "",
          "[Added Lines]",
          "2580: srs_error_t SrsRtcAudioRecvTrack::on_rtp(SrsSharedPtr<SrsRtcSource>& source, SrsRtpPacket* pkt)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2611:     }",
          "2612: }",
          "2615: {",
          "2616:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "2614: srs_error_t SrsRtcVideoRecvTrack::on_rtp(SrsRtcSource* source, SrsRtpPacket* pkt)",
          "",
          "[Added Lines]",
          "2639: srs_error_t SrsRtcVideoRecvTrack::on_rtp(SrsSharedPtr<SrsRtcSource>& source, SrsRtpPacket* pkt)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <srs_app_hourglass.hpp>",
          "23: #include <srs_protocol_format.hpp>",
          "24: #include <srs_app_stream_bridge.hpp>",
          "26: class SrsRequest;",
          "27: class SrsMetaCache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: class SrsRtcConsumer",
          "80: {",
          "81: private:",
          "83:     std::vector<SrsRtpPacket*> queue;",
          "85:     bool should_update_source_id;",
          "",
          "[Removed Lines]",
          "82:     SrsRtcSource* source;",
          "",
          "[Added Lines]",
          "83:     SrsSharedPtr<SrsRtcSource> source_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     ISrsRtcSourceChangeCallback* handler_;",
          "93: public:",
          "95:     virtual ~SrsRtcConsumer();",
          "96: public:",
          "",
          "[Removed Lines]",
          "94:     SrsRtcConsumer(SrsRtcSource* s);",
          "",
          "[Added Lines]",
          "95:     SrsRtcConsumer(SrsSharedPtr<SrsRtcSource> s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112: {",
          "113: private:",
          "114:     srs_mutex_t lock;",
          "116: public:",
          "117:     SrsRtcSourceManager();",
          "118:     virtual ~SrsRtcSourceManager();",
          "",
          "[Removed Lines]",
          "115:     std::map<std::string, SrsRtcSource*> pool;",
          "",
          "[Added Lines]",
          "116:     std::map< std::string, SrsSharedPtr<SrsRtcSource> > pool;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124: public:",
          "127: };",
          "",
          "[Removed Lines]",
          "123:     virtual srs_error_t fetch_or_create(SrsRequest* r, SrsRtcSource** pps);",
          "126:     virtual SrsRtcSource* fetch(SrsRequest* r);",
          "",
          "[Added Lines]",
          "124:     virtual srs_error_t fetch_or_create(SrsRequest* r, SrsSharedPtr<SrsRtcSource>& pps);",
          "127:     virtual SrsSharedPtr<SrsRtcSource> fetch(SrsRequest* r);",
          "128: public:",
          "130:     virtual void eliminate(SrsRequest* r);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211: public:",
          "",
          "[Removed Lines]",
          "214:     virtual srs_error_t create_consumer(SrsRtcConsumer*& consumer);",
          "",
          "[Added Lines]",
          "218:     virtual srs_error_t create_consumer(SrsSharedPtr<SrsRtcSource> source, SrsRtcConsumer*& consumer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "566:     srs_error_t on_nack(SrsRtpPacket** ppkt);",
          "567: public:",
          "569:     virtual srs_error_t check_send_nacks() = 0;",
          "570: protected:",
          "571:     virtual srs_error_t do_check_send_nacks(uint32_t& timeout_nacks);",
          "",
          "[Removed Lines]",
          "568:     virtual srs_error_t on_rtp(SrsRtcSource* source, SrsRtpPacket* pkt) = 0;",
          "",
          "[Added Lines]",
          "572:     virtual srs_error_t on_rtp(SrsSharedPtr<SrsRtcSource>& source, SrsRtpPacket* pkt) = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "579: public:",
          "580:     virtual void on_before_decode_payload(SrsRtpPacket* pkt, SrsBuffer* buf, ISrsRtpPayloader** ppayload, SrsRtspPacketPayloadType* ppt);",
          "581: public:",
          "583:     virtual srs_error_t check_send_nacks();",
          "584: };",
          "",
          "[Removed Lines]",
          "582:     virtual srs_error_t on_rtp(SrsRtcSource* source, SrsRtpPacket* pkt);",
          "",
          "[Added Lines]",
          "586:     virtual srs_error_t on_rtp(SrsSharedPtr<SrsRtcSource>& source, SrsRtpPacket* pkt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "591: public:",
          "592:     virtual void on_before_decode_payload(SrsRtpPacket* pkt, SrsBuffer* buf, ISrsRtpPayloader** ppayload, SrsRtspPacketPayloadType* ppt);",
          "593: public:",
          "595:     virtual srs_error_t check_send_nacks();",
          "596: };",
          "",
          "[Removed Lines]",
          "594:     virtual srs_error_t on_rtp(SrsRtcSource* source, SrsRtpPacket* pkt);",
          "",
          "[Added Lines]",
          "598:     virtual srs_error_t on_rtp(SrsSharedPtr<SrsRtcSource>& source, SrsRtpPacket* pkt);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.cpp -> trunk/src/app/srs_app_rtmp_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088: #ifdef SRS_RTC",
          "1090:     bool rtc_server_enabled = _srs_config->get_rtc_server_enabled();",
          "1091:     bool rtc_enabled = _srs_config->get_rtc_enabled(req->vhost);",
          "1092:     if (rtc_server_enabled && rtc_enabled && !info->edge) {",
          "1094:             return srs_error_wrap(err, \"create source\");",
          "1095:         }",
          "",
          "[Removed Lines]",
          "1089:     SrsRtcSource* rtc = NULL;",
          "1093:         if ((err = _srs_rtc_sources->fetch_or_create(req, &rtc)) != srs_success) {",
          "",
          "[Added Lines]",
          "1089:     SrsSharedPtr<SrsRtcSource> rtc;",
          "1093:         if ((err = _srs_rtc_sources->fetch_or_create(req, rtc)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1120: #if defined(SRS_RTC) && defined(SRS_FFMPEG_FIT)",
          "1122:         SrsCompositeBridge* bridge = new SrsCompositeBridge();",
          "1123:         bridge->append(new SrsFrameToRtcBridge(rtc));",
          "",
          "[Removed Lines]",
          "1121:     if (rtc && _srs_config->get_rtc_from_rtmp(req->vhost)) {",
          "",
          "[Added Lines]",
          "1121:     if (rtc.get() && _srs_config->get_rtc_from_rtmp(req->vhost)) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_conn.cpp||trunk/src/app/srs_app_srt_conn.cpp": [
          "File: trunk/src/app/srs_app_srt_conn.cpp -> trunk/src/app/srs_app_srt_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "391: #ifdef SRS_RTC",
          "393:     bool rtc_server_enabled = _srs_config->get_rtc_server_enabled();",
          "394:     bool rtc_enabled = _srs_config->get_rtc_enabled(req_->vhost);",
          "395:     bool edge = _srs_config->get_vhost_is_edge(req_->vhost);",
          "396:     if (rtc_server_enabled && rtc_enabled && ! edge) {",
          "398:             return srs_error_wrap(err, \"create source\");",
          "399:         }",
          "",
          "[Removed Lines]",
          "392:     SrsRtcSource* rtc = NULL;",
          "397:         if ((err = _srs_rtc_sources->fetch_or_create(req_, &rtc)) != srs_success) {",
          "",
          "[Added Lines]",
          "392:     SrsSharedPtr<SrsRtcSource> rtc;",
          "397:         if ((err = _srs_rtc_sources->fetch_or_create(req_, rtc)) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:         bridge->append(new SrsFrameToRtmpBridge(live_source));",
          "412: #if defined(SRS_RTC) && defined(SRS_FFMPEG_FIT)",
          "414:             bridge->append(new SrsFrameToRtcBridge(rtc));",
          "415:         }",
          "416: #endif",
          "",
          "[Removed Lines]",
          "413:         if (rtc && _srs_config->get_rtc_from_rtmp(req_->vhost)) {",
          "",
          "[Added Lines]",
          "413:         if (rtc.get() && _srs_config->get_rtc_from_rtmp(req_->vhost)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:     SrsSrtConsumer* consumer = NULL;",
          "491:     SrsAutoFree(SrsSrtConsumer, consumer);",
          "493:         return srs_error_wrap(err, \"create consumer, ts source=%s\", req_->get_stream_url().c_str());",
          "494:     }",
          "495:     srs_assert(consumer);",
          "",
          "[Removed Lines]",
          "492:     if ((err = srt_source_->create_consumer(consumer)) != srs_success) {",
          "",
          "[Added Lines]",
          "492:     if ((err = srt_source_->create_consumer(srt_source_, consumer)) != srs_success) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp": [
          "File: trunk/src/app/srs_app_srt_source.cpp -> trunk/src/app/srs_app_srt_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: SrsSrtSourceManager* _srs_srt_sources = NULL;",
          "156: {",
          "158:     should_update_source_id = false;",
          "160:     mw_wait = srs_cond_new();",
          "",
          "[Removed Lines]",
          "155: SrsSrtConsumer::SrsSrtConsumer(SrsSrtSource* s)",
          "157:     source = s;",
          "",
          "[Added Lines]",
          "155: SrsSrtConsumer::SrsSrtConsumer(SrsSharedPtr<SrsSrtSource> s)",
          "157:     source_ = s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: SrsSrtConsumer::~SrsSrtConsumer()",
          "166: {",
          "169:     vector<SrsSrtPacket*>::iterator it;",
          "170:     for (it = queue.begin(); it != queue.end(); ++it) {",
          "",
          "[Removed Lines]",
          "167:     source->on_consumer_destroy(this);",
          "",
          "[Added Lines]",
          "167:     source_->on_consumer_destroy(this);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     srs_error_t err = srs_success;",
          "204:     if (should_update_source_id) {",
          "206:         should_update_source_id = false;",
          "207:     }",
          "",
          "[Removed Lines]",
          "205:         srs_trace(\"update source_id=%s/%s\", source->source_id().c_str(), source->pre_source_id().c_str());",
          "",
          "[Added Lines]",
          "205:         srs_trace(\"update source_id=%s/%s\", source_->source_id().c_str(), source_->pre_source_id().c_str());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "942:     frame_builder_ = new SrsSrtFrameBuilder(bridge);",
          "943: }",
          "946: {",
          "947:     srs_error_t err = srs_success;",
          "950:     consumers.push_back(consumer);",
          "952:     return err;",
          "",
          "[Removed Lines]",
          "945: srs_error_t SrsSrtSource::create_consumer(SrsSrtConsumer*& consumer)",
          "949:     consumer = new SrsSrtConsumer(this);",
          "",
          "[Added Lines]",
          "945: srs_error_t SrsSrtSource::create_consumer(SrsSharedPtr<SrsSrtSource> source, SrsSrtConsumer*& consumer)",
          "949:     consumer = new SrsSrtConsumer(source);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_srt_source.hpp||trunk/src/app/srs_app_srt_source.hpp": [
          "File: trunk/src/app/srs_app_srt_source.hpp -> trunk/src/app/srs_app_srt_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: class SrsSrtConsumer",
          "71: {",
          "72: public:",
          "74:     virtual ~SrsSrtConsumer();",
          "75: private:",
          "77:     std::vector<SrsSrtPacket*> queue;",
          "79:     bool should_update_source_id;",
          "",
          "[Removed Lines]",
          "73:     SrsSrtConsumer(SrsSrtSource* source);",
          "76:     SrsSrtSource* source;",
          "",
          "[Added Lines]",
          "73:     SrsSrtConsumer(SrsSharedPtr<SrsSrtSource> source);",
          "76:     SrsSharedPtr<SrsSrtSource> source_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: public:",
          "172:     virtual srs_error_t consumer_dumps(SrsSrtConsumer* consumer);",
          "173:     virtual void on_consumer_destroy(SrsSrtConsumer* consumer);",
          "",
          "[Removed Lines]",
          "170:     virtual srs_error_t create_consumer(SrsSrtConsumer*& consumer);",
          "",
          "[Added Lines]",
          "170:     virtual srs_error_t create_consumer(SrsSharedPtr<SrsSrtSource> source, SrsSrtConsumer*& consumer);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_stream_bridge.cpp||trunk/src/app/srs_app_stream_bridge.cpp": [
          "File: trunk/src/app/srs_app_stream_bridge.cpp -> trunk/src/app/srs_app_stream_bridge.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: }",
          "65: #ifdef SRS_RTC",
          "67: {",
          "68:     source_ = source;",
          "",
          "[Removed Lines]",
          "66: SrsFrameToRtcBridge::SrsFrameToRtcBridge(SrsRtcSource* source)",
          "",
          "[Added Lines]",
          "66: SrsFrameToRtcBridge::SrsFrameToRtcBridge(SrsSharedPtr<SrsRtcSource> source)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_stream_bridge.hpp||trunk/src/app/srs_app_stream_bridge.hpp": [
          "File: trunk/src/app/srs_app_stream_bridge.hpp -> trunk/src/app/srs_app_stream_bridge.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <srs_core.hpp>",
          "12: #include <srs_kernel_codec.hpp>",
          "14: #include <vector>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: class SrsFrameToRtcBridge : public ISrsStreamBridge",
          "60: {",
          "61: private:",
          "63: private:",
          "64: #if defined(SRS_FFMPEG_FIT)",
          "65:     SrsRtcRtpBuilder* rtp_builder_;",
          "66: #endif",
          "67: public:",
          "69:     virtual ~SrsFrameToRtcBridge();",
          "70: public:",
          "71:     virtual srs_error_t initialize(SrsRequest* r);",
          "",
          "[Removed Lines]",
          "62:     SrsRtcSource* source_;",
          "68:     SrsFrameToRtcBridge(SrsRtcSource* source);",
          "",
          "[Added Lines]",
          "63:     SrsSharedPtr<SrsRtcSource> source_;",
          "69:     SrsFrameToRtcBridge(SrsSharedPtr<SrsRtcSource> source);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    127",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    128",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_rtc.cpp||trunk/src/utest/srs_utest_rtc.cpp": [
          "File: trunk/src/utest/srs_utest_rtc.cpp -> trunk/src/utest/srs_utest_rtc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "969:     publish.set_all_tracks_status(true);",
          "974:     srand(time(NULL));",
          "976:     if (true)",
          "",
          "[Removed Lines]",
          "971:     SrsRtcSource* rtc_source = new SrsRtcSource();",
          "972:     SrsAutoFree(SrsRtcSource, rtc_source);",
          "",
          "[Added Lines]",
          "971:     SrsSharedPtr<SrsRtcSource> rtc_source(new SrsRtcSource());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1037:     publish.set_all_tracks_status(true);",
          "1042:     srand(time(NULL));",
          "",
          "[Removed Lines]",
          "1039:     SrsRtcSource* rtc_source = new SrsRtcSource();",
          "1040:     SrsAutoFree(SrsRtcSource, rtc_source);",
          "",
          "[Added Lines]",
          "1038:     SrsSharedPtr<SrsRtcSource> rtc_source(new SrsRtcSource());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1110:     publish.set_all_tracks_status(true);",
          "1115:     srand(time(NULL));",
          "",
          "[Removed Lines]",
          "1112:     SrsRtcSource* rtc_source = new SrsRtcSource();",
          "1113:     SrsAutoFree(SrsRtcSource, rtc_source);",
          "",
          "[Added Lines]",
          "1110:     SrsSharedPtr<SrsRtcSource> rtc_source(new SrsRtcSource());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1216:     publish.set_all_tracks_status(true);",
          "1221:     srand(time(NULL));",
          "",
          "[Removed Lines]",
          "1218:     SrsRtcSource* rtc_source = new SrsRtcSource();",
          "1219:     SrsAutoFree(SrsRtcSource, rtc_source);",
          "",
          "[Added Lines]",
          "1215:     SrsSharedPtr<SrsRtcSource> rtc_source(new SrsRtcSource());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c75c9840d533a1a2c7aaf18f7bd7990ef0cbecfa",
      "candidate_info": {
        "commit_hash": "c75c9840d533a1a2c7aaf18f7bd7990ef0cbecfa",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/c75c9840d533a1a2c7aaf18f7bd7990ef0cbecfa",
        "files": [
          "trunk/configure",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/protocol/srs_protocol_http_conn.cpp",
          "trunk/src/utest/srs_utest_protocol3.cpp",
          "trunk/src/utest/srs_utest_protocol3.hpp"
        ],
        "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
          "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
          "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
            "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
            "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
            "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
            "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
            "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
            "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    209",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    210",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:     XX(ERROR_GB_SSRC_GENERATE              , 4051, \"GbSsrcGenerate\", \"Failed to generate SSRC for GB28181\") \\",
          "324:     XX(ERROR_GB_CONFIG                     , 4052, \"GbConfig\", \"Invalid configuration for GB28181\") \\",
          "325:     XX(ERROR_GB_TIMEOUT                    , 4053, \"GbTimeout\", \"SIP or media connection timeout for GB28181\") \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
          "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:     }",
          "333: }",
          "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
          "336: {",
          "337:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: bool srs_is_valid_jsonp_callback(std::string callback)",
          "337: {",
          "338:     for (int i = 0; i < (int)callback.length(); i++) {",
          "339:         char ch = callback.at(i);",
          "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
          "341:         bool is_number = (ch >= '0' && ch <= '9');",
          "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
          "343:             return false;",
          "344:         }",
          "345:     }",
          "346:     return true;",
          "347: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     if (allow_jsonp) {",
          "379:         if (jsonp) {",
          "380:             jsonp_method = query_get(\"method\");",
          "381:         }",
          "382:     }",
          "384:     return err;",
          "",
          "[Removed Lines]",
          "376:         if (!query_get(\"callback\").empty()) {",
          "377:             jsonp = true;",
          "378:         }",
          "",
          "[Added Lines]",
          "390:         string callback= query_get(\"callback\");",
          "391:         jsonp = !callback.empty();",
          "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
          "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
          "399:         }",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
          "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <srs_utest_protocol3.hpp>",
          "8: using namespace std;",
          "10: #include <srs_kernel_error.hpp>",
          "11: #include <srs_core_autofree.hpp>",
          "12: #include <srs_protocol_utility.hpp>",
          "13: #include <srs_protocol_rtmp_msg_array.hpp>",
          "14: #include <srs_protocol_rtmp_stack.hpp>",
          "15: #include <srs_kernel_utility.hpp>",
          "16: #include <srs_app_st.hpp>",
          "17: #include <srs_protocol_amf0.hpp>",
          "18: #include <srs_protocol_rtmp_stack.hpp>",
          "19: #include <srs_protocol_http_conn.hpp>",
          "20: #include <srs_protocol_protobuf.hpp>",
          "21: #include <srs_kernel_buffer.hpp>",
          "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
          "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
          "26: {",
          "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
          "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
          "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
          "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
          "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
          "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
          "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
          "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
          "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
          "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
          "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
          "38: }",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
          "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
          "8: #define SRS_UTEST_PROTOCOL3_HPP",
          "11: #include <srs_utest_protocol3.hpp>",
          "13: #include <srs_utest_protocol.hpp>",
          "15: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}