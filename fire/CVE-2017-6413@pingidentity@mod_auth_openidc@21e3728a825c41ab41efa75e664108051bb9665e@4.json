{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b551cfa17cf45e306d6944cf8fc625fe2fc25169",
      "candidate_info": {
        "commit_hash": "b551cfa17cf45e306d6944cf8fc625fe2fc25169",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/b551cfa17cf45e306d6944cf8fc625fe2fc25169",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/parse.c"
        ],
        "message": "fix bug where auth method private_key_jwt wouldn't coexist with none\n\nbump to 2.3.4rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:    NULL,",
          "394:    NULL };",
          "395:  if (has_private_key)",
          "398:  return oidc_valid_string_option(pool, arg, options);",
          "399: }",
          "",
          "[Removed Lines]",
          "396:   options[3] = OIDC_ENDPOINT_AUTH_PRIVATE_KEY_JWT;",
          "",
          "[Added Lines]",
          "396:   options[4] = OIDC_ENDPOINT_AUTH_PRIVATE_KEY_JWT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbae7bf64b0deaed26d3a05ae589b19c6da5fd6f",
      "candidate_info": {
        "commit_hash": "cbae7bf64b0deaed26d3a05ae589b19c6da5fd6f",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/cbae7bf64b0deaed26d3a05ae589b19c6da5fd6f",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/proto.c"
        ],
        "message": "add draft Token Binding for Authorization Codes; refactor PKCE\n\nrefactor PKCE support and add OAuth 2.0 Token Binding for Authorization\nCodes according to:\nhttps://tools.ietf.org/html/draft-jones-oauth-token-binding\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: # The PKCE method used (this serves as default value for discovered OPs too)",
          "189: # When not defined PKCE is not used.",
          "190: # NB: this can be overridden on a per-OP basis in the .conf file using the key: pkce_method",
          "193: # (Optional)",
          "194: # The OpenID Connect Bound Authentication policy used,",
          "",
          "[Removed Lines]",
          "191: #OIDCPKCEMethod [plain|S256]",
          "",
          "[Added Lines]",
          "191: #OIDCPKCEMethod [plain|S256|referred_tb]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "363: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: const char *oidc_parse_pkce_type(apr_pool_t *pool, const char *arg,",
          "366:   oidc_proto_pkce_t **type) {",
          "367:  const char *rv = oidc_valid_pkce_method(pool, arg);",
          "368:  if (rv != NULL)",
          "369:   return rv;",
          "371:  if (apr_strnatcmp(arg, OIDC_PKCE_METHOD_PLAIN) == 0) {",
          "373:  } else if (apr_strnatcmp(arg, OIDC_PKCE_METHOD_S256) == 0) {",
          "375:  } else if (apr_strnatcmp(arg, OIDC_PKCE_METHOD_REFERRED_TB) == 0) {",
          "377:  }",
          "379:  return NULL;",
          "380: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:   const char *arg) {",
          "370:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "371:    cmd->server->module_config, &auth_openidc_module);",
          "376:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "377: }",
          "",
          "[Removed Lines]",
          "373:  const char *rv = oidc_valid_pkce_method(cmd->pool, arg);",
          "374:  if (rv == NULL)",
          "375:   rv = ap_set_string_slot(cmd, cfg, arg);",
          "",
          "[Added Lines]",
          "389:  const char *rv = oidc_parse_pkce_type(cmd->pool, arg, &cfg->provider.pkce);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "809:  c->provider.idtoken_iat_slack = OIDC_DEFAULT_IDTOKEN_IAT_SLACK;",
          "810:  c->provider.session_max_duration = OIDC_DEFAULT_SESSION_MAX_DURATION;",
          "811:  c->provider.auth_request_params = NULL;",
          "814:  c->provider.client_jwks_uri = NULL;",
          "815:  c->provider.id_token_signed_response_alg = NULL;",
          "",
          "[Removed Lines]",
          "812:  c->provider.pkce_method = NULL;",
          "",
          "[Added Lines]",
          "826:  c->provider.pkce = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1036:    add->provider.auth_request_params != NULL ?",
          "1037:      add->provider.auth_request_params :",
          "1038:      base->provider.auth_request_params;",
          "1043:  c->provider.client_jwks_uri =",
          "1044:    add->provider.client_jwks_uri != NULL ?",
          "",
          "[Removed Lines]",
          "1039:  c->provider.pkce_method =",
          "1040:    add->provider.pkce_method != NULL ?",
          "1041:      add->provider.pkce_method : base->provider.pkce_method;",
          "",
          "[Added Lines]",
          "1053:  c->provider.pkce =",
          "1054:    add->provider.pkce != NULL ?",
          "1055:      add->provider.pkce : base->provider.pkce;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2084:     \"Extra parameters that need to be sent in the Authorization Request (must be query-encoded like \\\"display=popup&prompt=consent\\\".\"),",
          "2085:   AP_INIT_TAKE1(\"OIDCPKCEMethod\",",
          "2086:     oidc_set_pkce_method,",
          "2088:     RSRC_CONF,",
          "2091:   AP_INIT_TAKE1(\"OIDCClientID\", oidc_set_string_slot,",
          "2092:     (void*)APR_OFFSETOF(oidc_cfg, provider.client_id),",
          "",
          "[Removed Lines]",
          "2087:     (void *)APR_OFFSETOF(oidc_cfg, provider.pkce_method),",
          "2089:     \"The RFC 7636 PCKE mode used; must be one of \\\"plain\\\", \\\"S256\\\"\"),",
          "",
          "[Added Lines]",
          "2101:     (void *)APR_OFFSETOF(oidc_cfg, provider.pkce),",
          "2103:     \"The RFC 7636 PCKE mode used; must be one of \\\"plain\\\", \\\"S256\\\" or \\\"referred_tb\\\"\"),",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1107:    cfg->provider.response_mode);",
          "1110:  oidc_metadata_get_valid_string(r, j_conf, \"pkce_method\",",
          "1115:  oidc_json_object_get_string(r->pool, j_conf, \"client_name\",",
          "",
          "[Removed Lines]",
          "1111:    oidc_valid_pkce_method, &provider->pkce_method,",
          "1112:    cfg->provider.pkce_method);",
          "",
          "[Added Lines]",
          "1110:  char *pkce_method = NULL;",
          "1112:    oidc_valid_pkce_method, &pkce_method,",
          "1113:    cfg->provider.pkce ? cfg->provider.pkce->method : NULL);",
          "1114:  if (pkce_method != NULL)",
          "1115:   oidc_parse_pkce_type(r->pool, pkce_method, &provider->pkce);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2070:  if (oidc_proto_generate_nonce(r, &nonce, OIDC_PROTO_NONCE_LENGTH) == FALSE)",
          "2071:   return HTTP_INTERNAL_SERVER_ERROR;",
          "2074:  char *code_challenge = NULL;",
          "2076:  if ((oidc_util_spaced_string_contains(r->pool, provider->response_type,",
          "2082:    return HTTP_INTERNAL_SERVER_ERROR;",
          "2087:    return HTTP_INTERNAL_SERVER_ERROR;",
          "2088:  }",
          "",
          "[Removed Lines]",
          "2073:  char *code_verifier = NULL;",
          "2077:    OIDC_PROTO_CODE) == TRUE) && (provider->pkce_method != NULL)) {",
          "2080:   if (oidc_proto_generate_code_verifier(r, &code_verifier,",
          "2081:     OIDC_PROTO_CODE_VERIFIER_LENGTH) == FALSE)",
          "2085:   if (oidc_proto_generate_code_challenge(r, code_verifier,",
          "2086:     &code_challenge, provider->pkce_method) == FALSE)",
          "",
          "[Added Lines]",
          "2073:  char *pkce_state = NULL;",
          "2077:    OIDC_PROTO_CODE) == TRUE) && (provider->pkce != NULL)) {",
          "2080:   if (provider->pkce->state(r, &pkce_state) == FALSE)",
          "2084:   if (provider->pkce->challenge(r, pkce_state, &code_challenge) == FALSE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107:  if (prompt)",
          "2108:   json_object_set_new(proto_state, OIDC_PROTO_STATE_PROMPT,",
          "2109:     json_string(prompt));",
          "2115:  char *state = oidc_get_browser_state_hash(r, nonce);",
          "",
          "[Removed Lines]",
          "2110:  if (code_verifier)",
          "2111:   json_object_set_new(proto_state, OIDC_PROTO_CODE_VERIFIER,",
          "2112:     json_string(code_verifier));",
          "",
          "[Added Lines]",
          "2108:  if (pkce_state)",
          "2109:   json_object_set_new(proto_state, OIDC_PROTO_STATE_PKCE,",
          "2110:     json_string(pkce_state));",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: #define OIDC_TOKEN_BINDING_POLICY_REQUIRED  2",
          "202: #define OIDC_TOKEN_BINDING_POLICY_ENFORCED  3",
          "204: typedef struct oidc_jwks_uri_t {",
          "205:  const char *url;",
          "206:  int refresh_interval;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: typedef apr_byte_t (*oidc_proto_pkce_state)(request_rec *r, char **state);",
          "205: typedef apr_byte_t (*oidc_proto_pkce_challenge)(request_rec *r, const char *state, char **code_challenge);",
          "206: typedef apr_byte_t (*oidc_proto_pkce_verifier)(request_rec *r, const char *state, char **code_verifier);",
          "208: typedef struct oidc_proto_pkce_t {",
          "209:  const char *method;",
          "210:  oidc_proto_pkce_state     state;",
          "211:  oidc_proto_pkce_verifier  verifier;",
          "212:  oidc_proto_pkce_challenge challenge;",
          "213: } oidc_proto_pkce_t;",
          "215: extern oidc_proto_pkce_t oidc_pkce_plain;",
          "216: extern oidc_proto_pkce_t oidc_pkce_s256;",
          "217: extern oidc_proto_pkce_t oidc_pkce_referred_tb;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  int idtoken_iat_slack;",
          "238:  char *auth_request_params;",
          "239:  int session_max_duration;",
          "241:  int userinfo_refresh_interval;",
          "243:  char *client_jwks_uri;",
          "",
          "[Removed Lines]",
          "240:  char *pkce_method;",
          "",
          "[Added Lines]",
          "255:  oidc_proto_pkce_t *pkce;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462: #define OIDC_PROTO_STATE_NONCE           \"n\"",
          "463: #define OIDC_PROTO_STATE_TIMESTAMP       \"ts\"",
          "464: #define OIDC_PROTO_STATE_PROMPT          \"p\"",
          "466: #define OIDC_HOOK_INFO_REQUEST             \"info\"",
          "467: #define OIDC_HOOK_INFO_FORMAT_JSON         \"json\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480: #define OIDC_PROTO_STATE_PKCE            \"pkc\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "496: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt, const oidc_jwks_uri_t *jwks_uri, apr_hash_t *symmetric_keys);",
          "497: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt, const char *iss, apr_byte_t exp_is_mandatory, apr_byte_t iat_is_mandatory, int iat_slack);",
          "498: apr_byte_t oidc_proto_generate_nonce(request_rec *r, char **nonce, int len);",
          "502: apr_byte_t oidc_proto_authorization_response_code_idtoken_token(request_rec *r, oidc_cfg *c, json_t *proto_state, oidc_provider_t *provider, apr_table_t *params, const char *response_mode, oidc_jwt_t **jwt);",
          "503: apr_byte_t oidc_proto_authorization_response_code_idtoken(request_rec *r, oidc_cfg *c, json_t *proto_state, oidc_provider_t *provider, apr_table_t *params, const char *response_mode, oidc_jwt_t **jwt);",
          "",
          "[Removed Lines]",
          "499: apr_byte_t oidc_proto_generate_code_verifier(request_rec *r, char **code_verifier, int len);",
          "500: apr_byte_t oidc_proto_generate_code_challenge(request_rec *r, const char *code_verifier, char **code_challenge, const char *challenge_method);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547: oidc_valid_function_t oidc_cfg_get_valid_endpoint_auth_function(oidc_cfg *cfg);",
          "548: int oidc_cfg_cache_encrypt(request_rec *r);",
          "549: int oidc_cfg_session_cache_fallback_to_cookie(request_rec *r);",
          "552: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: const char *oidc_parse_pkce_type(apr_pool_t *pool, const char *arg, oidc_proto_pkce_t **type);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:  return NULL;",
          "418: }",
          "",
          "[Removed Lines]",
          "420: #define OIDC_PKCE_METHOD_PLAIN \"plain\"",
          "421: #define OIDC_PKCE_METHOD_S256  \"S256\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  static char *options[] = {",
          "428:    OIDC_PKCE_METHOD_PLAIN,",
          "429:    OIDC_PKCE_METHOD_S256,",
          "430:    NULL };",
          "431:  return oidc_valid_string_option(pool, arg, options);",
          "432: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:    OIDC_PKCE_METHOD_REFERRED_TB,",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #define OIDC_CLAIM_REQUIRED_MANDATORY \"mandatory\"",
          "65: #define OIDC_CLAIM_REQUIRED_OPTIONAL  \"optional\"",
          "67: const char *oidc_valid_url(apr_pool_t *pool, const char *arg, const char *scheme);",
          "68: const char *oidc_valid_http_url(apr_pool_t *pool, const char *arg);",
          "69: const char *oidc_valid_dir(apr_pool_t *pool, const char *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define OIDC_PKCE_METHOD_PLAIN        \"plain\"",
          "68: #define OIDC_PKCE_METHOD_S256         \"S256\"",
          "69: #define OIDC_PKCE_METHOD_REFERRED_TB  \"referred_tb\"",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:     authorization_request,",
          "467:     OIDC_PROTO_CODE_CHALLENGE,",
          "468:     oidc_util_escape_string(r, code_challenge),",
          "472:  if (json_object_get(proto_state, OIDC_PROTO_STATE_RESPONSE_MODE) != NULL)",
          "",
          "[Removed Lines]",
          "469:     OIDC_PROTO_CODE_CHALLENGE_METHOD, provider->pkce_method);",
          "",
          "[Added Lines]",
          "469:     OIDC_PROTO_CODE_CHALLENGE_METHOD, provider->pkce->method);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "574: }",
          "583: }",
          "612:  return TRUE;",
          "613: }",
          "",
          "[Removed Lines]",
          "579: apr_byte_t oidc_proto_generate_code_verifier(request_rec *r,",
          "580:   char **code_verifier, int len) {",
          "582:  return oidc_proto_generate_random_string(r, code_verifier, len);",
          "588: apr_byte_t oidc_proto_generate_code_challenge(request_rec *r,",
          "589:   const char *code_verifier, char **code_challenge,",
          "590:   const char *challenge_method) {",
          "592:  oidc_debug(r, \"enter: method=%s\", challenge_method);",
          "594:  if (code_verifier != NULL) {",
          "596:   if (apr_strnatcmp(challenge_method, \"plain\") == 0) {",
          "600:   } else if (apr_strnatcmp(challenge_method, \"S256\") == 0) {",
          "602:    if (oidc_util_hash_string_and_base64url_encode(r, \"sha256\",",
          "603:      code_verifier, code_challenge) == FALSE) {",
          "604:     oidc_error(r,",
          "605:       \"oidc_util_hash_string_and_base64url_encode returned an error for the code verifier\");",
          "606:     return FALSE;",
          "607:    }",
          "608:   }",
          "610:  }",
          "",
          "[Added Lines]",
          "579: static apr_byte_t oidc_proto_pkce_state_plain(request_rec *r, char **state) {",
          "580:  return oidc_proto_generate_random_string(r, state,",
          "581:    OIDC_PROTO_CODE_VERIFIER_LENGTH);",
          "587: static apr_byte_t oidc_proto_pkce_challenge_plain(request_rec *r,",
          "588:   const char *state, char **code_challenge) {",
          "590:  return TRUE;",
          "591: }",
          "596: static apr_byte_t oidc_proto_pkce_verifier_plain(request_rec *r,",
          "597:   const char *state, char **code_verifier) {",
          "599:  return TRUE;",
          "600: }",
          "605: static apr_byte_t oidc_proto_pkce_state_s256(request_rec *r, char **state) {",
          "606:  return oidc_proto_generate_random_string(r, state,",
          "607:    OIDC_PROTO_CODE_VERIFIER_LENGTH);",
          "608: }",
          "613: static apr_byte_t oidc_proto_pkce_challenge_s256(request_rec *r,",
          "614:   const char *state, char **code_challenge) {",
          "615:  if (oidc_util_hash_string_and_base64url_encode(r, \"sha256\", state,",
          "616:    code_challenge) == FALSE) {",
          "617:   oidc_error(r,",
          "618:     \"oidc_util_hash_string_and_base64url_encode returned an error for the code verifier\");",
          "619:   return FALSE;",
          "620:  }",
          "621:  return TRUE;",
          "622: }",
          "627: static apr_byte_t oidc_proto_pkce_verifier_s256(request_rec *r,",
          "628:   const char *state, char **code_verifier) {",
          "630:  return TRUE;",
          "631: }",
          "636: static apr_byte_t oidc_proto_pkce_state_referred_tb(request_rec *r,",
          "637:   char **state) {",
          "639:  return TRUE;",
          "640: }",
          "645: static apr_byte_t oidc_proto_pkce_challenge_referred_tb(request_rec *r,",
          "646:   const char *state, char **code_challenge) {",
          "649:  return TRUE;",
          "650: }",
          "655: static apr_byte_t oidc_proto_pkce_verifier_referred_tb(request_rec *r,",
          "656:   const char *state, char **code_verifier) {",
          "658:    apr_table_get(r->subprocess_env, OIDC_TB_CFG_PROVIDED_ENV_VAR));",
          "665: oidc_proto_pkce_t oidc_pkce_plain = {",
          "666:   OIDC_PKCE_METHOD_PLAIN,",
          "667:   oidc_proto_pkce_state_plain,",
          "668:   oidc_proto_pkce_verifier_plain,",
          "669:   oidc_proto_pkce_challenge_plain",
          "670: };",
          "675: oidc_proto_pkce_t oidc_pkce_s256 = {",
          "676:   OIDC_PKCE_METHOD_S256,",
          "677:   oidc_proto_pkce_state_s256,",
          "678:   oidc_proto_pkce_verifier_s256,",
          "679:   oidc_proto_pkce_challenge_s256",
          "680: };",
          "685: oidc_proto_pkce_t oidc_pkce_referred_tb = {",
          "686:   OIDC_PKCE_METHOD_REFERRED_TB,",
          "687:   oidc_proto_pkce_state_referred_tb,",
          "688:   oidc_proto_pkce_verifier_referred_tb,",
          "689:   oidc_proto_pkce_challenge_referred_tb",
          "690: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2325:  char *token_type = NULL;",
          "2326:  int expires_in = -1;",
          "2327:  char *refresh_token = NULL;",
          "2335:  const char *state =",
          "2336:    json_object_get(proto_state, OIDC_PROTO_STATE) ?",
          "",
          "[Removed Lines]",
          "2329:  const char *code_verifier =",
          "2330:    json_object_get(proto_state, OIDC_PROTO_CODE_VERIFIER) ?",
          "2331:      json_string_value(json_object_get(proto_state,",
          "2332:        OIDC_PROTO_CODE_VERIFIER)) :",
          "2333:        NULL;",
          "",
          "[Added Lines]",
          "2405:  const char *pkce_state = NULL;",
          "2406:  char *code_verifier = NULL;",
          "2408:  if (provider->pkce != NULL) {",
          "2409:   pkce_state =",
          "2410:     json_object_get(proto_state, OIDC_PROTO_STATE_PKCE) ?",
          "2411:       json_string_value(json_object_get(proto_state,",
          "2412:         OIDC_PROTO_STATE_PKCE)) :",
          "2413:         NULL;",
          "2414:   provider->pkce->verifier(r, pkce_state, &code_verifier);",
          "2415:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6581138b61147a3001f030193e528cd1a1d54930",
      "candidate_info": {
        "commit_hash": "6581138b61147a3001f030193e528cd1a1d54930",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/6581138b61147a3001f030193e528cd1a1d54930",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/config.c"
        ],
        "message": "avoid crash when no scheme is set on OIDCProviderMetadataURL\n\n- closes #303; thanks @iconoeugen\n- bump to 2.3.3rc1\n\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1814:       OIDCProviderAuthorizationEndpoint);",
          "1815:   } else {",
          "1816:    apr_uri_parse(s->process->pconf, c->provider.metadata_url, &r_uri);",
          "1818:     oidc_swarn(s,",
          "1819:       \"the URL scheme (%s) of the configured \" OIDCProviderMetadataURL \" SHOULD be \\\"https\\\" for security reasons!\",",
          "1820:       r_uri.scheme);",
          "",
          "[Removed Lines]",
          "1817:    if (apr_strnatcmp(r_uri.scheme, \"http\") == 0) {",
          "",
          "[Added Lines]",
          "1817:    if ((r_uri.scheme == NULL) || (apr_strnatcmp(r_uri.scheme, \"https\") != 0)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2201: const command_rec oidc_config_cmds[] = {",
          "2203:   AP_INIT_TAKE1(OIDCProviderMetadataURL,",
          "2205:     (void*)APR_OFFSETOF(oidc_cfg, provider.metadata_url),",
          "2206:     RSRC_CONF,",
          "2207:     \"OpenID Connect OP configuration metadata URL.\"),",
          "",
          "[Removed Lines]",
          "2204:     oidc_set_string_slot,",
          "",
          "[Added Lines]",
          "2204:     oidc_set_url_slot,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "508851de9e3985186b678b34a657b3df52bb29a0",
      "candidate_info": {
        "commit_hash": "508851de9e3985186b678b34a657b3df52bb29a0",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/508851de9e3985186b678b34a657b3df52bb29a0",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "add basic session info hook\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.1.7rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2850:  return DONE;",
          "2851: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2856: static int oidc_handle_info_request(request_rec *r, oidc_cfg *c,",
          "2857:   oidc_session_t *session) {",
          "2858:  char *format = NULL;",
          "2859:  oidc_util_get_request_parameter(r, \"info\", &format);",
          "2862:  if (apr_strnatcmp(\"json\", format) != 0) {",
          "2863:   oidc_warn(r, \"request for unknown format: %s\", format);",
          "2864:   return HTTP_NOT_FOUND;",
          "2865:  }",
          "2868:  if (session->remote_user == NULL) {",
          "2869:   oidc_warn(r, \"no user session found\");",
          "2870:   return HTTP_NOT_FOUND;",
          "2871:  }",
          "2874:  json_t *json = json_object();",
          "2876:  json_object_set_new(json, \"timestamp\",",
          "2877:    json_integer(apr_time_sec(apr_time_now())));",
          "2884:  apr_byte_t needs_save = oidc_refresh_claims_from_userinfo_endpoint(r, c,",
          "2885:    session);",
          "2888:  const char *access_token = NULL;",
          "2889:  oidc_session_get(r, session, OIDC_ACCESSTOKEN_SESSION_KEY, &access_token);",
          "2890:  if (access_token != NULL)",
          "2891:   json_object_set_new(json, \"access_token\", json_string(access_token));",
          "2894:  const char *access_token_expires = NULL;",
          "2895:  oidc_session_get(r, session, OIDC_ACCESSTOKEN_EXPIRES_SESSION_KEY,",
          "2896:    &access_token_expires);",
          "2897:  if (access_token_expires != NULL)",
          "2898:   json_object_set_new(json, \"access_token_expires\",",
          "2899:     json_string(access_token_expires));",
          "2901:  json_t *id_token = NULL, *claims = NULL;",
          "2902:  json_error_t json_error;",
          "2905:  const char *s_id_token = NULL;",
          "2906:  oidc_session_get(r, session, OIDC_IDTOKEN_CLAIMS_SESSION_KEY, &s_id_token);",
          "2907:  if (s_id_token != NULL) {",
          "2908:   id_token = json_loads(s_id_token, 0, &json_error);",
          "2909:   if (id_token == NULL)",
          "2910:    oidc_warn(r, \"JSON parsing (json_loads) failed: %s (%s)\",",
          "2911:      json_error.text, s_id_token);",
          "2912:   else",
          "2913:    json_object_set_new(json, \"id_token\", id_token);",
          "2914:  }",
          "2917:  const char *s_claims = NULL;",
          "2918:  oidc_session_get(r, session, OIDC_CLAIMS_SESSION_KEY, &s_claims);",
          "2919:  if (s_claims != NULL) {",
          "2920:   claims = json_loads(s_claims, 0, &json_error);",
          "2921:   if (claims == NULL)",
          "2922:    oidc_warn(r, \"JSON parsing (json_loads) failed: %s (%s)\",",
          "2923:      json_error.text, s_claims);",
          "2924:   else",
          "2925:    json_object_set_new(json, \"userinfo\", claims);",
          "2926:  }",
          "2929:  char *s_value = json_dumps(json, 0);",
          "2930:  char *r_value = apr_pstrdup(r->pool, s_value);",
          "2933:  free(s_value);",
          "2934:  json_decref(json);",
          "2937:  if (oidc_session_pass_tokens_and_save(r, c, session, needs_save) == FALSE) {",
          "2938:   oidc_warn(r, \"error saving session\");",
          "2939:   return HTTP_INTERNAL_SERVER_ERROR;",
          "2940:  }",
          "2943:  return oidc_util_http_send(r, r_value, strlen(r_value), \"application/json\",",
          "2944:    DONE);",
          "2945: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2902:   return oidc_handle_remove_at_cache(r, c);",
          "2904:  } else if ((r->args == NULL) || (apr_strnatcmp(r->args, \"\") == 0)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2998:  } else if (oidc_util_request_has_parameter(r, \"info\")) {",
          "3001:   return oidc_handle_info_request(r, c, session);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd5994ba3530521828212b7d0fb30d44653e5e9a",
      "candidate_info": {
        "commit_hash": "fd5994ba3530521828212b7d0fb30d44653e5e9a",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/fd5994ba3530521828212b7d0fb30d44653e5e9a",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "do bump to 2.2.1rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    }
  ]
}