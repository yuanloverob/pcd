{
  "cve_id": "CVE-2020-12135",
  "cve_desc": "bson before 0.8 incorrectly uses int rather than size_t for many variables, parameters, and return values. In particular, the bson_ensure_space() parameter bytesNeeded could have an integer overflow via properly constructed bson input.",
  "repo": "10gen-archive/mongo-c-driver-legacy",
  "patch_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
  "patch_info": {
    "commit_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
    "repo": "10gen-archive/mongo-c-driver-legacy",
    "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/1a1f5e26a4309480d88598913f9eebf9e9cba8ca#diff-f7d29a680148f52d6601f59ed787f577",
    "files": [
      "src/bcon.c",
      "src/bson.c",
      "src/bson.h",
      "src/encoding.c",
      "src/encoding.h",
      "src/env.c",
      "src/env.h",
      "src/gridfs.c",
      "src/gridfs.h",
      "src/mongo.c"
    ],
    "message": "don't mix up int and size_t (first pass to fix that)",
    "before_after_code_files": [
      "src/bcon.c||src/bcon.c",
      "src/bson.c||src/bson.c",
      "src/bson.h||src/bson.h",
      "src/encoding.c||src/encoding.c",
      "src/encoding.h||src/encoding.h",
      "src/env.c||src/env.c",
      "src/env.h||src/env.h",
      "src/gridfs.c||src/gridfs.c",
      "src/gridfs.h||src/gridfs.h",
      "src/mongo.c||src/mongo.c"
    ]
  },
  "patch_diff": {
    "src/bcon.c||src/bcon.c": [
      "File: src/bcon.c -> src/bcon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:     unsigned char doc_stack[DOC_STACK_SIZE];",
      "173:     size_t doc_stack_pointer = 0;",
      "174:     size_t array_index = 0;",
      "176:     size_t array_index_stack_pointer = 0;",
      "178:     int end_of_data;",
      "",
      "[Removed Lines]",
      "175:     unsigned int array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "[Added Lines]",
      "175:     size_t array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "---------------"
    ],
    "src/bson.c||src/bson.c": [
      "File: src/bson.c -> src/bson.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     return i;",
      "107: }",
      "110:     return (b->cur - b->data + 1);",
      "111: }",
      "",
      "[Removed Lines]",
      "109: MONGO_EXPORT int bson_buffer_size( const bson *b ) {",
      "",
      "[Added Lines]",
      "109: MONGO_EXPORT size_t bson_buffer_size( const bson *b ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306: }",
      "308: MONGO_EXPORT bson_type bson_iterator_next( bson_iterator *i ) {",
      "311:     if ( i->first ) {",
      "312:         i->first = 0;",
      "",
      "[Removed Lines]",
      "309:     int ds;",
      "",
      "[Added Lines]",
      "309:     size_t ds;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420:     case BSON_INT:",
      "421:         return bson_iterator_int_raw( i );",
      "422:     case BSON_LONG:",
      "424:     case BSON_DOUBLE:",
      "425:         return bson_iterator_double_raw( i );",
      "426:     default:",
      "",
      "[Removed Lines]",
      "423:         return bson_iterator_long_raw( i );",
      "",
      "[Added Lines]",
      "423:         return ( int )bson_iterator_long_raw( i );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "604:     b->cur++;",
      "605: }",
      "608:     memcpy( b->cur , data , len );",
      "609:     b->cur += len;",
      "610: }",
      "",
      "[Removed Lines]",
      "607: static void bson_append( bson *b, const void *data, int len ) {",
      "",
      "[Added Lines]",
      "607: static void bson_append( bson *b, const void *data, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "614:     b->cur += 4;",
      "615: }",
      "617: static void bson_append64( bson *b, const void *data ) {",
      "618:     bson_little_endian64( b->cur, data );",
      "619:     b->cur += 8;",
      "620: }",
      "623:     int pos = b->cur - b->data;",
      "624:     char *orig = b->data;",
      "625:     int new_size;",
      "",
      "[Removed Lines]",
      "622: int bson_ensure_space( bson *b, const int bytesNeeded ) {",
      "",
      "[Added Lines]",
      "617: static void bson_append32_as_int( bson *b, int data ) {",
      "618:     bson_little_endian32( b->cur, &data );",
      "619:     b->cur += 4;",
      "620: }",
      "627: int bson_ensure_space( bson *b, const size_t bytesNeeded ) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "657:     if ( ! b->finished ) {",
      "658:         if ( bson_ensure_space( b, 1 ) == BSON_ERROR ) return BSON_ERROR;",
      "659:         bson_append_byte( b, 0 );",
      "661:         bson_little_endian32( b->data, &i );",
      "662:         b->finished = 1;",
      "663:     }",
      "",
      "[Removed Lines]",
      "660:         i = b->cur - b->data;",
      "",
      "[Added Lines]",
      "665:         i = ( int )( b->cur - b->data );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "675:     }",
      "676: }",
      "679:     const int len = strlen( name ) + 1;",
      "681:     if ( b->finished ) {",
      "",
      "[Removed Lines]",
      "678: static int bson_append_estart( bson *b, int type, const char *name, const int dataSize ) {",
      "",
      "[Added Lines]",
      "683: static int bson_append_estart( bson *b, int type, const char *name, const size_t dataSize ) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "742: }",
      "744: static int bson_append_string_base( bson *b, const char *name,",
      "748:     if ( bson_check_string( b, ( const char * )value, sl - 1 ) == BSON_ERROR )",
      "749:         return BSON_ERROR;",
      "750:     if ( bson_append_estart( b, type, name, 4 + sl ) == BSON_ERROR ) {",
      "751:         return BSON_ERROR;",
      "752:     }",
      "754:     bson_append( b , value , sl - 1 );",
      "755:     bson_append( b , \"\\0\" , 1 );",
      "756:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "745:                                     const char *value, int len, bson_type type ) {",
      "747:     int sl = len + 1;",
      "753:     bson_append32( b , &sl );",
      "",
      "[Added Lines]",
      "750:                                     const char *value, size_t len, bson_type type ) {",
      "752:     size_t sl = len + 1;",
      "758:     bson_append32_as_int( b , ( int )sl );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "768:     return bson_append_string_base( b, name, value, strlen ( value ), BSON_CODE );",
      "769: }",
      "772:     return bson_append_string_base( b, name, value, len, BSON_STRING );",
      "773: }",
      "776:     return bson_append_string_base( b, name, value, len, BSON_SYMBOL );",
      "777: }",
      "780:     return bson_append_string_base( b, name, value, len, BSON_CODE );",
      "781: }",
      "783: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name,",
      "787:     if ( !scope ) return BSON_ERROR;",
      "788:     sl = len + 1;",
      "789:     size = 4 + 4 + sl + bson_size( scope );",
      "790:     if ( bson_append_estart( b, BSON_CODEWSCOPE, name, size ) == BSON_ERROR )",
      "791:         return BSON_ERROR;",
      "793:     bson_append32( b, &sl );",
      "794:     bson_append( b, code, sl );",
      "795:     bson_append( b, scope->data, bson_size( scope ) );",
      "",
      "[Removed Lines]",
      "771: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, int len ) {",
      "775: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, int len ) {",
      "779: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, int len ) {",
      "784:         const char *code, int len, const bson *scope ) {",
      "786:     int sl, size;",
      "792:     bson_append32( b, &size );",
      "",
      "[Added Lines]",
      "776: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, size_t len ) {",
      "780: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, size_t len ) {",
      "784: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, size_t len ) {",
      "789:         const char *code, size_t len, const bson *scope ) {",
      "791:     size_t sl, size;",
      "797:     bson_append32_as_int( b, ( int )size );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "800:     return bson_append_code_w_scope_n( b, name, code, strlen ( code ), scope );",
      "801: }",
      "804:     if ( type == BSON_BIN_BINARY_OLD ) {",
      "805:         int subtwolen = len + 4;",
      "806:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+4+len ) == BSON_ERROR )",
      "807:             return BSON_ERROR;",
      "809:         bson_append_byte( b, type );",
      "811:         bson_append( b, str, len );",
      "812:     }",
      "813:     else {",
      "814:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+len ) == BSON_ERROR )",
      "815:             return BSON_ERROR;",
      "817:         bson_append_byte( b, type );",
      "818:         bson_append( b, str, len );",
      "819:     }",
      "",
      "[Removed Lines]",
      "803: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len ) {",
      "808:         bson_append32( b, &subtwolen );",
      "810:         bson_append32( b, &len );",
      "816:         bson_append32( b, &len );",
      "",
      "[Added Lines]",
      "808: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len ) {",
      "813:         bson_append32_as_int( b, ( int )subtwolen );",
      "815:         bson_append32_as_int( b, ( int )len );",
      "821:         bson_append32_as_int( b, ( int )len );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "834: }",
      "836: MONGO_EXPORT int bson_append_regex( bson *b, const char *name, const char *pattern, const char *opts ) {",
      "839:     if ( bson_append_estart( b, BSON_REGEX, name, plen + olen ) == BSON_ERROR )",
      "840:         return BSON_ERROR;",
      "841:     if ( bson_check_string( b, pattern, plen - 1 ) == BSON_ERROR )",
      "",
      "[Removed Lines]",
      "837:     const int plen = strlen( pattern )+1;",
      "838:     const int olen = strlen( opts )+1;",
      "",
      "[Added Lines]",
      "842:     const size_t plen = strlen( pattern )+1;",
      "843:     const size_t olen = strlen( opts )+1;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "856: MONGO_EXPORT int bson_append_element( bson *b, const char *name_or_null, const bson_iterator *elem ) {",
      "857:     bson_iterator next = *elem;",
      "860:     bson_iterator_next( &next );",
      "861:     size = next.cur - elem->cur;",
      "",
      "[Removed Lines]",
      "858:     int size;",
      "",
      "[Added Lines]",
      "863:     size_t size;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "866:         bson_append( b, elem->cur, size );",
      "867:     }",
      "868:     else {",
      "870:         bson_append_estart( b, elem->cur[0], name_or_null, data_size );",
      "871:         bson_append( b, bson_iterator_value( elem ), data_size );",
      "872:     }",
      "",
      "[Removed Lines]",
      "869:         int data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "[Added Lines]",
      "874:         size_t data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "922:     bson_append_byte( b , 0 );",
      "924:     start = b->data + b->stack[ --b->stackPos ];",
      "926:     bson_little_endian32( start, &i );",
      "928:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "925:     i = b->cur - start;",
      "",
      "[Added Lines]",
      "930:     i = ( int )( b->cur - start );",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "950:     bson_free_func( ptr );",
      "951: }",
      "954:     void *p;",
      "955:     p = bson_malloc_func( size );",
      "956:     bson_fatal_msg( !!p, \"malloc() failed\" );",
      "957:     return p;",
      "958: }",
      "961:     void *p;",
      "962:     p = bson_realloc_func( ptr, size );",
      "963:     bson_fatal_msg( !!p, \"realloc() failed\" );",
      "",
      "[Removed Lines]",
      "953: MONGO_EXPORT void *bson_malloc( int size ) {",
      "960: void *bson_realloc( void *ptr, int size ) {",
      "",
      "[Added Lines]",
      "958: MONGO_EXPORT void *bson_malloc( size_t size ) {",
      "965: void *bson_realloc( void *ptr, size_t size ) {",
      "",
      "---------------"
    ],
    "src/bson.h||src/bson.h": [
      "File: src/bson.h -> src/bson.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "172: MONGO_EXPORT int bson_size( const bson *b );",
      "",
      "[Removed Lines]",
      "173: MONGO_EXPORT int bson_buffer_size( const bson *b );",
      "",
      "[Added Lines]",
      "173: MONGO_EXPORT size_t bson_buffer_size( const bson *b );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "605: int bson_ensure_space( bson *b, const int bytesNeeded );",
      "",
      "[Added Lines]",
      "605: int bson_ensure_space( bson *b, const size_t bytesNeeded );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, int size, const bson *scope );",
      "",
      "[Added Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, size_t size, const bson *scope );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len );",
      "",
      "[Added Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "980: MONGO_EXPORT void *bson_malloc( int size );",
      "",
      "[Added Lines]",
      "980: MONGO_EXPORT void *bson_malloc( size_t size );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "993: void *bson_realloc( void *ptr, int size );",
      "",
      "[Added Lines]",
      "993: void *bson_realloc( void *ptr, size_t size );",
      "",
      "---------------"
    ],
    "src/encoding.c||src/encoding.c": [
      "File: src/encoding.c -> src/encoding.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102: }",
      "106:     int result = 0;",
      "108:     if( length >= 4 ) {",
      "",
      "[Removed Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const int length ) {",
      "",
      "[Added Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const size_t length ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120: }",
      "122: static int bson_validate_string( bson *b, const unsigned char *string,",
      "124:                                  const char check_dollar ) {",
      "127:     int sequence_length = 1;",
      "129:     if( check_dollar && string[0] == '$' ) {",
      "",
      "[Removed Lines]",
      "123:                                  const int length, const char check_utf8, const char check_dot,",
      "126:     int position = 0;",
      "",
      "[Added Lines]",
      "123:                                  const size_t length, const char check_utf8, const char check_dot,",
      "126:     size_t position = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "157: int bson_check_string( bson *b, const char *string,",
      "160:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 0, 0 );",
      "161: }",
      "163: int bson_check_field_name( bson *b, const char *string,",
      "166:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 1, 1 );",
      "167: }",
      "",
      "[Removed Lines]",
      "158:                        const int length ) {",
      "164:                            const int length ) {",
      "",
      "[Added Lines]",
      "158:                        const size_t length ) {",
      "164:                            const size_t length ) {",
      "",
      "---------------"
    ],
    "src/encoding.h||src/encoding.h": [
      "File: src/encoding.h -> src/encoding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: int bson_check_field_name( bson *b, const char *string,",
      "",
      "[Removed Lines]",
      "38:                            const int length );",
      "",
      "[Added Lines]",
      "38:                            const size_t length );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50: bson_bool_t bson_check_string( bson *b, const char *string,",
      "53: MONGO_EXTERN_C_END",
      "54: #endif",
      "",
      "[Removed Lines]",
      "51:                                const int length );",
      "",
      "[Added Lines]",
      "51:                                const size_t length );",
      "",
      "---------------"
    ],
    "src/env.c||src/env.c": [
      "File: src/env.c -> src/env.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     return closesocket( socket );",
      "39: }",
      "42:     const char *cbuf = buf;",
      "43:     int flags = 0;",
      "45:     while ( len ) {",
      "47:         if ( sent == -1 ) {",
      "48:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "49:             conn->connected = 0;",
      "",
      "[Removed Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "46:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "46:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     return MONGO_OK;",
      "57: }",
      "60:     char *cbuf = buf;",
      "62:     while ( len ) {",
      "64:         if ( sent == 0 || sent == -1 ) {",
      "65:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "66:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "63:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "63:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "225:     return 0;",
      "226: }",
      "229:     const char *cbuf = buf;",
      "230: #ifdef __APPLE__",
      "231:     int flags = 0;",
      "",
      "[Removed Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "234: #endif",
      "236:     while ( len ) {",
      "238:         if ( sent == -1 ) {",
      "239:             if (errno == EPIPE)",
      "240:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "237:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "237:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "248:     return MONGO_OK;",
      "249: }",
      "252:     char *cbuf = buf;",
      "253:     while ( len ) {",
      "255:         if ( sent == 0 || sent == -1 ) {",
      "256:             __mongo_set_error( conn, MONGO_IO_ERROR, strerror( errno ), errno );",
      "257:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "254:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "254:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "443: #endif",
      "444: }",
      "447:     const char *cbuf = buf;",
      "448: #ifdef _WIN32",
      "449:     int flags = 0;",
      "",
      "[Removed Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "456: #endif",
      "458:     while ( len ) {",
      "460:         if ( sent == -1 ) {",
      "461:             if (errno == EPIPE)",
      "462:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "459:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "459:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "470:     return MONGO_OK;",
      "471: }",
      "474:     char *cbuf = buf;",
      "475:     while ( len ) {",
      "477:         if ( sent == 0 || sent == -1 ) {",
      "478:             conn->err = MONGO_IO_ERROR;",
      "479:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "476:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "476:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------"
    ],
    "src/env.h||src/env.h": [
      "File: src/env.h -> src/env.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: int mongo_env_set_socket_op_timeout( mongo *conn, int millis );",
      "30: int mongo_env_socket_connect( mongo *conn, const char *host, int port );",
      "",
      "[Removed Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, int len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, int len );",
      "",
      "[Added Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, size_t len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len );",
      "",
      "---------------"
    ],
    "src/gridfs.c||src/gridfs.c": [
      "File: src/gridfs.c -> src/gridfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "228: MONGO_EXPORT void gridfile_write_buffer( gridfile *gfile, const char *data,",
      "229:         gridfs_offset length ) {",
      "234:     char *buffer;",
      "235:     bson *oChunk;",
      "236:     gridfs_offset to_write = length + gfile->pending_len;",
      "",
      "[Removed Lines]",
      "231:     int bytes_left = 0;",
      "232:     int data_partial_len = 0;",
      "233:     int chunks_to_write = 0;",
      "",
      "[Added Lines]",
      "231:     size_t bytes_left = 0;",
      "232:     size_t data_partial_len = 0;",
      "233:     size_t chunks_to_write = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "590:     }",
      "591: }",
      "594:     bson_iterator it;",
      "595:     bson_oid_t id;",
      "596:     bson gte;",
      "",
      "[Removed Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size ) {",
      "",
      "[Added Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "605:     bson_init( &query );",
      "606:     bson_append_oid( &query, \"files_id\", &id );",
      "607:     if ( size == 1 ) {",
      "609:     }",
      "610:     else {",
      "611:         bson_init( &gte );",
      "613:         bson_finish( &gte );",
      "614:         bson_append_bson( &query, \"n\", &gte );",
      "615:         bson_destroy( &gte );",
      "",
      "[Removed Lines]",
      "608:         bson_append_int( &query, \"n\", start );",
      "612:         bson_append_int( &gte, \"$gte\", start );",
      "",
      "[Added Lines]",
      "608:         bson_append_int( &query, \"n\", (int)start );",
      "612:         bson_append_int( &gte, \"$gte\", (int)start );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "626:     bson_finish( &command );",
      "628:     cursor = mongo_find( gfile->gfs->client, gfile->gfs->chunks_ns,",
      "631:     bson_destroy( &command );",
      "632:     bson_destroy( &query );",
      "",
      "[Removed Lines]",
      "629:                          &command, NULL, size, 0, 0 );",
      "",
      "[Added Lines]",
      "629:                          &command, NULL, (int)size, 0, 0 );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:     mongo_cursor *chunks;",
      "660:     bson chunk;",
      "665:     gridfs_offset chunksize;",
      "666:     gridfs_offset contentlength;",
      "667:     gridfs_offset bytes_left;",
      "",
      "[Removed Lines]",
      "662:     int first_chunk;",
      "663:     int last_chunk;",
      "664:     int total_chunks;",
      "",
      "[Added Lines]",
      "662:     size_t first_chunk;",
      "663:     size_t last_chunk;",
      "664:     size_t total_chunks;",
      "",
      "---------------"
    ],
    "src/gridfs.h||src/gridfs.h": [
      "File: src/gridfs.h -> src/gridfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size );",
      "",
      "[Added Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size );",
      "",
      "---------------"
    ],
    "src/mongo.c||src/mongo.c": [
      "File: src/mongo.c -> src/mongo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err, const char *str,",
      "114:                                      int errcode ) {",
      "117:     conn->err = err;",
      "118:     conn->errcode = errcode;",
      "",
      "[Removed Lines]",
      "115:     int errstr_size, str_size;",
      "",
      "[Added Lines]",
      "115:     size_t errstr_size, str_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "266: static const int ZERO = 0;",
      "267: static const int ONE = 1;",
      "269:     mongo_message *mm = ( mongo_message * )bson_malloc( len );",
      "271:     if ( !id )",
      "272:         id = rand();",
      "276:     mm->head.id = id;",
      "277:     mm->head.responseTo = responseTo;",
      "278:     mm->head.op = op;",
      "",
      "[Removed Lines]",
      "268: static mongo_message *mongo_message_create( int len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = len;",
      "",
      "[Added Lines]",
      "268: static mongo_message *mongo_message_create( size_t len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = ( int )len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "344: }",
      "348:     memcpy( start , data , len );",
      "349:     return start + len;",
      "350: }",
      "",
      "[Removed Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , int len ) {",
      "",
      "[Added Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "900:     mongo_write_concern *write_concern = NULL;",
      "901:     int i;",
      "902:     char *data;",
      "906:     if( mongo_validate_ns( conn, ns ) != MONGO_OK )",
      "907:         return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "903:     int overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     int size = overhead;",
      "",
      "[Added Lines]",
      "903:     size_t overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     size_t size = overhead;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1204:     }",
      "1205:     else {",
      "1206:         char *data;",
      "1208:         int limit = 0;",
      "1209:         mongo_message *mm;",
      "",
      "[Removed Lines]",
      "1207:         int sl = strlen( cursor->ns )+1;",
      "",
      "[Added Lines]",
      "1207:         size_t sl = strlen( cursor->ns )+1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1516:     int ret = MONGO_OK;",
      "1517:     bson response = {NULL, 0};",
      "1518:     bson fields;",
      "1521:     int res, success = 0;",
      "",
      "[Removed Lines]",
      "1519:     int sl = strlen( db );",
      "",
      "[Added Lines]",
      "1519:     size_t sl = strlen( db );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1674:     mongo_md5_byte_t digest[16];",
      "1676:     mongo_md5_init( &st );",
      "1678:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )\":mongo:\", 7 );",
      "1680:     mongo_md5_finish( &st, digest );",
      "1681:     digest2hex( digest, hex_digest );",
      "1682: }",
      "",
      "[Removed Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );",
      "",
      "[Added Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, ( int )strlen( pass ) );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1734:     mongo_pass_digest( user, pass, hex_digest );",
      "1736:     mongo_md5_init( &st );",
      "1739:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )hex_digest, 32 );",
      "1740:     mongo_md5_finish( &st, digest );",
      "1741:     digest2hex( digest, hex_digest );",
      "",
      "[Removed Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "",
      "[Added Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, ( int )strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d91de65c371204743b43eb6e231f704e17a7d5d",
      "candidate_info": {
        "commit_hash": "9d91de65c371204743b43eb6e231f704e17a7d5d",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/9d91de65c371204743b43eb6e231f704e17a7d5d",
        "files": [
          "src/bson.c",
          "src/gridfs.c",
          "src/gridfs.h",
          "src/mongo.h"
        ],
        "message": "forgot that too...",
        "before_after_code_files": [
          "src/bson.c||src/bson.c",
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h",
          "src/mongo.h||src/mongo.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bson.c||src/bson.c",
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/bson.c||src/bson.c",
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/bson.c||src/bson.c": [
          "File: src/bson.c -> src/bson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "625: }",
          "627: int bson_ensure_space( bson *b, const size_t bytesNeeded ) {",
          "629:     char *orig = b->data;",
          "630:     int new_size;",
          "",
          "[Removed Lines]",
          "628:     int pos = b->cur - b->data;",
          "",
          "[Added Lines]",
          "628:     size_t pos = b->cur - b->data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681: }",
          "683: static int bson_append_estart( bson *b, int type, const char *name, const size_t dataSize ) {",
          "686:     if ( b->finished ) {",
          "687:         b->err |= BSON_ALREADY_FINISHED;",
          "",
          "[Removed Lines]",
          "684:     const int len = strlen( name ) + 1;",
          "",
          "[Added Lines]",
          "684:     const size_t len = strlen( name ) + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "808: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len ) {",
          "809:     if ( type == BSON_BIN_BINARY_OLD ) {",
          "811:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+4+len ) == BSON_ERROR )",
          "812:             return BSON_ERROR;",
          "813:         bson_append32_as_int( b, ( int )subtwolen );",
          "",
          "[Removed Lines]",
          "810:         int subtwolen = len + 4;",
          "",
          "[Added Lines]",
          "810:         size_t subtwolen = len + 4;",
          "",
          "---------------"
        ],
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: static bson *chunk_new( bson_oid_t id, int chunkNumber,",
          "47:     bson *b = bson_malloc( sizeof( bson ) );",
          "49:     bson_init( b );",
          "",
          "[Removed Lines]",
          "46:                         const char *data, int len ) {",
          "",
          "[Added Lines]",
          "46:                         const char *data, size_t len ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "590:     }",
          "591: }",
          "594:     bson_iterator it;",
          "595:     bson_oid_t id;",
          "596:     bson gte;",
          "",
          "[Removed Lines]",
          "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size ) {",
          "",
          "[Added Lines]",
          "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, size_t start, size_t size ) {",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size );",
          "",
          "[Added Lines]",
          "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, size_t start, size_t size );",
          "",
          "---------------"
        ],
        "src/mongo.h||src/mongo.h": [
          "File: src/mongo.h -> src/mongo.h"
        ]
      }
    },
    {
      "candidate_hash": "8ed72fc3c244d6e55dffeef798a5c50e4c226dc5",
      "candidate_info": {
        "commit_hash": "8ed72fc3c244d6e55dffeef798a5c50e4c226dc5",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/8ed72fc3c244d6e55dffeef798a5c50e4c226dc5",
        "files": [
          "src/gridfs.c",
          "test/gridfs_test.c"
        ],
        "message": "Added code with enhanced GridFS. Added tests for random writing",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "test/gridfs_test.c||test/gridfs_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #endif",
          "22: #include \"gridfs.h\"",
          "",
          "[Removed Lines]",
          "18: #ifdef _MSC_VER",
          "19: #define _CRT_SECURE_NO_WARNINGS",
          "",
          "[Added Lines]",
          "19: #if _MSC_VER && ! _CRT_SECURE_NO_WARNINGS",
          "20:   #define _CRT_SECURE_NO_WARNINGS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <assert.h>",
          "30: }",
          "34: }",
          "38: }",
          "42: }",
          "46: }",
          "59: }",
          "64: }",
          "130: }",
          "138: }",
          "213: }",
          "230: }",
          "301: }",
          "325: }",
          "344:     }",
          "370:     }",
          "412: }",
          "442: }",
          "447: {",
          "457: }",
          "468: }",
          "475: }",
          "479: }",
          "486: }",
          "493: }",
          "504: }",
          "512: }",
          "519: }",
          "526: }",
          "533: }",
          "540: }",
          "549: }",
          "570: }",
          "592:     }",
          "593: }",
          "705:     }",
          "711: }",
          "719: }",
          "",
          "[Removed Lines]",
          "28: MONGO_EXPORT gridfs* gridfs_create( void ) {",
          "29:     return (gridfs*)bson_malloc(sizeof(gridfs));",
          "32: MONGO_EXPORT void gridfs_dispose(gridfs* gfs) {",
          "33:     bson_free(gfs);",
          "36: MONGO_EXPORT gridfile* gridfile_create( void ) {",
          "37:     return (gridfile*)bson_malloc(sizeof(gridfile));",
          "40: MONGO_EXPORT void gridfile_dispose(gridfile* gf) {",
          "41:     bson_free(gf);",
          "44: MONGO_EXPORT void gridfile_get_descriptor(gridfile* gf, bson* out) {",
          "49: static bson *chunk_new( bson_oid_t id, int chunkNumber,",
          "50:                         const char *data, size_t len ) {",
          "51:     bson *b = bson_create();",
          "53:     bson_init( b );",
          "54:     bson_append_oid( b, \"files_id\", &id );",
          "55:     bson_append_int( b, \"n\", chunkNumber );",
          "56:     bson_append_binary( b, \"data\", BSON_BIN_BINARY, data, len );",
          "57:     bson_finish( b );",
          "58:     return  b;",
          "61: static void chunk_free( bson *oChunk ) {",
          "62:     bson_destroy( oChunk );",
          "63:     bson_dispose( oChunk );",
          "66: int gridfs_init( mongo *client, const char *dbname, const char *prefix,",
          "67:                  gridfs *gfs ) {",
          "69:     int options;",
          "70:     bson b;",
          "71:     bson_bool_t success;",
          "73:     gfs->client = client;",
          "76:     gfs->dbname = ( const char * )bson_malloc( strlen( dbname )+1 );",
          "77:     strcpy( ( char * )gfs->dbname, dbname );",
          "80:     if ( prefix == NULL ) prefix = \"fs\";",
          "81:     gfs->prefix = ( const char * )bson_malloc( strlen( prefix )+1 );",
          "82:     strcpy( ( char * )gfs->prefix, prefix );",
          "85:     gfs->files_ns =",
          "86:         ( const char * ) bson_malloc ( strlen( prefix )+strlen( dbname )+strlen( \".files\" )+2 );",
          "87:     strcpy( ( char * )gfs->files_ns, dbname );",
          "88:     strcat( ( char * )gfs->files_ns, \".\" );",
          "89:     strcat( ( char * )gfs->files_ns, prefix );",
          "90:     strcat( ( char * )gfs->files_ns, \".files\" );",
          "93:     gfs->chunks_ns = ( const char * ) bson_malloc( strlen( prefix ) + strlen( dbname )",
          "94:                      + strlen( \".chunks\" ) + 2 );",
          "95:     strcpy( ( char * )gfs->chunks_ns, dbname );",
          "96:     strcat( ( char * )gfs->chunks_ns, \".\" );",
          "97:     strcat( ( char * )gfs->chunks_ns, prefix );",
          "98:     strcat( ( char * )gfs->chunks_ns, \".chunks\" );",
          "100:     bson_init( &b );",
          "101:     bson_append_int( &b, \"filename\", 1 );",
          "102:     bson_finish( &b );",
          "103:     options = 0;",
          "104:     success = ( mongo_create_index( gfs->client, gfs->files_ns, &b, NULL, options, NULL ) == MONGO_OK );",
          "105:     bson_destroy( &b );",
          "106:     if ( !success ) {",
          "107:         bson_free( ( char * )gfs->dbname );",
          "108:         bson_free( ( char * )gfs->prefix );",
          "109:         bson_free( ( char * )gfs->files_ns );",
          "110:         bson_free( ( char * )gfs->chunks_ns );",
          "111:         return MONGO_ERROR;",
          "112:     }",
          "114:     bson_init( &b );",
          "115:     bson_append_int( &b, \"files_id\", 1 );",
          "116:     bson_append_int( &b, \"n\", 1 );",
          "117:     bson_finish( &b );",
          "118:     options = MONGO_INDEX_UNIQUE;",
          "119:     success = ( mongo_create_index( gfs->client, gfs->chunks_ns, &b, NULL, options, NULL ) == MONGO_OK );",
          "120:     bson_destroy( &b );",
          "121:     if ( !success ) {",
          "122:         bson_free( ( char * )gfs->dbname );",
          "123:         bson_free( ( char * )gfs->prefix );",
          "124:         bson_free( ( char * )gfs->files_ns );",
          "125:         bson_free( ( char * )gfs->chunks_ns );",
          "126:         return MONGO_ERROR;",
          "127:     }",
          "129:     return MONGO_OK;",
          "132: MONGO_EXPORT void gridfs_destroy( gridfs *gfs ) {",
          "133:     if ( gfs == NULL ) return;",
          "134:     if ( gfs->dbname ) bson_free( ( char * )gfs->dbname );",
          "135:     if ( gfs->prefix ) bson_free( ( char * )gfs->prefix );",
          "136:     if ( gfs->files_ns ) bson_free( ( char * )gfs->files_ns );",
          "137:     if ( gfs->chunks_ns ) bson_free( ( char * )gfs->chunks_ns );",
          "140: static int gridfs_insert_file( gridfs *gfs, const char *name,",
          "141:                                const bson_oid_t id, gridfs_offset length,",
          "142:                                const char *contenttype ) {",
          "143:     bson command;",
          "144:     bson ret;",
          "145:     bson res;",
          "146:     bson_iterator it;",
          "147:     int result;",
          "148:     int64_t d;",
          "151:     bson_init( &command );",
          "152:     bson_append_oid( &command, \"filemd5\", &id );",
          "153:     bson_append_string( &command, \"root\", gfs->prefix );",
          "154:     bson_finish( &command );",
          "155:     result = mongo_run_command( gfs->client, gfs->dbname, &command, &res );",
          "156:     bson_destroy( &command );",
          "157:     if (result != MONGO_OK)",
          "158:         return result;",
          "161:     bson_init( &ret );",
          "162:     bson_append_oid( &ret, \"_id\", &id );",
          "163:     if ( name != NULL && *name != '\\0' ) {",
          "164:         bson_append_string( &ret, \"filename\", name );",
          "165:     }",
          "166:     bson_append_long( &ret, \"length\", length );",
          "167:     bson_append_int( &ret, \"chunkSize\", DEFAULT_CHUNK_SIZE );",
          "168:     d = ( bson_date_t )1000*time( NULL );",
          "169:     bson_append_date( &ret, \"uploadDate\", d);",
          "170:     bson_find( &it, &res, \"md5\" );",
          "171:     bson_append_string( &ret, \"md5\", bson_iterator_string( &it ) );",
          "172:     bson_destroy( &res );",
          "173:     if ( contenttype != NULL && *contenttype != '\\0' ) {",
          "174:         bson_append_string( &ret, \"contentType\", contenttype );",
          "175:     }",
          "176:     bson_finish( &ret );",
          "177:     result = mongo_insert( gfs->client, gfs->files_ns, &ret, NULL );",
          "178:     bson_destroy( &ret );",
          "180:     return result;",
          "181: }",
          "183: MONGO_EXPORT int gridfs_store_buffer( gridfs *gfs, const char *data,",
          "184:                                       gridfs_offset length, const char *remotename,",
          "185:                                       const char *contenttype ) {",
          "187:     char const *end = data + length;",
          "188:     const char *data_ptr = data;",
          "189:     bson_oid_t id;",
          "190:     int chunkNumber = 0;",
          "191:     int chunkLen;",
          "192:     bson *oChunk;",
          "198:     bson_oid_gen( &id );",
          "201:     while ( data_ptr < end ) {",
          "202:         chunkLen = DEFAULT_CHUNK_SIZE < ( unsigned int )( end - data_ptr ) ?",
          "203:                    DEFAULT_CHUNK_SIZE : ( unsigned int )( end - data_ptr );",
          "204:         oChunk = chunk_new( id, chunkNumber, data_ptr, chunkLen );",
          "205:         mongo_insert( gfs->client, gfs->chunks_ns, oChunk, NULL );",
          "206:         chunk_free( oChunk );",
          "207:         chunkNumber++;",
          "208:         data_ptr += chunkLen;",
          "209:     }",
          "212:     return gridfs_insert_file( gfs, remotename, id, length, contenttype );",
          "215: MONGO_EXPORT void gridfile_writer_init( gridfile *gfile, gridfs *gfs,",
          "216:                                         const char *remote_name, const char *content_type ) {",
          "217:     gfile->gfs = gfs;",
          "219:     bson_oid_gen( &( gfile->id ) );",
          "220:     gfile->chunk_num = 0;",
          "221:     gfile->length = 0;",
          "222:     gfile->pending_len = 0;",
          "223:     gfile->pending_data = NULL;",
          "225:     gfile->remote_name = ( char * )bson_malloc( strlen( remote_name ) + 1 );",
          "226:     strcpy( ( char * )gfile->remote_name, remote_name );",
          "228:     gfile->content_type = ( char * )bson_malloc( strlen( content_type ) + 1 );",
          "229:     strcpy( ( char * )gfile->content_type, content_type );",
          "232: MONGO_EXPORT void gridfile_write_buffer( gridfile *gfile, const char *data,",
          "233:         gridfs_offset length ) {",
          "235:     size_t bytes_left = 0;",
          "236:     size_t data_partial_len = 0;",
          "237:     size_t chunks_to_write = 0;",
          "238:     char *buffer;",
          "239:     bson *oChunk;",
          "240:     gridfs_offset to_write = length + gfile->pending_len;",
          "243:         if( gfile->pending_data ) {",
          "244:             gfile->pending_data = ( char * )bson_realloc( ( void * )gfile->pending_data, gfile->pending_len + to_write );",
          "245:             memcpy( gfile->pending_data + gfile->pending_len, data, length );",
          "246:         }",
          "247:         else if ( to_write > 0 ) {",
          "248:             gfile->pending_data = ( char * )bson_malloc( to_write );",
          "249:             memcpy( gfile->pending_data, data, length );",
          "250:         }",
          "251:         gfile->pending_len += length;",
          "253:     }",
          "255:         chunks_to_write = to_write / DEFAULT_CHUNK_SIZE;",
          "256:         bytes_left = to_write % DEFAULT_CHUNK_SIZE;",
          "261:         if ( gfile->pending_len > 0 ) {",
          "262:             data_partial_len = DEFAULT_CHUNK_SIZE - gfile->pending_len;",
          "263:             buffer = ( char * )bson_malloc( DEFAULT_CHUNK_SIZE );",
          "264:             memcpy( buffer, gfile->pending_data, gfile->pending_len );",
          "265:             memcpy( buffer + gfile->pending_len, data, data_partial_len );",
          "267:             oChunk = chunk_new( gfile->id, gfile->chunk_num, buffer, DEFAULT_CHUNK_SIZE );",
          "268:             mongo_insert( gfile->gfs->client, gfile->gfs->chunks_ns, oChunk, NULL );",
          "269:             chunk_free( oChunk );",
          "270:             gfile->chunk_num++;",
          "271:             gfile->length += DEFAULT_CHUNK_SIZE;",
          "272:             data += data_partial_len;",
          "274:             chunks_to_write--;",
          "276:             bson_free( buffer );",
          "277:         }",
          "279:         while( chunks_to_write > 0 ) {",
          "280:             oChunk = chunk_new( gfile->id, gfile->chunk_num, data, DEFAULT_CHUNK_SIZE );",
          "281:             mongo_insert( gfile->gfs->client, gfile->gfs->chunks_ns, oChunk, NULL );",
          "282:             chunk_free( oChunk );",
          "283:             gfile->chunk_num++;",
          "284:             chunks_to_write--;",
          "285:             gfile->length += DEFAULT_CHUNK_SIZE;",
          "286:             data += DEFAULT_CHUNK_SIZE;",
          "287:         }",
          "289:         bson_free( gfile->pending_data );",
          "292:         if( bytes_left == 0 )",
          "293:             gfile->pending_data = NULL;",
          "294:         else {",
          "295:             gfile->pending_data = ( char * )bson_malloc( bytes_left );",
          "296:             memcpy( gfile->pending_data, data, bytes_left );",
          "297:         }",
          "299:         gfile->pending_len = bytes_left;",
          "300:     }",
          "303: MONGO_EXPORT int gridfile_writer_done( gridfile *gfile ) {",
          "307:     bson *oChunk;",
          "308:     int response;",
          "309:     if( gfile->pending_data ) {",
          "310:         oChunk = chunk_new( gfile->id, gfile->chunk_num, gfile->pending_data, gfile->pending_len );",
          "311:         mongo_insert( gfile->gfs->client, gfile->gfs->chunks_ns, oChunk, NULL );",
          "312:         chunk_free( oChunk );",
          "313:         bson_free( gfile->pending_data );",
          "314:         gfile->length += gfile->pending_len;",
          "315:     }",
          "318:     response = gridfs_insert_file( gfile->gfs, gfile->remote_name, gfile->id,",
          "319:                                    gfile->length, gfile->content_type );",
          "321:     bson_free( gfile->remote_name );",
          "322:     bson_free( gfile->content_type );",
          "324:     return response;",
          "327: int gridfs_store_file( gridfs *gfs, const char *filename,",
          "328:                        const char *remotename, const char *contenttype ) {",
          "330:     char buffer[DEFAULT_CHUNK_SIZE];",
          "331:     FILE *fd;",
          "332:     bson_oid_t id;",
          "333:     int chunkNumber = 0;",
          "334:     gridfs_offset length = 0;",
          "335:     gridfs_offset chunkLen = 0;",
          "336:     bson *oChunk;",
          "339:     if ( strcmp( filename, \"-\" ) == 0 ) fd = stdin;",
          "340:     else {",
          "341:         fd = fopen( filename, \"rb\" );",
          "342:         if (fd == NULL)",
          "343:             return MONGO_ERROR;",
          "347:     bson_oid_gen( &id );",
          "350:     chunkLen = fread( buffer, 1, DEFAULT_CHUNK_SIZE, fd );",
          "351:     do {",
          "352:         oChunk = chunk_new( id, chunkNumber, buffer, chunkLen );",
          "353:         mongo_insert( gfs->client, gfs->chunks_ns, oChunk, NULL );",
          "354:         chunk_free( oChunk );",
          "355:         length += chunkLen;",
          "356:         chunkNumber++;",
          "357:         chunkLen = fread( buffer, 1, DEFAULT_CHUNK_SIZE, fd );",
          "358:     }",
          "359:     while ( chunkLen != 0 );",
          "362:     if ( fd != stdin ) fclose( fd );",
          "368:     if ( remotename == NULL || *remotename == '\\0' ) {",
          "369:         remotename = filename;",
          "373:     return gridfs_insert_file( gfs, remotename, id, length, contenttype );",
          "374: }",
          "376: MONGO_EXPORT void gridfs_remove_filename( gridfs *gfs, const char *filename ) {",
          "377:     bson query;",
          "378:     mongo_cursor *files;",
          "379:     bson file;",
          "380:     bson_iterator it;",
          "381:     bson_oid_t id;",
          "382:     bson b;",
          "384:     bson_init( &query );",
          "385:     bson_append_string( &query, \"filename\", filename );",
          "386:     bson_finish( &query );",
          "387:     files = mongo_find( gfs->client, gfs->files_ns, &query, NULL, 0, 0, 0 );",
          "388:     bson_destroy( &query );",
          "391:     while ( mongo_cursor_next( files ) == MONGO_OK ) {",
          "392:         file = files->current;",
          "393:         bson_find( &it, &file, \"_id\" );",
          "394:         id = *bson_iterator_oid( &it );",
          "397:         bson_init( &b );",
          "398:         bson_append_oid( &b, \"_id\", &id );",
          "399:         bson_finish( &b );",
          "400:         mongo_remove( gfs->client, gfs->files_ns, &b, NULL );",
          "401:         bson_destroy( &b );",
          "404:         bson_init( &b );",
          "405:         bson_append_oid( &b, \"files_id\", &id );",
          "406:         bson_finish( &b );",
          "407:         mongo_remove( gfs->client, gfs->chunks_ns, &b, NULL );",
          "408:         bson_destroy( &b );",
          "409:     }",
          "411:     mongo_cursor_destroy( files );",
          "414: int gridfs_find_query( gridfs *gfs, bson *query,",
          "415:                        gridfile *gfile ) {",
          "417:     bson uploadDate;",
          "418:     bson finalQuery;",
          "419:     bson out;",
          "420:     int i;",
          "422:     bson_init( &uploadDate );",
          "423:     bson_append_int( &uploadDate, \"uploadDate\", -1 );",
          "424:     bson_finish( &uploadDate );",
          "426:     bson_init( &finalQuery );",
          "427:     bson_append_bson( &finalQuery, \"query\", query );",
          "428:     bson_append_bson( &finalQuery, \"orderby\", &uploadDate );",
          "429:     bson_finish( &finalQuery );",
          "431:     i = ( mongo_find_one( gfs->client, gfs->files_ns,",
          "432:                           &finalQuery, NULL, &out ) == MONGO_OK );",
          "433:     bson_destroy( &uploadDate );",
          "434:     bson_destroy( &finalQuery );",
          "435:     if ( !i )",
          "436:         return MONGO_ERROR;",
          "437:     else {",
          "438:         gridfile_init( gfs, &out, gfile );",
          "439:         bson_destroy( &out );",
          "440:         return MONGO_OK;",
          "441:     }",
          "444: int gridfs_find_filename( gridfs *gfs, const char *filename,",
          "445:                           gridfile *gfile )",
          "448:     bson query;",
          "449:     int i;",
          "451:     bson_init( &query );",
          "452:     bson_append_string( &query, \"filename\", filename );",
          "453:     bson_finish( &query );",
          "454:     i = gridfs_find_query( gfs, &query, gfile );",
          "455:     bson_destroy( &query );",
          "456:     return i;",
          "459: int gridfile_init( gridfs *gfs, bson *meta, gridfile *gfile )",
          "461: {",
          "462:     gfile->gfs = gfs;",
          "463:     gfile->pos = 0;",
          "464:     gfile->meta = bson_create();",
          "465:     if ( gfile->meta == NULL ) return MONGO_ERROR;",
          "466:     bson_copy( gfile->meta, meta );",
          "467:     return MONGO_OK;",
          "470: MONGO_EXPORT void gridfile_destroy( gridfile *gfile )",
          "472: {",
          "473:     bson_destroy( gfile->meta );",
          "474:     bson_free( gfile->meta );",
          "477: bson_bool_t gridfile_exists( gridfile *gfile ) {",
          "478:     return ( bson_bool_t )( gfile != NULL && gfile->meta != NULL );",
          "481: MONGO_EXPORT const char *gridfile_get_filename( gridfile *gfile ) {",
          "482:     bson_iterator it;",
          "484:     bson_find( &it, gfile->meta, \"filename\" );",
          "485:     return bson_iterator_string( &it );",
          "488: MONGO_EXPORT int gridfile_get_chunksize( gridfile *gfile ) {",
          "489:     bson_iterator it;",
          "491:     bson_find( &it, gfile->meta, \"chunkSize\" );",
          "492:     return bson_iterator_int( &it );",
          "495: MONGO_EXPORT gridfs_offset gridfile_get_contentlength( gridfile *gfile ) {",
          "496:     bson_iterator it;",
          "498:     bson_find( &it, gfile->meta, \"length\" );",
          "500:     if( bson_iterator_type( &it ) == BSON_INT )",
          "501:         return ( gridfs_offset )bson_iterator_int( &it );",
          "502:     else",
          "503:         return ( gridfs_offset )bson_iterator_long( &it );",
          "506: MONGO_EXPORT const char *gridfile_get_contenttype( gridfile *gfile ) {",
          "507:     bson_iterator it;",
          "509:     if ( bson_find( &it, gfile->meta, \"contentType\" ) )",
          "510:         return bson_iterator_string( &it );",
          "511:     else return NULL;",
          "514: MONGO_EXPORT bson_date_t gridfile_get_uploaddate( gridfile *gfile ) {",
          "515:     bson_iterator it;",
          "517:     bson_find( &it, gfile->meta, \"uploadDate\" );",
          "518:     return bson_iterator_date( &it );",
          "521: MONGO_EXPORT const char *gridfile_get_md5( gridfile *gfile ) {",
          "522:     bson_iterator it;",
          "524:     bson_find( &it, gfile->meta, \"md5\" );",
          "525:     return bson_iterator_string( &it );",
          "528: const char *gridfile_get_field( gridfile *gfile, const char *name ) {",
          "529:     bson_iterator it;",
          "531:     bson_find( &it, gfile->meta, name );",
          "532:     return bson_iterator_value( &it );",
          "535: bson_bool_t gridfile_get_boolean( gridfile *gfile, const char *name ) {",
          "536:     bson_iterator it;",
          "538:     bson_find( &it, gfile->meta, name );",
          "539:     return bson_iterator_bool( &it );",
          "542: MONGO_EXPORT void gridfile_get_metadata( gridfile *gfile, bson* out, bson_bool_t copyData ) {",
          "543:     bson_iterator it;",
          "545:     if ( bson_find( &it, gfile->meta, \"metadata\" ) )",
          "546:         bson_iterator_subobject_init( &it, out, copyData );",
          "547:     else",
          "548:         bson_init_empty( out );",
          "551: MONGO_EXPORT int gridfile_get_numchunks( gridfile *gfile ) {",
          "552:     bson_iterator it;",
          "553:     gridfs_offset length;",
          "554:     gridfs_offset chunkSize;",
          "555:     double numchunks;",
          "557:     bson_find( &it, gfile->meta, \"length\" );",
          "559:     if( bson_iterator_type( &it ) == BSON_INT )",
          "560:         length = ( gridfs_offset )bson_iterator_int( &it );",
          "561:     else",
          "562:         length = ( gridfs_offset )bson_iterator_long( &it );",
          "564:     bson_find( &it, gfile->meta, \"chunkSize\" );",
          "565:     chunkSize = bson_iterator_int( &it );",
          "566:     numchunks = ( ( double )length/( double )chunkSize );",
          "567:     return ( numchunks - ( int )numchunks > 0 )",
          "568:            ? ( int )( numchunks+1 )",
          "569:            : ( int )( numchunks );",
          "572: MONGO_EXPORT void gridfile_get_chunk( gridfile *gfile, int n, bson* out ) {",
          "573:     bson query;",
          "575:     bson_iterator it;",
          "576:     bson_oid_t id;",
          "577:     int result;",
          "579:     bson_init( &query );",
          "580:     bson_find( &it, gfile->meta, \"_id\" );",
          "581:     id = *bson_iterator_oid( &it );",
          "582:     bson_append_oid( &query, \"files_id\", &id );",
          "583:     bson_append_int( &query, \"n\", n );",
          "584:     bson_finish( &query );",
          "586:     result = (mongo_find_one(gfile->gfs->client,",
          "587:                              gfile->gfs->chunks_ns,",
          "588:                              &query, NULL, out ) == MONGO_OK );",
          "589:     bson_destroy( &query );",
          "590:     if (!result) {",
          "591:         bson_init_empty( out );",
          "595: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, size_t start, size_t size ) {",
          "596:     bson_iterator it;",
          "597:     bson_oid_t id;",
          "598:     bson gte;",
          "599:     bson query;",
          "600:     bson orderby;",
          "601:     bson command;",
          "602:     mongo_cursor *cursor;",
          "604:     bson_find( &it, gfile->meta, \"_id\" );",
          "605:     id = *bson_iterator_oid( &it );",
          "607:     bson_init( &query );",
          "608:     bson_append_oid( &query, \"files_id\", &id );",
          "609:     if ( size == 1 ) {",
          "610:         bson_append_int( &query, \"n\", (int)start );",
          "611:     }",
          "612:     else {",
          "613:         bson_init( &gte );",
          "614:         bson_append_int( &gte, \"$gte\", (int)start );",
          "615:         bson_finish( &gte );",
          "616:         bson_append_bson( &query, \"n\", &gte );",
          "617:         bson_destroy( &gte );",
          "618:     }",
          "619:     bson_finish( &query );",
          "621:     bson_init( &orderby );",
          "622:     bson_append_int( &orderby, \"n\", 1 );",
          "623:     bson_finish( &orderby );",
          "625:     bson_init( &command );",
          "626:     bson_append_bson( &command, \"query\", &query );",
          "627:     bson_append_bson( &command, \"orderby\", &orderby );",
          "628:     bson_finish( &command );",
          "630:     cursor = mongo_find( gfile->gfs->client, gfile->gfs->chunks_ns,",
          "631:                          &command, NULL, (int)size, 0, 0 );",
          "633:     bson_destroy( &command );",
          "634:     bson_destroy( &query );",
          "635:     bson_destroy( &orderby );",
          "637:     return cursor;",
          "638: }",
          "640: gridfs_offset gridfile_write_file( gridfile *gfile, FILE *stream ) {",
          "641:     int i;",
          "642:     size_t len;",
          "643:     bson chunk;",
          "644:     bson_iterator it;",
          "645:     const char *data;",
          "646:     const int num = gridfile_get_numchunks( gfile );",
          "648:     for ( i=0; i<num; i++ ) {",
          "649:         gridfile_get_chunk( gfile, i, &chunk );",
          "650:         bson_find( &it, &chunk, \"data\" );",
          "651:         len = bson_iterator_bin_len( &it );",
          "652:         data = bson_iterator_bin_data( &it );",
          "653:         fwrite( data, sizeof( char ), len, stream );",
          "654:         bson_destroy( &chunk );",
          "655:     }",
          "657:     return gridfile_get_contentlength( gfile );",
          "658: }",
          "660: MONGO_EXPORT gridfs_offset gridfile_read( gridfile *gfile, gridfs_offset size, char *buf ) {",
          "661:     mongo_cursor *chunks;",
          "662:     bson chunk;",
          "664:     size_t first_chunk;",
          "665:     size_t last_chunk;",
          "666:     size_t total_chunks;",
          "667:     gridfs_offset chunksize;",
          "668:     gridfs_offset contentlength;",
          "669:     gridfs_offset bytes_left;",
          "670:     int i;",
          "671:     bson_iterator it;",
          "672:     gridfs_offset chunk_len;",
          "673:     const char *chunk_data;",
          "675:     contentlength = gridfile_get_contentlength( gfile );",
          "676:     chunksize = gridfile_get_chunksize( gfile );",
          "677:     size = ( contentlength - gfile->pos < size )",
          "678:            ? contentlength - gfile->pos",
          "679:            : size;",
          "680:     bytes_left = size;",
          "682:     first_chunk = ( gfile->pos )/chunksize;",
          "683:     last_chunk = ( gfile->pos+size-1 )/chunksize;",
          "684:     total_chunks = last_chunk - first_chunk + 1;",
          "685:     chunks = gridfile_get_chunks( gfile, first_chunk, total_chunks );",
          "687:     for ( i = 0; i < total_chunks; i++ ) {",
          "688:         mongo_cursor_next( chunks );",
          "689:         chunk = chunks->current;",
          "690:         bson_find( &it, &chunk, \"data\" );",
          "691:         chunk_len = bson_iterator_bin_len( &it );",
          "692:         chunk_data = bson_iterator_bin_data( &it );",
          "693:         if ( i == 0 ) {",
          "694:             chunk_data += ( gfile->pos )%chunksize;",
          "695:             chunk_len -= ( gfile->pos )%chunksize;",
          "696:         }",
          "697:         if ( bytes_left > chunk_len ) {",
          "698:             memcpy( buf, chunk_data, chunk_len );",
          "699:             bytes_left -= chunk_len;",
          "700:             buf += chunk_len;",
          "701:         }",
          "702:         else {",
          "703:             memcpy( buf, chunk_data, bytes_left );",
          "704:         }",
          "707:     mongo_cursor_destroy( chunks );",
          "708:     gfile->pos = gfile->pos + size;",
          "710:     return size;",
          "713: MONGO_EXPORT gridfs_offset gridfile_seek( gridfile *gfile, gridfs_offset offset ) {",
          "714:     gridfs_offset length;",
          "716:     length = gridfile_get_contentlength( gfile );",
          "717:     gfile->pos = length < offset ? length : offset;",
          "718:     return gfile->pos;",
          "",
          "[Added Lines]",
          "30: MONGO_EXPORT gridfs *gridfs_create( void ) {",
          "31:   gridfs* GridFs = (gridfs*)bson_malloc(sizeof(gridfs));",
          "32:   return GridFs;",
          "35: MONGO_EXPORT void gridfs_dispose(gridfs *gfs) {",
          "36:   bson_free(gfs);",
          "39: MONGO_EXPORT gridfile *gridfile_create( void ) {",
          "40:   gridfile* gfile = (gridfile*)bson_malloc(sizeof(gridfile));",
          "41:   memset( gfile, 0, sizeof ( gridfile ) );",
          "42:   return gfile;",
          "45: MONGO_EXPORT void gridfile_dispose(gridfile *gf) {",
          "46:   bson_free(gf);",
          "49: MONGO_EXPORT void gridfile_get_descriptor(gridfile *gf, bson *out) {",
          "54: static int defaultPreProcessChunk(void** targetBuf, size_t* targetLen, void* srcBuf, size_t srcLen, int flags) {",
          "57:   return 0;",
          "60: static int defaultPostProcessChunk(void** targetBuf, size_t* targetLen, void* srcData, size_t srcLen, int flags) {",
          "63:   return 0;",
          "66: static size_t defaultDendingDataNeededSize (int flags) {",
          "67:   return DEFAULT_CHUNK_SIZE;",
          "68: }",
          "71: static gridfs_preProcessingFunc preProcessChunk = defaultPreProcessChunk;",
          "72: static gridfs_postProcessingFunc postProcessChunk = defaultPostProcessChunk;",
          "73: static gridfs_pendingDataNeededSizeFunc pendingDataNeededSize = defaultDendingDataNeededSize;",
          "75: static bson *chunk_new(bson_oid_t id, int chunkNumber, void** dataBuf, void* srcData, size_t len, int flags ) {",
          "76:   bson *b = (bson*)bson_malloc(sizeof(bson));",
          "77:   size_t dataBufLen = 0;",
          "79:   if( preProcessChunk( dataBuf, &dataBufLen, srcData, len, flags) != 0 ) {",
          "80:     return NULL;",
          "81:   }",
          "82:   bson_init(b);",
          "83:   bson_append_oid(b, \"files_id\", &id);",
          "84:   bson_append_int(b, \"n\", chunkNumber);",
          "85:   bson_append_binary(b, \"data\", BSON_BIN_BINARY, (char*)(*dataBuf), (int)dataBufLen);",
          "86:   bson_finish(b);",
          "87:   return b;",
          "88: }",
          "90: static void chunk_free(bson *oChunk) {",
          "91:   if( oChunk ) {",
          "92:     bson_destroy(oChunk);",
          "93:     bson_free(oChunk);",
          "94:   }",
          "95: }",
          "98: MONGO_EXPORT void setBufferProcessingProcs(gridfs_preProcessingFunc preProcessFunc, gridfs_postProcessingFunc postProcessFunc, gridfs_pendingDataNeededSizeFunc pendingDataNeededSizeFunc){",
          "99:   preProcessChunk = preProcessFunc;",
          "100:   postProcessChunk = postProcessFunc;",
          "101:   pendingDataNeededSize = pendingDataNeededSizeFunc;",
          "102: }",
          "108: static void gridfs_freeFields( gridfs *gfs ) {",
          "109:   if( gfs->dbname ) {",
          "110:     bson_free((char*)gfs->dbname);",
          "111:     gfs->dbname = NULL;",
          "112:   }",
          "113:   if( gfs->prefix ) {",
          "114:     bson_free((char*)gfs->prefix);",
          "115:     gfs->prefix = NULL;",
          "116:   }",
          "117:   if( gfs->files_ns ) {",
          "118:     bson_free((char*)gfs->files_ns);",
          "119:     gfs->files_ns = NULL;",
          "120:   }",
          "121:   if( gfs->chunks_ns ) {",
          "122:     bson_free((char*)gfs->chunks_ns);",
          "123:     gfs->chunks_ns = NULL;",
          "124:   }",
          "125: }",
          "128: MONGO_EXPORT int gridfs_init(mongo *client, const char *dbname, const char *prefix, gridfs *gfs) {",
          "130:   int options;",
          "131:   bson b = INIT_BSON;",
          "132:   bson_bool_t success;",
          "134:   gfs->caseInsensitive = 0;",
          "135:   gfs->client = client;",
          "138:   gfs->dbname = (const char*)bson_malloc((int)strlen(dbname) + 1);",
          "139:   strcpy((char*)gfs->dbname, dbname);",
          "142:   if (prefix == NULL) {",
          "143:     prefix = \"fs\";",
          "144:   } gfs->prefix = (const char*)bson_malloc((int)strlen(prefix) + 1);",
          "145:   strcpy((char*)gfs->prefix, prefix);",
          "148:   gfs->files_ns = (const char*)bson_malloc((int)(strlen(prefix) + strlen(dbname) + strlen(\".files\") + 2));",
          "149:   strcpy((char*)gfs->files_ns, dbname);",
          "150:   strcat((char*)gfs->files_ns, \".\");",
          "151:   strcat((char*)gfs->files_ns, prefix);",
          "152:   strcat((char*)gfs->files_ns, \".files\");",
          "155:   gfs->chunks_ns = (const char*)bson_malloc((int)(strlen(prefix) + strlen(dbname) + strlen(\".chunks\") + 2));",
          "156:   strcpy((char*)gfs->chunks_ns, dbname);",
          "157:   strcat((char*)gfs->chunks_ns, \".\");",
          "158:   strcat((char*)gfs->chunks_ns, prefix);",
          "159:   strcat((char*)gfs->chunks_ns, \".chunks\");",
          "161:   bson_init(&b);",
          "162:   bson_append_int(&b, \"filename\", 1);",
          "163:   bson_finish(&b);",
          "164:   options = 0;",
          "165:   success = (mongo_create_index(gfs->client, gfs->files_ns, &b, NULL, options, NULL) == MONGO_OK);",
          "166:   bson_destroy(&b);",
          "167:   if (!success) {",
          "168:     gridfs_freeFields( gfs );",
          "169:     return MONGO_ERROR;",
          "170:   }",
          "172:   bson_init(&b);",
          "173:   bson_append_int(&b, \"files_id\", 1);",
          "174:   bson_append_int(&b, \"n\", 1);",
          "175:   bson_finish(&b);",
          "176:   options = MONGO_INDEX_UNIQUE;",
          "177:   success = (mongo_create_index(gfs->client, gfs->chunks_ns, &b, NULL, options, NULL) == MONGO_OK);",
          "178:   bson_destroy(&b);",
          "179:   if (!success) {",
          "180:     gridfs_freeFields( gfs );",
          "181:     return MONGO_ERROR;",
          "182:   }",
          "184:   return MONGO_OK;",
          "185: }",
          "188: MONGO_EXPORT void gridfs_destroy(gridfs *gfs) {",
          "189:   if (gfs == NULL) {",
          "190:     return ;",
          "191:   }",
          "192:   gridfs_freeFields( gfs );",
          "193: }",
          "197: MONGO_EXPORT bson_bool_t gridfs_get_caseInsensitive(gridfs *gfs){",
          "198:   return gfs->caseInsensitive;",
          "199: }",
          "202: MONGO_EXPORT void gridfs_set_caseInsensitive(gridfs *gfs, bson_bool_t newValue){",
          "203:   gfs->caseInsensitive = newValue;",
          "206: static char* upperFileName(const char* filename){",
          "207:   char* upperName = (char*) bson_malloc((int)strlen( filename ) + 1 );",
          "208:   strcpy(upperName, filename);",
          "209:   _strupr(upperName);",
          "210:   return upperName;",
          "213: static int gridfs_insert_file(gridfs *gfs, const char *name, const bson_oid_t id, gridfs_offset length, const char *contenttype, int flags, int chunkSize) {",
          "214:   bson command = INIT_BSON;",
          "215:   bson ret = INIT_BSON;",
          "216:   bson res = INIT_BSON;",
          "217:   bson_iterator it = INIT_ITERATOR;",
          "218:   bson q = INIT_BSON;",
          "219:   int result;",
          "220:   int64_t d;",
          "221:   char *upperName = NULL;",
          "224:   if( !( flags & GRIDFILE_NOMD5 ) ) {",
          "226:     bson_init(&command);",
          "227:     bson_append_oid(&command, \"filemd5\", &id);",
          "228:     bson_append_string(&command, \"root\", gfs->prefix);",
          "229:     bson_finish(&command);",
          "230:     result = mongo_run_command(gfs->client, gfs->dbname, &command, &res);",
          "231:     bson_destroy(&command);",
          "232:     if (result != MONGO_OK) {",
          "233:       return result;",
          "234:     }",
          "235:   }",
          "238:   bson_init(&ret);",
          "239:   bson_append_oid(&ret, \"_id\", &id);",
          "240:   if( gfs->caseInsensitive ) {",
          "241:     upperName = upperFileName(name);",
          "242:   }",
          "243:   if (name != NULL &&  *name != '\\0') {",
          "244:     bson_append_string(&ret, \"filename\", upperName ? upperName : name);",
          "245:   }",
          "246:   bson_append_long(&ret, \"length\", length);",
          "247:   bson_append_int(&ret, \"chunkSize\", chunkSize);",
          "248:   d = (bson_date_t)1000 *time(NULL);",
          "249:   bson_append_date(&ret, \"uploadDate\", d);",
          "250:   if( !( flags & GRIDFILE_NOMD5 ) ) {",
          "251:     bson_find(&it, &res, \"md5\");",
          "252:     bson_append_string(&ret, \"md5\", bson_iterator_string(&it));",
          "253:     bson_destroy(&res);",
          "254:   } else {",
          "255:     bson_append_string(&ret, \"md5\", \"\");",
          "256:   }",
          "257:   if (contenttype != NULL &&  *contenttype != '\\0') {",
          "258:     bson_append_string(&ret, \"contentType\", contenttype);",
          "259:   }",
          "260:   if ( upperName ) {",
          "261:     bson_append_string(&ret, \"realFilename\", name);",
          "262:   }",
          "263:   bson_append_int(&ret, \"flags\", flags);",
          "264:   bson_finish(&ret);",
          "266:   bson_init(&q);",
          "267:   bson_append_oid(&q, \"_id\", &id);",
          "268:   bson_finish(&q);",
          "270:   result = mongo_update(gfs->client, gfs->files_ns, &q, &ret, MONGO_UPDATE_UPSERT, NULL);",
          "272:   bson_destroy(&ret);",
          "273:   bson_destroy(&q);",
          "274:   if( upperName ) {",
          "275:     bson_free( upperName );",
          "276:   }",
          "278:   return result;",
          "281: MONGO_EXPORT int gridfs_store_buffer(gridfs *gfs, const char *data, gridfs_offset length, const char *remotename, const char *contenttype, int flags ) {",
          "283:   char const *end = data + length;",
          "284:   const char *data_ptr = data;",
          "285:   void* targetBuf = NULL;",
          "286:   bson_oid_t id;",
          "287:   int chunkNumber = 0;",
          "288:   int chunkLen;",
          "289:   bson *oChunk;",
          "290:   int memAllocated = 0;",
          "293:   bson_oid_gen(&id);",
          "296:   while (data_ptr < end) {",
          "297:     chunkLen = DEFAULT_CHUNK_SIZE < (unsigned int)(end - data_ptr) ? DEFAULT_CHUNK_SIZE: (unsigned int)(end - data_ptr);",
          "298:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)data_ptr, chunkLen, flags );",
          "299:     memAllocated = targetBuf != data_ptr;",
          "300:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "301:     chunk_free(oChunk);",
          "302:     chunkNumber++;",
          "303:     data_ptr += chunkLen;",
          "304:   }",
          "306:   if( memAllocated ) {",
          "307:     bson_free( targetBuf );",
          "308:   }",
          "311:   return gridfs_insert_file(gfs, remotename, id, length, contenttype, flags, DEFAULT_CHUNK_SIZE);",
          "312: }",
          "314: MONGO_EXPORT int gridfs_store_file(gridfs *gfs, const char *filename, const char *remotename, const char *contenttype, int flags ) {",
          "316:   char buffer[DEFAULT_CHUNK_SIZE];",
          "317:   FILE *fd;",
          "318:   bson_oid_t id;",
          "319:   int chunkNumber = 0;",
          "320:   gridfs_offset length = 0;",
          "321:   gridfs_offset chunkLen = 0;",
          "322:   bson *oChunk;",
          "323:   void* targetBuf = NULL;",
          "326:   if (strcmp(filename, \"-\") == 0) {",
          "327:     fd = stdin;",
          "328:   } else {",
          "329:     fd = fopen(filename, \"rb\");",
          "330:     if (fd == NULL) {",
          "331:       return MONGO_ERROR;",
          "332:     }",
          "333:   }",
          "336:   bson_oid_gen(&id);",
          "339:   chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "340:   do {",
          "341:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)buffer, (size_t)chunkLen, flags );",
          "342:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "343:     chunk_free(oChunk);",
          "344:     length += chunkLen;",
          "345:     chunkNumber++;",
          "346:     chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "347:   } while (chunkLen != 0);",
          "350:   if (fd != stdin) {",
          "351:     fclose(fd);",
          "352:   }",
          "355:   if (remotename == NULL ||  *remotename == '\\0') {",
          "356:     remotename = filename;",
          "357:   }",
          "359:   if( targetBuf && targetBuf != buffer ) {",
          "360:     bson_free( targetBuf );",
          "361:   }",
          "364:   return gridfs_insert_file(gfs, remotename, id, length, contenttype, flags, DEFAULT_CHUNK_SIZE );",
          "367: MONGO_EXPORT void gridfs_remove_filename(gridfs *gfs, const char *filename) {",
          "368:   bson query = INIT_BSON;",
          "369:   mongo_cursor *files;",
          "370:   bson file = INIT_BSON;",
          "371:   bson_iterator it = INIT_ITERATOR;",
          "372:   bson_oid_t id;",
          "373:   bson b = INIT_BSON;",
          "374:   char *upperName = NULL;",
          "376:   if( gfs->caseInsensitive ) {",
          "377:     upperName = upperFileName(filename);",
          "378:   }",
          "379:   bson_init(&query);",
          "380:   if( upperName ) {",
          "381:     bson_append_string(&query, \"filename\", upperName);",
          "382:   } else {",
          "383:     bson_append_string(&query, \"filename\", filename);",
          "384:   }",
          "385:   bson_finish(&query);",
          "386:   files = mongo_find(gfs->client, gfs->files_ns, &query, NULL, 0, 0, 0);",
          "387:   bson_destroy(&query);",
          "388:   if( upperName ) {",
          "389:     bson_free( upperName );",
          "390:   }",
          "393:   while (mongo_cursor_next(files) == MONGO_OK) {",
          "394:     file = files->current;",
          "395:     bson_find(&it, &file, \"_id\");",
          "396:     id =  *bson_iterator_oid(&it);",
          "399:     bson_init(&b);",
          "400:     bson_append_oid(&b, \"_id\", &id);",
          "401:     bson_finish(&b);",
          "402:     mongo_remove(gfs->client, gfs->files_ns, &b, NULL);",
          "403:     bson_destroy(&b);",
          "406:     bson_init(&b);",
          "407:     bson_append_oid(&b, \"files_id\", &id);",
          "408:     bson_finish(&b);",
          "409:     mongo_remove(gfs->client, gfs->chunks_ns, &b, NULL);",
          "410:     bson_destroy(&b);",
          "411:   }",
          "413:   mongo_cursor_destroy(files);",
          "414: }",
          "416: MONGO_EXPORT int gridfs_find_query(gridfs *gfs, bson *query, gridfile *gfile) {",
          "418:   bson uploadDate = INIT_BSON;",
          "419:   bson finalQuery = INIT_BSON;",
          "420:   bson out = INIT_BSON;",
          "421:   int i;",
          "423:   bson_init(&uploadDate);",
          "424:   bson_append_int(&uploadDate, \"uploadDate\",  - 1);",
          "425:   bson_finish(&uploadDate);",
          "427:   bson_init(&finalQuery);",
          "428:   bson_append_bson(&finalQuery, \"query\", query);",
          "429:   bson_append_bson(&finalQuery, \"orderby\", &uploadDate);",
          "430:   bson_finish(&finalQuery);",
          "432:   i = (mongo_find_one(gfs->client, gfs->files_ns,  &finalQuery, NULL, &out) == MONGO_OK);",
          "433:   bson_destroy(&uploadDate);",
          "434:   bson_destroy(&finalQuery);",
          "435:   if (!i) {",
          "436:     return MONGO_ERROR;",
          "437:   } else {",
          "438:     gridfile_init(gfs, &out, gfile);",
          "439:     bson_destroy(&out);",
          "440:     return MONGO_OK;",
          "441:   }",
          "442: }",
          "444: MONGO_EXPORT int gridfs_find_filename(gridfs *gfs, const char *filename, gridfile *gfile)",
          "446:  {",
          "447:   bson query = INIT_BSON;",
          "448:   int i;",
          "449:   char *upperName = NULL;",
          "451:   bson_init(&query);",
          "452:   if( gfs->caseInsensitive ) {",
          "453:     upperName = upperFileName( filename );",
          "454:   }",
          "455:   if( upperName ) {",
          "456:     bson_append_string(&query, \"filename\", upperName);",
          "457:   } else {",
          "458:     bson_append_string(&query, \"filename\", filename);",
          "459:   }",
          "460:   bson_finish(&query);",
          "461:   i = gridfs_find_query(gfs, &query, gfile);",
          "462:   bson_destroy(&query);",
          "463:   if( upperName ) {",
          "464:     bson_free( upperName );",
          "465:   }",
          "466:   return i;",
          "467: }",
          "474: static void gridfile_flush_pendingchunk(gridfile *gfile);",
          "475: static void gridfile_init_flags(gridfile *gfile);",
          "476: static void gridfile_init_length(gridfile *gfile);",
          "477: static void gridfile_init_chunkSize(gridfile *gfile);",
          "481: MONGO_EXPORT int gridfile_init(gridfs *gfs, bson *meta, gridfile *gfile){",
          "482:   gfile->gfs = gfs;",
          "483:   gfile->pos = 0;",
          "484:   gfile->pending_len = 0;",
          "485:   gfile->pending_data = NULL;",
          "486:   gfile->meta = (bson*)bson_malloc(sizeof(bson));",
          "487:   if (gfile->meta == NULL) {",
          "488:     return MONGO_ERROR;",
          "489:   } if( meta ) {",
          "490:     bson_copy(gfile->meta, meta);",
          "491:   } else {",
          "492:     bson_init_empty(gfile->meta);",
          "493:   }",
          "494:   gridfile_init_chunkSize( gfile );",
          "495:   gridfile_init_length( gfile );",
          "496:   gridfile_init_flags( gfile );",
          "497:   return MONGO_OK;",
          "500: MONGO_EXPORT int gridfile_writer_done(gridfile *gfile) {",
          "502:   int response;",
          "504:   if (gfile->pending_len) {",
          "507:     gridfile_flush_pendingchunk(gfile);",
          "508:   }",
          "509:   if( gfile->pending_data ) {",
          "510:     bson_free(gfile->pending_data);",
          "511:     gfile->pending_data = NULL;",
          "512:   }",
          "515:   response = gridfs_insert_file(gfile->gfs, gfile->remote_name, gfile->id, gfile->length, gfile->content_type, gfile->flags, gfile->chunkSize);",
          "517:   if( gfile->remote_name ) {",
          "518:     bson_free(gfile->remote_name);",
          "519:     gfile->remote_name = NULL;",
          "520:   }",
          "521:   if( gfile->content_type ) {",
          "522:     bson_free(gfile->content_type);",
          "523:     gfile->content_type = NULL;",
          "524:   }",
          "526:   return response;",
          "529: static void gridfile_init_chunkSize(gridfile *gfile){",
          "530:   bson_iterator it = INIT_ITERATOR;",
          "532:   if( bson_find(&it, gfile->meta, \"chunkSize\") != BSON_EOO ) {",
          "533:     if (bson_iterator_type(&it) == BSON_INT) {",
          "534:       gfile->chunkSize = bson_iterator_int(&it);",
          "535:     } else {",
          "536:       gfile->chunkSize = (int)bson_iterator_long(&it);",
          "538:   } else {",
          "539:     gfile->chunkSize = DEFAULT_CHUNK_SIZE;",
          "540:   }",
          "541: }",
          "543: static void gridfile_init_length(gridfile *gfile) {",
          "544:   bson_iterator it = INIT_ITERATOR;",
          "546:   if( bson_find(&it, gfile->meta, \"length\") != BSON_EOO ) {",
          "547:     if (bson_iterator_type(&it) == BSON_INT) {",
          "548:       gfile->length = (gridfs_offset)bson_iterator_int(&it);",
          "549:     } else {",
          "550:       gfile->length = (gridfs_offset)bson_iterator_long(&it);",
          "552:   } else {",
          "553:     gfile->length = 0;",
          "554:   }",
          "555: }",
          "557: static void gridfile_init_flags(gridfile *gfile) {",
          "558:   bson_iterator it = INIT_ITERATOR;",
          "560:   if( bson_find(&it, gfile->meta, \"flags\") != BSON_EOO ) {",
          "561:     gfile->flags = (gridfs_offset)bson_iterator_int(&it);",
          "562:   } else {",
          "563:     gfile->flags = 0;",
          "564:   }",
          "567: MONGO_EXPORT void gridfile_writer_init(gridfile *gfile, gridfs *gfs, const char *remote_name, const char *content_type, int flags ) {",
          "568:   bson_oid_t *foid;",
          "569:   gridfile tmpFile = INIT_GRIDFILE;",
          "571:   gfile->gfs = gfs;",
          "572:   if (gridfs_find_filename(gfs, remote_name, &tmpFile) == MONGO_OK) {",
          "573:     if( gridfile_exists(&tmpFile) ) {",
          "576:       foid = gridfile_get_id( &tmpFile );",
          "577:       memcpy(&gfile->id, foid, sizeof( gfile->id ));",
          "578:       gridfile_init_length( &tmpFile );",
          "579:       gfile->length = tmpFile.length;",
          "580:       gfile->chunkSize = gridfile_get_chunksize( gfile );",
          "581:       if( flags != GRIDFILE_DEFAULT) {",
          "582:         gfile->flags = flags;",
          "583:       } else {",
          "584:         gridfile_init_flags( &tmpFile );",
          "585:         gfile->flags = tmpFile.flags;",
          "586:       }",
          "587:     }",
          "588:     gridfile_destroy( &tmpFile );",
          "589:   } else {",
          "591:     bson_oid_gen(&(gfile->id));",
          "592:     gfile->length = 0;",
          "594:     gfile->flags = flags;",
          "595:   }",
          "599:   gfile->chunk_num = 0;",
          "600:   gfile->pos = 0;",
          "602:   gfile->remote_name = (char*)bson_malloc((int)strlen(remote_name) + 1);",
          "603:   strcpy((char*)gfile->remote_name, remote_name);",
          "605:   gfile->content_type = (char*)bson_malloc((int)strlen(content_type) + 1);",
          "606:   strcpy((char*)gfile->content_type, content_type);",
          "608:   gfile->pending_len = 0;",
          "611:   gfile->pending_data = (char*) bson_malloc((int)pendingDataNeededSize(gfile->flags));",
          "614: MONGO_EXPORT void gridfile_destroy(gridfile *gfile)",
          "617:   if( gfile->meta ) {",
          "618:     bson_destroy(gfile->meta);",
          "619:     bson_free(gfile->meta);",
          "620:     gfile->meta = NULL;",
          "621:   }",
          "622: }",
          "626: MONGO_EXPORT bson_oid_t *gridfile_get_id(gridfile *gfile) {",
          "627:   bson_iterator it = INIT_ITERATOR;",
          "629:   if( bson_find(&it, gfile->meta, \"_id\") != BSON_EOO) {",
          "630:     if (bson_iterator_type(&it) == BSON_OID) {",
          "631:       return bson_iterator_oid(&it);",
          "632:     } else {",
          "633:       return &gfile->id;",
          "634:     }",
          "635:   } else {",
          "636:     return &gfile->id;",
          "637:   }",
          "640: MONGO_EXPORT bson_bool_t gridfile_exists(gridfile *gfile) {",
          "642:   return (bson_bool_t)(gfile != NULL && gfile->meta != NULL);",
          "643: }",
          "645: MONGO_EXPORT const char *gridfile_get_filename(gridfile *gfile) {",
          "646:   bson_iterator it = INIT_ITERATOR;",
          "648:   if( gfile->gfs->caseInsensitive && bson_find( &it, gfile->meta, \"realFilename\" ) != BSON_EOO ) {",
          "649:     return bson_iterator_string(&it);",
          "650:   }",
          "651:   if( bson_find(&it, gfile->meta, \"filename\") != BSON_EOO) {",
          "652:     return bson_iterator_string(&it);",
          "653:   } else {",
          "654:     return gfile->remote_name;",
          "655:   }",
          "658: MONGO_EXPORT int gridfile_get_chunksize(gridfile *gfile) {",
          "659:   bson_iterator it = INIT_ITERATOR;",
          "661:   if( gfile->chunkSize ) {",
          "662:     return gfile->chunkSize;",
          "663:   } else {",
          "664:     if( bson_find(&it, gfile->meta, \"chunkSize\") != BSON_EOO ) {",
          "665:       return bson_iterator_int(&it);",
          "666:   } else {",
          "667:       return DEFAULT_CHUNK_SIZE;",
          "668:     }",
          "669:   }",
          "672: MONGO_EXPORT gridfs_offset gridfile_get_contentlength(gridfile *gfile) {",
          "673:   gridfs_offset estimatedLen;",
          "674:   estimatedLen = gfile->pending_len ? gfile->chunk_num * gridfile_get_chunksize( gfile ) + gfile->pending_len : gfile->length;",
          "675:   return estimatedLen > gfile->length ? estimatedLen : gfile->length;",
          "678: MONGO_EXPORT const char *gridfile_get_contenttype(gridfile *gfile) {",
          "679:   bson_iterator it = INIT_ITERATOR;",
          "681:   if (bson_find(&it, gfile->meta, \"contentType\")) {",
          "682:     return bson_iterator_string(&it);",
          "683:   } else {",
          "684:     return NULL;",
          "685:   }",
          "688: MONGO_EXPORT bson_date_t gridfile_get_uploaddate(gridfile *gfile) {",
          "689:   bson_iterator it = INIT_ITERATOR;",
          "691:   if( bson_find(&it, gfile->meta, \"uploadDate\") != BSON_EOO) {",
          "692:     return bson_iterator_date(&it);",
          "693:   } else {",
          "694:     return 0;",
          "695:   }",
          "698: MONGO_EXPORT const char *gridfile_get_md5(gridfile *gfile) {",
          "699:   bson_iterator it = INIT_ITERATOR;",
          "701:   if( bson_find(&it, gfile->meta, \"md5\") != BSON_EOO ) {",
          "702:     return bson_iterator_string(&it);",
          "703:   } else {",
          "704:     return NULL;",
          "705:   }",
          "708: MONGO_EXPORT void gridfile_set_flags(gridfile *gfile, int flags){",
          "709:   gfile->flags = flags;",
          "710: }",
          "712: MONGO_EXPORT int gridfile_get_flags(gridfile *gfile){",
          "713:   return gfile->flags;",
          "716: MONGO_EXPORT const char *gridfile_get_field(gridfile *gfile, const char *name) {",
          "717:   bson_iterator it = INIT_ITERATOR;",
          "719:   if( bson_find(&it, gfile->meta, name) != BSON_EOO) {",
          "720:     return bson_iterator_value(&it);",
          "721:   } else {",
          "722:     return NULL;",
          "723:   }",
          "726: MONGO_EXPORT bson_bool_t gridfile_get_boolean(gridfile *gfile, const char *name) {",
          "727:   bson_iterator it = INIT_ITERATOR;",
          "729:   if( bson_find(&it, gfile->meta, name) != BSON_EOO) {",
          "730:     return bson_iterator_bool(&it);",
          "731:   } else {",
          "732:     return 0;",
          "733:   }",
          "736: MONGO_EXPORT void gridfile_get_metadata(gridfile *gfile, bson *out, bson_bool_t copyData) {",
          "737:   bson_iterator it = INIT_ITERATOR;",
          "739:   if (bson_find(&it, gfile->meta, \"metadata\")) {",
          "740:     bson_iterator_subobject_init(&it, out, copyData);",
          "741:   } else {",
          "742:     bson_init_empty(out);",
          "743:   }",
          "750: MONGO_EXPORT int gridfile_get_numchunks(gridfile *gfile) {",
          "751:   bson_iterator it = INIT_ITERATOR;",
          "752:   gridfs_offset length;",
          "753:   gridfs_offset chunkSize;",
          "754:   double numchunks;",
          "756:   bson_find(&it, gfile->meta, \"length\");",
          "758:   if (bson_iterator_type(&it) == BSON_INT) {",
          "759:     length = (gridfs_offset)bson_iterator_int(&it);",
          "760:   } else {",
          "761:     length = (gridfs_offset)bson_iterator_long(&it);",
          "762:   }",
          "764:   bson_find(&it, gfile->meta, \"chunkSize\");",
          "765:   chunkSize = bson_iterator_int(&it);",
          "766:   numchunks = ((double)length / (double)chunkSize);",
          "767:   return (numchunks - (int)numchunks > 0) ? (int)(numchunks + 1): (int)(numchunks);",
          "770: static void gridfile_prepare_chunk_key_bson(bson *q, bson_oid_t *id, int chunk_num) {",
          "771:   bson_init(q);",
          "772:   bson_append_int(q, \"n\", chunk_num);",
          "773:   bson_append_oid(q, \"files_id\", id);",
          "774:   bson_finish(q);",
          "775: }",
          "777: static void gridfile_flush_pendingchunk(gridfile *gfile) {",
          "778:   bson *oChunk;",
          "779:   bson q = INIT_BSON;",
          "780:   void* targetBuf = NULL;",
          "782:   if (gfile->pending_len) {",
          "783:     size_t finish_position_after_flush;",
          "784:     oChunk = chunk_new(gfile->id, gfile->chunk_num, &targetBuf, (void*)gfile->pending_data, gfile->pending_len, gfile->flags );",
          "785:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num );",
          "786:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "787:     bson_destroy(&q);",
          "788:     chunk_free(oChunk);",
          "789:     finish_position_after_flush = (gfile->chunk_num * gfile->chunkSize) + gfile->pending_len;",
          "790:     if(finish_position_after_flush > gfile->length) {",
          "791:       gfile->length = finish_position_after_flush;",
          "792:     }",
          "793:     gfile->chunk_num++;",
          "794:     gfile->pending_len = 0;",
          "795:   }",
          "796:   if( targetBuf && targetBuf != gfile->pending_data ) {",
          "797:     bson_free( targetBuf );",
          "798:   }",
          "801: static void gridfile_load_pending_data_with_pos_chunk(gridfile *gfile) {",
          "802:   int chunk_len;",
          "803:   const char *chunk_data;",
          "804:   bson_iterator it = INIT_ITERATOR;",
          "805:   bson chk = INIT_BSON;",
          "806:   void* targetBuffer = NULL;",
          "807:   size_t targetBufferLen = 0;",
          "809:   chk.dataSize = 0;",
          "810:   gridfile_get_chunk(gfile, (int)(gfile->pos / DEFAULT_CHUNK_SIZE), &chk);",
          "811:   if (chk.dataSize <= 5) {",
          "812:     if( chk.data ) {",
          "813:       bson_destroy( &chk );",
          "814:     }",
          "815:     bson_fatal_msg( 0, \"The chunk didn't contain any fields... this has to be an internal error...\");",
          "816:     return;",
          "817:   }",
          "818:   bson_find(&it, &chk, \"data\");",
          "819:   chunk_len = bson_iterator_bin_len(&it);",
          "820:   chunk_data = bson_iterator_bin_data(&it);",
          "821:   postProcessChunk( &targetBuffer, &targetBufferLen, (void*)chunk_data, (size_t)chunk_len, gfile->flags );",
          "822:   gfile->pending_len = (int)targetBufferLen;",
          "823:   gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "824:   if( targetBufferLen ) {",
          "825:     memcpy(gfile->pending_data, targetBuffer, targetBufferLen);",
          "826:   }",
          "827:   bson_destroy( &chk );",
          "828:   if( targetBuffer && targetBuffer != chunk_data ) {",
          "829:     bson_free( targetBuffer );",
          "830:   }",
          "831:   return;",
          "832: }",
          "834: MONGO_EXPORT void gridfile_write_buffer(gridfile *gfile, const char *data, gridfs_offset length) {",
          "836:   bson *oChunk;",
          "837:   bson q = INIT_BSON;",
          "838:   size_t buf_pos, buf_bytes_to_write;",
          "839:   gridfs_offset bytes_left = length;",
          "840:   void* targetBuf = NULL;",
          "841:   int memAllocated = 0;",
          "843:   gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "844:   buf_pos = (int)(gfile->pos - (gfile->pos / DEFAULT_CHUNK_SIZE) * DEFAULT_CHUNK_SIZE);",
          "846:      If so, then we need to preload current chunk and merge the data into it using the pending_data field",
          "848:   if( buf_pos ) {",
          "849:     if( !gfile->pending_len ) {",
          "850:       gridfile_load_pending_data_with_pos_chunk( gfile );",
          "851:     }",
          "852:     buf_bytes_to_write = (int)( buf_pos + length > DEFAULT_CHUNK_SIZE ? DEFAULT_CHUNK_SIZE - buf_pos : length );",
          "853:     memcpy( &gfile->pending_data[buf_pos], data, buf_bytes_to_write);",
          "854:     if ( buf_bytes_to_write + buf_pos > gfile->pending_len ) {",
          "855:       gfile->pending_len = buf_bytes_to_write + buf_pos;",
          "856:     }",
          "857:     gfile->pos += buf_bytes_to_write;",
          "858:     if( buf_bytes_to_write + buf_pos >= DEFAULT_CHUNK_SIZE ) {",
          "859:       gridfile_flush_pendingchunk(gfile);",
          "860:     }",
          "861:     bytes_left -= buf_bytes_to_write;",
          "862:     data += buf_bytes_to_write;",
          "863:   }",
          "867:   while( bytes_left >= DEFAULT_CHUNK_SIZE ) {",
          "868:     oChunk = chunk_new(gfile->id, gfile->chunk_num, &targetBuf, (void*)data, DEFAULT_CHUNK_SIZE, gfile->flags );",
          "869:     memAllocated = targetBuf != data;",
          "870:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num);",
          "871:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "872:     bson_destroy( &q );",
          "873:     chunk_free(oChunk);",
          "874:     bytes_left -= DEFAULT_CHUNK_SIZE;",
          "875:     gfile->chunk_num++;",
          "876:     gfile->pos += DEFAULT_CHUNK_SIZE;",
          "877:     if (gfile->pos > gfile->length) {",
          "878:       gfile->length = gfile->pos;",
          "879:     }",
          "880:     data += DEFAULT_CHUNK_SIZE;",
          "881:   }",
          "885:   if ( bytes_left > 0 ) {",
          "887:        AND if after writing the remaining buffer there's should be trailing data that we don't",
          "889:     if( !gfile->pending_len && gfile->pos + bytes_left < gfile->length ) {",
          "890:       gridfile_load_pending_data_with_pos_chunk( gfile );",
          "891:     }",
          "892:     memcpy( gfile->pending_data, data, (size_t) bytes_left );",
          "893:     if(  bytes_left > gfile->pending_len ) {",
          "894:       gfile->pending_len = (int) bytes_left;",
          "895:     }",
          "896:     gfile->pos += bytes_left;",
          "897:   }",
          "899:   if( memAllocated ){",
          "900:     bson_free( targetBuf );",
          "901:   }",
          "902: }",
          "904: MONGO_EXPORT void gridfile_get_chunk(gridfile *gfile, int n, bson *out) {",
          "905:   bson query = INIT_BSON;",
          "907:   bson_oid_t *id;",
          "908:   int result;",
          "910:   bson_init(&query);",
          "911:   id = gridfile_get_id( gfile );",
          "912:   bson_append_oid(&query, \"files_id\", id);",
          "913:   bson_append_int(&query, \"n\", n);",
          "914:   bson_finish(&query);",
          "916:   result = (mongo_find_one(gfile->gfs->client, gfile->gfs->chunks_ns,  &query, NULL, out) == MONGO_OK);",
          "917:   bson_destroy(&query);",
          "918:   if (!result) {",
          "919:     bson empty = INIT_BSON;",
          "920:     bson_init_empty(&empty);",
          "921:     bson_copy(out, &empty);",
          "922:   }",
          "925: MONGO_EXPORT mongo_cursor *gridfile_get_chunks(gridfile *gfile, size_t start, size_t size) {",
          "926:   bson_iterator it = INIT_ITERATOR;",
          "927:   bson_oid_t id;",
          "928:   bson gte = INIT_BSON;",
          "929:   bson query = INIT_BSON;",
          "930:   bson orderby = INIT_BSON;",
          "931:   bson command = INIT_BSON;",
          "932:   mongo_cursor *cursor;",
          "934:   if( bson_find(&it, gfile->meta, \"_id\") != BSON_EOO) {",
          "935:     id =  *bson_iterator_oid(&it);",
          "936:   } else {",
          "937:     id = gfile->id;",
          "938:   }",
          "940:   bson_init(&query);",
          "941:   bson_append_oid(&query, \"files_id\", &id);",
          "942:   if (size == 1) {",
          "943:     bson_append_int(&query, \"n\", (int)start);",
          "944:   } else {",
          "945:     bson_init(&gte);",
          "946:     bson_append_int(&gte, \"$gte\", (int)start);",
          "947:     bson_finish(&gte);",
          "948:     bson_append_bson(&query, \"n\", &gte);",
          "949:     bson_destroy(&gte);",
          "950:   }",
          "951:   bson_finish(&query);",
          "953:   bson_init(&orderby);",
          "954:   bson_append_int(&orderby, \"n\", 1);",
          "955:   bson_finish(&orderby);",
          "957:   bson_init(&command);",
          "958:   bson_append_bson(&command, \"query\", &query);",
          "959:   bson_append_bson(&command, \"orderby\", &orderby);",
          "960:   bson_finish(&command);",
          "962:   cursor = mongo_find(gfile->gfs->client, gfile->gfs->chunks_ns,  &command, NULL, (int)size, 0, 0);",
          "964:   bson_destroy(&command);",
          "965:   bson_destroy(&query);",
          "966:   bson_destroy(&orderby);",
          "968:   return cursor;",
          "969: }",
          "971: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, void* buf, int *first_chunk);",
          "972: static gridfs_offset gridfile_load_from_chunks(gridfile *gfile, int total_chunks, gridfs_offset chunksize, mongo_cursor *chunks, char* buf,",
          "973:                                                gridfs_offset bytes_left);",
          "975: MONGO_EXPORT gridfs_offset gridfile_read(gridfile *gfile, gridfs_offset size, char *buf) {",
          "976:   mongo_cursor *chunks;",
          "978:   int first_chunk;",
          "979:   int total_chunks;",
          "980:   gridfs_offset chunksize;",
          "981:   gridfs_offset contentlength;",
          "982:   gridfs_offset bytes_left;",
          "983:   gridfs_offset realSize = 0;",
          "985:   contentlength = gridfile_get_contentlength(gfile);",
          "986:   chunksize = gridfile_get_chunksize(gfile);",
          "987:   size = (contentlength - gfile->pos < size) ? contentlength - gfile->pos: size;",
          "988:   bytes_left = size;",
          "990:   first_chunk = (int)((gfile->pos) / chunksize);",
          "991:   total_chunks = (int)((gfile->pos + size - 1) / chunksize) - first_chunk + 1;",
          "993:   if( (realSize = gridfile_read_from_pending_buffer( gfile, bytes_left, buf, &first_chunk )) > 0 ) {",
          "994:     gfile->pos += realSize;",
          "995:     if( --total_chunks <= 0) {",
          "996:       return realSize;",
          "997:     };",
          "998:     buf += realSize;",
          "999:     bytes_left -= realSize;",
          "1000:     gridfile_flush_pendingchunk( gfile );",
          "1001:   };",
          "1003:   chunks = gridfile_get_chunks(gfile, first_chunk, total_chunks);",
          "1004:   realSize += gridfile_load_from_chunks( gfile, total_chunks, chunksize, chunks, buf, bytes_left);",
          "1005:   mongo_cursor_destroy(chunks);",
          "1007:   gfile->pos += realSize;",
          "1009:   return realSize;",
          "1010: }",
          "1012: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, void* buf,",
          "1013:                                                        int *first_chunk){",
          "1014:   gridfs_offset realSize = 0;",
          "1015:   if( gfile->pending_len > 0 && *first_chunk == gfile->chunk_num) {",
          "1016:     char *chunk_data;",
          "1017:     gridfs_offset chunksize = gridfile_get_chunksize(gfile);",
          "1018:     gridfs_offset ofs = gfile->pos - gfile->chunk_num * chunksize;",
          "1019:     realSize = gfile->pending_len - ofs > totalBytesToRead ? totalBytesToRead : gfile->pending_len - ofs;",
          "1020:     chunk_data = gfile->pending_data + ofs;",
          "1021:     memcpy( buf, chunk_data, (size_t)realSize );",
          "1022:     (*first_chunk)++;",
          "1023:   };",
          "1024:   return realSize;",
          "1025: }",
          "1027: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, void **targetBuf,",
          "1028:                                          size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo);",
          "1030: static gridfs_offset gridfile_load_from_chunks(gridfile *gfile, int total_chunks, gridfs_offset chunksize, mongo_cursor *chunks, char* buf,",
          "1031:                                                gridfs_offset bytes_left){",
          "1032:   int i;",
          "1033:   void* targetBuf = NULL;",
          "1034:   size_t targetBufLen = 0;",
          "1035:   int allocatedMem = 0;",
          "1036:   gridfs_offset realSize = 0;",
          "1038:   for (i = 0; i < total_chunks; i++) {",
          "1039:     if( mongo_cursor_next(chunks) != MONGO_OK ){",
          "1040:       break;",
          "1042:     realSize += gridfile_fill_buf_from_chunk( gfile, &chunks->current, chunksize, &buf, &allocatedMem, &targetBuf, &targetBufLen, &bytes_left, i);",
          "1043:   }",
          "1044:   if( allocatedMem ) {",
          "1045:     bson_free( targetBuf );",
          "1046:   }",
          "1047:   return realSize;",
          "1050: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, void **targetBuf,",
          "1051:                                                   size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo){",
          "1052:   bson_iterator it = INIT_ITERATOR;",
          "1053:   gridfs_offset chunk_len;",
          "1054:   char *chunk_data;",
          "1056:   bson_find(&it, chunk, \"data\");",
          "1057:   chunk_len = bson_iterator_bin_len(&it);",
          "1058:   chunk_data = (char*)bson_iterator_bin_data(&it);",
          "1059:   postProcessChunk( targetBuf, targetBufLen, (void*)(chunk_data), (size_t)chunk_len, gfile->flags );",
          "1061:   chunk_data = (char*)(*targetBuf);",
          "1062:   if (chunkNo == 0) {",
          "1063:     chunk_data += (gfile->pos) % chunksize;",
          "1065:   }",
          "1066:   if (*bytes_left > *targetBufLen) {",
          "1067:     memcpy(*buf, chunk_data, *targetBufLen);",
          "1070:     return *targetBufLen;",
          "1071:   } else {",
          "1072:     memcpy(*buf, chunk_data, (size_t)(*bytes_left));",
          "1073:     return *bytes_left;",
          "1074:   }",
          "1075: }",
          "1077: MONGO_EXPORT gridfs_offset gridfile_seek(gridfile *gfile, gridfs_offset offset) {",
          "1078:   gridfs_offset length;",
          "1079:   gridfs_offset chunkSize;",
          "1080:   gridfs_offset newPos;",
          "1082:   chunkSize = gridfile_get_chunksize( gfile );",
          "1083:   length = gridfile_get_contentlength( gfile );",
          "1084:   newPos = length < offset ? length : offset;",
          "1087:   if (gfile->pending_len && (newPos >= (gfile->chunk_num + 1) * chunkSize || newPos < gfile->chunk_num * chunkSize)) {",
          "1088:     gridfile_flush_pendingchunk( gfile );",
          "1089:   };",
          "1090:   gfile->pos = newPos;",
          "1091:   return newPos;",
          "1092: }",
          "1094: MONGO_EXPORT gridfs_offset gridfile_write_file(gridfile *gfile, FILE *stream) {",
          "1095:   int i;",
          "1096:   size_t len;",
          "1097:   bson chunk = INIT_BSON;",
          "1098:   bson_iterator it = INIT_ITERATOR;",
          "1099:   const char *data = NULL;",
          "1100:   void* targetBuf = NULL;",
          "1101:   size_t targetBufLen = 0;",
          "1102:   int num;",
          "1104:   num = gridfile_get_numchunks(gfile);",
          "1106:   for (i = 0; i < num; i++) {",
          "1107:     gridfile_get_chunk(gfile, i, &chunk);",
          "1108:     bson_find(&it, &chunk, \"data\");",
          "1109:     len = bson_iterator_bin_len(&it);",
          "1110:     data = bson_iterator_bin_data(&it);",
          "1111:     postProcessChunk( &targetBuf, &targetBufLen, (void*)data, (size_t)len, gfile->flags );",
          "1112:     fwrite(targetBuf, sizeof(char), targetBufLen, stream);",
          "1113:     bson_destroy(&chunk);",
          "1114:   }",
          "1116:   if( targetBuf && targetBuf != data ) {",
          "1117:     bson_free( targetBuf );",
          "1118:   }",
          "1119:   return gridfile_get_contentlength(gfile);",
          "1120: }",
          "1122: static void gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "1123:   bson q = INIT_BSON;",
          "1125:   bson_init( &q );",
          "1126:   bson_append_oid(&q, \"files_id\", gridfile_get_id( gfile ));",
          "1127:   if( deleteFromChunk >= 0 ) {",
          "1128:     bson_append_start_object( &q, \"n\" );",
          "1129:       bson_append_int( &q, \"$gte\", deleteFromChunk );",
          "1130:     bson_append_finish_object( &q );",
          "1131:   }",
          "1132:   bson_finish( &q );",
          "1133:   mongo_remove( gfile->gfs->client, gfile->gfs->chunks_ns, &q, NULL);",
          "1134:   bson_destroy( &q );",
          "1135: }",
          "1137: MONGO_EXPORT gridfs_offset gridfile_truncate(gridfile *gfile, gridfs_offset newSize) {",
          "1139:   int deleteFromChunk;",
          "1141:   if( newSize < 0 ) {",
          "1142:     newSize = 0;",
          "1143:   } else if ( newSize > gridfile_get_contentlength( gfile ) ) {",
          "1144:     return gridfile_seek( gfile, gridfile_get_contentlength( gfile ) );",
          "1145:   }",
          "1146:   if( newSize > 0 ) {",
          "1147:     deleteFromChunk = (int)(newSize / gridfile_get_chunksize( gfile ));",
          "1148:     gridfile_seek(gfile, newSize);",
          "1149:     if( gfile->pos % gridfile_get_chunksize( gfile ) ) {",
          "1150:       if( !gfile->pending_len ) {",
          "1151:         gridfile_load_pending_data_with_pos_chunk( gfile );",
          "1152:       };",
          "1154:       gridfile_flush_pendingchunk( gfile );",
          "1155:       deleteFromChunk++;",
          "1158:     gridfile_remove_chunks( gfile, deleteFromChunk );",
          "1159:     gfile->length = newSize;",
          "1160:   } else {",
          "1162:     gridfile_remove_chunks( gfile, -1 );",
          "1163:     gfile->length = 0;",
          "1164:     gfile->pos = 0;",
          "1165:   }",
          "1166:   return gfile->length;",
          "1167: }",
          "1169: MONGO_EXPORT gridfs_offset gridfile_expand(gridfile *gfile, gridfs_offset bytesToExpand){",
          "1170:   gridfs_offset fileSize, newSize, curPos, toWrite, bufSize;",
          "1172:   void* buf;",
          "1174:   fileSize = gridfile_get_contentlength( gfile );",
          "1175:   if( bytesToExpand < 0 ) {",
          "1176:     gridfile_seek( gfile, fileSize );",
          "1177:     return fileSize;",
          "1178:   }",
          "1179:   newSize = fileSize + bytesToExpand;",
          "1180:   curPos = fileSize;",
          "1181:   bufSize = gridfile_get_chunksize ( gfile );",
          "1182:   buf = bson_malloc( (size_t)bufSize );",
          "1184:   memset( buf, 0, (size_t)bufSize );",
          "1185:   gridfile_seek( gfile, fileSize );",
          "1187:   while( curPos < newSize ) {",
          "1188:     toWrite = bufSize - curPos % bufSize;",
          "1189:     if( toWrite + curPos > newSize ) {",
          "1190:       toWrite = newSize - curPos;",
          "1191:     }",
          "1192:     gridfile_write_buffer( gfile, (const char*)buf, toWrite );",
          "1193:     curPos += toWrite;",
          "1194:   }",
          "1196:   bson_free( buf );",
          "1197:   return newSize;",
          "1200: MONGO_EXPORT gridfs_offset gridfile_set_size(gridfile *gfile, gridfs_offset newSize)",
          "1201: {",
          "1202:   gridfs_offset fileSize;",
          "1204:   fileSize = gridfile_get_contentlength( gfile );",
          "1205:   if( newSize <= fileSize ) {",
          "1206:     return gridfile_truncate( gfile, newSize );",
          "1207:   } else {",
          "1208:     return gridfile_expand( gfile, newSize - fileSize );",
          "1209:   }",
          "",
          "---------------"
        ],
        "test/gridfs_test.c||test/gridfs_test.c": [
          "File: test/gridfs_test.c -> test/gridfs_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include \"md5.h\"",
          "3: #include \"mongo.h\"",
          "4: #include \"gridfs.h\"",
          "5: #include <stdlib.h>",
          "6: #include <string.h>",
          "7: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"prepostChunkProcessing.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: #define MEDIUM 1024*512",
          "16: #define LOWER 1024*128",
          "17: #define DELTA 1024*128",
          "19: void fill_buffer_randomly( char *data, int64_t length ) {",
          "20:     int64_t i;",
          "21:     int random;",
          "22:     char *letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
          "25:     for ( i = 0; i < length; i++ ) {",
          "26:         random = rand() % nletters;",
          "",
          "[Removed Lines]",
          "23:     int nletters = strlen( letters )+1;",
          "",
          "[Added Lines]",
          "19: #define READ_WRITE_BUF_SIZE 10 * 1024",
          "25:     int nletters = (int)strlen( letters )+1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     char hex_digest[33];",
          "47:     int64_t i = length;",
          "48:     int n;",
          "52:     ASSERT( gridfile_exists( gfile ) );",
          "54:     stream = fopen( \"output\", \"w+\" );",
          "55:     gridfile_write_file( gfile, stream );",
          "56:     fseek( stream, 0, SEEK_SET );",
          "58:     fclose( stream );",
          "61:     gridfile_read( gfile, length, data_after );",
          "68:     ASSERT( gridfile_get_chunksize( gfile ) == DEFAULT_CHUNK_SIZE );",
          "70:     ASSERT( strcmp( gridfile_get_contenttype( gfile ), content_type ) == 0 ) ;",
          "81:     }",
          "89:     gridfile_destroy( gfile );",
          "90:     gridfs_remove_filename( gfs, filename );",
          "91:     free( data_after );",
          "93: }",
          "95: void test_basic( void ) {",
          "96:     mongo conn[1];",
          "97:     gridfs gfs[1];",
          "99:     int64_t i;",
          "100:     FILE *fd;",
          "104:     INIT_SOCKETS_FOR_WINDOWS;",
          "",
          "[Removed Lines]",
          "49:     char *data_after = bson_malloc( LARGE );",
          "51:     gridfs_find_filename( gfs, filename, gfile );",
          "57:     ASSERT( fread( data_after, length, sizeof( char ), stream ) );",
          "59:     ASSERT( strncmp( data_before, data_after, length ) == 0 );",
          "62:     ASSERT( strncmp( data_before, data_after, length ) == 0 );",
          "64:     ASSERT( strcmp( gridfile_get_filename( gfile ), filename ) == 0 );",
          "66:     ASSERT( gridfile_get_contentlength( gfile ) == length );",
          "72:     ASSERT( strncmp( data_before, data_after, length ) == 0 );",
          "74:     mongo_md5_init( pms );",
          "76:     n = 0;",
          "77:     while( i > INT_MAX  ) {",
          "78:         mongo_md5_append( pms, ( const mongo_md5_byte_t * )data_before + ( n * INT_MAX ), INT_MAX );",
          "79:         i -= INT_MAX;",
          "80:         n += 1;",
          "82:     if( i > 0 )",
          "83:         mongo_md5_append( pms, ( const mongo_md5_byte_t * )data_before + ( n * INT_MAX ), i );",
          "85:     mongo_md5_finish( pms, digest );",
          "86:     digest2hex( digest, hex_digest );",
          "87:     ASSERT( strcmp( gridfile_get_md5( gfile ), hex_digest ) == 0 );",
          "92:     unlink( \"output\" );",
          "98:     char *data_before = bson_malloc( UPPER );",
          "102:     srand( time( NULL ) );",
          "",
          "[Added Lines]",
          "51:     char *data_after = (char*)bson_malloc( LARGE );",
          "52:     int truncBytes;",
          "53:     char* lowerName;",
          "55:     ASSERT(gridfs_find_filename( gfs, filename, gfile ) == MONGO_OK);",
          "61:     ASSERT( fread( data_after, (size_t)length, sizeof( char ), stream ) );",
          "63:     ASSERT( memcmp( data_before, data_after, (size_t)length ) == 0 );",
          "66:     ASSERT( memcmp( data_before, data_after, (size_t)length ) == 0 );",
          "68:     lowerName = (char*) bson_malloc( (int)strlen( filename ) + 1);",
          "69:     strcpy( lowerName, filename);",
          "70:     _strlwr( lowerName );",
          "71:     ASSERT( strcmp( gridfile_get_filename( gfile ), lowerName ) == 0 );",
          "72:     bson_free( lowerName );",
          "74:     ASSERT( gridfile_get_contentlength( gfile ) == (size_t)length );",
          "80:     ASSERT( memcmp( data_before, data_after, (size_t)length ) == 0 );",
          "82:     if( !( gfile->flags & GRIDFILE_COMPRESS ) ) {",
          "83:       mongo_md5_init( pms );",
          "85:       n = 0;",
          "86:       while( i > INT_MAX  ) {",
          "87:           mongo_md5_append( pms, ( const mongo_md5_byte_t * )data_before + ( n * INT_MAX ), INT_MAX );",
          "88:           i -= INT_MAX;",
          "89:           n += 1;",
          "90:       }",
          "91:       if( i > 0 )",
          "92:           mongo_md5_append( pms, ( const mongo_md5_byte_t * )data_before + ( n * INT_MAX ), (int)i );",
          "94:       mongo_md5_finish( pms, digest );",
          "95:       digest2hex( digest, hex_digest );",
          "96:       ASSERT( strcmp( gridfile_get_md5( gfile ), hex_digest ) == 0 );",
          "99:     truncBytes = (int) (length > DEFAULT_CHUNK_SIZE * 4 ? length - DEFAULT_CHUNK_SIZE * 2 - 13 : 23);",
          "100:     gridfile_writer_init( gfile, gfs, filename, content_type, GRIDFILE_DEFAULT);",
          "101:     ASSERT( gridfile_truncate(gfile, (size_t)(length - truncBytes)) == (size_t)(length - truncBytes));",
          "102:     gridfile_writer_done( gfile );",
          "104:     gridfile_seek(gfile, 0);",
          "105:     ASSERT( gridfile_get_contentlength( gfile ) == (size_t)(length - truncBytes) );",
          "106:     ASSERT( gridfile_read( gfile, length, data_after ) ==  (size_t)(length - truncBytes));",
          "107:     ASSERT( memcmp( data_before, data_after, (size_t)(length - truncBytes) ) == 0 );",
          "109:     gridfile_writer_init( gfile, gfs, filename, content_type, GRIDFILE_DEFAULT);",
          "110:     gridfile_truncate(gfile, 0);",
          "111:     gridfile_writer_done( gfile );",
          "113:     ASSERT( gridfile_get_contentlength( gfile ) == 0 );",
          "114:     ASSERT( gridfile_read( gfile, length, data_after ) == 0 );",
          "119:     _unlink( \"output\" );",
          "125:     char *data_before = (char*)bson_malloc( UPPER );",
          "129:     srand((unsigned int) time( NULL ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     for ( i = LOWER; i <= UPPER; i += DELTA ) {",
          "118:         test_gridfile( gfs, data_before, i, \"input-buffer\", \"text/html\" );",
          "121:         fd = fopen( \"input-file\", \"w\" );",
          "123:         fclose( fd );",
          "125:         test_gridfile( gfs, data_before, i, \"input-file\", \"text/html\" );",
          "126:     }",
          "128:     gridfs_destroy( gfs );",
          "",
          "[Removed Lines]",
          "117:         gridfs_store_buffer( gfs, data_before, i, \"input-buffer\", \"text/html\" );",
          "122:         fwrite( data_before, sizeof( char ), i, fd );",
          "124:         gridfs_store_file( gfs, \"input-file\", \"input-file\", \"text/html\" );",
          "",
          "[Added Lines]",
          "144:         gridfs_store_buffer( gfs, data_before, i, \"input-buffer\", \"text/html\", GRIDFILE_COMPRESS );",
          "149:         fwrite( data_before, sizeof( char ), (size_t)i, fd );",
          "151:         gridfs_store_file( gfs, \"input-file\", \"input-file\", \"text/html\", GRIDFILE_DEFAULT );",
          "154:         gfs->caseInsensitive = 1;",
          "155:         gridfs_store_file( gfs, \"input-file\", \"input-file\", \"text/html\", GRIDFILE_DEFAULT );",
          "156:         test_gridfile( gfs, data_before, i, \"inPut-file\", \"text/html\" );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:     free( data_before );",
          "136: }",
          "138: void test_streaming( void ) {",
          "139:     mongo conn[1];",
          "140:     gridfs gfs[1];",
          "141:     gridfile gfile[1];",
          "145:     int n;",
          "147:     if( buf == NULL || small == NULL ) {",
          "",
          "[Removed Lines]",
          "134:     unlink( \"input-file\" );",
          "135:     unlink( \"output\" );",
          "142:     char *medium = bson_malloc( 2*MEDIUM );",
          "143:     char *small = bson_malloc( LOWER );",
          "144:     char *buf = bson_malloc( LARGE );",
          "",
          "[Added Lines]",
          "165:     _unlink( \"input-file\" );",
          "166:     _unlink( \"output\" );",
          "173:     char *medium = (char*)bson_malloc( 2*MEDIUM );",
          "174:     char *small = (char*)bson_malloc( LOWER );",
          "175:     char *buf = (char*)bson_malloc( LARGE );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:         exit( 1 );",
          "150:     }",
          "154:     INIT_SOCKETS_FOR_WINDOWS;",
          "",
          "[Removed Lines]",
          "152:     srand( time( NULL ) );",
          "",
          "[Added Lines]",
          "183:     srand( (unsigned int)time( NULL ) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:     fill_buffer_randomly( buf, ( int64_t )LARGE );",
          "165:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "168:     gridfile_write_buffer( gfile, medium, MEDIUM );",
          "169:     gridfile_write_buffer( gfile, medium + MEDIUM, MEDIUM );",
          "",
          "[Removed Lines]",
          "166:     gridfile_writer_init( gfile, gfs, \"medium\", \"text/html\" );",
          "",
          "[Added Lines]",
          "197:     gridfile_init( gfs, NULL, gfile );",
          "198:     gridfile_writer_init( gfile, gfs, \"medium\", \"text/html\", GRIDFILE_DEFAULT );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "174:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "177:     test_gridfile( gfs, small, LOWER, \"small\", \"text/html\" );",
          "178:     gridfs_destroy( gfs );",
          "180:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "182:     for( n=0; n < ( LARGE / 1024 ); n++ ) {",
          "183:         gridfile_write_buffer( gfile, buf + ( n * 1024 ), 1024 );",
          "184:     }",
          "",
          "[Removed Lines]",
          "176:     gridfs_store_buffer( gfs, small, LOWER, \"small\", \"text/html\" );",
          "181:     gridfile_writer_init( gfile, gfs, \"large\", \"text/html\" );",
          "",
          "[Added Lines]",
          "208:     gridfs_store_buffer( gfs, small, LOWER, \"small\", \"text/html\", GRIDFILE_DEFAULT );",
          "213:     gridfs_remove_filename( gfs, \"large\" );",
          "214:     gridfile_writer_init( gfile, gfs, \"large\", \"text/html\", GRIDFILE_DEFAULT );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "188:     gridfs_destroy( gfs );",
          "189:     mongo_destroy( conn );",
          "191:     free( small );",
          "192:     free( buf );",
          "193: }",
          "195: void test_large( void ) {",
          "",
          "[Removed Lines]",
          "190:     free( medium );",
          "",
          "[Added Lines]",
          "223:     free( buf );",
          "225:     free( medium );",
          "226: }",
          "228: void test_random_write() {",
          "229:     mongo conn[1];",
          "230:     gridfs gfs[1];",
          "231:     gridfile* gfile;",
          "232:     char *data_before = (char*)bson_malloc( UPPER );",
          "233:     char *random_data = (char*)bson_malloc( UPPER );",
          "234:     char *buf = (char*) bson_malloc( UPPER );",
          "235:     int64_t i;",
          "236:     FILE *fd;",
          "238:     srand((unsigned int) time( NULL ) );",
          "240:     INIT_SOCKETS_FOR_WINDOWS;",
          "242:     if ( mongo_client( conn, TEST_SERVER, 27017 ) ) {",
          "243:         printf( \"failed to connect 2\\n\" );",
          "244:         exit( 1 );",
          "245:     }",
          "247:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "249:     fill_buffer_randomly( data_before, UPPER );",
          "250:     fill_buffer_randomly( random_data, UPPER );",
          "251:     for ( i = LOWER; i <= UPPER; i += DELTA ) {",
          "252:         int64_t j = i / 2 - 3;",
          "253:         int n, bytes_to_write_first;",
          "256:         gridfs_store_buffer( gfs, data_before, i, \"input-buffer\", \"text/html\", GRIDFILE_DEFAULT );",
          "257:         if ( i > DEFAULT_CHUNK_SIZE * 4 ) {",
          "258:           n = DEFAULT_CHUNK_SIZE * 3 + 6;",
          "259:           memcpy(&data_before[j], random_data, n); // Let's overwrite the buffer with bytes crossing multiple chunks",
          "260:           bytes_to_write_first = 10;",
          "261:         } else {",
          "262:           n = 6;",
          "263:           memcpy(random_data, \"123456\", n);",
          "264:           strncpy(&data_before[j], random_data, n); // Let's overwrite the buffer with a few some bytes",
          "265:           bytes_to_write_first = 0;",
          "266:         }",
          "267:         gfile = gridfile_create();",
          "268:         ASSERT(gridfs_find_filename(gfs, \"input-buffer\", gfile) == 0);",
          "269:         gridfile_writer_init(gfile, gfs, \"input-buffer\", \"text/html\", GRIDFILE_DEFAULT );",
          "270:         gridfile_seek(gfile, j); // Seek into the same buffer position within the GridFS file",
          "271:         if ( bytes_to_write_first ) {",
          "272:           gridfile_write_buffer(gfile, random_data, bytes_to_write_first); // Let's write 10 bytes first, and later the rest",
          "273:         }",
          "274:         gridfile_write_buffer(gfile, &random_data[bytes_to_write_first], n - bytes_to_write_first); // Try to write to the existing GridFS file on the position given by j",
          "275:         gridfile_seek(gfile, j);",
          "276:         gridfile_read( gfile, n, buf );",
          "277:         ASSERT(memcmp( buf, &data_before[j], n) == 0);",
          "279:         gridfile_writer_done(gfile);",
          "280:         ASSERT(gfile->pos == j + n);",
          "281:         gridfile_dispose(gfile);",
          "282:         test_gridfile( gfs, data_before, j + n > i ? j + n : i, \"input-buffer\", \"text/html\" );",
          "285:         fd = fopen( \"input-file\", \"w\" );",
          "286:         fwrite( data_before, sizeof( char ), (size_t) (j + n > i ? j + n : i), fd );",
          "287:         fclose( fd );",
          "288:         gridfs_store_file( gfs, \"input-file\", \"input-file\", \"text/html\", GRIDFILE_DEFAULT );",
          "289:         test_gridfile( gfs, data_before, j + n > i ? j + n : i, \"input-file\", \"text/html\" );",
          "290:     }",
          "292:     gridfs_destroy( gfs );",
          "293:     mongo_disconnect( conn );",
          "294:     mongo_destroy( conn );",
          "295:     free( data_before );",
          "296:     free( random_data );",
          "300:     _unlink( \"input-file\" );",
          "301:     _unlink( \"output\" );",
          "302: }",
          "304: void test_random_write2( void ) {",
          "305:     mongo conn[1];",
          "306:     gridfs gfs[1];",
          "307:     gridfile gfile[1];",
          "308:     bson meta;",
          "309:     char *buf = (char*)bson_malloc( LARGE );",
          "310:     char *zeroedbuf = (char*)bson_malloc( LARGE );",
          "311:     int n;",
          "313:     if( buf == NULL ) {",
          "314:         printf( \"Failed to allocate\" );",
          "315:         exit( 1 );",
          "316:     }",
          "318:     srand( 123 ); // Init with a predictable value",
          "320:     INIT_SOCKETS_FOR_WINDOWS;",
          "322:     if ( mongo_client( conn , TEST_SERVER, 27017 ) ) {",
          "323:         printf( \"failed to connect 3\\n\" );",
          "324:         exit( 1 );",
          "325:     }",
          "327:     fill_buffer_randomly( buf, ( int64_t )LARGE );",
          "328:     memset( zeroedbuf, 0, LARGE );",
          "330:     bson_empty( &meta );",
          "332:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "336:     gridfile_init( gfs, &meta, gfile );",
          "337:     gridfile_writer_init( gfile, gfs, \"random_access\", \"text/html\", 0 );",
          "338:     gridfile_set_size( gfile, LARGE ); // New API, this zero fills the file",
          "339:     gridfile_writer_done( gfile );",
          "340:     test_gridfile( gfs, zeroedbuf, LARGE, \"random_access\", \"text/html\" ); // Test zero filled file",
          "343:     gridfile_init( gfs, &meta, gfile );",
          "344:     gridfile_writer_init( gfile, gfs, \"random_access\", \"text/html\", 0 );",
          "345:     gridfile_set_size( gfile, LARGE ); // New API, this zero fills the file with LARGE bytes",
          "346:     gridfile_truncate( gfile, LARGE / 2 ); // Let's truncate the file now",
          "347:     gridfile_writer_done( gfile );",
          "348:     test_gridfile( gfs, zeroedbuf, LARGE / 2, \"random_access\", \"text/html\" ); // Test zero filled file truncated by half",
          "351:     gridfile_init( gfs, &meta, gfile );",
          "352:     gridfile_writer_init( gfile, gfs, \"random_access\", \"text/html\", 0 );",
          "353:     gridfile_set_size( gfile, LARGE ); // We need to reserve LARGE bytes on file before writing backwards",
          "357:     for( n = LARGE / 3072 - 1; n >= 0; n-- ) {",
          "358:         gridfile_seek( gfile, 3072 * n );",
          "359:         gridfile_write_buffer( gfile, buf + ( n * 3072 ), 3072 );",
          "360:     }",
          "361:     gridfile_writer_done( gfile );",
          "362:     test_gridfile( gfs, buf, LARGE, \"random_access\", \"text/html\" );",
          "364:     gridfs_destroy( gfs );",
          "365:     mongo_destroy( conn );",
          "367:     free( buf );",
          "368:     free( zeroedbuf );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "197:     gridfs gfs[1];",
          "198:     gridfile gfile[1];",
          "199:     FILE *fd;",
          "202:     int64_t filesize = ( int64_t )1024 * ( int64_t )LARGE;",
          "206:     INIT_SOCKETS_FOR_WINDOWS;",
          "208:     if ( mongo_client( conn, TEST_SERVER, 27017 ) ) {",
          "209:         printf( \"failed to connect 1\\n\" );",
          "210:         exit( 1 );",
          "213:     gridfs_init( conn, \"test\", \"fs\", gfs );",
          "219:         fwrite( buffer, 1, LARGE, fd );",
          "220:     }",
          "226:     gridfs_find_filename( gfs, \"bigfile\", gfile );",
          "228:     ASSERT( strcmp( gridfile_get_filename( gfile ), \"bigfile\" ) == 0 );",
          "229:     ASSERT( gridfile_get_contentlength( gfile ) ==  filesize );",
          "238:     }",
          "239:     gridfile_writer_done( gfile );",
          "241:     gridfs_find_filename( gfs, \"bigfile-stream\", gfile );",
          "243:     ASSERT( strcmp( gridfile_get_filename( gfile ), \"bigfile-stream\" ) == 0 );",
          "244:     ASSERT( gridfile_get_contentlength( gfile ) ==  filesize );",
          "246:     gridfs_destroy( gfs );",
          "247:     mongo_disconnect( conn );",
          "248:     mongo_destroy( conn );",
          "250: }",
          "252: int main( void ) {",
          "256:     test_basic();",
          "257:     test_streaming();",
          "264:     return 0;",
          "265: }",
          "",
          "[Removed Lines]",
          "200:     int i, n;",
          "201:     char *buffer = bson_malloc( LARGE );",
          "204:     srand( time( NULL ) );",
          "211:     }",
          "216:     fill_buffer_randomly( buffer, ( int64_t )LARGE );",
          "217:     fd = fopen( \"bigfile\", \"w\" );",
          "218:     for( i=0; i<1024; i++ ) {",
          "221:     fclose( fd );",
          "224:     gridfs_store_file( gfs, \"bigfile\", \"bigfile\", \"text/html\" );",
          "232:     gridfile_writer_init( gfile, gfs, \"bigfile-stream\", \"text/html\" );",
          "234:     fd = fopen( \"bigfile\", \"r\" );",
          "236:     while( ( n = fread( buffer, 1, 1024, fd ) ) != 0 ) {",
          "237:         gridfile_write_buffer( gfile, buffer, n );",
          "249:     free( buffer );",
          "255: #ifndef _WIN32",
          "258: #endif",
          "",
          "[Added Lines]",
          "376:     size_t i, n;",
          "377:     char *buffer = (char*)bson_malloc( LARGE );",
          "378:     char *read_buf = (char*)bson_malloc( LARGE );",
          "380:     mongo_write_concern wc;",
          "381:     bson lastError;",
          "382:     bson lastErrorCmd;",
          "384:     srand( (unsigned int) time( NULL ) );",
          "391:     }",
          "392:     mongo_write_concern_init(&wc);",
          "393:     wc.j = 1;",
          "394:     mongo_write_concern_finish(&wc);",
          "395:     mongo_set_write_concern(conn, &wc);",
          "400:     fd = fopen( \"bigfile\", \"r\" );",
          "401:     if( fd ) {",
          "402:       fclose( fd );",
          "403:     } else {",
          "405:       fill_buffer_randomly( buffer, ( int64_t )LARGE );",
          "406:       fd = fopen( \"bigfile\", \"w\" );",
          "407:       for( i=0; i<1024; i++ ) {",
          "409:       }",
          "410:       fclose( fd );",
          "414:     gridfs_remove_filename( gfs, \"bigfile\" );",
          "415:     gridfs_store_file( gfs, \"bigfile\", \"bigfile\", \"text/html\", GRIDFILE_NOMD5 | GRIDFILE_COMPRESS);",
          "422:     fd = fopen( \"bigfile\", \"r\" );",
          "424:     while( ( n = fread( buffer, 1, MEDIUM, fd ) ) != 0 ) {",
          "425:       ASSERT( gridfile_read( gfile, MEDIUM, read_buf ) == n );",
          "426:       ASSERT( memcmp( buffer, read_buf, n ) == 0 );",
          "427:     }",
          "429:     fclose( fd );",
          "430:     gridfile_destroy( gfile );",
          "433:     gridfs_remove_filename( gfs, \"bigfile\" );",
          "434:     gridfs_remove_filename( gfs, \"bigfile-stream\" );",
          "435:     gridfile_writer_init( gfile, gfs, \"bigfile-stream\", \"text/html\", GRIDFILE_NOMD5 | GRIDFILE_COMPRESS );",
          "437:     mongo_write_concern_destroy( &wc );",
          "438:     mongo_write_concern_init(&wc);",
          "440:     mongo_write_concern_finish(&wc);",
          "441:     mongo_set_write_concern(conn, &wc);",
          "443:     fd = fopen( \"bigfile\", \"r\" );",
          "444:     i = 0;",
          "445:     while( ( n = fread( buffer, 1, READ_WRITE_BUF_SIZE, fd ) ) != 0 ) {",
          "446:         gridfile_write_buffer( gfile, buffer, n );",
          "447:         if(i++ % 10 == 0) {",
          "448:           bson_init( &lastErrorCmd );",
          "449:           bson_append_int( &lastErrorCmd, \"getLastError\", 1);",
          "450:           bson_append_int( &lastErrorCmd, \"j\", 1);",
          "451:           bson_finish( &lastErrorCmd );",
          "453:           bson_init( &lastError );",
          "454:           mongo_run_command( conn, \"test\", &lastErrorCmd, &lastError );",
          "456:           bson_destroy( &lastError );",
          "457:           bson_destroy( &lastErrorCmd );",
          "458:         }",
          "461:     mongo_write_concern_destroy( &wc );",
          "462:     mongo_write_concern_init(&wc);",
          "464:     mongo_write_concern_finish(&wc);",
          "465:     mongo_set_write_concern(conn, &wc);",
          "467:     fclose( fd );",
          "474:     gridfs_remove_filename( gfs, \"bigfile-stream\" );",
          "480:     bson_free( buffer );",
          "481:     bson_free( read_buf );",
          "482:     mongo_write_concern_destroy( &wc );",
          "489:     initPrepostChunkProcessing(0);",
          "493:     test_random_write();",
          "494:     test_random_write2();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94a9e8cc884fd1557c4c30fef4cdc09ec530bc83",
      "candidate_info": {
        "commit_hash": "94a9e8cc884fd1557c4c30fef4cdc09ec530bc83",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/94a9e8cc884fd1557c4c30fef4cdc09ec530bc83",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h"
        ],
        "message": "GridFS: Change return type of gridfile_get_oid for convenience",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588: }",
          "590: MONGO_EXPORT void gridfile_writer_init(gridfile *gfile, gridfs *gfs, const char *remote_name, const char *content_type, int flags ) {",
          "592:   gridfile tmpFile = INIT_GRIDFILE;",
          "594:   gfile->gfs = gfs;",
          "",
          "[Removed Lines]",
          "591:   bson_oid_t *foid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:     if( gridfile_exists(&tmpFile) ) {",
          "601:       gridfile_init_length( &tmpFile );",
          "602:       gfile->length = tmpFile.length;",
          "603:       gfile->chunkSize = gridfile_get_chunksize( gfile );",
          "",
          "[Removed Lines]",
          "599:       foid = gridfile_get_id( &tmpFile );",
          "600:       memcpy(&gfile->id, foid, sizeof( gfile->id ));",
          "",
          "[Added Lines]",
          "598:       gfile->id = gridfile_get_id( &tmpFile );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:   bson_iterator it = INIT_ITERATOR;",
          "652:   if( bson_find(&it, gfile->meta, \"_id\") != BSON_EOO) {",
          "653:     if (bson_iterator_type(&it) == BSON_OID) {",
          "655:     } else {",
          "657:     }",
          "658:   } else {",
          "660:   }",
          "661: }",
          "665:   return (bson_bool_t)(gfile != NULL && gfile->meta != NULL);",
          "666: }",
          "669:   bson_iterator it = INIT_ITERATOR;",
          "671:   if( gfile->gfs->caseInsensitive && bson_find( &it, gfile->meta, \"realFilename\" ) != BSON_EOO ) {",
          "",
          "[Removed Lines]",
          "649: MONGO_EXPORT bson_oid_t *gridfile_get_id(gridfile *gfile) {",
          "654:       return bson_iterator_oid(&it);",
          "656:       return &gfile->id;",
          "659:     return &gfile->id;",
          "663: MONGO_EXPORT bson_bool_t gridfile_exists(gridfile *gfile) {",
          "668: MONGO_EXPORT const char *gridfile_get_filename(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "647: MONGO_EXPORT bson_oid_t gridfile_get_id( const gridfile *gfile ) {",
          "652:       return *bson_iterator_oid(&it);",
          "654:       return gfile->id;",
          "657:     return gfile->id;",
          "661: MONGO_EXPORT bson_bool_t gridfile_exists( const gridfile *gfile ) {",
          "666: MONGO_EXPORT const char *gridfile_get_filename( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "927: MONGO_EXPORT void gridfile_get_chunk(gridfile *gfile, int n, bson *out) {",
          "928:   bson query = INIT_BSON;",
          "931:   int result;",
          "933:   bson_init(&query);",
          "934:   id = gridfile_get_id( gfile );",
          "936:   bson_append_int(&query, \"n\", n);",
          "937:   bson_finish(&query);",
          "",
          "[Removed Lines]",
          "930:   bson_oid_t *id;",
          "935:   bson_append_oid(&query, \"files_id\", id);",
          "",
          "[Added Lines]",
          "928:   bson_oid_t id;",
          "933:   bson_append_oid(&query, \"files_id\", &id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1145: static void gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "1146:   bson q = INIT_BSON;",
          "1148:   bson_init( &q );",
          "1150:   if( deleteFromChunk >= 0 ) {",
          "1151:     bson_append_start_object( &q, \"n\" );",
          "1152:       bson_append_int( &q, \"$gte\", deleteFromChunk );",
          "",
          "[Removed Lines]",
          "1149:   bson_append_oid(&q, \"files_id\", gridfile_get_id( gfile ));",
          "",
          "[Added Lines]",
          "1145:   bson_oid_t id = gridfile_get_id( gfile );",
          "1148:   bson_append_oid(&q, \"files_id\", &id);",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "268: MONGO_EXPORT bson_oid_t *gridfile_get_id(gridfile *gfile);",
          "",
          "[Added Lines]",
          "268: MONGO_EXPORT bson_oid_t gridfile_get_id( const gridfile *gfile );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "836109b848f9adfcd3f5cc1ba3e5a1e932af5bd5",
      "candidate_info": {
        "commit_hash": "836109b848f9adfcd3f5cc1ba3e5a1e932af5bd5",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/836109b848f9adfcd3f5cc1ba3e5a1e932af5bd5",
        "files": [
          "src/gridfs.c"
        ],
        "message": "Fixed small warning of uninitialized variable",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1061: MONGO_EXPORT gridfs_offset gridfile_write_file(gridfile *gfile, FILE *stream) {",
          "1062:   char buffer[DEFAULT_CHUNK_SIZE];",
          "1064:   gridfs_offset total_written = 0;",
          "1066:   do {",
          "",
          "[Removed Lines]",
          "1063:   size_t data_read, data_written;",
          "",
          "[Added Lines]",
          "1063:   size_t data_read, data_written = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "485bca9adb57e776bc430a02ca5486007a8ffcfb",
      "candidate_info": {
        "commit_hash": "485bca9adb57e776bc430a02ca5486007a8ffcfb",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/485bca9adb57e776bc430a02ca5486007a8ffcfb",
        "files": [
          "src/gridfs.c"
        ],
        "message": "Improved all functions that should check for MONGO_OK to be sensitive to failure. Added code so that functions which before simply returned void not return at least in an int with MONGO_OK or MONGO_ERROR. And finally added code for functions which return a gridfs_offset now will have the ability to return a value indicating partial completion of the work in case there was a prior failure on a function that required MONGO_OK",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   }",
          "263:   bson_append_long(&ret, \"length\", length);",
          "264:   bson_append_int(&ret, \"chunkSize\", chunkSize);",
          "266:   bson_append_date(&ret, \"uploadDate\", d);",
          "267:   if( !( flags & GRIDFILE_NOMD5 ) ) {",
          "268:     bson_find(&it, &res, \"md5\");",
          "",
          "[Removed Lines]",
          "265:   d = (bson_date_t)1000 *time(NULL);",
          "",
          "[Added Lines]",
          "265:   d = (bson_date_t)1000 * time(NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     remotename = filename;",
          "330:   }",
          "335:   chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "336:   while( chunkLen != 0 ) {",
          "",
          "[Removed Lines]",
          "332:   gridfile_init( gfs, NULL, &gfile );",
          "333:   gridfile_writer_init( &gfile, gfs, remotename, contenttype, flags );",
          "",
          "[Added Lines]",
          "332:   if( gridfile_init( gfs, NULL, &gfile ) != MONGO_OK ) return MONGO_ERROR;",
          "333:   if( gridfile_writer_init( &gfile, gfs, remotename, contenttype, flags ) != MONGO_OK ){",
          "334:     gridfile_destroy( &gfile );",
          "335:     return MONGO_ERROR;",
          "336:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:     bson_init(&b);",
          "385:     bson_append_oid(&b, \"files_id\", &id);",
          "386:     bson_finish(&b);",
          "388:     bson_destroy(&b);",
          "391:   }",
          "393:   mongo_cursor_destroy(files);",
          "",
          "[Removed Lines]",
          "387:     mongo_remove(gfs->client, gfs->chunks_ns, &b, NULL);",
          "390:     ret = MONGO_OK;",
          "",
          "[Added Lines]",
          "390:     ret = mongo_remove(gfs->client, gfs->chunks_ns, &b, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425: MONGO_EXPORT int gridfs_find_filename(gridfs *gfs, const char *filename, gridfile *gfile){",
          "426:   bson query = INIT_BSON;",
          "429:   bson_init(&query);",
          "430:   bson_append_string_uppercase( &query, \"filename\", filename, gfs->caseInsensitive );",
          "431:   bson_finish(&query);",
          "433:   bson_destroy(&query);",
          "435: }",
          "",
          "[Removed Lines]",
          "427:   int i;",
          "432:   i = gridfs_find_query(gfs, &query, gfile);",
          "434:   return i;",
          "",
          "[Added Lines]",
          "428:   int res;",
          "433:   res = gridfs_find_query(gfs, &query, gfile);",
          "435:   return res;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443: static void gridfile_init_flags(gridfile *gfile);",
          "444: static void gridfile_init_length(gridfile *gfile);",
          "445: static void gridfile_init_chunkSize(gridfile *gfile);",
          "",
          "[Removed Lines]",
          "442: static void gridfile_flush_pendingchunk(gridfile *gfile);",
          "",
          "[Added Lines]",
          "443: static int gridfile_flush_pendingchunk(gridfile *gfile);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "468: MONGO_EXPORT int gridfile_writer_done(gridfile *gfile) {",
          "472:   if (gfile->pending_len) {",
          "476:   }",
          "477:   if( gfile->pending_data ) {",
          "478:     bson_free(gfile->pending_data);",
          "479:     gfile->pending_data = NULL;",
          "480:   }",
          "485:   if( gfile->remote_name ) {",
          "486:     bson_free(gfile->remote_name);",
          "487:     gfile->remote_name = NULL;",
          "",
          "[Removed Lines]",
          "470:   int response;",
          "475:     gridfile_flush_pendingchunk(gfile);",
          "483:   response = gridfs_insert_file(gfile->gfs, gfile->remote_name, gfile->id, gfile->length, gfile->content_type, gfile->flags, gfile->chunkSize);",
          "",
          "[Added Lines]",
          "471:   int response = MONGO_OK;",
          "476:     response = gridfile_flush_pendingchunk(gfile);",
          "482:   if( response == MONGO_OK ) {",
          "484:     response = gridfs_insert_file(gfile->gfs, gfile->remote_name, gfile->id, gfile->length, gfile->content_type, gfile->flags, gfile->chunkSize);",
          "485:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "644: MONGO_EXPORT const char *gridfile_get_contenttype( const gridfile *gfile ) {",
          "645:   bson_iterator it = INIT_ITERATOR;",
          "648:     return bson_iterator_string(&it);",
          "649:   } else {",
          "650:     return NULL;",
          "",
          "[Removed Lines]",
          "647:   if (bson_find(&it, gfile->meta, \"contentType\")) {",
          "",
          "[Added Lines]",
          "647:   if ( bson_find(&it, gfile->meta, \"contentType\") != BSON_EOO ) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "702: MONGO_EXPORT void gridfile_get_metadata( const gridfile *gfile, bson *out, bson_bool_t copyData ) {",
          "703:   bson_iterator it = INIT_ITERATOR;",
          "706:     bson_iterator_subobject_init(&it, out, copyData);",
          "707:   } else {",
          "708:     bson_init_empty(out);",
          "",
          "[Removed Lines]",
          "705:   if (bson_find(&it, gfile->meta, \"metadata\")) {",
          "",
          "[Added Lines]",
          "705:   if( bson_find(&it, gfile->meta, \"metadata\") != BSON_EOO ) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "722:   bson_find(&it, gfile->meta, \"length\");",
          "725:     length = (gridfs_offset)bson_iterator_int(&it);",
          "726:   } else {",
          "727:     length = (gridfs_offset)bson_iterator_long(&it);",
          "",
          "[Removed Lines]",
          "724:   if (bson_iterator_type(&it) == BSON_INT) {",
          "",
          "[Added Lines]",
          "724:   if ( bson_iterator_type(&it) == BSON_INT ) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "740:   bson_finish(q);",
          "741: }",
          "744:   bson *oChunk;",
          "745:   bson q = INIT_BSON;",
          "746:   char* targetBuf = NULL;",
          "748:   if (gfile->pending_len) {",
          "749:     size_t finish_position_after_flush;",
          "750:     oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, gfile->pending_data, gfile->pending_len, gfile->flags );",
          "751:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num );",
          "753:     bson_destroy(&q);",
          "754:     chunk_free(oChunk);",
          "758:     }",
          "761:   }",
          "762:   if( targetBuf && targetBuf != gfile->pending_data ) {",
          "763:     bson_free( targetBuf );",
          "764:   }",
          "765: }",
          "768:   int chunk_len;",
          "769:   const char *chunk_data;",
          "770:   bson_iterator it = INIT_ITERATOR;",
          "",
          "[Removed Lines]",
          "743: static void gridfile_flush_pendingchunk(gridfile *gfile) {",
          "752:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "755:     finish_position_after_flush = (gfile->chunk_num * gfile->chunkSize) + gfile->pending_len;",
          "756:     if(finish_position_after_flush > gfile->length) {",
          "757:       gfile->length = finish_position_after_flush;",
          "759:     gfile->chunk_num++;",
          "760:     gfile->pending_len = 0;",
          "767: static void gridfile_load_pending_data_with_pos_chunk(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "743: static int gridfile_flush_pendingchunk(gridfile *gfile) {",
          "747:   int res = MONGO_OK;",
          "753:     res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "756:     if( res == MONGO_OK ){",
          "757:       finish_position_after_flush = (gfile->chunk_num * gfile->chunkSize) + gfile->pending_len;",
          "758:       if(finish_position_after_flush > gfile->length) {",
          "759:         gfile->length = finish_position_after_flush;",
          "760:       }",
          "761:       gfile->chunk_num++;",
          "762:       gfile->pending_len = 0;",
          "768:   return res;",
          "771: static int gridfile_load_pending_data_with_pos_chunk(gridfile *gfile) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "778:     if( chk.data ) {",
          "779:       bson_destroy( &chk );",
          "780:     }",
          "783:   }",
          "792:   }",
          "793:   bson_destroy( &chk );",
          "794:   if( targetBuffer && targetBuffer != chunk_data ) {",
          "795:     bson_free( targetBuffer );",
          "796:   }",
          "798: }",
          "800: MONGO_EXPORT gridfs_offset gridfile_write_buffer(gridfile *gfile, const char *data, gridfs_offset length) {",
          "",
          "[Removed Lines]",
          "781:     bson_fatal_msg( 0, \"The chunk didn't contain any fields... this has to be an internal error...\");",
          "782:     return;",
          "784:   bson_find(&it, &chk, \"data\");",
          "785:   chunk_len = bson_iterator_bin_len(&it);",
          "786:   chunk_data = bson_iterator_bin_data(&it);",
          "787:   gridfs_read_filter( &targetBuffer, &targetBufferLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "788:   gfile->pending_len = (int)targetBufferLen;",
          "789:   gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "790:   if( targetBufferLen ) {",
          "791:     memcpy(gfile->pending_data, targetBuffer, targetBufferLen);",
          "797:   return;",
          "",
          "[Added Lines]",
          "785:     return MONGO_ERROR;",
          "787:   if( bson_find(&it, &chk, \"data\") != BSON_EOO){",
          "788:     chunk_len = bson_iterator_bin_len(&it);",
          "789:     chunk_data = bson_iterator_bin_data(&it);",
          "790:     gridfs_read_filter( &targetBuffer, &targetBufferLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "791:     gfile->pending_len = (int)targetBufferLen;",
          "792:     gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "793:     if( targetBufferLen ) {",
          "794:       memcpy(gfile->pending_data, targetBuffer, targetBufferLen);",
          "795:     }",
          "796:   } else {",
          "797:     bson_destroy( &chk );",
          "798:     return MONGO_ERROR;",
          "804:   return MONGO_OK;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "812:      If so, then we need to preload current chunk and merge the data into it using the pending_data field",
          "814:   if( buf_pos ) {",
          "818:     buf_bytes_to_write = (size_t)MIN( length, DEFAULT_CHUNK_SIZE - buf_pos );",
          "819:     memcpy( &gfile->pending_data[buf_pos], data, buf_bytes_to_write);",
          "820:     if ( buf_bytes_to_write + buf_pos > gfile->pending_len ) {",
          "821:       gfile->pending_len = buf_bytes_to_write + buf_pos;",
          "822:     }",
          "823:     gfile->pos += buf_bytes_to_write;",
          "827:     bytes_left -= buf_bytes_to_write;",
          "828:     data += buf_bytes_to_write;",
          "829:   }",
          "",
          "[Removed Lines]",
          "815:     if( !gfile->pending_len ) {",
          "816:       gridfile_load_pending_data_with_pos_chunk( gfile );",
          "817:     }",
          "824:     if( buf_bytes_to_write + buf_pos >= DEFAULT_CHUNK_SIZE ) {",
          "825:       gridfile_flush_pendingchunk(gfile);",
          "826:     }",
          "",
          "[Added Lines]",
          "822:     if( !gfile->pending_len && gridfile_load_pending_data_with_pos_chunk( gfile ) != MONGO_OK ) return 0;",
          "829:     if( buf_bytes_to_write + buf_pos >= DEFAULT_CHUNK_SIZE && gridfile_flush_pendingchunk(gfile) != MONGO_OK ) return 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "833:   while( bytes_left >= DEFAULT_CHUNK_SIZE ) {",
          "835:     memAllocated = targetBuf != data;",
          "836:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num);",
          "838:     bson_destroy( &q );",
          "839:     chunk_free(oChunk);",
          "840:     bytes_left -= DEFAULT_CHUNK_SIZE;",
          "841:     gfile->chunk_num++;",
          "842:     gfile->pos += DEFAULT_CHUNK_SIZE;",
          "",
          "[Removed Lines]",
          "834:     oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, data, DEFAULT_CHUNK_SIZE, gfile->flags );",
          "837:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "",
          "[Added Lines]",
          "837:     int res;",
          "838:     if( (oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, data, DEFAULT_CHUNK_SIZE, gfile->flags )) == NULL) return length - bytes_left;",
          "841:     res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "844:     if( res != MONGO_OK ) return length - bytes_left;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "853:        AND if after writing the remaining buffer there's should be trailing data that we don't",
          "858:     memcpy( gfile->pending_data, data, (size_t) bytes_left );",
          "859:     if(  bytes_left > gfile->pending_len ) {",
          "860:       gfile->pending_len = (int) bytes_left;",
          "",
          "[Removed Lines]",
          "855:     if( !gfile->pending_len && gfile->pos + bytes_left < gfile->length ) {",
          "856:       gridfile_load_pending_data_with_pos_chunk( gfile );",
          "857:     }",
          "",
          "[Added Lines]",
          "860:     if( !gfile->pending_len && gfile->pos + bytes_left < gfile->length && gridfile_load_pending_data_with_pos_chunk( gfile ) != MONGO_OK )",
          "861:       return length - bytes_left;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "964:     }",
          "965:     buf += realSize;",
          "966:     bytes_left -= realSize;",
          "968:   };",
          "970:   chunks = gridfile_get_chunks(gfile, first_chunk, total_chunks);",
          "",
          "[Removed Lines]",
          "967:     gridfile_flush_pendingchunk( gfile );",
          "",
          "[Added Lines]",
          "971:     if( gridfile_flush_pendingchunk( gfile ) != MONGO_OK ){",
          "973:       return realSize;",
          "974:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1020:   gridfs_offset chunk_len;",
          "1021:   const char *chunk_data;",
          "1038:   } else {",
          "1042: }",
          "1044: MONGO_EXPORT gridfs_offset gridfile_seek(gridfile *gfile, gridfs_offset offset) {",
          "",
          "[Removed Lines]",
          "1023:   bson_find(&it, chunk, \"data\");",
          "1024:   chunk_len = bson_iterator_bin_len(&it);",
          "1025:   chunk_data = bson_iterator_bin_data(&it);",
          "1026:   gridfs_read_filter( targetBuf, targetBufLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "1028:   chunk_data = *targetBuf;",
          "1029:   if (chunkNo == 0) {",
          "1030:     chunk_data += (gfile->pos) % chunksize;",
          "1032:   }",
          "1033:   if (*bytes_left > *targetBufLen) {",
          "1034:     memcpy(*buf, chunk_data, *targetBufLen);",
          "1037:     return *targetBufLen;",
          "1039:     memcpy(*buf, chunk_data, (size_t)(*bytes_left));",
          "1040:     return *bytes_left;",
          "1041:   }",
          "",
          "[Added Lines]",
          "1030:   if( bson_find(&it, chunk, \"data\") != BSON_EOO ) {",
          "1031:     chunk_len = bson_iterator_bin_len(&it);",
          "1032:     chunk_data = bson_iterator_bin_data(&it);",
          "1033:     if( gridfs_read_filter( targetBuf, targetBufLen, chunk_data, (size_t)chunk_len, gfile->flags ) != 0) return 0;",
          "1035:     chunk_data = *targetBuf;",
          "1036:     if (chunkNo == 0) {",
          "1037:       chunk_data += (gfile->pos) % chunksize;",
          "1039:     }",
          "1040:     if (*bytes_left > *targetBufLen) {",
          "1041:       memcpy(*buf, chunk_data, *targetBufLen);",
          "1044:       return *targetBufLen;",
          "1045:     } else {",
          "1046:       memcpy(*buf, chunk_data, (size_t)(*bytes_left));",
          "1047:       return *bytes_left;",
          "1048:     }",
          "1050:     bson_fatal_msg( 0, \"Chunk object doesn't have 'data' attribute\" );",
          "1051:     return 0;",
          "1052:   }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1051:   newPos = MIN( length, offset );",
          "1057:   gfile->pos = newPos;",
          "1058:   return newPos;",
          "1059: }",
          "",
          "[Removed Lines]",
          "1054:   if (gfile->pending_len && (newPos >= (gfile->chunk_num + 1) * chunkSize || newPos < gfile->chunk_num * chunkSize)) {",
          "1055:     gridfile_flush_pendingchunk( gfile );",
          "1056:   };",
          "",
          "[Added Lines]",
          "1065:   if (gfile->pending_len && (newPos >= (gfile->chunk_num + 1) * chunkSize || newPos < gfile->chunk_num * chunkSize) &&",
          "1066:     gridfile_flush_pendingchunk( gfile ) != MONGO_OK ) return gfile->pos;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1074:   return total_written;",
          "1075: }",
          "1078:   bson q = INIT_BSON;",
          "1079:   bson_oid_t id = gridfile_get_id( gfile );",
          "1081:   bson_init( &q );",
          "1082:   bson_append_oid(&q, \"files_id\", &id);",
          "1083:   if( deleteFromChunk >= 0 ) {",
          "1084:     bson_append_start_object( &q, \"n\" );",
          "1086:     bson_append_finish_object( &q );",
          "1087:   }",
          "1088:   bson_finish( &q );",
          "1090:   bson_destroy( &q );",
          "1091: }",
          "1093: MONGO_EXPORT gridfs_offset gridfile_truncate(gridfile *gfile, gridfs_offset newSize) {",
          "",
          "[Removed Lines]",
          "1077: static void gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "1085:       bson_append_int( &q, \"$gte\", deleteFromChunk );",
          "1089:   mongo_remove( gfile->gfs->client, gfile->gfs->chunks_ns, &q, NULL);",
          "",
          "[Added Lines]",
          "1087: static int gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "1090:   int res;",
          "1096:     bson_append_int( &q, \"$gte\", deleteFromChunk );",
          "1100:   res = mongo_remove( gfile->gfs->client, gfile->gfs->chunks_ns, &q, NULL);",
          "1102:   return res;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1099:   }",
          "1100:   if( newSize > 0 ) {",
          "1101:     deleteFromChunk = (int)(newSize / gridfile_get_chunksize( gfile ));",
          "1103:     if( gfile->pos % gridfile_get_chunksize( gfile ) ) {",
          "1109:       deleteFromChunk++;",
          "1110:     }",
          "1113:     gfile->length = newSize;",
          "1114:   } else {",
          "1117:     gfile->length = 0;",
          "1118:     gfile->pos = 0;",
          "1119:   }",
          "",
          "[Removed Lines]",
          "1102:     gridfile_seek(gfile, newSize);",
          "1104:       if( !gfile->pending_len ) {",
          "1105:         gridfile_load_pending_data_with_pos_chunk( gfile );",
          "1106:       };",
          "1108:       gridfile_flush_pendingchunk( gfile );",
          "1112:     gridfile_remove_chunks( gfile, deleteFromChunk );",
          "1116:     gridfile_remove_chunks( gfile, -1 );",
          "",
          "[Added Lines]",
          "1114:     if( gridfile_seek(gfile, newSize) != newSize ) return gfile->length;",
          "1116:       if( !gfile->pending_len && gridfile_load_pending_data_with_pos_chunk( gfile ) != MONGO_OK ) return gfile->length;",
          "1118:       if( gridfile_flush_pendingchunk( gfile ) != MONGO_OK ) return gfile->length;",
          "1122:     if( gridfile_remove_chunks( gfile, deleteFromChunk ) != MONGO_OK ) return gfile->length;",
          "1126:     if( gridfile_remove_chunks( gfile, -1 ) != MONGO_OK) return gfile->length;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1129:   newSize = fileSize + bytesToExpand;",
          "1130:   curPos = fileSize;",
          "1131:   bufSize = gridfile_get_chunksize ( gfile );",
          "1134:   memset( buf, 0, (size_t)bufSize );",
          "1135:   gridfile_seek( gfile, fileSize );",
          "",
          "[Removed Lines]",
          "1132:   buf = bson_malloc( (size_t)bufSize );",
          "",
          "[Added Lines]",
          "1142:   buf = (char*)bson_malloc( (size_t)bufSize );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1139:     if( toWrite + curPos > newSize ) {",
          "1140:       toWrite = newSize - curPos;",
          "1141:     }",
          "1143:     curPos += toWrite;",
          "1144:   }",
          "",
          "[Removed Lines]",
          "1142:     gridfile_write_buffer( gfile, (const char*)buf, toWrite );",
          "",
          "[Added Lines]",
          "1153:     if( gridfile_write_buffer( gfile, (const char*)buf, toWrite ) != toWrite) return curPos;",
          "",
          "---------------"
        ]
      }
    }
  ]
}