{
  "cve_id": "CVE-2023-22458",
  "cve_desc": "Redis is an in-memory database that persists on disk. Authenticated users can issue a `HRANDFIELD` or `ZRANDMEMBER` command with specially crafted arguments to trigger a denial-of-service by crashing Redis with an assertion failure. This problem affects Redis versions 6.2 or newer up to but not including 6.2.9 as well as versions 7.0 up to but not including 7.0.8. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "redis/redis",
  "patch_hash": "16f408b1a0121cacd44cbf8aee275d69dc627f02",
  "patch_info": {
    "commit_hash": "16f408b1a0121cacd44cbf8aee275d69dc627f02",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/16f408b1a0121cacd44cbf8aee275d69dc627f02",
    "files": [
      "src/t_hash.c",
      "src/t_zset.c",
      "tests/unit/type/hash.tcl",
      "tests/unit/type/zset.tcl"
    ],
    "message": "Fix range issues in ZRANDMEMBER and HRANDFIELD (CVE-2023-22458) (#11674)\n\nmissing range check in ZRANDMEMBER and HRANDIFLD leading to panic due\nto protocol limitations",
    "before_after_code_files": [
      "src/t_hash.c||src/t_hash.c",
      "src/t_zset.c||src/t_zset.c",
      "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
      "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
    ]
  },
  "patch_diff": {
    "src/t_hash.c||src/t_hash.c": [
      "File: src/t_hash.c -> src/t_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1120:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
      "1121:             addReplyErrorObject(c,shared.syntaxerr);",
      "1122:             return;",
      "1124:             withvalues = 1;",
      "1125:         hrandfieldWithCountCommand(c, l, withvalues);",
      "1126:         return;",
      "1127:     }",
      "",
      "[Removed Lines]",
      "1123:         } else if (c->argc == 4)",
      "",
      "[Added Lines]",
      "1123:         } else if (c->argc == 4) {",
      "1125:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
      "1126:                 addReplyError(c,\"value is out of range\");",
      "1127:                 return;",
      "1128:             }",
      "1129:         }",
      "",
      "---------------"
    ],
    "src/t_zset.c||src/t_zset.c": [
      "File: src/t_zset.c -> src/t_zset.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4317:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
      "4318:             addReplyErrorObject(c,shared.syntaxerr);",
      "4319:             return;",
      "4321:             withscores = 1;",
      "4322:         zrandmemberWithCountCommand(c, l, withscores);",
      "4323:         return;",
      "4324:     }",
      "",
      "[Removed Lines]",
      "4320:         } else if (c->argc == 4)",
      "",
      "[Added Lines]",
      "4320:         } else if (c->argc == 4) {",
      "4322:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
      "4323:                 addReplyError(c,\"value is out of range\");",
      "4324:                 return;",
      "4325:             }",
      "4326:         }",
      "",
      "---------------"
    ],
    "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
      "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         r hrandfield myhash 0",
      "72:     } {}",
      "74:     test \"HRANDFIELD with <count> against non existing key\" {",
      "75:         r hrandfield nonexisting_key 100",
      "76:     } {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     test \"HRANDFIELD count overflow\" {",
      "75:         r hmset myhash a 1",
      "76:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
      "77:     } {}",
      "",
      "---------------"
    ],
    "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
      "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "2322:         r zrandmember nonexisting_key 100",
      "2323:     } {}",
      "2325:     # Make sure we can distinguish between an empty array and a null response",
      "2326:     r readraw 1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2325:     test \"ZRANDMEMBER count overflow\" {",
      "2326:         r zadd myzset 0 a",
      "2327:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
      "2328:     } {}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1939b052adc058bd814045a745ec02d3f791d7b",
      "candidate_info": {
        "commit_hash": "b1939b052adc058bd814045a745ec02d3f791d7b",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/b1939b052adc058bd814045a745ec02d3f791d7b",
        "files": [
          "src/t_hash.c",
          "src/t_set.c",
          "src/t_zset.c",
          "tests/unit/type/hash.tcl",
          "tests/unit/type/set.tcl",
          "tests/unit/type/zset.tcl"
        ],
        "message": "Integer Overflow in RAND commands can lead to assertion (CVE-2023-25155) (#11857)\n\nIssue happens when passing a negative long value that greater than\nthe max positive value that the long can store.",
        "before_after_code_files": [
          "src/t_hash.c||src/t_hash.c",
          "src/t_set.c||src/t_set.c",
          "src/t_zset.c||src/t_zset.c",
          "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
          "tests/unit/type/set.tcl||tests/unit/type/set.tcl",
          "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ],
          "candidate": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_hash.c||src/t_hash.c": [
          "File: src/t_hash.c -> src/t_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1120:     listpackEntry ele;",
          "1122:     if (c->argc >= 3) {",
          "1124:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
          "1125:             addReplyErrorObject(c,shared.syntaxerr);",
          "1126:             return;",
          "1127:         } else if (c->argc == 4) {",
          "1128:             withvalues = 1;",
          "1130:                 addReplyError(c,\"value is out of range\");",
          "1131:                 return;",
          "1132:             }",
          "",
          "[Removed Lines]",
          "1123:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "1129:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "",
          "[Added Lines]",
          "1123:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "1129:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
          "",
          "---------------"
        ],
        "src/t_set.c||src/t_set.c": [
          "File: src/t_set.c -> src/t_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "985:     dict *d;",
          "988:     if (l >= 0) {",
          "989:         count = (unsigned long) l;",
          "990:     } else {",
          "",
          "[Removed Lines]",
          "987:     if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "",
          "[Added Lines]",
          "987:     if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "",
          "---------------"
        ],
        "src/t_zset.c||src/t_zset.c": [
          "File: src/t_zset.c -> src/t_zset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4317:     listpackEntry ele;",
          "4319:     if (c->argc >= 3) {",
          "4321:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
          "4322:             addReplyErrorObject(c,shared.syntaxerr);",
          "4323:             return;",
          "4324:         } else if (c->argc == 4) {",
          "4325:             withscores = 1;",
          "4327:                 addReplyError(c,\"value is out of range\");",
          "4328:                 return;",
          "4329:             }",
          "",
          "[Removed Lines]",
          "4320:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "4326:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "",
          "[Added Lines]",
          "4320:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "4326:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
          "",
          "---------------"
        ],
        "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
          "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     test \"HRANDFIELD count overflow\" {",
          "75:         r hmset myhash a 1",
          "76:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
          "77:     } {}",
          "79:     test \"HRANDFIELD with <count> against non existing key\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808 withvalues}",
          "78:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808}",
          "",
          "---------------"
        ],
        "tests/unit/type/set.tcl||tests/unit/type/set.tcl": [
          "File: tests/unit/type/set.tcl -> tests/unit/type/set.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:         r srandmember nonexisting_key 100",
          "746:     } {}",
          "748:     # Make sure we can distinguish between an empty array and a null response",
          "749:     r readraw 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     test \"SRANDMEMBER count overflow\" {",
          "749:         r sadd myset a",
          "750:         assert_error {*value is out of range*} {r srandmember myset -9223372036854775808}",
          "751:     } {}",
          "",
          "---------------"
        ],
        "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
          "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2325:     test \"ZRANDMEMBER count overflow\" {",
          "2326:         r zadd myzset 0 a",
          "2327:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
          "2328:     } {}",
          "2330:     # Make sure we can distinguish between an empty array and a null response",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2328:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808 withscores}",
          "2329:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37b3b2a7e0e3fa23c49ac5e79b56f4cf816b35de",
      "candidate_info": {
        "commit_hash": "37b3b2a7e0e3fa23c49ac5e79b56f4cf816b35de",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/37b3b2a7e0e3fa23c49ac5e79b56f4cf816b35de",
        "files": [
          "src/t_hash.c",
          "src/t_zset.c",
          "tests/unit/type/hash.tcl",
          "tests/unit/type/zset.tcl"
        ],
        "message": "Fix range issues in ZRANDMEMBER and HRANDFIELD (CVE-2023-22458)\n\nmissing range check in ZRANDMEMBER and HRANDIFLD leading to panic due\nto protocol limitations",
        "before_after_code_files": [
          "src/t_hash.c||src/t_hash.c",
          "src/t_zset.c||src/t_zset.c",
          "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
          "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ],
          "candidate": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_hash.c||src/t_hash.c": [
          "File: src/t_hash.c -> src/t_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
          "1197:             addReplyErrorObject(c,shared.syntaxerr);",
          "1198:             return;",
          "1200:             withvalues = 1;",
          "1201:         hrandfieldWithCountCommand(c, l, withvalues);",
          "1202:         return;",
          "1203:     }",
          "",
          "[Removed Lines]",
          "1199:         } else if (c->argc == 4)",
          "",
          "[Added Lines]",
          "1199:         } else if (c->argc == 4) {",
          "1201:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "1202:                 addReplyError(c,\"value is out of range\");",
          "1203:                 return;",
          "1204:             }",
          "1205:         }",
          "",
          "---------------"
        ],
        "src/t_zset.c||src/t_zset.c": [
          "File: src/t_zset.c -> src/t_zset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4242:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
          "4243:             addReplyErrorObject(c,shared.syntaxerr);",
          "4244:             return;",
          "4246:             withscores = 1;",
          "4247:         zrandmemberWithCountCommand(c, l, withscores);",
          "4248:         return;",
          "4249:     }",
          "",
          "[Removed Lines]",
          "4245:         } else if (c->argc == 4)",
          "",
          "[Added Lines]",
          "4245:         } else if (c->argc == 4) {",
          "4247:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "4248:                 addReplyError(c,\"value is out of range\");",
          "4249:                 return;",
          "4250:             }",
          "4251:         }",
          "",
          "---------------"
        ],
        "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
          "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         r hrandfield myhash 0",
          "69:     } {}",
          "71:     test \"HRANDFIELD with <count> against non existing key\" {",
          "72:         r hrandfield nonexisting_key 100",
          "73:     } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     test \"HRANDFIELD count overflow\" {",
          "72:         r hmset myhash a 1",
          "73:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
          "74:     } {}",
          "",
          "---------------"
        ],
        "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
          "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1735:         r zrandmember nonexisting_key 100",
          "1736:     } {}",
          "1738:     # Make sure we can distinguish between an empty array and a null response",
          "1739:     r readraw 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1738:     test \"ZRANDMEMBER count overflow\" {",
          "1739:         r zadd myzset 0 a",
          "1740:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
          "1741:     } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f1f02034ce674cad8268f958cf8c39944b240c6",
      "candidate_info": {
        "commit_hash": "3f1f02034ce674cad8268f958cf8c39944b240c6",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/3f1f02034ce674cad8268f958cf8c39944b240c6",
        "files": [
          "src/t_hash.c",
          "src/t_zset.c",
          "tests/unit/type/hash.tcl",
          "tests/unit/type/zset.tcl"
        ],
        "message": "Fix range issues in ZRANDMEMBER and HRANDFIELD (CVE-2023-22458)\n\nmissing range check in ZRANDMEMBER and HRANDIFLD leading to panic due\nto protocol limitations",
        "before_after_code_files": [
          "src/t_hash.c||src/t_hash.c",
          "src/t_zset.c||src/t_zset.c",
          "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
          "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ],
          "candidate": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_hash.c||src/t_hash.c": [
          "File: src/t_hash.c -> src/t_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1124:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
          "1125:             addReplyErrorObject(c,shared.syntaxerr);",
          "1126:             return;",
          "1128:             withvalues = 1;",
          "1129:         hrandfieldWithCountCommand(c, l, withvalues);",
          "1130:         return;",
          "1131:     }",
          "",
          "[Removed Lines]",
          "1127:         } else if (c->argc == 4)",
          "",
          "[Added Lines]",
          "1127:         } else if (c->argc == 4) {",
          "1129:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "1130:                 addReplyError(c,\"value is out of range\");",
          "1131:                 return;",
          "1132:             }",
          "1133:         }",
          "",
          "---------------"
        ],
        "src/t_zset.c||src/t_zset.c": [
          "File: src/t_zset.c -> src/t_zset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4293:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
          "4294:             addReplyErrorObject(c,shared.syntaxerr);",
          "4295:             return;",
          "4297:             withscores = 1;",
          "4298:         zrandmemberWithCountCommand(c, l, withscores);",
          "4299:         return;",
          "4300:     }",
          "",
          "[Removed Lines]",
          "4296:         } else if (c->argc == 4)",
          "",
          "[Added Lines]",
          "4296:         } else if (c->argc == 4) {",
          "4298:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "4299:                 addReplyError(c,\"value is out of range\");",
          "4300:                 return;",
          "4301:             }",
          "4302:         }",
          "",
          "---------------"
        ],
        "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
          "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         r hrandfield myhash 0",
          "72:     } {}",
          "74:     test \"HRANDFIELD with <count> against non existing key\" {",
          "75:         r hrandfield nonexisting_key 100",
          "76:     } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     test \"HRANDFIELD count overflow\" {",
          "75:         r hmset myhash a 1",
          "76:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
          "77:     } {}",
          "",
          "---------------"
        ],
        "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
          "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2300:         r zrandmember nonexisting_key 100",
          "2301:     } {}",
          "2303:     # Make sure we can distinguish between an empty array and a null response",
          "2304:     r readraw 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303:     test \"ZRANDMEMBER count overflow\" {",
          "2304:         r zadd myzset 0 a",
          "2305:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
          "2306:     } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}