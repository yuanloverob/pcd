{
  "cve_id": "CVE-2024-39305",
  "cve_desc": "Envoy is a cloud-native, open source edge and service proxy. Prior to versions 1.30.4, 1.29.7, 1.28.5, and 1.27.7. Envoy references already freed memory when route hash policy is configured with cookie attributes. Note that this vulnerability has been fixed in the open as the effect would be immediately apparent if it was configured. Memory allocated for holding attribute values is freed after configuration was parsed. During request processing Envoy will attempt to copy content of de-allocated memory into request cookie header. This can lead to arbitrary content of Envoy's memory to be sent to the upstream service or abnormal process termination. This vulnerability is fixed in Envoy versions v1.30.4, v1.29.7, v1.28.5, and v1.27.7. As a workaround, do not use cookie attributes in route action hash policy.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "b7f509607ad860fd6a63cde4f7d6f0197f9f63bb",
  "patch_info": {
    "commit_hash": "b7f509607ad860fd6a63cde4f7d6f0197f9f63bb",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/b7f509607ad860fd6a63cde4f7d6f0197f9f63bb",
    "files": [
      "changelogs/current.yaml",
      "source/common/http/hash_policy.cc",
      "test/integration/multiplexed_integration_test.cc"
    ],
    "message": "http: fix cookie attributes (#34885)\n\n---------\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
    "before_after_code_files": [
      "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
      "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc": [
      "File: source/common/http/hash_policy.cc -> source/common/http/hash_policy.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:   CookieHashMethod(const std::string& key, const std::string& path,",
      "83:                    const absl::optional<std::chrono::seconds>& ttl, bool terminal,",
      "84:                    const CookieAttributeRefVector attributes)",
      "87:   absl::optional<uint64_t> evaluate(const Network::Address::Instance*,",
      "88:                                     const RequestHeaderMap& headers,",
      "",
      "[Removed Lines]",
      "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl), attributes_(attributes) {}",
      "",
      "[Added Lines]",
      "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl) {",
      "86:     for (const auto& attribute : attributes) {",
      "87:       attributes_.push_back(attribute);",
      "88:     }",
      "89:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:     absl::optional<uint64_t> hash;",
      "92:     std::string value = Utility::parseCookieValue(headers, key_);",
      "93:     if (value.empty() && ttl_.has_value()) {",
      "95:       hash = HashUtil::xxHash64(value);",
      "97:     } else if (!value.empty()) {",
      "",
      "[Removed Lines]",
      "94:       value = add_cookie(key_, path_, ttl_.value(), attributes_);",
      "",
      "[Added Lines]",
      "98:       CookieAttributeRefVector attributes;",
      "99:       for (const auto& attribute : attributes_) {",
      "100:         attributes.push_back(attribute);",
      "101:       }",
      "102:       value = add_cookie(key_, path_, ttl_.value(), attributes);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "104:   const std::string key_;",
      "105:   const std::string path_;",
      "106:   const absl::optional<std::chrono::seconds> ttl_;",
      "108: };",
      "110: class IpHashMethod : public HashMethodImplBase {",
      "",
      "[Removed Lines]",
      "107:   const CookieAttributeRefVector attributes_;",
      "",
      "[Added Lines]",
      "115:   std::vector<CookieAttribute> attributes_;",
      "",
      "---------------"
    ],
    "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
      "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1777:   EXPECT_EQ(set_cookies.size(), 1);",
      "1778: }",
      "1780: TEST_P(MultiplexedRingHashIntegrationTest, CookieRoutingNoCookieWithZeroTtlSet) {",
      "1781:   config_helper_.addConfigModifier(",
      "1782:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1780: TEST_P(MultiplexedRingHashIntegrationTest,",
      "1781:        CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {",
      "1782:   config_helper_.addConfigModifier(",
      "1783:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "1784:               hcm) -> void {",
      "1785:         auto* hash_policy = hcm.mutable_route_config()",
      "1786:                                 ->mutable_virtual_hosts(0)",
      "1787:                                 ->mutable_routes(0)",
      "1788:                                 ->mutable_route()",
      "1789:                                 ->add_hash_policy();",
      "1790:         auto* cookie = hash_policy->mutable_cookie();",
      "1791:         cookie->set_name(\"foo\");",
      "1792:         cookie->mutable_ttl()->set_seconds(15);",
      "1793:         auto* attribute_1 = cookie->mutable_attributes()->Add();",
      "1794:         attribute_1->set_name(\"test1\");",
      "1795:         attribute_1->set_value(\"value1\");",
      "1796:         auto* attribute_2 = cookie->mutable_attributes()->Add();",
      "1797:         attribute_2->set_name(\"test2\");",
      "1798:         attribute_2->set_value(\"value2\");",
      "1799:       });",
      "1801:   std::set<std::string> set_cookies;",
      "1802:   sendMultipleRequests(",
      "1803:       1024,",
      "1804:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
      "1805:                                      {\":path\", \"/test/long/url\"},",
      "1806:                                      {\":scheme\", \"http\"},",
      "1807:                                      {\":authority\", \"host\"}},",
      "1808:       [&](IntegrationStreamDecoder& response) {",
      "1809:         EXPECT_EQ(\"200\", response.headers().getStatusValue());",
      "1810:         std::string value(",
      "1811:             response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());",
      "1812:         set_cookies.insert(value);",
      "1813:         EXPECT_THAT(value,",
      "1814:                     MatchesRegex(\"foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly\"));",
      "1815:       });",
      "1816:   EXPECT_EQ(set_cookies.size(), 1);",
      "1817: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99b6e525fb9f6f6f19a0425f779bc776f121c7e5",
      "candidate_info": {
        "commit_hash": "99b6e525fb9f6f6f19a0425f779bc776f121c7e5",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/99b6e525fb9f6f6f19a0425f779bc776f121c7e5",
        "files": [
          "changelogs/current.yaml",
          "source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc"
        ],
        "message": "http: fix cookie attributes (#34885)\n\n---------\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
        "before_after_code_files": [
          "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc": [
          "File: source/common/http/hash_policy.cc -> source/common/http/hash_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   CookieHashMethod(const std::string& key, const std::string& path,",
          "83:                    const absl::optional<std::chrono::seconds>& ttl, bool terminal,",
          "84:                    const CookieAttributeRefVector attributes)",
          "87:   absl::optional<uint64_t> evaluate(const Network::Address::Instance*,",
          "88:                                     const RequestHeaderMap& headers,",
          "",
          "[Removed Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl), attributes_(attributes) {}",
          "",
          "[Added Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl) {",
          "86:     for (const auto& attribute : attributes) {",
          "87:       attributes_.push_back(attribute);",
          "88:     }",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     absl::optional<uint64_t> hash;",
          "92:     std::string value = Utility::parseCookieValue(headers, key_);",
          "93:     if (value.empty() && ttl_.has_value()) {",
          "95:       hash = HashUtil::xxHash64(value);",
          "97:     } else if (!value.empty()) {",
          "",
          "[Removed Lines]",
          "94:       value = add_cookie(key_, path_, ttl_.value(), attributes_);",
          "",
          "[Added Lines]",
          "98:       CookieAttributeRefVector attributes;",
          "99:       for (const auto& attribute : attributes_) {",
          "100:         attributes.push_back(attribute);",
          "101:       }",
          "102:       value = add_cookie(key_, path_, ttl_.value(), attributes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   const std::string key_;",
          "105:   const std::string path_;",
          "106:   const absl::optional<std::chrono::seconds> ttl_;",
          "108: };",
          "110: class IpHashMethod : public HashMethodImplBase {",
          "",
          "[Removed Lines]",
          "107:   const CookieAttributeRefVector attributes_;",
          "",
          "[Added Lines]",
          "115:   std::vector<CookieAttribute> attributes_;",
          "",
          "---------------"
        ],
        "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
          "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1819:   EXPECT_EQ(set_cookies.size(), 1);",
          "1820: }",
          "1822: TEST_P(MultiplexedRingHashIntegrationTest, CookieRoutingNoCookieWithZeroTtlSet) {",
          "1823:   config_helper_.addConfigModifier(",
          "1824:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1822: TEST_P(MultiplexedRingHashIntegrationTest,",
          "1823:        CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {",
          "1824:   config_helper_.addConfigModifier(",
          "1825:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "1826:               hcm) -> void {",
          "1827:         auto* hash_policy = hcm.mutable_route_config()",
          "1828:                                 ->mutable_virtual_hosts(0)",
          "1829:                                 ->mutable_routes(0)",
          "1830:                                 ->mutable_route()",
          "1831:                                 ->add_hash_policy();",
          "1832:         auto* cookie = hash_policy->mutable_cookie();",
          "1833:         cookie->set_name(\"foo\");",
          "1834:         cookie->mutable_ttl()->set_seconds(15);",
          "1835:         auto* attribute_1 = cookie->mutable_attributes()->Add();",
          "1836:         attribute_1->set_name(\"test1\");",
          "1837:         attribute_1->set_value(\"value1\");",
          "1838:         auto* attribute_2 = cookie->mutable_attributes()->Add();",
          "1839:         attribute_2->set_name(\"test2\");",
          "1840:         attribute_2->set_value(\"value2\");",
          "1841:       });",
          "1843:   std::set<std::string> set_cookies;",
          "1844:   sendMultipleRequests(",
          "1845:       1024,",
          "1846:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "1847:                                      {\":path\", \"/test/long/url\"},",
          "1848:                                      {\":scheme\", \"http\"},",
          "1849:                                      {\":authority\", \"host\"}},",
          "1850:       [&](IntegrationStreamDecoder& response) {",
          "1851:         EXPECT_EQ(\"200\", response.headers().getStatusValue());",
          "1852:         std::string value(",
          "1853:             response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());",
          "1854:         set_cookies.insert(value);",
          "1855:         EXPECT_THAT(value,",
          "1856:                     MatchesRegex(\"foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly\"));",
          "1857:       });",
          "1858:   EXPECT_EQ(set_cookies.size(), 1);",
          "1859: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2135898f8f7bb138295ad19e084e8f80702a232",
      "candidate_info": {
        "commit_hash": "c2135898f8f7bb138295ad19e084e8f80702a232",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/c2135898f8f7bb138295ad19e084e8f80702a232",
        "files": [
          "changelogs/current.yaml",
          "source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc"
        ],
        "message": "http: fix cookie attributes (#34885)\n\n---------\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
        "before_after_code_files": [
          "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc": [
          "File: source/common/http/hash_policy.cc -> source/common/http/hash_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   CookieHashMethod(const std::string& key, const std::string& path,",
          "83:                    const absl::optional<std::chrono::seconds>& ttl, bool terminal,",
          "84:                    const CookieAttributeRefVector attributes)",
          "87:   absl::optional<uint64_t> evaluate(const Network::Address::Instance*,",
          "88:                                     const RequestHeaderMap& headers,",
          "",
          "[Removed Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl), attributes_(attributes) {}",
          "",
          "[Added Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl) {",
          "86:     for (const auto& attribute : attributes) {",
          "87:       attributes_.push_back(attribute);",
          "88:     }",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     absl::optional<uint64_t> hash;",
          "92:     std::string value = Utility::parseCookieValue(headers, key_);",
          "93:     if (value.empty() && ttl_.has_value()) {",
          "95:       hash = HashUtil::xxHash64(value);",
          "97:     } else if (!value.empty()) {",
          "",
          "[Removed Lines]",
          "94:       value = add_cookie(key_, path_, ttl_.value(), attributes_);",
          "",
          "[Added Lines]",
          "98:       CookieAttributeRefVector attributes;",
          "99:       for (const auto& attribute : attributes_) {",
          "100:         attributes.push_back(attribute);",
          "101:       }",
          "102:       value = add_cookie(key_, path_, ttl_.value(), attributes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   const std::string key_;",
          "105:   const std::string path_;",
          "106:   const absl::optional<std::chrono::seconds> ttl_;",
          "108: };",
          "110: class IpHashMethod : public HashMethodImplBase {",
          "",
          "[Removed Lines]",
          "107:   const CookieAttributeRefVector attributes_;",
          "",
          "[Added Lines]",
          "115:   std::vector<CookieAttribute> attributes_;",
          "",
          "---------------"
        ],
        "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
          "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1841:   EXPECT_EQ(set_cookies.size(), 1);",
          "1842: }",
          "1844: TEST_P(MultiplexedRingHashIntegrationTest, CookieRoutingNoCookieWithZeroTtlSet) {",
          "1845:   config_helper_.addConfigModifier(",
          "1846:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1844: TEST_P(MultiplexedRingHashIntegrationTest,",
          "1845:        CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {",
          "1846:   config_helper_.addConfigModifier(",
          "1847:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "1848:               hcm) -> void {",
          "1849:         auto* hash_policy = hcm.mutable_route_config()",
          "1850:                                 ->mutable_virtual_hosts(0)",
          "1851:                                 ->mutable_routes(0)",
          "1852:                                 ->mutable_route()",
          "1853:                                 ->add_hash_policy();",
          "1854:         auto* cookie = hash_policy->mutable_cookie();",
          "1855:         cookie->set_name(\"foo\");",
          "1856:         cookie->mutable_ttl()->set_seconds(15);",
          "1857:         auto* attribute_1 = cookie->mutable_attributes()->Add();",
          "1858:         attribute_1->set_name(\"test1\");",
          "1859:         attribute_1->set_value(\"value1\");",
          "1860:         auto* attribute_2 = cookie->mutable_attributes()->Add();",
          "1861:         attribute_2->set_name(\"test2\");",
          "1862:         attribute_2->set_value(\"value2\");",
          "1863:       });",
          "1865:   std::set<std::string> set_cookies;",
          "1866:   sendMultipleRequests(",
          "1867:       1024,",
          "1868:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "1869:                                      {\":path\", \"/test/long/url\"},",
          "1870:                                      {\":scheme\", \"http\"},",
          "1871:                                      {\":authority\", \"host\"}},",
          "1872:       [&](IntegrationStreamDecoder& response) {",
          "1873:         EXPECT_EQ(\"200\", response.headers().getStatusValue());",
          "1874:         std::string value(",
          "1875:             response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());",
          "1876:         set_cookies.insert(value);",
          "1877:         EXPECT_THAT(value,",
          "1878:                     MatchesRegex(\"foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly\"));",
          "1879:       });",
          "1880:   EXPECT_EQ(set_cookies.size(), 1);",
          "1881: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02a06681fbe0e039b1c7a9215257a7537eddb518",
      "candidate_info": {
        "commit_hash": "02a06681fbe0e039b1c7a9215257a7537eddb518",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/02a06681fbe0e039b1c7a9215257a7537eddb518",
        "files": [
          "changelogs/current.yaml",
          "source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc"
        ],
        "message": "http: fix cookie attributes (#34885)\n\n---------\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
        "before_after_code_files": [
          "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc": [
          "File: source/common/http/hash_policy.cc -> source/common/http/hash_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   CookieHashMethod(const std::string& key, const std::string& path,",
          "83:                    const absl::optional<std::chrono::seconds>& ttl, bool terminal,",
          "84:                    const CookieAttributeRefVector attributes)",
          "87:   absl::optional<uint64_t> evaluate(const Network::Address::Instance*,",
          "88:                                     const RequestHeaderMap& headers,",
          "",
          "[Removed Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl), attributes_(attributes) {}",
          "",
          "[Added Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl) {",
          "86:     for (const auto& attribute : attributes) {",
          "87:       attributes_.push_back(attribute);",
          "88:     }",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     absl::optional<uint64_t> hash;",
          "92:     std::string value = Utility::parseCookieValue(headers, key_);",
          "93:     if (value.empty() && ttl_.has_value()) {",
          "95:       hash = HashUtil::xxHash64(value);",
          "97:     } else if (!value.empty()) {",
          "",
          "[Removed Lines]",
          "94:       value = add_cookie(key_, path_, ttl_.value(), attributes_);",
          "",
          "[Added Lines]",
          "98:       CookieAttributeRefVector attributes;",
          "99:       for (const auto& attribute : attributes_) {",
          "100:         attributes.push_back(attribute);",
          "101:       }",
          "102:       value = add_cookie(key_, path_, ttl_.value(), attributes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   const std::string key_;",
          "105:   const std::string path_;",
          "106:   const absl::optional<std::chrono::seconds> ttl_;",
          "108: };",
          "110: class IpHashMethod : public HashMethodImplBase {",
          "",
          "[Removed Lines]",
          "107:   const CookieAttributeRefVector attributes_;",
          "",
          "[Added Lines]",
          "115:   std::vector<CookieAttribute> attributes_;",
          "",
          "---------------"
        ],
        "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
          "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1819:   EXPECT_EQ(set_cookies.size(), 1);",
          "1820: }",
          "1822: TEST_P(MultiplexedRingHashIntegrationTest, CookieRoutingNoCookieWithZeroTtlSet) {",
          "1823:   config_helper_.addConfigModifier(",
          "1824:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1822: TEST_P(MultiplexedRingHashIntegrationTest,",
          "1823:        CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {",
          "1824:   config_helper_.addConfigModifier(",
          "1825:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "1826:               hcm) -> void {",
          "1827:         auto* hash_policy = hcm.mutable_route_config()",
          "1828:                                 ->mutable_virtual_hosts(0)",
          "1829:                                 ->mutable_routes(0)",
          "1830:                                 ->mutable_route()",
          "1831:                                 ->add_hash_policy();",
          "1832:         auto* cookie = hash_policy->mutable_cookie();",
          "1833:         cookie->set_name(\"foo\");",
          "1834:         cookie->mutable_ttl()->set_seconds(15);",
          "1835:         auto* attribute_1 = cookie->mutable_attributes()->Add();",
          "1836:         attribute_1->set_name(\"test1\");",
          "1837:         attribute_1->set_value(\"value1\");",
          "1838:         auto* attribute_2 = cookie->mutable_attributes()->Add();",
          "1839:         attribute_2->set_name(\"test2\");",
          "1840:         attribute_2->set_value(\"value2\");",
          "1841:       });",
          "1843:   std::set<std::string> set_cookies;",
          "1844:   sendMultipleRequests(",
          "1845:       1024,",
          "1846:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "1847:                                      {\":path\", \"/test/long/url\"},",
          "1848:                                      {\":scheme\", \"http\"},",
          "1849:                                      {\":authority\", \"host\"}},",
          "1850:       [&](IntegrationStreamDecoder& response) {",
          "1851:         EXPECT_EQ(\"200\", response.headers().getStatusValue());",
          "1852:         std::string value(",
          "1853:             response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());",
          "1854:         set_cookies.insert(value);",
          "1855:         EXPECT_THAT(value,",
          "1856:                     MatchesRegex(\"foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly\"));",
          "1857:       });",
          "1858:   EXPECT_EQ(set_cookies.size(), 1);",
          "1859: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50b384cb203a1f2894324cbae64b6d9bc44cce45",
      "candidate_info": {
        "commit_hash": "50b384cb203a1f2894324cbae64b6d9bc44cce45",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/50b384cb203a1f2894324cbae64b6d9bc44cce45",
        "files": [
          "changelogs/current.yaml",
          "source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc"
        ],
        "message": "http: fix cookie attributes (#34885)\n\n---------\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
        "before_after_code_files": [
          "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
          "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc",
            "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/hash_policy.cc||source/common/http/hash_policy.cc": [
          "File: source/common/http/hash_policy.cc -> source/common/http/hash_policy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   CookieHashMethod(const std::string& key, const std::string& path,",
          "83:                    const absl::optional<std::chrono::seconds>& ttl, bool terminal,",
          "84:                    const CookieAttributeRefVector attributes)",
          "87:   absl::optional<uint64_t> evaluate(const Network::Address::Instance*,",
          "88:                                     const RequestHeaderMap& headers,",
          "",
          "[Removed Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl), attributes_(attributes) {}",
          "",
          "[Added Lines]",
          "85:       : HashMethodImplBase(terminal), key_(key), path_(path), ttl_(ttl) {",
          "86:     for (const auto& attribute : attributes) {",
          "87:       attributes_.push_back(attribute);",
          "88:     }",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     absl::optional<uint64_t> hash;",
          "92:     std::string value = Utility::parseCookieValue(headers, key_);",
          "93:     if (value.empty() && ttl_.has_value()) {",
          "95:       hash = HashUtil::xxHash64(value);",
          "97:     } else if (!value.empty()) {",
          "",
          "[Removed Lines]",
          "94:       value = add_cookie(key_, path_, ttl_.value(), attributes_);",
          "",
          "[Added Lines]",
          "98:       CookieAttributeRefVector attributes;",
          "99:       for (const auto& attribute : attributes_) {",
          "100:         attributes.push_back(attribute);",
          "101:       }",
          "102:       value = add_cookie(key_, path_, ttl_.value(), attributes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   const std::string key_;",
          "105:   const std::string path_;",
          "106:   const absl::optional<std::chrono::seconds> ttl_;",
          "108: };",
          "110: class IpHashMethod : public HashMethodImplBase {",
          "",
          "[Removed Lines]",
          "107:   const CookieAttributeRefVector attributes_;",
          "",
          "[Added Lines]",
          "115:   std::vector<CookieAttribute> attributes_;",
          "",
          "---------------"
        ],
        "test/integration/multiplexed_integration_test.cc||test/integration/multiplexed_integration_test.cc": [
          "File: test/integration/multiplexed_integration_test.cc -> test/integration/multiplexed_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1847:   EXPECT_EQ(set_cookies.size(), 1);",
          "1848: }",
          "1850: TEST_P(MultiplexedRingHashIntegrationTest, CookieRoutingNoCookieWithZeroTtlSet) {",
          "1851:   config_helper_.addConfigModifier(",
          "1852:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850: TEST_P(MultiplexedRingHashIntegrationTest,",
          "1851:        CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {",
          "1852:   config_helper_.addConfigModifier(",
          "1853:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "1854:               hcm) -> void {",
          "1855:         auto* hash_policy = hcm.mutable_route_config()",
          "1856:                                 ->mutable_virtual_hosts(0)",
          "1857:                                 ->mutable_routes(0)",
          "1858:                                 ->mutable_route()",
          "1859:                                 ->add_hash_policy();",
          "1860:         auto* cookie = hash_policy->mutable_cookie();",
          "1861:         cookie->set_name(\"foo\");",
          "1862:         cookie->mutable_ttl()->set_seconds(15);",
          "1863:         auto* attribute_1 = cookie->mutable_attributes()->Add();",
          "1864:         attribute_1->set_name(\"test1\");",
          "1865:         attribute_1->set_value(\"value1\");",
          "1866:         auto* attribute_2 = cookie->mutable_attributes()->Add();",
          "1867:         attribute_2->set_name(\"test2\");",
          "1868:         attribute_2->set_value(\"value2\");",
          "1869:       });",
          "1871:   std::set<std::string> set_cookies;",
          "1872:   sendMultipleRequests(",
          "1873:       1024,",
          "1874:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "1875:                                      {\":path\", \"/test/long/url\"},",
          "1876:                                      {\":scheme\", \"http\"},",
          "1877:                                      {\":authority\", \"host\"}},",
          "1878:       [&](IntegrationStreamDecoder& response) {",
          "1879:         EXPECT_EQ(\"200\", response.headers().getStatusValue());",
          "1880:         std::string value(",
          "1881:             response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());",
          "1882:         set_cookies.insert(value);",
          "1883:         EXPECT_THAT(value,",
          "1884:                     MatchesRegex(\"foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly\"));",
          "1885:       });",
          "1886:   EXPECT_EQ(set_cookies.size(), 1);",
          "1887: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}