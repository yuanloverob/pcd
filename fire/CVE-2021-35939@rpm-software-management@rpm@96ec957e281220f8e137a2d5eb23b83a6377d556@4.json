{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e3024ca3e7450104e70ec8d213cf223e71f7c02",
      "candidate_info": {
        "commit_hash": "0e3024ca3e7450104e70ec8d213cf223e71f7c02",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/0e3024ca3e7450104e70ec8d213cf223e71f7c02",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Track first hardlink directory descriptor as well\n\nCross-directory hardlinks shouldn't be used as there's no guarantee\ntwo directories are on the same filesystem, but these exist in the\nwild so we need to care.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "193:        rpmpsm psm, int nodigest,",
          "194:        struct filedata_s ** firstlink, int *firstlinkfile,",
          "196: {",
          "197:     int rc = 0;",
          "198:     int fd = -1;",
          "",
          "[Removed Lines]",
          "195:        int *fdp)",
          "",
          "[Added Lines]",
          "195:        int *firstdir, int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:  if (fp->sb.st_nlink > 1) {",
          "207:  }",
          "208:     } else {",
          "210:  if (*firstlink != fp) {",
          "212:  }",
          "213:  fd = *firstlinkfile;",
          "214:     }",
          "",
          "[Removed Lines]",
          "211:      rc = fsmLink(dirfd, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "[Added Lines]",
          "212:      rc = fsmLink(*firstdir, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822: struct diriter_s {",
          "823:     int dirfd;",
          "824: };",
          "826: static int onChdir(rpmfi fi, void *data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:     int firstdir;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "828:     struct diriter_s *di = data;",
          "830:     if (di->dirfd >= 0) {",
          "832:  di->dirfd = -1;",
          "833:     }",
          "834:     return 0;",
          "",
          "[Removed Lines]",
          "831:  close(di->dirfd);",
          "",
          "[Added Lines]",
          "834:  if (di->dirfd != di->firstdir)",
          "835:      close(di->dirfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "849: static rpmfi fsmIterFini(rpmfi fi, struct diriter_s *di)",
          "850: {",
          "853:     return rpmfiFree(fi);",
          "854: }",
          "",
          "[Removed Lines]",
          "851:     close(di->dirfd);",
          "852:     di->dirfd = -1;",
          "",
          "[Added Lines]",
          "855:     if (di->dirfd >= 0) {",
          "856:  close(di->dirfd);",
          "857:  di->dirfd = -1;",
          "858:     }",
          "859:     if (di->firstdir >= 0) {",
          "860:  close(di->firstdir);",
          "861:  di->firstdir = -1;",
          "862:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "869:     char *tid = NULL;",
          "870:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
          "871:     struct filedata_s *firstlink = NULL;",
          "875:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
          "",
          "[Removed Lines]",
          "872:     struct diriter_s di = { -1 };",
          "",
          "[Added Lines]",
          "882:     struct diriter_s di = { -1, -1 };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "969:             if (S_ISREG(fp->sb.st_mode)) {",
          "970:   if (rc == RPMERR_ENOENT) {",
          "971:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "973:   }",
          "974:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "975:                 if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "972:        &firstlink, &firstlinkfile, &fd);",
          "",
          "[Added Lines]",
          "982:        &firstlink, &firstlinkfile, &di.firstdir,",
          "983:        &fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093: int rpmPackageFilesRemove(rpmts ts, rpmte te, rpmfiles files,",
          "1094:               rpmpsm psm, char ** failedFile)",
          "1095: {",
          "1097:     rpmfi fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "1098:     rpmfs fs = rpmteGetFileStates(te);",
          "1099:     rpmPlugins plugins = rpmtsPlugins(ts);",
          "",
          "[Removed Lines]",
          "1096:     struct diriter_s di = { -1 };",
          "",
          "[Added Lines]",
          "1107:     struct diriter_s di = { -1, -1 };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
      "candidate_info": {
        "commit_hash": "6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
        "files": [
          "lib/fsm.c",
          "lib/rpmplugins.c"
        ],
        "message": "Swap over to dirfd+basename based operation within the fsm\n\nWithin fsm this is just a matter of adjusting error messages to include\nthe directory... if it only wasn't for the plugins requiring absolute\npaths for outside users. For the plugins, we need to assemble absolute\npaths as needed, both in ensureDir() and plugin file slots.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c",
          "lib/rpmplugins.c||lib/rpmplugins.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: static char * fsmFsPath(rpmfi fi, const char * suffix)",
          "77: {",
          "79: }",
          "81: static int fsmLink(int odirfd, const char *opath, int dirfd, const char *path)",
          "",
          "[Removed Lines]",
          "78:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "",
          "[Added Lines]",
          "79:     const char *bn = rpmfiBN(fi);",
          "80:     return rstrscat(NULL, *bn ? bn : \"/\", suffix ? suffix : \"\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: }",
          "331: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
          "332:    int owned, mode_t mode, int *fdp)",
          "333: {",
          "334:     int rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:    const char *apath,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337:  op |= FAF_UNOWNED;",
          "342:     if (!rc)",
          "343:  rc = fsmMkdir(dirfd, dn, mode);",
          "",
          "[Removed Lines]",
          "340:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "",
          "[Added Lines]",
          "343:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, apath, mode, op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:     }",
          "351:     if (!rc) {",
          "353:     }",
          "",
          "[Removed Lines]",
          "352:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, dn, dn, mode, op);",
          "",
          "[Added Lines]",
          "355:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, apath, apath, mode, op);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:     if (!rc) {",
          "359:  rpmlog(RPMLOG_DEBUG,",
          "360:   \"%s directory created with perms %04o\\n\",",
          "362:     }",
          "364:     return rc;",
          "",
          "[Removed Lines]",
          "361:   dn, (unsigned)(mode & 07777));",
          "",
          "[Added Lines]",
          "364:   apath, (unsigned)(mode & 07777));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "370:     char *path = xstrdup(p);",
          "371:     char *dp = path;",
          "372:     char *sp = NULL, *bn;",
          "373:     int oflags = O_RDONLY;",
          "374:     int rc = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:     char *apath = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
          "383:  fd = fsmOpenat(dirfd, bn, oflags, 1);",
          "385:  if (fd < 0 && errno == ENOENT && create) {",
          "386:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "388:  }",
          "390:  close(dirfd);",
          "",
          "[Removed Lines]",
          "387:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode, &fd);",
          "",
          "[Added Lines]",
          "389:  apath = rstrscat(&apath, \"/\", bn, NULL);",
          "393:      rc = fsmDoMkDir(plugins, dirfd, bn, apath, owned, mode, &fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "417:     }",
          "419:     free(path);",
          "420:     return rc;",
          "421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     free(apath);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "708:  char * path = fsmFsPath(fi, suffix);",
          "709:  rc = fsmRename(dirfd, opath, dirfd, path);",
          "710:  if (!rc) {",
          "712:  }",
          "713:  free(path);",
          "714:  free(opath);",
          "",
          "[Removed Lines]",
          "711:      rpmlog(RPMLOG_WARNING, _(\"%s saved as %s\\n\"), opath, path);",
          "",
          "[Added Lines]",
          "718:      rpmlog(RPMLOG_WARNING, _(\"%s%s saved as %s%s\\n\"),",
          "719:      rpmfiDN(fi), opath, rpmfiDN(fi), path);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764:      if (!rc) {",
          "765:   if (nsuffix) {",
          "766:       char * opath = fsmFsPath(fi, NULL);",
          "769:       free(opath);",
          "770:   }",
          "771:   free(*path);",
          "",
          "[Removed Lines]",
          "767:       rpmlog(RPMLOG_WARNING, _(\"%s created as %s\\n\"),",
          "768:       opath, dest);",
          "",
          "[Added Lines]",
          "775:       rpmlog(RPMLOG_WARNING, _(\"%s%s created as %s%s\\n\"),",
          "776:       rpmfiDN(fi), opath, rpmfiDN(fi), dest);",
          "",
          "---------------"
        ],
        "lib/rpmplugins.c||lib/rpmplugins.c": [
          "File: lib/rpmplugins.c -> lib/rpmplugins.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:     return rc;",
          "351: }",
          "353: rpmRC rpmpluginsCallFsmFilePre(rpmPlugins plugins, rpmfi fi, const char *path,",
          "354:           mode_t file_mode, rpmFsmOp op)",
          "355: {",
          "356:     plugin_fsm_file_pre_func hookFunc;",
          "357:     int i;",
          "358:     rpmRC rc = RPMRC_OK;",
          "360:     for (i = 0; i < plugins->count; i++) {",
          "361:  rpmPlugin plugin = plugins->plugins[i];",
          "362:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_pre);",
          "364:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_pre failed\\n\", plugin->name);",
          "365:      rc = RPMRC_FAIL;",
          "366:  }",
          "367:     }",
          "369:     return rc;",
          "370: }",
          "",
          "[Removed Lines]",
          "363:  if (hookFunc && hookFunc(plugin, fi, path, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "353: static char *abspath(rpmfi fi, const char *path)",
          "354: {",
          "355:     if (*path == '/')",
          "356:  return xstrdup(path);",
          "357:     else",
          "358:  return rstrscat(NULL, rpmfiDN(fi), path, NULL);",
          "359: }",
          "367:     char *apath = abspath(fi, path);",
          "372:  if (hookFunc && hookFunc(plugin, fi, apath, file_mode, op) == RPMRC_FAIL) {",
          "377:     free(apath);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     plugin_fsm_file_post_func hookFunc;",
          "376:     int i;",
          "377:     rpmRC rc = RPMRC_OK;",
          "379:     for (i = 0; i < plugins->count; i++) {",
          "380:  rpmPlugin plugin = plugins->plugins[i];",
          "381:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_post);",
          "383:      rpmlog(RPMLOG_WARNING, \"Plugin %s: hook fsm_file_post failed\\n\", plugin->name);",
          "384:  }",
          "385:     }",
          "387:     return rc;",
          "388: }",
          "",
          "[Removed Lines]",
          "382:  if (hookFunc && hookFunc(plugin, fi, path, file_mode, op, res) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "388:     char *apath = abspath(fi, path);",
          "393:  if (hookFunc && hookFunc(plugin, fi, apath, file_mode, op, res) == RPMRC_FAIL) {",
          "397:     free(apath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:     plugin_fsm_file_prepare_func hookFunc;",
          "395:     int i;",
          "396:     rpmRC rc = RPMRC_OK;",
          "398:     for (i = 0; i < plugins->count; i++) {",
          "399:  rpmPlugin plugin = plugins->plugins[i];",
          "400:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_prepare);",
          "402:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_prepare failed\\n\", plugin->name);",
          "403:      rc = RPMRC_FAIL;",
          "404:  }",
          "405:     }",
          "407:     return rc;",
          "408: }",
          "",
          "[Removed Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, fd, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "409:     char *apath = abspath(fi, path);",
          "414:  if (hookFunc && hookFunc(plugin, fi, fd, apath, dest, file_mode, op) == RPMRC_FAIL) {",
          "419:     free(apath);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee98f9fe5726f236a72010ee9756c324140716a5",
      "candidate_info": {
        "commit_hash": "ee98f9fe5726f236a72010ee9756c324140716a5",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ee98f9fe5726f236a72010ee9756c324140716a5",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Use fsmClose() for closing file descriptors everywhere within fsm\n\nfsmClose() does all the necessary checks and resets the fd to -1 after\nclose, why duplicate these all over the code when we already have a\nfunction...\n\nThere's no difference wrt file descriptors getting closed here, but\nthere is a side-effect to this: if %_flush_io is enabled, they now\nget fsync() on the associated directories too, which I think is a good\nthing for those who care about it.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static const char * fileActionString(rpmFileAction a);",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags, int dir);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static int fsmClose(int *wfdp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW, 0);",
          "102:     if (fd >= 0) {",
          "103:  rc = cap_set_fd(fd, fcaps);",
          "105:     }",
          "106:     return rc;",
          "107: }",
          "",
          "[Removed Lines]",
          "104:  close(fd);",
          "",
          "[Added Lines]",
          "105:  fsmClose(&fd);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:     if (dir && fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "328:  errno = ENOTDIR;",
          "331:     }",
          "332:     return fd;",
          "333: }",
          "",
          "[Removed Lines]",
          "329:  close(fd);",
          "330:  fd = -1;",
          "",
          "[Added Lines]",
          "330:  fsmClose(&fd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "395:      rc = fsmDoMkDir(plugins, dirfd, bn, apath, owned, mode, &fd);",
          "396:  }",
          "399:  if (fd >= 0) {",
          "400:      dirfd = fd;",
          "401:  } else {",
          "",
          "[Removed Lines]",
          "398:  close(dirfd);",
          "",
          "[Added Lines]",
          "398:  fsmClose(&dirfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "411:     }",
          "413:     if (rc) {",
          "417:     } else {",
          "418:  rc = 0;",
          "419:     }",
          "",
          "[Removed Lines]",
          "414:  close(fd);",
          "415:  close(dirfd);",
          "416:  dirfd = -1;",
          "",
          "[Added Lines]",
          "414:  fsmClose(&fd);",
          "415:  fsmClose(&dirfd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "840: {",
          "841:     struct diriter_s *di = data;",
          "847:     return 0;",
          "848: }",
          "",
          "[Removed Lines]",
          "843:     if (di->dirfd >= 0) {",
          "844:  close(di->dirfd);",
          "845:  di->dirfd = -1;",
          "846:     }",
          "",
          "[Added Lines]",
          "842:     fsmClose(&(di->dirfd));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "862: static rpmfi fsmIterFini(rpmfi fi, struct diriter_s *di)",
          "863: {",
          "872:     return rpmfiFree(fi);",
          "873: }",
          "",
          "[Removed Lines]",
          "864:     if (di->dirfd >= 0) {",
          "865:  close(di->dirfd);",
          "866:  di->dirfd = -1;",
          "867:     }",
          "868:     if (di->firstdir >= 0) {",
          "869:  close(di->firstdir);",
          "870:  di->firstdir = -1;",
          "871:     }",
          "",
          "[Added Lines]",
          "860:     fsmClose(&(di->dirfd));",
          "861:     fsmClose(&(di->firstdir));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "661a37905ed3b79cab76dcbddf8fff26291c7d40",
      "candidate_info": {
        "commit_hash": "661a37905ed3b79cab76dcbddf8fff26291c7d40",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/661a37905ed3b79cab76dcbddf8fff26291c7d40",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Return a validated open directory fd from fsmDoMkDir()",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: }",
          "329: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
          "331: {",
          "332:     int rc;",
          "333:     rpmFsmOp op = (FA_CREATE);",
          "",
          "[Removed Lines]",
          "330:    int owned, mode_t mode)",
          "",
          "[Added Lines]",
          "330:    int owned, mode_t mode, int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:     if (!rc)",
          "341:  rc = fsmMkdir(dirfd, dn, mode);",
          "343:     if (!rc) {",
          "344:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
          "345:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     if (!rc) {",
          "345:  if (*fdp == -1)",
          "346:      rc = RPMERR_ENOTDIR;",
          "347:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:  if (fd < 0 && errno == ENOENT && create) {",
          "378:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "382:  }",
          "384:  close(dirfd);",
          "",
          "[Removed Lines]",
          "379:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "380:      if (!rc)",
          "381:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW, 1);",
          "",
          "[Added Lines]",
          "385:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode, &fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78cd8f559aa1ea0531e990daf7d902d123726a0f",
      "candidate_info": {
        "commit_hash": "78cd8f559aa1ea0531e990daf7d902d123726a0f",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/78cd8f559aa1ea0531e990daf7d902d123726a0f",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Refactor ensureDir() to return an error code separately from the fd",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     return rc;",
          "340: }",
          "343: {",
          "344:     char *path = xstrdup(p);",
          "345:     char *dp = path;",
          "346:     char *sp = NULL, *bn;",
          "347:     int oflags = O_RDONLY;",
          "349:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
          "",
          "[Removed Lines]",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
          "",
          "[Added Lines]",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create,",
          "343:       int *dirfdp)",
          "349:     int rc = 0;",
          "351:     if (*dirfdp >= 0)",
          "352:  return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  if (fd < 0 && errno == ENOENT && create) {",
          "357:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "359:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
          "361:  }",
          "363:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "367:  }",
          "369:  close(dirfd);",
          "370:  if (fd >= 0) {",
          "371:      dirfd = fd;",
          "372:  } else {",
          "374:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "375:     bn, p, strerror(errno));",
          "376:      break;",
          "377:  }",
          "379:  dp = NULL;",
          "380:     }",
          "382:     free(path);",
          "384: }",
          "386: static int fsmMkfifo(int dirfd, const char *path, mode_t mode)",
          "",
          "[Removed Lines]",
          "358:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
          "360:      }",
          "364:      close(fd);",
          "365:      errno = ENOTDIR;",
          "366:      fd = -1;",
          "373:      dirfd = -1;",
          "383:     return dirfd;",
          "",
          "[Added Lines]",
          "363:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "364:      if (!rc)",
          "369:      rc = RPMERR_ENOTDIR;",
          "370:      break;",
          "379:      rc = RPMERR_OPEN_FAILED;",
          "386:     if (rc) {",
          "387:  close(fd);",
          "388:  close(dirfd);",
          "389:  dirfd = -1;",
          "390:     } else {",
          "391:  rc = 0;",
          "392:     }",
          "396:     return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:   rc = fsmBackup(fi, fp->action);",
          "861:      }",
          "870:      }",
          "873:      if (!fp->suffix) {",
          "874:   if (fp->action == FA_TOUCH) {",
          "",
          "[Removed Lines]",
          "863:      if (di.dirfd == -1) {",
          "864:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
          "865:         (fp->action == FA_CREATE));",
          "866:   if (di.dirfd == -1) {",
          "867:       rc = RPMERR_OPEN_FAILED;",
          "868:       break;",
          "869:   }",
          "",
          "[Added Lines]",
          "876:      if (!rc) {",
          "877:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "878:     (fp->action == FA_CREATE), &di.dirfd);",
          "881:      if (rc)",
          "",
          "---------------"
        ]
      }
    }
  ]
}