{
  "cve_id": "CVE-2022-41897",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `FractionMaxPoolGrad` is given outsize inputs `row_pooling_sequence` and `col_pooling_sequence`, TensorFlow will crash. We have patched the issue in GitHub commit d71090c3e5ca325bdf4b02eb236cfb3ee823e927. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "d71090c3e5ca325bdf4b02eb236cfb3ee823e927",
  "patch_info": {
    "commit_hash": "d71090c3e5ca325bdf4b02eb236cfb3ee823e927",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/d71090c3e5ca325bdf4b02eb236cfb3ee823e927",
    "files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ],
    "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 477500477",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "258:     OP_REQUIRES(context, tensor_out.NumElements() > 0,",
      "259:                 errors::InvalidArgument(\"orig_output must not be empty, got \",",
      "260:                                         tensor_out.DebugString()));",
      "261:     std::vector<int64_t> input_size(tensor_in_and_out_dims);",
      "262:     std::vector<int64_t> output_size(tensor_in_and_out_dims);",
      "263:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "261:     OP_REQUIRES(",
      "262:         context,",
      "263:         height_seq_tensor.NumElements() * width_seq_tensor.NumElements() <=",
      "264:             tensor_in.NumElements(),",
      "265:         errors::InvalidArgument(",
      "266:             \"Pooling region has more elements than the input tensor. \"",
      "267:             \"row_pooling_sequence: \",",
      "268:             height_seq_tensor.DebugString(),",
      "269:             \"col_pooling_sequence: \", width_seq_tensor.DebugString(),",
      "270:             \"orig_input: \", tensor_in.DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
      "634:     with self.assertRaises(errors.InvalidArgumentError):",
      "636:         overlapping = True",
      "637:         orig_input = constant_op.constant(",
      "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
      "",
      "[Removed Lines]",
      "635:       with self.cached_session() as _:",
      "",
      "[Added Lines]",
      "635:       with self.cached_session():",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "653:             overlapping=overlapping)",
      "654:         self.evaluate(t)",
      "657: if __name__ == \"__main__\":",
      "658:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "656:   def testOverLargeSeqRaiseErrorForFractionalMaxPoolGrad(self):",
      "657:     with self.assertRaises(errors.InvalidArgumentError):",
      "658:       with self.cached_session():",
      "659:         overlapping = False",
      "660:         orig_input = [[[[1, 1, 1, 1, 1]]]]",
      "661:         orig_output = [[[[1, 1, 1]]]]",
      "662:         out_backprop = [[[[3], [3], [6]]]]",
      "663:         row_pooling_sequence = [-0x4000000, 1, 1]",
      "664:         col_pooling_sequence = [-0x4000000, 1, 1]",
      "665:         t = gen_nn_ops.FractionalMaxPoolGrad(",
      "666:             orig_input=orig_input,",
      "667:             orig_output=orig_output,",
      "668:             out_backprop=out_backprop,",
      "669:             row_pooling_sequence=row_pooling_sequence,",
      "670:             col_pooling_sequence=col_pooling_sequence,",
      "671:             overlapping=overlapping)",
      "672:         self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f434c21d0fad22a2b12cceaee296cbfd57814129",
      "candidate_info": {
        "commit_hash": "f434c21d0fad22a2b12cceaee296cbfd57814129",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f434c21d0fad22a2b12cceaee296cbfd57814129",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 477500477",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     OP_REQUIRES(context, tensor_out.NumElements() > 0,",
          "259:                 errors::InvalidArgument(\"orig_output must not be empty, got \",",
          "260:                                         tensor_out.DebugString()));",
          "261:     std::vector<int64_t> input_size(tensor_in_and_out_dims);",
          "262:     std::vector<int64_t> output_size(tensor_in_and_out_dims);",
          "263:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     OP_REQUIRES(",
          "262:         context,",
          "263:         height_seq_tensor.NumElements() * width_seq_tensor.NumElements() <=",
          "264:             tensor_in.NumElements(),",
          "265:         errors::InvalidArgument(",
          "266:             \"Pooling region has more elements than the input tensor. \"",
          "267:             \"row_pooling_sequence: \",",
          "268:             height_seq_tensor.DebugString(),",
          "269:             \"col_pooling_sequence: \", width_seq_tensor.DebugString(),",
          "270:             \"orig_input: \", tensor_in.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "634:     with self.assertRaises(errors.InvalidArgumentError):",
          "636:         overlapping = True",
          "637:         orig_input = constant_op.constant(",
          "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "",
          "[Removed Lines]",
          "635:       with self.cached_session() as _:",
          "",
          "[Added Lines]",
          "635:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:             overlapping=overlapping)",
          "654:         self.evaluate(t)",
          "657: if __name__ == \"__main__\":",
          "658:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:   def testOverLargeSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "657:     with self.assertRaises(errors.InvalidArgumentError):",
          "658:       with self.cached_session():",
          "659:         overlapping = False",
          "660:         orig_input = [[[[1, 1, 1, 1, 1]]]]",
          "661:         orig_output = [[[[1, 1, 1]]]]",
          "662:         out_backprop = [[[[3], [3], [6]]]]",
          "663:         row_pooling_sequence = [-0x4000000, 1, 1]",
          "664:         col_pooling_sequence = [-0x4000000, 1, 1]",
          "665:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "666:             orig_input=orig_input,",
          "667:             orig_output=orig_output,",
          "668:             out_backprop=out_backprop,",
          "669:             row_pooling_sequence=row_pooling_sequence,",
          "670:             col_pooling_sequence=col_pooling_sequence,",
          "671:             overlapping=overlapping)",
          "672:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b855958b8beb2516d2323f794ab356598ee1f01",
      "candidate_info": {
        "commit_hash": "6b855958b8beb2516d2323f794ab356598ee1f01",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6b855958b8beb2516d2323f794ab356598ee1f01",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 477500477",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     OP_REQUIRES(context, tensor_out.NumElements() > 0,",
          "259:                 errors::InvalidArgument(\"orig_output must not be empty, got \",",
          "260:                                         tensor_out.DebugString()));",
          "261:     std::vector<int64_t> input_size(tensor_in_and_out_dims);",
          "262:     std::vector<int64_t> output_size(tensor_in_and_out_dims);",
          "263:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     OP_REQUIRES(",
          "262:         context,",
          "263:         height_seq_tensor.NumElements() * width_seq_tensor.NumElements() <=",
          "264:             tensor_in.NumElements(),",
          "265:         errors::InvalidArgument(",
          "266:             \"Pooling region has more elements than the input tensor. \"",
          "267:             \"row_pooling_sequence: \",",
          "268:             height_seq_tensor.DebugString(),",
          "269:             \"col_pooling_sequence: \", width_seq_tensor.DebugString(),",
          "270:             \"orig_input: \", tensor_in.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "634:     with self.assertRaises(errors.InvalidArgumentError):",
          "636:         overlapping = True",
          "637:         orig_input = constant_op.constant(",
          "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "",
          "[Removed Lines]",
          "635:       with self.cached_session() as _:",
          "",
          "[Added Lines]",
          "635:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:             overlapping=overlapping)",
          "654:         self.evaluate(t)",
          "657: if __name__ == \"__main__\":",
          "658:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:   def testOverLargeSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "657:     with self.assertRaises(errors.InvalidArgumentError):",
          "658:       with self.cached_session():",
          "659:         overlapping = False",
          "660:         orig_input = [[[[1, 1, 1, 1, 1]]]]",
          "661:         orig_output = [[[[1, 1, 1]]]]",
          "662:         out_backprop = [[[[3], [3], [6]]]]",
          "663:         row_pooling_sequence = [-0x4000000, 1, 1]",
          "664:         col_pooling_sequence = [-0x4000000, 1, 1]",
          "665:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "666:             orig_input=orig_input,",
          "667:             orig_output=orig_output,",
          "668:             out_backprop=out_backprop,",
          "669:             row_pooling_sequence=row_pooling_sequence,",
          "670:             col_pooling_sequence=col_pooling_sequence,",
          "671:             overlapping=overlapping)",
          "672:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d4a8ba1cdc75b0bd0d5d282de81236be99198a1",
      "candidate_info": {
        "commit_hash": "6d4a8ba1cdc75b0bd0d5d282de81236be99198a1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6d4a8ba1cdc75b0bd0d5d282de81236be99198a1",
        "files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMaxPoolGrad\n\nPiperOrigin-RevId: 477500477",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     OP_REQUIRES(context, tensor_out.NumElements() > 0,",
          "259:                 errors::InvalidArgument(\"orig_output must not be empty, got \",",
          "260:                                         tensor_out.DebugString()));",
          "261:     std::vector<int64_t> input_size(tensor_in_and_out_dims);",
          "262:     std::vector<int64_t> output_size(tensor_in_and_out_dims);",
          "263:     for (int i = 0; i < tensor_in_and_out_dims; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     OP_REQUIRES(",
          "262:         context,",
          "263:         height_seq_tensor.NumElements() * width_seq_tensor.NumElements() <=",
          "264:             tensor_in.NumElements(),",
          "265:         errors::InvalidArgument(",
          "266:             \"Pooling region has more elements than the input tensor. \"",
          "267:             \"row_pooling_sequence: \",",
          "268:             height_seq_tensor.DebugString(),",
          "269:             \"col_pooling_sequence: \", width_seq_tensor.DebugString(),",
          "270:             \"orig_input: \", tensor_in.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:   def testInvalidSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "634:     with self.assertRaises(errors.InvalidArgumentError):",
          "636:         overlapping = True",
          "637:         orig_input = constant_op.constant(",
          "638:             .453409232, shape=[1, 7, 13, 1], dtype=dtypes.float32)",
          "",
          "[Removed Lines]",
          "635:       with self.cached_session() as _:",
          "",
          "[Added Lines]",
          "635:       with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:             overlapping=overlapping)",
          "654:         self.evaluate(t)",
          "657: if __name__ == \"__main__\":",
          "658:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:   def testOverLargeSeqRaiseErrorForFractionalMaxPoolGrad(self):",
          "657:     with self.assertRaises(errors.InvalidArgumentError):",
          "658:       with self.cached_session():",
          "659:         overlapping = False",
          "660:         orig_input = [[[[1, 1, 1, 1, 1]]]]",
          "661:         orig_output = [[[[1, 1, 1]]]]",
          "662:         out_backprop = [[[[3], [3], [6]]]]",
          "663:         row_pooling_sequence = [-0x4000000, 1, 1]",
          "664:         col_pooling_sequence = [-0x4000000, 1, 1]",
          "665:         t = gen_nn_ops.FractionalMaxPoolGrad(",
          "666:             orig_input=orig_input,",
          "667:             orig_output=orig_output,",
          "668:             out_backprop=out_backprop,",
          "669:             row_pooling_sequence=row_pooling_sequence,",
          "670:             col_pooling_sequence=col_pooling_sequence,",
          "671:             overlapping=overlapping)",
          "672:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}