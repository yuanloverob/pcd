{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
      "candidate_info": {
        "commit_hash": "d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/d2c4bebc4c90ce4fe5df12e7edde3eff6116a889",
        "files": [
          "re.c"
        ],
        "message": "re.subst transformation: Fix possible pkg memleak\n\nThe leak would only happen under these simultaneous conditions:\n  1. the \"subst\" (last) part of the RE is a variable\n  2. the variable is using an index (e.g. an AVP)\n  3. there are at least two different \"subst\" strings in the script,\n     which can run alternatively (see the global \"subst_re\" logic to\n     understand more about the \"reusage\" mechanism and this effect)\n\nMany thanks to Richard Revels for a detailed report on this bug!\n\nFixes #2761\n\n(cherry picked from commit c739c2f4de2b26767e894765bb5f47d908f88603)",
        "before_after_code_files": [
          "re.c||re.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "re.c||re.c": [
          "File: re.c -> re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: void subst_expr_free(struct subst_expr* se)",
          "46: {",
          "47:  if (se->replacement.s) pkg_free(se->replacement.s);",
          "48:  if (se->re) { regfree(se->re); pkg_free(se->re); };",
          "49:  pkg_free(se);",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  int i;",
          "51:  for (i = 0; i < se->n_escapes; i++)",
          "52:   if (se->replace[i].type == REPLACE_SPEC",
          "53:       && se->replace[i].u.spec.pvp.pvi.type == PV_IDX_PVAR)",
          "54:           pv_spec_free(se->replace[i].u.spec.pvp.pvi.u.dval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e12f00dc0f1d1638a78fa792074c1a46db269bd",
      "candidate_info": {
        "commit_hash": "7e12f00dc0f1d1638a78fa792074c1a46db269bd",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7e12f00dc0f1d1638a78fa792074c1a46db269bd",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Parse the port into an unsigned integer (OSS-Fuzz)\n\nFixes OSS-Fuzz#51605\n\n(cherry picked from commit b4a72a5f96f5726afa48854ad0850fe14f78909d)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ],
          "candidate": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ]
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:  str user;",
          "359:  str password;",
          "361:  register char* p;",
          "362:  char* end;",
          "363:  char* pass;",
          "",
          "[Removed Lines]",
          "360:  int port_no;",
          "",
          "[Added Lines]",
          "360:  unsigned int port_no;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372: #define case_port( ch, var, ovf_check1, ovf_check2) \\",
          "373:  case ch: \\",
          "374:    if (ovf_check1) \\",
          "376:    if (ovf_check2 && (var) > USHRT_MAX) \\",
          "377:     goto error_bad_port; \\",
          "378:    break",
          "",
          "[Removed Lines]",
          "375:     (var)=(var)*10+ch-'0'; \\",
          "",
          "[Added Lines]",
          "375:     (var)=(var)*10+(ch-'0'); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a0a3b72891b96dcde02ecbd8a6679cbac37d3f0",
      "candidate_info": {
        "commit_hash": "9a0a3b72891b96dcde02ecbd8a6679cbac37d3f0",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/9a0a3b72891b96dcde02ecbd8a6679cbac37d3f0",
        "files": [
          "modules/mi_fifo/fifo_fnc.c"
        ],
        "message": "mi_fifo: Fix double fclose() during error handling\n\nExample double-free scenario (multiple ones were possible):\n  mi_fifo_callback\n    -> mi_fifo_reply -> mi_fifo_flush -> mi_fifo_write -> ERROR -> fclose()\n    -> mi_throw_error -> mi_fifo_write -> ERROR -> fclose()\n\nMany thanks to David Escartin (Sonoc) for a detailed report!\n\n(cherry picked from commit 85ba95d105dd564bdd1b02282dff1e6ab8ac109a)",
        "before_after_code_files": [
          "modules/mi_fifo/fifo_fnc.c||modules/mi_fifo/fifo_fnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_fifo/fifo_fnc.c||modules/mi_fifo/fifo_fnc.c": [
          "File: modules/mi_fifo/fifo_fnc.c -> modules/mi_fifo/fifo_fnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:  return written;",
          "537: error:",
          "539:   fclose(stream);",
          "540:  return -1;",
          "541: }",
          "",
          "[Removed Lines]",
          "538:  if (stream)",
          "",
          "[Added Lines]",
          "538:  if (!old_stream && stream)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
      "candidate_info": {
        "commit_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Complete the fix for undefined bitwise left-shift (OSS-Fuzz)\n\nThe default auto-cast to (int) is not enough, as a value such as\n255 << 24 can still overflow the 31 value bits...\n\nFixes OSS-Fuzz#51542\n\n(cherry picked from commit e0d90ec107484051e6c769056036447361c5724d)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ],
          "candidate": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ]
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:  if (len<5) goto error_too_short;",
          "664:  scheme|=0x20202020;",
          "665:  if (scheme==SIP_SCH){",
          "666:   uri->type=SIP_URI_T;",
          "",
          "[Removed Lines]",
          "662:  scheme=(unsigned char)buf[0]+((unsigned char)buf[1]<<8)+",
          "663:    ((unsigned char)buf[2]<<16)+((unsigned char)buf[3]<<24);",
          "",
          "[Added Lines]",
          "662:  scheme=(unsigned)(unsigned char)buf[0]",
          "663:    + (((unsigned)(unsigned char)buf[1])<<8)",
          "664:    + (((unsigned)(unsigned char)buf[2])<<16)",
          "665:    + (((unsigned)(unsigned char)buf[3])<<24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53017e0f89f6831b15117ed38b35b3c33b44a47a",
      "candidate_info": {
        "commit_hash": "53017e0f89f6831b15117ed38b35b3c33b44a47a",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/53017e0f89f6831b15117ed38b35b3c33b44a47a",
        "files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c"
        ],
        "message": "[cachedb_redis] re-align code with 3.1\n\nThe cherry-pick 7cb182d mixed a bit the order of the code lines\nThanks to @john08burke for this, see  #2806 for more",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   redis_init_ssl(con->id->extra_options, node->context,",
          "152:    &node->tls_dom) < 0) {",
          "153:   redisFree(node->context);",
          "154:   return -1;",
          "155:  }",
          "156: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:   node->context = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185: error:",
          "186:  redisFree(node->context);",
          "187:  if (use_tls && node->tls_dom) {",
          "188:   tls_api.release_domain(node->tls_dom);",
          "189:   node->tls_dom = NULL;",
          "190:  }",
          "192:  return -1;",
          "193: }",
          "",
          "[Removed Lines]",
          "191:  node->context = NULL;",
          "",
          "[Added Lines]",
          "188:  node->context = NULL;",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c": [
          "File: modules/cachedb_redis/cachedb_redis_utils.c -> modules/cachedb_redis/cachedb_redis_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  new = con->nodes;",
          "110:  while (new) {",
          "111:   foo = new->next;",
          "114:   redisFree(new->context);",
          "115:   new->context = NULL;",
          "116:   pkg_free(new);",
          "117:   new = foo;",
          "118:  }",
          "",
          "[Removed Lines]",
          "112:   if (use_tls && new->tls_dom)",
          "113:    tls_api.release_domain(new->tls_dom);",
          "",
          "[Added Lines]",
          "114:   if (use_tls && new->tls_dom)",
          "115:    tls_api.release_domain(new->tls_dom);",
          "",
          "---------------"
        ]
      }
    }
  ]
}