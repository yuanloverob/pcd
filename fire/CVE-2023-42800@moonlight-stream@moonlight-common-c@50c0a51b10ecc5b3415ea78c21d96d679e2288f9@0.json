{
  "cve_id": "CVE-2023-42800",
  "cve_desc": "Moonlight-common-c contains the core GameStream client code shared between Moonlight clients. Moonlight-common-c is vulnerable to buffer overflow starting in commit 50c0a51b10ecc5b3415ea78c21d96d679e2288f9 due to unmitigated usage of unsafe C functions and improper bounds checking. A malicious game streaming server could exploit a buffer overflow vulnerability to crash a moonlight client, or achieve remote code execution (RCE) on the client (with insufficient exploit mitigations or if mitigations can be bypassed). The bug was addressed in commit 24750d4b748fefa03d09fcfd6d45056faca354e0.",
  "repo": "moonlight-stream/moonlight-common-c",
  "patch_hash": "50c0a51b10ecc5b3415ea78c21d96d679e2288f9",
  "patch_info": {
    "commit_hash": "50c0a51b10ecc5b3415ea78c21d96d679e2288f9",
    "repo": "moonlight-stream/moonlight-common-c",
    "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/50c0a51b10ecc5b3415ea78c21d96d679e2288f9",
    "files": [
      "src/Connection.c",
      "src/Limelight-internal.h",
      "src/RtspConnection.c"
    ],
    "message": "Improve high quality audio support\n\nHigh quality audio now works on IPv6 and remote connections",
    "before_after_code_files": [
      "src/Connection.c||src/Connection.c",
      "src/Limelight-internal.h||src/Limelight-internal.h",
      "src/RtspConnection.c||src/RtspConnection.c"
    ]
  },
  "patch_diff": {
    "src/Connection.c||src/Connection.c": [
      "File: src/Connection.c -> src/Connection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:     Limelog(\"Starting RTSP handshake...\");",
      "401:     ListenerCallbacks.stageStarting(STAGE_RTSP_HANDSHAKE);",
      "403:     if (err != 0) {",
      "404:         Limelog(\"failed: %d\\n\", err);",
      "405:         ListenerCallbacks.stageFailed(STAGE_RTSP_HANDSHAKE, err);",
      "",
      "[Removed Lines]",
      "402:     err = performRtspHandshake();",
      "",
      "[Added Lines]",
      "402:     err = performRtspHandshake(serverInfo);",
      "",
      "---------------"
    ],
    "src/Limelight-internal.h||src/Limelight-internal.h": [
      "File: src/Limelight-internal.h -> src/Limelight-internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "91: int sendInputPacketOnControlStream(unsigned char* data, int length);",
      "92: bool isControlDataInTransit(void);",
      "96: void initializeVideoDepacketizer(int pktSize);",
      "97: void destroyVideoDepacketizer(void);",
      "",
      "[Removed Lines]",
      "94: int performRtspHandshake(void);",
      "",
      "[Added Lines]",
      "94: int performRtspHandshake(PSERVER_INFORMATION serverInfo);",
      "",
      "---------------"
    ],
    "src/RtspConnection.c||src/RtspConnection.c": [
      "File: src/RtspConnection.c -> src/RtspConnection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "657:     return 0;",
      "658: }",
      "671:     }",
      "674:     }",
      "676:     LC_ASSERT(RtspPortNumber != 0);",
      "679:     useEnet = (AppVersionQuad[0] >= 5) && (AppVersionQuad[0] <= 7) && (AppVersionQuad[2] < 404);",
      "681:     currentSeqNumber = 1;",
      "682:     hasSessionId = false;",
      "683:     controlStreamId = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";",
      "684:     AudioEncryptionEnabled = false;",
      "686:     switch (AppVersionQuad[0]) {",
      "687:         case 3:",
      "688:             rtspClientVersion = 10;",
      "",
      "[Removed Lines]",
      "661: int performRtspHandshake(void) {",
      "662:     int ret;",
      "668:     if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
      "669:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0) {",
      "670:         addrToUrlSafeString(&RemoteAddr, urlAddr);",
      "672:     else {",
      "673:         strcpy(urlAddr, \"0.0.0.0\");",
      "680:     sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "",
      "[Added Lines]",
      "660: static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination) {",
      "661:     char* rtspUrlScratchBuffer;",
      "662:     char* portSeparator;",
      "663:     char* v6EscapeEndChar;",
      "664:     char* urlPathSeparator;",
      "665:     int prefixLen;",
      "668:     rtspUrlScratchBuffer = strdup(rtspUrlString);",
      "669:     if (rtspUrlScratchBuffer == NULL) {",
      "670:         return false;",
      "671:     }",
      "675:     portSeparator = strrchr(rtspUrlScratchBuffer, ':');",
      "676:     v6EscapeEndChar = strchr(rtspUrlScratchBuffer, ']');",
      "679:     for (prefixLen = 2; rtspUrlScratchBuffer[prefixLen - 2] != 0 && (rtspUrlScratchBuffer[prefixLen - 2] != '/' || rtspUrlScratchBuffer[prefixLen - 1] != '/'); prefixLen++);",
      "682:     if (rtspUrlScratchBuffer[prefixLen - 2] == 0) {",
      "683:         free(rtspUrlScratchBuffer);",
      "684:         return false;",
      "688:     urlPathSeparator = strchr(rtspUrlScratchBuffer + prefixLen, '/');",
      "691:     if (v6EscapeEndChar) {",
      "694:     }",
      "695:     else if (portSeparator) {",
      "698:     }",
      "699:     else if (urlPathSeparator) {",
      "704:     strcpy(destination, rtspUrlScratchBuffer + prefixLen);",
      "706:     free(rtspUrlScratchBuffer);",
      "707:     return true;",
      "708: }",
      "711: int performRtspHandshake(PSERVER_INFORMATION serverInfo) {",
      "712:     int ret;",
      "732:     LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);",
      "733:     if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
      "734:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
      "735:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
      "737:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {",
      "738:             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);",
      "739:         }",
      "740:         else {",
      "746:             addrToUrlSafeString(&RemoteAddr, urlAddr);",
      "747:             sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "748:         }",
      "749:     }",
      "750:     else {",
      "751:         strcpy(urlAddr, \"0.0.0.0\");",
      "752:         sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "753:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24750d4b748fefa03d09fcfd6d45056faca354e0",
      "candidate_info": {
        "commit_hash": "24750d4b748fefa03d09fcfd6d45056faca354e0",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/24750d4b748fefa03d09fcfd6d45056faca354e0",
        "files": [
          "src/RtspConnection.c"
        ],
        "message": "Fix buffer overflow in performRtspHandshake (CVE-2023-42800)",
        "before_after_code_files": [
          "src/RtspConnection.c||src/RtspConnection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
          "780:         }",
          "781:         else {",
          "",
          "[Removed Lines]",
          "779:             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);",
          "",
          "[Added Lines]",
          "779:             PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl);",
          "780:             rtspTargetUrl[sizeof(rtspTargetUrl) - 1] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b84d17c8d34e76d2531c6695d61349776474df2",
      "candidate_info": {
        "commit_hash": "8b84d17c8d34e76d2531c6695d61349776474df2",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/8b84d17c8d34e76d2531c6695d61349776474df2",
        "files": [
          "src/Platform.c",
          "src/Platform.h",
          "src/PlatformSockets.c",
          "src/PlatformSockets.h",
          "src/RtspConnection.c",
          "src/SdpGenerator.c",
          "src/SimpleStun.c"
        ],
        "message": "Replace additional unsafe string functions",
        "before_after_code_files": [
          "src/Platform.c||src/Platform.c",
          "src/Platform.h||src/Platform.h",
          "src/PlatformSockets.c||src/PlatformSockets.c",
          "src/PlatformSockets.h||src/PlatformSockets.h",
          "src/RtspConnection.c||src/RtspConnection.c",
          "src/SdpGenerator.c||src/SdpGenerator.c",
          "src/SimpleStun.c||src/SimpleStun.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/Platform.c||src/Platform.c": [
          "File: src/Platform.c -> src/Platform.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: #endif",
          "412: }",
          "414: int initializePlatform(void) {",
          "415:     int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: bool PltSafeStrcpy(char* dest, size_t dest_size, const char* src) {",
          "415:     LC_ASSERT(dest_size > 0);",
          "417: #ifdef LC_DEBUG",
          "420:     memset(dest, 0xFE, dest_size);",
          "421: #endif",
          "423: #ifdef _MSC_VER",
          "427:     if (strncpy_s(dest, dest_size, src, _TRUNCATE) != 0) {",
          "428:         LC_ASSERT(false);",
          "429:         dest[0] = 0;",
          "430:         return false;",
          "431:     }",
          "432: #else",
          "436:     if (strlen(src) >= dest_size) {",
          "437:         LC_ASSERT(false);",
          "438:         dest[0] = 0;",
          "439:         return false;",
          "440:     }",
          "442:     strcpy(dest, src);",
          "443: #endif",
          "445:     return true;",
          "446: }",
          "",
          "---------------"
        ],
        "src/Platform.h||src/Platform.h": [
          "File: src/Platform.h -> src/Platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: void cleanupPlatform(void);",
          "130: uint64_t PltGetMillis(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: bool PltSafeStrcpy(char* dest, size_t dest_size, const char* src);",
          "",
          "---------------"
        ],
        "src/PlatformSockets.c||src/PlatformSockets.c": [
          "File: src/PlatformSockets.c -> src/PlatformSockets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #endif",
          "37: {",
          "38:     char addrstr[URLSAFESTRING_LEN];",
          "",
          "[Removed Lines]",
          "36: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string)",
          "",
          "[Added Lines]",
          "36: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string, size_t stringLength)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         inet_ntop(addr->ss_family, &sin6->sin6_addr, addrstr, sizeof(addrstr));",
          "47:     }",
          "48:     else",
          "49: #endif",
          "",
          "[Removed Lines]",
          "46:         sprintf(string, \"[%s]\", addrstr);",
          "",
          "[Added Lines]",
          "46:         snprintf(string, stringLength, \"[%s]\", addrstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:         inet_ntop(addr->ss_family, &sin->sin_addr, addrstr, sizeof(addrstr));",
          "56:     }",
          "57: }",
          "",
          "[Removed Lines]",
          "55:         sprintf(string, \"%s\", addrstr);",
          "",
          "[Added Lines]",
          "55:         snprintf(string, stringLength, \"%s\", addrstr);",
          "",
          "---------------"
        ],
        "src/PlatformSockets.h||src/PlatformSockets.h": [
          "File: src/PlatformSockets.h -> src/PlatformSockets.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #else",
          "83: #define URLSAFESTRING_LEN INET_ADDRSTRLEN",
          "84: #endif",
          "87: SOCKET createSocket(int addressFamily, int socketType, int protocol, bool nonBlocking);",
          "88: SOCKET connectTcpSocket(struct sockaddr_storage* dstaddr, SOCKADDR_LEN addrlen, unsigned short port, int timeoutSec);",
          "",
          "[Removed Lines]",
          "85: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string);",
          "",
          "[Added Lines]",
          "85: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string, size_t stringLength);",
          "",
          "---------------"
        ],
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     createRtspRequest(msg, NULL, 0, command, target, \"RTSP/1.0\",",
          "73:         0, NULL, NULL, 0);",
          "77:     if (!addOption(msg, \"CSeq\", sequenceNumberStr) ||",
          "78:         !addOption(msg, \"X-GS-ClientVersion\", clientVersionStr) ||",
          "79:         (!useEnet && !addOption(msg, \"Host\", urlAddr))) {",
          "",
          "[Removed Lines]",
          "75:     sprintf(sequenceNumberStr, \"%d\", currentSeqNumber++);",
          "76:     sprintf(clientVersionStr, \"%d\", rtspClientVersion);",
          "",
          "[Added Lines]",
          "75:     snprintf(sequenceNumberStr, sizeof(sequenceNumberStr), \"%d\", currentSeqNumber++);",
          "76:     snprintf(clientVersionStr, sizeof(clientVersionStr), \"%d\", rtspClientVersion);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:         request.flags |= FLAG_ALLOCATED_PAYLOAD;",
          "479:         request.payloadLength = payloadLength;",
          "482:         if (!addOption(&request, \"Content-length\", payloadLengthStr)) {",
          "483:             goto FreeMessage;",
          "484:         }",
          "",
          "[Removed Lines]",
          "481:         sprintf(payloadLengthStr, \"%d\", payloadLength);",
          "",
          "[Added Lines]",
          "481:         snprintf(payloadLengthStr, sizeof(payloadLengthStr), \"%d\", payloadLength);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "582:         channelCount = CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration);",
          "586:         paramStart = strstr(response->payload, paramsPrefix);",
          "587:         if (paramStart) {",
          "",
          "[Removed Lines]",
          "585:         sprintf(paramsPrefix, \"a=fmtp:97 surround-params=%d\", channelCount);",
          "",
          "[Added Lines]",
          "585:         snprintf(paramsPrefix, sizeof(paramsPrefix), \"a=fmtp:97 surround-params=%d\", channelCount);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:             sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "806:         }",
          "807:     }",
          "808:     else {",
          "810:         sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "811:     }",
          "",
          "[Removed Lines]",
          "804:             addrToUrlSafeString(&RemoteAddr, urlAddr);",
          "809:         strcpy(urlAddr, \"0.0.0.0\");",
          "",
          "[Added Lines]",
          "804:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
          "809:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
          "",
          "---------------"
        ],
        "src/SdpGenerator.c||src/SdpGenerator.c": [
          "File: src/SdpGenerator.c -> src/SdpGenerator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         return -1;",
          "92:     }",
          "94:     option->next = NULL;",
          "95:     option->payloadLen = payloadLen;",
          "98:     option->payload = (void*)(option + 1);",
          "99:     memcpy(option->payload, payload, payloadLen);",
          "",
          "[Removed Lines]",
          "96:     strncpy(option->name, name, sizeof(option->name));",
          "97:     option->name[sizeof(option->name) - 1] = '\\0';",
          "",
          "[Added Lines]",
          "94:     if (!PltSafeStrcpy(option->name, sizeof(option->name), name)) {",
          "95:         free(option);",
          "96:         return -1;",
          "97:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:     char* payload;",
          "526:     char urlSafeAddr[URLSAFESTRING_LEN];",
          "530:     attributeList = getAttributesList(urlSafeAddr);",
          "531:     if (attributeList == NULL) {",
          "",
          "[Removed Lines]",
          "528:     addrToUrlSafeString(&RemoteAddr, urlSafeAddr);",
          "",
          "[Added Lines]",
          "531:     addrToUrlSafeString(&RemoteAddr, urlSafeAddr, sizeof(urlSafeAddr));",
          "",
          "---------------"
        ],
        "src/SimpleStun.c||src/SimpleStun.c": [
          "File: src/SimpleStun.c -> src/SimpleStun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     hints.ai_protocol = IPPROTO_UDP;",
          "66:     hints.ai_flags = AI_ADDRCONFIG;",
          "69:     err = getaddrinfo(stunServer, stunPortStr, &hints, &stunAddrs);",
          "70:     if (err != 0 || stunAddrs == NULL) {",
          "71:         Limelog(\"Failed to resolve STUN server: %d\\n\", err);",
          "",
          "[Removed Lines]",
          "68:     sprintf(stunPortStr, \"%u\", stunPort);",
          "",
          "[Added Lines]",
          "68:     snprintf(stunPortStr, sizeof(stunPortStr), \"%u\", stunPort);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
      "candidate_info": {
        "commit_hash": "1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
        "files": [
          "src/RtspConnection.c"
        ],
        "message": "Minor cleanups to RTSP URL parsing",
        "before_after_code_files": [
          "src/RtspConnection.c||src/RtspConnection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     }",
          "707:     free(rtspUrlScratchBuffer);",
          "708:     return true;",
          "",
          "[Removed Lines]",
          "704:     PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen);",
          "705:     destination[destinationLength - 1] = '\\0';",
          "",
          "[Added Lines]",
          "704:     if (!PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen)) {",
          "705:         free(rtspUrlScratchBuffer);",
          "706:         return false;",
          "707:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "774:     if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
          "775:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
          "776:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "788:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
          "790:         }",
          "791:     }",
          "792:     else {",
          "793:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
          "795:     }",
          "797:     switch (AppVersionQuad[0]) {",
          "",
          "[Removed Lines]",
          "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
          "779:             PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl);",
          "780:             rtspTargetUrl[sizeof(rtspTargetUrl) - 1] = '\\0';",
          "781:         }",
          "782:         else {",
          "789:    snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "794:   snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "[Added Lines]",
          "780:         if (serverInfo->rtspSessionUrl == NULL ||",
          "781:                 !parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr)) ||",
          "782:                 !PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl)) {",
          "789:             snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "794:         snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ed3ba62534ce06c1b97fec46722969e7710fee6",
      "candidate_info": {
        "commit_hash": "3ed3ba62534ce06c1b97fec46722969e7710fee6",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/3ed3ba62534ce06c1b97fec46722969e7710fee6",
        "files": [
          "src/Connection.c",
          "src/Limelight-internal.h",
          "src/Limelight.h",
          "src/RtspConnection.c",
          "src/SdpGenerator.c"
        ],
        "message": "Remove separate codec, HDR, and remote bitrate adjustments\n\nWe currently scale bitrate based on both remote vs local, SDR vs HDR, and H.264 vs\nHEVC vs AV1. This has led to a lot of user confusion wondering why the bitrate\ndoesn't seem to match their selection in some configurations.\n\nIn H.264 local streams, we will currently overshoot the selected bitrate by about\n20% due to FEC, while remote streams will be right around the selected bitrate due\nto remote-specific FEC bitrate adjustments.\n\nHEVC and AV1 streams (as configured by most clients) basically behave similarly\nbetween local and remote, since the codec bitrate adjustment factor of 75% is nearly\nthe same as the FEC bitrate adjustment factor of 80%. However, this adjustment was\nonly performed for SDR streams so local HDR streams would overshoot like H.264.\n\nThis change cleans up all this mess by using a single non-codec-specific video\nbitrate adjustment for FEC in all cases. It also allows Sunshine to perform the FEC\nadjustment on its end if the default FEC value of 20% has been overridden by the\nuser or if we implement dynamic FEC support in the future.\n\nThe net result is HEVC and AV1 SDR streams will only see a tiny bitrate increase,\nbut HDR and H.264 may see noticable 20% bitrate reductions that may require the\nuser to adjust their bitrate setting to reach the effective value they got before.\nHowever, the new behavior should be more intuitive for users going forward since\nchanging codecs, using a VPN, or enabling HDR won't cause significant changes to the\nvideo bitrate.",
        "before_after_code_files": [
          "src/Connection.c||src/Connection.c",
          "src/Limelight-internal.h||src/Limelight-internal.h",
          "src/Limelight.h||src/Limelight.h",
          "src/RtspConnection.c||src/RtspConnection.c",
          "src/SdpGenerator.c||src/SdpGenerator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Connection.c||src/Connection.c",
            "src/Limelight-internal.h||src/Limelight-internal.h",
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/Connection.c||src/Connection.c",
            "src/Limelight-internal.h||src/Limelight-internal.h",
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/Connection.c||src/Connection.c": [
          "File: src/Connection.c -> src/Connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: bool HighQualitySurroundEnabled;",
          "23: OPUS_MULTISTREAM_CONFIGURATION NormalQualityOpusConfig;",
          "24: OPUS_MULTISTREAM_CONFIGURATION HighQualityOpusConfig;",
          "26: int AudioPacketDuration;",
          "27: bool AudioEncryptionEnabled;",
          "28: bool ReferenceFrameInvalidationSupported;",
          "",
          "[Removed Lines]",
          "25: int OriginalVideoBitrate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     memset(&LocalAddr, 0, sizeof(LocalAddr));",
          "259:     NegotiatedVideoFormat = 0;",
          "260:     memcpy(&StreamConfig, streamConfig, sizeof(StreamConfig));",
          "262:     RemoteAddrString = strdup(serverInfo->address);",
          "",
          "[Removed Lines]",
          "261:     OriginalVideoBitrate = streamConfig->bitrate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Limelight-internal.h||src/Limelight-internal.h": [
          "File: src/Limelight-internal.h -> src/Limelight-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: extern bool HighQualitySurroundEnabled;",
          "30: extern OPUS_MULTISTREAM_CONFIGURATION NormalQualityOpusConfig;",
          "31: extern OPUS_MULTISTREAM_CONFIGURATION HighQualityOpusConfig;",
          "33: extern int AudioPacketDuration;",
          "34: extern bool AudioEncryptionEnabled;",
          "35: extern bool ReferenceFrameInvalidationSupported;",
          "",
          "[Removed Lines]",
          "32: extern int OriginalVideoBitrate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Limelight.h||src/Limelight.h": [
          "File: src/Limelight.h -> src/Limelight.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     int supportedVideoFormats;",
          "",
          "[Removed Lines]",
          "72:     int hevcBitratePercentageMultiplier;",
          "78:     int av1BitratePercentageMultiplier;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "787:     LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);",
          "789:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
          "790:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "",
          "[Removed Lines]",
          "788:     if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
          "",
          "[Added Lines]",
          "788:     if (StreamConfig.bitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "906:             }",
          "907:             else {",
          "908:                 NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN8;",
          "915:             }",
          "916:         }",
          "917:         else if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_H265) && strstr(response.payload, \"sprop-parameter-sets=AAAAAU\")) {",
          "",
          "[Removed Lines]",
          "911:                 if (StreamConfig.av1BitratePercentageMultiplier != 0) {",
          "912:                     StreamConfig.bitrate *= StreamConfig.av1BitratePercentageMultiplier;",
          "913:                     StreamConfig.bitrate /= 100;",
          "914:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "926:             }",
          "927:             else {",
          "928:                 NegotiatedVideoFormat = VIDEO_FORMAT_H265;",
          "935:             }",
          "936:         }",
          "937:         else {",
          "",
          "[Removed Lines]",
          "931:                 if (StreamConfig.hevcBitratePercentageMultiplier != 0) {",
          "932:                     StreamConfig.bitrate *= StreamConfig.hevcBitratePercentageMultiplier;",
          "933:                     StreamConfig.bitrate /= 100;",
          "934:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/SdpGenerator.c||src/SdpGenerator.c": [
          "File: src/SdpGenerator.c -> src/SdpGenerator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     int audioChannelCount;",
          "259:     int audioChannelMask;",
          "260:     int err;",
          "264:     LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);",
          "",
          "[Removed Lines]",
          "261:     int bitrate;",
          "",
          "[Added Lines]",
          "261:     int adjustedBitrate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:     err |= addAttributeString(&optionHead, \"x-nv-video[0].timeoutLengthMs\", \"7000\");",
          "290:     err |= addAttributeString(&optionHead, \"x-nv-video[0].framesWithInvalidRefThreshold\", \"0\");",
          "296:     if (StreamConfig.streamingRemotely == STREAM_CFG_REMOTE) {",
          "304:         }",
          "305:     }",
          "322:     if (AppVersionQuad[0] >= 5) {",
          "325:         err |= addAttributeString(&optionHead, \"x-nv-video[0].initialBitrateKbps\", payloadStr);",
          "326:         err |= addAttributeString(&optionHead, \"x-nv-video[0].initialPeakBitrateKbps\", payloadStr);",
          "328:         err |= addAttributeString(&optionHead, \"x-nv-vqos[0].bw.minimumBitrateKbps\", payloadStr);",
          "329:         err |= addAttributeString(&optionHead, \"x-nv-vqos[0].bw.maximumBitrateKbps\", payloadStr);",
          "330:     }",
          "331:     else {",
          "332:         if (StreamConfig.streamingRemotely == STREAM_CFG_REMOTE) {",
          "",
          "[Removed Lines]",
          "298:         bitrate = (int)(OriginalVideoBitrate * 0.80);",
          "302:         if (bitrate > 500) {",
          "303:             bitrate -= 500;",
          "306:     else {",
          "307:         bitrate = StreamConfig.bitrate;",
          "308:     }",
          "312:     bitrate = StreamConfig.bitrate < bitrate ? StreamConfig.bitrate : bitrate;",
          "317:     bitrate = bitrate > 100000 ? 100000 : bitrate;",
          "323:         snprintf(payloadStr, sizeof(payloadStr), \"%d\", bitrate);",
          "",
          "[Added Lines]",
          "293:     adjustedBitrate = (int)(StreamConfig.bitrate * 0.80);",
          "302:         if (adjustedBitrate > 500) {",
          "303:             adjustedBitrate -= 500;",
          "310:     adjustedBitrate = adjustedBitrate > 100000 ? 100000 : adjustedBitrate;",
          "316:         snprintf(payloadStr, sizeof(payloadStr), \"%d\", adjustedBitrate);",
          "325:         if (IS_SUNSHINE()) {",
          "326:             snprintf(payloadStr, sizeof(payloadStr), \"%u\", StreamConfig.bitrate);",
          "327:             err |= addAttributeString(&optionHead, \"x-ml-video.configuredBitrateKbps\", payloadStr);",
          "328:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:             err |= addAttributeString(&optionHead, \"x-nv-video[0].peakBitrate\", \"4\");",
          "335:         }",
          "338:         err |= addAttributeString(&optionHead, \"x-nv-vqos[0].bw.minimumBitrate\", payloadStr);",
          "339:         err |= addAttributeString(&optionHead, \"x-nv-vqos[0].bw.maximumBitrate\", payloadStr);",
          "340:     }",
          "",
          "[Removed Lines]",
          "337:         snprintf(payloadStr, sizeof(payloadStr), \"%d\", bitrate);",
          "",
          "[Added Lines]",
          "336:         snprintf(payloadStr, sizeof(payloadStr), \"%d\", adjustedBitrate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:     }",
          "449:     if (AppVersionQuad[0] >= 7) {",
          "452:                 HighQualitySurroundSupported && (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0) {",
          "454:             err |= addAttributeString(&optionHead, \"x-nv-audio.surround.AudioQuality\", \"1\");",
          "",
          "[Removed Lines]",
          "451:         if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD && audioChannelCount > 2 &&",
          "",
          "[Added Lines]",
          "449:         if (StreamConfig.bitrate >= HIGH_AUDIO_BITRATE_THRESHOLD && audioChannelCount > 2 &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:             if ((AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) ||",
          "468:                      ((AudioCallbacks.capabilities & CAPABILITY_SUPPORTS_ARBITRARY_AUDIO_DURATION) != 0 &&",
          "471:                 AudioPacketDuration = 10;",
          "472:             }",
          "",
          "[Removed Lines]",
          "469:                        OriginalVideoBitrate < LOW_AUDIO_BITRATE_TRESHOLD)) {",
          "",
          "[Added Lines]",
          "467:                        StreamConfig.bitrate < LOW_AUDIO_BITRATE_TRESHOLD)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02b7742f4d19631024bd766bd2bb76715780004e",
      "candidate_info": {
        "commit_hash": "02b7742f4d19631024bd766bd2bb76715780004e",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/02b7742f4d19631024bd766bd2bb76715780004e",
        "files": [
          "src/RtspConnection.c"
        ],
        "message": "Fix buffer overflow in parseUrlAddrFromRtspUrlString (CVE-2023-42799)",
        "before_after_code_files": [
          "src/RtspConnection.c||src/RtspConnection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:     return 0;",
          "658: }",
          "661:     char* rtspUrlScratchBuffer;",
          "662:     char* portSeparator;",
          "663:     char* v6EscapeEndChar;",
          "",
          "[Removed Lines]",
          "660: static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination) {",
          "",
          "[Added Lines]",
          "660: static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination, size_t destinationLength) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "702:     }",
          "706:     free(rtspUrlScratchBuffer);",
          "707:     return true;",
          "",
          "[Removed Lines]",
          "704:     strcpy(destination, rtspUrlScratchBuffer + prefixLen);",
          "",
          "[Added Lines]",
          "704:     PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen);",
          "705:     destination[destinationLength - 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "774:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
          "775:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "778:             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);",
          "779:         }",
          "780:         else {",
          "",
          "[Removed Lines]",
          "777:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {",
          "",
          "[Added Lines]",
          "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "786:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
          "788:         }",
          "789:     }",
          "790:     else {",
          "791:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
          "793:     }",
          "795:     switch (AppVersionQuad[0]) {",
          "",
          "[Removed Lines]",
          "787:             sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "792:         sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "[Added Lines]",
          "788:    snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "793:   snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "---------------"
        ]
      }
    }
  ]
}