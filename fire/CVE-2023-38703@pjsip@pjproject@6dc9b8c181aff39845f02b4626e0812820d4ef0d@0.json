{
  "cve_id": "CVE-2023-38703",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C with high level API in C, C++, Java, C#, and Python languages. SRTP is a higher level media transport which is stacked upon a lower level media transport such as UDP and ICE. Currently a higher level transport is not synchronized with its lower level transport that may introduce use-after-free issue. This vulnerability affects applications that have SRTP capability (`PJMEDIA_HAS_SRTP` is set) and use underlying media transport other than UDP. This vulnerability\u2019s impact may range from unexpected application termination to control flow hijack/memory corruption. The patch is available as a commit in the master branch.",
  "repo": "pjsip/pjproject",
  "patch_hash": "6dc9b8c181aff39845f02b4626e0812820d4ef0d",
  "patch_info": {
    "commit_hash": "6dc9b8c181aff39845f02b4626e0812820d4ef0d",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/6dc9b8c181aff39845f02b4626e0812820d4ef0d",
    "files": [
      "pjmedia/include/pjmedia/transport.h",
      "pjmedia/src/pjmedia/transport_adapter_sample.c",
      "pjmedia/src/pjmedia/transport_ice.c",
      "pjmedia/src/pjmedia/transport_loop.c",
      "pjmedia/src/pjmedia/transport_srtp.c",
      "pjmedia/src/pjmedia/transport_srtp_dtls.c",
      "pjmedia/src/pjmedia/transport_udp.c"
    ],
    "message": "Merge pull request from GHSA-f76w-fh7c-pc66\n\n* Add group lock to media transport\n\n* Also add group lock to SRTP-DTLS\n\n* Put lock protection to avoid race condition between destroy() & dtls_on_recv()",
    "before_after_code_files": [
      "pjmedia/include/pjmedia/transport.h||pjmedia/include/pjmedia/transport.h",
      "pjmedia/src/pjmedia/transport_adapter_sample.c||pjmedia/src/pjmedia/transport_adapter_sample.c",
      "pjmedia/src/pjmedia/transport_ice.c||pjmedia/src/pjmedia/transport_ice.c",
      "pjmedia/src/pjmedia/transport_loop.c||pjmedia/src/pjmedia/transport_loop.c",
      "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c",
      "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c",
      "pjmedia/src/pjmedia/transport_udp.c||pjmedia/src/pjmedia/transport_udp.c"
    ]
  },
  "patch_diff": {
    "pjmedia/include/pjmedia/transport.h||pjmedia/include/pjmedia/transport.h": [
      "File: pjmedia/include/pjmedia/transport.h -> pjmedia/include/pjmedia/transport.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "515:     void                    *user_data;",
      "516: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "518:     pj_grp_lock_t           *grp_lock;",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_adapter_sample.c||pjmedia/src/pjmedia/transport_adapter_sample.c": [
      "File: pjmedia/src/pjmedia/transport_adapter_sample.c -> pjmedia/src/pjmedia/transport_adapter_sample.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "109: static void adapter_on_destroy(void *arg);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:     adapter->slave_tp = transport;",
      "136:     adapter->del_base = del_base;",
      "140:     return PJ_SUCCESS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     if (transport && transport->grp_lock) {",
      "143:         pj_grp_lock_t *grp_lock = transport->grp_lock;",
      "145:         adapter->base.grp_lock = grp_lock;",
      "146:         pj_grp_lock_add_ref(grp_lock);",
      "147:         pj_grp_lock_add_handler(grp_lock, pool, adapter, &adapter_on_destroy);",
      "148:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "421:     return pjmedia_transport_simulate_lost(adapter->slave_tp, dir, pct_lost);",
      "422: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437: static void adapter_on_destroy(void *arg)",
      "438: {",
      "439:     struct tp_adapter *adapter = (struct tp_adapter*)arg;",
      "441:     pj_pool_release(adapter->pool);",
      "442: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "433:         pjmedia_transport_close(adapter->slave_tp);",
      "434:     }",
      "439:     return PJ_SUCCESS;",
      "440: }",
      "",
      "[Removed Lines]",
      "437:     pj_pool_release(adapter->pool);",
      "",
      "[Added Lines]",
      "456:     if (adapter->base.grp_lock) {",
      "457:         pj_grp_lock_dec_ref(adapter->base.grp_lock);",
      "458:     } else {",
      "459:         adapter_on_destroy(tp);",
      "460:     }",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_ice.c||pjmedia/src/pjmedia/transport_ice.c": [
      "File: pjmedia/src/pjmedia/transport_ice.c -> pjmedia/src/pjmedia/transport_ice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "338:         pj_grp_lock_t *grp_lock = pj_ice_strans_get_grp_lock(tp_ice->ice_st);",
      "339:         pj_grp_lock_add_ref(grp_lock);",
      "340:         pj_grp_lock_add_handler(grp_lock, pool, tp_ice, &tp_ice_on_destroy);",
      "341:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:         tp_ice->base.grp_lock = grp_lock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2736: static void tp_ice_on_destroy(void *arg)",
      "2737: {",
      "2738:     struct transport_ice *tp_ice = (struct transport_ice*)arg;",
      "2739:     pj_pool_safe_release(&tp_ice->pool);",
      "2740: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2741:     PJ_LOG(4, (tp_ice->base.name, \"ICE transport destroyed\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2746: {",
      "2747:     struct transport_ice *tp_ice = (struct transport_ice*)tp;",
      "2750:     pj_bzero(&tp_ice->cb, sizeof(tp_ice->cb));",
      "2751:     tp_ice->base.user_data = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2752:     PJ_LOG(4, (tp_ice->base.name, \"Destroying ICE transport\"));",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_loop.c||pjmedia/src/pjmedia/transport_loop.c": [
      "File: pjmedia/src/pjmedia/transport_loop.c -> pjmedia/src/pjmedia/transport_loop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:     &transport_attach2",
      "131: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: static void tp_loop_on_destroy(void *arg);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: {",
      "165:     struct transport_loop *tp;",
      "166:     pj_pool_t *pool;",
      "169:     PJ_ASSERT_RETURN(endpt && p_tp, PJ_EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:     pj_grp_lock_t *grp_lock;",
      "169:     pj_status_t status;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "179:     tp->base.op = &transport_udp_op;",
      "180:     tp->base.type = PJMEDIA_TRANSPORT_TYPE_UDP;",
      "182:     if (opt) {",
      "183:         tp->setting = *opt;",
      "184:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "186:     status = pj_grp_lock_create(pool, NULL, &grp_lock);",
      "187:     if (status != PJ_SUCCESS)",
      "188:         return status;",
      "190:     pj_grp_lock_add_ref(grp_lock);",
      "191:     pj_grp_lock_add_handler(grp_lock, pool, tp, &tp_loop_on_destroy);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:     return PJ_ENOTFOUND;",
      "223: }",
      "228: static pj_status_t transport_destroy(pjmedia_transport *tp)",
      "229: {",
      "233:     PJ_ASSERT_RETURN(tp, PJ_EINVAL);",
      "237:     return PJ_SUCCESS;",
      "238: }",
      "",
      "[Removed Lines]",
      "230:     struct transport_loop *loop = (struct transport_loop*) tp;",
      "235:     pj_pool_release(loop->pool);",
      "",
      "[Added Lines]",
      "237: static void tp_loop_on_destroy(void *arg)",
      "238: {",
      "239:     struct transport_loop *loop = (struct transport_loop*) arg;",
      "241:     PJ_LOG(4, (loop->base.name, \"Loop transport destroyed\"));",
      "242:     pj_pool_release(loop->pool);",
      "243: }",
      "254:     pj_grp_lock_dec_ref(tp->grp_lock);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "378:         }",
      "379:     }",
      "382:     for (i=0; i<loop->user_cnt; ++i) {",
      "383:         if (loop->users[i].rx_disabled) continue;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "400:     pj_grp_lock_add_ref(tp->grp_lock);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "395:         }",
      "396:     }",
      "398:     return PJ_SUCCESS;",
      "399: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:     pj_grp_lock_dec_ref(tp->grp_lock);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "420:     PJ_UNUSED_ARG(addr_len);",
      "421:     PJ_UNUSED_ARG(addr);",
      "424:     for (i=0; i<loop->user_cnt; ++i) {",
      "425:         if (!loop->users[i].rx_disabled && loop->users[i].rtcp_cb)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "446:     pj_grp_lock_add_ref(tp->grp_lock);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "427:                                       size);",
      "428:     }",
      "430:     return PJ_SUCCESS;",
      "431: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "455:     pj_grp_lock_dec_ref(tp->grp_lock);",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c": [
      "File: pjmedia/src/pjmedia/transport_srtp.c -> pjmedia/src/pjmedia/transport_srtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "435: static void destroy_srtp_ctx(transport_srtp *p_srtp, srtp_context *ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438: static void srtp_on_destroy(void *arg);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "806:     srtp->member_tp = tp;",
      "809:     srtp->peer_use = srtp->setting.use;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "811:     if (tp && tp->grp_lock) {",
      "812:         srtp->base.grp_lock = tp->grp_lock;",
      "813:         pj_grp_lock_add_ref(tp->grp_lock);",
      "814:         pj_grp_lock_add_handler(tp->grp_lock, pool, srtp, &srtp_on_destroy);",
      "815:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "842:     return PJ_SUCCESS;",
      "843: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "851:     PJ_LOG(4, (srtp->pool->obj_name, \"SRTP transport created\"));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1459:     return pjmedia_transport_simulate_lost(srtp->member_tp, dir, pct_lost);",
      "1460: }",
      "1462: static pj_status_t transport_destroy  (pjmedia_transport *tp)",
      "1463: {",
      "1464:     transport_srtp *srtp = (transport_srtp *) tp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1475: static void srtp_on_destroy(void *arg)",
      "1476: {",
      "1477:     transport_srtp *srtp = (transport_srtp*)arg;",
      "1479:     PJ_LOG(4, (srtp->pool->obj_name, \"SRTP transport destroyed\"));",
      "1481:     pj_lock_destroy(srtp->mutex);",
      "1482:     pj_pool_safe_release(&srtp->pool);",
      "1483: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1468:     PJ_ASSERT_RETURN(tp, PJ_EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1494:     PJ_LOG(4, (srtp->pool->obj_name, \"Destroying SRTP transport\"));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1482:     status = pjmedia_transport_srtp_stop(tp);",
      "1491:     return status;",
      "1492: }",
      "",
      "[Removed Lines]",
      "1485:     pj_lock_acquire(srtp->mutex);",
      "1486:     pj_lock_release(srtp->mutex);",
      "1488:     pj_lock_destroy(srtp->mutex);",
      "1489:     pj_pool_release(srtp->pool);",
      "",
      "[Added Lines]",
      "1510:     if (srtp->base.grp_lock) {",
      "1511:         pj_grp_lock_dec_ref(srtp->base.grp_lock);",
      "1512:     } else {",
      "1517:         PJ_LOG(4,(srtp->pool->obj_name,",
      "1518:                   \"Warning: underlying transport does not have group lock\"));",
      "1524:         pj_lock_acquire(srtp->mutex);",
      "1525:         pj_lock_release(srtp->mutex);",
      "1527:         srtp_on_destroy(srtp);",
      "1528:     }",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c": [
      "File: pjmedia/src/pjmedia/transport_srtp_dtls.c -> pjmedia/src/pjmedia/transport_srtp_dtls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:                              pj_status_t status,",
      "81:                              void *user_data);",
      "84: static pjmedia_transport_op dtls_op =",
      "85: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83: static void dtls_on_destroy(void *arg);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269: {",
      "270:     dtls_srtp *ds;",
      "271:     pj_pool_t *pool;",
      "274:     pool = pj_pool_create(srtp->pool->factory, \"dtls%p\",",
      "275:                           2000, 256, NULL);",
      "",
      "[Removed Lines]",
      "272:  pj_status_t status;",
      "",
      "[Added Lines]",
      "275:     pj_status_t status;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "282:     ds->base.user_data = srtp;",
      "283:     ds->srtp = srtp;",
      "291:     PJ_LOG(5,(srtp->pool->obj_name, \"SRTP keying DTLS-SRTP created\"));",
      "",
      "[Removed Lines]",
      "285:     status = pj_lock_create_simple_mutex(ds->pool, \"dtls_ssl_lock%p\",",
      "286:                                          &ds->ossl_lock);",
      "287:     if (status != PJ_SUCCESS)",
      "288:         return status;",
      "",
      "[Added Lines]",
      "289:     if (srtp->base.grp_lock) {",
      "290:         pj_grp_lock_t *grp_lock = srtp->base.grp_lock;",
      "292:         ds->base.grp_lock = grp_lock;",
      "293:         pj_grp_lock_add_ref(grp_lock);",
      "294:         pj_grp_lock_add_handler(grp_lock, pool, ds, &dtls_on_destroy);",
      "295:     } else {",
      "296:         status = pj_lock_create_simple_mutex(ds->pool, \"dtls_ssl_lock%p\",",
      "297:                                              &ds->ossl_lock);",
      "298:         if (status != PJ_SUCCESS)",
      "299:             return status;",
      "300:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "293: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "310: static void DTLS_LOCK(dtls_srtp *ds) {",
      "311:     if (ds->base.grp_lock)",
      "312:         pj_grp_lock_acquire(ds->base.grp_lock);",
      "313:     else",
      "314:         pj_lock_acquire(ds->ossl_lock);",
      "315: }",
      "318: static void DTLS_UNLOCK(dtls_srtp *ds) {",
      "319:     if (ds->base.grp_lock)",
      "320:         pj_grp_lock_release(ds->base.grp_lock);",
      "321:     else",
      "322:         pj_lock_release(ds->ossl_lock);",
      "323: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "546: static void ssl_destroy(dtls_srtp *ds, unsigned idx)",
      "547: {",
      "551:     if (ds->ossl_ssl[idx]) {",
      "",
      "[Removed Lines]",
      "548:     pj_lock_acquire(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "578:     DTLS_LOCK(ds);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "570:         ds->ossl_ctx[idx] = NULL;",
      "571:     }",
      "574: }",
      "576: static pj_status_t ssl_get_srtp_material(dtls_srtp *ds, unsigned idx)",
      "",
      "[Removed Lines]",
      "573:     pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "603:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "581:     pjmedia_srtp_crypto *tx, *rx;",
      "582:     pj_status_t status = PJ_SUCCESS;",
      "586:     if (!ds->ossl_ssl[idx]) {",
      "587:         status = PJ_EGONE;",
      "",
      "[Removed Lines]",
      "584:     pj_lock_acquire(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "614:     DTLS_LOCK(ds);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "652:     }",
      "654: on_return:",
      "656:     return status;",
      "657: }",
      "",
      "[Removed Lines]",
      "655:     pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "685:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "676:         return PJ_ENOTSUP;",
      "677:     }",
      "680:     if (!ds->ossl_ssl[idx]) {",
      "682:         return PJ_EGONE;",
      "683:     }",
      "686:     rem_cert = SSL_get_peer_certificate(ds->ossl_ssl[idx]);",
      "690:     if (!rem_cert)",
      "691:         return PJMEDIA_SRTP_DTLS_EPEERNOCERT;",
      "",
      "[Removed Lines]",
      "679:     pj_lock_acquire(ds->ossl_lock);",
      "681:         pj_lock_release(ds->ossl_lock);",
      "688:     pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "709:     DTLS_LOCK(ds);",
      "711:         DTLS_UNLOCK(ds);",
      "718:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "748:     pj_size_t len;",
      "749:     pj_status_t status = PJ_SUCCESS;",
      "753:     if (!ds->ossl_wbio[idx]) {",
      "755:         return PJ_EGONE;",
      "756:     }",
      "",
      "[Removed Lines]",
      "751:     pj_lock_acquire(ds->ossl_lock);",
      "754:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "781:     DTLS_LOCK(ds);",
      "784:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "761:         len = BIO_read(ds->ossl_wbio[idx], ds->buf[idx], sizeof(ds->buf));",
      "762:         if (len > 0) {",
      "765:             status = send_raw(ds, idx, ds->buf[idx], len);",
      "766:             if (status != PJ_SUCCESS) {",
      "",
      "[Removed Lines]",
      "763:             pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "793:             DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "773:             }",
      "775:         }",
      "776:     }",
      "778:     if (!ds->ossl_ssl[idx]) {",
      "780:         return PJ_EGONE;",
      "781:     }",
      "",
      "[Removed Lines]",
      "774:             pj_lock_acquire(ds->ossl_lock);",
      "779:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "804:             DTLS_LOCK(ds);",
      "809:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "786:     if (ds->nego_completed[idx] || !SSL_is_init_finished(ds->ossl_ssl[idx])) {",
      "788:         return PJ_SUCCESS;",
      "789:     }",
      "",
      "[Removed Lines]",
      "787:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "817:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "793:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP negotiation for %s completed!\",",
      "794:                              CHANNEL_TO_STRING(idx)));",
      "",
      "[Removed Lines]",
      "796:     pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "826:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "868:     PJ_UNUSED_ARG(ts);",
      "872:     if (!ds->ossl_ssl[idx]) {",
      "874:         return;",
      "875:     }",
      "877:     if (DTLSv1_handle_timeout(ds->ossl_ssl[idx]) > 0) {",
      "879:         ssl_flush_wbio(ds, idx);",
      "880:     } else {",
      "882:     }",
      "883: }",
      "",
      "[Removed Lines]",
      "870:     pj_lock_acquire(ds->ossl_lock);",
      "873:         pj_lock_release(ds->ossl_lock);",
      "878:         pj_lock_release(ds->ossl_lock);",
      "881:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "900:     DTLS_LOCK(ds);",
      "903:         DTLS_UNLOCK(ds);",
      "908:         DTLS_UNLOCK(ds);",
      "911:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "889:     pj_status_t status;",
      "890:     int err;",
      "895:     status = ssl_create(ds, idx);",
      "896:     if (status != PJ_SUCCESS) {",
      "898:         return status;",
      "899:     }",
      "902:     if (ds->nego_started[idx] || SSL_is_init_finished(ds->ossl_ssl[idx])) {",
      "904:         return PJ_SUCCESS;",
      "905:     }",
      "",
      "[Removed Lines]",
      "892:     pj_lock_acquire(ds->ossl_lock);",
      "897:         pj_lock_release(ds->ossl_lock);",
      "903:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "922:     DTLS_LOCK(ds);",
      "927:         DTLS_UNLOCK(ds);",
      "933:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "914:     if (err < 0) {",
      "915:         err = SSL_get_error(ds->ossl_ssl[idx], err);",
      "919:         if (err == SSL_ERROR_WANT_READ) {",
      "920:             status = ssl_flush_wbio(ds, idx);",
      "",
      "[Removed Lines]",
      "917:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "947:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "927:             goto on_return;",
      "928:         }",
      "929:     } else {",
      "931:     }",
      "",
      "[Removed Lines]",
      "930:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "960:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1135:     char tmp[128];",
      "1136:     pj_size_t nwritten;",
      "1140:     if (!ds->ossl_rbio[idx]) {",
      "1142:         return PJ_EGONE;",
      "1143:     }",
      "",
      "[Removed Lines]",
      "1138:     pj_lock_acquire(ds->ossl_lock);",
      "1141:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "1168:     DTLS_LOCK(ds);",
      "1171:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1150: #if DTLS_DEBUG",
      "1151:         pj_perror(2, ds->base.name, status, \"BIO_write() error\");",
      "1152: #endif",
      "1154:         return status;",
      "1155:     }",
      "1157:     if (!ds->ossl_ssl[idx]) {",
      "1159:         return PJ_EGONE;",
      "1160:     }",
      "",
      "[Removed Lines]",
      "1153:         pj_lock_release(ds->ossl_lock);",
      "1158:         pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "1183:         DTLS_UNLOCK(ds);",
      "1188:         DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1172:         }",
      "1173:     }",
      "1178:     return ssl_flush_wbio(ds, idx);",
      "",
      "[Removed Lines]",
      "1175:     pj_lock_release(ds->ossl_lock);",
      "",
      "[Added Lines]",
      "1205:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1211: {",
      "1212:     dtls_srtp *ds = (dtls_srtp*)tp;",
      "1215:     if (ds->clock[idx] && ds->nego_completed[idx]) {",
      "1216:         pjmedia_clock_destroy(ds->clock[idx]);",
      "1217:         ds->clock[idx] = NULL;",
      "1218:     }",
      "1221:         return PJ_EIGNORED;",
      "1223: #if DTLS_DEBUG",
      "1224:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP %s receiving %lu bytes\",",
      "",
      "[Removed Lines]",
      "1220:     if (size < 1 || !IS_DTLS_PKT(pkt, size))",
      "",
      "[Added Lines]",
      "1244:     DTLS_LOCK(ds);",
      "1252:     if (size < 1 || !IS_DTLS_PKT(pkt, size) || ds->is_destroying) {",
      "1253:         DTLS_UNLOCK(ds);",
      "1255:     }",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1258:             }",
      "1260:             status = pjmedia_transport_attach2(&ds->srtp->base, &ap);",
      "1262:                 return status;",
      "1264: #if DTLS_DEBUG",
      "1265:             {",
      "",
      "[Removed Lines]",
      "1261:             if (status != PJ_SUCCESS)",
      "",
      "[Added Lines]",
      "1295:             if (status != PJ_SUCCESS) {",
      "1296:                 DTLS_UNLOCK(ds);",
      "1298:             }",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1283:         pj_status_t status;",
      "1284:         ds->setup = DTLS_SETUP_PASSIVE;",
      "1285:         status = ssl_handshake_channel(ds, idx);",
      "1287:             return status;",
      "1288:     }",
      "1291:     ssl_on_recv_packet(ds, idx, pkt, size);",
      "1292:     return PJ_SUCCESS;",
      "1293: }",
      "",
      "[Removed Lines]",
      "1286:         if (status != PJ_SUCCESS)",
      "",
      "[Added Lines]",
      "1322:         if (status != PJ_SUCCESS) {",
      "1323:             DTLS_UNLOCK(ds);",
      "1325:         }",
      "1331:     DTLS_UNLOCK(ds);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1821:     ssl_destroy(ds, idx);",
      "1822: }",
      "1824: static pj_status_t dtls_destroy(pjmedia_transport *tp)",
      "1825: {",
      "1826:     dtls_srtp *ds = (dtls_srtp *)tp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1865: static void dtls_on_destroy(void *arg) {",
      "1866:     dtls_srtp *ds = (dtls_srtp *)arg;",
      "1868:     if (ds->ossl_lock)",
      "1869:         pj_lock_destroy(ds->ossl_lock);",
      "1871:     pj_pool_safe_release(&ds->pool);",
      "1872: }",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1829:     PJ_LOG(2,(ds->base.name, \"dtls_destroy()\"));",
      "1830: #endif",
      "1832:     dtls_destroy_channel(ds, RTP_CHANNEL);",
      "1833:     dtls_destroy_channel(ds, RTCP_CHANNEL);",
      "1842:     return PJ_SUCCESS;",
      "1843: }",
      "",
      "[Removed Lines]",
      "1835:     if (ds->ossl_lock) {",
      "1836:         pj_lock_destroy(ds->ossl_lock);",
      "1837:         ds->ossl_lock = NULL;",
      "1838:     }",
      "1840:     pj_pool_safe_release(&ds->pool);",
      "",
      "[Added Lines]",
      "1882:     ds->is_destroying = PJ_TRUE;",
      "1884:     DTLS_LOCK(ds);",
      "1889:     DTLS_UNLOCK(ds);",
      "1891:     if (ds->base.grp_lock) {",
      "1892:         pj_grp_lock_dec_ref(ds->base.grp_lock);",
      "1893:     } else {",
      "1894:         dtls_on_destroy(tp);",
      "1895:     }",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/transport_udp.c||pjmedia/src/pjmedia/transport_udp.c": [
      "File: pjmedia/src/pjmedia/transport_udp.c -> pjmedia/src/pjmedia/transport_udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "298:     pj_pool_t *pool;",
      "299:     pj_ioqueue_t *ioqueue;",
      "300:     pj_ioqueue_callback rtp_cb, rtcp_cb;",
      "301:     pj_status_t status;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:     pj_grp_lock_t *grp_lock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "348:                   pj_sockaddr_get_addr_len(&tp->rtp_addr_name));",
      "349:     }",
      "352:     pj_bzero(&rtp_cb, sizeof(rtp_cb));",
      "353:     rtp_cb.on_read_complete = &on_rx_rtp;",
      "354:     rtp_cb.on_write_complete = &on_rtp_data_sent;",
      "358:     if (status != PJ_SUCCESS)",
      "359:         goto on_error;",
      "364:     status = pj_ioqueue_set_concurrency(tp->rtp_key, PJ_FALSE);",
      "365:     if (status != PJ_SUCCESS)",
      "",
      "[Removed Lines]",
      "356:     status = pj_ioqueue_register_sock(pool, ioqueue, tp->rtp_sock, tp,",
      "357:                                       &rtp_cb, &tp->rtp_key);",
      "",
      "[Added Lines]",
      "353:     status = pj_grp_lock_create(pool, NULL, &grp_lock);",
      "354:     if (status != PJ_SUCCESS)",
      "355:         goto on_error;",
      "357:     pj_grp_lock_add_ref(grp_lock);",
      "358:     tp->base.grp_lock = grp_lock;",
      "365:     status = pj_ioqueue_register_sock2(pool, ioqueue, tp->rtp_sock, grp_lock,",
      "366:                                        tp, &rtp_cb, &tp->rtp_key);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "388:     pj_bzero(&rtcp_cb, sizeof(rtcp_cb));",
      "389:     rtcp_cb.on_read_complete = &on_rx_rtcp;",
      "393:     if (status != PJ_SUCCESS)",
      "394:         goto on_error;",
      "",
      "[Removed Lines]",
      "391:     status = pj_ioqueue_register_sock(pool, ioqueue, tp->rtcp_sock, tp,",
      "392:                                       &rtcp_cb, &tp->rtcp_key);",
      "",
      "[Added Lines]",
      "403:     status = pj_ioqueue_register_sock2(pool, ioqueue, tp->rtcp_sock, grp_lock,",
      "404:                                        tp, &rtcp_cb, &tp->rtcp_key);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "459:         udp->rtcp_sock = PJ_INVALID_SOCKET;",
      "460:     }",
      "462:     PJ_LOG(4,(udp->base.name, \"UDP media transport destroyed\"));",
      "463:     pj_pool_release(udp->pool);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "475:     pj_grp_lock_dec_ref(tp->grp_lock);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eaf0f4516d53f68a08264e31641f975d57d736c6",
      "candidate_info": {
        "commit_hash": "eaf0f4516d53f68a08264e31641f975d57d736c6",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/eaf0f4516d53f68a08264e31641f975d57d736c6",
        "files": [
          "pjmedia/src/pjmedia/transport_srtp_dtls.c"
        ],
        "message": "Changed DTLS transport to use recursive mutex, instead of a simple one (#3731)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c": [
          "File: pjmedia/src/pjmedia/transport_srtp_dtls.c -> pjmedia/src/pjmedia/transport_srtp_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:         pj_grp_lock_add_ref(grp_lock);",
          "294:         pj_grp_lock_add_handler(grp_lock, pool, ds, &dtls_on_destroy);",
          "295:     } else {",
          "297:                                              &ds->ossl_lock);",
          "298:         if (status != PJ_SUCCESS)",
          "299:             return status;",
          "",
          "[Removed Lines]",
          "296:         status = pj_lock_create_simple_mutex(ds->pool, \"dtls_ssl_lock%p\",",
          "",
          "[Added Lines]",
          "296:         status = pj_lock_create_recursive_mutex(ds->pool, \"dtls_ssl_lock%p\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "969bec998745b1014d85d9d2a2545ed20dc157ba",
      "candidate_info": {
        "commit_hash": "969bec998745b1014d85d9d2a2545ed20dc157ba",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/969bec998745b1014d85d9d2a2545ed20dc157ba",
        "files": [
          "pjmedia/src/pjmedia/transport_srtp_dtls.c"
        ],
        "message": "Fixed DTLS handshake issue when RTCP address changes (#3732)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c": [
          "File: pjmedia/src/pjmedia/transport_srtp_dtls.c -> pjmedia/src/pjmedia/transport_srtp_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         pj_lock_acquire(ds->ossl_lock);",
          "315: }",
          "318: static void DTLS_UNLOCK(dtls_srtp *ds) {",
          "319:     if (ds->base.grp_lock)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: static pj_status_t DTLS_TRY_LOCK(dtls_srtp *ds) {",
          "318:     if (ds->base.grp_lock)",
          "319:         return pj_grp_lock_tryacquire(ds->base.grp_lock);",
          "320:     else",
          "321:         return pj_lock_tryacquire(ds->ossl_lock);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "894:     dtls_srtp_channel *ds_ch = (dtls_srtp_channel*)user_data;",
          "895:     dtls_srtp *ds = ds_ch->dtls_srtp;",
          "896:     unsigned idx = ds_ch->channel;",
          "898:     PJ_UNUSED_ARG(ts);",
          "902:     if (!ds->ossl_ssl[idx]) {",
          "903:         DTLS_UNLOCK(ds);",
          "",
          "[Removed Lines]",
          "900:     DTLS_LOCK(ds);",
          "",
          "[Added Lines]",
          "903:     pj_status_t status;",
          "907:     while (1) {",
          "909:         if (ds->nego_completed[idx])",
          "910:             return;",
          "913:         status = DTLS_TRY_LOCK(ds);",
          "914:         if (status == PJ_SUCCESS)",
          "915:             break;",
          "918:         if (ds->nego_completed[idx])",
          "919:             return;",
          "921:         pj_thread_sleep(20);",
          "922:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "983: on_return:",
          "984:     if (status != PJ_SUCCESS) {",
          "985:         if (ds->clock[idx])",
          "986:             pjmedia_clock_stop(ds->clock[idx]);",
          "987:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:         ds->nego_completed[idx] = PJ_TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1269:         pjmedia_transport_info info;",
          "1270:         pjmedia_transport_get_info(ds->srtp->member_tp, &info);",
          "1272:             pjmedia_transport_attach_param ap;",
          "1273:             pj_status_t status;",
          "1275:             pj_bzero(&ap, sizeof(ap));",
          "1276:             ap.user_data = ds->srtp;",
          "1286:             } else if (pj_sockaddr_has_addr(&ds->rem_rtcp)) {",
          "1287:                 pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_rtcp);",
          "1289:                 pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_addr);",
          "1290:                 pj_sockaddr_set_port(&ap.rem_rtcp,",
          "1292:             }",
          "1294:             status = pjmedia_transport_attach2(&ds->srtp->base, &ap);",
          "1295:             if (status != PJ_SUCCESS) {",
          "1296:                 DTLS_UNLOCK(ds);",
          "",
          "[Removed Lines]",
          "1268:     if (idx == RTP_CHANNEL && !ds->use_ice && !ds->nego_completed[idx]) {",
          "1271:         if (pj_sockaddr_cmp(&ds->rem_addr, &info.src_rtp_name)) {",
          "1277:             pj_sockaddr_cp(&ds->rem_addr, &info.src_rtp_name);",
          "1278:             pj_sockaddr_cp(&ap.rem_addr, &ds->rem_addr);",
          "1279:             ap.addr_len = pj_sockaddr_get_len(&ap.rem_addr);",
          "1280:             if (pj_sockaddr_cmp(&info.sock_info.rtp_addr_name,",
          "1281:                                 &info.sock_info.rtcp_addr_name) == 0)",
          "1282:             {",
          "1284:                 pj_sockaddr_cp(&ds->rem_rtcp, &ds->rem_addr);",
          "1285:                 pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_rtcp);",
          "1288:             } else {",
          "1291:                                      pj_sockaddr_get_port(&ds->rem_addr)+1);",
          "",
          "[Added Lines]",
          "1292:     if (!ds->use_ice && !ds->nego_completed[idx]) {",
          "1294:         pj_bool_t reattach_tp = PJ_FALSE;",
          "1298:         if (idx == RTP_CHANNEL &&",
          "1299:             pj_sockaddr_cmp(&ds->rem_addr, &info.src_rtp_name))",
          "1300:         {",
          "1301:             pj_sockaddr_cp(&ds->rem_addr, &info.src_rtp_name);",
          "1302:             reattach_tp = PJ_TRUE;",
          "1303:         } else if (idx == RTCP_CHANNEL && !ds->srtp->use_rtcp_mux &&",
          "1304:                    pj_sockaddr_has_addr(&info.src_rtcp_name) &&",
          "1305:                    pj_sockaddr_cmp(&ds->rem_rtcp, &info.src_rtcp_name))",
          "1306:         {",
          "1307:             pj_sockaddr_cp(&ds->rem_rtcp, &info.src_rtcp_name);",
          "1308:             reattach_tp = PJ_TRUE;",
          "1309:         }",
          "1311:         if (reattach_tp) {",
          "1318:             if (pj_sockaddr_has_addr(&ds->rem_addr)) {",
          "1319:                 pj_sockaddr_cp(&ap.rem_addr, &ds->rem_addr);",
          "1320:             } else {",
          "1321:                 pj_sockaddr_init(pj_AF_INET(), &ap.rem_addr, 0, 0);",
          "1322:             }",
          "1323:             if (ds->srtp->use_rtcp_mux) {",
          "1325:                 pj_sockaddr_cp(&ap.rem_rtcp, &ap.rem_addr);",
          "1328:             } else if (pj_sockaddr_has_addr(&ds->rem_addr)) {",
          "1331:                                      pj_sockaddr_get_port(&ap.rem_rtcp) + 1);",
          "1332:             } else {",
          "1333:                 pj_sockaddr_init(pj_AF_INET(), &ap.rem_rtcp, 0, 0);",
          "1335:             ap.addr_len = pj_sockaddr_get_len(&ap.rem_addr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1300: #if DTLS_DEBUG",
          "1301:             {",
          "1302:                 char addr[PJ_INET6_ADDRSTRLEN];",
          "1303:                 PJ_LOG(2,(ds->base.name, \"Re-attached transport to update \"",
          "1305:                           pj_sockaddr_print(&ap.rem_addr, addr,",
          "1308:             }",
          "1309: #endif",
          "1310:         }",
          "",
          "[Removed Lines]",
          "1304:                           \"remote addr=%s:%d\",",
          "1306:                                             sizeof(addr), 2),",
          "1307:                           pj_sockaddr_get_port(&ap.rem_addr)));",
          "",
          "[Added Lines]",
          "1345:                 char addr2[PJ_INET6_ADDRSTRLEN];",
          "1347:                           \"remote addr=%s remote rtcp=%s\",",
          "1349:                                             sizeof(addr), 3),",
          "1350:                           pj_sockaddr_print(&ap.rem_rtcp, addr2,",
          "1351:                                             sizeof(addr2), 3)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1325:         }",
          "1326:     }",
          "1329:     ssl_on_recv_packet(ds, idx, pkt, size);",
          "1333:     return PJ_SUCCESS;",
          "1334: }",
          "",
          "[Removed Lines]",
          "1331:     DTLS_UNLOCK(ds);",
          "",
          "[Added Lines]",
          "1372:     DTLS_UNLOCK(ds);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1429: static void dtls_media_stop_channel(dtls_srtp *ds, unsigned idx)",
          "1430: {",
          "1431:     if (ds->clock[idx])",
          "1432:         pjmedia_clock_stop(ds->clock[idx]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1475:     ds->nego_completed[idx] = PJ_TRUE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1628: #if DTLS_DEBUG",
          "1629:         {",
          "1630:             char addr[PJ_INET6_ADDRSTRLEN];",
          "1634:         }",
          "1635: #endif",
          "1636:     }",
          "",
          "[Removed Lines]",
          "1631:             PJ_LOG(2,(ds->base.name, \"Attached transport, remote addr=%s:%d\",",
          "1632:                       pj_sockaddr_print(&ap.rem_addr, addr, sizeof(addr), 2),",
          "1633:                       pj_sockaddr_get_port(&ap.rem_addr)));",
          "",
          "[Added Lines]",
          "1676:             char addr2[PJ_INET6_ADDRSTRLEN];",
          "1677:             PJ_LOG(2,(ds->base.name, \"Attached transport, remote addr=%s \"",
          "1678:                                      \"remote rtcp=%s\",",
          "1679:                       pj_sockaddr_print(&ap.rem_addr, addr2, sizeof(addr2), 3),",
          "1680:                       pj_sockaddr_print(&ap.rem_rtcp, addr, sizeof(addr), 3)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1810: #if DTLS_DEBUG",
          "1811:             {",
          "1812:                 char addr[PJ_INET6_ADDRSTRLEN];",
          "1813:                 PJ_LOG(2,(ds->base.name, \"Attached transport, \"",
          "1815:                           pj_sockaddr_print(&ap.rem_addr, addr,",
          "1818:             }",
          "1819: #endif",
          "",
          "[Removed Lines]",
          "1814:                           \"remote addr=%s:%d\",",
          "1816:                           sizeof(addr), 2),",
          "1817:                           pj_sockaddr_get_port(&ap.rem_addr)));",
          "",
          "[Added Lines]",
          "1860:                 char addr2[PJ_INET6_ADDRSTRLEN];",
          "1862:                           \"remote addr=%s remote rtcp=%s\",",
          "1864:                           sizeof(addr), 3),",
          "1865:                           pj_sockaddr_print(&ap.rem_rtcp, addr2,",
          "1866:                           sizeof(addr2), 3)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1856: static void dtls_destroy_channel(dtls_srtp *ds, unsigned idx)",
          "1857: {",
          "1858:     if (ds->clock[idx]) {",
          "1859:         pjmedia_clock_destroy(ds->clock[idx]);",
          "1860:         ds->clock[idx] = NULL;",
          "1861:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1908:         ds->nego_completed[idx] = PJ_TRUE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1973: #if DTLS_DEBUG",
          "1974:     {",
          "1975:         char addr[PJ_INET6_ADDRSTRLEN];",
          "1979:     }",
          "1980: #endif",
          "",
          "[Removed Lines]",
          "1976:         PJ_LOG(2,(ds->base.name, \"Attached transport, remote addr=%s:%d\",",
          "1977:                   pj_sockaddr_print(&ap.rem_addr, addr, sizeof(addr), 2),",
          "1978:                   pj_sockaddr_get_port(&ap.rem_addr)));",
          "",
          "[Added Lines]",
          "2026:         char addr2[PJ_INET6_ADDRSTRLEN];",
          "2027:         PJ_LOG(2,(ds->base.name, \"Attached transport, remote addr=%s \"",
          "2028:                                  \"remote rtcp=%s\",",
          "2029:                   pj_sockaddr_print(&ap.rem_addr, addr, sizeof(addr), 3),",
          "2030:                   pj_sockaddr_print(&ap.rem_addr, addr2, sizeof(addr2), 3)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}