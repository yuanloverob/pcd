{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c07a00403e50abfdde07c2f85b8213dd624eab3",
      "candidate_info": {
        "commit_hash": "4c07a00403e50abfdde07c2f85b8213dd624eab3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/4c07a00403e50abfdde07c2f85b8213dd624eab3",
        "files": [
          "channels/printer/client/printer_main.c"
        ],
        "message": "Fixed int overflow in printer_write_setting\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c": [
          "File: channels/printer/client/printer_main.c -> channels/printer/client/printer_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  const char* name = filemap[type];",
          "108:  char* abs = GetCombinedPath(path, name);",
          "111:   return FALSE;",
          "113:  file = CreateFileA(abs, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Removed Lines]",
          "110:  if (!abs)",
          "",
          "[Added Lines]",
          "110:  if (!abs || (length > INT32_MAX))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c668d66e88478b617797f12d272a881d24ee81f0",
      "candidate_info": {
        "commit_hash": "c668d66e88478b617797f12d272a881d24ee81f0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c668d66e88478b617797f12d272a881d24ee81f0",
        "files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c",
          "client/common/cmdline.c",
          "client/common/cmdline.h"
        ],
        "message": "Added ability to add usb devs via id and addr simultaneously\n\nIt is now possible to add usb devices both via vid+pid and via bus+addr\nat the same time. To do this, the ids are directly\ngiven to the corresponding command line options:\n/usb:id:<vid+pids>,addr:<bus+addrs>\nThe dev option still works like before: /usb:id,dev:<vid+pids> or\n/usb:addr,dev:<bus+addrs>",
        "before_after_code_files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c",
          "client/common/cmdline.c||client/common/cmdline.c",
          "client/common/cmdline.h||client/common/cmdline.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c": [
          "File: channels/urbdrc/client/libusb/libusb_udevman.c -> channels/urbdrc/client/libuslibusb_udevman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  VID_PID_PAIR hotplug_vid_pids[MAX_HOTPLUG_VID_PIDS];",
          "80:  size_t num_hotplug_vid_pids;",
          "81:  UINT16 flags;",
          "",
          "[Removed Lines]",
          "78:  LPSTR cmdline_devices;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:   case LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED:",
          "561:    for (size_t i = 0; i < udevman->num_hotplug_vid_pids; i++)",
          "562:    {",
          "564:     {",
          "566:      return 0;",
          "567:     }",
          "568:    }",
          "569:    if (udevman->iface.isAutoAdd(&udevman->iface) && !device_is_filtered(dev, &desc, event))",
          "571:    break;",
          "573:   case LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT:",
          "575:    break;",
          "577:   default:",
          "",
          "[Removed Lines]",
          "563:     if (udevman->hotplug_vid_pids[i].vid == desc.idVendor && udevman->hotplug_vid_pids[i].pid == desc.idProduct)",
          "565:      add_device(&udevman->iface, DEVICE_ADD_FLAG_ALL, bus, addr, desc.idVendor, desc.idProduct);",
          "570:     add_device(&udevman->iface, DEVICE_ADD_FLAG_ALL, bus, addr, desc.idVendor, desc.idProduct);",
          "574:    del_device(&udevman->iface, DEVICE_ADD_FLAG_ALL, bus, addr, desc.idVendor, desc.idProduct);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "626:  return FALSE;",
          "627: }",
          "630: {",
          "631:  const char* pos = devices;",
          "632:  UINT16 id1, id2;",
          "634:  while (*pos != '\\0')",
          "635:  {",
          "641:    add_device(&udevman->iface, DEVICE_ADD_FLAG_VENDOR | DEVICE_ADD_FLAG_PRODUCT, 0, 0, id1,",
          "642:               id2);",
          "",
          "[Removed Lines]",
          "629: static BOOL urbdrc_udevman_register_devices(UDEVMAN* udevman, const char* devices)",
          "636:   if (udevman->flags & UDEVMAN_FLAG_ADD_BY_VID_PID)",
          "637:   {",
          "638:    if (!udevman_parse_device_id_addr(&pos, &id1, &id2, UINT16_MAX, ':', '#'))",
          "639:     return FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:    }",
          "649:    else",
          "650:    {",
          "652:    }",
          "653:   }",
          "662:  }",
          "664:  return TRUE;",
          "",
          "[Removed Lines]",
          "651:     WLog_WARN(TAG, \"Maximum hotplug device ids reached. Hotplug may not work for all given devices.\");",
          "654:   else if (udevman->flags & UDEVMAN_FLAG_ADD_BY_ADDR)",
          "655:   {",
          "656:    if (!udevman_parse_device_id_addr(&pos, &id1, &id2, UINT8_MAX, ':', '#'))",
          "657:     return FALSE;",
          "659:    add_device(&udevman->iface, DEVICE_ADD_FLAG_BUS | DEVICE_ADD_FLAG_DEV, (UINT8)id1,",
          "660:               (UINT8)id2, 0, 0);",
          "661:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "667: static UINT urbdrc_udevman_parse_addin_args(UDEVMAN* udevman, ADDIN_ARGV* args)",
          "668: {",
          "669:  int status;",
          "672:  COMMAND_LINE_ARGUMENT_A* arg;",
          "673:  COMMAND_LINE_ARGUMENT_A urbdrc_udevman_args[] = {",
          "674:   { \"dbg\", COMMAND_LINE_VALUE_FLAG, \"\", NULL, BoolValueFalse, -1, NULL, \"debug\" },",
          "675:   { \"dev\", COMMAND_LINE_VALUE_REQUIRED, \"<devices>\", NULL, NULL, -1, NULL, \"device list\" },",
          "677:     \"FLAG_ADD_BY_VID_PID\" },",
          "679:   { \"auto\", COMMAND_LINE_VALUE_FLAG, \"\", NULL, BoolValueFalse, -1, NULL, \"FLAG_ADD_BY_AUTO\" },",
          "680:   { NULL, 0, NULL, NULL, NULL, -1, NULL, NULL }",
          "681:  };",
          "687:  if (status != CHANNEL_RC_OK)",
          "688:   return status;",
          "",
          "[Removed Lines]",
          "670:  DWORD flags;",
          "671:  const UINT16 mask = UDEVMAN_FLAG_ADD_BY_VID_PID | UDEVMAN_FLAG_ADD_BY_ADDR;",
          "676:   { \"id\", COMMAND_LINE_VALUE_FLAG, \"\", NULL, BoolValueFalse, -1, NULL,",
          "678:   { \"addr\", COMMAND_LINE_VALUE_FLAG, \"\", NULL, BoolValueFalse, -1, NULL, \"FLAG_ADD_BY_ADDR\" },",
          "683:  flags = COMMAND_LINE_SIGIL_NONE | COMMAND_LINE_SEPARATOR_COLON;",
          "684:  status = CommandLineParseArgumentsA(args->argc, args->argv, urbdrc_udevman_args, flags, udevman,",
          "685:                                      NULL, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "692:  do",
          "693:  {",
          "695:    continue;",
          "697:   CommandLineSwitchStart(arg) CommandLineSwitchCase(arg, \"dbg\")",
          "",
          "[Removed Lines]",
          "694:   if (!(arg->Flags & COMMAND_LINE_VALUE_PRESENT))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "700:   }",
          "701:   CommandLineSwitchCase(arg, \"dev\")",
          "702:   {",
          "704:   }",
          "705:   CommandLineSwitchCase(arg, \"id\")",
          "706:   {",
          "708:   }",
          "709:   CommandLineSwitchCase(arg, \"addr\")",
          "710:   {",
          "712:   }",
          "713:   CommandLineSwitchCase(arg, \"auto\")",
          "714:   {",
          "",
          "[Removed Lines]",
          "703:    udevman->cmdline_devices = arg->Value;",
          "707:    udevman->flags = UDEVMAN_FLAG_ADD_BY_VID_PID;",
          "711:    udevman->flags = UDEVMAN_FLAG_ADD_BY_ADDR;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "720:   CommandLineSwitchEnd(arg)",
          "721:  } while ((arg = CommandLineFindNextArgumentA(arg)) != NULL);",
          "727:  return CHANNEL_RC_OK;",
          "728: }",
          "730: static UINT udevman_listener_created_callback(IUDEVMAN* iudevman)",
          "731: {",
          "732:  UDEVMAN* udevman = (UDEVMAN*)iudevman;",
          "736:  {",
          "739:  }",
          "741:  return CHANNEL_RC_OK;",
          "742: }",
          "744: static void udevman_load_interface(UDEVMAN* udevman)",
          "",
          "[Removed Lines]",
          "724:  if ((udevman->flags & mask) == mask)",
          "725:   return COMMAND_LINE_ERROR_UNEXPECTED_VALUE;",
          "734:  if (udevman->cmdline_devices &&",
          "735:      !urbdrc_udevman_register_devices(udevman, udevman->cmdline_devices))",
          "737:   WLog_ERR(TAG, \"Invalid device id: \\\"%s\\\"\", udevman->cmdline_devices);",
          "738:   return COMMAND_LINE_ERROR_UNEXPECTED_VALUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "client/common/cmdline.c||client/common/cmdline.c": [
          "File: client/common/cmdline.c -> client/common/cmdline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:  printf(\"\\n\");",
          "455:  printf(\"Multimedia Redirection: /video\\n\");",
          "456: #ifdef CHANNEL_URBDRC_CLIENT",
          "458: #endif",
          "459:  printf(\"\\n\");",
          "460:  printf(\"For Gateways, the https_proxy environment variable is respected:\\n\");",
          "",
          "[Removed Lines]",
          "457:  printf(\"USB Device Redirection: /usb:id,dev:054c:0268\\n\");",
          "",
          "[Added Lines]",
          "457:  printf(\"USB Device Redirection: /usb:id:054c:0268#4669:6e6b,addr:04:0c\\n\");",
          "",
          "---------------"
        ],
        "client/common/cmdline.h||client/common/cmdline.h": [
          "File: client/common/cmdline.h -> client/common/cmdline.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:  { \"unmap-buttons\", COMMAND_LINE_VALUE_BOOL, NULL, BoolValueFalse, NULL, -1, NULL,",
          "350:    \"Let server see real physical pointer button\" },",
          "351: #ifdef CHANNEL_URBDRC_CLIENT",
          "354: #endif",
          "355:  { \"v\", COMMAND_LINE_VALUE_REQUIRED, \"<server>[:port]\", NULL, NULL, -1, NULL,",
          "356:    \"Server hostname\" },",
          "",
          "[Removed Lines]",
          "352:  { \"usb\", COMMAND_LINE_VALUE_REQUIRED, \"[dbg,][dev:<dev>,][id|addr,][auto]\", NULL, NULL, -1,",
          "353:    NULL, \"Redirect USB device\" },",
          "",
          "[Added Lines]",
          "352:  { \"usb\", COMMAND_LINE_VALUE_REQUIRED,",
          "353:    \"[dbg,][id:<vid>:<pid>#...,][addr:<bus>:<addr>#...,][auto]\", NULL, NULL, -1, NULL,",
          "354:    \"Redirect USB device\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d5ce618bf1db4bae83fd17fbb7e4eccbd715d9c",
      "candidate_info": {
        "commit_hash": "2d5ce618bf1db4bae83fd17fbb7e4eccbd715d9c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2d5ce618bf1db4bae83fd17fbb7e4eccbd715d9c",
        "files": [
          "CMakeLists.txt",
          "client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle",
          "client/Android/android_freerdp.c",
          "winpr/CMakeLists.txt"
        ],
        "message": "2.1.0 release version.",
        "before_after_code_files": [
          "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle",
          "client/Android/android_freerdp.c||client/Android/android_freerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle": [
          "File: client/Android/Studio/aFreeRDP/build.gradle -> client/Android/Studio/aFreeRDP/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         minSdkVersion 21",
          "10:         targetSdkVersion 28",
          "11:         vectorDrawables.useSupportLibrary = true",
          "13:         versionName = rootProject.ext.versionName",
          "14:     }",
          "",
          "[Removed Lines]",
          "12:         versionCode = 15",
          "",
          "[Added Lines]",
          "12:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "33:     println '----------------- Project configuration -------------------'",
          "34:     println 'VERSION_NAME:       ' + versionName",
          "35:     println 'RELEASE_STORE_FILE: '+ RELEASE_STORE_FILE",
          "36:     println 'RELEASE_KEY_ALIAS:  '+ RELEASE_KEY_ALIAS",
          "37:     println '-----------------------------------------------------------'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 16)",
          "36:     println 'VERSION_CODE:       ' + versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle": [
          "File: client/Android/Studio/freeRDPCore/build.gradle -> client/Android/Studio/freeRDPCore/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:         minSdkVersion 21",
          "9:         targetSdkVersion 28",
          "10:         vectorDrawables.useSupportLibrary = true",
          "12:         versionName = rootProject.ext.versionName",
          "13:     }",
          "",
          "[Removed Lines]",
          "11:         versionCode = 15",
          "",
          "[Added Lines]",
          "11:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ],
        "client/Android/android_freerdp.c||client/Android/android_freerdp.c": [
          "File: client/Android/android_freerdp.c -> client/Android/android_freerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define TAG CLIENT_TAG(\"android\")",
          "61: static void android_OnChannelConnectedEventHandler(void* context, ChannelConnectedEventArgs* e)",
          "62: {",
          "",
          "[Removed Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.0-dev\"",
          "",
          "[Added Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d56937e209363e3633b6acae039d46b4ed343dc",
      "candidate_info": {
        "commit_hash": "5d56937e209363e3633b6acae039d46b4ed343dc",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5d56937e209363e3633b6acae039d46b4ed343dc",
        "files": [
          "libfreerdp/codec/dsp_ffmpeg.c"
        ],
        "message": "Workaround #6072: FFMPEG AAC encoding graded experimental\n\nDue to many reporing issues with different AAC encoder configurations\ndeactivate support by default. Can be enabled by compiling with\nexperimental codec support.",
        "before_after_code_files": [
          "libfreerdp/codec/dsp_ffmpeg.c||libfreerdp/codec/dsp_ffmpeg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/dsp_ffmpeg.c||libfreerdp/codec/dsp_ffmpeg.c": [
          "File: libfreerdp/codec/dsp_ffmpeg.c -> libfreerdp/codec/dsp_ffmpeg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   case AV_CODEC_ID_NONE:",
          "80:    return TRUE;",
          "82:   default:",
          "83:    return FALSE;",
          "84:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   case AV_CODEC_ID_AAC:",
          "83:   case AV_CODEC_ID_AAC_LATM:",
          "84: #if !defined(WITH_DSP_EXPERIMENTAL)",
          "85:    if (encoder)",
          "86:     return TRUE;",
          "87: #endif",
          "88:    return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1cef2d68c9afc697e70ac06802a0b3cc27ef93d",
      "candidate_info": {
        "commit_hash": "c1cef2d68c9afc697e70ac06802a0b3cc27ef93d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c1cef2d68c9afc697e70ac06802a0b3cc27ef93d",
        "files": [
          "channels/smartcard/client/smartcard_pack.c"
        ],
        "message": "Fixed int overflow in smartcard_ndr_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c": [
          "File: channels/smartcard/client/smartcard_pack.c -> channels/smartcard/client/smartcard_pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static LONG smartcard_ndr_read(wStream* s, BYTE** data, size_t min, size_t elementSize,",
          "102:                                ndr_ptr_t type)",
          "103: {",
          "105:  void* r;",
          "106:  size_t required;",
          "",
          "[Removed Lines]",
          "104:  UINT32 len, offset, len2;",
          "",
          "[Added Lines]",
          "104:  size_t len, offset, len2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:            min, len);",
          "164:   return STATUS_DATA_ERROR;",
          "165:  }",
          "169:  {",
          "170:   WLog_ERR(TAG,",
          "171:            \"Short data while trying to read data from NDR pointer, expected %\" PRIu32",
          "",
          "[Removed Lines]",
          "166:  len *= elementSize;",
          "168:  if (Stream_GetRemainingLength(s) < len)",
          "",
          "[Added Lines]",
          "167:  if (len > SIZE_MAX / 2)",
          "168:   return STATUS_BUFFER_TOO_SMALL;",
          "170:  if (Stream_GetRemainingLength(s) / elementSize < len)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:            len, Stream_GetRemainingLength(s));",
          "174:   return STATUS_BUFFER_TOO_SMALL;",
          "175:  }",
          "177:  r = calloc(len + 1, sizeof(CHAR));",
          "178:  if (!r)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:  len *= elementSize;",
          "",
          "---------------"
        ]
      }
    }
  ]
}