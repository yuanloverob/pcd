{
  "cve_id": "CVE-2023-22742",
  "cve_desc": "libgit2 is a cross-platform, linkable library implementation of Git. When using an SSH remote with the optional libssh2 backend, libgit2 does not perform certificate checking by default. Prior versions of libgit2 require the caller to set the `certificate_check` field of libgit2's `git_remote_callbacks` structure - if a certificate check callback is not set, libgit2 does not perform any certificate checking. This means that by default - without configuring a certificate check callback, clients will not perform validation on the server SSH keys and may be subject to a man-in-the-middle attack. Users are encouraged to upgrade to v1.4.5 or v1.5.1. Users unable to upgrade should ensure that all relevant certificates are manually checked.",
  "repo": "libgit2/libgit2",
  "patch_hash": "42e5db98b963ae503229c63e44e06e439df50e56",
  "patch_info": {
    "commit_hash": "42e5db98b963ae503229c63e44e06e439df50e56",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/42e5db98b963ae503229c63e44e06e439df50e56",
    "files": [
      "CMakeLists.txt",
      "ci/test.sh",
      "docs/changelog.md",
      "include/git2/version.h",
      "package.json",
      "src/libgit2/transports/ssh.c",
      "tests/libgit2/CMakeLists.txt"
    ],
    "message": "Merge pull request #6450 from libgit2/1.5_ssh\n\nssh: perform host key checking by default",
    "before_after_code_files": [
      "ci/test.sh||ci/test.sh",
      "include/git2/version.h||include/git2/version.h",
      "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
    ]
  },
  "patch_diff": {
    "ci/test.sh||ci/test.sh": [
      "File: ci/test.sh -> ci/test.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:   echo \"[localhost]:2222 $algorithm $key\" >>\"${HOME}/.ssh/known_hosts\"",
      "145:  done <\"${SSHD_DIR}/id_rsa.pub\"",
      "147:  # Get the fingerprint for localhost and remove the colons so we can",
      "148:  # parse it as a hex number. Older versions have a different output",
      "149:  # format.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "147:  # Append the github.com keys for the tests that don't override checks.",
      "148:  # We ask for ssh-rsa to test that the selection based off of known_hosts",
      "149:  # is working.",
      "150:  ssh-keyscan -t ssh-rsa github.com >>\"${HOME}/.ssh/known_hosts\"",
      "",
      "---------------"
    ],
    "include/git2/version.h||include/git2/version.h": [
      "File: include/git2/version.h -> include/git2/version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #define LIBGIT2_VER_MAJOR      1",
      "",
      "[Removed Lines]",
      "14: #define LIBGIT2_VERSION        \"1.5.0\"",
      "",
      "[Added Lines]",
      "14: #define LIBGIT2_VERSION        \"1.5.1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: #define LIBGIT2_VER_MINOR      5",
      "26: #define LIBGIT2_VER_PATCH      0",
      "",
      "[Removed Lines]",
      "23: #define LIBGIT2_VER_REVISION   0",
      "",
      "[Added Lines]",
      "23: #define LIBGIT2_VER_REVISION   1",
      "",
      "---------------"
    ],
    "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c": [
      "File: src/libgit2/transports/ssh.c -> src/libgit2/transports/ssh.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "421:  return 0;",
      "422: }",
      "424: static int _git_ssh_session_create(",
      "425:  LIBSSH2_SESSION **session,",
      "426:  git_stream *io)",
      "427: {",
      "428:  int rc = 0;",
      "429:  LIBSSH2_SESSION *s;",
      "430:  git_socket_stream *socket = GIT_CONTAINER_OF(io, git_socket_stream, parent);",
      "432:  GIT_ASSERT_ARG(session);",
      "434:  s = libssh2_session_init();",
      "435:  if (!s) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "424: #define KNOWN_HOSTS_FILE \".ssh/known_hosts\"",
      "431: static int load_known_hosts(LIBSSH2_KNOWNHOSTS **hosts, LIBSSH2_SESSION *session)",
      "432: {",
      "433:  git_str path = GIT_STR_INIT, home = GIT_STR_INIT;",
      "434:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
      "435:  int error;",
      "437:  GIT_ASSERT_ARG(hosts);",
      "439:  if ((error = git__getenv(&home, \"HOME\")) < 0)",
      "440:   return error;",
      "442:  if ((error = git_str_joinpath(&path, git_str_cstr(&home), KNOWN_HOSTS_FILE)) < 0)",
      "443:   goto out;",
      "445:  if ((known_hosts = libssh2_knownhost_init(session)) == NULL) {",
      "446:   ssh_error(session, \"error initializing known hosts\");",
      "447:   error = -1;",
      "448:   goto out;",
      "449:  }",
      "455:  error = libssh2_knownhost_readfile(known_hosts, git_str_cstr(&path), LIBSSH2_KNOWNHOST_FILE_OPENSSH);",
      "456:  if (error == LIBSSH2_ERROR_FILE)",
      "457:   error = 0;",
      "458:  if (error < 0)",
      "459:   ssh_error(session, \"error reading known_hosts\");",
      "461: out:",
      "464:  git_str_clear(&home);",
      "465:  git_str_clear(&path);",
      "467:  return error;",
      "468: }",
      "470: static const char *hostkey_type_to_string(int type)",
      "471: {",
      "472:  switch (type) {",
      "473:  case LIBSSH2_KNOWNHOST_KEY_SSHRSA:",
      "474:   return \"ssh-rsa\";",
      "475:  case LIBSSH2_KNOWNHOST_KEY_SSHDSS:",
      "476:   return \"ssh-dss\";",
      "477: #ifdef LIBSSH2_KNOWNHOST_KEY_ECDSA_256",
      "478:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_256:",
      "479:   return \"ecdsa-sha2-nistp256\";",
      "480:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_384:",
      "481:   return \"ecdsa-sha2-nistp384\";",
      "482:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
      "483:   return \"ecdsa-sha2-nistp521\";",
      "484: #endif",
      "485: #ifdef LIBSSH2_KNOWNHOST_KEY_ED25519",
      "486:  case LIBSSH2_KNOWNHOST_KEY_ED25519:",
      "487:   return \"ssh-ed25519\";",
      "488: #endif",
      "489:  }",
      "491:  return NULL;",
      "492: }",
      "502: static const char *find_hostkey_preference(LIBSSH2_KNOWNHOSTS *known_hosts, const char *hostname, int port)",
      "503: {",
      "504:  struct libssh2_knownhost *host = NULL;",
      "506:  int type = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;",
      "507:  const char key = '\\0';",
      "508:  int error;",
      "515:  error = libssh2_knownhost_checkp(known_hosts, hostname, port, &key, 1, type, &host);",
      "516:  if (error == LIBSSH2_KNOWNHOST_CHECK_MISMATCH)",
      "517:   return hostkey_type_to_string(host->typemask & LIBSSH2_KNOWNHOST_KEY_MASK);",
      "519:  return NULL;",
      "520: }",
      "524:  LIBSSH2_KNOWNHOSTS **hosts,",
      "525:  const char *hostname,",
      "526:  int port,",
      "531:  LIBSSH2_KNOWNHOSTS *known_hosts;",
      "533:  const char *keytype = NULL;",
      "536:  GIT_ASSERT_ARG(hosts);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "437:   return -1;",
      "438:  }",
      "440:  do {",
      "441:   rc = libssh2_session_handshake(s, socket->s);",
      "442:  } while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);",
      "444:  if (rc != LIBSSH2_ERROR_NONE) {",
      "445:   ssh_error(s, \"failed to start SSH session\");",
      "448:  }",
      "450:  libssh2_session_set_blocking(s, 1);",
      "454:  return 0;",
      "455: }",
      "457: #define SSH_DEFAULT_PORT \"22\"",
      "",
      "[Removed Lines]",
      "446:   libssh2_session_free(s);",
      "447:   return -1;",
      "",
      "[Added Lines]",
      "544:  if ((rc = load_known_hosts(&known_hosts, s)) < 0) {",
      "545:   ssh_error(s, \"error loading known_hosts\");",
      "546:   libssh2_session_free(s);",
      "547:   return -1;",
      "548:  }",
      "550:  if ((keytype = find_hostkey_preference(known_hosts, hostname, port)) != NULL) {",
      "551:   do {",
      "552:    rc = libssh2_session_method_pref(s, LIBSSH2_METHOD_HOSTKEY, keytype);",
      "553:   } while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);",
      "554:   if (rc != LIBSSH2_ERROR_NONE) {",
      "555:    ssh_error(s, \"failed to set hostkey preference\");",
      "556:    goto on_error;",
      "557:   }",
      "558:  }",
      "567:   goto on_error;",
      "577: on_error:",
      "578:  libssh2_knownhost_free(known_hosts);",
      "579:  libssh2_session_free(s);",
      "580:  return -1;",
      "581: }",
      "588: static int fingerprint_type_mask(int keytype)",
      "589: {",
      "590:  int mask = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;",
      "591:  return mask;",
      "593:  switch (keytype) {",
      "594:  case LIBSSH2_HOSTKEY_TYPE_RSA:",
      "595:   mask |= LIBSSH2_KNOWNHOST_KEY_SSHRSA;",
      "596:   break;",
      "597:  case LIBSSH2_HOSTKEY_TYPE_DSS:",
      "598:   mask |= LIBSSH2_KNOWNHOST_KEY_SSHDSS;",
      "599:   break;",
      "600: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
      "601:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
      "602:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_256;",
      "603:   break;",
      "604:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
      "605:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_384;",
      "606:   break;",
      "607:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_521:",
      "608:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_521;",
      "609:   break;",
      "610: #endif",
      "611: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
      "612:  case LIBSSH2_HOSTKEY_TYPE_ED25519:",
      "613:   mask |= LIBSSH2_KNOWNHOST_KEY_ED25519;",
      "614:   break;",
      "615: #endif",
      "616:  }",
      "618:  return mask;",
      "619: }",
      "626: static int check_against_known_hosts(",
      "627:  LIBSSH2_SESSION *session,",
      "628:  LIBSSH2_KNOWNHOSTS *known_hosts,",
      "629:  const char *hostname,",
      "630:  int port,",
      "631:  const char *key,",
      "632:  size_t key_len,",
      "633:  int key_type)",
      "634: {",
      "635:  int check, typemask, ret = 0;",
      "636:  struct libssh2_knownhost *host = NULL;",
      "638:  if (known_hosts == NULL)",
      "639:   return 0;",
      "641:  typemask = fingerprint_type_mask(key_type);",
      "642:  check = libssh2_knownhost_checkp(known_hosts, hostname, port, key, key_len, typemask, &host);",
      "643:  if (check == LIBSSH2_KNOWNHOST_CHECK_FAILURE) {",
      "644:   ssh_error(session, \"error checking for known host\");",
      "645:   return -1;",
      "646:  }",
      "648:  ret = check == LIBSSH2_KNOWNHOST_CHECK_MATCH ? 1 : 0;",
      "650:  return ret;",
      "651: }",
      "659: static int check_certificate(",
      "660:  LIBSSH2_SESSION *session,",
      "661:  LIBSSH2_KNOWNHOSTS *known_hosts,",
      "662:  git_transport_certificate_check_cb check_cb,",
      "663:  void *check_cb_payload,",
      "664:  const char *host,",
      "665:  int port)",
      "666: {",
      "667:  git_cert_hostkey cert = {{ 0 }};",
      "668:  const char *key;",
      "669:  size_t cert_len;",
      "670:  int cert_type, cert_valid = 0, error = 0;",
      "672:  if ((key = libssh2_session_hostkey(session, &cert_len, &cert_type)) == NULL) {",
      "673:   ssh_error(session, \"failed to retrieve hostkey\");",
      "674:   return -1;",
      "675:  }",
      "677:  if ((cert_valid = check_against_known_hosts(session, known_hosts, host, port, key, cert_len, cert_type)) < 0)",
      "678:   return -1;",
      "680:  cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;",
      "681:  if (key != NULL) {",
      "682:   cert.type |= GIT_CERT_SSH_RAW;",
      "683:   cert.hostkey = key;",
      "684:   cert.hostkey_len = cert_len;",
      "685:   switch (cert_type) {",
      "686:   case LIBSSH2_HOSTKEY_TYPE_RSA:",
      "687:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;",
      "688:    break;",
      "689:   case LIBSSH2_HOSTKEY_TYPE_DSS:",
      "690:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;",
      "691:    break;",
      "693: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
      "694:   case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
      "695:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;",
      "696:    break;",
      "697:   case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
      "698:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;",
      "699:    break;",
      "700:   case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
      "701:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;",
      "702:    break;",
      "703: #endif",
      "705: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
      "706:   case LIBSSH2_HOSTKEY_TYPE_ED25519:",
      "707:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;",
      "708:    break;",
      "709: #endif",
      "710:   default:",
      "711:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;",
      "712:   }",
      "713:  }",
      "715: #ifdef LIBSSH2_HOSTKEY_HASH_SHA256",
      "716:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);",
      "717:  if (key != NULL) {",
      "718:   cert.type |= GIT_CERT_SSH_SHA256;",
      "719:   memcpy(&cert.hash_sha256, key, 32);",
      "720:  }",
      "721: #endif",
      "723:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);",
      "724:  if (key != NULL) {",
      "725:   cert.type |= GIT_CERT_SSH_SHA1;",
      "726:   memcpy(&cert.hash_sha1, key, 20);",
      "727:  }",
      "729:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);",
      "730:  if (key != NULL) {",
      "731:   cert.type |= GIT_CERT_SSH_MD5;",
      "732:   memcpy(&cert.hash_md5, key, 16);",
      "733:  }",
      "735:  if (cert.type == 0) {",
      "736:   git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");",
      "737:   return -1;",
      "738:  }",
      "740:  git_error_clear();",
      "741:  error = 0;",
      "742:  if (!cert_valid) {",
      "743:   git_error_set(GIT_ERROR_SSH, \"invalid or unknown remote ssh hostkey\");",
      "744:   error = GIT_ECERTIFICATE;",
      "745:  }",
      "747:  if (check_cb != NULL) {",
      "748:   git_cert_hostkey *cert_ptr = &cert;",
      "749:   git_error_state previous_error = {0};",
      "751:   git_error_state_capture(&previous_error, error);",
      "752:   error = check_cb((git_cert *) cert_ptr, cert_valid, host, check_cb_payload);",
      "753:   if (error == GIT_PASSTHROUGH) {",
      "754:    error = git_error_state_restore(&previous_error);",
      "755:   } else if (error < 0 && !git_error_last()) {",
      "756:    git_error_set(GIT_ERROR_NET, \"user canceled hostkey check\");",
      "757:   }",
      "759:   git_error_state_free(&previous_error);",
      "760:  }",
      "762:  return error;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:  const char *cmd,",
      "463:  git_smart_subtransport_stream **stream)",
      "464: {",
      "466:  ssh_stream *s;",
      "467:  git_credential *cred = NULL;",
      "468:  LIBSSH2_SESSION *session=NULL;",
      "469:  LIBSSH2_CHANNEL *channel=NULL;",
      "471:  t->current_stream = NULL;",
      "",
      "[Removed Lines]",
      "465:  int auth_methods, error = 0;",
      "",
      "[Added Lines]",
      "773:  int auth_methods, error = 0, port;",
      "778:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "490:      (error = git_stream_connect(s->io)) < 0)",
      "491:   goto done;",
      "585:  if (!s->url.username) {",
      "",
      "[Removed Lines]",
      "493:  if ((error = _git_ssh_session_create(&session, s->io)) < 0)",
      "494:   goto done;",
      "496:  if (t->owner->connect_opts.callbacks.certificate_check != NULL) {",
      "497:   git_cert_hostkey cert = {{ 0 }}, *cert_ptr;",
      "498:   const char *key;",
      "499:   size_t cert_len;",
      "500:   int cert_type;",
      "502:   cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;",
      "504:   key = libssh2_session_hostkey(session, &cert_len, &cert_type);",
      "505:   if (key != NULL) {",
      "506:    cert.type |= GIT_CERT_SSH_RAW;",
      "507:    cert.hostkey = key;",
      "508:    cert.hostkey_len = cert_len;",
      "509:    switch (cert_type) {",
      "510:     case LIBSSH2_HOSTKEY_TYPE_RSA:",
      "511:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;",
      "512:      break;",
      "513:     case LIBSSH2_HOSTKEY_TYPE_DSS:",
      "514:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;",
      "515:      break;",
      "517: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
      "518:     case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
      "519:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;",
      "520:      break;",
      "521:     case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
      "522:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;",
      "523:      break;",
      "524:     case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
      "525:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;",
      "526:      break;",
      "527: #endif",
      "529: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
      "530:     case LIBSSH2_HOSTKEY_TYPE_ED25519:",
      "531:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;",
      "532:      break;",
      "533: #endif",
      "534:     default:",
      "535:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;",
      "536:    }",
      "537:   }",
      "539: #ifdef LIBSSH2_HOSTKEY_HASH_SHA256",
      "540:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);",
      "541:   if (key != NULL) {",
      "542:    cert.type |= GIT_CERT_SSH_SHA256;",
      "543:    memcpy(&cert.hash_sha256, key, 32);",
      "544:   }",
      "545: #endif",
      "547:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);",
      "548:   if (key != NULL) {",
      "549:    cert.type |= GIT_CERT_SSH_SHA1;",
      "550:    memcpy(&cert.hash_sha1, key, 20);",
      "551:   }",
      "553:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);",
      "554:   if (key != NULL) {",
      "555:    cert.type |= GIT_CERT_SSH_MD5;",
      "556:    memcpy(&cert.hash_md5, key, 16);",
      "557:   }",
      "559:   if (cert.type == 0) {",
      "560:    git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");",
      "561:    error = -1;",
      "562:    goto done;",
      "563:   }",
      "566:   git_error_clear();",
      "568:   cert_ptr = &cert;",
      "570:   error = t->owner->connect_opts.callbacks.certificate_check(",
      "571:    (git_cert *)cert_ptr,",
      "572:    0,",
      "573:    s->url.host,",
      "574:    t->owner->connect_opts.callbacks.payload);",
      "576:   if (error < 0 && error != GIT_PASSTHROUGH) {",
      "577:    if (!git_error_last())",
      "578:     git_error_set(GIT_ERROR_NET, \"user cancelled hostkey check\");",
      "580:    goto done;",
      "581:   }",
      "582:  }",
      "",
      "[Added Lines]",
      "808:  if (git__strntol32(&port, s->url.port, strlen(s->url.port), NULL, 10) < 0)",
      "809:   port = -1;",
      "811:  if ((error = _git_ssh_session_create(&session, &known_hosts, s->url.host, port, s->io)) < 0)",
      "812:   goto done;",
      "814:  if ((error = check_certificate(session, known_hosts, t->owner->connect_opts.callbacks.certificate_check, t->owner->connect_opts.callbacks.payload, s->url.host, port)) < 0)",
      "815:   goto done;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "651:  if (error < 0) {",
      "652:   ssh_stream_free(*stream);",
      "654:   if (session)",
      "655:    libssh2_session_free(session);",
      "656:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "887:   if (known_hosts)",
      "888:    libssh2_knownhost_free(known_hosts);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e5b1498d08a46ba40b86ea822eddfcea7062fba",
      "candidate_info": {
        "commit_hash": "6e5b1498d08a46ba40b86ea822eddfcea7062fba",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/6e5b1498d08a46ba40b86ea822eddfcea7062fba",
        "files": [
          "ci/test.sh"
        ],
        "message": "tests: append the github.com ssh keys so we have access during tests\n\nCurrently just the one test needs it.\n\nThe ssh-rsa makes sure we're asking for the cipher we find in `known_hosts` as\nthat won't be the one selected by default. This will be relevant in later changes.",
        "before_after_code_files": [
          "ci/test.sh||ci/test.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/6450"
        ],
        "olp_code_files": {
          "patch": [
            "ci/test.sh||ci/test.sh"
          ],
          "candidate": [
            "ci/test.sh||ci/test.sh"
          ]
        }
      },
      "candidate_diff": {
        "ci/test.sh||ci/test.sh": [
          "File: ci/test.sh -> ci/test.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   echo \"[localhost]:2222 $algorithm $key\" >>\"${HOME}/.ssh/known_hosts\"",
          "145:  done <\"${SSHD_DIR}/id_rsa.pub\"",
          "147:  # Get the fingerprint for localhost and remove the colons so we can",
          "148:  # parse it as a hex number. Older versions have a different output",
          "149:  # format.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  # Append the github.com keys for the tests that don't override checks.",
          "148:  # We ask for ssh-rsa to test that the selection based off of known_hosts",
          "149:  # is working.",
          "150:  ssh-keyscan -t ssh-rsa github.com >>\"${HOME}/.ssh/known_hosts\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a4421ff333d8c21962b387c0457354f157193f1",
      "candidate_info": {
        "commit_hash": "6a4421ff333d8c21962b387c0457354f157193f1",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/6a4421ff333d8c21962b387c0457354f157193f1",
        "files": [
          "CMakeLists.txt",
          "include/git2/version.h",
          "package.json"
        ],
        "message": "meta: update version numbers to 1.5.1",
        "before_after_code_files": [
          "include/git2/version.h||include/git2/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/6450"
        ],
        "olp_code_files": {
          "patch": [
            "include/git2/version.h||include/git2/version.h"
          ],
          "candidate": [
            "include/git2/version.h||include/git2/version.h"
          ]
        }
      },
      "candidate_diff": {
        "include/git2/version.h||include/git2/version.h": [
          "File: include/git2/version.h -> include/git2/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define LIBGIT2_VER_MAJOR      1",
          "",
          "[Removed Lines]",
          "14: #define LIBGIT2_VERSION        \"1.5.0\"",
          "",
          "[Added Lines]",
          "14: #define LIBGIT2_VERSION        \"1.5.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: #define LIBGIT2_VER_MINOR      5",
          "26: #define LIBGIT2_VER_PATCH      0",
          "",
          "[Removed Lines]",
          "23: #define LIBGIT2_VER_REVISION   0",
          "",
          "[Added Lines]",
          "23: #define LIBGIT2_VER_REVISION   1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63212a929d939ecff6e0358bd69a4a14bc96f855",
      "candidate_info": {
        "commit_hash": "63212a929d939ecff6e0358bd69a4a14bc96f855",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/63212a929d939ecff6e0358bd69a4a14bc96f855",
        "files": [
          "src/libgit2/transports/ssh.c"
        ],
        "message": "ssh: look for a key in known_hosts to set the key type for the handshake\n\nThe server and client negotiate a single hostkey, but the \"best\" cipher may not\nbe the one for which we have an entry in `known_hosts`. This can lead to us not\nfinding the key in known_hosts even though we should be connecting.\n\nInstead here we look up the hostname with a nonsense key to perform a lookup in\nthe known hosts and set that. This is roughly what the OpenSSH client does as\nwell.",
        "before_after_code_files": [
          "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/6450"
        ],
        "olp_code_files": {
          "patch": [
            "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
          ],
          "candidate": [
            "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c": [
          "File: src/libgit2/transports/ssh.c -> src/libgit2/transports/ssh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:  return 0;",
          "422: }",
          "424: static int _git_ssh_session_create(",
          "425:  LIBSSH2_SESSION **session,",
          "426:  git_stream *io)",
          "427: {",
          "428:  int rc = 0;",
          "429:  LIBSSH2_SESSION *s;",
          "430:  git_socket_stream *socket = GIT_CONTAINER_OF(io, git_socket_stream, parent);",
          "432:  GIT_ASSERT_ARG(session);",
          "434:  s = libssh2_session_init();",
          "435:  if (!s) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424: #define KNOWN_HOSTS_FILE \".ssh/known_hosts\"",
          "431: static int load_known_hosts(LIBSSH2_KNOWNHOSTS **hosts, LIBSSH2_SESSION *session)",
          "432: {",
          "433:  git_str path = GIT_STR_INIT, home = GIT_STR_INIT;",
          "434:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
          "435:  int error;",
          "437:  GIT_ASSERT_ARG(hosts);",
          "439:  if ((error = git__getenv(&home, \"HOME\")) < 0)",
          "440:   return error;",
          "442:  if ((error = git_str_joinpath(&path, git_str_cstr(&home), KNOWN_HOSTS_FILE)) < 0)",
          "443:   goto out;",
          "445:  if ((known_hosts = libssh2_knownhost_init(session)) == NULL) {",
          "446:   ssh_error(session, \"error initializing known hosts\");",
          "447:   error = -1;",
          "448:   goto out;",
          "449:  }",
          "455:  error = libssh2_knownhost_readfile(known_hosts, git_str_cstr(&path), LIBSSH2_KNOWNHOST_FILE_OPENSSH);",
          "456:  if (error == LIBSSH2_ERROR_FILE)",
          "457:   error = 0;",
          "458:  if (error < 0)",
          "459:   ssh_error(session, \"error reading known_hosts\");",
          "461: out:",
          "464:  git_str_clear(&home);",
          "465:  git_str_clear(&path);",
          "467:  return error;",
          "468: }",
          "470: static const char *hostkey_type_to_string(int type)",
          "471: {",
          "472:  switch (type) {",
          "473:  case LIBSSH2_KNOWNHOST_KEY_SSHRSA:",
          "474:   return \"ssh-rsa\";",
          "475:  case LIBSSH2_KNOWNHOST_KEY_SSHDSS:",
          "476:   return \"ssh-dss\";",
          "477: #ifdef LIBSSH2_KNOWNHOST_KEY_ECDSA_256",
          "478:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_256:",
          "479:   return \"ecdsa-sha2-nistp256\";",
          "480:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_384:",
          "481:   return \"ecdsa-sha2-nistp384\";",
          "482:  case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
          "483:   return \"ecdsa-sha2-nistp521\";",
          "484: #endif",
          "485: #ifdef LIBSSH2_KNOWNHOST_KEY_ED25519",
          "486:  case LIBSSH2_KNOWNHOST_KEY_ED25519:",
          "487:   return \"ssh-ed25519\";",
          "488: #endif",
          "489:  }",
          "491:  return NULL;",
          "492: }",
          "502: static const char *find_hostkey_preference(LIBSSH2_KNOWNHOSTS *known_hosts, const char *hostname, int port)",
          "503: {",
          "504:  struct libssh2_knownhost *host = NULL;",
          "506:  int type = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;",
          "507:  const char key = '\\0';",
          "508:  int error;",
          "515:  error = libssh2_knownhost_checkp(known_hosts, hostname, port, &key, 1, type, &host);",
          "516:  if (error == LIBSSH2_KNOWNHOST_CHECK_MISMATCH)",
          "517:   return hostkey_type_to_string(host->typemask & LIBSSH2_KNOWNHOST_KEY_MASK);",
          "519:  return NULL;",
          "520: }",
          "524:  LIBSSH2_KNOWNHOSTS **hosts,",
          "525:  const char *hostname,",
          "526:  int port,",
          "531:  LIBSSH2_KNOWNHOSTS *known_hosts;",
          "533:  const char *keytype = NULL;",
          "536:  GIT_ASSERT_ARG(hosts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:   return -1;",
          "438:  }",
          "440:  do {",
          "441:   rc = libssh2_session_handshake(s, socket->s);",
          "442:  } while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);",
          "444:  if (rc != LIBSSH2_ERROR_NONE) {",
          "445:   ssh_error(s, \"failed to start SSH session\");",
          "448:  }",
          "450:  libssh2_session_set_blocking(s, 1);",
          "454:  return 0;",
          "455: }",
          "",
          "[Removed Lines]",
          "446:   libssh2_session_free(s);",
          "447:   return -1;",
          "",
          "[Added Lines]",
          "544:  if ((rc = load_known_hosts(&known_hosts, s)) < 0) {",
          "545:   ssh_error(s, \"error loading known_hosts\");",
          "546:   libssh2_session_free(s);",
          "547:   return -1;",
          "548:  }",
          "550:  if ((keytype = find_hostkey_preference(known_hosts, hostname, port)) != NULL) {",
          "551:   do {",
          "552:    rc = libssh2_session_method_pref(s, LIBSSH2_METHOD_HOSTKEY, keytype);",
          "553:   } while (LIBSSH2_ERROR_EAGAIN == rc || LIBSSH2_ERROR_TIMEOUT == rc);",
          "554:   if (rc != LIBSSH2_ERROR_NONE) {",
          "555:    ssh_error(s, \"failed to set hostkey preference\");",
          "556:    goto on_error;",
          "557:   }",
          "558:  }",
          "567:   goto on_error;",
          "577: on_error:",
          "578:  libssh2_knownhost_free(known_hosts);",
          "579:  libssh2_session_free(s);",
          "580:  return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:  return mask;",
          "492: }",
          "",
          "[Removed Lines]",
          "494: #define KNOWN_HOSTS_FILE \".ssh/known_hosts\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501: static int check_against_known_hosts(",
          "502:  LIBSSH2_SESSION *session,",
          "503:  const char *hostname,",
          "504:  int port,",
          "505:  const char *key,",
          "506:  size_t key_len,",
          "507:  int key_type)",
          "508: {",
          "512:  struct libssh2_knownhost *host = NULL;",
          "544:  typemask = fingerprint_type_mask(key_type);",
          "545:  check = libssh2_knownhost_checkp(known_hosts, hostname, port, key, key_len, typemask, &host);",
          "546:  if (check == LIBSSH2_KNOWNHOST_CHECK_FAILURE) {",
          "547:   ssh_error(session, \"error checking for known host\");",
          "550:  }",
          "552:  ret = check == LIBSSH2_KNOWNHOST_CHECK_MATCH ? 1 : 0;",
          "559:  return ret;",
          "560: }",
          "",
          "[Removed Lines]",
          "509:  int error, check, typemask, ret = 0;",
          "510:  git_str path = GIT_STR_INIT, home = GIT_STR_INIT;",
          "511:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
          "514:  if ((error = git__getenv(&home, \"HOME\")) < 0) {",
          "515:   return error;",
          "516:  }",
          "518:  if ((error = git_str_joinpath(&path, git_str_cstr(&home), KNOWN_HOSTS_FILE)) < 0) {",
          "519:   ret = error;",
          "520:   goto out;",
          "521:  }",
          "523:  if ((known_hosts = libssh2_knownhost_init(session)) == NULL) {",
          "524:   ssh_error(session, \"error initializing known hosts\");",
          "525:   ret = -1;",
          "526:   goto out;",
          "527:  }",
          "533:  error = libssh2_knownhost_readfile(known_hosts, git_str_cstr(&path), LIBSSH2_KNOWNHOST_FILE_OPENSSH);",
          "534:  if (error == LIBSSH2_ERROR_FILE) {",
          "535:   ret = 0;",
          "536:   goto out;",
          "537:  }",
          "538:  if (error < 0) {",
          "539:   ssh_error(session, \"error reading known_hosts\");",
          "540:   ret = -1;",
          "541:   goto out;",
          "542:  }",
          "548:   ret = -1;",
          "549:   goto out;",
          "554: out:",
          "555:  libssh2_knownhost_free(known_hosts);",
          "556:  git_str_clear(&path);",
          "557:  git_str_clear(&home);",
          "",
          "[Added Lines]",
          "628:  LIBSSH2_KNOWNHOSTS *known_hosts,",
          "635:  int check, typemask, ret = 0;",
          "638:  if (known_hosts == NULL)",
          "639:   return 0;",
          "645:   return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "568: static int check_certificate(",
          "569:  LIBSSH2_SESSION *session,",
          "570:  git_transport_certificate_check_cb check_cb,",
          "571:  void *check_cb_payload,",
          "572:  const char *host,",
          "574: {",
          "575:  git_cert_hostkey cert = {{ 0 }};",
          "576:  const char *key;",
          "577:  size_t cert_len;",
          "580:  if ((key = libssh2_session_hostkey(session, &cert_len, &cert_type)) == NULL) {",
          "581:   ssh_error(session, \"failed to retrieve hostkey\");",
          "582:   return -1;",
          "583:  }",
          "590:   return -1;",
          "592:  cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;",
          "",
          "[Removed Lines]",
          "573:  const char *portstr)",
          "578:  int cert_type, port, cert_valid = 0, error = 0;",
          "586:  if (git__strntol32(&port, portstr, strlen(portstr), NULL, 10) < 0)",
          "587:   port = -1;",
          "589:  if ((cert_valid = check_against_known_hosts(session, host, port, key, cert_len, cert_type)) < 0)",
          "",
          "[Added Lines]",
          "661:  LIBSSH2_KNOWNHOSTS *known_hosts,",
          "665:  int port)",
          "670:  int cert_type, cert_valid = 0, error = 0;",
          "677:  if ((cert_valid = check_against_known_hosts(session, known_hosts, host, port, key, cert_len, cert_type)) < 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "682:  const char *cmd,",
          "683:  git_smart_subtransport_stream **stream)",
          "684: {",
          "686:  ssh_stream *s;",
          "687:  git_credential *cred = NULL;",
          "688:  LIBSSH2_SESSION *session=NULL;",
          "689:  LIBSSH2_CHANNEL *channel=NULL;",
          "691:  t->current_stream = NULL;",
          "",
          "[Removed Lines]",
          "685:  int auth_methods, error = 0;",
          "",
          "[Added Lines]",
          "773:  int auth_methods, error = 0, port;",
          "778:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "710:      (error = git_stream_connect(s->io)) < 0)",
          "711:   goto done;",
          "714:   goto done;",
          "717:   goto done;",
          "",
          "[Removed Lines]",
          "713:  if ((error = _git_ssh_session_create(&session, s->io)) < 0)",
          "716:  if ((error = check_certificate(session, t->owner->connect_opts.callbacks.certificate_check, t->owner->connect_opts.callbacks.payload, s->url.host, s->url.port)) < 0)",
          "",
          "[Added Lines]",
          "808:  if (git__strntol32(&port, s->url.port, strlen(s->url.port), NULL, 10) < 0)",
          "809:   port = -1;",
          "811:  if ((error = _git_ssh_session_create(&session, &known_hosts, s->url.host, port, s->io)) < 0)",
          "814:  if ((error = check_certificate(session, known_hosts, t->owner->connect_opts.callbacks.certificate_check, t->owner->connect_opts.callbacks.payload, s->url.host, port)) < 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "786:  if (error < 0) {",
          "787:   ssh_stream_free(*stream);",
          "789:   if (session)",
          "790:    libssh2_session_free(session);",
          "791:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:   if (known_hosts)",
          "888:    libssh2_knownhost_free(known_hosts);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d63afcee71ef943a1fcd69c24f0562e9c8e429a",
      "candidate_info": {
        "commit_hash": "6d63afcee71ef943a1fcd69c24f0562e9c8e429a",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/6d63afcee71ef943a1fcd69c24f0562e9c8e429a",
        "files": [
          "src/libgit2/transports/ssh.c"
        ],
        "message": "ssh: verify the remote's host key against known_hosts if it exists\n\nIt turns out this has been available in libssh2 for a long time and we should\nhave been verifying this the whole time.",
        "before_after_code_files": [
          "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/6450"
        ],
        "olp_code_files": {
          "patch": [
            "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
          ],
          "candidate": [
            "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libgit2/transports/ssh.c||src/libgit2/transports/ssh.c": [
          "File: src/libgit2/transports/ssh.c -> src/libgit2/transports/ssh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:  return 0;",
          "455: }",
          "457: #define SSH_DEFAULT_PORT \"22\"",
          "459: static int _git_ssh_setup_conn(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461: static int fingerprint_type_mask(int keytype)",
          "462: {",
          "463:  int mask = LIBSSH2_KNOWNHOST_TYPE_PLAIN | LIBSSH2_KNOWNHOST_KEYENC_RAW;",
          "464:  return mask;",
          "466:  switch (keytype) {",
          "467:  case LIBSSH2_HOSTKEY_TYPE_RSA:",
          "468:   mask |= LIBSSH2_KNOWNHOST_KEY_SSHRSA;",
          "469:   break;",
          "470:  case LIBSSH2_HOSTKEY_TYPE_DSS:",
          "471:   mask |= LIBSSH2_KNOWNHOST_KEY_SSHDSS;",
          "472:   break;",
          "473: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
          "474:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
          "475:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_256;",
          "476:   break;",
          "477:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
          "478:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_384;",
          "479:   break;",
          "480:  case LIBSSH2_HOSTKEY_TYPE_ECDSA_521:",
          "481:   mask |= LIBSSH2_KNOWNHOST_KEY_ECDSA_521;",
          "482:   break;",
          "483: #endif",
          "484: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
          "485:  case LIBSSH2_HOSTKEY_TYPE_ED25519:",
          "486:   mask |= LIBSSH2_KNOWNHOST_KEY_ED25519;",
          "487:   break;",
          "488: #endif",
          "489:  }",
          "491:  return mask;",
          "492: }",
          "494: #define KNOWN_HOSTS_FILE \".ssh/known_hosts\"",
          "501: static int check_against_known_hosts(",
          "502:  LIBSSH2_SESSION *session,",
          "503:  const char *hostname,",
          "504:  int port,",
          "505:  const char *key,",
          "506:  size_t key_len,",
          "507:  int key_type)",
          "508: {",
          "509:  int error, check, typemask, ret = 0;",
          "510:  git_str path = GIT_STR_INIT, home = GIT_STR_INIT;",
          "511:  LIBSSH2_KNOWNHOSTS *known_hosts = NULL;",
          "512:  struct libssh2_knownhost *host = NULL;",
          "514:  if ((error = git__getenv(&home, \"HOME\")) < 0) {",
          "515:   return error;",
          "516:  }",
          "518:  if ((error = git_str_joinpath(&path, git_str_cstr(&home), KNOWN_HOSTS_FILE)) < 0) {",
          "519:   ret = error;",
          "520:   goto out;",
          "521:  }",
          "523:  if ((known_hosts = libssh2_knownhost_init(session)) == NULL) {",
          "524:   ssh_error(session, \"error initializing known hosts\");",
          "525:   ret = -1;",
          "526:   goto out;",
          "527:  }",
          "533:  error = libssh2_knownhost_readfile(known_hosts, git_str_cstr(&path), LIBSSH2_KNOWNHOST_FILE_OPENSSH);",
          "534:  if (error == LIBSSH2_ERROR_FILE) {",
          "535:   ret = 0;",
          "536:   goto out;",
          "537:  }",
          "538:  if (error < 0) {",
          "539:   ssh_error(session, \"error reading known_hosts\");",
          "540:   ret = -1;",
          "541:   goto out;",
          "542:  }",
          "544:  typemask = fingerprint_type_mask(key_type);",
          "545:  check = libssh2_knownhost_checkp(known_hosts, hostname, port, key, key_len, typemask, &host);",
          "546:  if (check == LIBSSH2_KNOWNHOST_CHECK_FAILURE) {",
          "547:   ssh_error(session, \"error checking for known host\");",
          "548:   ret = -1;",
          "549:   goto out;",
          "550:  }",
          "552:  ret = check == LIBSSH2_KNOWNHOST_CHECK_MATCH ? 1 : 0;",
          "554: out:",
          "555:  libssh2_knownhost_free(known_hosts);",
          "556:  git_str_clear(&path);",
          "557:  git_str_clear(&home);",
          "559:  return ret;",
          "560: }",
          "568: static int check_certificate(",
          "569:  LIBSSH2_SESSION *session,",
          "570:  git_transport_certificate_check_cb check_cb,",
          "571:  void *check_cb_payload,",
          "572:  const char *host,",
          "573:  const char *portstr)",
          "574: {",
          "575:  git_cert_hostkey cert = {{ 0 }};",
          "576:  const char *key;",
          "577:  size_t cert_len;",
          "578:  int cert_type, port, cert_valid = 0, error = 0;",
          "580:  if ((key = libssh2_session_hostkey(session, &cert_len, &cert_type)) == NULL) {",
          "581:   ssh_error(session, \"failed to retrieve hostkey\");",
          "582:   return -1;",
          "583:  }",
          "586:  if (git__strntol32(&port, portstr, strlen(portstr), NULL, 10) < 0)",
          "587:   port = -1;",
          "589:  if ((cert_valid = check_against_known_hosts(session, host, port, key, cert_len, cert_type)) < 0)",
          "590:   return -1;",
          "592:  cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;",
          "593:  if (key != NULL) {",
          "594:   cert.type |= GIT_CERT_SSH_RAW;",
          "595:   cert.hostkey = key;",
          "596:   cert.hostkey_len = cert_len;",
          "597:   switch (cert_type) {",
          "598:   case LIBSSH2_HOSTKEY_TYPE_RSA:",
          "599:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;",
          "600:    break;",
          "601:   case LIBSSH2_HOSTKEY_TYPE_DSS:",
          "602:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;",
          "603:    break;",
          "605: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
          "606:   case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
          "607:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;",
          "608:    break;",
          "609:   case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
          "610:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;",
          "611:    break;",
          "612:   case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
          "613:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;",
          "614:    break;",
          "615: #endif",
          "617: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
          "618:   case LIBSSH2_HOSTKEY_TYPE_ED25519:",
          "619:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;",
          "620:    break;",
          "621: #endif",
          "622:   default:",
          "623:    cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;",
          "624:   }",
          "625:  }",
          "627: #ifdef LIBSSH2_HOSTKEY_HASH_SHA256",
          "628:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);",
          "629:  if (key != NULL) {",
          "630:   cert.type |= GIT_CERT_SSH_SHA256;",
          "631:   memcpy(&cert.hash_sha256, key, 32);",
          "632:  }",
          "633: #endif",
          "635:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);",
          "636:  if (key != NULL) {",
          "637:   cert.type |= GIT_CERT_SSH_SHA1;",
          "638:   memcpy(&cert.hash_sha1, key, 20);",
          "639:  }",
          "641:  key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);",
          "642:  if (key != NULL) {",
          "643:   cert.type |= GIT_CERT_SSH_MD5;",
          "644:   memcpy(&cert.hash_md5, key, 16);",
          "645:  }",
          "647:  if (cert.type == 0) {",
          "648:   git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");",
          "649:   return -1;",
          "650:  }",
          "652:  git_error_clear();",
          "653:  error = 0;",
          "654:  if (!cert_valid) {",
          "655:   git_error_set(GIT_ERROR_SSH, \"invalid or unknown remote ssh hostkey\");",
          "656:   error = GIT_ECERTIFICATE;",
          "657:  }",
          "659:  if (check_cb != NULL) {",
          "660:   git_cert_hostkey *cert_ptr = &cert;",
          "661:   git_error_state previous_error = {0};",
          "663:   git_error_state_capture(&previous_error, error);",
          "664:   error = check_cb((git_cert *) cert_ptr, cert_valid, host, check_cb_payload);",
          "665:   if (error == GIT_PASSTHROUGH) {",
          "666:    error = git_error_state_restore(&previous_error);",
          "667:   } else if (error < 0 && !git_error_last()) {",
          "668:    git_error_set(GIT_ERROR_NET, \"user canceled hostkey check\");",
          "669:   }",
          "671:   git_error_state_free(&previous_error);",
          "672:  }",
          "674:  return error;",
          "675: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "493:  if ((error = _git_ssh_session_create(&session, s->io)) < 0)",
          "494:   goto done;",
          "585:  if (!s->url.username) {",
          "",
          "[Removed Lines]",
          "496:  if (t->owner->connect_opts.callbacks.certificate_check != NULL) {",
          "497:   git_cert_hostkey cert = {{ 0 }}, *cert_ptr;",
          "498:   const char *key;",
          "499:   size_t cert_len;",
          "500:   int cert_type;",
          "502:   cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;",
          "504:   key = libssh2_session_hostkey(session, &cert_len, &cert_type);",
          "505:   if (key != NULL) {",
          "506:    cert.type |= GIT_CERT_SSH_RAW;",
          "507:    cert.hostkey = key;",
          "508:    cert.hostkey_len = cert_len;",
          "509:    switch (cert_type) {",
          "510:     case LIBSSH2_HOSTKEY_TYPE_RSA:",
          "511:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;",
          "512:      break;",
          "513:     case LIBSSH2_HOSTKEY_TYPE_DSS:",
          "514:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;",
          "515:      break;",
          "517: #ifdef LIBSSH2_HOSTKEY_TYPE_ECDSA_256",
          "518:     case LIBSSH2_HOSTKEY_TYPE_ECDSA_256:",
          "519:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;",
          "520:      break;",
          "521:     case LIBSSH2_HOSTKEY_TYPE_ECDSA_384:",
          "522:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;",
          "523:      break;",
          "524:     case LIBSSH2_KNOWNHOST_KEY_ECDSA_521:",
          "525:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;",
          "526:      break;",
          "527: #endif",
          "529: #ifdef LIBSSH2_HOSTKEY_TYPE_ED25519",
          "530:     case LIBSSH2_HOSTKEY_TYPE_ED25519:",
          "531:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;",
          "532:      break;",
          "533: #endif",
          "534:     default:",
          "535:      cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;",
          "536:    }",
          "537:   }",
          "539: #ifdef LIBSSH2_HOSTKEY_HASH_SHA256",
          "540:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA256);",
          "541:   if (key != NULL) {",
          "542:    cert.type |= GIT_CERT_SSH_SHA256;",
          "543:    memcpy(&cert.hash_sha256, key, 32);",
          "544:   }",
          "545: #endif",
          "547:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);",
          "548:   if (key != NULL) {",
          "549:    cert.type |= GIT_CERT_SSH_SHA1;",
          "550:    memcpy(&cert.hash_sha1, key, 20);",
          "551:   }",
          "553:   key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);",
          "554:   if (key != NULL) {",
          "555:    cert.type |= GIT_CERT_SSH_MD5;",
          "556:    memcpy(&cert.hash_md5, key, 16);",
          "557:   }",
          "559:   if (cert.type == 0) {",
          "560:    git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");",
          "561:    error = -1;",
          "562:    goto done;",
          "563:   }",
          "566:   git_error_clear();",
          "568:   cert_ptr = &cert;",
          "570:   error = t->owner->connect_opts.callbacks.certificate_check(",
          "571:    (git_cert *)cert_ptr,",
          "572:    0,",
          "573:    s->url.host,",
          "574:    t->owner->connect_opts.callbacks.payload);",
          "576:   if (error < 0 && error != GIT_PASSTHROUGH) {",
          "577:    if (!git_error_last())",
          "578:     git_error_set(GIT_ERROR_NET, \"user cancelled hostkey check\");",
          "580:    goto done;",
          "581:   }",
          "582:  }",
          "",
          "[Added Lines]",
          "716:  if ((error = check_certificate(session, t->owner->connect_opts.callbacks.certificate_check, t->owner->connect_opts.callbacks.payload, s->url.host, s->url.port)) < 0)",
          "717:   goto done;",
          "",
          "---------------"
        ]
      }
    }
  ]
}