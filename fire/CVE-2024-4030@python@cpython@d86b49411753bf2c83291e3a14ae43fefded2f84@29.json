{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "c6680cdc5a7bfe7684af4dba981383cc80c889a8",
      "candidate_info": {
        "commit_hash": "c6680cdc5a7bfe7684af4dba981383cc80c889a8",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c6680cdc5a7bfe7684af4dba981383cc80c889a8",
        "files": [
          "Lib/test/test_typing.py",
          "Lib/typing.py",
          "Misc/NEWS.d/next/Library/2024-05-08-09-21-49.gh-issue-118772.c16E8X.rst"
        ],
        "message": "[3.13] gh-118772: Allow TypeVars without a default to follow those with a default when constructing aliases (GH-118774) (#118776)\n\n(cherry picked from commit aac6b019fe91e2f9f7a955d4fc4db5d5efd968c9)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_typing.py||Lib/test/test_typing.py",
          "Lib/typing.py||Lib/typing.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_typing.py||Lib/test/test_typing.py": [
          "File: Lib/test/test_typing.py -> Lib/test/test_typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:         with self.assertRaises(TypeError):",
          "669:             class Y(Generic[*Ts_default, T]): ...",
          "671:     def test_paramspec_specialization(self):",
          "672:         T = TypeVar(\"T\")",
          "673:         P = ParamSpec('P', default=[str, int])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:     def test_allow_default_after_non_default_in_alias(self):",
          "672:         T_default = TypeVar('T_default', default=int)",
          "673:         T = TypeVar('T')",
          "674:         Ts = TypeVarTuple('Ts')",
          "676:         a1 = Callable[[T_default], T]",
          "677:         self.assertEqual(a1.__args__, (T_default, T))",
          "679:         a2 = dict[T_default, T]",
          "680:         self.assertEqual(a2.__args__, (T_default, T))",
          "682:         a3 = typing.Dict[T_default, T]",
          "683:         self.assertEqual(a3.__args__, (T_default, T))",
          "685:         a4 = Callable[*Ts, T]",
          "686:         self.assertEqual(a4.__args__, (*Ts, T))",
          "",
          "---------------"
        ],
        "Lib/typing.py||Lib/typing.py": [
          "File: Lib/typing.py -> Lib/typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return repr(obj)",
          "261:     \"\"\"Collect all type variables and parameter specifications in args",
          "262:     in order of first appearance (lexicographic order).",
          "",
          "[Removed Lines]",
          "260: def _collect_parameters(args):",
          "",
          "[Added Lines]",
          "260: def _collect_parameters(args, *, enforce_default_ordering: bool = True):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:                         parameters.append(collected)",
          "287:         elif hasattr(t, '__typing_subst__'):",
          "288:             if t not in parameters:",
          "299:                 parameters.append(t)",
          "300:         else:",
          "",
          "[Removed Lines]",
          "289:                 if type_var_tuple_encountered and t.has_default():",
          "290:                     raise TypeError('Type parameter with a default'",
          "291:                                     ' follows TypeVarTuple')",
          "293:                 if t.has_default():",
          "294:                     default_encountered = True",
          "295:                 elif default_encountered:",
          "296:                     raise TypeError(f'Type parameter {t!r} without a default'",
          "297:                                     ' follows type parameter with a default')",
          "",
          "[Added Lines]",
          "289:                 if enforce_default_ordering:",
          "290:                     if type_var_tuple_encountered and t.has_default():",
          "291:                         raise TypeError('Type parameter with a default'",
          "292:                                         ' follows TypeVarTuple')",
          "294:                     if t.has_default():",
          "295:                         default_encountered = True",
          "296:                     elif default_encountered:",
          "297:                         raise TypeError(f'Type parameter {t!r} without a default'",
          "298:                                         ' follows type parameter with a default')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1416:             args = (args,)",
          "1417:         self.__args__ = tuple(... if a is _TypingEllipsis else",
          "1418:                               a for a in args)",
          "1420:         if not name:",
          "1421:             self.__module__ = origin.__module__",
          "",
          "[Removed Lines]",
          "1419:         self.__parameters__ = _collect_parameters(args)",
          "",
          "[Added Lines]",
          "1420:         enforce_default_ordering = origin in (Generic, Protocol)",
          "1421:         self.__parameters__ = _collect_parameters(",
          "1422:             args,",
          "1423:             enforce_default_ordering=enforce_default_ordering,",
          "1424:         )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "327a36a4f98466e734bf3b10994290fceab8fdd2",
      "candidate_info": {
        "commit_hash": "327a36a4f98466e734bf3b10994290fceab8fdd2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/327a36a4f98466e734bf3b10994290fceab8fdd2",
        "files": [
          "Objects/object.c"
        ],
        "message": "[3.13] gh-119999: Fix potential race condition in `_Py_ExplicitMergeRefcount` (GH-120000) (#120073)\n\nWe need to write to `ob_ref_local` and `ob_tid` before `ob_ref_shared`.\nOnce we mark `ob_ref_shared` as merged, some other thread may free the\nobject because the caller also passes in `-1` as `extra` to give up its\nonly reference.\n(cherry picked from commit 4055577221f5f52af329e87f31d81bb8fb02c504)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/object.c||Objects/object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/object.c||Objects/object.c": [
          "File: Objects/object.c -> Objects/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401: _Py_ExplicitMergeRefcount(PyObject *op, Py_ssize_t extra)",
          "402: {",
          "403:     assert(!_Py_IsImmortal(op));",
          "404:     Py_ssize_t refcnt;",
          "405:     Py_ssize_t new_shared;",
          "406:     Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&op->ob_ref_shared);",
          "407:     do {",
          "408:         refcnt = Py_ARITHMETIC_RIGHT_SHIFT(Py_ssize_t, shared, _Py_REF_SHARED_SHIFT);",
          "410:         refcnt += extra;",
          "412:         new_shared = _Py_REF_SHARED(refcnt, _Py_REF_MERGED);",
          "413:     } while (!_Py_atomic_compare_exchange_ssize(&op->ob_ref_shared,",
          "414:                                                 &shared, new_shared));",
          "422:     return refcnt;",
          "423: }",
          "",
          "[Removed Lines]",
          "409:         refcnt += (Py_ssize_t)op->ob_ref_local;",
          "416: #ifdef Py_REF_DEBUG",
          "417:     _Py_AddRefTotal(_PyThreadState_GET(), extra);",
          "418: #endif",
          "420:     _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, 0);",
          "421:     _Py_atomic_store_uintptr_relaxed(&op->ob_tid, 0);",
          "",
          "[Added Lines]",
          "405: #ifdef Py_REF_DEBUG",
          "406:     _Py_AddRefTotal(_PyThreadState_GET(), extra);",
          "407: #endif",
          "410:     Py_ssize_t local = (Py_ssize_t)op->ob_ref_local;",
          "411:     _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, 0);",
          "412:     _Py_atomic_store_uintptr_relaxed(&op->ob_tid, 0);",
          "419:         refcnt += local;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15c3d0013d5e653c63171dc5daa533ed45ba811f",
      "candidate_info": {
        "commit_hash": "15c3d0013d5e653c63171dc5daa533ed45ba811f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/15c3d0013d5e653c63171dc5daa533ed45ba811f",
        "files": [
          "Lib/test/datetimetester.py",
          "Lib/test/support/__init__.py",
          "Modules/_testcapi/datetime.c"
        ],
        "message": "[3.13] gh-117398: Add datetime C-API type check test for subinterpreters (gh-120463)\n\nCheck if the DateTime C-API type matches the datetime.date type on main and shared/isolated subinterpreters.\n\n(cherry picked from commit 50a389565aa0b480792ed06a2ab56fb5a72fc2d8, AKA gh-119604)\n\nCo-authored-by: neonene <53406459+neonene@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Lib/test/support/__init__.py||Lib/test/support/__init__.py",
          "Modules/_testcapi/datetime.c||Modules/_testcapi/datetime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import re",
          "14: import struct",
          "15: import sys",
          "16: import unittest",
          "17: import warnings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import textwrap",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     import _testcapi",
          "39: except ImportError:",
          "40:     _testcapi = None",
          "42: # Needed by test_datetime",
          "43: import _strptime",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: try:",
          "43:     import _interpreters",
          "44: except ModuleNotFoundError:",
          "45:     _interpreters = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6799:                     self.assertEqual(dt_orig, dt_rt)",
          "6802: def load_tests(loader, standard_tests, pattern):",
          "6803:     standard_tests.addTest(ZoneInfoCompleteTest())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6806:     def test_type_check_in_subinterp(self):",
          "6807:         script = textwrap.dedent(f\"\"\"",
          "6808:             if {_interpreters is None}:",
          "6809:                 import _testcapi as module",
          "6810:                 module.test_datetime_capi()",
          "6811:             else:",
          "6812:                 import importlib.machinery",
          "6813:                 import importlib.util",
          "6814:                 fullname = '_testcapi_datetime'",
          "6815:                 origin = importlib.util.find_spec('_testcapi').origin",
          "6816:                 loader = importlib.machinery.ExtensionFileLoader(fullname, origin)",
          "6817:                 spec = importlib.util.spec_from_loader(fullname, loader)",
          "6818:                 module = importlib.util.module_from_spec(spec)",
          "6819:                 spec.loader.exec_module(module)",
          "6821:             def run(type_checker, obj):",
          "6822:                 if not type_checker(obj, True):",
          "6823:                     raise TypeError(f'{{type(obj)}} is not C API type')",
          "6825:             import _datetime",
          "6826:             run(module.datetime_check_date,     _datetime.date.today())",
          "6827:             run(module.datetime_check_datetime, _datetime.datetime.now())",
          "6828:             run(module.datetime_check_time,     _datetime.time(12, 30))",
          "6829:             run(module.datetime_check_delta,    _datetime.timedelta(1))",
          "6830:             run(module.datetime_check_tzinfo,   _datetime.tzinfo())",
          "6831:         \"\"\")",
          "6832:         if _interpreters is None:",
          "6833:             ret = support.run_in_subinterp(script)",
          "6834:             self.assertEqual(ret, 0)",
          "6835:         else:",
          "6836:             for name in ('isolated', 'legacy'):",
          "6837:                 with self.subTest(name):",
          "6838:                     config = _interpreters.new_config(name).__dict__",
          "6839:                     ret = support.run_in_subinterp_with_config(script, **config)",
          "6840:                     self.assertEqual(ret, 0)",
          "",
          "---------------"
        ],
        "Lib/test/support/__init__.py||Lib/test/support/__init__.py": [
          "File: Lib/test/support/__init__.py -> Lib/test/support/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788:             config['gil'] = 'shared'",
          "1789:         elif gil == 2:",
          "1790:             config['gil'] = 'own'",
          "1792:             raise NotImplementedError(gil)",
          "1793:     config = types.SimpleNamespace(**config)",
          "1794:     return _testinternalcapi.run_in_subinterp_with_config(code, config)",
          "",
          "[Removed Lines]",
          "1791:         else:",
          "",
          "[Added Lines]",
          "1791:         elif not isinstance(gil, str):",
          "",
          "---------------"
        ],
        "Modules/_testcapi/datetime.c||Modules/_testcapi/datetime.c": [
          "File: Modules/_testcapi/datetime.c -> Modules/_testcapi/datetime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     test_run_counter++;",
          "23:     PyDateTime_IMPORT;",
          "27:     }",
          "29: }",
          "",
          "[Removed Lines]",
          "25:     if (PyDateTimeAPI) {",
          "26:         Py_RETURN_NONE;",
          "28:     return NULL;",
          "",
          "[Added Lines]",
          "25:     if (PyDateTimeAPI == NULL) {",
          "26:         return NULL;",
          "30:     assert(!PyType_HasFeature(PyDateTimeAPI->DateType, Py_TPFLAGS_HEAPTYPE));",
          "31:     assert(!PyType_HasFeature(PyDateTimeAPI->TimeType, Py_TPFLAGS_HEAPTYPE));",
          "32:     assert(!PyType_HasFeature(PyDateTimeAPI->DateTimeType, Py_TPFLAGS_HEAPTYPE));",
          "33:     assert(!PyType_HasFeature(PyDateTimeAPI->DeltaType, Py_TPFLAGS_HEAPTYPE));",
          "34:     assert(!PyType_HasFeature(PyDateTimeAPI->TZInfoType, Py_TPFLAGS_HEAPTYPE));",
          "35:     Py_RETURN_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "479:     }",
          "480:     return 0;",
          "481: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495: static int",
          "496: _testcapi_datetime_exec(PyObject *mod)",
          "497: {",
          "498:     if (test_datetime_capi(NULL, NULL) == NULL)  {",
          "499:         return -1;",
          "500:     }",
          "501:     return 0;",
          "502: }",
          "504: static PyModuleDef_Slot _testcapi_datetime_slots[] = {",
          "505:     {Py_mod_exec, _testcapi_datetime_exec},",
          "506:     {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},",
          "507:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "508:     {0, NULL},",
          "509: };",
          "511: static struct PyModuleDef _testcapi_datetime_module = {",
          "512:     PyModuleDef_HEAD_INIT,",
          "513:     .m_name = \"_testcapi_datetime\",",
          "514:     .m_size = 0,",
          "515:     .m_methods = test_methods,",
          "516:     .m_slots = _testcapi_datetime_slots,",
          "517: };",
          "519: PyMODINIT_FUNC",
          "520: PyInit__testcapi_datetime(void)",
          "521: {",
          "522:     return PyModuleDef_Init(&_testcapi_datetime_module);",
          "523: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd9983cab89cc42eecdbb4556cca0b6d7a7c529c",
      "candidate_info": {
        "commit_hash": "bd9983cab89cc42eecdbb4556cca0b6d7a7c529c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bd9983cab89cc42eecdbb4556cca0b6d7a7c529c",
        "files": [
          "Lib/test/test_import/__init__.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-12-52-25.gh-issue-119560.wSlm8q.rst",
          "Modules/_testsinglephase.c",
          "Python/import.c"
        ],
        "message": "[3.13] gh-119560: Drop an Invalid Assert in PyState_FindModule() (gh-119561) (gh-119632)\n\nThe assertion was added in gh-118532 but was based on the invalid assumption that PyState_FindModule() would only be called with an already-initialized module def.  I've added a test to make sure we don't make that assumption again.\n\n(cherry picked from commit 0c5ebe13e9937c446e9947c44f2570737ecca135)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_import/__init__.py||Lib/test/test_import/__init__.py",
          "Modules/_testsinglephase.c||Modules/_testsinglephase.c",
          "Python/import.c||Python/import.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_import/__init__.py||Lib/test/test_import/__init__.py": [
          "File: Lib/test/test_import/__init__.py -> Lib/test/test_import/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2888:                 self.assertIs(reloaded.snapshot.cached, reloaded.module)",
          "2890:     # Currently, for every single-phrase init module loaded",
          "2891:     # in multiple interpreters, those interpreters share a",
          "2892:     # PyModuleDef for that object, which can be a problem.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2890:     def test_check_state_first(self):",
          "2891:         for variant in ['', '_with_reinit', '_with_state']:",
          "2892:             name = f'{self.NAME}{variant}_check_cache_first'",
          "2893:             with self.subTest(name):",
          "2894:                 mod = self._load_dynamic(name, self.ORIGIN)",
          "2895:                 self.assertEqual(mod.__name__, name)",
          "",
          "---------------"
        ],
        "Modules/_testsinglephase.c||Modules/_testsinglephase.c": [
          "File: Modules/_testsinglephase.c -> Modules/_testsinglephase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: and its own init function (PyInit_...).  The default import system will",
          "6: only find the one matching the filename: _testsinglephase.  To load the",
          "7: others you must do so manually.  For example:",
          "",
          "[Removed Lines]",
          "4: This file contains 5 distinct modules, meaning each as its own name",
          "",
          "[Added Lines]",
          "4: This file contains 8 distinct modules, meaning each as its own name",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: mod = importlib._bootstrap._load(spec)",
          "15: ```",
          "",
          "[Removed Lines]",
          "17: Here are the 5 modules:",
          "",
          "[Added Lines]",
          "17: Here are the 8 modules:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650: finally:",
          "651:     return module;",
          "652: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685: static struct PyModuleDef _testsinglephase_check_cache_first = {",
          "686:     PyModuleDef_HEAD_INIT,",
          "687:     .m_name = \"_testsinglephase_check_cache_first\",",
          "688:     .m_doc = PyDoc_STR(\"Test module _testsinglephase_check_cache_first\"),",
          "689:     .m_size = -1,  // no module state",
          "690: };",
          "692: PyMODINIT_FUNC",
          "693: PyInit__testsinglephase_check_cache_first(void)",
          "694: {",
          "695:     assert(_testsinglephase_check_cache_first.m_base.m_index == 0);",
          "696:     PyObject *mod = PyState_FindModule(&_testsinglephase_check_cache_first);",
          "697:     if (mod != NULL) {",
          "698:         return Py_NewRef(mod);",
          "699:     }",
          "700:     return PyModule_Create(&_testsinglephase_check_cache_first);",
          "701: }",
          "704: static struct PyModuleDef _testsinglephase_with_reinit_check_cache_first = {",
          "705:     PyModuleDef_HEAD_INIT,",
          "706:     .m_name = \"_testsinglephase_with_reinit_check_cache_first\",",
          "707:     .m_doc = PyDoc_STR(\"Test module _testsinglephase_with_reinit_check_cache_first\"),",
          "708:     .m_size = 0,  // no module state",
          "709: };",
          "711: PyMODINIT_FUNC",
          "712: PyInit__testsinglephase_with_reinit_check_cache_first(void)",
          "713: {",
          "714:     assert(_testsinglephase_with_reinit_check_cache_first.m_base.m_index == 0);",
          "715:     PyObject *mod = PyState_FindModule(&_testsinglephase_with_reinit_check_cache_first);",
          "716:     if (mod != NULL) {",
          "717:         return Py_NewRef(mod);",
          "718:     }",
          "719:     return PyModule_Create(&_testsinglephase_with_reinit_check_cache_first);",
          "720: }",
          "723: static struct PyModuleDef _testsinglephase_with_state_check_cache_first = {",
          "724:     PyModuleDef_HEAD_INIT,",
          "725:     .m_name = \"_testsinglephase_with_state_check_cache_first\",",
          "726:     .m_doc = PyDoc_STR(\"Test module _testsinglephase_with_state_check_cache_first\"),",
          "727:     .m_size = 42,  // not used",
          "728: };",
          "730: PyMODINIT_FUNC",
          "731: PyInit__testsinglephase_with_state_check_cache_first(void)",
          "732: {",
          "733:     assert(_testsinglephase_with_state_check_cache_first.m_base.m_index == 0);",
          "734:     PyObject *mod = PyState_FindModule(&_testsinglephase_with_state_check_cache_first);",
          "735:     if (mod != NULL) {",
          "736:         return Py_NewRef(mod);",
          "737:     }",
          "738:     return PyModule_Create(&_testsinglephase_with_state_check_cache_first);",
          "739: }",
          "",
          "---------------"
        ],
        "Python/import.c||Python/import.c": [
          "File: Python/import.c -> Python/import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457: _get_module_index_from_def(PyModuleDef *def)",
          "458: {",
          "459:     Py_ssize_t index = def->m_base.m_index;",
          "461: #ifndef NDEBUG",
          "462:     struct extensions_cache_value *cached = _find_cached_def(def);",
          "463:     assert(cached == NULL || index == _get_cached_module_index(cached));",
          "",
          "[Removed Lines]",
          "460:     assert(index > 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: static const char *",
          "490: _modules_by_index_check(PyInterpreterState *interp, Py_ssize_t index)",
          "491: {",
          "493:         return \"invalid module index\";",
          "494:     }",
          "495:     if (MODULES_BY_INDEX(interp) == NULL) {",
          "",
          "[Removed Lines]",
          "492:     if (index == 0) {",
          "",
          "[Added Lines]",
          "491:     if (index <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7993268beb9442c063d142860135bd5d84c2946e",
      "candidate_info": {
        "commit_hash": "7993268beb9442c063d142860135bd5d84c2946e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7993268beb9442c063d142860135bd5d84c2946e",
        "files": [
          "Misc/NEWS.d/next/Build/2024-06-09-15-54-22.gh-issue-120291.IpfHzE.rst",
          "Misc/python-config.sh.in"
        ],
        "message": "[3.13] gh-120291: Fix a bashism in python-config.sh.in (GH-120292) (#120341)\n\ngh-120291: Fix a bashism in python-config.sh.in (GH-120292)\n\ngh-120291: Fix bashisms in python-config.sh.in\n\nReplace the use of bash-specific `[[ ... ]]` with POSIX-compliant\n`[ ... ]` to make the `python-config` shell script work with non-bash\nshells again.  While at it, use `local` in a safer way, since it is\nnot in POSIX either (though universally supported).\n\nFixes GH-120291\n(cherry picked from commit 7d2447137e117ea9a6ee1493bce0b071c76b1bd7)\n\nCo-authored-by: Micha\u0142 G\u00f3rny <mgorny@gentoo.org>",
        "before_after_code_files": [
          "Misc/python-config.sh.in||Misc/python-config.sh.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Misc/python-config.sh.in||Misc/python-config.sh.in": [
          "File: Misc/python-config.sh.in -> Misc/python-config.sh.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: exit_with_usage ()",
          "6: {",
          "10:     else",
          "12:     fi",
          "13:     exit $1",
          "14: }",
          "",
          "[Removed Lines]",
          "7:     local USAGE=\"Usage: $0 --prefix|--exec-prefix|--includes|--libs|--cflags|--ldflags|--extension-suffix|--help|--abiflags|--configdir|--embed\"",
          "8:     if [[ \"$1\" -eq 0 ]]; then",
          "9:         echo \"$USAGE\"",
          "11:         echo \"$USAGE\" >&2",
          "",
          "[Added Lines]",
          "7:     local usage",
          "8:     usage=\"Usage: $0 --prefix|--exec-prefix|--includes|--libs|--cflags|--ldflags|--extension-suffix|--help|--abiflags|--configdir|--embed\"",
          "9:     if [ \"$1\" -eq 0 ]; then",
          "10:         echo \"$usage\"",
          "12:         echo \"$usage\" >&2",
          "",
          "---------------"
        ]
      }
    }
  ]
}