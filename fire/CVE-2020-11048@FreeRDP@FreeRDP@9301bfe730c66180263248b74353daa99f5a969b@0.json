{
  "cve_id": "CVE-2020-11048",
  "cve_desc": "In FreeRDP after 1.0 and before 2.0.0, there is an out-of-bounds read. It only allows to abort a session. No data extraction is possible. This has been fixed in 2.0.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "9301bfe730c66180263248b74353daa99f5a969b",
  "patch_info": {
    "commit_hash": "9301bfe730c66180263248b74353daa99f5a969b",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9301bfe730c66180263248b74353daa99f5a969b",
    "files": [
      "libfreerdp/core/rdp.c"
    ],
    "message": "Fixed #6007: Boundary checks in rdp_read_flow_control_pdu",
    "before_after_code_files": [
      "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
      "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103: };",
      "106: static void rdp_write_share_control_header(wStream* s, UINT16 length, UINT16 type,",
      "107:                                            UINT16 channel_id);",
      "108: static void rdp_write_share_data_header(wStream* s, UINT16 length, BYTE type, UINT32 share_id);",
      "",
      "[Removed Lines]",
      "105: static void rdp_read_flow_control_pdu(wStream* s, UINT16* type);",
      "",
      "[Added Lines]",
      "105: static BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146: BOOL rdp_read_share_control_header(wStream* s, UINT16* length, UINT16* type, UINT16* channel_id)",
      "147: {",
      "148:  if (Stream_GetRemainingLength(s) < 2)",
      "149:   return FALSE;",
      "157:  {",
      "161:   return TRUE;",
      "162:  }",
      "165:   return FALSE;",
      "172:  else",
      "",
      "[Removed Lines]",
      "156:  if (*length == 0x8000)",
      "158:   rdp_read_flow_control_pdu(s, type);",
      "164:  if (((size_t)*length - 2) > Stream_GetRemainingLength(s))",
      "170:  if (*length > 4)",
      "",
      "[Added Lines]",
      "148:  UINT16 len;",
      "159:  if (len == 0x8000)",
      "161:   if (!rdp_read_flow_control_pdu(s, type))",
      "162:    return FALSE;",
      "168:  if ((len < 4) || ((len - 2) > Stream_GetRemainingLength(s)))",
      "174:  if (len > 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1116:  }",
      "1117: }",
      "1120: {",
      "",
      "[Removed Lines]",
      "1119: void rdp_read_flow_control_pdu(wStream* s, UINT16* type)",
      "",
      "[Added Lines]",
      "1123: BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1128:  UINT8 pduType;",
      "1135: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1133:  if (!type)",
      "1134:   return FALSE;",
      "1135:  if (Stream_GetRemainingLength(s) < 6)",
      "1136:   return FALSE;",
      "1143:  return TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5e73cc7c9cd973b516a618da877c87b80950b65",
      "candidate_info": {
        "commit_hash": "f5e73cc7c9cd973b516a618da877c87b80950b65",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f5e73cc7c9cd973b516a618da877c87b80950b65",
        "files": [
          "libfreerdp/core/autodetect.c"
        ],
        "message": "Fixed #6009: Bounds checks in autodetect_recv_bandwidth_measure_results",
        "before_after_code_files": [
          "libfreerdp/core/autodetect.c||libfreerdp/core/autodetect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/autodetect.c||libfreerdp/core/autodetect.c": [
          "File: libfreerdp/core/autodetect.c -> libfreerdp/core/autodetect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   return FALSE;",
          "467:  WLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Results PDU\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:  if (Stream_GetRemainingLength(s) < 8)",
          "469:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddfd0cdccfa927b328a9955c6144e0a355e38af5",
      "candidate_info": {
        "commit_hash": "ddfd0cdccfa927b328a9955c6144e0a355e38af5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ddfd0cdccfa927b328a9955c6144e0a355e38af5",
        "files": [
          "libfreerdp/core/gcc.c"
        ],
        "message": "Use substreams to parse gcc_read_server_data_blocks",
        "before_after_code_files": [
          "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c": [
          "File: libfreerdp/core/gcc.c -> libfreerdp/core/gcc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  while (offset < length)",
          "521:  {",
          "524:   if (!gcc_read_user_data_header(s, &type, &blockLength))",
          "525:   {",
          "526:    WLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_user_data_header failed\");",
          "527:    return FALSE;",
          "528:   }",
          "530:   switch (type)",
          "531:   {",
          "532:    case SC_CORE:",
          "534:     {",
          "535:      WLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_server_core_data failed\");",
          "536:      return FALSE;",
          "",
          "[Removed Lines]",
          "522:   holdp = Stream_Pointer(s);",
          "533:     if (!gcc_read_server_core_data(s, mcs))",
          "",
          "[Added Lines]",
          "522:   size_t rest;",
          "523:   wStream sub;",
          "530:   holdp = Stream_Pointer(s);",
          "531:   Stream_StaticInit(&sub, holdp, blockLength - 4);",
          "532:   if (!Stream_SafeSeek(s, blockLength - 4))",
          "533:   {",
          "534:    WLog_ERR(TAG, \"gcc_read_server_data_blocks: stream too short\");",
          "535:    return FALSE;",
          "536:   }",
          "537:   offset += blockLength;",
          "542:     if (!gcc_read_server_core_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:     break;",
          "541:    case SC_SECURITY:",
          "543:     {",
          "544:      WLog_ERR(TAG,",
          "545:               \"gcc_read_server_data_blocks: gcc_read_server_security_data failed\");",
          "",
          "[Removed Lines]",
          "542:     if (!gcc_read_server_security_data(s, mcs))",
          "",
          "[Added Lines]",
          "551:     if (!gcc_read_server_security_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "549:     break;",
          "551:    case SC_NET:",
          "553:     {",
          "554:      WLog_ERR(TAG,",
          "555:               \"gcc_read_server_data_blocks: gcc_read_server_network_data failed\");",
          "",
          "[Removed Lines]",
          "552:     if (!gcc_read_server_network_data(s, mcs))",
          "",
          "[Added Lines]",
          "561:     if (!gcc_read_server_network_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:     break;",
          "561:    case SC_MCS_MSGCHANNEL:",
          "563:     {",
          "564:      WLog_ERR(",
          "565:          TAG,",
          "",
          "[Removed Lines]",
          "562:     if (!gcc_read_server_message_channel_data(s, mcs))",
          "",
          "[Added Lines]",
          "571:     if (!gcc_read_server_message_channel_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "570:     break;",
          "572:    case SC_MULTITRANSPORT:",
          "574:     {",
          "575:      WLog_ERR(TAG, \"gcc_read_server_data_blocks: \"",
          "576:                    \"gcc_read_server_multitransport_channel_data failed\");",
          "",
          "[Removed Lines]",
          "573:     if (!gcc_read_server_multitransport_channel_data(s, mcs))",
          "",
          "[Added Lines]",
          "582:     if (!gcc_read_server_multitransport_channel_data(&sub, mcs))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "584:     break;",
          "585:   }",
          "589:  }",
          "591:  return TRUE;",
          "",
          "[Removed Lines]",
          "587:   offset += blockLength;",
          "588:   Stream_SetPointer(s, holdp + blockLength);",
          "",
          "[Added Lines]",
          "596:   rest = Stream_GetRemainingLength(&sub);",
          "597:   if (rest > 0)",
          "598:   {",
          "599:    WLog_WARN(",
          "600:        TAG, \"gcc_read_server_data_blocks: ignoring %\" PRIuz \" bytes with type=%\" PRIu16 \"\",",
          "601:        rest, type);",
          "602:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "614:   return FALSE;",
          "616:  return TRUE;",
          "",
          "[Removed Lines]",
          "613:  if (Stream_GetRemainingLength(s) < (size_t)(*length - 4))",
          "",
          "[Added Lines]",
          "627:  if ((*length < 4) || (Stream_GetRemainingLength(s) < (size_t)(*length - 4)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a022958ddfe03e432c3f705e04d9c576e94af0c8",
      "candidate_info": {
        "commit_hash": "a022958ddfe03e432c3f705e04d9c576e94af0c8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a022958ddfe03e432c3f705e04d9c576e94af0c8",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Better error message for partial parsed capability",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3553:   rest = Stream_GetRemainingLength(&sub);",
          "3554:   if (rest > 0)",
          "3555:   {",
          "3559:   }",
          "3561:   numberCapabilities--;",
          "",
          "[Removed Lines]",
          "3556:    WLog_ERR(TAG,",
          "3557:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",",
          "3558:             type, length + rest, length);",
          "",
          "[Added Lines]",
          "3556:    WLog_WARN(TAG,",
          "3557:              \"incorrect capability offset, type:0x%04\" PRIX16 \" %\" PRIu16",
          "3558:              \" bytes expected, %\" PRIuz \"bytes remaining\",",
          "3559:              type, length, rest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0533c05be3073fb885d98b1bed6506d3311fa5e1",
      "candidate_info": {
        "commit_hash": "0533c05be3073fb885d98b1bed6506d3311fa5e1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0533c05be3073fb885d98b1bed6506d3311fa5e1",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Fixed rdp_recv_tpkt_pdu parsing, use substream.",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ],
          "candidate": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:  {",
          "1329:   while (Stream_GetRemainingLength(s) > 3)",
          "1330:   {",
          "1331:    size_t startheader, endheader, start, end, diff, headerdiff;",
          "1333:    startheader = Stream_GetPosition(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1331:    wStream sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1347:     return -1;",
          "1348:    }",
          "1349:    pduLength -= headerdiff;",
          "1351:    rdp->settings->PduSource = pduSource;",
          "1352:    rdp->inPackets++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1351:    Stream_StaticInit(&sub, Stream_Pointer(s), pduLength);",
          "1352:    if (!Stream_SafeSeek(s, pduLength))",
          "1353:     return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1354:    switch (pduType)",
          "1355:    {",
          "1356:     case PDU_TYPE_DATA:",
          "1358:      if (rc < 0)",
          "1359:       return rc;",
          "1360:      break;",
          "1362:     case PDU_TYPE_DEACTIVATE_ALL:",
          "1364:      {",
          "1365:       WLog_ERR(TAG, \"rdp_recv_tpkt_pdu: rdp_recv_deactivate_all() fail\");",
          "1366:       return -1;",
          "",
          "[Removed Lines]",
          "1357:      rc = rdp_recv_data_pdu(rdp, s);",
          "1363:      if (!rdp_recv_deactivate_all(rdp, s))",
          "",
          "[Added Lines]",
          "1361:      rc = rdp_recv_data_pdu(rdp, &sub);",
          "1367:      if (!rdp_recv_deactivate_all(rdp, &sub))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1369:      break;",
          "1371:     case PDU_TYPE_SERVER_REDIRECTION:",
          "1374:     case PDU_TYPE_FLOW_RESPONSE:",
          "1375:     case PDU_TYPE_FLOW_STOP:",
          "1376:     case PDU_TYPE_FLOW_TEST:",
          "1377:      WLog_DBG(TAG, \"flow message 0x%04\" PRIX16 \"\", pduType);",
          "1380:       return -1;",
          "1381:      break;",
          "",
          "[Removed Lines]",
          "1372:      return rdp_recv_enhanced_security_redirection_packet(rdp, s);",
          "1379:      if (!Stream_SafeSeek(s, pduLength))",
          "",
          "[Added Lines]",
          "1376:      return rdp_recv_enhanced_security_redirection_packet(rdp, &sub);",
          "1383:      if (!Stream_SafeSeek(&sub, pduLength))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1385:      break;",
          "1386:    }",
          "1389:    diff = end - start;",
          "1390:    if (diff != pduLength)",
          "1391:    {",
          "",
          "[Removed Lines]",
          "1388:    end = Stream_GetPosition(s);",
          "",
          "[Added Lines]",
          "1392:    end = Stream_GetPosition(&sub);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1393:               \"pduType %s not properly parsed, %\" PRIdz",
          "1394:               \" bytes remaining unhandled. Skipping.\",",
          "1395:               pdu_type_to_str(pduType), diff);",
          "1398:    }",
          "1399:   }",
          "1400:  }",
          "",
          "[Removed Lines]",
          "1396:     if (!Stream_SafeSeek(s, pduLength - diff))",
          "1397:      return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21320d973c3ef0e90ab3b04600073951c8cceac7",
      "candidate_info": {
        "commit_hash": "21320d973c3ef0e90ab3b04600073951c8cceac7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/21320d973c3ef0e90ab3b04600073951c8cceac7",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Use safe seek for capability parsing\n\nthanks to @hardening for pointing that one out.",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: };",
          "108: #endif",
          "111: {",
          "114: }",
          "116: static void rdp_write_capability_set_header(wStream* s, UINT16 length, UINT16 type)",
          "",
          "[Removed Lines]",
          "110: static void rdp_read_capability_set_header(wStream* s, UINT16* length, UINT16* type)",
          "",
          "[Added Lines]",
          "110: static BOOL rdp_read_capability_set_header(wStream* s, UINT16* length, UINT16* type)",
          "112:  if (Stream_GetRemainingLength(s) < 4)",
          "113:   return FALSE;",
          "116:  if (*length < 4)",
          "117:   return FALSE;",
          "118:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: {",
          "150:  UINT16 extraFlags;",
          "151:  BYTE refreshRectSupport;",
          "152:  BYTE suppressOutputSupport;",
          "155:   return FALSE;",
          "157:  if (settings->ServerMode)",
          "",
          "[Removed Lines]",
          "148: static BOOL rdp_read_general_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "154:  if (length < 24)",
          "",
          "[Added Lines]",
          "153: static BOOL rdp_read_general_capability_set(wStream* s, rdpSettings* settings)",
          "159:  if (Stream_GetRemainingLength(s) < 20)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259: }",
          "261: #ifdef WITH_DEBUG_CAPABILITIES",
          "263: {",
          "264:  UINT16 osMajorType;",
          "265:  UINT16 osMinorType;",
          "",
          "[Removed Lines]",
          "262: static BOOL rdp_print_general_capability_set(wStream* s, UINT16 length)",
          "",
          "[Added Lines]",
          "267: static BOOL rdp_print_general_capability_set(wStream* s)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:  BYTE refreshRectSupport;",
          "274:  BYTE suppressOutputSupport;",
          "277:   return FALSE;",
          "",
          "[Removed Lines]",
          "276:  if (length < 24)",
          "279:  WLog_INFO(TAG, \"GeneralCapabilitySet (length %\" PRIu16 \"):\", length);",
          "",
          "[Added Lines]",
          "281:  if (Stream_GetRemainingLength(s) < 20)",
          "284:  WLog_INFO(TAG, \"GeneralCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "315: {",
          "316:  BYTE drawingFlags;",
          "317:  UINT16 desktopWidth;",
          "",
          "[Removed Lines]",
          "314: static BOOL rdp_read_bitmap_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "",
          "[Added Lines]",
          "319: static BOOL rdp_read_bitmap_capability_set(wStream* s, rdpSettings* settings)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "319:  UINT16 desktopResizeFlag;",
          "320:  UINT16 preferredBitsPerPixel;",
          "323:   return FALSE;",
          "",
          "[Removed Lines]",
          "322:  if (length < 28)",
          "",
          "[Added Lines]",
          "327:  if (Stream_GetRemainingLength(s) < 24)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "431: }",
          "433: #ifdef WITH_DEBUG_CAPABILITIES",
          "435: {",
          "436:  UINT16 preferredBitsPerPixel;",
          "437:  UINT16 receive1BitPerPixel;",
          "",
          "[Removed Lines]",
          "434: static BOOL rdp_print_bitmap_capability_set(wStream* s, UINT16 length)",
          "",
          "[Added Lines]",
          "439: static BOOL rdp_print_bitmap_capability_set(wStream* s)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "446:  BYTE drawingFlags;",
          "447:  UINT16 multipleRectangleSupport;",
          "448:  UINT16 pad2OctetsB;",
          "452:   return FALSE;",
          "",
          "[Removed Lines]",
          "449:  WLog_INFO(TAG, \"BitmapCapabilitySet (length %\" PRIu16 \"):\", length);",
          "451:  if (length < 28)",
          "",
          "[Added Lines]",
          "454:  WLog_INFO(TAG, \"BitmapCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "456:  if (Stream_GetRemainingLength(s) < 24)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "493: {",
          "494:  int i;",
          "495:  UINT16 orderFlags;",
          "",
          "[Removed Lines]",
          "492: static BOOL rdp_read_order_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "",
          "[Added Lines]",
          "497: static BOOL rdp_read_order_capability_set(wStream* s, rdpSettings* settings)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "498:  BOOL BitmapCacheV3Enabled = FALSE;",
          "499:  BOOL FrameMarkerCommandEnabled = FALSE;",
          "502:   return FALSE;",
          "",
          "[Removed Lines]",
          "501:  if (length < 88)",
          "",
          "[Added Lines]",
          "506:  if (Stream_GetRemainingLength(s) < 84)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606: }",
          "608: #ifdef WITH_DEBUG_CAPABILITIES",
          "610: {",
          "611:  BYTE terminalDescriptor[16];",
          "612:  UINT32 pad4OctetsA;",
          "",
          "[Removed Lines]",
          "609: static BOOL rdp_print_order_capability_set(wStream* s, UINT16 length)",
          "",
          "[Added Lines]",
          "614: static BOOL rdp_print_order_capability_set(wStream* s)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625:  UINT16 pad2OctetsD;",
          "626:  UINT16 textANSICodePage;",
          "627:  UINT16 pad2OctetsE;",
          "631:   return FALSE;",
          "",
          "[Removed Lines]",
          "628:  WLog_INFO(TAG, \"OrderCapabilitySet (length %\" PRIu16 \"):\", length);",
          "630:  if (length < 88)",
          "",
          "[Added Lines]",
          "633:  WLog_INFO(TAG, \"OrderCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "635:  if (Stream_GetRemainingLength(s) < 84)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "714: {",
          "715:  WINPR_UNUSED(settings);",
          "717:   return FALSE;",
          "",
          "[Removed Lines]",
          "713: static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "716:  if (length < 40)",
          "",
          "[Added Lines]",
          "718: static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, rdpSettings* settings)",
          "721:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "779: }",
          "781: #ifdef WITH_DEBUG_CAPABILITIES",
          "783: {",
          "784:  UINT32 pad1, pad2, pad3;",
          "785:  UINT32 pad4, pad5, pad6;",
          "",
          "[Removed Lines]",
          "782: static BOOL rdp_print_bitmap_cache_capability_set(wStream* s, UINT16 length)",
          "",
          "[Added Lines]",
          "787: static BOOL rdp_print_bitmap_cache_capability_set(wStream* s)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789:  UINT16 Cache1MaximumCellSize;",
          "790:  UINT16 Cache2Entries;",
          "791:  UINT16 Cache2MaximumCellSize;",
          "795:   return FALSE;",
          "",
          "[Removed Lines]",
          "792:  WLog_INFO(TAG, \"BitmapCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "794:  if (length < 40)",
          "",
          "[Added Lines]",
          "797:  WLog_INFO(TAG, \"BitmapCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "799:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "834: {",
          "835:  WINPR_UNUSED(settings);",
          "837:   return FALSE;",
          "",
          "[Removed Lines]",
          "833: static BOOL rdp_read_control_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "836:  if (length < 12)",
          "",
          "[Added Lines]",
          "838: static BOOL rdp_read_control_capability_set(wStream* s, rdpSettings* settings)",
          "841:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "870: }",
          "872: #ifdef WITH_DEBUG_CAPABILITIES",
          "874: {",
          "875:  UINT16 controlFlags;",
          "876:  UINT16 remoteDetachFlag;",
          "877:  UINT16 controlInterest;",
          "878:  UINT16 detachInterest;",
          "882:   return FALSE;",
          "",
          "[Removed Lines]",
          "873: static BOOL rdp_print_control_capability_set(wStream* s, UINT16 length)",
          "879:  WLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIu16 \"):\", length);",
          "881:  if (length < 12)",
          "",
          "[Added Lines]",
          "878: static BOOL rdp_print_control_capability_set(wStream* s)",
          "884:  WLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "886:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "906: {",
          "907:  WINPR_UNUSED(settings);",
          "909:   return FALSE;",
          "",
          "[Removed Lines]",
          "904: static BOOL rdp_read_window_activation_capability_set(wStream* s, UINT16 length,",
          "905:                                                       rdpSettings* settings)",
          "908:  if (length < 12)",
          "",
          "[Added Lines]",
          "909: static BOOL rdp_read_window_activation_capability_set(wStream* s, rdpSettings* settings)",
          "912:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "942: }",
          "944: #ifdef WITH_DEBUG_CAPABILITIES",
          "946: {",
          "947:  UINT16 helpKeyFlag;",
          "948:  UINT16 helpKeyIndexFlag;",
          "949:  UINT16 helpExtendedKeyFlag;",
          "950:  UINT16 windowManagerKeyFlag;",
          "954:   return FALSE;",
          "",
          "[Removed Lines]",
          "945: static BOOL rdp_print_window_activation_capability_set(wStream* s, UINT16 length)",
          "951:  WLog_INFO(TAG, \"WindowActivationCapabilitySet (length %\" PRIu16 \"):\", length);",
          "953:  if (length < 12)",
          "",
          "[Added Lines]",
          "949: static BOOL rdp_print_window_activation_capability_set(wStream* s)",
          "955:  WLog_INFO(TAG,",
          "956:            \"WindowActivationCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "958:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "977: {",
          "978:  UINT16 colorPointerFlag;",
          "979:  UINT16 colorPointerCacheSize;",
          "980:  UINT16 pointerCacheSize;",
          "983:   return FALSE;",
          "991:  else",
          "992:   pointerCacheSize = 0;",
          "",
          "[Removed Lines]",
          "976: static BOOL rdp_read_pointer_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "982:  if (length < 8)",
          "989:  if (length >= 10)",
          "",
          "[Added Lines]",
          "981: static BOOL rdp_read_pointer_capability_set(wStream* s, rdpSettings* settings)",
          "987:  if (Stream_GetRemainingLength(s) < 4)",
          "994:  if (Stream_GetRemainingLength(s) >= 2)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1038: }",
          "1040: #ifdef WITH_DEBUG_CAPABILITIES",
          "1042: {",
          "1043:  UINT16 colorPointerFlag;",
          "1044:  UINT16 colorPointerCacheSize;",
          "1045:  UINT16 pointerCacheSize;",
          "1048:   return FALSE;",
          "",
          "[Removed Lines]",
          "1041: static BOOL rdp_print_pointer_capability_set(wStream* s, UINT16 length)",
          "1047:  if (length < 10)",
          "1050:  WLog_INFO(TAG, \"PointerCapabilitySet (length %\" PRIu16 \"):\", length);",
          "",
          "[Added Lines]",
          "1046: static BOOL rdp_print_pointer_capability_set(wStream* s)",
          "1052:  if (Stream_GetRemainingLength(s) < 6)",
          "1055:  WLog_INFO(TAG, \"PointerCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1070: {",
          "1071:  WINPR_UNUSED(settings);",
          "1073:   return FALSE;",
          "",
          "[Removed Lines]",
          "1069: static BOOL rdp_read_share_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1072:  if (length < 8)",
          "",
          "[Added Lines]",
          "1074: static BOOL rdp_read_share_capability_set(wStream* s, rdpSettings* settings)",
          "1077:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1103: }",
          "1105: #ifdef WITH_DEBUG_CAPABILITIES",
          "1107: {",
          "1108:  UINT16 nodeId;",
          "1109:  UINT16 pad2Octets;",
          "1113:   return FALSE;",
          "",
          "[Removed Lines]",
          "1106: static BOOL rdp_print_share_capability_set(wStream* s, UINT16 length)",
          "1110:  WLog_INFO(TAG, \"ShareCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1112:  if (length < 8)",
          "",
          "[Added Lines]",
          "1111: static BOOL rdp_print_share_capability_set(wStream* s)",
          "1115:  WLog_INFO(TAG, \"ShareCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1117:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1132: {",
          "1133:  WINPR_UNUSED(settings);",
          "1135:   return FALSE;",
          "",
          "[Removed Lines]",
          "1131: static BOOL rdp_read_color_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1134:  if (length < 8)",
          "",
          "[Added Lines]",
          "1136: static BOOL rdp_read_color_cache_capability_set(wStream* s, rdpSettings* settings)",
          "1139:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1164: }",
          "1166: #ifdef WITH_DEBUG_CAPABILITIES",
          "1168: {",
          "1169:  UINT16 colorTableCacheSize;",
          "1170:  UINT16 pad2Octets;",
          "1174:   return FALSE;",
          "",
          "[Removed Lines]",
          "1167: static BOOL rdp_print_color_cache_capability_set(wStream* s, UINT16 length)",
          "1171:  WLog_INFO(TAG, \"ColorCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1173:  if (length < 8)",
          "",
          "[Added Lines]",
          "1172: static BOOL rdp_print_color_cache_capability_set(wStream* s)",
          "1176:  WLog_INFO(TAG, \"ColorCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1178:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1193: {",
          "1194:  UINT16 soundFlags;",
          "1197:   return FALSE;",
          "",
          "[Removed Lines]",
          "1192: static BOOL rdp_read_sound_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1196:  if (length < 8)",
          "",
          "[Added Lines]",
          "1197: static BOOL rdp_read_sound_capability_set(wStream* s, rdpSettings* settings)",
          "1201:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1228: }",
          "1230: #ifdef WITH_DEBUG_CAPABILITIES",
          "1232: {",
          "1233:  UINT16 soundFlags;",
          "1234:  UINT16 pad2OctetsA;",
          "1238:   return FALSE;",
          "",
          "[Removed Lines]",
          "1231: static BOOL rdp_print_sound_capability_set(wStream* s, UINT16 length)",
          "1235:  WLog_INFO(TAG, \"SoundCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1237:  if (length < 8)",
          "",
          "[Added Lines]",
          "1236: static BOOL rdp_print_sound_capability_set(wStream* s)",
          "1240:  WLog_INFO(TAG, \"SoundCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1242:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1257: {",
          "1258:  UINT16 inputFlags;",
          "1261:   return FALSE;",
          "",
          "[Removed Lines]",
          "1256: static BOOL rdp_read_input_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1260:  if (length < 88)",
          "",
          "[Added Lines]",
          "1261: static BOOL rdp_read_input_capability_set(wStream* s, rdpSettings* settings)",
          "1265:  if (Stream_GetRemainingLength(s) < 84)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1356: }",
          "1358: #ifdef WITH_DEBUG_CAPABILITIES",
          "1360: {",
          "1361:  UINT16 inputFlags;",
          "1362:  UINT16 pad2OctetsA;",
          "",
          "[Removed Lines]",
          "1359: static BOOL rdp_print_input_capability_set(wStream* s, UINT16 length)",
          "",
          "[Added Lines]",
          "1364: static BOOL rdp_print_input_capability_set(wStream* s)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1364:  UINT32 keyboardType;",
          "1365:  UINT32 keyboardSubType;",
          "1366:  UINT32 keyboardFunctionKey;",
          "1370:   return FALSE;",
          "",
          "[Removed Lines]",
          "1367:  WLog_INFO(TAG, \"InputCapabilitySet (length %\" PRIu16 \")\", length);",
          "1369:  if (length < 88)",
          "",
          "[Added Lines]",
          "1372:  WLog_INFO(TAG, \"InputCapabilitySet (length %\" PRIuz \")\", Stream_GetRemainingLength(s));",
          "1374:  if (Stream_GetRemainingLength(s) < 84)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1398: {",
          "1399:  WINPR_UNUSED(settings);",
          "1406:  return TRUE;",
          "",
          "[Removed Lines]",
          "1397: static BOOL rdp_read_font_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1400:  if (length > 5)",
          "1403:  if (length > 7)",
          "",
          "[Added Lines]",
          "1402: static BOOL rdp_read_font_capability_set(wStream* s, rdpSettings* settings)",
          "1405:  if (Stream_GetRemainingLength(s) >= 2)",
          "1408:  if (Stream_GetRemainingLength(s) >= 2)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1431: }",
          "1433: #ifdef WITH_DEBUG_CAPABILITIES",
          "1435: {",
          "1436:  UINT16 fontSupportFlags = 0;",
          "1437:  UINT16 pad2Octets = 0;",
          "1446:  WLog_INFO(TAG, \"\\tfontSupportFlags: 0x%04\" PRIX16 \"\", fontSupportFlags);",
          "",
          "[Removed Lines]",
          "1434: static BOOL rdp_print_font_capability_set(wStream* s, UINT16 length)",
          "1438:  WLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1440:  if (length > 4)",
          "1443:  if (length > 6)",
          "",
          "[Added Lines]",
          "1439: static BOOL rdp_print_font_capability_set(wStream* s)",
          "1443:  WLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1445:  if (Stream_GetRemainingLength(s) >= 2)",
          "1448:  if (Stream_GetRemainingLength(s) >= 2)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1461: {",
          "1462:  WINPR_UNUSED(settings);",
          "1468: }",
          "",
          "[Removed Lines]",
          "1460: static BOOL rdp_read_brush_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1463:  if (length < 8)",
          "1464:   return FALSE;",
          "1467:  return TRUE;",
          "",
          "[Added Lines]",
          "1465: static BOOL rdp_read_brush_capability_set(wStream* s, rdpSettings* settings)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1490: }",
          "1492: #ifdef WITH_DEBUG_CAPABILITIES",
          "1494: {",
          "1495:  UINT32 brushSupportLevel;",
          "1499:   return FALSE;",
          "",
          "[Removed Lines]",
          "1493: static BOOL rdp_print_brush_capability_set(wStream* s, UINT16 length)",
          "1496:  WLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1498:  if (length < 8)",
          "",
          "[Added Lines]",
          "1494: static BOOL rdp_print_brush_capability_set(wStream* s)",
          "1497:  WLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1499:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1540: {",
          "1542:   return FALSE;",
          "",
          "[Removed Lines]",
          "1539: static BOOL rdp_read_glyph_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1541:  if (length < 52)",
          "",
          "[Added Lines]",
          "1540: static BOOL rdp_read_glyph_cache_capability_set(wStream* s, rdpSettings* settings)",
          "1542:  if (Stream_GetRemainingLength(s) < 48)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1596: }",
          "1598: #ifdef WITH_DEBUG_CAPABILITIES",
          "1600: {",
          "1601:  GLYPH_CACHE_DEFINITION glyphCache[10];",
          "1602:  GLYPH_CACHE_DEFINITION fragCache;",
          "1603:  UINT16 glyphSupportLevel;",
          "1604:  UINT16 pad2Octets;",
          "1608:   return FALSE;",
          "",
          "[Removed Lines]",
          "1599: static BOOL rdp_print_glyph_cache_capability_set(wStream* s, UINT16 length)",
          "1605:  WLog_INFO(TAG, \"GlyphCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1607:  if (length < 52)",
          "",
          "[Added Lines]",
          "1600: static BOOL rdp_print_glyph_cache_capability_set(wStream* s)",
          "1606:  WLog_INFO(TAG, \"GlyphCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1608:  if (Stream_GetRemainingLength(s) < 48)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1662: {",
          "1663:  UINT32 offscreenSupportLevel;",
          "1666:   return FALSE;",
          "",
          "[Removed Lines]",
          "1660: static BOOL rdp_read_offscreen_bitmap_cache_capability_set(wStream* s, UINT16 length,",
          "1661:                                                            rdpSettings* settings)",
          "1665:  if (length < 12)",
          "",
          "[Added Lines]",
          "1661: static BOOL rdp_read_offscreen_bitmap_cache_capability_set(wStream* s, rdpSettings* settings)",
          "1665:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1709: }",
          "1711: #ifdef WITH_DEBUG_CAPABILITIES",
          "1713: {",
          "1714:  UINT32 offscreenSupportLevel;",
          "1715:  UINT16 offscreenCacheSize;",
          "1716:  UINT16 offscreenCacheEntries;",
          "1720:   return FALSE;",
          "",
          "[Removed Lines]",
          "1712: static BOOL rdp_print_offscreen_bitmap_cache_capability_set(wStream* s, UINT16 length)",
          "1717:  WLog_INFO(TAG, \"OffscreenBitmapCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1719:  if (length < 12)",
          "",
          "[Added Lines]",
          "1712: static BOOL rdp_print_offscreen_bitmap_cache_capability_set(wStream* s)",
          "1717:  WLog_INFO(TAG, \"OffscreenBitmapCacheCapabilitySet (length %\" PRIuz \"):\",",
          "1718:            Stream_GetRemainingLength(s));",
          "1720:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1742: {",
          "1743:  BYTE cacheVersion;",
          "1746:   return FALSE;",
          "",
          "[Removed Lines]",
          "1740: static BOOL rdp_read_bitmap_cache_host_support_capability_set(wStream* s, UINT16 length,",
          "1741:                                                               rdpSettings* settings)",
          "1745:  if (length < 8)",
          "",
          "[Added Lines]",
          "1741: static BOOL rdp_read_bitmap_cache_host_support_capability_set(wStream* s, rdpSettings* settings)",
          "1745:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1782: }",
          "1784: #ifdef WITH_DEBUG_CAPABILITIES",
          "1786: {",
          "1787:  BYTE cacheVersion;",
          "1788:  BYTE pad1;",
          "1789:  UINT16 pad2;",
          "1793:   return FALSE;",
          "",
          "[Removed Lines]",
          "1785: static BOOL rdp_print_bitmap_cache_host_support_capability_set(wStream* s, UINT16 length)",
          "1790:  WLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1792:  if (length < 8)",
          "",
          "[Added Lines]",
          "1785: static BOOL rdp_print_bitmap_cache_host_support_capability_set(wStream* s)",
          "1790:  WLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIuz \"):\",",
          "1791:            Stream_GetRemainingLength(s));",
          "1793:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1838: {",
          "1839:  WINPR_UNUSED(settings);",
          "1841:   return FALSE;",
          "",
          "[Removed Lines]",
          "1836: static BOOL rdp_read_bitmap_cache_v2_capability_set(wStream* s, UINT16 length,",
          "1837:                                                     rdpSettings* settings)",
          "1840:  if (length < 40)",
          "",
          "[Added Lines]",
          "1837: static BOOL rdp_read_bitmap_cache_v2_capability_set(wStream* s, rdpSettings* settings)",
          "1840:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1892: }",
          "1894: #ifdef WITH_DEBUG_CAPABILITIES",
          "1896: {",
          "1897:  UINT16 cacheFlags;",
          "1898:  BYTE pad2;",
          "1899:  BYTE numCellCaches;",
          "1900:  BITMAP_CACHE_V2_CELL_INFO bitmapCacheV2CellInfo[5];",
          "1904:   return FALSE;",
          "",
          "[Removed Lines]",
          "1895: static BOOL rdp_print_bitmap_cache_v2_capability_set(wStream* s, UINT16 length)",
          "1901:  WLog_INFO(TAG, \"BitmapCacheV2CapabilitySet (length %\" PRIu16 \"):\", length);",
          "1903:  if (length < 40)",
          "",
          "[Added Lines]",
          "1895: static BOOL rdp_print_bitmap_cache_v2_capability_set(wStream* s)",
          "1901:  WLog_INFO(TAG, \"BitmapCacheV2CapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1903:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1947: {",
          "1948:  UINT32 flags;",
          "1949:  UINT32 VCChunkSize;",
          "1952:   return FALSE;",
          "1958:  else",
          "1959:   VCChunkSize = 1600;",
          "",
          "[Removed Lines]",
          "1945: static BOOL rdp_read_virtual_channel_capability_set(wStream* s, UINT16 length,",
          "1946:                                                     rdpSettings* settings)",
          "1951:  if (length < 8)",
          "1956:  if (length > 8)",
          "",
          "[Added Lines]",
          "1945: static BOOL rdp_read_virtual_channel_capability_set(wStream* s, rdpSettings* settings)",
          "1950:  if (Stream_GetRemainingLength(s) < 4)",
          "1955:  if (Stream_GetRemainingLength(s) >= 4)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1988: }",
          "1990: #ifdef WITH_DEBUG_CAPABILITIES",
          "1992: {",
          "1993:  UINT32 flags;",
          "1994:  UINT32 VCChunkSize;",
          "1998:   return FALSE;",
          "2004:  else",
          "2005:   VCChunkSize = 1600;",
          "",
          "[Removed Lines]",
          "1991: static BOOL rdp_print_virtual_channel_capability_set(wStream* s, UINT16 length)",
          "1995:  WLog_INFO(TAG, \"VirtualChannelCapabilitySet (length %\" PRIu16 \"):\", length);",
          "1997:  if (length < 8)",
          "2002:  if (length > 8)",
          "",
          "[Added Lines]",
          "1990: static BOOL rdp_print_virtual_channel_capability_set(wStream* s)",
          "1994:  WLog_INFO(TAG,",
          "1995:            \"VirtualChannelCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "1997:  if (Stream_GetRemainingLength(s) < 4)",
          "2002:  if (Stream_GetRemainingLength(s) >= 4)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2023: {",
          "2024:  UINT32 drawNineGridSupportLevel;",
          "2027:   return FALSE;",
          "",
          "[Removed Lines]",
          "2021: static BOOL rdp_read_draw_nine_grid_cache_capability_set(wStream* s, UINT16 length,",
          "2022:                                                          rdpSettings* settings)",
          "2026:  if (length < 12)",
          "",
          "[Added Lines]",
          "2021: static BOOL rdp_read_draw_nine_grid_cache_capability_set(wStream* s, rdpSettings* settings)",
          "2025:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2092: }",
          "2094: #ifdef WITH_DEBUG_CAPABILITIES",
          "2096: {",
          "2097:  UINT32 drawNineGridSupportLevel;",
          "2098:  UINT16 DrawNineGridCacheSize;",
          "2099:  UINT16 DrawNineGridCacheEntries;",
          "2103:   return FALSE;",
          "",
          "[Removed Lines]",
          "2095: static BOOL rdp_print_draw_nine_grid_cache_capability_set(wStream* s, UINT16 length)",
          "2100:  WLog_INFO(TAG, \"DrawNineGridCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2102:  if (length < 12)",
          "",
          "[Added Lines]",
          "2094: static BOOL rdp_print_draw_nine_grid_cache_capability_set(wStream* s)",
          "2099:  WLog_INFO(TAG,",
          "2100:            \"DrawNineGridCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2102:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2122: {",
          "2123:  UINT32 drawGDIPlusSupportLevel;",
          "2124:  UINT32 drawGdiplusCacheLevel;",
          "2127:   return FALSE;",
          "",
          "[Removed Lines]",
          "2120: static BOOL rdp_read_draw_gdiplus_cache_capability_set(wStream* s, UINT16 length,",
          "2121:                                                        rdpSettings* settings)",
          "2126:  if (length < 40)",
          "",
          "[Added Lines]",
          "2120: static BOOL rdp_read_draw_gdiplus_cache_capability_set(wStream* s, rdpSettings* settings)",
          "2125:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2175: }",
          "2177: #ifdef WITH_DEBUG_CAPABILITIES",
          "2179: {",
          "2180:  UINT32 drawGdiPlusSupportLevel;",
          "2181:  UINT32 GdipVersion;",
          "2182:  UINT32 drawGdiplusCacheLevel;",
          "2186:   return FALSE;",
          "",
          "[Removed Lines]",
          "2178: static BOOL rdp_print_draw_gdiplus_cache_capability_set(wStream* s, UINT16 length)",
          "2183:  WLog_INFO(TAG, \"DrawGdiPlusCacheCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2185:  if (length < 40)",
          "",
          "[Added Lines]",
          "2177: static BOOL rdp_print_draw_gdiplus_cache_capability_set(wStream* s)",
          "2182:  WLog_INFO(TAG,",
          "2183:            \"DrawGdiPlusCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2185:  if (Stream_GetRemainingLength(s) < 36)",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2208: {",
          "2209:  UINT32 railSupportLevel;",
          "2212:   return FALSE;",
          "",
          "[Removed Lines]",
          "2206: static BOOL rdp_read_remote_programs_capability_set(wStream* s, UINT16 length,",
          "2207:                                                     rdpSettings* settings)",
          "2211:  if (length < 8)",
          "",
          "[Added Lines]",
          "2206: static BOOL rdp_read_remote_programs_capability_set(wStream* s, rdpSettings* settings)",
          "2210:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2271: }",
          "2273: #ifdef WITH_DEBUG_CAPABILITIES",
          "2275: {",
          "2276:  UINT32 railSupportLevel;",
          "2280:   return FALSE;",
          "",
          "[Removed Lines]",
          "2274: static BOOL rdp_print_remote_programs_capability_set(wStream* s, UINT16 length)",
          "2277:  WLog_INFO(TAG, \"RemoteProgramsCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2279:  if (length < 8)",
          "",
          "[Added Lines]",
          "2273: static BOOL rdp_print_remote_programs_capability_set(wStream* s)",
          "2276:  WLog_INFO(TAG,",
          "2277:            \"RemoteProgramsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2279:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2297: {",
          "2299:   return FALSE;",
          "",
          "[Removed Lines]",
          "2296: static BOOL rdp_read_window_list_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "2298:  if (length < 11)",
          "",
          "[Added Lines]",
          "2296: static BOOL rdp_read_window_list_capability_set(wStream* s, rdpSettings* settings)",
          "2298:  if (Stream_GetRemainingLength(s) < 7)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2329: }",
          "2331: #ifdef WITH_DEBUG_CAPABILITIES",
          "2333: {",
          "2334:  UINT32 wndSupportLevel;",
          "2335:  BYTE numIconCaches;",
          "2336:  UINT16 numIconCacheEntries;",
          "2340:   return FALSE;",
          "",
          "[Removed Lines]",
          "2332: static BOOL rdp_print_window_list_capability_set(wStream* s, UINT16 length)",
          "2337:  WLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2339:  if (length < 11)",
          "",
          "[Added Lines]",
          "2332: static BOOL rdp_print_window_list_capability_set(wStream* s)",
          "2337:  WLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2339:  if (Stream_GetRemainingLength(s) < 7)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2362: {",
          "2364:   return FALSE;",
          "",
          "[Removed Lines]",
          "2360: static BOOL rdp_read_desktop_composition_capability_set(wStream* s, UINT16 length,",
          "2361:                                                         rdpSettings* settings)",
          "2363:  if (length < 6)",
          "",
          "[Added Lines]",
          "2360: static BOOL rdp_read_desktop_composition_capability_set(wStream* s, rdpSettings* settings)",
          "2362:  WINPR_UNUSED(settings);",
          "2363:  if (Stream_GetRemainingLength(s) < 2)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2391: }",
          "2393: #ifdef WITH_DEBUG_CAPABILITIES",
          "2395: {",
          "2396:  UINT16 compDeskSupportLevel;",
          "2400:   return FALSE;",
          "",
          "[Removed Lines]",
          "2394: static BOOL rdp_print_desktop_composition_capability_set(wStream* s, UINT16 length)",
          "2397:  WLog_INFO(TAG, \"DesktopCompositionCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2399:  if (length < 6)",
          "",
          "[Added Lines]",
          "2394: static BOOL rdp_print_desktop_composition_capability_set(wStream* s)",
          "2397:  WLog_INFO(TAG,",
          "2398:            \"DesktopCompositionCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2400:  if (Stream_GetRemainingLength(s) < 2)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2418: {",
          "2419:  UINT32 multifragMaxRequestSize;",
          "2422:   return FALSE;",
          "",
          "[Removed Lines]",
          "2416: static BOOL rdp_read_multifragment_update_capability_set(wStream* s, UINT16 length,",
          "2417:                                                          rdpSettings* settings)",
          "2421:  if (length < 8)",
          "",
          "[Added Lines]",
          "2417: static BOOL rdp_read_multifragment_update_capability_set(wStream* s, rdpSettings* settings)",
          "2421:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2517: }",
          "2519: #ifdef WITH_DEBUG_CAPABILITIES",
          "2521: {",
          "2522:  UINT32 maxRequestSize;",
          "2526:   return FALSE;",
          "",
          "[Removed Lines]",
          "2520: static BOOL rdp_print_multifragment_update_capability_set(wStream* s, UINT16 length)",
          "2523:  WLog_INFO(TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2525:  if (length < 8)",
          "",
          "[Added Lines]",
          "2520: static BOOL rdp_print_multifragment_update_capability_set(wStream* s)",
          "2523:  WLog_INFO(",
          "2524:      TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2526:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2543: {",
          "2544:  UINT16 largePointerSupportFlags;",
          "2547:   return FALSE;",
          "",
          "[Removed Lines]",
          "2542: static BOOL rdp_read_large_pointer_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "2546:  if (length < 6)",
          "",
          "[Added Lines]",
          "2543: static BOOL rdp_read_large_pointer_capability_set(wStream* s, rdpSettings* settings)",
          "2547:  if (Stream_GetRemainingLength(s) < 2)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2584: }",
          "2586: #ifdef WITH_DEBUG_CAPABILITIES",
          "2588: {",
          "2589:  UINT16 largePointerSupportFlags;",
          "2593:   return FALSE;",
          "",
          "[Removed Lines]",
          "2587: static BOOL rdp_print_large_pointer_capability_set(wStream* s, UINT16 length)",
          "2590:  WLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2592:  if (length < 6)",
          "",
          "[Added Lines]",
          "2588: static BOOL rdp_print_large_pointer_capability_set(wStream* s)",
          "2591:  WLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2593:  if (Stream_GetRemainingLength(s) < 2)",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2611: {",
          "2612:  UINT32 cmdFlags;",
          "2615:   return FALSE;",
          "",
          "[Removed Lines]",
          "2609: static BOOL rdp_read_surface_commands_capability_set(wStream* s, UINT16 length,",
          "2610:                                                      rdpSettings* settings)",
          "2614:  if (length < 12)",
          "",
          "[Added Lines]",
          "2610: static BOOL rdp_read_surface_commands_capability_set(wStream* s, rdpSettings* settings)",
          "2614:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2649: }",
          "2651: #ifdef WITH_DEBUG_CAPABILITIES",
          "2653: {",
          "2654:  UINT32 cmdFlags;",
          "2655:  UINT32 reserved;",
          "2659:   return FALSE;",
          "",
          "[Removed Lines]",
          "2652: static BOOL rdp_print_surface_commands_capability_set(wStream* s, UINT16 length)",
          "2656:  WLog_INFO(TAG, \"SurfaceCommandsCapabilitySet (length %\" PRIu16 \"):\", length);",
          "2658:  if (length < 12)",
          "",
          "[Added Lines]",
          "2652: static BOOL rdp_print_surface_commands_capability_set(wStream* s)",
          "2656:  WLog_INFO(TAG,",
          "2657:            \"SurfaceCommandsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "2659:  if (Stream_GetRemainingLength(s) < 8)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2696: }",
          "2697: #endif",
          "2700: {",
          "2701:  BYTE g[16];",
          "2702:  Stream_Read(s, g, 16);",
          "2703:  guid->Data1 = (g[3] << 24) | (g[2] << 16) | (g[1] << 8) | g[0];",
          "2704:  guid->Data2 = (g[5] << 8) | g[4];",
          "",
          "[Removed Lines]",
          "2699: static void rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)",
          "",
          "[Added Lines]",
          "2700: static BOOL rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)",
          "2703:  if (Stream_GetRemainingLength(s) < 16)",
          "2704:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2711:  guid->Data4[5] = g[13];",
          "2712:  guid->Data4[6] = g[14];",
          "2713:  guid->Data4[7] = g[15];",
          "2714: }",
          "2716: static void rdp_write_bitmap_codec_guid(wStream* s, const GUID* guid)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2717:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2747: {",
          "2748:  BYTE codecId;",
          "2749:  GUID codecGuid;",
          "2750:  RPC_STATUS rpc_status;",
          "2751:  BYTE bitmapCodecCount;",
          "2752:  UINT16 codecPropertiesLength;",
          "2754:  BOOL guidNSCodec = FALSE;",
          "2755:  BOOL guidRemoteFx = FALSE;",
          "2756:  BOOL guidRemoteFxImage = FALSE;",
          "2759:   return FALSE;",
          "2764:  while (bitmapCodecCount > 0)",
          "2765:  {",
          "2767:    return FALSE;",
          "2775:    return FALSE;",
          "2777:   if (settings->ServerMode)",
          "2778:   {",
          "2784:    if (UuidEqual(&codecGuid, &CODEC_GUID_REMOTEFX, &rpc_status))",
          "2785:    {",
          "2786:     UINT32 rfxCapsLength;",
          "",
          "[Removed Lines]",
          "2746: static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "2753:  UINT16 remainingLength;",
          "2758:  if (length < 5)",
          "2762:  remainingLength = length - 5;",
          "2766:   if (remainingLength < 19)",
          "2772:   remainingLength -= 19;",
          "2774:   if (remainingLength < codecPropertiesLength)",
          "2779:    UINT32 beg;",
          "2780:    UINT32 end;",
          "2781:    beg = (UINT32)Stream_GetPosition(s);",
          "2782:    end = beg + codecPropertiesLength;",
          "",
          "[Added Lines]",
          "2750: static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, rdpSettings* settings)",
          "2762:  if (Stream_GetRemainingLength(s) < 1)",
          "2769:   size_t rest;",
          "2770:   wStream sub;",
          "2772:    return FALSE;",
          "2773:   if (Stream_GetRemainingLength(s) < 3)",
          "2778:   Stream_StaticInit(&sub, Stream_Pointer(s), codecPropertiesLength);",
          "2779:   if (!Stream_SafeSeek(s, codecPropertiesLength))",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2788:     UINT32 captureFlags;",
          "2789:     guidRemoteFx = TRUE;",
          "2790:     settings->RemoteFxCodecId = codecId;",
          "2794:     settings->RemoteFxCaptureFlags = captureFlags;",
          "2795:     settings->RemoteFxOnly = (captureFlags & CARDP_CAPS_CAPTURE_NON_CAC) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2791:     if (Stream_GetRemainingLength(&sub) < 12)",
          "2792:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2804:      UINT16 numIcaps;",
          "2805:      UINT16 icapLen;",
          "2811:      if (blockType != 0xCBC0)",
          "2812:       return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2809:      if (Stream_GetRemainingLength(&sub) < 21)",
          "2810:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2843:       BYTE transformBits;",
          "2844:       BYTE entropyBits;",
          "2853:       if (version == 0x0009)",
          "2854:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2850:       if (Stream_GetRemainingLength(&sub) < 8)",
          "2851:        return FALSE;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2877:    {",
          "2879:     guidRemoteFxImage = TRUE;",
          "2881:    }",
          "2882:    else if (UuidEqual(&codecGuid, &CODEC_GUID_NSCODEC, &rpc_status))",
          "2883:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2886:     BYTE fAllowDynamicFidelity;",
          "2887:     guidNSCodec = TRUE;",
          "2888:     settings->NSCodecId = codecId;",
          "2893:     if (colorLossLevel < 1)",
          "2894:      colorLossLevel = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2896:     if (Stream_GetRemainingLength(&sub) < 3)",
          "2897:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2902:    }",
          "2903:    else if (UuidEqual(&codecGuid, &CODEC_GUID_IGNORE, &rpc_status))",
          "2904:    {",
          "2906:    }",
          "2907:    else",
          "2908:    {",
          "2919:    }",
          "2922:   }",
          "2923:   else",
          "2924:   {",
          "2927:   }",
          "2929:   bitmapCodecCount--;",
          "2930:  }",
          "",
          "[Removed Lines]",
          "2910:    }",
          "2912:    if (Stream_GetPosition(s) != end)",
          "2913:    {",
          "2914:     WLog_ERR(TAG,",
          "2915:              \"error while reading codec properties: actual offset: %\" PRIuz",
          "2916:              \" expected offset: %\" PRIu32 \"\",",
          "2917:              Stream_GetPosition(s), end);",
          "2918:     Stream_SetPosition(s, end);",
          "2921:    remainingLength -= codecPropertiesLength;",
          "2926:    remainingLength -= codecPropertiesLength;",
          "",
          "[Added Lines]",
          "2915:      return FALSE;",
          "2920:      return FALSE;",
          "2926:     return FALSE;",
          "2929:   rest = Stream_GetRemainingLength(&sub);",
          "2930:   if (rest > 0)",
          "2931:   {",
          "2932:    WLog_ERR(TAG,",
          "2933:             \"error while reading codec properties: actual size: %\" PRIuz",
          "2934:             \" expected size: %\" PRIu32 \"\",",
          "2935:             rest + codecPropertiesLength, codecPropertiesLength);",
          "2936:   }",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3200: }",
          "3202: #ifdef WITH_DEBUG_CAPABILITIES",
          "3204: {",
          "3205:  GUID codecGuid;",
          "3206:  BYTE bitmapCodecCount;",
          "3207:  BYTE codecId;",
          "3208:  UINT16 codecPropertiesLength;",
          "3213:   return FALSE;",
          "3217:  WLog_INFO(TAG, \"\\tbitmapCodecCount: %\" PRIu8 \"\", bitmapCodecCount);",
          "3219:  while (bitmapCodecCount > 0)",
          "3220:  {",
          "3222:    return FALSE;",
          "3226:   WLog_INFO(TAG, \"\\tcodecGuid: 0x\");",
          "3227:   rdp_print_bitmap_codec_guid(&codecGuid);",
          "",
          "[Removed Lines]",
          "3203: static BOOL rdp_print_bitmap_codecs_capability_set(wStream* s, UINT16 length)",
          "3209:  UINT16 remainingLength;",
          "3210:  WLog_INFO(TAG, \"BitmapCodecsCapabilitySet (length %\" PRIu16 \"):\", length);",
          "3212:  if (length < 5)",
          "3216:  remainingLength = length - 5;",
          "3221:   if (remainingLength < 19)",
          "",
          "[Added Lines]",
          "3211: static BOOL rdp_print_bitmap_codecs_capability_set(wStream* s)",
          "3218:  WLog_INFO(TAG, \"BitmapCodecsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "3220:  if (Stream_GetRemainingLength(s) < 1)",
          "3229:    return FALSE;",
          "3230:   if (Stream_GetRemainingLength(s) < 3)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3229:   WLog_INFO(TAG, \"\\tcodecId: %\" PRIu8 \"\", codecId);",
          "3231:   WLog_INFO(TAG, \"\\tcodecPropertiesLength: %\" PRIu16 \"\", codecPropertiesLength);",
          "3235:    return FALSE;",
          "3239:   bitmapCodecCount--;",
          "3240:  }",
          "",
          "[Removed Lines]",
          "3232:   remainingLength -= 19;",
          "3234:   if (remainingLength < codecPropertiesLength)",
          "3238:   remainingLength -= codecPropertiesLength;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3255: {",
          "3257:   return FALSE;",
          "3259:  if (settings->ServerMode)",
          "",
          "[Removed Lines]",
          "3253: static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, UINT16 length,",
          "3254:                                                       rdpSettings* settings)",
          "3256:  if (length < 8)",
          "",
          "[Added Lines]",
          "3256: static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, rdpSettings* settings)",
          "3258:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3290: }",
          "3292: #ifdef WITH_DEBUG_CAPABILITIES",
          "3294: {",
          "3295:  UINT32 frameAcknowledge;",
          "3299:   return FALSE;",
          "",
          "[Removed Lines]",
          "3293: static BOOL rdp_print_frame_acknowledge_capability_set(wStream* s, UINT16 length)",
          "3296:  WLog_INFO(TAG, \"FrameAcknowledgeCapabilitySet (length %\" PRIu16 \"):\", length);",
          "3298:  if (length < 8)",
          "",
          "[Added Lines]",
          "3295: static BOOL rdp_print_frame_acknowledge_capability_set(wStream* s)",
          "3298:  WLog_INFO(TAG,",
          "3299:            \"FrameAcknowledgeCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));",
          "3301:  if (Stream_GetRemainingLength(s) < 4)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3304: }",
          "3305: #endif",
          "3309: {",
          "3310:  BYTE bitmapCacheV3CodecId;",
          "3312:  WINPR_UNUSED(settings);",
          "3314:   return FALSE;",
          "",
          "[Removed Lines]",
          "3307: static BOOL rdp_read_bitmap_cache_v3_codec_id_capability_set(wStream* s, UINT16 length,",
          "3308:                                                              rdpSettings* settings)",
          "3313:  if (length < 5)",
          "",
          "[Added Lines]",
          "3310: static BOOL rdp_read_bitmap_cache_v3_codec_id_capability_set(wStream* s, rdpSettings* settings)",
          "3315:  if (Stream_GetRemainingLength(s) < 1)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3336: }",
          "3338: #ifdef WITH_DEBUG_CAPABILITIES",
          "3340: {",
          "3341:  BYTE bitmapCacheV3CodecId;",
          "3345:   return FALSE;",
          "",
          "[Removed Lines]",
          "3339: static BOOL rdp_print_bitmap_cache_v3_codec_id_capability_set(wStream* s, UINT16 length)",
          "3342:  WLog_INFO(TAG, \"BitmapCacheV3CodecIdCapabilitySet (length %\" PRIu16 \"):\", length);",
          "3344:  if (length < 5)",
          "",
          "[Added Lines]",
          "3341: static BOOL rdp_print_bitmap_cache_v3_codec_id_capability_set(wStream* s)",
          "3344:  WLog_INFO(TAG, \"BitmapCacheV3CodecIdCapabilitySet (length %\" PRIuz \"):\",",
          "3345:            Stream_GetRemainingLength(s));",
          "3347:  if (Stream_GetRemainingLength(s) < 1)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3353: {",
          "3354:  UINT16 type;",
          "3355:  UINT16 length;",
          "3358:  while (numberCapabilities > 0)",
          "3359:  {",
          "3368:    return FALSE;",
          "3371:   switch (type)",
          "3372:   {",
          "3373:    case CAPSET_TYPE_GENERAL:",
          "3375:      return FALSE;",
          "3377:     break;",
          "3379:    case CAPSET_TYPE_BITMAP:",
          "3381:      return FALSE;",
          "3383:     break;",
          "3385:    case CAPSET_TYPE_ORDER:",
          "3387:      return FALSE;",
          "3389:     break;",
          "3391:    case CAPSET_TYPE_BITMAP_CACHE:",
          "3393:      return FALSE;",
          "3395:     break;",
          "3397:    case CAPSET_TYPE_CONTROL:",
          "3399:      return FALSE;",
          "3401:     break;",
          "3403:    case CAPSET_TYPE_ACTIVATION:",
          "3405:      return FALSE;",
          "3407:     break;",
          "3409:    case CAPSET_TYPE_POINTER:",
          "3411:      return FALSE;",
          "3413:     break;",
          "3415:    case CAPSET_TYPE_SHARE:",
          "3417:      return FALSE;",
          "3419:     break;",
          "3421:    case CAPSET_TYPE_COLOR_CACHE:",
          "3423:      return FALSE;",
          "3425:     break;",
          "3427:    case CAPSET_TYPE_SOUND:",
          "3429:      return FALSE;",
          "3431:     break;",
          "3433:    case CAPSET_TYPE_INPUT:",
          "3435:      return FALSE;",
          "3437:     break;",
          "3439:    case CAPSET_TYPE_FONT:",
          "3441:      return FALSE;",
          "3443:     break;",
          "3445:    case CAPSET_TYPE_BRUSH:",
          "3447:      return FALSE;",
          "3449:     break;",
          "3451:    case CAPSET_TYPE_GLYPH_CACHE:",
          "3453:      return FALSE;",
          "3455:     break;",
          "3457:    case CAPSET_TYPE_OFFSCREEN_CACHE:",
          "3459:      return FALSE;",
          "3461:     break;",
          "3463:    case CAPSET_TYPE_BITMAP_CACHE_HOST_SUPPORT:",
          "3465:      return FALSE;",
          "3467:     break;",
          "3469:    case CAPSET_TYPE_BITMAP_CACHE_V2:",
          "3471:      return FALSE;",
          "3473:     break;",
          "3475:    case CAPSET_TYPE_VIRTUAL_CHANNEL:",
          "3477:      return FALSE;",
          "3479:     break;",
          "3481:    case CAPSET_TYPE_DRAW_NINE_GRID_CACHE:",
          "3483:      return FALSE;",
          "3485:     break;",
          "3487:    case CAPSET_TYPE_DRAW_GDI_PLUS:",
          "3489:      return FALSE;",
          "3491:     break;",
          "3493:    case CAPSET_TYPE_RAIL:",
          "3495:      return FALSE;",
          "3497:     break;",
          "3499:    case CAPSET_TYPE_WINDOW:",
          "3501:      return FALSE;",
          "3503:     break;",
          "3505:    case CAPSET_TYPE_COMP_DESK:",
          "3507:      return FALSE;",
          "3509:     break;",
          "3511:    case CAPSET_TYPE_MULTI_FRAGMENT_UPDATE:",
          "3513:      return FALSE;",
          "3515:     break;",
          "3517:    case CAPSET_TYPE_LARGE_POINTER:",
          "3519:      return FALSE;",
          "3521:     break;",
          "3523:    case CAPSET_TYPE_SURFACE_COMMANDS:",
          "3525:      return FALSE;",
          "3527:     break;",
          "3529:    case CAPSET_TYPE_BITMAP_CODECS:",
          "3531:      return FALSE;",
          "3533:     break;",
          "3535:    case CAPSET_TYPE_FRAME_ACKNOWLEDGE:",
          "3537:      return FALSE;",
          "3539:     break;",
          "3541:    case CAPSET_TYPE_BITMAP_CACHE_V3_CODEC_ID:",
          "3543:      return FALSE;",
          "3545:     break;",
          "",
          "[Removed Lines]",
          "3356:  BYTE *bm, *em;",
          "3360:   Stream_GetPointer(s, bm);",
          "3361:   rdp_read_capability_set_header(s, &length, &type);",
          "3362:   WLog_INFO(TAG, \"%s \", receiving ? \"Receiving\" : \"Sending\");",
          "3363:   em = bm + length;",
          "3365:   if (Stream_GetRemainingLength(s) < (size_t)(length - 4))",
          "3366:   {",
          "3367:    WLog_ERR(TAG, \"error processing stream\");",
          "3369:   }",
          "3374:     if (!rdp_print_general_capability_set(s, length))",
          "3380:     if (!rdp_print_bitmap_capability_set(s, length))",
          "3386:     if (!rdp_print_order_capability_set(s, length))",
          "3392:     if (!rdp_print_bitmap_cache_capability_set(s, length))",
          "3398:     if (!rdp_print_control_capability_set(s, length))",
          "3404:     if (!rdp_print_window_activation_capability_set(s, length))",
          "3410:     if (!rdp_print_pointer_capability_set(s, length))",
          "3416:     if (!rdp_print_share_capability_set(s, length))",
          "3422:     if (!rdp_print_color_cache_capability_set(s, length))",
          "3428:     if (!rdp_print_sound_capability_set(s, length))",
          "3434:     if (!rdp_print_input_capability_set(s, length))",
          "3440:     if (!rdp_print_font_capability_set(s, length))",
          "3446:     if (!rdp_print_brush_capability_set(s, length))",
          "3452:     if (!rdp_print_glyph_cache_capability_set(s, length))",
          "3458:     if (!rdp_print_offscreen_bitmap_cache_capability_set(s, length))",
          "3464:     if (!rdp_print_bitmap_cache_host_support_capability_set(s, length))",
          "3470:     if (!rdp_print_bitmap_cache_v2_capability_set(s, length))",
          "3476:     if (!rdp_print_virtual_channel_capability_set(s, length))",
          "3482:     if (!rdp_print_draw_nine_grid_cache_capability_set(s, length))",
          "3488:     if (!rdp_print_draw_gdiplus_cache_capability_set(s, length))",
          "3494:     if (!rdp_print_remote_programs_capability_set(s, length))",
          "3500:     if (!rdp_print_window_list_capability_set(s, length))",
          "3506:     if (!rdp_print_desktop_composition_capability_set(s, length))",
          "3512:     if (!rdp_print_multifragment_update_capability_set(s, length))",
          "3518:     if (!rdp_print_large_pointer_capability_set(s, length))",
          "3524:     if (!rdp_print_surface_commands_capability_set(s, length))",
          "3530:     if (!rdp_print_bitmap_codecs_capability_set(s, length))",
          "3536:     if (!rdp_print_frame_acknowledge_capability_set(s, length))",
          "3542:     if (!rdp_print_bitmap_cache_v3_codec_id_capability_set(s, length))",
          "",
          "[Added Lines]",
          "3362:   size_t rest;",
          "3363:   wStream sub;",
          "3364:   if (!rdp_read_capability_set_header(s, &length, &type))",
          "3365:    return FALSE;",
          "3367:   WLog_INFO(TAG, \"%s \", receiving ? \"Receiving\" : \"Sending\");",
          "3368:   Stream_StaticInit(&sub, Stream_Pointer(s), length - 4);",
          "3369:   if (!Stream_SafeSeek(s, length - 4))",
          "3375:     if (!rdp_print_general_capability_set(&sub))",
          "3381:     if (!rdp_print_bitmap_capability_set(&sub))",
          "3387:     if (!rdp_print_order_capability_set(&sub))",
          "3393:     if (!rdp_print_bitmap_cache_capability_set(&sub))",
          "3399:     if (!rdp_print_control_capability_set(&sub))",
          "3405:     if (!rdp_print_window_activation_capability_set(&sub))",
          "3411:     if (!rdp_print_pointer_capability_set(&sub))",
          "3417:     if (!rdp_print_share_capability_set(&sub))",
          "3423:     if (!rdp_print_color_cache_capability_set(&sub))",
          "3429:     if (!rdp_print_sound_capability_set(&sub))",
          "3435:     if (!rdp_print_input_capability_set(&sub))",
          "3441:     if (!rdp_print_font_capability_set(&sub))",
          "3447:     if (!rdp_print_brush_capability_set(&sub))",
          "3453:     if (!rdp_print_glyph_cache_capability_set(&sub))",
          "3459:     if (!rdp_print_offscreen_bitmap_cache_capability_set(&sub))",
          "3465:     if (!rdp_print_bitmap_cache_host_support_capability_set(&sub))",
          "3471:     if (!rdp_print_bitmap_cache_v2_capability_set(&sub))",
          "3477:     if (!rdp_print_virtual_channel_capability_set(&sub))",
          "3483:     if (!rdp_print_draw_nine_grid_cache_capability_set(&sub))",
          "3489:     if (!rdp_print_draw_gdiplus_cache_capability_set(&sub))",
          "3495:     if (!rdp_print_remote_programs_capability_set(&sub))",
          "3501:     if (!rdp_print_window_list_capability_set(&sub))",
          "3507:     if (!rdp_print_desktop_composition_capability_set(&sub))",
          "3513:     if (!rdp_print_multifragment_update_capability_set(&sub))",
          "3519:     if (!rdp_print_large_pointer_capability_set(&sub))",
          "3525:     if (!rdp_print_surface_commands_capability_set(&sub))",
          "3531:     if (!rdp_print_bitmap_codecs_capability_set(&sub))",
          "3537:     if (!rdp_print_frame_acknowledge_capability_set(&sub))",
          "3543:     if (!rdp_print_bitmap_cache_v3_codec_id_capability_set(&sub))",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3549:     break;",
          "3550:   }",
          "3553:   {",
          "3554:    WLog_ERR(TAG,",
          "3555:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",",
          "3557:   }",
          "3560:   numberCapabilities--;",
          "3561:  }",
          "",
          "[Removed Lines]",
          "3552:   if (Stream_Pointer(s) != em)",
          "3556:             type, Stream_Pointer(s) - bm, em - bm);",
          "3559:   Stream_SetPointer(s, em);",
          "",
          "[Added Lines]",
          "3553:   rest = Stream_GetRemainingLength(&sub);",
          "3554:   if (rest > 0)",
          "3558:             type, length + rest, length);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3574:  start = Stream_GetPosition(s);",
          "3575:  while (numberCapabilities > 0 && Stream_GetRemainingLength(s) >= 4)",
          "3576:  {",
          "3577:   UINT16 type;",
          "3578:   UINT16 length;",
          "3583:   if (type < 32)",
          "3584:   {",
          "",
          "[Removed Lines]",
          "3579:   BYTE* em;",
          "3580:   BYTE* bm = Stream_Pointer(s);",
          "3581:   rdp_read_capability_set_header(s, &length, &type);",
          "",
          "[Added Lines]",
          "3578:   size_t rest;",
          "3581:   wStream sub;",
          "3583:   if (!rdp_read_capability_set_header(s, &length, &type))",
          "3584:    return FALSE;",
          "3585:   Stream_StaticInit(&sub, Stream_Pointer(s), length - 4);",
          "3586:   if (!Stream_SafeSeek(s, length - 4))",
          "3587:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3589:    WLog_WARN(TAG, \"not handling capability type %\" PRIu16 \" yet\", type);",
          "3590:   }",
          "3600:   treated = TRUE;",
          "3602:   switch (type)",
          "3603:   {",
          "3604:    case CAPSET_TYPE_GENERAL:",
          "3606:      return FALSE;",
          "3608:     break;",
          "3610:    case CAPSET_TYPE_BITMAP:",
          "3612:      return FALSE;",
          "3614:     break;",
          "3616:    case CAPSET_TYPE_ORDER:",
          "3618:      return FALSE;",
          "3620:     break;",
          "3622:    case CAPSET_TYPE_POINTER:",
          "3624:      return FALSE;",
          "3626:     break;",
          "3628:    case CAPSET_TYPE_INPUT:",
          "3630:      return FALSE;",
          "3632:     break;",
          "3634:    case CAPSET_TYPE_VIRTUAL_CHANNEL:",
          "3636:      return FALSE;",
          "3638:     break;",
          "3640:    case CAPSET_TYPE_SHARE:",
          "3642:      return FALSE;",
          "3644:     break;",
          "3646:    case CAPSET_TYPE_COLOR_CACHE:",
          "3648:      return FALSE;",
          "3650:     break;",
          "3652:    case CAPSET_TYPE_FONT:",
          "3654:      return FALSE;",
          "3656:     break;",
          "3658:    case CAPSET_TYPE_DRAW_GDI_PLUS:",
          "3660:      return FALSE;",
          "3662:     break;",
          "3664:    case CAPSET_TYPE_RAIL:",
          "3666:      return FALSE;",
          "3668:     break;",
          "3670:    case CAPSET_TYPE_WINDOW:",
          "3672:      return FALSE;",
          "3674:     break;",
          "3676:    case CAPSET_TYPE_MULTI_FRAGMENT_UPDATE:",
          "3678:      return FALSE;",
          "3680:     break;",
          "3682:    case CAPSET_TYPE_LARGE_POINTER:",
          "3684:      return FALSE;",
          "3686:     break;",
          "3688:    case CAPSET_TYPE_COMP_DESK:",
          "3690:      return FALSE;",
          "3692:     break;",
          "3694:    case CAPSET_TYPE_SURFACE_COMMANDS:",
          "3696:      return FALSE;",
          "3698:     break;",
          "3700:    case CAPSET_TYPE_BITMAP_CODECS:",
          "3702:      return FALSE;",
          "3704:     break;",
          "3706:    case CAPSET_TYPE_FRAME_ACKNOWLEDGE:",
          "3708:      return FALSE;",
          "3710:     break;",
          "3712:    case CAPSET_TYPE_BITMAP_CACHE_V3_CODEC_ID:",
          "3714:      return FALSE;",
          "3716:     break;",
          "",
          "[Removed Lines]",
          "3592:   em = bm + length;",
          "3594:   if (Stream_GetRemainingLength(s) + 4 < ((size_t)length))",
          "3595:   {",
          "3596:    WLog_ERR(TAG, \"error processing stream\");",
          "3597:    return FALSE;",
          "3598:   }",
          "3605:     if (!rdp_read_general_capability_set(s, length, settings))",
          "3611:     if (!rdp_read_bitmap_capability_set(s, length, settings))",
          "3617:     if (!rdp_read_order_capability_set(s, length, settings))",
          "3623:     if (!rdp_read_pointer_capability_set(s, length, settings))",
          "3629:     if (!rdp_read_input_capability_set(s, length, settings))",
          "3635:     if (!rdp_read_virtual_channel_capability_set(s, length, settings))",
          "3641:     if (!rdp_read_share_capability_set(s, length, settings))",
          "3647:     if (!rdp_read_color_cache_capability_set(s, length, settings))",
          "3653:     if (!rdp_read_font_capability_set(s, length, settings))",
          "3659:     if (!rdp_read_draw_gdiplus_cache_capability_set(s, length, settings))",
          "3665:     if (!rdp_read_remote_programs_capability_set(s, length, settings))",
          "3671:     if (!rdp_read_window_list_capability_set(s, length, settings))",
          "3677:     if (!rdp_read_multifragment_update_capability_set(s, length, settings))",
          "3683:     if (!rdp_read_large_pointer_capability_set(s, length, settings))",
          "3689:     if (!rdp_read_desktop_composition_capability_set(s, length, settings))",
          "3695:     if (!rdp_read_surface_commands_capability_set(s, length, settings))",
          "3701:     if (!rdp_read_bitmap_codecs_capability_set(s, length, settings))",
          "3707:     if (!rdp_read_frame_acknowledge_capability_set(s, length, settings))",
          "3713:     if (!rdp_read_bitmap_cache_v3_codec_id_capability_set(s, length, settings))",
          "",
          "[Added Lines]",
          "3603:     if (!rdp_read_general_capability_set(&sub, settings))",
          "3609:     if (!rdp_read_bitmap_capability_set(&sub, settings))",
          "3615:     if (!rdp_read_order_capability_set(&sub, settings))",
          "3621:     if (!rdp_read_pointer_capability_set(&sub, settings))",
          "3627:     if (!rdp_read_input_capability_set(&sub, settings))",
          "3633:     if (!rdp_read_virtual_channel_capability_set(&sub, settings))",
          "3639:     if (!rdp_read_share_capability_set(&sub, settings))",
          "3645:     if (!rdp_read_color_cache_capability_set(&sub, settings))",
          "3651:     if (!rdp_read_font_capability_set(&sub, settings))",
          "3657:     if (!rdp_read_draw_gdiplus_cache_capability_set(&sub, settings))",
          "3663:     if (!rdp_read_remote_programs_capability_set(&sub, settings))",
          "3669:     if (!rdp_read_window_list_capability_set(&sub, settings))",
          "3675:     if (!rdp_read_multifragment_update_capability_set(&sub, settings))",
          "3681:     if (!rdp_read_large_pointer_capability_set(&sub, settings))",
          "3687:     if (!rdp_read_desktop_composition_capability_set(&sub, settings))",
          "3693:     if (!rdp_read_surface_commands_capability_set(&sub, settings))",
          "3699:     if (!rdp_read_bitmap_codecs_capability_set(&sub, settings))",
          "3705:     if (!rdp_read_frame_acknowledge_capability_set(&sub, settings))",
          "3711:     if (!rdp_read_bitmap_cache_v3_codec_id_capability_set(&sub, settings))",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3728:     switch (type)",
          "3729:     {",
          "3730:      case CAPSET_TYPE_BITMAP_CACHE:",
          "3732:        return FALSE;",
          "3734:       break;",
          "3736:      case CAPSET_TYPE_BITMAP_CACHE_V2:",
          "3738:        return FALSE;",
          "3740:       break;",
          "3742:      case CAPSET_TYPE_BRUSH:",
          "3744:        return FALSE;",
          "3746:       break;",
          "3748:      case CAPSET_TYPE_GLYPH_CACHE:",
          "3750:        return FALSE;",
          "3752:       break;",
          "3754:      case CAPSET_TYPE_OFFSCREEN_CACHE:",
          "3756:        return FALSE;",
          "3758:       break;",
          "3760:      case CAPSET_TYPE_SOUND:",
          "3762:        return FALSE;",
          "3764:       break;",
          "3766:      case CAPSET_TYPE_CONTROL:",
          "3768:        return FALSE;",
          "3770:       break;",
          "3772:      case CAPSET_TYPE_ACTIVATION:",
          "3774:        return FALSE;",
          "3776:       break;",
          "3778:      case CAPSET_TYPE_DRAW_NINE_GRID_CACHE:",
          "3780:        return FALSE;",
          "3782:       break;",
          "",
          "[Removed Lines]",
          "3731:       if (!rdp_read_bitmap_cache_capability_set(s, length, settings))",
          "3737:       if (!rdp_read_bitmap_cache_v2_capability_set(s, length, settings))",
          "3743:       if (!rdp_read_brush_capability_set(s, length, settings))",
          "3749:       if (!rdp_read_glyph_cache_capability_set(s, length, settings))",
          "3755:       if (!rdp_read_offscreen_bitmap_cache_capability_set(s, length, settings))",
          "3761:       if (!rdp_read_sound_capability_set(s, length, settings))",
          "3767:       if (!rdp_read_control_capability_set(s, length, settings))",
          "3773:       if (!rdp_read_window_activation_capability_set(s, length, settings))",
          "3779:       if (!rdp_read_draw_nine_grid_cache_capability_set(s, length, settings))",
          "",
          "[Added Lines]",
          "3729:       if (!rdp_read_bitmap_cache_capability_set(&sub, settings))",
          "3735:       if (!rdp_read_bitmap_cache_v2_capability_set(&sub, settings))",
          "3741:       if (!rdp_read_brush_capability_set(&sub, settings))",
          "3747:       if (!rdp_read_glyph_cache_capability_set(&sub, settings))",
          "3753:       if (!rdp_read_offscreen_bitmap_cache_capability_set(&sub, settings))",
          "3759:       if (!rdp_read_sound_capability_set(&sub, settings))",
          "3765:       if (!rdp_read_control_capability_set(&sub, settings))",
          "3771:       if (!rdp_read_window_activation_capability_set(&sub, settings))",
          "3777:       if (!rdp_read_draw_nine_grid_cache_capability_set(&sub, settings))",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3793:     switch (type)",
          "3794:     {",
          "3795:      case CAPSET_TYPE_BITMAP_CACHE_HOST_SUPPORT:",
          "3797:        return FALSE;",
          "3799:       break;",
          "",
          "[Removed Lines]",
          "3796:       if (!rdp_read_bitmap_cache_host_support_capability_set(s, length, settings))",
          "",
          "[Added Lines]",
          "3794:       if (!rdp_read_bitmap_cache_host_support_capability_set(&sub, settings))",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3806:    }",
          "3807:   }",
          "3810:   {",
          "3811:    WLog_ERR(TAG,",
          "3815:   }",
          "3817:   numberCapabilities--;",
          "",
          "[Removed Lines]",
          "3809:   if (Stream_Pointer(s) != em)",
          "3812:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",",
          "3813:             type, Stream_Pointer(s) - bm, em - bm);",
          "3814:    Stream_SetPointer(s, em);",
          "",
          "[Added Lines]",
          "3807:   rest = Stream_GetRemainingLength(&sub);",
          "3808:   if (rest > 0)",
          "3811:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIu16",
          "3812:             \"\",",
          "3813:             type, rest + length, length);",
          "",
          "---------------"
        ]
      }
    }
  ]
}