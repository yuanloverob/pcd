{
  "cve_id": "CVE-2017-12902",
  "cve_desc": "The Zephyr parser in tcpdump before 4.9.2 has a buffer over-read in print-zephyr.c, several functions.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "d17507ffa3e9742199b02a66aa940e79ababfa30",
  "patch_info": {
    "commit_hash": "d17507ffa3e9742199b02a66aa940e79ababfa30",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/d17507ffa3e9742199b02a66aa940e79ababfa30",
    "files": [
      "print-zephyr.c",
      "tests/TESTLIST",
      "tests/zephyr-oobr.out",
      "tests/zephyr-oobr.pcap"
    ],
    "message": "CVE-2017-12902/Zephyr: Fix bounds checking.\n\nUse ND_TTEST() rather than comparing against ndo->ndo_snapend ourselves;\nit's easy to get the tests wrong.\n\nCheck for running out of packet data before checking for running out of\ncaptured data, and distinguish between running out of packet data (which\nmight just mean \"no more strings\") and running out of captured data\n(which means \"truncated\").\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom\u00e4ki.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-zephyr.c||print-zephyr.c"
    ]
  },
  "patch_diff": {
    "print-zephyr.c||print-zephyr.c": [
      "File: print-zephyr.c -> print-zephyr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83: static char z_buf[256];",
      "85: static const char *",
      "87: {",
      "88:     const char *s;",
      "95:     s = *pptr;",
      "97:  (*pptr)++;",
      "98:  (*len)--;",
      "99:     }",
      "100:     (*pptr)++;",
      "101:     (*len)--;",
      "104:     return s;",
      "105: }",
      "",
      "[Removed Lines]",
      "86: parse_field(netdissect_options *ndo, const char **pptr, int *len)",
      "90:     if (*len <= 0 || !pptr || !*pptr)",
      "91:  return NULL;",
      "92:     if (*pptr > (const char *) ndo->ndo_snapend)",
      "93:  return NULL;",
      "96:     while (*pptr <= (const char *) ndo->ndo_snapend && *len >= 0 && **pptr) {",
      "102:     if (*len < 0 || *pptr > (const char *) ndo->ndo_snapend)",
      "103:  return NULL;",
      "",
      "[Added Lines]",
      "86: parse_field(netdissect_options *ndo, const char **pptr, int *len, int *truncated)",
      "93:     for (;;) {",
      "94:  if (*len == 0) {",
      "96:      return NULL;",
      "97:  }",
      "98:  if (!ND_TTEST(**pptr)) {",
      "101:      return NULL;",
      "102:  }",
      "103:  if (**pptr == '\\0') {",
      "105:      break;",
      "106:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "139:     int parselen = length;",
      "140:     const char *s;",
      "141:     int lose = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152:     int truncated = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "149:     z.sender = 0;",
      "150:     z.recipient = 0;",
      "154:  if (!s) lose = 1;",
      "156: #define PARSE_FIELD_INT(field)   \\",
      "",
      "[Removed Lines]",
      "152: #define PARSE_STRING    \\",
      "153:  s = parse_field(ndo, &parse, &parselen); \\",
      "",
      "[Added Lines]",
      "163: #define PARSE_STRING      \\",
      "164:  s = parse_field(ndo, &parse, &parselen, &truncated); \\",
      "165:  if (truncated) goto trunc;    \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "183:     PARSE_FIELD_INT(z.multi);",
      "184:     PARSE_FIELD_STR(z.multi_uid);",
      "191:     ND_PRINT((ndo, \" zephyr\"));",
      "192:     if (strncmp(z.version+4, \"0.2\", 3)) {",
      "",
      "[Removed Lines]",
      "186:     if (lose) {",
      "187:  ND_PRINT((ndo, \" [|zephyr] (%d)\", length));",
      "188:  return;",
      "189:     }",
      "",
      "[Added Lines]",
      "198:     if (lose)",
      "199:         goto trunc;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "318:     ND_PRINT((ndo, \" to %s\", z_triple(z.class, z.inst, z.recipient)));",
      "319:     if (*z.opcode)",
      "320:  ND_PRINT((ndo, \" op %s\", z.opcode));",
      "321: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331:     return;",
      "333: trunc:",
      "334:     ND_PRINT((ndo, \" [|zephyr] (%d)\", length));",
      "335:     return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d07444a5f284ac724cdc7a120831f1585e7185b9",
      "candidate_info": {
        "commit_hash": "d07444a5f284ac724cdc7a120831f1585e7185b9",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/d07444a5f284ac724cdc7a120831f1585e7185b9",
        "files": [
          "print-ipx.c",
          "print-mpls.c",
          "print-msnlb.c",
          "print-zephyr.c",
          "tests/hoobr_parse_field.out",
          "tests/msnlb2.out"
        ],
        "message": "Add more nd_print_trunc() calls\n\nUpdate the output of some tests accordingly.",
        "before_after_code_files": [
          "print-ipx.c||print-ipx.c",
          "print-mpls.c||print-mpls.c",
          "print-msnlb.c||print-msnlb.c",
          "print-zephyr.c||print-zephyr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-zephyr.c||print-zephyr.c"
          ],
          "candidate": [
            "print-zephyr.c||print-zephyr.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ipx.c||print-ipx.c": [
          "File: print-ipx.c -> print-ipx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  ipx_decode(ndo, ipx, p + ipxSize, length - ipxSize);",
          "94:  return;",
          "95: trunc:",
          "97: }",
          "99: static const char *",
          "",
          "[Removed Lines]",
          "96:  ND_PRINT(\"[|ipx %u]\", length);",
          "",
          "[Added Lines]",
          "96:  nd_print_trunc(ndo);",
          "",
          "---------------"
        ],
        "print-mpls.c||print-mpls.c": [
          "File: print-mpls.c -> print-mpls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  ND_PRINT(\"MPLS\");",
          "70:  do {",
          "71:   ND_TCHECK_LEN(p, sizeof(label_entry));",
          "76:   label_entry = EXTRACT_BE_U_4(p);",
          "77:   ND_PRINT(\"%s(label %u\",",
          "78:          (label_stack_depth && ndo->ndo_vflag) ? \"\\n\\t\" : \" \",",
          "",
          "[Removed Lines]",
          "72:   if (length < sizeof(label_entry)) {",
          "73:    ND_PRINT(\"[|MPLS], length %u\", length);",
          "74:    return;",
          "75:   }",
          "",
          "[Added Lines]",
          "72:   if (length < sizeof(label_entry))",
          "73:    goto trunc;",
          "",
          "---------------"
        ],
        "print-msnlb.c||print-msnlb.c": [
          "File: print-msnlb.c -> print-msnlb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  ND_PRINT(\" host IP: %s\", ipaddr_string(ndo, hb->host_ip));",
          "63:  return;",
          "64: trunc:",
          "66: }",
          "",
          "[Removed Lines]",
          "65:  ND_PRINT(\"[|MS NLB]\");",
          "",
          "[Added Lines]",
          "65:  nd_print_trunc(ndo);",
          "",
          "---------------"
        ],
        "print-zephyr.c||print-zephyr.c": [
          "File: print-zephyr.c -> print-zephyr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:     return;",
          "345: trunc:",
          "347:     return;",
          "348: }",
          "",
          "[Removed Lines]",
          "346:     ND_PRINT(\" [|zephyr] (%d)\", length);",
          "",
          "[Added Lines]",
          "346:     nd_print_trunc(ndo);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a28df231d469d78763dfaab9ee9ad4d0a73fca1",
      "candidate_info": {
        "commit_hash": "4a28df231d469d78763dfaab9ee9ad4d0a73fca1",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/4a28df231d469d78763dfaab9ee9ad4d0a73fca1",
        "files": [
          "print-atm.c",
          "print-cfm.c",
          "print-ip.c",
          "print-slow.c",
          "print-zephyr.c"
        ],
        "message": "Use ND_TTEST_SIZE()/ND_TCHECK_SIZE() macros (2/n)",
        "before_after_code_files": [
          "print-atm.c||print-atm.c",
          "print-cfm.c||print-cfm.c",
          "print-ip.c||print-ip.c",
          "print-slow.c||print-slow.c",
          "print-zephyr.c||print-zephyr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-zephyr.c||print-zephyr.c"
          ],
          "candidate": [
            "print-zephyr.c||print-zephyr.c"
          ]
        }
      },
      "candidate_diff": {
        "print-atm.c||print-atm.c": [
          "File: print-atm.c -> print-atm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:     switch (cell_type << 4 | func_type) {",
          "497:     case (OAM_CELLTYPE_FM << 4 | OAM_FM_FUNCTYPE_LOOPBACK):",
          "498:         oam_ptr.oam_fm_loopback = (const struct oam_fm_loopback_t *)(p + OAM_CELLTYPE_FUNCTYPE_LEN);",
          "500:         ND_PRINT((ndo, \"\\n\\tLoopback-Indicator %s, Correlation-Tag 0x%08x\",",
          "501:                tok2str(oam_fm_loopback_indicator_values,",
          "502:                        \"Unknown\",",
          "",
          "[Removed Lines]",
          "499:         ND_TCHECK(*oam_ptr.oam_fm_loopback);",
          "",
          "[Added Lines]",
          "499:         ND_TCHECK_SIZE(oam_ptr.oam_fm_loopback);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:     case (OAM_CELLTYPE_FM << 4 | OAM_FM_FUNCTYPE_AIS):",
          "520:     case (OAM_CELLTYPE_FM << 4 | OAM_FM_FUNCTYPE_RDI):",
          "521:         oam_ptr.oam_fm_ais_rdi = (const struct oam_fm_ais_rdi_t *)(p + OAM_CELLTYPE_FUNCTYPE_LEN);",
          "523:         ND_PRINT((ndo, \"\\n\\tFailure-type 0x%02x\", EXTRACT_U_1(oam_ptr.oam_fm_ais_rdi->failure_type)));",
          "524:         ND_PRINT((ndo, \"\\n\\tLocation-ID \"));",
          "525:         for (idx = 0; idx < sizeof(oam_ptr.oam_fm_ais_rdi->failure_location); idx++) {",
          "",
          "[Removed Lines]",
          "522:         ND_TCHECK(*oam_ptr.oam_fm_ais_rdi);",
          "",
          "[Added Lines]",
          "522:         ND_TCHECK_SIZE(oam_ptr.oam_fm_ais_rdi);",
          "",
          "---------------"
        ],
        "print-cfm.c||print-cfm.c": [
          "File: print-cfm.c -> print-cfm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:         }",
          "346:         if (tlen < sizeof(*msg_ptr.cfm_ccm))",
          "347:             goto tooshort;",
          "350:         ccm_interval = CFM_EXTRACT_CCM_INTERVAL(flags);",
          "351:         ND_PRINT((ndo, \", Flags [CCM Interval %u%s]\",",
          "",
          "[Removed Lines]",
          "348:         ND_TCHECK(*msg_ptr.cfm_ccm);",
          "",
          "[Added Lines]",
          "348:         ND_TCHECK_SIZE(msg_ptr.cfm_ccm);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:         }",
          "476:         if (tlen < sizeof(*msg_ptr.cfm_ltm))",
          "477:             goto tooshort;",
          "480:         ND_PRINT((ndo, \", Flags [%s]\",",
          "481:                bittok2str(cfm_ltm_flag_values, \"none\", flags)));",
          "",
          "[Removed Lines]",
          "478:         ND_TCHECK(*msg_ptr.cfm_ltm);",
          "",
          "[Added Lines]",
          "478:         ND_TCHECK_SIZE(msg_ptr.cfm_ltm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:         }",
          "499:         if (tlen < sizeof(*msg_ptr.cfm_ltr))",
          "500:             goto tooshort;",
          "503:         ND_PRINT((ndo, \", Flags [%s]\",",
          "504:                bittok2str(cfm_ltr_flag_values, \"none\", flags)));",
          "",
          "[Removed Lines]",
          "501:         ND_TCHECK(*msg_ptr.cfm_ltr);",
          "",
          "[Added Lines]",
          "501:         ND_TCHECK_SIZE(msg_ptr.cfm_ltr);",
          "",
          "---------------"
        ],
        "print-ip.c||print-ip.c": [
          "File: print-ip.c -> print-ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:  if (!ndo->ndo_eflag)",
          "557:   ND_PRINT((ndo, \"IP \"));",
          "560:  if (length < sizeof (struct ip)) {",
          "561:   ND_PRINT((ndo, \"truncated-ip %u\", length));",
          "562:   return;",
          "",
          "[Removed Lines]",
          "559:  ND_TCHECK(*ipds->ip);",
          "",
          "[Added Lines]",
          "559:  ND_TCHECK_SIZE(ipds->ip);",
          "",
          "---------------"
        ],
        "print-slow.c||print-slow.c": [
          "File: print-slow.c -> print-slow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     ptr.slow_oam_common_header = (const struct slow_oam_common_header_t *)tptr;",
          "523:     if (tlen < sizeof(*ptr.slow_oam_common_header))",
          "524:         goto tooshort;",
          "526:     tptr += sizeof(struct slow_oam_common_header_t);",
          "527:     tlen -= sizeof(struct slow_oam_common_header_t);",
          "",
          "[Removed Lines]",
          "525:     ND_TCHECK(*ptr.slow_oam_common_header);",
          "",
          "[Added Lines]",
          "525:     ND_TCHECK_SIZE(ptr.slow_oam_common_header);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:             ptr.slow_oam_tlv_header = (const struct slow_oam_tlv_header_t *)tptr;",
          "540:             if (tlen < sizeof(*ptr.slow_oam_tlv_header))",
          "541:                 goto tooshort;",
          "543:             type = EXTRACT_U_1(ptr.slow_oam_tlv_header->type);",
          "544:             length = EXTRACT_U_1(ptr.slow_oam_tlv_header->length);",
          "545:             ND_PRINT((ndo, \"\\n\\t  %s Information Type (%u), length %u\",",
          "",
          "[Removed Lines]",
          "542:             ND_TCHECK(*ptr.slow_oam_tlv_header);",
          "",
          "[Added Lines]",
          "542:             ND_TCHECK_SIZE(ptr.slow_oam_tlv_header);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "637:             ptr.slow_oam_tlv_header = (const struct slow_oam_tlv_header_t *)tptr;",
          "638:             if (tlen < sizeof(*ptr.slow_oam_tlv_header))",
          "639:                 goto tooshort;",
          "641:             type = EXTRACT_U_1(ptr.slow_oam_tlv_header->type);",
          "642:             length = EXTRACT_U_1(ptr.slow_oam_tlv_header->length);",
          "643:             ND_PRINT((ndo, \"\\n\\t  %s Link Event Type (%u), length %u\",",
          "",
          "[Removed Lines]",
          "640:             ND_TCHECK(*ptr.slow_oam_tlv_header);",
          "",
          "[Added Lines]",
          "640:             ND_TCHECK_SIZE(ptr.slow_oam_tlv_header);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:         tlv.slow_oam_loopbackctrl = (const struct slow_oam_loopbackctrl_t *)tptr;",
          "720:         if (tlen < sizeof(*tlv.slow_oam_loopbackctrl))",
          "721:             goto tooshort;",
          "723:         command = EXTRACT_U_1(tlv.slow_oam_loopbackctrl->command);",
          "724:         ND_PRINT((ndo, \"\\n\\t  Command %s (%u)\",",
          "725:                tok2str(slow_oam_loopbackctrl_cmd_values,",
          "",
          "[Removed Lines]",
          "722:         ND_TCHECK(*tlv.slow_oam_loopbackctrl);",
          "",
          "[Added Lines]",
          "722:         ND_TCHECK_SIZE(tlv.slow_oam_loopbackctrl);",
          "",
          "---------------"
        ],
        "print-zephyr.c||print-zephyr.c": [
          "File: print-zephyr.c -> print-zephyr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:      return NULL;",
          "97:  }",
          "101:      return NULL;",
          "",
          "[Removed Lines]",
          "98:  if (!ND_TTEST(**pptr)) {",
          "",
          "[Added Lines]",
          "98:  if (!ND_TTEST_SIZE(*pptr)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}