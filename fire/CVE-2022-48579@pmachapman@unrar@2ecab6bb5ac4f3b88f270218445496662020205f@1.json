{
  "cve_id": "CVE-2022-48579",
  "cve_desc": "UnRAR before 6.2.3 allows extraction of files outside of the destination folder via symlink chains.",
  "repo": "pmachapman/unrar",
  "patch_hash": "2ecab6bb5ac4f3b88f270218445496662020205f",
  "patch_info": {
    "commit_hash": "2ecab6bb5ac4f3b88f270218445496662020205f",
    "repo": "pmachapman/unrar",
    "commit_url": "https://github.com/pmachapman/unrar/commit/2ecab6bb5ac4f3b88f270218445496662020205f#diff-ca3086f578522062d7e390ed2cd7e10f646378a8b8cbf287a6e4db5966df68ee",
    "files": [
      "arcread.cpp",
      "crypt.hpp",
      "dll.rc",
      "extinfo.cpp",
      "extinfo.hpp",
      "extract.cpp",
      "extract.hpp",
      "hardlinks.cpp",
      "model.cpp",
      "pathfn.cpp",
      "timefn.hpp",
      "ulinks.cpp",
      "version.hpp",
      "win32stm.cpp"
    ],
    "message": "Updated to 6.2.3",
    "before_after_code_files": [
      "arcread.cpp||arcread.cpp",
      "crypt.hpp||crypt.hpp",
      "dll.rc||dll.rc",
      "extinfo.cpp||extinfo.cpp",
      "extinfo.hpp||extinfo.hpp",
      "extract.cpp||extract.cpp",
      "extract.hpp||extract.hpp",
      "hardlinks.cpp||hardlinks.cpp",
      "model.cpp||model.cpp",
      "pathfn.cpp||pathfn.cpp",
      "timefn.hpp||timefn.hpp",
      "ulinks.cpp||ulinks.cpp",
      "version.hpp||version.hpp",
      "win32stm.cpp||win32stm.cpp"
    ]
  },
  "patch_diff": {
    "arcread.cpp||arcread.cpp": [
      "File: arcread.cpp -> arcread.cpp"
    ],
    "crypt.hpp||crypt.hpp": [
      "File: crypt.hpp -> crypt.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #define CRYPT_BLOCK_SIZE         16",
      "16: #define CRYPT_BLOCK_MASK         (CRYPT_BLOCK_SIZE-1) // 0xf",
      "22: #define CRYPT5_KDF_LG2_COUNT_MAX 24 // LOG2 of maximum accepted iteration count.",
      "23: #define CRYPT_VERSION             0 // Supported encryption version.",
      "",
      "[Removed Lines]",
      "20: #define CRYPT5_KDF_LG2_COUNT     16 // LOG2 of PDKDF2 iteration count.",
      "",
      "[Added Lines]",
      "18: #define CRYPT5_KDF_LG2_COUNT     15 // LOG2 of PDKDF2 iteration count.",
      "",
      "---------------"
    ],
    "dll.rc||dll.rc": [
      "File: dll.rc -> dll.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #include <commctrl.h>",
      "4: VS_VERSION_INFO VERSIONINFO",
      "7: FILEOS VOS__WINDOWS32",
      "8: FILETYPE VFT_APP",
      "9: {",
      "",
      "[Removed Lines]",
      "5: FILEVERSION 6, 20, 2, 681",
      "6: PRODUCTVERSION 6, 20, 2, 681",
      "",
      "[Added Lines]",
      "5: FILEVERSION 6, 20, 3, 714",
      "6: PRODUCTVERSION 6, 20, 3, 714",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
      "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
      "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
      "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2022\\0\"",
      "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
      "21:     }",
      "",
      "[Removed Lines]",
      "17:       VALUE \"FileVersion\", \"6.20.2\\0\"",
      "18:       VALUE \"ProductVersion\", \"6.20.2\\0\"",
      "",
      "[Added Lines]",
      "17:       VALUE \"FileVersion\", \"6.20.3\\0\"",
      "18:       VALUE \"ProductVersion\", \"6.20.3\\0\"",
      "",
      "---------------"
    ],
    "extinfo.cpp||extinfo.cpp": [
      "File: extinfo.cpp -> extinfo.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "112: }",
      "115: bool IsRelativeSymlinkSafe(CommandData *Cmd,const wchar *SrcName,const wchar *PrepSrcName,const wchar *TargetName)",
      "116: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117: bool LinksToDirs(const wchar *SrcName,const wchar *SkipPart,std::wstring &LastChecked)",
      "118: {",
      "134:   wchar Path[NM];",
      "135:   if (wcslen(SrcName)>=ASIZE(Path))",
      "136:     return false;  // It should not be that long, skip.",
      "137:   wcsncpyz(Path,SrcName,ASIZE(Path));",
      "139:   size_t SkipLength=wcslen(SkipPart);",
      "141:   if (SkipLength>0 && wcsncmp(Path,SkipPart,SkipLength)!=0)",
      "142:     SkipLength=0; // Parameter validation, not really needed now.",
      "145:   for (uint I=0;Path[I]!=0 && I<LastChecked.size() && Path[I]==LastChecked[I];I++)",
      "146:     if (IsPathDiv(Path[I]) && I>SkipLength)",
      "147:       SkipLength=I;",
      "149:   wchar *Name=Path;",
      "150:   if (SkipLength>0)",
      "151:   {",
      "153:     Name+=SkipLength;",
      "154:     while (IsPathDiv(*Name))",
      "155:       Name++;",
      "156:   }",
      "158:   for (wchar *s=Path+wcslen(Path)-1;s>Name;s--)",
      "159:     if (IsPathDiv(*s))",
      "160:     {",
      "162:       FindData FD;",
      "163:       if (FindFile::FastFind(Path,&FD,true) && FD.IsLink)",
      "164: #ifdef _WIN_ALL",
      "165:         if (!DelDir(Path))",
      "166: #else",
      "167:         if (!DelFile(Path))",
      "168: #endif",
      "169:           return false; // Couldn't delete the symlink to replace it with directory.",
      "170:     }",
      "171:   LastChecked=SrcName;",
      "173:   return true;",
      "174: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160: }",
      "164: {",
      "165: #if defined(SAVE_LINKS) && defined(_UNIX)",
      "167:   if (Arc.Format==RARFMT15)",
      "169:   if (Arc.Format==RARFMT50)",
      "170:     return ExtractUnixLink50(Cmd,LinkName,&Arc.FileHead);",
      "174:   if (Arc.Format==RARFMT50)",
      "",
      "[Removed Lines]",
      "163: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName)",
      "168:     return ExtractUnixLink30(Cmd,DataIO,Arc,LinkName);",
      "171: #elif defined _WIN_ALL",
      "",
      "[Added Lines]",
      "229: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName,bool &UpLink)",
      "236:   UpLink=true; // Assume the target might include potentially unsafe \"..\".",
      "237: #if defined(SAVE_LINKS) && defined(_UNIX) || defined(_WIN_ALL)",
      "238:   if (Arc.Format==RARFMT50) // For RAR5 archives we can check RedirName for both Unix and Windows.",
      "239:     UpLink=wcsstr(Arc.FileHead.RedirName,L\"..\")!=NULL;",
      "240: #endif",
      "245:     return ExtractUnixLink30(Cmd,DataIO,Arc,LinkName,UpLink);",
      "248: #elif defined(_WIN_ALL)",
      "",
      "---------------"
    ],
    "extinfo.hpp||extinfo.hpp": [
      "File: extinfo.hpp -> extinfo.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef _RAR_EXTINFO_",
      "2: #define _RAR_EXTINFO_",
      "4: bool IsRelativeSymlinkSafe(CommandData *Cmd,const wchar *SrcName,const wchar *PrepSrcName,const wchar *TargetName);",
      "6: #ifdef _UNIX",
      "7: void SetUnixOwner(Archive &Arc,const wchar *FileName);",
      "8: #endif",
      "",
      "[Removed Lines]",
      "5: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName);",
      "",
      "[Added Lines]",
      "4: bool LinksToDirs(const wchar *SrcName,const wchar *SkipPart,std::wstring &LastChecked);",
      "6: bool ExtractSymlink(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName,bool &UpLink);",
      "",
      "---------------"
    ],
    "extract.cpp||extract.cpp": [
      "File: extract.cpp -> extract.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   memset(Analyze,0,sizeof(*Analyze));",
      "14:   TotalFileCount=0;",
      "15:   Unp=new Unpack(&DataIO);",
      "16: #ifdef RAR_SMP",
      "17:   Unp->SetThreads(Cmd->Threads);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:   UpLinkExtracted=false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   ArcAnalyzed=false;",
      "127:   StartTime.SetCurrentTime();",
      "128: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135:   LastCheckedSymlink.clear();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "618:       wcsncpyz(DestFileName,Cmd->DllDestName,ASIZE(DestFileName));",
      "619: #endif",
      "621:     File CurFile;",
      "623:     bool LinkEntry=Arc.FileHead.RedirType!=FSREDIR_NONE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "629:     if (ExtrFile && Command!='P' && !Cmd->Test && !Cmd->AbsoluteLinks &&",
      "630:         UpLinkExtracted)",
      "631:       ExtrFile=LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "747:         if (Type==FSREDIR_HARDLINK || Type==FSREDIR_FILECOPY)",
      "748:         {",
      "749:           wchar RedirName[NM];",
      "752:           wchar NameExisting[NM];",
      "753:           ExtrPrepareName(Arc,RedirName,NameExisting,ASIZE(NameExisting));",
      "",
      "[Removed Lines]",
      "750:           ConvertPath(Arc.FileHead.RedirName,RedirName,ASIZE(RedirName));",
      "",
      "[Added Lines]",
      "770:           SlashToNative(Arc.FileHead.RedirName,RedirName,ASIZE(RedirName));",
      "772:           ConvertPath(RedirName,RedirName,ASIZE(RedirName));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "761:           if (Type==FSREDIR_UNIXSYMLINK || Type==FSREDIR_WINSYMLINK || Type==FSREDIR_JUNCTION)",
      "762:           {",
      "763:             if (FileCreateMode)",
      "765:           }",
      "766:           else",
      "767:           {",
      "",
      "[Removed Lines]",
      "764:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName);",
      "",
      "[Added Lines]",
      "786:             {",
      "787:               bool UpLink;",
      "788:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName,UpLink);",
      "789:               UpLinkExtracted|=LinkSuccess && UpLink;",
      "800:               LastCheckedSymlink.clear(); // Reset cache for safety reason.",
      "801:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "949: bool CmdExtract::ExtractFileCopy(File &New,wchar *ArcName,const wchar *RedirName,wchar *NameNew,wchar *NameExisting,size_t NameExistingSize,int64 UnpSize)",
      "950: {",
      "953:   File Existing;",
      "954:   if (!Existing.Open(NameExisting))",
      "955:   {",
      "",
      "[Removed Lines]",
      "951:   SlashToNative(NameExisting,NameExisting,NameExistingSize); // Not needed for RAR 5.1+ archives.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1269:         DirExist=FileExist(DestFileName) && IsDir(GetFileAttr(DestFileName));",
      "1270:         if (!DirExist)",
      "1271:         {",
      "1272:           CreatePath(DestFileName,true,Cmd->DisableNames);",
      "1273:           MDCode=MakeDir(DestFileName,!Cmd->IgnoreGeneralAttr,Arc.FileHead.FileAttr);",
      "1274:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1307:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
      "1308:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1351:           MakeNameUsable(DestFileName,true);",
      "1353:           CreatePath(DestFileName,true,Cmd->DisableNames);",
      "1354:           if (FileCreate(Cmd,&CurFile,DestFileName,ASIZE(DestFileName),&UserReject,Arc.FileHead.UnpSize,&Arc.FileHead.mtime,true))",
      "1355:           {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1390:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
      "1391:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
      "",
      "---------------"
    ],
    "extract.hpp||extract.hpp": [
      "File: extract.hpp -> extract.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     bool PrevProcessed; // If previous file was successfully extracted or tested.",
      "72:     wchar DestFileName[NM];",
      "73:     bool PasswordCancelled;",
      "74: #if defined(_WIN_ALL) && !defined(SFX_MODULE) && !defined(SILENT)",
      "75:     bool Fat32,NotFat32;",
      "76: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     bool UpLinkExtracted; // At least one symlink with \"..\" in target was extracted.",
      "78:     std::wstring LastCheckedSymlink;",
      "",
      "---------------"
    ],
    "hardlinks.cpp||hardlinks.cpp": [
      "File: hardlinks.cpp -> hardlinks.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: bool ExtractHardlink(CommandData *Cmd,wchar *NameNew,wchar *NameExisting,size_t NameExistingSize)",
      "2: {",
      "5:   if (!FileExist(NameExisting))",
      "6:   {",
      "7:     uiMsg(UIERROR_HLINKCREATE,NameNew);",
      "",
      "[Removed Lines]",
      "3:   SlashToNative(NameExisting,NameExisting,NameExistingSize); // Not needed for RAR 5.1+ archives.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "model.cpp||model.cpp": [
      "File: model.cpp -> model.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "532:     Model->Coder.SubRange.LowCount=HiCnt;",
      "533:     Model->Coder.SubRange.HighCount=Model->Coder.SubRange.scale;",
      "534:     i=NumStats-Model->NumMasked;",
      "536:     do",
      "537:     {",
      "539:       if (pps>=ps+ASIZE(ps)) // Extra safety check.",
      "540:         return false;",
      "541:       Model->CharMask[(*pps)->Symbol]=Model->EscCount;",
      "542:     } while ( --i );",
      "543:     psee2c->Summ += Model->Coder.SubRange.scale;",
      "544:     Model->NumMasked = NumStats;",
      "",
      "[Removed Lines]",
      "535:     pps--;",
      "538:       pps++;",
      "",
      "[Added Lines]",
      "543:       pps++;",
      "",
      "---------------"
    ],
    "pathfn.cpp||pathfn.cpp": [
      "File: pathfn.cpp -> pathfn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     const wchar *s=DestPtr;",
      "32:     if (s[0]!=0 && IsDriveDiv(s[1]))",
      "33:       s+=2;",
      "35:     {",
      "39:     }",
      "40:     for (const wchar *t=s;*t!=0;t++)",
      "41:       if (IsPathDiv(*t))",
      "",
      "[Removed Lines]",
      "34:     if (s[0]=='\\\\' && s[1]=='\\\\')",
      "36:       const wchar *Slash=wcschr(s+2,'\\\\');",
      "37:       if (Slash!=NULL && (Slash=wcschr(Slash+1,'\\\\'))!=NULL)",
      "38:         s=Slash+1;",
      "",
      "[Added Lines]",
      "36:     if (IsPathDiv(s[0]) && IsPathDiv(s[1]))",
      "38:       uint SlashCount=0;",
      "39:       for (const wchar *t=s+2;*t!=0;t++)",
      "40:         if (IsPathDiv(*t) && ++SlashCount==2)",
      "41:         {",
      "42:           s=t+1; // Found two more path separators after leading two.",
      "43:           break;",
      "44:         }",
      "",
      "---------------"
    ],
    "timefn.hpp||timefn.hpp": [
      "File: timefn.hpp -> timefn.hpp"
    ],
    "ulinks.cpp||ulinks.cpp": [
      "File: ulinks.cpp -> ulinks.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: }",
      "74: {",
      "75:   char Target[NM];",
      "76:   if (IsLink(Arc.FileHead.FileAttr))",
      "",
      "[Removed Lines]",
      "73: bool ExtractUnixLink30(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,const wchar *LinkName)",
      "",
      "[Added Lines]",
      "73: static bool ExtractUnixLink30(CommandData *Cmd,ComprDataIO &DataIO,Archive &Arc,",
      "74:                               const wchar *LinkName,bool &UpLink)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "100:     if (!Cmd->AbsoluteLinks && (IsFullPath(TargetW) ||",
      "101:         !IsRelativeSymlinkSafe(Cmd,Arc.FileHead.FileName,LinkName,TargetW)))",
      "102:       return false;",
      "103:     return UnixSymlink(Cmd,Target,LinkName,&Arc.FileHead.mtime,&Arc.FileHead.atime);",
      "104:   }",
      "105:   return false;",
      "106: }",
      "110: {",
      "111:   char Target[NM];",
      "112:   WideToChar(hd->RedirName,Target,ASIZE(Target));",
      "",
      "[Removed Lines]",
      "109: bool ExtractUnixLink50(CommandData *Cmd,const wchar *Name,FileHeader *hd)",
      "",
      "[Added Lines]",
      "104:     UpLink=strstr(Target,\"..\")!=NULL;",
      "111: static bool ExtractUnixLink50(CommandData *Cmd,const wchar *Name,FileHeader *hd)",
      "",
      "---------------"
    ],
    "version.hpp||version.hpp": [
      "File: version.hpp -> version.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RARVER_MAJOR     6",
      "2: #define RARVER_MINOR    20",
      "6: #define RARVER_YEAR   2022",
      "",
      "[Removed Lines]",
      "3: #define RARVER_BETA      2",
      "4: #define RARVER_DAY      12",
      "5: #define RARVER_MONTH    11",
      "",
      "[Added Lines]",
      "3: #define RARVER_BETA      3",
      "4: #define RARVER_DAY      15",
      "5: #define RARVER_MONTH    12",
      "",
      "---------------"
    ],
    "win32stm.cpp||win32stm.cpp": [
      "File: win32stm.cpp -> win32stm.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   if ((fd.FileAttr & FILE_ATTRIBUTE_READONLY)!=0)",
      "119:     SetFileAttr(FileName,fd.FileAttr & ~FILE_ATTRIBUTE_READONLY);",
      "120:   File CurFile;",
      "125:   File HostFile;",
      "",
      "[Removed Lines]",
      "121:   if (CurFile.WCreate(FullName) && Arc.ReadSubData(NULL,&CurFile,false))",
      "122:     CurFile.Close();",
      "",
      "[Added Lines]",
      "122:   if (CurFile.WCreate(FullName))",
      "123:   {",
      "124:     if (Arc.ReadSubData(NULL,&CurFile,false))",
      "125:       CurFile.Close();",
      "126:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d90439613e86449b51436781b91f3ae02c1c7e5c",
      "candidate_info": {
        "commit_hash": "d90439613e86449b51436781b91f3ae02c1c7e5c",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/d90439613e86449b51436781b91f3ae02c1c7e5c",
        "files": [
          "archive.hpp",
          "arcread.cpp",
          "dll.rc",
          "extinfo.cpp",
          "extract.cpp",
          "headers.hpp",
          "uiconsole.cpp",
          "uowners.cpp",
          "version.hpp",
          "win32lnk.cpp",
          "win32stm.cpp"
        ],
        "message": "Updated to 6.2.8",
        "before_after_code_files": [
          "archive.hpp||archive.hpp",
          "arcread.cpp||arcread.cpp",
          "dll.rc||dll.rc",
          "extinfo.cpp||extinfo.cpp",
          "extract.cpp||extract.cpp",
          "headers.hpp||headers.hpp",
          "uiconsole.cpp||uiconsole.cpp",
          "uowners.cpp||uowners.cpp",
          "version.hpp||version.hpp",
          "win32lnk.cpp||win32lnk.cpp",
          "win32stm.cpp||win32stm.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extinfo.cpp||extinfo.cpp",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp",
            "win32stm.cpp||win32stm.cpp"
          ],
          "candidate": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extinfo.cpp||extinfo.cpp",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp",
            "win32stm.cpp||win32stm.cpp"
          ]
        }
      },
      "candidate_diff": {
        "archive.hpp||archive.hpp": [
          "File: archive.hpp -> archive.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     FileHeader SubHead;",
          "108:     CommentHeader CommHead;",
          "109:     ProtectHeader ProtectHead;",
          "111:     EAHeader EAHead;",
          "112:     StreamHeader StreamHead;",
          "",
          "[Removed Lines]",
          "110:     UnixOwnersHeader UOHead;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arcread.cpp||arcread.cpp": [
          "File: arcread.cpp -> arcread.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:       SubBlockHead.Level=Raw.Get1();",
          "477:       switch(SubBlockHead.SubType)",
          "478:       {",
          "492:         case NTACL_HEAD:",
          "494:           EAHead.UnpSize=Raw.Get4();",
          "",
          "[Removed Lines]",
          "479:         case UO_HEAD:",
          "481:           UOHead.OwnerNameSize=Raw.Get2();",
          "482:           UOHead.GroupNameSize=Raw.Get2();",
          "483:           if (UOHead.OwnerNameSize>=ASIZE(UOHead.OwnerName))",
          "484:             UOHead.OwnerNameSize=ASIZE(UOHead.OwnerName)-1;",
          "485:           if (UOHead.GroupNameSize>=ASIZE(UOHead.GroupName))",
          "486:             UOHead.GroupNameSize=ASIZE(UOHead.GroupName)-1;",
          "487:           Raw.GetB(UOHead.OwnerName,UOHead.OwnerNameSize);",
          "488:           Raw.GetB(UOHead.GroupName,UOHead.GroupNameSize);",
          "489:           UOHead.OwnerName[UOHead.OwnerNameSize]=0;",
          "490:           UOHead.GroupName[UOHead.GroupNameSize]=0;",
          "491:           break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:   ushort HeaderCRC=Raw.GetCRC15(false);",
          "523:   if (ShortBlock.HeadCRC!=HeaderCRC && ShortBlock.HeaderType!=HEAD3_SIGN &&",
          "525:   {",
          "526:     bool Recovered=false;",
          "527:     if (ShortBlock.HeaderType==HEAD_ENDARC && EndArcHead.RevSpace)",
          "",
          "[Removed Lines]",
          "524:       ShortBlock.HeaderType!=HEAD3_AV)",
          "",
          "[Added Lines]",
          "514:       ShortBlock.HeaderType!=HEAD3_AV &&",
          "515:       (ShortBlock.HeaderType!=HEAD3_OLDSERVICE || SubBlockHead.SubType!=UO_HEAD))",
          "",
          "---------------"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 22, 1, 865",
          "6: PRODUCTVERSION 6, 22, 1, 865",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 22, 100, 880",
          "6: PRODUCTVERSION 6, 22, 100, 880",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.22.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.22.1\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.22.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.22.0\\0\"",
          "",
          "---------------"
        ],
        "extinfo.cpp||extinfo.cpp": [
          "File: extinfo.cpp -> extinfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #ifndef SFX_MODULE",
          "22: void SetExtraInfo20(CommandData *Cmd,Archive &Arc,wchar *Name)",
          "23: {",
          "24:   if (Cmd->Test)",
          "25:     return;",
          "26:   switch(Arc.SubBlockHead.SubType)",
          "27:   {",
          "35:     case NTACL_HEAD:",
          "36:       if (Cmd->ProcessOwners)",
          "37:         ExtractACL20(Arc,Name);",
          "",
          "[Removed Lines]",
          "28: #ifdef _UNIX",
          "29:     case UO_HEAD:",
          "30:       if (Cmd->ProcessOwners)",
          "31:         ExtractUnixOwner20(Arc,Name);",
          "32:       break;",
          "33: #endif",
          "34: #ifdef _WIN_ALL",
          "",
          "[Added Lines]",
          "24: #ifdef _WIN_ALL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     case STREAM_HEAD:",
          "40:       ExtractStreams20(Arc,Name);",
          "41:       break;",
          "43:   }",
          "44: }",
          "45: #endif",
          "",
          "[Removed Lines]",
          "42: #endif",
          "",
          "[Added Lines]",
          "37: #endif",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:             {",
          "807:               bool UpLink;",
          "808:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName,UpLink);",
          "809:               ConvertSymlinkPaths|=LinkSuccess && UpLink;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:               if (LinkSuccess)",
          "812:                 SetFileHeaderExtra(Cmd,Arc,DestFileName);",
          "",
          "---------------"
        ],
        "headers.hpp||headers.hpp": [
          "File: headers.hpp -> headers.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #define  SIZEOF_SUBBLOCKHEAD    14",
          "12: #define  SIZEOF_COMMHEAD        13",
          "13: #define  SIZEOF_PROTECTHEAD     26",
          "15: #define  SIZEOF_STREAMHEAD      26",
          "17: #define  VER_PACK               29U",
          "",
          "[Removed Lines]",
          "14: #define  SIZEOF_UOHEAD          18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325: };",
          "338: struct EAHeader:SubBlockHeader",
          "339: {",
          "340:   uint UnpSize;",
          "",
          "[Removed Lines]",
          "328: struct UnixOwnersHeader:SubBlockHeader",
          "329: {",
          "330:   ushort OwnerNameSize;",
          "331:   ushort GroupNameSize;",
          "333:   char OwnerName[256];",
          "334:   char GroupName[256];",
          "335: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "uiconsole.cpp||uiconsole.cpp": [
          "File: uiconsole.cpp -> uiconsole.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:       Log(NULL,St(MNeedAdmin));",
          "184:       break;",
          "185:     case UIERROR_ARCBROKEN:",
          "186:       Log(Str[0],St(MErrBrokenArc));",
          "187:       break;",
          "188:     case UIERROR_HEADERBROKEN:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:       mprintf(L\"\\n\"); // So it is not merged with preceding UIERROR_HEADERBROKEN.",
          "",
          "---------------"
        ],
        "uowners.cpp||uowners.cpp": [
          "File: uowners.cpp -> uowners.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: {",
          "5:   char NameA[NM];",
          "6:   WideToChar(FileName,NameA,ASIZE(NameA));",
          "33:     return;",
          "55:   char *OwnerName=(char *)&Arc.SubHead.SubData[0];",
          "56:   int OwnerSize=strlen(OwnerName)+1;",
          "",
          "[Removed Lines]",
          "3: void ExtractUnixOwner20(Archive &Arc,const wchar *FileName)",
          "8:   if (Arc.BrokenHeader)",
          "9:   {",
          "10:     uiMsg(UIERROR_UOWNERBROKEN,Arc.FileName,FileName);",
          "11:     ErrHandler.SetErrorCode(RARX_CRC);",
          "12:     return;",
          "13:   }",
          "15:   struct passwd *pw;",
          "16:   errno=0; // Required by getpwnam specification if we need to check errno.",
          "17:   if ((pw=getpwnam(Arc.UOHead.OwnerName))==NULL)",
          "18:   {",
          "19:     uiMsg(UIERROR_UOWNERGETOWNERID,Arc.FileName,GetWide(Arc.UOHead.OwnerName));",
          "20:     ErrHandler.SysErrMsg();",
          "21:     ErrHandler.SetErrorCode(RARX_WARNING);",
          "22:     return;",
          "23:   }",
          "24:   uid_t OwnerID=pw->pw_uid;",
          "26:   struct group *gr;",
          "27:   errno=0; // Required by getgrnam specification if we need to check errno.",
          "28:   if ((gr=getgrnam(Arc.UOHead.GroupName))==NULL)",
          "29:   {",
          "30:     uiMsg(UIERROR_UOWNERGETGROUPID,Arc.FileName,GetWide(Arc.UOHead.GroupName));",
          "31:     ErrHandler.SysErrMsg();",
          "32:     ErrHandler.SetErrorCode(RARX_CRC);",
          "34:   }",
          "35:   uint Attr=GetFileAttr(FileName);",
          "36:   gid_t GroupID=gr->gr_gid;",
          "37: #if defined(SAVE_LINKS) && !defined(_APPLE)",
          "38:   if (lchown(NameA,OwnerID,GroupID)!=0)",
          "39: #else",
          "40:   if (chown(NameA,OwnerID,GroupID)!=0)",
          "41: #endif",
          "42:   {",
          "43:     uiMsg(UIERROR_UOWNERSET,Arc.FileName,FileName);",
          "44:     ErrHandler.SetErrorCode(RARX_CREATE);",
          "45:   }",
          "46:   SetFileAttr(FileName,Attr);",
          "47: }",
          "50: void ExtractUnixOwner30(Archive &Arc,const wchar *FileName)",
          "51: {",
          "52:   char NameA[NM];",
          "53:   WideToChar(FileName,NameA,ASIZE(NameA));",
          "",
          "[Added Lines]",
          "3: void ExtractUnixOwner30(Archive &Arc,const wchar *FileName)",
          "8:   if (memchr(&Arc.SubHead.SubData[0],0,Arc.SubHead.SubData.Size())==NULL)",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "2: #define RARVER_MINOR    22",
          "5: #define RARVER_MONTH     5",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      14",
          "",
          "[Added Lines]",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      29",
          "",
          "---------------"
        ],
        "win32lnk.cpp||win32lnk.cpp": [
          "File: win32lnk.cpp -> win32lnk.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     PrivSet=true;",
          "41:   }",
          "44:   Array<byte> Buf(BufSize);",
          "45:   REPARSE_DATA_BUFFER *rdb=(REPARSE_DATA_BUFFER *)&Buf[0];",
          "",
          "[Removed Lines]",
          "43:   const DWORD BufSize=sizeof(REPARSE_DATA_BUFFER)+2*NM+1024;",
          "",
          "[Added Lines]",
          "43:   const DWORD BufSize=sizeof(REPARSE_DATA_BUFFER)+2*NM*sizeof(wchar)+1024;",
          "",
          "---------------"
        ],
        "win32stm.cpp||win32stm.cpp": [
          "File: win32stm.cpp -> win32stm.cpp"
        ]
      }
    },
    {
      "candidate_hash": "5b6ea953555b658edef673ab9295ded79c505097",
      "candidate_info": {
        "commit_hash": "5b6ea953555b658edef673ab9295ded79c505097",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/5b6ea953555b658edef673ab9295ded79c505097",
        "files": [
          "arcread.cpp",
          "dll.rc",
          "extract.cpp",
          "extract.hpp",
          "headers.hpp",
          "list.cpp",
          "version.hpp"
        ],
        "message": "Updated to 6.2.4",
        "before_after_code_files": [
          "arcread.cpp||arcread.cpp",
          "dll.rc||dll.rc",
          "extract.cpp||extract.cpp",
          "extract.hpp||extract.hpp",
          "headers.hpp||headers.hpp",
          "list.cpp||list.cpp",
          "version.hpp||version.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "extract.hpp||extract.hpp",
            "version.hpp||version.hpp"
          ],
          "candidate": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extract.cpp||extract.cpp",
            "extract.hpp||extract.hpp",
            "version.hpp||version.hpp"
          ]
        }
      },
      "candidate_diff": {
        "arcread.cpp||arcread.cpp": [
          "File: arcread.cpp -> arcread.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1014:             if ((Flags & MHEXTRA_METADATA_CTIME)!=0)",
          "1015:               if ((Flags & MHEXTRA_METADATA_UNIXTIME)!=0)",
          "1016:                 if ((Flags & MHEXTRA_METADATA_UNIX_NS)!=0)",
          "1018:                 else",
          "1020:               else",
          "1022:           }",
          "1023:           break;",
          "1024:       }",
          "",
          "[Removed Lines]",
          "1017:                   hd->OrigCtime.SetUnixNS(Raw->Get8());",
          "1019:                   hd->OrigCtime.SetUnix((time_t)Raw->Get4());",
          "1021:                 hd->OrigCtime.SetWin(Raw->Get8());",
          "",
          "[Added Lines]",
          "1017:                   hd->OrigTime.SetUnixNS(Raw->Get8());",
          "1019:                   hd->OrigTime.SetUnix((time_t)Raw->Get4());",
          "1021:                 hd->OrigTime.SetWin(Raw->Get8());",
          "",
          "---------------"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 20, 3, 714",
          "6: PRODUCTVERSION 6, 20, 3, 714",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 20, 100, 748",
          "6: PRODUCTVERSION 6, 20, 100, 748",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "22:   }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.20.3\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.20.3\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2022\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.20.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.20.0\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   Unp=new Unpack(&DataIO);",
          "22: #ifdef RAR_SMP",
          "",
          "[Removed Lines]",
          "19:   UpLinkExtracted=false;",
          "",
          "[Added Lines]",
          "19: #if defined(_WIN_ALL)",
          "24:   ConvertSymlinkPaths=false;",
          "25: #else",
          "29:   ConvertSymlinkPaths=true;",
          "30: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: #endif",
          "629:     if (ExtrFile && Command!='P' && !Cmd->Test && !Cmd->AbsoluteLinks &&",
          "631:       ExtrFile=LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
          "633:     File CurFile;",
          "",
          "[Removed Lines]",
          "630:         UpLinkExtracted)",
          "",
          "[Added Lines]",
          "648:         ConvertSymlinkPaths)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:             {",
          "787:               bool UpLink;",
          "788:               LinkSuccess=ExtractSymlink(Cmd,DataIO,Arc,DestFileName,UpLink);",
          "",
          "[Removed Lines]",
          "789:               UpLinkExtracted|=LinkSuccess && UpLink;",
          "",
          "[Added Lines]",
          "807:               ConvertSymlinkPaths|=LinkSuccess && UpLink;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1304:         DirExist=FileExist(DestFileName) && IsDir(GetFileAttr(DestFileName));",
          "1305:         if (!DirExist)",
          "1306:         {",
          "1308:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
          "1309:           CreatePath(DestFileName,true,Cmd->DisableNames);",
          "1310:           MDCode=MakeDir(DestFileName,!Cmd->IgnoreGeneralAttr,Arc.FileHead.FileAttr);",
          "",
          "[Removed Lines]",
          "1307:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
          "",
          "[Added Lines]",
          "1325:           if (!Cmd->AbsoluteLinks && ConvertSymlinkPaths)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1388:           MakeNameUsable(DestFileName,true);",
          "1391:             LinksToDirs(DestFileName,Cmd->ExtrPath,LastCheckedSymlink);",
          "1392:           CreatePath(DestFileName,true,Cmd->DisableNames);",
          "1393:           if (FileCreate(Cmd,&CurFile,DestFileName,ASIZE(DestFileName),&UserReject,Arc.FileHead.UnpSize,&Arc.FileHead.mtime,true))",
          "",
          "[Removed Lines]",
          "1390:           if (!Cmd->AbsoluteLinks && UpLinkExtracted)",
          "",
          "[Added Lines]",
          "1408:           if (!Cmd->AbsoluteLinks && ConvertSymlinkPaths)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1511:             MatchFound = true;",
          "1512:             PrevMatched = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1536:             Analyze->EndPos=0;",
          "",
          "---------------"
        ],
        "extract.hpp||extract.hpp": [
          "File: extract.hpp -> extract.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     bool PrevProcessed; // If previous file was successfully extracted or tested.",
          "72:     wchar DestFileName[NM];",
          "73:     bool PasswordCancelled;",
          "",
          "[Removed Lines]",
          "74:     bool UpLinkExtracted; // At least one symlink with \"..\" in target was extracted.",
          "",
          "[Added Lines]",
          "77:     bool ConvertSymlinkPaths;",
          "",
          "---------------"
        ],
        "headers.hpp||headers.hpp": [
          "File: headers.hpp -> headers.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:   uint64 RRMaxSize;     // Maximum size of RR offset in locator extra field.",
          "171:   size_t MetaNameMaxSize; // Maximum size of archive name in metadata extra field.",
          "172:   std::wstring OrigName;  // Original archive name.",
          "175:   void Reset();",
          "176: };",
          "",
          "[Removed Lines]",
          "173:   RarTime OrigCtime;      // Original archive creation time.",
          "",
          "[Added Lines]",
          "173:   RarTime OrigTime;       // Original archive time.",
          "",
          "---------------"
        ],
        "list.cpp||list.cpp": [
          "File: list.cpp -> list.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:           if (!Arc.MainHead.OrigName.empty())",
          "67:             mprintf(L\"\\n%s: %s\",St(MOrigName),Arc.MainHead.OrigName.c_str());",
          "69:           {",
          "70:             wchar DateStr[50];",
          "72:             mprintf(L\"\\n%s: %s\",St(MOriginalTime),DateStr);",
          "73:           }",
          "",
          "[Removed Lines]",
          "68:           if (Arc.MainHead.OrigCtime.IsSet())",
          "71:             Arc.MainHead.OrigCtime.GetText(DateStr,ASIZE(DateStr),Technical);",
          "",
          "[Added Lines]",
          "68:           if (Arc.MainHead.OrigTime.IsSet())",
          "71:             Arc.MainHead.OrigTime.GetText(DateStr,ASIZE(DateStr),Technical);",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "2: #define RARVER_MINOR    20",
          "",
          "[Removed Lines]",
          "3: #define RARVER_BETA      3",
          "4: #define RARVER_DAY      15",
          "5: #define RARVER_MONTH    12",
          "6: #define RARVER_YEAR   2022",
          "",
          "[Added Lines]",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY      17",
          "5: #define RARVER_MONTH     1",
          "6: #define RARVER_YEAR   2023",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df15c8c3c9f4105d3501bc477e80ac6b8e227677",
      "candidate_info": {
        "commit_hash": "df15c8c3c9f4105d3501bc477e80ac6b8e227677",
        "repo": "pmachapman/unrar",
        "commit_url": "https://github.com/pmachapman/unrar/commit/df15c8c3c9f4105d3501bc477e80ac6b8e227677",
        "files": [
          "arcread.cpp",
          "crypt5.cpp",
          "dll.rc",
          "extinfo.cpp",
          "extract.cpp",
          "version.hpp",
          "win32stm.cpp"
        ],
        "message": "Updated to 6.2.11",
        "before_after_code_files": [
          "arcread.cpp||arcread.cpp",
          "crypt5.cpp||crypt5.cpp",
          "dll.rc||dll.rc",
          "extinfo.cpp||extinfo.cpp",
          "extract.cpp||extract.cpp",
          "version.hpp||version.hpp",
          "win32stm.cpp||win32stm.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extinfo.cpp||extinfo.cpp",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp",
            "win32stm.cpp||win32stm.cpp"
          ],
          "candidate": [
            "arcread.cpp||arcread.cpp",
            "dll.rc||dll.rc",
            "extinfo.cpp||extinfo.cpp",
            "extract.cpp||extract.cpp",
            "version.hpp||version.hpp",
            "win32stm.cpp||win32stm.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arcread.cpp||arcread.cpp": [
          "File: arcread.cpp -> arcread.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "991:             if ((Flags & MHEXTRA_METADATA_NAME)!=0)",
          "992:             {",
          "993:               uint64 NameSize=Raw->GetV();",
          "995:               {",
          "996:                 std::vector<char> NameU((size_t)NameSize); // UTF-8 name.",
          "997:                 Raw->GetB(&NameU[0],(size_t)NameSize);",
          "",
          "[Removed Lines]",
          "994:               if (NameSize<0x10000) // Prevent excessive allocation.",
          "",
          "[Added Lines]",
          "994:               if (NameSize>0 && NameSize<0x10000) // Prevent excessive allocation.",
          "",
          "---------------"
        ],
        "crypt5.cpp||crypt5.cpp": [
          "File: crypt5.cpp -> crypt5.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:      byte *PswCheck)",
          "134: {",
          "135:   if (Lg2Cnt>CRYPT5_KDF_LG2_COUNT_MAX)",
          "136:     return;",
          "138:   byte Key[32],PswCheckValue[SHA256_DIGEST_SIZE],HashKeyValue[SHA256_DIGEST_SIZE];",
          "139:   bool Found=false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   {",
          "139:     if (HashKey!=nullptr)",
          "140:       memset(HashKey,0,SHA256_DIGEST_SIZE);",
          "141:     if (PswCheck!=nullptr)",
          "142:       memset(PswCheck,0,SIZE_PSWCHECK);",
          "144:   }",
          "",
          "---------------"
        ],
        "dll.rc||dll.rc": [
          "File: dll.rc -> dll.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <commctrl.h>",
          "4: VS_VERSION_INFO VERSIONINFO",
          "7: FILEOS VOS__WINDOWS32",
          "8: FILETYPE VFT_APP",
          "9: {",
          "",
          "[Removed Lines]",
          "5: FILEVERSION 6, 23, 100, 944",
          "6: PRODUCTVERSION 6, 23, 100, 944",
          "",
          "[Added Lines]",
          "5: FILEVERSION 6, 24, 1, 991",
          "6: PRODUCTVERSION 6, 24, 1, 991",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:       VALUE \"CompanyName\", \"Alexander Roshal\\0\"",
          "15:       VALUE \"ProductName\", \"RAR decompression library\\0\"",
          "16:       VALUE \"FileDescription\", \"RAR decompression library\\0\"",
          "19:       VALUE \"LegalCopyright\", \"Copyright \ufffd Alexander Roshal 1993-2023\\0\"",
          "20:       VALUE \"OriginalFilename\", \"Unrar.dll\\0\"",
          "21:     }",
          "",
          "[Removed Lines]",
          "17:       VALUE \"FileVersion\", \"6.23.0\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.23.0\\0\"",
          "",
          "[Added Lines]",
          "17:       VALUE \"FileVersion\", \"6.24.1\\0\"",
          "18:       VALUE \"ProductVersion\", \"6.24.1\\0\"",
          "",
          "---------------"
        ],
        "extinfo.cpp||extinfo.cpp": [
          "File: extinfo.cpp -> extinfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:       bool Dot2=Name[1]=='.' && Name[2]=='.' && (IsPathDiv(Name[3]) || Name[3]==0);",
          "81:       if (!Dot && !Dot2)",
          "82:         AllowedDepth++;",
          "83:     }",
          "84:     Name++;",
          "85:   }",
          "87: }",
          "",
          "[Removed Lines]",
          "86:   return AllowedDepth;",
          "",
          "[Added Lines]",
          "83:       else",
          "84:         if (Dot2)",
          "85:           AllowedDepth--;",
          "89:   return AllowedDepth < 0 ? 0 : AllowedDepth;",
          "",
          "---------------"
        ],
        "extract.cpp||extract.cpp": [
          "File: extract.cpp -> extract.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   TotalFileCount=0;",
          "29:   ConvertSymlinkPaths=true;",
          "32:   Unp=new Unpack(&DataIO);",
          "33: #ifdef RAR_SMP",
          "",
          "[Removed Lines]",
          "19: #if defined(_WIN_ALL)",
          "24:   ConvertSymlinkPaths=false;",
          "25: #else",
          "30: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.hpp||version.hpp": [
          "File: version.hpp -> version.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RARVER_MAJOR     6",
          "6: #define RARVER_YEAR   2023",
          "",
          "[Removed Lines]",
          "2: #define RARVER_MINOR    23",
          "3: #define RARVER_BETA      0",
          "4: #define RARVER_DAY       1",
          "5: #define RARVER_MONTH     8",
          "",
          "[Added Lines]",
          "2: #define RARVER_MINOR    24",
          "3: #define RARVER_BETA      1",
          "4: #define RARVER_DAY      17",
          "5: #define RARVER_MONTH     9",
          "",
          "---------------"
        ],
        "win32stm.cpp||win32stm.cpp": [
          "File: win32stm.cpp -> win32stm.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #if !defined(SFX_MODULE) && defined(_WIN_ALL)",
          "4: void ExtractStreams20(Archive &Arc,const wchar *FileName)",
          "5: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #ifdef _WIN_ALL",
          "5: static bool IsNtfsReservedStream(const wchar *StreamName)",
          "6: {",
          "7:   const wchar *Reserved[]{",
          "8:     L\"::$ATTRIBUTE_LIST\",L\"::$BITMAP\",L\"::$DATA\",L\"::$EA\",L\"::$EA_INFORMATION\",",
          "9:     L\"::$FILE_NAME\",L\"::$INDEX_ALLOCATION\",L\":$I30:$INDEX_ALLOCATION\",",
          "10:     L\"::$INDEX_ROOT\",L\"::$LOGGED_UTILITY_STREAM\",L\":$EFS:$LOGGED_UTILITY_STREAM\",",
          "11:     L\":$TXF_DATA:$LOGGED_UTILITY_STREAM\",L\"::$OBJECT_ID\",L\"::$REPARSE_POINT\"",
          "12:   };",
          "13:   for (const wchar *Name : Reserved)",
          "14:     if (wcsicomp(StreamName,Name)==0)",
          "15:       return true;",
          "16:   return false;",
          "17: }",
          "18: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   ConvertPath(StoredName+1,StoredName+1,ASIZE(StoredName)-1);",
          "43:   wcsncatz(StreamName,StoredName,ASIZE(StreamName));",
          "45:   FindData fd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   if (IsNtfsReservedStream(StoredName))",
          "62:     return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   wcsncatz(FullName,StreamName,ASIZE(FullName));",
          "116:   FindData fd;",
          "117:   bool HostFound=FindFile::FastFind(FileName,&fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   if (IsNtfsReservedStream(StreamName))",
          "138:     return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}