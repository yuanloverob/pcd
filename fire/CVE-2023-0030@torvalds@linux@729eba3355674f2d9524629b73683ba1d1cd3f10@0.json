{
  "cve_id": "CVE-2023-0030",
  "cve_desc": "A use-after-free flaw was found in the Linux kernel\u2019s nouveau driver in how a user triggers a memory overflow that causes the nvkm_vma_tail function to fail. This flaw allows a local user to crash or potentially escalate their privileges on the system.",
  "repo": "torvalds/linux",
  "patch_hash": "729eba3355674f2d9524629b73683ba1d1cd3f10",
  "patch_info": {
    "commit_hash": "729eba3355674f2d9524629b73683ba1d1cd3f10",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/729eba3355674f2d9524629b73683ba1d1cd3f10",
    "files": [
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h"
    ],
    "message": "drm/nouveau/mmu: add more general vmm free/node handling functions\n\nAside from being a nice cleanup, these will to allow the upcoming direct\npage mapping interfaces to play nicely with normal mappings.\n\nSigned-off-by: Ben Skeggs <bskeggs@redhat.com>",
    "before_after_code_files": [
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
      "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h"
    ]
  },
  "patch_diff": {
    "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c": [
      "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "134:    goto fail;",
      "135:   }",
      "154:   }",
      "155:  }",
      "156:  vma->busy = true;",
      "",
      "[Removed Lines]",
      "137:   if (vma->addr != addr) {",
      "138:    const u64 tail = vma->size + vma->addr - addr;",
      "139:    if (ret = -ENOMEM, !(vma = nvkm_vma_tail(vma, tail)))",
      "140:     goto fail;",
      "141:    vma->part = true;",
      "142:    nvkm_vmm_node_insert(vmm, vma);",
      "143:   }",
      "145:   if (vma->size != size) {",
      "146:    const u64 tail = vma->size - size;",
      "147:    struct nvkm_vma *tmp;",
      "148:    if (ret = -ENOMEM, !(tmp = nvkm_vma_tail(vma, tail))) {",
      "149:     nvkm_vmm_unmap_region(vmm, vma);",
      "150:     goto fail;",
      "151:    }",
      "152:    tmp->part = true;",
      "153:    nvkm_vmm_node_insert(vmm, tmp);",
      "",
      "[Added Lines]",
      "137:   vma = nvkm_vmm_node_split(vmm, vma, addr, size);",
      "138:   if (!vma) {",
      "139:    ret = -ENOMEM;",
      "140:    goto fail;",
      "",
      "---------------"
    ],
    "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c": [
      "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "767:  return new;",
      "768: }",
      "770: static void",
      "771: nvkm_vmm_free_insert(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "772: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "770: static inline void",
      "771: nvkm_vmm_free_remove(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "772: {",
      "773:  rb_erase(&vma->tree, &vmm->free);",
      "774: }",
      "776: static inline void",
      "777: nvkm_vmm_free_delete(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "778: {",
      "779:  nvkm_vmm_free_remove(vmm, vma);",
      "780:  list_del(&vma->head);",
      "781:  kfree(vma);",
      "782: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:  rb_insert_color(&vma->tree, &vmm->free);",
      "796: }",
      "799: nvkm_vmm_node_insert(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "800: {",
      "801:  struct rb_node **ptr = &vmm->root.rb_node;",
      "",
      "[Removed Lines]",
      "798: void",
      "",
      "[Added Lines]",
      "812: static inline void",
      "813: nvkm_vmm_node_remove(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "814: {",
      "815:  rb_erase(&vma->tree, &vmm->root);",
      "816: }",
      "818: static inline void",
      "819: nvkm_vmm_node_delete(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "820: {",
      "821:  nvkm_vmm_node_remove(vmm, vma);",
      "822:  list_del(&vma->head);",
      "823:  kfree(vma);",
      "824: }",
      "826: static void",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "834:  return NULL;",
      "835: }",
      "837: static void",
      "838: nvkm_vmm_dtor(struct nvkm_vmm *vmm)",
      "839: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "865: #define node(root, dir) (((root)->head.dir == &vmm->list) ? NULL :             \\",
      "866:  list_entry((root)->head.dir, struct nvkm_vma, head))",
      "868: static struct nvkm_vma *",
      "869: nvkm_vmm_node_merge(struct nvkm_vmm *vmm, struct nvkm_vma *prev,",
      "870:       struct nvkm_vma *vma, struct nvkm_vma *next, u64 size)",
      "871: {",
      "872:  if (next) {",
      "873:   if (vma->size == size) {",
      "874:    vma->size += next->size;",
      "875:    nvkm_vmm_node_delete(vmm, next);",
      "876:    if (prev) {",
      "877:     prev->size += vma->size;",
      "878:     nvkm_vmm_node_delete(vmm, vma);",
      "879:     return prev;",
      "880:    }",
      "881:    return vma;",
      "882:   }",
      "883:   BUG_ON(prev);",
      "885:   nvkm_vmm_node_remove(vmm, next);",
      "886:   vma->size -= size;",
      "887:   next->addr -= size;",
      "888:   next->size += size;",
      "889:   nvkm_vmm_node_insert(vmm, next);",
      "890:   return next;",
      "891:  }",
      "893:  if (prev) {",
      "894:   if (vma->size != size) {",
      "895:    nvkm_vmm_node_remove(vmm, vma);",
      "896:    prev->size += size;",
      "897:    vma->addr += size;",
      "898:    vma->size -= size;",
      "899:    nvkm_vmm_node_insert(vmm, vma);",
      "900:   } else {",
      "901:    prev->size += vma->size;",
      "902:    nvkm_vmm_node_delete(vmm, vma);",
      "903:   }",
      "904:   return prev;",
      "905:  }",
      "907:  return vma;",
      "908: }",
      "910: struct nvkm_vma *",
      "911: nvkm_vmm_node_split(struct nvkm_vmm *vmm,",
      "912:       struct nvkm_vma *vma, u64 addr, u64 size)",
      "913: {",
      "914:  struct nvkm_vma *prev = NULL;",
      "916:  if (vma->addr != addr) {",
      "917:   prev = vma;",
      "918:   if (!(vma = nvkm_vma_tail(vma, vma->size + vma->addr - addr)))",
      "919:    return NULL;",
      "920:   vma->part = true;",
      "921:   nvkm_vmm_node_insert(vmm, vma);",
      "922:  }",
      "924:  if (vma->size != size) {",
      "925:   struct nvkm_vma *tmp;",
      "926:   if (!(tmp = nvkm_vma_tail(vma, vma->size - size))) {",
      "927:    nvkm_vmm_node_merge(vmm, prev, vma, NULL, vma->size);",
      "928:    return NULL;",
      "929:   }",
      "930:   tmp->part = true;",
      "931:   nvkm_vmm_node_insert(vmm, tmp);",
      "932:  }",
      "934:  return vma;",
      "935: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "954:  return nvkm_vmm_ctor(func, mmu, hdr, addr, size, key, name, *pvmm);",
      "955: }",
      "960: void",
      "961: nvkm_vmm_unmap_region(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
      "962: {",
      "965:  nvkm_memory_tags_put(vma->memory, vmm->mmu->subdev.device, &vma->tags);",
      "966:  nvkm_memory_unref(&vma->memory);",
      "988: }",
      "990: void",
      "",
      "[Removed Lines]",
      "957: #define node(root, dir) ((root)->head.dir == &vmm->list) ? NULL :              \\",
      "958:  list_entry((root)->head.dir, struct nvkm_vma, head)",
      "963:  struct nvkm_vma *next;",
      "968:  if (vma->part) {",
      "969:   struct nvkm_vma *prev = node(vma, prev);",
      "970:   if (!prev->memory) {",
      "971:    prev->size += vma->size;",
      "972:    rb_erase(&vma->tree, &vmm->root);",
      "973:    list_del(&vma->head);",
      "974:    kfree(vma);",
      "975:    vma = prev;",
      "976:   }",
      "977:  }",
      "979:  next = node(vma, next);",
      "980:  if (next && next->part) {",
      "981:   if (!next->memory) {",
      "982:    vma->size += next->size;",
      "983:    rb_erase(&next->tree, &vmm->root);",
      "984:    list_del(&next->head);",
      "985:    kfree(next);",
      "986:   }",
      "987:  }",
      "",
      "[Added Lines]",
      "1060:  struct nvkm_vma *next = node(vma, next);",
      "1061:  struct nvkm_vma *prev = NULL;",
      "1066:  if (!vma->part || ((prev = node(vma, prev)), prev->memory))",
      "1067:   prev = NULL;",
      "1068:  if (!next->part || next->memory)",
      "1069:   next = NULL;",
      "1070:  nvkm_vmm_node_merge(vmm, prev, vma, next, vma->size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1163:  struct nvkm_vma *prev, *next;",
      "1165:  if ((prev = node(vma, prev)) && !prev->used) {",
      "1168:   vma->addr  = prev->addr;",
      "1169:   vma->size += prev->size;",
      "1171:  }",
      "1173:  if ((next = node(vma, next)) && !next->used) {",
      "1176:   vma->size += next->size;",
      "1178:  }",
      "1180:  nvkm_vmm_free_insert(vmm, vma);",
      "",
      "[Removed Lines]",
      "1166:   rb_erase(&prev->tree, &vmm->free);",
      "1167:   list_del(&prev->head);",
      "1170:   kfree(prev);",
      "1174:   rb_erase(&next->tree, &vmm->free);",
      "1175:   list_del(&next->head);",
      "1177:   kfree(next);",
      "",
      "[Added Lines]",
      "1251:   nvkm_vmm_free_delete(vmm, prev);",
      "1256:   nvkm_vmm_free_delete(vmm, next);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1250:  }",
      "1256:  vma->page = NVKM_VMA_PAGE_NONE;",
      "",
      "[Removed Lines]",
      "1253:  rb_erase(&vma->tree, &vmm->root);",
      "",
      "[Added Lines]",
      "1332:  nvkm_vmm_node_remove(vmm, vma);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1357:    tail = ALIGN_DOWN(tail, vmm->func->page_block);",
      "1359:   if (addr <= tail && tail - addr >= size) {",
      "1361:    vma = this;",
      "1362:    break;",
      "1363:   }",
      "",
      "[Removed Lines]",
      "1360:    rb_erase(&this->tree, &vmm->free);",
      "",
      "[Added Lines]",
      "1439:    nvkm_vmm_free_remove(vmm, this);",
      "",
      "---------------"
    ],
    "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h": [
      "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:     u32 pd_header, u64 addr, u64 size, struct lock_class_key *,",
      "158:     const char *name, struct nvkm_vmm *);",
      "159: struct nvkm_vma *nvkm_vmm_node_search(struct nvkm_vmm *, u64 addr);",
      "160: int nvkm_vmm_get_locked(struct nvkm_vmm *, bool getref, bool mapref,",
      "161:    bool sparse, u8 page, u8 align, u64 size,",
      "162:    struct nvkm_vma **pvma);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "160: struct nvkm_vma *nvkm_vmm_node_split(struct nvkm_vmm *, struct nvkm_vma *,",
      "161:          u64 addr, u64 size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165: void nvkm_vmm_unmap_region(struct nvkm_vmm *vmm, struct nvkm_vma *vma);",
      "167: struct nvkm_vma *nvkm_vma_tail(struct nvkm_vma *, u64 tail);",
      "170: int nv04_vmm_new_(const struct nvkm_vmm_func *, struct nvkm_mmu *, u32,",
      "171:     u64, u64, void *, u32, struct lock_class_key *,",
      "",
      "[Removed Lines]",
      "168: void nvkm_vmm_node_insert(struct nvkm_vmm *, struct nvkm_vma *);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e68271d7ce472ff75af8cf4988edf1c797253a5",
      "candidate_info": {
        "commit_hash": "8e68271d7ce472ff75af8cf4988edf1c797253a5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8e68271d7ce472ff75af8cf4988edf1c797253a5",
        "files": [
          "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c"
        ],
        "message": "drm/nouveau/mmu: store mapped flag separately from memory pointer\n\nThis will be used to support a privileged client providing PTEs directly,\nwithout a memory object to use as a reference.\n\nSigned-off-by: Ben Skeggs <bskeggs@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h||drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c"
          ],
          "candidate": [
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h||drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h": [
          "File: drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h -> drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h"
        ],
        "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c": [
          "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:  new->part = vma->part;",
          "764:  new->user = vma->user;",
          "765:  new->busy = vma->busy;",
          "766:  list_add(&new->head, &vma->head);",
          "767:  return new;",
          "768: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:  new->mapped = vma->mapped;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1113:  nvkm_memory_tags_put(vma->memory, vmm->mmu->subdev.device, &vma->tags);",
          "1114:  nvkm_memory_unref(&vma->memory);",
          "1117:   prev = NULL;",
          "1119:   next = NULL;",
          "1120:  nvkm_vmm_node_merge(vmm, prev, vma, next, vma->size);",
          "1121: }",
          "",
          "[Removed Lines]",
          "1116:  if (!vma->part || ((prev = node(vma, prev)), prev->memory))",
          "1118:  if (!next->part || next->memory)",
          "",
          "[Added Lines]",
          "1116:  vma->mapped = false;",
          "1118:  if (!vma->part || ((prev = node(vma, prev)), prev->mapped))",
          "1120:  if (!next->part || next->mapped)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1274:  nvkm_memory_tags_put(vma->memory, vmm->mmu->subdev.device, &vma->tags);",
          "1275:  nvkm_memory_unref(&vma->memory);",
          "1276:  vma->memory = nvkm_memory_ref(map->memory);",
          "1277:  vma->tags = map->tags;",
          "1278:  return 0;",
          "1279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1279:  vma->mapped = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1320:  if (vma->mapref || !vma->sparse) {",
          "1321:   do {",
          "1323:    const u8  refd = next->refd;",
          "1324:    const u64 addr = next->addr;",
          "1325:    u64 size = next->size;",
          "1328:    while ((next = node(next, next)) && next->part &&",
          "1330:           (next->refd == refd))",
          "1331:     size += next->size;",
          "",
          "[Removed Lines]",
          "1322:    const bool map = next->memory != NULL;",
          "1329:           (next->memory != NULL) == map &&",
          "",
          "[Added Lines]",
          "1325:    const bool mem = next->memory != NULL;",
          "1326:    const bool map = next->mapped;",
          "1333:           (next->mapped == map) &&",
          "1334:           (next->memory != NULL) == mem &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1352:  next = vma;",
          "1353:  do {",
          "1355:    nvkm_vmm_unmap_region(vmm, next);",
          "1356:  } while ((next = node(vma, next)) && next->part);",
          "",
          "[Removed Lines]",
          "1354:   if (next->memory)",
          "",
          "[Added Lines]",
          "1359:   if (next->mapped)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ff307fe1f2dfe91253e3c19586643a77b6ce52",
      "candidate_info": {
        "commit_hash": "a5ff307fe1f2dfe91253e3c19586643a77b6ce52",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a5ff307fe1f2dfe91253e3c19586643a77b6ce52",
        "files": [
          "drivers/gpu/drm/nouveau/include/nvif/if000c.h",
          "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c"
        ],
        "message": "drm/nouveau/mmu: add a privileged method to directly manage PTEs\n\nThis provides a somewhat more direct method of manipulating the GPU page\ntables, which will be required to support SVM.\n\nSigned-off-by: Ben Skeggs <bskeggs@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/nouveau/include/nvif/if000c.h||drivers/gpu/drm/nouveau/include/nvif/if000c.h",
          "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h||drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h",
          "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h"
          ],
          "candidate": [
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
            "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/nouveau/include/nvif/if000c.h||drivers/gpu/drm/nouveau/include/nvif/if000c.h": [
          "File: drivers/gpu/drm/nouveau/include/nvif/if000c.h -> drivers/gpu/drm/nouveau/include/nvif/if000c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #define NVIF_VMM_V0_PUT                                                    0x02",
          "16: #define NVIF_VMM_V0_MAP                                                    0x03",
          "17: #define NVIF_VMM_V0_UNMAP                                                  0x04",
          "19: struct nvif_vmm_page_v0 {",
          "20:  __u8  version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #define NVIF_VMM_V0_PFNMAP                                                 0x05",
          "19: #define NVIF_VMM_V0_PFNCLR                                                 0x06",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  __u8  pad01[7];",
          "63:  __u64 addr;",
          "64: };",
          "65: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: struct nvif_vmm_pfnmap_v0 {",
          "69:  __u8  version;",
          "70:  __u8  page;",
          "71:  __u8  pad02[6];",
          "72:  __u64 addr;",
          "73:  __u64 size;",
          "74: #define NVIF_VMM_PFNMAP_V0_ADDR                           0xfffffffffffff000ULL",
          "75: #define NVIF_VMM_PFNMAP_V0_ADDR_SHIFT                                        12",
          "76: #define NVIF_VMM_PFNMAP_V0_APER                           0x00000000000000f0ULL",
          "77: #define NVIF_VMM_PFNMAP_V0_HOST                           0x0000000000000000ULL",
          "78: #define NVIF_VMM_PFNMAP_V0_VRAM                           0x0000000000000010ULL",
          "79: #define NVIF_VMM_PFNMAP_V0_W                              0x0000000000000002ULL",
          "80: #define NVIF_VMM_PFNMAP_V0_V                              0x0000000000000001ULL",
          "81: #define NVIF_VMM_PFNMAP_V0_NONE                           0x0000000000000000ULL",
          "82:  __u64 phys[];",
          "83: };",
          "85: struct nvif_vmm_pfnclr_v0 {",
          "86:  __u8  version;",
          "87:  __u8  pad01[7];",
          "88:  __u64 addr;",
          "89:  __u64 size;",
          "90: };",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h||drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h": [
          "File: drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h -> drivers/gpu/drm/nouveau/include/nvkm/subdev/mmu.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  struct nvkm_mm_node *mem;",
          "65:  struct scatterlist *sgl;",
          "66:  dma_addr_t *dma;",
          "67:  u64 off;",
          "69:  const struct nvkm_vmm_page *page;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:  u64 *pfn;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c": [
          "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/uvmm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  return nvkm_uvmm(object)->vmm;",
          "43: }",
          "45: static int",
          "46: nvkm_uvmm_mthd_unmap(struct nvkm_uvmm *uvmm, void *argv, u32 argc)",
          "47: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: static int",
          "46: nvkm_uvmm_mthd_pfnclr(struct nvkm_uvmm *uvmm, void *argv, u32 argc)",
          "47: {",
          "48:  struct nvkm_client *client = uvmm->object.client;",
          "49:  union {",
          "50:   struct nvif_vmm_pfnclr_v0 v0;",
          "51:  } *args = argv;",
          "52:  struct nvkm_vmm *vmm = uvmm->vmm;",
          "53:  int ret = -ENOSYS;",
          "54:  u64 addr, size;",
          "56:  if (!(ret = nvif_unpack(ret, &argv, &argc, args->v0, 0, 0, false))) {",
          "57:   addr = args->v0.addr;",
          "58:   size = args->v0.size;",
          "59:  } else",
          "60:   return ret;",
          "62:  if (!client->super)",
          "63:   return -ENOENT;",
          "65:  if (size) {",
          "66:   mutex_lock(&vmm->mutex);",
          "67:   ret = nvkm_vmm_pfn_unmap(vmm, addr, size);",
          "68:   mutex_unlock(&vmm->mutex);",
          "69:  }",
          "71:  return ret;",
          "72: }",
          "74: static int",
          "75: nvkm_uvmm_mthd_pfnmap(struct nvkm_uvmm *uvmm, void *argv, u32 argc)",
          "76: {",
          "77:  struct nvkm_client *client = uvmm->object.client;",
          "78:  union {",
          "79:   struct nvif_vmm_pfnmap_v0 v0;",
          "80:  } *args = argv;",
          "81:  struct nvkm_vmm *vmm = uvmm->vmm;",
          "82:  int ret = -ENOSYS;",
          "83:  u64 addr, size, *phys;",
          "84:  u8  page;",
          "86:  if (!(ret = nvif_unpack(ret, &argv, &argc, args->v0, 0, 0, true))) {",
          "87:   page = args->v0.page;",
          "88:   addr = args->v0.addr;",
          "89:   size = args->v0.size;",
          "90:   phys = args->v0.phys;",
          "91:   if (argc != (size >> page) * sizeof(args->v0.phys[0]))",
          "92:    return -EINVAL;",
          "93:  } else",
          "94:   return ret;",
          "96:  if (!client->super)",
          "97:   return -ENOENT;",
          "99:  if (size) {",
          "100:   mutex_lock(&vmm->mutex);",
          "101:   ret = nvkm_vmm_pfn_map(vmm, page, addr, size, phys);",
          "102:   mutex_unlock(&vmm->mutex);",
          "103:  }",
          "105:  return ret;",
          "106: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   goto done;",
          "79:  }",
          "82:  ret = 0;",
          "83: done:",
          "84:  mutex_unlock(&vmm->mutex);",
          "",
          "[Removed Lines]",
          "81:  nvkm_vmm_unmap_locked(vmm, vma);",
          "",
          "[Added Lines]",
          "144:  nvkm_vmm_unmap_locked(vmm, vma, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:   goto fail;",
          "125:  }",
          "127:  if (ret = -EINVAL, vma->addr != addr || vma->size != size) {",
          "128:   if (addr + size > vma->addr + vma->size || vma->memory ||",
          "129:       (vma->refd == NVKM_VMA_PAGE_NONE && !vma->mapref)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:  if (ret = -EINVAL, vma->mapped && !vma->memory) {",
          "191:   VMM_DEBUG(vmm, \"pfnmap %016llx\", addr);",
          "192:   goto fail;",
          "193:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:  case NVIF_VMM_V0_PUT   : return nvkm_uvmm_mthd_put   (uvmm, argv, argc);",
          "272:  case NVIF_VMM_V0_MAP   : return nvkm_uvmm_mthd_map   (uvmm, argv, argc);",
          "273:  case NVIF_VMM_V0_UNMAP : return nvkm_uvmm_mthd_unmap (uvmm, argv, argc);",
          "274:  default:",
          "275:   break;",
          "276:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:  case NVIF_VMM_V0_PFNMAP: return nvkm_uvmm_mthd_pfnmap(uvmm, argv, argc);",
          "343:  case NVIF_VMM_V0_PFNCLR: return nvkm_uvmm_mthd_pfnclr(uvmm, argv, argc);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c": [
          "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: }",
          "257: static bool",
          "259: {",
          "260:  const struct nvkm_vmm_desc *desc = it->desc;",
          "261:  const int type = desc->type == SPT;",
          "262:  struct nvkm_vmm_pt *pgt = it->pt[0];",
          "265:  pgt->refs[type] -= ptes;",
          "",
          "[Removed Lines]",
          "258: nvkm_vmm_unref_ptes(struct nvkm_vmm_iter *it, u32 ptei, u32 ptes)",
          "",
          "[Added Lines]",
          "258: nvkm_vmm_unref_ptes(struct nvkm_vmm_iter *it, bool pfn, u32 ptei, u32 ptes)",
          "263:  bool dma;",
          "265:  if (pfn) {",
          "267:   dma = desc->func->pfn_clear(it->vmm, pgt->pt[type], ptei, ptes);",
          "268:   if (dma) {",
          "270:    nvkm_vmm_flush_mark(it);",
          "271:    nvkm_vmm_flush(it);",
          "272:    desc->func->pfn_unmap(it->vmm, pgt->pt[type], ptei, ptes);",
          "273:   }",
          "274:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349: }",
          "351: static bool",
          "353: {",
          "354:  const struct nvkm_vmm_desc *desc = it->desc;",
          "355:  const int type = desc->type == SPT;",
          "",
          "[Removed Lines]",
          "352: nvkm_vmm_ref_ptes(struct nvkm_vmm_iter *it, u32 ptei, u32 ptes)",
          "",
          "[Added Lines]",
          "364: nvkm_vmm_ref_ptes(struct nvkm_vmm_iter *it, bool pfn, u32 ptei, u32 ptes)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379: }",
          "381: static bool",
          "383: {",
          "384:  struct nvkm_vmm_pt *pt = it->pt[0];",
          "385:  if (it->desc->type == PGD)",
          "",
          "[Removed Lines]",
          "382: nvkm_vmm_sparse_unref_ptes(struct nvkm_vmm_iter *it, u32 ptei, u32 ptes)",
          "",
          "[Added Lines]",
          "394: nvkm_vmm_sparse_unref_ptes(struct nvkm_vmm_iter *it, bool pfn, u32 ptei, u32 ptes)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387:  else",
          "388:  if (it->desc->type == LPT)",
          "389:   memset(&pt->pte[ptei], 0x00, sizeof(pt->pte[0]) * ptes);",
          "391: }",
          "393: static bool",
          "395: {",
          "396:  nvkm_vmm_sparse_ptes(it->desc, it->pt[0], ptei, ptes);",
          "398: }",
          "400: static bool",
          "",
          "[Removed Lines]",
          "390:  return nvkm_vmm_unref_ptes(it, ptei, ptes);",
          "394: nvkm_vmm_sparse_ref_ptes(struct nvkm_vmm_iter *it, u32 ptei, u32 ptes)",
          "397:  return nvkm_vmm_ref_ptes(it, ptei, ptes);",
          "",
          "[Added Lines]",
          "402:  return nvkm_vmm_unref_ptes(it, pfn, ptei, ptes);",
          "406: nvkm_vmm_sparse_ref_ptes(struct nvkm_vmm_iter *it, bool pfn, u32 ptei, u32 ptes)",
          "409:  return nvkm_vmm_ref_ptes(it, pfn, ptei, ptes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488: static inline u64",
          "489: nvkm_vmm_iter(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "492:        nvkm_vmm_pte_func MAP_PTES, struct nvkm_vmm_map *map,",
          "493:        nvkm_vmm_pxe_func CLR_PTES)",
          "494: {",
          "",
          "[Removed Lines]",
          "490:        u64 addr, u64 size, const char *name, bool ref,",
          "491:        bool (*REF_PTES)(struct nvkm_vmm_iter *, u32, u32),",
          "",
          "[Added Lines]",
          "502:        u64 addr, u64 size, const char *name, bool ref, bool pfn,",
          "503:        bool (*REF_PTES)(struct nvkm_vmm_iter *, bool pfn, u32, u32),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "548:   }",
          "552:    struct nvkm_mmu_pt *pt = pgt->pt[type];",
          "553:    if (MAP_PTES || CLR_PTES) {",
          "554:     if (MAP_PTES)",
          "",
          "[Removed Lines]",
          "551:   if (!REF_PTES || REF_PTES(&it, ptei, ptes)) {",
          "",
          "[Added Lines]",
          "563:   if (!REF_PTES || REF_PTES(&it, pfn, ptei, ptes)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "590: nvkm_vmm_ptes_sparse_put(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "591:     u64 addr, u64 size)",
          "592: {",
          "594:         nvkm_vmm_sparse_unref_ptes, NULL, NULL,",
          "595:         page->desc->func->invalid ?",
          "596:         page->desc->func->invalid : page->desc->func->unmap);",
          "",
          "[Removed Lines]",
          "593:  nvkm_vmm_iter(vmm, page, addr, size, \"sparse unref\", false,",
          "",
          "[Added Lines]",
          "605:  nvkm_vmm_iter(vmm, page, addr, size, \"sparse unref\", false, false,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602: {",
          "603:  if ((page->type & NVKM_VMM_PAGE_SPARSE)) {",
          "604:   u64 fail = nvkm_vmm_iter(vmm, page, addr, size, \"sparse ref\",",
          "607:   if (fail != ~0ULL) {",
          "608:    if ((size = fail - addr))",
          "609:     nvkm_vmm_ptes_sparse_put(vmm, page, addr, size);",
          "",
          "[Removed Lines]",
          "605:       true, nvkm_vmm_sparse_ref_ptes, NULL,",
          "606:       NULL, page->desc->func->sparse);",
          "",
          "[Added Lines]",
          "617:       true, false, nvkm_vmm_sparse_ref_ptes,",
          "618:       NULL, NULL, page->desc->func->sparse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "667: static void",
          "668: nvkm_vmm_ptes_unmap_put(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "670: {",
          "671:  const struct nvkm_vmm_desc_func *func = page->desc->func;",
          "672:  nvkm_vmm_iter(vmm, page, addr, size, \"unmap + unref\",",
          "674:         sparse ? func->sparse : func->invalid ? func->invalid :",
          "675:              func->unmap);",
          "676: }",
          "",
          "[Removed Lines]",
          "669:    u64 addr, u64 size, bool sparse)",
          "673:         false, nvkm_vmm_unref_ptes, NULL, NULL,",
          "",
          "[Added Lines]",
          "681:    u64 addr, u64 size, bool sparse, bool pfn)",
          "685:         false, pfn, nvkm_vmm_unref_ptes, NULL, NULL,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "681:         nvkm_vmm_pte_func func)",
          "682: {",
          "683:  u64 fail = nvkm_vmm_iter(vmm, page, addr, size, \"ref + map\", true,",
          "685:  if (fail != ~0ULL) {",
          "686:   if ((size = fail - addr))",
          "688:   return -ENOMEM;",
          "689:  }",
          "690:  return 0;",
          "",
          "[Removed Lines]",
          "684:      nvkm_vmm_ref_ptes, func, map, NULL);",
          "687:    nvkm_vmm_ptes_unmap_put(vmm, page, addr, size, false);",
          "",
          "[Added Lines]",
          "696:      false, nvkm_vmm_ref_ptes, func, map, NULL);",
          "699:    nvkm_vmm_ptes_unmap_put(vmm, page, addr, size, false, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "693: static void",
          "694: nvkm_vmm_ptes_unmap(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "696: {",
          "697:  const struct nvkm_vmm_desc_func *func = page->desc->func;",
          "699:         sparse ? func->sparse : func->invalid ? func->invalid :",
          "700:              func->unmap);",
          "701: }",
          "",
          "[Removed Lines]",
          "695:       u64 addr, u64 size, bool sparse)",
          "698:  nvkm_vmm_iter(vmm, page, addr, size, \"unmap\", false, NULL, NULL, NULL,",
          "",
          "[Added Lines]",
          "707:       u64 addr, u64 size, bool sparse, bool pfn)",
          "710:  nvkm_vmm_iter(vmm, page, addr, size, \"unmap\", false, pfn,",
          "711:         NULL, NULL, NULL,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "705:     u64 addr, u64 size, struct nvkm_vmm_map *map,",
          "706:     nvkm_vmm_pte_func func)",
          "707: {",
          "709:         NULL, func, map, NULL);",
          "710: }",
          "",
          "[Removed Lines]",
          "708:  nvkm_vmm_iter(vmm, page, addr, size, \"map\", false,",
          "",
          "[Added Lines]",
          "721:  nvkm_vmm_iter(vmm, page, addr, size, \"map\", false, false,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "713: nvkm_vmm_ptes_put(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "714:     u64 addr, u64 size)",
          "715: {",
          "717:         nvkm_vmm_unref_ptes, NULL, NULL, NULL);",
          "718: }",
          "",
          "[Removed Lines]",
          "716:  nvkm_vmm_iter(vmm, page, addr, size, \"unref\", false,",
          "",
          "[Added Lines]",
          "729:  nvkm_vmm_iter(vmm, page, addr, size, \"unref\", false, false,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "721: nvkm_vmm_ptes_get(struct nvkm_vmm *vmm, const struct nvkm_vmm_page *page,",
          "722:     u64 addr, u64 size)",
          "723: {",
          "725:      nvkm_vmm_ref_ptes, NULL, NULL, NULL);",
          "726:  if (fail != ~0ULL) {",
          "727:   if (fail != addr)",
          "",
          "[Removed Lines]",
          "724:  u64 fail = nvkm_vmm_iter(vmm, page, addr, size, \"ref\", true,",
          "",
          "[Added Lines]",
          "737:  u64 fail = nvkm_vmm_iter(vmm, page, addr, size, \"ref\", true, false,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "935:  return vma;",
          "936: }",
          "938: static void",
          "939: nvkm_vmm_dtor(struct nvkm_vmm *vmm)",
          "940: {",
          "941:  struct nvkm_vma *vma;",
          "942:  struct rb_node *node;",
          "944:  while ((node = rb_first(&vmm->root))) {",
          "945:   struct nvkm_vma *vma = rb_entry(node, typeof(*vma), tree);",
          "946:   nvkm_vmm_put(vmm, &vma);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951: static void",
          "952: nvkm_vma_dump(struct nvkm_vma *vma)",
          "953: {",
          "954:  printk(KERN_ERR \"%016llx %016llx %c%c%c%c%c%c%c%c%c %p\\n\",",
          "955:         vma->addr, (u64)vma->size,",
          "956:         vma->used ? '-' : 'F',",
          "957:         vma->mapref ? 'R' : '-',",
          "958:         vma->sparse ? 'S' : '-',",
          "959:         vma->page != NVKM_VMA_PAGE_NONE ? '0' + vma->page : '-',",
          "960:         vma->refd != NVKM_VMA_PAGE_NONE ? '0' + vma->refd : '-',",
          "961:         vma->part ? 'P' : '-',",
          "962:         vma->user ? 'U' : '-',",
          "963:         vma->busy ? 'B' : '-',",
          "964:         vma->mapped ? 'M' : '-',",
          "965:         vma->memory);",
          "966: }",
          "968: static void",
          "969: nvkm_vmm_dump(struct nvkm_vmm *vmm)",
          "970: {",
          "971:  struct nvkm_vma *vma;",
          "972:  list_for_each_entry(vma, &vmm->list, head) {",
          "973:   nvkm_vma_dump(vma);",
          "974:  }",
          "975: }",
          "983:  if (0)",
          "984:   nvkm_vmm_dump(vmm);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1105:  return nvkm_vmm_ctor(func, mmu, hdr, managed, addr, size, key, name, *pvmm);",
          "1106: }",
          "1108: void",
          "1109: nvkm_vmm_unmap_region(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
          "1110: {",
          "1112:  struct nvkm_vma *prev = NULL;",
          "1114:  nvkm_memory_tags_put(vma->memory, vmm->mmu->subdev.device, &vma->tags);",
          "1115:  nvkm_memory_unref(&vma->memory);",
          "1116:  vma->mapped = false;",
          "1119:   prev = NULL;",
          "1121:   next = NULL;",
          "1122:  nvkm_vmm_node_merge(vmm, prev, vma, next, vma->size);",
          "1123: }",
          "1125: void",
          "1127: {",
          "1128:  const struct nvkm_vmm_page *page = &vmm->func->page[vma->refd];",
          "1130:  if (vma->mapref) {",
          "1132:   vma->refd = NVKM_VMA_PAGE_NONE;",
          "1133:  } else {",
          "1135:  }",
          "1137:  nvkm_vmm_unmap_region(vmm, vma);",
          "",
          "[Removed Lines]",
          "1111:  struct nvkm_vma *next = node(vma, next);",
          "1118:  if (!vma->part || ((prev = node(vma, prev)), prev->mapped))",
          "1120:  if (!next->part || next->mapped)",
          "1126: nvkm_vmm_unmap_locked(struct nvkm_vmm *vmm, struct nvkm_vma *vma)",
          "1131:   nvkm_vmm_ptes_unmap_put(vmm, page, vma->addr, vma->size, vma->sparse);",
          "1134:   nvkm_vmm_ptes_unmap(vmm, page, vma->addr, vma->size, vma->sparse);",
          "",
          "[Added Lines]",
          "1150: static struct nvkm_vma *",
          "1151: nvkm_vmm_pfn_split_merge(struct nvkm_vmm *vmm, struct nvkm_vma *vma,",
          "1152:     u64 addr, u64 size, u8 page, bool map)",
          "1153: {",
          "1154:  struct nvkm_vma *prev = NULL;",
          "1155:  struct nvkm_vma *next = NULL;",
          "1157:  if (vma->addr == addr && vma->part && (prev = node(vma, prev))) {",
          "1158:   if (prev->memory || prev->mapped != map)",
          "1159:    prev = NULL;",
          "1160:  }",
          "1162:  if (vma->addr + vma->size == addr + size && (next = node(vma, next))) {",
          "1163:   if (!next->part ||",
          "1164:       next->memory || next->mapped != map)",
          "1165:    next = NULL;",
          "1166:  }",
          "1168:  if (prev || next)",
          "1169:   return nvkm_vmm_node_merge(vmm, prev, vma, next, size);",
          "1170:  return nvkm_vmm_node_split(vmm, vma, addr, size);",
          "1171: }",
          "1173: int",
          "1174: nvkm_vmm_pfn_unmap(struct nvkm_vmm *vmm, u64 addr, u64 size)",
          "1175: {",
          "1176:  struct nvkm_vma *vma = nvkm_vmm_node_search(vmm, addr);",
          "1177:  struct nvkm_vma *next;",
          "1178:  u64 limit = addr + size;",
          "1179:  u64 start = addr;",
          "1181:  if (!vma)",
          "1182:   return -EINVAL;",
          "1184:  do {",
          "1185:   if (!vma->mapped || vma->memory)",
          "1186:    continue;",
          "1188:   size = min(limit - start, vma->size - (start - vma->addr));",
          "1190:   nvkm_vmm_ptes_unmap_put(vmm, &vmm->func->page[vma->refd],",
          "1191:      start, size, false, true);",
          "1193:   next = nvkm_vmm_pfn_split_merge(vmm, vma, start, size, 0, false);",
          "1194:   if (!WARN_ON(!next)) {",
          "1195:    vma = next;",
          "1196:    vma->refd = NVKM_VMA_PAGE_NONE;",
          "1197:    vma->mapped = false;",
          "1198:   }",
          "1199:  } while ((vma = node(vma, next)) && (start = vma->addr) < limit);",
          "1201:  return 0;",
          "1202: }",
          "1210: int",
          "1211: nvkm_vmm_pfn_map(struct nvkm_vmm *vmm, u8 shift, u64 addr, u64 size, u64 *pfn)",
          "1212: {",
          "1213:  const struct nvkm_vmm_page *page = vmm->func->page;",
          "1214:  struct nvkm_vma *vma, *tmp;",
          "1215:  u64 limit = addr + size;",
          "1216:  u64 start = addr;",
          "1217:  int pm = size >> shift;",
          "1218:  int pi = 0;",
          "1223:  while (page->shift && page->shift != shift &&",
          "1224:         page->desc->func->pfn == NULL)",
          "1225:   page++;",
          "1227:  if (!page->shift || !IS_ALIGNED(addr, 1ULL << shift) ||",
          "1228:        !IS_ALIGNED(size, 1ULL << shift) ||",
          "1229:      addr + size < addr || addr + size > vmm->limit) {",
          "1230:   VMM_DEBUG(vmm, \"paged map %d %d %016llx %016llx\\n\",",
          "1231:      shift, page->shift, addr, size);",
          "1232:   return -EINVAL;",
          "1233:  }",
          "1235:  if (!(vma = nvkm_vmm_node_search(vmm, addr)))",
          "1236:   return -ENOENT;",
          "1238:  do {",
          "1239:   bool map = !!(pfn[pi] & NVKM_VMM_PFN_V);",
          "1240:   bool mapped = vma->mapped;",
          "1241:   u64 size = limit - start;",
          "1242:   u64 addr = start;",
          "1243:   int pn, ret = 0;",
          "1248:   for (pn = 0; pi + pn < pm; pn++) {",
          "1249:    if (map != !!(pfn[pi + pn] & NVKM_VMM_PFN_V))",
          "1250:     break;",
          "1251:   }",
          "1252:   size = min_t(u64, size, pn << page->shift);",
          "1253:   size = min_t(u64, size, vma->size + vma->addr - addr);",
          "1258:   if (!vma->mapref || vma->memory) {",
          "1259:    ret = -EINVAL;",
          "1260:    goto next;",
          "1261:   }",
          "1274:   if (map != mapped) {",
          "1275:    tmp = nvkm_vmm_pfn_split_merge(vmm, vma, addr, size,",
          "1276:              page -",
          "1277:              vmm->func->page, map);",
          "1278:    if (WARN_ON(!tmp)) {",
          "1279:     ret = -ENOMEM;",
          "1280:     goto next;",
          "1281:    }",
          "1283:    if ((tmp->mapped = map))",
          "1284:     tmp->refd = page - vmm->func->page;",
          "1285:    else",
          "1286:     tmp->refd = NVKM_VMA_PAGE_NONE;",
          "1287:    vma = tmp;",
          "1288:   }",
          "1291:   if (map) {",
          "1292:    struct nvkm_vmm_map args;",
          "1293:    args.page = page;",
          "1294:    args.pfn = &pfn[pi];",
          "1296:    if (!mapped) {",
          "1297:     ret = nvkm_vmm_ptes_get_map(vmm, page, addr,",
          "1298:            size, &args, page->",
          "1299:            desc->func->pfn);",
          "1300:    } else {",
          "1301:     nvkm_vmm_ptes_map(vmm, page, addr, size, &args,",
          "1302:         page->desc->func->pfn);",
          "1303:    }",
          "1304:   } else {",
          "1305:    if (mapped) {",
          "1306:     nvkm_vmm_ptes_unmap_put(vmm, page, addr, size,",
          "1307:        false, true);",
          "1308:    }",
          "1309:   }",
          "1311: next:",
          "1313:   if (vma->addr + vma->size == addr + size)",
          "1314:    vma = node(vma, next);",
          "1315:   start += size;",
          "1317:   if (ret) {",
          "1321:    while (size) {",
          "1322:     pfn[pi++] = NVKM_VMM_PFN_NONE;",
          "1323:     size -= 1 << page->shift;",
          "1324:    }",
          "1325:   } else {",
          "1326:    pi += size >> page->shift;",
          "1327:   }",
          "1328:  } while (vma && start < limit);",
          "1330:  return 0;",
          "1331: }",
          "1337:  struct nvkm_vma *next;",
          "1343:  if (vma->part && (prev = node(vma, prev)) && prev->mapped)",
          "1345:  if ((next = node(vma, next)) && (!next->part || next->mapped))",
          "1351: nvkm_vmm_unmap_locked(struct nvkm_vmm *vmm, struct nvkm_vma *vma, bool pfn)",
          "1356:   nvkm_vmm_ptes_unmap_put(vmm, page, vma->addr, vma->size, vma->sparse, pfn);",
          "1359:   nvkm_vmm_ptes_unmap(vmm, page, vma->addr, vma->size, vma->sparse, pfn);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1142: {",
          "1143:  if (vma->memory) {",
          "1144:   mutex_lock(&vmm->mutex);",
          "1146:   mutex_unlock(&vmm->mutex);",
          "1147:  }",
          "1148: }",
          "",
          "[Removed Lines]",
          "1145:   nvkm_vmm_unmap_locked(vmm, vma);",
          "",
          "[Added Lines]",
          "1370:   nvkm_vmm_unmap_locked(vmm, vma, false);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1343:     nvkm_vmm_ptes_unmap_put(vmm, &page[refd], addr,",
          "1345:    } else",
          "1346:    if (refd != NVKM_VMA_PAGE_NONE) {",
          "",
          "[Removed Lines]",
          "1344:        size, vma->sparse);",
          "",
          "[Added Lines]",
          "1569:        size, vma->sparse,",
          "1570:        !mem);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1577: }",
          "1579: static bool",
          "1581: {",
          "1582:  const struct nvkm_vmm_desc *desc = it->desc;",
          "1583:  const int type = desc->type == SPT;",
          "",
          "[Removed Lines]",
          "1580: nvkm_vmm_boot_ptes(struct nvkm_vmm_iter *it, u32 ptei, u32 ptes)",
          "",
          "[Added Lines]",
          "1806: nvkm_vmm_boot_ptes(struct nvkm_vmm_iter *it, bool pfn, u32 ptei, u32 ptes)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1599:  if (ret)",
          "1600:   return ret;",
          "1603:         nvkm_vmm_boot_ptes, NULL, NULL, NULL);",
          "1604:  vmm->bootstrapped = true;",
          "1605:  return 0;",
          "",
          "[Removed Lines]",
          "1602:  nvkm_vmm_iter(vmm, page, vmm->start, limit, \"bootstrap\", false,",
          "",
          "[Added Lines]",
          "1828:  nvkm_vmm_iter(vmm, page, vmm->start, limit, \"bootstrap\", false, false,",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h": [
          "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  nvkm_vmm_pte_func mem;",
          "68:  nvkm_vmm_pte_func dma;",
          "69:  nvkm_vmm_pte_func sgl;",
          "70: };",
          "72: extern const struct nvkm_vmm_desc_func gf100_vmm_pgd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  nvkm_vmm_pte_func pfn;",
          "72:  bool (*pfn_clear)(struct nvkm_vmm *, struct nvkm_mmu_pt *, u32 ptei, u32 ptes);",
          "73:  nvkm_vmm_pxe_func pfn_unmap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:    bool sparse, u8 page, u8 align, u64 size,",
          "167:    struct nvkm_vma **pvma);",
          "168: void nvkm_vmm_put_locked(struct nvkm_vmm *, struct nvkm_vma *);",
          "172: struct nvkm_vma *nvkm_vma_tail(struct nvkm_vma *, u64 tail);",
          "",
          "[Removed Lines]",
          "169: void nvkm_vmm_unmap_locked(struct nvkm_vmm *, struct nvkm_vma *);",
          "170: void nvkm_vmm_unmap_region(struct nvkm_vmm *vmm, struct nvkm_vma *vma);",
          "",
          "[Added Lines]",
          "173: void nvkm_vmm_unmap_locked(struct nvkm_vmm *, struct nvkm_vma *, bool pfn);",
          "174: void nvkm_vmm_unmap_region(struct nvkm_vmm *, struct nvkm_vma *);",
          "176: #define NVKM_VMM_PFN_ADDR                                 0xfffffffffffff000ULL",
          "177: #define NVKM_VMM_PFN_ADDR_SHIFT                                              12",
          "178: #define NVKM_VMM_PFN_APER                                 0x00000000000000f0ULL",
          "179: #define NVKM_VMM_PFN_HOST                                 0x0000000000000000ULL",
          "180: #define NVKM_VMM_PFN_VRAM                                 0x0000000000000010ULL",
          "181: #define NVKM_VMM_PFN_W                                    0x0000000000000002ULL",
          "182: #define NVKM_VMM_PFN_V                                    0x0000000000000001ULL",
          "183: #define NVKM_VMM_PFN_NONE                                 0x0000000000000000ULL",
          "185: int nvkm_vmm_pfn_map(struct nvkm_vmm *, u8 page, u64 addr, u64 size, u64 *pfn);",
          "186: int nvkm_vmm_pfn_unmap(struct nvkm_vmm *, u64 addr, u64 size);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c||drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c": [
          "File: drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c -> drivers/gpu/drm/nouveau/nvkm/subdev/mmu/vmmgp100.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <nvif/ifc00d.h>",
          "28: #include <nvif/unpack.h>",
          "30: static inline void",
          "31: gp100_vmm_pgt_pte(struct nvkm_vmm *vmm, struct nvkm_mmu_pt *pt,",
          "32:     u32 ptei, u32 ptes, struct nvkm_vmm_map *map, u64 addr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: static void",
          "31: gp100_vmm_pfn_unmap(struct nvkm_vmm *vmm,",
          "32:       struct nvkm_mmu_pt *pt, u32 ptei, u32 ptes)",
          "33: {",
          "34:  struct device *dev = vmm->mmu->subdev.device->dev;",
          "35:  dma_addr_t addr;",
          "37:  nvkm_kmap(pt->memory);",
          "38:  while (ptes--) {",
          "39:   u32 datalo = nvkm_ro32(pt->memory, pt->base + ptei * 8 + 0);",
          "40:   u32 datahi = nvkm_ro32(pt->memory, pt->base + ptei * 8 + 4);",
          "41:   u64 data   = (u64)datahi << 32 | datalo;",
          "42:   if ((data & (3ULL << 1)) != 0) {",
          "43:    addr = (data >> 8) << 12;",
          "44:    dma_unmap_page(dev, addr, PAGE_SIZE, DMA_BIDIRECTIONAL);",
          "45:   }",
          "46:   ptei++;",
          "47:  }",
          "48:  nvkm_done(pt->memory);",
          "49: }",
          "51: static bool",
          "52: gp100_vmm_pfn_clear(struct nvkm_vmm *vmm,",
          "53:       struct nvkm_mmu_pt *pt, u32 ptei, u32 ptes)",
          "54: {",
          "55:  bool dma = false;",
          "56:  nvkm_kmap(pt->memory);",
          "57:  while (ptes--) {",
          "58:   u32 datalo = nvkm_ro32(pt->memory, pt->base + ptei * 8 + 0);",
          "59:   u32 datahi = nvkm_ro32(pt->memory, pt->base + ptei * 8 + 4);",
          "60:   u64 data   = (u64)datahi << 32 | datalo;",
          "61:   if ((data & BIT_ULL(0)) && (data & (3ULL << 1)) != 0) {",
          "62:    VMM_WO064(pt, vmm, ptei * 8, data & ~BIT_ULL(0));",
          "63:    dma = true;",
          "64:   }",
          "65:   ptei++;",
          "66:  }",
          "67:  nvkm_done(pt->memory);",
          "68:  return dma;",
          "69: }",
          "71: static void",
          "72: gp100_vmm_pgt_pfn(struct nvkm_vmm *vmm, struct nvkm_mmu_pt *pt,",
          "73:     u32 ptei, u32 ptes, struct nvkm_vmm_map *map)",
          "74: {",
          "75:  struct device *dev = vmm->mmu->subdev.device->dev;",
          "76:  dma_addr_t addr;",
          "78:  nvkm_kmap(pt->memory);",
          "79:  while (ptes--) {",
          "80:   u64 data = 0;",
          "81:   if (!(*map->pfn & NVKM_VMM_PFN_W))",
          "84:   if (!(*map->pfn & NVKM_VMM_PFN_VRAM)) {",
          "85:    addr = *map->pfn >> NVKM_VMM_PFN_ADDR_SHIFT;",
          "86:    addr = dma_map_page(dev, pfn_to_page(addr), 0,",
          "87:          PAGE_SIZE, DMA_BIDIRECTIONAL);",
          "88:    if (!WARN_ON(dma_mapping_error(dev, addr))) {",
          "89:     data |= addr >> 4;",
          "93:    }",
          "94:   } else {",
          "95:    data |= (*map->pfn & NVKM_VMM_PFN_ADDR) >> 4;",
          "97:   }",
          "99:   VMM_WO064(pt, vmm, ptei++ * 8, data);",
          "100:   map->pfn++;",
          "101:  }",
          "102:  nvkm_done(pt->memory);",
          "103: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  .mem = gp100_vmm_pgt_mem,",
          "90:  .dma = gp100_vmm_pgt_dma,",
          "91:  .sgl = gp100_vmm_pgt_sgl,",
          "92: };",
          "94: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  .pfn = gp100_vmm_pgt_pfn,",
          "168:  .pfn_clear = gp100_vmm_pfn_clear,",
          "169:  .pfn_unmap = gp100_vmm_pfn_unmap,",
          "",
          "---------------"
        ]
      }
    }
  ]
}