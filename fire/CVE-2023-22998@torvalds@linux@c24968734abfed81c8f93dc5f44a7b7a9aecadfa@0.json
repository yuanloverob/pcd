{
  "cve_id": "CVE-2023-22998",
  "cve_desc": "In the Linux kernel before 6.0.3, drivers/gpu/drm/virtio/virtgpu_object.c misinterprets the drm_gem_shmem_get_sg_table return value (expects it to be NULL in the error case, whereas it is actually an error pointer).",
  "repo": "torvalds/linux",
  "patch_hash": "c24968734abfed81c8f93dc5f44a7b7a9aecadfa",
  "patch_info": {
    "commit_hash": "c24968734abfed81c8f93dc5f44a7b7a9aecadfa",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c24968734abfed81c8f93dc5f44a7b7a9aecadfa",
    "files": [
      "drivers/gpu/drm/virtio/virtgpu_object.c"
    ],
    "message": "drm/virtio: Fix NULL vs IS_ERR checking in virtio_gpu_object_shmem_init\n\nSince drm_prime_pages_to_sg() function return error pointers.\nThe drm_gem_shmem_get_sg_table() function returns error pointers too.\nUsing IS_ERR() to check the return value to fix this.\n\nFixes: 2f2aa13724d5 (\"drm/virtio: move virtio_gpu_mem_entry initialization to new function\")\nSigned-off-by: Miaoqian Lin <linmq006@gmail.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/20220602104223.54527-1-linmq006@gmail.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
    "before_after_code_files": [
      "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
    ]
  },
  "patch_diff": {
    "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c": [
      "File: drivers/gpu/drm/virtio/virtgpu_object.c -> drivers/gpu/drm/virtio/virtgpu_object.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:  shmem->pages = drm_gem_shmem_get_sg_table(&bo->base);",
      "172:   drm_gem_shmem_unpin(&bo->base);",
      "174:  }",
      "176:  if (use_dma_api) {",
      "",
      "[Removed Lines]",
      "171:  if (!shmem->pages) {",
      "173:   return -EINVAL;",
      "",
      "[Added Lines]",
      "171:  if (IS_ERR(shmem->pages)) {",
      "173:   return PTR_ERR(shmem->pages);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64b88afbd92fbf434759d1896a7cf705e1c00e79",
      "candidate_info": {
        "commit_hash": "64b88afbd92fbf434759d1896a7cf705e1c00e79",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/64b88afbd92fbf434759d1896a7cf705e1c00e79",
        "files": [
          "drivers/gpu/drm/virtio/virtgpu_object.c"
        ],
        "message": "drm/virtio: Correct drm_gem_shmem_get_sg_table() error handling\n\nPrevious commit fixed checking of the ERR_PTR value returned by\ndrm_gem_shmem_get_sg_table(), but it missed to zero out the shmem->pages,\nwhich will crash virtio_gpu_cleanup_object(). Add the missing zeroing of\nthe shmem->pages.\n\nFixes: c24968734abf (\"drm/virtio: Fix NULL vs IS_ERR checking in virtio_gpu_object_shmem_init\")\nReviewed-by: Emil Velikov <emil.l.velikov@gmail.com>\nSigned-off-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/20220630200726.1884320-2-dmitry.osipenko@collabora.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
          ],
          "candidate": [
            "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c": [
          "File: drivers/gpu/drm/virtio/virtgpu_object.c -> drivers/gpu/drm/virtio/virtgpu_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:  shmem->pages = drm_gem_shmem_get_sg_table(&bo->base);",
          "171:  if (IS_ERR(shmem->pages)) {",
          "172:   drm_gem_shmem_unpin(&bo->base);",
          "173:   return PTR_ERR(shmem->pages);",
          "174:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   shmem->pages = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5c9ed70d1a94c59dad7b1ecfc928863c0fe6ac0",
      "candidate_info": {
        "commit_hash": "b5c9ed70d1a94c59dad7b1ecfc928863c0fe6ac0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b5c9ed70d1a94c59dad7b1ecfc928863c0fe6ac0",
        "files": [
          "drivers/gpu/drm/virtio/virtgpu_drv.c",
          "drivers/gpu/drm/virtio/virtgpu_drv.h",
          "drivers/gpu/drm/virtio/virtgpu_kms.c",
          "drivers/gpu/drm/virtio/virtgpu_object.c",
          "drivers/gpu/drm/virtio/virtgpu_vq.c"
        ],
        "message": "drm/virtio: Improve DMA API usage for shmem BOs\n\nDRM API requires the DRM's driver to be backed with the device that can\nbe used for generic DMA operations. The VirtIO-GPU device can't perform\nDMA operations if it uses PCI transport because PCI device driver creates\na virtual VirtIO-GPU device that isn't associated with the PCI. Use PCI's\nGPU device for the DRM's device instead of the VirtIO-GPU device and drop\nDMA-related hacks from the VirtIO-GPU driver.\n\nSigned-off-by: Dmitry Osipenko <dmitry.osipenko@collabora.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/20220630200726.1884320-8-dmitry.osipenko@collabora.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/virtio/virtgpu_drv.c||drivers/gpu/drm/virtio/virtgpu_drv.c",
          "drivers/gpu/drm/virtio/virtgpu_drv.h||drivers/gpu/drm/virtio/virtgpu_drv.h",
          "drivers/gpu/drm/virtio/virtgpu_kms.c||drivers/gpu/drm/virtio/virtgpu_kms.c",
          "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c",
          "drivers/gpu/drm/virtio/virtgpu_vq.c||drivers/gpu/drm/virtio/virtgpu_vq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
          ],
          "candidate": [
            "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/virtio/virtgpu_drv.c||drivers/gpu/drm/virtio/virtgpu_drv.c": [
          "File: drivers/gpu/drm/virtio/virtgpu_drv.c -> drivers/gpu/drm/virtio/virtgpu_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: MODULE_PARM_DESC(modeset, \"Disable/Enable modesetting\");",
          "47: module_param_named(modeset, virtio_gpu_modeset, int, 0400);",
          "50: {",
          "52:  const char *pname = dev_name(&pdev->dev);",
          "53:  bool vga = (pdev->class >> 8) == PCI_CLASS_DISPLAY_VGA;",
          "55:  int ret;",
          "57:  DRM_INFO(\"pci: %s detected at %s\\n\",",
          "",
          "[Removed Lines]",
          "49: static int virtio_gpu_pci_quirk(struct drm_device *dev, struct virtio_device *vdev)",
          "51:  struct pci_dev *pdev = to_pci_dev(vdev->dev.parent);",
          "54:  char unique[20];",
          "",
          "[Added Lines]",
          "49: static int virtio_gpu_pci_quirk(struct drm_device *dev)",
          "51:  struct pci_dev *pdev = to_pci_dev(dev->dev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:    return ret;",
          "64:  }",
          "99: }",
          "101: static int virtio_gpu_probe(struct virtio_device *vdev)",
          "",
          "[Removed Lines]",
          "97:  snprintf(unique, sizeof(unique), \"pci:%s\", pname);",
          "98:  return drm_dev_set_unique(dev, unique);",
          "",
          "[Added Lines]",
          "65:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:  if (virtio_gpu_modeset == 0)",
          "110:   return -EINVAL;",
          "113:  if (IS_ERR(dev))",
          "114:   return PTR_ERR(dev);",
          "115:  vdev->priv = dev;",
          "117:  if (!strcmp(vdev->dev.parent->bus->name, \"pci\")) {",
          "119:   if (ret)",
          "120:    goto err_free;",
          "121:  }",
          "124:  if (ret)",
          "125:   goto err_free;",
          "",
          "[Removed Lines]",
          "112:  dev = drm_dev_alloc(&driver, &vdev->dev);",
          "118:   ret = virtio_gpu_pci_quirk(dev, vdev);",
          "123:  ret = virtio_gpu_init(dev);",
          "",
          "[Added Lines]",
          "85:  dev = drm_dev_alloc(&driver, vdev->dev.parent);",
          "91:   ret = virtio_gpu_pci_quirk(dev);",
          "96:  ret = virtio_gpu_init(vdev, dev);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/virtio/virtgpu_drv.h||drivers/gpu/drm/virtio/virtgpu_drv.h": [
          "File: drivers/gpu/drm/virtio/virtgpu_drv.h -> drivers/gpu/drm/virtio/virtgpu_drv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: struct virtio_gpu_object_shmem {",
          "103:  struct virtio_gpu_object base;",
          "106: };",
          "108: struct virtio_gpu_object_vram {",
          "",
          "[Removed Lines]",
          "104:  struct sg_table *pages;",
          "105:  uint32_t mapped;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215: };",
          "217: struct virtio_gpu_device {",
          "219:  struct drm_device *ddev;",
          "221:  struct virtio_device *vdev;",
          "",
          "[Removed Lines]",
          "218:  struct device *dev;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283: void virtio_gpu_create_context(struct drm_device *dev, struct drm_file *file);",
          "287: void virtio_gpu_deinit(struct drm_device *dev);",
          "288: void virtio_gpu_release(struct drm_device *dev);",
          "289: int virtio_gpu_driver_open(struct drm_device *dev, struct drm_file *file);",
          "",
          "[Removed Lines]",
          "286: int virtio_gpu_init(struct drm_device *dev);",
          "",
          "[Added Lines]",
          "283: int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/virtio/virtgpu_kms.c||drivers/gpu/drm/virtio/virtgpu_kms.c": [
          "File: drivers/gpu/drm/virtio/virtgpu_kms.c -> drivers/gpu/drm/virtio/virtgpu_kms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  vgdev->num_capsets = num_capsets;",
          "111: }",
          "114: {",
          "115:  static vq_callback_t *callbacks[] = {",
          "116:   virtio_gpu_ctrl_ack, virtio_gpu_cursor_ack",
          "",
          "[Removed Lines]",
          "113: int virtio_gpu_init(struct drm_device *dev)",
          "",
          "[Added Lines]",
          "113: int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  u32 num_scanouts, num_capsets;",
          "124:  int ret = 0;",
          "127:   return -ENODEV;",
          "129:  vgdev = kzalloc(sizeof(struct virtio_gpu_device), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "126:  if (!virtio_has_feature(dev_to_virtio(dev->dev), VIRTIO_F_VERSION_1))",
          "",
          "[Added Lines]",
          "126:  if (!virtio_has_feature(vdev, VIRTIO_F_VERSION_1))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:  vgdev->ddev = dev;",
          "134:  dev->dev_private = vgdev;",
          "138:  spin_lock_init(&vgdev->display_info_lock);",
          "139:  spin_lock_init(&vgdev->resource_export_lock);",
          "",
          "[Removed Lines]",
          "135:  vgdev->vdev = dev_to_virtio(dev->dev);",
          "136:  vgdev->dev = dev->dev;",
          "",
          "[Added Lines]",
          "135:  vgdev->vdev = vdev;",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/virtio/virtgpu_object.c||drivers/gpu/drm/virtio/virtgpu_object.c": [
          "File: drivers/gpu/drm/virtio/virtgpu_object.c -> drivers/gpu/drm/virtio/virtgpu_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  virtio_gpu_resource_id_put(vgdev, bo->hw_res_handle);",
          "69:  if (virtio_gpu_is_shmem(bo)) {",
          "85:   drm_gem_shmem_free(&bo->base);",
          "86:  } else if (virtio_gpu_is_vram(bo)) {",
          "87:   struct virtio_gpu_object_vram *vram = to_virtio_gpu_vram(bo);",
          "",
          "[Removed Lines]",
          "70:   struct virtio_gpu_object_shmem *shmem = to_virtio_gpu_shmem(bo);",
          "72:   if (shmem->pages) {",
          "73:    if (shmem->mapped) {",
          "74:     dma_unmap_sgtable(vgdev->vdev->dev.parent,",
          "75:           shmem->pages, DMA_TO_DEVICE, 0);",
          "76:     shmem->mapped = 0;",
          "77:    }",
          "79:    sg_free_table(shmem->pages);",
          "80:    kfree(shmem->pages);",
          "81:    shmem->pages = NULL;",
          "82:    drm_gem_shmem_unpin(&bo->base);",
          "83:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:      unsigned int *nents)",
          "154: {",
          "155:  bool use_dma_api = !virtio_has_dma_quirk(vgdev->vdev);",
          "157:  struct scatterlist *sg;",
          "188:           sizeof(struct virtio_gpu_mem_entry),",
          "",
          "[Removed Lines]",
          "156:  struct virtio_gpu_object_shmem *shmem = to_virtio_gpu_shmem(bo);",
          "158:  int si, ret;",
          "160:  ret = drm_gem_shmem_pin(&bo->base);",
          "161:  if (ret < 0)",
          "162:   return -EINVAL;",
          "170:  shmem->pages = drm_gem_shmem_get_sg_table(&bo->base);",
          "171:  if (IS_ERR(shmem->pages)) {",
          "172:   drm_gem_shmem_unpin(&bo->base);",
          "173:   shmem->pages = NULL;",
          "174:   return PTR_ERR(shmem->pages);",
          "175:  }",
          "177:  if (use_dma_api) {",
          "178:   ret = dma_map_sgtable(vgdev->vdev->dev.parent,",
          "179:           shmem->pages, DMA_TO_DEVICE, 0);",
          "180:   if (ret)",
          "181:    return ret;",
          "183:  } else {",
          "185:  }",
          "",
          "[Added Lines]",
          "142:  struct sg_table *pages;",
          "143:  int si;",
          "145:  pages = drm_gem_shmem_get_pages_sgt(&bo->base);",
          "146:  if (IS_ERR(pages))",
          "147:   return PTR_ERR(pages);",
          "149:  if (use_dma_api)",
          "151:  else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:  }",
          "195:  if (use_dma_api) {",
          "197:    (*ents)[si].addr = cpu_to_le64(sg_dma_address(sg));",
          "198:    (*ents)[si].length = cpu_to_le32(sg_dma_len(sg));",
          "199:    (*ents)[si].padding = 0;",
          "200:   }",
          "201:  } else {",
          "203:    (*ents)[si].addr = cpu_to_le64(sg_phys(sg));",
          "204:    (*ents)[si].length = cpu_to_le32(sg->length);",
          "205:    (*ents)[si].padding = 0;",
          "",
          "[Removed Lines]",
          "196:   for_each_sgtable_dma_sg(shmem->pages, sg, si) {",
          "202:   for_each_sgtable_sg(shmem->pages, sg, si) {",
          "",
          "[Added Lines]",
          "163:   for_each_sgtable_dma_sg(pages, sg, si) {",
          "169:   for_each_sgtable_sg(pages, sg, si) {",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/virtio/virtgpu_vq.c||drivers/gpu/drm/virtio/virtgpu_vq.c": [
          "File: drivers/gpu/drm/virtio/virtgpu_vq.c -> drivers/gpu/drm/virtio/virtgpu_vq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:  struct virtio_gpu_transfer_to_host_2d *cmd_p;",
          "596:  struct virtio_gpu_vbuffer *vbuf;",
          "597:  bool use_dma_api = !virtio_has_dma_quirk(vgdev->vdev);",
          "600:  if (virtio_gpu_is_shmem(bo) && use_dma_api)",
          "604:  cmd_p = virtio_gpu_alloc_cmd(vgdev, &vbuf, sizeof(*cmd_p));",
          "605:  memset(cmd_p, 0, sizeof(*cmd_p));",
          "",
          "[Removed Lines]",
          "598:  struct virtio_gpu_object_shmem *shmem = to_virtio_gpu_shmem(bo);",
          "601:   dma_sync_sgtable_for_device(vgdev->vdev->dev.parent,",
          "602:          shmem->pages, DMA_TO_DEVICE);",
          "",
          "[Added Lines]",
          "600:   dma_sync_sgtable_for_device(&vgdev->vdev->dev,",
          "601:          bo->base.sgt, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1019:  struct virtio_gpu_vbuffer *vbuf;",
          "1020:  bool use_dma_api = !virtio_has_dma_quirk(vgdev->vdev);",
          "1028:  cmd_p = virtio_gpu_alloc_cmd(vgdev, &vbuf, sizeof(*cmd_p));",
          "1029:  memset(cmd_p, 0, sizeof(*cmd_p));",
          "",
          "[Removed Lines]",
          "1022:  if (virtio_gpu_is_shmem(bo) && use_dma_api) {",
          "1023:   struct virtio_gpu_object_shmem *shmem = to_virtio_gpu_shmem(bo);",
          "1024:   dma_sync_sgtable_for_device(vgdev->vdev->dev.parent,",
          "1025:          shmem->pages, DMA_TO_DEVICE);",
          "1026:  }",
          "",
          "[Added Lines]",
          "1021:  if (virtio_gpu_is_shmem(bo) && use_dma_api)",
          "1022:   dma_sync_sgtable_for_device(&vgdev->vdev->dev,",
          "1023:          bo->base.sgt, DMA_TO_DEVICE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}