{
  "cve_id": "CVE-2023-2610",
  "cve_desc": "Integer Overflow or Wraparound in GitHub repository vim/vim prior to 9.0.1532.",
  "repo": "vim/vim",
  "patch_hash": "ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a",
  "patch_info": {
    "commit_hash": "ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a",
    "files": [
      "src/regexp.c",
      "src/testdir/test_substitute.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1532: crash when expanding \"~\" in substitute causes very long text\n\nProblem:    Crash when expanding \"~\" in substitute causes very long text.\nSolution:   Limit the text length to MAXCOL.",
    "before_after_code_files": [
      "src/regexp.c||src/regexp.c",
      "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/regexp.c||src/regexp.c": [
      "File: src/regexp.c -> src/regexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1767: regtilde(char_u *source, int magic)",
      "1768: {",
      "1769:     char_u *newsub = source;",
      "1771:     char_u *p;",
      "1775:     for (p = newsub; *p; ++p)",
      "1776:     {",
      "",
      "[Removed Lines]",
      "1770:     char_u *tmpsub;",
      "1772:     int  len;",
      "1773:     int  prevlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1779:      if (reg_prev_sub != NULL)",
      "1780:      {",
      "1784:   if (tmpsub != NULL)",
      "1785:   {",
      "1792:       if (!magic)",
      "1793:    ++p;   // back off backslash",
      "1797:    vim_free(newsub);",
      "1798:       newsub = tmpsub;",
      "1800:   }",
      "1801:      }",
      "1802:      else if (magic)",
      "",
      "[Removed Lines]",
      "1782:   prevlen = (int)STRLEN(reg_prev_sub);",
      "1783:   tmpsub = alloc(STRLEN(newsub) + prevlen);",
      "1787:       len = (int)(p - newsub); // not including ~",
      "1788:       mch_memmove(tmpsub, newsub, (size_t)len);",
      "1790:       mch_memmove(tmpsub + len, reg_prev_sub, (size_t)prevlen);",
      "1794:       STRCPY(tmpsub + len + prevlen, p + 1);",
      "1796:       if (newsub != source) // already allocated newsub",
      "1799:       p = newsub + len + prevlen;",
      "",
      "[Added Lines]",
      "1781:   size_t prevsublen = STRLEN(reg_prev_sub);",
      "1782:   size_t  newsublen = STRLEN(newsub);",
      "1783:   if (prevsublen > MAXCOL || newsublen > MAXCOL",
      "1784:          || newsublen + prevsublen > MAXCOL)",
      "1785:   {",
      "1786:       emsg(_(e_resulting_text_too_long));",
      "1787:       break;",
      "1788:   }",
      "1790:   char_u *tmpsub = alloc(newsublen + prevsublen);",
      "1794:       size_t prefixlen = p - newsub; // not including ~",
      "1795:       mch_memmove(tmpsub, newsub, prefixlen);",
      "1797:       mch_memmove(tmpsub + prefixlen, reg_prev_sub,",
      "1798:               prevsublen);",
      "1802:       STRCPY(tmpsub + prefixlen + prevsublen, p + 1);",
      "1804:       if (newsub != source) // allocated newsub before",
      "1807:       p = newsub + prefixlen + prevsublen;",
      "",
      "---------------"
    ],
    "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
      "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1414:   bw!",
      "1415: endfunc",
      "1417: \" This should be done last to reveal a memory leak when vim_regsub_both() is",
      "1418: \" called to evaluate an expression but it is not used in a second call.",
      "1419: func Test_z_substitute_expr_leak()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1417: \" Check handling expanding \"~\" resulting in extremely long text.",
      "1418: func Test_substitute_tilde_too_long()",
      "1419:   enew!",
      "1421:   s/.*/ixxx",
      "1422:   s//~~~~~~~~~AAAAAAA@(",
      "1424:   \" Either fails with \"out of memory\" or \"text too long\".",
      "1425:   \" This can take a long time.",
      "1426:   call assert_fails('sil! norm &&&&&&&&&', ['E1240:\\|E342:'])",
      "1428:   bwipe!",
      "1429: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "696: static int included_patches[] =",
      "699:     1531,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "699:     1532,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4467c433a767cc2dc046ff134094c1b6305b678",
      "candidate_info": {
        "commit_hash": "a4467c433a767cc2dc046ff134094c1b6305b678",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/a4467c433a767cc2dc046ff134094c1b6305b678",
        "files": [
          "src/testdir/test_substitute.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1535: test commented out in a wrong way\n\nProblem:    Test commented out in a wrong way.\nSolution:   Use legacy script comment character.",
        "before_after_code_files": [
          "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
          "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1417: \" Check handling expanding \"~\" resulting in extremely long text.",
          "1418: \" FIXME: disabled, it takes too long to run on CI",
          "1432: \" This should be done last to reveal a memory leak when vim_regsub_both() is",
          "1433: \" called to evaluate an expression but it is not used in a second call.",
          "",
          "[Removed Lines]",
          "1419: #func Test_substitute_tilde_too_long()",
          "1420: #  enew!",
          "1421: #",
          "1422: #  s/.*/ixxx",
          "1423: #  s//~~~~~~~~~AAAAAAA@(",
          "1424: #",
          "1425: #  \" Either fails with \"out of memory\" or \"text too long\".",
          "1426: #  \" This can take a long time.",
          "1427: #  call assert_fails('sil! norm &&&&&&&&&', ['E1240:\\|E342:'])",
          "1428: #",
          "1429: #  bwipe!",
          "1430: #endfunc",
          "",
          "[Added Lines]",
          "1419: \"func Test_substitute_tilde_too_long()",
          "1420: \"  enew!",
          "1421: \"",
          "1422: \"  s/.*/ixxx",
          "1423: \"  s//~~~~~~~~~AAAAAAA@(",
          "1424: \"",
          "1425: \"  \" Either fails with \"out of memory\" or \"text too long\".",
          "1426: \"  \" This can take a long time.",
          "1427: \"  call assert_fails('sil! norm &&&&&&&&&', ['E1240:\\|E342:'])",
          "1428: \"",
          "1429: \"  bwipe!",
          "1430: \"endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     1534,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     1535,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "916d6dd5b1834293e21a72ef70175aae57e78fba",
      "candidate_info": {
        "commit_hash": "916d6dd5b1834293e21a72ef70175aae57e78fba",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/916d6dd5b1834293e21a72ef70175aae57e78fba",
        "files": [
          "src/testdir/test_substitute.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1534: test for expanding \"~\" in substitute takes too long\n\nProblem:    Test for expanding \"~\" in substitute takes too long.\nSolution:   Disable the test for now.",
        "before_after_code_files": [
          "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
          "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1415: endfunc",
          "1417: \" Check handling expanding \"~\" resulting in extremely long text.",
          "1431: \" This should be done last to reveal a memory leak when vim_regsub_both() is",
          "1432: \" called to evaluate an expression but it is not used in a second call.",
          "",
          "[Removed Lines]",
          "1418: func Test_substitute_tilde_too_long()",
          "1419:   enew!",
          "1421:   s/.*/ixxx",
          "1422:   s//~~~~~~~~~AAAAAAA@(",
          "1424:   \" Either fails with \"out of memory\" or \"text too long\".",
          "1425:   \" This can take a long time.",
          "1426:   call assert_fails('sil! norm &&&&&&&&&', ['E1240:\\|E342:'])",
          "1428:   bwipe!",
          "1429: endfunc",
          "",
          "[Added Lines]",
          "1418: \" FIXME: disabled, it takes too long to run on CI",
          "1419: #func Test_substitute_tilde_too_long()",
          "1420: #  enew!",
          "1421: #",
          "1422: #  s/.*/ixxx",
          "1423: #  s//~~~~~~~~~AAAAAAA@(",
          "1424: #",
          "1425: #  \" Either fails with \"out of memory\" or \"text too long\".",
          "1426: #  \" This can take a long time.",
          "1427: #  call assert_fails('sil! norm &&&&&&&&&', ['E1240:\\|E342:'])",
          "1428: #",
          "1429: #  bwipe!",
          "1430: #endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     1533,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     1534,",
          "",
          "---------------"
        ]
      }
    }
  ]
}