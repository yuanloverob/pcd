{
  "cve_id": "CVE-2023-25675",
  "cve_desc": "TensorFlow is an open source machine learning platform. When running versions prior to 2.12.0 and 2.11.1 with XLA, `tf.raw_ops.Bincount` segfaults when given a parameter `weights` that is neither the same shape as parameter `arr` nor a length-0 tensor. A fix is included in TensorFlow 2.12.0 and 2.11.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "8ae76cf085f4be26295d2ecf2081e759e04b8acf",
  "patch_info": {
    "commit_hash": "8ae76cf085f4be26295d2ecf2081e759e04b8acf",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/8ae76cf085f4be26295d2ecf2081e759e04b8acf",
    "files": [
      "tensorflow/compiler/tests/BUILD",
      "tensorflow/compiler/tests/bincount_op_test.py",
      "tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
    ],
    "message": "[Tensorflow] Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 506514542",
    "before_after_code_files": [
      "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py",
      "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py": [
      "File: tensorflow/compiler/tests/bincount_op_test.py -> tensorflow/compiler/tests/bincount_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Copyright 2023 The TensorFlow Authors. All Rights Reserved.",
      "2: #",
      "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
      "4: # you may not use this file except in compliance with the License.",
      "5: # You may obtain a copy of the License at",
      "6: #",
      "7: #     http://www.apache.org/licenses/LICENSE-2.0",
      "8: #",
      "9: # Unless required by applicable law or agreed to in writing, software",
      "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
      "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "12: # See the License for the specific language governing permissions and",
      "13: # limitations under the License.",
      "14: # ==============================================================================",
      "15: \"\"\"Tests for bincount using the XLA JIT.\"\"\"",
      "16: from tensorflow.compiler.tests import xla_test",
      "17: from tensorflow.python.framework import errors",
      "18: from tensorflow.python.ops import gen_math_ops",
      "19: from tensorflow.python.platform import googletest",
      "22: class BincountTest(xla_test.XLATestCase):",
      "24:   def testInputRank0(self):",
      "25:     with self.session():",
      "26:       with self.test_scope():",
      "27:         bincount = gen_math_ops.bincount(arr=6, size=804, weights=[52, 351])",
      "29:       with self.assertRaisesRegex(",
      "30:           errors.InvalidArgumentError,",
      "31:           (",
      "32:               \"`weights` must be the same shape as `arr` or a length-0\"",
      "33:               \" `Tensor`, in which case it acts as all weights equal to 1.\"",
      "34:           ),",
      "35:       ):",
      "36:         self.evaluate(bincount)",
      "39: if __name__ == \"__main__\":",
      "40:   googletest.main()",
      "",
      "---------------"
    ],
    "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
      "File: tensorflow/compiler/tf2xla/kernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     StatusOr<xla::Shape> input_shape_or = ctx->builder()->GetShape(input);",
      "63:     OP_REQUIRES_OK(ctx, input_shape_or.status());",
      "64:     auto input_shape = input_shape_or.value();",
      "72:     auto rank = input_shape.rank();",
      "74:     OP_REQUIRES(ctx, rank <= 2,",
      "75:                 errors::InvalidArgument(",
      "76:                     \"Shape must be at most rank 2 but is rank \", rank));",
      "78:     xla::XlaOp weights = ctx->Input(2);",
      "79:     StatusOr<xla::Shape> weights_shape_or = ctx->builder()->GetShape(weights);",
      "80:     OP_REQUIRES_OK(ctx, weights_shape_or.status());",
      "82:     auto weights_shape = weights_shape_or.value();",
      "",
      "[Removed Lines]",
      "65:     auto size = input_shape.dimensions(0);",
      "67:     if (!size) {",
      "68:       output = xla::Broadcast(zero, {output_size});",
      "69:       ctx->SetOutput(0, output);",
      "70:       return;",
      "71:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:                     \"1. Received \",",
      "92:                     weights_shape.DebugString()));",
      "94:     auto weights_size = weights_shape.dimensions(0);",
      "95:     bool has_weights = false;",
      "96:     if (weights_size) {",
      "97:       has_weights = true;",
      "98:     }",
      "99:     xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});",
      "100:     xla::ScatterDimensionNumbers scatter_dnums;",
      "101:     scatter_dnums.set_index_vector_dim(1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     auto size = input_shape.dimensions(0);",
      "90:     if (!size) {",
      "91:       output = xla::Broadcast(zero, {output_size});",
      "92:       ctx->SetOutput(0, output);",
      "93:       return;",
      "94:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a6ee549013198a6e3096a4a19a2b3f3e6b0a7f0",
      "candidate_info": {
        "commit_hash": "2a6ee549013198a6e3096a4a19a2b3f3e6b0a7f0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2a6ee549013198a6e3096a4a19a2b3f3e6b0a7f0",
        "files": [
          "tensorflow/compiler/tests/BUILD",
          "tensorflow/compiler/tests/bincount_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
        ],
        "message": "[Tensorflow] Fix security vulnerability with DenseBincountOp\n\nPiperOrigin-RevId: 506514542",
        "before_after_code_files": [
          "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py",
          "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py",
            "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py",
            "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tests/bincount_op_test.py||tensorflow/compiler/tests/bincount_op_test.py": [
          "File: tensorflow/compiler/tests/bincount_op_test.py -> tensorflow/compiler/tests/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright 2023 The TensorFlow Authors. All Rights Reserved.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: # you may not use this file except in compliance with the License.",
          "5: # You may obtain a copy of the License at",
          "6: #",
          "7: #     http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "14: # ==============================================================================",
          "15: \"\"\"Tests for bincount using the XLA JIT.\"\"\"",
          "16: from tensorflow.compiler.tests import xla_test",
          "17: from tensorflow.python.framework import errors",
          "18: from tensorflow.python.ops import gen_math_ops",
          "19: from tensorflow.python.platform import googletest",
          "22: class BincountTest(xla_test.XLATestCase):",
          "24:   def testInputRank0(self):",
          "25:     with self.session():",
          "26:       with self.test_scope():",
          "27:         bincount = gen_math_ops.bincount(arr=6, size=804, weights=[52, 351])",
          "29:       with self.assertRaisesRegex(",
          "30:           errors.InvalidArgumentError,",
          "31:           (",
          "32:               \"`weights` must be the same shape as `arr` or a length-0\"",
          "33:               \" `Tensor`, in which case it acts as all weights equal to 1.\"",
          "34:           ),",
          "35:       ):",
          "36:         self.evaluate(bincount)",
          "39: if __name__ == \"__main__\":",
          "40:   googletest.main()",
          "",
          "---------------"
        ],
        "tensorflow/compiler/tf2xla/kernels/bincount_op.cc||tensorflow/compiler/tf2xla/kernels/bincount_op.cc": [
          "File: tensorflow/compiler/tf2xla/kernels/bincount_op.cc -> tensorflow/compiler/tf2xla/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     StatusOr<xla::Shape> input_shape_or = ctx->builder()->GetShape(input);",
          "63:     OP_REQUIRES_OK(ctx, input_shape_or.status());",
          "64:     auto input_shape = input_shape_or.value();",
          "72:     auto rank = input_shape.rank();",
          "74:     OP_REQUIRES(ctx, rank <= 2,",
          "75:                 errors::InvalidArgument(",
          "76:                     \"Shape must be at most rank 2 but is rank \", rank));",
          "78:     xla::XlaOp weights = ctx->Input(2);",
          "79:     StatusOr<xla::Shape> weights_shape_or = ctx->builder()->GetShape(weights);",
          "80:     OP_REQUIRES_OK(ctx, weights_shape_or.status());",
          "82:     auto weights_shape = weights_shape_or.value();",
          "",
          "[Removed Lines]",
          "65:     auto size = input_shape.dimensions(0);",
          "67:     if (!size) {",
          "68:       output = xla::Broadcast(zero, {output_size});",
          "69:       ctx->SetOutput(0, output);",
          "70:       return;",
          "71:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                     \"1. Received \",",
          "92:                     weights_shape.DebugString()));",
          "94:     auto weights_size = weights_shape.dimensions(0);",
          "95:     bool has_weights = false;",
          "96:     if (weights_size) {",
          "97:       has_weights = true;",
          "98:     }",
          "99:     xla::Shape output_shape = xla::ShapeUtil::MakeShape(dtype, {output_size});",
          "100:     xla::ScatterDimensionNumbers scatter_dnums;",
          "101:     scatter_dnums.set_index_vector_dim(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     auto size = input_shape.dimensions(0);",
          "90:     if (!size) {",
          "91:       output = xla::Broadcast(zero, {output_size});",
          "92:       ctx->SetOutput(0, output);",
          "93:       return;",
          "94:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}