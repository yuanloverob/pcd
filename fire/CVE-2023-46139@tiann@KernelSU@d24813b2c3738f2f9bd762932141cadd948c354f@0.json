{
  "cve_id": "CVE-2023-46139",
  "cve_desc": "KernelSU is a Kernel based root solution for Android. Starting in version 0.6.1 and prior to version 0.7.0, if a KernelSU installed device is infected with a malware whose app signing block specially constructed, it can take over root privileges on the device. The vulnerable verification logic actually obtains the signature of the last block with an id of `0x7109871a`, while the verification logic during Android installation is to obtain the first one. In addition to the actual signature upgrade that has been fixed (KSU thought it was V2 but was actually V3), there is also the problem of actual signature downgrading (KSU thought it was V2 but was actually V1). Find a condition in the signature verification logic that will cause the signature not to be found error, and KernelSU does not implement the same conditions, so KSU thinks there is a V2 signature, but the APK signature verification actually uses the V1 signature. This issue is fixed in version 0.7.0. As workarounds, keep the KernelSU manager installed and avoid installing unknown apps.",
  "repo": "tiann/KernelSU",
  "patch_hash": "d24813b2c3738f2f9bd762932141cadd948c354f",
  "patch_info": {
    "commit_hash": "d24813b2c3738f2f9bd762932141cadd948c354f",
    "repo": "tiann/KernelSU",
    "commit_url": "https://github.com/tiann/KernelSU/commit/d24813b2c3738f2f9bd762932141cadd948c354f",
    "files": [
      "kernel/Makefile",
      "kernel/apk_sign.c",
      "kernel/manager.c"
    ],
    "message": "Merge pull request from GHSA-86cp-3prf-pwqq\n\n* kernel: deny v2 signature blocks with incorrect number\n\n* kernel: reject v1 signature\n\n* kernel: enforce manager package name at compile time\n\n* kernel: don't specific package name in source code, use it in ci",
    "before_after_code_files": [
      "kernel/apk_sign.c||kernel/apk_sign.c",
      "kernel/manager.c||kernel/manager.c"
    ]
  },
  "patch_diff": {
    "kernel/apk_sign.c||kernel/apk_sign.c": [
      "File: kernel/apk_sign.c -> kernel/apk_sign.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: }",
      "55: static int ksu_sha256(const unsigned char *data, unsigned int datalen,",
      "57: {",
      "58:  struct crypto_shash *alg;",
      "59:  char *hash_alg_name = \"sha256\";",
      "",
      "[Removed Lines]",
      "56:   unsigned char *digest)",
      "",
      "[Added Lines]",
      "56:         unsigned char *digest)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70: }",
      "72: static bool check_block(struct file *fp, u32 *size4, loff_t *pos, u32 *offset,",
      "74: {",
      "75:  ksu_kernel_read_compat(fp, size4, 0x4, pos); // signer-sequence length",
      "76:  ksu_kernel_read_compat(fp, size4, 0x4, pos); // signer length",
      "",
      "[Removed Lines]",
      "73:    unsigned expected_size, const char* expected_sha256)",
      "",
      "[Added Lines]",
      "73:    unsigned expected_size, const char *expected_sha256)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:  if (*size4 == expected_size) {",
      "94:   char cert[CERT_MAX_LENGTH];",
      "95:   if (*size4 > CERT_MAX_LENGTH) {",
      "96:    pr_info(\"cert length overlimit\\n\");",
      "",
      "[Removed Lines]",
      "93:   #define CERT_MAX_LENGTH 1024",
      "",
      "[Added Lines]",
      "93: #define CERT_MAX_LENGTH 1024",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:   hash_str[SHA256_DIGEST_SIZE * 2] = '\\0';",
      "109:   bin2hex(hash_str, digest, SHA256_DIGEST_SIZE);",
      "111:   if (strcmp(expected_sha256, hash_str) == 0) {",
      "112:    return true;",
      "113:   }",
      "",
      "[Removed Lines]",
      "110:   pr_info(\"sha256: %s, expected: %s\\n\", hash_str, expected_sha256);",
      "",
      "[Added Lines]",
      "110:   pr_info(\"sha256: %s, expected: %s\\n\", hash_str,",
      "111:    expected_sha256);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "115:  return false;",
      "116: }",
      "120: {",
      "121:  unsigned char buffer[0x11] = { 0 };",
      "122:  u32 size4;",
      "",
      "[Removed Lines]",
      "118: static __always_inline bool",
      "119: check_v2_signature(char *path, unsigned expected_size, const char *expected_sha256)",
      "",
      "[Added Lines]",
      "119: struct zip_entry_header {",
      "120:  uint32_t signature;",
      "121:  uint16_t version;",
      "122:  uint16_t flags;",
      "123:  uint16_t compression;",
      "124:  uint16_t mod_time;",
      "125:  uint16_t mod_date;",
      "126:  uint32_t crc32;",
      "127:  uint32_t compressed_size;",
      "128:  uint32_t uncompressed_size;",
      "129:  uint16_t file_name_length;",
      "130:  uint16_t extra_field_length;",
      "131: } __attribute__((packed));",
      "134: static bool has_v1_signature_file(struct file *fp)",
      "135: {",
      "136:  struct zip_entry_header header;",
      "137:  const char MANIFEST[] = \"META-INF/MANIFEST.MF\";",
      "139:  loff_t pos = 0;",
      "141:  while (ksu_kernel_read_compat(fp, &header,",
      "142:           sizeof(struct zip_entry_header), &pos) ==",
      "143:         sizeof(struct zip_entry_header)) {",
      "144:   if (header.signature != 0x04034b50) {",
      "146:    return false;",
      "147:   }",
      "149:   if (header.file_name_length == sizeof(MANIFEST) - 1) {",
      "150:    char fileName[sizeof(MANIFEST)];",
      "151:    ksu_kernel_read_compat(fp, fileName,",
      "152:             header.file_name_length, &pos);",
      "153:    fileName[header.file_name_length] = '\\0';",
      "156:    if (strncmp(MANIFEST, fileName, sizeof(MANIFEST) - 1) ==",
      "157:        0) {",
      "158:     return true;",
      "159:    }",
      "160:   } else {",
      "162:    pos += header.file_name_length;",
      "163:   }",
      "166:   pos += header.extra_field_length + header.compressed_size;",
      "167:  }",
      "169:  return false;",
      "170: }",
      "172: static __always_inline bool check_v2_signature(char *path,",
      "173:             unsigned expected_size,",
      "174:             const char *expected_sha256)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:  loff_t pos;",
      "127:  bool v2_signing_valid = false;",
      "128:  bool v3_signing_exist = false;",
      "129:  bool v3_1_signing_exist = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:  int v2_signing_blocks = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "185:   offset = 4;",
      "186:   pr_info(\"id: 0x%08x\\n\", id);",
      "187:   if (id == 0x7109871au) {",
      "190:   } else if (id == 0xf05368c0u) {",
      "192:    v3_signing_exist = true;",
      "",
      "[Removed Lines]",
      "188:    v2_signing_valid = check_block(fp, &size4, &pos, &offset,",
      "189:         expected_size, expected_sha256);",
      "",
      "[Added Lines]",
      "244:    v2_signing_blocks++;",
      "245:    v2_signing_valid =",
      "246:     check_block(fp, &size4, &pos, &offset,",
      "247:          expected_size, expected_sha256);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "197:   pos += (size8 - offset);",
      "198:  }",
      "200: clean:",
      "201:  filp_close(fp, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "258:  if (v2_signing_blocks != 1) {",
      "259:   pr_err(\"Unexpected v2 signature count: %d\\n\",",
      "260:          v2_signing_blocks);",
      "261:   v2_signing_valid = false;",
      "262:  }",
      "264:  if (v2_signing_valid) {",
      "265:   int has_v1_signing = has_v1_signature_file(fp);",
      "266:   if (has_v1_signing) {",
      "267:    pr_err(\"Unexpected v1 signature scheme found!\\n\");",
      "268:    filp_close(fp, 0);",
      "269:    return false;",
      "270:   }",
      "271:  }",
      "",
      "---------------"
    ],
    "kernel/manager.c||kernel/manager.c": [
      "File: kernel/manager.c -> kernel/manager.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:  char *buf;",
      "25:  bool result = false;",
      "29:  if (task_uid(current->real_parent).val != 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #ifdef KSU_MANAGER_PACKAGE",
      "29:  if (strncmp(pkg + 1, KSU_MANAGER_PACKAGE,",
      "30:       sizeof(KSU_MANAGER_PACKAGE) - 1) != 0) {",
      "31:   pr_info(\"manager package is inconsistent with kernel build: %s\\n\",",
      "32:    KSU_MANAGER_PACKAGE);",
      "33:   return false;",
      "34:  }",
      "35: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf823a29e8cd1aa83e3c6f72d91a03c9db023343",
      "candidate_info": {
        "commit_hash": "bf823a29e8cd1aa83e3c6f72d91a03c9db023343",
        "repo": "tiann/KernelSU",
        "commit_url": "https://github.com/tiann/KernelSU/commit/bf823a29e8cd1aa83e3c6f72d91a03c9db023343",
        "files": [
          "kernel/manager.c"
        ],
        "message": "kernel: fix incorrect strcmp",
        "before_after_code_files": [
          "kernel/manager.c||kernel/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/manager.c||kernel/manager.c"
          ],
          "candidate": [
            "kernel/manager.c||kernel/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/manager.c||kernel/manager.c": [
          "File: kernel/manager.c -> kernel/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #ifdef KSU_MANAGER_PACKAGE",
          "29:  if (strncmp(pkg + 1, KSU_MANAGER_PACKAGE,",
          "31:   pr_info(\"manager package is inconsistent with kernel build: %s\\n\",",
          "32:    KSU_MANAGER_PACKAGE);",
          "33:   return false;",
          "",
          "[Removed Lines]",
          "30:       sizeof(KSU_MANAGER_PACKAGE) - 1) != 0) {",
          "",
          "[Added Lines]",
          "30:       sizeof(KSU_MANAGER_PACKAGE)) != 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}