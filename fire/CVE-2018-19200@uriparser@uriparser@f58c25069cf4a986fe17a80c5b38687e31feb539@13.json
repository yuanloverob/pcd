{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00a1f969683cfc8e24cc2a66def4ae8d0bcecb34",
      "candidate_info": {
        "commit_hash": "00a1f969683cfc8e24cc2a66def4ae8d0bcecb34",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/00a1f969683cfc8e24cc2a66def4ae8d0bcecb34",
        "files": [
          "ChangeLog",
          "src/UriNormalize.c"
        ],
        "message": "Address warning \"ISO C90 forbids mixing declarations and code\" (#28)\n\n.. in function NormalizeSyntaxMaskRequiredEx.",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: int URI_FUNC(NormalizeSyntaxMaskRequiredEx)(const URI_TYPE(Uri) * uri,",
          "486:   unsigned int * outMask) {",
          "488:  if ((uri == NULL) || (outMask == NULL)) {",
          "489:   return URI_ERROR_NULL;",
          "490:  }",
          "491: #if defined(__GNUC__) && ((__GNUC__ > 4) \\",
          "495:  memcpy(&writeableClone, uri, 1 * sizeof(URI_TYPE(Uri)));",
          "496:  URI_FUNC(NormalizeSyntaxEngine)(&writeableClone, 0, outMask, memory);",
          "497: #else",
          "",
          "[Removed Lines]",
          "492:         || ((__GNUC__ == 4) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 2)))",
          "494:  URI_TYPE(Uri) writeableClone;",
          "",
          "[Added Lines]",
          "489: #if defined(__GNUC__) && ((__GNUC__ > 4) \\",
          "490:   || ((__GNUC__ == 4) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 2)))",
          "492:  URI_TYPE(Uri) writeableClone;",
          "493: #endif",
          "500:   || ((__GNUC__ == 4) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 2)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "638a432694f9eba39de1ebdaca9b7ece1e80ca1e",
      "candidate_info": {
        "commit_hash": "638a432694f9eba39de1ebdaca9b7ece1e80ca1e",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/638a432694f9eba39de1ebdaca9b7ece1e80ca1e",
        "files": [
          "src/UriCommon.c",
          "src/UriCommon.h",
          "src/UriNormalize.c",
          "src/UriResolve.c"
        ],
        "message": "Pass memory manager to RemoveDotSegments*",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriCommon.h||src/UriCommon.h",
          "src/UriNormalize.c||src/UriNormalize.c",
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: UriBool URI_FUNC(RemoveDotSegments)(URI_TYPE(Uri) * uri,",
          "122:  if (uri == NULL) {",
          "123:   return URI_TRUE;",
          "124:  }",
          "126: }",
          "130: UriBool URI_FUNC(RemoveDotSegmentsEx)(URI_TYPE(Uri) * uri,",
          "132:  URI_TYPE(PathSegment) * walker;",
          "134:  if ((uri == NULL) || (uri->pathHead == NULL)) {",
          "135:   return URI_TRUE;",
          "136:  }",
          "",
          "[Removed Lines]",
          "121:   UriBool relative) {",
          "125:  return URI_FUNC(RemoveDotSegmentsEx)(uri, relative, uri->owner);",
          "131:         UriBool relative, UriBool pathOwned) {",
          "",
          "[Added Lines]",
          "121:   UriBool relative, UriMemoryManager * memory) {",
          "125:  return URI_FUNC(RemoveDotSegmentsEx)(uri, relative, uri->owner, memory);",
          "131:   UriBool relative, UriBool pathOwned, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:  const UriBool ABSOLUTE = URI_FALSE;",
          "346: }",
          "",
          "[Removed Lines]",
          "343: UriBool URI_FUNC(RemoveDotSegmentsAbsolute)(URI_TYPE(Uri) * uri) {",
          "345:  return URI_FUNC(RemoveDotSegments)(uri, ABSOLUTE);",
          "",
          "[Added Lines]",
          "342: UriBool URI_FUNC(RemoveDotSegmentsAbsolute)(URI_TYPE(Uri) * uri,",
          "343:   UriMemoryManager * memory) {",
          "345:  return URI_FUNC(RemoveDotSegments)(uri, ABSOLUTE, memory);",
          "",
          "---------------"
        ],
        "src/UriCommon.h||src/UriCommon.h": [
          "File: src/UriCommon.h -> src/UriCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   const URI_TYPE(TextRange) * a,",
          "83:   const URI_TYPE(TextRange) * b);",
          "87: UriBool URI_FUNC(RemoveDotSegmentsEx)(URI_TYPE(Uri) * uri,",
          "90: unsigned char URI_FUNC(HexdigToInt)(URI_CHAR hexdig);",
          "91: URI_CHAR URI_FUNC(HexToLetter)(unsigned int value);",
          "",
          "[Removed Lines]",
          "85: UriBool URI_FUNC(RemoveDotSegmentsAbsolute)(URI_TYPE(Uri) * uri);",
          "86: UriBool URI_FUNC(RemoveDotSegments)(URI_TYPE(Uri) * uri, UriBool relative);",
          "88:         UriBool relative, UriBool pathOwned);",
          "",
          "[Added Lines]",
          "85: UriBool URI_FUNC(RemoveDotSegmentsAbsolute)(URI_TYPE(Uri) * uri,",
          "86:   UriMemoryManager * memory);",
          "87: UriBool URI_FUNC(RemoveDotSegments)(URI_TYPE(Uri) * uri, UriBool relative,",
          "88:   UriMemoryManager * memory);",
          "90:   UriBool relative, UriBool pathOwned, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:   if (!URI_FUNC(RemoveDotSegmentsEx)(uri, relative,",
          "669:     (uri->owner == URI_TRUE)",
          "672:    URI_FUNC(PreventLeakage)(uri, doneMask);",
          "673:    return URI_ERROR_MALLOC;",
          "674:   }",
          "",
          "[Removed Lines]",
          "670:     || ((doneMask & URI_NORMALIZE_PATH) != 0)",
          "671:     )) {",
          "",
          "[Added Lines]",
          "670:     || ((doneMask & URI_NORMALIZE_PATH) != 0),",
          "671:     memory)) {",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:      if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "198:       return URI_ERROR_MALLOC;",
          "199:      }",
          "201:       return URI_ERROR_MALLOC;",
          "202:      }",
          "",
          "[Removed Lines]",
          "200:      if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Added Lines]",
          "200:      if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest, memory)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:       if (!URI_FUNC(CopyPath)(absDest, relSource, memory)) {",
          "215:        return URI_ERROR_MALLOC;",
          "216:       }",
          "218:        return URI_ERROR_MALLOC;",
          "219:       }",
          "",
          "[Removed Lines]",
          "217:       if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Added Lines]",
          "217:       if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest, memory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:         if (res != URI_SUCCESS) {",
          "255:          return res;",
          "256:         }",
          "258:          return URI_ERROR_MALLOC;",
          "259:         }",
          "",
          "[Removed Lines]",
          "257:         if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Added Lines]",
          "257:         if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:          return URI_ERROR_MALLOC;",
          "268:         }",
          "271:          return URI_ERROR_MALLOC;",
          "272:         }",
          "",
          "[Removed Lines]",
          "270:         if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest)) {",
          "",
          "[Added Lines]",
          "270:         if (!URI_FUNC(RemoveDotSegmentsAbsolute)(absDest, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ac231c9e918e658af86dc2414fb755d7546c4cc",
      "candidate_info": {
        "commit_hash": "5ac231c9e918e658af86dc2414fb755d7546c4cc",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/5ac231c9e918e658af86dc2414fb755d7546c4cc",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "docs: Fix two see-also links",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "9aba80ab01fd1c002358997e0069bc56b7b95542",
      "candidate_info": {
        "commit_hash": "9aba80ab01fd1c002358997e0069bc56b7b95542",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/9aba80ab01fd1c002358997e0069bc56b7b95542",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriNormalize.c"
        ],
        "message": "Add API function NormalizeSyntaxMaskRequiredEx",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: unsigned int URI_FUNC(NormalizeSyntaxMaskRequired)(const URI_TYPE(Uri) * uri);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514: int URI_FUNC(NormalizeSyntaxMaskRequiredEx)(const URI_TYPE(Uri) * uri,",
          "515:   unsigned int * outMask);",
          "",
          "---------------"
        ],
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: static int URI_FUNC(NormalizeSyntaxEngine)(URI_TYPE(Uri) * uri, unsigned int inMask,",
          "80:   unsigned int * outMask, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: unsigned int URI_FUNC(NormalizeSyntaxMaskRequired)(const URI_TYPE(Uri) * uri) {",
          "476: #if defined(__GNUC__) && ((__GNUC__ > 4) \\",
          "477:         || ((__GNUC__ == 4) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 2)))",
          "479:  URI_TYPE(Uri) writeableClone;",
          "480:  memcpy(&writeableClone, uri, 1 * sizeof(URI_TYPE(Uri)));",
          "482: #else",
          "484: #endif",
          "486: }",
          "",
          "[Removed Lines]",
          "475:  unsigned int res;",
          "481:  URI_FUNC(NormalizeSyntaxEngine)(&writeableClone, 0, &res, memory);",
          "483:  URI_FUNC(NormalizeSyntaxEngine)((URI_TYPE(Uri) *)uri, 0, &res, memory);",
          "485:  return res;",
          "",
          "[Added Lines]",
          "479:  URI_FUNC(NormalizeSyntaxMaskRequiredEx)(uri, &outMask);",
          "480:  return outMask;",
          "481: }",
          "485: int URI_FUNC(NormalizeSyntaxMaskRequiredEx)(const URI_TYPE(Uri) * uri,",
          "486:   unsigned int * outMask) {",
          "488:  if ((uri == NULL) || (outMask == NULL)) {",
          "489:   return URI_ERROR_NULL;",
          "490:  }",
          "496:  URI_FUNC(NormalizeSyntaxEngine)(&writeableClone, 0, outMask, memory);",
          "498:  URI_FUNC(NormalizeSyntaxEngine)((URI_TYPE(Uri) *)uri, 0, outMask, memory);",
          "500:  return URI_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:   unsigned int inMask, unsigned int * outMask,",
          "512:   UriMemoryManager * memory) {",
          "513:  unsigned int doneMask = URI_NORMALIZED;",
          "514:  if (uri == NULL) {",
          "515:   if (outMask != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:  if (outMask == NULL) {",
          "532:   assert(memory != NULL);",
          "533:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2b1f8e957b9badcf04e1bf840d8c9762f806aa1",
      "candidate_info": {
        "commit_hash": "a2b1f8e957b9badcf04e1bf840d8c9762f806aa1",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a2b1f8e957b9badcf04e1bf840d8c9762f806aa1",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Cover realloc(NULL, 0) in uriTestMemoryManager\n\nFrom man 3 malloc:\n\n\"If ptr is NULL, then the call is equivalent to malloc(size),\nfor *all* values of size; if size is equal to zero, and ptr is\nnot NULL, then the call is equivalent to free(ptr).\"\n\n\"If size is 0, then malloc() returns either NULL, or a unique\npointer value that can later be successfully passed to free().\"",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:  memory->free(memory, buffer);",
          "370:  buffer = NULL;",
          "373:  buffer = memory->malloc(memory, mallocSize);",
          "374:  if (buffer == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  buffer = memory->realloc(memory, NULL, 0);",
          "374:  if (buffer != NULL) {",
          "375:   memory->free(memory, buffer);",
          "376:   buffer = NULL;",
          "377:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:  memory->reallocarray(memory, buffer, reallocarrayNmemb, 0);",
          "410:  buffer = NULL;",
          "413:  buffer = memory->reallocarray(memory, NULL, callocNmemb, callocSize);",
          "414:  if (buffer == NULL) {",
          "415:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "416:  }",
          "418:  memory->free(memory, buffer);",
          "419:  buffer = NULL;",
          "421:  return URI_SUCCESS;",
          "422: }",
          "",
          "[Removed Lines]",
          "417:  buffer[callocTotalSize - 1] = '\\xFB';",
          "",
          "[Added Lines]",
          "420:  buffer = memory->malloc(memory, mallocSize);",
          "421:  if (buffer == NULL) {",
          "422:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "423:  }",
          "424:  buffer[mallocSize - 1] = '\\xFB';",
          "425:  memory->reallocarray(memory, buffer, 0, 0);",
          "426:  buffer = NULL;",
          "433:  buffer[callocTotalSize - 1] = '\\xFC';",
          "438:  buffer = memory->reallocarray(memory, NULL, 0, callocSize);",
          "439:  if (buffer != NULL) {",
          "440:   memory->free(memory, buffer);",
          "441:   buffer = NULL;",
          "442:  }",
          "445:  buffer = memory->reallocarray(memory, NULL, callocNmemb, 0);",
          "446:  if (buffer != NULL) {",
          "447:   memory->free(memory, buffer);",
          "448:   buffer = NULL;",
          "449:  }",
          "452:  buffer = memory->reallocarray(memory, NULL, 0, 0);",
          "453:  if (buffer != NULL) {",
          "454:   memory->free(memory, buffer);",
          "455:   buffer = NULL;",
          "456:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}