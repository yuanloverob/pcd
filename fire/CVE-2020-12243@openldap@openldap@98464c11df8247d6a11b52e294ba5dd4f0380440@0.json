{
  "cve_id": "CVE-2020-12243",
  "cve_desc": "In filter.c in slapd in OpenLDAP before 2.4.50, LDAP search filters with nested boolean expressions can result in denial of service (daemon crash).",
  "repo": "openldap/openldap",
  "patch_hash": "98464c11df8247d6a11b52e294ba5dd4f0380440",
  "patch_info": {
    "commit_hash": "98464c11df8247d6a11b52e294ba5dd4f0380440",
    "repo": "openldap/openldap",
    "commit_url": "https://github.com/openldap/openldap/commit/98464c11df8247d6a11b52e294ba5dd4f0380440",
    "files": [
      "servers/slapd/filter.c"
    ],
    "message": "ITS#9202 limit depth of nested filters\n\nUsing a hardcoded limit for now; no reasonable apps\nshould ever run into it.",
    "before_after_code_files": [
      "servers/slapd/filter.c||servers/slapd/filter.c"
    ]
  },
  "patch_diff": {
    "servers/slapd/filter.c||servers/slapd/filter.c": [
      "File: servers/slapd/filter.c -> servers/slapd/filter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: const Filter *slap_filter_objectClass_pres;",
      "38: const struct berval *slap_filterstr_objectClass_pres;",
      "40: static int get_filter_list(",
      "41:  Operation *op,",
      "42:  BerElement *ber,",
      "43:  Filter **f,",
      "46: static int get_ssa(",
      "47:  Operation *op,",
      "",
      "[Removed Lines]",
      "44:  const char **text );",
      "",
      "[Added Lines]",
      "40: #ifndef SLAPD_MAX_FILTER_DEPTH",
      "41: #define SLAPD_MAX_FILTER_DEPTH 5000",
      "42: #endif",
      "48:  const char **text,",
      "49:  int depth );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:  return;",
      "81: }",
      "85:  Operation *op,",
      "86:  BerElement *ber,",
      "87:  Filter **filt,",
      "89: {",
      "90:  ber_tag_t tag;",
      "91:  ber_len_t len;",
      "",
      "[Removed Lines]",
      "83: int",
      "84: get_filter(",
      "88:  const char **text )",
      "",
      "[Added Lines]",
      "88: static int",
      "89: get_filter0(",
      "93:  const char **text,",
      "94:  int depth )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "129:  tag = ber_peek_tag( ber, &len );",
      "131:  if( tag == LBER_ERROR ) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135:  if( depth > SLAPD_MAX_FILTER_DEPTH ) {",
      "137:   return SLAPD_DISCONNECT;",
      "138:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:  case LDAP_FILTER_AND:",
      "223:   Debug( LDAP_DEBUG_FILTER, \"AND\\n\", 0, 0, 0 );",
      "225:   if ( err != LDAP_SUCCESS ) {",
      "226:    break;",
      "227:   }",
      "",
      "[Removed Lines]",
      "224:   err = get_filter_list( op, ber, &f.f_and, text );",
      "",
      "[Added Lines]",
      "235:   err = get_filter_list( op, ber, &f.f_and, text, depth+1 );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "235:  case LDAP_FILTER_OR:",
      "236:   Debug( LDAP_DEBUG_FILTER, \"OR\\n\", 0, 0, 0 );",
      "238:   if ( err != LDAP_SUCCESS ) {",
      "239:    break;",
      "240:   }",
      "",
      "[Removed Lines]",
      "237:   err = get_filter_list( op, ber, &f.f_or, text );",
      "",
      "[Added Lines]",
      "248:   err = get_filter_list( op, ber, &f.f_or, text, depth+1 );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "248:  case LDAP_FILTER_NOT:",
      "249:   Debug( LDAP_DEBUG_FILTER, \"NOT\\n\", 0, 0, 0 );",
      "250:   (void) ber_skip_tag( ber, &len );",
      "252:   if ( err != LDAP_SUCCESS ) {",
      "253:    break;",
      "254:   }",
      "",
      "[Removed Lines]",
      "251:   err = get_filter( op, ber, &f.f_not, text );",
      "",
      "[Added Lines]",
      "262:   err = get_filter0( op, ber, &f.f_not, text, depth+1 );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "311:  return( err );",
      "312: }",
      "314: static int",
      "315: get_filter_list( Operation *op, BerElement *ber,",
      "316:  Filter **f,",
      "318: {",
      "319:  Filter  **new;",
      "320:  int  err;",
      "",
      "[Removed Lines]",
      "317:  const char **text )",
      "",
      "[Added Lines]",
      "325: int",
      "326: get_filter(",
      "327:  Operation *op,",
      "328:  BerElement *ber,",
      "329:  Filter **filt,",
      "330:  const char **text )",
      "331: {",
      "332:  return get_filter0( op, ber, filt, text, 0 );",
      "333: }",
      "339:  const char **text,",
      "340:  int depth )",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "328:   tag != LBER_DEFAULT;",
      "329:   tag = ber_next_element( ber, &len, last ) )",
      "330:  {",
      "332:   if ( err != LDAP_SUCCESS )",
      "333:    return( err );",
      "334:   new = &(*new)->f_next;",
      "",
      "[Removed Lines]",
      "331:   err = get_filter( op, ber, new, text );",
      "",
      "[Added Lines]",
      "354:   err = get_filter0( op, ber, new, text, depth );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d38d48fc8f572dedfb67b9da61a2ba3b125ced91",
      "candidate_info": {
        "commit_hash": "d38d48fc8f572dedfb67b9da61a2ba3b125ced91",
        "repo": "openldap/openldap",
        "commit_url": "https://github.com/openldap/openldap/commit/d38d48fc8f572dedfb67b9da61a2ba3b125ced91",
        "files": [
          "servers/slapd/filter.c"
        ],
        "message": "ITS#9202 limit depth of nested filters\n\nUsing a hardcoded limit for now; no reasonable apps\nshould ever run into it.",
        "before_after_code_files": [
          "servers/slapd/filter.c||servers/slapd/filter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "servers/slapd/filter.c||servers/slapd/filter.c"
          ],
          "candidate": [
            "servers/slapd/filter.c||servers/slapd/filter.c"
          ]
        }
      },
      "candidate_diff": {
        "servers/slapd/filter.c||servers/slapd/filter.c": [
          "File: servers/slapd/filter.c -> servers/slapd/filter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: const Filter *slap_filter_objectClass_pres;",
          "38: const struct berval *slap_filterstr_objectClass_pres;",
          "40: static int get_filter_list(",
          "41:  Operation *op,",
          "42:  BerElement *ber,",
          "43:  Filter **f,",
          "46: static int get_ssa(",
          "47:  Operation *op,",
          "",
          "[Removed Lines]",
          "44:  const char **text );",
          "",
          "[Added Lines]",
          "40: #ifndef SLAPD_MAX_FILTER_DEPTH",
          "41: #define SLAPD_MAX_FILTER_DEPTH 5000",
          "42: #endif",
          "48:  const char **text,",
          "49:  int depth );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  return;",
          "81: }",
          "85:  Operation *op,",
          "86:  BerElement *ber,",
          "87:  Filter **filt,",
          "89: {",
          "90:  ber_tag_t tag;",
          "91:  ber_len_t len;",
          "",
          "[Removed Lines]",
          "83: int",
          "84: get_filter(",
          "88:  const char **text )",
          "",
          "[Added Lines]",
          "88: static int",
          "89: get_filter0(",
          "93:  const char **text,",
          "94:  int depth )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:  tag = ber_peek_tag( ber, &len );",
          "131:  if( tag == LBER_ERROR ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:  if( depth > SLAPD_MAX_FILTER_DEPTH ) {",
          "137:   return SLAPD_DISCONNECT;",
          "138:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:  case LDAP_FILTER_AND:",
          "223:   Debug( LDAP_DEBUG_FILTER, \"AND\\n\" );",
          "225:   if ( err != LDAP_SUCCESS ) {",
          "226:    break;",
          "227:   }",
          "",
          "[Removed Lines]",
          "224:   err = get_filter_list( op, ber, &f.f_and, text );",
          "",
          "[Added Lines]",
          "235:   err = get_filter_list( op, ber, &f.f_and, text, depth+1 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:  case LDAP_FILTER_OR:",
          "236:   Debug( LDAP_DEBUG_FILTER, \"OR\\n\" );",
          "238:   if ( err != LDAP_SUCCESS ) {",
          "239:    break;",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:   err = get_filter_list( op, ber, &f.f_or, text );",
          "",
          "[Added Lines]",
          "248:   err = get_filter_list( op, ber, &f.f_or, text, depth+1 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "248:  case LDAP_FILTER_NOT:",
          "249:   Debug( LDAP_DEBUG_FILTER, \"NOT\\n\" );",
          "250:   (void) ber_skip_tag( ber, &len );",
          "252:   if ( err != LDAP_SUCCESS ) {",
          "253:    break;",
          "254:   }",
          "",
          "[Removed Lines]",
          "251:   err = get_filter( op, ber, &f.f_not, text );",
          "",
          "[Added Lines]",
          "262:   err = get_filter0( op, ber, &f.f_not, text, depth+1 );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "311:  return( err );",
          "312: }",
          "314: static int",
          "315: get_filter_list( Operation *op, BerElement *ber,",
          "316:  Filter **f,",
          "318: {",
          "319:  Filter  **new;",
          "320:  int  err;",
          "",
          "[Removed Lines]",
          "317:  const char **text )",
          "",
          "[Added Lines]",
          "325: int",
          "326: get_filter(",
          "327:  Operation *op,",
          "328:  BerElement *ber,",
          "329:  Filter **filt,",
          "330:  const char **text )",
          "331: {",
          "332:  return get_filter0( op, ber, filt, text, 0 );",
          "333: }",
          "339:  const char **text,",
          "340:  int depth )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "328:   tag != LBER_DEFAULT;",
          "329:   tag = ber_next_element( ber, &len, last ) )",
          "330:  {",
          "332:   if ( err != LDAP_SUCCESS )",
          "333:    return( err );",
          "334:   new = &(*new)->f_next;",
          "",
          "[Removed Lines]",
          "331:   err = get_filter( op, ber, new, text );",
          "",
          "[Added Lines]",
          "354:   err = get_filter0( op, ber, new, text, depth );",
          "",
          "---------------"
        ]
      }
    }
  ]
}