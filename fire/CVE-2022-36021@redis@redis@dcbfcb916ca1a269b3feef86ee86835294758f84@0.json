{
  "cve_id": "CVE-2022-36021",
  "cve_desc": "Redis is an in-memory database that persists on disk. Authenticated users can use string matching commands (like `SCAN` or `KEYS`) with a specially crafted pattern to trigger a denial-of-service attack on Redis, causing it to hang and consume 100% CPU time. The problem is fixed in Redis versions 6.0.18, 6.2.11, 7.0.9.\n",
  "repo": "redis/redis",
  "patch_hash": "dcbfcb916ca1a269b3feef86ee86835294758f84",
  "patch_info": {
    "commit_hash": "dcbfcb916ca1a269b3feef86ee86835294758f84",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/dcbfcb916ca1a269b3feef86ee86835294758f84",
    "files": [
      "src/util.c",
      "tests/unit/keyspace.tcl"
    ],
    "message": "String pattern matching had exponential time complexity on pathological patterns (CVE-2022-36021) (#11858)\n\nAuthenticated users can use string matching commands with a\nspecially crafted pattern to trigger a denial-of-service attack on Redis,\ncausing it to hang and consume 100% CPU time.\n\nCo-authored-by: Tom Levy <tomlevy93@gmail.com>",
    "before_after_code_files": [
      "src/util.c||src/util.c",
      "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
    ]
  },
  "patch_diff": {
    "src/util.c||src/util.c": [
      "File: src/util.c -> src/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: #define UNUSED(x) ((void)(x))",
      "58: {",
      "59:     while(patternLen && stringLen) {",
      "60:         switch(pattern[0]) {",
      "",
      "[Removed Lines]",
      "56: int stringmatchlen(const char *pattern, int patternLen,",
      "57:         const char *string, int stringLen, int nocase)",
      "",
      "[Added Lines]",
      "56: static int stringmatchlen_impl(const char *pattern, int patternLen,",
      "57:         const char *string, int stringLen, int nocase, int *skipLongerMatches)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:             if (patternLen == 1)",
      "68:             while(stringLen) {",
      "72:                 string++;",
      "73:                 stringLen--;",
      "74:             }",
      "76:             break;",
      "77:         case '?':",
      "",
      "[Removed Lines]",
      "69:                 if (stringmatchlen(pattern+1, patternLen-1,",
      "70:                             string, stringLen, nocase))",
      "",
      "[Added Lines]",
      "69:                 if (stringmatchlen_impl(pattern+1, patternLen-1,",
      "70:                             string, stringLen, nocase, skipLongerMatches))",
      "72:                 if (*skipLongerMatches)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "173:     return 0;",
      "174: }",
      "176: int stringmatch(const char *pattern, const char *string, int nocase) {",
      "177:     return stringmatchlen(pattern,strlen(pattern),string,strlen(string),nocase);",
      "178: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "189: int stringmatchlen(const char *pattern, int patternLen,",
      "190:         const char *string, int stringLen, int nocase) {",
      "191:     int skipLongerMatches = 0;",
      "192:     return stringmatchlen_impl(pattern,patternLen,string,stringLen,nocase,&skipLongerMatches);",
      "193: }",
      "",
      "---------------"
    ],
    "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl": [
      "File: tests/unit/keyspace.tcl -> tests/unit/keyspace.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "493:         r keys *",
      "494:         r keys *",
      "495:     } {dlskeriewrioeuwqoirueioqwrueoqwrueqw}",
      "496: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "497:     test {Regression for pattern matching long nested loops} {",
      "498:         r flushdb",
      "499:         r SET aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 1",
      "500:         r KEYS \"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*b\"",
      "501:     } {}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b565570f2bc4b2e454676c9fa8a5b01eef201b1",
      "candidate_info": {
        "commit_hash": "8b565570f2bc4b2e454676c9fa8a5b01eef201b1",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/8b565570f2bc4b2e454676c9fa8a5b01eef201b1",
        "files": [
          "src/util.c",
          "tests/unit/keyspace.tcl"
        ],
        "message": "String pattern matching had exponential time complexity on pathological patterns (CVE-2022-36021)\n\nAuthenticated users can use string matching commands with a\nspecially crafted pattern to trigger a denial-of-service attack on Redis,\ncausing it to hang and consume 100% CPU time.\n\n(cherry picked from commit e75f92047c22e659d49bba3a083cd0c9935f21e6)\n(cherry picked from commit e8a9d3f63aebf6065d69bd0125d4b9c367f88def)",
        "before_after_code_files": [
          "src/util.c||src/util.c",
          "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ],
          "candidate": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"sha256.h\"",
          "50: {",
          "51:     while(patternLen && stringLen) {",
          "52:         switch(pattern[0]) {",
          "",
          "[Removed Lines]",
          "48: int stringmatchlen(const char *pattern, int patternLen,",
          "49:         const char *string, int stringLen, int nocase)",
          "",
          "[Added Lines]",
          "48: static int stringmatchlen_impl(const char *pattern, int patternLen,",
          "49:         const char *string, int stringLen, int nocase, int *skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             if (patternLen == 1)",
          "60:             while(stringLen) {",
          "64:                 string++;",
          "65:                 stringLen--;",
          "66:             }",
          "68:             break;",
          "69:         case '?':",
          "",
          "[Removed Lines]",
          "61:                 if (stringmatchlen(pattern+1, patternLen-1,",
          "62:                             string, stringLen, nocase))",
          "",
          "[Added Lines]",
          "61:                 if (stringmatchlen_impl(pattern+1, patternLen-1,",
          "62:                             string, stringLen, nocase, skipLongerMatches))",
          "64:                 if (*skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:     return 0;",
          "166: }",
          "168: int stringmatch(const char *pattern, const char *string, int nocase) {",
          "169:     return stringmatchlen(pattern,strlen(pattern),string,strlen(string),nocase);",
          "170: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: int stringmatchlen(const char *pattern, int patternLen,",
          "182:         const char *string, int stringLen, int nocase) {",
          "183:     int skipLongerMatches = 0;",
          "184:     return stringmatchlen_impl(pattern,patternLen,string,stringLen,nocase,&skipLongerMatches);",
          "185: }",
          "",
          "---------------"
        ],
        "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl": [
          "File: tests/unit/keyspace.tcl -> tests/unit/keyspace.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         r keys *",
          "273:         r keys *",
          "274:     } {dlskeriewrioeuwqoirueioqwrueoqwrueqw}",
          "275: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:     test {Regression for pattern matching long nested loops} {",
          "277:         r flushdb",
          "278:         r SET aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 1",
          "279:         r KEYS \"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*b\"",
          "280:     } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0825552565e5fdab2e87950579c4f0bedded3e3c",
      "candidate_info": {
        "commit_hash": "0825552565e5fdab2e87950579c4f0bedded3e3c",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/0825552565e5fdab2e87950579c4f0bedded3e3c",
        "files": [
          "src/util.c",
          "tests/unit/keyspace.tcl"
        ],
        "message": "String pattern matching had exponential time complexity on pathological patterns (CVE-2022-36021)\n\nAuthenticated users can use string matching commands with a\nspecially crafted pattern to trigger a denial-of-service attack on Redis,\ncausing it to hang and consume 100% CPU time.",
        "before_after_code_files": [
          "src/util.c||src/util.c",
          "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ],
          "candidate": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"config.h\"",
          "55: {",
          "56:     while(patternLen && stringLen) {",
          "57:         switch(pattern[0]) {",
          "",
          "[Removed Lines]",
          "53: int stringmatchlen(const char *pattern, int patternLen,",
          "54:         const char *string, int stringLen, int nocase)",
          "",
          "[Added Lines]",
          "53: static int stringmatchlen_impl(const char *pattern, int patternLen,",
          "54:         const char *string, int stringLen, int nocase, int *skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:             if (patternLen == 1)",
          "65:             while(stringLen) {",
          "69:                 string++;",
          "70:                 stringLen--;",
          "71:             }",
          "73:             break;",
          "74:         case '?':",
          "",
          "[Removed Lines]",
          "66:                 if (stringmatchlen(pattern+1, patternLen-1,",
          "67:                             string, stringLen, nocase))",
          "",
          "[Added Lines]",
          "66:                 if (stringmatchlen_impl(pattern+1, patternLen-1,",
          "67:                             string, stringLen, nocase, skipLongerMatches))",
          "69:                 if (*skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:     return 0;",
          "171: }",
          "173: int stringmatch(const char *pattern, const char *string, int nocase) {",
          "174:     return stringmatchlen(pattern,strlen(pattern),string,strlen(string),nocase);",
          "175: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: int stringmatchlen(const char *pattern, int patternLen,",
          "187:         const char *string, int stringLen, int nocase) {",
          "188:     int skipLongerMatches = 0;",
          "189:     return stringmatchlen_impl(pattern,patternLen,string,stringLen,nocase,&skipLongerMatches);",
          "190: }",
          "",
          "---------------"
        ],
        "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl": [
          "File: tests/unit/keyspace.tcl -> tests/unit/keyspace.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:         r keys *",
          "490:         r keys *",
          "491:     } {dlskeriewrioeuwqoirueioqwrueoqwrueqw}",
          "492: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     test {Regression for pattern matching long nested loops} {",
          "494:         r flushdb",
          "495:         r SET aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 1",
          "496:         r KEYS \"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*b\"",
          "497:     } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f44b6a0e9ad867ee95479891b7546661b653bb78",
      "candidate_info": {
        "commit_hash": "f44b6a0e9ad867ee95479891b7546661b653bb78",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/f44b6a0e9ad867ee95479891b7546661b653bb78",
        "files": [
          "src/util.c",
          "tests/unit/keyspace.tcl"
        ],
        "message": "String pattern matching had exponential time complexity on pathological patterns (CVE-2022-36021)\n\nAuthenticated users can use string matching commands with a\nspecially crafted pattern to trigger a denial-of-service attack on Redis,\ncausing it to hang and consume 100% CPU time.\n\n(cherry picked from commit e75f92047c22e659d49bba3a083cd0c9935f21e6)",
        "before_after_code_files": [
          "src/util.c||src/util.c",
          "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ],
          "candidate": [
            "src/util.c||src/util.c",
            "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"sha256.h\"",
          "50: {",
          "51:     while(patternLen && stringLen) {",
          "52:         switch(pattern[0]) {",
          "",
          "[Removed Lines]",
          "48: int stringmatchlen(const char *pattern, int patternLen,",
          "49:         const char *string, int stringLen, int nocase)",
          "",
          "[Added Lines]",
          "48: static int stringmatchlen_impl(const char *pattern, int patternLen,",
          "49:         const char *string, int stringLen, int nocase, int *skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             if (patternLen == 1)",
          "60:             while(stringLen) {",
          "64:                 string++;",
          "65:                 stringLen--;",
          "66:             }",
          "68:             break;",
          "69:         case '?':",
          "",
          "[Removed Lines]",
          "61:                 if (stringmatchlen(pattern+1, patternLen-1,",
          "62:                             string, stringLen, nocase))",
          "",
          "[Added Lines]",
          "61:                 if (stringmatchlen_impl(pattern+1, patternLen-1,",
          "62:                             string, stringLen, nocase, skipLongerMatches))",
          "64:                 if (*skipLongerMatches)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:     return 0;",
          "166: }",
          "168: int stringmatch(const char *pattern, const char *string, int nocase) {",
          "169:     return stringmatchlen(pattern,strlen(pattern),string,strlen(string),nocase);",
          "170: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: int stringmatchlen(const char *pattern, int patternLen,",
          "182:         const char *string, int stringLen, int nocase) {",
          "183:     int skipLongerMatches = 0;",
          "184:     return stringmatchlen_impl(pattern,patternLen,string,stringLen,nocase,&skipLongerMatches);",
          "185: }",
          "",
          "---------------"
        ],
        "tests/unit/keyspace.tcl||tests/unit/keyspace.tcl": [
          "File: tests/unit/keyspace.tcl -> tests/unit/keyspace.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:         r keys *",
          "480:         r keys *",
          "481:     } {dlskeriewrioeuwqoirueioqwrueoqwrueqw}",
          "482: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:     test {Regression for pattern matching long nested loops} {",
          "484:         r flushdb",
          "485:         r SET aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 1",
          "486:         r KEYS \"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*b\"",
          "487:     } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}