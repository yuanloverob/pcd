{
  "cve_id": "CVE-2017-13690",
  "cve_desc": "The IKEv2 parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c, several functions.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "8dca25d26c7ca2caf6138267f6f17111212c156e",
  "patch_info": {
    "commit_hash": "8dca25d26c7ca2caf6138267f6f17111212c156e",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/8dca25d26c7ca2caf6138267f6f17111212c156e",
    "files": [
      "print-isakmp.c",
      "tests/TESTLIST",
      "tests/isakmp-various-oobr.out",
      "tests/isakmp-various-oobr.pcap"
    ],
    "message": "CVE-2017-13690/IKEv2: Fix some bounds checks.\n\nUse a pointer of the correct type in ND_TCHECK(), or use ND_TCHECK2()\nand provide the correct length.\n\nWhile we're at it, remove the blank line between some checks and the\nUNALIGNED_MEMCPY()s they protect.\n\nAlso, note the places where we print the entire payload.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-isakmp.c||print-isakmp.c"
    ]
  },
  "patch_diff": {
    "print-isakmp.c||print-isakmp.c": [
      "File: print-isakmp.c -> print-isakmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2170:  const struct ikev2_ke *k;",
      "2172:  k = (const struct ikev2_ke *)ext;",
      "2174:  UNALIGNED_MEMCPY(&ke, ext, sizeof(ke));",
      "2175:  ikev2_pay_print(ndo, NPSTR(tpay), ke.h.critical);",
      "",
      "[Removed Lines]",
      "2173:  ND_TCHECK(*ext);",
      "",
      "[Added Lines]",
      "2178:  ND_TCHECK(*k);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2195:   uint32_t phase _U_, uint32_t doi _U_,",
      "2196:   uint32_t proto _U_, int depth _U_)",
      "2197: {",
      "2198:  struct ikev2_id id;",
      "2199:  int id_len, idtype_len, i;",
      "2200:  unsigned int dumpascii, dumphex;",
      "2201:  const unsigned char *typedata;",
      "2204:  UNALIGNED_MEMCPY(&id, ext, sizeof(id));",
      "2205:  ikev2_pay_print(ndo, NPSTR(tpay), id.h.critical);",
      "",
      "[Removed Lines]",
      "2203:  ND_TCHECK(*ext);",
      "",
      "[Added Lines]",
      "2203:  const struct ikev2_id *idp;",
      "2209:  idp = (const struct ikev2_id *)ext;",
      "2210:  ND_TCHECK(*idp);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2303:  const u_char *authdata = (const u_char*)ext + sizeof(a);",
      "2304:  unsigned int len;",
      "2307:  UNALIGNED_MEMCPY(&a, ext, sizeof(a));",
      "2308:  ikev2_pay_print(ndo, NPSTR(tpay), a.h.critical);",
      "2309:  len = ntohs(a.h.len);",
      "",
      "[Removed Lines]",
      "2306:  ND_TCHECK(*ext);",
      "",
      "[Added Lines]",
      "2314:  ND_TCHECK2(*ext, sizeof(a));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "195a4cfd9de46b47ac6794930e19e38ed263b05f",
      "candidate_info": {
        "commit_hash": "195a4cfd9de46b47ac6794930e19e38ed263b05f",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/195a4cfd9de46b47ac6794930e19e38ed263b05f",
        "files": [
          "netdissect.h",
          "print-esp.c",
          "print-isakmp.c"
        ],
        "message": "Clean up ISAKMP dissection, use nd_ types and EXTRACT_ macros.\n\nAdd some RFC numbers.\n\nStructures with nd_ types work well if you overlay them on top of the\npacket buffer, but not as well with an on-the-stack structure into which\nyou copy from the packet, which is ugly if you do *both* with the same\nstructure.  Use overlaying uniformly.\n\nAdd EXTRACT_ macros as necessary for the nd_ types.\n\nMake stuff unsigned if it's appropriate.\n\nUse unsigned formats for unsigned values.\n\nA number of routines are passed the length of a payload, so they don't\nhave to re-fetch that length themselves.  That length has been\npre-checked to make sure it's big enough for the payload header; note\nthat in comments.",
        "before_after_code_files": [
          "netdissect.h||netdissect.h",
          "print-esp.c||print-esp.c",
          "print-isakmp.c||print-isakmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isakmp.c||print-isakmp.c"
          ],
          "candidate": [
            "print-isakmp.c||print-isakmp.c"
          ]
        }
      },
      "candidate_diff": {
        "netdissect.h||netdissect.h": [
          "File: netdissect.h -> netdissect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "681: extern void esp_print_decodesecret(netdissect_options *);",
          "682: extern int esp_print_decrypt_buffer_by_ikev2(netdissect_options *, int,",
          "684:           const u_char *, const u_char *);",
          "",
          "[Removed Lines]",
          "683:           u_char spii[8], u_char spir[8],",
          "",
          "[Added Lines]",
          "683:           const u_char spii[8],",
          "684:           const u_char spir[8],",
          "",
          "---------------"
        ],
        "print-esp.c||print-esp.c": [
          "File: print-esp.c -> print-esp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: USES_APPLE_DEPRECATED_API",
          "185: int esp_print_decrypt_buffer_by_ikev2(netdissect_options *ndo,",
          "186:           int initiator,",
          "188:           const u_char *buf, const u_char *end)",
          "189: {",
          "190:  struct sa_list *sa;",
          "",
          "[Removed Lines]",
          "187:           u_char spii[8], u_char spir[8],",
          "",
          "[Added Lines]",
          "187:           const u_char spii[8],",
          "188:           const u_char spir[8],",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include \"ip6.h\"",
          "54: #include \"ipproto.h\"",
          "61: #define PORT_ISAKMP 500",
          "",
          "[Removed Lines]",
          "58: typedef u_char cookie_t[8];",
          "59: typedef u_char msgid_t[4];",
          "",
          "[Added Lines]",
          "58: typedef nd_byte cookie_t[8];",
          "59: typedef nd_byte msgid_t[4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: struct isakmp {",
          "84: #define ISAKMP_VERS_MAJOR 0xf0",
          "85: #define ISAKMP_VERS_MAJOR_SHIFT 4",
          "86: #define ISAKMP_VERS_MINOR 0x0f",
          "87: #define ISAKMP_VERS_MINOR_SHIFT 0",
          "90:  msgid_t msgid;",
          "92: };",
          "",
          "[Removed Lines]",
          "83:  uint8_t vers;",
          "",
          "[Added Lines]",
          "83:  nd_uint8_t vers;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312: struct ikev1_pl_d {",
          "313:  struct isakmp_gen h;",
          "319: };",
          "337: struct ikev2_p {",
          "338:  struct isakmp_gen h;",
          "343: };",
          "346: struct ikev2_t {",
          "347:  struct isakmp_gen h;",
          "351: };",
          "353: enum ikev2_t_type {",
          "",
          "[Removed Lines]",
          "321: struct ikev1_ph1tab {",
          "322:  struct ikev1_ph1 *head;",
          "323:  struct ikev1_ph1 *tail;",
          "324:  int len;",
          "325: };",
          "327: struct isakmp_ph2tab {",
          "328:  struct ikev1_ph2 *head;",
          "329:  struct ikev1_ph2 *tail;",
          "330:  int len;",
          "331: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362: struct ikev2_ke {",
          "363:  struct isakmp_gen h;",
          "367: };",
          "",
          "[Removed Lines]",
          "364:  uint16_t  ke_group;",
          "365:  uint16_t  ke_res1;",
          "",
          "[Added Lines]",
          "352:  nd_uint16_t  ke_group;",
          "353:  nd_uint16_t  ke_res1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379: };",
          "380: struct ikev2_id {",
          "381:  struct isakmp_gen h;",
          "387: };",
          "",
          "[Removed Lines]",
          "383:  uint8_t  res1;",
          "384:  uint16_t res2;",
          "",
          "[Added Lines]",
          "371:  nd_byte    res1;",
          "372:  nd_byte    res2[2];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "432: struct ikev2_auth {",
          "433:  struct isakmp_gen h;",
          "437: };",
          "",
          "[Removed Lines]",
          "435:  uint8_t  reserved[3];",
          "",
          "[Added Lines]",
          "423:  nd_byte     reserved[3];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "541: struct ipsecdoi_sa {",
          "542:  struct isakmp_gen h;",
          "545: };",
          "547: struct ipsecdoi_secrecy_h {",
          "550: };",
          "553: struct ipsecdoi_id {",
          "554:  struct isakmp_gen h;",
          "559: };",
          "",
          "[Removed Lines]",
          "548:  uint16_t len;",
          "549:  uint16_t reserved;",
          "",
          "[Added Lines]",
          "536:  nd_uint16_t len;",
          "537:  nd_uint16_t reserved;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "614: DECLARE_PRINTER(v2_eap);",
          "616: static const u_char *ikev2_e_print(netdissect_options *ndo,",
          "618:        u_char tpay,",
          "619:        const struct isakmp_gen *ext,",
          "620:        u_int item_len,",
          "",
          "[Removed Lines]",
          "617:        struct isakmp *base,",
          "",
          "[Added Lines]",
          "605:        const struct isakmp *base,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "630:  const u_char *, uint32_t, uint32_t, uint32_t, int);",
          "632: static const u_char *ikev2_sub_print(netdissect_options *ndo,",
          "634:          u_char np, const struct isakmp_gen *ext,",
          "635:          const u_char *ep, uint32_t phase,",
          "636:          uint32_t doi, uint32_t proto,",
          "637:          int depth);",
          "642: static void",
          "643: ikev1_print(netdissect_options *ndo,",
          "644:      const u_char *bp,  u_int length,",
          "647: #define MAXINITIATORS 20",
          "648: static int ninitiator = 0;",
          "",
          "[Removed Lines]",
          "633:          struct isakmp *base,",
          "640: static char *numstr(int);",
          "645:      const u_char *bp2, struct isakmp *base);",
          "",
          "[Added Lines]",
          "621:          const struct isakmp *base,",
          "628: static char *numstr(u_int);",
          "633:      const u_char *bp2, const struct isakmp *base);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764: static int",
          "766: {",
          "767:  int i;",
          "",
          "[Removed Lines]",
          "765: cookie_find(cookie_t *in)",
          "",
          "[Added Lines]",
          "753: cookie_find(const cookie_t *in)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "778: static void",
          "780: {",
          "781:  int i;",
          "782:  const struct ip *ip;",
          "",
          "[Removed Lines]",
          "779: cookie_record(cookie_t *in, const u_char *bp2)",
          "",
          "[Added Lines]",
          "767: cookie_record(const cookie_t *in, const u_char *bp2)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "879: {",
          "881:  const u_char *end = ep - 20;",
          "884:  if(len > 10) {",
          "885:   len = 10;",
          "886:  }",
          "",
          "[Removed Lines]",
          "882:  int  elen = 20;",
          "883:  int   len = ep - cp;",
          "",
          "[Added Lines]",
          "870:  size_t  elen = 20;",
          "871:  size_t  len = ep - cp;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "915:       const u_char *p, const u_char *ep2,",
          "916:       const struct attrmap *map, size_t nmap)",
          "917: {",
          "919:  uint32_t t, v;",
          "921:  ND_TCHECK_1(p);",
          "",
          "[Removed Lines]",
          "918:  int totlen;",
          "",
          "[Added Lines]",
          "906:  u_int totlen;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "936:  if (map && t < nmap && map[t].type)",
          "937:   ND_PRINT((ndo,\"type=%s \", map[t].type));",
          "938:  else",
          "940:  if (EXTRACT_U_1(p) & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "942:   ND_TCHECK_2(p + 2);",
          "",
          "[Removed Lines]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Added Lines]",
          "927:   ND_PRINT((ndo,\"type=#%u \", t));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "950:    }",
          "951:   }",
          "952:  } else {",
          "954:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "955:    ND_PRINT((ndo,\")\"));",
          "956:    goto trunc;",
          "",
          "[Removed Lines]",
          "953:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "",
          "[Added Lines]",
          "941:   ND_PRINT((ndo,\"len=%u value=\", totlen - 4));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "966: static const u_char *",
          "967: ikev1_attr_print(netdissect_options *ndo, const u_char *p, const u_char *ep2)",
          "968: {",
          "970:  uint32_t t;",
          "972:  ND_TCHECK_1(p);",
          "",
          "[Removed Lines]",
          "969:  int totlen;",
          "",
          "[Added Lines]",
          "957:  u_int totlen;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "984:  ND_TCHECK_2(p);",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_U_2(p) & 0x7fff;",
          "988:  if (EXTRACT_U_1(p) & 0x80) {",
          "989:   ND_PRINT((ndo,\"value=\"));",
          "990:   t = EXTRACT_U_1(p + 2);",
          "",
          "[Removed Lines]",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Added Lines]",
          "975:  ND_PRINT((ndo,\"type=#%u \", t));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "993:    goto trunc;",
          "994:   }",
          "995:  } else {",
          "997:   if (!rawprint(ndo, (const uint8_t *)(p + 4), totlen - 4)) {",
          "998:    ND_PRINT((ndo,\")\"));",
          "999:    goto trunc;",
          "",
          "[Removed Lines]",
          "996:   ND_PRINT((ndo,\"len=%d value=\", totlen - 4));",
          "",
          "[Added Lines]",
          "984:   ND_PRINT((ndo,\"len=%u value=\", totlen - 4));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1014:   uint32_t proto0, int depth)",
          "1015: {",
          "1016:  const struct ikev1_pl_sa *p;",
          "1018:  uint32_t doi, sit, ident;",
          "1019:  const u_char *cp, *np;",
          "1020:  int t;",
          "",
          "[Removed Lines]",
          "1017:  struct ikev1_pl_sa sa;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1024:  p = (const struct ikev1_pl_sa *)ext;",
          "1025:  ND_TCHECK(*p);",
          "1029:  if (doi != 1) {",
          "1032:   return (const u_char *)(p + 1);",
          "1033:  }",
          "",
          "[Removed Lines]",
          "1026:  UNALIGNED_MEMCPY(&sa, ext, sizeof(sa));",
          "1027:  doi = ntohl(sa.doi);",
          "1028:  sit = ntohl(sa.sit);",
          "1030:   ND_PRINT((ndo,\" doi=%d\", doi));",
          "1031:   ND_PRINT((ndo,\" situation=%u\", (uint32_t)ntohl(sa.sit)));",
          "",
          "[Added Lines]",
          "1013:  doi = EXTRACT_BE_U_4(p->doi);",
          "1014:  sit = EXTRACT_BE_U_4(p->sit);",
          "1016:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1017:   ND_PRINT((ndo,\" situation=%u\", sit));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1046:  if (sit & 0x04)",
          "1047:   ND_PRINT((ndo,\"%sintegrity\", t ? \"+\" : \"\"));",
          "1050:  if (sit != 0x01) {",
          "1054:   np += sizeof(ident);",
          "1055:  }",
          "",
          "[Removed Lines]",
          "1049:  np = (const u_char *)ext + sizeof(sa);",
          "1051:   ND_TCHECK_LEN(ext + 1, sizeof(ident));",
          "1052:   UNALIGNED_MEMCPY(&ident, ext + 1, sizeof(ident));",
          "1053:   ND_PRINT((ndo,\" ident=%u\", (uint32_t)ntohl(ident)));",
          "",
          "[Added Lines]",
          "1035:  np = (const u_char *)ext + sizeof(struct ikev1_pl_sa);",
          "1037:   ND_TCHECK_4(ext + 1);",
          "1038:   ident = EXTRACT_BE_U_4(ext + 1);",
          "1039:   ND_PRINT((ndo,\" ident=%u\", ident));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1073:         uint32_t proto0 _U_, int depth)",
          "1074: {",
          "1075:  const struct ikev1_pl_p *p;",
          "1077:  const u_char *cp;",
          "1079:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_P)));",
          "1081:  p = (const struct ikev1_pl_p *)ext;",
          "1082:  ND_TCHECK(*p);",
          "1087:   ND_PRINT((ndo,\" spi=\"));",
          "1089:    goto trunc;",
          "1090:  }",
          "1093:  ND_TCHECK(*ext);",
          "1095:  cp = ikev1_sub_print(ndo, ISAKMP_NPTYPE_T, ext, ep, phase, doi0,",
          "1098:  return cp;",
          "1099: trunc:",
          "",
          "[Removed Lines]",
          "1076:  struct ikev1_pl_p prop;",
          "1083:  UNALIGNED_MEMCPY(&prop, ext, sizeof(prop));",
          "1084:  ND_PRINT((ndo,\" #%d protoid=%s transform=%d\",",
          "1085:     prop.p_no, PROTOIDSTR(prop.prot_id), prop.num_t));",
          "1086:  if (prop.spi_size) {",
          "1088:   if (!rawprint(ndo, (const uint8_t *)(p + 1), prop.spi_size))",
          "1092:  ext = (const struct isakmp_gen *)((const u_char *)(p + 1) + prop.spi_size);",
          "1096:         prop.prot_id, depth);",
          "",
          "[Added Lines]",
          "1063:  uint8_t spi_size;",
          "1069:  ND_PRINT((ndo,\" #%u protoid=%s transform=%u\",",
          "1070:     EXTRACT_U_1(p->p_no), PROTOIDSTR(EXTRACT_U_1(p->prot_id)),",
          "1071:     EXTRACT_U_1(p->num_t)));",
          "1072:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1073:  if (spi_size) {",
          "1075:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1079:  ext = (const struct isakmp_gen *)((const u_char *)(p + 1) + spi_size);",
          "1083:         EXTRACT_U_1(p->prot_id), depth);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1236:        uint32_t proto, int depth _U_)",
          "1237: {",
          "1238:  const struct ikev1_pl_t *p;",
          "1240:  const u_char *cp;",
          "1241:  const char *idstr;",
          "1242:  const struct attrmap *map;",
          "",
          "[Removed Lines]",
          "1239:  struct ikev1_pl_t t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1248:  p = (const struct ikev1_pl_t *)ext;",
          "1249:  ND_TCHECK(*p);",
          "1252:  switch (proto) {",
          "1253:  case 1:",
          "1255:   map = oakley_t_map;",
          "1256:   nmap = sizeof(oakley_t_map)/sizeof(oakley_t_map[0]);",
          "1257:   break;",
          "1258:  case 2:",
          "1260:   map = ipsec_t_map;",
          "1261:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1262:   break;",
          "1263:  case 3:",
          "1265:   map = ipsec_t_map;",
          "1266:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1267:   break;",
          "1268:  case 4:",
          "1270:   map = ipsec_t_map;",
          "1271:   nmap = sizeof(ipsec_t_map)/sizeof(ipsec_t_map[0]);",
          "1272:   break;",
          "",
          "[Removed Lines]",
          "1250:  UNALIGNED_MEMCPY(&t, ext, sizeof(t));",
          "1254:   idstr = STR_OR_ID(t.t_id, ikev1_p_map);",
          "1259:   idstr = STR_OR_ID(t.t_id, ah_p_map);",
          "1264:   idstr = STR_OR_ID(t.t_id, esp_p_map);",
          "1269:   idstr = STR_OR_ID(t.t_id, ipcomp_p_map);",
          "",
          "[Added Lines]",
          "1239:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ikev1_p_map);",
          "1244:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ah_p_map);",
          "1249:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), esp_p_map);",
          "1254:   idstr = STR_OR_ID(EXTRACT_U_1(p->t_id), ipcomp_p_map);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1278:  }",
          "1280:  if (idstr)",
          "1282:  else",
          "1284:  cp = (const u_char *)(p + 1);",
          "1285:  ep2 = (const u_char *)p + item_len;",
          "1286:  while (cp < ep && cp < ep2) {",
          "",
          "[Removed Lines]",
          "1281:   ND_PRINT((ndo,\" #%d id=%s \", t.t_no, idstr));",
          "1283:   ND_PRINT((ndo,\" #%d id=%d \", t.t_no, t.t_id));",
          "",
          "[Added Lines]",
          "1266:   ND_PRINT((ndo,\" #%u id=%s \", EXTRACT_U_1(p->t_no), idstr));",
          "1268:   ND_PRINT((ndo,\" #%u id=%u \", EXTRACT_U_1(p->t_no), EXTRACT_U_1(p->t_id)));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1302: static const u_char *",
          "1303: ikev1_ke_print(netdissect_options *ndo, u_char tpay _U_,",
          "1305:         const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1306:         uint32_t proto _U_, int depth _U_)",
          "1307: {",
          "1310:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_KE)));",
          "1312:  ND_TCHECK(*ext);",
          "1317:   ND_PRINT((ndo,\" \"));",
          "1319:    goto trunc;",
          "1320:  }",
          "1322: trunc:",
          "1323:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_KE)));",
          "1324:  return NULL;",
          "",
          "[Removed Lines]",
          "1304:         const struct isakmp_gen *ext, u_int item_len _U_,",
          "1308:  struct isakmp_gen e;",
          "1313:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1314:  ND_PRINT((ndo,\" key len=%d\", ntohs(e.len) - 4));",
          "1315:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1318:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1321:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1289:         const struct isakmp_gen *ext, u_int item_len,",
          "1299:  ND_PRINT((ndo,\" key len=%u\", item_len - 4));",
          "1300:  if (2 < ndo->ndo_vflag && item_len > 4) {",
          "1303:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1306:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1332: {",
          "1333: #define USE_IPSECDOI_IN_PHASE1 1",
          "1334:  const struct ikev1_pl_id *p;",
          "1336:  static const char *idtypestr[] = {",
          "1337:   \"IPv4\", \"IPv4net\", \"IPv6\", \"IPv6net\",",
          "1338:  };",
          "",
          "[Removed Lines]",
          "1335:  struct ikev1_pl_id id;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1341:   \"IPv6net\", \"IPv4range\", \"IPv6range\", \"ASN1 DN\", \"ASN1 GN\",",
          "1342:   \"keyid\",",
          "1343:  };",
          "1345:  const u_char *data;",
          "1347:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_ID)));",
          "1349:  p = (const struct ikev1_pl_id *)ext;",
          "1350:  ND_TCHECK(*p);",
          "1352:  if (sizeof(*p) < item_len) {",
          "1353:   data = (const u_char *)(p + 1);",
          "1354:   len = item_len - sizeof(*p);",
          "",
          "[Removed Lines]",
          "1344:  int len;",
          "1351:  UNALIGNED_MEMCPY(&id, ext, sizeof(id));",
          "",
          "[Added Lines]",
          "1328:  u_int len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1358:  }",
          "1362: #endif",
          "1363:  switch (phase) {",
          "1364: #ifndef USE_IPSECDOI_IN_PHASE1",
          "1365:  case 1:",
          "1366: #endif",
          "1367:  default:",
          "1369:   ND_PRINT((ndo,\" doi_data=%u\",",
          "1371:   break;",
          "1373: #ifdef USE_IPSECDOI_IN_PHASE1",
          "",
          "[Removed Lines]",
          "1361:  ND_PRINT((ndo,\" [phase=%d doi=%d proto=%d]\", phase, doi, proto));",
          "1368:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(id.d.id_type, idtypestr)));",
          "1370:      (uint32_t)(ntohl(id.d.doi_data) & 0xffffff)));",
          "",
          "[Added Lines]",
          "1344:  ND_PRINT((ndo,\" [phase=%u doi=%u proto=%u]\", phase, doi, proto));",
          "1351:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(EXTRACT_U_1(p->d.id_type), idtypestr)));",
          "1353:      EXTRACT_BE_U_4(p->d.doi_data) & 0xffffff));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1376:  case 2:",
          "1377:      {",
          "1378:   const struct ipsecdoi_id *doi_p;",
          "1380:   const char *p_name;",
          "1382:   doi_p = (const struct ipsecdoi_id *)ext;",
          "1383:   ND_TCHECK(*doi_p);",
          "1388:    ND_PRINT((ndo,\" protoid=%s\", p_name));",
          "1389:   else",
          "1392:   if (!len)",
          "1393:    break;",
          "1394:   if (data == NULL)",
          "1395:    goto trunc;",
          "1396:   ND_TCHECK_LEN(data, len);",
          "1398:   case IPSECDOI_ID_IPV4_ADDR:",
          "1399:    if (len < 4)",
          "1401:    else",
          "1403:    len = 0;",
          "1404:    break;",
          "1405:   case IPSECDOI_ID_FQDN:",
          "1406:   case IPSECDOI_ID_USER_FQDN:",
          "1407:       {",
          "1410:    for (i = 0; i < len; i++)",
          "1411:     safeputchar(ndo, EXTRACT_U_1(data + i));",
          "1412:    len = 0;",
          "",
          "[Removed Lines]",
          "1379:   struct ipsecdoi_id doi_id;",
          "1384:   UNALIGNED_MEMCPY(&doi_id, ext, sizeof(doi_id));",
          "1385:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(doi_id.type, ipsecidtypestr)));",
          "1387:   if (!ndo->ndo_nflag && doi_id.proto_id && (p_name = netdb_protoname(doi_id.proto_id)) != NULL)",
          "1390:    ND_PRINT((ndo,\" protoid=%u\", doi_id.proto_id));",
          "1391:   ND_PRINT((ndo,\" port=%d\", ntohs(doi_id.port)));",
          "1397:   switch (doi_id.type) {",
          "1400:     ND_PRINT((ndo,\" len=%d [bad: < 4]\", len));",
          "1402:     ND_PRINT((ndo,\" len=%d %s\", len, ipaddr_string(ndo, data)));",
          "1408:    int i;",
          "1409:    ND_PRINT((ndo,\" len=%d \", len));",
          "",
          "[Added Lines]",
          "1363:   uint8_t type, proto_id;",
          "1367:   type = EXTRACT_U_1(doi_p->type);",
          "1368:   ND_PRINT((ndo,\" idtype=%s\", STR_OR_ID(type, ipsecidtypestr)));",
          "1370:   proto_id = EXTRACT_U_1(doi_p->proto_id);",
          "1371:   if (!ndo->ndo_nflag && proto_id && (p_name = netdb_protoname(proto_id)) != NULL)",
          "1374:    ND_PRINT((ndo,\" protoid=%u\", proto_id));",
          "1375:   ND_PRINT((ndo,\" port=%u\", EXTRACT_BE_U_2(doi_p->port)));",
          "1381:   switch (type) {",
          "1384:     ND_PRINT((ndo,\" len=%u [bad: < 4]\", len));",
          "1386:     ND_PRINT((ndo,\" len=%u %s\", len, ipaddr_string(ndo, data)));",
          "1392:    u_int i;",
          "1393:    ND_PRINT((ndo,\" len=%u \", len));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1416:       {",
          "1417:    const u_char *mask;",
          "1418:    if (len < 8)",
          "1420:    else {",
          "1421:     mask = data + sizeof(struct in_addr);",
          "1423:        ipaddr_string(ndo, data),",
          "1424:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1),",
          "1425:        EXTRACT_U_1(mask + 2), EXTRACT_U_1(mask + 3)));",
          "",
          "[Removed Lines]",
          "1419:     ND_PRINT((ndo,\" len=%d [bad: < 8]\", len));",
          "1422:     ND_PRINT((ndo,\" len=%d %s/%u.%u.%u.%u\", len,",
          "",
          "[Added Lines]",
          "1403:     ND_PRINT((ndo,\" len=%u [bad: < 8]\", len));",
          "1406:     ND_PRINT((ndo,\" len=%u %s/%u.%u.%u.%u\", len,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1429:       }",
          "1430:   case IPSECDOI_ID_IPV6_ADDR:",
          "1431:    if (len < 16)",
          "1433:    else",
          "1435:    len = 0;",
          "1436:    break;",
          "1437:   case IPSECDOI_ID_IPV6_ADDR_SUBNET:",
          "1438:       {",
          "1439:    const u_char *mask;",
          "1440:    if (len < 32)",
          "1442:    else {",
          "1443:     mask = (const u_char *)(data + sizeof(struct in6_addr));",
          "1446:        ip6addr_string(ndo, data),",
          "1447:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1), EXTRACT_U_1(mask + 2), EXTRACT_U_1(mask + 3),",
          "1448:        EXTRACT_U_1(mask + 4), EXTRACT_U_1(mask + 5), EXTRACT_U_1(mask + 6), EXTRACT_U_1(mask + 7),",
          "",
          "[Removed Lines]",
          "1432:     ND_PRINT((ndo,\" len=%d [bad: < 16]\", len));",
          "1434:     ND_PRINT((ndo,\" len=%d %s\", len, ip6addr_string(ndo, data)));",
          "1441:     ND_PRINT((ndo,\" len=%d [bad: < 32]\", len));",
          "1445:     ND_PRINT((ndo,\" len=%d %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "",
          "[Added Lines]",
          "1416:     ND_PRINT((ndo,\" len=%u [bad: < 16]\", len));",
          "1418:     ND_PRINT((ndo,\" len=%u %s\", len, ip6addr_string(ndo, data)));",
          "1425:     ND_PRINT((ndo,\" len=%u [bad: < 32]\", len));",
          "1429:     ND_PRINT((ndo,\" len=%u %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1454:       }",
          "1455:   case IPSECDOI_ID_IPV4_ADDR_RANGE:",
          "1456:    if (len < 8)",
          "1458:    else {",
          "1460:        ipaddr_string(ndo, data),",
          "1461:        ipaddr_string(ndo, data + sizeof(struct in_addr))));",
          "1462:    }",
          "",
          "[Removed Lines]",
          "1457:     ND_PRINT((ndo,\" len=%d [bad: < 8]\", len));",
          "1459:     ND_PRINT((ndo,\" len=%d %s-%s\", len,",
          "",
          "[Added Lines]",
          "1441:     ND_PRINT((ndo,\" len=%u [bad: < 8]\", len));",
          "1443:     ND_PRINT((ndo,\" len=%u %s-%s\", len,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1464:    break;",
          "1465:   case IPSECDOI_ID_IPV6_ADDR_RANGE:",
          "1466:    if (len < 32)",
          "1468:    else {",
          "1470:        ip6addr_string(ndo, data),",
          "1471:        ip6addr_string(ndo, data + sizeof(struct in6_addr))));",
          "1472:    }",
          "",
          "[Removed Lines]",
          "1467:     ND_PRINT((ndo,\" len=%d [bad: < 32]\", len));",
          "1469:     ND_PRINT((ndo,\" len=%d %s-%s\", len,",
          "",
          "[Added Lines]",
          "1451:     ND_PRINT((ndo,\" len=%u [bad: < 32]\", len));",
          "1453:     ND_PRINT((ndo,\" len=%u %s-%s\", len,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1481:      }",
          "1482:  }",
          "1483:  if (data && len) {",
          "1485:   if (2 < ndo->ndo_vflag) {",
          "1486:    ND_PRINT((ndo,\" \"));",
          "1487:    if (!rawprint(ndo, (const uint8_t *)data, len))",
          "",
          "[Removed Lines]",
          "1484:   ND_PRINT((ndo,\" len=%d\", len));",
          "",
          "[Added Lines]",
          "1468:   ND_PRINT((ndo,\" len=%u\", len));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1502:    uint32_t proto0 _U_, int depth _U_)",
          "1503: {",
          "1504:  const struct ikev1_pl_cert *p;",
          "1506:  static const char *certstr[] = {",
          "1507:   \"none\", \"pkcs7\", \"pgp\", \"dns\",",
          "1508:   \"x509sign\", \"x509ke\", \"kerberos\", \"crl\",",
          "",
          "[Removed Lines]",
          "1505:  struct ikev1_pl_cert cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1514:  p = (const struct ikev1_pl_cert *)ext;",
          "1515:  ND_TCHECK(*p);",
          "1519:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1521:   ND_PRINT((ndo,\" \"));",
          "",
          "[Removed Lines]",
          "1516:  UNALIGNED_MEMCPY(&cert, ext, sizeof(cert));",
          "1517:  ND_PRINT((ndo,\" len=%d\", item_len - 4));",
          "1518:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID((cert.encode), certstr)));",
          "",
          "[Added Lines]",
          "1502:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1503:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID(EXTRACT_U_1(p->encode), certstr)));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1535:         uint32_t proto0 _U_, int depth _U_)",
          "1536: {",
          "1537:  const struct ikev1_pl_cert *p;",
          "1539:  static const char *certstr[] = {",
          "1540:   \"none\", \"pkcs7\", \"pgp\", \"dns\",",
          "1541:   \"x509sign\", \"x509ke\", \"kerberos\", \"crl\",",
          "",
          "[Removed Lines]",
          "1538:  struct ikev1_pl_cert cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1547:  p = (const struct ikev1_pl_cert *)ext;",
          "1548:  ND_TCHECK(*p);",
          "1552:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1554:   ND_PRINT((ndo,\" \"));",
          "",
          "[Removed Lines]",
          "1549:  UNALIGNED_MEMCPY(&cert, ext, sizeof(cert));",
          "1550:  ND_PRINT((ndo,\" len=%d\", item_len - 4));",
          "1551:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID((cert.encode), certstr)));",
          "",
          "[Added Lines]",
          "1536:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1537:  ND_PRINT((ndo,\" type=%s\", STR_OR_ID(EXTRACT_U_1(p->encode), certstr)));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1564: static const u_char *",
          "1565: ikev1_hash_print(netdissect_options *ndo, u_char tpay _U_,",
          "1567:    const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1568:    uint32_t proto _U_, int depth _U_)",
          "1569: {",
          "1572:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_HASH)));",
          "1574:  ND_TCHECK(*ext);",
          "1579:   ND_PRINT((ndo,\" \"));",
          "1581:    goto trunc;",
          "1582:  }",
          "1584: trunc:",
          "1585:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_HASH)));",
          "1586:  return NULL;",
          "",
          "[Removed Lines]",
          "1566:    const struct isakmp_gen *ext, u_int item_len _U_,",
          "1570:  struct isakmp_gen e;",
          "1575:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1576:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1577:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1580:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1583:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1552:    const struct isakmp_gen *ext, u_int item_len,",
          "1562:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1563:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1566:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1569:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1589: static const u_char *",
          "1590: ikev1_sig_print(netdissect_options *ndo, u_char tpay _U_,",
          "1592:   const u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,",
          "1593:   uint32_t proto _U_, int depth _U_)",
          "1594: {",
          "1597:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_SIG)));",
          "1599:  ND_TCHECK(*ext);",
          "1604:   ND_PRINT((ndo,\" \"));",
          "1606:    goto trunc;",
          "1607:  }",
          "1609: trunc:",
          "1610:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_SIG)));",
          "1611:  return NULL;",
          "",
          "[Removed Lines]",
          "1591:   const struct isakmp_gen *ext, u_int item_len _U_,",
          "1595:  struct isakmp_gen e;",
          "1600:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1601:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1602:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1605:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1608:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1577:   const struct isakmp_gen *ext, u_int item_len,",
          "1587:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1588:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1591:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1594:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1614: static const u_char *",
          "1615: ikev1_nonce_print(netdissect_options *ndo, u_char tpay _U_,",
          "1616:     const struct isakmp_gen *ext,",
          "1618:     const u_char *ep,",
          "1619:     uint32_t phase _U_, uint32_t doi _U_,",
          "1620:     uint32_t proto _U_, int depth _U_)",
          "1621: {",
          "1624:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_NONCE)));",
          "1626:  ND_TCHECK(*ext);",
          "1633:   if (ndo->ndo_vflag > 2) {",
          "1634:    ND_PRINT((ndo, \" \"));",
          "1636:     goto trunc;",
          "1637:   } else if (ndo->ndo_vflag > 1) {",
          "1638:    ND_PRINT((ndo, \" \"));",
          "",
          "[Removed Lines]",
          "1617:     u_int item_len _U_,",
          "1622:  struct isakmp_gen e;",
          "1627:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1631:  ND_PRINT((ndo,\" n len=%u\", ntohs(e.len) - 4));",
          "1632:  if (ntohs(e.len) > 4) {",
          "1635:    if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "",
          "[Added Lines]",
          "1603:     u_int item_len,",
          "1614:  ND_PRINT((ndo,\" n len=%u\", item_len - 4));",
          "1615:  if (item_len > 4) {",
          "1618:    if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1640:     goto trunc;",
          "1641:   }",
          "1642:  }",
          "1644: trunc:",
          "1645:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_NONCE)));",
          "1646:  return NULL;",
          "",
          "[Removed Lines]",
          "1643:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1626:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1653:        uint32_t proto0 _U_, int depth _U_)",
          "1654: {",
          "1655:  const struct ikev1_pl_n *p;",
          "1657:  const u_char *cp;",
          "1658:  const u_char *ep2;",
          "1659:  uint32_t doi;",
          "1660:  uint32_t proto;",
          "1661:  static const char *notify_error_str[] = {",
          "1662:   NULL,    \"INVALID-PAYLOAD-TYPE\",",
          "1663:   \"DOI-NOT-SUPPORTED\",  \"SITUATION-NOT-SUPPORTED\",",
          "",
          "[Removed Lines]",
          "1656:  struct ikev1_pl_n n;",
          "",
          "[Added Lines]",
          "1643:  uint16_t type;",
          "1644:  uint8_t spi_size;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1709:  p = (const struct ikev1_pl_n *)ext;",
          "1710:  ND_TCHECK(*p);",
          "1714:  if (doi != 1) {",
          "1723:   else",
          "1726:    ND_PRINT((ndo,\" spi=\"));",
          "1728:     goto trunc;",
          "1729:   }",
          "1731:  }",
          "1733:  ND_PRINT((ndo,\" doi=ipsec\"));",
          "1734:  ND_PRINT((ndo,\" proto=%s\", PROTOIDSTR(proto)));",
          "1743:  else",
          "1746:   ND_PRINT((ndo,\" spi=\"));",
          "1748:    goto trunc;",
          "1749:  }",
          "1752:  ep2 = (const u_char *)p + item_len;",
          "1754:  if (cp < ep) {",
          "1756:   case IPSECDOI_NTYPE_RESPONDER_LIFETIME:",
          "1757:       {",
          "1758:    const struct attrmap *map = oakley_t_map;",
          "",
          "[Removed Lines]",
          "1711:  UNALIGNED_MEMCPY(&n, ext, sizeof(n));",
          "1712:  doi = ntohl(n.doi);",
          "1713:  proto = n.prot_id;",
          "1715:   ND_PRINT((ndo,\" doi=%d\", doi));",
          "1716:   ND_PRINT((ndo,\" proto=%d\", proto));",
          "1717:   if (ntohs(n.type) < 8192)",
          "1718:    ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1719:   else if (ntohs(n.type) < 16384)",
          "1720:    ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1721:   else if (ntohs(n.type) < 24576)",
          "1722:    ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1724:    ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1725:   if (n.spi_size) {",
          "1727:    if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "1730:   return (const u_char *)(p + 1) + n.spi_size;",
          "1735:  if (ntohs(n.type) < 8192)",
          "1736:   ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1737:  else if (ntohs(n.type) < 16384)",
          "1738:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_ERROR_STR(ntohs(n.type))));",
          "1739:  else if (ntohs(n.type) < 24576)",
          "1740:   ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1741:  else if (ntohs(n.type) < 32768)",
          "1742:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_STATUS_STR(ntohs(n.type))));",
          "1744:   ND_PRINT((ndo,\" type=%s\", numstr(ntohs(n.type))));",
          "1745:  if (n.spi_size) {",
          "1747:   if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "1751:  cp = (const u_char *)(p + 1) + n.spi_size;",
          "1755:   switch (ntohs(n.type)) {",
          "",
          "[Added Lines]",
          "1695:  doi = EXTRACT_BE_U_4(p->doi);",
          "1696:  proto = EXTRACT_U_1(p->prot_id);",
          "1698:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1699:   ND_PRINT((ndo,\" proto=%u\", proto));",
          "1700:   type = EXTRACT_BE_U_2(p->type);",
          "1701:   if (type < 8192)",
          "1702:    ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(type)));",
          "1703:   else if (type < 16384)",
          "1704:    ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1705:   else if (type < 24576)",
          "1706:    ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(type)));",
          "1708:    ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1709:   spi_size = EXTRACT_U_1(p->spi_size);",
          "1710:   if (spi_size) {",
          "1712:    if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1715:   return (const u_char *)(p + 1) + spi_size;",
          "1720:  type = EXTRACT_BE_U_2(p->type);",
          "1721:  if (type < 8192)",
          "1722:   ND_PRINT((ndo,\" type=%s\", NOTIFY_ERROR_STR(type)));",
          "1723:  else if (type < 16384)",
          "1724:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_ERROR_STR(type)));",
          "1725:  else if (type < 24576)",
          "1726:   ND_PRINT((ndo,\" type=%s\", NOTIFY_STATUS_STR(type)));",
          "1727:  else if (type < 32768)",
          "1728:   ND_PRINT((ndo,\" type=%s\", IPSEC_NOTIFY_STATUS_STR(type)));",
          "1730:   ND_PRINT((ndo,\" type=%s\", numstr(type)));",
          "1731:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1732:  if (spi_size) {",
          "1734:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "1738:  cp = (const u_char *)(p + 1) + spi_size;",
          "1742:   switch (type) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1804:        uint32_t proto0 _U_, int depth _U_)",
          "1805: {",
          "1806:  const struct ikev1_pl_d *p;",
          "1808:  const uint8_t *q;",
          "1809:  uint32_t doi;",
          "1810:  uint32_t proto;",
          "1813:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_D)));",
          "1815:  p = (const struct ikev1_pl_d *)ext;",
          "1816:  ND_TCHECK(*p);",
          "1820:  if (doi != 1) {",
          "1821:   ND_PRINT((ndo,\" doi=%u\", doi));",
          "1822:   ND_PRINT((ndo,\" proto=%u\", proto));",
          "",
          "[Removed Lines]",
          "1807:  struct ikev1_pl_d d;",
          "1811:  int i;",
          "1817:  UNALIGNED_MEMCPY(&d, ext, sizeof(d));",
          "1818:  doi = ntohl(d.doi);",
          "1819:  proto = d.prot_id;",
          "",
          "[Added Lines]",
          "1797:  uint8_t spi_size;",
          "1798:  uint16_t num_spi;",
          "1799:  u_int i;",
          "1805:  doi = EXTRACT_BE_U_4(p->doi);",
          "1806:  proto = EXTRACT_U_1(p->prot_id);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1824:   ND_PRINT((ndo,\" doi=ipsec\"));",
          "1825:   ND_PRINT((ndo,\" proto=%s\", PROTOIDSTR(proto)));",
          "1826:  }",
          "1829:  ND_PRINT((ndo,\" spi=\"));",
          "1830:  q = (const uint8_t *)(p + 1);",
          "1832:   if (i != 0)",
          "1833:    ND_PRINT((ndo,\",\"));",
          "1835:    goto trunc;",
          "1837:  }",
          "1838:  return q;",
          "1839: trunc:",
          "",
          "[Removed Lines]",
          "1827:  ND_PRINT((ndo,\" spilen=%u\", d.spi_size));",
          "1828:  ND_PRINT((ndo,\" nspi=%u\", ntohs(d.num_spi)));",
          "1831:  for (i = 0; i < ntohs(d.num_spi); i++) {",
          "1834:   if (!rawprint(ndo, (const uint8_t *)q, d.spi_size))",
          "1836:   q += d.spi_size;",
          "",
          "[Added Lines]",
          "1814:  spi_size = EXTRACT_U_1(p->spi_size);",
          "1815:  ND_PRINT((ndo,\" spilen=%u\", spi_size));",
          "1816:  num_spi = EXTRACT_BE_U_2(p->num_spi);",
          "1817:  ND_PRINT((ndo,\" nspi=%u\", num_spi));",
          "1820:  for (i = 0; i < num_spi; i++) {",
          "1823:   if (!rawprint(ndo, (const uint8_t *)q, spi_size))",
          "1825:   q += spi_size;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1844: static const u_char *",
          "1845: ikev1_vid_print(netdissect_options *ndo, u_char tpay _U_,",
          "1846:   const struct isakmp_gen *ext,",
          "1848:   uint32_t phase _U_, uint32_t doi _U_,",
          "1849:   uint32_t proto _U_, int depth _U_)",
          "1850: {",
          "1853:  ND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_VID)));",
          "1855:  ND_TCHECK(*ext);",
          "1860:   ND_PRINT((ndo,\" \"));",
          "1862:    goto trunc;",
          "1863:  }",
          "1865: trunc:",
          "1866:  ND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_VID)));",
          "1867:  return NULL;",
          "",
          "[Removed Lines]",
          "1847:   u_int item_len _U_, const u_char *ep _U_,",
          "1851:  struct isakmp_gen e;",
          "1856:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1857:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1858:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1861:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1864:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1836:   u_int item_len, const u_char *ep _U_,",
          "1846:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1847:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1850:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1853:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1876: static void",
          "1878: {",
          "1879:  ND_PRINT((ndo,\"%s%s:\", payname, critical&0x80 ? \"[C]\" : \"\"));",
          "1880: }",
          "1882: static const u_char *",
          "1883: ikev2_gen_print(netdissect_options *ndo, u_char tpay,",
          "1885: {",
          "1888:  ND_TCHECK(*ext);",
          "1895:   ND_PRINT((ndo,\" \"));",
          "1897:    goto trunc;",
          "1898:  }",
          "1900: trunc:",
          "1901:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "1902:  return NULL;",
          "",
          "[Removed Lines]",
          "1877: ikev2_pay_print(netdissect_options *ndo, const char *payname, int critical)",
          "1884:   const struct isakmp_gen *ext)",
          "1886:  struct isakmp_gen e;",
          "1889:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "1890:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "1892:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "1893:  if (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "1896:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "1899:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "1866: ikev2_pay_print(netdissect_options *ndo, const char *payname, uint8_t critical)",
          "1873:   const struct isakmp_gen *ext, u_int item_len)",
          "1875:  const struct isakmp_gen *p = (const struct isakmp_gen *)ext;",
          "1878:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(p->critical));",
          "1883:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "1884:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "1887:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "1890:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1908:        const u_char *ep)",
          "1909: {",
          "1910:  const struct ikev2_t *p;",
          "1912:  uint16_t  t_id;",
          "1913:  const u_char *cp;",
          "1914:  const char *idstr;",
          "1915:  const struct attrmap *map;",
          "",
          "[Removed Lines]",
          "1911:  struct ikev2_t t;",
          "",
          "[Added Lines]",
          "1903:  uint8_t t_type;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1919:  p = (const struct ikev2_t *)ext;",
          "1920:  ND_TCHECK(*p);",
          "1926:  map = NULL;",
          "1927:  nmap = 0;",
          "1930:  case IV2_T_ENCR:",
          "1931:   idstr = STR_OR_ID(t_id, esp_p_map);",
          "1932:   map = encr_t_map;",
          "",
          "[Removed Lines]",
          "1921:  UNALIGNED_MEMCPY(&t, ext, sizeof(t));",
          "1922:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_T), t.h.critical);",
          "1924:  t_id = ntohs(t.t_id);",
          "1929:  switch (t.t_type) {",
          "",
          "[Added Lines]",
          "1912:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_T), EXTRACT_U_1(p->h.critical));",
          "1914:  t_id = EXTRACT_BE_U_2(p->t_id);",
          "1919:  t_type = EXTRACT_U_1(p->t_type);",
          "1920:  switch (t_type) {",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1957:  if (idstr)",
          "1958:   ND_PRINT((ndo,\" #%u type=%s id=%s \", tcount,",
          "1960:      idstr));",
          "1961:  else",
          "1962:   ND_PRINT((ndo,\" #%u type=%s id=%u \", tcount,",
          "1965:  cp = (const u_char *)(p + 1);",
          "1966:  ep2 = (const u_char *)p + item_len;",
          "1967:  while (cp < ep && cp < ep2) {",
          "",
          "[Removed Lines]",
          "1959:      STR_OR_ID(t.t_type, ikev2_t_type_map),",
          "1963:      STR_OR_ID(t.t_type, ikev2_t_type_map),",
          "1964:      t.t_id));",
          "",
          "[Added Lines]",
          "1950:      STR_OR_ID(t_type, ikev2_t_type_map),",
          "1954:      STR_OR_ID(t_type, ikev2_t_type_map),",
          "1955:      t_id));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1986:        const u_char *ep, int depth)",
          "1987: {",
          "1988:  const struct ikev2_p *p;",
          "1990:  u_int prop_length;",
          "1991:  const u_char *cp;",
          "1992:  int i;",
          "1993:  int tcount;",
          "1994:  u_char np;",
          "1996:  u_int item_len;",
          "1998:  p = (const struct ikev2_p *)ext;",
          "1999:  ND_TCHECK(*p);",
          "2007:  prop_length = oprop_length - 4;",
          "2011:  cp = (const u_char *)(p + 1);",
          "2015:    goto toolong;",
          "2016:   ND_PRINT((ndo,\" spi=\"));",
          "2018:    goto trunc;",
          "2021:  }",
          "2026:  tcount = 0;",
          "2028:   tcount++;",
          "2029:   ext = (const struct isakmp_gen *)cp;",
          "2030:   if (prop_length < sizeof(*ext))",
          "2031:    goto toolong;",
          "2032:   ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "1989:  struct ikev2_p prop;",
          "1995:  struct isakmp_gen e;",
          "2000:  UNALIGNED_MEMCPY(&prop, ext, sizeof(prop));",
          "2002:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_P), prop.h.critical);",
          "2008:  ND_PRINT((ndo,\" #%u protoid=%s transform=%d len=%u\",",
          "2009:     prop.p_no,  PROTOIDSTR(prop.prot_id),",
          "2010:     prop.num_t, oprop_length));",
          "2013:  if (prop.spi_size) {",
          "2014:   if (prop_length < prop.spi_size)",
          "2017:   if (!rawprint(ndo, (const uint8_t *)cp, prop.spi_size))",
          "2019:   cp += prop.spi_size;",
          "2020:   prop_length -= prop.spi_size;",
          "2027:  for (np = ISAKMP_NPTYPE_T; np != 0; np = e.np) {",
          "2033:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "1981:  uint8_t spi_size;",
          "1991:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_P), EXTRACT_U_1(p->h.critical));",
          "1997:  ND_PRINT((ndo,\" #%u protoid=%s transform=%u len=%u\",",
          "1998:     EXTRACT_U_1(p->p_no),  PROTOIDSTR(EXTRACT_U_1(p->prot_id)),",
          "1999:     EXTRACT_U_1(p->num_t), oprop_length));",
          "2002:  spi_size = EXTRACT_U_1(p->spi_size);",
          "2003:  if (spi_size) {",
          "2004:   if (prop_length < spi_size)",
          "2007:   if (!rawprint(ndo, (const uint8_t *)cp, spi_size))",
          "2009:   cp += spi_size;",
          "2010:   prop_length -= spi_size;",
          "2017:  for (np = ISAKMP_NPTYPE_T; np != 0; np = EXTRACT_U_1(ext->np)) {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2042:   if (item_len <= 4)",
          "2043:    goto trunc;",
          "",
          "[Removed Lines]",
          "2041:   item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2030:   item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2086:   uint32_t proto _U_, int depth)",
          "2087: {",
          "2088:  const struct isakmp_gen *ext;",
          "2090:  u_int sa_length;",
          "2091:  const u_char *cp;",
          "2092:  int i;",
          "",
          "[Removed Lines]",
          "2089:  struct isakmp_gen e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2095:  u_int item_len;",
          "2097:  ND_TCHECK(*ext1);",
          "2105:  sa_length = osa_length - 4;",
          "2111:  cp = (const u_char *)(ext1 + 1);",
          "2112:  pcount = 0;",
          "2114:   pcount++;",
          "2115:   ext = (const struct isakmp_gen *)cp;",
          "2116:   if (sa_length < sizeof(*ext))",
          "2117:    goto toolong;",
          "2118:   ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2098:  UNALIGNED_MEMCPY(&e, ext1, sizeof(e));",
          "2099:  ikev2_pay_print(ndo, \"sa\", e.critical);",
          "2104:  osa_length= ntohs(e.len);",
          "2106:  ND_PRINT((ndo,\" len=%d\", sa_length));",
          "2113:  for (np = ISAKMP_NPTYPE_P; np != 0; np = e.np) {",
          "2119:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "2086:  ikev2_pay_print(ndo, \"sa\", EXTRACT_U_1(ext1->critical));",
          "2091:  osa_length= EXTRACT_BE_U_2(ext1->len);",
          "2093:  ND_PRINT((ndo,\" len=%u\", sa_length));",
          "2100:  for (np = ISAKMP_NPTYPE_P; np != 0; np = EXTRACT_U_1(ext->np)) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2128:   if (item_len <= 4)",
          "2129:    goto trunc;",
          "",
          "[Removed Lines]",
          "2127:   item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2113:   item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2168: static const u_char *",
          "2169: ikev2_ke_print(netdissect_options *ndo, u_char tpay,",
          "2170:   const struct isakmp_gen *ext,",
          "2172:   uint32_t phase _U_, uint32_t doi _U_,",
          "2173:   uint32_t proto _U_, int depth _U_)",
          "2174: {",
          "2176:  const struct ikev2_ke *k;",
          "2178:  k = (const struct ikev2_ke *)ext;",
          "2179:  ND_TCHECK(*k);",
          "2187:   ND_PRINT((ndo,\" \"));",
          "2189:    goto trunc;",
          "2190:  }",
          "2192: trunc:",
          "2193:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2194:  return NULL;",
          "",
          "[Removed Lines]",
          "2171:   u_int item_len _U_, const u_char *ep _U_,",
          "2175:  struct ikev2_ke ke;",
          "2180:  UNALIGNED_MEMCPY(&ke, ext, sizeof(ke));",
          "2181:  ikev2_pay_print(ndo, NPSTR(tpay), ke.h.critical);",
          "2183:  ND_PRINT((ndo,\" len=%u group=%s\", ntohs(ke.h.len) - 8,",
          "2184:     STR_OR_ID(ntohs(ke.ke_group), dh_p_map)));",
          "2186:  if (2 < ndo->ndo_vflag && 8 < ntohs(ke.h.len)) {",
          "2188:   if (!rawprint(ndo, (const uint8_t *)(k + 1), ntohs(ke.h.len) - 8))",
          "2191:  return (const u_char *)ext + ntohs(ke.h.len);",
          "",
          "[Added Lines]",
          "2157:   u_int item_len, const u_char *ep _U_,",
          "2165:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(k->h.critical));",
          "2167:  if (item_len < 8) {",
          "2168:   ND_PRINT((ndo,\" len=%u < 8\", item_len));",
          "2169:   return (const u_char *)ext + item_len;",
          "2170:  }",
          "2171:  ND_PRINT((ndo,\" len=%u group=%s\", item_len - 8,",
          "2172:     STR_OR_ID(EXTRACT_BE_U_2(k->ke_group), dh_p_map)));",
          "2174:  if (2 < ndo->ndo_vflag && 8 < item_len) {",
          "2176:   if (!rawprint(ndo, (const uint8_t *)(k + 1), item_len - 8))",
          "2179:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2197: static const u_char *",
          "2198: ikev2_ID_print(netdissect_options *ndo, u_char tpay,",
          "2199:   const struct isakmp_gen *ext,",
          "2201:   uint32_t phase _U_, uint32_t doi _U_,",
          "2202:   uint32_t proto _U_, int depth _U_)",
          "2203: {",
          "2204:  const struct ikev2_id *idp;",
          "2207:  unsigned int dumpascii, dumphex;",
          "2208:  const unsigned char *typedata;",
          "2210:  idp = (const struct ikev2_id *)ext;",
          "2211:  ND_TCHECK(*idp);",
          "2220:   ND_PRINT((ndo,\" \"));",
          "2222:    goto trunc;",
          "2223:  }",
          "2226:  dumpascii = 0;",
          "2227:  dumphex   = 0;",
          "2228:  typedata  = (const unsigned char *)(ext)+sizeof(struct ikev2_id);",
          "2231:  case ID_IPV4_ADDR:",
          "2232:   ND_PRINT((ndo, \" ipv4:\"));",
          "2233:   dumphex=1;",
          "",
          "[Removed Lines]",
          "2200:   u_int item_len _U_, const u_char *ep _U_,",
          "2205:  struct ikev2_id id;",
          "2206:  int id_len, idtype_len, i;",
          "2212:  UNALIGNED_MEMCPY(&id, ext, sizeof(id));",
          "2213:  ikev2_pay_print(ndo, NPSTR(tpay), id.h.critical);",
          "2215:  id_len = ntohs(id.h.len);",
          "2217:  ND_PRINT((ndo,\" len=%d\", id_len - 4));",
          "2218:  if (2 < ndo->ndo_vflag && 4 < id_len) {",
          "2221:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), id_len - 4))",
          "2225:  idtype_len =id_len - sizeof(struct ikev2_id);",
          "2230:  switch(id.type) {",
          "",
          "[Added Lines]",
          "2188:   u_int item_len, const u_char *ep _U_,",
          "2193:  u_int idtype_len, i;",
          "2199:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(idp->h.critical));",
          "2204:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "2205:  if (2 < ndo->ndo_vflag && 4 < item_len) {",
          "2208:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2212:  idtype_len =item_len - sizeof(struct ikev2_id);",
          "2217:  switch(EXTRACT_U_1(idp->type)) {",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2273:    goto trunc;",
          "2274:  }",
          "2277: trunc:",
          "2278:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2279:  return NULL;",
          "",
          "[Removed Lines]",
          "2276:  return (const u_char *)ext + id_len;",
          "",
          "[Added Lines]",
          "2263:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2282: static const u_char *",
          "2283: ikev2_cert_print(netdissect_options *ndo, u_char tpay,",
          "2284:   const struct isakmp_gen *ext,",
          "2286:   uint32_t phase _U_, uint32_t doi _U_,",
          "2287:   uint32_t proto _U_, int depth _U_)",
          "2288: {",
          "2290: }",
          "2292: static const u_char *",
          "2293: ikev2_cr_print(netdissect_options *ndo, u_char tpay,",
          "2294:   const struct isakmp_gen *ext,",
          "2296:   uint32_t phase _U_, uint32_t doi _U_,",
          "2297:   uint32_t proto _U_, int depth _U_)",
          "2298: {",
          "2300: }",
          "2302: static const u_char *",
          "2303: ikev2_auth_print(netdissect_options *ndo, u_char tpay,",
          "2304:   const struct isakmp_gen *ext,",
          "2306:   uint32_t phase _U_, uint32_t doi _U_,",
          "2307:   uint32_t proto _U_, int depth _U_)",
          "2308: {",
          "2310:  const char *v2_auth[]={ \"invalid\", \"rsasig\",",
          "2311:     \"shared-secret\", \"dsssig\" };",
          "2326:   if (ndo->ndo_vflag > 1) {",
          "2327:    ND_PRINT((ndo, \" authdata=(\"));",
          "2329:     goto trunc;",
          "2330:    ND_PRINT((ndo, \") \"));",
          "2331:   } else if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2285:   u_int item_len _U_, const u_char *ep _U_,",
          "2289:  return ikev2_gen_print(ndo, tpay, ext);",
          "2295:   u_int item_len _U_, const u_char *ep _U_,",
          "2299:  return ikev2_gen_print(ndo, tpay, ext);",
          "2305:   u_int item_len _U_, const u_char *ep,",
          "2309:  struct ikev2_auth a;",
          "2312:  const u_char *authdata = (const u_char*)ext + sizeof(a);",
          "2313:  unsigned int len;",
          "2315:  ND_TCHECK_LEN(ext, sizeof(a));",
          "2316:  UNALIGNED_MEMCPY(&a, ext, sizeof(a));",
          "2317:  ikev2_pay_print(ndo, NPSTR(tpay), a.h.critical);",
          "2318:  len = ntohs(a.h.len);",
          "2323:  ND_PRINT((ndo,\" len=%u method=%s\", len-4,",
          "2324:     STR_OR_ID(a.auth_method, v2_auth)));",
          "2325:  if (len > 4) {",
          "2328:    if (!rawprint(ndo, (const uint8_t *)authdata, len - sizeof(a)))",
          "",
          "[Added Lines]",
          "2272:   u_int item_len, const u_char *ep _U_,",
          "2276:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2282:   u_int item_len, const u_char *ep _U_,",
          "2286:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2292:   u_int item_len, const u_char *ep,",
          "2296:  const struct ikev2_auth *p;",
          "2299:  const u_char *authdata = (const u_char*)ext + sizeof(struct ikev2_auth);",
          "2301:  ND_TCHECK_LEN(ext, sizeof(struct ikev2_auth));",
          "2302:  p = (const struct ikev2_auth *)ext;",
          "2303:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(p->h.critical));",
          "2308:  ND_PRINT((ndo,\" len=%u method=%s\", item_len-4,",
          "2309:     STR_OR_ID(EXTRACT_U_1(p->auth_method), v2_auth)));",
          "2310:  if (item_len > 4) {",
          "2313:    if (!rawprint(ndo, (const uint8_t *)authdata, item_len - sizeof(struct ikev2_auth)))",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2334:   }",
          "2335:  }",
          "2338: trunc:",
          "2339:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2340:  return NULL;",
          "",
          "[Removed Lines]",
          "2337:  return (const u_char *)ext + len;",
          "",
          "[Added Lines]",
          "2322:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2343: static const u_char *",
          "2344: ikev2_nonce_print(netdissect_options *ndo, u_char tpay,",
          "2345:   const struct isakmp_gen *ext,",
          "2347:   uint32_t phase _U_, uint32_t doi _U_,",
          "2348:   uint32_t proto _U_, int depth _U_)",
          "2349: {",
          "2352:  ND_TCHECK(*ext);",
          "2358:   ND_PRINT((ndo,\" nonce=(\"));",
          "2360:    goto trunc;",
          "2361:   ND_PRINT((ndo,\") \"));",
          "2363:   if(!ike_show_somedata(ndo, (const u_char *)(ext+1), ep)) goto trunc;",
          "2364:  }",
          "2367: trunc:",
          "2368:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2369:  return NULL;",
          "",
          "[Removed Lines]",
          "2346:   u_int item_len _U_, const u_char *ep,",
          "2350:  struct isakmp_gen e;",
          "2353:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2354:  ikev2_pay_print(ndo, \"nonce\", e.critical);",
          "2356:  ND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));",
          "2357:  if (1 < ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "2359:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "2362:  } else if(ndo->ndo_vflag && 4 < ntohs(e.len)) {",
          "2366:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "2331:   u_int item_len, const u_char *ep,",
          "2336:  ikev2_pay_print(ndo, \"nonce\", EXTRACT_U_1(ext->critical));",
          "2341:  ND_PRINT((ndo,\" len=%u\", item_len - 4));",
          "2342:  if (1 < ndo->ndo_vflag && 4 < item_len) {",
          "2344:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2347:  } else if(ndo->ndo_vflag && 4 < item_len) {",
          "2351:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2378:   uint32_t proto _U_, int depth _U_)",
          "2379: {",
          "2380:  const struct ikev2_n *p;",
          "2382:  const u_char *cp;",
          "2383:  u_char showspi, showsomedata;",
          "2384:  const char *notify_name;",
          "2387:  p = (const struct ikev2_n *)ext;",
          "2388:  ND_TCHECK(*p);",
          "2392:  showspi = 1;",
          "2393:  showsomedata=0;",
          "2394:  notify_name=NULL;",
          "2401:  switch(type) {",
          "",
          "[Removed Lines]",
          "2381:  struct ikev2_n n;",
          "2385:  uint32_t type;",
          "2389:  UNALIGNED_MEMCPY(&n, ext, sizeof(n));",
          "2390:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_N), n.h.critical);",
          "2396:  ND_PRINT((ndo,\" prot_id=%s\", PROTOIDSTR(n.prot_id)));",
          "2398:  type = ntohs(n.type);",
          "",
          "[Added Lines]",
          "2366:  uint16_t type;",
          "2367:  uint8_t spi_size;",
          "2374:  ikev2_pay_print(ndo, NPSTR(ISAKMP_NPTYPE_N), EXTRACT_U_1(p->h.critical));",
          "2380:  ND_PRINT((ndo,\" prot_id=%s\", PROTOIDSTR(EXTRACT_U_1(p->prot_id))));",
          "2382:  type = EXTRACT_BE_U_2(p->type);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2547:  }",
          "2551:   ND_PRINT((ndo,\" spi=\"));",
          "2553:    goto trunc;",
          "2554:  }",
          "2558:  if (cp < ep) {",
          "2559:   if (ndo->ndo_vflag > 3 || (showsomedata && ep-cp < 30)) {",
          "",
          "[Removed Lines]",
          "2550:  if (showspi && n.spi_size) {",
          "2552:   if (!rawprint(ndo, (const uint8_t *)(p + 1), n.spi_size))",
          "2556:  cp = (const u_char *)(p + 1) + n.spi_size;",
          "",
          "[Added Lines]",
          "2534:  spi_size = EXTRACT_U_1(p->spi_size);",
          "2535:  if (showspi && spi_size) {",
          "2537:   if (!rawprint(ndo, (const uint8_t *)(p + 1), spi_size))",
          "2541:  cp = (const u_char *)(p + 1) + spi_size;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2577: static const u_char *",
          "2578: ikev2_d_print(netdissect_options *ndo, u_char tpay,",
          "2579:   const struct isakmp_gen *ext,",
          "2581:   uint32_t phase _U_, uint32_t doi _U_,",
          "2582:   uint32_t proto _U_, int depth _U_)",
          "2583: {",
          "2585: }",
          "2587: static const u_char *",
          "2588: ikev2_vid_print(netdissect_options *ndo, u_char tpay,",
          "2589:   const struct isakmp_gen *ext,",
          "2591:   uint32_t phase _U_, uint32_t doi _U_,",
          "2592:   uint32_t proto _U_, int depth _U_)",
          "2593: {",
          "2595:  const u_char *vid;",
          "2598:  ND_TCHECK(*ext);",
          "2603:  vid = (const u_char *)(ext+1);",
          "2605:  ND_TCHECK_LEN(vid, len);",
          "2606:  for(i=0; i<len; i++) {",
          "2607:   if(ND_ISPRINT(EXTRACT_U_1(vid + i)))",
          "",
          "[Removed Lines]",
          "2580:   u_int item_len _U_, const u_char *ep _U_,",
          "2584:  return ikev2_gen_print(ndo, tpay, ext);",
          "2590:   u_int item_len _U_, const u_char *ep _U_,",
          "2594:  struct isakmp_gen e;",
          "2596:  int i, len;",
          "2599:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2600:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "2601:  ND_PRINT((ndo,\" len=%d vid=\", ntohs(e.len) - 4));",
          "2604:  len = ntohs(e.len) - 4;",
          "",
          "[Added Lines]",
          "2565:   u_int item_len, const u_char *ep _U_,",
          "2569:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2575:   u_int item_len, const u_char *ep _U_,",
          "2580:  u_int i, len;",
          "2583:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(ext->critical));",
          "2588:  ND_PRINT((ndo,\" len=%u vid=\", item_len - 4));",
          "2591:  len = item_len - 4;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2611:  if (2 < ndo->ndo_vflag && 4 < len) {",
          "2613:   ND_PRINT((ndo,\" \"));",
          "2615:    goto trunc;",
          "2616:  }",
          "2618: trunc:",
          "2619:  ND_PRINT((ndo,\" [|%s]\", NPSTR(tpay)));",
          "2620:  return NULL;",
          "",
          "[Removed Lines]",
          "2614:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))",
          "2617:  return (const u_char *)ext + ntohs(e.len);",
          "",
          "[Added Lines]",
          "2601:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), item_len - 4))",
          "2604:  return (const u_char *)ext + item_len;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2623: static const u_char *",
          "2624: ikev2_TS_print(netdissect_options *ndo, u_char tpay,",
          "2625:   const struct isakmp_gen *ext,",
          "2627:   uint32_t phase _U_, uint32_t doi _U_,",
          "2628:   uint32_t proto _U_, int depth _U_)",
          "2629: {",
          "2631: }",
          "2633: static const u_char *",
          "",
          "[Removed Lines]",
          "2626:   u_int item_len _U_, const u_char *ep _U_,",
          "2630:  return ikev2_gen_print(ndo, tpay, ext);",
          "",
          "[Added Lines]",
          "2613:   u_int item_len, const u_char *ep _U_,",
          "2617:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2635: #ifndef HAVE_LIBCRYPTO",
          "2636:        _U_",
          "2637: #endif",
          "2639:        u_char tpay,",
          "2640:        const struct isakmp_gen *ext,",
          "2642: #ifndef HAVE_LIBCRYPTO",
          "2643:        _U_",
          "2644: #endif",
          "",
          "[Removed Lines]",
          "2638:        struct isakmp *base,",
          "2641:        u_int item_len _U_, const u_char *ep _U_,",
          "",
          "[Added Lines]",
          "2625:        const struct isakmp *base,",
          "2628:        u_int item_len, const u_char *ep _U_,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2656: #endif",
          "2657:        int depth)",
          "2658: {",
          "2660:  const u_char *dat;",
          "2663:  ND_TCHECK(*ext);",
          "2670:  if (2 < ndo->ndo_vflag && 4 < dlen) {",
          "2671:   ND_PRINT((ndo,\" \"));",
          "2672:   if (!rawprint(ndo, (const uint8_t *)(ext + 1), dlen))",
          "",
          "[Removed Lines]",
          "2659:  struct isakmp_gen e;",
          "2661:  volatile int dlen;",
          "2664:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2665:  ikev2_pay_print(ndo, NPSTR(tpay), e.critical);",
          "2667:  dlen = ntohs(e.len)-4;",
          "2669:  ND_PRINT((ndo,\" len=%d\", dlen));",
          "",
          "[Added Lines]",
          "2647:  volatile u_int dlen;",
          "2650:  ikev2_pay_print(ndo, NPSTR(tpay), EXTRACT_U_1(ext->critical));",
          "2652:  dlen = item_len-4;",
          "2654:  ND_PRINT((ndo,\" len=%u\", dlen));",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2679: #ifdef HAVE_LIBCRYPTO",
          "2681:  if(esp_print_decrypt_buffer_by_ikev2(ndo,",
          "2683:           base->i_ck, base->r_ck,",
          "2684:           dat, dat+dlen)) {",
          "2686:   ext = (const struct isakmp_gen *)ndo->ndo_packetp;",
          "2691:  }",
          "2692: #endif",
          "",
          "[Removed Lines]",
          "2682:           base->flags & ISAKMP_FLAG_I,",
          "2689:   ikev2_sub_print(ndo, base, e.np, ext, ndo->ndo_snapend,",
          "2690:     phase, doi, proto, depth+1);",
          "",
          "[Added Lines]",
          "2667:           EXTRACT_U_1(base->flags) & ISAKMP_FLAG_I,",
          "2674:   ikev2_sub_print(ndo, base, EXTRACT_U_1(ext->np), ext,",
          "2675:     ndo->ndo_snapend, phase, doi, proto, depth+1);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2704: static const u_char *",
          "2705: ikev2_cp_print(netdissect_options *ndo, u_char tpay,",
          "2706:   const struct isakmp_gen *ext,",
          "2708:   uint32_t phase _U_, uint32_t doi _U_,",
          "2709:   uint32_t proto _U_, int depth _U_)",
          "2710: {",
          "2712: }",
          "2714: static const u_char *",
          "2715: ikev2_eap_print(netdissect_options *ndo, u_char tpay,",
          "2716:   const struct isakmp_gen *ext,",
          "2718:   uint32_t phase _U_, uint32_t doi _U_,",
          "2719:   uint32_t proto _U_, int depth _U_)",
          "2720: {",
          "2722: }",
          "2724: static const u_char *",
          "",
          "[Removed Lines]",
          "2707:   u_int item_len _U_, const u_char *ep _U_,",
          "2711:  return ikev2_gen_print(ndo, tpay, ext);",
          "2717:   u_int item_len _U_, const u_char *ep _U_,",
          "2721:  return ikev2_gen_print(ndo, tpay, ext);",
          "",
          "[Added Lines]",
          "2692:   u_int item_len, const u_char *ep _U_,",
          "2696:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "2702:   u_int item_len, const u_char *ep _U_,",
          "2706:  return ikev2_gen_print(ndo, tpay, ext, item_len);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2728:         uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2729: {",
          "2730:  const u_char *cp;",
          "2732:  u_int item_len;",
          "2734:  cp = (const u_char *)ext;",
          "2735:  ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2731:  struct isakmp_gen e;",
          "2736:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2745:  if (item_len <= 4)",
          "2746:   return NULL;",
          "",
          "[Removed Lines]",
          "2744:  item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2727:  item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2769: {",
          "2770:  const u_char *cp;",
          "2771:  int i;",
          "2774:  cp = (const u_char *)ext;",
          "2776:  while (np) {",
          "2777:   ND_TCHECK(*ext);",
          "2782:   depth++;",
          "2783:   ND_PRINT((ndo,\"\\n\"));",
          "",
          "[Removed Lines]",
          "2772:  struct isakmp_gen e;",
          "2778:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2780:   ND_TCHECK_LEN(ext, ntohs(e.len));",
          "",
          "[Added Lines]",
          "2755:  u_int item_len;",
          "2762:   item_len = EXTRACT_BE_U_2(ext->len);",
          "2763:   ND_TCHECK_LEN(ext, item_len);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2793:    return NULL;",
          "2794:   }",
          "2797:   ext = (const struct isakmp_gen *)cp;",
          "2798:  }",
          "2799:  return cp;",
          "",
          "[Removed Lines]",
          "2796:   np = e.np;",
          "",
          "[Added Lines]",
          "2779:   np = EXTRACT_U_1(ext->np);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2803: }",
          "2805: static char *",
          "2807: {",
          "2808:  static char buf[20];",
          "2810:  return buf;",
          "2811: }",
          "2813: static void",
          "2814: ikev1_print(netdissect_options *ndo,",
          "2815:      const u_char *bp,  u_int length,",
          "2817: {",
          "2818:  const struct isakmp *p;",
          "2819:  const u_char *ep;",
          "2820:  u_char np;",
          "2821:  int i;",
          "2824:  p = (const struct isakmp *)bp;",
          "2825:  ep = ndo->ndo_snapend;",
          "2827:  phase = (EXTRACT_BE_U_4(base->msgid) == 0) ? 1 : 2;",
          "2828:  if (phase == 1)",
          "2830:  else",
          "2833:  i = cookie_find(&base->i_ck);",
          "2834:  if (i < 0) {",
          "",
          "[Removed Lines]",
          "2806: numstr(int x)",
          "2809:  snprintf(buf, sizeof(buf), \"#%d\", x);",
          "2816:      const u_char *bp2, struct isakmp *base)",
          "2822:  int phase;",
          "2829:   ND_PRINT((ndo,\" phase %d\", phase));",
          "2831:   ND_PRINT((ndo,\" phase %d/others\", phase));",
          "",
          "[Added Lines]",
          "2789: numstr(u_int x)",
          "2792:  snprintf(buf, sizeof(buf), \"#%u\", x);",
          "2799:      const u_char *bp2, const struct isakmp *base)",
          "2803:  u_int flags;",
          "2806:  u_int phase;",
          "2813:   ND_PRINT((ndo,\" phase %u\", phase));",
          "2815:   ND_PRINT((ndo,\" phase %u/others\", phase));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2848:    ND_PRINT((ndo,\" ?\"));",
          "2849:  }",
          "2855:  }",
          "2857:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2851:  ND_PRINT((ndo,\" %s\", ETYPESTR(base->etype)));",
          "2852:  if (base->flags) {",
          "2853:   ND_PRINT((ndo,\"[%s%s]\", base->flags & ISAKMP_FLAG_E ? \"E\" : \"\",",
          "2854:      base->flags & ISAKMP_FLAG_C ? \"C\" : \"\"));",
          "",
          "[Added Lines]",
          "2835:  ND_PRINT((ndo,\" %s\", ETYPESTR(EXTRACT_U_1(base->etype))));",
          "2836:  flags = EXTRACT_U_1(base->flags);",
          "2837:  if (flags) {",
          "2838:   ND_PRINT((ndo,\"[%s%s]\", flags & ISAKMP_FLAG_E ? \"E\" : \"\",",
          "2839:      flags & ISAKMP_FLAG_C ? \"C\" : \"\"));",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2860:   ND_PRINT((ndo,\":\"));",
          "2869:    goto done;",
          "2870:   }",
          "2874:   ext = (const struct isakmp_gen *)(p + 1);",
          "2875:   ikev1_sub_print(ndo, np, ext, ep, phase, 0, 0, 0);",
          "2876:  }",
          "2878: done:",
          "2879:  if (ndo->ndo_vflag) {",
          "2881:    ND_PRINT((ndo,\" (len mismatch: isakmp %u/ip %u)\",",
          "2883:   }",
          "2884:  }",
          "2885: }",
          "2887: static const u_char *",
          "2889:    u_char np,",
          "2890:    const struct isakmp_gen *ext, const u_char *ep,",
          "2891:    uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2892: {",
          "2893:  const u_char *cp;",
          "2895:  u_int item_len;",
          "2897:  cp = (const u_char *)ext;",
          "2898:  ND_TCHECK(*ext);",
          "",
          "[Removed Lines]",
          "2863:   if (base->flags & ISAKMP_FLAG_E) {",
          "2868:    ND_PRINT((ndo,\" [encrypted %s]\", NPSTR(base->np)));",
          "2872:   CHECKLEN(p + 1, base->np);",
          "2873:   np = base->np;",
          "2880:   if (ntohl(base->len) != length) {",
          "2882:       (uint32_t)ntohl(base->len), length));",
          "2888: ikev2_sub0_print(netdissect_options *ndo, struct isakmp *base,",
          "2894:  struct isakmp_gen e;",
          "2899:  UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "",
          "[Added Lines]",
          "2847:   np = EXTRACT_U_1(base->np);",
          "2850:   if (flags & ISAKMP_FLAG_E) {",
          "2855:    ND_PRINT((ndo,\" [encrypted %s]\", NPSTR(np)));",
          "2859:   CHECKLEN(p + 1, np);",
          "2866:   if (EXTRACT_BE_U_4(base->len) != length) {",
          "2868:       EXTRACT_BE_U_4(base->len), length));",
          "2874: ikev2_sub0_print(netdissect_options *ndo, const struct isakmp *base,",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2908:  if (item_len <= 4)",
          "2909:   return NULL;",
          "",
          "[Removed Lines]",
          "2907:  item_len = ntohs(e.len);",
          "",
          "[Added Lines]",
          "2891:  item_len = EXTRACT_BE_U_2(ext->len);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2932: static const u_char *",
          "2933: ikev2_sub_print(netdissect_options *ndo,",
          "2935:   u_char np, const struct isakmp_gen *ext, const u_char *ep,",
          "2936:   uint32_t phase, uint32_t doi, uint32_t proto, int depth)",
          "2937: {",
          "2938:  const u_char *cp;",
          "2939:  int i;",
          "2942:  cp = (const u_char *)ext;",
          "2943:  while (np) {",
          "2944:   ND_TCHECK(*ext);",
          "2949:   depth++;",
          "2950:   ND_PRINT((ndo,\"\\n\"));",
          "",
          "[Removed Lines]",
          "2934:   struct isakmp *base,",
          "2940:  struct isakmp_gen e;",
          "2945:   UNALIGNED_MEMCPY(&e, ext, sizeof(e));",
          "2947:   ND_TCHECK_LEN(ext, ntohs(e.len));",
          "",
          "[Added Lines]",
          "2918:   const struct isakmp *base,",
          "2929:   ND_TCHECK_LEN(ext, EXTRACT_BE_U_2(ext->len));",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2961:    return NULL;",
          "2962:   }",
          "2965:   ext = (const struct isakmp_gen *)cp;",
          "2966:  }",
          "2967:  return cp;",
          "",
          "[Removed Lines]",
          "2964:   np = e.np;",
          "",
          "[Added Lines]",
          "2946:   np = EXTRACT_U_1(ext->np);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2973: static void",
          "2974: ikev2_print(netdissect_options *ndo,",
          "2975:      const u_char *bp,  u_int length,",
          "2977: {",
          "2978:  const struct isakmp *p;",
          "2979:  const u_char *ep;",
          "2980:  u_char np;",
          "2983:  p = (const struct isakmp *)bp;",
          "2984:  ep = ndo->ndo_snapend;",
          "",
          "[Removed Lines]",
          "2976:      const u_char *bp2 _U_, struct isakmp *base)",
          "2981:  int phase;",
          "",
          "[Added Lines]",
          "2958:      const u_char *bp2 _U_, const struct isakmp *base)",
          "2962:  uint8_t flags;",
          "2964:  u_int phase;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2989:  else",
          "2990:   ND_PRINT((ndo, \" child_sa \"));",
          "2994:   ND_PRINT((ndo, \"[%s%s%s]\",",
          "2998:  }",
          "3000:  if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "2992:  ND_PRINT((ndo, \" %s\", ETYPESTR(base->etype)));",
          "2993:  if (base->flags) {",
          "2995:      base->flags & ISAKMP_FLAG_I ? \"I\" : \"\",",
          "2996:      base->flags & ISAKMP_FLAG_V ? \"V\" : \"\",",
          "2997:      base->flags & ISAKMP_FLAG_R ? \"R\" : \"\"));",
          "",
          "[Added Lines]",
          "2975:  ND_PRINT((ndo, \" %s\", ETYPESTR(EXTRACT_U_1(base->etype))));",
          "2976:  flags = EXTRACT_U_1(base->flags);",
          "2977:  if (flags) {",
          "2979:      flags & ISAKMP_FLAG_I ? \"I\" : \"\",",
          "2980:      flags & ISAKMP_FLAG_V ? \"V\" : \"\",",
          "2981:      flags & ISAKMP_FLAG_R ? \"R\" : \"\"));",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3003:   ND_PRINT((ndo, \":\"));",
          "3012:    goto done;",
          "3013:   }",
          "3018:   ext = (const struct isakmp_gen *)(p + 1);",
          "3019:   ikev2_sub_print(ndo, base, np, ext, ep, phase, 0, 0, 0);",
          "3020:  }",
          "3022: done:",
          "3023:  if (ndo->ndo_vflag) {",
          "3025:    ND_PRINT((ndo, \" (len mismatch: isakmp %u/ip %u)\",",
          "3027:   }",
          "3028:  }",
          "3029: }",
          "",
          "[Removed Lines]",
          "3006:   if (base->flags & ISAKMP_FLAG_E) {",
          "3011:    ND_PRINT((ndo, \" [encrypted %s]\", NPSTR(base->np)));",
          "3015:   CHECKLEN(p + 1, base->np)",
          "3017:   np = base->np;",
          "3024:   if (ntohl(base->len) != length) {",
          "3026:       (uint32_t)ntohl(base->len), length));",
          "",
          "[Added Lines]",
          "2989:   np = EXTRACT_U_1(base->np);",
          "2992:   if (flags & ISAKMP_FLAG_E) {",
          "2997:    ND_PRINT((ndo, \" [encrypted %s]\", NPSTR(np)));",
          "3001:   CHECKLEN(p + 1, np)",
          "3008:   if (EXTRACT_BE_U_4(base->len) != length) {",
          "3010:       EXTRACT_BE_U_4(base->len), length));",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3034:       const u_char *bp2)",
          "3035: {",
          "3036:  const struct isakmp *p;",
          "3038:  const u_char *ep;",
          "3041: #ifdef HAVE_LIBCRYPTO",
          "",
          "[Removed Lines]",
          "3037:  struct isakmp base;",
          "3039:  int major, minor;",
          "",
          "[Added Lines]",
          "3022:  u_int major, minor;",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3054:   return;",
          "3055:  }",
          "3059:  ND_PRINT((ndo,\"isakmp\"));",
          "3061:   >> ISAKMP_VERS_MAJOR_SHIFT;",
          "3063:   >> ISAKMP_VERS_MINOR_SHIFT;",
          "3065:  if (ndo->ndo_vflag) {",
          "3067:  }",
          "3069:  if (ndo->ndo_vflag) {",
          "3070:   ND_PRINT((ndo,\" msgid \"));",
          "3072:  }",
          "3074:  if (1 < ndo->ndo_vflag) {",
          "3075:   ND_PRINT((ndo,\" cookie \"));",
          "3077:   ND_PRINT((ndo,\"->\"));",
          "3079:  }",
          "3080:  ND_PRINT((ndo,\":\"));",
          "3082:  switch(major) {",
          "3083:  case IKEv1_MAJOR_VERSION:",
          "3085:   break;",
          "3087:  case IKEv2_MAJOR_VERSION:",
          "3089:   break;",
          "3090:  }",
          "3091: }",
          "",
          "[Removed Lines]",
          "3057:  UNALIGNED_MEMCPY(&base, p, sizeof(base));",
          "3060:  major = (base.vers & ISAKMP_VERS_MAJOR)",
          "3062:  minor = (base.vers & ISAKMP_VERS_MINOR)",
          "3066:   ND_PRINT((ndo,\" %d.%d\", major, minor));",
          "3071:   hexprint(ndo, (const uint8_t *)&base.msgid, sizeof(base.msgid));",
          "3076:   hexprint(ndo, (const uint8_t *)&base.i_ck, sizeof(base.i_ck));",
          "3078:   hexprint(ndo, (const uint8_t *)&base.r_ck, sizeof(base.r_ck));",
          "3084:   ikev1_print(ndo, bp, length, bp2, &base);",
          "3088:   ikev2_print(ndo, bp, length, bp2, &base);",
          "",
          "[Added Lines]",
          "3041:  major = (EXTRACT_U_1(p->vers) & ISAKMP_VERS_MAJOR)",
          "3043:  minor = (EXTRACT_U_1(p->vers) & ISAKMP_VERS_MINOR)",
          "3047:   ND_PRINT((ndo,\" %u.%u\", major, minor));",
          "3052:   hexprint(ndo, p->msgid, sizeof(p->msgid));",
          "3057:   hexprint(ndo, p->i_ck, sizeof(p->i_ck));",
          "3059:   hexprint(ndo, p->r_ck, sizeof(p->r_ck));",
          "3065:   ikev1_print(ndo, bp, length, bp2, p);",
          "3069:   ikev2_print(ndo, bp, length, bp2, p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}