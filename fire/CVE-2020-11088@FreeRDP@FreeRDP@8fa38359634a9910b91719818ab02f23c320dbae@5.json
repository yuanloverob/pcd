{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
      "candidate_info": {
        "commit_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_create",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: {",
          "84:  char* path = NULL;",
          "85:  int status;",
          "86:  UINT32 PathLength;",
          "90:  Stream_Read_UINT32(irp->input, PathLength);",
          "94:  if (status < 1)",
          "95:   if (!(path = (char*)calloc(1, 1)))",
          "",
          "[Removed Lines]",
          "87:  Stream_Seek(irp->input, 28);",
          "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
          "92:                              &path, 0, NULL, NULL);",
          "",
          "[Added Lines]",
          "86:  WCHAR* ptr;",
          "88:  if (!Stream_SafeSeek(irp->input, 28))",
          "89:   return ERROR_INVALID_DATA;",
          "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
          "93:   return ERROR_INVALID_DATA;",
          "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
          "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
          "97:   return ERROR_INVALID_DATA;",
          "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6efa8290d8df489ed472edbdf6ce27002f4323b6",
      "candidate_info": {
        "commit_hash": "6efa8290d8df489ed472edbdf6ce27002f4323b6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6efa8290d8df489ed472edbdf6ce27002f4323b6",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_read",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  UINT64 Offset;",
          "150:  ssize_t status;",
          "151:  BYTE* buffer = NULL;",
          "152:  Stream_Read_UINT32(irp->input, Length);",
          "153:  Stream_Read_UINT64(irp->input, Offset);",
          "154:  buffer = (BYTE*)malloc(Length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  if (Stream_GetRemainingLength(irp->input) < 12)",
          "153:   return ERROR_INVALID_DATA;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2215fef975b963b3995356c3583f0e87cd08ac6b",
      "candidate_info": {
        "commit_hash": "2215fef975b963b3995356c3583f0e87cd08ac6b",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2215fef975b963b3995356c3583f0e87cd08ac6b",
        "files": [
          "channels/rdpsnd/client/rdpsnd_main.c"
        ],
        "message": "Fixed oob read in rdpsnd_recv_wave2_pdu\n\nCheck format index before using it.\nThanks to hac425 CVE-2020-11041",
        "before_after_code_files": [
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:  if (Stream_GetRemainingLength(s) < size)",
          "550:   return ERROR_BAD_LENGTH;",
          "552:  data = Stream_Pointer(s);",
          "553:  format = &rdpsnd->ClientFormats[rdpsnd->wCurrentFormatNo];",
          "554:  WLog_Print(rdpsnd->log, WLOG_DEBUG,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:  if (rdpsnd->wCurrentFormatNo >= rdpsnd->NumberOfClientFormats)",
          "553:   return ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "624:  Stream_Read_UINT8(s, rdpsnd->cBlockNo);",
          "626:  Stream_Read_UINT32(s, dwAudioTimeStamp);",
          "628:  format = &rdpsnd->ClientFormats[wFormatNo];",
          "629:  rdpsnd->wArrivalTime = GetTickCount64();",
          "630:  WLog_Print(rdpsnd->log, WLOG_DEBUG,",
          "631:             \"%s Wave2PDU: cBlockNo: %\" PRIu8 \" wFormatNo: %\" PRIu16 \", align=%hu\",",
          "",
          "[Removed Lines]",
          "627:  rdpsnd->waveDataSize = BodySize - 12;",
          "",
          "[Added Lines]",
          "630:  if (wFormatNo >= rdpsnd->NumberOfClientFormats)",
          "631:   return ERROR_INVALID_DATA;",
          "633:  rdpsnd->waveDataSize = BodySize - 12;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e9b0a625bbeb55c0e00c96f2e9bf9a2677a374c",
      "candidate_info": {
        "commit_hash": "8e9b0a625bbeb55c0e00c96f2e9bf9a2677a374c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8e9b0a625bbeb55c0e00c96f2e9bf9a2677a374c",
        "files": [
          "channels/printer/client/printer_main.c"
        ],
        "message": "Fixed int overflow in printer_write_setting\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c": [
          "File: channels/printer/client/printer_main.c -> channels/printer/client/printer_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  const char* name = filemap[type];",
          "108:  char* abs = GetCombinedPath(path, name);",
          "111:   return FALSE;",
          "113:  file = CreateFileA(abs, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Removed Lines]",
          "110:  if (!abs)",
          "",
          "[Added Lines]",
          "110:  if (!abs || (length > INT32_MAX))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "candidate_info": {
        "commit_hash": "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
        "files": [
          "channels/drive/client/drive_main.c",
          "channels/printer/client/printer_main.c",
          "channels/rdpei/client/rdpei_main.c",
          "channels/serial/client/serial_main.c",
          "libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/nego.c"
        ],
        "message": "Fixed oob read in irp_write and similar",
        "before_after_code_files": [
          "channels/drive/client/drive_main.c||channels/drive/client/drive_main.c",
          "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c",
          "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c",
          "channels/serial/client/serial_main.c||channels/serial/client/serial_main.c",
          "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/nego.c||libfreerdp/core/nego.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drive/client/drive_main.c||channels/drive/client/drive_main.c": [
          "File: channels/drive/client/drive_main.c -> channels/drive/client/drive_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:  DRIVE_FILE* file;",
          "332:  UINT32 Length;",
          "333:  UINT64 Offset;",
          "335:  if (!drive || !irp || !irp->input || !irp->output || !irp->Complete)",
          "336:   return ERROR_INVALID_PARAMETER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:  void* ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:  Stream_Read_UINT32(irp->input, Length);",
          "342:  Stream_Read_UINT64(irp->input, Offset);",
          "344:  file = drive_get_file_by_id(drive, irp->FileId);",
          "346:  if (!file)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:  ptr = Stream_Pointer(irp->input);",
          "346:  if (!Stream_SafeSeek(irp->input, Length))",
          "347:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:   irp->IoStatus = drive_map_windows_err(GetLastError());",
          "354:   Length = 0;",
          "355:  }",
          "357:  {",
          "358:   irp->IoStatus = drive_map_windows_err(GetLastError());",
          "359:   Length = 0;",
          "",
          "[Removed Lines]",
          "356:  else if (!drive_file_write(file, Stream_Pointer(irp->input), Length))",
          "",
          "[Added Lines]",
          "360:  else if (!drive_file_write(file, ptr, Length))",
          "",
          "---------------"
        ],
        "channels/printer/client/printer_main.c||channels/printer/client/printer_main.c": [
          "File: channels/printer/client/printer_main.c -> channels/printer/client/printer_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  UINT64 Offset;",
          "479:  rdpPrintJob* printjob = NULL;",
          "480:  UINT error = CHANNEL_RC_OK;",
          "481:  Stream_Read_UINT32(irp->input, Length);",
          "482:  Stream_Read_UINT64(irp->input, Offset);",
          "485:  if (printer_dev->printer)",
          "486:   printjob = printer_dev->printer->FindPrintJob(printer_dev->printer, irp->FileId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:  void* ptr;",
          "483:  if (Stream_GetRemainingLength(irp->input) < 32)",
          "484:   return ERROR_INVALID_DATA;",
          "488:  ptr = Stream_Pointer(irp->input);",
          "489:  if (!Stream_SafeSeek(irp->input, Length))",
          "490:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "492:  }",
          "493:  else",
          "494:  {",
          "496:  }",
          "498:  if (error)",
          "",
          "[Removed Lines]",
          "495:   error = printjob->Write(printjob, Stream_Pointer(irp->input), Length);",
          "",
          "[Added Lines]",
          "501:   error = printjob->Write(printjob, ptr, Length);",
          "",
          "---------------"
        ],
        "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c": [
          "File: channels/rdpei/client/rdpei_main.c -> channels/rdpei/client/rdpei_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:  UINT16 eventId;",
          "446:  UINT32 pduLength;",
          "447:  UINT error;",
          "450: #ifdef WITH_DEBUG_RDPEI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:  if (Stream_GetRemainingLength(s) < 6)",
          "449:   return ERROR_INVALID_DATA;",
          "",
          "---------------"
        ],
        "channels/serial/client/serial_main.c||channels/serial/client/serial_main.c": [
          "File: channels/serial/client/serial_main.c -> channels/serial/client/serial_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   return ERROR_INVALID_DATA;",
          "150: #ifndef _WIN32",
          "",
          "[Removed Lines]",
          "145:  if (Stream_GetRemainingLength(irp->input) < PathLength)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300: {",
          "301:  UINT32 Length;",
          "302:  UINT64 Offset;",
          "303:  DWORD nbWritten = 0;",
          "305:  if (Stream_GetRemainingLength(irp->input) < 32)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:  void* ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:  WLog_Print(serial->log, WLOG_DEBUG, \"writing %\" PRIu32 \" bytes to %s\", Length,",
          "318:             serial->device.name);",
          "322:  {",
          "323:   irp->IoStatus = STATUS_SUCCESS;",
          "324:  }",
          "",
          "[Removed Lines]",
          "321:  if (CommWriteFile(serial->hComm, Stream_Pointer(irp->input), Length, &nbWritten, NULL))",
          "",
          "[Added Lines]",
          "322:  ptr = Stream_Pointer(irp->input);",
          "323:  if (!Stream_SafeSeek(irp->input, Length))",
          "324:   return ERROR_INVALID_DATA;",
          "326:  if (CommWriteFile(serial->hComm, ptr, Length, &nbWritten, NULL))",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c": [
          "File: libfreerdp/core/gateway/rdg.c -> libfreerdp/core/gateway/rdg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:  Stream_Seek(s, 4);",
          "305:  Stream_Read_UINT32(s, packetLength);",
          "308:  {",
          "309:   Stream_Free(s, TRUE);",
          "310:   return NULL;",
          "",
          "[Removed Lines]",
          "307:  if ((packetLength > INT_MAX) || !Stream_EnsureCapacity(s, packetLength))",
          "",
          "[Added Lines]",
          "307:  if ((packetLength > INT_MAX) || !Stream_EnsureCapacity(s, packetLength) ||",
          "308:      (packetLength < header))",
          "",
          "---------------"
        ],
        "libfreerdp/core/nego.c||libfreerdp/core/nego.c": [
          "File: libfreerdp/core/nego.c -> libfreerdp/core/nego.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static BOOL nego_send_preconnection_pdu(rdpNego* nego);",
          "92: static BOOL nego_recv_response(rdpNego* nego);",
          "93: static void nego_send(rdpNego* nego);",
          "",
          "[Removed Lines]",
          "94: static void nego_process_negotiation_request(rdpNego* nego, wStream* s);",
          "95: static void nego_process_negotiation_response(rdpNego* nego, wStream* s);",
          "96: static void nego_process_negotiation_failure(rdpNego* nego, wStream* s);",
          "",
          "[Added Lines]",
          "94: static BOOL nego_process_negotiation_request(rdpNego* nego, wStream* s);",
          "95: static BOOL nego_process_negotiation_response(rdpNego* nego, wStream* s);",
          "96: static BOOL nego_process_negotiation_failure(rdpNego* nego, wStream* s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:   switch (type)",
          "619:   {",
          "620:    case TYPE_RDP_NEG_RSP:",
          "622:     WLog_DBG(TAG, \"selected_protocol: %\" PRIu32 \"\", nego->SelectedProtocol);",
          "",
          "[Removed Lines]",
          "621:     nego_process_negotiation_response(nego, s);",
          "",
          "[Added Lines]",
          "621:     if (!nego_process_negotiation_response(nego, s))",
          "622:      return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "645:     break;",
          "647:    case TYPE_RDP_NEG_FAILURE:",
          "649:     break;",
          "650:   }",
          "651:  }",
          "",
          "[Removed Lines]",
          "648:     nego_process_negotiation_failure(nego, s);",
          "",
          "[Added Lines]",
          "649:     if (!nego_process_negotiation_failure(nego, s))",
          "650:      return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "795:    return FALSE;",
          "796:   }",
          "799:  }",
          "801:  return tpkt_ensure_stream_consumed(s, length);",
          "",
          "[Removed Lines]",
          "798:   nego_process_negotiation_request(nego, s);",
          "",
          "[Added Lines]",
          "800:   if (!nego_process_negotiation_request(nego, s))",
          "801:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "922: {",
          "923:  BYTE flags;",
          "924:  UINT16 length;",
          "925:  Stream_Read_UINT8(s, flags);",
          "926:  Stream_Read_UINT16(s, length);",
          "927:  Stream_Read_UINT32(s, nego->RequestedProtocols);",
          "928:  WLog_DBG(TAG, \"RDP_NEG_REQ: RequestedProtocol: 0x%08\" PRIX32 \"\", nego->RequestedProtocols);",
          "929:  nego->state = NEGO_STATE_FINAL;",
          "930: }",
          "",
          "[Removed Lines]",
          "921: void nego_process_negotiation_request(rdpNego* nego, wStream* s)",
          "",
          "[Added Lines]",
          "924: BOOL nego_process_negotiation_request(rdpNego* nego, wStream* s)",
          "929:  if (Stream_GetRemainingLength(s) < 7)",
          "930:   return FALSE;",
          "936:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "939: {",
          "940:  UINT16 length;",
          "941:  WLog_DBG(TAG, \"RDP_NEG_RSP\");",
          "",
          "[Removed Lines]",
          "938: void nego_process_negotiation_response(rdpNego* nego, wStream* s)",
          "",
          "[Added Lines]",
          "945: BOOL nego_process_negotiation_response(rdpNego* nego, wStream* s)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "944:  {",
          "945:   WLog_ERR(TAG, \"Invalid RDP_NEG_RSP\");",
          "946:   nego->state = NEGO_STATE_FAIL;",
          "948:  }",
          "950:  Stream_Read_UINT8(s, nego->flags);",
          "951:  Stream_Read_UINT16(s, length);",
          "952:  Stream_Read_UINT32(s, nego->SelectedProtocol);",
          "953:  nego->state = NEGO_STATE_FINAL;",
          "954: }",
          "",
          "[Removed Lines]",
          "947:   return;",
          "",
          "[Added Lines]",
          "954:   return FALSE;",
          "961:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "963: {",
          "964:  BYTE flags;",
          "965:  UINT16 length;",
          "966:  UINT32 failureCode;",
          "967:  WLog_DBG(TAG, \"RDP_NEG_FAILURE\");",
          "968:  Stream_Read_UINT8(s, flags);",
          "969:  Stream_Read_UINT16(s, length);",
          "970:  Stream_Read_UINT32(s, failureCode);",
          "",
          "[Removed Lines]",
          "962: void nego_process_negotiation_failure(rdpNego* nego, wStream* s)",
          "",
          "[Added Lines]",
          "970: BOOL nego_process_negotiation_failure(rdpNego* nego, wStream* s)",
          "976:  if (Stream_GetRemainingLength(s) < 7)",
          "977:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "999:  }",
          "1001:  nego->state = NEGO_STATE_FAIL;",
          "1002: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:  return TRUE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}