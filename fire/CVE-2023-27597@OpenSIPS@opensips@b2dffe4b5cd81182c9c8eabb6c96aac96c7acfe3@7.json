{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56eacbe95ff9958945b81d577bb142792aa1fea9",
      "candidate_info": {
        "commit_hash": "56eacbe95ff9958945b81d577bb142792aa1fea9",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/56eacbe95ff9958945b81d577bb142792aa1fea9",
        "files": [
          "receive.c"
        ],
        "message": "Fix possible bogus exec_msg_threshold reporting\n\nReset the exec_msg_threshold stack (longest found actions) when a parse error is detected (before running the actual scritp). Otherwise we may inherit old records from previous runs\n\n(cherry picked from commit e7ed29e50f8dc76717fe38281945aa331958db25)",
        "before_after_code_files": [
          "receive.c||receive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "receive.c||receive.c": [
          "File: receive.c -> receive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:    LM_ERR(\"no via found in request\\n\");",
          "172:    update_stat( err_reqs, 1);",
          "174:   }",
          "",
          "[Removed Lines]",
          "173:    goto parse_error;",
          "",
          "[Added Lines]",
          "175:    goto parse_error_reset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:   if (existing_context == NULL)",
          "194:   current_processing_ctx = ctx;",
          "",
          "[Removed Lines]",
          "193:    prepare_context( ctx, parse_error );",
          "",
          "[Added Lines]",
          "195:    prepare_context( ctx, parse_error_reset );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:    LM_ERR(\"no via found in reply\\n\");",
          "227:    update_stat( err_rpls, 1);",
          "229:   }",
          "",
          "[Removed Lines]",
          "228:    goto parse_error;",
          "",
          "[Added Lines]",
          "230:    goto parse_error_reset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:   if (existing_context == NULL)",
          "238:   current_processing_ctx = ctx;",
          "",
          "[Removed Lines]",
          "237:    prepare_context( ctx, parse_error );",
          "",
          "[Added Lines]",
          "239:    prepare_context( ctx, parse_error_reset );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:  if (in_buff.s != buf)",
          "295:   pkg_free(in_buff.s);",
          "296:  return 0;",
          "297: parse_error:",
          "298:  exec_parse_err_cb(msg);",
          "299:  free_sip_msg(msg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: parse_error_reset:",
          "300:  reset_longest_action_list(execmsgthreshold);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67bb6e2cf2dff01214f6f1a87374e17195963943",
      "candidate_info": {
        "commit_hash": "67bb6e2cf2dff01214f6f1a87374e17195963943",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/67bb6e2cf2dff01214f6f1a87374e17195963943",
        "files": [
          "mem/hp_malloc.c"
        ],
        "message": "HP_MALLOC: Fine-tune the \"frag split size\" constants\n\nIt seems that \"split on 4096 or larger\" is too large a value, leading to\nfragmentation issues on typical 1G - 4G SHM pools.\n\nWith this patch, HP_MALLOC will visibly use less shared memory, but will\nalso split fragments more often.\n\n(cherry picked from commit 043d4f31d084560681733358438e5cb13926f84d)",
        "before_after_code_files": [
          "mem/hp_malloc.c||mem/hp_malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mem/hp_malloc.c||mem/hp_malloc.c": [
          "File: mem/hp_malloc.c -> mem/hp_malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #define MIN_FRAG_SIZE ROUNDTO",
          "49: #define FRAG_NEXT(f) ((struct hp_frag *)(void *)((char *)((f) + 1) + (f)->size))",
          "",
          "[Removed Lines]",
          "46: #define MIN_SHM_SPLIT_SIZE 4096",
          "47: #define MIN_PKG_SPLIT_SIZE  256",
          "",
          "[Added Lines]",
          "46: #define MIN_SHM_SPLIT_SIZE  256",
          "47: #define MIN_PKG_SPLIT_SIZE  128",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69031794f90285ffae7351dae513f763a3d89ef9",
      "candidate_info": {
        "commit_hash": "69031794f90285ffae7351dae513f763a3d89ef9",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/69031794f90285ffae7351dae513f763a3d89ef9",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h",
          "modules/clusterer/sharing_tags.c",
          "modules/clusterer/sync.c"
        ],
        "message": "clusterer: fix deadlocks when syncing\n\n(cherry picked from commit 652d89fbeffc180aea68e8bdfcac799d53124e6b)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h",
          "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c",
          "modules/clusterer/sync.c||modules/clusterer/sync.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: }",
          "316: enum clusterer_send_ret clusterer_send_msg(bin_packet_t *packet,",
          "318: {",
          "319:  node_info_t *node;",
          "320:  int rc;",
          "",
          "[Removed Lines]",
          "317:  int cluster_id, int dst_node_id, int check_cap)",
          "",
          "[Added Lines]",
          "317:  int cluster_id, int dst_node_id, int check_cap, int locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:   LM_ERR(\"cluster shutdown - cannot send new messages!\\n\");",
          "327:   return CLUSTERER_CURR_DISABLED;",
          "328:  }",
          "331:  cl = get_cluster_by_id(cluster_id);",
          "332:  if (!cl) {",
          "333:   LM_ERR(\"Unknown cluster id [%d]\\n\", cluster_id);",
          "335:   return CLUSTERER_SEND_ERR;",
          "336:  }",
          "338:  lock_get(cl->current_node->lock);",
          "339:  if (!(cl->current_node->flags & NODE_STATE_ENABLED)) {",
          "340:   lock_release(cl->current_node->lock);",
          "342:   return CLUSTERER_CURR_DISABLED;",
          "343:  }",
          "344:  lock_release(cl->current_node->lock);",
          "",
          "[Removed Lines]",
          "329:  lock_start_read(cl_list_lock);",
          "334:   lock_stop_read(cl_list_lock);",
          "341:   lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "329:  if (!locked)",
          "330:   lock_start_read(cl_list_lock);",
          "335:   if (!locked)",
          "336:    lock_stop_read(cl_list_lock);",
          "343:   if (!locked)",
          "344:    lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:  node = get_node_by_id(cl, dst_node_id);",
          "347:  if (!node) {",
          "348:   LM_ERR(\"Node id [%d] not found in cluster\\n\", dst_node_id);",
          "350:   return CLUSTERER_SEND_ERR;",
          "351:  }",
          "",
          "[Removed Lines]",
          "349:   lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "352:   if (!locked)",
          "353:    lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "379:  if (ev_actions_required)",
          "380:   do_actions_node_ev(cl, &ev_actions_required, 1);",
          "384:  switch (rc) {",
          "385:  case  0:",
          "",
          "[Removed Lines]",
          "382:  lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "386:  if (!locked)",
          "387:   lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521:   return CLUSTERER_SEND_ERR;",
          "522:  }",
          "525: }",
          "527: enum clusterer_send_ret cl_send_all(bin_packet_t *packet, int cluster_id)",
          "",
          "[Removed Lines]",
          "524:  return clusterer_send_msg(packet, cluster_id, node_id, 1);",
          "",
          "[Added Lines]",
          "529:  return clusterer_send_msg(packet, cluster_id, node_id, 1, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "557:   return CLUSTERER_SEND_ERR;",
          "558:  }",
          "562:  bin_free_packet(&packet);",
          "",
          "[Removed Lines]",
          "560:  rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0);",
          "",
          "[Added Lines]",
          "565:  rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "612:  }",
          "614:  if (dst_id)",
          "616:  else",
          "617:   rc = clusterer_bcast_msg(&packet, cluster_id, NODE_CMP_ANY, 0);",
          "",
          "[Removed Lines]",
          "615:   rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0);",
          "",
          "[Added Lines]",
          "620:   rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0, 0);",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h": [
          "File: modules/clusterer/clusterer.h -> modules/clusterer/clusterer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: int msg_add_trailer(bin_packet_t *packet, int cluster_id, int dst_id);",
          "157: enum clusterer_send_ret clusterer_send_msg(bin_packet_t *packet,",
          "159: int send_single_cap_update(struct cluster_info *cluster, struct local_cap *cap,",
          "160:        int cap_state);",
          "161: int send_cap_update(struct node_info *dest_node, int require_reply);",
          "",
          "[Removed Lines]",
          "158:  int cluster_id, int dst_id, int check_cap);",
          "",
          "[Added Lines]",
          "158:  int cluster_id, int dst_id, int check_cap, int locked);",
          "",
          "---------------"
        ],
        "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c": [
          "File: modules/clusterer/sharing_tags.c -> modules/clusterer/sharing_tags.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   return CLUSTERER_SEND_ERR;",
          "555:  msg_add_trailer(&packet, c_id, node_id);",
          "557:   CLUSTERER_SEND_SUCCESS) {",
          "558:   bin_free_packet(&packet);",
          "559:   return CLUSTERER_SEND_ERR;",
          "",
          "[Removed Lines]",
          "556:  if (clusterer_send_msg(&packet, c_id, node_id, 0) !=",
          "",
          "[Added Lines]",
          "556:  if (clusterer_send_msg(&packet, c_id, node_id, 0, 1) !=",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.c||modules/clusterer/sync.c": [
          "File: modules/clusterer/sync.c -> modules/clusterer/sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  bin_push_str(&packet, capability);",
          "47:  msg_add_trailer(&packet, cluster_id, source_id);",
          "50:  if (rc == CLUSTERER_SEND_SUCCESS)",
          "51:   LM_INFO(\"Sent sync request for capability '%.*s' to node %d, \"",
          "52:           \"cluster %d\\n\", capability->len, capability->s, source_id,",
          "",
          "[Removed Lines]",
          "49:  rc = clusterer_send_msg(&packet, cluster_id, source_id, 0);",
          "",
          "[Added Lines]",
          "49:  rc = clusterer_send_msg(&packet, cluster_id, source_id, 0, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:    msg_add_trailer(sync_packet_snd, cluster_id, dst_id);",
          "195:     LM_ERR(\"Failed to send sync packet\\n\");",
          "197:    bin_free_packet(sync_packet_snd);",
          "",
          "[Removed Lines]",
          "194:    if (clusterer_send_msg(sync_packet_snd, cluster_id, dst_id, 0) < 0)",
          "",
          "[Added Lines]",
          "194:    if (clusterer_send_msg(sync_packet_snd, cluster_id, dst_id, 0,",
          "195:     1 /* we should be in a SYNC_REQ_RCV callback here so",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:   msg_add_trailer(sync_packet_snd, p->cluster->cluster_id, p->node_id);",
          "316:   if ((rc = clusterer_send_msg(sync_packet_snd, p->cluster->cluster_id,",
          "318:    LM_ERR(\"Failed to send sync packet, rc=%d\\n\", rc);",
          "320:   bin_free_packet(sync_packet_snd);",
          "",
          "[Removed Lines]",
          "317:    p->node_id, 0))<0)",
          "",
          "[Added Lines]",
          "319:    p->node_id, 0, 1))<0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:  msg_add_trailer(&sync_end_pkt, p->cluster->cluster_id, p->node_id);",
          "335:  if (clusterer_send_msg(&sync_end_pkt, p->cluster->cluster_id, p->node_id,",
          "337:   LM_ERR(\"Failed to send sync end message\\n\");",
          "338:   bin_free_packet(&sync_end_pkt);",
          "339:   lock_stop_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "336:   0) < 0) {",
          "",
          "[Added Lines]",
          "338:   0, 1) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
      "candidate_info": {
        "commit_hash": "6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
        "files": [
          "net/net_udp.c"
        ],
        "message": "Merge pull request #2790 from Transatel/FIX_TOS_IPV6\n\nAdd TOS in IPV6\n\n(cherry picked from commit f461e38d3c8fd65a479c5a363520410aaed49ea1)",
        "before_after_code_files": [
          "net/net_udp.c||net/net_udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/net_udp.c||net/net_udp.c": [
          "File: net/net_udp.c -> net/net_udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  }",
          "183:  optval=tos;",
          "188:  }",
          "189: #if defined (__linux__) && defined(UDP_ERRORS)",
          "190:  optval=1;",
          "",
          "[Removed Lines]",
          "184:  if (setsockopt(si->socket, IPPROTO_IP, IP_TOS, (void*)&optval,",
          "185:    sizeof(optval)) ==-1){",
          "186:   LM_WARN(\"setsockopt tos: %s\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "184:  if (addr->s.sa_family==AF_INET6){",
          "185:   if (setsockopt(si->socket,  IPPROTO_IPV6, IPV6_TCLASS, (void*)&optval, sizeof(optval)) ==-1){",
          "186:    LM_WARN(\"setsockopt tos for IPV6: %s\\n\", strerror(errno));",
          "188:   }",
          "189:  } else {",
          "190:   if (setsockopt(si->socket, IPPROTO_IP, IP_TOS, (void*)&optval, sizeof(optval)) ==-1){",
          "191:    LM_WARN(\"setsockopt tos: %s\\n\", strerror(errno));",
          "193:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d03f17c4dffff5f8b9d114b036ff4d6dc0ad83ba",
      "candidate_info": {
        "commit_hash": "d03f17c4dffff5f8b9d114b036ff4d6dc0ad83ba",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/d03f17c4dffff5f8b9d114b036ff4d6dc0ad83ba",
        "files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c"
        ],
        "message": "cachedb_redis: Use argv API instead of fmt-string API for raw queries\n\nThis change allows \"%\" to be safely used in raw queries (e.g. maybe some\nRedis key contains a random \"%\" char), while also making the raw query\noperation a lot more safe and/or unexploitable from the outside.\n\nMany thanks to David Escartin (Sonoc) for a detailed bug report!",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:  return 0;",
          "745: }",
          "748: {",
          "749:  redis_con *con;",
          "750:  cluster_node *node;",
          "755:  con = (redis_con *)connection->data;",
          "",
          "[Removed Lines]",
          "747: int redis_raw_query_send(cachedb_con *connection,redisReply **reply,cdb_raw_entry ***rpl,int expected_kv_no,int *reply_no,str *attr, ...)",
          "751:  int i,end;",
          "752:  va_list ap;",
          "753:  str query_key;",
          "",
          "[Added Lines]",
          "747: #define MAP_SET_MAX_FIELDS 128",
          "748: static int redis_raw_query_send(cachedb_con *connection, redisReply **reply,",
          "749:   cdb_raw_entry ***_, int __, int *___, str *attr)",
          "751:  int i, argc = 0;",
          "752:  const char *argv[MAP_SET_MAX_FIELDS];",
          "753:  size_t argvlen[MAP_SET_MAX_FIELDS];",
          "756:  str key, st, arg;",
          "757:  char *p;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "759:   return -9;",
          "760:  }",
          "764:   return -1;",
          "765:  }",
          "768:  if (node == NULL) {",
          "769:   LM_ERR(\"Bad cluster configuration\\n\");",
          "770:   return -10;",
          "",
          "[Removed Lines]",
          "762:  if (redis_raw_query_extract_key(attr,&query_key) < 0) {",
          "763:   LM_ERR(\"Failed to extra Redis raw query key \\n\");",
          "767:  node = get_redis_connection(con,&query_key);",
          "",
          "[Added Lines]",
          "766:  st = *attr;",
          "767:  trim(&st);",
          "768:  while (st.len > 0 && (p = q_memchr(st.s, ' ', st.len))) {",
          "769:   if (argc == MAP_SET_MAX_FIELDS) {",
          "770:    LM_ERR(\"max raw query args exceeded (%d)\\n\", MAP_SET_MAX_FIELDS);",
          "771:    return -1;",
          "772:   }",
          "774:   arg.s = st.s;",
          "775:   arg.len = p - st.s;",
          "776:   trim(&arg);",
          "778:   argv[argc] = arg.s;",
          "779:   argvlen[argc++] = arg.len;",
          "781:   st.len -= p - st.s + 1;",
          "782:   st.s = p + 1;",
          "783:   trim(&st);",
          "784:  }",
          "786:  if (st.len > 0) {",
          "787:   argv[argc] = st.s;",
          "788:   argvlen[argc++] = st.len;",
          "789:  }",
          "791:  if (argc < 2) {",
          "792:   LM_ERR(\"malformed Redis RAW query: '%.*s' (%d)\\n\",",
          "793:          attr->len, attr->s, attr->len);",
          "799:  key.s = (char *)argv[1];",
          "800:  key.len = argvlen[1];",
          "802: #ifdef EXTRA_DEBUG",
          "803:  LM_DBG(\"raw query key: %.*s\\n\", key.len, key.s);",
          "804:  for (i = 0; i < argc; i++)",
          "805:   LM_DBG(\"raw query arg %d: '%.*s' (%d)\\n\", i, (int)argvlen[i], argv[i],",
          "806:          (int)argvlen[i]);",
          "807: #endif",
          "809:  node = get_redis_connection(con, &key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "776:   }",
          "777:  }",
          "783:  for (i = QUERY_ATTEMPTS; i; i--) {",
          "785:   if (*reply == NULL || (*reply)->type == REDIS_REPLY_ERROR) {",
          "786:    LM_INFO(\"Redis query failed: %.*s\\n\",",
          "",
          "[Removed Lines]",
          "779:  va_start(ap,attr);",
          "780:  end = attr->s[attr->len];",
          "781:  attr->s[attr->len] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "793:   } else break;",
          "794:  }",
          "799:  if (i==0) {",
          "800:   LM_ERR(\"giving up on query\\n\");",
          "801:   return -1;",
          "",
          "[Removed Lines]",
          "796:  va_end(ap);",
          "797:  attr->s[attr->len]=end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}