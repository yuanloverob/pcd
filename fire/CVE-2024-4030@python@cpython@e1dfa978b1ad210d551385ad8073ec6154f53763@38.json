{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5539bd9df2b8301c9ec5fd1e1de0cb065a591c16",
      "candidate_info": {
        "commit_hash": "5539bd9df2b8301c9ec5fd1e1de0cb065a591c16",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/5539bd9df2b8301c9ec5fd1e1de0cb065a591c16",
        "files": [
          "Misc/NEWS.d/next/Library/2023-04-24-05-34-23.gh-issue-103194.GwBwWL.rst",
          "Modules/_tkinter.c"
        ],
        "message": "[3.13] gh-103194: Fix Tkinter\u2019s Tcl value type handling for Tcl 8.7/9.0 (GH-103846) (GH-119830)\n\nSome of standard Tcl types were renamed, removed, or no longer\nregistered in Tcl 8.7/9.0. This change fixes automatic conversion of Tcl\nvalues to Python values to avoid returning a Tcl_Obj where the primary\nPython types (int, bool, str, bytes) were returned in older Tcl.\n(cherry picked from commit 94e9585e99abc2d060cedc77b3c03e06b4a0a9c4)\n\nCo-authored-by: Christopher Chavez <chrischavez@gmx.us>",
        "before_after_code_files": [
          "Modules/_tkinter.c||Modules/_tkinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_tkinter.c||Modules/_tkinter.c": [
          "File: Modules/_tkinter.c -> Modules/_tkinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:     const Tcl_ObjType *BignumType;",
          "319:     const Tcl_ObjType *ListType;",
          "320:     const Tcl_ObjType *StringType;",
          "321: } TkappObject;",
          "323: #define Tkapp_Interp(v) (((TkappObject *) (v))->interp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     const Tcl_ObjType *UTF32StringType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:     }",
          "590:     v->OldBooleanType = Tcl_GetObjType(\"boolean\");",
          "593:     v->DoubleType = Tcl_GetObjType(\"double\");",
          "594:     v->IntType = Tcl_GetObjType(\"int\");",
          "595:     v->WideIntType = Tcl_GetObjType(\"wideInt\");",
          "596:     v->BignumType = Tcl_GetObjType(\"bignum\");",
          "597:     v->ListType = Tcl_GetObjType(\"list\");",
          "598:     v->StringType = Tcl_GetObjType(\"string\");",
          "601:     Tcl_DeleteCommand(v->interp, \"exit\");",
          "",
          "[Removed Lines]",
          "591:     v->BooleanType = Tcl_GetObjType(\"booleanString\");",
          "592:     v->ByteArrayType = Tcl_GetObjType(\"bytearray\");",
          "",
          "[Added Lines]",
          "592:     {",
          "593:         Tcl_Obj *value;",
          "594:         int boolValue;",
          "597:            and is renamed to \"boolean\" in Tcl 9.0.",
          "598:            Based on approach suggested at",
          "600:         value = Tcl_NewStringObj(\"true\", -1);",
          "601:         Tcl_GetBooleanFromObj(NULL, value, &boolValue);",
          "602:         v->BooleanType = value->typePtr;",
          "603:         Tcl_DecrRefCount(value);",
          "606:         value = Tcl_NewByteArrayObj(NULL, 0);",
          "607:         v->ByteArrayType = value->typePtr;",
          "608:         Tcl_DecrRefCount(value);",
          "609:     }",
          "612:        since it is no longer registered in Tcl 9.0. But even though Tcl 8.7",
          "613:        only uses the \"wideInt\" type on platforms with 32-bit long, it still has",
          "616:     if (v->IntType == NULL) {",
          "617:         Tcl_Obj *value = Tcl_NewIntObj(0);",
          "618:         v->IntType = value->typePtr;",
          "619:         Tcl_DecrRefCount(value);",
          "620:     }",
          "625:     v->UTF32StringType = Tcl_GetObjType(\"utf32string\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124:         return PyFloat_FromDouble(value->internalRep.doubleValue);",
          "1125:     }",
          "1135:     if (value->typePtr == tkapp->IntType ||",
          "1136:         value->typePtr == tkapp->WideIntType) {",
          "1137:         result = fromWideIntObj(tkapp, value);",
          "",
          "[Removed Lines]",
          "1127:     if (value->typePtr == tkapp->IntType) {",
          "1128:         long longValue;",
          "1129:         if (Tcl_GetLongFromObj(interp, value, &longValue) == TCL_OK)",
          "1130:             return PyLong_FromLong(longValue);",
          "1133:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1176:         return result;",
          "1177:     }",
          "1180:         return unicodeFromTclObj(value);",
          "1181:     }",
          "1190:     if (tkapp->BignumType == NULL &&",
          "1191:         strcmp(value->typePtr->name, \"bignum\") == 0) {",
          "",
          "[Removed Lines]",
          "1179:     if (value->typePtr == tkapp->StringType) {",
          "1183:     if (tkapp->BooleanType == NULL &&",
          "1184:         strcmp(value->typePtr->name, \"booleanString\") == 0) {",
          "1186:         tkapp->BooleanType = value->typePtr;",
          "1187:         return fromBoolean(tkapp, value);",
          "1188:     }",
          "",
          "[Added Lines]",
          "1198:     if (value->typePtr == tkapp->StringType ||",
          "1199:         value->typePtr == tkapp->UTF32StringType)",
          "1200:     {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc663b7e25539d938bf71bc1b4d69efd8824c2d3",
      "candidate_info": {
        "commit_hash": "cc663b7e25539d938bf71bc1b4d69efd8824c2d3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cc663b7e25539d938bf71bc1b4d69efd8824c2d3",
        "files": [
          "Include/cpython/longobject.h",
          "Include/internal/pycore_long.h",
          "Misc/NEWS.d/next/C API/2024-05-22-17-50-48.gh-issue-119336.ff3qnS.rst"
        ],
        "message": "[3.13] gh-119336: Restore removed _PyLong_NumBits() function (GH-119418) (#119970)\n\ngh-119336: Restore removed _PyLong_NumBits() function (GH-119418)\n\nIt is used by the pywin32 project.\n(cherry picked from commit e50fac96e82d857ecc024b4cd4e012493b077064)\n\nCo-authored-by: Ethan Smith <ethan@ethanhs.me>",
        "before_after_code_files": [
          "Include/cpython/longobject.h||Include/cpython/longobject.h",
          "Include/internal/pycore_long.h||Include/internal/pycore_long.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/longobject.h||Include/cpython/longobject.h": [
          "File: Include/cpython/longobject.h -> Include/cpython/longobject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: PyAPI_FUNC(int) _PyLong_Sign(PyObject *v);",
          "64:    base 256, and return a Python int with the same numeric value.",
          "65:    If n is 0, the integer is 0.  Else:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:    absolute value of a long.  For example, this returns 1 for 1 and -1, 2",
          "65:    for 2 and -2, and 2 for 3 and -3.  It returns 0 for 0.",
          "66:    v must not be NULL, and must be a normalized long.",
          "67:    (size_t)-1 is returned and OverflowError set if the true result doesn't",
          "68:    fit in a size_t.",
          "70: PyAPI_FUNC(size_t) _PyLong_NumBits(PyObject *v);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_long.h||Include/internal/pycore_long.h": [
          "File: Include/internal/pycore_long.h -> Include/internal/pycore_long.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: # error \"_PY_LONG_DEFAULT_MAX_STR_DIGITS smaller than threshold.\"",
          "48: #endif",
          "63: extern PyStatus _PyLong_InitTypes(PyInterpreterState *);",
          "",
          "[Removed Lines]",
          "58: PyAPI_FUNC(size_t) _PyLong_NumBits(PyObject *v);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "256b791fd6bf894e788231431ae54ea877898dce",
      "candidate_info": {
        "commit_hash": "256b791fd6bf894e788231431ae54ea877898dce",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/256b791fd6bf894e788231431ae54ea877898dce",
        "files": [
          "Doc/library/socket.rst",
          "Lib/socket.py"
        ],
        "message": "[3.13] gh-110383: Document `socket.makefile()` accepts combined modes (GH-119150) (#119324)\n\nThe supported mode values are 'r', 'w', and 'b', or a combination of those.\n(cherry picked from commit 62a29be5bb01c2d0f72d8f9b1b5539816e65310c)\n\nCo-authored-by: Daniel Williams <dann0a@gmail.com>",
        "before_after_code_files": [
          "Lib/socket.py||Lib/socket.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/socket.py||Lib/socket.py": [
          "File: Lib/socket.py -> Lib/socket.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:         \"\"\"makefile(...) -> an I/O stream connected to the socket",
          "308:         The arguments are as for io.open() after the filename, except the only",
          "310:         \"\"\"",
          "311:         # XXX refactor to share code?",
          "312:         if not set(mode) <= {\"r\", \"w\", \"b\"}:",
          "",
          "[Removed Lines]",
          "309:         supported mode values are 'r' (default), 'w' and 'b'.",
          "",
          "[Added Lines]",
          "309:         supported mode values are 'r' (default), 'w', 'b', or a combination of",
          "310:         those.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0559849ac2de604ffa410268be262a8482ad23c",
      "candidate_info": {
        "commit_hash": "a0559849ac2de604ffa410268be262a8482ad23c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a0559849ac2de604ffa410268be262a8482ad23c",
        "files": [
          "Include/internal/pycore_opcode_metadata.h",
          "Include/internal/pycore_uop_metadata.h",
          "Lib/test/test_type_aliases.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-30-23-01-00.gh-issue-119821.jPGfvt.rst",
          "Python/bytecodes.c",
          "Python/executor_cases.c.h",
          "Python/generated_cases.c.h",
          "Python/optimizer_cases.c.h"
        ],
        "message": "[3.13] gh-119821: Support non-dict globals in LOAD_FROM_DICT_OR_GLOBALS (#119822) (#119889)\n\ndSupport non-dict globals in LOAD_FROM_DICT_OR_GLOBALS\n\nThe implementation basically copies LOAD_GLOBAL. Possibly it could be deduplicated,\nbut that seems like it may get hairy since the two operations have different operands.\n\nThis is important to fix in 3.14 for PEP 649, but it's a bug in earlier versions too,\nand we should backport to 3.13 and 3.12 if possible.\n\n(cherry picked from commit 80a4e3899420faaa012c82b4e82cdb6675a6a944)",
        "before_after_code_files": [
          "Include/internal/pycore_opcode_metadata.h||Include/internal/pycore_opcode_metadata.h",
          "Include/internal/pycore_uop_metadata.h||Include/internal/pycore_uop_metadata.h",
          "Lib/test/test_type_aliases.py||Lib/test/test_type_aliases.py",
          "Python/bytecodes.c||Python/bytecodes.c",
          "Python/executor_cases.c.h||Python/executor_cases.c.h",
          "Python/generated_cases.c.h||Python/generated_cases.c.h",
          "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_opcode_metadata.h||Include/internal/pycore_opcode_metadata.h": [
          "File: Include/internal/pycore_opcode_metadata.h -> Include/internal/pycore_opcode_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:     [LOAD_FAST_CHECK] = { .nuops = 1, .uops = { { _LOAD_FAST_CHECK, 0, 0 } } },",
          "1300:     [LOAD_FAST_LOAD_FAST] = { .nuops = 2, .uops = { { _LOAD_FAST, 5, 0 }, { _LOAD_FAST, 6, 0 } } },",
          "1301:     [LOAD_FROM_DICT_OR_DEREF] = { .nuops = 1, .uops = { { _LOAD_FROM_DICT_OR_DEREF, 0, 0 } } },",
          "1303:     [LOAD_GLOBAL] = { .nuops = 1, .uops = { { _LOAD_GLOBAL, 0, 0 } } },",
          "1304:     [LOAD_GLOBAL_BUILTIN] = { .nuops = 3, .uops = { { _GUARD_GLOBALS_VERSION, 1, 1 }, { _GUARD_BUILTINS_VERSION, 1, 2 }, { _LOAD_GLOBAL_BUILTINS, 1, 3 } } },",
          "1305:     [LOAD_GLOBAL_MODULE] = { .nuops = 2, .uops = { { _GUARD_GLOBALS_VERSION, 1, 1 }, { _LOAD_GLOBAL_MODULE, 1, 3 } } },",
          "",
          "[Removed Lines]",
          "1302:     [LOAD_FROM_DICT_OR_GLOBALS] = { .nuops = 1, .uops = { { _LOAD_FROM_DICT_OR_GLOBALS, 0, 0 } } },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/internal/pycore_uop_metadata.h||Include/internal/pycore_uop_metadata.h": [
          "File: Include/internal/pycore_uop_metadata.h -> Include/internal/pycore_uop_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     [_STORE_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,",
          "108:     [_DELETE_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG | HAS_ESCAPES_FLAG,",
          "109:     [_LOAD_LOCALS] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,",
          "111:     [_LOAD_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,",
          "112:     [_GUARD_GLOBALS_VERSION] = HAS_DEOPT_FLAG,",
          "113:     [_GUARD_BUILTINS_VERSION] = HAS_DEOPT_FLAG,",
          "",
          "[Removed Lines]",
          "110:     [_LOAD_FROM_DICT_OR_GLOBALS] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ERROR_NO_POP_FLAG | HAS_ESCAPES_FLAG,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:     [_LOAD_FAST_CHECK] = \"_LOAD_FAST_CHECK\",",
          "439:     [_LOAD_FAST_LOAD_FAST] = \"_LOAD_FAST_LOAD_FAST\",",
          "440:     [_LOAD_FROM_DICT_OR_DEREF] = \"_LOAD_FROM_DICT_OR_DEREF\",",
          "442:     [_LOAD_GLOBAL] = \"_LOAD_GLOBAL\",",
          "443:     [_LOAD_GLOBAL_BUILTINS] = \"_LOAD_GLOBAL_BUILTINS\",",
          "444:     [_LOAD_GLOBAL_MODULE] = \"_LOAD_GLOBAL_MODULE\",",
          "",
          "[Removed Lines]",
          "441:     [_LOAD_FROM_DICT_OR_GLOBALS] = \"_LOAD_FROM_DICT_OR_GLOBALS\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "690:             return 0;",
          "691:         case _LOAD_LOCALS:",
          "692:             return 0;",
          "695:         case _LOAD_GLOBAL:",
          "696:             return 0;",
          "697:         case _GUARD_GLOBALS_VERSION:",
          "",
          "[Removed Lines]",
          "693:         case _LOAD_FROM_DICT_OR_GLOBALS:",
          "694:             return 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/test/test_type_aliases.py||Lib/test/test_type_aliases.py": [
          "File: Lib/test/test_type_aliases.py -> Lib/test/test_type_aliases.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pickle",
          "2: import types",
          "3: import unittest",
          "4: from test.support import check_syntax_error, run_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import textwrap",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:                 with self.subTest(thing=thing, proto=proto):",
          "329:                     with self.assertRaises(pickle.PickleError):",
          "330:                         pickle.dumps(thing, protocol=proto)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: class TypeParamsExoticGlobalsTest(unittest.TestCase):",
          "335:     def test_exec_with_unusual_globals(self):",
          "336:         class customdict(dict):",
          "337:             def __missing__(self, key):",
          "338:                 return key",
          "340:         code = compile(\"type Alias = undefined\", \"test\", \"exec\")",
          "341:         ns = customdict()",
          "342:         exec(code, ns)",
          "343:         Alias = ns[\"Alias\"]",
          "344:         self.assertEqual(Alias.__value__, \"undefined\")",
          "346:         code = compile(\"class A: type Alias = undefined\", \"test\", \"exec\")",
          "347:         ns = customdict()",
          "348:         exec(code, ns)",
          "349:         Alias = ns[\"A\"].Alias",
          "350:         self.assertEqual(Alias.__value__, \"undefined\")",
          "",
          "---------------"
        ],
        "Python/bytecodes.c||Python/bytecodes.c": [
          "File: Python/bytecodes.c -> Python/bytecodes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1375:                 ERROR_NO_POP();",
          "1376:             }",
          "1377:             if (v == NULL) {",
          "1383:                         ERROR_NO_POP();",
          "1384:                     }",
          "1385:                     if (v == NULL) {",
          "1390:                     }",
          "1391:                 }",
          "1392:             }",
          "",
          "[Removed Lines]",
          "1378:                 if (PyDict_GetItemRef(GLOBALS(), name, &v) < 0) {",
          "1379:                     ERROR_NO_POP();",
          "1380:                 }",
          "1381:                 if (v == NULL) {",
          "1382:                     if (PyMapping_GetOptionalItem(BUILTINS(), name, &v) < 0) {",
          "1386:                         _PyEval_FormatExcCheckArg(",
          "1387:                                     tstate, PyExc_NameError,",
          "1388:                                     NAME_ERROR_MSG, name);",
          "1389:                         ERROR_NO_POP();",
          "",
          "[Added Lines]",
          "1378:                 if (PyDict_CheckExact(GLOBALS())",
          "1379:                     && PyDict_CheckExact(BUILTINS()))",
          "1380:                 {",
          "1381:                     v = _PyDict_LoadGlobal((PyDictObject *)GLOBALS(),",
          "1382:                                             (PyDictObject *)BUILTINS(),",
          "1383:                                             name);",
          "1384:                     if (v == NULL) {",
          "1385:                         if (!_PyErr_Occurred(tstate)) {",
          "1388:                             _PyEval_FormatExcCheckArg(tstate, PyExc_NameError,",
          "1389:                                                     NAME_ERROR_MSG, name);",
          "1390:                         }",
          "1393:                 }",
          "1394:                 else {",
          "1397:                     ERROR_IF(PyMapping_GetOptionalItem(GLOBALS(), name, &v) < 0, error);",
          "1400:                         ERROR_IF(PyMapping_GetOptionalItem(BUILTINS(), name, &v) < 0, error);",
          "1401:                         if (v == NULL) {",
          "1402:                             _PyEval_FormatExcCheckArg(",
          "1403:                                         tstate, PyExc_NameError,",
          "1404:                                         NAME_ERROR_MSG, name);",
          "1405:                             ERROR_IF(true, error);",
          "1406:                         }",
          "",
          "---------------"
        ],
        "Python/executor_cases.c.h||Python/executor_cases.c.h": [
          "File: Python/executor_cases.c.h -> Python/executor_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394:             break;",
          "1395:         }",
          "",
          "[Removed Lines]",
          "1397:         case _LOAD_FROM_DICT_OR_GLOBALS: {",
          "1398:             PyObject *mod_or_class_dict;",
          "1399:             PyObject *v;",
          "1400:             oparg = CURRENT_OPARG();",
          "1401:             mod_or_class_dict = stack_pointer[-1];",
          "1402:             PyObject *name = GETITEM(FRAME_CO_NAMES, oparg);",
          "1403:             if (PyMapping_GetOptionalItem(mod_or_class_dict, name, &v) < 0) {",
          "1404:                 JUMP_TO_ERROR();",
          "1405:             }",
          "1406:             if (v == NULL) {",
          "1407:                 if (PyDict_GetItemRef(GLOBALS(), name, &v) < 0) {",
          "1408:                     JUMP_TO_ERROR();",
          "1409:                 }",
          "1410:                 if (v == NULL) {",
          "1411:                     if (PyMapping_GetOptionalItem(BUILTINS(), name, &v) < 0) {",
          "1412:                         JUMP_TO_ERROR();",
          "1413:                     }",
          "1414:                     if (v == NULL) {",
          "1415:                         _PyEval_FormatExcCheckArg(",
          "1416:                             tstate, PyExc_NameError,",
          "1417:                             NAME_ERROR_MSG, name);",
          "1418:                         JUMP_TO_ERROR();",
          "1419:                     }",
          "1420:                 }",
          "1421:             }",
          "1422:             Py_DECREF(mod_or_class_dict);",
          "1423:             stack_pointer[-1] = v;",
          "1424:             break;",
          "1425:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/generated_cases.c.h||Python/generated_cases.c.h": [
          "File: Python/generated_cases.c.h -> Python/generated_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4381:                 goto error;",
          "4382:             }",
          "4383:             if (v == NULL) {",
          "4389:                         goto error;",
          "4390:                     }",
          "4391:                     if (v == NULL) {",
          "4396:                     }",
          "4397:                 }",
          "4398:             }",
          "",
          "[Removed Lines]",
          "4384:                 if (PyDict_GetItemRef(GLOBALS(), name, &v) < 0) {",
          "4385:                     goto error;",
          "4386:                 }",
          "4387:                 if (v == NULL) {",
          "4388:                     if (PyMapping_GetOptionalItem(BUILTINS(), name, &v) < 0) {",
          "4392:                         _PyEval_FormatExcCheckArg(",
          "4393:                             tstate, PyExc_NameError,",
          "4394:                             NAME_ERROR_MSG, name);",
          "4395:                         goto error;",
          "",
          "[Added Lines]",
          "4384:                 if (PyDict_CheckExact(GLOBALS())",
          "4385:                     && PyDict_CheckExact(BUILTINS()))",
          "4386:                 {",
          "4387:                     v = _PyDict_LoadGlobal((PyDictObject *)GLOBALS(),",
          "4388:                         (PyDictObject *)BUILTINS(),",
          "4389:                         name);",
          "4390:                     if (v == NULL) {",
          "4391:                         if (!_PyErr_Occurred(tstate)) {",
          "4394:                             _PyEval_FormatExcCheckArg(tstate, PyExc_NameError,",
          "4395:                                 NAME_ERROR_MSG, name);",
          "4396:                         }",
          "4399:                 }",
          "4400:                 else {",
          "4403:                     if (PyMapping_GetOptionalItem(GLOBALS(), name, &v) < 0) goto pop_1_error;",
          "4406:                         if (PyMapping_GetOptionalItem(BUILTINS(), name, &v) < 0) goto pop_1_error;",
          "4407:                         if (v == NULL) {",
          "4408:                             _PyEval_FormatExcCheckArg(",
          "4409:                                 tstate, PyExc_NameError,",
          "4410:                                 NAME_ERROR_MSG, name);",
          "4411:                             if (true) goto pop_1_error;",
          "4412:                         }",
          "",
          "---------------"
        ],
        "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h": [
          "File: Python/optimizer_cases.c.h -> Python/optimizer_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:             break;",
          "816:         }",
          "",
          "[Removed Lines]",
          "818:         case _LOAD_FROM_DICT_OR_GLOBALS: {",
          "819:             _Py_UopsSymbol *v;",
          "820:             v = sym_new_not_null(ctx);",
          "821:             if (v == NULL) goto out_of_space;",
          "822:             stack_pointer[-1] = v;",
          "823:             break;",
          "824:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51724620e868512bbedb1547aca441bcd27bbe0c",
      "candidate_info": {
        "commit_hash": "51724620e868512bbedb1547aca441bcd27bbe0c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/51724620e868512bbedb1547aca441bcd27bbe0c",
        "files": [
          "Lib/_pyrepl/historical_reader.py",
          "Lib/_pyrepl/pager.py",
          "Lib/_pyrepl/unix_console.py",
          "Lib/_pyrepl/windows_console.py",
          "Lib/dataclasses.py",
          "Lib/dbm/sqlite3.py",
          "Lib/idlelib/grep.py",
          "Lib/importlib/abc.py",
          "Lib/ntpath.py",
          "Lib/pydoc.py",
          "Lib/stat.py"
        ],
        "message": "[3.13] gh-120417: Remove unused imports in the stdlib (GH-120420) (#120429)\n\ngh-120417: Remove unused imports in the stdlib (GH-120420)\n(cherry picked from commit 4c6d4f5cb33e48519922d635894eef356faddba2)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/_pyrepl/historical_reader.py||Lib/_pyrepl/historical_reader.py",
          "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py",
          "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py",
          "Lib/_pyrepl/windows_console.py||Lib/_pyrepl/windows_console.py",
          "Lib/dataclasses.py||Lib/dataclasses.py",
          "Lib/dbm/sqlite3.py||Lib/dbm/sqlite3.py",
          "Lib/idlelib/grep.py||Lib/idlelib/grep.py",
          "Lib/importlib/abc.py||Lib/importlib/abc.py",
          "Lib/ntpath.py||Lib/ntpath.py",
          "Lib/pydoc.py||Lib/pydoc.py",
          "Lib/stat.py||Lib/stat.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/historical_reader.py||Lib/_pyrepl/historical_reader.py": [
          "File: Lib/_pyrepl/historical_reader.py -> Lib/_pyrepl/historical_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: if False:",
          "33: isearch_keymap: tuple[tuple[KeySpec, CommandName], ...] = tuple(",
          "",
          "[Removed Lines]",
          "30:     from .types import Callback, SimpleContextManager, KeySpec, CommandName",
          "",
          "[Added Lines]",
          "30:     from .types import SimpleContextManager, KeySpec, CommandName",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py": [
          "File: Lib/_pyrepl/pager.py -> Lib/_pyrepl/pager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: # types",
          "10: if False:",
          "12:     class Pager(Protocol):",
          "13:         def __call__(self, text: str, title: str = \"\") -> None:",
          "14:             ...",
          "",
          "[Removed Lines]",
          "11:     from typing import Protocol, Any",
          "",
          "[Added Lines]",
          "11:     from typing import Protocol",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py": [
          "File: Lib/_pyrepl/unix_console.py -> Lib/_pyrepl/unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import select",
          "28: import signal",
          "29: import struct",
          "31: import termios",
          "32: import time",
          "33: from fcntl import ioctl",
          "",
          "[Removed Lines]",
          "30: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/windows_console.py||Lib/_pyrepl/windows_console.py": [
          "File: Lib/_pyrepl/windows_console.py -> Lib/_pyrepl/windows_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from __future__ import annotations",
          "22: import io",
          "24: import os",
          "25: import sys",
          "26: import time",
          "27: import msvcrt",
          "30: from collections import deque",
          "32: import ctypes",
          "33: from ctypes.wintypes import (",
          "34:     _COORD,",
          "",
          "[Removed Lines]",
          "23: from multiprocessing import Value",
          "29: from abc import ABC, abstractmethod",
          "31: from dataclasses import dataclass, field",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/dataclasses.py||Lib/dataclasses.py": [
          "File: Lib/dataclasses.py -> Lib/dataclasses.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import itertools",
          "8: import abc",
          "9: from reprlib import recursive_repr",
          "13: __all__ = ['dataclass',",
          "",
          "[Removed Lines]",
          "10: from types import FunctionType, GenericAlias",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:             # it.",
          "334:             func(self.default, owner, name)",
          "339: class _DataclassParams:",
          "",
          "[Removed Lines]",
          "336:     __class_getitem__ = classmethod(GenericAlias)",
          "",
          "[Added Lines]",
          "335:     __class_getitem__ = classmethod(types.GenericAlias)",
          "",
          "---------------"
        ],
        "Lib/dbm/sqlite3.py||Lib/dbm/sqlite3.py": [
          "File: Lib/dbm/sqlite3.py -> Lib/dbm/sqlite3.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: import sqlite3",
          "4: from pathlib import Path",
          "5: from contextlib import suppress, closing",
          "6: from collections.abc import MutableMapping",
          "",
          "[Removed Lines]",
          "3: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/idlelib/grep.py||Lib/idlelib/grep.py": [
          "File: Lib/idlelib/grep.py -> Lib/idlelib/grep.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: def _grep_dialog(parent):  # htest #",
          "194:     from tkinter.ttk import Frame, Button",
          "195:     from idlelib.pyshell import PyShellFileList",
          "",
          "[Removed Lines]",
          "193:     from tkinter import Toplevel, Text, SEL, END",
          "",
          "[Added Lines]",
          "193:     from tkinter import Toplevel, Text, SEL",
          "",
          "---------------"
        ],
        "Lib/importlib/abc.py||Lib/importlib/abc.py": [
          "File: Lib/importlib/abc.py -> Lib/importlib/abc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     _frozen_importlib_external = _bootstrap_external",
          "14: from ._abc import Loader",
          "15: import abc",
          "18: from .resources import abc as _resources_abc",
          "",
          "[Removed Lines]",
          "16: import warnings",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/ntpath.py||Lib/ntpath.py": [
          "File: Lib/ntpath.py -> Lib/ntpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import os",
          "21: import sys",
          "23: import genericpath",
          "24: from genericpath import *",
          "",
          "[Removed Lines]",
          "22: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/pydoc.py||Lib/pydoc.py": [
          "File: Lib/pydoc.py -> Lib/pydoc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: from reprlib import Repr",
          "77: from traceback import format_exception_only",
          "80:                            plain_pager, tempfile_pager, tty_pager)",
          "",
          "[Removed Lines]",
          "79: from _pyrepl.pager import (get_pager, plain, escape_less, pipe_pager,",
          "",
          "[Added Lines]",
          "79: from _pyrepl.pager import (get_pager, plain, pipe_pager,",
          "",
          "---------------"
        ],
        "Lib/stat.py||Lib/stat.py": [
          "File: Lib/stat.py -> Lib/stat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: Suggested usage: from stat import *",
          "4: \"\"\"",
          "7: # Indices for stat struct members in the tuple returned by os.stat()",
          "",
          "[Removed Lines]",
          "5: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}