{
  "cve_id": "CVE-2018-15120",
  "cve_desc": "libpango in Pango 1.40.8 through 1.42.3, as used in hexchat and other products, allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via crafted text with invalid Unicode sequences.",
  "repo": "GNOME/pango",
  "patch_hash": "71aaeaf020340412b8d012fe23a556c0420eda5f",
  "patch_info": {
    "commit_hash": "71aaeaf020340412b8d012fe23a556c0420eda5f",
    "repo": "GNOME/pango",
    "commit_url": "https://github.com/GNOME/pango/commit/71aaeaf020340412b8d012fe23a556c0420eda5f",
    "files": [
      "pango/pango-emoji.c"
    ],
    "message": "Prevent an assertion with invalid Unicode sequences\n\nInvalid Unicode sequences, such as 0x2665 0xfe0e 0xfe0f,\ncan trick the Emoji iter code into returning an empty\nsegment, which then triggers an assertion in the itemizer.\n\nPrevent this by ensuring that we make progress.\n\nThis issue was reported by Jeffrey M.",
    "before_after_code_files": [
      "pango/pango-emoji.c||pango/pango-emoji.c"
    ]
  },
  "patch_diff": {
    "pango/pango-emoji.c||pango/pango-emoji.c": [
      "File: pango/pango-emoji.c -> pango/pango-emoji.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "253:     if (iter->is_emoji == PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type))",
      "254:     {",
      "255:       iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);",
      "256:       return TRUE;",
      "257:     }",
      "258:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "259:       if (iter->start == iter->end)",
      "260:         iter->end = g_utf8_next_char (iter->end);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7c292e918f318eccb6b756170640517331eee7a",
      "candidate_info": {
        "commit_hash": "e7c292e918f318eccb6b756170640517331eee7a",
        "repo": "GNOME/pango",
        "commit_url": "https://github.com/GNOME/pango/commit/e7c292e918f318eccb6b756170640517331eee7a",
        "files": [
          "pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji-private.h",
          "pango/pango-emoji.c"
        ],
        "message": "handle VS15 emoji sequences",
        "before_after_code_files": [
          "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji-private.h||pango/pango-emoji-private.h",
          "pango/pango-emoji.c||pango/pango-emoji.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ],
          "candidate": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ]
        }
      },
      "candidate_diff": {
        "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c": [
          "File: pango/emoji_presentation_scanner.c -> pango/emoji_presentation_scanner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: static const char _emoji_presentation_actions[] = {",
          "10: };",
          "12: static const char _emoji_presentation_key_offsets[] = {",
          "16: };",
          "18: static const unsigned char _emoji_presentation_trans_keys[] = {",
          "36: };",
          "38: static const char _emoji_presentation_single_lengths[] = {",
          "42: };",
          "44: static const char _emoji_presentation_range_lengths[] = {",
          "48: };",
          "50: static const char _emoji_presentation_index_offsets[] = {",
          "123: };",
          "146: };",
          "169: };",
          "192: };",
          "194: static const char _emoji_presentation_to_state_actions[] = {",
          "197:  0, 0, 0, 0",
          "198: };",
          "200: static const char _emoji_presentation_from_state_actions[] = {",
          "221:  0, 0, 0, 0",
          "222: };",
          "242: };",
          "260: static gboolean",
          "261: scan_emoji_presentation (const unsigned char* buffer,",
          "266: {",
          "274:  {",
          "279:  }",
          "281:  {",
          "489:    }",
          "491:    }",
          "492:   }",
          "493:  }",
          "496: }",
          "",
          "[Removed Lines]",
          "7:  0, 1, 0, 1, 1, 1, 5, 1,",
          "8:  6, 1, 7, 1, 8, 1, 9, 2,",
          "9:  2, 3, 2, 2, 4, 0",
          "13:  0, 3, 8, 9, 13, 15, 22, 26,",
          "14:  33, 42, 52, 63, 71, 82, 92, 103,",
          "15:  115, 116, 121, 0",
          "19:  9u, 10u, 12u, 3u, 7u, 13u, 0u, 2u,",
          "20:  6u, 10u, 12u, 8u, 9u, 14u, 15u, 2u,",
          "21:  3u, 6u, 7u, 13u, 0u, 1u, 9u, 10u,",
          "22:  11u, 12u, 2u, 3u, 6u, 7u, 13u, 0u,",
          "23:  1u, 2u, 3u, 6u, 7u, 10u, 12u, 13u,",
          "24:  0u, 1u, 2u, 3u, 6u, 7u, 9u, 10u,",
          "25:  12u, 13u, 0u, 1u, 2u, 3u, 4u, 6u,",
          "26:  7u, 9u, 10u, 12u, 13u, 0u, 1u, 2u,",
          "27:  3u, 6u, 7u, 10u, 13u, 0u, 1u, 2u,",
          "28:  3u, 6u, 7u, 9u, 10u, 12u, 13u, 14u,",
          "29:  0u, 1u, 2u, 3u, 4u, 6u, 7u, 10u,",
          "30:  12u, 13u, 0u, 1u, 2u, 3u, 6u, 7u,",
          "31:  9u, 10u, 11u, 12u, 13u, 0u, 1u, 2u,",
          "32:  3u, 4u, 6u, 7u, 9u, 10u, 11u, 12u,",
          "33:  13u, 0u, 1u, 6u, 10u, 11u, 12u, 8u,",
          "34:  9u, 2u, 3u, 6u, 7u, 9u, 10u, 11u,",
          "35:  12u, 13u, 14u, 0u, 1u, 0u",
          "39:  3, 3, 1, 2, 2, 5, 4, 5,",
          "40:  7, 8, 9, 6, 9, 8, 9, 10,",
          "41:  1, 3, 10, 0",
          "45:  0, 1, 0, 1, 0, 1, 0, 1,",
          "46:  1, 1, 1, 1, 1, 1, 1, 1,",
          "47:  0, 1, 1, 0",
          "51:  0, 4, 9, 11, 15, 18, 25, 30,",
          "52:  37, 46, 56, 67, 75, 86, 96, 107,",
          "53:  119, 121, 126, 0",
          "54: };",
          "56: static const char _emoji_presentation_trans_cond_spaces[] = {",
          "57:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "58:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "59:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "60:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "61:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "62:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "63:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "64:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "65:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "66:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "67:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "68:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "69:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "70:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "71:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "72:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "73:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "74:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "75:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "76:  -1, -1, -1, -1, 0",
          "77: };",
          "79: static const short _emoji_presentation_trans_offsets[] = {",
          "80:  0, 1, 2, 3, 4, 5, 6, 7,",
          "81:  8, 9, 10, 11, 12, 13, 14, 15,",
          "82:  16, 17, 18, 19, 20, 21, 22, 23,",
          "83:  24, 25, 26, 27, 28, 29, 30, 31,",
          "84:  32, 33, 34, 35, 36, 37, 38, 39,",
          "85:  40, 41, 42, 43, 44, 45, 46, 47,",
          "86:  48, 49, 50, 51, 52, 53, 54, 55,",
          "87:  56, 57, 58, 59, 60, 61, 62, 63,",
          "88:  64, 65, 66, 67, 68, 69, 70, 71,",
          "89:  72, 73, 74, 75, 76, 77, 78, 79,",
          "90:  80, 81, 82, 83, 84, 85, 86, 87,",
          "91:  88, 89, 90, 91, 92, 93, 94, 95,",
          "92:  96, 97, 98, 99, 100, 101, 102, 103,",
          "93:  104, 105, 106, 107, 108, 109, 110, 111,",
          "94:  112, 113, 114, 115, 116, 117, 118, 119,",
          "95:  120, 121, 122, 123, 124, 125, 126, 127,",
          "96:  128, 129, 130, 131, 132, 133, 134, 135,",
          "97:  136, 137, 138, 139, 140, 141, 142, 143,",
          "98:  144, 145, 146, 147, 148, 149, 150, 151,",
          "99:  152, 153, 154, 155, 0",
          "100: };",
          "102: static const char _emoji_presentation_trans_lengths[] = {",
          "103:  1, 1, 1, 1, 1, 1, 1, 1,",
          "104:  1, 1, 1, 1, 1, 1, 1, 1,",
          "105:  1, 1, 1, 1, 1, 1, 1, 1,",
          "106:  1, 1, 1, 1, 1, 1, 1, 1,",
          "107:  1, 1, 1, 1, 1, 1, 1, 1,",
          "108:  1, 1, 1, 1, 1, 1, 1, 1,",
          "109:  1, 1, 1, 1, 1, 1, 1, 1,",
          "110:  1, 1, 1, 1, 1, 1, 1, 1,",
          "111:  1, 1, 1, 1, 1, 1, 1, 1,",
          "112:  1, 1, 1, 1, 1, 1, 1, 1,",
          "113:  1, 1, 1, 1, 1, 1, 1, 1,",
          "114:  1, 1, 1, 1, 1, 1, 1, 1,",
          "115:  1, 1, 1, 1, 1, 1, 1, 1,",
          "116:  1, 1, 1, 1, 1, 1, 1, 1,",
          "117:  1, 1, 1, 1, 1, 1, 1, 1,",
          "118:  1, 1, 1, 1, 1, 1, 1, 1,",
          "119:  1, 1, 1, 1, 1, 1, 1, 1,",
          "120:  1, 1, 1, 1, 1, 1, 1, 1,",
          "121:  1, 1, 1, 1, 1, 1, 1, 1,",
          "122:  1, 1, 1, 1, 0",
          "125: static const char _emoji_presentation_cond_keys[] = {",
          "126:  0, 0, 0, 0, 0, 0, 0, 0,",
          "127:  0, 0, 0, 0, 0, 0, 0, 0,",
          "128:  0, 0, 0, 0, 0, 0, 0, 0,",
          "129:  0, 0, 0, 0, 0, 0, 0, 0,",
          "130:  0, 0, 0, 0, 0, 0, 0, 0,",
          "131:  0, 0, 0, 0, 0, 0, 0, 0,",
          "132:  0, 0, 0, 0, 0, 0, 0, 0,",
          "133:  0, 0, 0, 0, 0, 0, 0, 0,",
          "134:  0, 0, 0, 0, 0, 0, 0, 0,",
          "135:  0, 0, 0, 0, 0, 0, 0, 0,",
          "136:  0, 0, 0, 0, 0, 0, 0, 0,",
          "137:  0, 0, 0, 0, 0, 0, 0, 0,",
          "138:  0, 0, 0, 0, 0, 0, 0, 0,",
          "139:  0, 0, 0, 0, 0, 0, 0, 0,",
          "140:  0, 0, 0, 0, 0, 0, 0, 0,",
          "141:  0, 0, 0, 0, 0, 0, 0, 0,",
          "142:  0, 0, 0, 0, 0, 0, 0, 0,",
          "143:  0, 0, 0, 0, 0, 0, 0, 0,",
          "144:  0, 0, 0, 0, 0, 0, 0, 0,",
          "145:  0, 0, 0, 0, 0",
          "148: static const char _emoji_presentation_cond_targs[] = {",
          "149:  7, 1, 11, 5, 13, 8, 8, 8,",
          "150:  5, 7, 5, 1, 11, 7, 5, 4,",
          "151:  7, 5, 14, 15, 16, 17, 18, 6,",
          "152:  5, 7, 1, 5, 11, 5, 9, 10,",
          "153:  2, 3, 12, 0, 5, 9, 10, 2,",
          "154:  3, 1, 11, 12, 0, 5, 9, 10,",
          "155:  2, 3, 7, 1, 11, 12, 0, 5,",
          "156:  9, 10, 11, 2, 3, 7, 1, 11,",
          "157:  12, 0, 5, 9, 10, 2, 3, 1,",
          "158:  12, 0, 5, 9, 10, 2, 3, 7,",
          "159:  1, 11, 12, 4, 0, 5, 9, 10,",
          "160:  11, 2, 3, 1, 11, 12, 0, 5,",
          "161:  9, 10, 2, 3, 7, 1, 5, 11,",
          "162:  12, 0, 5, 9, 10, 11, 2, 3,",
          "163:  7, 1, 5, 11, 12, 0, 5, 7,",
          "164:  5, 1, 5, 11, 7, 5, 9, 10,",
          "165:  2, 3, 7, 1, 5, 11, 12, 4,",
          "166:  0, 5, 5, 5, 5, 5, 5, 5,",
          "167:  5, 5, 5, 5, 5, 5, 5, 5,",
          "168:  5, 5, 5, 5, 0",
          "171: static const char _emoji_presentation_cond_actions[] = {",
          "172:  15, 0, 15, 11, 15, 15, 15, 15,",
          "173:  13, 15, 11, 0, 15, 15, 11, 0,",
          "174:  15, 11, 15, 15, 0, 18, 15, 18,",
          "175:  5, 15, 0, 5, 15, 9, 15, 15,",
          "176:  0, 0, 15, 0, 7, 15, 15, 0,",
          "177:  0, 0, 15, 15, 0, 7, 15, 15,",
          "178:  0, 0, 15, 0, 15, 15, 0, 7,",
          "179:  15, 15, 15, 0, 0, 15, 0, 15,",
          "180:  15, 0, 7, 15, 15, 0, 0, 0,",
          "181:  15, 0, 7, 15, 15, 0, 0, 15,",
          "182:  0, 15, 15, 0, 0, 7, 15, 15,",
          "183:  15, 0, 0, 0, 15, 15, 0, 7,",
          "184:  15, 15, 0, 0, 15, 0, 5, 15,",
          "185:  15, 0, 7, 15, 15, 15, 0, 0,",
          "186:  15, 0, 5, 15, 15, 0, 7, 15,",
          "187:  9, 0, 5, 15, 15, 9, 15, 15,",
          "188:  0, 0, 15, 0, 5, 15, 15, 0,",
          "189:  0, 7, 11, 13, 11, 11, 11, 9,",
          "190:  7, 7, 7, 7, 7, 7, 7, 7,",
          "191:  7, 9, 9, 7, 0",
          "195:  0, 0, 0, 0, 0, 1, 0, 0,",
          "196:  0, 0, 0, 0, 0, 0, 0, 0,",
          "201:  0, 0, 0, 0, 0, 3, 0, 0,",
          "202:  0, 0, 0, 0, 0, 0, 0, 0,",
          "203:  0, 0, 0, 0",
          "204: };",
          "206: static const char _emoji_presentation_eof_cond_spaces[] = {",
          "207:  -1, -1, -1, -1,",
          "208:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "209:  -1, -1, -1, -1, -1, -1, -1, 0",
          "210: };",
          "212: static const char _emoji_presentation_eof_cond_key_offs[] = {",
          "213:  0, 0, 0, 0, 0, 0, 0, 0,",
          "214:  0, 0, 0, 0, 0, 0, 0, 0,",
          "215:  0, 0, 0, 0",
          "216: };",
          "218: static const char _emoji_presentation_eof_cond_key_lens[] = {",
          "219:  0, 0, 0, 0, 0, 0, 0, 0,",
          "220:  0, 0, 0, 0, 0, 0, 0, 0,",
          "224: static const char _emoji_presentation_eof_cond_keys[] = {",
          "225:  0",
          "226: };",
          "228: static const short _emoji_presentation_eof_trans[] = {",
          "229:  139, 140, 141, 142, 143, 0, 144, 145,",
          "230:  146, 147, 148, 149, 150, 151, 152, 153,",
          "231:  154, 155, 156, 0",
          "232: };",
          "234: static const char _emoji_presentation_nfa_targs[] = {",
          "235:  0, 0",
          "236: };",
          "238: static const char _emoji_presentation_nfa_offsets[] = {",
          "239:  0, 0, 0, 0, 0, 0, 0, 0,",
          "240:  0, 0, 0, 0, 0, 0, 0, 0,",
          "241:  0, 0, 0, 0",
          "244: static const char _emoji_presentation_nfa_push_actions[] = {",
          "245:  0, 0",
          "246: };",
          "248: static const char _emoji_presentation_nfa_pop_trans[] = {",
          "249:  0, 0",
          "250: };",
          "252: static const int emoji_presentation_start = 5;",
          "254: static const int emoji_presentation_en_text_and_emoji_run = 5;",
          "262: unsigned buffer_size,",
          "263: unsigned cursor,",
          "264: unsigned* last,",
          "265: unsigned* end)",
          "267:  const unsigned char *p = buffer + cursor;",
          "268:  const unsigned char *pe, *eof, *ts, *te;",
          "269:  unsigned act;",
          "270:  int cs;",
          "271:  pe = eof = buffer + buffer_size;",
          "275:   cs = (int)emoji_presentation_start;",
          "276:   ts = 0;",
          "277:   te = 0;",
          "278:   act = 0;",
          "282:   int _cpc;",
          "283:   int _klen;const char * _cekeys;unsigned int _trans = 0;const unsigned char * _keys;const char * _acts;unsigned int _nacts;  {",
          "284:    if ( p == pe )",
          "285:    goto _test_eof;",
          "286:    _resume:  {",
          "287:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_from_state_actions[cs]));",
          "288:     _nacts = (unsigned int)(*( _acts));",
          "289:     _acts += 1;",
          "290:     while ( _nacts > 0 ) {",
          "291:      switch ( (*( _acts)) ) {",
          "292:       case 1:  {",
          "293:        {",
          "294:         #line 1 \"NONE\"",
          "295:         {ts = p;}}",
          "296:        break; }",
          "297:      }",
          "298:      _nacts -= 1;",
          "299:      _acts += 1;",
          "300:     }",
          "302:     _keys = ( _emoji_presentation_trans_keys + (_emoji_presentation_key_offsets[cs]));",
          "303:     _trans = (unsigned int)_emoji_presentation_index_offsets[cs];",
          "305:     _klen = (int)_emoji_presentation_single_lengths[cs];",
          "306:     if ( _klen > 0 ) {",
          "307:      const unsigned char *_lower = _keys;",
          "308:      const unsigned char *_upper = _keys + _klen - 1;",
          "309:      const unsigned char *_mid;",
          "310:      while ( 1 ) {",
          "311:       if ( _upper < _lower )",
          "312:       break;",
          "314:       _mid = _lower + ((_upper-_lower) >> 1);",
          "315:       if ( ( (*( p))) < (*( _mid)) )",
          "316:       _upper = _mid - 1;",
          "317:       else if ( ( (*( p))) > (*( _mid)) )",
          "318:       _lower = _mid + 1;",
          "319:       else {",
          "320:        _trans += (unsigned int)(_mid - _keys);",
          "321:        goto _match;",
          "322:       }",
          "323:      }",
          "324:      _keys += _klen;",
          "325:      _trans += (unsigned int)_klen;",
          "326:     }",
          "328:     _klen = (int)_emoji_presentation_range_lengths[cs];",
          "329:     if ( _klen > 0 ) {",
          "330:      const unsigned char *_lower = _keys;",
          "331:      const unsigned char *_upper = _keys + (_klen<<1) - 2;",
          "332:      const unsigned char *_mid;",
          "333:      while ( 1 ) {",
          "334:       if ( _upper < _lower )",
          "335:       break;",
          "337:       _mid = _lower + (((_upper-_lower) >> 1) & ~1);",
          "338:       if ( ( (*( p))) < (*( _mid)) )",
          "339:       _upper = _mid - 2;",
          "340:       else if ( ( (*( p))) > (*( _mid + 1)) )",
          "341:       _lower = _mid + 2;",
          "342:       else {",
          "343:        _trans += (unsigned int)((_mid - _keys)>>1);",
          "344:        goto _match;",
          "345:       }",
          "346:      }",
          "347:      _trans += (unsigned int)_klen;",
          "348:     }",
          "350:     _match:  {",
          "351:      goto _match_cond;",
          "352:     }",
          "353:    }",
          "354:    _match_cond:  {",
          "355:     cs = (int)_emoji_presentation_cond_targs[_trans];",
          "357:     if ( _emoji_presentation_cond_actions[_trans] == 0 )",
          "358:     goto _again;",
          "360:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_cond_actions[_trans]));",
          "361:     _nacts = (unsigned int)(*( _acts));",
          "362:     _acts += 1;",
          "363:     while ( _nacts > 0 ) {",
          "364:      switch ( (*( _acts)) )",
          "365:      {",
          "366:       case 2:  {",
          "367:        {",
          "368:         #line 1 \"NONE\"",
          "369:         {te = p+1;}}",
          "370:        break; }",
          "371:       case 3:  {",
          "372:        {",
          "373:         #line 71 \"emoji_presentation_scanner.rl\"",
          "374:         {act = 1;}}",
          "375:        break; }",
          "376:       case 4:  {",
          "377:        {",
          "378:         #line 72 \"emoji_presentation_scanner.rl\"",
          "379:         {act = 2;}}",
          "380:        break; }",
          "381:       case 5:  {",
          "382:        {",
          "383:         #line 72 \"emoji_presentation_scanner.rl\"",
          "384:         {te = p+1;{",
          "385:           #line 72 \"emoji_presentation_scanner.rl\"",
          "386:           found_text_presentation_sequence }}}",
          "387:        break; }",
          "388:       case 6:  {",
          "389:        {",
          "390:         #line 71 \"emoji_presentation_scanner.rl\"",
          "391:         {te = p;p = p - 1;{",
          "392:           #line 71 \"emoji_presentation_scanner.rl\"",
          "393:           found_emoji_presentation_sequence }}}",
          "394:        break; }",
          "395:       case 7:  {",
          "396:        {",
          "397:         #line 72 \"emoji_presentation_scanner.rl\"",
          "398:         {te = p;p = p - 1;{",
          "399:           #line 72 \"emoji_presentation_scanner.rl\"",
          "400:           found_text_presentation_sequence }}}",
          "401:        break; }",
          "402:       case 8:  {",
          "403:        {",
          "404:         #line 71 \"emoji_presentation_scanner.rl\"",
          "405:         {p = ((te))-1;",
          "406:          {",
          "407:           #line 71 \"emoji_presentation_scanner.rl\"",
          "408:           found_emoji_presentation_sequence }}}",
          "409:        break; }",
          "410:       case 9:  {",
          "411:        {",
          "412:         #line 1 \"NONE\"",
          "413:         {switch( act ) {",
          "414:           case 1:  {",
          "415:            p = ((te))-1;",
          "416:            {",
          "417:             #line 71 \"emoji_presentation_scanner.rl\"",
          "418:             found_emoji_presentation_sequence } break; }",
          "419:           case 2:  {",
          "420:            p = ((te))-1;",
          "421:            {",
          "422:             #line 72 \"emoji_presentation_scanner.rl\"",
          "423:             found_text_presentation_sequence } break; }",
          "424:          }}",
          "425:        }",
          "426:        break; }",
          "427:      }",
          "428:      _nacts -= 1;",
          "429:      _acts += 1;",
          "430:     }",
          "433:    }",
          "434:    _again:  {",
          "435:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_to_state_actions[cs]));",
          "436:     _nacts = (unsigned int)(*( _acts));",
          "437:     _acts += 1;",
          "438:     while ( _nacts > 0 ) {",
          "439:      switch ( (*( _acts)) ) {",
          "440:       case 0:  {",
          "441:        {",
          "442:         #line 1 \"NONE\"",
          "443:         {ts = 0;}}",
          "444:        break; }",
          "445:      }",
          "446:      _nacts -= 1;",
          "447:      _acts += 1;",
          "448:     }",
          "450:     p += 1;",
          "451:     if ( p != pe )",
          "452:     goto _resume;",
          "453:    }",
          "454:    _test_eof:  { {}",
          "455:     if ( p == eof )",
          "456:     {",
          "457:      if ( _emoji_presentation_eof_cond_spaces[cs] != -1 ) {",
          "458:       _cekeys = ( _emoji_presentation_eof_cond_keys + (_emoji_presentation_eof_cond_key_offs[cs]));",
          "459:       _klen = (int)_emoji_presentation_eof_cond_key_lens[cs];",
          "460:       _cpc = 0;",
          "461:       {",
          "462:        const char *_lower = _cekeys;",
          "463:        const char *_upper = _cekeys + _klen - 1;",
          "464:        const char *_mid;",
          "465:        while ( 1 ) {",
          "466:         if ( _upper < _lower )",
          "467:         break;",
          "469:         _mid = _lower + ((_upper-_lower) >> 1);",
          "470:         if ( _cpc < (int)(*( _mid)) )",
          "471:         _upper = _mid - 1;",
          "472:         else if ( _cpc > (int)(*( _mid)) )",
          "473:         _lower = _mid + 1;",
          "474:         else {",
          "475:          goto _ok;",
          "476:         }",
          "477:        }",
          "478:        cs = -1;",
          "479:        goto _out;",
          "480:       }",
          "481:       _ok: {}",
          "482:      }",
          "483:      if ( _emoji_presentation_eof_trans[cs] > 0 ) {",
          "484:       _trans = (unsigned int)_emoji_presentation_eof_trans[cs] - 1;",
          "485:       goto _match_cond;",
          "486:      }",
          "487:     }",
          "490:    _out:  { {}",
          "495:  return FALSE;",
          "",
          "[Added Lines]",
          "2: #line 1 \"emoji_presentation_scanner.rl\"",
          "8: #line 9 \"emoji_presentation_scanner.c\"",
          "10:  0, 1, 0, 1, 1, 1, 5, 1,",
          "11:  6, 1, 7, 1, 8, 1, 9, 1,",
          "12:  10, 1, 11, 2, 2, 3, 2, 2,",
          "13:  4",
          "17:  0, 5, 7, 14, 18, 20, 21, 24,",
          "18:  29, 30, 34, 36",
          "22:  3u, 7u, 13u, 0u, 2u, 14u, 15u, 2u,",
          "23:  3u, 6u, 7u, 13u, 0u, 1u, 9u, 10u,",
          "24:  11u, 12u, 10u, 12u, 10u, 4u, 10u, 12u,",
          "25:  4u, 9u, 10u, 11u, 12u, 6u, 9u, 10u,",
          "26:  11u, 12u, 8u, 10u, 9u, 10u, 11u, 12u,",
          "27:  14u, 0",
          "31:  3, 2, 5, 4, 2, 1, 3, 5,",
          "32:  1, 4, 2, 5",
          "36:  1, 0, 1, 0, 0, 0, 0, 0,",
          "37:  0, 0, 0, 0",
          "41:  0, 5, 8, 15, 20, 23, 25, 29,",
          "42:  35, 37, 42, 45",
          "45: static const char _emoji_presentation_indicies[] = {",
          "46:  2, 1, 1, 1, 0, 4, 5, 3,",
          "47:  7, 8, 10, 11, 12, 6, 9, 5,",
          "48:  13, 14, 15, 0, 13, 15, 16, 13,",
          "49:  16, 15, 13, 15, 16, 15, 5, 13,",
          "50:  14, 15, 16, 5, 17, 5, 13, 14,",
          "51:  18, 17, 5, 13, 16, 5, 13, 14,",
          "52:  15, 4, 16, 0",
          "55: static const char _emoji_presentation_trans_targs[] = {",
          "56:  2, 4, 6, 2, 1, 2, 3, 3,",
          "57:  7, 2, 8, 9, 11, 0, 2, 5,",
          "58:  2, 2, 10",
          "61: static const char _emoji_presentation_trans_actions[] = {",
          "62:  17, 19, 19, 15, 0, 7, 22, 19,",
          "63:  19, 9, 0, 22, 19, 0, 5, 19,",
          "64:  11, 13, 19",
          "68:  0, 0, 1, 0, 0, 0, 0, 0,",
          "73:  0, 0, 3, 0, 0, 0, 0, 0,",
          "77: static const char _emoji_presentation_eof_trans[] = {",
          "78:  1, 4, 0, 1, 17, 17, 17, 17,",
          "79:  18, 18, 17, 17",
          "82: static const int emoji_presentation_start = 2;",
          "84: static const int emoji_presentation_en_text_and_emoji_run = 2;",
          "87: #line 9 \"emoji_presentation_scanner.rl\"",
          "91: #line 76 \"emoji_presentation_scanner.rl\"",
          "96:                          unsigned buffer_size,",
          "97:                          unsigned cursor,",
          "98:                          unsigned* end)",
          "100:   const unsigned char *p = buffer + cursor;",
          "101:   const unsigned char *pe, *eof, *ts, *te;",
          "102:   unsigned act;",
          "103:   int cs;",
          "104:   pe = eof = buffer + buffer_size;",
          "107: #line 108 \"emoji_presentation_scanner.c\"",
          "109:  cs = emoji_presentation_start;",
          "110:  ts = 0;",
          "111:  te = 0;",
          "112:  act = 0;",
          "115: #line 116 \"emoji_presentation_scanner.c\"",
          "117:  int _klen;",
          "118:  unsigned int _trans;",
          "119:  const char *_acts;",
          "120:  unsigned int _nacts;",
          "121:  const unsigned char *_keys;",
          "123:  if ( p == pe )",
          "124:   goto _test_eof;",
          "125: _resume:",
          "126:  _acts = _emoji_presentation_actions + _emoji_presentation_from_state_actions[cs];",
          "127:  _nacts = (unsigned int) *_acts++;",
          "128:  while ( _nacts-- > 0 ) {",
          "129:   switch ( *_acts++ ) {",
          "130:  case 1:",
          "131: #line 1 \"NONE\"",
          "132:  {ts = p;}",
          "133:  break;",
          "134: #line 135 \"emoji_presentation_scanner.c\"",
          "135:   }",
          "136:  }",
          "138:  _keys = _emoji_presentation_trans_keys + _emoji_presentation_key_offsets[cs];",
          "139:  _trans = _emoji_presentation_index_offsets[cs];",
          "141:  _klen = _emoji_presentation_single_lengths[cs];",
          "142:  if ( _klen > 0 ) {",
          "143:   const unsigned char *_lower = _keys;",
          "144:   const unsigned char *_mid;",
          "145:   const unsigned char *_upper = _keys + _klen - 1;",
          "146:   while (1) {",
          "147:    if ( _upper < _lower )",
          "148:     break;",
          "150:    _mid = _lower + ((_upper-_lower) >> 1);",
          "151:    if ( (*p) < *_mid )",
          "152:     _upper = _mid - 1;",
          "153:    else if ( (*p) > *_mid )",
          "154:     _lower = _mid + 1;",
          "155:    else {",
          "156:     _trans += (unsigned int)(_mid - _keys);",
          "157:     goto _match;",
          "159:   }",
          "160:   _keys += _klen;",
          "161:   _trans += _klen;",
          "162:  }",
          "164:  _klen = _emoji_presentation_range_lengths[cs];",
          "165:  if ( _klen > 0 ) {",
          "166:   const unsigned char *_lower = _keys;",
          "167:   const unsigned char *_mid;",
          "168:   const unsigned char *_upper = _keys + (_klen<<1) - 2;",
          "169:   while (1) {",
          "170:    if ( _upper < _lower )",
          "171:     break;",
          "173:    _mid = _lower + (((_upper-_lower) >> 1) & ~1);",
          "174:    if ( (*p) < _mid[0] )",
          "175:     _upper = _mid - 2;",
          "176:    else if ( (*p) > _mid[1] )",
          "177:     _lower = _mid + 2;",
          "178:    else {",
          "179:     _trans += (unsigned int)((_mid - _keys)>>1);",
          "180:     goto _match;",
          "183:   _trans += _klen;",
          "186: _match:",
          "187:  _trans = _emoji_presentation_indicies[_trans];",
          "188: _eof_trans:",
          "189:  cs = _emoji_presentation_trans_targs[_trans];",
          "191:  if ( _emoji_presentation_trans_actions[_trans] == 0 )",
          "192:   goto _again;",
          "194:  _acts = _emoji_presentation_actions + _emoji_presentation_trans_actions[_trans];",
          "195:  _nacts = (unsigned int) *_acts++;",
          "196:  while ( _nacts-- > 0 )",
          "197:  {",
          "198:   switch ( *_acts++ )",
          "199:   {",
          "200:  case 2:",
          "201: #line 1 \"NONE\"",
          "202:  {te = p+1;}",
          "203:  break;",
          "204:  case 3:",
          "205: #line 72 \"emoji_presentation_scanner.rl\"",
          "206:  {act = 2;}",
          "207:  break;",
          "208:  case 4:",
          "209: #line 73 \"emoji_presentation_scanner.rl\"",
          "210:  {act = 3;}",
          "211:  break;",
          "212:  case 5:",
          "213: #line 71 \"emoji_presentation_scanner.rl\"",
          "214:  {te = p+1;{ found_text_presentation_sequence }}",
          "215:  break;",
          "216:  case 6:",
          "217: #line 72 \"emoji_presentation_scanner.rl\"",
          "218:  {te = p+1;{ found_emoji_presentation_sequence }}",
          "219:  break;",
          "220:  case 7:",
          "221: #line 73 \"emoji_presentation_scanner.rl\"",
          "222:  {te = p+1;{ found_text_presentation_sequence }}",
          "223:  break;",
          "224:  case 8:",
          "225: #line 72 \"emoji_presentation_scanner.rl\"",
          "226:  {te = p;p--;{ found_emoji_presentation_sequence }}",
          "227:  break;",
          "228:  case 9:",
          "229: #line 73 \"emoji_presentation_scanner.rl\"",
          "230:  {te = p;p--;{ found_text_presentation_sequence }}",
          "231:  break;",
          "232:  case 10:",
          "233: #line 72 \"emoji_presentation_scanner.rl\"",
          "234:  {{p = ((te))-1;}{ found_emoji_presentation_sequence }}",
          "235:  break;",
          "236:  case 11:",
          "237: #line 1 \"NONE\"",
          "238:  { switch( act ) {",
          "239:  case 2:",
          "240:  {{p = ((te))-1;} found_emoji_presentation_sequence }",
          "241:  break;",
          "242:  case 3:",
          "243:  {{p = ((te))-1;} found_text_presentation_sequence }",
          "244:  break;",
          "245:  }",
          "246:  }",
          "247:  break;",
          "248: #line 249 \"emoji_presentation_scanner.c\"",
          "249:   }",
          "250:  }",
          "252: _again:",
          "253:  _acts = _emoji_presentation_actions + _emoji_presentation_to_state_actions[cs];",
          "254:  _nacts = (unsigned int) *_acts++;",
          "255:  while ( _nacts-- > 0 ) {",
          "256:   switch ( *_acts++ ) {",
          "257:  case 0:",
          "258: #line 1 \"NONE\"",
          "259:  {ts = 0;}",
          "260:  break;",
          "261: #line 262 \"emoji_presentation_scanner.c\"",
          "262:   }",
          "263:  }",
          "265:  if ( ++p != pe )",
          "266:   goto _resume;",
          "267:  _test_eof: {}",
          "268:  if ( p == eof )",
          "269:  {",
          "270:  if ( _emoji_presentation_eof_trans[cs] > 0 ) {",
          "271:   _trans = _emoji_presentation_eof_trans[cs] - 1;",
          "272:   goto _eof_trans;",
          "273:  }",
          "274:  }",
          "276:  }",
          "278: #line 93 \"emoji_presentation_scanner.rl\"",
          "281:   g_assert_not_reached ();",
          "",
          "---------------"
        ],
        "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl": [
          "File: pango/emoji_presentation_scanner.rl -> pango/emoji_presentation_scanner.rl",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   emoji_tag_sequence | emoji_keycap_sequence | emoji_zwj_sequence |",
          "63:   emoji_combining_encloding_circle_backslash_sequence;",
          "67: text_presentation_emoji = any_emoji VS15;",
          "68: text_run = text_presentation_emoji | any;",
          "70: text_and_emoji_run := |*",
          "71: emoji_run => { found_emoji_presentation_sequence };",
          "75: }%%",
          "",
          "[Removed Lines]",
          "65: emoji_run = emoji_presentation+;",
          "72: text_run => { found_text_presentation_sequence };",
          "",
          "[Added Lines]",
          "65: emoji_run = emoji_presentation;",
          "71: text_presentation_emoji => { found_text_presentation_sequence };",
          "73: any => { found_text_presentation_sequence };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: scan_emoji_presentation (const unsigned char* buffer,",
          "79:                          unsigned buffer_size,",
          "80:                          unsigned cursor,",
          "82:                          unsigned* end)",
          "83: {",
          "84:   const unsigned char *p = buffer + cursor;",
          "",
          "[Removed Lines]",
          "81:                          unsigned* last,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     write init;",
          "92:     write exec;",
          "93:   }%%",
          "95: }",
          "",
          "[Removed Lines]",
          "94:   return FALSE;",
          "",
          "[Added Lines]",
          "95:   g_assert_not_reached ();",
          "",
          "---------------"
        ],
        "pango/pango-emoji-private.h||pango/pango-emoji-private.h": [
          "File: pango/pango-emoji-private.h -> pango/pango-emoji-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   const gchar *end;",
          "38:   gboolean is_emoji;",
          "43:   const unsigned char *types;",
          "44:   unsigned int n_chars;",
          "45:   unsigned int cursor;",
          "",
          "[Removed Lines]",
          "40:   const gchar *token_start;",
          "41:   const gchar *token_end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pango/pango-emoji.c||pango/pango-emoji.c": [
          "File: pango/pango-emoji.c -> pango/pango-emoji.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   return kMaxEmojiScannerCategory;",
          "193: }",
          "196: #define found_emoji_presentation_sequence                                \\",
          "197:   {                                                                      \\",
          "198:     if (0) g_print (\"emoji %ld..%ld\\n\", ts - buffer, te - buffer);       \\",
          "201:     return TRUE;                                                         \\",
          "202:   }",
          "",
          "[Removed Lines]",
          "195: #define found_text_presentation_sequence",
          "",
          "[Added Lines]",
          "195: #define found_text_presentation_sequence                                 \\",
          "196:   {                                                                      \\",
          "197:     if (0) g_print (\"text  %ld..%ld\\n\", ts - buffer, te - buffer);       \\",
          "199:     return FALSE;                                                        \\",
          "200:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:     p = g_utf8_next_char (p);",
          "222:   }",
          "225:   if (length >= 0)",
          "226:     iter->text_end = text + length;",
          "227:   else",
          "",
          "[Removed Lines]",
          "224:   iter->text_start = iter->start = iter->end = iter->token_start = iter->token_end = text;",
          "",
          "[Added Lines]",
          "228:   iter->text_start = iter->start = iter->end = text;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246: gboolean",
          "247: _pango_emoji_iter_next (PangoEmojiIter *iter)",
          "248: {",
          "249:   if (iter->end >= iter->text_end)",
          "250:     return FALSE;",
          "252:   iter->start = iter->end;",
          "299: }",
          "",
          "[Removed Lines]",
          "259:   if (iter->start >= iter->token_end)",
          "260:     {",
          "262:       unsigned int token_start, token_end;",
          "263:       if (!scan_emoji_presentation (iter->types, iter->n_chars, iter->cursor,",
          "264:         &token_start, &token_end))",
          "265:  {",
          "268:    iter->end = iter->text_end;",
          "269:    iter->is_emoji = FALSE;",
          "271:    return TRUE;",
          "272:  };",
          "274:       g_assert (iter->cursor <= token_start && token_start < token_end && token_end <= iter->n_chars);",
          "275:       iter->token_start = g_utf8_offset_to_pointer (iter->token_end, token_start - iter->cursor);",
          "276:       iter->token_end   = g_utf8_offset_to_pointer (iter->token_end, token_end   - iter->cursor);",
          "277:       iter->cursor = token_end;",
          "278:     }",
          "280:   if (iter->start < iter->token_start)",
          "281:     {",
          "284:       iter->end = iter->token_start;",
          "285:       iter->is_emoji = FALSE;",
          "286:       return TRUE;",
          "287:     }",
          "289:   if (iter->start >= iter->token_start && iter->start < iter->token_end)",
          "290:     {",
          "292:       iter->end = iter->token_end;",
          "293:       iter->is_emoji = TRUE;",
          "294:       return TRUE;",
          "295:     }",
          "297:   g_assert_not_reached ();",
          "298:   return FALSE;",
          "",
          "[Added Lines]",
          "253:   unsigned int old_cursor, cursor;",
          "254:   gboolean is_emoji;",
          "261:   old_cursor = cursor = iter->cursor;",
          "262:   is_emoji = scan_emoji_presentation (iter->types, iter->n_chars, cursor, &cursor);",
          "263:   do",
          "264:   {",
          "265:     iter->cursor = cursor;",
          "266:     iter->is_emoji = is_emoji;",
          "268:     if (cursor == iter->n_chars)",
          "269:       break;",
          "271:     is_emoji = scan_emoji_presentation (iter->types, iter->n_chars, cursor, &cursor);",
          "272:   }",
          "273:   while (iter->is_emoji == is_emoji);",
          "275:   iter->end = g_utf8_offset_to_pointer (iter->start, iter->cursor - old_cursor);",
          "277:   return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "267d991d9b6f040580a6421a0f52c292ed9304dc",
      "candidate_info": {
        "commit_hash": "267d991d9b6f040580a6421a0f52c292ed9304dc",
        "repo": "GNOME/pango",
        "commit_url": "https://github.com/GNOME/pango/commit/267d991d9b6f040580a6421a0f52c292ed9304dc",
        "files": [
          "pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji.c"
        ],
        "message": "Update emoji scanner ragel file to latest from Chrome",
        "before_after_code_files": [
          "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji.c||pango/pango-emoji.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ],
          "candidate": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ]
        }
      },
      "candidate_diff": {
        "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c": [
          "File: pango/emoji_presentation_scanner.c -> pango/emoji_presentation_scanner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: {",
          "102:   unsigned act;",
          "103:   int cs;",
          "108:  {",
          "109:  cs = emoji_presentation_start;",
          "110:  ts = 0;",
          "",
          "[Removed Lines]",
          "91: #line 76 \"emoji_presentation_scanner.rl\"",
          "94: static gboolean",
          "95: scan_emoji_presentation (const unsigned char* buffer,",
          "96:                          unsigned buffer_size,",
          "97:                          unsigned cursor,",
          "98:                          unsigned* end)",
          "100:   const unsigned char *p = buffer + cursor;",
          "101:   const unsigned char *pe, *eof, *ts, *te;",
          "104:   pe = eof = buffer + buffer_size;",
          "107: #line 108 \"emoji_presentation_scanner.c\"",
          "",
          "[Added Lines]",
          "91: #line 78 \"emoji_presentation_scanner.rl\"",
          "94: static emoji_text_iter_t",
          "95: scan_emoji_presentation (emoji_text_iter_t p,",
          "96:     const emoji_text_iter_t pe,",
          "97:     bool* is_emoji)",
          "99:   emoji_text_iter_t ts, te;",
          "100:   const emoji_text_iter_t eof = pe;",
          "106: #line 107 \"emoji_presentation_scanner.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:  act = 0;",
          "113:  }",
          "116:  {",
          "117:  int _klen;",
          "118:  unsigned int _trans;",
          "",
          "[Removed Lines]",
          "115: #line 116 \"emoji_presentation_scanner.c\"",
          "",
          "[Added Lines]",
          "114: #line 115 \"emoji_presentation_scanner.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: #line 1 \"NONE\"",
          "132:  {ts = p;}",
          "133:  break;",
          "135:   }",
          "136:  }",
          "",
          "[Removed Lines]",
          "134: #line 135 \"emoji_presentation_scanner.c\"",
          "",
          "[Added Lines]",
          "133: #line 134 \"emoji_presentation_scanner.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:  {te = p+1;}",
          "203:  break;",
          "204:  case 3:",
          "206:  {act = 2;}",
          "207:  break;",
          "208:  case 4:",
          "210:  {act = 3;}",
          "211:  break;",
          "212:  case 5:",
          "215:  break;",
          "216:  case 6:",
          "219:  break;",
          "220:  case 7:",
          "223:  break;",
          "224:  case 8:",
          "227:  break;",
          "228:  case 9:",
          "231:  break;",
          "232:  case 10:",
          "235:  break;",
          "236:  case 11:",
          "237: #line 1 \"NONE\"",
          "238:  { switch( act ) {",
          "239:  case 2:",
          "241:  break;",
          "242:  case 3:",
          "244:  break;",
          "245:  }",
          "246:  }",
          "247:  break;",
          "249:   }",
          "250:  }",
          "",
          "[Removed Lines]",
          "205: #line 72 \"emoji_presentation_scanner.rl\"",
          "209: #line 73 \"emoji_presentation_scanner.rl\"",
          "213: #line 71 \"emoji_presentation_scanner.rl\"",
          "214:  {te = p+1;{ found_text_presentation_sequence }}",
          "217: #line 72 \"emoji_presentation_scanner.rl\"",
          "218:  {te = p+1;{ found_emoji_presentation_sequence }}",
          "221: #line 73 \"emoji_presentation_scanner.rl\"",
          "222:  {te = p+1;{ found_text_presentation_sequence }}",
          "225: #line 72 \"emoji_presentation_scanner.rl\"",
          "226:  {te = p;p--;{ found_emoji_presentation_sequence }}",
          "229: #line 73 \"emoji_presentation_scanner.rl\"",
          "230:  {te = p;p--;{ found_text_presentation_sequence }}",
          "233: #line 72 \"emoji_presentation_scanner.rl\"",
          "234:  {{p = ((te))-1;}{ found_emoji_presentation_sequence }}",
          "240:  {{p = ((te))-1;} found_emoji_presentation_sequence }",
          "243:  {{p = ((te))-1;} found_text_presentation_sequence }",
          "248: #line 249 \"emoji_presentation_scanner.c\"",
          "",
          "[Added Lines]",
          "204: #line 74 \"emoji_presentation_scanner.rl\"",
          "208: #line 75 \"emoji_presentation_scanner.rl\"",
          "212: #line 73 \"emoji_presentation_scanner.rl\"",
          "213:  {te = p+1;{ *is_emoji = false; return te; }}",
          "216: #line 74 \"emoji_presentation_scanner.rl\"",
          "217:  {te = p+1;{ *is_emoji = true; return te; }}",
          "220: #line 75 \"emoji_presentation_scanner.rl\"",
          "221:  {te = p+1;{ *is_emoji = false; return te; }}",
          "224: #line 74 \"emoji_presentation_scanner.rl\"",
          "225:  {te = p;p--;{ *is_emoji = true; return te; }}",
          "228: #line 75 \"emoji_presentation_scanner.rl\"",
          "229:  {te = p;p--;{ *is_emoji = false; return te; }}",
          "232: #line 74 \"emoji_presentation_scanner.rl\"",
          "233:  {{p = ((te))-1;}{ *is_emoji = true; return te; }}",
          "239:  {{p = ((te))-1;} *is_emoji = true; return te; }",
          "242:  {{p = ((te))-1;} *is_emoji = false; return te; }",
          "247: #line 248 \"emoji_presentation_scanner.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258: #line 1 \"NONE\"",
          "259:  {ts = 0;}",
          "260:  break;",
          "262:   }",
          "263:  }",
          "",
          "[Removed Lines]",
          "261: #line 262 \"emoji_presentation_scanner.c\"",
          "",
          "[Added Lines]",
          "260: #line 261 \"emoji_presentation_scanner.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:  }",
          "282: }",
          "",
          "[Removed Lines]",
          "278: #line 93 \"emoji_presentation_scanner.rl\"",
          "281:   g_assert_not_reached ();",
          "",
          "[Added Lines]",
          "277: #line 94 \"emoji_presentation_scanner.rl\"",
          "282:   return pe;",
          "",
          "---------------"
        ],
        "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl": [
          "File: pango/emoji_presentation_scanner.rl -> pango/emoji_presentation_scanner.rl",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: any_emoji =  EMOJI_TEXT_PRESENTATION | EMOJI_EMOJI_PRESENTATION |  KEYCAP_BASE |",
          "31:   EMOJI_MODIFIER_BASE | TAG_BASE | EMOJI;",
          "34:   COMBINING_ENCLOSING_CIRCLE_BACKSLASH;",
          "36: # This could be sharper than any_emoji by restricting this only to valid",
          "",
          "[Removed Lines]",
          "33: emoji_combining_encloding_circle_backslash_sequence = any_emoji",
          "",
          "[Added Lines]",
          "33: emoji_combining_enclosing_circle_backslash_sequence = any_emoji",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: emoji_zwj_sequence = emoji_zwj_element ( ZWJ emoji_zwj_element )+;",
          "60: emoji_presentation = EMOJI_EMOJI_PRESENTATION | TAG_BASE | EMOJI_MODIFIER_BASE |",
          "65: emoji_run = emoji_presentation;",
          "67: text_presentation_emoji = any_emoji VS15;",
          "70: text_and_emoji_run := |*",
          "76: }%%",
          "83: {",
          "86:   unsigned act;",
          "87:   int cs;",
          "90:   %%{",
          "91:     write init;",
          "92:     write exec;",
          "93:   }%%",
          "96: }",
          "",
          "[Removed Lines]",
          "61:   emoji_presentation_sequence | emoji_modifier_sequence | emoji_flag_sequence |",
          "62:   emoji_tag_sequence | emoji_keycap_sequence | emoji_zwj_sequence |",
          "63:   emoji_combining_encloding_circle_backslash_sequence;",
          "68: text_run = text_presentation_emoji | any;",
          "71: text_presentation_emoji => { found_text_presentation_sequence };",
          "72: emoji_run => { found_emoji_presentation_sequence };",
          "73: any => { found_text_presentation_sequence };",
          "78: static gboolean",
          "79: scan_emoji_presentation (const unsigned char* buffer,",
          "80:                          unsigned buffer_size,",
          "81:                          unsigned cursor,",
          "82:                          unsigned* end)",
          "84:   const unsigned char *p = buffer + cursor;",
          "85:   const unsigned char *pe, *eof, *ts, *te;",
          "88:   pe = eof = buffer + buffer_size;",
          "95:   g_assert_not_reached ();",
          "",
          "[Added Lines]",
          "61:  emoji_presentation_sequence | emoji_modifier_sequence | emoji_flag_sequence |",
          "62:  emoji_tag_sequence | emoji_keycap_sequence | emoji_zwj_sequence |",
          "63:  emoji_combining_enclosing_circle_backslash_sequence;",
          "68: text_run = any;",
          "71: # In order to give the the VS15 sequences higher priority than detecting",
          "72: # emoji sequences they are listed first as scanner token here.",
          "73: text_presentation_emoji => { *is_emoji = false; return te; };",
          "74: emoji_run => { *is_emoji = true; return te; };",
          "75: text_run => { *is_emoji = false; return te; };",
          "80: static emoji_text_iter_t",
          "81: scan_emoji_presentation (emoji_text_iter_t p,",
          "82:     const emoji_text_iter_t pe,",
          "83:     bool* is_emoji)",
          "85:   emoji_text_iter_t ts, te;",
          "86:   const emoji_text_iter_t eof = pe;",
          "98:   return pe;",
          "",
          "---------------"
        ],
        "pango/pango-emoji.c||pango/pango-emoji.c": [
          "File: pango/pango-emoji.c -> pango/pango-emoji.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   return kMaxEmojiScannerCategory;",
          "193: }",
          "208: #include \"emoji_presentation_scanner.c\"",
          "",
          "[Removed Lines]",
          "195: #define found_text_presentation_sequence                                 \\",
          "196:   {                                                                      \\",
          "197:     if (0) g_print (\"text  %ld..%ld\\n\", ts - buffer, te - buffer);       \\",
          "199:     return FALSE;                                                        \\",
          "200:   }",
          "201: #define found_emoji_presentation_sequence                                \\",
          "202:   {                                                                      \\",
          "203:     if (0) g_print (\"emoji %ld..%ld\\n\", ts - buffer, te - buffer);       \\",
          "205:     return TRUE;                                                         \\",
          "206:   }",
          "",
          "[Added Lines]",
          "196: typedef gboolean bool;",
          "197: enum { false = FALSE, true = TRUE };",
          "198: typedef unsigned char *emoji_text_iter_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   iter->start = iter->end;",
          "261:   old_cursor = cursor = iter->cursor;",
          "263:   do",
          "264:   {",
          "265:     iter->cursor = cursor;",
          "",
          "[Removed Lines]",
          "262:   is_emoji = scan_emoji_presentation (iter->types, iter->n_chars, cursor, &cursor);",
          "",
          "[Added Lines]",
          "254:   cursor = scan_emoji_presentation (iter->types + cursor,",
          "255:         iter->types + iter->n_chars,",
          "256:         &is_emoji) - iter->types;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:     if (cursor == iter->n_chars)",
          "269:       break;",
          "272:   }",
          "273:   while (iter->is_emoji == is_emoji);",
          "",
          "[Removed Lines]",
          "271:     is_emoji = scan_emoji_presentation (iter->types, iter->n_chars, cursor, &cursor);",
          "",
          "[Added Lines]",
          "265:     cursor = scan_emoji_presentation (iter->types + cursor,",
          "266:           iter->types + iter->n_chars,",
          "267:           &is_emoji) - iter->types;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8ca9ca5ed3198e7fbab7381e232f9f20ecd93da",
      "candidate_info": {
        "commit_hash": "f8ca9ca5ed3198e7fbab7381e232f9f20ecd93da",
        "repo": "GNOME/pango",
        "commit_url": "https://github.com/GNOME/pango/commit/f8ca9ca5ed3198e7fbab7381e232f9f20ecd93da",
        "files": [
          "pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji-private.h",
          "pango/pango-emoji.c"
        ],
        "message": "[emoji] Port to new Ragel-based iterator, based on Chromium again\n\nThere's a couple of regressions in this apparently.  I'm working with Dominik\nto fix on Chrome side and will push here after.",
        "before_after_code_files": [
          "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c",
          "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl",
          "pango/pango-emoji-private.h||pango/pango-emoji-private.h",
          "pango/pango-emoji.c||pango/pango-emoji.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ],
          "candidate": [
            "pango/pango-emoji.c||pango/pango-emoji.c"
          ]
        }
      },
      "candidate_diff": {
        "pango/emoji_presentation_scanner.c||pango/emoji_presentation_scanner.c": [
          "File: pango/emoji_presentation_scanner.c -> pango/emoji_presentation_scanner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: static const char _emoji_presentation_actions[] = {",
          "7:  0, 1, 0, 1, 1, 1, 5, 1,",
          "8:  6, 1, 7, 1, 8, 1, 9, 2,",
          "9:  2, 3, 2, 2, 4, 0",
          "10: };",
          "12: static const char _emoji_presentation_key_offsets[] = {",
          "13:  0, 3, 8, 9, 13, 15, 22, 26,",
          "14:  33, 42, 52, 63, 71, 82, 92, 103,",
          "15:  115, 116, 121, 0",
          "16: };",
          "18: static const unsigned char _emoji_presentation_trans_keys[] = {",
          "19:  9u, 10u, 12u, 3u, 7u, 13u, 0u, 2u,",
          "20:  6u, 10u, 12u, 8u, 9u, 14u, 15u, 2u,",
          "21:  3u, 6u, 7u, 13u, 0u, 1u, 9u, 10u,",
          "22:  11u, 12u, 2u, 3u, 6u, 7u, 13u, 0u,",
          "23:  1u, 2u, 3u, 6u, 7u, 10u, 12u, 13u,",
          "24:  0u, 1u, 2u, 3u, 6u, 7u, 9u, 10u,",
          "25:  12u, 13u, 0u, 1u, 2u, 3u, 4u, 6u,",
          "26:  7u, 9u, 10u, 12u, 13u, 0u, 1u, 2u,",
          "27:  3u, 6u, 7u, 10u, 13u, 0u, 1u, 2u,",
          "28:  3u, 6u, 7u, 9u, 10u, 12u, 13u, 14u,",
          "29:  0u, 1u, 2u, 3u, 4u, 6u, 7u, 10u,",
          "30:  12u, 13u, 0u, 1u, 2u, 3u, 6u, 7u,",
          "31:  9u, 10u, 11u, 12u, 13u, 0u, 1u, 2u,",
          "32:  3u, 4u, 6u, 7u, 9u, 10u, 11u, 12u,",
          "33:  13u, 0u, 1u, 6u, 10u, 11u, 12u, 8u,",
          "34:  9u, 2u, 3u, 6u, 7u, 9u, 10u, 11u,",
          "35:  12u, 13u, 14u, 0u, 1u, 0u",
          "36: };",
          "38: static const char _emoji_presentation_single_lengths[] = {",
          "39:  3, 3, 1, 2, 2, 5, 4, 5,",
          "40:  7, 8, 9, 6, 9, 8, 9, 10,",
          "41:  1, 3, 10, 0",
          "42: };",
          "44: static const char _emoji_presentation_range_lengths[] = {",
          "45:  0, 1, 0, 1, 0, 1, 0, 1,",
          "46:  1, 1, 1, 1, 1, 1, 1, 1,",
          "47:  0, 1, 1, 0",
          "48: };",
          "50: static const char _emoji_presentation_index_offsets[] = {",
          "51:  0, 4, 9, 11, 15, 18, 25, 30,",
          "52:  37, 46, 56, 67, 75, 86, 96, 107,",
          "53:  119, 121, 126, 0",
          "54: };",
          "56: static const char _emoji_presentation_trans_cond_spaces[] = {",
          "57:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "58:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "59:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "60:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "61:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "62:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "63:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "64:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "65:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "66:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "67:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "68:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "69:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "70:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "71:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "72:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "73:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "74:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "75:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "76:  -1, -1, -1, -1, 0",
          "77: };",
          "79: static const short _emoji_presentation_trans_offsets[] = {",
          "80:  0, 1, 2, 3, 4, 5, 6, 7,",
          "81:  8, 9, 10, 11, 12, 13, 14, 15,",
          "82:  16, 17, 18, 19, 20, 21, 22, 23,",
          "83:  24, 25, 26, 27, 28, 29, 30, 31,",
          "84:  32, 33, 34, 35, 36, 37, 38, 39,",
          "85:  40, 41, 42, 43, 44, 45, 46, 47,",
          "86:  48, 49, 50, 51, 52, 53, 54, 55,",
          "87:  56, 57, 58, 59, 60, 61, 62, 63,",
          "88:  64, 65, 66, 67, 68, 69, 70, 71,",
          "89:  72, 73, 74, 75, 76, 77, 78, 79,",
          "90:  80, 81, 82, 83, 84, 85, 86, 87,",
          "91:  88, 89, 90, 91, 92, 93, 94, 95,",
          "92:  96, 97, 98, 99, 100, 101, 102, 103,",
          "93:  104, 105, 106, 107, 108, 109, 110, 111,",
          "94:  112, 113, 114, 115, 116, 117, 118, 119,",
          "95:  120, 121, 122, 123, 124, 125, 126, 127,",
          "96:  128, 129, 130, 131, 132, 133, 134, 135,",
          "97:  136, 137, 138, 139, 140, 141, 142, 143,",
          "98:  144, 145, 146, 147, 148, 149, 150, 151,",
          "99:  152, 153, 154, 155, 0",
          "100: };",
          "102: static const char _emoji_presentation_trans_lengths[] = {",
          "103:  1, 1, 1, 1, 1, 1, 1, 1,",
          "104:  1, 1, 1, 1, 1, 1, 1, 1,",
          "105:  1, 1, 1, 1, 1, 1, 1, 1,",
          "106:  1, 1, 1, 1, 1, 1, 1, 1,",
          "107:  1, 1, 1, 1, 1, 1, 1, 1,",
          "108:  1, 1, 1, 1, 1, 1, 1, 1,",
          "109:  1, 1, 1, 1, 1, 1, 1, 1,",
          "110:  1, 1, 1, 1, 1, 1, 1, 1,",
          "111:  1, 1, 1, 1, 1, 1, 1, 1,",
          "112:  1, 1, 1, 1, 1, 1, 1, 1,",
          "113:  1, 1, 1, 1, 1, 1, 1, 1,",
          "114:  1, 1, 1, 1, 1, 1, 1, 1,",
          "115:  1, 1, 1, 1, 1, 1, 1, 1,",
          "116:  1, 1, 1, 1, 1, 1, 1, 1,",
          "117:  1, 1, 1, 1, 1, 1, 1, 1,",
          "118:  1, 1, 1, 1, 1, 1, 1, 1,",
          "119:  1, 1, 1, 1, 1, 1, 1, 1,",
          "120:  1, 1, 1, 1, 1, 1, 1, 1,",
          "121:  1, 1, 1, 1, 1, 1, 1, 1,",
          "122:  1, 1, 1, 1, 0",
          "123: };",
          "125: static const char _emoji_presentation_cond_keys[] = {",
          "126:  0, 0, 0, 0, 0, 0, 0, 0,",
          "127:  0, 0, 0, 0, 0, 0, 0, 0,",
          "128:  0, 0, 0, 0, 0, 0, 0, 0,",
          "129:  0, 0, 0, 0, 0, 0, 0, 0,",
          "130:  0, 0, 0, 0, 0, 0, 0, 0,",
          "131:  0, 0, 0, 0, 0, 0, 0, 0,",
          "132:  0, 0, 0, 0, 0, 0, 0, 0,",
          "133:  0, 0, 0, 0, 0, 0, 0, 0,",
          "134:  0, 0, 0, 0, 0, 0, 0, 0,",
          "135:  0, 0, 0, 0, 0, 0, 0, 0,",
          "136:  0, 0, 0, 0, 0, 0, 0, 0,",
          "137:  0, 0, 0, 0, 0, 0, 0, 0,",
          "138:  0, 0, 0, 0, 0, 0, 0, 0,",
          "139:  0, 0, 0, 0, 0, 0, 0, 0,",
          "140:  0, 0, 0, 0, 0, 0, 0, 0,",
          "141:  0, 0, 0, 0, 0, 0, 0, 0,",
          "142:  0, 0, 0, 0, 0, 0, 0, 0,",
          "143:  0, 0, 0, 0, 0, 0, 0, 0,",
          "144:  0, 0, 0, 0, 0, 0, 0, 0,",
          "145:  0, 0, 0, 0, 0",
          "146: };",
          "148: static const char _emoji_presentation_cond_targs[] = {",
          "149:  7, 1, 11, 5, 13, 8, 8, 8,",
          "150:  5, 7, 5, 1, 11, 7, 5, 4,",
          "151:  7, 5, 14, 15, 16, 17, 18, 6,",
          "152:  5, 7, 1, 5, 11, 5, 9, 10,",
          "153:  2, 3, 12, 0, 5, 9, 10, 2,",
          "154:  3, 1, 11, 12, 0, 5, 9, 10,",
          "155:  2, 3, 7, 1, 11, 12, 0, 5,",
          "156:  9, 10, 11, 2, 3, 7, 1, 11,",
          "157:  12, 0, 5, 9, 10, 2, 3, 1,",
          "158:  12, 0, 5, 9, 10, 2, 3, 7,",
          "159:  1, 11, 12, 4, 0, 5, 9, 10,",
          "160:  11, 2, 3, 1, 11, 12, 0, 5,",
          "161:  9, 10, 2, 3, 7, 1, 5, 11,",
          "162:  12, 0, 5, 9, 10, 11, 2, 3,",
          "163:  7, 1, 5, 11, 12, 0, 5, 7,",
          "164:  5, 1, 5, 11, 7, 5, 9, 10,",
          "165:  2, 3, 7, 1, 5, 11, 12, 4,",
          "166:  0, 5, 5, 5, 5, 5, 5, 5,",
          "167:  5, 5, 5, 5, 5, 5, 5, 5,",
          "168:  5, 5, 5, 5, 0",
          "169: };",
          "171: static const char _emoji_presentation_cond_actions[] = {",
          "172:  15, 0, 15, 11, 15, 15, 15, 15,",
          "173:  13, 15, 11, 0, 15, 15, 11, 0,",
          "174:  15, 11, 15, 15, 0, 18, 15, 18,",
          "175:  5, 15, 0, 5, 15, 9, 15, 15,",
          "176:  0, 0, 15, 0, 7, 15, 15, 0,",
          "177:  0, 0, 15, 15, 0, 7, 15, 15,",
          "178:  0, 0, 15, 0, 15, 15, 0, 7,",
          "179:  15, 15, 15, 0, 0, 15, 0, 15,",
          "180:  15, 0, 7, 15, 15, 0, 0, 0,",
          "181:  15, 0, 7, 15, 15, 0, 0, 15,",
          "182:  0, 15, 15, 0, 0, 7, 15, 15,",
          "183:  15, 0, 0, 0, 15, 15, 0, 7,",
          "184:  15, 15, 0, 0, 15, 0, 5, 15,",
          "185:  15, 0, 7, 15, 15, 15, 0, 0,",
          "186:  15, 0, 5, 15, 15, 0, 7, 15,",
          "187:  9, 0, 5, 15, 15, 9, 15, 15,",
          "188:  0, 0, 15, 0, 5, 15, 15, 0,",
          "189:  0, 7, 11, 13, 11, 11, 11, 9,",
          "190:  7, 7, 7, 7, 7, 7, 7, 7,",
          "191:  7, 9, 9, 7, 0",
          "192: };",
          "194: static const char _emoji_presentation_to_state_actions[] = {",
          "195:  0, 0, 0, 0, 0, 1, 0, 0,",
          "196:  0, 0, 0, 0, 0, 0, 0, 0,",
          "197:  0, 0, 0, 0",
          "198: };",
          "200: static const char _emoji_presentation_from_state_actions[] = {",
          "201:  0, 0, 0, 0, 0, 3, 0, 0,",
          "202:  0, 0, 0, 0, 0, 0, 0, 0,",
          "203:  0, 0, 0, 0",
          "204: };",
          "206: static const char _emoji_presentation_eof_cond_spaces[] = {",
          "207:  -1, -1, -1, -1,",
          "208:  -1, -1, -1, -1, -1, -1, -1, -1,",
          "209:  -1, -1, -1, -1, -1, -1, -1, 0",
          "210: };",
          "212: static const char _emoji_presentation_eof_cond_key_offs[] = {",
          "213:  0, 0, 0, 0, 0, 0, 0, 0,",
          "214:  0, 0, 0, 0, 0, 0, 0, 0,",
          "215:  0, 0, 0, 0",
          "216: };",
          "218: static const char _emoji_presentation_eof_cond_key_lens[] = {",
          "219:  0, 0, 0, 0, 0, 0, 0, 0,",
          "220:  0, 0, 0, 0, 0, 0, 0, 0,",
          "221:  0, 0, 0, 0",
          "222: };",
          "224: static const char _emoji_presentation_eof_cond_keys[] = {",
          "225:  0",
          "226: };",
          "228: static const short _emoji_presentation_eof_trans[] = {",
          "229:  139, 140, 141, 142, 143, 0, 144, 145,",
          "230:  146, 147, 148, 149, 150, 151, 152, 153,",
          "231:  154, 155, 156, 0",
          "232: };",
          "234: static const char _emoji_presentation_nfa_targs[] = {",
          "235:  0, 0",
          "236: };",
          "238: static const char _emoji_presentation_nfa_offsets[] = {",
          "239:  0, 0, 0, 0, 0, 0, 0, 0,",
          "240:  0, 0, 0, 0, 0, 0, 0, 0,",
          "241:  0, 0, 0, 0",
          "242: };",
          "244: static const char _emoji_presentation_nfa_push_actions[] = {",
          "245:  0, 0",
          "246: };",
          "248: static const char _emoji_presentation_nfa_pop_trans[] = {",
          "249:  0, 0",
          "250: };",
          "252: static const int emoji_presentation_start = 5;",
          "254: static const int emoji_presentation_en_text_and_emoji_run = 5;",
          "260: static gboolean",
          "261: scan_emoji_presentation (const unsigned char* buffer,",
          "262: unsigned buffer_size,",
          "263: unsigned cursor,",
          "264: unsigned* last,",
          "265: unsigned* end)",
          "266: {",
          "267:  const unsigned char *p = buffer + cursor;",
          "268:  const unsigned char *pe, *eof, *ts, *te;",
          "269:  unsigned act;",
          "270:  int cs;",
          "271:  pe = eof = buffer + buffer_size;",
          "274:  {",
          "275:   cs = (int)emoji_presentation_start;",
          "276:   ts = 0;",
          "277:   te = 0;",
          "278:   act = 0;",
          "279:  }",
          "281:  {",
          "282:   int _cpc;",
          "283:   int _klen;const char * _cekeys;unsigned int _trans = 0;const unsigned char * _keys;const char * _acts;unsigned int _nacts;  {",
          "284:    if ( p == pe )",
          "285:    goto _test_eof;",
          "286:    _resume:  {",
          "287:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_from_state_actions[cs]));",
          "288:     _nacts = (unsigned int)(*( _acts));",
          "289:     _acts += 1;",
          "290:     while ( _nacts > 0 ) {",
          "291:      switch ( (*( _acts)) ) {",
          "292:       case 1:  {",
          "293:        {",
          "294:         #line 1 \"NONE\"",
          "295:         {ts = p;}}",
          "296:        break; }",
          "297:      }",
          "298:      _nacts -= 1;",
          "299:      _acts += 1;",
          "300:     }",
          "302:     _keys = ( _emoji_presentation_trans_keys + (_emoji_presentation_key_offsets[cs]));",
          "303:     _trans = (unsigned int)_emoji_presentation_index_offsets[cs];",
          "305:     _klen = (int)_emoji_presentation_single_lengths[cs];",
          "306:     if ( _klen > 0 ) {",
          "307:      const unsigned char *_lower = _keys;",
          "308:      const unsigned char *_upper = _keys + _klen - 1;",
          "309:      const unsigned char *_mid;",
          "310:      while ( 1 ) {",
          "311:       if ( _upper < _lower )",
          "312:       break;",
          "314:       _mid = _lower + ((_upper-_lower) >> 1);",
          "315:       if ( ( (*( p))) < (*( _mid)) )",
          "316:       _upper = _mid - 1;",
          "317:       else if ( ( (*( p))) > (*( _mid)) )",
          "318:       _lower = _mid + 1;",
          "319:       else {",
          "320:        _trans += (unsigned int)(_mid - _keys);",
          "321:        goto _match;",
          "322:       }",
          "323:      }",
          "324:      _keys += _klen;",
          "325:      _trans += (unsigned int)_klen;",
          "326:     }",
          "328:     _klen = (int)_emoji_presentation_range_lengths[cs];",
          "329:     if ( _klen > 0 ) {",
          "330:      const unsigned char *_lower = _keys;",
          "331:      const unsigned char *_upper = _keys + (_klen<<1) - 2;",
          "332:      const unsigned char *_mid;",
          "333:      while ( 1 ) {",
          "334:       if ( _upper < _lower )",
          "335:       break;",
          "337:       _mid = _lower + (((_upper-_lower) >> 1) & ~1);",
          "338:       if ( ( (*( p))) < (*( _mid)) )",
          "339:       _upper = _mid - 2;",
          "340:       else if ( ( (*( p))) > (*( _mid + 1)) )",
          "341:       _lower = _mid + 2;",
          "342:       else {",
          "343:        _trans += (unsigned int)((_mid - _keys)>>1);",
          "344:        goto _match;",
          "345:       }",
          "346:      }",
          "347:      _trans += (unsigned int)_klen;",
          "348:     }",
          "350:     _match:  {",
          "351:      goto _match_cond;",
          "352:     }",
          "353:    }",
          "354:    _match_cond:  {",
          "355:     cs = (int)_emoji_presentation_cond_targs[_trans];",
          "357:     if ( _emoji_presentation_cond_actions[_trans] == 0 )",
          "358:     goto _again;",
          "360:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_cond_actions[_trans]));",
          "361:     _nacts = (unsigned int)(*( _acts));",
          "362:     _acts += 1;",
          "363:     while ( _nacts > 0 ) {",
          "364:      switch ( (*( _acts)) )",
          "365:      {",
          "366:       case 2:  {",
          "367:        {",
          "368:         #line 1 \"NONE\"",
          "369:         {te = p+1;}}",
          "370:        break; }",
          "371:       case 3:  {",
          "372:        {",
          "373:         #line 71 \"emoji_presentation_scanner.rl\"",
          "374:         {act = 1;}}",
          "375:        break; }",
          "376:       case 4:  {",
          "377:        {",
          "378:         #line 72 \"emoji_presentation_scanner.rl\"",
          "379:         {act = 2;}}",
          "380:        break; }",
          "381:       case 5:  {",
          "382:        {",
          "383:         #line 72 \"emoji_presentation_scanner.rl\"",
          "384:         {te = p+1;{",
          "385:           #line 72 \"emoji_presentation_scanner.rl\"",
          "386:           found_text_presentation_sequence }}}",
          "387:        break; }",
          "388:       case 6:  {",
          "389:        {",
          "390:         #line 71 \"emoji_presentation_scanner.rl\"",
          "391:         {te = p;p = p - 1;{",
          "392:           #line 71 \"emoji_presentation_scanner.rl\"",
          "393:           found_emoji_presentation_sequence }}}",
          "394:        break; }",
          "395:       case 7:  {",
          "396:        {",
          "397:         #line 72 \"emoji_presentation_scanner.rl\"",
          "398:         {te = p;p = p - 1;{",
          "399:           #line 72 \"emoji_presentation_scanner.rl\"",
          "400:           found_text_presentation_sequence }}}",
          "401:        break; }",
          "402:       case 8:  {",
          "403:        {",
          "404:         #line 71 \"emoji_presentation_scanner.rl\"",
          "405:         {p = ((te))-1;",
          "406:          {",
          "407:           #line 71 \"emoji_presentation_scanner.rl\"",
          "408:           found_emoji_presentation_sequence }}}",
          "409:        break; }",
          "410:       case 9:  {",
          "411:        {",
          "412:         #line 1 \"NONE\"",
          "413:         {switch( act ) {",
          "414:           case 1:  {",
          "415:            p = ((te))-1;",
          "416:            {",
          "417:             #line 71 \"emoji_presentation_scanner.rl\"",
          "418:             found_emoji_presentation_sequence } break; }",
          "419:           case 2:  {",
          "420:            p = ((te))-1;",
          "421:            {",
          "422:             #line 72 \"emoji_presentation_scanner.rl\"",
          "423:             found_text_presentation_sequence } break; }",
          "424:          }}",
          "425:        }",
          "426:        break; }",
          "427:      }",
          "428:      _nacts -= 1;",
          "429:      _acts += 1;",
          "430:     }",
          "433:    }",
          "434:    _again:  {",
          "435:     _acts = ( _emoji_presentation_actions + (_emoji_presentation_to_state_actions[cs]));",
          "436:     _nacts = (unsigned int)(*( _acts));",
          "437:     _acts += 1;",
          "438:     while ( _nacts > 0 ) {",
          "439:      switch ( (*( _acts)) ) {",
          "440:       case 0:  {",
          "441:        {",
          "442:         #line 1 \"NONE\"",
          "443:         {ts = 0;}}",
          "444:        break; }",
          "445:      }",
          "446:      _nacts -= 1;",
          "447:      _acts += 1;",
          "448:     }",
          "450:     p += 1;",
          "451:     if ( p != pe )",
          "452:     goto _resume;",
          "453:    }",
          "454:    _test_eof:  { {}",
          "455:     if ( p == eof )",
          "456:     {",
          "457:      if ( _emoji_presentation_eof_cond_spaces[cs] != -1 ) {",
          "458:       _cekeys = ( _emoji_presentation_eof_cond_keys + (_emoji_presentation_eof_cond_key_offs[cs]));",
          "459:       _klen = (int)_emoji_presentation_eof_cond_key_lens[cs];",
          "460:       _cpc = 0;",
          "461:       {",
          "462:        const char *_lower = _cekeys;",
          "463:        const char *_upper = _cekeys + _klen - 1;",
          "464:        const char *_mid;",
          "465:        while ( 1 ) {",
          "466:         if ( _upper < _lower )",
          "467:         break;",
          "469:         _mid = _lower + ((_upper-_lower) >> 1);",
          "470:         if ( _cpc < (int)(*( _mid)) )",
          "471:         _upper = _mid - 1;",
          "472:         else if ( _cpc > (int)(*( _mid)) )",
          "473:         _lower = _mid + 1;",
          "474:         else {",
          "475:          goto _ok;",
          "476:         }",
          "477:        }",
          "478:        cs = -1;",
          "479:        goto _out;",
          "480:       }",
          "481:       _ok: {}",
          "482:      }",
          "483:      if ( _emoji_presentation_eof_trans[cs] > 0 ) {",
          "484:       _trans = (unsigned int)_emoji_presentation_eof_trans[cs] - 1;",
          "485:       goto _match_cond;",
          "486:      }",
          "487:     }",
          "489:    }",
          "490:    _out:  { {}",
          "491:    }",
          "492:   }",
          "493:  }",
          "495:  return FALSE;",
          "496: }",
          "",
          "---------------"
        ],
        "pango/emoji_presentation_scanner.rl||pango/emoji_presentation_scanner.rl": [
          "File: pango/emoji_presentation_scanner.rl -> pango/emoji_presentation_scanner.rl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: %%{",
          "6:   machine emoji_presentation;",
          "7:   alphtype unsigned char;",
          "8:   write data noerror nofinal noentry;",
          "9: }%%",
          "11: %%{",
          "13: EMOJI = 0;",
          "14: EMOJI_TEXT_PRESENTATION = 1;",
          "15: EMOJI_EMOJI_PRESENTATION = 2;",
          "16: EMOJI_MODIFIER_BASE = 3;",
          "17: EMOJI_MODIFIER = 4;",
          "18: EMOJI_VS_BASE = 5;",
          "19: REGIONAL_INDICATOR = 6;",
          "20: KEYCAP_BASE = 7;",
          "21: COMBINING_ENCLOSING_KEYCAP = 8;",
          "22: COMBINING_ENCLOSING_CIRCLE_BACKSLASH = 9;",
          "23: ZWJ = 10;",
          "24: VS15 = 11;",
          "25: VS16 = 12;",
          "26: TAG_BASE = 13;",
          "27: TAG_SEQUENCE = 14;",
          "28: TAG_TERM = 15;",
          "30: any_emoji =  EMOJI_TEXT_PRESENTATION | EMOJI_EMOJI_PRESENTATION |  KEYCAP_BASE |",
          "31:   EMOJI_MODIFIER_BASE | TAG_BASE | EMOJI;",
          "33: emoji_combining_encloding_circle_backslash_sequence = any_emoji",
          "34:   COMBINING_ENCLOSING_CIRCLE_BACKSLASH;",
          "36: # This could be sharper than any_emoji by restricting this only to valid",
          "37: # variation sequences:",
          "38: # https://www.unicode.org/Public/emoji/11.0/emoji-variation-sequences.txt",
          "39: # However, implementing",
          "40: # https://www.unicode.org/reports/tr51/#def_emoji_presentation_sequence is",
          "41: # sufficient for our purposes here.",
          "42: emoji_presentation_sequence = any_emoji VS16;",
          "44: emoji_modifier_sequence = EMOJI_MODIFIER_BASE EMOJI_MODIFIER;",
          "46: emoji_flag_sequence = REGIONAL_INDICATOR REGIONAL_INDICATOR;",
          "48: # Here we only allow the valid tag sequences",
          "49: # https://www.unicode.org/reports/tr51/#valid-emoji-tag-sequences, instead of",
          "50: # all well-formed ones defined in",
          "51: # https://www.unicode.org/reports/tr51/#def_emoji_tag_sequence",
          "52: emoji_tag_sequence = TAG_BASE TAG_SEQUENCE+ TAG_TERM;",
          "54: emoji_keycap_sequence = KEYCAP_BASE COMBINING_ENCLOSING_KEYCAP;",
          "56: emoji_zwj_element =  emoji_presentation_sequence | emoji_modifier_sequence | any_emoji;",
          "58: emoji_zwj_sequence = emoji_zwj_element ( ZWJ emoji_zwj_element )+;",
          "60: emoji_presentation = EMOJI_EMOJI_PRESENTATION | TAG_BASE | EMOJI_MODIFIER_BASE |",
          "61:   emoji_presentation_sequence | emoji_modifier_sequence | emoji_flag_sequence |",
          "62:   emoji_tag_sequence | emoji_keycap_sequence | emoji_zwj_sequence |",
          "63:   emoji_combining_encloding_circle_backslash_sequence;",
          "65: emoji_run = emoji_presentation+;",
          "67: text_presentation_emoji = any_emoji VS15;",
          "68: text_run = text_presentation_emoji | any;",
          "70: text_and_emoji_run := |*",
          "71: emoji_run => { found_emoji_presentation_sequence };",
          "72: text_run => { found_text_presentation_sequence };",
          "75: }%%",
          "77: static gboolean",
          "78: scan_emoji_presentation (const unsigned char* buffer,",
          "79:                          unsigned buffer_size,",
          "80:                          unsigned cursor,",
          "81:                          unsigned* last,",
          "82:                          unsigned* end)",
          "83: {",
          "84:   const unsigned char *p = buffer + cursor;",
          "85:   const unsigned char *pe, *eof, *ts, *te;",
          "86:   unsigned act;",
          "87:   int cs;",
          "88:   pe = eof = buffer + buffer_size;",
          "90:   %%{",
          "91:     write init;",
          "92:     write exec;",
          "93:   }%%",
          "94:   return FALSE;",
          "95: }",
          "",
          "---------------"
        ],
        "pango/pango-emoji-private.h||pango/pango-emoji-private.h": [
          "File: pango/pango-emoji-private.h -> pango/pango-emoji-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   const gchar *start;",
          "34:   const gchar *end;",
          "35:   gboolean is_emoji;",
          "36: };",
          "38: PangoEmojiIter *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   const gchar *token_start;",
          "38:   const gchar *token_end;",
          "40:   const unsigned char *types;",
          "41:   unsigned int n_chars;",
          "42:   unsigned int cursor;",
          "",
          "---------------"
        ],
        "pango/pango-emoji.c||pango/pango-emoji.c": [
          "File: pango/pango-emoji.c -> pango/pango-emoji.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: const gunichar kCombiningEnclosingCircleBackslashCharacter = 0x20E0;",
          "107: const gunichar kCombiningEnclosingKeycapCharacter = 0x20E3;",
          "114: const gunichar kVariationSelector15Character = 0xFE0E;",
          "115: const gunichar kVariationSelector16Character = 0xFE0F;",
          "117: const gunichar kZeroWidthJoinerCharacter = 0x200D;",
          "129: {",
          "135:   if (codepoint == kCombiningEnclosingKeycapCharacter)",
          "143:   if (_pango_Is_Emoji_Text_Default (codepoint))",
          "147: }",
          "150: PangoEmojiIter *",
          "151: _pango_emoji_iter_init (PangoEmojiIter *iter,",
          "152:    const char     *text,",
          "153:    int             length)",
          "154: {",
          "156:   if (length >= 0)",
          "157:     iter->text_end = text + length;",
          "158:   else",
          "159:     iter->text_end = text + strlen (text);",
          "165:   _pango_emoji_iter_next (iter);",
          "",
          "[Removed Lines]",
          "108: const gunichar kEyeCharacter = 0x1F441;",
          "109: const gunichar kFemaleSignCharacter = 0x2640;",
          "110: const gunichar kLeftSpeechBubbleCharacter = 0x1F5E8;",
          "111: const gunichar kMaleSignCharacter = 0x2642;",
          "112: const gunichar kRainbowCharacter = 0x1F308;",
          "113: const gunichar kStaffOfAesculapiusCharacter = 0x2695;",
          "116: const gunichar kWavingWhiteFlagCharacter = 0x1F3F3;",
          "120: typedef enum {",
          "121:   PANGO_EMOJI_TYPE_INVALID,",
          "125: } PangoEmojiType;",
          "127: static PangoEmojiType",
          "128: _pango_get_emoji_type (gunichar codepoint)",
          "131:   if (_pango_Is_Emoji_Keycap_Base (codepoint) ||",
          "132:       _pango_Is_Regional_Indicator (codepoint))",
          "133:     return PANGO_EMOJI_TYPE_TEXT;",
          "136:     return PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "138:   if (_pango_Is_Emoji_Emoji_Default (codepoint) ||",
          "139:       _pango_Is_Emoji_Modifier_Base (codepoint) ||",
          "140:       _pango_Is_Emoji_Modifier (codepoint))",
          "141:     return PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "144:     return PANGO_EMOJI_TYPE_EMOJI_TEXT;",
          "146:   return PANGO_EMOJI_TYPE_TEXT;",
          "155:   iter->text_start = text;",
          "161:   iter->start = text;",
          "162:   iter->end = text;",
          "",
          "[Added Lines]",
          "128: enum PangoEmojiScannerCategory {",
          "129:   EMOJI = 0,",
          "130:   EMOJI_TEXT_PRESENTATION = 1,",
          "131:   EMOJI_EMOJI_PRESENTATION = 2,",
          "132:   EMOJI_MODIFIER_BASE = 3,",
          "133:   EMOJI_MODIFIER = 4,",
          "134:   EMOJI_VS_BASE = 5,",
          "135:   REGIONAL_INDICATOR = 6,",
          "136:   KEYCAP_BASE = 7,",
          "137:   COMBINING_ENCLOSING_KEYCAP = 8,",
          "138:   COMBINING_ENCLOSING_CIRCLE_BACKSLASH = 9,",
          "139:   ZWJ = 10,",
          "140:   VS15 = 11,",
          "141:   VS16 = 12,",
          "142:   TAG_BASE = 13,",
          "143:   TAG_SEQUENCE = 14,",
          "144:   TAG_TERM = 15,",
          "145:   kMaxEmojiScannerCategory = 16",
          "146: };",
          "148: static unsigned char",
          "149: _pango_EmojiSegmentationCategory (gunichar codepoint)",
          "153:     return COMBINING_ENCLOSING_KEYCAP;",
          "154:   if (codepoint == kCombiningEnclosingCircleBackslashCharacter)",
          "155:     return COMBINING_ENCLOSING_CIRCLE_BACKSLASH;",
          "156:   if (codepoint == kZeroWidthJoinerCharacter)",
          "157:     return ZWJ;",
          "158:   if (codepoint == kVariationSelector15Character)",
          "159:     return VS15;",
          "160:   if (codepoint == kVariationSelector16Character)",
          "161:     return VS16;",
          "162:   if (codepoint == 0x1F3F4)",
          "163:     return TAG_BASE;",
          "164:   if ((codepoint >= 0xE0030 && codepoint <= 0xE0039) ||",
          "165:       (codepoint >= 0xE0061 && codepoint <= 0xE007A))",
          "166:     return TAG_SEQUENCE;",
          "167:   if (codepoint == 0xE007F)",
          "168:     return TAG_TERM;",
          "169:   if (_pango_Is_Emoji_Modifier_Base (codepoint))",
          "170:     return EMOJI_MODIFIER_BASE;",
          "171:   if (_pango_Is_Emoji_Modifier (codepoint))",
          "172:     return EMOJI_MODIFIER;",
          "173:   if (_pango_Is_Regional_Indicator (codepoint))",
          "174:     return REGIONAL_INDICATOR;",
          "175:   if (_pango_Is_Emoji_Keycap_Base (codepoint))",
          "176:     return KEYCAP_BASE;",
          "178:   if (_pango_Is_Emoji_Emoji_Default (codepoint))",
          "179:     return EMOJI_EMOJI_PRESENTATION;",
          "181:     return EMOJI_TEXT_PRESENTATION;",
          "182:   if (_pango_Is_Emoji (codepoint))",
          "183:     return EMOJI;",
          "186:   return kMaxEmojiScannerCategory;",
          "189: #define found_text_presentation_sequence",
          "190: #define found_emoji_presentation_sequence                                \\",
          "191:   {                                                                      \\",
          "192:     if (0) g_print (\"emoji %ld..%ld\\n\", ts - buffer, te - buffer);       \\",
          "195:     return TRUE;                                                         \\",
          "196:   }",
          "198: #include \"emoji_presentation_scanner.c\"",
          "206:   unsigned int n_chars = g_utf8_strlen (text, length);",
          "207:   unsigned char *types = g_malloc (n_chars);",
          "208:   unsigned int i;",
          "209:   const char *p;",
          "211:   p = text;",
          "212:   for (i = 0; i < n_chars; i++)",
          "213:   {",
          "214:     types[i] = _pango_EmojiSegmentationCategory (g_utf8_get_char (p));",
          "215:     p = g_utf8_next_char (p);",
          "216:   }",
          "218:   iter->text_start = iter->start = iter->end = iter->token_start = iter->token_end = text;",
          "223:   iter->is_emoji = FALSE;",
          "225:   iter->types = types;",
          "226:   iter->n_chars = n_chars;",
          "227:   iter->cursor = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: void",
          "171: _pango_emoji_iter_fini (PangoEmojiIter *iter)",
          "172: {",
          "173: }",
          "177: gboolean",
          "178: _pango_emoji_iter_next (PangoEmojiIter *iter)",
          "179: {",
          "183:     return FALSE;",
          "185:   iter->start = iter->end;",
          "188:     {",
          "210:     }",
          "213:     {",
          "249:     }",
          "254:     {",
          "262:       return TRUE;",
          "263:     }",
          "269: }",
          "",
          "[Removed Lines]",
          "175: #define PANGO_EMOJI_TYPE_IS_EMOJI(typ) ((typ) == PANGO_EMOJI_TYPE_EMOJI_EMOJI)",
          "180:   PangoEmojiType current_emoji_type = PANGO_EMOJI_TYPE_INVALID;",
          "182:   if (iter->end == iter->text_end)",
          "187:   for (; iter->end < iter->text_end; iter->end = g_utf8_next_char (iter->end))",
          "189:       gunichar ch = g_utf8_get_char (iter->end);",
          "197:     if ((!(ch == kZeroWidthJoinerCharacter && !iter->is_emoji) &&",
          "198:   ch != kVariationSelector15Character &&",
          "199:   ch != kVariationSelector16Character &&",
          "200:   ch != kCombiningEnclosingCircleBackslashCharacter &&",
          "201:   !_pango_Is_Regional_Indicator(ch) &&",
          "202:   !((ch == kLeftSpeechBubbleCharacter ||",
          "203:      ch == kRainbowCharacter ||",
          "204:      ch == kMaleSignCharacter ||",
          "205:      ch == kFemaleSignCharacter ||",
          "206:      ch == kStaffOfAesculapiusCharacter) &&",
          "207:     !iter->is_emoji)) ||",
          "208:  current_emoji_type == PANGO_EMOJI_TYPE_INVALID) {",
          "209:       current_emoji_type = _pango_get_emoji_type (ch);",
          "214:       gunichar peek_char = g_utf8_get_char (g_utf8_next_char (iter->end));",
          "217:       if (current_emoji_type ==",
          "218:        PANGO_EMOJI_TYPE_EMOJI_EMOJI &&",
          "219:    peek_char == kVariationSelector15Character) {",
          "220:  current_emoji_type = PANGO_EMOJI_TYPE_EMOJI_TEXT;",
          "221:       }",
          "223:       if ((current_emoji_type ==",
          "224:         PANGO_EMOJI_TYPE_EMOJI_TEXT ||",
          "225:     _pango_Is_Emoji_Keycap_Base(ch)) &&",
          "226:    peek_char == kVariationSelector16Character) {",
          "227:  current_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "228:       }",
          "231:       if (_pango_Is_Emoji_Keycap_Base(ch) &&",
          "232:    peek_char == kCombiningEnclosingKeycapCharacter) {",
          "233:  current_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "234:       };",
          "237:       if (_pango_Is_Regional_Indicator(ch) &&",
          "238:    _pango_Is_Regional_Indicator(peek_char)) {",
          "239:  current_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "240:       }",
          "244:       if ((ch == kEyeCharacter ||",
          "245:     ch == kWavingWhiteFlagCharacter) &&",
          "246:    peek_char == kZeroWidthJoinerCharacter) {",
          "247:  current_emoji_type = PANGO_EMOJI_TYPE_EMOJI_EMOJI;",
          "248:       }",
          "251:     if (iter->is_emoji == (gboolean) 2)",
          "252:       iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);",
          "253:     if (iter->is_emoji == PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type))",
          "255:       iter->is_emoji = !PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);",
          "259:       if (iter->start == iter->end)",
          "260:         iter->end = g_utf8_next_char (iter->end);",
          "264:   }",
          "266:   iter->is_emoji = PANGO_EMOJI_TYPE_IS_EMOJI (current_emoji_type);",
          "268:   return TRUE;",
          "",
          "[Added Lines]",
          "237:   g_free (iter->types);",
          "243:   if (iter->end >= iter->text_end)",
          "253:   if (iter->start >= iter->token_end)",
          "256:       unsigned int token_start, token_end;",
          "257:       if (!scan_emoji_presentation (iter->types, iter->n_chars, iter->cursor,",
          "258:         &token_start, &token_end))",
          "259:  {",
          "262:    iter->end = iter->text_end;",
          "263:    iter->is_emoji = FALSE;",
          "265:    return TRUE;",
          "266:  };",
          "268:       g_assert (iter->cursor <= token_start && token_start < token_end && token_end <= iter->n_chars);",
          "269:       iter->token_start = g_utf8_offset_to_pointer (iter->token_end, token_start - iter->cursor);",
          "270:       iter->token_end   = g_utf8_offset_to_pointer (iter->token_end, token_end   - iter->cursor);",
          "271:       iter->cursor = token_end;",
          "274:   if (iter->start < iter->token_start)",
          "278:       iter->end = iter->token_start;",
          "279:       iter->is_emoji = FALSE;",
          "280:       return TRUE;",
          "283:   if (iter->start >= iter->token_start && iter->start < iter->token_end)",
          "286:       iter->end = iter->token_end;",
          "287:       iter->is_emoji = TRUE;",
          "291:   g_assert_not_reached ();",
          "292:   return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}