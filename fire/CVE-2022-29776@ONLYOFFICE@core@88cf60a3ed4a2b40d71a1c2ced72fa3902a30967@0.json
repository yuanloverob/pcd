{
  "cve_id": "CVE-2022-29776",
  "cve_desc": "Onlyoffice Document Server v6.0.0 and below and Core 6.1.0.26 and below were discovered to contain a stack overflow via the component DesktopEditor/common/File.cpp.",
  "repo": "ONLYOFFICE/core",
  "patch_hash": "88cf60a3ed4a2b40d71a1c2ced72fa3902a30967",
  "patch_info": {
    "commit_hash": "88cf60a3ed4a2b40d71a1c2ced72fa3902a30967",
    "repo": "ONLYOFFICE/core",
    "commit_url": "https://github.com/ONLYOFFICE/core/commit/88cf60a3ed4a2b40d71a1c2ced72fa3902a30967",
    "files": [
      "DesktopEditor/common/File.cpp",
      "DesktopEditor/cximage/CxImage/xfile.h",
      "DesktopEditor/cximage/CxImage/ximabmp.cpp",
      "DesktopEditor/cximage/CxImage/ximage.cpp",
      "DesktopEditor/cximage/CxImage/ximage.h",
      "DesktopEditor/cximage/CxImage/ximaico.cpp",
      "DesktopEditor/cximage/CxImage/ximainfo.cpp",
      "DesktopEditor/cximage/CxImage/ximapcx.cpp",
      "DesktopEditor/cximage/CxImage/ximatif.cpp",
      "DesktopEditor/cximage/CxImage/xiofile.h",
      "DesktopEditor/cximage/CxImage/xmemfile.cpp",
      "DesktopEditor/cximage/CxImage/xmemfile.h",
      "DesktopEditor/cximage/jasper/jpc/jpc_dec.c",
      "DesktopEditor/cximage/raw/libdcr.c",
      "DesktopEditor/cximage/tiff/tif_dirread.c",
      "DesktopEditor/cximage/tiff/tif_ojpeg.c",
      "DesktopEditor/fontengine/fontconverter/FontFileType1.cpp",
      "DesktopEditor/fontengine/fontconverter/FontFileType1.h"
    ],
    "message": "Fix 25 errors",
    "before_after_code_files": [
      "DesktopEditor/common/File.cpp||DesktopEditor/common/File.cpp",
      "DesktopEditor/cximage/CxImage/xfile.h||DesktopEditor/cximage/CxImage/xfile.h",
      "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp",
      "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp",
      "DesktopEditor/cximage/CxImage/ximage.h||DesktopEditor/cximage/CxImage/ximage.h",
      "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp",
      "DesktopEditor/cximage/CxImage/ximainfo.cpp||DesktopEditor/cximage/CxImage/ximainfo.cpp",
      "DesktopEditor/cximage/CxImage/ximapcx.cpp||DesktopEditor/cximage/CxImage/ximapcx.cpp",
      "DesktopEditor/cximage/CxImage/ximatif.cpp||DesktopEditor/cximage/CxImage/ximatif.cpp",
      "DesktopEditor/cximage/CxImage/xiofile.h||DesktopEditor/cximage/CxImage/xiofile.h",
      "DesktopEditor/cximage/CxImage/xmemfile.cpp||DesktopEditor/cximage/CxImage/xmemfile.cpp",
      "DesktopEditor/cximage/CxImage/xmemfile.h||DesktopEditor/cximage/CxImage/xmemfile.h",
      "DesktopEditor/cximage/jasper/jpc/jpc_dec.c||DesktopEditor/cximage/jasper/jpc/jpc_dec.c",
      "DesktopEditor/cximage/raw/libdcr.c||DesktopEditor/cximage/raw/libdcr.c",
      "DesktopEditor/cximage/tiff/tif_dirread.c||DesktopEditor/cximage/tiff/tif_dirread.c",
      "DesktopEditor/cximage/tiff/tif_ojpeg.c||DesktopEditor/cximage/tiff/tif_ojpeg.c",
      "DesktopEditor/fontengine/fontconverter/FontFileType1.cpp||DesktopEditor/fontengine/fontconverter/FontFileType1.cpp",
      "DesktopEditor/fontengine/fontconverter/FontFileType1.h||DesktopEditor/fontengine/fontconverter/FontFileType1.h"
    ]
  },
  "patch_diff": {
    "DesktopEditor/common/File.cpp||DesktopEditor/common/File.cpp": [
      "File: DesktopEditor/common/File.cpp -> DesktopEditor/common/File.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:             else if (0x00 == (byteMain & 0x20))",
      "160:             {",
      "164:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "165:                 lIndex += 2;",
      "166:             }",
      "167:             else if (0x00 == (byteMain & 0x10))",
      "168:             {",
      "173:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "174:                 lIndex += 3;",
      "175:             }",
      "176:             else if (0x00 == (byteMain & 0x0F))",
      "177:             {",
      "183:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "184:                 lIndex += 4;",
      "185:             }",
      "186:             else if (0x00 == (byteMain & 0x08))",
      "187:             {",
      "193:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "194:                 lIndex += 4;",
      "195:             }",
      "196:             else if (0x00 == (byteMain & 0x04))",
      "197:             {",
      "204:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "205:                 lIndex += 5;",
      "206:             }",
      "207:             else",
      "208:             {",
      "216:                 pUnicodeString[lIndexUnicode++] = (WCHAR)(val);",
      "217:                 lIndex += 5;",
      "218:             }",
      "",
      "[Removed Lines]",
      "162:                 int val = (int)(((byteMain & 0x1F) << 6) |",
      "163:                     (pBuffer[lIndex + 1] & 0x3F));",
      "170:                 int val = (int)(((byteMain & 0x0F) << 12) |",
      "171:                     ((pBuffer[lIndex + 1] & 0x3F) << 6) |",
      "172:                     (pBuffer[lIndex + 2] & 0x3F));",
      "179:                 int val = (int)(((byteMain & 0x07) << 18) |",
      "180:                     ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "181:                     ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "182:                     (pBuffer[lIndex + 3] & 0x3F));",
      "189:                 int val = (int)(((byteMain & 0x07) << 18) |",
      "190:                     ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "191:                     ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "192:                     (pBuffer[lIndex + 3] & 0x3F));",
      "199:                 int val = (int)(((byteMain & 0x03) << 24) |",
      "200:                     ((pBuffer[lIndex + 1] & 0x3F) << 18) |",
      "201:                     ((pBuffer[lIndex + 2] & 0x3F) << 12) |",
      "202:                     ((pBuffer[lIndex + 3] & 0x3F) << 6) |",
      "203:                     (pBuffer[lIndex + 4] & 0x3F));",
      "210:                 int val = (int)(((byteMain & 0x01) << 30) |",
      "211:                     ((pBuffer[lIndex + 1] & 0x3F) << 24) |",
      "212:                     ((pBuffer[lIndex + 2] & 0x3F) << 18) |",
      "213:                     ((pBuffer[lIndex + 3] & 0x3F) << 12) |",
      "214:                     ((pBuffer[lIndex + 4] & 0x3F) << 6) |",
      "215:                     (pBuffer[lIndex + 5] & 0x3F));",
      "",
      "[Added Lines]",
      "162:                 int val = 0;",
      "163:                 if ((lIndex + 1) < lCount)",
      "164:                 {",
      "165:                     val = (int)(((byteMain & 0x1F) << 6) |",
      "166:                                 (pBuffer[lIndex + 1] & 0x3F));",
      "167:                 }",
      "175:                 int val = 0;",
      "176:                 if ((lIndex + 2) < lCount)",
      "177:                 {",
      "178:                     val = (int)(((byteMain & 0x0F) << 12) |",
      "179:                                 ((pBuffer[lIndex + 1] & 0x3F) << 6) |",
      "180:                                 (pBuffer[lIndex + 2] & 0x3F));",
      "181:                 }",
      "189:                 int val = 0;",
      "190:                 if ((lIndex + 3) < lCount)",
      "191:                 {",
      "192:                     val = (int)(((byteMain & 0x07) << 18) |",
      "193:                                 ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "194:                                 ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "195:                                 (pBuffer[lIndex + 3] & 0x3F));",
      "196:                 }",
      "204:                 int val = 0;",
      "205:                 if ((lIndex + 3) < lCount)",
      "206:                 {",
      "207:                     val = (int)(((byteMain & 0x07) << 18) |",
      "208:                                 ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "209:                                 ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "210:                                 (pBuffer[lIndex + 3] & 0x3F));",
      "211:                 }",
      "219:                 int val = 0;",
      "220:                 if ((lIndex + 4) < lCount)",
      "221:                 {",
      "222:                     val = (int)(((byteMain & 0x03) << 24) |",
      "223:                                 ((pBuffer[lIndex + 1] & 0x3F) << 18) |",
      "224:                                 ((pBuffer[lIndex + 2] & 0x3F) << 12) |",
      "225:                                 ((pBuffer[lIndex + 3] & 0x3F) << 6) |",
      "226:                                 (pBuffer[lIndex + 4] & 0x3F));",
      "227:                 }",
      "235:                 int val = 0;",
      "236:                 if ((lIndex + 5) < lCount)",
      "237:                 {",
      "238:                     val = (int)(((byteMain & 0x01) << 30) |",
      "239:                                 ((pBuffer[lIndex + 1] & 0x3F) << 24) |",
      "240:                                 ((pBuffer[lIndex + 2] & 0x3F) << 18) |",
      "241:                                 ((pBuffer[lIndex + 3] & 0x3F) << 12) |",
      "242:                                 ((pBuffer[lIndex + 4] & 0x3F) << 6) |",
      "243:                                 (pBuffer[lIndex + 5] & 0x3F));",
      "244:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:             else if (0x00 == (byteMain & 0x20))",
      "243:             {",
      "248:                 lIndex += 2;",
      "249:             }",
      "250:             else if (0x00 == (byteMain & 0x10))",
      "251:             {",
      "257:                 WriteUtf16_WCHAR(val, pUnicodeString);",
      "258:                 lIndex += 3;",
      "",
      "[Removed Lines]",
      "245:                 int val = (int)(((byteMain & 0x1F) << 6) |",
      "246:                     (pBuffer[lIndex + 1] & 0x3F));",
      "253:                 int val = (int)(((byteMain & 0x0F) << 12) |",
      "254:                     ((pBuffer[lIndex + 1] & 0x3F) << 6) |",
      "255:                     (pBuffer[lIndex + 2] & 0x3F));",
      "",
      "[Added Lines]",
      "275:                 int val = 0;",
      "276:                 if ((lIndex + 1) < lCount)",
      "277:                 {",
      "278:                     val = (int)(((byteMain & 0x1F) << 6) |",
      "279:                                 (pBuffer[lIndex + 1] & 0x3F));",
      "280:                 }",
      "288:                 int val = 0;",
      "289:                 if ((lIndex + 2) < lCount)",
      "290:                 {",
      "291:                     val = (int)(((byteMain & 0x0F) << 12) |",
      "292:                                 ((pBuffer[lIndex + 1] & 0x3F) << 6) |",
      "293:                                 (pBuffer[lIndex + 2] & 0x3F));",
      "294:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "260:             else if (0x00 == (byteMain & 0x0F))",
      "261:             {",
      "268:                 WriteUtf16_WCHAR(val, pUnicodeString);",
      "269:                 lIndex += 4;",
      "",
      "[Removed Lines]",
      "263:                 int val = (int)(((byteMain & 0x07) << 18) |",
      "264:                     ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "265:                     ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "266:                     (pBuffer[lIndex + 3] & 0x3F));",
      "",
      "[Added Lines]",
      "302:                 int val = 0;",
      "303:                 if ((lIndex + 3) < lCount)",
      "304:                 {",
      "305:                     val = (int)(((byteMain & 0x07) << 18) |",
      "306:                                 ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "307:                                 ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "308:                                 (pBuffer[lIndex + 3] & 0x3F));",
      "309:                 }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "271:             else if (0x00 == (byteMain & 0x08))",
      "272:             {",
      "279:                 WriteUtf16_WCHAR(val, pUnicodeString);",
      "280:                 lIndex += 4;",
      "",
      "[Removed Lines]",
      "274:                 int val = (int)(((byteMain & 0x07) << 18) |",
      "275:                     ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "276:                     ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "277:                     (pBuffer[lIndex + 3] & 0x3F));",
      "",
      "[Added Lines]",
      "317:                 int val = 0;",
      "318:                 if ((lIndex + 3) < lCount)",
      "319:                 {",
      "320:                     val = (int)(((byteMain & 0x07) << 18) |",
      "321:                                 ((pBuffer[lIndex + 1] & 0x3F) << 12) |",
      "322:                                 ((pBuffer[lIndex + 2] & 0x3F) << 6) |",
      "323:                                 (pBuffer[lIndex + 3] & 0x3F));",
      "324:                 }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "282:             else if (0x00 == (byteMain & 0x04))",
      "283:             {",
      "291:                 WriteUtf16_WCHAR(val, pUnicodeString);",
      "292:                 lIndex += 5;",
      "",
      "[Removed Lines]",
      "285:                 int val = (int)(((byteMain & 0x03) << 24) |",
      "286:                     ((pBuffer[lIndex + 1] & 0x3F) << 18) |",
      "287:                     ((pBuffer[lIndex + 2] & 0x3F) << 12) |",
      "288:                     ((pBuffer[lIndex + 3] & 0x3F) << 6) |",
      "289:                     (pBuffer[lIndex + 4] & 0x3F));",
      "",
      "[Added Lines]",
      "332:                 int val = 0;",
      "333:                 if ((lIndex + 4) < lCount)",
      "334:                 {",
      "335:                     val = (int)(((byteMain & 0x03) << 24) |",
      "336:                                 ((pBuffer[lIndex + 1] & 0x3F) << 18) |",
      "337:                                 ((pBuffer[lIndex + 2] & 0x3F) << 12) |",
      "338:                                 ((pBuffer[lIndex + 3] & 0x3F) << 6) |",
      "339:                                 (pBuffer[lIndex + 4] & 0x3F));",
      "340:                 }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "294:             else",
      "295:             {",
      "304:                 WriteUtf16_WCHAR(val, pUnicodeString);",
      "305:                 lIndex += 5;",
      "",
      "[Removed Lines]",
      "297:                 int val = (int)(((byteMain & 0x01) << 30) |",
      "298:                     ((pBuffer[lIndex + 1] & 0x3F) << 24) |",
      "299:                     ((pBuffer[lIndex + 2] & 0x3F) << 18) |",
      "300:                     ((pBuffer[lIndex + 3] & 0x3F) << 12) |",
      "301:                     ((pBuffer[lIndex + 4] & 0x3F) << 6) |",
      "302:                     (pBuffer[lIndex + 5] & 0x3F));",
      "",
      "[Added Lines]",
      "348:                 int val = 0;",
      "349:                 if ((lIndex + 5) < lCount)",
      "350:                 {",
      "351:                     val = (int)(((byteMain & 0x01) << 30) |",
      "352:                                 ((pBuffer[lIndex + 1] & 0x3F) << 24) |",
      "353:                                 ((pBuffer[lIndex + 2] & 0x3F) << 18) |",
      "354:                                 ((pBuffer[lIndex + 3] & 0x3F) << 12) |",
      "355:                                 ((pBuffer[lIndex + 4] & 0x3F) << 6) |",
      "356:                                 (pBuffer[lIndex + 5] & 0x3F));",
      "357:                 }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/xfile.h||DesktopEditor/cximage/CxImage/xfile.h": [
      "File: DesktopEditor/cximage/CxImage/xfile.h -> DesktopEditor/cximage/CxImage/xfile.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: class DLL_EXP CxFile",
      "50: {",
      "51: public:",
      "55:  virtual bool Close() = 0;",
      "57:  virtual size_t Write(const void *buffer, size_t size, size_t count) = 0;",
      "58:  virtual bool Seek(int32_t offset, int32_t origin) = 0;",
      "59:  virtual int32_t Tell() = 0;",
      "",
      "[Removed Lines]",
      "52:  CxFile(void) { };",
      "53:  virtual ~CxFile() { };",
      "56:  virtual size_t Read(void *buffer, size_t size, size_t count) = 0;",
      "",
      "[Added Lines]",
      "52:  CxFile(void) { }",
      "53:  virtual ~CxFile() { }",
      "56:  virtual size_t Read(void *buffer, size_t size, size_t count, void* limit_start = NULL, void* limit_end = NULL) = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:  virtual int32_t Scanf(const char *format, void* output) = 0;",
      "73: };",
      "75: #endif //__xfile_h",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: static void clamp_buffer(void*& buffer, size_t& size, void* limit_start, void* limit_end)",
      "76: {",
      "77:  if (NULL == limit_start || NULL == limit_end)",
      "78:   return;",
      "80:  uint8_t* _buffer = (uint8_t*)buffer;",
      "81:  uint8_t* _limit_start = (uint8_t*)limit_start;",
      "82:  uint8_t* _limit_end = (uint8_t*)limit_end;",
      "84:  if (_buffer > _limit_end)",
      "85:  {",
      "86:   buffer = limit_end;",
      "87:   size = 0;",
      "88:   return;",
      "89:  }",
      "91:  if (_buffer < _limit_start)",
      "92:   _buffer = _limit_start;",
      "94:  if ((_buffer + size) > _limit_end)",
      "95:   size = (_limit_end - _buffer);",
      "96: }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximabmp.cpp -> DesktopEditor/cximage/CxImage/ximabmp.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         if (bIsOldBmp){",
      "137:             for (int32_t i=DibNumColors(&head)-1; i>=0; i--){",
      "138:                 pRgb[i].rgbRed      = ((RGBTRIPLE *)pRgb)[i].rgbtRed;",
      "139:                 pRgb[i].rgbBlue     = ((RGBTRIPLE *)pRgb)[i].rgbtBlue;",
      "",
      "[Removed Lines]",
      "136:             hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBTRIPLE),1);",
      "",
      "[Added Lines]",
      "136:             hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBTRIPLE),1,GetDIB(),GetDIBLimit());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:                 pRgb[i].rgbReserved = (uint8_t)0;",
      "142:             }",
      "143:         } else {",
      "146:    for (uint32_t i=0; i<head.biClrUsed; i++) pRgb[i].rgbReserved=0;",
      "147:         }",
      "",
      "[Removed Lines]",
      "144:             hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBQUAD),1);",
      "",
      "[Added Lines]",
      "144:             hFile->Read((void*)pRgb,DibNumColors(&bmpHeader) * sizeof(RGBQUAD),1,GetDIB(),GetDIBLimit());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "165:     int32_t imagesize=4*head.biHeight*head.biWidth;",
      "166:     uint8_t* buff32=(uint8_t*)malloc(imagesize);",
      "167:     if (buff32){",
      "170: #if CXIMAGE_SUPPORT_ALPHA",
      "171:      if (dwCompression == BI_RGB){",
      "",
      "[Removed Lines]",
      "168:      hFile->Read(buff32, imagesize,1); // read in the pixels",
      "",
      "[Added Lines]",
      "168:                     hFile->Read(buff32, imagesize,1,GetDIB(),GetDIBLimit()); // read in the pixels",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   case 24 :",
      "196:    if (bf.bfOffBits != 0L) hFile->Seek(off + bf.bfOffBits,SEEK_SET);",
      "197:    if (dwCompression == BI_RGB){",
      "199:    } else cx_throw(\"unknown compression\");",
      "200:    break;",
      "201:   case 16 :",
      "",
      "[Removed Lines]",
      "198:     hFile->Read(info.pImage, head.biSizeImage,1); // read in the pixels",
      "",
      "[Added Lines]",
      "198:                 hFile->Read(info.pImage, head.biSizeImage,1,GetDIB(),GetDIBLimit()); // read in the pixels",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "211:    if (bf.bfOffBits != 0L) hFile->Seek(off + bf.bfOffBits,SEEK_SET);",
      "215:    Bitfield2RGB(info.pImage,bfmask[0],bfmask[1],bfmask[2],16);",
      "216:    break;",
      "",
      "[Removed Lines]",
      "213:    hFile->Read(info.pImage, head.biHeight*((head.biWidth+1)/2)*4,1);",
      "",
      "[Added Lines]",
      "213:             hFile->Read(info.pImage, head.biHeight*((head.biWidth+1)/2)*4,1,GetDIB(),GetDIBLimit());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "229:    }",
      "230:   switch (dwCompression) {",
      "231:    case BI_RGB :",
      "233:     break;",
      "234:    case BI_RLE4 :",
      "235:    {",
      "",
      "[Removed Lines]",
      "232:     hFile->Read(info.pImage, head.biSizeImage,1); // read in the pixels",
      "",
      "[Added Lines]",
      "232:                 hFile->Read(info.pImage, head.biSizeImage,1,GetDIB(),GetDIBLimit()); // read in the pixels",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "355:          break;",
      "356:         }",
      "357:         default :",
      "360:          if ((status_byte & 1) == 1)",
      "361:           hFile->Read(&second_byte, sizeof(uint8_t), 1);",
      "",
      "[Removed Lines]",
      "358:          hFile->Read((void *)(iter.GetRow(scanline) + bits), sizeof(uint8_t) * status_byte, 1);",
      "",
      "[Added Lines]",
      "358:                                     hFile->Read((void *)(iter.GetRow(scanline) + bits), sizeof(uint8_t) * status_byte, 1,GetDIB(),GetDIBLimit());",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximage.cpp -> DesktopEditor/cximage/CxImage/ximage.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: void CxImage::Startup(uint32_t imagetype)",
      "22: {",
      "25:  ppLayers = ppFrames = NULL;",
      "27:  memset(&head,0,sizeof(BITMAPINFOHEADER));",
      "",
      "[Removed Lines]",
      "24:  pDib = pSelection = pAlpha = NULL;",
      "",
      "[Added Lines]",
      "24:     pDib = pDibLimit = pSelection = pAlpha = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:   strcpy(info.szLastError,\"CxImage::Create can't allocate memory\");",
      "233:   return NULL;",
      "234:  }",
      "237:  RGBQUAD* pal=GetPalette();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235:     pDibLimit = (void*)((uint8_t*)pDib + GetSize());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "282: {",
      "284: }",
      "",
      "[Removed Lines]",
      "281: int32_t CxImage::GetSize()",
      "283:  return head.biSize + head.biSizeImage + GetPaletteSize();",
      "",
      "[Added Lines]",
      "282: uint32_t CxImage::GetSize()",
      "284:     uint64_t size64 = head.biSize + head.biSizeImage + GetPaletteSize();",
      "285:     if (size64 > 0xFFFFFFFF)",
      "286:         return 0xFFFFFFFF;",
      "287:     return (uint32_t)size64;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "324:  memcpy(&info,&from.info,sizeof(CXIMAGEINFO));",
      "326:  pDib = from.pDib;",
      "327:  pSelection = from.pSelection;",
      "328:  pAlpha = from.pAlpha;",
      "329:  ppLayers = from.ppLayers;",
      "331:  memset(&from.head,0,sizeof(BITMAPINFOHEADER));",
      "332:  memset(&from.info,0,sizeof(CXIMAGEINFO));",
      "334:  from.ppLayers = NULL;",
      "336:  if (bTransferFrames){",
      "",
      "[Removed Lines]",
      "333:  from.pDib = from.pSelection = from.pAlpha = NULL;",
      "",
      "[Added Lines]",
      "331:     pDib = from.pDibLimit;",
      "338:     from.pDib = from.pDibLimit = from.pSelection = from.pAlpha = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "352:   memcpy(&head,&from->head,sizeof(BITMAPINFOHEADER));",
      "353:   memcpy(&info,&from->info,sizeof(CXIMAGEINFO));",
      "354:   pDib = from->pDib;",
      "355:   pSelection = from->pSelection;",
      "356:   pAlpha = from->pAlpha;",
      "357:   ppLayers = from->ppLayers;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360:         pDibLimit = from->pDibLimit;",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximage.h||DesktopEditor/cximage/CxImage/ximage.h": [
      "File: DesktopEditor/cximage/CxImage/ximage.h -> DesktopEditor/cximage/CxImage/ximage.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "293:  uint8_t* GetBits(uint32_t row = 0);",
      "294:  uint8_t GetColorType();",
      "295:  void* GetDIB() const;",
      "296:  uint32_t GetHeight() const;",
      "297:  uint32_t GetWidth() const;",
      "298:  uint32_t GetEffWidth() const;",
      "",
      "[Removed Lines]",
      "292:  int32_t GetSize();",
      "",
      "[Added Lines]",
      "292:  uint32_t GetSize();",
      "296:  void* GetDIBLimit() const;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "796:  void bihtoh(BITMAPINFOHEADER* bih);",
      "798:  void*    pDib; //contains the header, the palette, the pixels",
      "799:     BITMAPINFOHEADER    head; //standard header",
      "800:  CXIMAGEINFO   info; //extended information",
      "801:  uint8_t*   pSelection; //selected region",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "800:  void*    pDibLimit;",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximaico.cpp -> DesktopEditor/cximage/CxImage/ximaico.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:     RGBQUAD pal[256];",
      "97:     if (bih.biClrUsed)",
      "99:     else",
      "102:     SetPalette(pal,head.biClrUsed); //palette assign",
      "",
      "[Removed Lines]",
      "98:      hFile->Read(pal,bih.biClrUsed*sizeof(RGBQUAD), 1);",
      "100:      hFile->Read(pal,head.biClrUsed*sizeof(RGBQUAD), 1);",
      "",
      "[Added Lines]",
      "98:                 {",
      "99:                     DWORD _count = bih.biClrUsed; if (_count > 256) _count = 256;",
      "100:                     hFile->Read(pal,_count*sizeof(RGBQUAD), 1);",
      "101:                 }",
      "103:                 {",
      "104:                     DWORD _count = head.biClrUsed; if (_count > 256) _count = 256;",
      "105:                     hFile->Read(pal,_count*sizeof(RGBQUAD), 1);",
      "106:                 }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximainfo.cpp||DesktopEditor/cximage/CxImage/ximainfo.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximainfo.cpp -> DesktopEditor/cximage/CxImage/ximainfo.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "181: {",
      "182:  return pDib;",
      "183: }",
      "185: uint32_t CxImage::GetHeight() const",
      "186: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184: void* CxImage::GetDIBLimit() const",
      "185: {",
      "186:     return pDibLimit;",
      "187: }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximapcx.cpp||DesktopEditor/cximage/CxImage/ximapcx.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximapcx.cpp -> DesktopEditor/cximage/CxImage/ximapcx.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:  info.xDPI = pcxHeader.Hres;",
      "51:  info.yDPI = pcxHeader.Vres;",
      "53:  if (info.nEscape == -1){",
      "54:   head.biWidth = Width;",
      "55:   head.biHeight= Height;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53:     if (Width <= 0 || Height <= 0)",
      "54:         cx_throw(\"Error: Not a PCX file\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:     nbytes = pcxHeader.BytesPerLine * pcxHeader.ColorPlanes * Height;",
      "79:     lpHead1 = pcximage = (uint8_t*)malloc(nbytes);",
      "80:     while (nbytes > 0){",
      "81:   if (hFile == NULL || hFile->Eof()) cx_throw(\"corrupted PCX\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     uint32_t pcximage_size = nbytes;",
      "84:     if (!pcximage)",
      "85:         cx_throw(\"Cancelled\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:  for (uint32_t idx=0; idx<head.biClrUsed; idx++) SetPaletteColor((uint8_t)idx,ColorMap[idx][0],ColorMap[idx][1],ColorMap[idx][2]);",
      "121:     lpHead2 = pcxpixels = (uint8_t *)malloc(Width + pcxHeader.BytesPerLine * 8);",
      "123:     for (y = 0; y < Height; y++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     if (!pcxpixels)",
      "130:         cx_throw(\"Cancelled\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "138:   } else if (pcxHeader.ColorPlanes == 4 && pcxHeader.BitsPerPixel == 8){",
      "139:    for (x = 0; x < Width; x++){",
      "140:     SetPixelColor(x,y2,RGB(pcxplanes[x],pcxplanes[pcxHeader.BytesPerLine + x],pcxplanes[2*pcxHeader.BytesPerLine + x]));",
      "142:    }",
      "143:    continue;",
      "144: #endif //CXIMAGE_SUPPORT_ALPHA",
      "",
      "[Removed Lines]",
      "141:     AlphaSet(x,y2,pcxplanes[3*pcxHeader.BytesPerLine + x]);",
      "",
      "[Added Lines]",
      "152:                 uint32_t alphaIndex = 3*pcxHeader.BytesPerLine + x;",
      "154:                 if (alphaIndex < pcximage_size)",
      "155:                     AlphaSet(x,y2,pcxplanes[alphaIndex]);",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/ximatif.cpp||DesktopEditor/cximage/CxImage/ximatif.cpp": [
      "File: DesktopEditor/cximage/CxImage/ximatif.cpp -> DesktopEditor/cximage/CxImage/ximatif.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "301:    tilebuf = (uint8_t*)malloc(TIFFTileSize(m_tif));",
      "302:   }",
      "305:   uint8_t * bits16 = NULL;            // + VK",
      "306:   int32_t line16    = 0;             // + VK",
      "",
      "[Removed Lines]",
      "304:   bits = (uint8_t*)malloc(bitspersample==16? bitsize*2 : bitsize); // * VK",
      "",
      "[Added Lines]",
      "304:         int32_t bitsize_correct = bitspersample==16? bitsize*2 : bitsize;",
      "305:         bits = (uint8_t*)malloc(bitsize_correct); // * VK",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:    line16 = line;",
      "310:    line   = CalculateLine(width, 8 * samplesperpixel);",
      "311:    bits16 = bits;",
      "312:    bits   = (uint8_t*)malloc(bitsize);",
      "313:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "313:             bitsize_correct = bitsize;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "454:      double p,cx,cy,cz,cr,cg,cb;",
      "455:      while (ii</*line*/width){  // * VK",
      "456:       bitsoffset = ii*samplesperpixel+offset;",
      "460:       if (a>127) a-=256;",
      "461:       if (b>127) b-=256;",
      "",
      "[Removed Lines]",
      "457:       l=bits[bitsoffset];",
      "458:       a=bits[bitsoffset+1];",
      "459:       b=bits[bitsoffset+2];",
      "",
      "[Added Lines]",
      "459:                         if (bitsoffset + 2 < bitsize_correct)",
      "460:                         {",
      "461:                             l=bits[bitsoffset];",
      "462:                             a=bits[bitsoffset+1];",
      "463:                             b=bits[bitsoffset+2];",
      "464:                         }",
      "465:                         else",
      "466:                         {",
      "467:                             l=0;",
      "468:                             a=0;",
      "469:                             b=0;",
      "470:                         }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/xiofile.h||DesktopEditor/cximage/CxImage/xiofile.h": [
      "File: DesktopEditor/cximage/CxImage/xiofile.h -> DesktopEditor/cximage/CxImage/xiofile.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   return (bool)(iErr==0);",
      "60:  }",
      "63:  {",
      "64:   if (!m_fp) return 0;",
      "65:   return fread(buffer, size, count, m_fp);",
      "66:  }",
      "",
      "[Removed Lines]",
      "62:  virtual size_t Read(void *buffer, size_t size, size_t count)",
      "",
      "[Added Lines]",
      "62:  virtual size_t Read(void *buffer, size_t size, size_t count, void* limit_start = NULL, void* limit_end = NULL)",
      "65:   clamp_buffer(buffer, size, limit_start, limit_end);",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/xmemfile.cpp||DesktopEditor/cximage/CxImage/xmemfile.cpp": [
      "File: DesktopEditor/cximage/CxImage/xmemfile.cpp -> DesktopEditor/cximage/CxImage/xmemfile.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  return m_pBuffer;",
      "46: }",
      "49: {",
      "50:  if (buffer==NULL) return 0;",
      "",
      "[Removed Lines]",
      "48: size_t CxMemFile::Read(void *buffer, size_t size, size_t count)",
      "",
      "[Added Lines]",
      "48: size_t CxMemFile::Read(void *buffer, size_t size, size_t count, void* limit_start, void* limit_end)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:  if (m_Position >= (int32_t)m_Size){",
      "54:   m_bEOF = true;",
      "55:   return 0;",
      "58:  int32_t nCount = (int32_t)(count*size);",
      "59:  if (nCount == 0) return 0;",
      "",
      "[Removed Lines]",
      "56:  }",
      "",
      "[Added Lines]",
      "56:     }",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/CxImage/xmemfile.h||DesktopEditor/cximage/CxImage/xmemfile.h": [
      "File: DesktopEditor/cximage/CxImage/xmemfile.h -> DesktopEditor/cximage/CxImage/xmemfile.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:  uint8_t* GetBuffer(bool bDetachBuffer = true);",
      "16:  virtual bool Close();",
      "18:  virtual size_t Write(const void *buffer, size_t size, size_t count);",
      "19:  virtual bool Seek(int32_t offset, int32_t origin);",
      "20:  virtual int32_t Tell();",
      "",
      "[Removed Lines]",
      "17:  virtual size_t Read(void *buffer, size_t size, size_t count);",
      "",
      "[Added Lines]",
      "17:  virtual size_t Read(void *buffer, size_t size, size_t count, void* limit_start = NULL, void* limit_end = NULL);",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/jasper/jpc/jpc_dec.c||DesktopEditor/cximage/jasper/jpc/jpc_dec.c": [
      "File: DesktopEditor/cximage/jasper/jpc/jpc_dec.c -> DesktopEditor/cximage/jasper/jpc/jpc_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2171:  int inspt;",
      "2172:  int i;",
      "2175:   if (tab->ents[i]->ind > ent->ind) {",
      "2176:    break;",
      "2177:   }",
      "",
      "[Removed Lines]",
      "2174:  for (i = 0; i < tab->numents; ++i) {",
      "",
      "[Added Lines]",
      "2175:     int correct_num_ents = tab->numents;",
      "2176:     if (correct_num_ents > 0x7FFFFFFE)",
      "2177:         correct_num_ents = 0x7FFFFFFE;",
      "2179:     for (i = 0; i < correct_num_ents; ++i) {",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/raw/libdcr.c||DesktopEditor/cximage/raw/libdcr.c": [
      "File: DesktopEditor/cximage/raw/libdcr.c -> DesktopEditor/cximage/raw/libdcr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3518: {",
      "3519:  double cam_rgb[4][3], inverse[4][3], num;",
      "3520:  int i, j, k;",
      "3523:   for (j=0; j < 3; j++)",
      "3524:    for (cam_rgb[i][j] = k=0; k < 3; k++)",
      "3525:     cam_rgb[i][j] += cam_xyz[i][k] * xyz_rgb[k][j];",
      "3529:    num += cam_rgb[i][j];",
      "3530:   for (j=0; j < 3; j++)",
      "3531:    cam_rgb[i][j] /= num;",
      "3532:   p->pre_mul[i] = 1 / (float)num;",
      "3533:  }",
      "3535:  for (p->raw_color = i=0; i < 3; i++)",
      "3536:   for (j=0; j < p->colors; j++)",
      "3537:    p->rgb_cam[i][j] = (float)inverse[j][i];",
      "",
      "[Removed Lines]",
      "3534:  dcr_pseudoinverse (cam_rgb, inverse, p->colors);",
      "",
      "[Added Lines]",
      "3521:     int max_colors = p->colors;",
      "3522:     if (max_colors > 4) max_colors = 4;",
      "3535:     dcr_pseudoinverse (cam_rgb, inverse, max_colors);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5391:   p->tiff_ifd[raw].phint == 1) p->is_raw = 0;",
      "5392:  if (p->tiff_bps == 8 && p->tiff_samples == 4) p->is_raw = 0;",
      "5393:  for (i=0; i < (int)p->tiff_nifds; i++)",
      "5394:   if (i != raw && p->tiff_ifd[i].samples == max_samp &&",
      "5397:    p->thumb_width  = p->tiff_ifd[i].width;",
      "5398:    p->thumb_height = p->tiff_ifd[i].height;",
      "5399:    p->thumb_offset = p->tiff_ifd[i].offset;",
      "",
      "[Removed Lines]",
      "5395:    p->tiff_ifd[i].width * p->tiff_ifd[i].height / SQR(p->tiff_ifd[i].bps+1) >",
      "5396:    (int)(p->thumb_width *       p->thumb_height / SQR(p->thumb_misc+1))) {",
      "",
      "[Added Lines]",
      "5395:     {",
      "5396:         int sqr_1 = SQR(p->tiff_ifd[i].bps+1); if (sqr_1 == 0) sqr_1 = 1;",
      "5397:         int sqr_2 = SQR(p->thumb_misc+1); if (sqr_2 == 0) sqr_2 = 1;",
      "5399:             p->tiff_ifd[i].width * p->tiff_ifd[i].height / sqr_1 >",
      "5400:             (int)(p->thumb_width *       p->thumb_height / sqr_2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5401:    p->thumb_misc   = p->tiff_ifd[i].bps;",
      "5402:    thm = i;",
      "5403:   }",
      "5404:  if (thm >= 0) {",
      "5405:   p->thumb_misc |= p->tiff_ifd[thm].samples << 5;",
      "5406:   switch (p->tiff_ifd[thm].comp) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5408:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5845:  { \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\" };",
      "5846:  struct tm t;",
      "5848:  p->order = 0x4949;",
      "5849:  dcr_fread(p->obj_, tag, 4, 1);",
      "5850:  size = dcr_get4(p);",
      "5852:  if (!memcmp(tag,\"RIFF\",4) || !memcmp(tag,\"LIST\",4)) {",
      "5853:   dcr_get4(p);",
      "5854:   while (dcr_ftell(p->obj_)+7 < (long)end)",
      "",
      "[Removed Lines]",
      "5851:  end = dcr_ftell(p->obj_) + size;",
      "",
      "[Added Lines]",
      "5853:     if (dcr_feof(p->obj_))",
      "5854:     {",
      "5855:         fprintf (stderr,_(\"Unexpected end of file\\n\"));",
      "5856:         return;",
      "5857:     }",
      "5862:     end = dcr_ftell(p->obj_) + size;",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/tiff/tif_dirread.c||DesktopEditor/cximage/tiff/tif_dirread.c": [
      "File: DesktopEditor/cximage/tiff/tif_dirread.c -> DesktopEditor/cximage/tiff/tif_dirread.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "205:       && fix < tif->tif_nfields) {",
      "207:     break;",
      "209:    if (fix >= tif->tif_nfields ||",
      "210:        fip->field_tag != dp->tdir_tag) {",
      "211:     TIFFWarningExt(tif->tif_clientdata, module,",
      "",
      "[Removed Lines]",
      "208:    fip = tif->tif_fieldinfo[++fix];",
      "",
      "[Added Lines]",
      "208:             ++fix; fip = (fix >= tif->tif_nfields) ? 0 : tif->tif_fieldinfo[++fix];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "333:       && fix < tif->tif_nfields) {",
      "335:     break;",
      "337:    if (fix >= tif->tif_nfields ||",
      "338:        fip->field_tag != dp->tdir_tag) {",
      "339:     TIFFWarningExt(tif->tif_clientdata, module,",
      "",
      "[Removed Lines]",
      "336:    fip = tif->tif_fieldinfo[++fix];",
      "",
      "[Added Lines]",
      "336:             ++fix; fip = (fix >= tif->tif_nfields) ? 0 : tif->tif_fieldinfo[++fix];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "887:                        && fix < tif->tif_nfields) {",
      "889:     break;",
      "891:    if (fix >= tif->tif_nfields ||",
      "892:        fip->field_tag != dp->tdir_tag) {",
      "893:     TIFFWarningExt(tif->tif_clientdata, module,",
      "",
      "[Removed Lines]",
      "890:                         fip = tif->tif_fieldinfo[++fix];",
      "",
      "[Added Lines]",
      "890:             ++fix; fip = (fix >= tif->tif_nfields) ? 0 : tif->tif_fieldinfo[++fix];",
      "",
      "---------------"
    ],
    "DesktopEditor/cximage/tiff/tif_ojpeg.c||DesktopEditor/cximage/tiff/tif_ojpeg.c": [
      "File: DesktopEditor/cximage/tiff/tif_ojpeg.c -> DesktopEditor/cximage/tiff/tif_ojpeg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1920:        sp->in_buffer_file_pos=0;",
      "1921:       else",
      "1922:       {",
      "1924:        if (sp->in_buffer_file_togo==0)",
      "1925:         sp->in_buffer_file_pos=0;",
      "1926:        else if (sp->in_buffer_file_pos+sp->in_buffer_file_togo>sp->file_size)",
      "",
      "[Removed Lines]",
      "1923:        sp->in_buffer_file_togo=sp->tif->tif_dir.td_stripbytecount[sp->in_buffer_next_strile];",
      "",
      "[Added Lines]",
      "1923:                             sp->in_buffer_file_togo=0;",
      "1924:                             if (sp->tif->tif_dir.td_stripbytecount)",
      "1925:                                 sp->in_buffer_file_togo=sp->tif->tif_dir.td_stripbytecount[sp->in_buffer_next_strile];",
      "",
      "---------------"
    ],
    "DesktopEditor/fontengine/fontconverter/FontFileType1.cpp||DesktopEditor/fontengine/fontconverter/FontFileType1.cpp": [
      "File: DesktopEditor/fontengine/fontconverter/FontFileType1.cpp -> DesktopEditor/fontengine/fontconverter/FontFileType1.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "634:         unsigned char *sCur = (unsigned char*)(*ppEexecBuffer);",
      "635:         while( sCur < (unsigned char*)(*ppEexecBuffer) + nLen && ( ' ' == *sCur || '\\t' == *sCur || '\\r' == *sCur || '\\n' == *sCur ) )",
      "636:             ++sCur;",
      "640:         bool bASCII = false;",
      "643:             bASCII = true;",
      "645:         if ( bASCII )",
      "",
      "[Removed Lines]",
      "642:         if ( isxdigit( sCur[0] ) && isxdigit( sCur[1] ) && isxdigit( sCur[2] ) && isxdigit( sCur[3] ) )",
      "",
      "[Added Lines]",
      "636:         {",
      "638:             --nLen;",
      "639:         }",
      "645:         if ( nLen > 3 && isxdigit( sCur[0] ) && isxdigit( sCur[1] ) && isxdigit( sCur[2] ) && isxdigit( sCur[3] ) )",
      "",
      "---------------"
    ],
    "DesktopEditor/fontengine/fontconverter/FontFileType1.h||DesktopEditor/fontengine/fontconverter/FontFileType1.h": [
      "File: DesktopEditor/fontengine/fontconverter/FontFileType1.h -> DesktopEditor/fontengine/fontconverter/FontFileType1.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:                 }",
      "261:                 sBuffer[nBufPos++] = unChar;",
      "262:             }",
      "264:             if ( 0 != sBuffer[0] && nCount > 0 )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "262:                 if (nBufPos >= c_nNumLimit)",
      "263:                     break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b594be2abf72e9cda85b3c28d143ae290afc082",
      "candidate_info": {
        "commit_hash": "8b594be2abf72e9cda85b3c28d143ae290afc082",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/8b594be2abf72e9cda85b3c28d143ae290afc082",
        "files": [
          "DesktopEditor/cximage/CxImage/ximaexif.cpp"
        ],
        "message": "Fix 2/3 \"problem 41\"",
        "before_after_code_files": [
          "DesktopEditor/cximage/CxImage/ximaexif.cpp||DesktopEditor/cximage/CxImage/ximaexif.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ONLYOFFICE/core/pull/361"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "DesktopEditor/cximage/CxImage/ximaexif.cpp||DesktopEditor/cximage/CxImage/ximaexif.cpp": [
          "File: DesktopEditor/cximage/CxImage/ximaexif.cpp -> DesktopEditor/cximage/CxImage/ximaexif.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:                     m_exifinfo->IsExif = process_EXIF((uint8_t *)Data+2, itemlen-2);",
          "170:                 }else{",
          "",
          "[Removed Lines]",
          "168:                 if ((nReadMode & EXIF_READ_EXIF) && memcmp(Data+2, \"Exif\", 4) == 0){",
          "",
          "[Added Lines]",
          "168:                 if ((nReadMode & EXIF_READ_EXIF) && itemlen >= 6 && memcmp(Data+2, \"Exif\", 4) == 0){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:             case M_SOF13:",
          "188:             case M_SOF14:",
          "189:             case M_SOF15:",
          "190:                 process_SOFn(Data, marker);",
          "191:                 break;",
          "192:             default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:                 if (itemlen < 8)",
          "191:                     return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     ExifImageWidth = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     if (length < 6)",
          "214:         return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "218:   }",
          "219:     }",
          "221:     if (memcmp(CharBuf+6,\"II\",2) == 0){",
          "222:         MotorolaOrder = 0;",
          "223:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     if (length < 8)",
          "227:         return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:         }",
          "230:     }",
          "233:     if (Get16u(CharBuf+8) != 0x2a){",
          "234:         strcpy(m_szLastError,\"Invalid Exif start (1)\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     if (length < 14)",
          "241:         return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "747:     for (a=2;a<length;a++){",
          "748:         ch = Data[a];",
          "752:         if (isprint(ch) || ch == '\\n' || ch == '\\t'){",
          "753:             Comment[nch++] = (char)ch;",
          "",
          "[Removed Lines]",
          "750:         if (ch == '\\r' && Data[a+1] == '\\n') continue; // Remove cr followed by lf.",
          "",
          "[Added Lines]",
          "761:         if (ch == '\\r' && (a < (length - 1) && Data[a+1] == '\\n')) continue; // Remove cr followed by lf.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13c9a5e872788397ba1bc62f4d2ee26ae573a9c6",
      "candidate_info": {
        "commit_hash": "13c9a5e872788397ba1bc62f4d2ee26ae573a9c6",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/13c9a5e872788397ba1bc62f4d2ee26ae573a9c6",
        "files": [
          "DesktopEditor/cximage/CxImage/ximabmp.cpp"
        ],
        "message": "Fix bug 47276",
        "before_after_code_files": [
          "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
          ],
          "candidate": [
            "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp": [
          "File: DesktopEditor/cximage/CxImage/ximabmp.cpp -> DesktopEditor/cximage/CxImage/ximabmp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     int32_t imagesize=4*head.biHeight*head.biWidth;",
          "166:     uint8_t* buff32=(uint8_t*)malloc(imagesize);",
          "167:     if (buff32){",
          "170: #if CXIMAGE_SUPPORT_ALPHA",
          "171:      if (dwCompression == BI_RGB){",
          "",
          "[Removed Lines]",
          "168:                     hFile->Read(buff32, imagesize,1,GetDIB(),GetDIBLimit()); // read in the pixels",
          "",
          "[Added Lines]",
          "168:                     hFile->Read(buff32, imagesize,1); // read in the pixels",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d316781ec434ee0f3c66f74f2f01569cfd8265f",
      "candidate_info": {
        "commit_hash": "4d316781ec434ee0f3c66f74f2f01569cfd8265f",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/4d316781ec434ee0f3c66f74f2f01569cfd8265f",
        "files": [
          "DesktopEditor/cximage/CxImage/ximaico.cpp"
        ],
        "message": "Fix typo",
        "before_after_code_files": [
          "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp"
          ],
          "candidate": [
            "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/cximage/CxImage/ximaico.cpp||DesktopEditor/cximage/CxImage/ximaico.cpp": [
          "File: DesktopEditor/cximage/CxImage/ximaico.cpp -> DesktopEditor/cximage/CxImage/ximaico.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     RGBQUAD pal[256];",
          "97:     if (bih.biClrUsed)",
          "98:                 {",
          "100:                     hFile->Read(pal,_count*sizeof(RGBQUAD), 1);",
          "101:                 }",
          "102:     else",
          "103:                 {",
          "105:                     hFile->Read(pal,_count*sizeof(RGBQUAD), 1);",
          "106:                 }",
          "",
          "[Removed Lines]",
          "99:                     DWORD _count = bih.biClrUsed; if (_count > 256) _count = 256;",
          "104:                     DWORD _count = head.biClrUsed; if (_count > 256) _count = 256;",
          "",
          "[Added Lines]",
          "99:                     uint32_t _count = bih.biClrUsed; if (_count > 256) _count = 256;",
          "104:                     uint32_t _count = head.biClrUsed; if (_count > 256) _count = 256;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bcab7e8ce2673bf360851c8a079fab1f7e3c6b7",
      "candidate_info": {
        "commit_hash": "4bcab7e8ce2673bf360851c8a079fab1f7e3c6b7",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/4bcab7e8ce2673bf360851c8a079fab1f7e3c6b7",
        "files": [
          "DesktopEditor/cximage/CxImage/ximabmp.cpp"
        ],
        "message": ".",
        "before_after_code_files": [
          "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
          ],
          "candidate": [
            "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/cximage/CxImage/ximabmp.cpp||DesktopEditor/cximage/CxImage/ximabmp.cpp": [
          "File: DesktopEditor/cximage/CxImage/ximabmp.cpp -> DesktopEditor/cximage/CxImage/ximabmp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     int32_t imagesize=4*head.biHeight*head.biWidth;",
          "166:     uint8_t* buff32=(uint8_t*)malloc(imagesize);",
          "167:     if (buff32){",
          "170: #if CXIMAGE_SUPPORT_ALPHA",
          "171:      if (dwCompression == BI_RGB){",
          "",
          "[Removed Lines]",
          "168:                     hFile->Read(buff32, imagesize,1); // read in the pixels",
          "",
          "[Added Lines]",
          "168:      hFile->Read(buff32, imagesize,1); // read in the pixels",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "251a3e58b0e651c4e0084d4900104f4319f1230c",
      "candidate_info": {
        "commit_hash": "251a3e58b0e651c4e0084d4900104f4319f1230c",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/251a3e58b0e651c4e0084d4900104f4319f1230c",
        "files": [
          "DesktopEditor/cximage/CxImage/ximage.cpp"
        ],
        "message": "Fix typo",
        "before_after_code_files": [
          "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp"
          ],
          "candidate": [
            "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/cximage/CxImage/ximage.cpp||DesktopEditor/cximage/CxImage/ximage.cpp": [
          "File: DesktopEditor/cximage/CxImage/ximage.cpp -> DesktopEditor/cximage/CxImage/ximage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:  memcpy(&info,&from.info,sizeof(CXIMAGEINFO));",
          "330:  pDib = from.pDib;",
          "332:  pSelection = from.pSelection;",
          "333:  pAlpha = from.pAlpha;",
          "334:  ppLayers = from.ppLayers;",
          "",
          "[Removed Lines]",
          "331:     pDib = from.pDibLimit;",
          "",
          "[Added Lines]",
          "331:     pDibLimit = from.pDibLimit;",
          "",
          "---------------"
        ]
      }
    }
  ]
}