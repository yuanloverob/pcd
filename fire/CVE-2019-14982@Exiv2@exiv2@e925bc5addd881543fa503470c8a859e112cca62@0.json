{
  "cve_id": "CVE-2019-14982",
  "cve_desc": "In Exiv2 before v0.27.2, there is an integer overflow vulnerability in the WebPImage::getHeaderOffset function in webpimage.cpp. It can lead to a buffer overflow vulnerability and a crash.",
  "repo": "Exiv2/exiv2",
  "patch_hash": "e925bc5addd881543fa503470c8a859e112cca62",
  "patch_info": {
    "commit_hash": "e925bc5addd881543fa503470c8a859e112cca62",
    "repo": "Exiv2/exiv2",
    "commit_url": "https://github.com/Exiv2/exiv2/commit/e925bc5addd881543fa503470c8a859e112cca62",
    "files": [
      "src/webpimage.cpp"
    ],
    "message": "Fix integer overflow by checking size against header_size\n\nNote that the problem occurs when data_size is less than header_size\nwhat causes a buffer overflow in &data[i]\n\nCo-Authored-By: D4N <dan.cermak@cgc-instruments.com>",
    "before_after_code_files": [
      "src/webpimage.cpp||src/webpimage.cpp"
    ]
  },
  "patch_diff": {
    "src/webpimage.cpp||src/webpimage.cpp": [
      "File: src/webpimage.cpp -> src/webpimage.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "827:         }",
      "828:     }",
      "832:         long pos = -1;",
      "833:         for (long i=0; i < data_size - header_size; i++) {",
      "834:             if (memcmp(header, &data[i], header_size) == 0) {",
      "",
      "[Removed Lines]",
      "830:     long WebPImage::getHeaderOffset(byte *data, long data_size,",
      "831:                                     byte *header, long header_size) {",
      "",
      "[Added Lines]",
      "830:     long WebPImage::getHeaderOffset(byte* data, long data_size, byte* header, long header_size)",
      "831:     {",
      "832:         if (data_size < header_size) { return -1; }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e7d1e2678854aa4f147a9750cd8fb44ca3e6c84",
      "candidate_info": {
        "commit_hash": "9e7d1e2678854aa4f147a9750cd8fb44ca3e6c84",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/9e7d1e2678854aa4f147a9750cd8fb44ca3e6c84",
        "files": [
          "src/webpimage.cpp"
        ],
        "message": "Fix integer overflow by checking size against header_size\n\nNote that the problem occurs when data_size is less than header_size\nwhat causes a buffer overflow in &data[i]\n\nCo-Authored-By: D4N <dan.cermak@cgc-instruments.com>\n(cherry picked from commit e925bc5addd881543fa503470c8a859e112cca62)",
        "before_after_code_files": [
          "src/webpimage.cpp||src/webpimage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:         }",
          "831:     }",
          "835:         long pos = -1;",
          "837:             if (memcmp(header, &data[i], header_size) == 0) {",
          "838:                 pos = (long)i;",
          "839:                 break;",
          "",
          "[Removed Lines]",
          "833:     long WebPImage::getHeaderOffset(byte *data, size_t data_size,",
          "834:                                     byte *header, size_t header_size) {",
          "836:         for (size_t i=0; i < data_size - header_size; i++) {",
          "",
          "[Added Lines]",
          "833:     long WebPImage::getHeaderOffset(byte* data, size_t data_size, byte* header, size_t header_size)",
          "834:     {",
          "835:         if (data_size < header_size) {",
          "836:             return -1;",
          "837:         }",
          "839:         for (size_t i = 0; i < data_size - header_size; i++) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e3800ecb3c3dfd9bf00a7f9d6cfaab16131f7ff",
      "candidate_info": {
        "commit_hash": "1e3800ecb3c3dfd9bf00a7f9d6cfaab16131f7ff",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/1e3800ecb3c3dfd9bf00a7f9d6cfaab16131f7ff",
        "files": [
          "src/webpimage.cpp"
        ],
        "message": "Fix integer overflow by checking size against header_size (#1104)\n\nNote that the problem occurs when data_size is less than header_size\nwhat causes a buffer overflow in &data[i]\n\nCo-Authored-By: D4N <dan.cermak@cgc-instruments.com>\n(cherry picked from commit e925bc5addd881543fa503470c8a859e112cca62)\n\nCo-authored-by: Luis D\u00edaz M\u00e1s <piponazo@gmail.com>",
        "before_after_code_files": [
          "src/webpimage.cpp||src/webpimage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:         }",
          "796:     }",
          "800:         long pos = -1;",
          "801:         for (long i=0; i < data_size - header_size; i++) {",
          "802:             if (memcmp(header, &data[i], header_size) == 0) {",
          "",
          "[Removed Lines]",
          "798:     long WebPImage::getHeaderOffset(byte *data, long data_size,",
          "799:                                     byte *header, long header_size) {",
          "",
          "[Added Lines]",
          "798:     long WebPImage::getHeaderOffset(byte* data, long data_size, byte* header, long header_size)",
          "799:     {",
          "800:         if (data_size < header_size) { return -1; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a048325e18d5328fc00b80cd2f0bf70a8f35ad9b",
      "candidate_info": {
        "commit_hash": "a048325e18d5328fc00b80cd2f0bf70a8f35ad9b",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/a048325e18d5328fc00b80cd2f0bf70a8f35ad9b",
        "files": [
          "test/data/issue_960.poc.webp",
          "tests/bugfixes/github/test_issue_960.py"
        ],
        "message": "Add regression test for #960",
        "before_after_code_files": [
          "tests/bugfixes/github/test_issue_960.py||tests/bugfixes/github/test_issue_960.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Exiv2/exiv2/pull/962"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/bugfixes/github/test_issue_960.py||tests/bugfixes/github/test_issue_960.py": [
          "File: tests/bugfixes/github/test_issue_960.py -> tests/bugfixes/github/test_issue_960.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: from system_tests import CaseMeta, path",
          "6: class WebPImageGetHeaderOffset(metaclass=CaseMeta):",
          "7:     \"\"\"",
          "8:     Regression test for the bug described in:",
          "9:     https://github.com/Exiv2/exiv2/pull/960",
          "10:     \"\"\"",
          "11:     url = \"https://github.com/Exiv2/exiv2/pull/960\"",
          "13:     filename1 = path(\"$data_path/issue_960.poc.webp\")",
          "14:     commands = [\"$exiv2 $filename1\"]",
          "15:     stdout = [\"\"]",
          "16:     stderr = [",
          "17: \"\"\"Warning: Failed to decode Exif metadata.",
          "18: Exiv2 exception in print action for file $filename1:",
          "19: $kerCorruptedMetadata",
          "20: \"\"\"",
          "21: ]",
          "22:     retval = [1]",
          "",
          "---------------"
        ]
      }
    }
  ]
}