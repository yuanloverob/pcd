{
  "cve_id": "CVE-2023-1998",
  "cve_desc": "The Linux kernel allows userspace processes to enable mitigations by calling prctl with PR_SET_SPECULATION_CTRL which disables the speculation feature as well as by using seccomp. We had noticed that on VMs of at least one major cloud provider, the kernel still left the victim process exposed to attacks in some cases even after enabling the spectre-BTI mitigation with prctl. The same behavior can be observed on a bare-metal machine when forcing the mitigation to IBRS on boot command line.\n\nThis happened because when plain IBRS was enabled (not enhanced IBRS), the kernel had some logic that determined that STIBP was not needed. The IBRS bit implicitly protects against cross-thread branch target injection. However, with legacy IBRS, the IBRS bit was cleared on returning to userspace, due to performance reasons, which disabled the implicit STIBP and left userspace threads vulnerable to cross-thread branch target injection against which STIBP protects.",
  "repo": "torvalds/linux",
  "patch_hash": "6921ed9049bc7457f66c1596c5b78aec0dae4a9d",
  "patch_info": {
    "commit_hash": "6921ed9049bc7457f66c1596c5b78aec0dae4a9d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6921ed9049bc7457f66c1596c5b78aec0dae4a9d",
    "files": [
      "arch/x86/kernel/cpu/bugs.c"
    ],
    "message": "x86/speculation: Allow enabling STIBP with legacy IBRS\n\nWhen plain IBRS is enabled (not enhanced IBRS), the logic in\nspectre_v2_user_select_mitigation() determines that STIBP is not needed.\n\nThe IBRS bit implicitly protects against cross-thread branch target\ninjection. However, with legacy IBRS, the IBRS bit is cleared on\nreturning to userspace for performance reasons which leaves userspace\nthreads vulnerable to cross-thread branch target injection against which\nSTIBP protects.\n\nExclude IBRS from the spectre_v2_in_ibrs_mode() check to allow for\nenabling STIBP (through seccomp/prctl() by default or always-on, if\nselected by spectre_v2_user kernel cmdline parameter).\n\n  [ bp: Massage. ]\n\nFixes: 7c693f54c873 (\"x86/speculation: Add spectre_v2=ibrs option to support Kernel IBRS\")\nReported-by: Jos\u00e9 Oliveira <joseloliveira11@gmail.com>\nReported-by: Rodrigo Branco <rodrigo@kernelhacking.com>\nSigned-off-by: KP Singh <kpsingh@kernel.org>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nCc: stable@vger.kernel.org\nLink: https://lore.kernel.org/r/20230220120127.1975241-1-kpsingh@kernel.org\nLink: https://lore.kernel.org/r/20230221184908.2349578-1-kpsingh@kernel.org",
    "before_after_code_files": [
      "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
      "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1133:  return SPECTRE_V2_USER_CMD_AUTO;",
      "1134: }",
      "1137: {",
      "1140:         mode == SPECTRE_V2_EIBRS_RETPOLINE ||",
      "1141:         mode == SPECTRE_V2_EIBRS_LFENCE;",
      "1142: }",
      "1144: static void __init",
      "1145: spectre_v2_user_select_mitigation(void)",
      "1146: {",
      "",
      "[Removed Lines]",
      "1136: static inline bool spectre_v2_in_ibrs_mode(enum spectre_v2_mitigation mode)",
      "1138:  return mode == SPECTRE_V2_IBRS ||",
      "1139:         mode == SPECTRE_V2_EIBRS ||",
      "",
      "[Added Lines]",
      "1136: static inline bool spectre_v2_in_eibrs_mode(enum spectre_v2_mitigation mode)",
      "1138:  return mode == SPECTRE_V2_EIBRS ||",
      "1143: static inline bool spectre_v2_in_ibrs_mode(enum spectre_v2_mitigation mode)",
      "1144: {",
      "1145:  return spectre_v2_in_eibrs_mode(mode) || mode == SPECTRE_V2_IBRS;",
      "1146: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1203:  }",
      "1209:  if (!boot_cpu_has(X86_FEATURE_STIBP) ||",
      "1210:      !smt_possible ||",
      "1212:   return;",
      "",
      "[Removed Lines]",
      "1211:      spectre_v2_in_ibrs_mode(spectre_v2_enabled))",
      "",
      "[Added Lines]",
      "1222:      spectre_v2_in_eibrs_mode(spectre_v2_enabled))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2341: static char *stibp_state(void)",
      "2342: {",
      "2344:   return \"\";",
      "2346:  switch (spectre_v2_user_stibp) {",
      "",
      "[Removed Lines]",
      "2343:  if (spectre_v2_in_ibrs_mode(spectre_v2_enabled))",
      "",
      "[Added Lines]",
      "2354:  if (spectre_v2_in_eibrs_mode(spectre_v2_enabled))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fd470a8beed88440b160d690344fbae05a0b9b1b",
      "candidate_info": {
        "commit_hash": "fd470a8beed88440b160d690344fbae05a0b9b1b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fd470a8beed88440b160d690344fbae05a0b9b1b",
        "files": [
          "Documentation/admin-guide/hw-vuln/spectre.rst",
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/cpu: Enable STIBP on AMD if Automatic IBRS is enabled\n\nUnlike Intel's Enhanced IBRS feature, AMD's Automatic IBRS does not\nprovide protection to processes running at CPL3/user mode, see section\n\"Extended Feature Enable Register (EFER)\" in the APM v2 at\nhttps://bugzilla.kernel.org/attachment.cgi?id=304652\n\nExplicitly enable STIBP to protect against cross-thread CPL3\nbranch target injections on systems with Automatic IBRS enabled.\n\nAlso update the relevant documentation.\n\nFixes: e7862eda309e (\"x86/cpu: Support AMD Automatic IBRS\")\nReported-by: Tom Lendacky <thomas.lendacky@amd.com>\nSigned-off-by: Kim Phillips <kim.phillips@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nCc: stable@vger.kernel.org\nLink: https://lore.kernel.org/r/20230720194727.67022-1-kim.phillips@amd.com",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1150:  }",
          "1163:  if (!boot_cpu_has(X86_FEATURE_STIBP) ||",
          "1164:      !smt_possible ||",
          "1166:   return;",
          "",
          "[Removed Lines]",
          "1165:      spectre_v2_in_eibrs_mode(spectre_v2_enabled))",
          "",
          "[Added Lines]",
          "1166:      (spectre_v2_in_eibrs_mode(spectre_v2_enabled) &&",
          "1167:       !boot_cpu_has(X86_FEATURE_AUTOIBRS)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2295: static char *stibp_state(void)",
          "2296: {",
          "2298:   return \"\";",
          "2300:  switch (spectre_v2_user_stibp) {",
          "",
          "[Removed Lines]",
          "2297:  if (spectre_v2_in_eibrs_mode(spectre_v2_enabled))",
          "",
          "[Added Lines]",
          "2299:  if (spectre_v2_in_eibrs_mode(spectre_v2_enabled) &&",
          "2300:      !boot_cpu_has(X86_FEATURE_AUTOIBRS))",
          "",
          "---------------"
        ]
      }
    }
  ]
}