{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
      "candidate_info": {
        "commit_hash": "a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
        "files": [
          "Lib/turtledemo/__main__.py",
          "Misc/NEWS.d/next/Library/2024-06-17-20-04-13.gh-issue-120633.kZC5wt.rst"
        ],
        "message": "[3.13] gh-120633: Move scrollbar and remove tear-off menus in turtledemo (GH-120634) (#120725)\n\ngh-120633: Move scrollbar and remove tear-off menus in turtledemo (GH-120634)\n(cherry picked from commit 89f7208f672be635e923f04c19a7480eb8eb414c)\n\nCo-authored-by: Wulian233 <71213467+Wulian233@users.noreply.github.com>\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>",
        "before_after_code_files": [
          "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py": [
          "File: Lib/turtledemo/__main__.py -> Lib/turtledemo/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:         self.vbar = vbar = Scrollbar(text_frame, name='vbar')",
          "220:         vbar['command'] = text.yview",
          "222:         self.hbar = hbar = Scrollbar(text_frame, name='hbar', orient=HORIZONTAL)",
          "223:         hbar['command'] = text.xview",
          "224:         hbar.pack(side=BOTTOM, fill=X)",
          "",
          "[Removed Lines]",
          "221:         vbar.pack(side=LEFT, fill=Y)",
          "",
          "[Added Lines]",
          "221:         vbar.pack(side=RIGHT, fill=Y)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:         self.output_lbl.config(text=txt, fg=color)",
          "296:     def makeLoadDemoMenu(self, master):",
          "299:         for entry in getExampleEntries():",
          "300:             def load(entry=entry):",
          "",
          "[Removed Lines]",
          "297:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "297:         menu = Menu(master, tearoff=1)  # TJR: leave this one.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:         return menu",
          "306:     def makeFontMenu(self, master):",
          "308:         menu.add_command(label=\"Decrease (C-'-')\", command=self.decrease_size,",
          "309:                          font=menufont)",
          "310:         menu.add_command(label=\"Increase (C-'+')\", command=self.increase_size,",
          "",
          "[Removed Lines]",
          "307:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "307:         menu = Menu(master, tearoff=0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:         return menu",
          "321:     def makeHelpMenu(self, master):",
          "324:         for help_label, help_file in help_entries:",
          "325:             def show(help_label=help_label, help_file=help_file):",
          "",
          "[Removed Lines]",
          "322:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "322:         menu = Menu(master, tearoff=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
      "candidate_info": {
        "commit_hash": "7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
        "files": [
          "Python/Python-tokenize.c"
        ],
        "message": "[3.13] gh-119704: Fix reference leak in the ``Python/Python-tokenize.c`` (GH-119705) (#119707)",
        "before_after_code_files": [
          "Python/Python-tokenize.c||Python/Python-tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/Python-tokenize.c||Python/Python-tokenize.c": [
          "File: Python/Python-tokenize.c -> Python/Python-tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: tokenizeriter_dealloc(tokenizeriterobject *it)",
          "312: {",
          "313:     PyTypeObject *tp = Py_TYPE(it);",
          "314:     _PyTokenizer_Free(it->tok);",
          "315:     tp->tp_free(it);",
          "316:     Py_DECREF(tp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     Py_XDECREF(it->last_line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "846cfb9a67fa4bdb81cd482a4a9e41a089ea80b3",
      "candidate_info": {
        "commit_hash": "846cfb9a67fa4bdb81cd482a4a9e41a089ea80b3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/846cfb9a67fa4bdb81cd482a4a9e41a089ea80b3",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-05-07-16-57-56.gh-issue-118561.wNMKVd.rst",
          "Objects/listobject.c"
        ],
        "message": "[3.13] gh-118561: Fix crash involving list.extend in free-threaded build (GH-118723) (#118863)\n\nThe `list_preallocate_exact` function did not zero initialize array\ncontents. In the free-threaded build, this could expose uninitialized\nmemory to concurrent readers between the call to\n`list_preallocate_exact` and the filling of the array contents with\nitems.\n(cherry picked from commit 2402715e10d00ef60fad2948d8461559d084eb36)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/listobject.c||Objects/listobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:         return -1;",
          "193:     }",
          "194:     items = array->ob_item;",
          "195: #else",
          "196:     items = PyMem_New(PyObject*, size);",
          "197:     if (items == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     memset(items, 0, size * sizeof(PyObject *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         return -1;",
          "200:     }",
          "201: #endif",
          "203:     self->allocated = size;",
          "204:     return 0;",
          "205: }",
          "",
          "[Removed Lines]",
          "202:     self->ob_item = items;",
          "",
          "[Added Lines]",
          "203:     FT_ATOMIC_STORE_PTR_RELEASE(self->ob_item, items);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
      "candidate_info": {
        "commit_hash": "4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
        "files": [
          "Lib/concurrent/futures/__init__.py",
          "Misc/NEWS.d/next/Library/2024-06-05-16-30-28.gh-issue-120121.9dz8i7.rst"
        ],
        "message": "[3.13] gh-120121: Add InvalidStateError to concurrent.futures.__all__ (GH-120123) (#120273)\n\ngh-120121: Add InvalidStateError to concurrent.futures.__all__ (GH-120123)\n(cherry picked from commit 5d59b870effa0f576acf7264cfcbfca2b36e34e3)\n\nCo-authored-by: AN Long <aisk@users.noreply.github.com>\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/concurrent/futures/__init__.py||Lib/concurrent/futures/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/concurrent/futures/__init__.py||Lib/concurrent/futures/__init__.py": [
          "File: Lib/concurrent/futures/__init__.py -> Lib/concurrent/futures/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     'ALL_COMPLETED',",
          "24:     'CancelledError',",
          "25:     'TimeoutError',",
          "26:     'BrokenExecutor',",
          "27:     'Future',",
          "28:     'Executor',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     'InvalidStateError',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b9ca26812fabcd1202238c989f0f0a9e5b02e87",
      "candidate_info": {
        "commit_hash": "7b9ca26812fabcd1202238c989f0f0a9e5b02e87",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7b9ca26812fabcd1202238c989f0f0a9e5b02e87",
        "files": [
          "Include/internal/pycore_gc.h",
          "Include/internal/pycore_object.h",
          "Objects/object.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix data races when writing / reading `ob_gc_bits` (GH-118292) (#118796)\n\nUse relaxed atomics when reading / writing to the field. There are still a\nfew places in the GC where we do not use atomics. Those should be safe as\nthe world is stopped.\n(cherry picked from commit cb6f75a32ca2649c6cc1cabb0301eb783efbd55b)\n\nCo-authored-by: mpage <mpage@meta.com>",
        "before_after_code_files": [
          "Include/internal/pycore_gc.h||Include/internal/pycore_gc.h",
          "Include/internal/pycore_object.h||Include/internal/pycore_object.h",
          "Objects/object.c||Objects/object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_gc.h||Include/internal/pycore_gc.h": [
          "File: Include/internal/pycore_gc.h -> Include/internal/pycore_gc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #  define _PyGC_BITS_DEFERRED       (64)    // Use deferred reference counting",
          "49: #endif",
          "52: static inline int _PyObject_GC_IS_TRACKED(PyObject *op) {",
          "53: #ifdef Py_GIL_DISABLED",
          "55: #else",
          "56:     PyGC_Head *gc = _Py_AS_GC(op);",
          "57:     return (gc->_gc_next != 0);",
          "",
          "[Removed Lines]",
          "54:     return (op->ob_gc_bits & _PyGC_BITS_TRACKED) != 0;",
          "",
          "[Added Lines]",
          "59: #ifdef Py_GIL_DISABLED",
          "61: static inline void",
          "62: _PyObject_SET_GC_BITS(PyObject *op, uint8_t new_bits)",
          "63: {",
          "64:     uint8_t bits = _Py_atomic_load_uint8_relaxed(&op->ob_gc_bits);",
          "65:     _Py_atomic_store_uint8_relaxed(&op->ob_gc_bits, bits | new_bits);",
          "66: }",
          "68: static inline int",
          "69: _PyObject_HAS_GC_BITS(PyObject *op, uint8_t bits)",
          "70: {",
          "71:     return (_Py_atomic_load_uint8_relaxed(&op->ob_gc_bits) & bits) != 0;",
          "72: }",
          "74: static inline void",
          "75: _PyObject_CLEAR_GC_BITS(PyObject *op, uint8_t bits_to_clear)",
          "76: {",
          "77:     uint8_t bits = _Py_atomic_load_uint8_relaxed(&op->ob_gc_bits);",
          "78:     _Py_atomic_store_uint8_relaxed(&op->ob_gc_bits, bits & ~bits_to_clear);",
          "79: }",
          "81: #endif",
          "86:     return _PyObject_HAS_GC_BITS(op, _PyGC_BITS_TRACKED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: static inline int _PyObject_GC_IS_SHARED(PyObject *op) {",
          "84: }",
          "85: #define _PyObject_GC_IS_SHARED(op) _PyObject_GC_IS_SHARED(_Py_CAST(PyObject*, op))",
          "87: static inline void _PyObject_GC_SET_SHARED(PyObject *op) {",
          "89: }",
          "90: #define _PyObject_GC_SET_SHARED(op) _PyObject_GC_SET_SHARED(_Py_CAST(PyObject*, op))",
          "",
          "[Removed Lines]",
          "83:     return (op->ob_gc_bits & _PyGC_BITS_SHARED) != 0;",
          "88:     op->ob_gc_bits |= _PyGC_BITS_SHARED;",
          "",
          "[Added Lines]",
          "115:     return _PyObject_HAS_GC_BITS(op, _PyGC_BITS_SHARED);",
          "120:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_SHARED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: static inline int _PyObject_GC_IS_SHARED_INLINE(PyObject *op) {",
          "99: }",
          "100: #define _PyObject_GC_IS_SHARED_INLINE(op) \\",
          "101:     _PyObject_GC_IS_SHARED_INLINE(_Py_CAST(PyObject*, op))",
          "103: static inline void _PyObject_GC_SET_SHARED_INLINE(PyObject *op) {",
          "105: }",
          "106: #define _PyObject_GC_SET_SHARED_INLINE(op) \\",
          "107:     _PyObject_GC_SET_SHARED_INLINE(_Py_CAST(PyObject*, op))",
          "",
          "[Removed Lines]",
          "98:     return (op->ob_gc_bits & _PyGC_BITS_SHARED_INLINE) != 0;",
          "104:     op->ob_gc_bits |= _PyGC_BITS_SHARED_INLINE;",
          "",
          "[Added Lines]",
          "130:     return _PyObject_HAS_GC_BITS(op, _PyGC_BITS_SHARED_INLINE);",
          "136:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_SHARED_INLINE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: static inline int _PyGC_FINALIZED(PyObject *op) {",
          "180: #ifdef Py_GIL_DISABLED",
          "182: #else",
          "183:     PyGC_Head *gc = _Py_AS_GC(op);",
          "184:     return ((gc->_gc_prev & _PyGC_PREV_MASK_FINALIZED) != 0);",
          "",
          "[Removed Lines]",
          "181:     return (op->ob_gc_bits & _PyGC_BITS_FINALIZED) != 0;",
          "",
          "[Added Lines]",
          "213:     return _PyObject_HAS_GC_BITS(op, _PyGC_BITS_FINALIZED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186: }",
          "187: static inline void _PyGC_SET_FINALIZED(PyObject *op) {",
          "188: #ifdef Py_GIL_DISABLED",
          "190: #else",
          "191:     PyGC_Head *gc = _Py_AS_GC(op);",
          "192:     gc->_gc_prev |= _PyGC_PREV_MASK_FINALIZED;",
          "",
          "[Removed Lines]",
          "189:     op->ob_gc_bits |= _PyGC_BITS_FINALIZED;",
          "",
          "[Added Lines]",
          "221:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_FINALIZED);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194: }",
          "195: static inline void _PyGC_CLEAR_FINALIZED(PyObject *op) {",
          "196: #ifdef Py_GIL_DISABLED",
          "198: #else",
          "199:     PyGC_Head *gc = _Py_AS_GC(op);",
          "200:     gc->_gc_prev &= ~_PyGC_PREV_MASK_FINALIZED;",
          "",
          "[Removed Lines]",
          "197:     op->ob_gc_bits &= ~_PyGC_BITS_FINALIZED;",
          "",
          "[Added Lines]",
          "229:     _PyObject_CLEAR_GC_BITS(op, _PyGC_BITS_FINALIZED);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_object.h||Include/internal/pycore_object.h": [
          "File: Include/internal/pycore_object.h -> Include/internal/pycore_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: _PyObject_HasDeferredRefcount(PyObject *op)",
          "169: {",
          "170: #ifdef Py_GIL_DISABLED",
          "172: #else",
          "173:     return 0;",
          "174: #endif",
          "",
          "[Removed Lines]",
          "171:     return (op->ob_gc_bits & _PyGC_BITS_DEFERRED) != 0;",
          "",
          "[Added Lines]",
          "171:     return _PyObject_HAS_GC_BITS(op, _PyGC_BITS_DEFERRED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:                           \"object already tracked by the garbage collector\",",
          "321:                           filename, lineno, __func__);",
          "322: #ifdef Py_GIL_DISABLED",
          "324: #else",
          "325:     PyGC_Head *gc = _Py_AS_GC(op);",
          "326:     _PyObject_ASSERT_FROM(op,",
          "",
          "[Removed Lines]",
          "323:     op->ob_gc_bits |= _PyGC_BITS_TRACKED;",
          "",
          "[Added Lines]",
          "323:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_TRACKED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:                           filename, lineno, __func__);",
          "363: #ifdef Py_GIL_DISABLED",
          "365: #else",
          "366:     PyGC_Head *gc = _Py_AS_GC(op);",
          "367:     PyGC_Head *prev = _PyGCHead_PREV(gc);",
          "",
          "[Removed Lines]",
          "364:     op->ob_gc_bits &= ~_PyGC_BITS_TRACKED;",
          "",
          "[Added Lines]",
          "364:     _PyObject_CLEAR_GC_BITS(op, _PyGC_BITS_TRACKED);",
          "",
          "---------------"
        ],
        "Objects/object.c||Objects/object.c": [
          "File: Objects/object.c -> Objects/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2431:     assert(PyType_IS_GC(Py_TYPE(op)));",
          "2432:     assert(_Py_IsOwnedByCurrentThread(op));",
          "2433:     assert(op->ob_ref_shared == 0);",
          "2434:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "2435:     if (interp->gc.immortalize.enabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2434:     _PyObject_SET_GC_BITS(op, _PyGC_BITS_DEFERRED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2438:         _Py_SetImmortal(op);",
          "2439:         return;",
          "2440:     }",
          "2442:     op->ob_ref_local += 1;",
          "2443:     op->ob_ref_shared = _Py_REF_QUEUED;",
          "2444: #endif",
          "",
          "[Removed Lines]",
          "2441:     op->ob_gc_bits |= _PyGC_BITS_DEFERRED;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}