{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
      "candidate_info": {
        "commit_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "files": [
          "channels/cliprdr/server/cliprdr_main.c"
        ],
        "message": "Fixed cliprdr_server_receive_capabilities\n\nThanks to hac425 CVE-2020-11017, CVE-2020-11018",
        "before_after_code_files": [
          "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c": [
          "File: channels/cliprdr/server/cliprdr_main.c -> channels/cliprdr/server/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: static UINT cliprdr_server_receive_general_capability(CliprdrServerContext* context, wStream* s,",
          "433:                                                       CLIPRDR_GENERAL_CAPABILITY_SET* cap_set)",
          "434: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (Stream_GetRemainingLength(s) < 8)",
          "436:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:  UINT16 index;",
          "465:  UINT16 capabilitySetType;",
          "466:  UINT16 capabilitySetLength;",
          "468:  size_t cap_sets_size = 0;",
          "470:  CLIPRDR_CAPABILITY_SET* capSet;",
          "473:  WINPR_UNUSED(header);",
          "478:  WLog_DBG(TAG, \"CliprdrClientCapabilities\");",
          "482:  for (index = 0; index < capabilities.cCapabilitiesSets; index++)",
          "483:  {",
          "487:   cap_sets_size += capabilitySetLength;",
          "490:   if (tmp == NULL)",
          "491:   {",
          "492:    WLog_ERR(TAG, \"capabilities.capabilitySets realloc failed!\");",
          "",
          "[Removed Lines]",
          "467:  UINT error = CHANNEL_RC_OK;",
          "469:  CLIPRDR_CAPABILITIES capabilities;",
          "471:  void* tmp;",
          "476:  capabilities.capabilitySets = NULL;",
          "489:   tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "[Added Lines]",
          "470:  UINT error = ERROR_INVALID_DATA;",
          "472:  CLIPRDR_CAPABILITIES capabilities = { 0 };",
          "479:  if (Stream_GetRemainingLength(s) < 4)",
          "480:   return ERROR_INVALID_DATA;",
          "487:   void* tmp = NULL;",
          "488:   if (Stream_GetRemainingLength(s) < 4)",
          "489:    goto out;",
          "495:   if (cap_sets_size > 0)",
          "496:    tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:   switch (capSet->capabilitySetType)",
          "505:   {",
          "506:    case CB_CAPSTYPE_GENERAL:",
          "509:     {",
          "510:      WLog_ERR(TAG,",
          "511:               \"cliprdr_server_receive_general_capability failed with error %\" PRIu32",
          "",
          "[Removed Lines]",
          "507:     if ((error = cliprdr_server_receive_general_capability(",
          "508:              context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet)))",
          "",
          "[Added Lines]",
          "514:     error = cliprdr_server_receive_general_capability(",
          "515:         context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet);",
          "516:     if (error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "518:    default:",
          "519:     WLog_ERR(TAG, \"unknown cliprdr capability set: %\" PRIu16 \"\",",
          "520:              capSet->capabilitySetType);",
          "522:     goto out;",
          "523:   }",
          "524:  }",
          "526:  IFCALLRET(context->ClientCapabilities, error, context, &capabilities);",
          "527: out:",
          "528:  free(capabilities.capabilitySets);",
          "",
          "[Removed Lines]",
          "521:     error = ERROR_INVALID_DATA;",
          "",
          "[Added Lines]",
          "533:  error = CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37344f443e06113a2f83ad04b4499da2371b5c58",
      "candidate_info": {
        "commit_hash": "37344f443e06113a2f83ad04b4499da2371b5c58",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/37344f443e06113a2f83ad04b4499da2371b5c58",
        "files": [
          "client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle"
        ],
        "message": "Increased android client build number to 100\n\nWe need to be able to release a few 2.0 builds before this master\nbuild will be ready.",
        "before_after_code_files": [
          "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle",
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/aFreeRDP/build.gradle||client/Android/Studio/aFreeRDP/build.gradle": [
          "File: client/Android/Studio/aFreeRDP/build.gradle -> client/Android/Studio/aFreeRDP/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         minSdkVersion 21",
          "10:         targetSdkVersion 28",
          "11:         vectorDrawables.useSupportLibrary = true",
          "13:         versionName = rootProject.ext.versionName",
          "14:     }",
          "",
          "[Removed Lines]",
          "12:         versionCode = 15",
          "",
          "[Added Lines]",
          "12:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "33:     println '----------------- Project configuration -------------------'",
          "34:     println 'VERSION_NAME:       ' + versionName",
          "35:     println 'RELEASE_STORE_FILE: '+ RELEASE_STORE_FILE",
          "36:     println 'RELEASE_KEY_ALIAS:  '+ RELEASE_KEY_ALIAS",
          "37:     println '-----------------------------------------------------------'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 100)",
          "36:     println 'VERSION_CODE:       ' + versionCode",
          "",
          "---------------"
        ],
        "client/Android/Studio/freeRDPCore/build.gradle||client/Android/Studio/freeRDPCore/build.gradle": [
          "File: client/Android/Studio/freeRDPCore/build.gradle -> client/Android/Studio/freeRDPCore/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:         minSdkVersion 21",
          "9:         targetSdkVersion 28",
          "10:         vectorDrawables.useSupportLibrary = true",
          "12:         versionName = rootProject.ext.versionName",
          "13:     }",
          "",
          "[Removed Lines]",
          "11:         versionCode = 15",
          "",
          "[Added Lines]",
          "11:         versionCode = rootProject.ext.versionCode",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
      "candidate_info": {
        "commit_hash": "a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a167f3b779aee4012e8d3cccbbd2ffea8a41b2d3",
        "files": [
          "libfreerdp/codec/progressive.c"
        ],
        "message": "Fixed possible int overflow.",
        "before_after_code_files": [
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:                                                       UINT16 blockType, UINT32 blockLen,",
          "1921:                                                       PROGRESSIVE_BLOCK_REGION* region)",
          "1922: {",
          "1925:  memset(region, 0, sizeof(PROGRESSIVE_BLOCK_REGION));",
          "1926:  if (Stream_GetRemainingLength(s) < 12)",
          "",
          "[Removed Lines]",
          "1923:  size_t offset, len;",
          "",
          "[Added Lines]",
          "1923:  size_t len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1965:  }",
          "1967:  len = Stream_GetRemainingLength(s);",
          "1970:  {",
          "1971:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->rects\");",
          "1972:   return -1015;",
          "1973:  }",
          "1977:  {",
          "1978:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->cQuant\");",
          "1979:   return -1018;",
          "1980:  }",
          "1984:  {",
          "1985:   WLog_Print(progressive->log, WLOG_ERROR,",
          "1986:              \"ProgressiveRegion data short for region->cProgQuant\");",
          "1987:   return -1021;",
          "1988:  }",
          "1992:  {",
          "1993:   WLog_Print(progressive->log, WLOG_ERROR, \"ProgressiveRegion data short for region->tiles\");",
          "1994:   return -1024;",
          "1995:  }",
          "1997:  return 0;",
          "1998: }",
          "",
          "[Removed Lines]",
          "1968:  offset = (region->numRects * 8);",
          "1969:  if (len < offset)",
          "1975:  offset += (region->numQuant * 5);",
          "1976:  if (len < offset)",
          "1982:  offset += (region->numProgQuant * 16);",
          "1983:  if (len < offset)",
          "1990:  offset += region->tileDataSize;",
          "1991:  if (len < offset)",
          "",
          "[Added Lines]",
          "1968:  if (len / 8 < region->numRects)",
          "1973:  len -= region->numRects * 8ULL;",
          "1975:  if (len / 5 < region->numQuant)",
          "1980:  len -= region->numQuant * 5ULL;",
          "1982:  if (len / 16 < region->numProgQuant)",
          "1988:  len -= region->numProgQuant * 16ULL;",
          "1990:  if (len < region->tileDataSize)",
          "1995:  len -= region->tileDataSize;",
          "1996:  if (len > 0)",
          "1997:   WLog_Print(progressive->log, WLOG_DEBUG,",
          "1998:              \"Unused byes detected, %\" PRIuz \" bytes not processed\", len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbee45aace1bb4fd485633224db5433443a201fe",
      "candidate_info": {
        "commit_hash": "cbee45aace1bb4fd485633224db5433443a201fe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cbee45aace1bb4fd485633224db5433443a201fe",
        "files": [
          "channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c"
        ],
        "message": "Fixed clipboard 'called with invalid type' warning",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m||client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c": [
          "File: channels/cliprdr/client/cliprdr_format.c -> channels/cliprdr/client/cliprdr_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: UINT cliprdr_process_format_list(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "44:                                  UINT16 msgFlags)",
          "45: {",
          "47:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "48:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: UINT cliprdr_process_format_list_response(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "83:                                           UINT16 msgFlags)",
          "84: {",
          "86:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "87:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse;",
          "",
          "[Added Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse = { 0 };",
          "",
          "---------------"
        ],
        "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c": [
          "File: client/Android/android_cliprdr.c -> client/Android/android_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  formatList.msgFlags = CB_RESPONSE_OK;",
          "82:  formatList.numFormats = numFormats;",
          "83:  formatList.formats = formats;",
          "85:  if (!afc->cliprdr->ClientFormatList)",
          "86:   goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Mac/Clipboard.m||client/Mac/Clipboard.m": [
          "File: client/Mac/Clipboard.m -> client/Mac/Clipboard.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  UINT32 *pFormatIds;",
          "29:  const char *formatName;",
          "30:  CLIPRDR_FORMAT *formats;",
          "32:  mfContext *mfc = (mfContext *)cliprdr->custom;",
          "34:  ZeroMemory(&formatList, sizeof(CLIPRDR_FORMAT_LIST));",
          "",
          "[Removed Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  formatList.msgFlags = CB_RESPONSE_OK;",
          "57:  formatList.numFormats = numFormats;",
          "58:  formatList.formats = formats;",
          "60:  mfc->cliprdr->ClientFormatList(mfc->cliprdr, &formatList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c": [
          "File: client/Wayland/wlf_cliprdr.c -> client/Wayland/wlf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:  formatList.msgFlags = CB_RESPONSE_OK;",
          "175:  formatList.numFormats = (UINT32)clipboard->numClientFormats;",
          "176:  formatList.formats = clipboard->clientFormats;",
          "177:  return clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c": [
          "File: client/Windows/wf_cliprdr.c -> client/Windows/wf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235:  UINT32 formatId = 0;",
          "1236:  char formatName[1024];",
          "1237:  CLIPRDR_FORMAT* formats = NULL;",
          "1240:  if (!clipboard)",
          "1241:   return ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288:  formatList.numFormats = numFormats;",
          "1289:  formatList.formats = formats;",
          "1290:  rc = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1292:  for (index = 0; index < numFormats; index++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c": [
          "File: client/X11/xf_cliprdr.c -> client/X11/xf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:  formatList.msgFlags = CB_RESPONSE_OK;",
          "534:  formatList.numFormats = numFormats;",
          "535:  formatList.formats = formats;",
          "536:  clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "537:  xf_cliprdr_free_formats(formats, numFormats);",
          "538: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:  formatList.msgFlags = CB_RESPONSE_OK;",
          "1101:  formatList.numFormats = numFormats;",
          "1102:  formatList.formats = formats;",
          "1103:  ret = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1104:  free(formats);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c": [
          "File: server/proxy/pf_cliprdr.c -> server/proxy/pf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:  if (pdata->config->TextOnly)",
          "296:  {",
          "298:   pf_cliprdr_create_text_only_format_list(&list);",
          "299:   return server->ServerFormatList(server, &list);",
          "300:  }",
          "",
          "[Removed Lines]",
          "297:   CLIPRDR_FORMAT_LIST list;",
          "",
          "[Added Lines]",
          "297:   CLIPRDR_FORMAT_LIST list = { 0 };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a73adecaf4709fbe0f62a0407ab820f5d112e908",
      "candidate_info": {
        "commit_hash": "a73adecaf4709fbe0f62a0407ab820f5d112e908",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a73adecaf4709fbe0f62a0407ab820f5d112e908",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6112: Segfault in update_decompress_brush\n\nThe iterators need to be signed for the loop check to work.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2497: }",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2499: {",
          "2501:  BYTE byte = 0;",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2506:   return FALSE;",
          "",
          "[Removed Lines]",
          "2500:  UINT32 x, y, k;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "[Added Lines]",
          "2500:  INT32 x, y, k;",
          "2503:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "---------------"
        ]
      }
    }
  ]
}