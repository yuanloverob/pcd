{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba938f9d76b277e0cb9f4cf27f7ea46bd89ca917",
      "candidate_info": {
        "commit_hash": "ba938f9d76b277e0cb9f4cf27f7ea46bd89ca917",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ba938f9d76b277e0cb9f4cf27f7ea46bd89ca917",
        "files": [
          "modules/tracer/tracer.c"
        ],
        "message": "[tracer] avoid parsing the shm cloned SIP msg\n\nThe TM TMCB_MSG_SENT_OUT callback may be called when doing a retransmission for a locally generated request. If for the original sending, a pkg malloc'ed sip_msg is passed to TMCB_MSG_SENT_OUT callback, for the retransmissions the shm cloned sip_msg is passed. As the 'tracer' callback (on TMCB_MSG_SENT_OUT) requires some FROM hdr parsing (to get the from tag), it should NOT parse directly on the shm cloned SIP msg as it will tain the shm sip_msg with pkg pointers -> better do a local parsing (not attached to the sip_msg) of the FROM HDR.\nThis issue was leading to pkg leaking (of the parsed FROM hdr in the shm cloned sip_msg) or it a crash if using failure route from the local route.\n\nNote: this is specific to using tracer module from the local route.\nCloses  #2728\n\n(cherry picked from commit 4eabea8a9eb0a08909854722972cd35164557c76)",
        "before_after_code_files": [
          "modules/tracer/tracer.c||modules/tracer/tracer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/tracer/tracer.c||modules/tracer/tracer.c": [
          "File: modules/tracer/tracer.c -> modules/tracer/tracer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2344:  static char toip_buff[IP_ADDR_MAX_STR_SIZE+12];",
          "2345:  struct ip_addr to_ip;",
          "2346:  trace_instance_p instance;",
          "2358:  }",
          "2360:  LM_DBG(\"trace msg out \\n\");",
          "",
          "[Removed Lines]",
          "2348:  if(parse_from_header(msg)==-1 || msg->from==NULL || get_from(msg)==NULL)",
          "2349:  {",
          "2350:   LM_ERR(\"cannot parse FROM header\\n\");",
          "2351:   goto error;",
          "2352:  }",
          "2354:  if(parse_headers(msg, HDR_CALLID_F, 0)!=0)",
          "2355:  {",
          "2356:   LM_ERR(\"cannot parse call-id\\n\");",
          "2357:   return;",
          "",
          "[Added Lines]",
          "2347:  struct to_body from_b;",
          "2348:  str from_tag;",
          "2350:  if (msg->msg_flags&FL_SHM_CLONE) {",
          "2355:   if (msg->from) {",
          "2356:    if (get_from(msg)) {",
          "2357:     from_tag = get_from(msg)->tag_value;",
          "2358:    } else {",
          "2359:     parse_to( msg->from->body.s,",
          "2360:      msg->from->body.s+msg->from->body.len+1, &from_b);",
          "2361:     if (from_b.error == PARSE_ERROR) {",
          "2362:      from_tag.s = NULL;",
          "2363:      from_tag.s = 0;",
          "2364:     } else {",
          "2365:      from_tag = from_b.tag_value;",
          "2366:      free_to_params(&from_b);",
          "2367:     }",
          "2368:    }",
          "2369:   } else {",
          "2370:    from_tag.s = NULL;",
          "2371:    from_tag.s = 0;",
          "2372:   }",
          "2373:  } else {",
          "2374:   if(parse_from_header(msg)==-1||msg->from==NULL||get_from(msg)==NULL)",
          "2375:   {",
          "2376:    LM_ERR(\"cannot parse FROM header\\n\");",
          "2377:    goto error;",
          "2378:   }",
          "2379:   from_tag = get_from(msg)->tag_value;",
          "2381:   if(parse_headers(msg, HDR_CALLID_F, 0)!=0)",
          "2382:   {",
          "2383:    LM_ERR(\"cannot parse call-id\\n\");",
          "2384:    return;",
          "2385:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2429:  db_vals[11].val.string_val = \"out\";",
          "2434:  for (instance = info->instances; instance; instance = instance->next) {",
          "2435:   if ( trace_check_legs( instance, leg_flag)) {",
          "",
          "[Removed Lines]",
          "2431:  db_vals[12].val.str_val.s = get_from(msg)->tag_value.s;",
          "2432:  db_vals[12].val.str_val.len = get_from(msg)->tag_value.len;",
          "",
          "[Added Lines]",
          "2459:  db_vals[12].val.str_val = from_tag;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b4b96e90696c1c37b2a7f91e70215918e2dc597",
      "candidate_info": {
        "commit_hash": "2b4b96e90696c1c37b2a7f91e70215918e2dc597",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/2b4b96e90696c1c37b2a7f91e70215918e2dc597",
        "files": [
          "modules/sipmsgops/doc/sipmsgops_admin.xml",
          "modules/sipmsgops/uri.c"
        ],
        "message": "sipmsgops: Fix ruri_del_param() return value on success\n\nThe issue was that set_ruri() actually returns 0/-1, not 1/0 as the\ndeveloper expected.\n\nAlso update docs to reflect the function's return code meaning.\n\n(cherry picked from commit eea215278c479a22434aefd651c95b2ad777ecc1)",
        "before_after_code_files": [
          "modules/sipmsgops/uri.c||modules/sipmsgops/uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/sipmsgops/uri.c||modules/sipmsgops/uri.c": [
          "File: modules/sipmsgops/uri.c -> modules/sipmsgops/uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:    if (end_len)",
          "189:     memcpy(new_uri.s + begin_len, param_tok.s + param_tok.len, end_len);",
          "195:     pkg_free(new_uri.s);",
          "196:     return -1;",
          "197:    }",
          "198:   }",
          "199:  }",
          "",
          "[Removed Lines]",
          "191:    if (set_ruri(_msg, &new_uri) == 1) {",
          "192:     pkg_free(new_uri.s);",
          "193:     return  1;",
          "194:    } else {",
          "",
          "[Added Lines]",
          "191:    if (set_ruri(_msg, &new_uri) < 0) {",
          "193:     LM_ERR(\"failed to set new R-URI\\n\");",
          "197:    pkg_free(new_uri.s);",
          "198:    return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4f4543218df36b8bc0f9bce2870a898123deb06",
      "candidate_info": {
        "commit_hash": "e4f4543218df36b8bc0f9bce2870a898123deb06",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/e4f4543218df36b8bc0f9bce2870a898123deb06",
        "files": [
          "modules/call_center/call_center.c"
        ],
        "message": "[call_center] avoid a negative setup_time in CDR\n\nIn the DB schema, the setup_time is an unsigned, and a -1 value was computed while a call was rejected by an agent\n\n(cherry picked from commit 9dc28a91c68db792f1df4cf1d6ce8d0faf83ad0e)",
        "before_after_code_files": [
          "modules/call_center/call_center.c||modules/call_center/call_center.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/call_center/call_center.c||modules/call_center/call_center.c": [
          "File: modules/call_center/call_center.c -> modules/call_center/call_center.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:  lock_release( data->lock );",
          "537:  type = (stat==NULL) ? -1 : ((prev_state==CC_CALL_TOAGENT && stat->call_time)? 0 : 1);",
          "",
          "[Removed Lines]",
          "533:  if (call->setup_time==-1 && stat)",
          "534:   call->setup_time = stat->setup_time;",
          "",
          "[Added Lines]",
          "533:  if (call->setup_time==-1)",
          "534:   call->setup_time = stat ? stat->setup_time : 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5888125f77978c718c9da72fc67e7f44b9f39c0",
      "candidate_info": {
        "commit_hash": "c5888125f77978c718c9da72fc67e7f44b9f39c0",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c5888125f77978c718c9da72fc67e7f44b9f39c0",
        "files": [
          "modules/dialog/dlg_replication.c"
        ],
        "message": "dialog: fix typo in commit edc90fb\n\n(cherry picked from commit 3cebaf73059932183392761a040969efb887bcea)",
        "before_after_code_files": [
          "modules/dialog/dlg_replication.c||modules/dialog/dlg_replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/dialog/dlg_replication.c||modules/dialog/dlg_replication.c": [
          "File: modules/dialog/dlg_replication.c -> modules/dialog/dlg_replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   }",
          "160:   dlg_sync_in_progress = shm_malloc(sizeof *dlg_sync_in_progress);",
          "162:    LM_ERR(\"no more shm memory!\\n\");",
          "163:    return -1;",
          "164:   }",
          "",
          "[Removed Lines]",
          "161:   if (*dlg_sync_in_progress) {",
          "",
          "[Added Lines]",
          "161:   if (!dlg_sync_in_progress) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43f00304aa045464b753da38a989c6849549954a",
      "candidate_info": {
        "commit_hash": "43f00304aa045464b753da38a989c6849549954a",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/43f00304aa045464b753da38a989c6849549954a",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h"
        ],
        "message": "b2b_entities: provide dlginfo for entity_delete\n\nEach module that uses b2b_entities, should duplicate the dlginfo\nstructure and pass it to the entity_delete API call, otherwise wrong\nentities might be deleted due to mismatches\n\n(cherry picked from commit ce19581557c69dafee5095fecce831e2c2d80704)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "212:  }",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c": [
          "File: modules/media_exchange/media_exchange.c -> modules/media_exchange/media_exchange.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "333:   LM_ERR(\"could not copy b2b client key\\n\");",
          "336:   goto release;",
          "337:  }",
          "338:  msl->params = mf;",
          "",
          "[Removed Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "533:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "536:   goto destroy;",
          "537:  }",
          "538:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "613:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "614:   LM_ERR(\"could not copy b2b client key\\n\");",
          "617:   goto unref;",
          "618:  }",
          "619:  msl->b2b_entity = B2B_CLIENT;",
          "",
          "[Removed Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "806:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "809:   goto destroy;",
          "810:  }",
          "811:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1513: static int b2b_media_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "1514: {",
          "1516:  struct media_session_leg *msl = *(struct media_session_leg **)((str *)key)->s;",
          "1518:  return 0;",
          "1519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516:  msl->dlginfo = b2b_dup_dlginfo(info);",
          "1517:  if (!msl->dlginfo) {",
          "1518:   LM_ERR(\"could not duplicate b2be dialog info!\\n\");",
          "1519:   return -1;",
          "1520:  }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     msl, msl->ms);",
          "74:  }",
          "75:  if (msl->b2b_key.s) {",
          "77:   shm_free(msl->b2b_key.s);",
          "78:   msl->b2b_key.s = NULL;",
          "79:  }",
          "80:  LM_DBG(\"releasing media_session_leg=%p\\n\", msl);",
          "81:  if (msl->params && msl->type == MEDIA_SESSION_TYPE_FORK)",
          "82:   media_forks_free(msl->params);",
          "83:  shm_free(msl);",
          "84: }",
          "",
          "[Removed Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, msl->dlginfo, 1, 1);",
          "83:  if (msl->dlginfo)",
          "84:   shm_free(msl->dlginfo);",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h": [
          "File: modules/media_exchange/media_sessions.h -> modules/media_exchange/media_sessions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  str b2b_key;",
          "46:  int nohold;",
          "47:  gen_lock_t lock;",
          "48:  enum b2b_entity_type b2b_entity;",
          "49:  struct media_session_leg *next;",
          "50:  void *params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    }
  ]
}