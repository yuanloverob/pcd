{
  "cve_id": "CVE-2023-24808",
  "cve_desc": " PDFio is a C library for reading and writing PDF files. In versions prior to 1.1.0 a denial of service (DOS) vulnerability exists in the pdfio parser. Crafted pdf files can cause the program to run at 100% utilization and never terminate. The pdf which causes this crash found in testing is about 28kb in size and was discovered via fuzzing. Anyone who uses this library either as a standalone binary or as a library can be DOSed when attempting to parse this type of file. Web servers or other automated processes which rely on this code to turn pdf submissions into plaintext can be DOSed when an attacker uploads the pdf. Please see the linked GHSA for an example pdf. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "michaelrsweet/pdfio",
  "patch_hash": "4f10021e7ee527c1aa24853e2947e38e154d9ccb",
  "patch_info": {
    "commit_hash": "4f10021e7ee527c1aa24853e2947e38e154d9ccb",
    "repo": "michaelrsweet/pdfio",
    "commit_url": "https://github.com/michaelrsweet/pdfio/commit/4f10021e7ee527c1aa24853e2947e38e154d9ccb",
    "files": [
      "CHANGES.md",
      "Makefile",
      "NOTICE",
      "pdfio-common.c",
      "pdfio-dict.c",
      "pdfio-file.c",
      "pdfio-object.c",
      "pdfio-token.c",
      "pdfio-value.c"
    ],
    "message": "Fix denial-of-service attack when reading corrupt PDF files.",
    "before_after_code_files": [
      "pdfio-common.c||pdfio-common.c",
      "pdfio-dict.c||pdfio-dict.c",
      "pdfio-file.c||pdfio-file.c",
      "pdfio-object.c||pdfio-object.c",
      "pdfio-token.c||pdfio-token.c",
      "pdfio-value.c||pdfio-value.c"
    ]
  },
  "patch_diff": {
    "pdfio-common.c||pdfio-common.c": [
      "File: pdfio-common.c -> pdfio-common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:   else if (_pdfioFileSeek(pdf, (off_t)bytes, SEEK_CUR) < 0)",
      "39:     return (false);",
      "41:   return (true);",
      "42: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41:   PDFIO_DEBUG(\"_pdfioFileConsume: pos=%ld\\n\", (long)(pdf->bufpos + pdf->bufptr - pdf->buffer));",
      "",
      "---------------"
    ],
    "pdfio-dict.c||pdfio-dict.c": [
      "File: pdfio-dict.c -> pdfio-dict.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "541:       _pdfioFileError(pdf, \"Invalid dictionary contents.\");",
      "542:       break;",
      "543:     }",
      "546:     if (!_pdfioValueRead(pdf, obj, tb, &value, depth))",
      "547:     {",
      "548:       _pdfioFileError(pdf, \"Missing value for dictionary key.\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "544:     else if (_pdfioDictGetValue(dict, key + 1))",
      "545:     {",
      "546:       _pdfioFileError(pdf, \"Duplicate dictionary key '%s'.\", key + 1);",
      "547:       return (NULL);",
      "548:     }",
      "551:     PDFIO_DEBUG(\"_pdfioDictRead: Reading value for '%s'.\\n\", key + 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "933: #ifdef DEBUG",
      "934:   PDFIO_DEBUG(\"_pdfioDictSetValue(%p): %lu pairs\\n\", (void *)dict, (unsigned long)dict->num_pairs);",
      "938: #endif // DEBUG",
      "940:   return (true);",
      "",
      "[Removed Lines]",
      "935:   PDFIO_DEBUG(\"_pdfioDictSetValue(%p): \", (void *)dict);",
      "936:   PDFIO_DEBUG_DICT(dict);",
      "937:   PDFIO_DEBUG(\"\\n\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "pdfio-file.c||pdfio-file.c": [
      "File: pdfio-file.c -> pdfio-file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1984:  return (false);",
      "1985:       }",
      "1987:       _pdfioTokenFlush(&tb);",
      "1989:       if (!pdf->trailer_dict)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1987:       PDFIO_DEBUG(\"load_xref: Got trailer dict.\\n\");",
      "",
      "---------------"
    ],
    "pdfio-object.c||pdfio-object.c": [
      "File: pdfio-object.c -> pdfio-object.c"
    ],
    "pdfio-token.c||pdfio-token.c": [
      "File: pdfio-token.c -> pdfio-token.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:   if (tb->num_tokens > 0)",
      "130:   {",
      "132:     tb->num_tokens --;",
      "136:     PDFIO_DEBUG(\"_pdfioTokenGet(tb=%p, buffer=%p, bufsize=%u): Popping '%s' from stack.\\n\", tb, buffer, (unsigned)bufsize, buffer);",
      "",
      "[Removed Lines]",
      "133:     strncpy(buffer, tb->tokens[tb->num_tokens], bufsize - 1);",
      "134:     buffer[bufsize - 1] = '\\0';",
      "",
      "[Added Lines]",
      "132:     size_t len;    // Length of token",
      "136:     if ((len = strlen(tb->tokens[tb->num_tokens])) > (bufsize - 1))",
      "137:     {",
      "139:       PDFIO_DEBUG(\"_pdfioTokenGet(tb=%p, buffer=%p, bufsize=%u): Token '%s' from stack too large.\\n\", tb, buffer, (unsigned)bufsize, tb->tokens[tb->num_tokens]);",
      "141:       return (false);",
      "142:     }",
      "144:     memcpy(buffer, tb->tokens[tb->num_tokens], len);",
      "145:     buffer[len] = '\\0';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "541:   return (bufptr > buffer);",
      "542: }",
      "",
      "[Removed Lines]",
      "539:   PDFIO_DEBUG(\"_pdfioTokenRead: Read '%s'.\\n\", buffer);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "573:     tb->bufptr = tb->buffer;",
      "574:     tb->bufend = tb->buffer + bytes;",
      "576: #ifdef DEBUG",
      "577:     unsigned char *ptr;   // Pointer into buffer",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587: #if 0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "586:     }",
      "587:     PDFIO_DEBUG(\"'\\n\");",
      "588: #endif // DEBUG",
      "589:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "601: #endif // 0",
      "",
      "---------------"
    ],
    "pdfio-value.c||pdfio-value.c": [
      "File: pdfio-value.c -> pdfio-value.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c992b2ba8900238c3a50f26dcdab34b4ee8296a7",
      "candidate_info": {
        "commit_hash": "c992b2ba8900238c3a50f26dcdab34b4ee8296a7",
        "repo": "michaelrsweet/pdfio",
        "commit_url": "https://github.com/michaelrsweet/pdfio/commit/c992b2ba8900238c3a50f26dcdab34b4ee8296a7",
        "files": [
          "CHANGES.md",
          "pdfio-file.c",
          "pdfio-token.c"
        ],
        "message": "Update the token reading code to protect against obvious format abuses.\n\nUpdate the xref loading code to protect against looping xref tables.",
        "before_after_code_files": [
          "pdfio-file.c||pdfio-file.c",
          "pdfio-token.c||pdfio-token.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pdfio-file.c||pdfio-file.c",
            "pdfio-token.c||pdfio-token.c"
          ],
          "candidate": [
            "pdfio-file.c||pdfio-file.c",
            "pdfio-token.c||pdfio-token.c"
          ]
        }
      },
      "candidate_diff": {
        "pdfio-file.c||pdfio-file.c": [
          "File: pdfio-file.c -> pdfio-file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2091:     PDFIO_DEBUG_VALUE(&trailer);",
          "2092:     PDFIO_DEBUG(\"\\n\");",
          "2095:       done = true;",
          "2096:   }",
          "",
          "[Removed Lines]",
          "2094:     if ((xref_offset = (off_t)pdfioDictGetNumber(trailer.value.dict, \"Prev\")) <= 0)",
          "",
          "[Added Lines]",
          "2094:     off_t new_offset = (off_t)pdfioDictGetNumber(trailer.value.dict, \"Prev\");",
          "2096:     if (new_offset <= 0)",
          "2097:     {",
          "2099:     }",
          "2100:     else if (new_offset == xref_offset)",
          "2101:     {",
          "2102:       _pdfioFileError(pdf, \"Recursive xref table.\");",
          "2103:       return (false);",
          "2104:     }",
          "2106:     xref_offset = new_offset;",
          "",
          "---------------"
        ],
        "pdfio-token.c||pdfio-token.c": [
          "File: pdfio-token.c -> pdfio-token.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:  state = '\\0';   // Current state",
          "210:   bool saw_nul = false;  // Did we see a nul character?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:   size_t count = 0;   // Number of whitespace/comment bytes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:   while ((ch = get_char(tb)) != EOF)",
          "231:   {",
          "232:     if (ch == '%')",
          "233:     {",
          "235:       while ((ch = get_char(tb)) != EOF)",
          "236:       {",
          "237:  if (ch == '\\n' || ch == '\\r')",
          "238:    break;",
          "239:       }",
          "240:     }",
          "241:     else if (!isspace(ch))",
          "242:       break;",
          "243:   }",
          "245:   if (ch == EOF)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     count ++;",
          "238:       PDFIO_DEBUG(\"_pdfioTokenRead: Skipping comment...\\n\");",
          "241:         count ++;",
          "244:  {",
          "246:  }",
          "247:  else if (count > 2048)",
          "248:  {",
          "249:    _pdfioFileError(tb->pdf, \"Comment too long.\");",
          "251:    return (false);",
          "252:  }",
          "256:     {",
          "258:     }",
          "259:     else if (count > 2048)",
          "260:     {",
          "261:       _pdfioFileError(tb->pdf, \"Too much whitespace.\");",
          "263:       return (false);",
          "264:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:   }",
          "269:   switch (state)",
          "270:   {",
          "271:     case '(' : // Literal string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   PDFIO_DEBUG(\"_pdfioTokenRead: state='%c'\\n\", state);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431:    if (!isdigit(ch) && ch != '.')",
          "432:    {",
          "434:      tb->bufptr --;",
          "435:      break;",
          "436:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:      PDFIO_DEBUG(\"_pdfioTokenRead: End of number with ch=0x%02x\\n\", ch);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:      return (false);",
          "497:    }",
          "498:  }",
          "499:  break;",
          "501:     case '<' : // Potential hex string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:  if (bufptr == (buffer + 1))",
          "526:  {",
          "527:    _pdfioFileError(tb->pdf, \"Empty name.\");",
          "529:    return (false);",
          "530:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:    return (false);",
          "520:  }",
          "522:         do",
          "523:  {",
          "524:    if (isxdigit(ch))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:         count = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "527:      {",
          "530:      }",
          "531:      else",
          "532:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:        count = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "543:      return (false);",
          "544:    }",
          "545:  }",
          "546:  while ((ch = get_char(tb)) != EOF && ch != '>');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:    else",
          "581:    {",
          "582:      count ++;",
          "583:      if (count > 2048)",
          "584:      {",
          "585:        _pdfioFileError(tb->pdf, \"Too much whitespace.\");",
          "587:        return (false);",
          "588:      }",
          "589:    }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "574:   return (bufptr > buffer);",
          "575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617:   PDFIO_DEBUG(\"_pdfioTokenRead: Read '%s'.\\n\", buffer);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "606:     tb->bufptr = tb->buffer;",
          "607:     tb->bufend = tb->buffer + bytes;",
          "610: #ifdef DEBUG",
          "611:     unsigned char *ptr;   // Pointer into buffer",
          "",
          "[Removed Lines]",
          "609: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "620:     }",
          "621:     PDFIO_DEBUG(\"'\\n\");",
          "622: #endif // DEBUG",
          "624:   }",
          "",
          "[Removed Lines]",
          "623: #endif // 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}