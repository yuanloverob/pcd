{
  "cve_id": "CVE-2017-12901",
  "cve_desc": "The EIGRP parser in tcpdump before 4.9.2 has a buffer over-read in print-eigrp.c:eigrp_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "de981e6070d168b58ec1bb0713ded77ed4ad87f4",
  "patch_info": {
    "commit_hash": "de981e6070d168b58ec1bb0713ded77ed4ad87f4",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/de981e6070d168b58ec1bb0713ded77ed4ad87f4",
    "files": [
      "print-eigrp.c",
      "tests/TESTLIST",
      "tests/eigrp-tlv-oobr.out",
      "tests/eigrp-tlv-oobr.pcap"
    ],
    "message": "CVE-2017-12901/EIGRP: Do more length checks.\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom\u00e4ki.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-eigrp.c||print-eigrp.c"
    ]
  },
  "patch_diff": {
    "print-eigrp.c||print-eigrp.c": [
      "File: print-eigrp.c -> print-eigrp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "249:     tlen=len-sizeof(struct eigrp_common_header);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "250:     if (len < sizeof(struct eigrp_common_header)) {",
      "251:         ND_PRINT((ndo, \"EIGRP %s, length: %u (too short, < %u)\",",
      "252:                tok2str(eigrp_opcode_values, \"unknown (%u)\",eigrp_com_header->opcode),",
      "253:                len, (u_int) sizeof(struct eigrp_common_header)));",
      "254:         return;",
      "255:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "286:                eigrp_tlv_type,",
      "287:                eigrp_tlv_len));",
      "289:         tlv_tptr=tptr+sizeof(struct eigrp_tlv_header);",
      "290:         tlv_tlen=eigrp_tlv_len-sizeof(struct eigrp_tlv_header);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "296:         if (eigrp_tlv_len < sizeof(struct eigrp_tlv_header)) {",
      "297:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "298:                         (u_int) sizeof(struct eigrp_tlv_header)));",
      "299:                 break;",
      "300:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "297:         case EIGRP_TLV_GENERAL_PARM:",
      "298:             tlv_ptr.eigrp_tlv_general_parm = (const struct eigrp_tlv_general_parm_t *)tlv_tptr;",
      "300:             ND_PRINT((ndo, \"\\n\\t    holdtime: %us, k1 %u, k2 %u, k3 %u, k4 %u, k5 %u\",",
      "301:                    EXTRACT_16BITS(tlv_ptr.eigrp_tlv_general_parm->holdtime),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "311:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_general_parm)) {",
      "312:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "313:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_general_parm))));",
      "314:                 break;",
      "315:             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "309:         case EIGRP_TLV_SW_VERSION:",
      "310:             tlv_ptr.eigrp_tlv_sw_version = (const struct eigrp_tlv_sw_version_t *)tlv_tptr;",
      "312:             ND_PRINT((ndo, \"\\n\\t    IOS version: %u.%u, EIGRP version %u.%u\",",
      "313:                    tlv_ptr.eigrp_tlv_sw_version->ios_major,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "328:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_sw_version)) {",
      "329:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "330:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_sw_version))));",
      "331:                 break;",
      "332:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "319:         case EIGRP_TLV_IP_INT:",
      "320:             tlv_ptr.eigrp_tlv_ip_int = (const struct eigrp_tlv_ip_int_t *)tlv_tptr;",
      "322:             bit_length = tlv_ptr.eigrp_tlv_ip_int->plen;",
      "323:             if (bit_length > 32) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_ip_int)) {",
      "344:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "345:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_ip_int))));",
      "346:                 break;",
      "347:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "348:         case EIGRP_TLV_IP_EXT:",
      "349:             tlv_ptr.eigrp_tlv_ip_ext = (const struct eigrp_tlv_ip_ext_t *)tlv_tptr;",
      "351:             bit_length = tlv_ptr.eigrp_tlv_ip_ext->plen;",
      "352:             if (bit_length > 32) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_ip_ext)) {",
      "378:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "379:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_ip_ext))));",
      "380:                 break;",
      "381:             }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "385:         case EIGRP_TLV_AT_CABLE_SETUP:",
      "386:             tlv_ptr.eigrp_tlv_at_cable_setup = (const struct eigrp_tlv_at_cable_setup_t *)tlv_tptr;",
      "388:             ND_PRINT((ndo, \"\\n\\t    Cable-range: %u-%u, Router-ID %u\",",
      "389:                    EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_cable_setup->cable_start),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_at_cable_setup)) {",
      "420:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "421:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_at_cable_setup))));",
      "422:                 break;",
      "423:             }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:         case EIGRP_TLV_AT_INT:",
      "395:             tlv_ptr.eigrp_tlv_at_int = (const struct eigrp_tlv_at_int_t *)tlv_tptr;",
      "397:             ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \",",
      "398:                    EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_int->cable_start),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_at_int)) {",
      "434:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "435:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_at_int))));",
      "436:                 break;",
      "437:             }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "417:         case EIGRP_TLV_AT_EXT:",
      "418:             tlv_ptr.eigrp_tlv_at_ext = (const struct eigrp_tlv_at_ext_t *)tlv_tptr;",
      "420:             ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \",",
      "421:                    EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_ext->cable_start),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "461:             if (tlv_tlen < sizeof(*tlv_ptr.eigrp_tlv_at_ext)) {",
      "462:                 ND_PRINT((ndo, \" (too short, < %u)\",",
      "463:                     (u_int) (sizeof(struct eigrp_tlv_header) + sizeof(*tlv_ptr.eigrp_tlv_at_ext))));",
      "464:                 break;",
      "465:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "720d40a12cbb2876b704a309f54a5f06ff47d4ba",
      "candidate_info": {
        "commit_hash": "720d40a12cbb2876b704a309f54a5f06ff47d4ba",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/720d40a12cbb2876b704a309f54a5f06ff47d4ba",
        "files": [
          "print-eigrp.c"
        ],
        "message": "Use nd_ types, add EXTRACT_ calls.",
        "before_after_code_files": [
          "print-eigrp.c||print-eigrp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-eigrp.c||print-eigrp.c"
          ],
          "candidate": [
            "print-eigrp.c||print-eigrp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-eigrp.c||print-eigrp.c": [
          "File: print-eigrp.c -> print-eigrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"extract.h\"",
          "29: #include \"addrtoname.h\"",
          "37: struct eigrp_common_header {",
          "45: };",
          "47: #define EIGRP_VERSION                        2",
          "",
          "[Removed Lines]",
          "38:     uint8_t version;",
          "39:     uint8_t opcode;",
          "40:     uint8_t checksum[2];",
          "41:     uint8_t flags[4];",
          "42:     uint8_t seq[4];",
          "43:     uint8_t ack[4];",
          "44:     uint8_t asn[4];",
          "",
          "[Added Lines]",
          "39:     nd_uint8_t  version;",
          "40:     nd_uint8_t  opcode;",
          "41:     nd_uint16_t checksum;",
          "42:     nd_uint32_t flags;",
          "43:     nd_uint32_t seq;",
          "44:     nd_uint32_t ack;",
          "45:     nd_uint32_t asn;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: };",
          "72: struct eigrp_tlv_header {",
          "75: };",
          "77: #define EIGRP_TLV_GENERAL_PARM   0x0001",
          "",
          "[Removed Lines]",
          "73:     uint8_t type[2];",
          "74:     uint8_t length[2];",
          "",
          "[Added Lines]",
          "74:     nd_uint16_t type;",
          "75:     nd_uint16_t length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: };",
          "106: struct eigrp_tlv_general_parm_t {",
          "114: };",
          "116: struct eigrp_tlv_sw_version_t {",
          "121: };",
          "123: struct eigrp_tlv_ip_int_t {",
          "134: };",
          "136: struct eigrp_tlv_ip_ext_t {",
          "154: };",
          "156: struct eigrp_tlv_at_cable_setup_t {",
          "160: };",
          "162: struct eigrp_tlv_at_int_t {",
          "173: };",
          "175: struct eigrp_tlv_at_ext_t {",
          "192: };",
          "194: static const struct tok eigrp_ext_proto_id_values[] = {",
          "",
          "[Removed Lines]",
          "107:     uint8_t k1;",
          "108:     uint8_t k2;",
          "109:     uint8_t k3;",
          "110:     uint8_t k4;",
          "111:     uint8_t k5;",
          "112:     uint8_t res;",
          "113:     uint8_t holdtime[2];",
          "117:     uint8_t ios_major;",
          "118:     uint8_t ios_minor;",
          "119:     uint8_t eigrp_major;",
          "120:     uint8_t eigrp_minor;",
          "124:     uint8_t nexthop[4];",
          "125:     uint8_t delay[4];",
          "126:     uint8_t bandwidth[4];",
          "127:     uint8_t mtu[3];",
          "128:     uint8_t hopcount;",
          "129:     uint8_t reliability;",
          "130:     uint8_t load;",
          "131:     uint8_t reserved[2];",
          "132:     uint8_t plen;",
          "137:     uint8_t nexthop[4];",
          "138:     uint8_t origin_router[4];",
          "139:     uint8_t origin_as[4];",
          "140:     uint8_t tag[4];",
          "141:     uint8_t metric[4];",
          "142:     uint8_t reserved[2];",
          "143:     uint8_t proto_id;",
          "144:     uint8_t flags;",
          "145:     uint8_t delay[4];",
          "146:     uint8_t bandwidth[4];",
          "147:     uint8_t mtu[3];",
          "148:     uint8_t hopcount;",
          "149:     uint8_t reliability;",
          "150:     uint8_t load;",
          "151:     uint8_t reserved2[2];",
          "152:     uint8_t plen;",
          "157:     uint8_t cable_start[2];",
          "158:     uint8_t cable_end[2];",
          "159:     uint8_t router_id[4];",
          "163:     uint8_t nexthop[4];",
          "164:     uint8_t delay[4];",
          "165:     uint8_t bandwidth[4];",
          "166:     uint8_t mtu[3];",
          "167:     uint8_t hopcount;",
          "168:     uint8_t reliability;",
          "169:     uint8_t load;",
          "170:     uint8_t reserved[2];",
          "171:     uint8_t cable_start[2];",
          "172:     uint8_t cable_end[2];",
          "176:     uint8_t nexthop[4];",
          "177:     uint8_t origin_router[4];",
          "178:     uint8_t origin_as[4];",
          "179:     uint8_t tag[4];",
          "180:     uint8_t proto_id;",
          "181:     uint8_t flags;",
          "182:     uint8_t metric[2];",
          "183:     uint8_t delay[4];",
          "184:     uint8_t bandwidth[4];",
          "185:     uint8_t mtu[3];",
          "186:     uint8_t hopcount;",
          "187:     uint8_t reliability;",
          "188:     uint8_t load;",
          "189:     uint8_t reserved2[2];",
          "190:     uint8_t cable_start[2];",
          "191:     uint8_t cable_end[2];",
          "",
          "[Added Lines]",
          "108:     nd_uint8_t  k1;",
          "109:     nd_uint8_t  k2;",
          "110:     nd_uint8_t  k3;",
          "111:     nd_uint8_t  k4;",
          "112:     nd_uint8_t  k5;",
          "113:     nd_uint8_t  res;",
          "114:     nd_uint16_t holdtime;",
          "118:     nd_uint8_t ios_major;",
          "119:     nd_uint8_t ios_minor;",
          "120:     nd_uint8_t eigrp_major;",
          "121:     nd_uint8_t eigrp_minor;",
          "125:     nd_ipv4     nexthop;",
          "126:     nd_uint32_t delay;",
          "127:     nd_uint32_t bandwidth;",
          "128:     nd_uint24_t mtu;",
          "129:     nd_uint8_t  hopcount;",
          "130:     nd_uint8_t  reliability;",
          "131:     nd_uint8_t  load;",
          "132:     nd_byte     reserved[2];",
          "133:     nd_uint8_t  plen;",
          "138:     nd_ipv4     nexthop;",
          "139:     nd_ipv4     origin_router;",
          "140:     nd_uint32_t origin_as;",
          "141:     nd_uint32_t tag;",
          "142:     nd_uint32_t metric;",
          "143:     nd_byte     reserved[2];",
          "144:     nd_uint8_t  proto_id;",
          "145:     nd_uint8_t  flags;",
          "146:     nd_uint32_t delay;",
          "147:     nd_uint32_t bandwidth;",
          "148:     nd_uint24_t mtu;",
          "149:     nd_uint8_t  hopcount;",
          "150:     nd_uint8_t  reliability;",
          "151:     nd_uint8_t  load;",
          "152:     nd_byte     reserved2[2];",
          "153:     nd_uint8_t  plen;",
          "158:     nd_uint16_t cable_start;",
          "159:     nd_uint16_t cable_end;",
          "160:     nd_uint32_t router_id;",
          "164:     nd_byte     nexthop[4];",
          "165:     nd_uint32_t delay;",
          "166:     nd_uint32_t bandwidth;",
          "167:     nd_uint24_t mtu;",
          "168:     nd_uint8_t  hopcount;",
          "169:     nd_uint8_t  reliability;",
          "170:     nd_uint8_t  load;",
          "171:     nd_byte     reserved[2];",
          "172:     nd_uint16_t cable_start;",
          "173:     nd_uint16_t cable_end;",
          "177:     nd_byte     nexthop[4];",
          "178:     nd_uint32_t origin_router;",
          "179:     nd_uint32_t origin_as;",
          "180:     nd_uint32_t tag;",
          "181:     nd_uint8_t  proto_id;",
          "182:     nd_uint8_t  flags;",
          "183:     nd_uint16_t metric;",
          "184:     nd_uint32_t delay;",
          "185:     nd_uint32_t bandwidth;",
          "186:     nd_uint24_t mtu;",
          "187:     nd_uint8_t  hopcount;",
          "188:     nd_uint8_t  reliability;",
          "189:     nd_uint8_t  load;",
          "190:     nd_byte     reserved2[2];",
          "191:     nd_uint16_t cable_start;",
          "192:     nd_uint16_t cable_end;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:  return;",
          "238:     }",
          "241:     if (ndo->ndo_vflag < 1) {",
          "242:         ND_PRINT((ndo, \"EIGRP %s, length: %u\",",
          "244:                len));",
          "245:         return;",
          "246:     }",
          "",
          "[Removed Lines]",
          "235:     if (eigrp_com_header->version != EIGRP_VERSION) {",
          "236:  ND_PRINT((ndo, \"EIGRP version %u packet not supported\",eigrp_com_header->version));",
          "243:                tok2str(eigrp_opcode_values, \"unknown (%u)\",eigrp_com_header->opcode),",
          "",
          "[Added Lines]",
          "236:     if (EXTRACT_U_1(eigrp_com_header->version) != EIGRP_VERSION) {",
          "237:  ND_PRINT((ndo, \"EIGRP version %u packet not supported\",EXTRACT_U_1(eigrp_com_header->version)));",
          "244:                tok2str(eigrp_opcode_values, \"unknown (%u)\",EXTRACT_U_1(eigrp_com_header->opcode)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250:     if (len < sizeof(struct eigrp_common_header)) {",
          "251:         ND_PRINT((ndo, \"EIGRP %s, length: %u (too short, < %u)\",",
          "253:                len, (u_int) sizeof(struct eigrp_common_header)));",
          "254:         return;",
          "255:     }",
          "",
          "[Removed Lines]",
          "252:                tok2str(eigrp_opcode_values, \"unknown (%u)\",eigrp_com_header->opcode),",
          "",
          "[Added Lines]",
          "253:                tok2str(eigrp_opcode_values, \"unknown (%u)\",EXTRACT_U_1(eigrp_com_header->opcode)),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:     ND_PRINT((ndo, \"\\n\\tEIGRP v%u, opcode: %s (%u), chksum: 0x%04x, Flags: [%s]\\n\\tseq: 0x%08x, ack: 0x%08x, AS: %u, length: %u\",",
          "264:            tok2str(eigrp_common_header_flag_values,",
          "265:                    \"none\",",
          "270:            tlen));",
          "272:     tptr+=sizeof(struct eigrp_common_header);",
          "",
          "[Removed Lines]",
          "260:            eigrp_com_header->version,",
          "261:            tok2str(eigrp_opcode_values, \"unknown, type: %u\",eigrp_com_header->opcode),",
          "262:            eigrp_com_header->opcode,",
          "263:            EXTRACT_BE_U_2(&eigrp_com_header->checksum),",
          "266:                    EXTRACT_BE_U_4(&eigrp_com_header->flags)),",
          "267:            EXTRACT_BE_U_4(&eigrp_com_header->seq),",
          "268:            EXTRACT_BE_U_4(&eigrp_com_header->ack),",
          "269:            EXTRACT_BE_U_4(&eigrp_com_header->asn),",
          "",
          "[Added Lines]",
          "261:            EXTRACT_U_1(eigrp_com_header->version),",
          "262:            tok2str(eigrp_opcode_values, \"unknown, type: %u\",EXTRACT_U_1(eigrp_com_header->opcode)),",
          "263:            EXTRACT_U_1(eigrp_com_header->opcode),",
          "264:            EXTRACT_BE_U_2(eigrp_com_header->checksum),",
          "267:                    EXTRACT_BE_U_4(eigrp_com_header->flags)),",
          "268:            EXTRACT_BE_U_4(eigrp_com_header->seq),",
          "269:            EXTRACT_BE_U_4(eigrp_com_header->ack),",
          "270:            EXTRACT_BE_U_4(eigrp_com_header->asn),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "276:         ND_TCHECK_LEN(tptr, sizeof(struct eigrp_tlv_header));",
          "278:         eigrp_tlv_header = (const struct eigrp_tlv_header *)tptr;",
          "283:         if (eigrp_tlv_len < sizeof(struct eigrp_tlv_header) ||",
          "",
          "[Removed Lines]",
          "279:         eigrp_tlv_len=EXTRACT_BE_U_2(&eigrp_tlv_header->length);",
          "280:         eigrp_tlv_type=EXTRACT_BE_U_2(&eigrp_tlv_header->type);",
          "",
          "[Added Lines]",
          "280:         eigrp_tlv_len=EXTRACT_BE_U_2(eigrp_tlv_header->length);",
          "281:         eigrp_tlv_type=EXTRACT_BE_U_2(eigrp_tlv_header->type);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "317:             ND_PRINT((ndo, \"\\n\\t    holdtime: %us, k1 %u, k2 %u, k3 %u, k4 %u, k5 %u\",",
          "318:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_general_parm->holdtime),",
          "324:             break;",
          "326:         case EIGRP_TLV_SW_VERSION:",
          "",
          "[Removed Lines]",
          "319:                    tlv_ptr.eigrp_tlv_general_parm->k1,",
          "320:                    tlv_ptr.eigrp_tlv_general_parm->k2,",
          "321:                    tlv_ptr.eigrp_tlv_general_parm->k3,",
          "322:                    tlv_ptr.eigrp_tlv_general_parm->k4,",
          "323:                    tlv_ptr.eigrp_tlv_general_parm->k5));",
          "",
          "[Added Lines]",
          "320:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_general_parm->k1),",
          "321:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_general_parm->k2),",
          "322:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_general_parm->k3),",
          "323:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_general_parm->k4),",
          "324:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_general_parm->k5)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:             }",
          "334:             ND_PRINT((ndo, \"\\n\\t    IOS version: %u.%u, EIGRP version %u.%u\",",
          "339:             break;",
          "341:         case EIGRP_TLV_IP_INT:",
          "",
          "[Removed Lines]",
          "335:                    tlv_ptr.eigrp_tlv_sw_version->ios_major,",
          "336:                    tlv_ptr.eigrp_tlv_sw_version->ios_minor,",
          "337:                    tlv_ptr.eigrp_tlv_sw_version->eigrp_major,",
          "338:                    tlv_ptr.eigrp_tlv_sw_version->eigrp_minor));",
          "",
          "[Added Lines]",
          "336:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_sw_version->ios_major),",
          "337:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_sw_version->ios_minor),",
          "338:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_sw_version->eigrp_major),",
          "339:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_sw_version->eigrp_minor)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "346:                 break;",
          "347:             }",
          "350:             if (bit_length > 32) {",
          "351:                 ND_PRINT((ndo, \"\\n\\t    illegal prefix length %u\",bit_length));",
          "352:                 break;",
          "353:             }",
          "355:             memset(prefix, 0, 4);",
          "358:             ND_PRINT((ndo, \"\\n\\t    IPv4 prefix: %15s/%u, nexthop: \",",
          "359:                    ipaddr_string(ndo, prefix),",
          "360:                    bit_length));",
          "362:                 ND_PRINT((ndo, \"self\"));",
          "363:             else",
          "364:                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, &tlv_ptr.eigrp_tlv_ip_int->nexthop)));",
          "366:             ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\",",
          "373:             break;",
          "375:         case EIGRP_TLV_IP_EXT:",
          "",
          "[Removed Lines]",
          "349:             bit_length = tlv_ptr.eigrp_tlv_ip_int->plen;",
          "356:             memcpy(prefix,&tlv_ptr.eigrp_tlv_ip_int->destination,byte_length);",
          "361:             if (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_int->nexthop) == 0)",
          "367:                    (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_int->delay)/100),",
          "368:                    EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_int->bandwidth),",
          "369:                    EXTRACT_BE_U_3(&tlv_ptr.eigrp_tlv_ip_int->mtu),",
          "370:                    tlv_ptr.eigrp_tlv_ip_int->hopcount,",
          "371:                    tlv_ptr.eigrp_tlv_ip_int->reliability,",
          "372:                    tlv_ptr.eigrp_tlv_ip_int->load));",
          "",
          "[Added Lines]",
          "350:             bit_length = EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_int->plen);",
          "357:             memcpy(prefix, tlv_ptr.eigrp_tlv_ip_int->destination, byte_length);",
          "362:             if (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_int->nexthop) == 0)",
          "368:                    (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_int->delay)/100),",
          "369:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_int->bandwidth),",
          "370:                    EXTRACT_BE_U_3(tlv_ptr.eigrp_tlv_ip_int->mtu),",
          "371:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_int->hopcount),",
          "372:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_int->reliability),",
          "373:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_int->load)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "380:                 break;",
          "381:             }",
          "384:             if (bit_length > 32) {",
          "385:                 ND_PRINT((ndo, \"\\n\\t    illegal prefix length %u\",bit_length));",
          "386:                 break;",
          "387:             }",
          "389:             memset(prefix, 0, 4);",
          "392:             ND_PRINT((ndo, \"\\n\\t    IPv4 prefix: %15s/%u, nexthop: \",",
          "393:                    ipaddr_string(ndo, prefix),",
          "394:                    bit_length));",
          "396:                 ND_PRINT((ndo, \"self\"));",
          "397:             else",
          "398:                 ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, &tlv_ptr.eigrp_tlv_ip_ext->nexthop)));",
          "400:             ND_PRINT((ndo, \"\\n\\t      origin-router %s, origin-as %u, origin-proto %s, flags [0x%02x], tag 0x%08x, metric %u\",",
          "402:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->origin_as),",
          "405:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->tag),",
          "406:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->metric)));",
          "408:             ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\",",
          "415:             break;",
          "417:         case EIGRP_TLV_AT_CABLE_SETUP:",
          "",
          "[Removed Lines]",
          "383:             bit_length = tlv_ptr.eigrp_tlv_ip_ext->plen;",
          "390:             memcpy(prefix,&tlv_ptr.eigrp_tlv_ip_ext->destination,byte_length);",
          "395:             if (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_ext->nexthop) == 0)",
          "401:                    ipaddr_string(ndo, tlv_ptr.eigrp_tlv_ip_ext->origin_router),",
          "403:                    tok2str(eigrp_ext_proto_id_values,\"unknown\",tlv_ptr.eigrp_tlv_ip_ext->proto_id),",
          "404:                    tlv_ptr.eigrp_tlv_ip_ext->flags,",
          "409:                    (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_ext->delay)/100),",
          "410:                    EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_ip_ext->bandwidth),",
          "411:                    EXTRACT_BE_U_3(&tlv_ptr.eigrp_tlv_ip_ext->mtu),",
          "412:                    tlv_ptr.eigrp_tlv_ip_ext->hopcount,",
          "413:                    tlv_ptr.eigrp_tlv_ip_ext->reliability,",
          "414:                    tlv_ptr.eigrp_tlv_ip_ext->load));",
          "",
          "[Added Lines]",
          "384:             bit_length = EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->plen);",
          "391:             memcpy(prefix, tlv_ptr.eigrp_tlv_ip_ext->destination, byte_length);",
          "396:             if (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->nexthop) == 0)",
          "402:                    ipaddr_string(ndo, &tlv_ptr.eigrp_tlv_ip_ext->origin_router),",
          "404:                    tok2str(eigrp_ext_proto_id_values,\"unknown\",EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->proto_id)),",
          "405:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->flags),",
          "410:                    (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->delay)/100),",
          "411:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_ip_ext->bandwidth),",
          "412:                    EXTRACT_BE_U_3(tlv_ptr.eigrp_tlv_ip_ext->mtu),",
          "413:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->hopcount),",
          "414:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->reliability),",
          "415:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_ip_ext->load)));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "423:             }",
          "425:             ND_PRINT((ndo, \"\\n\\t    Cable-range: %u-%u, Router-ID %u\",",
          "429:             break;",
          "431:         case EIGRP_TLV_AT_INT:",
          "",
          "[Removed Lines]",
          "426:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_cable_setup->cable_start),",
          "427:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_cable_setup->cable_end),",
          "428:                    EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_cable_setup->router_id)));",
          "",
          "[Added Lines]",
          "427:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_cable_setup->cable_start),",
          "428:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_cable_setup->cable_end),",
          "429:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_cable_setup->router_id)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "437:             }",
          "439:             ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \",",
          "444:                 ND_PRINT((ndo, \"self\"));",
          "445:             else",
          "446:                 ND_PRINT((ndo, \"%u.%u\",",
          "448:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_int->nexthop[2])));",
          "450:             ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\",",
          "457:             break;",
          "459:         case EIGRP_TLV_AT_EXT:",
          "",
          "[Removed Lines]",
          "440:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_int->cable_start),",
          "441:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_int->cable_end)));",
          "443:             if (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_int->nexthop) == 0)",
          "447:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_int->nexthop),",
          "451:                    (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_int->delay)/100),",
          "452:                    EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_int->bandwidth),",
          "453:                    EXTRACT_BE_U_3(&tlv_ptr.eigrp_tlv_at_int->mtu),",
          "454:                    tlv_ptr.eigrp_tlv_at_int->hopcount,",
          "455:                    tlv_ptr.eigrp_tlv_at_int->reliability,",
          "456:                    tlv_ptr.eigrp_tlv_at_int->load));",
          "",
          "[Added Lines]",
          "441:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_int->cable_start),",
          "442:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_int->cable_end)));",
          "444:             if (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_int->nexthop) == 0)",
          "448:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_int->nexthop[0]),",
          "452:                    (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_int->delay)/100),",
          "453:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_int->bandwidth),",
          "454:                    EXTRACT_BE_U_3(tlv_ptr.eigrp_tlv_at_int->mtu),",
          "455:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_int->hopcount),",
          "456:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_int->reliability),",
          "457:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_int->load)));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "465:             }",
          "467:             ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \",",
          "472:                 ND_PRINT((ndo, \"self\"));",
          "473:             else",
          "474:                 ND_PRINT((ndo, \"%u.%u\",",
          "476:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_ext->nexthop[2])));",
          "478:             ND_PRINT((ndo, \"\\n\\t      origin-router %u, origin-as %u, origin-proto %s, flags [0x%02x], tag 0x%08x, metric %u\",",
          "479:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->origin_router),",
          "480:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->origin_as),",
          "483:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->tag),",
          "484:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_ext->metric)));",
          "486:             ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\",",
          "493:             break;",
          "",
          "[Removed Lines]",
          "468:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_ext->cable_start),",
          "469:                    EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_ext->cable_end)));",
          "471:             if (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_ext->nexthop) == 0)",
          "475:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_ext->nexthop),",
          "481:                    tok2str(eigrp_ext_proto_id_values,\"unknown\",tlv_ptr.eigrp_tlv_at_ext->proto_id),",
          "482:                    tlv_ptr.eigrp_tlv_at_ext->flags,",
          "487:                    (EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_ext->delay)/100),",
          "488:                    EXTRACT_BE_U_4(&tlv_ptr.eigrp_tlv_at_ext->bandwidth),",
          "489:                    EXTRACT_BE_U_3(&tlv_ptr.eigrp_tlv_at_ext->mtu),",
          "490:                    tlv_ptr.eigrp_tlv_at_ext->hopcount,",
          "491:                    tlv_ptr.eigrp_tlv_at_ext->reliability,",
          "492:                    tlv_ptr.eigrp_tlv_at_ext->load));",
          "",
          "[Added Lines]",
          "469:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_ext->cable_start),",
          "470:                    EXTRACT_BE_U_2(tlv_ptr.eigrp_tlv_at_ext->cable_end)));",
          "472:             if (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->nexthop) == 0)",
          "476:                        EXTRACT_BE_U_2(&tlv_ptr.eigrp_tlv_at_ext->nexthop[0]),",
          "482:                    tok2str(eigrp_ext_proto_id_values,\"unknown\",EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_ext->proto_id)),",
          "483:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_ext->flags),",
          "488:                    (EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->delay)/100),",
          "489:                    EXTRACT_BE_U_4(tlv_ptr.eigrp_tlv_at_ext->bandwidth),",
          "490:                    EXTRACT_BE_U_3(tlv_ptr.eigrp_tlv_at_ext->mtu),",
          "491:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_ext->hopcount),",
          "492:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_ext->reliability),",
          "493:                    EXTRACT_U_1(tlv_ptr.eigrp_tlv_at_ext->load)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}