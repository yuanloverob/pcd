{
  "cve_id": "CVE-2022-41898",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `SparseFillEmptyRowsGrad` is given empty inputs, TensorFlow will crash. We have patched the issue in GitHub commit af4a6a3c8b95022c351edae94560acc61253a1b8. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "af4a6a3c8b95022c351edae94560acc61253a1b8",
  "patch_info": {
    "commit_hash": "af4a6a3c8b95022c351edae94560acc61253a1b8",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/af4a6a3c8b95022c351edae94560acc61253a1b8",
    "files": [
      "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ],
    "message": "Fix empty input crash for SparseFillEmptyRowsGrad.\n\nPiperOrigin-RevId: 478085721",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc": [
      "File: tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "297:       empty_row_indicator = empty_row_indicator_t.vec<bool>().data();",
      "298:     }",
      "305:     Tensor num_empty_rows_through_t;",
      "",
      "[Removed Lines]",
      "300:     TF_RETURN_IF_ERROR(wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
      "302:                                         elements_per_row, empty_row_indicator));",
      "",
      "[Added Lines]",
      "300:     if (dense_rows > 0) {",
      "301:       TF_RETURN_IF_ERROR(",
      "302:           wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
      "304:                            elements_per_row, empty_row_indicator));",
      "305:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "405:             done);",
      "406:       }",
      "417:       done();",
      "418:     };",
      "",
      "[Removed Lines]",
      "408:       OP_REQUIRES_OK_ASYNC(",
      "409:           context,",
      "410:           wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
      "412:                            default_value, num_empty_rows_through,",
      "413:                            input_row_ends, empty_row_indicator, output_indices,",
      "414:                            output_values),",
      "415:           done);",
      "",
      "[Added Lines]",
      "411:       if (dense_rows > 0) {",
      "412:         OP_REQUIRES_OK_ASYNC(",
      "413:             context,",
      "414:             wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
      "416:                              default_value, num_empty_rows_through,",
      "417:                              input_row_ends, empty_row_indicator,",
      "418:                              output_indices, output_values),",
      "419:             done);",
      "420:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "461:     TF_RETURN_IF_ERROR(",
      "462:         context->allocate_temp(index_type, TensorShape({N}), &row_indices_t));",
      "463:     auto row_indices = row_indices_t.flat<Tindex>();",
      "468:     TF_RETURN_IF_ERROR(context->allocate_temp(index_type, TensorShape({N}),",
      "469:                                               input_index_map_t));",
      "",
      "[Removed Lines]",
      "464:     TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
      "466:                                         indices, row_indices));",
      "",
      "[Added Lines]",
      "469:     if (N > 0) {",
      "470:       TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
      "472:                                           indices, row_indices));",
      "473:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "528:     auto visited = visited_t.vec<bool>();",
      "529:     visited.device(device) = visited.constant(false);",
      "",
      "[Removed Lines]",
      "531:     TF_RETURN_IF_ERROR(wrap_kernel_call(",
      "532:         GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
      "",
      "[Added Lines]",
      "538:     if (N > 0) {",
      "539:       TF_RETURN_IF_ERROR(wrap_kernel_call(",
      "540:           GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
      "542:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
      "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "514:         self.assertAllEqual(empty_row_indicator_out,",
      "515:                             np.array([0, 0, 1, 0, 1]).astype(np.bool_))",
      "517:   @test_util.run_deprecated_v1",
      "518:   def testFillFloat(self):",
      "519:     with self.session():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "517:   def testSparseFillEmptyRowsGradEmpty(self):",
      "518:     with test_util.use_gpu():",
      "519:       grad, _ = self.evaluate(",
      "520:           sparse_ops.sparse_fill_empty_rows_grad(",
      "521:               reverse_index_map=[], grad_values=[]))",
      "522:       self.assertAllEqual(grad, [])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c3f7009710749e0d5a86bbc394fbf405b2e9f5c",
      "candidate_info": {
        "commit_hash": "8c3f7009710749e0d5a86bbc394fbf405b2e9f5c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8c3f7009710749e0d5a86bbc394fbf405b2e9f5c",
        "files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Fix empty input crash for SparseFillEmptyRowsGrad.\n\nPiperOrigin-RevId: 478085721",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc": [
          "File: tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:       empty_row_indicator = empty_row_indicator_t.vec<bool>().data();",
          "298:     }",
          "305:     Tensor num_empty_rows_through_t;",
          "",
          "[Removed Lines]",
          "300:     TF_RETURN_IF_ERROR(wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "302:                                         elements_per_row, empty_row_indicator));",
          "",
          "[Added Lines]",
          "300:     if (dense_rows > 0) {",
          "301:       TF_RETURN_IF_ERROR(",
          "302:           wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "304:                            elements_per_row, empty_row_indicator));",
          "305:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:             done);",
          "406:       }",
          "417:       done();",
          "418:     };",
          "",
          "[Removed Lines]",
          "408:       OP_REQUIRES_OK_ASYNC(",
          "409:           context,",
          "410:           wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "412:                            default_value, num_empty_rows_through,",
          "413:                            input_row_ends, empty_row_indicator, output_indices,",
          "414:                            output_values),",
          "415:           done);",
          "",
          "[Added Lines]",
          "411:       if (dense_rows > 0) {",
          "412:         OP_REQUIRES_OK_ASYNC(",
          "413:             context,",
          "414:             wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "416:                              default_value, num_empty_rows_through,",
          "417:                              input_row_ends, empty_row_indicator,",
          "418:                              output_indices, output_values),",
          "419:             done);",
          "420:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:     TF_RETURN_IF_ERROR(",
          "461:         context->allocate_temp(index_type, TensorShape({N}), &row_indices_t));",
          "462:     auto row_indices = row_indices_t.flat<Tindex>();",
          "467:     TF_RETURN_IF_ERROR(context->allocate_temp(index_type, TensorShape({N}),",
          "468:                                               input_index_map_t));",
          "",
          "[Removed Lines]",
          "463:     TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "465:                                         indices, row_indices));",
          "",
          "[Added Lines]",
          "468:     if (N > 0) {",
          "469:       TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "471:                                           indices, row_indices));",
          "472:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:     auto visited = visited_t.vec<bool>();",
          "528:     visited.device(device) = visited.constant(false);",
          "",
          "[Removed Lines]",
          "530:     TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "531:         GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "",
          "[Added Lines]",
          "537:     if (N > 0) {",
          "538:       TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "539:           GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "541:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:         self.assertAllEqual(empty_row_indicator_out,",
          "515:                             np.array([0, 0, 1, 0, 1]).astype(np.bool_))",
          "517:   @test_util.run_deprecated_v1",
          "518:   def testFillFloat(self):",
          "519:     with self.session():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   def testSparseFillEmptyRowsGradEmpty(self):",
          "518:     with test_util.use_gpu():",
          "519:       grad, _ = self.evaluate(",
          "520:           sparse_ops.sparse_fill_empty_rows_grad(",
          "521:               reverse_index_map=[], grad_values=[]))",
          "522:       self.assertAllEqual(grad, [])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "507941f3dd0639d7a9c51ba47c8459f3e0e0dc85",
      "candidate_info": {
        "commit_hash": "507941f3dd0639d7a9c51ba47c8459f3e0e0dc85",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/507941f3dd0639d7a9c51ba47c8459f3e0e0dc85",
        "files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Fix empty input crash for SparseFillEmptyRowsGrad.\n\nPiperOrigin-RevId: 478085721",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc": [
          "File: tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:       empty_row_indicator = empty_row_indicator_t.vec<bool>().data();",
          "298:     }",
          "305:     Tensor num_empty_rows_through_t;",
          "",
          "[Removed Lines]",
          "300:     TF_RETURN_IF_ERROR(wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "302:                                         elements_per_row, empty_row_indicator));",
          "",
          "[Added Lines]",
          "300:     if (dense_rows > 0) {",
          "301:       TF_RETURN_IF_ERROR(",
          "302:           wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "304:                            elements_per_row, empty_row_indicator));",
          "305:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:             done);",
          "406:       }",
          "417:       done();",
          "418:     };",
          "",
          "[Removed Lines]",
          "408:       OP_REQUIRES_OK_ASYNC(",
          "409:           context,",
          "410:           wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "412:                            default_value, num_empty_rows_through,",
          "413:                            input_row_ends, empty_row_indicator, output_indices,",
          "414:                            output_values),",
          "415:           done);",
          "",
          "[Added Lines]",
          "411:       if (dense_rows > 0) {",
          "412:         OP_REQUIRES_OK_ASYNC(",
          "413:             context,",
          "414:             wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "416:                              default_value, num_empty_rows_through,",
          "417:                              input_row_ends, empty_row_indicator,",
          "418:                              output_indices, output_values),",
          "419:             done);",
          "420:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:     TF_RETURN_IF_ERROR(",
          "462:         context->allocate_temp(index_type, TensorShape({N}), &row_indices_t));",
          "463:     auto row_indices = row_indices_t.flat<Tindex>();",
          "468:     TF_RETURN_IF_ERROR(context->allocate_temp(index_type, TensorShape({N}),",
          "469:                                               input_index_map_t));",
          "",
          "[Removed Lines]",
          "464:     TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "466:                                         indices, row_indices));",
          "",
          "[Added Lines]",
          "469:     if (N > 0) {",
          "470:       TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "472:                                           indices, row_indices));",
          "473:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528:     auto visited = visited_t.vec<bool>();",
          "529:     visited.device(device) = visited.constant(false);",
          "",
          "[Removed Lines]",
          "531:     TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "532:         GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "",
          "[Added Lines]",
          "538:     if (N > 0) {",
          "539:       TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "540:           GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "542:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:         self.assertAllEqual(empty_row_indicator_out,",
          "515:                             np.array([0, 0, 1, 0, 1]).astype(np.bool_))",
          "517:   @test_util.run_deprecated_v1",
          "518:   def testFillFloat(self):",
          "519:     with self.session():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   def testSparseFillEmptyRowsGradEmpty(self):",
          "518:     with test_util.use_gpu():",
          "519:       grad, _ = self.evaluate(",
          "520:           sparse_ops.sparse_fill_empty_rows_grad(",
          "521:               reverse_index_map=[], grad_values=[]))",
          "522:       self.assertAllEqual(grad, [])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a838d9e739b4a4b948ae867b28aa17a5dcb45c38",
      "candidate_info": {
        "commit_hash": "a838d9e739b4a4b948ae867b28aa17a5dcb45c38",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a838d9e739b4a4b948ae867b28aa17a5dcb45c38",
        "files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Fix empty input crash for SparseFillEmptyRowsGrad.\n\nPiperOrigin-RevId: 478085721",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc||tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc": [
          "File: tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc -> tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:       empty_row_indicator = empty_row_indicator_t.vec<bool>().data();",
          "298:     }",
          "305:     Tensor num_empty_rows_through_t;",
          "",
          "[Removed Lines]",
          "300:     TF_RETURN_IF_ERROR(wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "302:                                         elements_per_row, empty_row_indicator));",
          "",
          "[Added Lines]",
          "300:     if (dense_rows > 0) {",
          "301:       TF_RETURN_IF_ERROR(",
          "302:           wrap_kernel_call(ComputeEmptyRowIndicatorKernel<Tindex>,",
          "304:                            elements_per_row, empty_row_indicator));",
          "305:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:             done);",
          "406:       }",
          "417:       done();",
          "418:     };",
          "",
          "[Removed Lines]",
          "408:       OP_REQUIRES_OK_ASYNC(",
          "409:           context,",
          "410:           wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "412:                            default_value, num_empty_rows_through,",
          "413:                            input_row_ends, empty_row_indicator, output_indices,",
          "414:                            output_values),",
          "415:           done);",
          "",
          "[Added Lines]",
          "411:       if (dense_rows > 0) {",
          "412:         OP_REQUIRES_OK_ASYNC(",
          "413:             context,",
          "414:             wrap_kernel_call(ScatterNewElementsKernel<T, Tindex>,",
          "416:                              default_value, num_empty_rows_through,",
          "417:                              input_row_ends, empty_row_indicator,",
          "418:                              output_indices, output_values),",
          "419:             done);",
          "420:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:     TF_RETURN_IF_ERROR(",
          "462:         context->allocate_temp(index_type, TensorShape({N}), &row_indices_t));",
          "463:     auto row_indices = row_indices_t.flat<Tindex>();",
          "468:     TF_RETURN_IF_ERROR(context->allocate_temp(index_type, TensorShape({N}),",
          "469:                                               input_index_map_t));",
          "",
          "[Removed Lines]",
          "464:     TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "466:                                         indices, row_indices));",
          "",
          "[Added Lines]",
          "469:     if (N > 0) {",
          "470:       TF_RETURN_IF_ERROR(wrap_kernel_call(CopyRowIndicesKernel<Tindex>,",
          "472:                                           indices, row_indices));",
          "473:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528:     auto visited = visited_t.vec<bool>();",
          "529:     visited.device(device) = visited.constant(false);",
          "",
          "[Removed Lines]",
          "531:     TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "532:         GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "",
          "[Added Lines]",
          "538:     if (N > 0) {",
          "539:       TF_RETURN_IF_ERROR(wrap_kernel_call(",
          "540:           GatherOriginalGradValuesKernel<T, Tindex>, /*device=*/device,",
          "542:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:         self.assertAllEqual(empty_row_indicator_out,",
          "515:                             np.array([0, 0, 1, 0, 1]).astype(np.bool_))",
          "517:   @test_util.run_deprecated_v1",
          "518:   def testFillFloat(self):",
          "519:     with self.session():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   def testSparseFillEmptyRowsGradEmpty(self):",
          "518:     with test_util.use_gpu():",
          "519:       grad, _ = self.evaluate(",
          "520:           sparse_ops.sparse_fill_empty_rows_grad(",
          "521:               reverse_index_map=[], grad_values=[]))",
          "522:       self.assertAllEqual(grad, [])",
          "",
          "---------------"
        ]
      }
    }
  ]
}