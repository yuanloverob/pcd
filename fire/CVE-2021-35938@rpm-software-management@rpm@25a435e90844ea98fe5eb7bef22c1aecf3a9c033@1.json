{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b65ed55c3aef325192363951584dfb05c395b32e",
      "candidate_info": {
        "commit_hash": "b65ed55c3aef325192363951584dfb05c395b32e",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/b65ed55c3aef325192363951584dfb05c395b32e",
        "files": [
          "tests/data/SPECS/hlinktest.spec",
          "tests/rpmi.at"
        ],
        "message": "Add a test-case for cross-directory hardlinks",
        "before_after_code_files": [
          "tests/data/SPECS/hlinktest.spec||tests/data/SPECS/hlinktest.spec",
          "tests/rpmi.at||tests/rpmi.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/data/SPECS/hlinktest.spec||tests/data/SPECS/hlinktest.spec": [
          "File: tests/data/SPECS/hlinktest.spec -> tests/data/SPECS/hlinktest.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: %bcond_with unpackaged_dirs",
          "2: %bcond_with unpackaged_files",
          "3: %bcond_with owned_dir",
          "5: Summary:          Testing hard link behavior",
          "6: Name:             hlinktest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: %bcond_with crossdir_links",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     ln hello hello-${f}",
          "30: done",
          "32: %if %{with unpackaged_dirs}",
          "33: mkdir -p $RPM_BUILD_ROOT/zoo/",
          "34: %endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: %if %{with crossdir_links}",
          "34: mkdir -p $RPM_BUILD_ROOT/xmark",
          "35: ln $RPM_BUILD_ROOT/foo/aaaa $RPM_BUILD_ROOT/xmark/",
          "36: ln $RPM_BUILD_ROOT/foo/hello $RPM_BUILD_ROOT/xmark/",
          "37: %endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42: %if %{with owned_dir}",
          "43: %dir /foo",
          "44: %endif",
          "45: /foo/*",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: %if %{with crossdir_links}",
          "53: /xmark",
          "54: %endif",
          "",
          "---------------"
        ],
        "tests/rpmi.at||tests/rpmi.at": [
          "File: tests/rpmi.at -> tests/rpmi.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003: .........    /foo/zzzz",
          "1004: ],",
          "1005: [])",
          "1006: AT_CLEANUP",
          "1008: AT_SETUP([rpm -U filesystem])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007: AT_CHECK([",
          "1008: RPMDB_INIT",
          "1009: runroot rpmbuild -bb --quiet --with crossdir_links /data/SPECS/hlinktest.spec",
          "1010: runroot rpm -U /build/RPMS/noarch/hlinktest-1.0-1.noarch.rpm",
          "1011: runroot rpm -Vav --nouser --nogroup",
          "1012: ],",
          "1013: [0],",
          "1014: [.........    /foo/aaaa",
          "1015: .........    /foo/copyllo",
          "1016: .........    /foo/hello",
          "1017: .........    /foo/hello-bar",
          "1018: .........    /foo/hello-foo",
          "1019: .........    /foo/hello-world",
          "1020: .........    /foo/zzzz",
          "1021: .........    /xmark",
          "1022: .........    /xmark/aaaa",
          "1023: .........    /xmark/hello",
          "1024: ],",
          "1025: [])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bab34c6e45c549c7829e469ba35bdececbb84e8",
      "candidate_info": {
        "commit_hash": "1bab34c6e45c549c7829e469ba35bdececbb84e8",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1bab34c6e45c549c7829e469ba35bdececbb84e8",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmSetmeta() to dirfd based operation where possible\n\nNotably cap_set_file() doesn't have a dirfd-based mode, to handle that\nsafely we'll need to use fd-based operation. Which would be nicer anyhow\nbut symlinks can't be opened so we'll have to carry the dirfd/path based\nmode forever more anyhow (yes Linux has extensions but that's another\nstory).",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat \\",
          "586:    [], [AC_MSG_ERROR([function required by rpm])])",
          "588: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "585:     renameat ],",
          "",
          "[Added Lines]",
          "585:     renameat utimensat fchmodat fchownat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return rc;",
          "92: }",
          "95: {",
          "96:     int rc = 0;",
          "97: #if WITH_CAP",
          "98:     if (captxt && *captxt != '\\0') {",
          "99:  cap_t fcaps = cap_from_text(captxt);",
          "101:      rc = RPMERR_SETCAP_FAILED;",
          "103:  if (_fsm_debug) {",
          "106:  }",
          "107:  cap_free(fcaps);",
          "108:     }",
          "",
          "[Removed Lines]",
          "94: static int fsmSetFCaps(const char *path, const char *captxt)",
          "100:  if (fcaps == NULL || cap_set_file(path, fcaps) != 0) {",
          "102:  }",
          "104:      rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "105:      path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "94: static int fsmSetFCaps(int dirfd, const char *path, const char *captxt)",
          "102:  if ((dirfd >= 0 && *path != '/') || fcaps == NULL)",
          "105:  if (!rc && cap_set_file(path, fcaps) != 0)",
          "106:      rc = RPMERR_SETCAP_FAILED;",
          "109:      rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %s) %s\\n\", __func__,",
          "110:      dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "503: }",
          "506: {",
          "508:     if (rc < 0) {",
          "509:  struct stat st;",
          "511:      rc = 0;",
          "512:     }",
          "513:     if (_fsm_debug)",
          "516:         (rc < 0 ? strerror(errno) : \"\"));",
          "517:     if (rc < 0) rc = RPMERR_CHOWN_FAILED;",
          "518:     return rc;",
          "519: }",
          "522: {",
          "524:     if (rc < 0) {",
          "525:  struct stat st;",
          "527:      rc = 0;",
          "528:     }",
          "529:     if (_fsm_debug)",
          "532:         (rc < 0 ? strerror(errno) : \"\"));",
          "533:     if (rc < 0) rc = RPMERR_CHMOD_FAILED;",
          "534:     return rc;",
          "535: }",
          "538: {",
          "539:     int rc = 0;",
          "543:     };",
          "552:     if (_fsm_debug)",
          "555:     if (rc < 0) rc = RPMERR_UTIME_FAILED;",
          "557:     if (rc && S_ISDIR(mode))",
          "",
          "[Removed Lines]",
          "505: static int fsmChown(const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "507:     int rc = S_ISLNK(mode) ? lchown(path, uid, gid) : chown(path, uid, gid);",
          "510:  if (lstat(path, &st) == 0 && st.st_uid == uid && st.st_gid == gid)",
          "514:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %d, %d) %s\\n\", __func__,",
          "515:         path, (int)uid, (int)gid,",
          "521: static int fsmChmod(const char *path, mode_t mode)",
          "523:     int rc = chmod(path, (mode & 07777));",
          "526:  if (lstat(path, &st) == 0 && (st.st_mode & 07777) == (mode & 07777))",
          "530:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
          "531:         path, (unsigned)(mode & 07777),",
          "537: static int fsmUtime(const char *path, mode_t mode, time_t mtime)",
          "540:     struct timeval stamps[2] = {",
          "541:  { .tv_sec = mtime, .tv_usec = 0 },",
          "542:  { .tv_sec = mtime, .tv_usec = 0 },",
          "545: #if HAVE_LUTIMES",
          "546:     rc = lutimes(path, stamps);",
          "547: #else",
          "548:     if (!S_ISLNK(mode))",
          "549:  rc = utimes(path, stamps);",
          "550: #endif",
          "553:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0x%x) %s\\n\", __func__,",
          "554:         path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "510: static int fsmChown(int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "512:     int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "513:     int rc = fchownat(dirfd, path, uid, gid, flags);",
          "516:  if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "517:   (st.st_uid == uid && st.st_gid == gid)) {",
          "519:  }",
          "522:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d, %d) %s\\n\", __func__,",
          "523:         dirfd, path, (int)uid, (int)gid,",
          "529: static int fsmChmod(int dirfd, const char *path, mode_t mode)",
          "531:     int rc = fchmodat(dirfd, path, (mode & 07777), 0);",
          "534:  if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "535:   (st.st_mode & 07777) == (mode & 07777)) {",
          "537:  }",
          "540:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
          "541:         dirfd, path, (unsigned)(mode & 07777),",
          "547: static int fsmUtime(int dirfd, const char *path, mode_t mode, time_t mtime)",
          "550:     struct timespec stamps[2] = {",
          "551:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "552:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "555:     rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "558:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0x%x) %s\\n\", __func__,",
          "559:         dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:     return rc;",
          "657: }",
          "660:         rpmFileAction action, const struct stat * st,",
          "661:         int nofcaps)",
          "662: {",
          "",
          "[Removed Lines]",
          "659: static int fsmSetmeta(const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "[Added Lines]",
          "664: static int fsmSetmeta(int dirfd, const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:     const char *dest = rpmfiFN(fi);",
          "666:     if (!rc && !getuid()) {",
          "668:     }",
          "669:     if (!rc && !S_ISLNK(st->st_mode)) {",
          "671:     }",
          "673:     if (!rc && !nofcaps && S_ISREG(st->st_mode) && !getuid()) {",
          "675:     }",
          "676:     if (!rc) {",
          "678:     }",
          "679:     if (!rc) {",
          "680:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "682:     }",
          "684:     return rc;",
          "",
          "[Removed Lines]",
          "667:  rc = fsmChown(path, st->st_mode, st->st_uid, st->st_gid);",
          "670:  rc = fsmChmod(path, st->st_mode);",
          "674:  rc = fsmSetFCaps(path, rpmfiFCaps(fi));",
          "677:  rc = fsmUtime(path, st->st_mode, rpmfiFMtime(fi));",
          "681:        path, dest, st->st_mode, action);",
          "",
          "[Added Lines]",
          "672:  rc = fsmChown(dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "675:  rc = fsmChmod(dirfd, path, st->st_mode);",
          "679:  rc = fsmSetFCaps(dirfd, path, rpmfiFCaps(fi));",
          "682:  rc = fsmUtime(dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "686:        path, dest,",
          "687:        st->st_mode, action);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "944: setmeta:",
          "945:      if (!rc && fp->setmeta) {",
          "947:     &fp->sb, nofcaps);",
          "948:      }",
          "",
          "[Removed Lines]",
          "946:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "",
          "[Added Lines]",
          "952:   rc = fsmSetmeta(di.dirfd, fp->fpath, fi, plugins, fp->action,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da79e3c3ae7da8719f0bf87a1a60e046597b8240",
      "candidate_info": {
        "commit_hash": "da79e3c3ae7da8719f0bf87a1a60e046597b8240",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/da79e3c3ae7da8719f0bf87a1a60e046597b8240",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file metadata setting back to unpack stage\n\nCommit a82251b44ee2d2802ee8aea1b3d89f88beee4bad moved metadata setting\nto a separate step because there are potential benefits to doing so, but\nthe current downsides are worse: as long as we operate in potentially\nuntrusted directories, we'd need to somehow verify the content is what we\ninitially laid down to avoid possible privilege escalation from non-root\nowned directories.\n\nThis commit does not fix that vulnerability, only makes the window much\nsmaller and paves the way for the real fix(es) without introducing a\nsecond round of directory tree validation chase to the picture.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:      if (fp->action == FA_TOUCH)",
          "885:             if (S_ISREG(fp->sb.st_mode)) {",
          "886:   if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "883:   continue;",
          "",
          "[Added Lines]",
          "883:   goto setmeta;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915:                 if (!IS_DEV_LOG(fp->fpath))",
          "916:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "917:             }",
          "918:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919: setmeta:",
          "920:      if (!rc && fp->setmeta) {",
          "921:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "922:     &fp->sb, nofcaps);",
          "923:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "931:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
          "932:  rc = fx;",
          "949:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "950:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "",
          "[Removed Lines]",
          "935:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "936:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "937:  struct filedata_s *fp = &fdata[fx];",
          "938:  if (!fp->skip && fp->setmeta) {",
          "939:      rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "940:        &fp->sb, nofcaps);",
          "941:  }",
          "942:  if (rc)",
          "944:  fp->stage = FILE_PREP;",
          "945:     }",
          "946:     fi = rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "661a37905ed3b79cab76dcbddf8fff26291c7d40",
      "candidate_info": {
        "commit_hash": "661a37905ed3b79cab76dcbddf8fff26291c7d40",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/661a37905ed3b79cab76dcbddf8fff26291c7d40",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Return a validated open directory fd from fsmDoMkDir()",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: }",
          "329: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
          "331: {",
          "332:     int rc;",
          "333:     rpmFsmOp op = (FA_CREATE);",
          "",
          "[Removed Lines]",
          "330:    int owned, mode_t mode)",
          "",
          "[Added Lines]",
          "330:    int owned, mode_t mode, int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:     if (!rc)",
          "341:  rc = fsmMkdir(dirfd, dn, mode);",
          "343:     if (!rc) {",
          "344:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
          "345:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     if (!rc) {",
          "345:  if (*fdp == -1)",
          "346:      rc = RPMERR_ENOTDIR;",
          "347:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:  if (fd < 0 && errno == ENOENT && create) {",
          "378:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "382:  }",
          "384:  close(dirfd);",
          "",
          "[Removed Lines]",
          "379:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "380:      if (!rc)",
          "381:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW, 1);",
          "",
          "[Added Lines]",
          "385:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode, &fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dce44771b2a3325b3dc1ebfe41027df9910a39fd",
      "candidate_info": {
        "commit_hash": "dce44771b2a3325b3dc1ebfe41027df9910a39fd",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/dce44771b2a3325b3dc1ebfe41027df9910a39fd",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Fix + sanitize the hardlink metadata setting logic\n\nFix the initial setmeta value to something meaningful: we will never\nset metadata on skipped files, and hardlinks are handled with a special\nlogic during install. They'd need different kind of special logic on\nFA_TOUCH so just play it safe and always apply metadata on those.\n\nHarlink metadata setting on install should happen on the *last* entry\nof hardlinked set that gets installed (wrt various skip scenarios)\nas otherwise creating those additional links affects the timestamp.\nNote in particular the \"last file of...\" case in fsmMkfile() where we\nthe comment said just that, but set the metadata on the *first* file\nwhich would then be NULL'ed away.\n\nThis all gets current masked by the fact that we do the metadata setting on\na separate round, but that is about to change plus this makes the overall\nlogic clearer anyhow.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  if (*firstlink != fp) {",
          "195:      rc = fsmLink((*firstlink)->fpath, fp->fpath);",
          "197:  }",
          "198:  fd = *firstlinkfile;",
          "199:     }",
          "",
          "[Removed Lines]",
          "196:      fp->setmeta = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:      rc = fsmUnpack(fi, fd, psm, nodigest);",
          "206:  if (*firstlink) {",
          "210:  }",
          "",
          "[Removed Lines]",
          "207:      (*firstlink)->setmeta = 1;",
          "",
          "[Added Lines]",
          "206:      fp->setmeta = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797:  else",
          "798:      fp->action = rpmfsGetAction(fs, fx);",
          "799:  fp->skip = XFA_SKIPPING(fp->action);",
          "801:  if (XFA_CREATING(fp->action) && !S_ISDIR(rpmfiFMode(fi)))",
          "802:      fp->suffix = tid;",
          "803:  fp->fpath = fsmFsPath(fi, fp->suffix);",
          "",
          "[Removed Lines]",
          "800:  fp->setmeta = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "806:  rc = rpmfiStat(fi, 1, &fp->sb);",
          "808:  setFileState(fs, fx);",
          "809:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:  fp->setmeta = (fp->skip == 0) &&",
          "808:         (fp->sb.st_nlink == 1 || fp->action == FA_TOUCH);",
          "",
          "---------------"
        ]
      }
    }
  ]
}