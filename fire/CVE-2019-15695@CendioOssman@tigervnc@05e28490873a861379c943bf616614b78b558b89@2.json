{
  "cve_id": "CVE-2019-15695",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to stack buffer overflow, which could be triggered from CMsgReader::readSetCursor. This vulnerability occurs due to insufficient sanitization of PixelFormat. Since remote attacker can choose offset from start of the buffer to start writing his values, exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "05e28490873a861379c943bf616614b78b558b89",
  "patch_info": {
    "commit_hash": "05e28490873a861379c943bf616614b78b558b89",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/05e28490873a861379c943bf616614b78b558b89",
    "files": [
      "common/rfb/PixelFormat.cxx",
      "tests/unit/pixelformat.cxx"
    ],
    "message": "Handle pixel formats with odd shift values\n\nOur fast paths assume that each channel fits in to a separate byte.\nThat means the shift needs to be a multiple of 8. Start actually\nchecking this so that a client cannot trip us up and possibly cause\nincorrect code exection.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
    "before_after_code_files": [
      "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
      "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
    ]
  },
  "patch_diff": {
    "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
      "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "206:     return false;",
      "207:   if (blueMax != 255)",
      "208:     return false;",
      "210:   return true;",
      "211: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   if ((redShift & 0x7) != 0)",
      "210:     return false;",
      "211:   if ((greenShift & 0x7) != 0)",
      "212:     return false;",
      "213:   if ((blueShift & 0x7) != 0)",
      "214:     return false;",
      "",
      "---------------"
    ],
    "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
      "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:     do888Test(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
      "173:     printf(\"\\n\");",
      "174: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 8, 18);",
      "176:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 11, 24);",
      "177:     do888Test(false, 32, 24, false, true, 255, 255, 255, 4, 16, 24);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
      "candidate_info": {
        "commit_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Fix depth sanity test in PixelFormat",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [
            "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ],
          "candidate": [
            "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
            "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:     return false;",
          "681:   totalBits = bits(redMax) + bits(greenMax) + bits(blueMax);",
          "683:     return false;",
          "685:   if (((redMax << redShift) & (greenMax << greenShift)) != 0)",
          "",
          "[Removed Lines]",
          "682:   if (totalBits > bpp)",
          "",
          "[Added Lines]",
          "682:   if (totalBits > depth)",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "---------------"
        ]
      }
    }
  ]
}