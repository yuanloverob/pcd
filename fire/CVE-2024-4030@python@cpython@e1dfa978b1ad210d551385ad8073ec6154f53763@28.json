{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bfd9c3ea5336f2898e3c58e0c3999bfc25d7da89",
      "candidate_info": {
        "commit_hash": "bfd9c3ea5336f2898e3c58e0c3999bfc25d7da89",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bfd9c3ea5336f2898e3c58e0c3999bfc25d7da89",
        "files": [
          "Include/internal/pycore_global_objects_fini_generated.h",
          "Include/internal/pycore_global_strings.h",
          "Include/internal/pycore_runtime_init_generated.h",
          "Include/internal/pycore_unicodeobject_generated.h",
          "Lib/test/test_capi/test_getargs.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-21-11-27-14.gh-issue-119213.nxjxrt.rst",
          "Modules/_testinternalcapi.c",
          "Modules/clinic/_testinternalcapi.c.h",
          "Python/getargs.c",
          "Tools/clinic/libclinic/parse_args.py"
        ],
        "message": "[3.13] gh-119213: Be More Careful About _PyArg_Parser.kwtuple Across Interpreters (gh-119331) (gh-119410)\n\n_PyArg_Parser holds static global data generated for modules by Argument Clinic.  The _PyArg_Parser.kwtuple field is a tuple object, even though it's stored within a static global.  In some cases the tuple is statically allocated and thus it's okay that it gets shared by multiple interpreters.  However, in other cases the tuple is set lazily, allocated from the heap using the active interprepreter at the point the tuple is needed.\n\nThis is a problem once that interpreter is destroyed since _PyArg_Parser.kwtuple becomes at dangling pointer, leading to crashes.  It isn't a problem if the tuple is allocated under the main interpreter, since its lifetime is bound to the lifetime of the runtime.  The solution here is to temporarily switch to the main interpreter.  The alternative would be to always statically allocate the tuple.\n\nThis change also fixes a bug where only the most recent parser was added to the global linked list.\n\n(cherry picked from commit 81865002aee8eaaeb3c7e402f86183afa6de77bf)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_global_objects_fini_generated.h||Include/internal/pycore_global_objects_fini_generated.h",
          "Include/internal/pycore_global_strings.h||Include/internal/pycore_global_strings.h",
          "Include/internal/pycore_runtime_init_generated.h||Include/internal/pycore_runtime_init_generated.h",
          "Include/internal/pycore_unicodeobject_generated.h||Include/internal/pycore_unicodeobject_generated.h",
          "Lib/test/test_capi/test_getargs.py||Lib/test/test_capi/test_getargs.py",
          "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c",
          "Modules/clinic/_testinternalcapi.c.h||Modules/clinic/_testinternalcapi.c.h",
          "Python/getargs.c||Python/getargs.c",
          "Tools/clinic/libclinic/parse_args.py||Tools/clinic/libclinic/parse_args.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_global_objects_fini_generated.h||Include/internal/pycore_global_objects_fini_generated.h": [
          "File: Include/internal/pycore_global_objects_fini_generated.h -> Include/internal/pycore_global_objects_fini_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1221:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(sort));",
          "1222:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(source));",
          "1223:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(source_traceback));",
          "1224:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(src));",
          "1225:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(src_dir_fd));",
          "1226:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(stacklevel));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1224:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(spam));",
          "",
          "---------------"
        ],
        "Include/internal/pycore_global_strings.h||Include/internal/pycore_global_strings.h": [
          "File: Include/internal/pycore_global_strings.h -> Include/internal/pycore_global_strings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         STRUCT_FOR_ID(sort)",
          "711:         STRUCT_FOR_ID(source)",
          "712:         STRUCT_FOR_ID(source_traceback)",
          "713:         STRUCT_FOR_ID(src)",
          "714:         STRUCT_FOR_ID(src_dir_fd)",
          "715:         STRUCT_FOR_ID(stacklevel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:         STRUCT_FOR_ID(spam)",
          "",
          "---------------"
        ],
        "Include/internal/pycore_runtime_init_generated.h||Include/internal/pycore_runtime_init_generated.h": [
          "File: Include/internal/pycore_runtime_init_generated.h -> Include/internal/pycore_runtime_init_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1219:     INIT_ID(sort), \\",
          "1220:     INIT_ID(source), \\",
          "1221:     INIT_ID(source_traceback), \\",
          "1222:     INIT_ID(src), \\",
          "1223:     INIT_ID(src_dir_fd), \\",
          "1224:     INIT_ID(stacklevel), \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222:     INIT_ID(spam), \\",
          "",
          "---------------"
        ],
        "Include/internal/pycore_unicodeobject_generated.h||Include/internal/pycore_unicodeobject_generated.h": [
          "File: Include/internal/pycore_unicodeobject_generated.h -> Include/internal/pycore_unicodeobject_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1971:     string = &_Py_ID(source_traceback);",
          "1972:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "1973:     _PyUnicode_InternInPlace(interp, &string);",
          "1974:     string = &_Py_ID(src);",
          "1975:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "1976:     _PyUnicode_InternInPlace(interp, &string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1974:     string = &_Py_ID(spam);",
          "1975:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "1976:     _PyUnicode_InternInPlace(interp, &string);",
          "",
          "---------------"
        ],
        "Lib/test/test_capi/test_getargs.py||Lib/test/test_capi/test_getargs.py": [
          "File: Lib/test/test_capi/test_getargs.py -> Lib/test/test_capi/test_getargs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import sys",
          "5: from test import support",
          "6: from test.support import import_helper",
          "7: from test.support import warnings_helper",
          "8: # Skip this test if the _testcapi module isn't available.",
          "9: _testcapi = import_helper.import_module('_testcapi')",
          "10: from _testcapi import getargs_keywords, getargs_keyword_only",
          "12: # > How about the following counterproposal. This also changes some of",
          "13: # > the other format codes to be a little more regular.",
          "14: # >",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from test.support import script_helper",
          "13: try:",
          "14:     import _testinternalcapi",
          "15: except ImportError:",
          "16:     _testinternalcapi = NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1346:                     \"argument 1 must be sequence of length 1, not 0\"):",
          "1347:                 parse(((),), {}, '(' + f + ')', ['a'])",
          "1350: if __name__ == \"__main__\":",
          "1351:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1355:     @unittest.skipIf(_testinternalcapi is None, 'needs _testinternalcapi')",
          "1356:     def test_gh_119213(self):",
          "1357:         rc, out, err = script_helper.assert_python_ok(\"-c\", \"\"\"if True:",
          "1358:             from test import support",
          "1359:             script = '''if True:",
          "1360:                 import _testinternalcapi",
          "1361:                 _testinternalcapi.gh_119213_getargs(spam='eggs')",
          "1362:                 '''",
          "1363:             config = dict(",
          "1364:                 allow_fork=False,",
          "1365:                 allow_exec=False,",
          "1366:                 allow_threads=True,",
          "1367:                 allow_daemon_threads=False,",
          "1368:                 use_main_obmalloc=False,",
          "1369:                 gil=2,",
          "1370:                 check_multi_interp_extensions=True,",
          "1371:             )",
          "1372:             rc = support.run_in_subinterp_with_config(script, **config)",
          "1373:             assert rc == 0",
          "1375:             # The crash is different if the interpreter was not destroyed first.",
          "1376:             #interpid = _testinternalcapi.create_interpreter()",
          "1377:             #rc = _testinternalcapi.exec_interpreter(interpid, script)",
          "1378:             #assert rc == 0",
          "1379:             \"\"\")",
          "1380:         self.assertEqual(rc, 0)",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c": [
          "File: Modules/_testinternalcapi.c -> Modules/_testinternalcapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2006:     Py_RETURN_FALSE;",
          "2007: }",
          "2009: static PyMethodDef module_functions[] = {",
          "2010:     {\"get_configs\", get_configs, METH_NOARGS},",
          "2011:     {\"get_recursion_depth\", get_recursion_depth, METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2011: gh_119213_getargs",
          "2013:     spam: object = None",
          "2015: Test _PyArg_Parser.kwtuple",
          "2018: static PyObject *",
          "2019: gh_119213_getargs_impl(PyObject *module, PyObject *spam)",
          "2021: {",
          "2023:     assert(!_Py_IsMainInterpreter(PyInterpreterState_Get()));",
          "2024:     return Py_NewRef(spam);",
          "2025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2096: #ifdef _Py_TIER2",
          "2097:     {\"uop_symbols_test\", _Py_uop_symbols_test, METH_NOARGS},",
          "2098: #endif",
          "2100: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118:     GH_119213_GETARGS_METHODDEF",
          "",
          "---------------"
        ],
        "Modules/clinic/_testinternalcapi.c.h||Modules/clinic/_testinternalcapi.c.h": [
          "File: Modules/clinic/_testinternalcapi.c.h -> Modules/clinic/_testinternalcapi.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: {",
          "301:     return _testinternalcapi_test_long_numbits_impl(module);",
          "302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: PyDoc_STRVAR(gh_119213_getargs__doc__,",
          "305: \"gh_119213_getargs($module, /, spam=None)\\n\"",
          "306: \"--\\n\"",
          "307: \"\\n\"",
          "308: \"Test _PyArg_Parser.kwtuple\");",
          "310: #define GH_119213_GETARGS_METHODDEF    \\",
          "311:     {\"gh_119213_getargs\", _PyCFunction_CAST(gh_119213_getargs), METH_FASTCALL|METH_KEYWORDS, gh_119213_getargs__doc__},",
          "313: static PyObject *",
          "314: gh_119213_getargs_impl(PyObject *module, PyObject *spam);",
          "316: static PyObject *",
          "317: gh_119213_getargs(PyObject *module, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames)",
          "318: {",
          "319:     PyObject *return_value = NULL;",
          "320:     #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "322:     #define NUM_KEYWORDS 1",
          "323:     static struct {",
          "324:         PyGC_Head _this_is_not_used;",
          "325:         PyObject_VAR_HEAD",
          "326:         PyObject *ob_item[NUM_KEYWORDS];",
          "327:     } _kwtuple = {",
          "328:         .ob_base = PyVarObject_HEAD_INIT(&PyTuple_Type, NUM_KEYWORDS)",
          "329:         .ob_item = { &_Py_ID(spam), },",
          "330:     };",
          "331:     #undef NUM_KEYWORDS",
          "332:     #define KWTUPLE (&_kwtuple.ob_base.ob_base)",
          "334:     #else  // !Py_BUILD_CORE",
          "335:     #  define KWTUPLE NULL",
          "336:     #endif  // !Py_BUILD_CORE",
          "338:     static const char * const _keywords[] = {\"spam\", NULL};",
          "339:     static _PyArg_Parser _parser = {",
          "340:         .keywords = _keywords,",
          "341:         .fname = \"gh_119213_getargs\",",
          "342:         .kwtuple = KWTUPLE,",
          "343:     };",
          "344:     #undef KWTUPLE",
          "345:     PyObject *argsbuf[1];",
          "346:     Py_ssize_t noptargs = nargs + (kwnames ? PyTuple_GET_SIZE(kwnames) : 0) - 0;",
          "347:     PyObject *spam = Py_None;",
          "349:     args = _PyArg_UnpackKeywords(args, nargs, NULL, kwnames, &_parser, 0, 1, 0, argsbuf);",
          "350:     if (!args) {",
          "351:         goto exit;",
          "352:     }",
          "353:     if (!noptargs) {",
          "354:         goto skip_optional_pos;",
          "355:     }",
          "356:     spam = args[0];",
          "357: skip_optional_pos:",
          "358:     return_value = gh_119213_getargs_impl(module, spam);",
          "360: exit:",
          "361:     return return_value;",
          "362: }",
          "",
          "---------------"
        ],
        "Python/getargs.c||Python/getargs.c": [
          "File: Python/getargs.c -> Python/getargs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"pycore_dict.h\"          // _PyDict_HasOnlyStringKeys()",
          "8: #include \"pycore_modsupport.h\"    // export _PyArg_NoKeywords()",
          "9: #include \"pycore_pylifecycle.h\"   // _PyArg_Fini",
          "10: #include \"pycore_tuple.h\"         // _PyTuple_ITEMS()",
          "11: #include \"pycore_pyerrors.h\"      // _Py_CalculateSuggestions()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"pycore_pystate.h\"       // _Py_IsMainInterpreter()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1947:     int owned;",
          "1948:     PyObject *kwtuple = parser->kwtuple;",
          "1949:     if (kwtuple == NULL) {",
          "1950:         kwtuple = new_kwtuple(keywords, len, pos);",
          "1951:         if (kwtuple == NULL) {",
          "1952:             return -1;",
          "1953:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1953:         PyThreadState *save_tstate = NULL;",
          "1954:         PyThreadState *temp_tstate = NULL;",
          "1955:         if (!_Py_IsMainInterpreter(PyInterpreterState_Get())) {",
          "1956:             temp_tstate = PyThreadState_New(_PyInterpreterState_Main());",
          "1957:             if (temp_tstate == NULL) {",
          "1958:                 return -1;",
          "1959:             }",
          "1960:             save_tstate = PyThreadState_Swap(temp_tstate);",
          "1961:         }",
          "1963:         if (temp_tstate != NULL) {",
          "1964:             PyThreadState_Clear(temp_tstate);",
          "1965:             (void)PyThreadState_Swap(save_tstate);",
          "1966:             PyThreadState_Delete(temp_tstate);",
          "1967:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1969:     parser->next = _Py_atomic_load_ptr(&_PyRuntime.getargs.static_parsers);",
          "1970:     do {",
          "1974:     return 0;",
          "1975: }",
          "",
          "[Removed Lines]",
          "1972:     } while (_Py_atomic_compare_exchange_ptr(&_PyRuntime.getargs.static_parsers,",
          "1973:                                              &parser->next, parser));",
          "",
          "[Added Lines]",
          "1989:     } while (!_Py_atomic_compare_exchange_ptr(&_PyRuntime.getargs.static_parsers,",
          "1990:                                               &parser->next, parser));",
          "",
          "---------------"
        ],
        "Tools/clinic/libclinic/parse_args.py||Tools/clinic/libclinic/parse_args.py": [
          "File: Tools/clinic/libclinic/parse_args.py -> Tools/clinic/libclinic/parse_args.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:             #endif",
          "52:         \"\"\"",
          "53:     else:",
          "54:         declarations = \"\"\"",
          "55:             #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:         # XXX Why do we not statically allocate the tuple",
          "55:         # for non-builtin modules?",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
      "candidate_info": {
        "commit_hash": "10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py"
        ],
        "message": "[3.13] gh-118908: Fix completions after namespace change in REPL (GH-120370) (#120392)\n\n(cherry picked from commit 02e74c356223feb0771759286d24d1dbac01d4ca)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: from collections.abc import Callable, Collection",
          "56: from .types import Callback, Completer, KeySpec, CommandName",
          "59: MoreLinesCallable = Callable[[str], bool]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: TYPE_CHECKING = False",
          "60: if TYPE_CHECKING:",
          "61:     from typing import Any",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: @dataclass",
          "94: class ReadlineConfig:",
          "96:     completer_delims: frozenset[str] = frozenset(\" \\t\\n`~!@#$%^&*()-=+[{]}\\\\|;:'\\\",<>/?\")",
          "",
          "[Removed Lines]",
          "95:     readline_completer: Completer | None = RLCompleter().complete",
          "",
          "[Added Lines]",
          "100:     readline_completer: Completer | None = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554: # ____________________________________________________________",
          "558:     global raw_input",
          "559:     if raw_input is not None:",
          "560:         return  # don't run _setup twice",
          "",
          "[Removed Lines]",
          "557: def _setup() -> None:",
          "",
          "[Added Lines]",
          "562: def _setup(namespace: dict[str, Any]) -> None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "570:     _wrapper.f_in = f_in",
          "571:     _wrapper.f_out = f_out",
          "573:     # this is not really what readline.c does.  Better than nothing I guess",
          "574:     import builtins",
          "576:     raw_input = builtins.input",
          "577:     builtins.input = _wrapper.input",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:     # set up namespace in rlcompleter",
          "579:     _wrapper.config.readline_completer = RLCompleter(namespace).complete",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     console: code.InteractiveConsole | None = None,",
          "97: ) -> None:",
          "98:     from .readline import _setup",
          "101:     namespace = mainmodule.__dict__ if mainmodule else DEFAULT_NAMESPACE",
          "102:     if console is None:",
          "103:         console = InteractiveColoredConsole(",
          "104:             namespace, filename=\"<stdin>\"",
          "",
          "[Removed Lines]",
          "99:     _setup()",
          "",
          "[Added Lines]",
          "100:     _setup(namespace)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
      "candidate_info": {
        "commit_hash": "58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
        "files": [
          "Doc/c-api/long.rst",
          "Include/cpython/longobject.h",
          "Lib/test/test_capi/test_long.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-28-10-02-58.gh-issue-121115.EeSLfc.rst",
          "Objects/longobject.c"
        ],
        "message": "gh-121115: Skip __index__ in PyLong_AsNativeBytes by default (GH-121118)\n\n(cherry picked from commit 2894aa14f22430e9b6d4676afead6da7c79209ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Include/cpython/longobject.h||Include/cpython/longobject.h",
          "Lib/test/test_capi/test_long.py||Lib/test/test_capi/test_long.py",
          "Objects/longobject.c||Objects/longobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/longobject.h||Include/cpython/longobject.h": [
          "File: Include/cpython/longobject.h -> Include/cpython/longobject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define Py_ASNATIVEBYTES_NATIVE_ENDIAN 3",
          "11: #define Py_ASNATIVEBYTES_UNSIGNED_BUFFER 4",
          "12: #define Py_ASNATIVEBYTES_REJECT_NEGATIVE 8",
          "15:    buffer points to the first byte of the variable.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #define Py_ASNATIVEBYTES_ALLOW_INDEX 16",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:    Big endian mode will write the most significant byte into the address",
          "26:    directly referenced by buffer; little endian will write the least significant",
          "27:    byte into that address.",
          "",
          "[Removed Lines]",
          "23:    If flags is -1 (all bits set), native endian is used and value truncation",
          "24:    behaves most like C (allows negative inputs and allow MSB set).",
          "",
          "[Added Lines]",
          "25:    If flags is -1 (all bits set), native endian is used, value truncation",
          "26:    behaves most like C (allows negative inputs and allow MSB set), and non-int",
          "27:    objects will raise a TypeError.",
          "",
          "---------------"
        ],
        "Lib/test/test_capi/test_long.py||Lib/test/test_capi/test_long.py": [
          "File: Lib/test/test_capi/test_long.py -> Lib/test/test_capi/test_long.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:                     \"PyLong_AsNativeBytes(v, <unknown>, 0, -1)\")",
          "497:                 self.assertEqual(buffer, b\"\\x5a\",",
          "498:                     \"buffer overwritten when it should not have been\")",
          "501:                     \"PyLong_AsNativeBytes(Index(v), <unknown>, 0, -1)\")",
          "502:                 self.assertEqual(buffer, b\"\\x5a\",",
          "503:                     \"buffer overwritten when it should not have been\")",
          "",
          "[Removed Lines]",
          "499:                 # Also check via the __index__ path",
          "500:                 self.assertEqual(expect, asnativebytes(Index(v), buffer, 0, -1),",
          "",
          "[Added Lines]",
          "499:                 # Also check via the __index__ path.",
          "500:                 # We pass Py_ASNATIVEBYTES_NATIVE_ENDIAN | ALLOW_INDEX",
          "501:                 self.assertEqual(expect, asnativebytes(Index(v), buffer, 0, 3 | 16),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:         with self.assertRaises(ValueError):",
          "608:             asnativebytes(-1, buffer, 0, 8)",
          "610:         # Check a few error conditions. These are validated in code, but are",
          "611:         # unspecified in docs, so if we make changes to the implementation, it's",
          "612:         # fine to just update these tests rather than preserve the behaviour.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:         # Ensure omitting Py_ASNATIVEBYTES_ALLOW_INDEX raises on __index__ value",
          "612:         with self.assertRaises(TypeError):",
          "613:             asnativebytes(Index(1), buffer, 0, -1)",
          "614:         with self.assertRaises(TypeError):",
          "615:             asnativebytes(Index(1), buffer, 0, 3)",
          "",
          "---------------"
        ],
        "Objects/longobject.c||Objects/longobject.c": [
          "File: Objects/longobject.c -> Objects/longobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116:     if (PyLong_Check(vv)) {",
          "1117:         v = (PyLongObject *)vv;",
          "1118:     }",
          "1120:         v = (PyLongObject *)_PyNumber_Index(vv);",
          "1121:         if (v == NULL) {",
          "1122:             return -1;",
          "1123:         }",
          "1124:         do_decref = 1;",
          "1125:     }",
          "1127:     if ((flags != -1 && (flags & Py_ASNATIVEBYTES_REJECT_NEGATIVE))",
          "1128:         && _PyLong_IsNegative(v)) {",
          "",
          "[Removed Lines]",
          "1119:     else {",
          "",
          "[Added Lines]",
          "1119:     else if (flags != -1 && (flags & Py_ASNATIVEBYTES_ALLOW_INDEX)) {",
          "1126:     else {",
          "1127:         PyErr_Format(PyExc_TypeError, \"expect int, got %T\", vv);",
          "1128:         return -1;",
          "1129:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
      "candidate_info": {
        "commit_hash": "a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
        "files": [
          "Lib/_pyrepl/pager.py"
        ],
        "message": "[3.13] gh-119185: Fix typo in `_pyrepl.pager`: `tempfilepager` should be `tempfile_pager` (GH-118881) (#119211)\n\nFix typo in `_pyrepl.pager`: `tempfilepager` should be `tempfile_pager`\n\nThe name with no underscore doesn't exist.\n(cherry picked from commit 05e1dce76d7669e90ab73e7e682360d83b8a0d02)\n\nCo-authored-by: Thanos <111999343+Sachaa-Thanasius@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py": [
          "File: Lib/_pyrepl/pager.py -> Lib/_pyrepl/pager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     if os.environ.get('TERM') in ('dumb', 'emacs'):",
          "36:         return plain_pager",
          "37:     if sys.platform == 'win32':",
          "39:     if hasattr(os, 'system') and os.system('(less) 2>/dev/null') == 0:",
          "40:         return lambda text, title='': pipe_pager(text, 'less', title)",
          "",
          "[Removed Lines]",
          "38:         return lambda text, title='': tempfilepager(plain(text), 'more <')",
          "",
          "[Added Lines]",
          "38:         return lambda text, title='': tempfile_pager(plain(text), 'more <')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7237284b9c1768e6feb19abfad1ec54ac44ad87",
      "candidate_info": {
        "commit_hash": "f7237284b9c1768e6feb19abfad1ec54ac44ad87",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f7237284b9c1768e6feb19abfad1ec54ac44ad87",
        "files": [
          "Lib/test/test_tools/test_makefile.py"
        ],
        "message": "[3.13] gh-120418: Don't assume wheeldata is deleted if `WHEEL_PKG_DIR` is set (GH-120419) (#120432)\n\ngh-120418: Don't assume wheeldata is deleted if `WHEEL_PKG_DIR` is set (GH-120419)\n\nRemove wheeldata from both sides of the `assertEqual`, so that we're\n*actually* ignoring it from the test set.\n\nThis test is only making assertions about the source tree, no code is\nbeing executed that would do anything different based on the value of\n`WHEEL_PKG_DIR`.\n(cherry picked from commit 030b452e34bbb0096acacb70a31915b9590c8186)\n\nCo-authored-by: Stefano Rivera <stefano@rivera.za.net>",
        "before_after_code_files": [
          "Lib/test/test_tools/test_makefile.py||Lib/test/test_tools/test_makefile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tools/test_makefile.py||Lib/test/test_tools/test_makefile.py": [
          "File: Lib/test/test_tools/test_makefile.py -> Lib/test/test_tools/test_makefile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         idle_test = 'idlelib/idle_test'",
          "42:         self.assertIn(idle_test, test_dirs)",
          "45:         for dirpath, dirs, files in os.walk(support.TEST_HOME_DIR):",
          "46:             dirname = os.path.basename(dirpath)",
          "47:             # Skip temporary dirs:",
          "",
          "[Removed Lines]",
          "44:         used = [idle_test]",
          "",
          "[Added Lines]",
          "44:         used = set([idle_test])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:                         \"of test directories to install\"",
          "66:                     )",
          "67:                 )",
          "70:         # Don't check the wheel dir when Python is built --with-wheel-pkg-dir",
          "71:         if sysconfig.get_config_var('WHEEL_PKG_DIR'):",
          "72:             test_dirs.remove('test/wheeldata')",
          "74:         # Check that there are no extra entries:",
          "75:         unique_test_dirs = set(test_dirs)",
          "77:         self.assertEqual(len(test_dirs), len(unique_test_dirs))",
          "",
          "[Removed Lines]",
          "68:                 used.append(relpath)",
          "76:         self.assertSetEqual(unique_test_dirs, set(used))",
          "",
          "[Added Lines]",
          "68:                 used.add(relpath)",
          "73:             used.discard('test/wheeldata')",
          "77:         self.assertSetEqual(unique_test_dirs, used)",
          "",
          "---------------"
        ]
      }
    }
  ]
}