{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a860b1d60b8e3d09c58daf6996a38606f407a009",
      "candidate_info": {
        "commit_hash": "a860b1d60b8e3d09c58daf6996a38606f407a009",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a860b1d60b8e3d09c58daf6996a38606f407a009",
        "files": [
          "Misc/NEWS.d/next/Library/2024-06-21-14-32-56.gh-issue-120811.eBmVTV.rst",
          "Python/context.c"
        ],
        "message": "[3.13] gh-120811: Fix reference leak upon `_PyContext_Exit` failure (GH-120812) (#120843)\n\ngh-120811: Fix reference leak upon `_PyContext_Exit` failure (GH-120812)\n(cherry picked from commit aed31beca9a54b85a1392631a48da80602210f18)\n\nCo-authored-by: Peter <zintensitydev@gmail.com>\nCo-authored-by: Kumar Aditya <kumaraditya@python.org>",
        "before_after_code_files": [
          "Python/context.c||Python/context.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/context.c||Python/context.c": [
          "File: Python/context.c -> Python/context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:         ts, args[0], args + 1, nargs - 1, kwnames);",
          "663:     if (_PyContext_Exit(ts, (PyObject *)self)) {",
          "664:         return NULL;",
          "665:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:         Py_XDECREF(call_result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
      "candidate_info": {
        "commit_hash": "3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
        "files": [
          "Include/internal/pycore_object.h",
          "Include/internal/pycore_pyatomic_ft_wrappers.h",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Make PyType_HasFeature atomic (GH-120210) (#120443)\n\ngh-117657: Make PyType_HasFeature atomic (GH-120210)\n\nMake PyType_HasFeature atomic\n(cherry picked from commit eebae2c460dabdc70dc0d9b6e189368eb1abb716)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Include/internal/pycore_object.h||Include/internal/pycore_object.h",
          "Include/internal/pycore_pyatomic_ft_wrappers.h||Include/internal/pycore_pyatomic_ft_wrappers.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_object.h||Include/internal/pycore_object.h": [
          "File: Include/internal/pycore_object.h -> Include/internal/pycore_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: static inline int",
          "264: _PyType_HasFeature(PyTypeObject *type, unsigned long feature) {",
          "266: }",
          "268: extern void _PyType_InitCache(PyInterpreterState *interp);",
          "",
          "[Removed Lines]",
          "265:     return ((type->tp_flags & feature) != 0);",
          "",
          "[Added Lines]",
          "265:     return ((FT_ATOMIC_LOAD_ULONG_RELAXED(type->tp_flags) & feature) != 0);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_pyatomic_ft_wrappers.h||Include/internal/pycore_pyatomic_ft_wrappers.h": [
          "File: Include/internal/pycore_pyatomic_ft_wrappers.h -> Include/internal/pycore_pyatomic_ft_wrappers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     _Py_atomic_load_uint16_relaxed(&value)",
          "46: #define FT_ATOMIC_LOAD_UINT32_RELAXED(value) \\",
          "47:     _Py_atomic_load_uint32_relaxed(&value)",
          "48: #define FT_ATOMIC_STORE_PTR_RELAXED(value, new_value) \\",
          "49:     _Py_atomic_store_ptr_relaxed(&value, new_value)",
          "50: #define FT_ATOMIC_STORE_PTR_RELEASE(value, new_value) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #define FT_ATOMIC_LOAD_ULONG_RELAXED(value) \\",
          "49:     _Py_atomic_load_ulong_relaxed(&value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: #define FT_ATOMIC_LOAD_UINT8_RELAXED(value) value",
          "76: #define FT_ATOMIC_LOAD_UINT16_RELAXED(value) value",
          "77: #define FT_ATOMIC_LOAD_UINT32_RELAXED(value) value",
          "78: #define FT_ATOMIC_STORE_PTR_RELAXED(value, new_value) value = new_value",
          "79: #define FT_ATOMIC_STORE_PTR_RELEASE(value, new_value) value = new_value",
          "80: #define FT_ATOMIC_STORE_UINTPTR_RELEASE(value, new_value) value = new_value",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #define FT_ATOMIC_LOAD_ULONG_RELAXED(value) value",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
      "candidate_info": {
        "commit_hash": "7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
        "files": [
          "Lib/posixpath.py",
          "Lib/test/test_posixpath.py",
          "Misc/NEWS.d/next/Library/2024-05-01-22-24-05.gh-issue-110863.GjYBbq.rst"
        ],
        "message": "[3.13] GH-118447: Fix handling of unreadable symlinks in `os.path.realpath()` (GH-118489) (#119163)\n\n(cherry picked from commit caf6064a1bc15ac344afd78b780188e60b9c628e)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>",
        "before_after_code_files": [
          "Lib/posixpath.py||Lib/posixpath.py",
          "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/posixpath.py||Lib/posixpath.py": [
          "File: Lib/posixpath.py -> Lib/posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:             if not stat.S_ISLNK(st.st_mode):",
          "472:                 path = newpath",
          "473:                 continue",
          "474:         except OSError:",
          "475:             if strict:",
          "476:                 raise",
          "477:             path = newpath",
          "478:             continue",
          "479:         # Resolve the symbolic link",
          "492:         seen[newpath] = None # not resolved symlink",
          "494:         if target.startswith(sep):",
          "495:             # Symlink target is absolute; reset resolved path.",
          "496:             path = sep",
          "",
          "[Removed Lines]",
          "480:         if newpath in seen:",
          "481:             # Already seen this path",
          "482:             path = seen[newpath]",
          "483:             if path is not None:",
          "484:                 # use cached value",
          "485:                 continue",
          "486:             # The symlink is not resolved, so we must have a symlink loop.",
          "487:             if strict:",
          "488:                 # Raise OSError(errno.ELOOP)",
          "489:                 os.stat(newpath)",
          "490:             path = newpath",
          "491:             continue",
          "493:         target = os.readlink(newpath)",
          "",
          "[Added Lines]",
          "474:             if newpath in seen:",
          "475:                 # Already seen this path",
          "476:                 path = seen[newpath]",
          "477:                 if path is not None:",
          "478:                     # use cached value",
          "479:                     continue",
          "480:                 # The symlink is not resolved, so we must have a symlink loop.",
          "481:                 if strict:",
          "482:                     # Raise OSError(errno.ELOOP)",
          "483:                     os.stat(newpath)",
          "484:                 path = newpath",
          "485:                 continue",
          "486:             target = os.readlink(newpath)",
          "",
          "---------------"
        ],
        "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py": [
          "File: Lib/test/test_posixpath.py -> Lib/test/test_posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:             safe_rmdir(ABSTFN + \"/k\")",
          "661:             safe_rmdir(ABSTFN)",
          "663:     def test_relpath(self):",
          "664:         (real_getcwd, os.getcwd) = (os.getcwd, lambda: r\"/home/user/bar\")",
          "665:         try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     @os_helper.skip_unless_symlink",
          "664:     @skip_if_ABSTFN_contains_backslash",
          "665:     @unittest.skipIf(os.chmod not in os.supports_follow_symlinks, \"Can't set symlink permissions\")",
          "666:     def test_realpath_unreadable_symlink(self):",
          "667:         try:",
          "668:             os.symlink(ABSTFN+\"1\", ABSTFN)",
          "669:             os.chmod(ABSTFN, 0o000, follow_symlinks=False)",
          "670:             self.assertEqual(realpath(ABSTFN), ABSTFN)",
          "671:             self.assertEqual(realpath(ABSTFN + '/foo'), ABSTFN + '/foo')",
          "672:             self.assertEqual(realpath(ABSTFN + '/../foo'), dirname(ABSTFN) + '/foo')",
          "673:             self.assertEqual(realpath(ABSTFN + '/foo/..'), ABSTFN)",
          "674:             with self.assertRaises(PermissionError):",
          "675:                 realpath(ABSTFN, strict=True)",
          "676:         finally:",
          "677:             os.chmod(ABSTFN, 0o755, follow_symlinks=False)",
          "678:             os.unlink(ABSTFN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
      "candidate_info": {
        "commit_hash": "ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
        "files": [
          "Lib/test/test_capi/test_misc.py",
          "Misc/NEWS.d/next/C API/2024-05-29-21-05-59.gh-issue-119585.Sn7JL3.rst",
          "Modules/_testcapimodule.c",
          "Python/pystate.c"
        ],
        "message": "[3.13] gh-119585: Fix crash involving `PyGILState_Release()` and `PyThreadState_Clear()` (GH-119753) (#119859)\n\nMake sure that `gilstate_counter` is not zero in when calling\n`PyThreadState_Clear()`. A destructor called from `PyThreadState_Clear()` may\ncall back into `PyGILState_Ensure()` and `PyGILState_Release()`. If\n`gilstate_counter` is zero, it will try to create a new thread state before\nthe current active thread state is destroyed, leading to an assertion failure\nor crash.\n(cherry picked from commit bcc1be39cb1d04ad9fc0bd1b9193d3972835a57c)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py": [
          "File: Lib/test/test_capi/test_misc.py -> Lib/test/test_capi/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2888:         t.start()",
          "2889:         t.join()",
          "2891:     @threading_helper.reap_threads",
          "2892:     @threading_helper.requires_working_threading()",
          "2893:     def test_gilstate_ensure_no_deadlock(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2891:     @threading_helper.reap_threads",
          "2892:     @threading_helper.requires_working_threading()",
          "2893:     def test_thread_gilstate_in_clear(self):",
          "2894:         # See https://github.com/python/cpython/issues/119585",
          "2895:         class C:",
          "2896:             def __del__(self):",
          "2897:                 _testcapi.gilstate_ensure_release()",
          "2899:         # Thread-local variables are destroyed in `PyThreadState_Clear()`.",
          "2900:         local_var = threading.local()",
          "2902:         def callback():",
          "2903:             local_var.x = C()",
          "2905:         _testcapi._test_thread_state(callback)",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:     Py_RETURN_NONE;",
          "765: }",
          "767: #ifndef MS_WINDOWS",
          "768: static PyThread_type_lock wait_done = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "767: static PyObject *",
          "768: gilstate_ensure_release(PyObject *module, PyObject *Py_UNUSED(ignored))",
          "769: {",
          "770:     PyGILState_STATE state = PyGILState_Ensure();",
          "771:     PyGILState_Release(state);",
          "772:     Py_RETURN_NONE;",
          "773: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3351:     {\"test_get_type_dict\",        test_get_type_dict,            METH_NOARGS},",
          "3352:     {\"test_reftracer\",          test_reftracer,                  METH_NOARGS},",
          "3353:     {\"_test_thread_state\",      test_thread_state,               METH_VARARGS},",
          "3354: #ifndef MS_WINDOWS",
          "3355:     {\"_spawn_pthread_waiter\",   spawn_pthread_waiter,            METH_NOARGS},",
          "3356:     {\"_end_spawned_pthread\",    end_spawned_pthread,             METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3362:     {\"gilstate_ensure_release\", gilstate_ensure_release,         METH_NOARGS},",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:         assert(oldstate == PyGILState_UNLOCKED);",
          "2811:         PyThreadState_Clear(tstate);",
          "2817:         assert(current_fast_get() == tstate);",
          "2818:         _PyThreadState_DeleteCurrent(tstate);",
          "2819:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2814:         ++tstate->gilstate_counter;",
          "2816:         --tstate->gilstate_counter;",
          "2822:         assert(tstate->gilstate_counter == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
      "candidate_info": {
        "commit_hash": "48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
        "files": [
          "Python/qsbr.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix TSAN race in QSBR assertion (GH-119887) (#119904)\n\nDue to a limitation in TSAN, all reads from `PyThreadState.state` must be\natomic to avoid reported races.\n(cherry picked from commit 90ec19fd33e2452902b9788d4821f1fbf6542304)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/qsbr.c||Python/qsbr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/qsbr.c||Python/qsbr.c": [
          "File: Python/qsbr.c -> Python/qsbr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: bool",
          "161: _Py_qsbr_poll(struct _qsbr_thread_state *qsbr, uint64_t goal)",
          "162: {",
          "164:     if (_Py_qbsr_goal_reached(qsbr, goal)) {",
          "165:         return true;",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:     assert(_PyThreadState_GET()->state == _Py_THREAD_ATTACHED);",
          "",
          "[Added Lines]",
          "163:     assert(_Py_atomic_load_int_relaxed(&_PyThreadState_GET()->state) == _Py_THREAD_ATTACHED);",
          "",
          "---------------"
        ]
      }
    }
  ]
}