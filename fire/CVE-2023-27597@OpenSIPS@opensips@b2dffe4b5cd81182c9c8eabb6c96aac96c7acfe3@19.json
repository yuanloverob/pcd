{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b15d63018834432ffd6eddba4dde0083fe16ecba",
      "candidate_info": {
        "commit_hash": "b15d63018834432ffd6eddba4dde0083fe16ecba",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b15d63018834432ffd6eddba4dde0083fe16ecba",
        "files": [
          "modules/rtpengine/rtpengine.c"
        ],
        "message": "rtpengine: fix switching set for rtpengine_play_dtmf\n\nReported by Slava Bendersky, close #2808",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3505:  bencode_item_t *ret, *d_code;",
          "3506:  int rcode = -1;",
          "3508:  if (bencode_buffer_init(&bencbuf)) {",
          "3509:   LM_ERR(\"could not initialize bencode_buffer_t\\n\");",
          "3510:   return -2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3508:  if (set_rtpengine_set_from_avp(msg) == -1)",
          "3509:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
      "candidate_info": {
        "commit_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/205667d85c26646f7f86024b6d1865e9057c011b",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: use the proper locking type when we might switch for writing\n\nAquire lock for switchable reading when handling a full topology update,\nwich might trigger the insert of a new node in the list and thus using\nthe lock switch mechanism.\n\n(cherry picked from commit ead6f1fcae3881a15b6ec4e8e6026bdd5d99ecb3)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:   return;",
          "1110:  }",
          "1113:   lock_start_sw_read(cl_list_lock);",
          "1114:  else",
          "1115:   lock_start_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1112:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1112:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1113:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:  }",
          "1158: exit:",
          "1160:   lock_stop_sw_read(cl_list_lock);",
          "1161:  else",
          "1162:   lock_stop_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1159:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1160:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1161:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaaae0d151fb4e1f459505c890df2fc12745220c",
      "candidate_info": {
        "commit_hash": "aaaae0d151fb4e1f459505c890df2fc12745220c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/aaaae0d151fb4e1f459505c890df2fc12745220c",
        "files": [
          "lib/digest_auth/digest_auth.c",
          "modules/auth/api.c",
          "modules/httpd/doc/httpd_admin.xml",
          "modules/mid_registrar/save.c",
          "modules/stir_shaken/doc/stir_shaken_admin.xml",
          "modules/usrloc/dlist.c",
          "time_rec.h",
          "ut.h"
        ],
        "message": "Various code/doc improvements; Var renames; Fix typos\n\n(cherry picked from commit 28d87ad30f99abcfaca678955cff6b38bdc2b24f)\n(cherry picked from commit 2aa0cafcbee13131bdc4793b893530fa8126576c)",
        "before_after_code_files": [
          "lib/digest_auth/digest_auth.c||lib/digest_auth/digest_auth.c",
          "modules/auth/api.c||modules/auth/api.c",
          "modules/mid_registrar/save.c||modules/mid_registrar/save.c",
          "modules/usrloc/dlist.c||modules/usrloc/dlist.c",
          "time_rec.h||time_rec.h",
          "ut.h||ut.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/digest_auth/digest_auth.c||lib/digest_auth/digest_auth.c": [
          "File: lib/digest_auth/digest_auth.c -> lib/digest_auth/digest_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  str *s = (str*)*param;",
          "64:  alg_t af;",
          "65:  int algflags = 0;",
          "70:   LM_ERR(\"Failed to parse list of algorithms\\n\");",
          "71:   return -1;",
          "72:  }",
          "74:   af = parse_digest_algorithm(&q->s);",
          "75:   if (!digest_algorithm_available(af)) {",
          "76:    LM_ERR(\"Unsupported algorithm type: \\\"%.*s\\\"\\n\",",
          "77:        q->s.len, q->s.s);",
          "79:    return (-1);",
          "80:   }",
          "81:   algflags |= ALG2ALGFLG(af);",
          "82:  }",
          "86:  return (0);",
          "",
          "[Removed Lines]",
          "66:  csv_record *q_csv, *q;",
          "68:  q_csv = parse_csv_record(s);",
          "69:  if (!q_csv) {",
          "73:  for (q = q_csv; q; q = q->next) {",
          "78:    free_csv_record(q_csv);",
          "83:  free_csv_record(q_csv);",
          "",
          "[Added Lines]",
          "66:  csv_record *alg_csv, *q;",
          "68:  alg_csv = parse_csv_record(s);",
          "69:  if (!alg_csv) {",
          "73:  for (q = alg_csv; q; q = q->next) {",
          "78:    free_csv_record(alg_csv);",
          "83:  free_csv_record(alg_csv);",
          "",
          "---------------"
        ],
        "modules/auth/api.c||modules/auth/api.c": [
          "File: modules/auth/api.c -> modules/auth/api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:    return -1;",
          "343:  } else {",
          "344:   if (params->creds.ha1->len != digest_calc->HASHHEXLEN) {",
          "346:        \"for the algorithm \\\"%s\\\": %d expected, %d provided\\n\",",
          "347:        digest_calc->algorithm_val.s, digest_calc->HASHHEXLEN,",
          "348:        params->creds.ha1->len);",
          "",
          "[Removed Lines]",
          "345:    LM_ERR(\"Incorrect length if pre-hashed credentials \"",
          "",
          "[Added Lines]",
          "345:    LM_ERR(\"Incorrect length of pre-hashed credentials \"",
          "",
          "---------------"
        ],
        "modules/mid_registrar/save.c||modules/mid_registrar/save.c": [
          "File: modules/mid_registrar/save.c -> modules/mid_registrar/save.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1387:    if (reg_mode == MID_REG_THROTTLE_CT) {",
          "1389:     ci->pre_replicate_cb = mid_reg_store_ct_data;",
          "1391:       mri, &_c->uri, ctmap->expires, e_out,",
          "1392:       get_act_time(), ci->cseq",
          "1394:     ci->pre_replicate_info = &ct_data;",
          "1395:    }",
          "",
          "[Removed Lines]",
          "1390:     memcpy(&ct_data, &(struct mr_ct_data){",
          "1393:      }, sizeof ct_data);",
          "",
          "[Added Lines]",
          "1390:     ct_data = (struct mr_ct_data){",
          "1393:      };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1653:    if (reg_mode == MID_REG_THROTTLE_AOR) {",
          "1655:     ci->pre_replicate_cb = mid_reg_store_ct_data;",
          "1657:       mri, &_c->uri, ctmap->expires, e_out,",
          "1658:       mri->last_reg_ts, ci->cseq",
          "1660:     ci->pre_replicate_info = &ct_data;",
          "1661:    }",
          "",
          "[Removed Lines]",
          "1656:     memcpy(&ct_data, &(struct mr_ct_data){",
          "1659:      }, sizeof ct_data);",
          "",
          "[Added Lines]",
          "1656:     ct_data = (struct mr_ct_data){",
          "1659:      };",
          "",
          "---------------"
        ],
        "modules/usrloc/dlist.c||modules/usrloc/dlist.c": [
          "File: modules/usrloc/dlist.c -> modules/usrloc/dlist.c"
        ],
        "time_rec.h||time_rec.h": [
          "File: time_rec.h -> time_rec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define PKG_ALLOC    2",
          "35: #define TR_BYXXX     4",
          "39: tmrec *tmrec_parse(const char *tr, char alloc_type);",
          "41: int _tmrec_check(const tmrec *tr, time_t check_time);",
          "",
          "[Removed Lines]",
          "37: #define TR_NOVAL ((time_t)-1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: #define FREQ_WEEKLY  3",
          "142: #define FREQ_DAILY   4",
          "144: typedef struct _tr_byxxx",
          "145: {",
          "146:  int nr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: #define TR_NOVAL ((time_t)-1)",
          "",
          "---------------"
        ],
        "ut.h||ut.h": [
          "File: ut.h -> ut.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "789:   return 0;",
          "790:  }",
          "793:  if (!dst->s) {",
          "794:   LM_ERR(\"no shared memory left\\n\");",
          "795:   dst->len = 0;",
          "",
          "[Removed Lines]",
          "792:  dst->s = shm_malloc(src->len + 1);",
          "",
          "[Added Lines]",
          "792:  dst->s = shm_malloc(_src.len + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1440: char *db_url_escape(const str *url);",
          "1442: {",
          "1443:  return db_url_escape(_str(url));",
          "1444: }",
          "",
          "[Removed Lines]",
          "1441: static inline char *_db_url_escape(char *url)",
          "",
          "[Added Lines]",
          "1441: static inline char *_db_url_escape(const char *url)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35e2ed8bbae92993f4dae4818188c6a95afb69c4",
      "candidate_info": {
        "commit_hash": "35e2ed8bbae92993f4dae4818188c6a95afb69c4",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/35e2ed8bbae92993f4dae4818188c6a95afb69c4",
        "files": [
          "modules/dialog/dlg_hash.c"
        ],
        "message": "dialog: do not corelate the number of legs with branches\n\nFor a single transaction branch, we may have multiple dialog legs\nresulted by forking downstream.\n\nThanks go to Rizwan Syed and Jonathan Hulme from ConnexCS for reporting,\nproviding testing environment and support the troubleshooting and fix!\n\n(cherry picked from commit 1b944d21229e3f598e31a1d946e56e6098026ac8)",
        "before_after_code_files": [
          "modules/dialog/dlg_hash.c||modules/dialog/dlg_hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/dialog/dlg_hash.c||modules/dialog/dlg_hash.c": [
          "File: modules/dialog/dlg_hash.c -> modules/dialog/dlg_hash.c"
        ]
      }
    },
    {
      "candidate_hash": "806d0c4690dbdb6aafff93bf620fb9fca25a7489",
      "candidate_info": {
        "commit_hash": "806d0c4690dbdb6aafff93bf620fb9fca25a7489",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/806d0c4690dbdb6aafff93bf620fb9fca25a7489",
        "files": [
          "Makefile.conf.template"
        ],
        "message": "Add QM_DBG_MALLOC_HIST flag to Makefile.conf template\n\n(cherry picked from commit 4c748b3f8380185ed74ed8ea37e9e9e9470b685f)",
        "before_after_code_files": [
          "Makefile.conf.template||Makefile.conf.template"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.conf.template||Makefile.conf.template": [
          "File: Makefile.conf.template -> Makefile.conf.template",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: DEFS+= -DQ_MALLOC #Quality assurance memory allocator with runtime safety checks",
          "83: DEFS+= -DHP_MALLOC #High performance allocator with fine-grained locking",
          "84: DEFS+= -DDBG_MALLOC #Include additional, debug-enabled allocator flavors",
          "85: #DEFS+= -DNO_DEBUG #Compile out all debug messages",
          "86: #DEFS+= -DNO_LOG #Compile out all logging",
          "87: #DEFS_GROUP_START",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #DEFS+= -DQM_DBG_MALLOC_HIST=3 #Size of debug history for Q_MALLOC (default is 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}