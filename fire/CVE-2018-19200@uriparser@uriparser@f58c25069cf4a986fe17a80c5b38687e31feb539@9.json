{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71b8611cb1565ebefa2888f850c4decc6ea42730",
      "candidate_info": {
        "commit_hash": "71b8611cb1565ebefa2888f850c4decc6ea42730",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/71b8611cb1565ebefa2888f850c4decc6ea42730",
        "files": [
          "src/UriMemory.h"
        ],
        "message": "UriMemory.h: Simplify URI_CHECK_MEMORY_MANAGER",
        "before_after_code_files": [
          "src/UriMemory.h||src/UriMemory.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.h||src/UriMemory.h": [
          "File: src/UriMemory.h -> src/UriMemory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  do { \\",
          "48:   if (memory == NULL) { \\",
          "49:    memory = &defaultMemoryManager; \\",
          "54:   } \\",
          "55:  } while (0)",
          "",
          "[Removed Lines]",
          "50:   } else { \\",
          "51:    if (uriMemoryManagerIsComplete(memory) != URI_TRUE) { \\",
          "52:     return URI_ERROR_MEMORY_MANAGER_INCOMPLETE; \\",
          "53:    } \\",
          "",
          "[Added Lines]",
          "50:   } else if (uriMemoryManagerIsComplete(memory) != URI_TRUE) { \\",
          "51:    return URI_ERROR_MEMORY_MANAGER_INCOMPLETE; \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c280f36dbc6c7ffde60429ad7aed6315374b6e7d",
      "candidate_info": {
        "commit_hash": "c280f36dbc6c7ffde60429ad7aed6315374b6e7d",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/c280f36dbc6c7ffde60429ad7aed6315374b6e7d",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Cover check for memory manager completeness",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <gtest/gtest.h>",
          "25: #include <uriparser/Uri.h>",
          "28: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include \"../src/UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: TEST(FailingMemoryManagerSuite, AddBaseUriExMm) {",
          "134:  UriUriA absoluteDest;",
          "135:  UriUriA relativeSource = parse(\"foo\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: TEST(MiscMemoryManagerSuite, MemoryManagerIsComplete) {",
          "135:  UriUriA uri = parse(\"whatever\");",
          "136:  UriMemoryManager memory;",
          "138:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "139:  memory.malloc = NULL;",
          "140:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory),",
          "141:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "143:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "144:  memory.calloc = NULL;",
          "145:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory),",
          "146:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "148:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "149:  memory.realloc = NULL;",
          "150:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory),",
          "151:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "153:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "154:  memory.reallocarray = NULL;",
          "155:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory),",
          "156:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "158:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "159:  memory.free = NULL;",
          "160:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory),",
          "161:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "163:  memcpy(&memory, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "164:  ASSERT_EQ(uriFreeUriMembersMmA(&uri, &memory), URI_SUCCESS);",
          "165: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cf01170a1305d7f63505263fd6b269dd65577e2",
      "candidate_info": {
        "commit_hash": "7cf01170a1305d7f63505263fd6b269dd65577e2",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/7cf01170a1305d7f63505263fd6b269dd65577e2",
        "files": [
          "include/uriparser/UriBase.h",
          "src/UriMemory.c",
          "src/UriMemory.h",
          "src/UriShorten.c"
        ],
        "message": "Check memory managers for completeness",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h",
          "src/UriMemory.c||src/UriMemory.c",
          "src/UriMemory.h||src/UriMemory.h",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     uriDefaultMalloc,",
          "114:     uriDefaultCalloc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: UriBool uriMemoryManagerIsComplete(const UriMemoryManager * memory) {",
          "113:     return (memory",
          "114:             && memory->malloc",
          "115:             && memory->calloc",
          "116:             && memory->realloc",
          "117:             && memory->reallocarray",
          "118:             && memory->free) ? URI_TRUE : URI_FALSE;",
          "119: }",
          "",
          "---------------"
        ],
        "src/UriMemory.h||src/UriMemory.h": [
          "File: src/UriMemory.h -> src/UriMemory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: extern UriMemoryManager defaultMemoryManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #define URI_CHECK_MEMORY_MANAGER(memory)  \\",
          "47:  do { \\",
          "48:   if (memory == NULL) { \\",
          "49:    memory = &defaultMemoryManager; \\",
          "50:   } else { \\",
          "51:    if (uriMemoryManagerIsComplete(memory) != URI_TRUE) { \\",
          "52:     return URI_ERROR_MEMORY_MANAGER_INCOMPLETE; \\",
          "53:    } \\",
          "54:   } \\",
          "55:  } while (0)",
          "61: UriBool uriMemoryManagerIsComplete(const UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   const URI_TYPE(Uri) * absSource,",
          "298:   const URI_TYPE(Uri) * absBase,",
          "299:   UriBool domainRootMode) {",
          "303: }",
          "",
          "[Removed Lines]",
          "300:  UriMemoryManager * const memory = &defaultMemoryManager;",
          "301:  return URI_FUNC(RemoveBaseUriMm)(dest, absSource, absBase, domainRootMode,",
          "302:    memory);",
          "",
          "[Added Lines]",
          "300:  return URI_FUNC(RemoveBaseUriMm)(dest, absSource, absBase,",
          "301:    domainRootMode, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   const URI_TYPE(Uri) * absSource,",
          "309:   const URI_TYPE(Uri) * absBase,",
          "310:   UriBool domainRootMode, UriMemoryManager * memory) {",
          "313:    absBase, domainRootMode, memory);",
          "314:  if ((res != URI_SUCCESS) && (dest != NULL)) {",
          "315:   URI_FUNC(FreeUriMembers)(dest);",
          "",
          "[Removed Lines]",
          "312:  const int res = URI_FUNC(RemoveBaseUriImpl)(dest, absSource,",
          "",
          "[Added Lines]",
          "310:  int res;",
          "314:  res = URI_FUNC(RemoveBaseUriImpl)(dest, absSource,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5406d615622b797f9dfae463ab3d7c7de7a3f2a",
      "candidate_info": {
        "commit_hash": "a5406d615622b797f9dfae463ab3d7c7de7a3f2a",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a5406d615622b797f9dfae463ab3d7c7de7a3f2a",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to LowercaseMalloc",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: static void URI_FUNC(LowercaseInplace)(const URI_CHAR * first,",
          "100:   const URI_CHAR * afterLast);",
          "101: static UriBool URI_FUNC(LowercaseMalloc)(const URI_CHAR ** first,",
          "104: static void URI_FUNC(PreventLeakage)(URI_TYPE(Uri) * uri,",
          "105:   unsigned int revertMask, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "102:   const URI_CHAR ** afterLast);",
          "",
          "[Added Lines]",
          "102:   const URI_CHAR ** afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232: static URI_INLINE UriBool URI_FUNC(LowercaseMalloc)(const URI_CHAR ** first,",
          "235:  int lenInChars;",
          "236:  const int lowerUpperDiff = (_UT('a') - _UT('A'));",
          "237:  URI_CHAR * buffer;",
          "",
          "[Removed Lines]",
          "233:   const URI_CHAR ** afterLast) {",
          "",
          "[Added Lines]",
          "233:   const URI_CHAR ** afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:    if (uri->owner) {",
          "545:     URI_FUNC(LowercaseInplace)(uri->scheme.first, uri->scheme.afterLast);",
          "546:    } else {",
          "548:      URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "549:      return URI_ERROR_MALLOC;",
          "550:     }",
          "",
          "[Removed Lines]",
          "547:     if (!URI_FUNC(LowercaseMalloc)(&(uri->scheme.first), &(uri->scheme.afterLast))) {",
          "",
          "[Added Lines]",
          "546:     if (!URI_FUNC(LowercaseMalloc)(&(uri->scheme.first), &(uri->scheme.afterLast), memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "561:        uri->hostData.ipFuture.afterLast);",
          "562:     } else {",
          "563:      if (!URI_FUNC(LowercaseMalloc)(&(uri->hostData.ipFuture.first),",
          "565:       URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "566:       return URI_ERROR_MALLOC;",
          "567:      }",
          "",
          "[Removed Lines]",
          "564:        &(uri->hostData.ipFuture.afterLast))) {",
          "",
          "[Added Lines]",
          "563:        &(uri->hostData.ipFuture.afterLast), memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "314443779f4aa5652a7bf3245fd342f3923ebe6e",
      "candidate_info": {
        "commit_hash": "314443779f4aa5652a7bf3245fd342f3923ebe6e",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/314443779f4aa5652a7bf3245fd342f3923ebe6e",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to OnExitSegmentNzNcOrScheme2",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "192: static UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "194: static void URI_FUNC(OnExitPartHelperTwo)(URI_TYPE(ParserState) * state);",
          "196: static void URI_FUNC(ResetParserStateExceptUri)(URI_TYPE(ParserState) * state);",
          "",
          "[Removed Lines]",
          "193: static UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "",
          "[Added Lines]",
          "193: static UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1772:  }",
          "",
          "[Removed Lines]",
          "1768: static URI_INLINE UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "",
          "[Added Lines]",
          "1768: static URI_INLINE UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(",
          "1769:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1770:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1806:  if (first >= afterLast) {",
          "1808:    URI_FUNC(StopMalloc)(state);",
          "1809:    return NULL;",
          "1810:   }",
          "",
          "[Removed Lines]",
          "1807:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first)) {",
          "",
          "[Added Lines]",
          "1808:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1881:   }",
          "1883:  default:",
          "1885:    URI_FUNC(StopMalloc)(state);",
          "1886:    return NULL;",
          "1887:   }",
          "",
          "[Removed Lines]",
          "1884:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first)) {",
          "",
          "[Added Lines]",
          "1885:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first, memory)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}