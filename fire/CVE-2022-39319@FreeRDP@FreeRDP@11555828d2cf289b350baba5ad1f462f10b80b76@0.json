{
  "cve_id": "CVE-2022-39319",
  "cve_desc": "FreeRDP is a free remote desktop protocol library and clients. Affected versions of FreeRDP are missing input length validation in the `urbdrc` channel. A malicious server can trick a FreeRDP based client to read out of bound data and send it back to the server. This issue has been addressed in version 2.9.0 and all users are advised to upgrade. Users unable to upgrade should not use the `/usb` redirection switch.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "11555828d2cf289b350baba5ad1f462f10b80b76",
  "patch_info": {
    "commit_hash": "11555828d2cf289b350baba5ad1f462f10b80b76",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/11555828d2cf289b350baba5ad1f462f10b80b76",
    "files": [
      "channels/urbdrc/client/data_transfer.c"
    ],
    "message": "Fixed missing input buffer length check in urbdrc\n\n(cherry picked from commit 497df00f741dd4fc89292aaef2db7368aee45d0d)",
    "before_after_code_files": [
      "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
    ]
  },
  "patch_diff": {
    "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
      "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:  Stream_Read_UINT32(s, OutputBufferSize);",
      "249:  Stream_Read_UINT32(s, RequestId);",
      "250:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
      "251:  out = urb_create_iocompletion(InterfaceId, MessageId, RequestId, OutputBufferSize + 4);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:  if (OutputBufferSize > UINT32_MAX - 4)",
      "252:   return ERROR_INVALID_DATA;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "727:  Stream_Read_UINT32(s, OutputBufferSize);",
      "728:  EndpointAddress = (PipeHandle & 0x000000ff);",
      "730:  return pdev->bulk_or_interrupt_transfer(",
      "731:      pdev, callback, MessageId, RequestId, EndpointAddress, TransferFlags, noAck,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "734:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
      "735:  {",
      "736:   if (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))",
      "737:   {",
      "738:    return ERROR_INVALID_DATA;",
      "739:   }",
      "740:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "810:  packetDescriptorData = Stream_Pointer(s);",
      "811:  Stream_Seek(s, NumberOfPackets * 12);",
      "812:  Stream_Read_UINT32(s, OutputBufferSize);",
      "813:  return pdev->isoch_transfer(",
      "814:      pdev, callback, MessageId, RequestId, EndpointAddress, TransferFlags, StartFrame,",
      "815:      ErrorCount, noAck, packetDescriptorData, NumberOfPackets, OutputBufferSize,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "827:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
      "828:  {",
      "829:   if (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))",
      "830:    return ERROR_INVALID_DATA;",
      "831:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff82ae84342f68afc37f289a164d65ee3daefe97",
      "candidate_info": {
        "commit_hash": "ff82ae84342f68afc37f289a164d65ee3daefe97",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ff82ae84342f68afc37f289a164d65ee3daefe97",
        "files": [
          "channels/urbdrc/client/data_transfer.c"
        ],
        "message": "Added missing length check in urb_control_transfer\n\n(cherry picked from commit ce838e2477cb8173ea5e98f35ad55ff41ea5117d)",
        "before_after_code_files": [
          "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/8381"
        ],
        "olp_code_files": {
          "patch": [
            "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
          ],
          "candidate": [
            "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
          "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683:  buffer = Stream_Pointer(out);",
          "685:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "686:   Stream_Copy(s, out, OutputBufferSize);",
          "689:  if (!pdev->control_transfer(pdev, RequestId, EndpointAddress, TransferFlags, bmRequestType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:  {",
          "687:   if (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))",
          "688:    return ERROR_INVALID_DATA;",
          "690:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e865c24efc40ebc52e75979c94cdd4ee2c1495b0",
      "candidate_info": {
        "commit_hash": "e865c24efc40ebc52e75979c94cdd4ee2c1495b0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e865c24efc40ebc52e75979c94cdd4ee2c1495b0",
        "files": [
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Added missing length checks in zgfx_decompress_segment\n\n(cherry picked from commit 64716b335858109d14f27b51acc4c4d71a92a816)",
        "before_after_code_files": [
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/8381"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:  BYTE* pbSegment;",
          "231:  size_t cbSegment;",
          "234:   return FALSE;",
          "236:  cbSegment = segmentSize - 1;",
          "240:   return FALSE;",
          "243:  zgfx->OutputCount = 0;",
          "244:  pbSegment = Stream_Pointer(stream);",
          "247:  if (!(flags & PACKET_COMPRESSED))",
          "248:  {",
          "",
          "[Removed Lines]",
          "233:  if (!zgfx || !stream)",
          "238:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
          "239:      (segmentSize > UINT32_MAX))",
          "245:  Stream_Seek(stream, cbSegment);",
          "",
          "[Added Lines]",
          "233:  if (!zgfx || !stream || (segmentSize < 2))",
          "238:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize > UINT32_MAX))",
          "244:  if (!Stream_SafeSeek(stream, cbSegment))",
          "245:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "347:        return FALSE;",
          "349:       CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent,",
          "350:                  count);",
          "351:       zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:       if (count > zgfx->cBitsRemaining / 8)",
          "350:        return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5101fbbba36d05a7c6a0ca72db7491036c8ccad7",
      "candidate_info": {
        "commit_hash": "5101fbbba36d05a7c6a0ca72db7491036c8ccad7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5101fbbba36d05a7c6a0ca72db7491036c8ccad7",
        "files": [
          "winpr/include/winpr/string.h",
          "winpr/libwinpr/crt/string.c"
        ],
        "message": "Added function _wcsncmp\n\n* Compare WCHAR strings up to n characters\n\n(cherry picked from commit 8178ed26a459356ece17414c6e871a7e0735a4ec)",
        "before_after_code_files": [
          "winpr/include/winpr/string.h||winpr/include/winpr/string.h",
          "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/8381"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/string.h||winpr/include/winpr/string.h": [
          "File: winpr/include/winpr/string.h -> winpr/include/winpr/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  WINPR_API int _strnicmp(const char* string1, const char* string2, size_t count);",
          "62:  WINPR_API int _wcscmp(const WCHAR* string1, const WCHAR* string2);",
          "64:  WINPR_API size_t _wcslen(const WCHAR* str);",
          "65:  WINPR_API size_t _wcsnlen(const WCHAR* str, size_t maxNumberOfElements);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  WINPR_API int _wcsncmp(const WCHAR* string1, const WCHAR* string2, size_t count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: #else",
          "75: #define _wcscmp wcscmp",
          "76: #define _wcslen wcslen",
          "77: #define _wcsnlen wcsnlen",
          "78: #define _wcschr wcschr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #define _wcsncmp wcsncmp",
          "",
          "---------------"
        ],
        "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c": [
          "File: winpr/libwinpr/crt/string.c -> winpr/libwinpr/crt/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:  Data_Read_UINT16(string1, value1);",
          "109:  Data_Read_UINT16(string2, value2);",
          "111: }",
          "",
          "[Removed Lines]",
          "110:  return value1 - value2;",
          "",
          "[Added Lines]",
          "110:  return (int)value1 - value2;",
          "111: }",
          "113: int _wcsncmp(const WCHAR* string1, const WCHAR* string2, size_t count)",
          "114: {",
          "115:  for (size_t x = 0; x < count; x++)",
          "116:  {",
          "117:   const WCHAR a = string1[x];",
          "118:   const WCHAR b = string2[x];",
          "120:   if (a != b)",
          "121:    return (int)a - b;",
          "122:  }",
          "123:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a62aba0caba88775ceb24211feb8eb319c034c1",
      "candidate_info": {
        "commit_hash": "0a62aba0caba88775ceb24211feb8eb319c034c1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a62aba0caba88775ceb24211feb8eb319c034c1",
        "files": [
          "winpr/include/winpr/string.h",
          "winpr/libwinpr/crt/string.c"
        ],
        "message": "[winpr, crt] Added wcsstr implementation\n\n(cherry picked from commit 6c034ba6117a4efc9266e845fe9a9a92ed4ee61d)",
        "before_after_code_files": [
          "winpr/include/winpr/string.h||winpr/include/winpr/string.h",
          "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/8381"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/include/winpr/string.h||winpr/include/winpr/string.h": [
          "File: winpr/include/winpr/string.h -> winpr/include/winpr/string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  WINPR_API size_t _wcslen(const WCHAR* str);",
          "66:  WINPR_API size_t _wcsnlen(const WCHAR* str, size_t maxNumberOfElements);",
          "68:  WINPR_API WCHAR* _wcschr(const WCHAR* str, WCHAR c);",
          "69:  WINPR_API WCHAR* _wcsrchr(const WCHAR* str, WCHAR c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  WINPR_API WCHAR* _wcsstr(const WCHAR* str, const WCHAR* strSearch);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: #define _wcsncmp wcsncmp",
          "78: #define _wcslen wcslen",
          "79: #define _wcsnlen wcsnlen",
          "80: #define _wcschr wcschr",
          "81: #define _wcsrchr wcsrchr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: #define _wcsstr wcsstr",
          "",
          "---------------"
        ],
        "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c": [
          "File: winpr/libwinpr/crt/string.c -> winpr/libwinpr/crt/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  return x;",
          "165: }",
          "169: WCHAR* _wcschr(const WCHAR* str, WCHAR c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: WCHAR* _wcsstr(const WCHAR* str, const WCHAR* strSearch)",
          "170: {",
          "171:  WINPR_ASSERT(str);",
          "172:  WINPR_ASSERT(strSearch);",
          "174:  if (strSearch[0] == '\\0')",
          "175:   return str;",
          "177:  const size_t searchLen = _wcslen(strSearch);",
          "178:  while (*str)",
          "179:  {",
          "180:   if (_wcsncmp(str, strSearch, searchLen) == 0)",
          "181:    return str;",
          "182:   str++;",
          "183:  }",
          "184:  return NULL;",
          "185: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ac3a2ce9e965b334a446bc225ae85acb493e06e",
      "candidate_info": {
        "commit_hash": "3ac3a2ce9e965b334a446bc225ae85acb493e06e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3ac3a2ce9e965b334a446bc225ae85acb493e06e",
        "files": [
          "winpr/libwinpr/crt/string.c"
        ],
        "message": "[winpr, crt] Fix wcs*cmp and wcs*len checks\n\n(cherry picked from commit b60fac1a0470fe83e8d0b448f0fd7e9e6d6a0f96)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/8381"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/string.c||winpr/libwinpr/crt/string.c": [
          "File: winpr/libwinpr/crt/string.c -> winpr/libwinpr/crt/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <wctype.h>",
          "28: #include <winpr/crt.h>",
          "29: #include <winpr/endian.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <winpr/assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: int _wcscmp(const WCHAR* string1, const WCHAR* string2)",
          "99: {",
          "103:  {",
          "106:  }",
          "111: }",
          "113: int _wcsncmp(const WCHAR* string1, const WCHAR* string2, size_t count)",
          "114: {",
          "115:  for (size_t x = 0; x < count; x++)",
          "116:  {",
          "117:   const WCHAR a = string1[x];",
          "",
          "[Removed Lines]",
          "100:  WCHAR value1, value2;",
          "102:  while (*string1 && (*string1 == *string2))",
          "104:   string1++;",
          "105:   string2++;",
          "108:  Data_Read_UINT16(string1, value1);",
          "109:  Data_Read_UINT16(string2, value2);",
          "110:  return (int)value1 - value2;",
          "",
          "[Added Lines]",
          "101:  WINPR_ASSERT(string1);",
          "102:  WINPR_ASSERT(string2);",
          "104:  while (TRUE)",
          "106:   const WCHAR w1 = *string1++;",
          "107:   const WCHAR w2 = *string2++;",
          "109:   if (w1 != w2)",
          "110:    return (int)w1 - w2;",
          "111:   else if ((w1 == '\\0') || (w2 == '\\0'))",
          "112:    return (int)w1 - w2;",
          "115:  return 0;",
          "120:  WINPR_ASSERT(string1);",
          "121:  WINPR_ASSERT(string2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:   if (a != b)",
          "121:    return (int)a - b;",
          "122:  }",
          "123:  return 0;",
          "124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   else if ((a == '\\0') || (b == '\\0'))",
          "131:    return (int)a - b;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129: {",
          "130:  const WCHAR* p = (const WCHAR*)str;",
          "135:  while (*p)",
          "136:   p++;",
          "",
          "[Removed Lines]",
          "132:  if (!p)",
          "133:   return 0;",
          "",
          "[Added Lines]",
          "142:  WINPR_ASSERT(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144: {",
          "145:  size_t x;",
          "150:  for (x = 0; x < max; x++)",
          "151:  {",
          "",
          "[Removed Lines]",
          "147:  if (!str)",
          "148:   return 0;",
          "",
          "[Added Lines]",
          "156:  WINPR_ASSERT(str);",
          "",
          "---------------"
        ]
      }
    }
  ]
}