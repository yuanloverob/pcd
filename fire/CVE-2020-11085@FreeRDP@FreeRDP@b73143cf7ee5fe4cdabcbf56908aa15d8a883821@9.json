{
  "cve_id": "CVE-2020-11085",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
  "patch_info": {
    "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "files": [
      "channels/cliprdr/cliprdr_common.c"
    ],
    "message": "Fixed oob read in cliprdr_read_format_list",
    "before_after_code_files": [
      "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
    ]
  },
  "patch_diff": {
    "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
      "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  int formatNameLength;",
      "401:  char* szFormatName;",
      "402:  WCHAR* wszFormatName;",
      "404:  CLIPRDR_FORMAT* formats = NULL;",
      "405:  UINT error = CHANNEL_RC_OK;",
      "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
      "409:  index = 0;",
      "410:  formatList->numFormats = 0;",
      "413:  if (!formatList->dataLen)",
      "414:  {",
      "418:  }",
      "419:  else if (!useLongFormatNames)",
      "420:  {",
      "424:   {",
      "426:    return ERROR_INTERNAL_ERROR;",
      "427:   }",
      "",
      "[Removed Lines]",
      "403:  UINT32 dataLen = formatList->dataLen;",
      "411:  position = Stream_GetPosition(s);",
      "416:   formatList->formats = NULL;",
      "417:   formatList->numFormats = 0;",
      "421:   formatList->numFormats = (dataLen / 36);",
      "423:   if ((formatList->numFormats * 36) != dataLen)",
      "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
      "",
      "[Added Lines]",
      "403:  wStream sub1, sub2;",
      "411:  formatList->formats = NULL;",
      "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
      "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
      "416:   return ERROR_INVALID_DATA;",
      "423:   const size_t cap = Stream_Capacity(&sub1);",
      "424:   formatList->numFormats = (cap / 36);",
      "426:   if ((formatList->numFormats * 36) != cap)",
      "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "438:   formatList->formats = formats;",
      "441:   {",
      "445:    formats[index].formatName = NULL;",
      "",
      "[Removed Lines]",
      "440:   while (dataLen)",
      "443:    dataLen -= 4;",
      "",
      "[Added Lines]",
      "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "455:    if (asciiNames)",
      "456:    {",
      "459:     if (szFormatName[0])",
      "460:     {",
      "",
      "[Removed Lines]",
      "457:     szFormatName = (char*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
      "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "459:    if (!Stream_SafeSeek(&sub1, 32))",
      "460:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    }",
      "473:    else",
      "474:    {",
      "477:     if (wszFormatName[0])",
      "478:     {",
      "",
      "[Removed Lines]",
      "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "489:     }",
      "490:    }",
      "494:    index++;",
      "495:   }",
      "496:  }",
      "497:  else",
      "498:  {",
      "500:   {",
      "514:    formatList->numFormats++;",
      "515:   }",
      "520:   if (formatList->numFormats)",
      "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
      "",
      "[Removed Lines]",
      "492:    Stream_Seek(s, 32);",
      "493:    dataLen -= 32;",
      "499:   while (dataLen)",
      "502:    dataLen -= 4;",
      "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "506:    if (!wszFormatName[0])",
      "507:     formatNameLength = 0;",
      "508:    else",
      "509:     formatNameLength = _wcslen(wszFormatName);",
      "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "512:    dataLen -= ((formatNameLength + 1) * 2);",
      "517:   dataLen = formatList->dataLen;",
      "518:   Stream_SetPosition(s, position);",
      "",
      "[Added Lines]",
      "499:   sub2 = sub1;",
      "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
      "502:    size_t rest;",
      "504:     goto error_out;",
      "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "507:    rest = Stream_GetRemainingLength(&sub1);",
      "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
      "511:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:   formatList->formats = formats;",
      "532:   {",
      "536:    formats[index].formatName = NULL;",
      "545:    if (formatNameLength)",
      "546:    {",
      "549:     {",
      "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
      "551:      error = ERROR_INTERNAL_ERROR;",
      "",
      "[Removed Lines]",
      "531:   while (dataLen)",
      "534:    dataLen -= 4;",
      "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "540:    if (!wszFormatName[0])",
      "541:     formatNameLength = 0;",
      "542:    else",
      "543:     formatNameLength = _wcslen(wszFormatName);",
      "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
      "548:                            0, NULL, NULL) < 1)",
      "",
      "[Added Lines]",
      "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
      "528:    size_t rest;",
      "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
      "534:    rest = Stream_GetRemainingLength(&sub2);",
      "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
      "537:     goto error_out;",
      "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
      "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "553:     }",
      "554:    }",
      "559:    index++;",
      "560:   }",
      "561:  }",
      "",
      "[Removed Lines]",
      "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "557:    dataLen -= ((formatNameLength + 1) * 2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "582:   }",
      "584:   free(formatList->formats);",
      "585:  }",
      "586: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "576:   formatList->formats = NULL;",
      "577:   formatList->numFormats = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3a1a6683baefd41848d9004bf8f39c7439a5cd6",
      "candidate_info": {
        "commit_hash": "b3a1a6683baefd41848d9004bf8f39c7439a5cd6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b3a1a6683baefd41848d9004bf8f39c7439a5cd6",
        "files": [
          "winpr/libwinpr/crt/unicode.c"
        ],
        "message": "Silence valgrind in unicode conversion functions\n\nOnly check destination buffer for NULL if length argument did not\nalready indicate the buffer needs to be allocated.\n\n(cherry picked from commit ebe223e7a4ba0131b55e0c8e8baa98deb3f89c4b)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/unicode.c||winpr/libwinpr/crt/unicode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/unicode.c||winpr/libwinpr/crt/unicode.c": [
          "File: winpr/libwinpr/crt/unicode.c -> winpr/libwinpr/crt/unicode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:   cchWideChar = MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, NULL, 0);",
          "404:   allocate = TRUE;",
          "405:  }",
          "407:  if (cchWideChar < 1)",
          "408:   return 0;",
          "413:  if (allocate)",
          "414:  {",
          "",
          "[Removed Lines]",
          "410:  if (!(*lpWideCharStr))",
          "411:   allocate = TRUE;",
          "",
          "[Added Lines]",
          "406:  else if (!(*lpWideCharStr))",
          "407:   allocate = TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:       WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, NULL, 0, NULL, NULL);",
          "474:   allocate = TRUE;",
          "475:  }",
          "477:  if (cbMultiByte < 1)",
          "478:   return 0;",
          "483:  if (allocate)",
          "484:  {",
          "",
          "[Removed Lines]",
          "480:  if (!(*lpMultiByteStr))",
          "481:   allocate = TRUE;",
          "",
          "[Added Lines]",
          "475:  else if (!(*lpMultiByteStr))",
          "476:   allocate = TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63fbc976be72b76988afffdb1febe1666ef3b263",
      "candidate_info": {
        "commit_hash": "63fbc976be72b76988afffdb1febe1666ef3b263",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/63fbc976be72b76988afffdb1febe1666ef3b263",
        "files": [
          "include/freerdp/api.h"
        ],
        "message": "Unified INLINE definition",
        "before_after_code_files": [
          "include/freerdp/api.h||include/freerdp/api.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/freerdp/api.h||include/freerdp/api.h": [
          "File: include/freerdp/api.h -> include/freerdp/api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #ifndef FREERDP_API_H",
          "21: #define FREERDP_API_H",
          "23: #include <winpr/platform.h>",
          "25: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <winpr/winpr.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #define FREERDP_CC",
          "29: #endif",
          "37: #ifdef _WIN32",
          "38: #define __func__ __FUNCTION__",
          "39: #endif",
          "",
          "[Removed Lines]",
          "31: #ifdef _WIN32",
          "32: #define INLINE __inline",
          "33: #else",
          "34: #define INLINE inline",
          "35: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c94b425e694004296bb22f1eb1b660a8f8d94f8",
      "candidate_info": {
        "commit_hash": "7c94b425e694004296bb22f1eb1b660a8f8d94f8",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/7c94b425e694004296bb22f1eb1b660a8f8d94f8",
        "files": [
          "channels/rdpsnd/client/rdpsnd_main.c"
        ],
        "message": "Fixed oob read in rdpsnd_recv_wave2_pdu\n\nCheck format index before using it.\nThanks to hac425 CVE-2020-11041",
        "before_after_code_files": [
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:  if (Stream_GetRemainingLength(s) < size)",
          "547:   return ERROR_BAD_LENGTH;",
          "549:  data = Stream_Pointer(s);",
          "550:  format = &rdpsnd->ClientFormats[rdpsnd->wCurrentFormatNo];",
          "551:  WLog_Print(rdpsnd->log, WLOG_DEBUG,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:  if (rdpsnd->wCurrentFormatNo >= rdpsnd->NumberOfClientFormats)",
          "550:   return ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "621:  Stream_Read_UINT8(s, rdpsnd->cBlockNo);",
          "623:  Stream_Read_UINT32(s, dwAudioTimeStamp);",
          "625:  format = &rdpsnd->ClientFormats[wFormatNo];",
          "626:  rdpsnd->wArrivalTime = GetTickCount64();",
          "627:  WLog_Print(rdpsnd->log, WLOG_DEBUG,",
          "628:             \"%s Wave2PDU: cBlockNo: %\" PRIu8 \" wFormatNo: %\" PRIu16 \", align=%hu\",",
          "",
          "[Removed Lines]",
          "624:  rdpsnd->waveDataSize = BodySize - 12;",
          "",
          "[Added Lines]",
          "627:  if (wFormatNo >= rdpsnd->NumberOfClientFormats)",
          "628:   return ERROR_INVALID_DATA;",
          "630:  rdpsnd->waveDataSize = BodySize - 12;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63730ab3493cbe438c1d67c15d1108af09e7e0db",
      "candidate_info": {
        "commit_hash": "63730ab3493cbe438c1d67c15d1108af09e7e0db",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/63730ab3493cbe438c1d67c15d1108af09e7e0db",
        "files": [
          "client/common/file.c"
        ],
        "message": "Fixed warning messages for RDP file options\n\nnetworkautodetect and bandwidthautodetect are both boolean options\nwhich must match each other. Added adequate warnings.\n\n(cherry picked from commit 5f5bf10703276be3ddb0c5d184e078c0a6a857bb)",
        "before_after_code_files": [
          "client/common/file.c||client/common/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/common/file.c||client/common/file.c": [
          "File: client/common/file.c -> client/common/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1614:  {",
          "1615:   if (file->BandwidthAutoDetect != 0)",
          "1616:   {",
          "1617:    if (!freerdp_set_connection_type(settings, CONNECTION_TYPE_AUTODETECT))",
          "1618:     return FALSE;",
          "1619:    setDefaultConnectionType = FALSE;",
          "1620:   }",
          "1621:   if (!freerdp_settings_set_bool(settings, FreeRDP_NetworkAutoDetect,",
          "1623:    return FALSE;",
          "1624:  }",
          "",
          "[Removed Lines]",
          "1622:                                  file->BandwidthAutoDetect != 0))",
          "",
          "[Added Lines]",
          "1617:    if ((~file->NetworkAutoDetect) && (file->NetworkAutoDetect != 0))",
          "1618:    {",
          "1619:     WLog_WARN(TAG,",
          "1620:               \"Got networkautodetect:i:%\" PRIu32 \" and bandwidthautodetect:i:%\" PRIu32",
          "1621:               \". Correcting to networkautodetect:i:0\",",
          "1622:               file->NetworkAutoDetect, file->BandwidthAutoDetect);",
          "1623:     WLog_WARN(TAG,",
          "1624:               \"Add networkautodetect:i:0 to your RDP file to eliminate this warning.\");",
          "1625:    }",
          "1632:                                  (file->BandwidthAutoDetect != 0) ||",
          "1633:                                      (file->NetworkAutoDetect == 0)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:  {",
          "1628:   if (file->NetworkAutoDetect == 0)",
          "1629:   {",
          "1631:    {",
          "1632:     WLog_WARN(TAG,",
          "1633:               \"Got networkautodetect:i:%\" PRIu32 \" and bandwidthautodetect:i:%\" PRIu32",
          "1641:    }",
          "1643:    if (!freerdp_set_connection_type(settings, CONNECTION_TYPE_AUTODETECT))",
          "1644:     return FALSE;",
          "1645:    setDefaultConnectionType = FALSE;",
          "1646:   }",
          "1647:   if (!freerdp_settings_set_bool(settings, FreeRDP_NetworkAutoDetect,",
          "1649:    return FALSE;",
          "1650:  }",
          "",
          "[Removed Lines]",
          "1630:    if (file->BandwidthAutoDetect != CONNECTION_TYPE_AUTODETECT)",
          "1634:               \". Correcting to bandwidthautodetect:i:%\" PRIu32,",
          "1635:               file->NetworkAutoDetect, file->BandwidthAutoDetect,",
          "1636:               CONNECTION_TYPE_AUTODETECT);",
          "1637:     WLog_WARN(TAG,",
          "1638:               \"Add bandwidthautodetect:i:%\" PRIu32",
          "1639:               \" to your RDP file to eliminate this warning.\",",
          "1640:               CONNECTION_TYPE_AUTODETECT);",
          "1648:                                  file->NetworkAutoDetect == 0))",
          "",
          "[Added Lines]",
          "1641:    if ((~file->BandwidthAutoDetect) && (file->BandwidthAutoDetect == 0))",
          "1645:               \". Correcting to bandwidthautodetect:i:1\",",
          "1646:               file->NetworkAutoDetect, file->BandwidthAutoDetect);",
          "1647:     WLog_WARN(",
          "1648:         TAG, \"Add bandwidthautodetect:i:1 to your RDP file to eliminate this warning.\");",
          "1657:                                  (file->BandwidthAutoDetect != 0) ||",
          "1658:                                      (file->NetworkAutoDetect == 0)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32f705e59700634757b49f562108757855761349",
      "candidate_info": {
        "commit_hash": "32f705e59700634757b49f562108757855761349",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/32f705e59700634757b49f562108757855761349",
        "files": [
          "libfreerdp/codec/clear.c"
        ],
        "message": "Fixed oob read in clear_decompress_subcode_rlex\n\nFixed length checks before stream read.\nThanks to hac425 CVE-2020-11040",
        "before_after_code_files": [
          "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c": [
          "File: libfreerdp/codec/clear.c -> libfreerdp/codec/clear.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  UINT32 i;",
          "131:  UINT32 pixelCount;",
          "132:  UINT32 bitmapDataOffset;",
          "134:  UINT32 numBits;",
          "135:  BYTE startIndex;",
          "136:  BYTE stopIndex;",
          "",
          "[Removed Lines]",
          "133:  UINT32 pixelIndex;",
          "",
          "[Added Lines]",
          "133:  size_t pixelIndex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   return FALSE;",
          "147:  }",
          "149:  Stream_Read_UINT8(s, paletteCount);",
          "150:  bitmapDataOffset = 1 + (paletteCount * 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  if (Stream_GetRemainingLength(s) < 1)",
          "150:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:   return FALSE;",
          "156:  }",
          "158:  for (i = 0; i < paletteCount; i++)",
          "159:  {",
          "160:   BYTE r, g, b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  if (Stream_GetRemainingLength(s) < 3ULL * paletteCount)",
          "161:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:  if (pixelIndex != pixelCount)",
          "301:  {",
          "303:   return FALSE;",
          "304:  }",
          "",
          "[Removed Lines]",
          "302:   WLog_ERR(TAG, \"pixelIndex %\" PRIu32 \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "[Added Lines]",
          "307:   WLog_ERR(TAG, \"pixelIndex %\" PRIdz \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "---------------"
        ]
      }
    }
  ]
}