{
  "cve_id": "CVE-2022-29209",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the macros that TensorFlow uses for writing assertions (e.g., `CHECK_LT`, `CHECK_GT`, etc.) have an incorrect logic when comparing `size_t` and `int` values. Due to type conversion rules, several of the macros would trigger incorrectly. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "b917181c29b50cb83399ba41f4d938dc369109a1",
  "patch_info": {
    "commit_hash": "b917181c29b50cb83399ba41f4d938dc369109a1",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1",
    "files": [
      "tensorflow/core/platform/default/logging.h"
    ],
    "message": "Merge pull request #55730 from graphcore:awf/issue-55530\n\nPiperOrigin-RevId: 445252025",
    "before_after_code_files": [
      "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
    ]
  },
  "patch_diff": {
    "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h": [
      "File: tensorflow/core/platform/default/logging.h -> tensorflow/core/platform/default/logging.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "86: struct Voidifier {",
      "87:   template <typename T>",
      "89: };",
      "",
      "[Removed Lines]",
      "88:   void operator&(const T&)const {}",
      "",
      "[Added Lines]",
      "88:   void operator&(const T&) const {}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "364:   }                                                                       \\",
      "365:   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\",
      "366:     return name##Impl<int, int>(v1, v2, exprtext);                        \\",
      "382:   }",
      "391: TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)",
      "392: TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)",
      "395: #undef TF_DEFINE_CHECK_OP_IMPL",
      "",
      "[Removed Lines]",
      "367:   }                                                                       \\",
      "368:   inline string* name##Impl(const size_t v1, const int v2,                \\",
      "369:                             const char* exprtext) {                       \\",
      "370:     if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\",
      "371:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
      "372:     }                                                                     \\",
      "373:     return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\",
      "374:   }                                                                       \\",
      "375:   inline string* name##Impl(const int v1, const size_t v2,                \\",
      "376:                             const char* exprtext) {                       \\",
      "377:     if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\",
      "378:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
      "379:     }                                                                     \\",
      "380:     const size_t uval = (size_t)((unsigned)v2);                           \\",
      "381:     return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\",
      "388: TF_DEFINE_CHECK_OP_IMPL(Check_EQ,",
      "389:                         ==)  // Compilation error with CHECK_EQ(NULL, x)?",
      "390: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.",
      "393: TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)",
      "394: TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)",
      "",
      "[Added Lines]",
      "374: TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)",
      "378: inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {",
      "379:   if (TF_PREDICT_FALSE(v1 < 0))",
      "380:     ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
      "382:   return Check_EQImpl(size_t(v1), v2, exprtext);",
      "383: }",
      "385: inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {",
      "386:   return Check_EQImpl(v2, v1, exprtext);",
      "387: }",
      "389: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)",
      "391: inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {",
      "392:   if (v1 < 0) return NULL;",
      "394:   return Check_NEImpl(size_t(v1), v2, exprtext);",
      "395: }",
      "397: inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {",
      "398:   return Check_NEImpl(v2, v1, exprtext);",
      "399: }",
      "403: inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {",
      "404:   if (v1 <= 0) return NULL;",
      "406:   return Check_LEImpl(size_t(v1), v2, exprtext);",
      "407: }",
      "409: inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {",
      "410:   if (TF_PREDICT_FALSE(v2 < 0))",
      "411:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
      "412:   return Check_LEImpl(v1, size_t(v2), exprtext);",
      "413: }",
      "417: inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {",
      "418:   if (v1 < 0) return NULL;",
      "420:   return Check_LTImpl(size_t(v1), v2, exprtext);",
      "421: }",
      "423: inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {",
      "424:   if (v2 < 0)",
      "425:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
      "426:   return Check_LTImpl(v1, size_t(v2), exprtext);",
      "427: }",
      "430: template <typename T1, typename T2>",
      "431: inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {",
      "432:   return Check_LEImpl(v2, v1, exprtext);",
      "433: }",
      "435: template <typename T1, typename T2>",
      "436: inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {",
      "437:   return Check_LTImpl(v2, v1, exprtext);",
      "438: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee6f9f36befc16f6a5ab2419a0f22ad52ee4ba63",
      "candidate_info": {
        "commit_hash": "ee6f9f36befc16f6a5ab2419a0f22ad52ee4ba63",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ee6f9f36befc16f6a5ab2419a0f22ad52ee4ba63",
        "files": [
          "tensorflow/core/platform/default/logging.h"
        ],
        "message": "Merge pull request #55730 from graphcore:awf/issue-55530\n\nPiperOrigin-RevId: 445252025",
        "before_after_code_files": [
          "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ],
          "candidate": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h": [
          "File: tensorflow/core/platform/default/logging.h -> tensorflow/core/platform/default/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: struct Voidifier {",
          "87:   template <typename T>",
          "89: };",
          "",
          "[Removed Lines]",
          "88:   void operator&(const T&)const {}",
          "",
          "[Added Lines]",
          "88:   void operator&(const T&) const {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   }                                                                       \\",
          "365:   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\",
          "366:     return name##Impl<int, int>(v1, v2, exprtext);                        \\",
          "382:   }",
          "391: TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)",
          "392: TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)",
          "395: #undef TF_DEFINE_CHECK_OP_IMPL",
          "",
          "[Removed Lines]",
          "367:   }                                                                       \\",
          "368:   inline string* name##Impl(const size_t v1, const int v2,                \\",
          "369:                             const char* exprtext) {                       \\",
          "370:     if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\",
          "371:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "372:     }                                                                     \\",
          "373:     return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\",
          "374:   }                                                                       \\",
          "375:   inline string* name##Impl(const int v1, const size_t v2,                \\",
          "376:                             const char* exprtext) {                       \\",
          "377:     if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\",
          "378:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "379:     }                                                                     \\",
          "380:     const size_t uval = (size_t)((unsigned)v2);                           \\",
          "381:     return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\",
          "388: TF_DEFINE_CHECK_OP_IMPL(Check_EQ,",
          "389:                         ==)  // Compilation error with CHECK_EQ(NULL, x)?",
          "390: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.",
          "393: TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)",
          "394: TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)",
          "",
          "[Added Lines]",
          "374: TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)",
          "378: inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {",
          "379:   if (TF_PREDICT_FALSE(v1 < 0))",
          "380:     ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "382:   return Check_EQImpl(size_t(v1), v2, exprtext);",
          "383: }",
          "385: inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {",
          "386:   return Check_EQImpl(v2, v1, exprtext);",
          "387: }",
          "389: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)",
          "391: inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {",
          "392:   if (v1 < 0) return NULL;",
          "394:   return Check_NEImpl(size_t(v1), v2, exprtext);",
          "395: }",
          "397: inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {",
          "398:   return Check_NEImpl(v2, v1, exprtext);",
          "399: }",
          "403: inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {",
          "404:   if (v1 <= 0) return NULL;",
          "406:   return Check_LEImpl(size_t(v1), v2, exprtext);",
          "407: }",
          "409: inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {",
          "410:   if (TF_PREDICT_FALSE(v2 < 0))",
          "411:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "412:   return Check_LEImpl(v1, size_t(v2), exprtext);",
          "413: }",
          "417: inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {",
          "418:   if (v1 < 0) return NULL;",
          "420:   return Check_LTImpl(size_t(v1), v2, exprtext);",
          "421: }",
          "423: inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {",
          "424:   if (v2 < 0)",
          "425:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "426:   return Check_LTImpl(v1, size_t(v2), exprtext);",
          "427: }",
          "430: template <typename T1, typename T2>",
          "431: inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "432:   return Check_LEImpl(v2, v1, exprtext);",
          "433: }",
          "435: template <typename T1, typename T2>",
          "436: inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "437:   return Check_LTImpl(v2, v1, exprtext);",
          "438: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbd98ee7a8006f09d009b185884dc48a93fce7e3",
      "candidate_info": {
        "commit_hash": "bbd98ee7a8006f09d009b185884dc48a93fce7e3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bbd98ee7a8006f09d009b185884dc48a93fce7e3",
        "files": [
          "tensorflow/core/platform/default/logging.h"
        ],
        "message": "Merge pull request #55730 from graphcore:awf/issue-55530\n\nPiperOrigin-RevId: 445252025",
        "before_after_code_files": [
          "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ],
          "candidate": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h": [
          "File: tensorflow/core/platform/default/logging.h -> tensorflow/core/platform/default/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: struct Voidifier {",
          "87:   template <typename T>",
          "89: };",
          "",
          "[Removed Lines]",
          "88:   void operator&(const T&)const {}",
          "",
          "[Added Lines]",
          "88:   void operator&(const T&) const {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   }                                                                       \\",
          "365:   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\",
          "366:     return name##Impl<int, int>(v1, v2, exprtext);                        \\",
          "382:   }",
          "391: TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)",
          "392: TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)",
          "395: #undef TF_DEFINE_CHECK_OP_IMPL",
          "",
          "[Removed Lines]",
          "367:   }                                                                       \\",
          "368:   inline string* name##Impl(const size_t v1, const int v2,                \\",
          "369:                             const char* exprtext) {                       \\",
          "370:     if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\",
          "371:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "372:     }                                                                     \\",
          "373:     return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\",
          "374:   }                                                                       \\",
          "375:   inline string* name##Impl(const int v1, const size_t v2,                \\",
          "376:                             const char* exprtext) {                       \\",
          "377:     if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\",
          "378:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "379:     }                                                                     \\",
          "380:     const size_t uval = (size_t)((unsigned)v2);                           \\",
          "381:     return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\",
          "388: TF_DEFINE_CHECK_OP_IMPL(Check_EQ,",
          "389:                         ==)  // Compilation error with CHECK_EQ(NULL, x)?",
          "390: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.",
          "393: TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)",
          "394: TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)",
          "",
          "[Added Lines]",
          "374: TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)",
          "378: inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {",
          "379:   if (TF_PREDICT_FALSE(v1 < 0))",
          "380:     ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "382:   return Check_EQImpl(size_t(v1), v2, exprtext);",
          "383: }",
          "385: inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {",
          "386:   return Check_EQImpl(v2, v1, exprtext);",
          "387: }",
          "389: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)",
          "391: inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {",
          "392:   if (v1 < 0) return NULL;",
          "394:   return Check_NEImpl(size_t(v1), v2, exprtext);",
          "395: }",
          "397: inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {",
          "398:   return Check_NEImpl(v2, v1, exprtext);",
          "399: }",
          "403: inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {",
          "404:   if (v1 <= 0) return NULL;",
          "406:   return Check_LEImpl(size_t(v1), v2, exprtext);",
          "407: }",
          "409: inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {",
          "410:   if (TF_PREDICT_FALSE(v2 < 0))",
          "411:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "412:   return Check_LEImpl(v1, size_t(v2), exprtext);",
          "413: }",
          "417: inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {",
          "418:   if (v1 < 0) return NULL;",
          "420:   return Check_LTImpl(size_t(v1), v2, exprtext);",
          "421: }",
          "423: inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {",
          "424:   if (v2 < 0)",
          "425:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "426:   return Check_LTImpl(v1, size_t(v2), exprtext);",
          "427: }",
          "430: template <typename T1, typename T2>",
          "431: inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "432:   return Check_LEImpl(v2, v1, exprtext);",
          "433: }",
          "435: template <typename T1, typename T2>",
          "436: inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "437:   return Check_LTImpl(v2, v1, exprtext);",
          "438: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a096245efdc3a4fc0cfad67b96a6cb94931320ac",
      "candidate_info": {
        "commit_hash": "a096245efdc3a4fc0cfad67b96a6cb94931320ac",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a096245efdc3a4fc0cfad67b96a6cb94931320ac",
        "files": [
          "tensorflow/core/platform/default/logging.h"
        ],
        "message": "Merge pull request #55730 from graphcore:awf/issue-55530\n\nPiperOrigin-RevId: 445252025",
        "before_after_code_files": [
          "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ],
          "candidate": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h": [
          "File: tensorflow/core/platform/default/logging.h -> tensorflow/core/platform/default/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: struct Voidifier {",
          "87:   template <typename T>",
          "89: };",
          "",
          "[Removed Lines]",
          "88:   void operator&(const T&)const {}",
          "",
          "[Added Lines]",
          "88:   void operator&(const T&) const {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   }                                                                       \\",
          "365:   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\",
          "366:     return name##Impl<int, int>(v1, v2, exprtext);                        \\",
          "382:   }",
          "391: TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)",
          "392: TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)",
          "395: #undef TF_DEFINE_CHECK_OP_IMPL",
          "",
          "[Removed Lines]",
          "367:   }                                                                       \\",
          "368:   inline string* name##Impl(const size_t v1, const int v2,                \\",
          "369:                             const char* exprtext) {                       \\",
          "370:     if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\",
          "371:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "372:     }                                                                     \\",
          "373:     return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\",
          "374:   }                                                                       \\",
          "375:   inline string* name##Impl(const int v1, const size_t v2,                \\",
          "376:                             const char* exprtext) {                       \\",
          "377:     if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\",
          "378:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "379:     }                                                                     \\",
          "380:     const size_t uval = (size_t)((unsigned)v2);                           \\",
          "381:     return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\",
          "388: TF_DEFINE_CHECK_OP_IMPL(Check_EQ,",
          "389:                         ==)  // Compilation error with CHECK_EQ(NULL, x)?",
          "390: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.",
          "393: TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)",
          "394: TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)",
          "",
          "[Added Lines]",
          "374: TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)",
          "378: inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {",
          "379:   if (TF_PREDICT_FALSE(v1 < 0))",
          "380:     ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "382:   return Check_EQImpl(size_t(v1), v2, exprtext);",
          "383: }",
          "385: inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {",
          "386:   return Check_EQImpl(v2, v1, exprtext);",
          "387: }",
          "389: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)",
          "391: inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {",
          "392:   if (v1 < 0) return NULL;",
          "394:   return Check_NEImpl(size_t(v1), v2, exprtext);",
          "395: }",
          "397: inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {",
          "398:   return Check_NEImpl(v2, v1, exprtext);",
          "399: }",
          "403: inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {",
          "404:   if (v1 <= 0) return NULL;",
          "406:   return Check_LEImpl(size_t(v1), v2, exprtext);",
          "407: }",
          "409: inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {",
          "410:   if (TF_PREDICT_FALSE(v2 < 0))",
          "411:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "412:   return Check_LEImpl(v1, size_t(v2), exprtext);",
          "413: }",
          "417: inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {",
          "418:   if (v1 < 0) return NULL;",
          "420:   return Check_LTImpl(size_t(v1), v2, exprtext);",
          "421: }",
          "423: inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {",
          "424:   if (v2 < 0)",
          "425:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "426:   return Check_LTImpl(v1, size_t(v2), exprtext);",
          "427: }",
          "430: template <typename T1, typename T2>",
          "431: inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "432:   return Check_LEImpl(v2, v1, exprtext);",
          "433: }",
          "435: template <typename T1, typename T2>",
          "436: inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "437:   return Check_LTImpl(v2, v1, exprtext);",
          "438: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac0ab93c5e53186bd246e6d85d6cad9f3824e80c",
      "candidate_info": {
        "commit_hash": "ac0ab93c5e53186bd246e6d85d6cad9f3824e80c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ac0ab93c5e53186bd246e6d85d6cad9f3824e80c",
        "files": [
          "tensorflow/core/platform/default/logging.h"
        ],
        "message": "Merge pull request #55730 from graphcore:awf/issue-55530\n\nPiperOrigin-RevId: 445252025",
        "before_after_code_files": [
          "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ],
          "candidate": [
            "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/default/logging.h||tensorflow/core/platform/default/logging.h": [
          "File: tensorflow/core/platform/default/logging.h -> tensorflow/core/platform/default/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: struct Voidifier {",
          "87:   template <typename T>",
          "89: };",
          "",
          "[Removed Lines]",
          "88:   void operator&(const T&)const {}",
          "",
          "[Added Lines]",
          "88:   void operator&(const T&) const {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   }                                                                       \\",
          "365:   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\",
          "366:     return name##Impl<int, int>(v1, v2, exprtext);                        \\",
          "382:   }",
          "391: TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)",
          "392: TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)",
          "395: #undef TF_DEFINE_CHECK_OP_IMPL",
          "",
          "[Removed Lines]",
          "367:   }                                                                       \\",
          "368:   inline string* name##Impl(const size_t v1, const int v2,                \\",
          "369:                             const char* exprtext) {                       \\",
          "370:     if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\",
          "371:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "372:     }                                                                     \\",
          "373:     return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\",
          "374:   }                                                                       \\",
          "375:   inline string* name##Impl(const int v1, const size_t v2,                \\",
          "376:                             const char* exprtext) {                       \\",
          "377:     if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\",
          "378:       return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\",
          "379:     }                                                                     \\",
          "380:     const size_t uval = (size_t)((unsigned)v2);                           \\",
          "381:     return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\",
          "388: TF_DEFINE_CHECK_OP_IMPL(Check_EQ,",
          "389:                         ==)  // Compilation error with CHECK_EQ(NULL, x)?",
          "390: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.",
          "393: TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)",
          "394: TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)",
          "",
          "[Added Lines]",
          "374: TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)",
          "378: inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {",
          "379:   if (TF_PREDICT_FALSE(v1 < 0))",
          "380:     ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "382:   return Check_EQImpl(size_t(v1), v2, exprtext);",
          "383: }",
          "385: inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {",
          "386:   return Check_EQImpl(v2, v1, exprtext);",
          "387: }",
          "389: TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)",
          "391: inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {",
          "392:   if (v1 < 0) return NULL;",
          "394:   return Check_NEImpl(size_t(v1), v2, exprtext);",
          "395: }",
          "397: inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {",
          "398:   return Check_NEImpl(v2, v1, exprtext);",
          "399: }",
          "403: inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {",
          "404:   if (v1 <= 0) return NULL;",
          "406:   return Check_LEImpl(size_t(v1), v2, exprtext);",
          "407: }",
          "409: inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {",
          "410:   if (TF_PREDICT_FALSE(v2 < 0))",
          "411:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "412:   return Check_LEImpl(v1, size_t(v2), exprtext);",
          "413: }",
          "417: inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {",
          "418:   if (v1 < 0) return NULL;",
          "420:   return Check_LTImpl(size_t(v1), v2, exprtext);",
          "421: }",
          "423: inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {",
          "424:   if (v2 < 0)",
          "425:     return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);",
          "426:   return Check_LTImpl(v1, size_t(v2), exprtext);",
          "427: }",
          "430: template <typename T1, typename T2>",
          "431: inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "432:   return Check_LEImpl(v2, v1, exprtext);",
          "433: }",
          "435: template <typename T1, typename T2>",
          "436: inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {",
          "437:   return Check_LTImpl(v2, v1, exprtext);",
          "438: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}