{
  "cve_id": "CVE-2024-27099",
  "cve_desc": "The uAMQP is a C library for AMQP 1.0 communication to Azure Cloud Services. When processing an incorrect `AMQP_VALUE` failed state, may cause a double free problem. This may cause a RCE. Update submodule with commit 2ca42b6e4e098af2d17e487814a91d05f6ae4987.",
  "repo": "Azure/azure-uamqp-c",
  "patch_hash": "2ca42b6e4e098af2d17e487814a91d05f6ae4987",
  "patch_info": {
    "commit_hash": "2ca42b6e4e098af2d17e487814a91d05f6ae4987",
    "repo": "Azure/azure-uamqp-c",
    "commit_url": "https://github.com/Azure/azure-uamqp-c/commit/2ca42b6e4e098af2d17e487814a91d05f6ae4987",
    "files": [
      "src/link.c",
      "tests/CMakeLists.txt",
      "tests/link_ut/CMakeLists.txt",
      "tests/link_ut/link_ut.c",
      "tests/link_ut/main.c"
    ],
    "message": "Fix potential double free in link.c (#456)\n\n* Fix potential double free in link.c\n\n* Fix unittest\n\n* Add link_attach_succeeds\n\n* Add double-free test\n\n* Fix return value in unit test function\n\n* Address CR comments\n\n* Fix unit tests",
    "before_after_code_files": [
      "src/link.c||src/link.c",
      "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c",
      "tests/link_ut/main.c||tests/link_ut/main.c"
    ]
  },
  "patch_diff": {
    "src/link.c||src/link.c": [
      "File: src/link.c -> src/link.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "404:                     }",
      "405:                 }",
      "406:             }",
      "410:     }",
      "411:     else if (is_transfer_type_by_descriptor(descriptor))",
      "412:     {",
      "",
      "[Removed Lines]",
      "407:         }",
      "409:         flow_destroy(flow_handle);",
      "",
      "[Added Lines]",
      "408:             flow_destroy(flow_handle);",
      "409:         }",
      "",
      "---------------"
    ],
    "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c": [
      "File: tests/link_ut/link_ut.c -> tests/link_ut/link_ut.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #ifdef __cplusplus",
      "5: #include <cstdlib>",
      "6: #include <cstdio>",
      "7: #include <cstdint>",
      "8: #else",
      "9: #include <stdlib.h>",
      "10: #include <string.h>",
      "11: #include <stdint.h>",
      "12: #include <stdbool.h>",
      "13: #endif",
      "15: #include \"azure_macro_utils/macro_utils.h\"",
      "16: #include \"testrunnerswitcher.h\"",
      "17: #include \"umock_c/umock_c.h\"",
      "18: #include \"umock_c/umock_c_negative_tests.h\"",
      "19: #include \"umock_c/umocktypes_bool.h\"",
      "21: static void* my_gballoc_malloc(size_t size)",
      "22: {",
      "23:     return malloc(size);",
      "24: }",
      "26: static void* my_gballoc_calloc(size_t nmemb, size_t size)",
      "27: {",
      "28:     return calloc(nmemb, size);",
      "29: }",
      "31: static void* my_gballoc_realloc(void* ptr, size_t size)",
      "32: {",
      "33:     return realloc(ptr, size);",
      "34: }",
      "36: static void my_gballoc_free(void* ptr)",
      "37: {",
      "38:     free(ptr);",
      "39: }",
      "41: #define ENABLE_MOCKS",
      "43: #include \"azure_c_shared_utility/gballoc.h\"",
      "44: #include \"azure_c_shared_utility/singlylinkedlist.h\"",
      "45: #include \"azure_c_shared_utility/tickcounter.h\"",
      "46: #include \"azure_uamqp_c/session.h\"",
      "47: #include \"azure_uamqp_c/amqpvalue.h\"",
      "48: #include \"azure_uamqp_c/amqp_definitions.h\"",
      "49: #include \"azure_uamqp_c/amqp_frame_codec.h\"",
      "50: #include \"azure_uamqp_c/async_operation.h\"",
      "52: #undef ENABLE_MOCKS",
      "54: #include \"azure_uamqp_c/link.h\"",
      "56: static SESSION_HANDLE TEST_SESSION_HANDLE = (SESSION_HANDLE)0x4000;",
      "57: const char* TEST_LINK_NAME_1 = \"test_link_name_1\";",
      "58: static TICK_COUNTER_HANDLE TEST_TICK_COUNTER_HANDLE = (TICK_COUNTER_HANDLE)0x4001;",
      "59: static SINGLYLINKEDLIST_HANDLE TEST_SINGLYLINKEDLIST_HANDLE = (SINGLYLINKEDLIST_HANDLE)0x4002;",
      "60: static LINK_ENDPOINT_HANDLE TEST_LINK_ENDPOINT = (LINK_ENDPOINT_HANDLE)0x4003;",
      "61: const AMQP_VALUE TEST_LINK_SOURCE = (AMQP_VALUE)0x4004;",
      "62: const AMQP_VALUE TEST_LINK_TARGET = (AMQP_VALUE)0x4005;",
      "64: static TEST_MUTEX_HANDLE g_testByTest;",
      "66: MU_DEFINE_ENUM_STRINGS(UMOCK_C_ERROR_CODE, UMOCK_C_ERROR_CODE_VALUES)",
      "68: static void on_umock_c_error(UMOCK_C_ERROR_CODE error_code)",
      "69: {",
      "70:     ASSERT_FAIL(\"umock_c reported error :%\" PRI_MU_ENUM \"\", MU_ENUM_VALUE(UMOCK_C_ERROR_CODE, error_code));",
      "71: }",
      "73: static int umocktypes_copy_bool_ptr(bool** destination, const bool** source)",
      "74: {",
      "75:     int result;",
      "78:     if (*destination == NULL)",
      "79:     {",
      "80:         result = MU_FAILURE;",
      "81:     }",
      "82:     else",
      "83:     {",
      "86:         result = 0;",
      "87:     }",
      "89:     return result;",
      "90: }",
      "92: static void umocktypes_free_bool_ptr(bool** value)",
      "93: {",
      "94:     if (*value != NULL)",
      "95:     {",
      "96:         my_gballoc_free(*value);",
      "97:     }",
      "98: }",
      "100: static char* umocktypes_stringify_bool_ptr(const bool** value)",
      "101: {",
      "102:     char* result;",
      "104:     result = (char*)my_gballoc_malloc(8);",
      "105:     if (result != NULL)",
      "106:     {",
      "107:         if (*value == NULL)",
      "108:         {",
      "109:             (void)strcpy(result, \"{NULL}\");",
      "110:         }",
      "111:         else if (*(*value) == true)",
      "112:         {",
      "113:             (void)strcpy(result, \"{true}\");",
      "114:         }",
      "115:         else",
      "116:         {",
      "117:             (void)strcpy(result, \"{false}\");",
      "118:         }",
      "119:     }",
      "121:     return result;",
      "122: }",
      "124: static int umocktypes_are_equal_bool_ptr(bool** left, bool** right)",
      "125: {",
      "126:     int result;",
      "128:     if (*left == *right)",
      "129:     {",
      "130:         result = 1;",
      "131:     }",
      "132:     else",
      "133:     {",
      "134:         if (*(*left) == *(*right))",
      "135:         {",
      "136:             result = 1;",
      "137:         }",
      "138:         else",
      "139:         {",
      "140:             result = 0;",
      "141:         }",
      "142:     }",
      "144:     return result;",
      "145: }",
      "147: static int umocktypes_copy_FLOW_HANDLE(FLOW_HANDLE* destination, const FLOW_HANDLE* source)",
      "148: {",
      "149:     int result = 0;",
      "153:     return result;",
      "154: }",
      "156: static void umocktypes_free_FLOW_HANDLE(FLOW_HANDLE* value)",
      "157: {",
      "158:     (void)value;",
      "159: }",
      "161: static char* umocktypes_stringify_FLOW_HANDLE(const FLOW_HANDLE* value)",
      "162: {",
      "163:     char temp_buffer[32];",
      "164:     char* result;",
      "165:     size_t length = sprintf(temp_buffer, \"%p\", (void*)*value);",
      "166:     if (length < 0)",
      "167:     {",
      "168:         result = NULL;",
      "169:     }",
      "170:     else",
      "171:     {",
      "172:         result = (char*)malloc(length + 1);",
      "173:         if (result != NULL)",
      "174:         {",
      "175:             (void)memcpy(result, temp_buffer, length + 1);",
      "176:         }",
      "177:     }",
      "178:     return result;",
      "179: }",
      "181: static int umocktypes_are_equal_FLOW_HANDLE(FLOW_HANDLE* left, FLOW_HANDLE* right)",
      "182: {",
      "183:     int result;",
      "185:     if (*left == *right)",
      "186:     {",
      "187:         result = 1;",
      "188:     }",
      "189:     else",
      "190:     {",
      "191:         result = 0;",
      "192:     }",
      "194:     return result;",
      "195: }",
      "197: static TRANSFER_HANDLE test_on_transfer_received_transfer;",
      "198: static uint32_t test_on_transfer_received_payload_size;",
      "199: static unsigned char test_on_transfer_received_payload_bytes[2048];",
      "200: static AMQP_VALUE test_on_transfer_received(void* context, TRANSFER_HANDLE transfer, uint32_t payload_size, const unsigned char* payload_bytes)",
      "201: {",
      "202:     (void)context;",
      "203:     test_on_transfer_received_transfer = transfer;",
      "204:     test_on_transfer_received_payload_size = payload_size;",
      "205:     memcpy(test_on_transfer_received_payload_bytes, payload_bytes, payload_size);",
      "207:     return (AMQP_VALUE)0x6000;",
      "208: }",
      "210: static LINK_STATE test_on_link_state_changed_new_link_state;",
      "211: LINK_STATE test_on_link_state_changed_previous_link_state;",
      "212: static void test_on_link_state_changed(void* context, LINK_STATE new_link_state, LINK_STATE previous_link_state)",
      "213: {",
      "214:     (void)context;",
      "215:     test_on_link_state_changed_new_link_state = new_link_state;",
      "216:     test_on_link_state_changed_previous_link_state = previous_link_state;",
      "217: }",
      "219: static void test_on_link_flow_on(void* context)",
      "220: {",
      "221:     (void)context;",
      "222: }",
      "224: static LINK_HANDLE create_link(role link_role)",
      "225: {",
      "226:     umock_c_reset_all_calls();",
      "228:     STRICT_EXPECTED_CALL(gballoc_calloc(IGNORED_NUM_ARG, IGNORED_NUM_ARG));",
      "229:     STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));",
      "230:     STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));",
      "231:     STRICT_EXPECTED_CALL(tickcounter_create());",
      "232:     STRICT_EXPECTED_CALL(singlylinkedlist_create());",
      "233:     STRICT_EXPECTED_CALL(gballoc_malloc(IGNORED_NUM_ARG));",
      "234:     STRICT_EXPECTED_CALL(session_create_link_endpoint(TEST_SESSION_HANDLE, TEST_LINK_NAME_1));",
      "235:     STRICT_EXPECTED_CALL(session_set_link_endpoint_callback(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
      "237:     return link_create(TEST_SESSION_HANDLE, TEST_LINK_NAME_1, link_role, TEST_LINK_SOURCE, TEST_LINK_TARGET);",
      "238: }",
      "240: static int attach_link(LINK_HANDLE link, ON_ENDPOINT_FRAME_RECEIVED* on_frame_received)",
      "241: {",
      "242:     umock_c_reset_all_calls();",
      "244:     STRICT_EXPECTED_CALL(session_begin(TEST_SESSION_HANDLE));",
      "245:     STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
      "246:         .CaptureArgumentValue_frame_received_callback(on_frame_received);",
      "248:     return link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
      "249: }",
      "251: BEGIN_TEST_SUITE(link_ut)",
      "253: TEST_SUITE_INITIALIZE(suite_init)",
      "254: {",
      "255:     int result;",
      "257:     g_testByTest = TEST_MUTEX_CREATE();",
      "258:     ASSERT_IS_NOT_NULL(g_testByTest);",
      "260:     umock_c_init(on_umock_c_error);",
      "262:     result = umocktypes_bool_register_types();",
      "263:     ASSERT_ARE_EQUAL(int, 0, result, \"Failed registering bool types\");",
      "265:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_malloc, my_gballoc_malloc);",
      "266:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_calloc, my_gballoc_calloc);",
      "267:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_realloc, my_gballoc_realloc);",
      "268:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_free, my_gballoc_free);",
      "269:     REGISTER_UMOCK_ALIAS_TYPE(AMQP_VALUE, void*);",
      "270:     REGISTER_UMOCK_ALIAS_TYPE(TICK_COUNTER_HANDLE, void*);",
      "271:     REGISTER_UMOCK_ALIAS_TYPE(SINGLYLINKEDLIST_HANDLE, void*);",
      "272:     REGISTER_UMOCK_ALIAS_TYPE(SESSION_HANDLE, void*);",
      "273:     REGISTER_UMOCK_ALIAS_TYPE(LINK_ENDPOINT_HANDLE, void*);",
      "274:     REGISTER_UMOCK_ALIAS_TYPE(ON_LINK_ENDPOINT_DESTROYED_CALLBACK, void*);",
      "275:     REGISTER_UMOCK_ALIAS_TYPE(ON_ENDPOINT_FRAME_RECEIVED, void*);",
      "276:     REGISTER_UMOCK_ALIAS_TYPE(ON_TRANSFER_RECEIVED, void*);",
      "277:     REGISTER_UMOCK_ALIAS_TYPE(ON_LINK_STATE_CHANGED, void*);",
      "278:     REGISTER_UMOCK_ALIAS_TYPE(ON_LINK_FLOW_ON, void*);",
      "279:     REGISTER_UMOCK_ALIAS_TYPE(ON_SESSION_STATE_CHANGED, void*);",
      "280:     REGISTER_UMOCK_ALIAS_TYPE(ON_SESSION_FLOW_ON, void*);",
      "282:     REGISTER_GLOBAL_MOCK_RETURNS(tickcounter_create, TEST_TICK_COUNTER_HANDLE, NULL);",
      "283:     REGISTER_GLOBAL_MOCK_RETURNS(singlylinkedlist_create, TEST_SINGLYLINKEDLIST_HANDLE, NULL);",
      "284:     REGISTER_GLOBAL_MOCK_RETURNS(session_create_link_endpoint, TEST_LINK_ENDPOINT, NULL);",
      "285:     REGISTER_GLOBAL_MOCK_RETURNS(session_start_link_endpoint, 0, 1);",
      "287:     REGISTER_TYPE(FLOW_HANDLE, FLOW_HANDLE);",
      "288:     REGISTER_TYPE(bool*, bool_ptr);",
      "289: }",
      "291: TEST_SUITE_CLEANUP(suite_cleanup)",
      "292: {",
      "293:     umock_c_deinit();",
      "295:     TEST_MUTEX_DESTROY(g_testByTest);",
      "296: }",
      "298: TEST_FUNCTION_INITIALIZE(test_init)",
      "299: {",
      "300:     if (TEST_MUTEX_ACQUIRE(g_testByTest))",
      "301:     {",
      "302:         ASSERT_FAIL(\"our mutex is ABANDONED. Failure in test framework\");",
      "303:     }",
      "305:     umock_c_reset_all_calls();",
      "306: }",
      "308: TEST_FUNCTION_CLEANUP(test_cleanup)",
      "309: {",
      "310:     TEST_MUTEX_RELEASE(g_testByTest);",
      "311: }",
      "313: TEST_FUNCTION(link_create_succeeds)",
      "314: {",
      "316:     AMQP_VALUE link_source = TEST_LINK_SOURCE;",
      "317:     AMQP_VALUE link_target = TEST_LINK_TARGET;",
      "319:     umock_c_reset_all_calls();",
      "321:     STRICT_EXPECTED_CALL(gballoc_calloc(IGNORED_NUM_ARG, IGNORED_NUM_ARG));",
      "322:     STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));",
      "323:     STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));",
      "324:     STRICT_EXPECTED_CALL(tickcounter_create());",
      "325:     STRICT_EXPECTED_CALL(singlylinkedlist_create());",
      "326:     STRICT_EXPECTED_CALL(gballoc_malloc(IGNORED_NUM_ARG));",
      "327:     STRICT_EXPECTED_CALL(session_create_link_endpoint(TEST_SESSION_HANDLE, TEST_LINK_NAME_1));",
      "328:     STRICT_EXPECTED_CALL(session_set_link_endpoint_callback(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
      "331:     LINK_HANDLE link = link_create(TEST_SESSION_HANDLE, TEST_LINK_NAME_1, role_receiver, link_source, link_target);",
      "334:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
      "335:     ASSERT_IS_NOT_NULL(link);",
      "338:     link_destroy(link);",
      "339: }",
      "341: TEST_FUNCTION(link_attach_succeeds)",
      "342: {",
      "344:     LINK_HANDLE link = create_link(role_receiver);",
      "345:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
      "347:     umock_c_reset_all_calls();",
      "349:     STRICT_EXPECTED_CALL(session_begin(TEST_SESSION_HANDLE));",
      "350:     STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
      "351:         .CaptureArgumentValue_frame_received_callback(&on_frame_received);",
      "354:     int result = link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
      "357:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
      "358:     ASSERT_ARE_EQUAL(int, 0, result);",
      "359:     ASSERT_IS_NOT_NULL(on_frame_received);",
      "362:     link_destroy(link);",
      "363: }",
      "365: TEST_FUNCTION(link_receiver_frame_received_succeeds)",
      "366: {",
      "368:     LINK_HANDLE link = create_link(role_receiver);",
      "369:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
      "370:     int attach_result = attach_link(link, &on_frame_received);",
      "371:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
      "373:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
      "374:     AMQP_VALUE descriptor = (AMQP_VALUE)0x5001;",
      "375:     FLOW_HANDLE flow = (FLOW_HANDLE)0x5002;",
      "376:     uint32_t frame_payload_size = 30;",
      "377:     const unsigned char payload_bytes[30] = { 0 };",
      "379:     umock_c_reset_all_calls();",
      "380:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
      "381:         .SetReturn(descriptor);",
      "382:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
      "383:         .SetReturn(false);",
      "384:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
      "385:         .SetReturn(1);",
      "386:     STRICT_EXPECTED_CALL(amqpvalue_get_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
      "387:         .CopyOutArgumentBuffer(2, &flow, sizeof(flow));",
      "388:     STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
      "391:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
      "394:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
      "397:     link_destroy(link);",
      "398: }",
      "400: TEST_FUNCTION(link_sender_frame_received_succeeds)",
      "401: {",
      "403:     LINK_HANDLE link = create_link(role_sender);",
      "404:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
      "405:     int attach_result = attach_link(link, &on_frame_received);",
      "406:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
      "408:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
      "409:     AMQP_VALUE descriptor = (AMQP_VALUE)0x5001;",
      "410:     FLOW_HANDLE flow = (FLOW_HANDLE)0x5002;",
      "411:     uint32_t frame_payload_size = 30;",
      "412:     const unsigned char payload_bytes[30] = { 0 };",
      "413:     uint32_t link_credit_value = 700;",
      "414:     uint32_t delivery_count_value = 300;",
      "416:     umock_c_reset_all_calls();",
      "417:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
      "418:         .SetReturn(descriptor);",
      "419:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
      "420:         .SetReturn(false);",
      "421:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
      "422:         .SetReturn(1);",
      "423:     STRICT_EXPECTED_CALL(amqpvalue_get_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
      "424:         .CopyOutArgumentBuffer(2, &flow, sizeof(flow));",
      "425:     STRICT_EXPECTED_CALL(flow_get_link_credit(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
      "426:         .CopyOutArgumentBuffer(2, &link_credit_value, sizeof(link_credit_value));",
      "427:     STRICT_EXPECTED_CALL(flow_get_delivery_count(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
      "428:         .CopyOutArgumentBuffer(2, &delivery_count_value, sizeof(delivery_count_value));",
      "429:     STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
      "432:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
      "435:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
      "438:     link_destroy(link);",
      "439: }",
      "441: TEST_FUNCTION(link_receiver_frame_received_get_flow_fails_no_double_free_fails)",
      "442: {",
      "444:     LINK_HANDLE link = create_link(role_receiver);",
      "445:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
      "446:     int attach_result = attach_link(link, &on_frame_received);",
      "447:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
      "449:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
      "450:     AMQP_VALUE descriptor = (AMQP_VALUE)0x5001;",
      "451:     FLOW_HANDLE flow = NULL;",
      "452:     uint32_t frame_payload_size = 30;",
      "453:     const unsigned char payload_bytes[30] = { 0 };",
      "455:     umock_c_reset_all_calls();",
      "456:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
      "457:         .SetReturn(descriptor);",
      "458:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
      "459:         .SetReturn(false);",
      "460:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
      "461:         .SetReturn(1);",
      "462:     STRICT_EXPECTED_CALL(amqpvalue_get_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
      "463:         .CopyOutArgumentBuffer(2, &flow, sizeof(flow))",
      "464:         .SetReturn(1);",
      "467:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
      "470:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
      "473:     link_destroy(link);",
      "474: }",
      "477: END_TEST_SUITE(link_ut)",
      "",
      "---------------"
    ],
    "tests/link_ut/main.c||tests/link_ut/main.c": [
      "File: tests/link_ut/main.c -> tests/link_ut/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #include \"testrunnerswitcher.h\"",
      "6: int main(void)",
      "7: {",
      "8:     size_t failedTestCount = 0;",
      "9:     RUN_TEST_SUITE(link_ut, failedTestCount);",
      "10:     return (int)failedTestCount;",
      "11: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96d7179f60e558b2c350194ea0061c725377f7e0",
      "candidate_info": {
        "commit_hash": "96d7179f60e558b2c350194ea0061c725377f7e0",
        "repo": "Azure/azure-uamqp-c",
        "commit_url": "https://github.com/Azure/azure-uamqp-c/commit/96d7179f60e558b2c350194ea0061c725377f7e0",
        "files": [
          "src/link.c",
          "tests/link_ut/link_ut.c"
        ],
        "message": "Avoid double-free if session_send_transfer fails and internally destroys the async operation (in link_transfer_async) (#468)\n\n* Avoid double-free if session_send_transfer fails and internally destroys the async operation (in link_transfer_async)\n\nIf `session_send_transfer` fails internally, depending on the point where it fails `remove_all_pending_deliveries` might be called,\ncausing the ASYNC_OPERATION_HANDLE/DELIVERY_INSTANCE variable `result` to be removed from `link->pending_deliveries` and destroyed.\nThen when `session_send_transfer` returns, in such cases `singlylinkedlist_remove` will fail and `async_operation_destroy` should not be called (to avoid a double-free).\n\nCallstack of the current double-free in such scenario (without this fix):\n\n==4910== Invalid free() / delete / delete[] / realloc()\n==4910==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4910==    by 0x15E0FD: async_operation_destroy (async_operation.c:63)\n==4910==    by 0x169B32: link_transfer_async (link.c:1509)\n==4910==    by 0x16FAE0: send_one_message (message_sender.c:566)\n==4910==    by 0x170810: messagesender_send_async (message_sender.c:962)\n==4910==    by 0x122E0C: send_batched_message_and_reset_state (iothubtransport_amqp_telemetry_messenger.c:1120)\n==4910==    by 0x1234B9: send_pending_events (iothubtransport_amqp_telemetry_messenger.c:1258)\n==4910==    by 0x124A05: telemetry_messenger_do_work (iothubtransport_amqp_telemetry_messenger.c:1809)\n==4910==    by 0x11BF83: amqp_device_do_work (iothubtransport_amqp_device.c:1137)\n==4910==    by 0x115666: IoTHubTransport_AMQP_Common_Device_DoWork (iothubtransport_amqp_common.c:1121)\n==4910==    by 0x1164A9: IoTHubTransport_AMQP_Common_DoWork (iothubtransport_amqp_common.c:1485)\n==4910==    by 0x112FD3: IoTHubTransportAMQP_DoWork (iothubtransportamqp.c:56)\n==4910==  Address 0x852ae30 is 0 bytes inside a block of size 56 free'd\n==4910==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==4910==    by 0x15E0FD: async_operation_destroy (async_operation.c:63)\n==4910==    by 0x1661D3: remove_all_pending_deliveries (link.c:105)\n==4910==    by 0x167B5B: on_session_state_changed (link.c:674)\n==4910==    by 0x1746D4: session_set_state (session.c:143)\n==4910==    by 0x174C73: on_connection_state_changed (session.c:386)\n==4910==    by 0x15FB7B: connection_set_state (connection.c:114)\n==4910==    by 0x160222: on_bytes_encoded (connection.c:276)\n==4910==    by 0x166093: frame_codec_encode_frame (frame_codec.c:706)\n==4910==    by 0x1777BF: amqp_frame_codec_encode_frame (amqp_frame_codec.c:314)\n==4910==    by 0x1648D8: connection_encode_frame (connection.c:2084)\n==4910==    by 0x176CD4: session_send_transfer (session.c:1655)\n\n* Fixes for windows build",
        "before_after_code_files": [
          "src/link.c||src/link.c",
          "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/link.c||src/link.c",
            "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
          ],
          "candidate": [
            "src/link.c||src/link.c",
            "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
          ]
        }
      },
      "candidate_diff": {
        "src/link.c||src/link.c": [
          "File: src/link.c -> src/link.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1500:                                         default:",
          "1501:                                         case SESSION_SEND_TRANSFER_ERROR:",
          "1502:                                             LogError(\"Failed session send transfer\");",
          "1504:                                             {",
          "1506:                                             }",
          "1510:                                             result = NULL;",
          "1511:                                             break;",
          "1513:                                         case SESSION_SEND_TRANSFER_BUSY:",
          "1515:                                             LogError(\"Failed session send transfer\");",
          "1517:                                             {",
          "1519:                                             }",
          "1523:                                             result = NULL;",
          "1524:                                             break;",
          "",
          "[Removed Lines]",
          "1503:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) != 0)",
          "1505:                                                 LogError(\"Error removing pending delivery from the list\");",
          "1509:                                             async_operation_destroy(result);",
          "1516:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) != 0)",
          "1518:                                                 LogError(\"Error removing pending delivery from the list\");",
          "1522:                                             async_operation_destroy(result);",
          "",
          "[Added Lines]",
          "1503:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) == 0)",
          "1505:                                                 async_operation_destroy(result);",
          "1515:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) == 0)",
          "1517:                                                 async_operation_destroy(result);",
          "",
          "---------------"
        ],
        "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c": [
          "File: tests/link_ut/link_ut.c -> tests/link_ut/link_ut.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"azure_uamqp_c/amqp_frame_codec.h\"",
          "51: #include \"azure_uamqp_c/async_operation.h\"",
          "53: #undef ENABLE_MOCKS",
          "55: #include \"azure_uamqp_c/link.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #undef ENABLE_MOCK_FILTERING_SWITCH",
          "54: #define ENABLE_MOCK_FILTERING",
          "55: #define please_mock_transfer_set_delivery_tag MOCK_ENABLED",
          "56: #undef ENABLE_MOCK_FILTERING_SWITCH",
          "57: #undef ENABLE_MOCK_FILTERING",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: static LINK_ENDPOINT_HANDLE TEST_LINK_ENDPOINT = (LINK_ENDPOINT_HANDLE)0x4003;",
          "62: const AMQP_VALUE TEST_LINK_SOURCE = (AMQP_VALUE)0x4004;",
          "63: const AMQP_VALUE TEST_LINK_TARGET = (AMQP_VALUE)0x4005;",
          "65: static TEST_MUTEX_HANDLE g_testByTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: const AMQP_VALUE TEST_AMQP_VALUE = (AMQP_VALUE)0x4006;",
          "71: const LIST_ITEM_HANDLE TEST_LIST_ITEM_HANDLE = (LIST_ITEM_HANDLE)0x4007;",
          "72: const TRANSFER_HANDLE TEST_TRANSFER_HANDLE = (TRANSFER_HANDLE)0x4008;",
          "73: #define AMQP_BATCHING_FORMAT_CODE 0x80013700",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:     return result;",
          "251: }",
          "253: static TRANSFER_HANDLE test_on_transfer_received_transfer;",
          "254: static uint32_t test_on_transfer_received_payload_size;",
          "255: static unsigned char test_on_transfer_received_payload_bytes[2048];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: static char* umock_stringify_delivery_tag(const delivery_tag* value)",
          "266: {",
          "267:     char* result = (char*)my_gballoc_malloc(1);",
          "268:     (void)value;",
          "269:     result[0] = '\\0';",
          "270:     return result;",
          "271: }",
          "273: static int umock_are_equal_delivery_tag(const delivery_tag* left, const delivery_tag* right)",
          "274: {",
          "275:     int result;",
          "277:     if (left->length != right->length)",
          "278:     {",
          "279:         result = 0;",
          "280:     }",
          "281:     else",
          "282:     {",
          "283:         if (memcmp(left->bytes, right->bytes, left->length) == 0)",
          "284:         {",
          "285:             result = 1;",
          "286:         }",
          "287:         else",
          "288:         {",
          "289:             result = 0;",
          "290:         }",
          "291:     }",
          "293:     return result;",
          "294: }",
          "296: static int umock_copy_delivery_tag(delivery_tag* destination, const delivery_tag* source)",
          "297: {",
          "298:     int result;",
          "300:     destination->bytes = (const unsigned char*)my_gballoc_malloc(source->length);",
          "301:     if (destination->bytes == NULL)",
          "302:     {",
          "303:         result = -1;",
          "304:     }",
          "305:     else",
          "306:     {",
          "307:         (void)memcpy((void*)destination->bytes, source->bytes, source->length);",
          "308:         destination->length = source->length;",
          "309:         result = 0;",
          "310:     }",
          "312:     return result;",
          "313: }",
          "315: static void umock_free_delivery_tag(delivery_tag* value)",
          "316: {",
          "317:     my_gballoc_free((void*)value->bytes);",
          "318:     value->bytes = NULL;",
          "319:     value->length = 0;",
          "320: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:     (void)context;",
          "278: }",
          "280: static LINK_HANDLE create_link(role link_role)",
          "281: {",
          "282:     umock_c_reset_all_calls();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: static void on_delivery_settled(void* context, delivery_number delivery_no, LINK_DELIVERY_SETTLE_REASON reason, AMQP_VALUE delivery_state)",
          "351: {",
          "352:     (void)context;",
          "353:     (void)delivery_no;",
          "354:     (void)reason;",
          "355:     (void)delivery_state;",
          "356: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "293:     return link_create(TEST_SESSION_HANDLE, TEST_LINK_NAME_1, link_role, TEST_LINK_SOURCE, TEST_LINK_TARGET);",
          "294: }",
          "297: {",
          "298:     umock_c_reset_all_calls();",
          "300:     STRICT_EXPECTED_CALL(session_begin(TEST_SESSION_HANDLE));",
          "306: }",
          "308: BEGIN_TEST_SUITE(link_ut)",
          "",
          "[Removed Lines]",
          "296: static int attach_link(LINK_HANDLE link, ON_ENDPOINT_FRAME_RECEIVED* on_frame_received, ON_SESSION_STATE_CHANGED* on_session_state_changed)",
          "301:     STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
          "302:         .CaptureArgumentValue_frame_received_callback(on_frame_received)",
          "303:         .CaptureArgumentValue_on_session_state_changed(on_session_state_changed);",
          "305:     return link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
          "",
          "[Added Lines]",
          "375: static int attach_link(LINK_HANDLE link, role link_role, ON_ENDPOINT_FRAME_RECEIVED* on_frame_received, ON_SESSION_STATE_CHANGED* on_session_state_changed)",
          "377:     int result;",
          "381:     ATTACH_HANDLE attach = (ATTACH_HANDLE)0x4999;",
          "385:     if (on_session_state_changed != NULL)",
          "386:     {",
          "387:         STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
          "388:             .CaptureArgumentValue_frame_received_callback(on_frame_received)",
          "389:             .CaptureArgumentValue_on_session_state_changed(on_session_state_changed);",
          "391:         result = link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
          "392:     }",
          "393:     else",
          "394:     {",
          "395:         ON_SESSION_STATE_CHANGED local_on_session_state_changed = NULL;",
          "396:         ON_ENDPOINT_FRAME_RECEIVED local_on_frame_received = NULL;",
          "397:         AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "398:         AMQP_VALUE descriptor = (AMQP_VALUE)0x5001;",
          "399:         uint32_t frame_payload_size = 30;",
          "400:         const unsigned char payload_bytes[30] = { 0 };",
          "401:         uint64_t max_message_size = 123456;",
          "403:         STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
          "404:             .CaptureArgumentValue_frame_received_callback(&local_on_frame_received)",
          "405:             .CaptureArgumentValue_on_session_state_changed(&local_on_session_state_changed);",
          "407:         result = link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
          "409:         umock_c_reset_all_calls();",
          "410:         STRICT_EXPECTED_CALL(attach_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "411:             .SetReturn(attach);",
          "412:         STRICT_EXPECTED_CALL(attach_set_snd_settle_mode(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "413:         STRICT_EXPECTED_CALL(attach_set_rcv_settle_mode(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "414:         STRICT_EXPECTED_CALL(attach_set_role(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "415:         STRICT_EXPECTED_CALL(attach_set_source(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "416:         STRICT_EXPECTED_CALL(attach_set_target(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "418:         if (link_role == role_sender)",
          "419:         {",
          "420:             STRICT_EXPECTED_CALL(attach_set_initial_delivery_count(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "421:         }",
          "423:         STRICT_EXPECTED_CALL(attach_set_max_message_size(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "424:         STRICT_EXPECTED_CALL(session_send_attach(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "425:         STRICT_EXPECTED_CALL(attach_destroy(IGNORED_PTR_ARG));",
          "427:         local_on_session_state_changed(link, SESSION_STATE_MAPPED, SESSION_STATE_UNMAPPED);",
          "428:         ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "430:         umock_c_reset_all_calls();",
          "432:         STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "433:             .SetReturn(descriptor);",
          "434:         STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "435:             .SetReturn(true);",
          "436:         STRICT_EXPECTED_CALL(amqpvalue_get_attach(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "437:         STRICT_EXPECTED_CALL(attach_get_max_message_size(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "438:             .CopyOutArgumentBuffer(2, &max_message_size, sizeof(max_message_size));",
          "439:         STRICT_EXPECTED_CALL(attach_destroy(IGNORED_PTR_ARG));",
          "441:         local_on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "445:         if (link_role == role_sender)",
          "446:         {",
          "447:             FLOW_HANDLE flow = (FLOW_HANDLE)0x5679;",
          "448:             uint32_t link_credit = 10000;",
          "449:             delivery_number delivery_count = 0;",
          "451:             STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "452:                 .SetReturn(descriptor);",
          "453:             STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "454:                 .SetReturn(false);",
          "455:             STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
          "456:                 .SetReturn(true);",
          "457:             STRICT_EXPECTED_CALL(amqpvalue_get_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "458:                 .CopyOutArgumentBuffer(2, &flow, sizeof(flow));",
          "459:             STRICT_EXPECTED_CALL(flow_get_link_credit(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "460:                 .CopyOutArgumentBuffer(2, &link_credit, sizeof(link_credit))",
          "461:                 .SetReturn(0);",
          "462:             STRICT_EXPECTED_CALL(flow_get_delivery_count(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "463:                 .CopyOutArgumentBuffer(2, &delivery_count, sizeof(delivery_count))",
          "464:                 .SetReturn(0);",
          "465:             STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
          "467:             local_on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "468:         }",
          "470:         ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "472:         if (on_frame_received != NULL)",
          "473:         {",
          "475:         }",
          "476:     }",
          "478:     return result;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:     REGISTER_UMOCK_ALIAS_TYPE(AMQP_VALUE, void*);",
          "338:     REGISTER_UMOCK_ALIAS_TYPE(TICK_COUNTER_HANDLE, void*);",
          "339:     REGISTER_UMOCK_ALIAS_TYPE(SINGLYLINKEDLIST_HANDLE, void*);",
          "340:     REGISTER_UMOCK_ALIAS_TYPE(SESSION_HANDLE, void*);",
          "341:     REGISTER_UMOCK_ALIAS_TYPE(ATTACH_HANDLE, void*);",
          "342:     REGISTER_UMOCK_ALIAS_TYPE(LINK_ENDPOINT_HANDLE, void*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:     REGISTER_UMOCK_ALIAS_TYPE(LIST_ITEM_HANDLE, void*);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "347:     REGISTER_UMOCK_ALIAS_TYPE(ON_LINK_FLOW_ON, void*);",
          "348:     REGISTER_UMOCK_ALIAS_TYPE(ON_SESSION_STATE_CHANGED, void*);",
          "349:     REGISTER_UMOCK_ALIAS_TYPE(ON_SESSION_FLOW_ON, void*);",
          "351:     REGISTER_GLOBAL_MOCK_RETURNS(tickcounter_create, TEST_TICK_COUNTER_HANDLE, NULL);",
          "352:     REGISTER_GLOBAL_MOCK_RETURNS(singlylinkedlist_create, TEST_SINGLYLINKEDLIST_HANDLE, NULL);",
          "353:     REGISTER_GLOBAL_MOCK_RETURNS(session_create_link_endpoint, TEST_LINK_ENDPOINT, NULL);",
          "354:     REGISTER_GLOBAL_MOCK_RETURNS(session_start_link_endpoint, 0, 1);",
          "356:     REGISTER_TYPE(FLOW_HANDLE, FLOW_HANDLE);",
          "357:     REGISTER_TYPE(TRANSFER_HANDLE, TRANSFER_HANDLE);",
          "358:     REGISTER_TYPE(bool*, bool_ptr);",
          "359:     REGISTER_TYPE(uint32_t, uint32_t);",
          "360: }",
          "362: TEST_SUITE_CLEANUP(suite_cleanup)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:     REGISTER_UMOCK_ALIAS_TYPE(ASYNC_OPERATION_CANCEL_HANDLER_FUNC, void*);",
          "525:     REGISTER_UMOCK_ALIAS_TYPE(ASYNC_OPERATION_HANDLE, void*);",
          "526:     REGISTER_UMOCK_ALIAS_TYPE(message_format, uint32_t);",
          "527:     REGISTER_UMOCK_ALIAS_TYPE(ON_SEND_COMPLETE, void*);",
          "528:     REGISTER_UMOCK_ALIAS_TYPE(SESSION_SEND_TRANSFER_RESULT, int);",
          "535:     REGISTER_GLOBAL_MOCK_FAIL_RETURN(async_operation_create, NULL);",
          "536:     REGISTER_GLOBAL_MOCK_RETURNS(transfer_create, TEST_TRANSFER_HANDLE, NULL);",
          "537:     REGISTER_GLOBAL_MOCK_RETURNS(transfer_set_delivery_tag, 0, 1);",
          "538:     REGISTER_GLOBAL_MOCK_RETURNS(transfer_set_message_format, 0, 1);",
          "539:     REGISTER_GLOBAL_MOCK_RETURNS(transfer_set_settled, 0, 1);",
          "540:     REGISTER_GLOBAL_MOCK_RETURNS(amqpvalue_create_transfer, TEST_AMQP_VALUE, NULL);",
          "541:     REGISTER_GLOBAL_MOCK_RETURNS(tickcounter_get_current_ms, 0, 1);",
          "542:     REGISTER_GLOBAL_MOCK_RETURNS(singlylinkedlist_add, TEST_LIST_ITEM_HANDLE, NULL);",
          "543:     REGISTER_GLOBAL_MOCK_RETURNS(singlylinkedlist_remove, 0, 1);",
          "544:     REGISTER_GLOBAL_MOCK_RETURNS(session_send_transfer, 0, 1);",
          "551:     REGISTER_UMOCK_VALUE_TYPE(delivery_tag);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "439:     LINK_HANDLE link = create_link(role_receiver);",
          "440:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "441:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "443:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "445:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "442:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "[Added Lines]",
          "634:     int attach_result = attach_link(link, role_receiver, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "475:     LINK_HANDLE link = create_link(role_sender);",
          "476:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "477:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "479:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "481:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "478:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "[Added Lines]",
          "670:     int attach_result = attach_link(link, role_sender, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "517:     LINK_HANDLE link = create_link(role_receiver);",
          "518:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "519:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "521:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "523:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "520:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "[Added Lines]",
          "712:     int attach_result = attach_link(link, role_receiver, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "557:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "558:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "560:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "562:     ATTACH_HANDLE attach = (ATTACH_HANDLE)0x4999;",
          "",
          "[Removed Lines]",
          "559:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "[Added Lines]",
          "751:     int attach_result = attach_link(link, role_receiver, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "651:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "652:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "654:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "656:     ATTACH_HANDLE attach = (ATTACH_HANDLE)0x4999;",
          "",
          "[Removed Lines]",
          "653:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "[Added Lines]",
          "845:     int attach_result = attach_link(link, role_receiver, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "800:     link_destroy(link);",
          "801: }",
          "803: END_TEST_SUITE(link_ut)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995: TEST_FUNCTION(link_transfer_async_success)",
          "996: {",
          "998:     LINK_HANDLE link = create_link(role_sender);",
          "1000:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "1001:     LINK_TRANSFER_RESULT link_transfer_error;",
          "1002:     tickcounter_ms_t send_timeout = 1000;",
          "1003:     uint8_t data_bytes[16];",
          "1004:     PAYLOAD payload;",
          "1005:     payload.bytes = (const unsigned char*)data_bytes;",
          "1006:     payload.length = 0;",
          "1007:     const size_t message_count = 1;",
          "1008:     uint8_t async_op_result[128];",
          "1009:     unsigned char delivery_tag_bytes[10];",
          "1010:     delivery_tag moot_delivery_tag;",
          "1011:     moot_delivery_tag.bytes = delivery_tag_bytes;",
          "1012:     moot_delivery_tag.length = sizeof(delivery_tag_bytes);",
          "1014:     int attach_result = attach_link(link, role_sender, &on_frame_received, NULL);",
          "1015:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "1017:     umock_c_reset_all_calls();",
          "1018:     STRICT_EXPECTED_CALL(async_operation_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG))",
          "1019:         .SetReturn((ASYNC_OPERATION_HANDLE)async_op_result);",
          "1020:     STRICT_EXPECTED_CALL(transfer_create(IGNORED_NUM_ARG));",
          "1021:     STRICT_EXPECTED_CALL(transfer_set_delivery_tag(IGNORED_PTR_ARG, moot_delivery_tag))",
          "1022:         .IgnoreArgument_delivery_tag_value(); // Important for making umock-c work with custom value arguments.",
          "1023:     STRICT_EXPECTED_CALL(transfer_set_message_format(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1024:     STRICT_EXPECTED_CALL(transfer_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1025:     STRICT_EXPECTED_CALL(amqpvalue_create_transfer(IGNORED_PTR_ARG));",
          "1026:     STRICT_EXPECTED_CALL(tickcounter_get_current_ms(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1027:     STRICT_EXPECTED_CALL(singlylinkedlist_add(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1028:     STRICT_EXPECTED_CALL(session_send_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1029:         .SetReturn(SESSION_SEND_TRANSFER_OK);",
          "1030:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "1031:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "1034:     ASYNC_OPERATION_HANDLE async_result = link_transfer_async(link, AMQP_BATCHING_FORMAT_CODE, &payload, message_count, on_delivery_settled, NULL, &link_transfer_error, send_timeout);",
          "1037:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "1038:     ASSERT_IS_NOT_NULL(async_result);",
          "1041:     link_destroy(link);",
          "1042: }",
          "1044: TEST_FUNCTION(link_transfer_async_SESSION_SEND_TRANSFER_ERROR_fails)",
          "1045: {",
          "1047:     LINK_HANDLE link = create_link(role_sender);",
          "1049:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "1050:     LINK_TRANSFER_RESULT link_transfer_error;",
          "1051:     tickcounter_ms_t send_timeout = 1000;",
          "1052:     uint8_t data_bytes[16];",
          "1053:     PAYLOAD payload;",
          "1054:     payload.bytes = (const unsigned char*)data_bytes;",
          "1055:     payload.length = 0;",
          "1056:     const size_t message_count = 1;",
          "1057:     uint8_t async_op_result[128];",
          "1058:     unsigned char delivery_tag_bytes[10];",
          "1059:     delivery_tag moot_delivery_tag;",
          "1060:     moot_delivery_tag.bytes = delivery_tag_bytes;",
          "1061:     moot_delivery_tag.length = sizeof(delivery_tag_bytes);",
          "1063:     int attach_result = attach_link(link, role_sender, &on_frame_received, NULL);",
          "1064:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "1066:     umock_c_reset_all_calls();",
          "1067:     STRICT_EXPECTED_CALL(async_operation_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG))",
          "1068:         .SetReturn((ASYNC_OPERATION_HANDLE)async_op_result);",
          "1069:     STRICT_EXPECTED_CALL(transfer_create(IGNORED_NUM_ARG));",
          "1070:     STRICT_EXPECTED_CALL(transfer_set_delivery_tag(IGNORED_PTR_ARG, moot_delivery_tag))",
          "1071:         .IgnoreArgument_delivery_tag_value(); // Important for making umock-c work with custom value arguments.",
          "1072:     STRICT_EXPECTED_CALL(transfer_set_message_format(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1073:     STRICT_EXPECTED_CALL(transfer_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1074:     STRICT_EXPECTED_CALL(amqpvalue_create_transfer(IGNORED_PTR_ARG));",
          "1075:     STRICT_EXPECTED_CALL(tickcounter_get_current_ms(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1076:     STRICT_EXPECTED_CALL(singlylinkedlist_add(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1077:     STRICT_EXPECTED_CALL(session_send_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1078:         .SetReturn(SESSION_SEND_TRANSFER_ERROR);",
          "1079:     STRICT_EXPECTED_CALL(singlylinkedlist_remove(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1080:     STRICT_EXPECTED_CALL(async_operation_destroy(IGNORED_PTR_ARG));",
          "1081:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "1082:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "1085:     ASYNC_OPERATION_HANDLE async_result = link_transfer_async(link, AMQP_BATCHING_FORMAT_CODE, &payload, message_count, on_delivery_settled, NULL, &link_transfer_error, send_timeout);",
          "1088:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "1089:     ASSERT_IS_NULL(async_result);",
          "1092:     link_destroy(link);",
          "1093: }",
          "1095: TEST_FUNCTION(link_transfer_async_SESSION_SEND_TRANSFER_BUSY_fails)",
          "1096: {",
          "1098:     LINK_HANDLE link = create_link(role_sender);",
          "1100:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "1101:     LINK_TRANSFER_RESULT link_transfer_error;",
          "1102:     tickcounter_ms_t send_timeout = 1000;",
          "1103:     uint8_t data_bytes[16];",
          "1104:     PAYLOAD payload;",
          "1105:     payload.bytes = (const unsigned char*)data_bytes;",
          "1106:     payload.length = 0;",
          "1107:     const size_t message_count = 1;",
          "1108:     uint8_t async_op_result[128];",
          "1109:     unsigned char delivery_tag_bytes[10];",
          "1110:     delivery_tag moot_delivery_tag;",
          "1111:     moot_delivery_tag.bytes = delivery_tag_bytes;",
          "1112:     moot_delivery_tag.length = sizeof(delivery_tag_bytes);",
          "1114:     int attach_result = attach_link(link, role_sender, &on_frame_received, NULL);",
          "1115:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "1117:     umock_c_reset_all_calls();",
          "1118:     STRICT_EXPECTED_CALL(async_operation_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG))",
          "1119:         .SetReturn((ASYNC_OPERATION_HANDLE)async_op_result);",
          "1120:     STRICT_EXPECTED_CALL(transfer_create(IGNORED_NUM_ARG));",
          "1121:     STRICT_EXPECTED_CALL(transfer_set_delivery_tag(IGNORED_PTR_ARG, moot_delivery_tag))",
          "1122:         .IgnoreArgument_delivery_tag_value(); // Important for making umock-c work with custom value arguments.",
          "1123:     STRICT_EXPECTED_CALL(transfer_set_message_format(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1124:     STRICT_EXPECTED_CALL(transfer_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1125:     STRICT_EXPECTED_CALL(amqpvalue_create_transfer(IGNORED_PTR_ARG));",
          "1126:     STRICT_EXPECTED_CALL(tickcounter_get_current_ms(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1127:     STRICT_EXPECTED_CALL(singlylinkedlist_add(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1128:     STRICT_EXPECTED_CALL(session_send_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1129:         .SetReturn(SESSION_SEND_TRANSFER_BUSY);",
          "1130:     STRICT_EXPECTED_CALL(singlylinkedlist_remove(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1131:     STRICT_EXPECTED_CALL(async_operation_destroy(IGNORED_PTR_ARG));",
          "1132:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "1133:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "1136:     ASYNC_OPERATION_HANDLE async_result = link_transfer_async(link, AMQP_BATCHING_FORMAT_CODE, &payload, message_count, on_delivery_settled, NULL, &link_transfer_error, send_timeout);",
          "1139:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "1140:     ASSERT_IS_NULL(async_result);",
          "1143:     link_destroy(link);",
          "1144: }",
          "1149: TEST_FUNCTION(link_transfer_async_SESSION_SEND_TRANSFER_ERROR_result_already_destroyed_fails)",
          "1150: {",
          "1152:     LINK_HANDLE link = create_link(role_sender);",
          "1154:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "1155:     LINK_TRANSFER_RESULT link_transfer_error;",
          "1156:     tickcounter_ms_t send_timeout = 1000;",
          "1157:     uint8_t data_bytes[16];",
          "1158:     PAYLOAD payload;",
          "1159:     payload.bytes = (const unsigned char*)data_bytes;",
          "1160:     payload.length = 0;",
          "1161:     const size_t message_count = 1;",
          "1162:     uint8_t async_op_result[128];",
          "1163:     unsigned char delivery_tag_bytes[10];",
          "1164:     delivery_tag moot_delivery_tag;",
          "1165:     moot_delivery_tag.bytes = delivery_tag_bytes;",
          "1166:     moot_delivery_tag.length = sizeof(delivery_tag_bytes);",
          "1168:     int attach_result = attach_link(link, role_sender, &on_frame_received, NULL);",
          "1169:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "1171:     umock_c_reset_all_calls();",
          "1172:     STRICT_EXPECTED_CALL(async_operation_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG))",
          "1173:         .SetReturn((ASYNC_OPERATION_HANDLE)async_op_result);",
          "1174:     STRICT_EXPECTED_CALL(transfer_create(IGNORED_NUM_ARG));",
          "1175:     STRICT_EXPECTED_CALL(transfer_set_delivery_tag(IGNORED_PTR_ARG, moot_delivery_tag))",
          "1176:         .IgnoreArgument_delivery_tag_value(); // Important for making umock-c work with custom value arguments.",
          "1177:     STRICT_EXPECTED_CALL(transfer_set_message_format(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1178:     STRICT_EXPECTED_CALL(transfer_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1179:     STRICT_EXPECTED_CALL(amqpvalue_create_transfer(IGNORED_PTR_ARG));",
          "1180:     STRICT_EXPECTED_CALL(tickcounter_get_current_ms(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1181:     STRICT_EXPECTED_CALL(singlylinkedlist_add(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1182:     STRICT_EXPECTED_CALL(session_send_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1183:         .SetReturn(SESSION_SEND_TRANSFER_ERROR);",
          "1184:     STRICT_EXPECTED_CALL(singlylinkedlist_remove(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1185:         .SetReturn(1); // result has already been removed from link->pending_deliveries.",
          "1187:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "1188:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "1191:     ASYNC_OPERATION_HANDLE async_result = link_transfer_async(link, AMQP_BATCHING_FORMAT_CODE, &payload, message_count, on_delivery_settled, NULL, &link_transfer_error, send_timeout);",
          "1194:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "1195:     ASSERT_IS_NULL(async_result);",
          "1198:     link_destroy(link);",
          "1199: }",
          "1204: TEST_FUNCTION(link_transfer_async_SESSION_SEND_TRANSFER_BUSY_result_already_destroyed_fails)",
          "1205: {",
          "1207:     LINK_HANDLE link = create_link(role_sender);",
          "1209:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "1210:     LINK_TRANSFER_RESULT link_transfer_error;",
          "1211:     tickcounter_ms_t send_timeout = 1000;",
          "1212:     uint8_t data_bytes[16];",
          "1213:     PAYLOAD payload;",
          "1214:     payload.bytes = (const unsigned char*)data_bytes;",
          "1215:     payload.length = 0;",
          "1216:     const size_t message_count = 1;",
          "1217:     uint8_t async_op_result[128];",
          "1218:     unsigned char delivery_tag_bytes[10];",
          "1219:     delivery_tag moot_delivery_tag;",
          "1220:     moot_delivery_tag.bytes = delivery_tag_bytes;",
          "1221:     moot_delivery_tag.length = sizeof(delivery_tag_bytes);",
          "1223:     int attach_result = attach_link(link, role_sender, &on_frame_received, NULL);",
          "1224:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "1226:     umock_c_reset_all_calls();",
          "1227:     STRICT_EXPECTED_CALL(async_operation_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG))",
          "1228:         .SetReturn((ASYNC_OPERATION_HANDLE)async_op_result);",
          "1229:     STRICT_EXPECTED_CALL(transfer_create(IGNORED_NUM_ARG));",
          "1230:     STRICT_EXPECTED_CALL(transfer_set_delivery_tag(IGNORED_PTR_ARG, moot_delivery_tag))",
          "1231:         .IgnoreArgument_delivery_tag_value(); // Important for making umock-c work with custom value arguments.",
          "1232:     STRICT_EXPECTED_CALL(transfer_set_message_format(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1233:     STRICT_EXPECTED_CALL(transfer_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "1234:     STRICT_EXPECTED_CALL(amqpvalue_create_transfer(IGNORED_PTR_ARG));",
          "1235:     STRICT_EXPECTED_CALL(tickcounter_get_current_ms(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1236:     STRICT_EXPECTED_CALL(singlylinkedlist_add(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "1237:     STRICT_EXPECTED_CALL(session_send_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1238:         .SetReturn(SESSION_SEND_TRANSFER_BUSY);",
          "1239:     STRICT_EXPECTED_CALL(singlylinkedlist_remove(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "1240:         .SetReturn(1); // result has already been removed from link->pending_deliveries.",
          "1242:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "1243:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "1246:     ASYNC_OPERATION_HANDLE async_result = link_transfer_async(link, AMQP_BATCHING_FORMAT_CODE, &payload, message_count, on_delivery_settled, NULL, &link_transfer_error, send_timeout);",
          "1249:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "1250:     ASSERT_IS_NULL(async_result);",
          "1253:     link_destroy(link);",
          "1254: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a150b07352304acacdde2e446643f8f6de0ea3a",
      "candidate_info": {
        "commit_hash": "6a150b07352304acacdde2e446643f8f6de0ea3a",
        "repo": "Azure/azure-uamqp-c",
        "commit_url": "https://github.com/Azure/azure-uamqp-c/commit/6a150b07352304acacdde2e446643f8f6de0ea3a",
        "files": [
          "src/link.c",
          "tests/link_ut/link_ut.c"
        ],
        "message": "Reset link credit on last transfer legally received (#465)\n\n* Reset link credit on last transfer legally received\n\nThis is a problematic code, since if the current credit is already zero, the sender will not have sent another transfer.\n\n    else if (is_transfer_type_by_descriptor(descriptor))\n    {\n        if (link_instance->on_transfer_received != NULL)\n        {\n            TRANSFER_HANDLE transfer_handle;\n            if (amqpvalue_get_transfer(performative, &transfer_handle) != 0)\n            {\n                LogError(\"Cannot get transfer performative\");\n            }\n            else\n            {\n                AMQP_VALUE delivery_state;\n                bool more;\n                bool is_error;\n\n                if (link_instance->current_link_credit == 0)\n\nThat can be verified in the AMQP 1.0 spec in \"2.6.7 Flow Control\":\n\"If the link-credit is less than or equal to zero, i.e. the delivery-count is the same as or greater than the delivery-limit, it is illegal to send more messages.\"\n\nHere the code is already automatically replenishing the link credit if it gets \"too low\".\nIn such case, it should check if the link credit gets down to 1 or less (for the last message that the sender can legally send) and then replenish, also sending a new flow to the sender.\n\nBtw, this is a new bug caused by this change:\nhttps://github.com/Azure/azure-uamqp-c/pull/383/files\n\nThe current issue that best matches this bug is https://github.com/Azure/azure-uamqp-c/issues/461\n\n* Add link_receiver_link_credit_replenish_succeeds unit test\n\n* Remove duplicate var in link_ut",
        "before_after_code_files": [
          "src/link.c||src/link.c",
          "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/link.c||src/link.c",
            "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
          ],
          "candidate": [
            "src/link.c||src/link.c",
            "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c"
          ]
        }
      },
      "candidate_diff": {
        "src/link.c||src/link.c": [
          "File: src/link.c -> src/link.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"azure_uamqp_c/amqp_frame_codec.h\"",
          "19: #include \"azure_uamqp_c/async_operation.h\"",
          "23: typedef struct DELIVERY_INSTANCE_TAG",
          "24: {",
          "",
          "[Removed Lines]",
          "21: #define DEFAULT_LINK_CREDIT 10000",
          "",
          "[Added Lines]",
          "21: #define DEFAULT_LINK_CREDIT 10",
          "22: #define RECEIVER_MIN_LINK_CREDIT 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:                 bool more;",
          "424:                 bool is_error;",
          "427:                 {",
          "428:                     link_instance->current_link_credit = link_instance->max_link_credit;",
          "429:                     send_flow(link_instance);",
          "",
          "[Removed Lines]",
          "426:                 if (link_instance->current_link_credit == 0)",
          "",
          "[Added Lines]",
          "427:                 if (link_instance->current_link_credit <= RECEIVER_MIN_LINK_CREDIT)",
          "",
          "---------------"
        ],
        "tests/link_ut/link_ut.c||tests/link_ut/link_ut.c": [
          "File: tests/link_ut/link_ut.c -> tests/link_ut/link_ut.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"umock_c/umock_c.h\"",
          "18: #include \"umock_c/umock_c_negative_tests.h\"",
          "19: #include \"umock_c/umocktypes_bool.h\"",
          "21: static void* my_gballoc_malloc(size_t size)",
          "22: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"umock_c/umocktypes_stdint.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     ASSERT_FAIL(\"umock_c reported error :%\" PRI_MU_ENUM \"\", MU_ENUM_VALUE(UMOCK_C_ERROR_CODE, error_code));",
          "71: }",
          "74: {",
          "75:     int result;",
          "",
          "[Removed Lines]",
          "73: static int umocktypes_copy_bool_ptr(bool** destination, const bool** source)",
          "",
          "[Added Lines]",
          "74: static int umocktypes_copy_bool_ptr(bool** destination, const bool* source)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:     return result;",
          "195: }",
          "197: static TRANSFER_HANDLE test_on_transfer_received_transfer;",
          "198: static uint32_t test_on_transfer_received_payload_size;",
          "199: static unsigned char test_on_transfer_received_payload_bytes[2048];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: static int umocktypes_copy_TRANSFER_HANDLE(TRANSFER_HANDLE* destination, const TRANSFER_HANDLE* source)",
          "204: {",
          "205:     int result = 0;",
          "209:     return result;",
          "210: }",
          "212: static void umocktypes_free_TRANSFER_HANDLE(TRANSFER_HANDLE* value)",
          "213: {",
          "214:     (void)value;",
          "215: }",
          "217: static char* umocktypes_stringify_TRANSFER_HANDLE(const TRANSFER_HANDLE* value)",
          "218: {",
          "219:     char temp_buffer[32];",
          "220:     char* result;",
          "221:     size_t length = sprintf(temp_buffer, \"%p\", (void*)*value);",
          "222:     if (length < 0)",
          "223:     {",
          "224:         result = NULL;",
          "225:     }",
          "226:     else",
          "227:     {",
          "228:         result = (char*)malloc(length + 1);",
          "229:         if (result != NULL)",
          "230:         {",
          "231:             (void)memcpy(result, temp_buffer, length + 1);",
          "232:         }",
          "233:     }",
          "234:     return result;",
          "235: }",
          "237: static int umocktypes_are_equal_TRANSFER_HANDLE(TRANSFER_HANDLE* left, TRANSFER_HANDLE* right)",
          "238: {",
          "239:     int result;",
          "241:     if (*left == *right)",
          "242:     {",
          "243:         result = 1;",
          "244:     }",
          "245:     else",
          "246:     {",
          "247:         result = 0;",
          "248:     }",
          "250:     return result;",
          "251: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:     return link_create(TEST_SESSION_HANDLE, TEST_LINK_NAME_1, link_role, TEST_LINK_SOURCE, TEST_LINK_TARGET);",
          "238: }",
          "241: {",
          "242:     umock_c_reset_all_calls();",
          "244:     STRICT_EXPECTED_CALL(session_begin(TEST_SESSION_HANDLE));",
          "245:     STRICT_EXPECTED_CALL(session_start_link_endpoint(TEST_LINK_ENDPOINT, IGNORED_PTR_ARG, IGNORED_PTR_ARG, IGNORED_PTR_ARG, link))",
          "248:     return link_attach(link, test_on_transfer_received, test_on_link_state_changed, test_on_link_flow_on, NULL);",
          "249: }",
          "",
          "[Removed Lines]",
          "240: static int attach_link(LINK_HANDLE link, ON_ENDPOINT_FRAME_RECEIVED* on_frame_received)",
          "246:         .CaptureArgumentValue_frame_received_callback(on_frame_received);",
          "",
          "[Added Lines]",
          "296: static int attach_link(LINK_HANDLE link, ON_ENDPOINT_FRAME_RECEIVED* on_frame_received, ON_SESSION_STATE_CHANGED* on_session_state_changed)",
          "302:         .CaptureArgumentValue_frame_received_callback(on_frame_received)",
          "303:         .CaptureArgumentValue_on_session_state_changed(on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:     result = umocktypes_bool_register_types();",
          "263:     ASSERT_ARE_EQUAL(int, 0, result, \"Failed registering bool types\");",
          "265:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_malloc, my_gballoc_malloc);",
          "266:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_calloc, my_gballoc_calloc);",
          "267:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_realloc, my_gballoc_realloc);",
          "268:     REGISTER_GLOBAL_MOCK_HOOK(gballoc_free, my_gballoc_free);",
          "269:     REGISTER_UMOCK_ALIAS_TYPE(AMQP_VALUE, void*);",
          "270:     REGISTER_UMOCK_ALIAS_TYPE(TICK_COUNTER_HANDLE, void*);",
          "271:     REGISTER_UMOCK_ALIAS_TYPE(SINGLYLINKEDLIST_HANDLE, void*);",
          "272:     REGISTER_UMOCK_ALIAS_TYPE(SESSION_HANDLE, void*);",
          "273:     REGISTER_UMOCK_ALIAS_TYPE(LINK_ENDPOINT_HANDLE, void*);",
          "274:     REGISTER_UMOCK_ALIAS_TYPE(ON_LINK_ENDPOINT_DESTROYED_CALLBACK, void*);",
          "275:     REGISTER_UMOCK_ALIAS_TYPE(ON_ENDPOINT_FRAME_RECEIVED, void*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     result = umocktypes_stdint_register_types();",
          "323:     ASSERT_ARE_EQUAL(int, 0, result, \"Failed registering stdint types\");",
          "329:     REGISTER_UMOCK_ALIAS_TYPE(transfer_number, uint32_t);",
          "330:     REGISTER_UMOCK_ALIAS_TYPE(role, bool);",
          "331:     REGISTER_UMOCK_ALIAS_TYPE(delivery_number, uint32_t);",
          "332:     REGISTER_UMOCK_ALIAS_TYPE(sequence_no, uint32_t);",
          "333:     REGISTER_UMOCK_ALIAS_TYPE(handle, uint32_t);",
          "334:     REGISTER_UMOCK_ALIAS_TYPE(sender_settle_mode, uint8_t);",
          "335:     REGISTER_UMOCK_ALIAS_TYPE(receiver_settle_mode, uint8_t);",
          "336:     REGISTER_UMOCK_ALIAS_TYPE(DISPOSITION_HANDLE, void*);",
          "341:     REGISTER_UMOCK_ALIAS_TYPE(ATTACH_HANDLE, void*);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:     REGISTER_GLOBAL_MOCK_RETURNS(session_start_link_endpoint, 0, 1);",
          "287:     REGISTER_TYPE(FLOW_HANDLE, FLOW_HANDLE);",
          "288:     REGISTER_TYPE(bool*, bool_ptr);",
          "289: }",
          "291: TEST_SUITE_CLEANUP(suite_cleanup)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:     REGISTER_TYPE(TRANSFER_HANDLE, TRANSFER_HANDLE);",
          "359:     REGISTER_TYPE(uint32_t, uint32_t);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "368:     LINK_HANDLE link = create_link(role_receiver);",
          "369:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "371:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "373:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "370:     int attach_result = attach_link(link, &on_frame_received);",
          "",
          "[Added Lines]",
          "441:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "442:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "403:     LINK_HANDLE link = create_link(role_sender);",
          "404:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "406:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "408:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "405:     int attach_result = attach_link(link, &on_frame_received);",
          "",
          "[Added Lines]",
          "477:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "478:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "444:     LINK_HANDLE link = create_link(role_receiver);",
          "445:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "447:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "449:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "",
          "[Removed Lines]",
          "446:     int attach_result = attach_link(link, &on_frame_received);",
          "",
          "[Added Lines]",
          "519:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "520:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "473:     link_destroy(link);",
          "474: }",
          "477: END_TEST_SUITE(link_ut)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "550: TEST_FUNCTION(link_receiver_link_credit_replenish_succeeds)",
          "551: {",
          "553:     LINK_HANDLE link = create_link(role_receiver);",
          "554:     ASSERT_ARE_EQUAL(int, 0, link_set_max_link_credit(link, 5));",
          "556:     ON_ENDPOINT_FRAME_RECEIVED on_frame_received = NULL;",
          "557:     ON_SESSION_STATE_CHANGED on_session_state_changed = NULL;",
          "558:     int attach_result = attach_link(link, &on_frame_received, &on_session_state_changed);",
          "559:     ASSERT_ARE_EQUAL(int, 0, attach_result);",
          "561:     ATTACH_HANDLE attach = (ATTACH_HANDLE)0x4999;",
          "562:     AMQP_VALUE performative = (AMQP_VALUE)0x5000;",
          "563:     AMQP_VALUE descriptor = (AMQP_VALUE)0x5001;",
          "564:     FLOW_HANDLE flow = (FLOW_HANDLE)0x5002;",
          "565:     TRANSFER_HANDLE transfer = (TRANSFER_HANDLE)0x5003;",
          "566:     uint32_t frame_payload_size = 30;",
          "567:     const unsigned char payload_bytes[30] = { 0 };",
          "568:     bool more = false;",
          "569:     DISPOSITION_HANDLE disposition = (DISPOSITION_HANDLE)0x5005;",
          "571:     umock_c_reset_all_calls();",
          "572:     STRICT_EXPECTED_CALL(attach_create(IGNORED_PTR_ARG, IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "573:         .SetReturn(attach);",
          "574:     STRICT_EXPECTED_CALL(attach_set_snd_settle_mode(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "575:     STRICT_EXPECTED_CALL(attach_set_rcv_settle_mode(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "576:     STRICT_EXPECTED_CALL(attach_set_role(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "577:     STRICT_EXPECTED_CALL(attach_set_source(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "578:     STRICT_EXPECTED_CALL(attach_set_target(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "580:     STRICT_EXPECTED_CALL(attach_set_max_message_size(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "581:     STRICT_EXPECTED_CALL(session_send_attach(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "582:     STRICT_EXPECTED_CALL(attach_destroy(IGNORED_PTR_ARG));",
          "584:     on_session_state_changed(link, SESSION_STATE_MAPPED, SESSION_STATE_UNMAPPED);",
          "585:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "587:     umock_c_reset_all_calls();",
          "588:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "589:         .SetReturn(descriptor);",
          "590:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "591:         .SetReturn(false);",
          "592:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
          "593:         .SetReturn(1);",
          "594:     STRICT_EXPECTED_CALL(amqpvalue_get_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "595:         .CopyOutArgumentBuffer(2, &flow, sizeof(flow));",
          "596:     STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
          "597:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "598:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "600:     umock_c_reset_all_calls();",
          "602:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "603:         .SetReturn(descriptor);",
          "604:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "605:         .SetReturn(false);",
          "606:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
          "607:         .SetReturn(false);",
          "608:     STRICT_EXPECTED_CALL(is_transfer_type_by_descriptor(IGNORED_PTR_ARG))",
          "609:         .SetReturn(true);",
          "610:     STRICT_EXPECTED_CALL(amqpvalue_get_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "611:         .CopyOutArgumentBuffer(2, &transfer, sizeof(transfer));",
          "613:     STRICT_EXPECTED_CALL(flow_create(IGNORED_NUM_ARG, IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "614:         .SetReturn(flow);",
          "615:     STRICT_EXPECTED_CALL(flow_set_link_credit(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "616:     STRICT_EXPECTED_CALL(flow_set_handle(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "617:     STRICT_EXPECTED_CALL(flow_set_delivery_count(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "618:     STRICT_EXPECTED_CALL(session_send_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "619:     STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
          "621:     STRICT_EXPECTED_CALL(transfer_get_more(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "622:         .CopyOutArgumentBuffer(2, &more, sizeof(bool));",
          "623:     STRICT_EXPECTED_CALL(transfer_get_delivery_id(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "624:     STRICT_EXPECTED_CALL(disposition_create(IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "625:         .SetReturn(disposition);",
          "626:     STRICT_EXPECTED_CALL(disposition_set_last(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "627:     STRICT_EXPECTED_CALL(disposition_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "628:     STRICT_EXPECTED_CALL(disposition_set_state(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "629:     STRICT_EXPECTED_CALL(session_send_disposition(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "630:     STRICT_EXPECTED_CALL(disposition_destroy(IGNORED_PTR_ARG));",
          "631:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "632:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "633:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "634:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "636:     umock_c_reset_all_calls();",
          "640:     for (int i = 0; i < 3; i++)",
          "641:     {",
          "642:         STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "643:             .SetReturn(descriptor);",
          "644:         STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "645:             .SetReturn(false);",
          "646:         STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
          "647:             .SetReturn(false);",
          "648:         STRICT_EXPECTED_CALL(is_transfer_type_by_descriptor(IGNORED_PTR_ARG))",
          "649:             .SetReturn(true);",
          "650:         STRICT_EXPECTED_CALL(amqpvalue_get_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "651:             .CopyOutArgumentBuffer(2, &transfer, sizeof(transfer));",
          "652:         STRICT_EXPECTED_CALL(transfer_get_more(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "653:             .CopyOutArgumentBuffer(2, &more, sizeof(bool));",
          "654:         STRICT_EXPECTED_CALL(transfer_get_delivery_id(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "655:         STRICT_EXPECTED_CALL(disposition_create(IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "656:             .SetReturn(disposition);",
          "657:         STRICT_EXPECTED_CALL(disposition_set_last(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "658:         STRICT_EXPECTED_CALL(disposition_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "659:         STRICT_EXPECTED_CALL(disposition_set_state(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "660:         STRICT_EXPECTED_CALL(session_send_disposition(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "661:         STRICT_EXPECTED_CALL(disposition_destroy(IGNORED_PTR_ARG));",
          "662:         STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "663:         STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "664:         on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "665:     }",
          "668:     STRICT_EXPECTED_CALL(amqpvalue_get_inplace_descriptor(performative))",
          "669:         .SetReturn(descriptor);",
          "670:     STRICT_EXPECTED_CALL(is_attach_type_by_descriptor(IGNORED_PTR_ARG))",
          "671:         .SetReturn(false);",
          "672:     STRICT_EXPECTED_CALL(is_flow_type_by_descriptor(IGNORED_PTR_ARG))",
          "673:         .SetReturn(false);",
          "674:     STRICT_EXPECTED_CALL(is_transfer_type_by_descriptor(IGNORED_PTR_ARG))",
          "675:         .SetReturn(true);",
          "676:     STRICT_EXPECTED_CALL(amqpvalue_get_transfer(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "677:         .CopyOutArgumentBuffer(2, &transfer, sizeof(transfer));",
          "679:     STRICT_EXPECTED_CALL(flow_create(IGNORED_NUM_ARG, IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "680:         .SetReturn(flow);",
          "681:     STRICT_EXPECTED_CALL(flow_set_link_credit(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "682:     STRICT_EXPECTED_CALL(flow_set_handle(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "683:     STRICT_EXPECTED_CALL(flow_set_delivery_count(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "684:     STRICT_EXPECTED_CALL(session_send_flow(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "685:     STRICT_EXPECTED_CALL(flow_destroy(IGNORED_PTR_ARG));",
          "687:     STRICT_EXPECTED_CALL(transfer_get_more(IGNORED_PTR_ARG, IGNORED_PTR_ARG))",
          "688:         .CopyOutArgumentBuffer(2, &more, sizeof(bool));",
          "689:     STRICT_EXPECTED_CALL(transfer_get_delivery_id(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "690:     STRICT_EXPECTED_CALL(disposition_create(IGNORED_NUM_ARG, IGNORED_NUM_ARG))",
          "691:         .SetReturn(disposition);",
          "692:     STRICT_EXPECTED_CALL(disposition_set_last(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "693:     STRICT_EXPECTED_CALL(disposition_set_settled(IGNORED_PTR_ARG, IGNORED_NUM_ARG));",
          "694:     STRICT_EXPECTED_CALL(disposition_set_state(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "695:     STRICT_EXPECTED_CALL(session_send_disposition(IGNORED_PTR_ARG, IGNORED_PTR_ARG));",
          "696:     STRICT_EXPECTED_CALL(disposition_destroy(IGNORED_PTR_ARG));",
          "697:     STRICT_EXPECTED_CALL(amqpvalue_destroy(IGNORED_PTR_ARG));",
          "698:     STRICT_EXPECTED_CALL(transfer_destroy(IGNORED_PTR_ARG));",
          "699:     on_frame_received(link, performative, frame_payload_size, payload_bytes);",
          "702:     ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());",
          "705:     link_destroy(link);",
          "706: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}