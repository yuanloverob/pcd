{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
      "candidate_info": {
        "commit_hash": "c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
        "files": [
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: fix possible shm memory leaks\n\nFix leaking transactions when deleting an entity without sending a final reply.\n\nThanks to David Escartin from Sonoc for reporting.",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1763: void b2b_delete_record(b2b_dlg_t* dlg, b2b_table htable, unsigned int hash_index)",
          "1764: {",
          "1765:  if(dlg->prev == NULL)",
          "1766:  {",
          "1767:   htable[hash_index].first = dlg->next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1765:  str reply_text = str_init(\"Request Timeout\");",
          "1766:  struct to_body *pto;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:  if(dlg->uac_tran)",
          "1783:   tmb.unref_cell(dlg->uac_tran);",
          "1786:   tmb.unref_cell(dlg->uas_tran);",
          "1788:  if(dlg->ack_sdp.s)",
          "1789:   shm_free(dlg->ack_sdp.s);",
          "",
          "[Removed Lines]",
          "1785:  if(dlg->uas_tran)",
          "",
          "[Added Lines]",
          "1788:  if(dlg->uas_tran) {",
          "1791:   pto = get_to(dlg->uas_tran->uas.request);",
          "1792:   if (pto == NULL || pto->error != PARSE_OK) {",
          "1793:    LM_ERR(\"'To' header COULD NOT be parsed\\n\");",
          "1794:   } else {",
          "1795:    if (tmb.t_reply_with_body(dlg->uas_tran, 408, &reply_text, 0, 0,",
          "1796:     &pto->tag_value) < 0)",
          "1797:     LM_ERR(\"Failed to send 408 reply\\n\");",
          "1798:   }",
          "1799:  }",
          "1801:  if (dlg->update_tran) {",
          "1802:   tmb.unref_cell(dlg->update_tran);",
          "1804:   pto = get_to(dlg->update_tran->uas.request);",
          "1805:   if (pto == NULL || pto->error != PARSE_OK) {",
          "1806:    LM_ERR(\"'To' header COULD NOT be parsed\\n\");",
          "1807:   } else {",
          "1808:    if (tmb.t_reply_with_body(dlg->update_tran, 408, &reply_text, 0, 0,",
          "1809:     &pto->tag_value) < 0)",
          "1810:     LM_ERR(\"Failed to send 408 reply\\n\");",
          "1811:   }",
          "1812:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "698baa104aac1dcafb3e90a61d8e8b0c5202ef7d",
      "candidate_info": {
        "commit_hash": "698baa104aac1dcafb3e90a61d8e8b0c5202ef7d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/698baa104aac1dcafb3e90a61d8e8b0c5202ef7d",
        "files": [
          "modules/clusterer/sharing_tags.c"
        ],
        "message": "clusterer: advertise tag's active state only in defined cluster\n\nThanks go to Vlad Patrascu for brainstorming this!\n\n(cherry picked from commit d741f1875cb2b01e6deb96ae2235e23e029dc35f)",
        "before_after_code_files": [
          "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c": [
          "File: modules/clusterer/sharing_tags.c -> modules/clusterer/sharing_tags.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:   if (!tag->send_active_msg)",
          "674:    continue;",
          "677:   for (ni = tag->active_msgs_sent; ni && ni->node_id != node_id;",
          "678:    ni = ni->next) ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:   if (tag->cluster_id != c_id)",
          "677:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "852f9d9d71d92b870072b07d44cf55a258b88f0a",
      "candidate_info": {
        "commit_hash": "852f9d9d71d92b870072b07d44cf55a258b88f0a",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/852f9d9d71d92b870072b07d44cf55a258b88f0a",
        "files": [
          "parser/sdp/sdp_helpr_funcs.c"
        ],
        "message": "Fix crash in parse_sdp for fmtp, rtpmap and hold\n\nWhen invalid strings would have been passed, the remaining value would\nhave resulted in an invalid memory access.\n\nIssue discovered during OpenSIPS Security Audit 2021,\n    by Alfred Farrugia & Sandro Gauci (Enable Security)",
        "before_after_code_files": [
          "parser/sdp/sdp_helpr_funcs.c||parser/sdp/sdp_helpr_funcs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/sdp/sdp_helpr_funcs.c||parser/sdp/sdp_helpr_funcs.c": [
          "File: parser/sdp/sdp_helpr_funcs.c -> parser/sdp/sdp_helpr_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  char *cp, *cp1;",
          "58:  int len;",
          "60:  if (strncasecmp(body->s, \"a=rtpmap:\", 9) !=0) {",
          "62:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  if (body->len < 14)",
          "63:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:  char *cp, *cp1;",
          "125:  int len;",
          "127:  if (strncasecmp(body->s, \"a=fmtp:\", 7) !=0) {",
          "129:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:  if (body->len < 10)",
          "135:   return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222: {",
          "223:  char *cp1;",
          "225:  cp1 = body->s;",
          "226:  if ( !( (strncasecmp(cp1, \"a=sendrecv\", 10) == 0) ||",
          "227:   (strncasecmp(cp1, \"a=recvonly\", 10) == 0))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:  if (body->len < 10)",
          "236:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf353bf612372f299febc9dd452f3c573d066586",
      "candidate_info": {
        "commit_hash": "cf353bf612372f299febc9dd452f3c573d066586",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/cf353bf612372f299febc9dd452f3c573d066586",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: fix value of parameters provided through AVP\n\n(cherry picked from commit d6e91459d3fb3fd8e8278561242af56047f51e16)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:  mi_request_t *req = NULL;",
          "161:  struct usr_avp *v_avp = NULL;",
          "162:  struct usr_avp *a_avp = NULL;",
          "164:  unsigned int tmp;",
          "165:  cJSON *val;",
          "166:  char *p;",
          "",
          "[Removed Lines]",
          "163:  int_str avp_val;",
          "",
          "[Added Lines]",
          "163:  int_str avp_val, avp_val_v;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:   if (vals) {",
          "241:    v_avp = search_first_avp(vals->pvp.pvn.u.isname.type,",
          "243:    if (!v_avp) {",
          "244:     LM_ERR(\"missing attribute\\n\");",
          "245:     goto error;",
          "246:    }",
          "247:    if (a_avp->flags & AVP_VAL_STR)",
          "249:    else",
          "252:    cJSON_AddItemToObject(req->params, avp_val.s.s, val);",
          "253:   } else {",
          "",
          "[Removed Lines]",
          "242:      vals->pvp.pvn.u.isname.name.n, &avp_val, v_avp);",
          "248:     val = cJSON_CreateStr(avp_val.s.s, avp_val.s.len);",
          "250:     val = cJSON_CreateNumber(avp_val.n);",
          "",
          "[Added Lines]",
          "242:      vals->pvp.pvn.u.isname.name.n, &avp_val_v, v_avp);",
          "248:     val = cJSON_CreateStr(avp_val_v.s.s, avp_val_v.s.len);",
          "250:     val = cJSON_CreateNumber(avp_val_v.n);",
          "",
          "---------------"
        ]
      }
    }
  ]
}