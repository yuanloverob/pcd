{
  "cve_id": "CVE-2020-12135",
  "cve_desc": "bson before 0.8 incorrectly uses int rather than size_t for many variables, parameters, and return values. In particular, the bson_ensure_space() parameter bytesNeeded could have an integer overflow via properly constructed bson input.",
  "repo": "10gen-archive/mongo-c-driver-legacy",
  "patch_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
  "patch_info": {
    "commit_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
    "repo": "10gen-archive/mongo-c-driver-legacy",
    "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/1a1f5e26a4309480d88598913f9eebf9e9cba8ca#diff-f7d29a680148f52d6601f59ed787f577",
    "files": [
      "src/bcon.c",
      "src/bson.c",
      "src/bson.h",
      "src/encoding.c",
      "src/encoding.h",
      "src/env.c",
      "src/env.h",
      "src/gridfs.c",
      "src/gridfs.h",
      "src/mongo.c"
    ],
    "message": "don't mix up int and size_t (first pass to fix that)",
    "before_after_code_files": [
      "src/bcon.c||src/bcon.c",
      "src/bson.c||src/bson.c",
      "src/bson.h||src/bson.h",
      "src/encoding.c||src/encoding.c",
      "src/encoding.h||src/encoding.h",
      "src/env.c||src/env.c",
      "src/env.h||src/env.h",
      "src/gridfs.c||src/gridfs.c",
      "src/gridfs.h||src/gridfs.h",
      "src/mongo.c||src/mongo.c"
    ]
  },
  "patch_diff": {
    "src/bcon.c||src/bcon.c": [
      "File: src/bcon.c -> src/bcon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:     unsigned char doc_stack[DOC_STACK_SIZE];",
      "173:     size_t doc_stack_pointer = 0;",
      "174:     size_t array_index = 0;",
      "176:     size_t array_index_stack_pointer = 0;",
      "178:     int end_of_data;",
      "",
      "[Removed Lines]",
      "175:     unsigned int array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "[Added Lines]",
      "175:     size_t array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "---------------"
    ],
    "src/bson.c||src/bson.c": [
      "File: src/bson.c -> src/bson.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     return i;",
      "107: }",
      "110:     return (b->cur - b->data + 1);",
      "111: }",
      "",
      "[Removed Lines]",
      "109: MONGO_EXPORT int bson_buffer_size( const bson *b ) {",
      "",
      "[Added Lines]",
      "109: MONGO_EXPORT size_t bson_buffer_size( const bson *b ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306: }",
      "308: MONGO_EXPORT bson_type bson_iterator_next( bson_iterator *i ) {",
      "311:     if ( i->first ) {",
      "312:         i->first = 0;",
      "",
      "[Removed Lines]",
      "309:     int ds;",
      "",
      "[Added Lines]",
      "309:     size_t ds;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420:     case BSON_INT:",
      "421:         return bson_iterator_int_raw( i );",
      "422:     case BSON_LONG:",
      "424:     case BSON_DOUBLE:",
      "425:         return bson_iterator_double_raw( i );",
      "426:     default:",
      "",
      "[Removed Lines]",
      "423:         return bson_iterator_long_raw( i );",
      "",
      "[Added Lines]",
      "423:         return ( int )bson_iterator_long_raw( i );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "604:     b->cur++;",
      "605: }",
      "608:     memcpy( b->cur , data , len );",
      "609:     b->cur += len;",
      "610: }",
      "",
      "[Removed Lines]",
      "607: static void bson_append( bson *b, const void *data, int len ) {",
      "",
      "[Added Lines]",
      "607: static void bson_append( bson *b, const void *data, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "614:     b->cur += 4;",
      "615: }",
      "617: static void bson_append64( bson *b, const void *data ) {",
      "618:     bson_little_endian64( b->cur, data );",
      "619:     b->cur += 8;",
      "620: }",
      "623:     int pos = b->cur - b->data;",
      "624:     char *orig = b->data;",
      "625:     int new_size;",
      "",
      "[Removed Lines]",
      "622: int bson_ensure_space( bson *b, const int bytesNeeded ) {",
      "",
      "[Added Lines]",
      "617: static void bson_append32_as_int( bson *b, int data ) {",
      "618:     bson_little_endian32( b->cur, &data );",
      "619:     b->cur += 4;",
      "620: }",
      "627: int bson_ensure_space( bson *b, const size_t bytesNeeded ) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "657:     if ( ! b->finished ) {",
      "658:         if ( bson_ensure_space( b, 1 ) == BSON_ERROR ) return BSON_ERROR;",
      "659:         bson_append_byte( b, 0 );",
      "661:         bson_little_endian32( b->data, &i );",
      "662:         b->finished = 1;",
      "663:     }",
      "",
      "[Removed Lines]",
      "660:         i = b->cur - b->data;",
      "",
      "[Added Lines]",
      "665:         i = ( int )( b->cur - b->data );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "675:     }",
      "676: }",
      "679:     const int len = strlen( name ) + 1;",
      "681:     if ( b->finished ) {",
      "",
      "[Removed Lines]",
      "678: static int bson_append_estart( bson *b, int type, const char *name, const int dataSize ) {",
      "",
      "[Added Lines]",
      "683: static int bson_append_estart( bson *b, int type, const char *name, const size_t dataSize ) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "742: }",
      "744: static int bson_append_string_base( bson *b, const char *name,",
      "748:     if ( bson_check_string( b, ( const char * )value, sl - 1 ) == BSON_ERROR )",
      "749:         return BSON_ERROR;",
      "750:     if ( bson_append_estart( b, type, name, 4 + sl ) == BSON_ERROR ) {",
      "751:         return BSON_ERROR;",
      "752:     }",
      "754:     bson_append( b , value , sl - 1 );",
      "755:     bson_append( b , \"\\0\" , 1 );",
      "756:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "745:                                     const char *value, int len, bson_type type ) {",
      "747:     int sl = len + 1;",
      "753:     bson_append32( b , &sl );",
      "",
      "[Added Lines]",
      "750:                                     const char *value, size_t len, bson_type type ) {",
      "752:     size_t sl = len + 1;",
      "758:     bson_append32_as_int( b , ( int )sl );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "768:     return bson_append_string_base( b, name, value, strlen ( value ), BSON_CODE );",
      "769: }",
      "772:     return bson_append_string_base( b, name, value, len, BSON_STRING );",
      "773: }",
      "776:     return bson_append_string_base( b, name, value, len, BSON_SYMBOL );",
      "777: }",
      "780:     return bson_append_string_base( b, name, value, len, BSON_CODE );",
      "781: }",
      "783: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name,",
      "787:     if ( !scope ) return BSON_ERROR;",
      "788:     sl = len + 1;",
      "789:     size = 4 + 4 + sl + bson_size( scope );",
      "790:     if ( bson_append_estart( b, BSON_CODEWSCOPE, name, size ) == BSON_ERROR )",
      "791:         return BSON_ERROR;",
      "793:     bson_append32( b, &sl );",
      "794:     bson_append( b, code, sl );",
      "795:     bson_append( b, scope->data, bson_size( scope ) );",
      "",
      "[Removed Lines]",
      "771: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, int len ) {",
      "775: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, int len ) {",
      "779: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, int len ) {",
      "784:         const char *code, int len, const bson *scope ) {",
      "786:     int sl, size;",
      "792:     bson_append32( b, &size );",
      "",
      "[Added Lines]",
      "776: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, size_t len ) {",
      "780: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, size_t len ) {",
      "784: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, size_t len ) {",
      "789:         const char *code, size_t len, const bson *scope ) {",
      "791:     size_t sl, size;",
      "797:     bson_append32_as_int( b, ( int )size );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "800:     return bson_append_code_w_scope_n( b, name, code, strlen ( code ), scope );",
      "801: }",
      "804:     if ( type == BSON_BIN_BINARY_OLD ) {",
      "805:         int subtwolen = len + 4;",
      "806:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+4+len ) == BSON_ERROR )",
      "807:             return BSON_ERROR;",
      "809:         bson_append_byte( b, type );",
      "811:         bson_append( b, str, len );",
      "812:     }",
      "813:     else {",
      "814:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+len ) == BSON_ERROR )",
      "815:             return BSON_ERROR;",
      "817:         bson_append_byte( b, type );",
      "818:         bson_append( b, str, len );",
      "819:     }",
      "",
      "[Removed Lines]",
      "803: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len ) {",
      "808:         bson_append32( b, &subtwolen );",
      "810:         bson_append32( b, &len );",
      "816:         bson_append32( b, &len );",
      "",
      "[Added Lines]",
      "808: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len ) {",
      "813:         bson_append32_as_int( b, ( int )subtwolen );",
      "815:         bson_append32_as_int( b, ( int )len );",
      "821:         bson_append32_as_int( b, ( int )len );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "834: }",
      "836: MONGO_EXPORT int bson_append_regex( bson *b, const char *name, const char *pattern, const char *opts ) {",
      "839:     if ( bson_append_estart( b, BSON_REGEX, name, plen + olen ) == BSON_ERROR )",
      "840:         return BSON_ERROR;",
      "841:     if ( bson_check_string( b, pattern, plen - 1 ) == BSON_ERROR )",
      "",
      "[Removed Lines]",
      "837:     const int plen = strlen( pattern )+1;",
      "838:     const int olen = strlen( opts )+1;",
      "",
      "[Added Lines]",
      "842:     const size_t plen = strlen( pattern )+1;",
      "843:     const size_t olen = strlen( opts )+1;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "856: MONGO_EXPORT int bson_append_element( bson *b, const char *name_or_null, const bson_iterator *elem ) {",
      "857:     bson_iterator next = *elem;",
      "860:     bson_iterator_next( &next );",
      "861:     size = next.cur - elem->cur;",
      "",
      "[Removed Lines]",
      "858:     int size;",
      "",
      "[Added Lines]",
      "863:     size_t size;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "866:         bson_append( b, elem->cur, size );",
      "867:     }",
      "868:     else {",
      "870:         bson_append_estart( b, elem->cur[0], name_or_null, data_size );",
      "871:         bson_append( b, bson_iterator_value( elem ), data_size );",
      "872:     }",
      "",
      "[Removed Lines]",
      "869:         int data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "[Added Lines]",
      "874:         size_t data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "922:     bson_append_byte( b , 0 );",
      "924:     start = b->data + b->stack[ --b->stackPos ];",
      "926:     bson_little_endian32( start, &i );",
      "928:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "925:     i = b->cur - start;",
      "",
      "[Added Lines]",
      "930:     i = ( int )( b->cur - start );",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "950:     bson_free_func( ptr );",
      "951: }",
      "954:     void *p;",
      "955:     p = bson_malloc_func( size );",
      "956:     bson_fatal_msg( !!p, \"malloc() failed\" );",
      "957:     return p;",
      "958: }",
      "961:     void *p;",
      "962:     p = bson_realloc_func( ptr, size );",
      "963:     bson_fatal_msg( !!p, \"realloc() failed\" );",
      "",
      "[Removed Lines]",
      "953: MONGO_EXPORT void *bson_malloc( int size ) {",
      "960: void *bson_realloc( void *ptr, int size ) {",
      "",
      "[Added Lines]",
      "958: MONGO_EXPORT void *bson_malloc( size_t size ) {",
      "965: void *bson_realloc( void *ptr, size_t size ) {",
      "",
      "---------------"
    ],
    "src/bson.h||src/bson.h": [
      "File: src/bson.h -> src/bson.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "172: MONGO_EXPORT int bson_size( const bson *b );",
      "",
      "[Removed Lines]",
      "173: MONGO_EXPORT int bson_buffer_size( const bson *b );",
      "",
      "[Added Lines]",
      "173: MONGO_EXPORT size_t bson_buffer_size( const bson *b );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "605: int bson_ensure_space( bson *b, const int bytesNeeded );",
      "",
      "[Added Lines]",
      "605: int bson_ensure_space( bson *b, const size_t bytesNeeded );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, int size, const bson *scope );",
      "",
      "[Added Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, size_t size, const bson *scope );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len );",
      "",
      "[Added Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "980: MONGO_EXPORT void *bson_malloc( int size );",
      "",
      "[Added Lines]",
      "980: MONGO_EXPORT void *bson_malloc( size_t size );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "993: void *bson_realloc( void *ptr, int size );",
      "",
      "[Added Lines]",
      "993: void *bson_realloc( void *ptr, size_t size );",
      "",
      "---------------"
    ],
    "src/encoding.c||src/encoding.c": [
      "File: src/encoding.c -> src/encoding.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102: }",
      "106:     int result = 0;",
      "108:     if( length >= 4 ) {",
      "",
      "[Removed Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const int length ) {",
      "",
      "[Added Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const size_t length ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120: }",
      "122: static int bson_validate_string( bson *b, const unsigned char *string,",
      "124:                                  const char check_dollar ) {",
      "127:     int sequence_length = 1;",
      "129:     if( check_dollar && string[0] == '$' ) {",
      "",
      "[Removed Lines]",
      "123:                                  const int length, const char check_utf8, const char check_dot,",
      "126:     int position = 0;",
      "",
      "[Added Lines]",
      "123:                                  const size_t length, const char check_utf8, const char check_dot,",
      "126:     size_t position = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "157: int bson_check_string( bson *b, const char *string,",
      "160:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 0, 0 );",
      "161: }",
      "163: int bson_check_field_name( bson *b, const char *string,",
      "166:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 1, 1 );",
      "167: }",
      "",
      "[Removed Lines]",
      "158:                        const int length ) {",
      "164:                            const int length ) {",
      "",
      "[Added Lines]",
      "158:                        const size_t length ) {",
      "164:                            const size_t length ) {",
      "",
      "---------------"
    ],
    "src/encoding.h||src/encoding.h": [
      "File: src/encoding.h -> src/encoding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: int bson_check_field_name( bson *b, const char *string,",
      "",
      "[Removed Lines]",
      "38:                            const int length );",
      "",
      "[Added Lines]",
      "38:                            const size_t length );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50: bson_bool_t bson_check_string( bson *b, const char *string,",
      "53: MONGO_EXTERN_C_END",
      "54: #endif",
      "",
      "[Removed Lines]",
      "51:                                const int length );",
      "",
      "[Added Lines]",
      "51:                                const size_t length );",
      "",
      "---------------"
    ],
    "src/env.c||src/env.c": [
      "File: src/env.c -> src/env.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     return closesocket( socket );",
      "39: }",
      "42:     const char *cbuf = buf;",
      "43:     int flags = 0;",
      "45:     while ( len ) {",
      "47:         if ( sent == -1 ) {",
      "48:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "49:             conn->connected = 0;",
      "",
      "[Removed Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "46:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "46:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     return MONGO_OK;",
      "57: }",
      "60:     char *cbuf = buf;",
      "62:     while ( len ) {",
      "64:         if ( sent == 0 || sent == -1 ) {",
      "65:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "66:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "63:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "63:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "225:     return 0;",
      "226: }",
      "229:     const char *cbuf = buf;",
      "230: #ifdef __APPLE__",
      "231:     int flags = 0;",
      "",
      "[Removed Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "234: #endif",
      "236:     while ( len ) {",
      "238:         if ( sent == -1 ) {",
      "239:             if (errno == EPIPE)",
      "240:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "237:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "237:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "248:     return MONGO_OK;",
      "249: }",
      "252:     char *cbuf = buf;",
      "253:     while ( len ) {",
      "255:         if ( sent == 0 || sent == -1 ) {",
      "256:             __mongo_set_error( conn, MONGO_IO_ERROR, strerror( errno ), errno );",
      "257:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "254:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "254:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "443: #endif",
      "444: }",
      "447:     const char *cbuf = buf;",
      "448: #ifdef _WIN32",
      "449:     int flags = 0;",
      "",
      "[Removed Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "456: #endif",
      "458:     while ( len ) {",
      "460:         if ( sent == -1 ) {",
      "461:             if (errno == EPIPE)",
      "462:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "459:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "459:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "470:     return MONGO_OK;",
      "471: }",
      "474:     char *cbuf = buf;",
      "475:     while ( len ) {",
      "477:         if ( sent == 0 || sent == -1 ) {",
      "478:             conn->err = MONGO_IO_ERROR;",
      "479:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "476:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "476:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------"
    ],
    "src/env.h||src/env.h": [
      "File: src/env.h -> src/env.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: int mongo_env_set_socket_op_timeout( mongo *conn, int millis );",
      "30: int mongo_env_socket_connect( mongo *conn, const char *host, int port );",
      "",
      "[Removed Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, int len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, int len );",
      "",
      "[Added Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, size_t len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len );",
      "",
      "---------------"
    ],
    "src/gridfs.c||src/gridfs.c": [
      "File: src/gridfs.c -> src/gridfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "228: MONGO_EXPORT void gridfile_write_buffer( gridfile *gfile, const char *data,",
      "229:         gridfs_offset length ) {",
      "234:     char *buffer;",
      "235:     bson *oChunk;",
      "236:     gridfs_offset to_write = length + gfile->pending_len;",
      "",
      "[Removed Lines]",
      "231:     int bytes_left = 0;",
      "232:     int data_partial_len = 0;",
      "233:     int chunks_to_write = 0;",
      "",
      "[Added Lines]",
      "231:     size_t bytes_left = 0;",
      "232:     size_t data_partial_len = 0;",
      "233:     size_t chunks_to_write = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "590:     }",
      "591: }",
      "594:     bson_iterator it;",
      "595:     bson_oid_t id;",
      "596:     bson gte;",
      "",
      "[Removed Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size ) {",
      "",
      "[Added Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "605:     bson_init( &query );",
      "606:     bson_append_oid( &query, \"files_id\", &id );",
      "607:     if ( size == 1 ) {",
      "609:     }",
      "610:     else {",
      "611:         bson_init( &gte );",
      "613:         bson_finish( &gte );",
      "614:         bson_append_bson( &query, \"n\", &gte );",
      "615:         bson_destroy( &gte );",
      "",
      "[Removed Lines]",
      "608:         bson_append_int( &query, \"n\", start );",
      "612:         bson_append_int( &gte, \"$gte\", start );",
      "",
      "[Added Lines]",
      "608:         bson_append_int( &query, \"n\", (int)start );",
      "612:         bson_append_int( &gte, \"$gte\", (int)start );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "626:     bson_finish( &command );",
      "628:     cursor = mongo_find( gfile->gfs->client, gfile->gfs->chunks_ns,",
      "631:     bson_destroy( &command );",
      "632:     bson_destroy( &query );",
      "",
      "[Removed Lines]",
      "629:                          &command, NULL, size, 0, 0 );",
      "",
      "[Added Lines]",
      "629:                          &command, NULL, (int)size, 0, 0 );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:     mongo_cursor *chunks;",
      "660:     bson chunk;",
      "665:     gridfs_offset chunksize;",
      "666:     gridfs_offset contentlength;",
      "667:     gridfs_offset bytes_left;",
      "",
      "[Removed Lines]",
      "662:     int first_chunk;",
      "663:     int last_chunk;",
      "664:     int total_chunks;",
      "",
      "[Added Lines]",
      "662:     size_t first_chunk;",
      "663:     size_t last_chunk;",
      "664:     size_t total_chunks;",
      "",
      "---------------"
    ],
    "src/gridfs.h||src/gridfs.h": [
      "File: src/gridfs.h -> src/gridfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size );",
      "",
      "[Added Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size );",
      "",
      "---------------"
    ],
    "src/mongo.c||src/mongo.c": [
      "File: src/mongo.c -> src/mongo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err, const char *str,",
      "114:                                      int errcode ) {",
      "117:     conn->err = err;",
      "118:     conn->errcode = errcode;",
      "",
      "[Removed Lines]",
      "115:     int errstr_size, str_size;",
      "",
      "[Added Lines]",
      "115:     size_t errstr_size, str_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "266: static const int ZERO = 0;",
      "267: static const int ONE = 1;",
      "269:     mongo_message *mm = ( mongo_message * )bson_malloc( len );",
      "271:     if ( !id )",
      "272:         id = rand();",
      "276:     mm->head.id = id;",
      "277:     mm->head.responseTo = responseTo;",
      "278:     mm->head.op = op;",
      "",
      "[Removed Lines]",
      "268: static mongo_message *mongo_message_create( int len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = len;",
      "",
      "[Added Lines]",
      "268: static mongo_message *mongo_message_create( size_t len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = ( int )len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "344: }",
      "348:     memcpy( start , data , len );",
      "349:     return start + len;",
      "350: }",
      "",
      "[Removed Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , int len ) {",
      "",
      "[Added Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "900:     mongo_write_concern *write_concern = NULL;",
      "901:     int i;",
      "902:     char *data;",
      "906:     if( mongo_validate_ns( conn, ns ) != MONGO_OK )",
      "907:         return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "903:     int overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     int size = overhead;",
      "",
      "[Added Lines]",
      "903:     size_t overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     size_t size = overhead;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1204:     }",
      "1205:     else {",
      "1206:         char *data;",
      "1208:         int limit = 0;",
      "1209:         mongo_message *mm;",
      "",
      "[Removed Lines]",
      "1207:         int sl = strlen( cursor->ns )+1;",
      "",
      "[Added Lines]",
      "1207:         size_t sl = strlen( cursor->ns )+1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1516:     int ret = MONGO_OK;",
      "1517:     bson response = {NULL, 0};",
      "1518:     bson fields;",
      "1521:     int res, success = 0;",
      "",
      "[Removed Lines]",
      "1519:     int sl = strlen( db );",
      "",
      "[Added Lines]",
      "1519:     size_t sl = strlen( db );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1674:     mongo_md5_byte_t digest[16];",
      "1676:     mongo_md5_init( &st );",
      "1678:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )\":mongo:\", 7 );",
      "1680:     mongo_md5_finish( &st, digest );",
      "1681:     digest2hex( digest, hex_digest );",
      "1682: }",
      "",
      "[Removed Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );",
      "",
      "[Added Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, ( int )strlen( pass ) );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1734:     mongo_pass_digest( user, pass, hex_digest );",
      "1736:     mongo_md5_init( &st );",
      "1739:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )hex_digest, 32 );",
      "1740:     mongo_md5_finish( &st, digest );",
      "1741:     digest2hex( digest, hex_digest );",
      "",
      "[Removed Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "",
      "[Added Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, ( int )strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97d6205f3cd538c6a1427e03ecd5b46fa7a757a5",
      "candidate_info": {
        "commit_hash": "97d6205f3cd538c6a1427e03ecd5b46fa7a757a5",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/97d6205f3cd538c6a1427e03ecd5b46fa7a757a5",
        "files": [
          "src/bson.c",
          "src/bson.h"
        ],
        "message": "Add static helper _bson_position(.)",
        "before_after_code_files": [
          "src/bson.c||src/bson.c",
          "src/bson.h||src/bson.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bson.c||src/bson.c",
            "src/bson.h||src/bson.h"
          ],
          "candidate": [
            "src/bson.c||src/bson.c",
            "src/bson.h||src/bson.h"
          ]
        }
      },
      "candidate_diff": {
        "src/bson.c||src/bson.c": [
          "File: src/bson.c -> src/bson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: static int _bson_errprintf( const char *, ... );",
          "52: bson_printf_func bson_errprintf = _bson_errprintf;",
          "55: static int ( *oid_fuzz_func )( void ) = NULL;",
          "56: static int ( *oid_inc_func )( void )  = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: static size_t _bson_position( const bson *b );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:     return i;",
          "117: }",
          "119: MONGO_EXPORT size_t bson_buffer_size( const bson *b ) {",
          "121: }",
          "",
          "[Removed Lines]",
          "120:     return (b->cur - b->data + 1);",
          "",
          "[Added Lines]",
          "121: static size_t _bson_position( const bson *b ) {",
          "122:     return b->cur - b->data;",
          "123: }",
          "126:     return _bson_position(b) + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667: }",
          "669: int bson_ensure_space( bson *b, const size_t bytesNeeded ) {",
          "671:     char *orig = b->data;",
          "672:     int new_size;",
          "",
          "[Removed Lines]",
          "670:     size_t pos = b->cur - b->data;",
          "",
          "[Added Lines]",
          "676:     size_t pos = _bson_position(b);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "705:         bson_fatal_msg(!b->stackPos, \"Subobject not finished before bson_finish().\");",
          "706:         if ( bson_ensure_space( b, 1 ) == BSON_ERROR ) return BSON_ERROR;",
          "707:         bson_append_byte( b, 0 );",
          "709:             b->err = BSON_SIZE_OVERFLOW;",
          "710:             return BSON_ERROR;",
          "711:         }",
          "713:         bson_little_endian32( b->data, &i );",
          "714:         b->finished = 1;",
          "715:     }",
          "",
          "[Removed Lines]",
          "708:         if ( b->cur - b->data >= INT32_MAX ) {",
          "712:         i = ( int )( b->cur - b->data );",
          "",
          "[Added Lines]",
          "714:         if ( _bson_position(b) >= INT32_MAX ) {",
          "718:         i = ( int ) _bson_position(b);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "976: MONGO_EXPORT int bson_append_start_object( bson *b, const char *name ) {",
          "977:     if ( bson_append_estart( b, BSON_OBJECT, name, 5 ) == BSON_ERROR ) return BSON_ERROR;",
          "978:     if ( b->stackPos >= b->stackSize && _bson_append_grow_stack( b ) == BSON_ERROR ) return BSON_ERROR;",
          "980:     bson_append32( b , &zero );",
          "981:     return BSON_OK;",
          "982: }",
          "",
          "[Removed Lines]",
          "979:     b->stackPtr[ b->stackPos++ ] = b->cur - b->data;",
          "",
          "[Added Lines]",
          "985:     b->stackPtr[ b->stackPos++ ] = _bson_position(b);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "984: MONGO_EXPORT int bson_append_start_array( bson *b, const char *name ) {",
          "985:     if ( bson_append_estart( b, BSON_ARRAY, name, 5 ) == BSON_ERROR ) return BSON_ERROR;",
          "986:     if ( b->stackPos >= b->stackSize && _bson_append_grow_stack( b ) == BSON_ERROR ) return BSON_ERROR;",
          "988:     bson_append32( b , &zero );",
          "989:     return BSON_OK;",
          "990: }",
          "",
          "[Removed Lines]",
          "987:     b->stackPtr[ b->stackPos++ ] = b->cur - b->data;",
          "",
          "[Added Lines]",
          "993:     b->stackPtr[ b->stackPos++ ] = _bson_position(b);",
          "",
          "---------------"
        ],
        "src/bson.h||src/bson.h": [
          "File: src/bson.h -> src/bson.h"
        ]
      }
    },
    {
      "candidate_hash": "4872573fe00507233a9b663ffff25510fb924eea",
      "candidate_info": {
        "commit_hash": "4872573fe00507233a9b663ffff25510fb924eea",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/4872573fe00507233a9b663ffff25510fb924eea",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h"
        ],
        "message": "Add const qualifiers",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   return gfs->caseInsensitive;",
          "220: }",
          "",
          "[Removed Lines]",
          "218: MONGO_EXPORT bson_bool_t gridfs_get_caseInsensitive(gridfs *gfs){",
          "",
          "[Added Lines]",
          "218: MONGO_EXPORT bson_bool_t gridfs_get_caseInsensitive( const gridfs *gfs ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:   mongo_cursor_destroy(files);",
          "437: }",
          "441:   bson uploadDate = INIT_BSON;",
          "442:   bson finalQuery = INIT_BSON;",
          "",
          "[Removed Lines]",
          "439: MONGO_EXPORT int gridfs_find_query(gridfs *gfs, bson *query, gridfile *gfile) {",
          "",
          "[Added Lines]",
          "439: MONGO_EXPORT int gridfs_find_query( gridfs *gfs, const bson *query, gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "505:   gfile->gfs = gfs;",
          "506:   gfile->pos = 0;",
          "507:   gfile->pending_len = 0;",
          "",
          "[Removed Lines]",
          "504: MONGO_EXPORT int gridfile_init(gridfs *gfs, bson *meta, gridfile *gfile){",
          "",
          "[Added Lines]",
          "504: MONGO_EXPORT int gridfile_init( gridfs *gfs, const bson *meta, gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "676:   }",
          "677: }",
          "680:   bson_iterator it = INIT_ITERATOR;",
          "682:   if( gfile->chunkSize ) {",
          "",
          "[Removed Lines]",
          "679: MONGO_EXPORT int gridfile_get_chunksize(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "679: MONGO_EXPORT int gridfile_get_chunksize( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "690:   }",
          "691: }",
          "694:   gridfs_offset estimatedLen;",
          "695:   estimatedLen = gfile->pending_len ? gfile->chunk_num * gridfile_get_chunksize( gfile ) + gfile->pending_len : gfile->length;",
          "696:   return estimatedLen > gfile->length ? estimatedLen : gfile->length;",
          "697: }",
          "700:   bson_iterator it = INIT_ITERATOR;",
          "702:   if (bson_find(&it, gfile->meta, \"contentType\")) {",
          "",
          "[Removed Lines]",
          "693: MONGO_EXPORT gridfs_offset gridfile_get_contentlength(gridfile *gfile) {",
          "699: MONGO_EXPORT const char *gridfile_get_contenttype(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "693: MONGO_EXPORT gridfs_offset gridfile_get_contentlength( const gridfile *gfile ) {",
          "699: MONGO_EXPORT const char *gridfile_get_contenttype( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "706:   }",
          "707: }",
          "710:   bson_iterator it = INIT_ITERATOR;",
          "712:   if( bson_find(&it, gfile->meta, \"uploadDate\") != BSON_EOO) {",
          "",
          "[Removed Lines]",
          "709: MONGO_EXPORT bson_date_t gridfile_get_uploaddate(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "709: MONGO_EXPORT bson_date_t gridfile_get_uploaddate( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "716:   }",
          "717: }",
          "720:   bson_iterator it = INIT_ITERATOR;",
          "722:   if( bson_find(&it, gfile->meta, \"md5\") != BSON_EOO ) {",
          "",
          "[Removed Lines]",
          "719: MONGO_EXPORT const char *gridfile_get_md5(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "719: MONGO_EXPORT const char *gridfile_get_md5( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "730:   gfile->flags = flags;",
          "731: }",
          "734:   return gfile->flags;",
          "735: }",
          "",
          "[Removed Lines]",
          "733: MONGO_EXPORT int gridfile_get_flags(gridfile *gfile){",
          "",
          "[Added Lines]",
          "733: MONGO_EXPORT int gridfile_get_flags( const gridfile *gfile ) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "744:   }",
          "745: }",
          "748:   bson_iterator it = INIT_ITERATOR;",
          "750:   if( bson_find(&it, gfile->meta, name) != BSON_EOO) {",
          "",
          "[Removed Lines]",
          "747: MONGO_EXPORT bson_bool_t gridfile_get_boolean(gridfile *gfile, const char *name) {",
          "",
          "[Added Lines]",
          "747: MONGO_EXPORT bson_bool_t gridfile_get_boolean( const gridfile *gfile, const char *name ) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "754:   }",
          "755: }",
          "758:   bson_iterator it = INIT_ITERATOR;",
          "760:   if (bson_find(&it, gfile->meta, \"metadata\")) {",
          "",
          "[Removed Lines]",
          "757: MONGO_EXPORT void gridfile_get_metadata(gridfile *gfile, bson *out, bson_bool_t copyData) {",
          "",
          "[Added Lines]",
          "757: MONGO_EXPORT void gridfile_get_metadata( const gridfile *gfile, bson *out, bson_bool_t copyData ) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "772:   bson_iterator it = INIT_ITERATOR;",
          "773:   gridfs_offset length;",
          "774:   gridfs_offset chunkSize;",
          "",
          "[Removed Lines]",
          "771: MONGO_EXPORT int gridfile_get_numchunks(gridfile *gfile) {",
          "",
          "[Added Lines]",
          "771: MONGO_EXPORT int gridfile_get_numchunks( const gridfile *gfile ) {",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "172: MONGO_EXPORT int gridfs_find_query( gridfs *gfs, bson *query, gridfile *gfile );",
          "",
          "[Added Lines]",
          "172: MONGO_EXPORT int gridfs_find_query( gridfs *gfs, const bson *query, gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "193: MONGO_EXPORT int gridfile_init( gridfs *gfs, bson *meta, gridfile *gfile );",
          "",
          "[Added Lines]",
          "193: MONGO_EXPORT int gridfile_init( gridfs *gfs, const bson *meta, gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "206: MONGO_EXPORT bson_bool_t gridfile_exists( gridfile *gfile );",
          "",
          "[Added Lines]",
          "206: MONGO_EXPORT bson_bool_t gridfile_exists( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "214: MONGO_EXPORT const char *gridfile_get_filename( gridfile *gfile );",
          "",
          "[Added Lines]",
          "214: MONGO_EXPORT const char *gridfile_get_filename( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "222: MONGO_EXPORT int gridfile_get_chunksize( gridfile *gfile );",
          "",
          "[Added Lines]",
          "222: MONGO_EXPORT int gridfile_get_chunksize( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "231: MONGO_EXPORT gridfs_offset gridfile_get_contentlength( gridfile *gfile );",
          "",
          "[Added Lines]",
          "231: MONGO_EXPORT gridfs_offset gridfile_get_contentlength( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241: MONGO_EXPORT const char *gridfile_get_contenttype( gridfile *gfile );",
          "",
          "[Added Lines]",
          "241: MONGO_EXPORT const char *gridfile_get_contenttype( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "250: MONGO_EXPORT bson_date_t gridfile_get_uploaddate( gridfile *gfile );",
          "",
          "[Added Lines]",
          "250: MONGO_EXPORT bson_date_t gridfile_get_uploaddate( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "259: MONGO_EXPORT const char *gridfile_get_md5( gridfile *gfile );",
          "",
          "[Added Lines]",
          "259: MONGO_EXPORT const char *gridfile_get_md5( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "288: MONGO_EXPORT bson_bool_t gridfs_get_caseInsensitive(gridfs *gfs);",
          "",
          "[Added Lines]",
          "288: MONGO_EXPORT bson_bool_t gridfs_get_caseInsensitive( const gridfs *gfs );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "314: MONGO_EXPORT int gridfile_get_flags(gridfile *gfile);",
          "",
          "[Added Lines]",
          "314: MONGO_EXPORT int gridfile_get_flags( const gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "325:                                   const char *name );",
          "",
          "[Removed Lines]",
          "324: MONGO_EXPORT bson_bool_t gridfile_get_boolean( gridfile *gfile,",
          "",
          "[Added Lines]",
          "324: MONGO_EXPORT bson_bool_t gridfile_get_boolean( const gridfile *gfile,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "341: MONGO_EXPORT void gridfile_get_metadata( gridfile *gfile, bson* metadata, bson_bool_t copyData );",
          "",
          "[Added Lines]",
          "341: MONGO_EXPORT void gridfile_get_metadata( const gridfile *gfile, bson* metadata, bson_bool_t copyData );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "349: MONGO_EXPORT int gridfile_get_numchunks( gridfile *gfile );",
          "",
          "[Added Lines]",
          "349: MONGO_EXPORT int gridfile_get_numchunks( const gridfile *gfile );",
          "",
          "---------------"
        ]
      }
    }
  ]
}