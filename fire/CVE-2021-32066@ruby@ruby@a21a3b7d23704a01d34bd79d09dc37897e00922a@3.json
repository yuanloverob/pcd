{
  "cve_id": "CVE-2021-32066",
  "cve_desc": "An issue was discovered in Ruby through 2.6.7, 2.7.x through 2.7.3, and 3.x through 3.0.1. Net::IMAP does not raise an exception when StartTLS fails with an an unknown response, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"",
  "repo": "ruby/ruby",
  "patch_hash": "a21a3b7d23704a01d34bd79d09dc37897e00922a",
  "patch_info": {
    "commit_hash": "a21a3b7d23704a01d34bd79d09dc37897e00922a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/a21a3b7d23704a01d34bd79d09dc37897e00922a",
    "files": [
      "lib/net/imap.rb",
      "test/net/imap/test_imap.rb",
      "version.h"
    ],
    "message": "Fix StartTLS stripping vulnerability\n\nReported by Alexandr Savca in https://hackerone.com/reports/1178562\n\nCo-authored-by: Shugo Maeda <shugo@ruby-lang.org>",
    "before_after_code_files": [
      "lib/net/imap.rb||lib/net/imap.rb",
      "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "lib/net/imap.rb||lib/net/imap.rb": [
      "File: lib/net/imap.rb -> lib/net/imap.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1216:       end",
      "1217:       resp = @tagged_responses.delete(tag)",
      "1218:       case resp.name",
      "1219:       when /\\A(?:NO)\\z/ni",
      "1220:         raise NoResponseError, resp",
      "1221:       when /\\A(?:BAD)\\z/ni",
      "1222:         raise BadResponseError, resp",
      "1223:       else",
      "1225:       end",
      "1226:     end",
      "",
      "[Removed Lines]",
      "1224:         return resp",
      "",
      "[Added Lines]",
      "1219:       when /\\A(?:OK)\\z/ni",
      "1220:         return resp",
      "1226:         raise UnknownResponseError, resp",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3717:     class ByeResponseError < ResponseError",
      "3718:     end",
      "3720:     RESPONSE_ERRORS = Hash.new(ResponseError)",
      "3721:     RESPONSE_ERRORS[\"NO\"] = NoResponseError",
      "3722:     RESPONSE_ERRORS[\"BAD\"] = BadResponseError",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3722:     # Error raised upon an unknown response from the server.",
      "3723:     class UnknownResponseError < ResponseError",
      "3724:     end",
      "",
      "---------------"
    ],
    "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb": [
      "File: test/net/imap/test_imap.rb -> test/net/imap/test_imap.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:         imap.disconnect",
      "128:       end",
      "129:     end",
      "130:   end",
      "132:   def start_server",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:     def test_starttls_stripping",
      "132:       starttls_stripping_test do |port|",
      "133:         imap = Net::IMAP.new(\"localhost\", :port => port)",
      "134:         assert_raise(Net::IMAP::UnknownResponseError) do",
      "135:           imap.starttls(:ca_file => CA_FILE)",
      "136:         end",
      "137:         imap",
      "138:       end",
      "139:     end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "784:     end",
      "785:   end",
      "787:   def create_tcp_server",
      "788:     return TCPServer.new(server_addr, 0)",
      "789:   end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "797:   def starttls_stripping_test",
      "798:     server = create_tcp_server",
      "799:     port = server.addr[1]",
      "800:     start_server do",
      "801:       sock = server.accept",
      "802:       begin",
      "803:         sock.print(\"* OK test server\\r\\n\")",
      "804:         sock.gets",
      "805:         sock.print(\"RUBY0001 BUG unhandled command\\r\\n\")",
      "806:       ensure",
      "807:         sock.close",
      "808:         server.close",
      "809:       end",
      "810:     end",
      "811:     begin",
      "812:       imap = yield(port)",
      "813:     ensure",
      "814:       imap.disconnect if imap && !imap.disconnected?",
      "815:     end",
      "816:   end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
      "3: #define RUBY_VERSION_TEENY 4",
      "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
      "7: #define RUBY_RELEASE_YEAR 2021",
      "8: #define RUBY_RELEASE_MONTH 7",
      "",
      "[Removed Lines]",
      "5: #define RUBY_PATCHLEVEL 190",
      "",
      "[Added Lines]",
      "5: #define RUBY_PATCHLEVEL 191",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "61a02168f7ba353a2838f2783f291a816d7e0c90",
      "candidate_info": {
        "commit_hash": "61a02168f7ba353a2838f2783f291a816d7e0c90",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/61a02168f7ba353a2838f2783f291a816d7e0c90",
        "files": [
          "load.c",
          "test/ruby/test_require.rb",
          "version.h"
        ],
        "message": "merge revision(s) ddb32e66160ab50849419ef7c7ac584913b79c34: [Backport #18173]\n\n\t[Bug #18173] Update loaded_features_index\n\n\tIf $LOADED_FEATURES is changed in the just required file, also the\n\tindex table needs to be updated before loaded_features_snapshot is\n\treset.  If the snapshot is reset without updating the table, the\n\tname of the added feature will not be found.\n\t---\n\t load.c                    |  1 +\n\t test/ruby/test_require.rb | 17 +++++++++++++++++\n\t 2 files changed, 18 insertions(+)",
        "before_after_code_files": [
          "load.c||load.c",
          "test/ruby/test_require.rb||test/ruby/test_require.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "load.c||load.c": [
          "File: load.c -> load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:     }",
          "598:     rb_str_freeze(feature);",
          "600:     rb_ary_push(features, rb_fstring(feature));",
          "601:     features_index_add(feature, INT2FIX(RARRAY_LEN(features)-1));",
          "602:     reset_loaded_features_snapshot();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:     get_loaded_features_index();",
          "",
          "---------------"
        ],
        "test/ruby/test_require.rb||test/ruby/test_require.rb": [
          "File: test/ruby/test_require.rb -> test/ruby/test_require.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "831:     }",
          "832:   end",
          "834:   if defined?($LOAD_PATH.resolve_feature_path)",
          "835:     def test_resolve_feature_path",
          "836:       paths, loaded = $:.dup, $\".dup",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:   def test_provide_in_required_file",
          "835:     paths, loaded = $:.dup, $\".dup",
          "836:     Dir.mktmpdir do |tmp|",
          "837:       provide = File.realdirpath(\"provide.rb\", tmp)",
          "838:       File.write(File.join(tmp, \"target.rb\"), \"raise __FILE__\\n\")",
          "839:       File.write(provide, '$\" << '\"'target.rb'\\n\")",
          "840:       $:.replace([tmp])",
          "841:       assert(require(\"provide\"))",
          "842:       assert(!require(\"target\"))",
          "843:       assert_equal($\".pop, provide)",
          "844:       assert_equal($\".pop, \"target.rb\")",
          "845:     end",
          "846:   ensure",
          "847:     $:.replace(paths)",
          "848:     $\".replace(loaded)",
          "849:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 5",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "8: #define RUBY_RELEASE_MONTH 11",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 198",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 199",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ca1399150ed4eacfd2fe1ee251b966f8d1ee469",
      "candidate_info": {
        "commit_hash": "3ca1399150ed4eacfd2fe1ee251b966f8d1ee469",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/3ca1399150ed4eacfd2fe1ee251b966f8d1ee469",
        "files": [
          "lib/net/ftp.rb",
          "test/net/ftp/test_ftp.rb",
          "version.h"
        ],
        "message": "Ignore IP addresses in PASV responses by default, and add new option use_pasv_ip\n\nThis fixes CVE-2021-81810.\nReported by Alexandr Savca.\n\nCo-authored-by: Shugo Maeda <shugo@ruby-lang.org>",
        "before_after_code_files": [
          "lib/net/ftp.rb||lib/net/ftp.rb",
          "test/net/ftp/test_ftp.rb||test/net/ftp/test_ftp.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/net/ftp.rb||lib/net/ftp.rb": [
          "File: lib/net/ftp.rb -> lib/net/ftp.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     # When +true+, the connection is in passive mode.  Default: +true+.",
          "98:     attr_accessor :passive",
          "100:     # When +true+, all traffic to and from the server is written",
          "101:     # to +$stdout+.  Default: +false+.",
          "102:     attr_accessor :debug_mode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     # When +true+, use the IP address in PASV responses.  Otherwise, it uses",
          "101:     # the same IP address for the control connection.  Default: +false+.",
          "102:     attr_accessor :use_pasv_ip",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:     #                          handshake.",
          "206:     #                          See Net::FTP#ssl_handshake_timeout for",
          "207:     #                          details.  Default: +nil+.",
          "208:     # debug_mode::  When +true+, all traffic to and from the server is",
          "209:     #               written to +$stdout+.  Default: +false+.",
          "210:     #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     # use_pasv_ip::  When +true+, use the IP address in PASV responses.",
          "213:     #                Otherwise, it uses the same IP address for the control",
          "214:     #                connection.  Default: +false+.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:       @open_timeout = options[:open_timeout]",
          "266:       @ssl_handshake_timeout = options[:ssl_handshake_timeout]",
          "267:       @read_timeout = options[:read_timeout] || 60",
          "268:       if host",
          "269:         connect(host, options[:port] || FTP_PORT)",
          "270:         if options[:username]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:       @use_pasv_ip = options[:use_pasv_ip] || false",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1370:         raise FTPReplyError, resp",
          "1371:       end",
          "1372:       if m = /\\((?<host>\\d+(,\\d+){3}),(?<port>\\d+,\\d+)\\)/.match(resp)",
          "1374:       else",
          "1375:         raise FTPProtoError, resp",
          "1376:       end",
          "",
          "[Removed Lines]",
          "1373:         return parse_pasv_ipv4_host(m[\"host\"]), parse_pasv_port(m[\"port\"])",
          "",
          "[Added Lines]",
          "1381:         if @use_pasv_ip",
          "1382:           host = parse_pasv_ipv4_host(m[\"host\"])",
          "1383:         else",
          "1384:           host = @bare_sock.remote_address.ip_address",
          "1385:         end",
          "1386:         return host, parse_pasv_port(m[\"port\"])",
          "",
          "---------------"
        ],
        "test/net/ftp/test_ftp.rb||test/net/ftp/test_ftp.rb": [
          "File: test/net/ftp/test_ftp.rb -> test/net/ftp/test_ftp.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   end",
          "63:   def test_parse227",
          "65:     host, port = ftp.send(:parse227, \"227 Entering Passive Mode (192,168,0,1,12,34)\")",
          "66:     assert_equal(\"192.168.0.1\", host)",
          "67:     assert_equal(3106, port)",
          "",
          "[Removed Lines]",
          "64:     ftp = Net::FTP.new",
          "",
          "[Added Lines]",
          "64:     ftp = Net::FTP.new(nil, use_pasv_ip: true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     assert_raise(Net::FTPProtoError) do",
          "81:       ftp.send(:parse227, \"227 ) foo bar (\")",
          "82:     end",
          "83:   end",
          "85:   def test_parse228",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     ftp = Net::FTP.new",
          "85:     sock = OpenStruct.new",
          "86:     sock.remote_address = OpenStruct.new",
          "87:     sock.remote_address.ip_address = \"10.0.0.1\"",
          "88:     ftp.instance_variable_set(:@bare_sock, sock)",
          "89:     host, port = ftp.send(:parse227, \"227 Entering Passive Mode (192,168,0,1,12,34)\")",
          "90:     assert_equal(\"10.0.0.1\", host)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2459:     end",
          "2460:   end",
          "2462:   private",
          "2466:     @thread = Thread.start do",
          "2467:       if sleep_time",
          "2468:         sleep(sleep_time)",
          "",
          "[Removed Lines]",
          "2464:   def create_ftp_server(sleep_time = nil)",
          "2465:     server = TCPServer.new(SERVER_ADDR, 0)",
          "",
          "[Added Lines]",
          "2470:   def test_ignore_pasv_ip",
          "2471:     commands = []",
          "2472:     binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3",
          "2473:     server = create_ftp_server(nil, \"127.0.0.1\") { |sock|",
          "2474:       sock.print(\"220 (test_ftp).\\r\\n\")",
          "2475:       commands.push(sock.gets)",
          "2476:       sock.print(\"331 Please specify the password.\\r\\n\")",
          "2477:       commands.push(sock.gets)",
          "2478:       sock.print(\"230 Login successful.\\r\\n\")",
          "2479:       commands.push(sock.gets)",
          "2480:       sock.print(\"200 Switching to Binary mode.\\r\\n\")",
          "2481:       line = sock.gets",
          "2482:       commands.push(line)",
          "2483:       data_server = TCPServer.new(\"127.0.0.1\", 0)",
          "2484:       port = data_server.local_address.ip_port",
          "2485:       sock.printf(\"227 Entering Passive Mode (999,0,0,1,%s).\\r\\n\",",
          "2486:                   port.divmod(256).join(\",\"))",
          "2487:       commands.push(sock.gets)",
          "2488:       sock.print(\"150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\\r\\n\")",
          "2489:       conn = data_server.accept",
          "2490:       binary_data.scan(/.{1,1024}/nm) do |s|",
          "2491:         conn.print(s)",
          "2492:       end",
          "2493:       conn.shutdown(Socket::SHUT_WR)",
          "2494:       conn.read",
          "2495:       conn.close",
          "2496:       data_server.close",
          "2497:       sock.print(\"226 Transfer complete.\\r\\n\")",
          "2498:     }",
          "2499:     begin",
          "2500:       begin",
          "2501:         ftp = Net::FTP.new",
          "2502:         ftp.passive = true",
          "2503:         ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait",
          "2504:         ftp.connect(\"127.0.0.1\", server.port)",
          "2505:         ftp.login",
          "2506:         assert_match(/\\AUSER /, commands.shift)",
          "2507:         assert_match(/\\APASS /, commands.shift)",
          "2508:         assert_equal(\"TYPE I\\r\\n\", commands.shift)",
          "2509:         buf = ftp.getbinaryfile(\"foo\", nil)",
          "2510:         assert_equal(binary_data, buf)",
          "2511:         assert_equal(Encoding::ASCII_8BIT, buf.encoding)",
          "2512:         assert_equal(\"PASV\\r\\n\", commands.shift)",
          "2513:         assert_equal(\"RETR foo\\r\\n\", commands.shift)",
          "2514:         assert_equal(nil, commands.shift)",
          "2515:       ensure",
          "2516:         ftp.close if ftp",
          "2517:       end",
          "2518:     ensure",
          "2519:       server.close",
          "2520:     end",
          "2521:   end",
          "2523:   def test_use_pasv_ip",
          "2524:     commands = []",
          "2525:     binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3",
          "2526:     server = create_ftp_server(nil, \"127.0.0.1\") { |sock|",
          "2527:       sock.print(\"220 (test_ftp).\\r\\n\")",
          "2528:       commands.push(sock.gets)",
          "2529:       sock.print(\"331 Please specify the password.\\r\\n\")",
          "2530:       commands.push(sock.gets)",
          "2531:       sock.print(\"230 Login successful.\\r\\n\")",
          "2532:       commands.push(sock.gets)",
          "2533:       sock.print(\"200 Switching to Binary mode.\\r\\n\")",
          "2534:       line = sock.gets",
          "2535:       commands.push(line)",
          "2536:       data_server = TCPServer.new(\"127.0.0.1\", 0)",
          "2537:       port = data_server.local_address.ip_port",
          "2538:       sock.printf(\"227 Entering Passive Mode (127,0,0,1,%s).\\r\\n\",",
          "2539:                   port.divmod(256).join(\",\"))",
          "2540:       commands.push(sock.gets)",
          "2541:       sock.print(\"150 Opening BINARY mode data connection for foo (#{binary_data.size} bytes)\\r\\n\")",
          "2542:       conn = data_server.accept",
          "2543:       binary_data.scan(/.{1,1024}/nm) do |s|",
          "2544:         conn.print(s)",
          "2545:       end",
          "2546:       conn.shutdown(Socket::SHUT_WR)",
          "2547:       conn.read",
          "2548:       conn.close",
          "2549:       data_server.close",
          "2550:       sock.print(\"226 Transfer complete.\\r\\n\")",
          "2551:     }",
          "2552:     begin",
          "2553:       begin",
          "2554:         ftp = Net::FTP.new",
          "2555:         ftp.passive = true",
          "2556:         ftp.use_pasv_ip = true",
          "2557:         ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait",
          "2558:         ftp.connect(\"127.0.0.1\", server.port)",
          "2559:         ftp.login",
          "2560:         assert_match(/\\AUSER /, commands.shift)",
          "2561:         assert_match(/\\APASS /, commands.shift)",
          "2562:         assert_equal(\"TYPE I\\r\\n\", commands.shift)",
          "2563:         buf = ftp.getbinaryfile(\"foo\", nil)",
          "2564:         assert_equal(binary_data, buf)",
          "2565:         assert_equal(Encoding::ASCII_8BIT, buf.encoding)",
          "2566:         assert_equal(\"PASV\\r\\n\", commands.shift)",
          "2567:         assert_equal(\"RETR foo\\r\\n\", commands.shift)",
          "2568:         assert_equal(nil, commands.shift)",
          "2569:       ensure",
          "2570:         ftp.close if ftp",
          "2571:       end",
          "2572:     ensure",
          "2573:       server.close",
          "2574:     end",
          "2575:   end",
          "2577:   def test_use_pasv_invalid_ip",
          "2578:     commands = []",
          "2579:     binary_data = (0..0xff).map {|i| i.chr}.join * 4 * 3",
          "2580:     server = create_ftp_server(nil, \"127.0.0.1\") { |sock|",
          "2581:       sock.print(\"220 (test_ftp).\\r\\n\")",
          "2582:       commands.push(sock.gets)",
          "2583:       sock.print(\"331 Please specify the password.\\r\\n\")",
          "2584:       commands.push(sock.gets)",
          "2585:       sock.print(\"230 Login successful.\\r\\n\")",
          "2586:       commands.push(sock.gets)",
          "2587:       sock.print(\"200 Switching to Binary mode.\\r\\n\")",
          "2588:       line = sock.gets",
          "2589:       commands.push(line)",
          "2590:       sock.print(\"227 Entering Passive Mode (999,0,0,1,48,57).\\r\\n\")",
          "2591:       commands.push(sock.gets)",
          "2592:     }",
          "2593:     begin",
          "2594:       begin",
          "2595:         ftp = Net::FTP.new",
          "2596:         ftp.passive = true",
          "2597:         ftp.use_pasv_ip = true",
          "2598:         ftp.read_timeout *= 5 if defined?(RubyVM::MJIT) && RubyVM::MJIT.enabled? # for --jit-wait",
          "2599:         ftp.connect(\"127.0.0.1\", server.port)",
          "2600:         ftp.login",
          "2601:         assert_match(/\\AUSER /, commands.shift)",
          "2602:         assert_match(/\\APASS /, commands.shift)",
          "2603:         assert_equal(\"TYPE I\\r\\n\", commands.shift)",
          "2604:         assert_raise(SocketError) do",
          "2605:           ftp.getbinaryfile(\"foo\", nil)",
          "2606:         end",
          "2607:       ensure",
          "2608:         ftp.close if ftp",
          "2609:       end",
          "2610:     ensure",
          "2611:       server.close",
          "2612:     end",
          "2613:   end",
          "2617:   def create_ftp_server(sleep_time = nil, addr = SERVER_ADDR)",
          "2618:     server = TCPServer.new(addr, 0)",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 4",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "11: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 189",
          "8: #define RUBY_RELEASE_MONTH 6",
          "9: #define RUBY_RELEASE_DAY 2",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 190",
          "8: #define RUBY_RELEASE_MONTH 7",
          "9: #define RUBY_RELEASE_DAY 7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5da2a3e31699570ae1a951c8bbc489040051d19e",
      "candidate_info": {
        "commit_hash": "5da2a3e31699570ae1a951c8bbc489040051d19e",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/5da2a3e31699570ae1a951c8bbc489040051d19e",
        "files": [
          "method.h",
          "test/ruby/test_alias.rb",
          "version.h",
          "vm_method.c"
        ],
        "message": "merge revision(s) 7ff1bf317887c0d7b21e91ad548d07b9f05c540c,e89d80702bd98a8276243a7fcaa2a158b3bfb659: [Backport #18516]\n\n    An alias can suppress method redefinition warning\n\n    ---\n     test/ruby/test_alias.rb | 11 +++++++++++\n     1 file changed, 11 insertions(+)\n\n    Fix memory leak at the same named alias [Bug #18516]\n\n    When aliasing a method to the same name method, set a separate bit\n    flag on that method definition, instead of the reference count\n    increment.  Although this kind of alias has no actual effect at\n    runtime, is used as the hack to suppress the method re-definition\n    warning.\n    ---\n     method.h                |  1 +\n     test/ruby/test_alias.rb | 18 ++++++++++++++++++\n     vm_method.c             |  9 ++++++++-\n     3 files changed, 27 insertions(+), 1 deletion(-)",
        "before_after_code_files": [
          "method.h||method.h",
          "test/ruby/test_alias.rb||test/ruby/test_alias.rb",
          "version.h||version.h",
          "vm_method.c||vm_method.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "method.h||method.h": [
          "File: method.h -> method.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     BITFIELD(rb_method_type_t, type, VM_METHOD_TYPE_MINIMUM_BITS);",
          "165:     int alias_count : 28;",
          "166:     int complemented_count : 28;",
          "168:     union {",
          "169:         rb_method_iseq_t iseq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     unsigned int no_redef_warning: 1;",
          "",
          "---------------"
        ],
        "test/ruby/test_alias.rb||test/ruby/test_alias.rb": [
          "File: test/ruby/test_alias.rb -> test/ruby/test_alias.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     assert_equal(:foo, k.instance_method(:bar).original_name)",
          "228:     assert_equal(:foo, name)",
          "229:   end",
          "230: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   def test_alias_suppressing_redefinition",
          "232:     assert_in_out_err(%w[-w], \"#{<<~\"begin;\"}\\n#{<<~'end;'}\")",
          "233:     begin;",
          "234:       class A",
          "235:         def foo; end",
          "236:         alias foo foo",
          "237:         def foo; end",
          "238:       end",
          "239:     end;",
          "240:   end",
          "242:   def test_alias_memory_leak",
          "243:     assert_no_memory_leak([], \"#{<<~\"begin;\"}\", \"#{<<~'end;'}\", rss: true)",
          "244:     begin;",
          "245:       class A",
          "246:         500.times do",
          "247:           1000.times do |i|",
          "248:             define_method(:\"foo_#{i}\") {}",
          "250:             alias :\"foo_#{i}\" :\"foo_#{i}\"",
          "252:             remove_method :\"foo_#{i}\"",
          "253:           end",
          "254:           GC.start",
          "255:         end",
          "256:       end",
          "257:     end;",
          "258:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 6",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2022",
          "8: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 214",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 215",
          "",
          "---------------"
        ],
        "vm_method.c||vm_method.c": [
          "File: vm_method.c -> vm_method.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:  if (RTEST(ruby_verbose) &&",
          "585:      type != VM_METHOD_TYPE_UNDEF &&",
          "586:      (old_def->alias_count == 0) &&",
          "587:      !make_refined &&",
          "588:      old_def->type != VM_METHOD_TYPE_UNDEF &&",
          "589:      old_def->type != VM_METHOD_TYPE_ZSUPER &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:      (!old_def->no_redef_warning) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:    rb_method_visibility_t visi, VALUE defined_class)",
          "699: {",
          "700:     rb_method_entry_t *newme = rb_method_entry_make(klass, mid, defined_class, visi,",
          "702:     method_added(klass, mid);",
          "703:     return newme;",
          "704: }",
          "",
          "[Removed Lines]",
          "701:           me->def->type, method_definition_addref(me->def), 0, NULL);",
          "",
          "[Added Lines]",
          "702:           me->def->type, me->def, 0, NULL);",
          "703:     if (newme == me) {",
          "704:         me->def->no_redef_warning = TRUE;",
          "705:     }",
          "706:     else {",
          "707:         method_definition_addref(me->def);",
          "708:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d886af0a55a99bf3c12ec82c1b7a804bec9d395",
      "candidate_info": {
        "commit_hash": "2d886af0a55a99bf3c12ec82c1b7a804bec9d395",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/2d886af0a55a99bf3c12ec82c1b7a804bec9d395",
        "files": [
          "numeric.c",
          "version.h"
        ],
        "message": "merge revision(s) 6a6227e0168b059c3ed34c9f0ace2e5dc2364221: [Backport #18517]\n\n\tShifting zero always results in zero [Bug #18517]\n\n\t---\n\t numeric.c | 2 ++\n\t 1 file changed, 2 insertions(+)",
        "before_after_code_files": [
          "numeric.c||numeric.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "numeric.c||numeric.c": [
          "File: numeric.c -> numeric.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4565:     long val, width;",
          "4567:     val = NUM2LONG(x);",
          "4568:     if (!FIXNUM_P(y))",
          "4569:  return rb_big_lshift(rb_int2big(val), y);",
          "4570:     width = FIX2LONG(y);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4568:     if (!val) return (rb_to_int(y), INT2FIX(0));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4611:     long i, val;",
          "4613:     val = FIX2LONG(x);",
          "4614:     if (!FIXNUM_P(y))",
          "4615:  return rb_big_rshift(rb_int2big(val), y);",
          "4616:     i = FIX2LONG(y);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4615:     if (!val) return (rb_to_int(y), INT2FIX(0));",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 6",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2022",
          "8: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 213",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 214",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d4e037a8011ac05b4ede8cdf8263515ba0e095e",
      "candidate_info": {
        "commit_hash": "1d4e037a8011ac05b4ede8cdf8263515ba0e095e",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/1d4e037a8011ac05b4ede8cdf8263515ba0e095e",
        "files": [
          "test/ruby/test_settracefunc.rb",
          "version.h",
          "vm_trace.c"
        ],
        "message": "merge revision(s) a4d5ee4f31bf3ff36c1a8c8fe3cda16aa1016b12: [Backport #18264]\n\n\t[Bug #18264] Fix memory leak in TracePoint\n\n\tTracePoint leaks memory because it allocates a `rb_tp_t` struct\n\twithout ever freeing it (it is created with `RUBY_TYPED_NEVER_FREE`).\n\t---\n\t test/ruby/test_settracefunc.rb | 10 ++++++++++\n\t vm_trace.c                     |  2 +-\n\t 2 files changed, 11 insertions(+), 1 deletion(-)",
        "before_after_code_files": [
          "test/ruby/test_settracefunc.rb||test/ruby/test_settracefunc.rb",
          "version.h||version.h",
          "vm_trace.c||vm_trace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/ruby/test_settracefunc.rb||test/ruby/test_settracefunc.rb": [
          "File: test/ruby/test_settracefunc.rb -> test/ruby/test_settracefunc.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:     }",
          "556:   end",
          "558:   def trace_by_set_trace_func",
          "559:     events = []",
          "560:     trace = nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:   # Bug #18264",
          "559:   def test_tracpoint_memory_leak",
          "560:     assert_no_memory_leak([], <<-PREP, <<-CODE, rss: true)",
          "561: code = proc { TracePoint.new(:line) { } }",
          "562: 1_000.times(&code)",
          "563: PREP",
          "564: 1_000_000.times(&code)",
          "565: CODE",
          "566:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 5",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "8: #define RUBY_RELEASE_MONTH 11",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 200",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 201",
          "",
          "---------------"
        ],
        "vm_trace.c||vm_trace.c": [
          "File: vm_trace.c -> vm_trace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727: static const rb_data_type_t tp_data_type = {",
          "728:     \"tracepoint\",",
          "730:     0, 0, RUBY_TYPED_FREE_IMMEDIATELY",
          "731: };",
          "",
          "[Removed Lines]",
          "729:     {tp_mark, RUBY_TYPED_NEVER_FREE, tp_memsize,},",
          "",
          "[Added Lines]",
          "729:     {tp_mark, RUBY_TYPED_DEFAULT_FREE, tp_memsize,},",
          "",
          "---------------"
        ]
      }
    }
  ]
}