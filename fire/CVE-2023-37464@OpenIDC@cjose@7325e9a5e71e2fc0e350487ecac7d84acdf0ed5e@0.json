{
  "cve_id": "CVE-2023-37464",
  "cve_desc": "OpenIDC/cjose is a C library implementing the Javascript Object Signing and Encryption (JOSE). The AES GCM decryption routine incorrectly uses the Tag length from the actual Authentication Tag provided in the JWE. The spec  says that a fixed length of 16 octets must be applied. Therefore this bug allows an attacker to provide a truncated Authentication Tag and to modify the JWE accordingly. Users should upgrade to a version >= 0.6.2.2. Users unable to upgrade should avoid using AES GCM encryption and replace it with another encryption algorithm (e.g. AES CBC).",
  "repo": "OpenIDC/cjose",
  "patch_hash": "7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e",
  "patch_info": {
    "commit_hash": "7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e",
    "repo": "OpenIDC/cjose",
    "commit_url": "https://github.com/OpenIDC/cjose/commit/7325e9a5e71e2fc0e350487ecac7d84acdf0ed5e",
    "files": [
      "src/jwe.c",
      "test/check_jwe.c"
    ],
    "message": "use fixed authentication tag length of 16 octets in AES GCM decryption\n\nsee: https://github.com/cisco/cjose/issues/125\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
    "before_after_code_files": [
      "src/jwe.c||src/jwe.c",
      "test/check_jwe.c||test/check_jwe.c"
    ]
  },
  "patch_diff": {
    "src/jwe.c||src/jwe.c": [
      "File: src/jwe.c -> src/jwe.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1286:         goto _cjose_jwe_decrypt_dat_aes_gcm_fail;",
      "1287:     }",
      "1290:     if (EVP_CIPHER_CTX_ctrl(ctx, CJOSE_EVP_CTRL_GCM_SET_TAG, jwe->enc_auth_tag.raw_len, jwe->enc_auth_tag.raw) != 1)",
      "1291:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1289:     if (jwe->enc_auth_tag.raw_len != 16)",
      "1290:     {",
      "1291:         CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);",
      "1292:         goto _cjose_jwe_decrypt_dat_aes_gcm_fail;",
      "1293:     }",
      "",
      "---------------"
    ],
    "test/check_jwe.c||test/check_jwe.c": [
      "File: test/check_jwe.c -> test/check_jwe.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "967: }",
      "968: END_TEST",
      "970: START_TEST(test_cjose_jwe_decrypt_rsa)",
      "971: {",
      "972:     struct cjose_jwe_decrypt_rsa",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "970: START_TEST(test_cjose_jwe_decrypt_aes_gcm)",
      "971: {",
      "972:     cjose_err err;",
      "974:     const char *key = JWK_OCT_32;",
      "975:     const char *plain1 = \"Live long and prosper.\";",
      "976:     char *compact1 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.GpeKGEqd8KQ0v6JNea5aSA\";",
      "977:     char *compact2 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.Gp\";",
      "979:     cjose_jwk_t *jwk = cjose_jwk_import(key, strlen(key), &err);",
      "980:     ck_assert_msg(NULL != jwk,",
      "981:                   \"cjose_jwk_import failed: \"",
      "982:                   \"%s, file: %s, function: %s, line: %ld\",",
      "983:                   err.message, err.file, err.function, err.line);",
      "985:     cjose_jwe_t *jwe1 = cjose_jwe_import(compact1, strlen(compact1), &err);",
      "986:     ck_assert_msg(NULL != jwe1,",
      "987:                   \"cjose_jwe_import failed: \"",
      "988:                   \"%s, file: %s, function: %s, line: %ld\",",
      "989:                   err.message, err.file, err.function, err.line);",
      "991:     uint8_t *plain2 = NULL;",
      "992:     size_t plain2_len = 0;",
      "993:     plain2 = cjose_jwe_decrypt(jwe1, jwk, &plain2_len, &err);",
      "994:     ck_assert_msg(NULL != plain2,",
      "995:                   \"cjose_jwe_decrypt failed: \"",
      "996:                   \"%s, file: %s, function: %s, line: %ld\",",
      "997:                   err.message, err.file, err.function, err.line);",
      "999:     ck_assert_msg(plain2_len == strlen(plain1),",
      "1000:                   \"length of decrypted plaintext does not match length of original, \"",
      "1001:                   \"expected: %lu, found: %lu\",",
      "1002:                   strlen(plain1), plain2_len);",
      "1003:     ck_assert_msg(strncmp(plain1, plain2, plain2_len) == 0, \"decrypted plaintext does not match encrypted plaintext\");",
      "1005:     cjose_get_dealloc()(plain2);",
      "1006:     cjose_jwe_release(jwe1);",
      "1008:     cjose_jwe_t *jwe2 = cjose_jwe_import(compact2, strlen(compact2), &err);",
      "1009:     ck_assert_msg(NULL != jwe2,",
      "1010:                    \"cjose_jwe_import failed: \"",
      "1011:                    \"%s, file: %s, function: %s, line: %ld\",",
      "1012:                    err.message, err.file, err.function, err.line);",
      "1014:     uint8_t *plain3 = NULL;",
      "1015:     size_t plain3_len = 0;",
      "1016:     plain3 = cjose_jwe_decrypt(jwe2, jwk, &plain3_len, &err);",
      "1017:     ck_assert_msg(NULL == plain3,",
      "1018:                    \"cjose_jwe_decrypt succeeded where it should have failed: \"",
      "1019:                    \"%s, file: %s, function: %s, line: %ld\",",
      "1020:                    err.message, err.file, err.function, err.line);",
      "1022:     cjose_jwe_release(jwe2);",
      "1023:     cjose_jwk_release(jwk);",
      "1024: }",
      "1025: END_TEST",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_large);",
      "1374:     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_many);",
      "1375:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes);",
      "1376:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_rsa);",
      "1377:     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_header);",
      "1378:     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_key);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1433:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes_gcm);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d612036fe731152c7ce2cf5a3fcbca06c0ec1116",
      "candidate_info": {
        "commit_hash": "d612036fe731152c7ce2cf5a3fcbca06c0ec1116",
        "repo": "OpenIDC/cjose",
        "commit_url": "https://github.com/OpenIDC/cjose/commit/d612036fe731152c7ce2cf5a3fcbca06c0ec1116",
        "files": [
          ".gitignore",
          "CHANGELOG.md",
          "aclocal.m4",
          "config.guess",
          "config.sub",
          "configure",
          "configure.ac",
          "install-sh",
          "src/base64.c",
          "src/concatkdf.c",
          "src/jwe.c",
          "src/jwk.c",
          "src/jws.c",
          "test/check_cjose.h",
          "test/check_jwe.c"
        ],
        "message": "release v0.6.2.3\n\n- reformat using clang-format-18.1.3\n- regenerate autoconf files using autoconf 2.72\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "aclocal.m4||aclocal.m4",
          "config.guess||config.guess",
          "config.sub||config.sub",
          "configure.ac||configure.ac",
          "src/base64.c||src/base64.c",
          "src/concatkdf.c||src/concatkdf.c",
          "src/jwe.c||src/jwe.c",
          "src/jwk.c||src/jwk.c",
          "src/jws.c||src/jws.c",
          "test/check_cjose.h||test/check_cjose.h",
          "test/check_jwe.c||test/check_jwe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jwe.c||src/jwe.c",
            "test/check_jwe.c||test/check_jwe.c"
          ],
          "candidate": [
            "src/jwe.c||src/jwe.c",
            "test/check_jwe.c||test/check_jwe.c"
          ]
        }
      },
      "candidate_diff": {
        "aclocal.m4||aclocal.m4": [
          "File: aclocal.m4 -> aclocal.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])",
          "15: m4_ifndef([AC_AUTOCONF_VERSION],",
          "16:   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl",
          "19: You have another version of autoconf.  It may work, but is not guaranteed to.",
          "20: If you have problems, you may need to regenerate the build system entirely.",
          "21: To do so, use the procedure documented by the package, typically 'autoreconf'.])])",
          "",
          "[Removed Lines]",
          "17: m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.71],,",
          "18: [m4_warning([this file was generated for autoconf 2.71.",
          "",
          "[Added Lines]",
          "17: m4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.72],,",
          "18: [m4_warning([this file was generated for autoconf 2.72.",
          "",
          "---------------"
        ],
        "config.guess||config.guess": [
          "File: config.guess -> config.guess",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #! /bin/sh",
          "2: # Attempt to guess a canonical system name.",
          "5: # shellcheck disable=SC2006,SC2268 # see below for rationale",
          "9: # This file is free software; you can redistribute it and/or modify it",
          "10: # under the terms of the GNU General Public License as published by",
          "12: # (at your option) any later version.",
          "13: #",
          "14: # This program is distributed in the hope that it will be useful, but",
          "",
          "[Removed Lines]",
          "3: #   Copyright 1992-2021 Free Software Foundation, Inc.",
          "7: timestamp='2021-06-03'",
          "11: # the Free Software Foundation; either version 3 of the License, or",
          "",
          "[Added Lines]",
          "3: #   Copyright 1992-2023 Free Software Foundation, Inc.",
          "7: timestamp='2023-08-22'",
          "11: # the Free Software Foundation, either version 3 of the License, or",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: usage=\"\\",
          "48: Usage: $0 [OPTION]",
          "52: Options:",
          "53:   -h, --help         print this help, then exit",
          "",
          "[Removed Lines]",
          "50: Output the configuration name of the system \\`$me' is run on.",
          "",
          "[Added Lines]",
          "50: Output the configuration name of the system '$me' is run on.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: GNU config.guess ($timestamp)",
          "62: Originally written by Per Bothner.",
          "65: This is free software; see the source for copying conditions.  There is NO",
          "66: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "68: help=\"",
          "71: # Parse command line",
          "72: while test $# -gt 0 ; do",
          "",
          "[Removed Lines]",
          "63: Copyright 1992-2021 Free Software Foundation, Inc.",
          "69: Try \\`$me --help' for more information.\"",
          "",
          "[Added Lines]",
          "63: Copyright 1992-2023 Free Software Foundation, Inc.",
          "69: Try '$me --help' for more information.\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102: # temporary files to be created and, as you can see below, it is a",
          "103: # headache to deal with in a portable fashion.",
          "108: # Portable tmp directory creation inspired by the Autoconf team.",
          "",
          "[Removed Lines]",
          "105: # Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still",
          "106: # use `HOST_CC' if defined, but it is deprecated.",
          "",
          "[Added Lines]",
          "105: # Historically, 'CC_FOR_BUILD' used to be named 'HOST_CC'. We still",
          "106: # use 'HOST_CC' if defined, but it is deprecated.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:  set_cc_for_build",
          "157:  cat <<-EOF > \"$dummy.c\"",
          "158:  #include <features.h>",
          "159:  #if defined(__UCLIBC__)",
          "160:  LIBC=uclibc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:  #if defined(__ANDROID__)",
          "159:  LIBC=android",
          "160:  #else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169:  LIBC=musl",
          "170:  #endif",
          "171:  #endif",
          "172:  EOF",
          "173:  cc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`",
          "174:  eval \"$cc_set_libc\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:  #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "437:  # This test works for both compilers.",
          "438:  if test \"$CC_FOR_BUILD\" != no_compiler_found; then",
          "439:      if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "441:   grep IS_64BIT_ARCH >/dev/null",
          "442:      then",
          "443:   SUN_ARCH=x86_64",
          "",
          "[Removed Lines]",
          "440:   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "",
          "[Added Lines]",
          "444:   (CCOPTS=\"\" $CC_FOR_BUILD -m64 -E - 2>/dev/null) | \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "459:   UNAME_RELEASE=`uname -v`",
          "460:   ;;",
          "461:  esac",
          "463:  SUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/'`",
          "464:  GUESS=sparc-sun-sunos$SUN_REL",
          "465:  ;;",
          "",
          "[Removed Lines]",
          "462:  # Japanese Language versions have a version number like `4.1.3-JL'.",
          "",
          "[Added Lines]",
          "466:  # Japanese Language versions have a version number like '4.1.3-JL'.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "904:  fi",
          "905:  ;;",
          "908:  case $UNAME_PROCESSOR in",
          "909:      amd64)",
          "910:   UNAME_PROCESSOR=x86_64 ;;",
          "",
          "[Removed Lines]",
          "907:  UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "",
          "[Added Lines]",
          "911:  UNAME_PROCESSOR=`uname -p`",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "929:     i*:PW*:*)",
          "930:  GUESS=$UNAME_MACHINE-pc-pw32",
          "931:  ;;",
          "933:  case $UNAME_MACHINE in",
          "934:      x86)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:         GUESS=$UNAME_MACHINE-pc-serenity",
          "938:         ;;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "963:  GNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`",
          "964:  GUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC",
          "965:  ;;",
          "967:  GUESS=$UNAME_MACHINE-unknown-minix",
          "968:  ;;",
          "969:     aarch64:Linux:*:*)",
          "971:  ;;",
          "972:     aarch64_be:Linux:*:*)",
          "973:  UNAME_MACHINE=aarch64_be",
          "",
          "[Removed Lines]",
          "970:  GUESS=$UNAME_MACHINE-unknown-linux-$LIBC",
          "",
          "[Added Lines]",
          "973:     x86_64:[Mm]anagarm:*:*|i?86:[Mm]anagarm:*:*)",
          "974:  GUESS=\"$UNAME_MACHINE-pc-managarm-mlibc\"",
          "975:  ;;",
          "977:  GUESS=\"$UNAME_MACHINE-unknown-managarm-mlibc\"",
          "978:  ;;",
          "983:  set_cc_for_build",
          "984:  CPU=$UNAME_MACHINE",
          "985:  LIBCABI=$LIBC",
          "986:  if test \"$CC_FOR_BUILD\" != no_compiler_found; then",
          "987:      ABI=64",
          "988:      sed 's/^     //' << EOF > \"$dummy.c\"",
          "989:      #ifdef __ARM_EABI__",
          "990:      #ifdef __ARM_PCS_VFP",
          "991:      ABI=eabihf",
          "992:      #else",
          "993:      ABI=eabi",
          "994:      #endif",
          "995:      #endif",
          "996: EOF",
          "997:      cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`",
          "998:      eval \"$cc_set_abi\"",
          "999:      case $ABI in",
          "1000:   eabi | eabihf) CPU=armv8l; LIBCABI=$LIBC$ABI ;;",
          "1001:      esac",
          "1002:  fi",
          "1003:  GUESS=$CPU-unknown-linux-$LIBCABI",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1033:     k1om:Linux:*:*)",
          "1034:  GUESS=$UNAME_MACHINE-unknown-linux-$LIBC",
          "1035:  ;;",
          "1037:  GUESS=$UNAME_MACHINE-unknown-linux-$LIBC",
          "1038:  ;;",
          "1039:     m32r*:Linux:*:*)",
          "",
          "[Removed Lines]",
          "1036:     loongarch32:Linux:*:* | loongarch64:Linux:*:* | loongarchx32:Linux:*:*)",
          "",
          "[Added Lines]",
          "1069:     kvx:Linux:*:*)",
          "1070:  GUESS=$UNAME_MACHINE-unknown-linux-$LIBC",
          "1071:  ;;",
          "1072:     kvx:cos:*:*)",
          "1073:  GUESS=$UNAME_MACHINE-unknown-cos",
          "1074:  ;;",
          "1075:     kvx:mbr:*:*)",
          "1076:  GUESS=$UNAME_MACHINE-unknown-mbr",
          "1077:  ;;",
          "1078:     loongarch32:Linux:*:* | loongarch64:Linux:*:*)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1148:  ;;",
          "1149:     x86_64:Linux:*:*)",
          "1150:  set_cc_for_build",
          "1151:  LIBCABI=$LIBC",
          "1152:  if test \"$CC_FOR_BUILD\" != no_compiler_found; then",
          "1159:  fi",
          "1161:  ;;",
          "1162:     xtensa*:Linux:*:*)",
          "1163:  GUESS=$UNAME_MACHINE-unknown-linux-$LIBC",
          "",
          "[Removed Lines]",
          "1153:      if (echo '#ifdef __ILP32__'; echo IS_X32; echo '#endif') | \\",
          "1154:   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1155:   grep IS_X32 >/dev/null",
          "1156:      then",
          "1157:   LIBCABI=${LIBC}x32",
          "1158:      fi",
          "1160:  GUESS=$UNAME_MACHINE-pc-linux-$LIBCABI",
          "",
          "[Added Lines]",
          "1193:  CPU=$UNAME_MACHINE",
          "1196:      ABI=64",
          "1197:      sed 's/^     //' << EOF > \"$dummy.c\"",
          "1198:      #ifdef __i386__",
          "1199:      ABI=x86",
          "1200:      #else",
          "1201:      #ifdef __ILP32__",
          "1202:      ABI=x32",
          "1203:      #endif",
          "1204:      #endif",
          "1205: EOF",
          "1206:      cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`",
          "1207:      eval \"$cc_set_abi\"",
          "1208:      case $ABI in",
          "1209:   x86) CPU=i686 ;;",
          "1210:   x32) LIBCABI=${LIBC}x32 ;;",
          "1211:      esac",
          "1213:  GUESS=$CPU-pc-linux-$LIBCABI",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1177:  GUESS=$UNAME_MACHINE-pc-sysv4.2uw$UNAME_VERSION",
          "1178:  ;;",
          "1179:     i*86:OS/2:*:*)",
          "1181:  # is probably installed.",
          "1182:  GUESS=$UNAME_MACHINE-pc-os2-emx",
          "1183:  ;;",
          "",
          "[Removed Lines]",
          "1180:  # If we were able to find `uname', then EMX Unix compatibility",
          "",
          "[Added Lines]",
          "1233:  # If we were able to find 'uname', then EMX Unix compatibility",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1318:   GUESS=ns32k-sni-sysv",
          "1319:  fi",
          "1320:  ;;",
          "1322:    # says <Richard.M.Bartel@ccMail.Census.GOV>",
          "1323:  GUESS=i586-unisys-sysv4",
          "1324:  ;;",
          "",
          "[Removed Lines]",
          "1321:     PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort",
          "",
          "[Added Lines]",
          "1374:     PENTIUM:*:4.0*:*) # Unisys 'ClearPath HMP IX 4000' SVR4/MP effort",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1364:     BePC:Haiku:*:*) # Haiku running on Intel PC compatible.",
          "1365:  GUESS=i586-pc-haiku",
          "1366:  ;;",
          "1369:  ;;",
          "1370:     SX-4:SUPER-UX:*:*)",
          "1371:  GUESS=sx4-nec-superux$UNAME_RELEASE",
          "",
          "[Removed Lines]",
          "1367:     x86_64:Haiku:*:*)",
          "1368:  GUESS=x86_64-unknown-haiku",
          "",
          "[Added Lines]",
          "1420:     ppc:Haiku:*:*) # Haiku running on Apple PowerPC",
          "1421:  GUESS=powerpc-apple-haiku",
          "1422:  ;;",
          "1424:  GUESS=$UNAME_MACHINE-unknown-haiku",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1522:     i*86:rdos:*:*)",
          "1523:  GUESS=$UNAME_MACHINE-pc-rdos",
          "1524:  ;;",
          "1526:  GUESS=$UNAME_MACHINE-unknown-aros",
          "1527:  ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1581:     i*86:Fiwix:*:*)",
          "1582:  GUESS=$UNAME_MACHINE-pc-fiwix",
          "1583:  ;;",
          "",
          "---------------"
        ],
        "config.sub||config.sub": [
          "File: config.sub -> config.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #! /bin/sh",
          "2: # Configuration validation subroutine script.",
          "5: # shellcheck disable=SC2006,SC2268 # see below for rationale",
          "9: # This file is free software; you can redistribute it and/or modify it",
          "10: # under the terms of the GNU General Public License as published by",
          "12: # (at your option) any later version.",
          "13: #",
          "14: # This program is distributed in the hope that it will be useful, but",
          "",
          "[Removed Lines]",
          "3: #   Copyright 1992-2021 Free Software Foundation, Inc.",
          "7: timestamp='2021-08-14'",
          "11: # the Free Software Foundation; either version 3 of the License, or",
          "",
          "[Added Lines]",
          "3: #   Copyright 1992-2023 Free Software Foundation, Inc.",
          "7: timestamp='2023-09-19'",
          "11: # the Free Software Foundation, either version 3 of the License, or",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: version=\"\\",
          "77: GNU config.sub ($timestamp)",
          "81: This is free software; see the source for copying conditions.  There is NO",
          "82: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "84: help=\"",
          "87: # Parse command line",
          "88: while test $# -gt 0 ; do",
          "",
          "[Removed Lines]",
          "79: Copyright 1992-2021 Free Software Foundation, Inc.",
          "85: Try \\`$me --help' for more information.\"",
          "",
          "[Added Lines]",
          "79: Copyright 1992-2023 Free Software Foundation, Inc.",
          "85: Try '$me --help' for more information.\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130: # Separate into logical components for further validation",
          "131: case $1 in",
          "134:   exit 1",
          "135:   ;;",
          "",
          "[Removed Lines]",
          "133:   echo Invalid configuration \\`\"$1\"\\': more than four components >&2",
          "",
          "[Added Lines]",
          "133:   echo \"Invalid configuration '$1': more than four components\" >&2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:    nto-qnx* | linux-* | uclinux-uclibc* \\",
          "146:    | uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* \\",
          "147:    | netbsd*-eabi* | kopensolaris*-gnu* | cloudabi*-eabi* \\",
          "149:     basic_machine=$field1",
          "150:     basic_os=$maybe_os",
          "151:     ;;",
          "",
          "[Removed Lines]",
          "148:    | storm-chaos* | os2-emx* | rtmk-nova*)",
          "",
          "[Added Lines]",
          "148:    | storm-chaos* | os2-emx* | rtmk-nova* | managarm-* \\",
          "149:    | windows-* )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "943: EOF",
          "944:   IFS=$saved_IFS",
          "945:   ;;",
          "947:  # because (1) that's what they normally are, and",
          "948:  # (2) the word \"unknown\" tends to confuse beginning users.",
          "949:  i*86 | x86_64)",
          "",
          "[Removed Lines]",
          "946:  # We use `pc' rather than `unknown'",
          "",
          "[Added Lines]",
          "947:  # We use 'pc' rather than 'unknown'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1020:   ;;",
          "1022:  # Here we normalize CPU types with a missing or matching vendor",
          "1023:  dpx20-unknown | dpx20-bull)",
          "1024:   cpu=rs6000",
          "1025:   vendor=bull",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1024:  armh-unknown | armh-alt)",
          "1025:   cpu=armv7l",
          "1026:   vendor=alt",
          "1027:   basic_os=${basic_os:-linux-gnueabihf}",
          "1028:   ;;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1070:  pentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)",
          "1071:   cpu=i586",
          "1072:   ;;",
          "1074:   cpu=i686",
          "1075:   ;;",
          "1076:  pentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)",
          "",
          "[Removed Lines]",
          "1073:  pentiumpro-* | p6-* | 6x86-* | athlon-* | athalon_*-*)",
          "",
          "[Added Lines]",
          "1079:  pentiumpro-* | p6-* | 6x86-* | athlon-* | athlon_*-*)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1121:  xscale-* | xscalee[bl]-*)",
          "1122:   cpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`",
          "1123:   ;;",
          "1125:   cpu=aarch64",
          "1126:   ;;",
          "",
          "[Removed Lines]",
          "1124:  arm64-*)",
          "",
          "[Added Lines]",
          "1130:  arm64-* | aarch64le-*)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1175:   case $cpu in",
          "1176:    1750a | 580 \\",
          "1177:    | a29k \\",
          "1179:    | abacus \\",
          "1180:    | alpha | alphaev[4-8] | alphaev56 | alphaev6[78] \\",
          "1181:    | alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] \\",
          "",
          "[Removed Lines]",
          "1178:    | aarch64 | aarch64_be \\",
          "",
          "[Added Lines]",
          "1184:    | aarch64 | aarch64_be | aarch64c | arm64ec \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1194:    | d10v | d30v | dlx | dsp16xx \\",
          "1195:    | e2k | elxsi | epiphany \\",
          "1196:    | f30[01] | f700 | fido | fr30 | frv | ft32 | fx80 \\",
          "1197:    | h8300 | h8500 \\",
          "1198:    | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\",
          "1199:    | hexagon \\",
          "1200:    | i370 | i*86 | i860 | i960 | ia16 | ia64 \\",
          "1201:    | ip2k | iq2000 \\",
          "1202:    | k1om \\",
          "1203:    | le32 | le64 \\",
          "1204:    | lm32 \\",
          "1206:    | m32c | m32r | m32rle \\",
          "1207:    | m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k \\",
          "1208:    | m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x \\",
          "1209:    | m88110 | m88k | maxq | mb | mcore | mep | metag \\",
          "1210:    | microblaze | microblazeel \\",
          "1236:    | mmix \\",
          "1237:    | mn10200 | mn10300 \\",
          "1238:    | moxie \\",
          "",
          "[Removed Lines]",
          "1205:    | loongarch32 | loongarch64 | loongarchx32 \\",
          "1211:    | mips | mipsbe | mipseb | mipsel | mipsle \\",
          "1212:    | mips16 \\",
          "1213:    | mips64 | mips64eb | mips64el \\",
          "1214:    | mips64octeon | mips64octeonel \\",
          "1215:    | mips64orion | mips64orionel \\",
          "1216:    | mips64r5900 | mips64r5900el \\",
          "1217:    | mips64vr | mips64vrel \\",
          "1218:    | mips64vr4100 | mips64vr4100el \\",
          "1219:    | mips64vr4300 | mips64vr4300el \\",
          "1220:    | mips64vr5000 | mips64vr5000el \\",
          "1221:    | mips64vr5900 | mips64vr5900el \\",
          "1222:    | mipsisa32 | mipsisa32el \\",
          "1223:    | mipsisa32r2 | mipsisa32r2el \\",
          "1224:    | mipsisa32r3 | mipsisa32r3el \\",
          "1225:    | mipsisa32r5 | mipsisa32r5el \\",
          "1226:    | mipsisa32r6 | mipsisa32r6el \\",
          "1227:    | mipsisa64 | mipsisa64el \\",
          "1228:    | mipsisa64r2 | mipsisa64r2el \\",
          "1229:    | mipsisa64r3 | mipsisa64r3el \\",
          "1230:    | mipsisa64r5 | mipsisa64r5el \\",
          "1231:    | mipsisa64r6 | mipsisa64r6el \\",
          "1232:    | mipsisa64sb1 | mipsisa64sb1el \\",
          "1233:    | mipsisa64sr71k | mipsisa64sr71kel \\",
          "1234:    | mipsr5900 | mipsr5900el \\",
          "1235:    | mipstx39 | mipstx39el \\",
          "",
          "[Added Lines]",
          "1203:    | javascript \\",
          "1210:    | kvx \\",
          "1213:    | loongarch32 | loongarch64 \\",
          "1219:    | mips* \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1280:     ;;",
          "1284:     exit 1",
          "1285:     ;;",
          "1286:   esac",
          "",
          "[Removed Lines]",
          "1283:     echo Invalid configuration \\`\"$1\"\\': machine \\`\"$cpu-$vendor\"\\' not recognized 1>&2",
          "",
          "[Added Lines]",
          "1267:     echo \"Invalid configuration '$1': machine '$cpu-$vendor' not recognized\" 1>&2",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1302: # Decode manufacturer-specific aliases for certain operating systems.",
          "1305: then",
          "1308: # set os.",
          "1309: case $basic_os in",
          "1310:  gnu/linux*)",
          "1311:   kernel=linux",
          "",
          "[Removed Lines]",
          "1304: if test x$basic_os != x",
          "1307: # First recognize some ad-hoc caes, or perhaps split kernel-os, or else just",
          "",
          "[Added Lines]",
          "1288: if test x\"$basic_os\" != x",
          "1291: # First recognize some ad-hoc cases, or perhaps split kernel-os, or else just",
          "1293: obj=",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1336:   kernel=linux",
          "1337:   os=`echo \"$basic_os\" | sed -e 's|linux|gnu|'`",
          "1338:   ;;",
          "1340:   kernel=",
          "1341:   os=$basic_os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:  managarm*)",
          "1325:   kernel=managarm",
          "1326:   os=`echo \"$basic_os\" | sed -e 's|managarm|mlibc|'`",
          "1327:   ;;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1501:    os=eabi",
          "1502:    ;;",
          "1505:    ;;",
          "1506:   esac",
          "1507:   ;;",
          "1509:   # No normalization, but not necessarily accepted, that comes below.",
          "1510:   ;;",
          "",
          "[Removed Lines]",
          "1504:    os=elf",
          "",
          "[Added Lines]",
          "1493:    os=",
          "1494:    obj=elf",
          "1498:  aout* | coff* | elf* | pe*)",
          "1499:   # These are machine code file formats, not OSes",
          "1500:   obj=$os",
          "1501:   os=",
          "1502:   ;;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1523: # system, and we'll never get to this point.",
          "1525: kernel=",
          "1526: case $cpu-$vendor in",
          "1527:  score-*)",
          "1529:   ;;",
          "1530:  spu-*)",
          "1532:   ;;",
          "1534:   os=riscix1.2",
          "",
          "[Removed Lines]",
          "1528:   os=elf",
          "1531:   os=elf",
          "",
          "[Added Lines]",
          "1521: obj=",
          "1524:   os=",
          "1525:   obj=elf",
          "1528:   os=",
          "1529:   obj=elf",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1538:   os=gnu",
          "1539:   ;;",
          "1540:  arm*-semi)",
          "1542:   ;;",
          "1543:  c4x-* | tic4x-*)",
          "1545:   ;;",
          "1546:  c8051-*)",
          "1548:   ;;",
          "1549:  clipper-intergraph)",
          "1550:   os=clix",
          "1551:   ;;",
          "1552:  hexagon-*)",
          "1554:   ;;",
          "1555:  tic54x-*)",
          "1557:   ;;",
          "1558:  tic55x-*)",
          "1560:   ;;",
          "1561:  tic6x-*)",
          "1563:   ;;",
          "1564:  # This must come before the *-dec entry.",
          "1565:  pdp10-*)",
          "",
          "[Removed Lines]",
          "1541:   os=aout",
          "1544:   os=coff",
          "1547:   os=elf",
          "1553:   os=elf",
          "1556:   os=coff",
          "1559:   os=coff",
          "1562:   os=coff",
          "",
          "[Added Lines]",
          "1539:   os=",
          "1540:   obj=aout",
          "1543:   os=",
          "1544:   obj=coff",
          "1547:   os=",
          "1548:   obj=elf",
          "1554:   os=",
          "1555:   obj=elf",
          "1558:   os=",
          "1559:   obj=coff",
          "1562:   os=",
          "1563:   obj=coff",
          "1566:   os=",
          "1567:   obj=coff",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1581:   os=sunos3",
          "1582:   ;;",
          "1583:  m68*-cisco)",
          "1585:   ;;",
          "1586:  mep-*)",
          "1588:   ;;",
          "1589:  mips*-cisco)",
          "1591:   ;;",
          "1592:  mips*-*)",
          "1594:   ;;",
          "1595:  or32-*)",
          "1597:   ;;",
          "1599:   os=sysv3",
          "",
          "[Removed Lines]",
          "1584:   os=aout",
          "1587:   os=elf",
          "1590:   os=elf",
          "1593:   os=elf",
          "1596:   os=coff",
          "",
          "[Added Lines]",
          "1589:   os=",
          "1590:   obj=aout",
          "1593:   os=",
          "1594:   obj=elf",
          "1597:   os=",
          "1598:   obj=elf",
          "1601:   os=",
          "1602:   obj=elf",
          "1605:   os=",
          "1606:   obj=coff",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1602:   os=sunos4.1.1",
          "1603:   ;;",
          "1604:  pru-*)",
          "1606:   ;;",
          "1608:   os=beos",
          "",
          "[Removed Lines]",
          "1605:   os=elf",
          "",
          "[Added Lines]",
          "1615:   os=",
          "1616:   obj=elf",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1683:   os=uxpv",
          "1684:   ;;",
          "1687:   ;;",
          "1690:   ;;",
          "1692:   os=macos",
          "",
          "[Removed Lines]",
          "1686:   os=coff",
          "1689:   os=coff",
          "",
          "[Added Lines]",
          "1697:   os=",
          "1698:   obj=coff",
          "1701:   os=",
          "1702:   obj=coff",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1705: fi",
          "1708: case $os in",
          "1709:  # Sometimes we do \"kernel-libc\", so those need to count as OSes.",
          "1710:  musl* | newlib* | relibc* | uclibc*)",
          "",
          "[Removed Lines]",
          "1707: # Now, validate our (potentially fixed-up) OS.",
          "",
          "[Added Lines]",
          "1720: # Now, validate our (potentially fixed-up) individual pieces (OS, OBJ).",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1715:  # VxWorks passes extra cpu info in the 4th filed.",
          "1716:  simlinux | simwindows | spe)",
          "1717:   ;;",
          "1718:  # Now accept the basic system types.",
          "1719:  # The portable systems comes first.",
          "1720:  # Each alternative MUST end in a * to match a version number.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1732:  # See `case $cpu-$os` validation below",
          "1733:  ghcjs)",
          "1734:   ;;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1723:       | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\",
          "1724:       | sym* |  plan9* | psp* | sim* | xray* | os68k* | v88r* \\",
          "1725:       | hiux* | abug | nacl* | netware* | windows* \\",
          "1727:       | mpw* | magic* | mmixware* | mon960* | lnews* \\",
          "1728:       | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\",
          "1729:       | aos* | aros* | cloudabi* | sortix* | twizzler* \\",
          "",
          "[Removed Lines]",
          "1726:       | os9* | macos* | osx* | ios* \\",
          "",
          "[Added Lines]",
          "1743:       | os9* | macos* | osx* | ios* | tvos* | watchos* \\",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1732:       | mirbsd* | netbsd* | dicos* | openedition* | ose* \\",
          "1733:       | bitrig* | openbsd* | secbsd* | solidbsd* | libertybsd* | os108* \\",
          "1734:       | ekkobsd* | freebsd* | riscix* | lynxos* | os400* \\",
          "1737:       | udi* | lites* | ieee* | go32* | aux* | hcos* \\",
          "1738:       | chorusrdb* | cegcc* | glidix* | serenity* \\",
          "1740:       | midipix* | mingw32* | mingw64* | mint* \\",
          "1741:       | uxpv* | beos* | mpeix* | udk* | moxiebox* \\",
          "1742:       | interix* | uwin* | mks* | rhapsody* | darwin* \\",
          "",
          "[Removed Lines]",
          "1735:       | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\",
          "1736:       | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\",
          "1739:       | cygwin* | msys* | pe* | moss* | proelf* | rtems* \\",
          "",
          "[Added Lines]",
          "1752:       | bosx* | nextstep* | cxux* | oabi* \\",
          "1753:       | ptx* | ecoff* | winnt* | domain* | vsta* \\",
          "1756:       | cygwin* | msys* | moss* | proelf* | rtems* \\",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1748:       | skyos* | haiku* | rdos* | toppers* | drops* | es* \\",
          "1749:       | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\",
          "1750:       | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* \\",
          "1752:   ;;",
          "1753:  # This one is extra strict with allowed versions",
          "1754:  sco3.2v2 | sco3.2v[4-9]* | sco5v6*)",
          "",
          "[Removed Lines]",
          "1751:       | nsk* | powerunix* | genode* | zvmoe* | qnx* | emx* | zephyr*)",
          "",
          "[Added Lines]",
          "1768:       | nsk* | powerunix* | genode* | zvmoe* | qnx* | emx* | zephyr* \\",
          "1769:       | fiwix* | mlibc* | cos* | mbr* )",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1756:   ;;",
          "1757:  none)",
          "1758:   ;;",
          "1761:   exit 1",
          "1762:   ;;",
          "1763: esac",
          "1765: # As a final step for OS-related things, validate the OS-kernel combination",
          "1766: # (given a valid OS), if there is a kernel.",
          "1770:   ;;",
          "1772:   ;;",
          "1774:   # These are just libc implementations, not actual OSes, and thus",
          "1775:   # require a kernel.",
          "1777:   exit 1",
          "1778:   ;;",
          "1780:   ;;",
          "1782:   ;;",
          "1784:   ;;",
          "1786:   ;;",
          "1788:   ;;",
          "1790:   # Blank kernel with real OS is always fine.",
          "1791:   ;;",
          "1794:   exit 1",
          "1795:   ;;",
          "1796: esac",
          "",
          "[Removed Lines]",
          "1760:   echo Invalid configuration \\`\"$1\"\\': OS \\`\"$os\"\\' not recognized 1>&2",
          "1767: case $kernel-$os in",
          "1768:  linux-gnu* | linux-dietlibc* | linux-android* | linux-newlib* \\",
          "1769:      | linux-musl* | linux-relibc* | linux-uclibc* )",
          "1771:  uclinux-uclibc* )",
          "1773:  -dietlibc* | -newlib* | -musl* | -relibc* | -uclibc* )",
          "1776:   echo \"Invalid configuration \\`$1': libc \\`$os' needs explicit kernel.\" 1>&2",
          "1779:  kfreebsd*-gnu* | kopensolaris*-gnu*)",
          "1781:  vxworks-simlinux | vxworks-simwindows | vxworks-spe)",
          "1783:  nto-qnx*)",
          "1785:  os2-emx)",
          "1789:  -*)",
          "1793:   echo \"Invalid configuration \\`$1': Kernel \\`$kernel' not known to work with OS \\`$os'.\" 1>&2",
          "",
          "[Added Lines]",
          "1777:  kernel* | msvc* )",
          "1778:   # Restricted further below",
          "1779:   ;;",
          "1780:  '')",
          "1781:   if test x\"$obj\" = x",
          "1782:   then",
          "1783:    echo \"Invalid configuration '$1': Blank OS only allowed with explicit machine code file format\" 1>&2",
          "1784:   fi",
          "1785:   ;;",
          "1787:   echo \"Invalid configuration '$1': OS '$os' not recognized\" 1>&2",
          "1788:   exit 1",
          "1789:   ;;",
          "1790: esac",
          "1792: case $obj in",
          "1793:  aout* | coff* | elf* | pe*)",
          "1794:   ;;",
          "1795:  '')",
          "1796:   # empty is fine",
          "1797:   ;;",
          "1799:   echo \"Invalid configuration '$1': Machine code format '$obj' not recognized\" 1>&2",
          "1800:   exit 1",
          "1801:   ;;",
          "1802: esac",
          "1804: # Here we handle the constraint that a (synthetic) cpu and os are",
          "1805: # valid only in combination with each other and nowhere else.",
          "1806: case $cpu-$os in",
          "1807:  # The \"javascript-unknown-ghcjs\" triple is used by GHC; we",
          "1808:  # accept it here in order to tolerate that, but reject any",
          "1809:  # variations.",
          "1810:  javascript-ghcjs)",
          "1811:   ;;",
          "1812:  javascript-* | *-ghcjs)",
          "1813:   echo \"Invalid configuration '$1': cpu '$cpu' is not valid with os '$os$obj'\" 1>&2",
          "1820: case $kernel-$os-$obj in",
          "1821:  linux-gnu*- | linux-dietlibc*- | linux-android*- | linux-newlib*- \\",
          "1822:      | linux-musl*- | linux-relibc*- | linux-uclibc*- | linux-mlibc*- )",
          "1823:   ;;",
          "1824:  uclinux-uclibc*- )",
          "1825:   ;;",
          "1826:  managarm-mlibc*- | managarm-kernel*- )",
          "1828:  windows*-msvc*-)",
          "1830:  -dietlibc*- | -newlib*- | -musl*- | -relibc*- | -uclibc*- | -mlibc*- )",
          "1833:   echo \"Invalid configuration '$1': libc '$os' needs explicit kernel.\" 1>&2",
          "1836:  -kernel*- )",
          "1837:   echo \"Invalid configuration '$1': '$os' needs explicit kernel.\" 1>&2",
          "1838:   exit 1",
          "1841:   echo \"Invalid configuration '$1': '$kernel' does not support '$os'.\" 1>&2",
          "1842:   exit 1",
          "1845:   echo \"Invalid configuration '$1': '$os' needs 'windows'.\" 1>&2",
          "1846:   exit 1",
          "1848:  kfreebsd*-gnu*- | kopensolaris*-gnu*-)",
          "1849:   ;;",
          "1850:  vxworks-simlinux- | vxworks-simwindows- | vxworks-spe-)",
          "1851:   ;;",
          "1852:  nto-qnx*-)",
          "1853:   ;;",
          "1854:  os2-emx-)",
          "1858:  none--*)",
          "1859:   # None (no kernel, i.e. freestanding / bare metal),",
          "1860:   # can be paired with an machine code file format",
          "1861:   ;;",
          "1862:  -*-)",
          "1865:  --*)",
          "1866:   # Blank kernel and OS with real machine code file format is always fine.",
          "1867:   ;;",
          "1869:   echo \"Invalid configuration '$1': Kernel '$kernel' not known to work with OS '$os'.\" 1>&2",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1873:   ;;",
          "1874: esac",
          "1877: exit",
          "1879: # Local variables:",
          "",
          "[Removed Lines]",
          "1876: echo \"$cpu-$vendor-${kernel:+$kernel-}$os\"",
          "",
          "[Added Lines]",
          "1952: echo \"$cpu-$vendor${kernel:+-$kernel}${os:+-$os}${obj:+-$obj}\"",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #",
          "5: ### Prerequisites",
          "7: AM_INIT_AUTOMAKE([foreign])",
          "8: LT_PREREQ([2.2])",
          "9: LT_INIT([dlopen])",
          "",
          "[Removed Lines]",
          "6: AC_INIT([cjose], [0.6.2.2])",
          "",
          "[Added Lines]",
          "6: AC_INIT([cjose], [0.6.2.3])",
          "",
          "---------------"
        ],
        "src/base64.c||src/base64.c": [
          "File: src/base64.c -> src/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         }",
          "125:     }",
          "128:         CJOSE_ERROR(err, CJOSE_ERR_INVALID_STATE);",
          "129:         goto b64_decode_failed;",
          "130:     }",
          "",
          "[Removed Lines]",
          "127:     if ((shift == 1) || (shift == 4)) {",
          "",
          "[Added Lines]",
          "127:     if ((shift == 1) || (shift == 4))",
          "128:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         CJOSE_ERROR(err, CJOSE_ERR_INVALID_STATE);",
          "148:         goto b64_decode_failed;",
          "149:     }",
          "",
          "[Removed Lines]",
          "146:     if (*outlen > rlen) {",
          "",
          "[Added Lines]",
          "147:     if (*outlen > rlen)",
          "148:     {",
          "",
          "---------------"
        ],
        "src/concatkdf.c||src/concatkdf.c": [
          "File: src/concatkdf.c -> src/concatkdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:             || 1 != EVP_DigestUpdate(ctx, ikm, ikmLen) || 1 != EVP_DigestUpdate(ctx, otherinfo, otherinfoLen)",
          "141:             || 1 != EVP_DigestFinal_ex(ctx, hash, NULL))",
          "142:         {",
          "144:             CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);",
          "145:             goto concatkdf_derive_finish;",
          "146:         }",
          "148:         uint8_t *ptr = buffer + offset;",
          "149:         memcpy(ptr, hash, min_len(hashlen, amt));",
          "151:         offset += hashlen;",
          "152:         amt -= hashlen;",
          "153:     }",
          "",
          "[Removed Lines]",
          "143:          cjose_get_dealloc()(hash);",
          "150:      cjose_get_dealloc()(hash);",
          "",
          "[Added Lines]",
          "143:             cjose_get_dealloc()(hash);",
          "150:         cjose_get_dealloc()(hash);",
          "",
          "---------------"
        ],
        "src/jwe.c||src/jwe.c": [
          "File: src/jwe.c -> src/jwe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "650: #ifndef HAVE_RSA_PKCS1_PADDING",
          "653:         CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);",
          "654:         return false;",
          "655:     }",
          "656: #endif // HAVE_RSA_PKCS1_PADDING",
          "659:     if (RSA_public_encrypt(jwe->cek_len, jwe->cek, recipient->enc_key.raw, (RSA *)jwk->keydata, padding)",
          "660:         != recipient->enc_key.raw_len)",
          "",
          "[Removed Lines]",
          "652:     if (padding == RSA_PKCS1_PADDING) {",
          "",
          "[Added Lines]",
          "652:     if (padding == RSA_PKCS1_PADDING)",
          "653:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "703: #ifndef HAVE_RSA_PKCS1_PADDING",
          "707:         CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);",
          "708:         return false;",
          "709:     }",
          "",
          "[Removed Lines]",
          "706:     if (padding == RSA_PKCS1_PADDING) {",
          "",
          "[Added Lines]",
          "707:     if (padding == RSA_PKCS1_PADDING)",
          "708:     {",
          "",
          "---------------"
        ],
        "src/jwk.c||src/jwk.c": [
          "File: src/jwk.c -> src/jwk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         jwk->kid = NULL;",
          "193:             jwk->fns->free_func(jwk);",
          "194:         }",
          "195:         jwk = NULL;",
          "",
          "[Removed Lines]",
          "192:         if (NULL != jwk->fns->free_func) {",
          "",
          "[Added Lines]",
          "192:         if (NULL != jwk->fns->free_func)",
          "193:         {",
          "",
          "---------------"
        ],
        "src/jws.c||src/jws.c": [
          "File: src/jws.c -> src/jws.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:     jws->cser_len = jws->hdr_b64u_len + jws->dat_b64u_len + jws->sig_b64u_len + 3;",
          "622:         CJOSE_ERROR(err, CJOSE_ERR_INVALID_STATE);",
          "623:         return false;",
          "624:     }",
          "",
          "[Removed Lines]",
          "621:     if (NULL != jws->cser) {",
          "",
          "[Added Lines]",
          "621:     if (NULL != jws->cser)",
          "622:     {",
          "",
          "---------------"
        ],
        "test/check_cjose.h||test/check_cjose.h": [
          "File: test/check_cjose.h -> test/check_cjose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: Suite *cjose_utils_suite(void);",
          "20: Suite *cjose_concatkdf_suite(void);",
          "29:                       \"Assertion '\" #X #OP #Y \"' failed: \" #LEN \"==%u, \" #X \"==0x%p, \" #Y \"==0x%p\", _chk_len, _chk_x, _chk_y); \\",
          "30:     } while (0);",
          "",
          "[Removed Lines]",
          "22: #define _ck_assert_bin(X, OP, Y, LEN)                                                                                            \\",
          "23:     do                                                                                                                           \\",
          "24:     {                                                                                                                            \\",
          "25:         const void *_chk_x = (X);                                                                                             \\",
          "26:         const void *_chk_y = (Y);                                                                                             \\",
          "27:         const unsigned int _chk_len = (LEN);                                                                                           \\",
          "28:         ck_assert_msg(0 OP memcmp(_chk_x, _chk_y, _chk_len),                                                                     \\",
          "",
          "[Added Lines]",
          "22: #define _ck_assert_bin(X, OP, Y, LEN)                                                                                          \\",
          "23:     do                                                                                                                         \\",
          "24:     {                                                                                                                          \\",
          "25:         const void *_chk_x = (X);                                                                                              \\",
          "26:         const void *_chk_y = (Y);                                                                                              \\",
          "27:         const unsigned int _chk_len = (LEN);                                                                                   \\",
          "28:         ck_assert_msg(0 OP memcmp(_chk_x, _chk_y, _chk_len),                                                                   \\",
          "",
          "---------------"
        ],
        "test/check_jwe.c||test/check_jwe.c": [
          "File: test/check_jwe.c -> test/check_jwe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "982:     const char *key = JWK_OCT_32;",
          "983:     const char *plain1 = \"Live long and prosper.\";",
          "985:     char *compact2 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.Gp\";",
          "987:     cjose_jwk_t *jwk = cjose_jwk_import(key, strlen(key), &err);",
          "",
          "[Removed Lines]",
          "984:     char *compact1 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.GpeKGEqd8KQ0v6JNea5aSA\";",
          "",
          "[Added Lines]",
          "984:     char *compact1",
          "985:         = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.GpeKGEqd8KQ0v6JNea5aSA\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1016:     cjose_jwe_t *jwe2 = cjose_jwe_import(compact2, strlen(compact2), &err);",
          "1017:     ck_assert_msg(NULL != jwe2,",
          "1022:     uint8_t *plain3 = NULL;",
          "1023:     size_t plain3_len = 0;",
          "1024:     plain3 = cjose_jwe_decrypt(jwe2, jwk, &plain3_len, &err);",
          "1025:     ck_assert_msg(NULL == plain3,",
          "1030:     cjose_jwe_release(jwe2);",
          "1031:     cjose_jwk_release(jwk);",
          "",
          "[Removed Lines]",
          "1018:                    \"cjose_jwe_import failed: \"",
          "1019:                    \"%s, file: %s, function: %s, line: %ld\",",
          "1020:                    err.message, err.file, err.function, err.line);",
          "1026:                    \"cjose_jwe_decrypt succeeded where it should have failed: \"",
          "1027:                    \"%s, file: %s, function: %s, line: %ld\",",
          "1028:                    err.message, err.file, err.function, err.line);",
          "",
          "[Added Lines]",
          "1019:                   \"cjose_jwe_import failed: \"",
          "1020:                   \"%s, file: %s, function: %s, line: %ld\",",
          "1021:                   err.message, err.file, err.function, err.line);",
          "1027:                   \"cjose_jwe_decrypt succeeded where it should have failed: \"",
          "1028:                   \"%s, file: %s, function: %s, line: %ld\",",
          "1029:                   err.message, err.file, err.function, err.line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19fa41695f67df19e3c354a5ad5075ac53887fe3",
      "candidate_info": {
        "commit_hash": "19fa41695f67df19e3c354a5ad5075ac53887fe3",
        "repo": "OpenIDC/cjose",
        "commit_url": "https://github.com/OpenIDC/cjose/commit/19fa41695f67df19e3c354a5ad5075ac53887fe3",
        "files": [
          "src/jwe.c",
          "test/check_jwe.c"
        ],
        "message": "use fixed authentication tag length of 16 octets in AES GCM decryption\n\nsee: https://github.com/cisco/cjose/issues/125\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "src/jwe.c||src/jwe.c",
          "test/check_jwe.c||test/check_jwe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/jwe.c||src/jwe.c",
            "test/check_jwe.c||test/check_jwe.c"
          ],
          "candidate": [
            "src/jwe.c||src/jwe.c",
            "test/check_jwe.c||test/check_jwe.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jwe.c||src/jwe.c": [
          "File: src/jwe.c -> src/jwe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1225:         goto _cjose_jwe_decrypt_dat_a256gcm_fail;",
          "1226:     }",
          "1229:     if (EVP_CIPHER_CTX_ctrl(ctx, CJOSE_EVP_CTRL_GCM_SET_TAG, jwe->enc_auth_tag.raw_len, jwe->enc_auth_tag.raw) != 1)",
          "1230:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228:     if (jwe->enc_auth_tag.raw_len != 16)",
          "1229:     {",
          "1230:         CJOSE_ERROR(err, CJOSE_ERR_CRYPTO);",
          "1231:         goto _cjose_jwe_decrypt_dat_aes_gcm_fail;",
          "1232:     }",
          "",
          "---------------"
        ],
        "test/check_jwe.c||test/check_jwe.c": [
          "File: test/check_jwe.c -> test/check_jwe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: }",
          "810: END_TEST",
          "812: START_TEST(test_cjose_jwe_decrypt_rsa)",
          "813: {",
          "814:     struct cjose_jwe_decrypt_rsa",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812: START_TEST(test_cjose_jwe_decrypt_aes_gcm)",
          "813: {",
          "814:     cjose_err err;",
          "816:     const char *key = JWK_OCT_32;",
          "817:     const char *plain1 = \"Live long and prosper.\";",
          "818:     char *compact1 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.GpeKGEqd8KQ0v6JNea5aSA\";",
          "819:     char *compact2 = \"eyJhbGciOiAiZGlyIiwgImVuYyI6ICJBMjU2R0NNIn0..Du_9fxxV-zrReaWC.aS_rpokeuxkaPc2sykcQDCQuJCYoww.Gp\";",
          "821:     cjose_jwk_t *jwk = cjose_jwk_import(key, strlen(key), &err);",
          "822:     ck_assert_msg(NULL != jwk,",
          "823:                   \"cjose_jwk_import failed: \"",
          "824:                   \"%s, file: %s, function: %s, line: %ld\",",
          "825:                   err.message, err.file, err.function, err.line);",
          "827:     cjose_jwe_t *jwe1 = cjose_jwe_import(compact1, strlen(compact1), &err);",
          "828:     ck_assert_msg(NULL != jwe1,",
          "829:                   \"cjose_jwe_import failed: \"",
          "830:                   \"%s, file: %s, function: %s, line: %ld\",",
          "831:                   err.message, err.file, err.function, err.line);",
          "833:     uint8_t *plain2 = NULL;",
          "834:     size_t plain2_len = 0;",
          "835:     plain2 = cjose_jwe_decrypt(jwe1, jwk, &plain2_len, &err);",
          "836:     ck_assert_msg(NULL != plain2,",
          "837:                   \"cjose_jwe_decrypt failed: \"",
          "838:                   \"%s, file: %s, function: %s, line: %ld\",",
          "839:                   err.message, err.file, err.function, err.line);",
          "841:     ck_assert_msg(plain2_len == strlen(plain1),",
          "842:                   \"length of decrypted plaintext does not match length of original, \"",
          "843:                   \"expected: %lu, found: %lu\",",
          "844:                   strlen(plain1), plain2_len);",
          "845:     ck_assert_msg(strncmp(plain1, plain2, plain2_len) == 0, \"decrypted plaintext does not match encrypted plaintext\");",
          "847:     cjose_get_dealloc()(plain2);",
          "848:     cjose_jwe_release(jwe1);",
          "850:     cjose_jwe_t *jwe2 = cjose_jwe_import(compact2, strlen(compact2), &err);",
          "851:     ck_assert_msg(NULL != jwe2,",
          "852:                    \"cjose_jwe_import failed: \"",
          "853:                    \"%s, file: %s, function: %s, line: %ld\",",
          "854:                    err.message, err.file, err.function, err.line);",
          "856:     uint8_t *plain3 = NULL;",
          "857:     size_t plain3_len = 0;",
          "858:     plain3 = cjose_jwe_decrypt(jwe2, jwk, &plain3_len, &err);",
          "859:     ck_assert_msg(NULL == plain3,",
          "860:                    \"cjose_jwe_decrypt succeeded where it should have failed: \"",
          "861:                    \"%s, file: %s, function: %s, line: %ld\",",
          "862:                    err.message, err.file, err.function, err.line);",
          "864:     cjose_jwe_release(jwe2);",
          "865:     cjose_jwk_release(jwk);",
          "866: }",
          "867: END_TEST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1210:     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_large);",
          "1211:     tcase_add_test(tc_jwe, test_cjose_jwe_self_encrypt_self_decrypt_many);",
          "1212:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes);",
          "1213:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_rsa);",
          "1214:     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_header);",
          "1215:     tcase_add_test(tc_jwe, test_cjose_jwe_encrypt_with_bad_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270:     tcase_add_test(tc_jwe, test_cjose_jwe_decrypt_aes_gcm);",
          "",
          "---------------"
        ]
      }
    }
  ]
}