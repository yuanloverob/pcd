{
  "cve_id": "CVE-2022-42898",
  "cve_desc": "PAC parsing in MIT Kerberos 5 (aka krb5) before 1.19.4 and 1.20.x before 1.20.1 has integer overflows that may lead to remote code execution (in KDC, kadmind, or a GSS or Kerberos application server) on 32-bit platforms (which have a resultant heap-based buffer overflow), and cause a denial of service on other platforms. This occurs in krb5_pac_parse in lib/krb5/krb/pac.c. Heimdal before 7.7.1 has \"a similar bug.\"",
  "repo": "krb5/krb5",
  "patch_hash": "ea92d2f0fcceb54a70910fa32e9a0d7a5afc3583",
  "patch_info": {
    "commit_hash": "ea92d2f0fcceb54a70910fa32e9a0d7a5afc3583",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/ea92d2f0fcceb54a70910fa32e9a0d7a5afc3583",
    "files": [
      "src/lib/krb5/krb/pac.c",
      "src/lib/krb5/krb/t_pac.c"
    ],
    "message": "Fix integer overflows in PAC parsing\n\nIn krb5_parse_pac(), check for buffer counts large enough to threaten\ninteger overflow in the header length and memory length calculations.\nAvoid potential integer overflows when checking the length of each\nbuffer.  Credit to OSS-Fuzz for discovering one of the issues.\n\nCVE-2022-42898:\n\nIn MIT krb5 releases 1.8 and later, an authenticated attacker may be\nable to cause a KDC or kadmind process to crash by reading beyond the\nbounds of allocated memory, creating a denial of service.  A\nprivileged attacker may similarly be able to cause a Kerberos or GSS\napplication service to crash.  On 32-bit platforms, an attacker can\nalso cause insufficient memory to be allocated for the result,\npotentially leading to remote code execution in a KDC, kadmind, or GSS\nor Kerberos application server process.  An attacker with the\nprivileges of a cross-realm KDC may be able to extract secrets from a\nKDC process's memory by having them copied into the PAC of a new\nticket.\n\nticket: 9074 (new)\ntags: pullup\ntarget_version: 1.20-next\ntarget_version: 1.19-next",
    "before_after_code_files": [
      "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
      "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
    ]
  },
  "patch_diff": {
    "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c": [
      "File: src/lib/krb5/krb/pac.c -> src/lib/krb5/krb/pac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include \"int-proto.h\"",
      "29: #include \"authdata.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: #define MAX_BUFFERS 4096",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "317:     if (version != 0)",
      "318:         return EINVAL;",
      "320:     header_len = PACTYPE_LENGTH + (cbuffers * PAC_INFO_BUFFER_LENGTH);",
      "321:     if (len < header_len)",
      "322:         return ERANGE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322:     if (cbuffers < 1 || cbuffers > MAX_BUFFERS)",
      "323:         return ERANGE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "349:             krb5_pac_free(context, pac);",
      "350:             return EINVAL;",
      "351:         }",
      "354:             krb5_pac_free(context, pac);",
      "355:             return ERANGE;",
      "356:         }",
      "",
      "[Removed Lines]",
      "352:         if (buffer->Offset < header_len ||",
      "353:             buffer->Offset + buffer->cbBufferSize > len) {",
      "",
      "[Added Lines]",
      "357:         if (buffer->Offset < header_len || buffer->Offset > len ||",
      "358:             buffer->cbBufferSize > len - buffer->Offset) {",
      "",
      "---------------"
    ],
    "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c": [
      "File: src/lib/krb5/krb/t_pac.c -> src/lib/krb5/krb/t_pac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "431:     0x8a, 0x81, 0x9c, 0x9c, 0x00, 0x00, 0x00, 0x00",
      "432: };",
      "434: static const char *s4u_principal = \"w2k8u@ACME.COM\";",
      "435: static const char *s4u_enterprise = \"w2k8u@abc@ACME.COM\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "434: static const unsigned char fuzz1[] = {",
      "435:     0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,",
      "436:     0x06, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf5",
      "437: };",
      "439: static const unsigned char fuzz2[] = {",
      "440:     0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,",
      "441:     0x20, 0x20",
      "442: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "828:         krb5_free_principal(context, sep);",
      "829:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "842:     ret = krb5_pac_parse(context, fuzz1, sizeof(fuzz1), &pac);",
      "843:     if (!ret)",
      "844:         err(context, ret, \"krb5_pac_parse should have failed\");",
      "845:     ret = krb5_pac_parse(context, fuzz2, sizeof(fuzz2), &pac);",
      "846:     if (!ret)",
      "847:         err(context, ret, \"krb5_pac_parse should have failed\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e661f0085ec5f969c76c0896a34322c6c432de4",
      "candidate_info": {
        "commit_hash": "4e661f0085ec5f969c76c0896a34322c6c432de4",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/4e661f0085ec5f969c76c0896a34322c6c432de4",
        "files": [
          "src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/t_pac.c"
        ],
        "message": "Fix integer overflows in PAC parsing\n\nIn krb5_parse_pac(), check for buffer counts large enough to threaten\ninteger overflow in the header length and memory length calculations.\nAvoid potential integer overflows when checking the length of each\nbuffer.  Credit to OSS-Fuzz for discovering one of the issues.\n\nCVE-2022-42898:\n\nIn MIT krb5 releases 1.8 and later, an authenticated attacker may be\nable to cause a KDC or kadmind process to crash by reading beyond the\nbounds of allocated memory, creating a denial of service.  A\nprivileged attacker may similarly be able to cause a Kerberos or GSS\napplication service to crash.  On 32-bit platforms, an attacker can\nalso cause insufficient memory to be allocated for the result,\npotentially leading to remote code execution in a KDC, kadmind, or GSS\nor Kerberos application server process.  An attacker with the\nprivileges of a cross-realm KDC may be able to extract secrets from a\nKDC process's memory by having them copied into the PAC of a new\nticket.\n\n(cherry picked from commit ea92d2f0fcceb54a70910fa32e9a0d7a5afc3583)\n\nticket: 9074\nversion_fixed: 1.19.4",
        "before_after_code_files": [
          "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
            "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
            "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c": [
          "File: src/lib/krb5/krb/pac.c -> src/lib/krb5/krb/pac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"k5-int.h\"",
          "28: #include \"authdata.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #define MAX_BUFFERS 4096",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     if (version != 0)",
          "317:         return EINVAL;",
          "319:     header_len = PACTYPE_LENGTH + (cbuffers * PAC_INFO_BUFFER_LENGTH);",
          "320:     if (len < header_len)",
          "321:         return ERANGE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     if (cbuffers < 1 || cbuffers > MAX_BUFFERS)",
          "322:         return ERANGE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:             krb5_pac_free(context, pac);",
          "349:             return EINVAL;",
          "350:         }",
          "353:             krb5_pac_free(context, pac);",
          "354:             return ERANGE;",
          "355:         }",
          "",
          "[Removed Lines]",
          "351:         if (buffer->Offset < header_len ||",
          "352:             buffer->Offset + buffer->cbBufferSize > len) {",
          "",
          "[Added Lines]",
          "356:         if (buffer->Offset < header_len || buffer->Offset > len ||",
          "357:             buffer->cbBufferSize > len - buffer->Offset) {",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c": [
          "File: src/lib/krb5/krb/t_pac.c -> src/lib/krb5/krb/t_pac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:     0x8a, 0x81, 0x9c, 0x9c, 0x00, 0x00, 0x00, 0x00",
          "432: };",
          "434: static const char *s4u_principal = \"w2k8u@ACME.COM\";",
          "435: static const char *s4u_enterprise = \"w2k8u@abc@ACME.COM\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434: static const unsigned char fuzz1[] = {",
          "435:     0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,",
          "436:     0x06, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf5",
          "437: };",
          "439: static const unsigned char fuzz2[] = {",
          "440:     0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,",
          "441:     0x20, 0x20",
          "442: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:         krb5_free_principal(context, sep);",
          "647:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     ret = krb5_pac_parse(context, fuzz1, sizeof(fuzz1), &pac);",
          "661:     if (!ret)",
          "662:         err(context, ret, \"krb5_pac_parse should have failed\");",
          "663:     ret = krb5_pac_parse(context, fuzz2, sizeof(fuzz2), &pac);",
          "664:     if (!ret)",
          "665:         err(context, ret, \"krb5_pac_parse should have failed\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b99de751dd35360c0fccac74a40f4a60dbf1ceea",
      "candidate_info": {
        "commit_hash": "b99de751dd35360c0fccac74a40f4a60dbf1ceea",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/b99de751dd35360c0fccac74a40f4a60dbf1ceea",
        "files": [
          "src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/t_pac.c"
        ],
        "message": "Fix integer overflows in PAC parsing\n\nIn krb5_parse_pac(), check for buffer counts large enough to threaten\ninteger overflow in the header length and memory length calculations.\nAvoid potential integer overflows when checking the length of each\nbuffer.  Credit to OSS-Fuzz for discovering one of the issues.\n\nCVE-2022-42898:\n\nIn MIT krb5 releases 1.8 and later, an authenticated attacker may be\nable to cause a KDC or kadmind process to crash by reading beyond the\nbounds of allocated memory, creating a denial of service.  A\nprivileged attacker may similarly be able to cause a Kerberos or GSS\napplication service to crash.  On 32-bit platforms, an attacker can\nalso cause insufficient memory to be allocated for the result,\npotentially leading to remote code execution in a KDC, kadmind, or GSS\nor Kerberos application server process.  An attacker with the\nprivileges of a cross-realm KDC may be able to extract secrets from a\nKDC process's memory by having them copied into the PAC of a new\nticket.\n\n(cherry picked from commit ea92d2f0fcceb54a70910fa32e9a0d7a5afc3583)\n\nticket: 9074\nversion_fixed: 1.20.1",
        "before_after_code_files": [
          "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
            "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
            "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c": [
          "File: src/lib/krb5/krb/pac.c -> src/lib/krb5/krb/pac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"int-proto.h\"",
          "29: #include \"authdata.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define MAX_BUFFERS 4096",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:     if (version != 0)",
          "318:         return EINVAL;",
          "320:     header_len = PACTYPE_LENGTH + (cbuffers * PAC_INFO_BUFFER_LENGTH);",
          "321:     if (len < header_len)",
          "322:         return ERANGE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     if (cbuffers < 1 || cbuffers > MAX_BUFFERS)",
          "323:         return ERANGE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:             krb5_pac_free(context, pac);",
          "350:             return EINVAL;",
          "351:         }",
          "354:             krb5_pac_free(context, pac);",
          "355:             return ERANGE;",
          "356:         }",
          "",
          "[Removed Lines]",
          "352:         if (buffer->Offset < header_len ||",
          "353:             buffer->Offset + buffer->cbBufferSize > len) {",
          "",
          "[Added Lines]",
          "357:         if (buffer->Offset < header_len || buffer->Offset > len ||",
          "358:             buffer->cbBufferSize > len - buffer->Offset) {",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/t_pac.c||src/lib/krb5/krb/t_pac.c": [
          "File: src/lib/krb5/krb/t_pac.c -> src/lib/krb5/krb/t_pac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:     0x8a, 0x81, 0x9c, 0x9c, 0x00, 0x00, 0x00, 0x00",
          "432: };",
          "434: static const char *s4u_principal = \"w2k8u@ACME.COM\";",
          "435: static const char *s4u_enterprise = \"w2k8u@abc@ACME.COM\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434: static const unsigned char fuzz1[] = {",
          "435:     0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,",
          "436:     0x06, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf5",
          "437: };",
          "439: static const unsigned char fuzz2[] = {",
          "440:     0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,",
          "441:     0x20, 0x20",
          "442: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "828:         krb5_free_principal(context, sep);",
          "829:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:     ret = krb5_pac_parse(context, fuzz1, sizeof(fuzz1), &pac);",
          "843:     if (!ret)",
          "844:         err(context, ret, \"krb5_pac_parse should have failed\");",
          "845:     ret = krb5_pac_parse(context, fuzz2, sizeof(fuzz2), &pac);",
          "846:     if (!ret)",
          "847:         err(context, ret, \"krb5_pac_parse should have failed\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ba75c3221df18db9e7ff27e7e0e495688878364",
      "candidate_info": {
        "commit_hash": "0ba75c3221df18db9e7ff27e7e0e495688878364",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/0ba75c3221df18db9e7ff27e7e0e495688878364",
        "files": [
          "src/lib/krb5/krb/authdata.h",
          "src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/pac_sign.c"
        ],
        "message": "Modernize PAC code\n\nPut the version and buffers directly in krb5_pac_data to avoid using a\nvariable-length array.  Use k5input for krb5_pac_parse().  Adjust some\nnames and comments.",
        "before_after_code_files": [
          "src/lib/krb5/krb/authdata.h||src/lib/krb5/krb/authdata.h",
          "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c",
          "src/lib/krb5/krb/pac_sign.c||src/lib/krb5/krb/pac_sign.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/authdata.h||src/lib/krb5/krb/authdata.h": [
          "File: src/lib/krb5/krb/authdata.h -> src/lib/krb5/krb/authdata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: struct krb5_pac_data {",
          "66:     krb5_boolean verified;",
          "67: };",
          "",
          "[Removed Lines]",
          "51: typedef struct _PAC_INFO_BUFFER {",
          "52:     krb5_ui_4 ulType;",
          "53:     krb5_ui_4 cbBufferSize;",
          "54:     uint64_t Offset;",
          "55: } PAC_INFO_BUFFER;",
          "57: typedef struct _PACTYPE {",
          "58:     krb5_ui_4 cBuffers;",
          "59:     krb5_ui_4 Version;",
          "60:     PAC_INFO_BUFFER Buffers[1];",
          "61: } PACTYPE;",
          "",
          "[Added Lines]",
          "51: struct k5_pac_buffer {",
          "52:     uint32_t type;",
          "53:     uint32_t size;",
          "54:     uint64_t offset;",
          "55: };",
          "60:     uint32_t nbuffers;",
          "61:     uint32_t version;",
          "62:     struct k5_pac_buffer *buffers;",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/pac.c||src/lib/krb5/krb/pac.c": [
          "File: src/lib/krb5/krb/pac.c -> src/lib/krb5/krb/pac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"k5-int.h\"",
          "28: #include \"int-proto.h\"",
          "29: #include \"authdata.h\"",
          "31: #define MAX_BUFFERS 4096",
          "38: krb5_error_code",
          "45: {",
          "47:     size_t header_len, i, pad = 0;",
          "50:     assert((data->data == NULL) == zerofill);",
          "54:         return EEXIST;",
          "61:         return ENOMEM;",
          "67:     if (data->length % PAC_ALIGNMENT)",
          "68:         pad = PAC_ALIGNMENT - (data->length % PAC_ALIGNMENT);",
          "73:         return ENOMEM;",
          "82:     memmove(pac->data.data + header_len + PAC_INFO_BUFFER_LENGTH,",
          "83:             pac->data.data + header_len,",
          "84:             pac->data.length - header_len);",
          "85:     memset(pac->data.data + header_len, 0, PAC_INFO_BUFFER_LENGTH);",
          "94:     if (zerofill)",
          "96:     else",
          "102:     pac->data.length += PAC_INFO_BUFFER_LENGTH + data->length + pad;",
          "109:     pac->verified = FALSE;",
          "",
          "[Removed Lines]",
          "39: k5_pac_add_buffer(krb5_context context,",
          "40:                   krb5_pac pac,",
          "41:                   krb5_ui_4 type,",
          "42:                   const krb5_data *data,",
          "43:                   krb5_boolean zerofill,",
          "44:                   krb5_data *out_data)",
          "46:     PACTYPE *header;",
          "48:     char *pac_data;",
          "53:     if (k5_pac_locate_buffer(context, pac, type, NULL) == 0) {",
          "55:     }",
          "57:     header = (PACTYPE *)realloc(pac->pac,",
          "58:                                 sizeof(PACTYPE) +",
          "59:                                 (pac->pac->cBuffers * sizeof(PAC_INFO_BUFFER)));",
          "60:     if (header == NULL) {",
          "62:     }",
          "63:     pac->pac = header;",
          "65:     header_len = PACTYPE_LENGTH + (pac->pac->cBuffers * PAC_INFO_BUFFER_LENGTH);",
          "70:     pac_data = realloc(pac->data.data,",
          "71:                        pac->data.length + PAC_INFO_BUFFER_LENGTH + data->length + pad);",
          "72:     if (pac_data == NULL) {",
          "74:     }",
          "75:     pac->data.data = pac_data;",
          "78:     for (i = 0; i < pac->pac->cBuffers; i++)",
          "79:         pac->pac->Buffers[i].Offset += PAC_INFO_BUFFER_LENGTH;",
          "88:     pac->pac->Buffers[i].ulType = type;",
          "89:     pac->pac->Buffers[i].cbBufferSize = data->length;",
          "90:     pac->pac->Buffers[i].Offset = pac->data.length + PAC_INFO_BUFFER_LENGTH;",
          "91:     assert((pac->pac->Buffers[i].Offset % PAC_ALIGNMENT) == 0);",
          "95:         memset(pac->data.data + pac->pac->Buffers[i].Offset, 0, data->length);",
          "97:         memcpy(pac->data.data + pac->pac->Buffers[i].Offset, data->data, data->length);",
          "99:     memset(pac->data.data + pac->pac->Buffers[i].Offset + data->length, 0, pad);",
          "101:     pac->pac->cBuffers++;",
          "104:     if (out_data != NULL) {",
          "105:         out_data->data = pac->data.data + pac->pac->Buffers[i].Offset;",
          "106:         out_data->length = data->length;",
          "107:     }",
          "",
          "[Added Lines]",
          "30: #include \"k5-input.h\"",
          "40: k5_pac_add_buffer(krb5_context context, krb5_pac pac, uint32_t type,",
          "41:                   const krb5_data *data, krb5_boolean zerofill,",
          "42:                   krb5_data *data_out)",
          "44:     struct k5_pac_buffer *nbufs;",
          "46:     char *ndata, *bufdata;",
          "51:     if (k5_pac_locate_buffer(context, pac, type, NULL) == 0)",
          "54:     if (pac->nbuffers >= MAX_BUFFERS)",
          "55:         return ERANGE;",
          "56:     nbufs = realloc(pac->buffers, (pac->nbuffers + 1) * sizeof(*pac->buffers));",
          "57:     if (nbufs == NULL)",
          "59:     pac->buffers = nbufs;",
          "61:     header_len = PACTYPE_LENGTH + pac->nbuffers * PAC_INFO_BUFFER_LENGTH;",
          "65:     ndata = realloc(pac->data.data,",
          "66:                     pac->data.length + PAC_INFO_BUFFER_LENGTH +",
          "67:                     data->length + pad);",
          "68:     if (ndata == NULL)",
          "70:     pac->data.data = ndata;",
          "73:     for (i = 0; i < pac->nbuffers; i++)",
          "74:         pac->buffers[i].offset += PAC_INFO_BUFFER_LENGTH;",
          "83:     pac->buffers[i].type = type;",
          "84:     pac->buffers[i].size = data->length;",
          "85:     pac->buffers[i].offset = pac->data.length + PAC_INFO_BUFFER_LENGTH;",
          "86:     assert((pac->buffers[i].offset % PAC_ALIGNMENT) == 0);",
          "89:     bufdata = pac->data.data + pac->buffers[i].offset;",
          "91:         memset(bufdata, 0, data->length);",
          "93:         memcpy(bufdata, data->data, data->length);",
          "94:     memset(bufdata + data->length, 0, pad);",
          "96:     pac->nbuffers++;",
          "99:     if (data_out != NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: }",
          "114: krb5_error_code KRB5_CALLCONV",
          "118:                     const krb5_data *data)",
          "119: {",
          "120:     return k5_pac_add_buffer(context, pac, type, data, FALSE, NULL);",
          "",
          "[Removed Lines]",
          "115: krb5_pac_add_buffer(krb5_context context,",
          "116:                     krb5_pac pac,",
          "117:                     krb5_ui_4 type,",
          "",
          "[Added Lines]",
          "108: krb5_pac_add_buffer(krb5_context context, krb5_pac pac, uint32_t type,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: void KRB5_CALLCONV",
          "129: {",
          "130:     if (pac != NULL) {",
          "131:         zapfree(pac->data.data, pac->data.length);",
          "133:         zapfree(pac, sizeof(*pac));",
          "134:     }",
          "135: }",
          "137: krb5_error_code",
          "142: {",
          "144:     size_t i;",
          "146:     if (pac == NULL)",
          "147:         return EINVAL;",
          "151:             if (buffer == NULL)",
          "153:             else",
          "154:                 return EINVAL;",
          "155:         }",
          "",
          "[Removed Lines]",
          "127: krb5_pac_free(krb5_context context,",
          "128:               krb5_pac pac)",
          "132:         free(pac->pac);",
          "138: k5_pac_locate_buffer(krb5_context context,",
          "139:                      const krb5_pac pac,",
          "140:                      krb5_ui_4 type,",
          "141:                      krb5_data *data)",
          "143:     PAC_INFO_BUFFER *buffer = NULL;",
          "149:     for (i = 0; i < pac->pac->cBuffers; i++) {",
          "150:         if (pac->pac->Buffers[i].ulType == type) {",
          "152:                 buffer = &pac->pac->Buffers[i];",
          "",
          "[Added Lines]",
          "118: krb5_pac_free(krb5_context context, krb5_pac pac)",
          "122:         free(pac->buffers);",
          "128: k5_pac_locate_buffer(krb5_context context, const krb5_pac pac, uint32_t type,",
          "129:                      krb5_data *data_out)",
          "131:     struct k5_pac_buffer *buffer = NULL;",
          "137:     for (i = 0; i < pac->nbuffers; i++) {",
          "138:         if (pac->buffers[i].type == type) {",
          "140:                 buffer = &pac->buffers[i];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:     if (buffer == NULL)",
          "159:         return ENOENT;",
          "168:     return 0;",
          "169: }",
          "",
          "[Removed Lines]",
          "161:     assert(buffer->Offset + buffer->cbBufferSize <= pac->data.length);",
          "163:     if (data != NULL) {",
          "164:         data->length = buffer->cbBufferSize;",
          "165:         data->data = pac->data.data + buffer->Offset;",
          "166:     }",
          "",
          "[Added Lines]",
          "149:     assert(buffer->offset < pac->data.length);",
          "150:     assert(buffer->size <= pac->data.length - buffer->offset);",
          "152:     if (data_out != NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174: krb5_error_code KRB5_CALLCONV",
          "179: {",
          "180:     krb5_data d;",
          "181:     krb5_error_code ret;",
          "183:     ret = k5_pac_locate_buffer(context, pac, type, &d);",
          "185:         return ret;",
          "189:         return ret;",
          "192:     return 0;",
          "193: }",
          "",
          "[Removed Lines]",
          "175: krb5_pac_get_buffer(krb5_context context,",
          "176:                     krb5_pac pac,",
          "177:                     krb5_ui_4 type,",
          "178:                     krb5_data *data)",
          "184:     if (ret != 0)",
          "187:     data->data = k5memdup(d.data, d.length, &ret);",
          "188:     if (data->data == NULL)",
          "190:     data->length = d.length;",
          "",
          "[Added Lines]",
          "162: krb5_pac_get_buffer(krb5_context context, krb5_pac pac, uint32_t type,",
          "163:                     krb5_data *data_out)",
          "169:     if (ret)",
          "172:     data_out->data = k5memdup(d.data, d.length, &ret);",
          "173:     if (data_out->data == NULL)",
          "175:     data_out->length = d.length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198: krb5_error_code KRB5_CALLCONV",
          "203: {",
          "204:     size_t i;",
          "208:         return ENOMEM;",
          "215:     return 0;",
          "216: }",
          "221: krb5_error_code KRB5_CALLCONV",
          "224: {",
          "225:     krb5_pac pac;",
          "234:         return ENOMEM;",
          "240:     pac->data.length = PACTYPE_LENGTH;",
          "242:     if (pac->data.data == NULL) {",
          "245:     }",
          "247:     pac->verified = FALSE;",
          "251:     return 0;",
          "252: }",
          "254: static krb5_error_code",
          "258: {",
          "262:     krb5_pac pac;",
          "271:     if (pac == NULL)",
          "287:     pac->verified = src->verified;",
          "290:     return 0;",
          "291: }",
          "296: krb5_error_code KRB5_CALLCONV",
          "300:                krb5_pac *ppac)",
          "301: {",
          "302:     krb5_error_code ret;",
          "303:     size_t i;",
          "305:     krb5_pac pac;",
          "306:     size_t header_len;",
          "320:         return EINVAL;",
          "323:         return ERANGE;",
          "326:     if (len < header_len)",
          "327:         return ERANGE;",
          "329:     ret = krb5_pac_init(context, &pac);",
          "331:         return ret;",
          "356:         }",
          "361:         }",
          "362:     }",
          "366:         krb5_pac_free(context, pac);",
          "367:         return ENOMEM;",
          "368:     }",
          "371:     pac->data.length = len;",
          "375:     return 0;",
          "376: }",
          "378: static krb5_error_code",
          "",
          "[Removed Lines]",
          "199: krb5_pac_get_types(krb5_context context,",
          "200:                    krb5_pac pac,",
          "201:                    size_t *len,",
          "202:                    krb5_ui_4 **types)",
          "207:     if (*types == NULL)",
          "212:     for (i = 0; i < pac->pac->cBuffers; i++)",
          "213:         (*types)[i] = pac->pac->Buffers[i].ulType;",
          "222: krb5_pac_init(krb5_context context,",
          "223:               krb5_pac *ppac)",
          "227:     pac = (krb5_pac)malloc(sizeof(*pac));",
          "228:     if (pac == NULL)",
          "229:         return ENOMEM;",
          "231:     pac->pac = (PACTYPE *)malloc(sizeof(PACTYPE));",
          "232:     if (pac->pac == NULL) {",
          "233:         free(pac);",
          "235:     }",
          "237:     pac->pac->cBuffers = 0;",
          "238:     pac->pac->Version = 0;",
          "241:     pac->data.data = calloc(1, pac->data.length);",
          "243:         krb5_pac_free(context, pac);",
          "244:         return ENOMEM;",
          "255: k5_pac_copy(krb5_context context,",
          "256:             krb5_pac src,",
          "257:             krb5_pac *dst)",
          "259:     size_t header_len;",
          "260:     krb5_ui_4 cbuffers;",
          "261:     krb5_error_code code;",
          "264:     cbuffers = src->pac->cBuffers;",
          "265:     if (cbuffers != 0)",
          "266:         cbuffers--;",
          "268:     header_len = sizeof(PACTYPE) + cbuffers * sizeof(PAC_INFO_BUFFER);",
          "270:     pac = (krb5_pac)malloc(sizeof(*pac));",
          "272:         return ENOMEM;",
          "274:     pac->pac = k5memdup(src->pac, header_len, &code);",
          "275:     if (pac->pac == NULL) {",
          "276:         free(pac);",
          "277:         return code;",
          "278:     }",
          "280:     code = krb5int_copy_data_contents(context, &src->data, &pac->data);",
          "281:     if (code != 0) {",
          "282:         free(pac->pac);",
          "283:         free(pac);",
          "284:         return ENOMEM;",
          "285:     }",
          "297: krb5_pac_parse(krb5_context context,",
          "298:                const void *ptr,",
          "299:                size_t len,",
          "304:     const unsigned char *p = (const unsigned char *)ptr;",
          "307:     krb5_ui_4 cbuffers, version;",
          "311:     if (len < PACTYPE_LENGTH)",
          "312:         return ERANGE;",
          "314:     cbuffers = load_32_le(p);",
          "315:     p += 4;",
          "316:     version = load_32_le(p);",
          "317:     p += 4;",
          "319:     if (version != 0)",
          "322:     if (cbuffers < 1 || cbuffers > MAX_BUFFERS)",
          "325:     header_len = PACTYPE_LENGTH + (cbuffers * PAC_INFO_BUFFER_LENGTH);",
          "330:     if (ret != 0)",
          "333:     pac->pac = (PACTYPE *)realloc(pac->pac,",
          "334:                                   sizeof(PACTYPE) + ((cbuffers - 1) * sizeof(PAC_INFO_BUFFER)));",
          "335:     if (pac->pac == NULL) {",
          "336:         krb5_pac_free(context, pac);",
          "337:         return ENOMEM;",
          "338:     }",
          "340:     pac->pac->cBuffers = cbuffers;",
          "341:     pac->pac->Version = version;",
          "343:     for (i = 0; i < pac->pac->cBuffers; i++) {",
          "344:         PAC_INFO_BUFFER *buffer = &pac->pac->Buffers[i];",
          "346:         buffer->ulType = load_32_le(p);",
          "347:         p += 4;",
          "348:         buffer->cbBufferSize = load_32_le(p);",
          "349:         p += 4;",
          "350:         buffer->Offset = load_64_le(p);",
          "351:         p += 8;",
          "353:         if (buffer->Offset % PAC_ALIGNMENT) {",
          "354:             krb5_pac_free(context, pac);",
          "355:             return EINVAL;",
          "357:         if (buffer->Offset < header_len || buffer->Offset > len ||",
          "358:             buffer->cbBufferSize > len - buffer->Offset) {",
          "359:             krb5_pac_free(context, pac);",
          "360:             return ERANGE;",
          "364:     pac->data.data = realloc(pac->data.data, len);",
          "365:     if (pac->data.data == NULL) {",
          "369:     memcpy(pac->data.data, ptr, len);",
          "",
          "[Added Lines]",
          "183: krb5_pac_get_types(krb5_context context, krb5_pac pac, size_t *len_out,",
          "184:                    uint32_t **types_out)",
          "189:     if (*types_out == NULL)",
          "194:     for (i = 0; i < pac->nbuffers; i++)",
          "195:         (*types_out)[i] = pac->buffers[i].type;",
          "201: krb5_pac_init(krb5_context context, krb5_pac *pac_out)",
          "203:     krb5_error_code ret;",
          "208:     pac = malloc(sizeof(*pac));",
          "209:     if (pac == NULL)",
          "212:     pac->nbuffers = 0;",
          "213:     pac->buffers = NULL;",
          "214:     pac->version = 0;",
          "217:     pac->data.data = k5alloc(pac->data.length, &ret);",
          "219:         free(pac);",
          "220:         return ret;",
          "230: copy_pac(krb5_context context, krb5_pac src, krb5_pac *dst_out)",
          "232:     krb5_error_code ret;",
          "237:     pac = k5alloc(sizeof(*pac), &ret);",
          "239:         goto fail;",
          "241:     pac->buffers = k5memdup(src->buffers,",
          "242:                             src->nbuffers * sizeof(*pac->buffers), &ret);",
          "243:     if (pac->buffers == NULL)",
          "244:         goto fail;",
          "246:     ret = krb5int_copy_data_contents(context, &src->data, &pac->data);",
          "247:     if (ret)",
          "248:         goto fail;",
          "250:     pac->nbuffers = src->nbuffers;",
          "251:     pac->version = src->version;",
          "257: fail:",
          "258:     krb5_pac_free(context, pac);",
          "259:     return ret;",
          "264: krb5_pac_parse(krb5_context context, const void *ptr, size_t len,",
          "271:     uint32_t nbuffers, version;",
          "272:     struct k5input in;",
          "273:     char *ndata;",
          "277:     k5_input_init(&in, ptr, len);",
          "279:     nbuffers = k5_input_get_uint32_le(&in);",
          "280:     version = k5_input_get_uint32_le(&in);",
          "281:     if (in.status || version != 0)",
          "284:     if (nbuffers < 1 || nbuffers > MAX_BUFFERS)",
          "287:     header_len = PACTYPE_LENGTH + (nbuffers * PAC_INFO_BUFFER_LENGTH);",
          "292:     if (ret)",
          "295:     pac->buffers = k5calloc(nbuffers, sizeof(*pac->buffers), &ret);",
          "296:     if (ret)",
          "297:         goto fail;",
          "299:     pac->nbuffers = nbuffers;",
          "300:     pac->version = version;",
          "302:     for (i = 0; i < nbuffers; i++) {",
          "303:         struct k5_pac_buffer *buffer = &pac->buffers[i];",
          "305:         buffer->type = k5_input_get_uint32_le(&in);",
          "306:         buffer->size = k5_input_get_uint32_le(&in);",
          "307:         buffer->offset = k5_input_get_uint64_le(&in);",
          "309:         if (in.status || buffer->offset % PAC_ALIGNMENT) {",
          "310:             ret = EINVAL;",
          "311:             goto fail;",
          "313:         if (buffer->offset < header_len || buffer->offset > len ||",
          "314:             buffer->size > len - buffer->offset) {",
          "315:             ret = ERANGE;",
          "316:             goto fail;",
          "320:     ndata = realloc(pac->data.data, len);",
          "321:     if (ndata == NULL) {",
          "325:     pac->data.data = ndata;",
          "326:     memcpy(ndata, ptr, len);",
          "334: fail:",
          "335:     krb5_pac_free(context, pac);",
          "336:     return ret;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396: }",
          "398: krb5_error_code KRB5_CALLCONV",
          "403: {",
          "404:     krb5_error_code ret;",
          "405:     krb5_data client_info;",
          "406:     char *pac_princname;",
          "407:     unsigned char *p;",
          "408:     krb5_timestamp pac_authtime;",
          "410:     uint64_t pac_nt_authtime;",
          "412:     if (authtime_out != NULL)",
          "",
          "[Removed Lines]",
          "399: krb5_pac_get_client_info(krb5_context context,",
          "400:                          const krb5_pac pac,",
          "401:                          krb5_timestamp *authtime_out,",
          "402:                          char **princname_out)",
          "409:     krb5_ui_2 pac_princname_length;",
          "",
          "[Added Lines]",
          "360: krb5_pac_get_client_info(krb5_context context, const krb5_pac pac,",
          "361:                          krb5_timestamp *authtime_out, char **princname_out)",
          "368:     uint16_t pac_princname_length;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "416:     ret = k5_pac_locate_buffer(context, pac, KRB5_PAC_CLIENT_INFO,",
          "417:                                &client_info);",
          "419:         return ret;",
          "421:     if (client_info.length < PAC_CLIENT_INFO_LENGTH)",
          "",
          "[Removed Lines]",
          "418:     if (ret != 0)",
          "",
          "[Added Lines]",
          "377:     if (ret)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:     p += 2;",
          "430:     ret = k5_time_to_seconds_since_1970(pac_nt_authtime, &pac_authtime);",
          "432:         return ret;",
          "434:     if (client_info.length < PAC_CLIENT_INFO_LENGTH + pac_princname_length ||",
          "",
          "[Removed Lines]",
          "431:     if (ret != 0)",
          "",
          "[Added Lines]",
          "390:     if (ret)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "436:         return ERANGE;",
          "438:     ret = k5_utf16le_to_utf8(p, pac_princname_length, &pac_princname);",
          "440:         return ret;",
          "442:     if (authtime_out != NULL)",
          "",
          "[Removed Lines]",
          "439:     if (ret != 0)",
          "",
          "[Added Lines]",
          "398:     if (ret)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "447: }",
          "449: krb5_error_code",
          "454:                        krb5_boolean with_realm)",
          "455: {",
          "456:     krb5_error_code ret;",
          "",
          "[Removed Lines]",
          "450: k5_pac_validate_client(krb5_context context,",
          "451:                        const krb5_pac pac,",
          "452:                        krb5_timestamp authtime,",
          "453:                        krb5_const_principal principal,",
          "",
          "[Added Lines]",
          "409: k5_pac_validate_client(krb5_context context, const krb5_pac pac,",
          "410:                        krb5_timestamp authtime, krb5_const_principal principal,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "461:     ret = krb5_pac_get_client_info(context, pac, &pac_authtime,",
          "462:                                    &pac_princname);",
          "464:         return ret;",
          "466:     flags = KRB5_PRINCIPAL_UNPARSE_DISPLAY;",
          "",
          "[Removed Lines]",
          "463:     if (ret != 0)",
          "",
          "[Added Lines]",
          "420:     if (ret)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "468:         flags |= KRB5_PRINCIPAL_UNPARSE_NO_REALM;",
          "470:     ret = krb5_unparse_name_flags(context, principal, flags, &princname);",
          "472:         free(pac_princname);",
          "473:         return ret;",
          "474:     }",
          "",
          "[Removed Lines]",
          "471:     if (ret != 0) {",
          "",
          "[Added Lines]",
          "428:     if (ret) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "482:     return ret;",
          "483: }",
          "485: static krb5_error_code",
          "487:                krb5_data *data)",
          "488: {",
          "490:     size_t i;",
          "492:     assert(type == KRB5_PAC_SERVER_CHECKSUM ||",
          "",
          "[Removed Lines]",
          "486: zero_signature(krb5_context context, const krb5_pac pac, krb5_ui_4 type,",
          "489:     PAC_INFO_BUFFER *buffer = NULL;",
          "",
          "[Added Lines]",
          "444: zero_signature(krb5_context context, const krb5_pac pac, uint32_t type,",
          "447:     struct k5_pac_buffer *buffer = NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "494:            type == KRB5_PAC_FULL_CHECKSUM);",
          "495:     assert(data->length >= pac->data.length);",
          "500:             break;",
          "501:         }",
          "502:     }",
          "",
          "[Removed Lines]",
          "497:     for (i = 0; i < pac->pac->cBuffers; i++) {",
          "498:         if (pac->pac->Buffers[i].ulType == type) {",
          "499:             buffer = &pac->pac->Buffers[i];",
          "",
          "[Added Lines]",
          "455:     for (i = 0; i < pac->nbuffers; i++) {",
          "456:         if (pac->buffers[i].type == type) {",
          "457:             buffer = &pac->buffers[i];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "504:     if (buffer == NULL)",
          "505:         return ENOENT;",
          "511:         return KRB5_BAD_MSIZE;",
          "518:     return 0;",
          "519: }",
          "",
          "[Removed Lines]",
          "507:     if (buffer->Offset + buffer->cbBufferSize > pac->data.length)",
          "508:         return ERANGE;",
          "510:     if (buffer->cbBufferSize < PAC_SIGNATURE_DATA_LENGTH)",
          "514:     memset(data->data + buffer->Offset + PAC_SIGNATURE_DATA_LENGTH,",
          "515:            0,",
          "516:            buffer->cbBufferSize - PAC_SIGNATURE_DATA_LENGTH);",
          "",
          "[Added Lines]",
          "465:     if (buffer->size < PAC_SIGNATURE_DATA_LENGTH)",
          "467:     if (buffer->size > pac->data.length ||",
          "468:         buffer->offset > pac->data.length - buffer->size)",
          "469:         return ERANGE;",
          "472:     memset(data->data + buffer->offset + PAC_SIGNATURE_DATA_LENGTH, 0,",
          "473:            buffer->size - PAC_SIGNATURE_DATA_LENGTH);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "531:     size_t cksumlen;",
          "533:     ret = k5_pac_locate_buffer(context, pac, buffer_type, &buffer);",
          "535:         return ret;",
          "536:     if (buffer.length < PAC_SIGNATURE_DATA_LENGTH)",
          "537:         return KRB5_BAD_MSIZE;",
          "",
          "[Removed Lines]",
          "534:     if (ret != 0)",
          "",
          "[Added Lines]",
          "491:     if (ret)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "640:     krb5_error_code ret;",
          "641:     krb5_pac pac = NULL;",
          "642:     krb5_data *recoded_tkt = NULL;",
          "644:     uint8_t z = 0;",
          "645:     krb5_authdata zpac = { KV5M_AUTHDATA, KRB5_AUTHDATA_WIN2K_PAC, 1, &z };",
          "646:     krb5_boolean is_service_tkt;",
          "",
          "[Removed Lines]",
          "643:     krb5_authdata **authdata, *orig, **ifrel = NULL, **recoded_ifrel = NULL;",
          "",
          "[Added Lines]",
          "601:     krb5_authdata **authdata = enc_tkt->authorization_data;",
          "602:     krb5_authdata *orig, **ifrel = NULL, **recoded_ifrel = NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "658:         if (authdata[i]->ad_type != KRB5_AUTHDATA_IF_RELEVANT)",
          "659:             continue;",
          "",
          "[Removed Lines]",
          "656:     authdata = enc_tkt->authorization_data;",
          "657:     for (i = 0; authdata != NULL && authdata[i] != NULL; i++) {",
          "",
          "[Added Lines]",
          "610:     if (authdata == NULL)",
          "611:         return 0;",
          "618:     for (i = 0; authdata[i] != NULL; i++) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "676:     }",
          "680:         ret = 0;",
          "681:         goto cleanup;",
          "682:     }",
          "",
          "[Removed Lines]",
          "679:     if (ifrel == NULL) {",
          "",
          "[Added Lines]",
          "640:     if (authdata[i] == NULL) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "751:     if (server != NULL || privsvr != NULL) {",
          "752:         ret = verify_pac_checksums(context, pac, FALSE, server, privsvr);",
          "754:             return ret;",
          "755:     }",
          "757:     if (principal != NULL) {",
          "758:         ret = k5_pac_validate_client(context, pac, authtime,",
          "759:                                      principal, with_realm);",
          "761:             return ret;",
          "762:     }",
          "",
          "[Removed Lines]",
          "753:         if (ret != 0)",
          "760:         if (ret != 0)",
          "",
          "[Added Lines]",
          "714:         if (ret)",
          "721:         if (ret)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "772: };",
          "774: static krb5_error_code",
          "776: {",
          "778:     return 0;",
          "779: }",
          "781: static void",
          "786: {",
          "788: }",
          "790: static void",
          "792: {",
          "793:     return;",
          "794: }",
          "796: static krb5_error_code",
          "801: {",
          "802:     struct mspac_context *pacctx;",
          "805:     if (pacctx == NULL)",
          "806:         return ENOMEM;",
          "",
          "[Removed Lines]",
          "775: mspac_init(krb5_context kcontext, void **plugin_context)",
          "782: mspac_flags(krb5_context kcontext,",
          "783:             void *plugin_context,",
          "784:             krb5_authdatatype ad_type,",
          "785:             krb5_flags *flags)",
          "791: mspac_fini(krb5_context kcontext, void *plugin_context)",
          "797: mspac_request_init(krb5_context kcontext,",
          "798:                    krb5_authdata_context context,",
          "799:                    void *plugin_context,",
          "800:                    void **request_context)",
          "804:     pacctx = (struct mspac_context *)malloc(sizeof(*pacctx));",
          "",
          "[Added Lines]",
          "736: mspac_init(krb5_context context, void **plugin_context)",
          "743: mspac_flags(krb5_context context, void *plugin_context,",
          "744:             krb5_authdatatype ad_type, krb5_flags *flags)",
          "750: mspac_fini(krb5_context context, void *plugin_context)",
          "756: mspac_request_init(krb5_context context, krb5_authdata_context actx,",
          "757:                    void *plugin_context, void **request_context)",
          "761:     pacctx = malloc(sizeof(*pacctx));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "813: }",
          "815: static krb5_error_code",
          "822:                       krb5_const_principal kdc_issuer)",
          "823: {",
          "825:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "827:     if (kdc_issued)",
          "828:         return EINVAL;",
          "830:     if (pacctx->pac != NULL) {",
          "832:         pacctx->pac = NULL;",
          "833:     }",
          "",
          "[Removed Lines]",
          "816: mspac_import_authdata(krb5_context kcontext,",
          "817:                       krb5_authdata_context context,",
          "818:                       void *plugin_context,",
          "819:                       void *request_context,",
          "820:                       krb5_authdata **authdata,",
          "821:                       krb5_boolean kdc_issued,",
          "824:     krb5_error_code code;",
          "831:         krb5_pac_free(kcontext, pacctx->pac);",
          "",
          "[Added Lines]",
          "773: mspac_import_authdata(krb5_context context, krb5_authdata_context actx,",
          "774:                       void *plugin_context, void *request_context,",
          "775:                       krb5_authdata **authdata, krb5_boolean kdc_issued,",
          "784:         krb5_pac_free(context, pacctx->pac);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "836:     assert((authdata[0]->ad_type & AD_TYPE_FIELD_TYPE_MASK) ==",
          "837:            KRB5_AUTHDATA_WIN2K_PAC);",
          "843: }",
          "845: static krb5_error_code",
          "852: {",
          "853:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "854:     krb5_error_code code;",
          "",
          "[Removed Lines]",
          "839:     code = krb5_pac_parse(kcontext, authdata[0]->contents,",
          "840:                           authdata[0]->length, &pacctx->pac);",
          "842:     return code;",
          "846: mspac_export_authdata(krb5_context kcontext,",
          "847:                       krb5_authdata_context context,",
          "848:                       void *plugin_context,",
          "849:                       void *request_context,",
          "850:                       krb5_flags usage,",
          "851:                       krb5_authdata ***out_authdata)",
          "",
          "[Added Lines]",
          "792:     return krb5_pac_parse(context, authdata[0]->contents, authdata[0]->length,",
          "793:                           &pacctx->pac);",
          "797: mspac_export_authdata(krb5_context context, krb5_authdata_context actx,",
          "798:                       void *plugin_context, void *request_context,",
          "799:                       krb5_flags usage, krb5_authdata ***authdata_out)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "869:     }",
          "870:     authdata[1] = NULL;",
          "873:     if (code != 0) {",
          "875:         return code;",
          "876:     }",
          "",
          "[Removed Lines]",
          "872:     code = krb5int_copy_data_contents(kcontext, &pacctx->pac->data, &data);",
          "874:         krb5_free_authdata(kcontext, authdata);",
          "",
          "[Added Lines]",
          "820:     code = krb5int_copy_data_contents(context, &pacctx->pac->data, &data);",
          "822:         krb5_free_authdata(context, authdata);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "883:     authdata[1] = NULL;",
          "887:     return 0;",
          "888: }",
          "890: static krb5_error_code",
          "897:              const krb5_ap_req *req)",
          "898: {",
          "900:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "902:     if (pacctx->pac == NULL)",
          "903:         return EINVAL;",
          "",
          "[Removed Lines]",
          "891: mspac_verify(krb5_context kcontext,",
          "892:              krb5_authdata_context context,",
          "893:              void *plugin_context,",
          "894:              void *request_context,",
          "895:              const krb5_auth_context *auth_context,",
          "896:              const krb5_keyblock *key,",
          "899:     krb5_error_code code;",
          "905:     code = krb5_pac_verify(kcontext, pacctx->pac,",
          "906:                            req->ticket->enc_part2->times.authtime,",
          "907:                            req->ticket->enc_part2->client, key, NULL);",
          "908:     if (code != 0)",
          "909:         TRACE_MSPAC_VERIFY_FAIL(kcontext, code);",
          "",
          "[Added Lines]",
          "839: mspac_verify(krb5_context context, krb5_authdata_context actx,",
          "840:              void *plugin_context, void *request_context,",
          "841:              const krb5_auth_context *auth_context, const krb5_keyblock *key,",
          "844:     krb5_error_code ret;",
          "850:     ret = krb5_pac_verify(context, pacctx->pac,",
          "851:                           req->ticket->enc_part2->times.authtime,",
          "852:                           req->ticket->enc_part2->client, key, NULL);",
          "853:     if (ret)",
          "854:         TRACE_MSPAC_VERIFY_FAIL(context, ret);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "919: }",
          "921: static void",
          "926: {",
          "927:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "929:     if (pacctx != NULL) {",
          "933:         free(pacctx);",
          "934:     }",
          "935: }",
          "",
          "[Removed Lines]",
          "922: mspac_request_fini(krb5_context kcontext,",
          "923:                    krb5_authdata_context context,",
          "924:                    void *plugin_context,",
          "925:                    void *request_context)",
          "930:         if (pacctx->pac != NULL)",
          "931:             krb5_pac_free(kcontext, pacctx->pac);",
          "",
          "[Added Lines]",
          "867: mspac_request_fini(krb5_context context, krb5_authdata_context actx,",
          "868:                    void *plugin_context, void *request_context)",
          "873:         krb5_pac_free(context, pacctx->pac);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "937: #define STRLENOF(x) (sizeof((x)) - 1)",
          "939: static struct {",
          "941:     krb5_data attribute;",
          "942: } mspac_attribute_types[] = {",
          "944:                                   \"urn:mspac:\" } },",
          "945:     { KRB5_PAC_LOGON_INFO,       { KV5M_DATA,",
          "946:                                    STRLENOF(\"urn:mspac:logon-info\"),",
          "",
          "[Removed Lines]",
          "940:     krb5_ui_4 type;",
          "943:     { (krb5_ui_4)-1,            { KV5M_DATA, STRLENOF(\"urn:mspac:\"),",
          "",
          "[Added Lines]",
          "881:     uint32_t type;",
          "884:     { (uint32_t)-1,             { KV5M_DATA, STRLENOF(\"urn:mspac:\"),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "968: #define MSPAC_ATTRIBUTE_COUNT   (sizeof(mspac_attribute_types)/sizeof(mspac_attribute_types[0]))",
          "970: static krb5_error_code",
          "972: {",
          "973:     unsigned int i;",
          "",
          "[Removed Lines]",
          "971: mspac_type2attr(krb5_ui_4 type, krb5_data *attr)",
          "",
          "[Added Lines]",
          "912: mspac_type2attr(uint32_t type, krb5_data *attr)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "983: }",
          "985: static krb5_error_code",
          "987: {",
          "988:     unsigned int i;",
          "",
          "[Removed Lines]",
          "986: mspac_attr2type(const krb5_data *attr, krb5_ui_4 *type)",
          "",
          "[Added Lines]",
          "927: mspac_attr2type(const krb5_data *attr, uint32_t *type)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1010: }",
          "1012: static krb5_error_code",
          "1018: {",
          "1019:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1020:     unsigned int i, j;",
          "1021:     krb5_data *attrs;",
          "1024:     if (pacctx->pac == NULL)",
          "1025:         return ENOENT;",
          "1028:     if (attrs == NULL)",
          "1029:         return ENOMEM;",
          "1031:     j = 0;",
          "1044:         krb5_data attr;",
          "1053:         } else {",
          "1054:             int length;",
          "1056:             length = asprintf(&attrs[j].data, \"urn:mspac:%d\",",
          "1058:             if (length < 0) {",
          "1061:             }",
          "1062:             attrs[j++].length = length;",
          "1063:         }",
          "",
          "[Removed Lines]",
          "1013: mspac_get_attribute_types(krb5_context kcontext,",
          "1014:                           krb5_authdata_context context,",
          "1015:                           void *plugin_context,",
          "1016:                           void *request_context,",
          "1017:                           krb5_data **out_attrs)",
          "1022:     krb5_error_code code;",
          "1027:     attrs = calloc(1 + pacctx->pac->pac->cBuffers + 1, sizeof(krb5_data));",
          "1034:     code = krb5int_copy_data_contents(kcontext,",
          "1035:                                       &mspac_attribute_types[0].attribute,",
          "1036:                                       &attrs[j++]);",
          "1037:     if (code != 0) {",
          "1038:         free(attrs);",
          "1039:         return code;",
          "1040:     }",
          "1043:     for (i = 0; i < pacctx->pac->pac->cBuffers; i++) {",
          "1046:         code = mspac_type2attr(pacctx->pac->pac->Buffers[i].ulType, &attr);",
          "1047:         if (code == 0) {",
          "1048:             code = krb5int_copy_data_contents(kcontext, &attr, &attrs[j++]);",
          "1049:             if (code != 0) {",
          "1050:                 krb5int_free_data_list(kcontext, attrs);",
          "1051:                 return code;",
          "1052:             }",
          "1057:                               pacctx->pac->pac->Buffers[i].ulType);",
          "1059:                 krb5int_free_data_list(kcontext, attrs);",
          "1060:                 return ENOMEM;",
          "",
          "[Added Lines]",
          "954: mspac_get_attribute_types(krb5_context context, krb5_authdata_context actx,",
          "955:                           void *plugin_context, void *request_context,",
          "956:                           krb5_data **attrs_out)",
          "961:     krb5_error_code ret;",
          "966:     attrs = calloc(1 + pacctx->pac->nbuffers + 1, sizeof(krb5_data));",
          "973:     ret = krb5int_copy_data_contents(context,",
          "974:                                      &mspac_attribute_types[0].attribute,",
          "975:                                      &attrs[j++]);",
          "976:     if (ret)",
          "977:         goto fail;",
          "980:     for (i = 0; i < pacctx->pac->nbuffers; i++) {",
          "983:         ret = mspac_type2attr(pacctx->pac->buffers[i].type, &attr);",
          "984:         if (!ret) {",
          "985:             ret = krb5int_copy_data_contents(context, &attr, &attrs[j++]);",
          "986:             if (ret)",
          "987:                 goto fail;",
          "992:                               pacctx->pac->buffers[i].type);",
          "994:                 ret = ENOMEM;",
          "995:                 goto fail;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1065:     attrs[j].data = NULL;",
          "1066:     attrs[j].length = 0;",
          "1070:     return 0;",
          "1071: }",
          "1073: static krb5_error_code",
          "1084: {",
          "1085:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1089:     if (display_value != NULL) {",
          "1090:         display_value->data = NULL;",
          "",
          "[Removed Lines]",
          "1074: mspac_get_attribute(krb5_context kcontext,",
          "1075:                     krb5_authdata_context context,",
          "1076:                     void *plugin_context,",
          "1077:                     void *request_context,",
          "1078:                     const krb5_data *attribute,",
          "1079:                     krb5_boolean *authenticated,",
          "1080:                     krb5_boolean *complete,",
          "1081:                     krb5_data *value,",
          "1082:                     krb5_data *display_value,",
          "1083:                     int *more)",
          "1086:     krb5_error_code code;",
          "1087:     krb5_ui_4 type;",
          "",
          "[Added Lines]",
          "1007: fail:",
          "1008:     krb5int_free_data_list(context, attrs);",
          "1009:     return ret;",
          "1013: mspac_get_attribute(krb5_context context, krb5_authdata_context actx,",
          "1014:                     void *plugin_context, void *request_context,",
          "1015:                     const krb5_data *attribute, krb5_boolean *authenticated,",
          "1016:                     krb5_boolean *complete, krb5_data *value,",
          "1017:                     krb5_data *display_value, int *more)",
          "1020:     krb5_error_code ret;",
          "1021:     uint32_t type;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1098:     if (!pacctx->pac->verified) {",
          "1100:         return ENOENT;",
          "1101:     }",
          "1109:         if (value != NULL)",
          "1113:         else",
          "1115:     } else {",
          "1116:         if (value != NULL)",
          "1118:         else",
          "1120:     }",
          "1124:     }",
          "1129: }",
          "1131: static krb5_error_code",
          "1138:                     const krb5_data *value)",
          "1139: {",
          "1140:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1144:     if (pacctx->pac == NULL)",
          "1145:         return ENOENT;",
          "1153:         krb5_pac newpac;",
          "1160:         pacctx->pac = newpac;",
          "1161:     } else {",
          "1163:     }",
          "1166: }",
          "1168: static krb5_error_code",
          "1175: {",
          "1176:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1178:     krb5_pac pac;",
          "",
          "[Removed Lines]",
          "1099:         TRACE_MSPAC_DISCARD_UNVERF(kcontext);",
          "1103:     code = mspac_attr2type(attribute, &type);",
          "1104:     if (code != 0)",
          "1105:         return code;",
          "1108:     if (type == (krb5_ui_4)-1) {",
          "1110:             code = krb5int_copy_data_contents(kcontext,",
          "1111:                                               &pacctx->pac->data,",
          "1112:                                               value);",
          "1114:             code = 0;",
          "1117:             code = krb5_pac_get_buffer(kcontext, pacctx->pac, type, value);",
          "1119:             code = k5_pac_locate_buffer(kcontext, pacctx->pac, type, NULL);",
          "1121:     if (code == 0) {",
          "1128:     return code;",
          "1132: mspac_set_attribute(krb5_context kcontext,",
          "1133:                     krb5_authdata_context context,",
          "1134:                     void *plugin_context,",
          "1135:                     void *request_context,",
          "1136:                     krb5_boolean complete,",
          "1137:                     const krb5_data *attribute,",
          "1141:     krb5_error_code code;",
          "1142:     krb5_ui_4 type;",
          "1147:     code = mspac_attr2type(attribute, &type);",
          "1148:     if (code != 0)",
          "1149:         return code;",
          "1152:     if (type == (krb5_ui_4)-1) {",
          "1155:         code = krb5_pac_parse(kcontext, value->data, value->length, &newpac);",
          "1156:         if (code != 0)",
          "1157:             return code;",
          "1159:         krb5_pac_free(kcontext, pacctx->pac);",
          "1162:         code = krb5_pac_add_buffer(kcontext, pacctx->pac, type, value);",
          "1165:     return code;",
          "1169: mspac_export_internal(krb5_context kcontext,",
          "1170:                       krb5_authdata_context context,",
          "1171:                       void *plugin_context,",
          "1172:                       void *request_context,",
          "1173:                       krb5_boolean restrict_authenticated,",
          "1174:                       void **ptr)",
          "1177:     krb5_error_code code;",
          "",
          "[Added Lines]",
          "1033:         TRACE_MSPAC_DISCARD_UNVERF(context);",
          "1037:     ret = mspac_attr2type(attribute, &type);",
          "1038:     if (ret)",
          "1039:         return ret;",
          "1042:     if (type == (uint32_t)-1) {",
          "1044:             ret = krb5int_copy_data_contents(context, &pacctx->pac->data,",
          "1045:                                              value);",
          "1047:             ret = 0;",
          "1050:             ret = krb5_pac_get_buffer(context, pacctx->pac, type, value);",
          "1052:             ret = k5_pac_locate_buffer(context, pacctx->pac, type, NULL);",
          "1054:     if (!ret) {",
          "1061:     return ret;",
          "1065: mspac_set_attribute(krb5_context context, krb5_authdata_context actx,",
          "1066:                     void *plugin_context, void *request_context,",
          "1067:                     krb5_boolean complete, const krb5_data *attribute,",
          "1071:     krb5_error_code ret;",
          "1072:     uint32_t type;",
          "1077:     ret = mspac_attr2type(attribute, &type);",
          "1078:     if (ret)",
          "1079:         return ret;",
          "1082:     if (type == (uint32_t)-1) {",
          "1085:         ret = krb5_pac_parse(context, value->data, value->length, &newpac);",
          "1086:         if (ret)",
          "1087:             return ret;",
          "1089:         krb5_pac_free(context, pacctx->pac);",
          "1092:         ret = krb5_pac_add_buffer(context, pacctx->pac, type, value);",
          "1095:     return ret;",
          "1099: mspac_export_internal(krb5_context context, krb5_authdata_context actx,",
          "1100:                       void *plugin_context, void *request_context,",
          "1101:                       krb5_boolean restrict_authenticated, void **ptr)",
          "1104:     krb5_error_code ret;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1185:     if (restrict_authenticated && (pacctx->pac->verified) == FALSE)",
          "1186:         return ENOENT;",
          "1191:         pac->verified = pacctx->pac->verified;",
          "1193:     }",
          "1196: }",
          "1198: static void",
          "1204: {",
          "1205:     if (ptr != NULL)",
          "1208:     return;",
          "1209: }",
          "1211: static krb5_error_code",
          "1217: {",
          "1218:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1222:     if (pacctx->pac != NULL)",
          "1227:     return 0;",
          "1228: }",
          "1230: static krb5_error_code",
          "1237: {",
          "1239:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1240:     size_t required = 0;",
          "1241:     krb5_octet *bp;",
          "",
          "[Removed Lines]",
          "1188:     code = krb5_pac_parse(kcontext, pacctx->pac->data.data,",
          "1189:                           pacctx->pac->data.length, &pac);",
          "1190:     if (code == 0) {",
          "1195:     return code;",
          "1199: mspac_free_internal(krb5_context kcontext,",
          "1200:                     krb5_authdata_context context,",
          "1201:                     void *plugin_context,",
          "1202:                     void *request_context,",
          "1203:                     void *ptr)",
          "1206:         krb5_pac_free(kcontext, (krb5_pac)ptr);",
          "1212: mspac_size(krb5_context kcontext,",
          "1213:            krb5_authdata_context context,",
          "1214:            void *plugin_context,",
          "1215:            void *request_context,",
          "1216:            size_t *sizep)",
          "1231: mspac_externalize(krb5_context kcontext,",
          "1232:                   krb5_authdata_context context,",
          "1233:                   void *plugin_context,",
          "1234:                   void *request_context,",
          "1235:                   krb5_octet **buffer,",
          "1236:                   size_t *lenremain)",
          "1238:     krb5_error_code code = 0;",
          "",
          "[Added Lines]",
          "1115:     ret = krb5_pac_parse(context, pacctx->pac->data.data,",
          "1116:                          pacctx->pac->data.length, &pac);",
          "1117:     if (!ret) {",
          "1122:     return ret;",
          "1126: mspac_free_internal(krb5_context context, krb5_authdata_context actx,",
          "1127:                     void *plugin_context, void *request_context, void *ptr)",
          "1130:         krb5_pac_free(context, (krb5_pac)ptr);",
          "1136: mspac_size(krb5_context context, krb5_authdata_context actx,",
          "1137:            void *plugin_context, void *request_context, size_t *sizep)",
          "1152: mspac_externalize(krb5_context context, krb5_authdata_context actx,",
          "1153:                   void *plugin_context, void *request_context,",
          "1154:                   krb5_octet **buffer, size_t *lenremain)",
          "1156:     krb5_error_code ret = 0;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1245:     remain = *lenremain;",
          "1247:     if (pacctx->pac != NULL) {",
          "1251:         if (required <= remain) {",
          "1254:             krb5_ser_pack_bytes((krb5_octet *)pacctx->pac->data.data,",
          "1255:                                 (size_t)pacctx->pac->data.length,",
          "1256:                                 &bp, &remain);",
          "1259:         } else {",
          "1261:         }",
          "1262:     } else {",
          "",
          "[Removed Lines]",
          "1248:         mspac_size(kcontext, context, plugin_context,",
          "1249:                    request_context, &required);",
          "1252:             krb5_ser_pack_int32((krb5_int32)pacctx->pac->data.length,",
          "1253:                                 &bp, &remain);",
          "1257:             krb5_ser_pack_int32((krb5_int32)pacctx->pac->verified,",
          "1258:                                 &bp, &remain);",
          "1260:             code = ENOMEM;",
          "",
          "[Added Lines]",
          "1166:         mspac_size(context, actx, plugin_context, request_context, &required);",
          "1169:             krb5_ser_pack_int32(pacctx->pac->data.length, &bp, &remain);",
          "1173:             krb5_ser_pack_int32(pacctx->pac->verified, &bp, &remain);",
          "1175:             ret = ENOMEM;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1271: }",
          "1273: static krb5_error_code",
          "1280: {",
          "1281:     struct mspac_context *pacctx = (struct mspac_context *)request_context;",
          "1285:     size_t remain;",
          "1286:     krb5_pac pac = NULL;",
          "",
          "[Removed Lines]",
          "1270:     return code;",
          "1274: mspac_internalize(krb5_context kcontext,",
          "1275:                   krb5_authdata_context context,",
          "1276:                   void *plugin_context,",
          "1277:                   void *request_context,",
          "1278:                   krb5_octet **buffer,",
          "1279:                   size_t *lenremain)",
          "1282:     krb5_error_code code;",
          "1283:     krb5_int32 ibuf;",
          "1284:     krb5_octet *bp;",
          "",
          "[Added Lines]",
          "1185:     return ret;",
          "1189: mspac_internalize(krb5_context context, krb5_authdata_context actx,",
          "1190:                   void *plugin_context, void *request_context,",
          "1191:                   krb5_octet **buffer, size_t *lenremain)",
          "1194:     krb5_error_code ret;",
          "1195:     int32_t ibuf;",
          "1196:     uint8_t *bp;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1289:     remain = *lenremain;",
          "1296:     if (ibuf != 0) {",
          "1301:         bp += ibuf;",
          "1302:         remain -= ibuf;",
          "1303:     }",
          "1310:     }",
          "1313:         pac->verified = (ibuf != 0);",
          "1320:     pacctx->pac = pac;",
          "",
          "[Removed Lines]",
          "1292:     code = krb5_ser_unpack_int32(&ibuf, &bp, &remain);",
          "1293:     if (code != 0)",
          "1294:         return code;",
          "1297:         code = krb5_pac_parse(kcontext, bp, ibuf, &pac);",
          "1298:         if (code != 0)",
          "1299:             return code;",
          "1306:     code = krb5_ser_unpack_int32(&ibuf, &bp, &remain);",
          "1307:     if (code != 0) {",
          "1308:         krb5_pac_free(kcontext, pac);",
          "1309:         return code;",
          "1312:     if (pac != NULL) {",
          "1314:     }",
          "1316:     if (pacctx->pac != NULL) {",
          "1317:         krb5_pac_free(kcontext, pacctx->pac);",
          "1318:     }",
          "",
          "[Added Lines]",
          "1204:     ret = krb5_ser_unpack_int32(&ibuf, &bp, &remain);",
          "1205:     if (ret)",
          "1206:         return ret;",
          "1209:         ret = krb5_pac_parse(context, bp, ibuf, &pac);",
          "1210:         if (ret)",
          "1211:             return ret;",
          "1218:     ret = krb5_ser_unpack_int32(&ibuf, &bp, &remain);",
          "1219:     if (ret) {",
          "1220:         krb5_pac_free(context, pac);",
          "1221:         return ret;",
          "1224:     if (pac != NULL)",
          "1227:     if (pacctx->pac != NULL)",
          "1228:         krb5_pac_free(context, pacctx->pac);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1326: }",
          "1328: static krb5_error_code",
          "1335: {",
          "1336:     struct mspac_context *srcctx = (struct mspac_context *)request_context;",
          "1337:     struct mspac_context *dstctx = (struct mspac_context *)dst_request_context;",
          "1340:     assert(dstctx != NULL);",
          "1341:     assert(dstctx->pac == NULL);",
          "1343:     if (srcctx->pac != NULL)",
          "1347: }",
          "1349: static krb5_authdatatype mspac_ad_types[] = { KRB5_AUTHDATA_WIN2K_PAC, 0 };",
          "",
          "[Removed Lines]",
          "1329: mspac_copy(krb5_context kcontext,",
          "1330:            krb5_authdata_context context,",
          "1331:            void *plugin_context,",
          "1332:            void *request_context,",
          "1333:            void *dst_plugin_context,",
          "1334:            void *dst_request_context)",
          "1338:     krb5_error_code code = 0;",
          "1344:         code = k5_pac_copy(kcontext, srcctx->pac, &dstctx->pac);",
          "1346:     return code;",
          "",
          "[Added Lines]",
          "1239: mspac_copy(krb5_context context, krb5_authdata_context actx,",
          "1240:            void *plugin_context, void *request_context,",
          "1241:            void *dst_plugin_context, void *dst_request_context)",
          "1245:     krb5_error_code ret = 0;",
          "1251:         ret = copy_pac(context, srcctx->pac, &dstctx->pac);",
          "1253:     return ret;",
          "",
          "---------------"
        ],
        "src/lib/krb5/krb/pac_sign.c||src/lib/krb5/krb/pac_sign.c": [
          "File: src/lib/krb5/krb/pac_sign.c -> src/lib/krb5/krb/pac_sign.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: static krb5_error_code",
          "39: {",
          "40:     krb5_error_code ret;",
          "41:     krb5_data client_info;",
          "42:     char *princ_name_utf8 = NULL;",
          "44:     size_t princ_name_utf16_len = 0;",
          "45:     uint64_t nt_authtime;",
          "46:     int flags = 0;",
          "",
          "[Removed Lines]",
          "34: k5_insert_client_info(krb5_context context,",
          "35:                       krb5_pac pac,",
          "36:                       krb5_timestamp authtime,",
          "37:                       krb5_const_principal principal,",
          "38:                       krb5_boolean with_realm)",
          "43:     unsigned char *princ_name_utf16 = NULL, *p;",
          "",
          "[Added Lines]",
          "34: insert_client_info(krb5_context context, krb5_pac pac, krb5_timestamp authtime,",
          "35:                    krb5_const_principal principal, krb5_boolean with_realm)",
          "40:     uint8_t *princ_name_utf16 = NULL, *p;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     }",
          "62:     ret = krb5_unparse_name_flags(context, principal, flags, &princ_name_utf8);",
          "64:         goto cleanup;",
          "66:     ret = k5_utf8_to_utf16le(princ_name_utf8, &princ_name_utf16,",
          "67:                              &princ_name_utf16_len);",
          "69:         goto cleanup;",
          "71:     client_info.length = PAC_CLIENT_INFO_LENGTH + princ_name_utf16_len;",
          "",
          "[Removed Lines]",
          "63:     if (ret != 0)",
          "68:     if (ret != 0)",
          "",
          "[Added Lines]",
          "60:     if (ret)",
          "65:     if (ret)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     ret = k5_pac_add_buffer(context, pac, KRB5_PAC_CLIENT_INFO,",
          "75:                             &client_info, TRUE, &client_info);",
          "77:         goto cleanup;",
          "82:     k5_seconds_since_1970_to_time(authtime, &nt_authtime);",
          "",
          "[Removed Lines]",
          "76:     if (ret != 0)",
          "79:     p = (unsigned char *)client_info.data;",
          "",
          "[Added Lines]",
          "73:     if (ret)",
          "76:     p = (uint8_t *)client_info.data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99: }",
          "101: static krb5_error_code",
          "107: {",
          "108:     krb5_error_code ret;",
          "109:     size_t len;",
          "110:     krb5_data cksumdata;",
          "112:     ret = krb5int_c_mandatory_cksumtype(context, key->enctype, cksumtype);",
          "114:         return ret;",
          "116:     ret = krb5_c_checksum_length(context, *cksumtype, &len);",
          "118:         return ret;",
          "120:     ret = k5_pac_locate_buffer(context, pac, type, &cksumdata);",
          "",
          "[Removed Lines]",
          "102: k5_insert_checksum(krb5_context context,",
          "103:                    krb5_pac pac,",
          "104:                    krb5_ui_4 type,",
          "105:                    const krb5_keyblock *key,",
          "106:                    krb5_cksumtype *cksumtype)",
          "113:     if (ret != 0)",
          "117:     if (ret != 0)",
          "121:     if (ret == 0) {",
          "",
          "[Added Lines]",
          "99: insert_checksum(krb5_context context, krb5_pac pac, krb5_ui_4 type,",
          "100:                 const krb5_keyblock *key, krb5_cksumtype *cksumtype)",
          "107:     if (ret)",
          "111:     if (ret)",
          "115:     if (!ret) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:         cksumdata.length = PAC_SIGNATURE_DATA_LENGTH + len;",
          "133:         cksumdata.data = NULL;",
          "139:             return ret;",
          "140:     }",
          "",
          "[Removed Lines]",
          "135:         ret = k5_pac_add_buffer(context, pac,",
          "136:                                 type, &cksumdata,",
          "137:                                 TRUE, &cksumdata);",
          "138:         if (ret != 0)",
          "",
          "[Added Lines]",
          "129:         ret = k5_pac_add_buffer(context, pac, type, &cksumdata, TRUE,",
          "130:                                 &cksumdata);",
          "131:         if (ret)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149: static krb5_error_code",
          "151: {",
          "152:     size_t i;",
          "153:     unsigned char *p;",
          "154:     size_t header_len;",
          "158:     assert(pac->data.length >= header_len);",
          "163:     p += 4;",
          "165:     p += 4;",
          "171:         p += 4;",
          "173:         p += 4;",
          "175:         p += 8;",
          "184:             return ERANGE;",
          "185:     }",
          "",
          "[Removed Lines]",
          "150: k5_pac_encode_header(krb5_context context, krb5_pac pac)",
          "156:     header_len = PACTYPE_LENGTH +",
          "157:         (pac->pac->cBuffers * PAC_INFO_BUFFER_LENGTH);",
          "160:     p = (unsigned char *)pac->data.data;",
          "162:     store_32_le(pac->pac->cBuffers, p);",
          "164:     store_32_le(pac->pac->Version, p);",
          "167:     for (i = 0; i < pac->pac->cBuffers; i++) {",
          "168:         PAC_INFO_BUFFER *buffer = &pac->pac->Buffers[i];",
          "170:         store_32_le(buffer->ulType, p);",
          "172:         store_32_le(buffer->cbBufferSize, p);",
          "174:         store_64_le(buffer->Offset, p);",
          "177:         assert((buffer->Offset % PAC_ALIGNMENT) == 0);",
          "178:         assert(buffer->Offset + buffer->cbBufferSize <= pac->data.length);",
          "179:         assert(buffer->Offset >= header_len);",
          "181:         if (buffer->Offset % PAC_ALIGNMENT ||",
          "182:             buffer->Offset + buffer->cbBufferSize > pac->data.length ||",
          "183:             buffer->Offset < header_len)",
          "",
          "[Added Lines]",
          "143: encode_header(krb5_context context, krb5_pac pac)",
          "149:     header_len = PACTYPE_LENGTH + (pac->nbuffers * PAC_INFO_BUFFER_LENGTH);",
          "152:     p = (uint8_t *)pac->data.data;",
          "154:     store_32_le(pac->nbuffers, p);",
          "156:     store_32_le(pac->version, p);",
          "159:     for (i = 0; i < pac->nbuffers; i++) {",
          "160:         struct k5_pac_buffer *buffer = &pac->buffers[i];",
          "162:         store_32_le(buffer->type, p);",
          "164:         store_32_le(buffer->size, p);",
          "166:         store_64_le(buffer->offset, p);",
          "169:         assert((buffer->offset % PAC_ALIGNMENT) == 0);",
          "170:         assert(buffer->size < pac->data.length);",
          "171:         assert(buffer->offset <= pac->data.length - buffer->size);",
          "172:         assert(buffer->offset >= header_len);",
          "174:         if (buffer->offset % PAC_ALIGNMENT ||",
          "175:             buffer->size > pac->data.length ||",
          "176:             buffer->offset > pac->data.length - buffer->size ||",
          "177:             buffer->offset < header_len)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:     data->data = NULL;",
          "229:     if (principal != NULL) {",
          "232:         if (ret)",
          "233:             return ret;",
          "234:     }",
          "239:     if (ret)",
          "240:         return ret;",
          "243:     if (ret)",
          "244:         return ret;",
          "245:     if (is_service_tkt) {",
          "248:         if (ret)",
          "249:             return ret;",
          "250:     }",
          "254:     if (ret)",
          "255:         return ret;",
          "",
          "[Removed Lines]",
          "230:         ret = k5_insert_client_info(context, pac, authtime, principal,",
          "231:                                     with_realm);",
          "237:     ret = k5_insert_checksum(context, pac, KRB5_PAC_SERVER_CHECKSUM,",
          "238:                              server_key, &server_cksumtype);",
          "241:     ret = k5_insert_checksum(context, pac, KRB5_PAC_PRIVSVR_CHECKSUM,",
          "242:                              privsvr_key, &privsvr_cksumtype);",
          "246:         ret = k5_insert_checksum(context, pac, KRB5_PAC_FULL_CHECKSUM,",
          "247:                                  privsvr_key, &privsvr_cksumtype);",
          "253:     ret = k5_pac_encode_header(context, pac);",
          "",
          "[Added Lines]",
          "224:         ret = insert_client_info(context, pac, authtime, principal,",
          "225:                                  with_realm);",
          "231:     ret = insert_checksum(context, pac, KRB5_PAC_SERVER_CHECKSUM, server_key,",
          "232:                           &server_cksumtype);",
          "235:     ret = insert_checksum(context, pac, KRB5_PAC_PRIVSVR_CHECKSUM, privsvr_key,",
          "236:                           &privsvr_cksumtype);",
          "240:         ret = insert_checksum(context, pac, KRB5_PAC_FULL_CHECKSUM,",
          "241:                               privsvr_key, &privsvr_cksumtype);",
          "247:     ret = encode_header(context, pac);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:     data->length = pac->data.length;",
          "286:     memset(pac->data.data, 0,",
          "289:     return 0;",
          "290: }",
          "",
          "[Removed Lines]",
          "287:            PACTYPE_LENGTH + (pac->pac->cBuffers * PAC_INFO_BUFFER_LENGTH));",
          "",
          "[Added Lines]",
          "281:            PACTYPE_LENGTH + (pac->nbuffers * PAC_INFO_BUFFER_LENGTH));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "321:     krb5_crypto_iov iov[2];",
          "326:     if (ret)",
          "327:         return ret;",
          "",
          "[Removed Lines]",
          "324:     ret = k5_insert_checksum(context, pac, KRB5_PAC_TICKET_CHECKSUM,",
          "325:                              privsvr, &ticket_cksumtype);",
          "",
          "[Added Lines]",
          "318:     ret = insert_checksum(context, pac, KRB5_PAC_TICKET_CHECKSUM, privsvr,",
          "319:                           &ticket_cksumtype);",
          "",
          "---------------"
        ]
      }
    }
  ]
}