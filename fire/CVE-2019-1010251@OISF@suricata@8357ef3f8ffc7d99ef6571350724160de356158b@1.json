{
  "cve_id": "CVE-2019-1010251",
  "cve_desc": "Open Information Security Foundation Suricata prior to version 4.1.2 is affected by: Denial of Service - DNS detection bypass. The impact is: An attacker can evade a signature detection with a specialy formed network packet. The component is: app-layer-detect-proto.c, decode.c, decode-teredo.c and decode-ipv6.c (https://github.com/OISF/suricata/pull/3590/commits/11f3659f64a4e42e90cb3c09fcef66894205aefe, https://github.com/OISF/suricata/pull/3590/commits/8357ef3f8ffc7d99ef6571350724160de356158b). The attack vector is: An attacker can trigger the vulnerability by sending a specifically crafted network request. The fixed version is: 4.1.2.",
  "repo": "OISF/suricata",
  "patch_hash": "8357ef3f8ffc7d99ef6571350724160de356158b",
  "patch_info": {
    "commit_hash": "8357ef3f8ffc7d99ef6571350724160de356158b",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/pull/3590/commits/8357ef3f8ffc7d99ef6571350724160de356158b",
    "files": [
      "src/app-layer-detect-proto.c"
    ],
    "message": "proto/detect: workaround dns misdetected as dcerpc\n\nThe DCERPC UDP detection would misfire on DNS with transaction\nID 0x0400. This would happen as the protocol detection engine\ngives preference to pattern based detection over probing parsers for\nperformance reasons.\n\nThis hack/workaround fixes this specific case by still running the\nprobing parser if DCERPC has been detected on UDP. The probing\nparser result will take precedence.\n\nBug #2736.",
    "before_after_code_files": [
      "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
    ]
  },
  "patch_diff": {
    "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c": [
      "File: src/app-layer-detect-proto.c -> src/app-layer-detect-proto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1361:             (direction & STREAM_TOSERVER) ? \"toserver\" : \"toclient\");",
      "1363:     AppProto alproto = ALPROTO_UNKNOWN;",
      "1365:     if (!FLOW_IS_PM_DONE(f, direction)) {",
      "1366:         AppProto pm_results[ALPROTO_MAX];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364:     AppProto pm_alproto = ALPROTO_UNKNOWN;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1371:                                                    pm_results);",
      "1372:         if (pm_matches > 0) {",
      "1373:             alproto = pm_results[0];",
      "1375:         }",
      "1376:     }",
      "",
      "[Removed Lines]",
      "1374:             goto end;",
      "",
      "[Added Lines]",
      "1378:             if (!(ipproto == IPPROTO_UDP && alproto == ALPROTO_DCERPC))",
      "1379:                 goto end;",
      "1381:             pm_alproto = alproto;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1388:     }",
      "1390:  end:",
      "1391:     SCReturnUInt(alproto);",
      "1392: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1400:     if (alproto == ALPROTO_UNKNOWN)",
      "1401:         alproto = pm_alproto;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb78d48c0a72598c9a01ba429f63940099f80e46",
      "candidate_info": {
        "commit_hash": "bb78d48c0a72598c9a01ba429f63940099f80e46",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/bb78d48c0a72598c9a01ba429f63940099f80e46",
        "files": [
          "src/app-layer-detect-proto.c"
        ],
        "message": "app-layer/probing-parser: implement reverse flow\n\nImplement midstream support for the pure probing parsers. These\nneed to look up the appropriate parsers based on the reverse\ntuple.",
        "before_after_code_files": [
          "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
          ],
          "candidate": [
            "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
          ]
        }
      },
      "candidate_diff": {
        "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c": [
          "File: src/app-layer-detect-proto.c -> src/app-layer-detect-proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:     return alproto;",
          "445: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447: static inline AppProto PPGetProto(",
          "448:         const AppLayerProtoDetectProbingParserElement *pe,",
          "449:         Flow *f, uint8_t direction,",
          "450:         uint8_t *buf, uint32_t buflen,",
          "451:         uint32_t *alproto_masks, uint8_t *rdir",
          "452: )",
          "453: {",
          "454:     while (pe != NULL) {",
          "455:         if ((buflen < pe->min_depth)  ||",
          "456:             (alproto_masks[0] & pe->alproto_mask)) {",
          "457:             pe = pe->next;",
          "458:             continue;",
          "459:         }",
          "461:         AppProto alproto = ALPROTO_UNKNOWN;",
          "462:         if (direction & STREAM_TOSERVER && pe->ProbingParserTs != NULL) {",
          "463:             alproto = pe->ProbingParserTs(f, direction, buf, buflen, rdir);",
          "464:         } else if (pe->ProbingParserTc != NULL) {",
          "465:             alproto = pe->ProbingParserTc(f, direction, buf, buflen, rdir);",
          "466:         }",
          "467:         if (AppProtoIsValid(alproto)) {",
          "468:             SCReturnUInt(alproto);",
          "469:         }",
          "470:         if (alproto == ALPROTO_FAILED ||",
          "471:             (pe->max_depth != 0 && buflen > pe->max_depth)) {",
          "472:             alproto_masks[0] |= pe->alproto_mask;",
          "473:         }",
          "474:         pe = pe->next;",
          "475:     }",
          "477:     SCReturnUInt(ALPROTO_UNKNOWN);",
          "478: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454: static AppProto AppLayerProtoDetectPPGetProto(Flow *f,",
          "455:         uint8_t *buf, uint32_t buflen,",
          "457:         bool *reverse_flow)",
          "458: {",
          "459:     const AppLayerProtoDetectProbingParserPort *pp_port_dp = NULL;",
          "460:     const AppLayerProtoDetectProbingParserPort *pp_port_sp = NULL;",
          "462:     const AppLayerProtoDetectProbingParserElement *pe1 = NULL;",
          "463:     const AppLayerProtoDetectProbingParserElement *pe2 = NULL;",
          "464:     AppProto alproto = ALPROTO_UNKNOWN;",
          "465:     uint32_t *alproto_masks;",
          "466:     uint32_t mask = 0;",
          "473:         pp_port_dp = AppLayerProtoDetectGetProbingParsers(alpd_ctx.ctx_pp, ipproto, dp);",
          "474:         alproto_masks = &f->probing_parser_toserver_alproto_masks;",
          "",
          "[Removed Lines]",
          "456:         uint8_t ipproto, uint8_t direction,",
          "461:     const AppLayerProtoDetectProbingParserElement *pe = NULL;",
          "468:     const uint16_t dp = f->protodetect_dp ? f->protodetect_dp : f->dp;",
          "469:     const uint16_t sp = f->sp;",
          "471:     if (direction & STREAM_TOSERVER) {",
          "",
          "[Added Lines]",
          "489:         uint8_t ipproto, const uint8_t idir,",
          "499:     uint8_t dir = idir;",
          "500:     uint16_t dp = f->protodetect_dp ? f->protodetect_dp : FLOW_GET_DP(f);",
          "501:     uint16_t sp = FLOW_GET_SP(f);",
          "503: again_midstream:",
          "504:     if (idir != dir) {",
          "506:     }",
          "507:     SCLogDebug(\"%u->%u %s\", sp, dp,",
          "508:             (dir == STREAM_TOSERVER) ? \"toserver\" : \"toclient\");",
          "510:     if (dir == STREAM_TOSERVER) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "516:     if (pe1 == NULL && pe2 == NULL) {",
          "517:         SCLogDebug(\"%s - No probing parsers found for either port\",",
          "521:     }",
          "524:     uint8_t rdir = 0;",
          "543:         }",
          "545:     }",
          "564:         }",
          "583:     }",
          "585:  end:",
          "588:         SCLogDebug(\"PP found %u, is reverse flow\", alproto);",
          "590:     }",
          "592:     SCLogDebug(\"%s, mask is now %08x\",",
          "594:     SCReturnUInt(alproto);",
          "595: }",
          "",
          "[Removed Lines]",
          "518:                 (direction & STREAM_TOSERVER) ? \"toserver\":\"toclient\");",
          "519:         FLOW_SET_PP_DONE(f, direction);",
          "520:         goto end;",
          "525:     pe = pe1;",
          "526:     while (pe != NULL) {",
          "527:         if ((buflen < pe->min_depth)  ||",
          "528:             (alproto_masks[0] & pe->alproto_mask)) {",
          "529:             pe = pe->next;",
          "530:             continue;",
          "531:         }",
          "533:         if (direction & STREAM_TOSERVER && pe->ProbingParserTs != NULL) {",
          "534:             alproto = pe->ProbingParserTs(f, direction, buf, buflen, &rdir);",
          "535:         } else if (pe->ProbingParserTc != NULL) {",
          "536:             alproto = pe->ProbingParserTc(f, direction, buf, buflen, &rdir);",
          "537:         }",
          "538:         if (alproto != ALPROTO_UNKNOWN && alproto != ALPROTO_FAILED)",
          "539:             goto end;",
          "540:         if (alproto == ALPROTO_FAILED ||",
          "541:             (pe->max_depth != 0 && buflen > pe->max_depth)) {",
          "542:             alproto_masks[0] |= pe->alproto_mask;",
          "544:         pe = pe->next;",
          "546:     pe = pe2;",
          "547:     while (pe != NULL) {",
          "548:         if ((buflen < pe->min_depth)  ||",
          "549:             (alproto_masks[0] & pe->alproto_mask)) {",
          "550:             pe = pe->next;",
          "551:             continue;",
          "552:         }",
          "554:         if (direction & STREAM_TOSERVER && pe->ProbingParserTs != NULL) {",
          "555:             alproto = pe->ProbingParserTs(f, direction, buf, buflen, &rdir);",
          "556:         } else if (pe->ProbingParserTc != NULL) {",
          "557:             alproto = pe->ProbingParserTc(f, direction, buf, buflen, &rdir);",
          "558:         }",
          "559:         if (alproto != ALPROTO_UNKNOWN && alproto != ALPROTO_FAILED)",
          "560:             goto end;",
          "561:         if (alproto == ALPROTO_FAILED ||",
          "562:             (pe->max_depth != 0 && buflen > pe->max_depth)) {",
          "563:             alproto_masks[0] |= pe->alproto_mask;",
          "565:         pe = pe->next;",
          "566:     }",
          "569:     if (pp_port_dp && pp_port_sp)",
          "570:         mask = pp_port_dp->alproto_mask|pp_port_sp->alproto_mask;",
          "571:     else if (pp_port_dp)",
          "572:         mask = pp_port_dp->alproto_mask;",
          "573:     else if (pp_port_sp)",
          "574:         mask = pp_port_sp->alproto_mask;",
          "576:     if (alproto_masks[0] == mask) {",
          "577:         FLOW_SET_PP_DONE(f, direction);",
          "578:         SCLogDebug(\"%s, mask is now %08x, needed %08x, so done\",",
          "579:                 (direction & STREAM_TOSERVER) ? \"toserver\":\"toclient\", alproto_masks[0], mask);",
          "580:     } else {",
          "581:         SCLogDebug(\"%s, mask is now %08x, need %08x\",",
          "582:                 (direction & STREAM_TOSERVER) ? \"toserver\":\"toclient\", alproto_masks[0], mask);",
          "586:     if (alproto != ALPROTO_FAILED && alproto != ALPROTO_UNKNOWN &&",
          "587:         rdir == (direction & (STREAM_TOSERVER|STREAM_TOCLIENT))) {",
          "593:             (direction & STREAM_TOSERVER) ? \"toserver\":\"toclient\", alproto_masks[0]);",
          "",
          "[Added Lines]",
          "557:                 (dir == STREAM_TOSERVER) ? \"toserver\":\"toclient\");",
          "558:         if (dir == idir)",
          "559:             FLOW_SET_PP_DONE(f, dir);",
          "560:         goto noparsers;",
          "565:     alproto = PPGetProto(pe1, f, idir, buf, buflen, alproto_masks, &rdir);",
          "566:     if (AppProtoIsValid(alproto))",
          "567:         goto end;",
          "568:     alproto = PPGetProto(pe2, f, idir, buf, buflen, alproto_masks, &rdir);",
          "569:     if (AppProtoIsValid(alproto))",
          "570:         goto end;",
          "573:     if (dir == idir) {",
          "574:         if (pp_port_dp && pp_port_sp)",
          "575:             mask = pp_port_dp->alproto_mask|pp_port_sp->alproto_mask;",
          "576:         else if (pp_port_dp)",
          "577:             mask = pp_port_dp->alproto_mask;",
          "578:         else if (pp_port_sp)",
          "579:             mask = pp_port_sp->alproto_mask;",
          "581:         if (alproto_masks[0] == mask) {",
          "582:             FLOW_SET_PP_DONE(f, dir);",
          "583:             SCLogDebug(\"%s, mask is now %08x, needed %08x, so done\",",
          "584:                     (dir == STREAM_TOSERVER) ? \"toserver\":\"toclient\",",
          "585:                     alproto_masks[0], mask);",
          "586:         } else {",
          "587:             SCLogDebug(\"%s, mask is now %08x, need %08x\",",
          "588:                     (dir == STREAM_TOSERVER) ? \"toserver\":\"toclient\",",
          "589:                     alproto_masks[0], mask);",
          "593:  noparsers:",
          "594:     if (stream_config.midstream == true && idir == dir) {",
          "595:         if (idir == STREAM_TOSERVER) {",
          "596:             dir = STREAM_TOCLIENT;",
          "597:         } else {",
          "598:             dir = STREAM_TOSERVER;",
          "600:         SCLogDebug(\"no match + midstream, retry the other direction %s\",",
          "601:                 (dir == STREAM_TOSERVER) ? \"toserver\" : \"toclient\");",
          "602:         goto again_midstream;",
          "606:     if (AppProtoIsValid(alproto) && rdir != 0 && rdir != idir) {",
          "612:             (idir == STREAM_TOSERVER) ? \"toserver\":\"toclient\", alproto_masks[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1482:     if (!FLOW_IS_PM_DONE(f, direction)) {",
          "1483:         AppProto pm_results[ALPROTO_MAX];",
          "1484:         uint16_t pm_matches = AppLayerProtoDetectPMGetProto(tctx, f,",
          "1487:         if (pm_matches > 0) {",
          "1488:             alproto = pm_results[0];",
          "",
          "[Removed Lines]",
          "1485:                 buf, buflen, direction,",
          "1486:                 pm_results, reverse_flow);",
          "",
          "[Added Lines]",
          "1504:                 buf, buflen, direction, pm_results, reverse_flow);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1501:     if (!FLOW_IS_PP_DONE(f, direction)) {",
          "1502:         bool rflow = false;",
          "1507:             goto end;",
          "1510:         }",
          "1511:     }",
          "",
          "[Removed Lines]",
          "1503:         alproto = AppLayerProtoDetectPPGetProto(f, buf, buflen,",
          "1504:                                                 ipproto, direction,",
          "1505:                                                 &rflow);",
          "1506:         if (alproto != ALPROTO_UNKNOWN)",
          "1508:         if (rflow) {",
          "",
          "[Added Lines]",
          "1521:         alproto = AppLayerProtoDetectPPGetProto(f, buf, buflen, ipproto,",
          "1522:                 direction & (STREAM_TOSERVER|STREAM_TOCLIENT), &rflow);",
          "1523:         if (AppProtoIsValid(alproto)) {",
          "1524:             if (rflow) {",
          "1526:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1516:     }",
          "1518:  end:",
          "1520:         alproto = pm_alproto;",
          "1522:     SCReturnUInt(alproto);",
          "",
          "[Removed Lines]",
          "1519:     if (alproto == ALPROTO_UNKNOWN)",
          "",
          "[Added Lines]",
          "1537:     if (!AppProtoIsValid(alproto))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75488b00a8ad41df9cbfa7e4da24a83595fcc226",
      "candidate_info": {
        "commit_hash": "75488b00a8ad41df9cbfa7e4da24a83595fcc226",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/75488b00a8ad41df9cbfa7e4da24a83595fcc226",
        "files": [
          "src/app-layer-detect-proto.c"
        ],
        "message": "proto/detect: workaround dns misdetected as dcerpc\n\nThe DCERPC UDP detection would misfire on DNS with transaction\nID 0x0400. This would happen as the protocol detection engine\ngives preference to pattern based detection over probing parsers for\nperformance reasons.\n\nThis hack/workaround fixes this specific case by still running the\nprobing parser if DCERPC has been detected on UDP. The probing\nparser result will take precedence.\n\nBug #2736.",
        "before_after_code_files": [
          "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
          ],
          "candidate": [
            "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c"
          ]
        }
      },
      "candidate_diff": {
        "src/app-layer-detect-proto.c||src/app-layer-detect-proto.c": [
          "File: src/app-layer-detect-proto.c -> src/app-layer-detect-proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:     SCEnter();",
          "1316:     AppProto alproto = ALPROTO_UNKNOWN;",
          "1318:     if (!FLOW_IS_PM_DONE(f, direction)) {",
          "1319:         AppProto pm_results[ALPROTO_MAX];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:     AppProto pm_alproto = ALPROTO_UNKNOWN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324:                                                    pm_results);",
          "1325:         if (pm_matches > 0) {",
          "1326:             alproto = pm_results[0];",
          "1328:         }",
          "1329:     }",
          "",
          "[Removed Lines]",
          "1327:             goto end;",
          "",
          "[Added Lines]",
          "1331:             if (!(ipproto == IPPROTO_UDP && alproto == ALPROTO_DCERPC))",
          "1332:                 goto end;",
          "1334:             pm_alproto = alproto;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1332:         alproto = AppLayerProtoDetectPPGetProto(f, buf, buflen, ipproto, direction);",
          "1334:  end:",
          "1335:     SCReturnUInt(alproto);",
          "1336: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1344:     if (alproto == ALPROTO_UNKNOWN)",
          "1345:         alproto = pm_alproto;",
          "",
          "---------------"
        ]
      }
    }
  ]
}