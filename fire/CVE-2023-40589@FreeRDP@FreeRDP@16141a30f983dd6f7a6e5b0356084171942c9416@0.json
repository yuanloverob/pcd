{
  "cve_id": "CVE-2023-40589",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. In affected versions there is a Global-Buffer-Overflow in the ncrush_decompress function. Feeding crafted input into this function can trigger the overflow which has only been shown to cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "16141a30f983dd6f7a6e5b0356084171942c9416",
  "patch_info": {
    "commit_hash": "16141a30f983dd6f7a6e5b0356084171942c9416",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/16141a30f983dd6f7a6e5b0356084171942c9416",
    "files": [
      "libfreerdp/codec/ncrush.c"
    ],
    "message": "[codec,ncrush] fix index checks\n\nproperly verify all offsets while decoding data.",
    "before_after_code_files": [
      "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
      "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2016:                       const BYTE** ppDstData, UINT32* pDstSize, UINT32 flags)",
      "2017: {",
      "2018:  UINT32 index;",
      "2024:  BYTE Literal;",
      "2025:  UINT32 IndexLEC;",
      "2026:  UINT32 BitLength;",
      "2028:  UINT32 CopyOffset;",
      "2029:  UINT32 CopyLength;",
      "2030:  UINT32 OldCopyOffset;",
      "",
      "[Removed Lines]",
      "2019:  UINT32 bits;",
      "2020:  INT32 nbits;",
      "2021:  const BYTE* SrcPtr;",
      "2022:  const BYTE* SrcEnd;",
      "2023:  UINT16 Mask;",
      "2027:  UINT32 MaskedBits;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2032:  UINT32 LengthOfMatch;",
      "2033:  UINT32 CopyOffsetIndex;",
      "2034:  UINT32 OffsetCacheIndex;",
      "2038:  UINT32 CopyOffsetBits;",
      "2039:  UINT32 CopyOffsetBase;",
      "2040:  UINT32 LengthOfMatchBits;",
      "",
      "[Removed Lines]",
      "2035:  BYTE* HistoryPtr;",
      "2036:  BYTE* HistoryBuffer;",
      "2037:  BYTE* HistoryBufferEnd;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2048:  if (ncrush->HistoryEndOffset != 65535)",
      "2049:   return -1001;",
      "2054:  if (flags & PACKET_AT_FRONT)",
      "2055:  {",
      "",
      "[Removed Lines]",
      "2051:  HistoryBuffer = ncrush->HistoryBuffer;",
      "2052:  HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];",
      "",
      "[Added Lines]",
      "2042:  BYTE* HistoryBuffer = ncrush->HistoryBuffer;",
      "2043:  const BYTE* HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2068:   ZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));",
      "2069:  }",
      "2073:  if (!(flags & PACKET_COMPRESSED))",
      "2074:  {",
      "",
      "[Removed Lines]",
      "2071:  HistoryPtr = ncrush->HistoryPtr;",
      "",
      "[Added Lines]",
      "2062:  BYTE* HistoryPtr = ncrush->HistoryPtr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2077:   return 1;",
      "2078:  }",
      "2085:  while (1)",
      "2086:  {",
      "2087:   while (1)",
      "2088:   {",
      "2091:    IndexLEC = HuffTableLEC[MaskedBits] & 0xFFF;",
      "2092:    BitLength = HuffTableLEC[MaskedBits] >> 12;",
      "2093:    bits >>= BitLength;",
      "",
      "[Removed Lines]",
      "2080:  SrcEnd = &pSrcData[SrcSize];",
      "2081:  nbits = 32;",
      "2082:  bits = get_dword(pSrcData);",
      "2083:  SrcPtr = pSrcData + 4;",
      "2089:    Mask = get_word(&HuffTableMask[29]);",
      "2090:    MaskedBits = bits & Mask;",
      "",
      "[Added Lines]",
      "2071:  const BYTE* SrcEnd = &pSrcData[SrcSize];",
      "2072:  const BYTE* SrcPtr = pSrcData + 4;",
      "2074:  INT32 nbits = 32;",
      "2075:  UINT32 bits = get_dword(pSrcData);",
      "2080:    const UINT16 Mask = get_word(&HuffTableMask[29]);",
      "2081:    const UINT32 MaskedBits = bits & Mask;",
      "2082:    if (MaskedBits >= ARRAYSIZE(HuffTableLEC))",
      "2083:     return -1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2123:     return -1004;",
      "2125:    CopyOffset = ncrush->OffsetCache[OffsetCacheIndex];",
      "2128:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
      "2129:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
      "2130:    bits >>= BitLength;",
      "",
      "[Removed Lines]",
      "2126:    Mask = get_word(&HuffTableMask[21]);",
      "2127:    MaskedBits = bits & Mask;",
      "",
      "[Added Lines]",
      "2119:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
      "2120:    const UINT32 MaskedBits = bits & Mask;",
      "2121:    if (MaskedBits > ARRAYSIZE(HuffTableLOM))",
      "2122:     return -1;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2133:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
      "2134:     return -1;",
      "2136:    LengthOfMatchBits = LOMBitsLUT[LengthOfMatch];",
      "2137:    LengthOfMatchBase = LOMBaseLUT[LengthOfMatch];",
      "2139:    if (LengthOfMatchBits)",
      "2140:    {",
      "2143:     bits >>= LengthOfMatchBits;",
      "2144:     nbits -= LengthOfMatchBits;",
      "2145:     LengthOfMatchBase += MaskedBits;",
      "",
      "[Removed Lines]",
      "2141:     Mask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);",
      "2142:     MaskedBits = bits & Mask;",
      "",
      "[Added Lines]",
      "2131:    if (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))",
      "2132:     return -1;",
      "2136:    if (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))",
      "2137:     return -1;",
      "2142:     const size_t idx = (2ull * LengthOfMatchBits) + 3ull;",
      "2143:     if (idx >= ARRAYSIZE(HuffTableMask))",
      "2144:      return -1;",
      "2146:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
      "2147:     const UINT32 MaskedBits = bits & Mask;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2154:   }",
      "2155:   else",
      "2156:   {",
      "2157:    CopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];",
      "2158:    CopyOffsetBase = CopyOffsetBaseLUT[CopyOffsetIndex];",
      "2159:    CopyOffset = CopyOffsetBase - 1;",
      "2161:    if (CopyOffsetBits)",
      "2162:    {",
      "2166:     bits >>= CopyOffsetBits;",
      "2167:     nbits -= CopyOffsetBits;",
      "",
      "[Removed Lines]",
      "2163:     Mask = get_word(&HuffTableMask[(2 * CopyOffsetBits) + 3]);",
      "2164:     MaskedBits = bits & Mask;",
      "2165:     CopyOffset = CopyOffsetBase + MaskedBits - 1;",
      "",
      "[Added Lines]",
      "2162:    if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))",
      "2163:     return -1;",
      "2167:    if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBaseLUT))",
      "2168:     return -1;",
      "2174:     const size_t idx = (2ull * CopyOffsetBits) + 3ull;",
      "2175:     if (idx >= ARRAYSIZE(HuffTableMask))",
      "2176:      return -1;",
      "2178:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
      "2179:     const UINT32 MaskedBits = bits & Mask;",
      "2180:     const UINT32 tmp = CopyOffsetBase + MaskedBits;",
      "2181:     if (tmp < 1)",
      "2182:      return -1;",
      "2183:     CopyOffset = tmp - 1;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2170:      return -1;",
      "2171:    }",
      "2175:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
      "2176:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
      "2177:    bits >>= BitLength;",
      "",
      "[Removed Lines]",
      "2173:    Mask = get_word(&HuffTableMask[21]);",
      "2174:    MaskedBits = bits & Mask;",
      "",
      "[Added Lines]",
      "2191:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
      "2192:    const UINT32 MaskedBits = bits & Mask;",
      "2193:    if (MaskedBits >= ARRAYSIZE(HuffTableLOM))",
      "2194:     return -1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2180:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
      "2181:     return -1;",
      "2183:    LengthOfMatchBits = LOMBitsLUT[LengthOfMatch];",
      "2184:    LengthOfMatchBase = LOMBaseLUT[LengthOfMatch];",
      "2186:    if (LengthOfMatchBits)",
      "2187:    {",
      "2190:     bits >>= LengthOfMatchBits;",
      "2191:     nbits -= LengthOfMatchBits;",
      "2192:     LengthOfMatchBase += MaskedBits;",
      "",
      "[Removed Lines]",
      "2188:     Mask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);",
      "2189:     MaskedBits = bits & Mask;",
      "",
      "[Added Lines]",
      "2204:    if (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))",
      "2205:     return -1;",
      "2209:    if (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))",
      "2210:     return -1;",
      "2215:     const size_t idx = (2ull * LengthOfMatchBits) + 3ull;",
      "2216:     if (idx >= ARRAYSIZE(HuffTableMask))",
      "2217:      return -1;",
      "2219:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
      "2220:     const UINT32 MaskedBits = bits & Mask;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2644:    }",
      "2646:    IndexLEC = Literal;",
      "2647:    BitLength = HuffLengthLEC[IndexLEC];",
      "2648:    CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
      "2650:    if (BitLength > 15)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2678:    if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
      "2679:     return -1;",
      "2682:    if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
      "2683:     return -1;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2727:      bits = CopyOffset;",
      "2729:     CopyOffsetIndex = ncrush->HuffTableCopyOffset[bits + 2];",
      "2730:     CopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];",
      "2731:     IndexLEC = 257 + CopyOffsetIndex;",
      "2732:     BitLength = HuffLengthLEC[IndexLEC];",
      "2733:     CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
      "2735:     if (BitLength > 15)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2767:     if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))",
      "2768:      return -1;",
      "2772:     if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
      "2773:      return -1;",
      "2776:     if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
      "2777:      return -1;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2748:     else",
      "2749:      IndexCO = ncrush->HuffTableLOM[MatchLength];",
      "2751:     BitLength = HuffLengthLOM[IndexCO];",
      "2752:     IndexLOM = LOMBitsLUT[IndexCO];",
      "2753:     NCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);",
      "2754:     Mask = ((1 << IndexLOM) - 1);",
      "2755:     MaskedBits = (MatchLength - 2) & Mask;",
      "2756:     NCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);",
      "2758:     if ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)",
      "2759:      return -1010;",
      "2760:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2796:     if (IndexCO >= ARRAYSIZE(HuffLengthLOM))",
      "2797:      return -1;",
      "2800:     if (IndexCO >= ARRAYSIZE(LOMBitsLUT))",
      "2801:      return -1;",
      "2804:     if (IndexCO >= ARRAYSIZE(HuffCodeLOM))",
      "2805:      return -1;",
      "2811:     if (IndexCO >= ARRAYSIZE(LOMBaseLUT))",
      "2812:      return -1;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2762:    {",
      "2764:     IndexLEC = 289 + OffsetCacheIndex;",
      "2765:     BitLength = HuffLengthLEC[IndexLEC];",
      "2766:     CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
      "2768:     if (BitLength >= 15)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2820:     if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
      "2821:      return -1;",
      "2823:     if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
      "2824:      return -1;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2775:     else",
      "2776:      IndexCO = ncrush->HuffTableLOM[MatchLength];",
      "2778:     BitLength = HuffLengthLOM[IndexCO];",
      "2779:     IndexLOM = LOMBitsLUT[IndexCO];",
      "2780:     NCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);",
      "2781:     Mask = ((1 << IndexLOM) - 1);",
      "2782:     MaskedBits = (MatchLength - 2) & Mask;",
      "2783:     NCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);",
      "2785:     if ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)",
      "2786:      return -1012;",
      "2787:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2837:     if (IndexCO >= ARRAYSIZE(HuffLengthLOM))",
      "2838:      return -1;",
      "2842:     if (IndexCO >= ARRAYSIZE(LOMBitsLUT))",
      "2843:      return -1;",
      "2846:     if (IndexCO >= ARRAYSIZE(HuffCodeLOM))",
      "2847:      return -1;",
      "2853:     if (IndexCO >= ARRAYSIZE(LOMBaseLUT))",
      "2854:      return -1;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2806:   Literal = *SrcPtr++;",
      "2807:   HistoryPtr++;",
      "2808:   IndexLEC = Literal;",
      "2809:   BitLength = HuffLengthLEC[IndexLEC];",
      "2810:   CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2879:   if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
      "2880:    return -1;",
      "2881:   if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
      "2882:    return -1;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2866:  k = 0;",
      "2868:  WINPR_ASSERT(context);",
      "2870:  for (i = 0; i < 28; i++)",
      "2871:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2943:  WINPR_ASSERT(28 < ARRAYSIZE(LOMBitsLUT));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2883:   else",
      "2884:    i = context->HuffTableLOM[k];",
      "2886:   if (((((1 << LOMBitsLUT[i]) - 1) & (k - 2)) + LOMBaseLUT[i]) != k)",
      "2887:    return -1;",
      "2888:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2961:   if (i >= ARRAYSIZE(LOMBitsLUT))",
      "2962:    return -1;",
      "2963:   if (i >= ARRAYSIZE(LOMBaseLUT))",
      "2964:    return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ceb7bd1d414965e54861e5a9b318d6ae25ca8ae6",
      "candidate_info": {
        "commit_hash": "ceb7bd1d414965e54861e5a9b318d6ae25ca8ae6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ceb7bd1d414965e54861e5a9b318d6ae25ca8ae6",
        "files": [
          "channels/ainput/client/ainput_main.c",
          "channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c",
          "channels/printer/client/cups/printer_cups.c",
          "channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c",
          "libfreerdp/codec/ncrush.c",
          "libfreerdp/core/childsession.c",
          "libfreerdp/core/info.c"
        ],
        "message": "[warnings] fixed clang build warnings",
        "before_after_code_files": [
          "channels/ainput/client/ainput_main.c||channels/ainput/client/ainput_main.c",
          "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c",
          "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c",
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c",
          "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c",
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c",
          "libfreerdp/core/childsession.c||libfreerdp/core/childsession.c",
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ],
          "candidate": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/ainput/client/ainput_main.c||channels/ainput/client/ainput_main.c": [
          "File: channels/ainput/client/ainput_main.c -> channels/ainput/client/ainput_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: static const IWTSVirtualChannelCallback ainput_functions = { ainput_on_data_received,",
          "",
          "[Removed Lines]",
          "171:                                                           ainput_on_close };",
          "",
          "[Added Lines]",
          "171:                                                           ainput_on_close, NULL };",
          "",
          "---------------"
        ],
        "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c": [
          "File: channels/disp/client/disp_main.c -> channels/disp/client/disp_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308: }",
          "",
          "[Removed Lines]",
          "311:                                                         disp_on_close };",
          "",
          "[Added Lines]",
          "311:                                                         disp_on_close, NULL };",
          "",
          "---------------"
        ],
        "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c": [
          "File: channels/echo/client/echo_main.c -> channels/echo/client/echo_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: }",
          "",
          "[Removed Lines]",
          "80:                                                         echo_on_close };",
          "",
          "[Added Lines]",
          "80:                                                         echo_on_close, NULL };",
          "",
          "---------------"
        ],
        "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c": [
          "File: channels/geometry/client/geometry_main.c -> channels/geometry/client/geometry_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: static const IWTSVirtualChannelCallback geometry_callbacks = { geometry_on_data_received,",
          "334: static UINT init_plugin_cb(GENERIC_DYNVC_PLUGIN* base, rdpContext* rcontext, rdpSettings* settings)",
          "335: {",
          "",
          "[Removed Lines]",
          "332:                                                             geometry_on_close };",
          "",
          "[Added Lines]",
          "332:                                                             geometry_on_close, NULL };",
          "",
          "---------------"
        ],
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <freerdp/channels/log.h>",
          "44: #define TAG CHANNELS_TAG(\"printer.client.cups\")",
          "47: #include <errno.h>",
          "48: #include <sys/sysctl.h>",
          "",
          "[Removed Lines]",
          "46: #if __APPLE__",
          "",
          "[Added Lines]",
          "46: #if defined(__APPLE__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:  else",
          "309:  {",
          "310:   const char* dname = \"MS Publisher Imagesetter\";",
          "312:   if (is_mac_os_sonoma_or_later())",
          "313:    dname = \"Microsoft Print to PDF\";",
          "314: #endif",
          "",
          "[Removed Lines]",
          "311: #if __APPLE__",
          "",
          "[Added Lines]",
          "311: #if defined(__APPLE__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353: static rdpPrinter** printer_cups_enum_printers(rdpPrinterDriver* driver)",
          "354: {",
          "356:  int num_printers = 0;",
          "357:  cups_dest_t* dests = NULL;",
          "358:  cups_dest_t* dest = NULL;",
          "",
          "[Removed Lines]",
          "355:  rdpPrinter** printers;",
          "",
          "[Added Lines]",
          "355:  rdpPrinter** printers = NULL;",
          "",
          "---------------"
        ],
        "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c": [
          "File: channels/rdpei/client/rdpei_main.c -> channels/rdpei/client/rdpei_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1461: static const IWTSVirtualChannelCallback geometry_callbacks = { rdpei_on_data_received,",
          "",
          "[Removed Lines]",
          "1463:                                                             rdpei_on_close };",
          "",
          "[Added Lines]",
          "1463:                                                             rdpei_on_close, NULL };",
          "",
          "---------------"
        ],
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2405: }",
          "2407: static const IWTSVirtualChannelCallback rdpgfx_callbacks = { rdpgfx_on_data_received,",
          "",
          "[Removed Lines]",
          "2408:                                                           rdpgfx_on_open, rdpgfx_on_close };",
          "",
          "[Added Lines]",
          "2408:                                                           rdpgfx_on_open, rdpgfx_on_close,",
          "2409:                                                           NULL };",
          "",
          "---------------"
        ],
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2177:     if (idx >= ARRAYSIZE(HuffTableMask))",
          "2178:      return -1;",
          "2186:     bits >>= CopyOffsetBits;",
          "2187:     nbits -= CopyOffsetBits;",
          "",
          "[Removed Lines]",
          "2180:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
          "2181:     const UINT32 MaskedBits = bits & Mask;",
          "2182:     const UINT32 tmp = CopyOffsetBase + MaskedBits;",
          "2183:     if (tmp < 1)",
          "2184:      return -1;",
          "2185:     CopyOffset = tmp - 1;",
          "",
          "[Added Lines]",
          "2180:     {",
          "2181:      const UINT16 Mask = get_word(&HuffTableMask[idx]);",
          "2182:      const UINT32 MaskedBits = bits & Mask;",
          "2183:      const UINT32 tmp = CopyOffsetBase + MaskedBits;",
          "2184:      if (tmp < 1)",
          "2185:       return -1;",
          "2186:      CopyOffset = tmp - 1;",
          "2187:     }",
          "",
          "---------------"
        ],
        "libfreerdp/core/childsession.c||libfreerdp/core/childsession.c": [
          "File: libfreerdp/core/childsession.c -> libfreerdp/core/childsession.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "135:   case BIO_C_WAIT_READ:",
          "136:   {",
          "138:    return 1;",
          "139:   }",
          "141:   case BIO_C_WAIT_WRITE:",
          "142:   {",
          "144:    return 1;",
          "145:   }",
          "",
          "[Removed Lines]",
          "137:    int timeout = (int)arg1;",
          "143:    int timeout = (int)arg1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:                                       size_t max)",
          "81: {",
          "82:  const BOOL unicode = (flags & INFO_UNICODE) ? TRUE : FALSE;",
          "85:  if (!freerdp_settings_set_string(settings, id, NULL))",
          "86:   return FALSE;",
          "",
          "[Removed Lines]",
          "83:  const size_t nullSize = unicode ? sizeof(WCHAR) : sizeof(CHAR);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "593e2bf4a9174d0d9099f0c81aa27488c1c6b058",
      "candidate_info": {
        "commit_hash": "593e2bf4a9174d0d9099f0c81aa27488c1c6b058",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/593e2bf4a9174d0d9099f0c81aa27488c1c6b058",
        "files": [
          "channels/rail/client/rail_orders.c",
          "client/common/cmdline.c",
          "include/freerdp/api.h",
          "libfreerdp/codec/ncrush.c",
          "libfreerdp/core/gcc.c"
        ],
        "message": "[api] fix compiler warnings\n\ncheck #if defined(__GNUC__)",
        "before_after_code_files": [
          "channels/rail/client/rail_orders.c||channels/rail/client/rail_orders.c",
          "client/common/cmdline.c||client/common/cmdline.c",
          "include/freerdp/api.h||include/freerdp/api.h",
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c",
          "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ],
          "candidate": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/rail/client/rail_orders.c||channels/rail/client/rail_orders.c": [
          "File: channels/rail/client/rail_orders.c -> channels/rail/client/rail_orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:  if (masked != featureMask)",
          "432:  {",
          "436:   WLog_WARN(TAG, \"have %s, require %s\",",
          "439:   return FALSE;",
          "440:  }",
          "",
          "[Removed Lines]",
          "433:   char mask[256] = { 0 };",
          "434:   char actual[256] = { 0 };",
          "437:             freerdp_rail_support_flags_to_string(supported, actual, sizeof(actual)),",
          "438:             freerdp_rail_support_flags_to_string(featureMask, mask, sizeof(mask)));",
          "",
          "[Added Lines]",
          "433:   char maskstr[256] = { 0 };",
          "434:   char actualstr[256] = { 0 };",
          "437:             freerdp_rail_support_flags_to_string(supported, actualstr, sizeof(actualstr)),",
          "438:             freerdp_rail_support_flags_to_string(featureMask, maskstr, sizeof(maskstr)));",
          "",
          "---------------"
        ],
        "client/common/cmdline.c||client/common/cmdline.c": [
          "File: client/common/cmdline.c -> client/common/cmdline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3211:   {",
          "3212:    if (arg->Flags & COMMAND_LINE_VALUE_PRESENT)",
          "3213:    {",
          "3215:     union",
          "3216:     {",
          "3217:      char** p;",
          "",
          "[Removed Lines]",
          "3214:     UINT32 i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3236:     MonitorIds =",
          "3237:         freerdp_settings_get_pointer_array_writable(settings, FreeRDP_MonitorIds, 0);",
          "3239:     {",
          "3240:      LONGLONG val;",
          "",
          "[Removed Lines]",
          "3238:     for (i = 0; i < count; i++)",
          "",
          "[Added Lines]",
          "3237:     for (UINT32 i = 0; i < count; i++)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4096:   {",
          "4097:    if (arg->Flags & COMMAND_LINE_VALUE_PRESENT)",
          "4098:    {",
          "4100:     union",
          "4101:     {",
          "4102:      char** p;",
          "",
          "[Removed Lines]",
          "4099:     UINT32 i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4106:     ptr.p = CommandLineParseCommaSeparatedValues(arg->Value, &count);",
          "4108:     UINT32 EncryptionMethods = 0;",
          "4110:     {",
          "4111:      if (option_equals(ptr.pc[i], \"40\"))",
          "4112:       EncryptionMethods |= ENCRYPTION_METHOD_40BIT;",
          "",
          "[Removed Lines]",
          "4109:     for (i = 0; i < count; i++)",
          "",
          "[Added Lines]",
          "4107:     for (UINT32 i = 0; i < count; i++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5206:   { FreeRDP_RemdeskVirtualChannel, REMDESK_SVC_CHANNEL_NAME, settings },",
          "5207:   { FreeRDP_RemoteApplicationMode, RAIL_SVC_CHANNEL_NAME, settings }",
          "5208:  };",
          "5215:  {",
          "5216:   if ((dynChannels[i].settingId == 0) ||",
          "5217:       freerdp_settings_get_bool(settings, dynChannels[i].settingId))",
          "",
          "[Removed Lines]",
          "5209:  size_t i;",
          "5214:  for (i = 0; i < ARRAYSIZE(dynChannels); i++)",
          "",
          "[Added Lines]",
          "5211:  for (size_t i = 0; i < ARRAYSIZE(dynChannels); i++)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5430:  }",
          "5434:  {",
          "5435:   if ((staticChannels[i].settingId == 0) ||",
          "5436:       freerdp_settings_get_bool(settings, staticChannels[i].settingId))",
          "",
          "[Removed Lines]",
          "5433:  for (i = 0; i < ARRAYSIZE(staticChannels); i++)",
          "",
          "[Added Lines]",
          "5430:  for (size_t i = 0; i < ARRAYSIZE(staticChannels); i++)",
          "",
          "---------------"
        ],
        "include/freerdp/api.h||include/freerdp/api.h": [
          "File: include/freerdp/api.h -> include/freerdp/api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:    WLog_VRB(\"com.freerdp.api\", \"IFCALLRET(\" #_cb \") == NULL\"); \\",
          "91:  } while (0)",
          "94: #define IFCALLRESULT(_default_return, _cb, ...)                            \\",
          "95:  ({                                                                     \\",
          "96:   (_cb != NULL) ? _cb(__VA_ARGS__) : ({                              \\",
          "",
          "[Removed Lines]",
          "93: #if 0 //__GNUC__",
          "",
          "[Added Lines]",
          "93: #if 0 // defined(__GNUC__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:  ((_cb != NULL) ? _cb(__VA_ARGS__) : (_default_return))",
          "104: #endif",
          "107: #define ALIGN64 __attribute__((aligned(8)))",
          "108: #else",
          "109: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "106: #ifdef __GNUC__",
          "",
          "[Added Lines]",
          "106: #if defined(__GNUC__)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:    if (OffsetCacheIndex >= 4)",
          "2116:     return -1004;",
          "2128:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
          "2129:     return -1;",
          "",
          "[Removed Lines]",
          "2118:    CopyOffset = ncrush->OffsetCache[OffsetCacheIndex];",
          "2119:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2120:    const UINT32 MaskedBits = bits & Mask;",
          "2121:    if (MaskedBits > ARRAYSIZE(HuffTableLOM))",
          "2122:     return -1;",
          "2123:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2124:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2125:    bits >>= BitLength;",
          "2126:    nbits -= BitLength;",
          "",
          "[Added Lines]",
          "2118:    {",
          "2119:     CopyOffset = ncrush->OffsetCache[OffsetCacheIndex];",
          "2120:     const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2121:     const UINT32 MaskedBits = bits & Mask;",
          "2122:     if (MaskedBits > ARRAYSIZE(HuffTableLOM))",
          "2123:      return -1;",
          "2124:     LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2125:     BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2126:     bits >>= BitLength;",
          "2127:     nbits -= BitLength;",
          "2128:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2187:     if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
          "2188:      return -1;",
          "2189:    }",
          "2201:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
          "2202:     return -1;",
          "",
          "[Removed Lines]",
          "2191:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2192:    const UINT32 MaskedBits = bits & Mask;",
          "2193:    if (MaskedBits >= ARRAYSIZE(HuffTableLOM))",
          "2194:     return -1;",
          "2196:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2197:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2198:    bits >>= BitLength;",
          "2199:    nbits -= BitLength;",
          "",
          "[Added Lines]",
          "2192:    {",
          "2193:     const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2194:     const UINT32 MaskedBits = bits & Mask;",
          "2195:     if (MaskedBits >= ARRAYSIZE(HuffTableLOM))",
          "2196:      return -1;",
          "2198:     LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2199:     BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2200:     bits >>= BitLength;",
          "2201:     nbits -= BitLength;",
          "2202:    }",
          "",
          "---------------"
        ],
        "libfreerdp/core/gcc.c||libfreerdp/core/gcc.c": [
          "File: libfreerdp/core/gcc.c -> libfreerdp/core/gcc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: }",
          "564: {",
          "565:  return Stream_SafeSeek(s, 2);",
          "566: }",
          "",
          "[Removed Lines]",
          "563: BOOL gcc_read_client_unused1_data(wStream* s)",
          "",
          "[Added Lines]",
          "563: static BOOL gcc_read_client_unused1_data(wStream* s)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b7b8445bc68ec2bbbf64dedbcd3913f9681958c",
      "candidate_info": {
        "commit_hash": "0b7b8445bc68ec2bbbf64dedbcd3913f9681958c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0b7b8445bc68ec2bbbf64dedbcd3913f9681958c",
        "files": [
          "libfreerdp/codec/ncrush.c"
        ],
        "message": "[codec,ncrush] fix const correctness of pointer",
        "before_after_code_files": [
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ],
          "candidate": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2022:  UINT32 CopyOffset;",
          "2023:  UINT32 CopyLength;",
          "2024:  UINT32 OldCopyOffset;",
          "2026:  UINT32 LengthOfMatch;",
          "2027:  UINT32 CopyOffsetIndex;",
          "2028:  UINT32 OffsetCacheIndex;",
          "",
          "[Removed Lines]",
          "2025:  BYTE* CopyOffsetPtr;",
          "",
          "[Added Lines]",
          "2025:  const BYTE* CopyOffsetPtr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6241ce567468d9911e80973147f5fd032622a821",
      "candidate_info": {
        "commit_hash": "6241ce567468d9911e80973147f5fd032622a821",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6241ce567468d9911e80973147f5fd032622a821",
        "files": [
          "libfreerdp/codec/ncrush.c"
        ],
        "message": "[coverity] 1543052 Out-of-bounds read",
        "before_after_code_files": [
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ],
          "candidate": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2119:     CopyOffset = ncrush->OffsetCache[OffsetCacheIndex];",
          "2120:     const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2121:     const UINT32 MaskedBits = bits & Mask;",
          "2123:      return -1;",
          "2124:     LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2125:     BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "",
          "[Removed Lines]",
          "2122:     if (MaskedBits > ARRAYSIZE(HuffTableLOM))",
          "",
          "[Added Lines]",
          "2122:     if (MaskedBits >= ARRAYSIZE(HuffTableLOM))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c659973bb4cd65c065f2fe1a807dbc6805c684c6",
      "candidate_info": {
        "commit_hash": "c659973bb4cd65c065f2fe1a807dbc6805c684c6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c659973bb4cd65c065f2fe1a807dbc6805c684c6",
        "files": [
          "libfreerdp/codec/ncrush.c"
        ],
        "message": "[codec,ncrush] fix index checks\n\nproperly verify all offsets while decoding data.\n\n(cherry picked from commit 880285c332a1d98334fd8fa4b06c10fba0fb6959)",
        "before_after_code_files": [
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ],
          "candidate": [
            "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1994:                       UINT32* pDstSize, UINT32 flags)",
          "1995: {",
          "1996:  UINT32 index;",
          "2002:  BYTE Literal;",
          "2003:  UINT32 IndexLEC;",
          "2004:  UINT32 BitLength;",
          "2006:  UINT32 CopyOffset;",
          "2007:  UINT32 CopyLength;",
          "2008:  UINT32 OldCopyOffset;",
          "",
          "[Removed Lines]",
          "1997:  UINT32 bits;",
          "1998:  INT32 nbits;",
          "1999:  const BYTE* SrcPtr;",
          "2000:  const BYTE* SrcEnd;",
          "2001:  UINT16 Mask;",
          "2005:  UINT32 MaskedBits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2010:  UINT32 LengthOfMatch;",
          "2011:  UINT32 CopyOffsetIndex;",
          "2012:  UINT32 OffsetCacheIndex;",
          "2016:  UINT32 CopyOffsetBits;",
          "2017:  UINT32 CopyOffsetBase;",
          "2018:  UINT32 LengthOfMatchBits;",
          "",
          "[Removed Lines]",
          "2013:  BYTE* HistoryPtr;",
          "2014:  BYTE* HistoryBuffer;",
          "2015:  BYTE* HistoryBufferEnd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2021:  if (ncrush->HistoryEndOffset != 65535)",
          "2022:   return -1001;",
          "2027:  if (flags & PACKET_AT_FRONT)",
          "2028:  {",
          "",
          "[Removed Lines]",
          "2024:  HistoryBuffer = ncrush->HistoryBuffer;",
          "2025:  HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];",
          "",
          "[Added Lines]",
          "2015:  BYTE* HistoryBuffer = ncrush->HistoryBuffer;",
          "2016:  const BYTE* HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041:   ZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));",
          "2042:  }",
          "2046:  if (!(flags & PACKET_COMPRESSED))",
          "2047:  {",
          "",
          "[Removed Lines]",
          "2044:  HistoryPtr = ncrush->HistoryPtr;",
          "",
          "[Added Lines]",
          "2035:  BYTE* HistoryPtr = ncrush->HistoryPtr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2050:   return 1;",
          "2051:  }",
          "2058:  while (1)",
          "2059:  {",
          "2060:   while (1)",
          "2061:   {",
          "2064:    IndexLEC = HuffTableLEC[MaskedBits] & 0xFFF;",
          "2065:    BitLength = HuffTableLEC[MaskedBits] >> 12;",
          "2066:    bits >>= BitLength;",
          "",
          "[Removed Lines]",
          "2053:  SrcEnd = &pSrcData[SrcSize];",
          "2054:  nbits = 32;",
          "2055:  bits = get_dword(pSrcData);",
          "2056:  SrcPtr = pSrcData + 4;",
          "2062:    Mask = get_word(&HuffTableMask[29]);",
          "2063:    MaskedBits = bits & Mask;",
          "",
          "[Added Lines]",
          "2044:  const BYTE* SrcEnd = &pSrcData[SrcSize];",
          "2045:  const BYTE* SrcPtr = pSrcData + 4;",
          "2047:  INT32 nbits = 32;",
          "2048:  UINT32 bits = get_dword(pSrcData);",
          "2053:    const UINT16 Mask = get_word(&HuffTableMask[29]);",
          "2054:    const UINT32 MaskedBits = bits & Mask;",
          "2055:    if (MaskedBits >= ARRAYSIZE(HuffTableLEC))",
          "2056:     return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2096:     return -1004;",
          "2098:    CopyOffset = ncrush->OffsetCache[OffsetCacheIndex];",
          "2101:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2102:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2103:    bits >>= BitLength;",
          "",
          "[Removed Lines]",
          "2099:    Mask = get_word(&HuffTableMask[21]);",
          "2100:    MaskedBits = bits & Mask;",
          "",
          "[Added Lines]",
          "2092:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2093:    const UINT32 MaskedBits = bits & Mask;",
          "2094:    if (MaskedBits > ARRAYSIZE(HuffTableLOM))",
          "2095:     return -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2106:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
          "2107:     return -1;",
          "2109:    LengthOfMatchBits = LOMBitsLUT[LengthOfMatch];",
          "2110:    LengthOfMatchBase = LOMBaseLUT[LengthOfMatch];",
          "2112:    if (LengthOfMatchBits)",
          "2113:    {",
          "2116:     bits >>= LengthOfMatchBits;",
          "2117:     nbits -= LengthOfMatchBits;",
          "2118:     LengthOfMatchBase += MaskedBits;",
          "",
          "[Removed Lines]",
          "2114:     Mask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);",
          "2115:     MaskedBits = bits & Mask;",
          "",
          "[Added Lines]",
          "2104:    if (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))",
          "2105:     return -1;",
          "2109:    if (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))",
          "2110:     return -1;",
          "2115:     const size_t idx = (2ull * LengthOfMatchBits) + 3ull;",
          "2116:     if (idx >= ARRAYSIZE(HuffTableMask))",
          "2117:      return -1;",
          "2119:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
          "2120:     const UINT32 MaskedBits = bits & Mask;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2127:   }",
          "2128:   else",
          "2129:   {",
          "2130:    CopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];",
          "2131:    CopyOffsetBase = CopyOffsetBaseLUT[CopyOffsetIndex];",
          "2132:    CopyOffset = CopyOffsetBase - 1;",
          "2134:    if (CopyOffsetBits)",
          "2135:    {",
          "2139:     bits >>= CopyOffsetBits;",
          "2140:     nbits -= CopyOffsetBits;",
          "",
          "[Removed Lines]",
          "2136:     Mask = get_word(&HuffTableMask[(2 * CopyOffsetBits) + 3]);",
          "2137:     MaskedBits = bits & Mask;",
          "2138:     CopyOffset = CopyOffsetBase + MaskedBits - 1;",
          "",
          "[Added Lines]",
          "2135:    if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))",
          "2136:     return -1;",
          "2140:    if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBaseLUT))",
          "2141:     return -1;",
          "2147:     const size_t idx = (2ull * CopyOffsetBits) + 3ull;",
          "2148:     if (idx >= ARRAYSIZE(HuffTableMask))",
          "2149:      return -1;",
          "2151:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
          "2152:     const UINT32 MaskedBits = bits & Mask;",
          "2153:     const UINT32 tmp = CopyOffsetBase + MaskedBits;",
          "2154:     if (tmp < 1)",
          "2155:      return -1;",
          "2156:     CopyOffset = tmp - 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2143:      return -1;",
          "2144:    }",
          "2148:    LengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;",
          "2149:    BitLength = HuffTableLOM[MaskedBits] >> 12;",
          "2150:    bits >>= BitLength;",
          "",
          "[Removed Lines]",
          "2146:    Mask = get_word(&HuffTableMask[21]);",
          "2147:    MaskedBits = bits & Mask;",
          "",
          "[Added Lines]",
          "2164:    const UINT16 Mask = get_word(&HuffTableMask[21]);",
          "2165:    const UINT32 MaskedBits = bits & Mask;",
          "2166:    if (MaskedBits >= ARRAYSIZE(HuffTableLOM))",
          "2167:     return -1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2153:    if (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))",
          "2154:     return -1;",
          "2156:    LengthOfMatchBits = LOMBitsLUT[LengthOfMatch];",
          "2157:    LengthOfMatchBase = LOMBaseLUT[LengthOfMatch];",
          "2159:    if (LengthOfMatchBits)",
          "2160:    {",
          "2163:     bits >>= LengthOfMatchBits;",
          "2164:     nbits -= LengthOfMatchBits;",
          "2165:     LengthOfMatchBase += MaskedBits;",
          "",
          "[Removed Lines]",
          "2161:     Mask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);",
          "2162:     MaskedBits = bits & Mask;",
          "",
          "[Added Lines]",
          "2177:    if (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))",
          "2178:     return -1;",
          "2182:    if (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))",
          "2183:     return -1;",
          "2188:     const size_t idx = (2ull * LengthOfMatchBits) + 3ull;",
          "2189:     if (idx >= ARRAYSIZE(HuffTableMask))",
          "2190:      return -1;",
          "2192:     const UINT16 Mask = get_word(&HuffTableMask[idx]);",
          "2193:     const UINT32 MaskedBits = bits & Mask;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2583:    }",
          "2585:    IndexLEC = Literal;",
          "2586:    BitLength = HuffLengthLEC[IndexLEC];",
          "2587:    CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
          "2589:    if (BitLength > 15)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2617:    if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
          "2618:     return -1;",
          "2621:    if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
          "2622:     return -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2666:      bits = CopyOffset;",
          "2668:     CopyOffsetIndex = ncrush->HuffTableCopyOffset[bits + 2];",
          "2669:     CopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];",
          "2670:     IndexLEC = 257 + CopyOffsetIndex;",
          "2671:     BitLength = HuffLengthLEC[IndexLEC];",
          "2672:     CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
          "2674:     if (BitLength > 15)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2706:     if (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))",
          "2707:      return -1;",
          "2711:     if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
          "2712:      return -1;",
          "2715:     if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
          "2716:      return -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2687:     else",
          "2688:      IndexCO = ncrush->HuffTableLOM[MatchLength];",
          "2690:     BitLength = HuffLengthLOM[IndexCO];",
          "2691:     IndexLOM = LOMBitsLUT[IndexCO];",
          "2692:     NCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);",
          "2693:     Mask = ((1 << IndexLOM) - 1);",
          "2694:     MaskedBits = (MatchLength - 2) & Mask;",
          "2695:     NCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);",
          "2697:     if ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)",
          "2698:      return -1010;",
          "2699:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2735:     if (IndexCO >= ARRAYSIZE(HuffLengthLOM))",
          "2736:      return -1;",
          "2739:     if (IndexCO >= ARRAYSIZE(LOMBitsLUT))",
          "2740:      return -1;",
          "2743:     if (IndexCO >= ARRAYSIZE(HuffCodeLOM))",
          "2744:      return -1;",
          "2750:     if (IndexCO >= ARRAYSIZE(LOMBaseLUT))",
          "2751:      return -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2701:    {",
          "2703:     IndexLEC = 289 + OffsetCacheIndex;",
          "2704:     BitLength = HuffLengthLEC[IndexLEC];",
          "2705:     CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
          "2707:     if (BitLength >= 15)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:     if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
          "2760:      return -1;",
          "2762:     if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
          "2763:      return -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2714:     else",
          "2715:      IndexCO = ncrush->HuffTableLOM[MatchLength];",
          "2717:     BitLength = HuffLengthLOM[IndexCO];",
          "2718:     IndexLOM = LOMBitsLUT[IndexCO];",
          "2719:     NCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);",
          "2720:     Mask = ((1 << IndexLOM) - 1);",
          "2721:     MaskedBits = (MatchLength - 2) & Mask;",
          "2722:     NCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);",
          "2724:     if ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)",
          "2725:      return -1012;",
          "2726:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2776:     if (IndexCO >= ARRAYSIZE(HuffLengthLOM))",
          "2777:      return -1;",
          "2781:     if (IndexCO >= ARRAYSIZE(LOMBitsLUT))",
          "2782:      return -1;",
          "2785:     if (IndexCO >= ARRAYSIZE(HuffCodeLOM))",
          "2786:      return -1;",
          "2792:     if (IndexCO >= ARRAYSIZE(LOMBaseLUT))",
          "2793:      return -1;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2745:   Literal = *SrcPtr++;",
          "2746:   HistoryPtr++;",
          "2747:   IndexLEC = Literal;",
          "2748:   BitLength = HuffLengthLEC[IndexLEC];",
          "2749:   CodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2818:   if (IndexLEC >= ARRAYSIZE(HuffLengthLEC))",
          "2819:    return -1;",
          "2820:   if (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))",
          "2821:    return -1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2817:   else",
          "2818:    i = context->HuffTableLOM[k];",
          "2820:   if (((((1 << LOMBitsLUT[i]) - 1) & (k - 2)) + LOMBaseLUT[i]) != k)",
          "2821:    return -1;",
          "2822:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2894:   if (i >= ARRAYSIZE(LOMBitsLUT))",
          "2895:    return -1;",
          "2896:   if (i >= ARRAYSIZE(LOMBaseLUT))",
          "2897:    return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}