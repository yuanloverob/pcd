{
  "cve_id": "CVE-2022-39244",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C. In versions of PJSIP prior to 2.13 the PJSIP parser, PJMEDIA RTP decoder, and PJMEDIA SDP parser are affeced by a buffer overflow vulnerability. Users connecting to untrusted clients are at risk. This issue has been patched and is available as commit c4d3498 in the master branch and will be included in releases 2.13 and later. Users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "pjsip/pjproject",
  "patch_hash": "c4d34984ec92b3d5252a7d5cddd85a1d3a8001ae",
  "patch_info": {
    "commit_hash": "c4d34984ec92b3d5252a7d5cddd85a1d3a8001ae",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/c4d34984ec92b3d5252a7d5cddd85a1d3a8001ae",
    "files": [
      "pjlib-util/src/pjlib-util/scanner.c",
      "pjmedia/src/pjmedia/rtp.c",
      "pjmedia/src/pjmedia/sdp.c"
    ],
    "message": "Merge pull request from GHSA-fq45-m3f7-3mhj\n\n* Initial patch\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use `!pj_scan_is_eof` instead of manually checking `scanner->curptr < scanner->end`\n\nCo-authored-by: Maksim Mukosey <mmukosey@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Revert '>=' back to '>' in pj_scan_stricmp_alnum()\n\n* Fix error compiles.\n\nCo-authored-by: Nanang Izzuddin <nanang@teluu.com>\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\nCo-authored-by: Maksim Mukosey <mmukosey@gmail.com>",
    "before_after_code_files": [
      "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c",
      "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c",
      "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c"
    ]
  },
  "patch_diff": {
    "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c": [
      "File: pjlib-util/src/pjlib-util/scanner.c -> pjlib-util/src/pjlib-util/scanner.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "196: PJ_DEF(void) pj_scan_skip_line( pj_scanner *scanner )",
      "197: {",
      "199:     if (!s) {",
      "200:  scanner->curptr = scanner->end;",
      "201:     } else {",
      "",
      "[Removed Lines]",
      "198:     char *s = pj_memchr(scanner->curptr, '\\n', scanner->end - scanner->curptr);",
      "",
      "[Added Lines]",
      "198:     char *s;",
      "200:     if (pj_scan_is_eof(scanner)) {",
      "201:         return;",
      "202:     }",
      "204:     s = pj_memchr(scanner->curptr, '\\n', scanner->end - scanner->curptr);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "265:     pj_assert(pj_cis_match(spec,0)==0);",
      "269:  pj_scan_syntax_err(scanner);",
      "270:  return;",
      "271:     }",
      "",
      "[Removed Lines]",
      "268:     if (!pj_cis_match(spec, *s)) {",
      "",
      "[Added Lines]",
      "273:     if (pj_scan_is_eof(scanner) || !pj_cis_match(spec, *s)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:     pj_assert(pj_cis_match(spec,'%')==0);",
      "304:  pj_scan_syntax_err(scanner);",
      "305:  return;",
      "306:     }",
      "",
      "[Removed Lines]",
      "303:     if (!pj_cis_match(spec, *s) && *s != '%') {",
      "",
      "[Added Lines]",
      "307:     if (pj_scan_is_eof(scanner) || !pj_cis_match(spec, *s) && *s != '%') {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "437:     scanner->curptr += N;",
      "440:  pj_scan_skip_whitespace(scanner);",
      "441:     }",
      "442: }",
      "",
      "[Removed Lines]",
      "439:     if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && scanner->skip_ws) {",
      "",
      "[Added Lines]",
      "443:     if (!pj_scan_is_eof(scanner) &&",
      "444:  PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && scanner->skip_ws)",
      "445:     {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "468: PJ_DEF(void) pj_scan_get_newline( pj_scanner *scanner )",
      "469: {",
      "471:  pj_scan_syntax_err(scanner);",
      "472:  return;",
      "473:     }",
      "475:     if (*scanner->curptr == '\\r') {",
      "476:  ++scanner->curptr;",
      "477:     }",
      "479:  ++scanner->curptr;",
      "480:     }",
      "",
      "[Removed Lines]",
      "470:     if (!PJ_SCAN_IS_NEWLINE(*scanner->curptr)) {",
      "478:     if (*scanner->curptr == '\\n') {",
      "",
      "[Added Lines]",
      "476:     if (pj_scan_is_eof(scanner) || !PJ_SCAN_IS_NEWLINE(*scanner->curptr)) {",
      "485:     if (!pj_scan_is_eof(scanner) && *scanner->curptr == '\\n') {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "521:     scanner->curptr = s;",
      "524:  pj_scan_skip_whitespace(scanner);",
      "525:     }",
      "526: }",
      "",
      "[Removed Lines]",
      "523:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
      "",
      "[Added Lines]",
      "530:     if (!pj_scan_is_eof(scanner) && PJ_SCAN_IS_PROBABLY_SPACE(*s) &&",
      "531:  scanner->skip_ws)",
      "532:     {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "545:     scanner->curptr = s;",
      "548:  pj_scan_skip_whitespace(scanner);",
      "549:     }",
      "550: }",
      "",
      "[Removed Lines]",
      "547:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
      "",
      "[Added Lines]",
      "556:     if (!pj_scan_is_eof(scanner) && PJ_SCAN_IS_PROBABLY_SPACE(*s) &&",
      "557:  scanner->skip_ws)",
      "558:     {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "571:     scanner->curptr = s;",
      "574:  pj_scan_skip_whitespace(scanner);",
      "575:     }",
      "576: }",
      "",
      "[Removed Lines]",
      "573:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
      "",
      "[Added Lines]",
      "584:     if (!pj_scan_is_eof(scanner) && PJ_SCAN_IS_PROBABLY_SPACE(*s) &&",
      "585:  scanner->skip_ws)",
      "586:     {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "586:     scanner->curptr += N;",
      "589:  pj_scan_skip_whitespace(scanner);",
      "590:     }",
      "591: }",
      "",
      "[Removed Lines]",
      "588:     if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && skip_ws) {",
      "",
      "[Added Lines]",
      "601:     if (!pj_scan_is_eof(scanner) &&",
      "602:  PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && skip_ws)",
      "603:     {",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c": [
      "File: pjmedia/src/pjmedia/rtp.c -> pjmedia/src/pjmedia/rtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:     offset = sizeof(pjmedia_rtp_hdr) + ((*hdr)->cc * sizeof(pj_uint32_t));",
      "192:     if ((*hdr)->x) {",
      "193:         if (offset + sizeof (pjmedia_rtp_ext_hdr) > (unsigned)pkt_len)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     if (offset >= pkt_len) {",
      "193:         return PJMEDIA_RTP_EINLEN;",
      "194:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202:  dec_hdr->ext_len = 0;",
      "203:     }",
      "207:  return PJMEDIA_RTP_EINLEN;",
      "",
      "[Removed Lines]",
      "206:     if (offset > pkt_len)",
      "",
      "[Added Lines]",
      "211:     if (offset >= pkt_len)",
      "",
      "---------------"
    ],
    "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c": [
      "File: pjmedia/src/pjmedia/sdp.c -> pjmedia/src/pjmedia/sdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "983:     ctx->last_error = PJMEDIA_SDP_EINVER;",
      "987:  on_scanner_error(scanner);",
      "988:  return;",
      "989:     }",
      "993:  on_scanner_error(scanner);",
      "994:  return;",
      "995:     }",
      "",
      "[Removed Lines]",
      "986:     if (*(scanner->curptr+1) != '=') {",
      "992:     if (*(scanner->curptr+2) != '0') {",
      "",
      "[Added Lines]",
      "986:     if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {",
      "992:     if (scanner->curptr+2 >= scanner->end || *(scanner->curptr+2) != '0') {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1006:     ctx->last_error = PJMEDIA_SDP_EINORIGIN;",
      "1010:  on_scanner_error(scanner);",
      "1011:  return;",
      "1012:     }",
      "",
      "[Removed Lines]",
      "1009:     if (*(scanner->curptr+1) != '=') {",
      "",
      "[Added Lines]",
      "1009:     if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1052:     ctx->last_error = PJMEDIA_SDP_EINTIME;",
      "1056:  on_scanner_error(scanner);",
      "1057:  return;",
      "1058:     }",
      "",
      "[Removed Lines]",
      "1055:     if (*(scanner->curptr+1) != '=') {",
      "",
      "[Added Lines]",
      "1055:     if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1080:     ctx->last_error = PJMEDIA_SDP_EINSDP;",
      "1084:  on_scanner_error(scanner);",
      "1085:  return;",
      "1086:     }",
      "",
      "[Removed Lines]",
      "1083:     if (*(scanner->curptr+1) != '=') {",
      "",
      "[Added Lines]",
      "1083:     if ((scanner->curptr+1 >= scanner->end) || *(scanner->curptr+1) != '=') {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1149:     ctx->last_error = PJMEDIA_SDP_EINMEDIA;",
      "1153:  on_scanner_error(scanner);",
      "1154:  return;",
      "1155:     }",
      "",
      "[Removed Lines]",
      "1152:     if (*(scanner->curptr+1) != '=') {",
      "",
      "[Added Lines]",
      "1152:     if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1165:     pj_scan_get(scanner, &cs_token, &str);",
      "1166:     med->desc.port = (unsigned short)pj_strtoul(&str);",
      "1167:     if (*scanner->curptr == '/') {",
      "1169:  pj_scan_get_char(scanner);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1167:     if (pj_scan_is_eof(scanner)) {",
      "1168:         on_scanner_error(scanner);",
      "1169:         return;",
      "1170:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1175:     }",
      "1177:     if (pj_scan_get_char(scanner) != ' ') {",
      "1179:     }",
      "",
      "[Removed Lines]",
      "1178:  PJ_THROW(SYNTAX_ERROR);",
      "",
      "[Added Lines]",
      "1182:  on_scanner_error(scanner);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1185:     med->desc.fmt_count = 0;",
      "1187:  pj_str_t fmt;",
      "1189:  pj_scan_get_char(scanner);",
      "",
      "[Removed Lines]",
      "1186:     while (*scanner->curptr == ' ') {",
      "",
      "[Added Lines]",
      "1190:     while (scanner->curptr < scanner->end && *scanner->curptr == ' ') {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1223:     attr = PJ_POOL_ALLOC_T(pool, pjmedia_sdp_attr);",
      "1227:  on_scanner_error(scanner);",
      "1228:  return NULL;",
      "1229:     }",
      "",
      "[Removed Lines]",
      "1226:     if (*(scanner->curptr+1) != '=') {",
      "",
      "[Added Lines]",
      "1230:     if (scanner->curptr+1 >= scanner->end || *(scanner->curptr+1) != '=') {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1242:      pj_scan_get_char(scanner);",
      "1246:      pj_scan_get_until_chr(scanner, \"\\r\\n\", &attr->value);",
      "1247:  } else {",
      "1248:      attr->value.ptr = NULL;",
      "",
      "[Removed Lines]",
      "1245:  if (*scanner->curptr != '\\r' && *scanner->curptr != '\\n') {",
      "",
      "[Added Lines]",
      "1249:  if (!pj_scan_is_eof(scanner) && *scanner->curptr != '\\r' && *scanner->curptr != '\\n') {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f0be61676962eb33eeccac92d6b9147573e86e34",
      "candidate_info": {
        "commit_hash": "f0be61676962eb33eeccac92d6b9147573e86e34",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/f0be61676962eb33eeccac92d6b9147573e86e34",
        "files": [
          "pjmedia/src/pjmedia/rtp.c"
        ],
        "message": "Fix false error 'Invalid RTP packet length (PJMEDIA_RTP_EINLEN)' when decoding empty RTP. (#3283)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/rtp.c||pjmedia/src/pjmedia/rtp.c": [
          "File: pjmedia/src/pjmedia/rtp.c -> pjmedia/src/pjmedia/rtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:     offset = sizeof(pjmedia_rtp_hdr) + ((*hdr)->cc * sizeof(pj_uint32_t));",
          "197:     if ((*hdr)->x) {",
          "198:         if (offset + sizeof (pjmedia_rtp_ext_hdr) > (unsigned)pkt_len)",
          "",
          "[Removed Lines]",
          "192:     if (offset >= pkt_len) {",
          "193:         return PJMEDIA_RTP_EINLEN;",
          "194:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:  dec_hdr->ext_len = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "211:     if (offset >= pkt_len)",
          "212:  return PJMEDIA_RTP_EINLEN;",
          "",
          "[Added Lines]",
          "206:     if (offset > pkt_len) {",
          "207:         return PJMEDIA_RTP_EINLEN;",
          "208:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cba612aa9822d2b6f2cd77563dab18284b36ef90",
      "candidate_info": {
        "commit_hash": "cba612aa9822d2b6f2cd77563dab18284b36ef90",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/cba612aa9822d2b6f2cd77563dab18284b36ef90",
        "files": [
          "pjmedia/src/pjmedia/sdp.c",
          "pjsip-apps/src/samples/sipecho.c",
          "tests/fuzz/seed/fuzz-sdp_seed_corpus.zip"
        ],
        "message": "Fix SDP m= line parser, verify port & port count are numeric (#3382)\n\n* Fix SDP m= line parser, verify port & port count are numeric & add overflow check.\n* Change SDP media parser to parse media type as token (was until space).\n* Handle the case of missing c= line (allowed when port is zero) in sipecho.\n* Check & update pj_strtoul() usages in SDP\n* Add the problematic SDP to fuzzing seed corpus.",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c",
          "pjsip-apps/src/samples/sipecho.c||pjsip-apps/src/samples/sipecho.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/sdp.c||pjmedia/src/pjmedia/sdp.c": [
          "File: pjmedia/src/pjmedia/sdp.c -> pjmedia/src/pjmedia/sdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: {",
          "143:     unsigned i;",
          "144:     unsigned c_pt = 0xFFFF;",
          "146:     PJ_ASSERT_RETURN(count <= PJMEDIA_MAX_SDP_ATTR, NULL);",
          "151:     for (i=0; i<count; ++i) {",
          "152:         if (pj_strcmp(&attr_array[i]->name, name) == 0) {",
          "153:             const pjmedia_sdp_attr *a = attr_array[i];",
          "154:             if (c_fmt) {",
          "157:                     return (pjmedia_sdp_attr*)a;",
          "158:                 }",
          "159:             } else",
          "",
          "[Removed Lines]",
          "148:     if (c_fmt)",
          "149:         c_pt = pj_strtoul(c_fmt);",
          "155:                 unsigned pt = (unsigned) pj_strtoul2(&a->value, NULL, 10);",
          "156:                 if (pt == c_pt) {",
          "",
          "[Added Lines]",
          "145:     unsigned long ul;",
          "149:     if (c_fmt) {",
          "150:         if (pj_strtoul3(c_fmt, &ul, 10) != PJ_SUCCESS)",
          "151:             return NULL;",
          "152:         c_pt = (unsigned)ul;",
          "153:     }",
          "159:                 pj_str_t endptr;",
          "160:                 unsigned pt = (unsigned) pj_strtoul2(&a->value, &endptr, 10);",
          "161:                 if (endptr.ptr != a->value.ptr && pt == c_pt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:     PJ_TRY {",
          "419:         rtcp->port = pj_strtoul(&token);",
          "422:         if (!pj_scan_is_eof(&scanner)) {",
          "",
          "[Removed Lines]",
          "418:         pj_scan_get(&scanner, &cs_token, &token);",
          "",
          "[Added Lines]",
          "423:         pj_scan_get(&scanner, &cs_digit, &token);",
          "425:         if (rtcp->port > 0xFFFF)",
          "426:             PJ_THROW(PJMEDIA_SDP_EINRTCP);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:                          volatile parse_context *ctx)",
          "1010: {",
          "1011:     pj_str_t str;",
          "1013:     ctx->last_error = PJMEDIA_SDP_EINORIGIN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1019:     unsigned long ul;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1029:     pj_scan_get_until_ch(scanner, ' ', &str);",
          "1031:     pj_scan_get_char(scanner);",
          "1034:     pj_scan_get_until_ch(scanner, ' ', &str);",
          "1036:     pj_scan_get_char(scanner);",
          "",
          "[Removed Lines]",
          "1030:     ses->origin.id = pj_strtoul(&str);",
          "1035:     ses->origin.version = pj_strtoul(&str);",
          "",
          "[Added Lines]",
          "1038:     if (pj_strtoul3(&str, &ul, 10) != PJ_SUCCESS){",
          "1039:         on_scanner_error(scanner);",
          "1040:         return;",
          "1041:     }",
          "1042:     ses->origin.id = (pj_uint32_t)ul;",
          "1047:     if (pj_strtoul3(&str, &ul, 10) != PJ_SUCCESS){",
          "1048:         on_scanner_error(scanner);",
          "1049:         return;",
          "1050:     }",
          "1051:     ses->origin.version = (pj_uint32_t)ul;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1055:                        volatile parse_context *ctx)",
          "1056: {",
          "1057:     pj_str_t str;",
          "1059:     ctx->last_error = PJMEDIA_SDP_EINTIME;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:     unsigned long ul;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1071:     pj_scan_get_until_ch(scanner, ' ', &str);",
          "1074:     pj_scan_get_char(scanner);",
          "1077:     pj_scan_get_until_chr(scanner, \" \\t\\r\\n\", &str);",
          "1081:     pj_scan_skip_line(scanner);",
          "",
          "[Removed Lines]",
          "1072:     ses->time.start = pj_strtoul(&str);",
          "1078:     ses->time.stop = pj_strtoul(&str);",
          "",
          "[Added Lines]",
          "1089:     if (pj_strtoul3(&str, &ul, 10) != PJ_SUCCESS){",
          "1090:         on_scanner_error(scanner);",
          "1091:         return;",
          "1092:     }",
          "1093:     ses->time.start = (pj_uint32_t)ul;",
          "1099:     if (pj_strtoul3(&str, &ul, 10) != PJ_SUCCESS){",
          "1100:         on_scanner_error(scanner);",
          "1101:         return;",
          "1102:     }",
          "1103:     ses->time.stop = (pj_uint32_t)ul;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1130:                                  volatile parse_context *ctx)",
          "1131: {",
          "1132:     pj_str_t str;",
          "1134:     ctx->last_error = PJMEDIA_SDP_EINBANDW;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:     unsigned long ul;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1144:     pj_scan_get_until_chr(scanner, \" \\t\\r\\n\", &str);",
          "1148:     pj_scan_skip_line(scanner);",
          "",
          "[Removed Lines]",
          "1145:     bandw->value = pj_strtoul(&str);",
          "",
          "[Added Lines]",
          "1171:     if (pj_strtoul3(&str, &ul, 10) != PJ_SUCCESS){",
          "1172:         on_scanner_error(scanner);",
          "1173:         return;",
          "1174:     }",
          "1175:     bandw->value = (pj_uint32_t)ul;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1152:                         volatile parse_context *ctx)",
          "1153: {",
          "1154:     pj_str_t str;",
          "1156:     ctx->last_error = PJMEDIA_SDP_EINMEDIA;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:     unsigned long num;",
          "1186:     pj_status_t status;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1165:     pj_scan_advance_n(scanner, 2, SKIP_WS);",
          "1172:     pj_scan_get(scanner, &cs_token, &str);",
          "1175:         on_scanner_error(scanner);",
          "1176:         return;",
          "1177:     }",
          "1178:     if (*scanner->curptr == '/') {",
          "1180:         pj_scan_get_char(scanner);",
          "1181:         pj_scan_get(scanner, &cs_token, &str);",
          "1184:     } else {",
          "1185:         med->desc.port_count = 0;",
          "1186:     }",
          "",
          "[Removed Lines]",
          "1168:     pj_scan_get_until_ch(scanner, ' ', &med->desc.media);",
          "1169:     pj_scan_get_char(scanner);",
          "1173:     med->desc.port = (unsigned short)pj_strtoul(&str);",
          "1174:     if (pj_scan_is_eof(scanner)) {",
          "1182:         med->desc.port_count = pj_strtoul(&str);",
          "",
          "[Added Lines]",
          "1200:     pj_scan_get(scanner, &cs_token, &med->desc.media);",
          "1202:     if (pj_scan_get_char(scanner) != ' ') {",
          "1203:         on_scanner_error(scanner);",
          "1204:     }",
          "1208:     status = pj_strtoul3(&str, &num, 10);",
          "1209:     if (status != PJ_SUCCESS || pj_scan_is_eof(scanner) || num > 0xFFFF) {",
          "1213:     med->desc.port = (unsigned short)num;",
          "1218:         status = pj_strtoul3(&str, &num, 10);",
          "1219:         if (status != PJ_SUCCESS) {",
          "1220:             on_scanner_error(scanner);",
          "1221:             return;",
          "1222:         }",
          "1223:         med->desc.port_count = (unsigned)num;",
          "",
          "---------------"
        ],
        "pjsip-apps/src/samples/sipecho.c||pjsip-apps/src/samples/sipecho.c": [
          "File: pjsip-apps/src/samples/sipecho.c -> pjsip-apps/src/samples/sipecho.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:         PJ_LOG(3,(THIS_FILE, \"  Media %d, %.*s: %s <--> %.*s:%d\",",
          "373:                   mi, (int)m->desc.media.slen, m->desc.media.ptr,",
          "374:                   (our_dir ? our_dir : \"sendrecv\"),",
          "376:     }",
          "378:     return answer;",
          "",
          "[Removed Lines]",
          "375:                   (int)c->addr.slen, c->addr.ptr, m->desc.port));",
          "",
          "[Added Lines]",
          "375:                   (c? (int)c->addr.slen : 6), (c? c->addr.ptr : \"(none)\"),",
          "376:                   m->desc.port));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae580f351f4284ddf4099bef1502d1f0bdead97d",
      "candidate_info": {
        "commit_hash": "ae580f351f4284ddf4099bef1502d1f0bdead97d",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/ae580f351f4284ddf4099bef1502d1f0bdead97d",
        "files": [
          "pjlib-util/src/pjlib-util/scanner.c",
          "pjlib/src/pj/ip_helper_generic.c",
          "pjlib/src/pjlib-test/ioq_stress_test.c",
          "pjlib/src/pjlib-test/timer.c",
          "pjmedia/src/pjmedia-audiodev/coreaudio_dev.m",
          "pjmedia/src/pjmedia-codec/vid_toolbox.m",
          "pjmedia/src/test/mips_test.c",
          "pjnath/src/pjnath-test/concur_test.c"
        ],
        "message": "Misc (re #3087): Suppressed build warning on Mac",
        "before_after_code_files": [
          "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c",
          "pjlib/src/pj/ip_helper_generic.c||pjlib/src/pj/ip_helper_generic.c",
          "pjlib/src/pjlib-test/ioq_stress_test.c||pjlib/src/pjlib-test/ioq_stress_test.c",
          "pjlib/src/pjlib-test/timer.c||pjlib/src/pjlib-test/timer.c",
          "pjmedia/src/pjmedia-audiodev/coreaudio_dev.m||pjmedia/src/pjmedia-audiodev/coreaudio_dev.m",
          "pjmedia/src/pjmedia-codec/vid_toolbox.m||pjmedia/src/pjmedia-codec/vid_toolbox.m",
          "pjmedia/src/test/mips_test.c||pjmedia/src/test/mips_test.c",
          "pjnath/src/pjnath-test/concur_test.c||pjnath/src/pjnath-test/concur_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c"
          ],
          "candidate": [
            "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c"
          ]
        }
      },
      "candidate_diff": {
        "pjlib-util/src/pjlib-util/scanner.c||pjlib-util/src/pjlib-util/scanner.c": [
          "File: pjlib-util/src/pjlib-util/scanner.c -> pjlib-util/src/pjlib-util/scanner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     pj_assert(pj_cis_match(spec,'%')==0);",
          "308:  pj_scan_syntax_err(scanner);",
          "309:  return;",
          "310:     }",
          "",
          "[Removed Lines]",
          "307:     if (pj_scan_is_eof(scanner) || !pj_cis_match(spec, *s) && *s != '%') {",
          "",
          "[Added Lines]",
          "307:     if (pj_scan_is_eof(scanner) || (!pj_cis_match(spec, *s) && *s != '%')) {",
          "",
          "---------------"
        ],
        "pjlib/src/pj/ip_helper_generic.c||pjlib/src/pj/ip_helper_generic.c": [
          "File: pjlib/src/pj/ip_helper_generic.c -> pjlib/src/pj/ip_helper_generic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "472:     return PJ_SUCCESS;",
          "473: }",
          "475: static pj_status_t get_ipv6_deprecated(unsigned *count, pj_sockaddr addr[])",
          "476: {",
          "478:     struct {",
          "479:         struct nlmsghdr        nlmsg_info;",
          "480:         struct ifaddrmsg    ifaddrmsg_info;",
          "",
          "[Removed Lines]",
          "477: #if defined(PJ_LINUX) && PJ_LINUX!=0",
          "",
          "[Added Lines]",
          "475: #if defined(PJ_LINUX) && PJ_LINUX!=0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:     return PJ_SUCCESS;",
          "571: }",
          "",
          "[Removed Lines]",
          "567: #else",
          "569:     return PJ_ENOTSUP;",
          "570: #endif",
          "",
          "[Added Lines]",
          "568: #endif",
          "",
          "---------------"
        ],
        "pjlib/src/pjlib-test/ioq_stress_test.c||pjlib/src/pjlib-test/ioq_stress_test.c": [
          "File: pjlib/src/pjlib-test/ioq_stress_test.c -> pjlib/src/pjlib-test/ioq_stress_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:  }",
          "480:     }",
          "483:     return 0;",
          "484: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     TRACE((THIS_FILE, \"thread exiting, n_events=%d\", n_events));",
          "",
          "---------------"
        ],
        "pjlib/src/pjlib-test/timer.c||pjlib/src/pjlib-test/timer.c": [
          "File: pjlib/src/pjlib-test/timer.c -> pjlib/src/pjlib-test/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     count = MIN_COUNT;",
          "90:     for (i=0; i<LOOP; ++i) {",
          "91:  int early = 0;",
          "93:  int cancelled=0;",
          "94:  int rc;",
          "95:  pj_timestamp t1, t2, t_sched, t_cancel, t_poll;",
          "",
          "[Removed Lines]",
          "92:  int done=0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: #endif",
          "156:      pj_get_timestamp(&t2);",
          "157:      if (rc > 0) {",
          "159:   t_poll.u32.lo += (t2.u32.lo - t1.u32.lo);",
          "160:      }",
          "",
          "[Removed Lines]",
          "158:   done += rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-audiodev/coreaudio_dev.m||pjmedia/src/pjmedia-audiodev/coreaudio_dev.m": [
          "File: pjmedia/src/pjmedia-audiodev/coreaudio_dev.m -> pjmedia/src/pjmedia-audiodev/coreaudio_dev.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1475:     if (dir & PJMEDIA_DIR_PLAYBACK) {",
          "1476:  AURenderCallbackStruct output_cb;",
          "1477:  AudioStreamBasicDescription streamFormat = strm->streamFormat;",
          "1478:  BOOL isMacCatalystApp = false;",
          "1480: #ifdef __IPHONE_13_0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478: #if !COREAUDIO_MAC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1487:             isMacCatalystApp = [NSProcessInfo processInfo].isMacCatalystApp;",
          "1488:  }",
          "1489: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1490: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2235:     }",
          "2236:     pj_mutex_unlock(stream->cf->mutex);",
          "2239:     if (should_deactivate) {",
          "2240:         if ([stream->sess",
          "2241:              respondsToSelector:@selector(setActive:withOptions:error:)])",
          "2242:         {",
          "",
          "[Removed Lines]",
          "2238: #if !COREAUDIO_MAC && SETUP_AV_AUDIO_SESSION",
          "",
          "[Added Lines]",
          "2241: #if !COREAUDIO_MAC && SETUP_AV_AUDIO_SESSION",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2249:                      \"audio session\"));",
          "2250:             }",
          "2251:         }",
          "2253: #endif",
          "2255:     stream->quit_flag = 1;",
          "2256:     stream->play_thread_initialized = 0;",
          "",
          "[Removed Lines]",
          "2252:     }",
          "",
          "[Added Lines]",
          "2255:     }",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia-codec/vid_toolbox.m||pjmedia/src/pjmedia-codec/vid_toolbox.m": [
          "File: pjmedia/src/pjmedia-codec/vid_toolbox.m -> pjmedia/src/pjmedia-codec/vid_toolbox.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "674:      for (i = h264_fmtp.sprop_param_sets_len-code_size; i >= code_size;",
          "675:           i--)",
          "676:      {",
          "678:          for (j = 0; j < code_size; j++) {",
          "679:              if (h264_fmtp.sprop_param_sets[i+j] != start_code[j]) {",
          "681:                  break;",
          "682:              }",
          "683:          }",
          "",
          "[Removed Lines]",
          "677:          pj_bool_t found = PJ_TRUE;",
          "680:                  found = PJ_FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pjmedia/src/test/mips_test.c||pjmedia/src/test/mips_test.c": [
          "File: pjmedia/src/test/mips_test.c -> pjmedia/src/test/mips_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:  opt |= PJMEDIA_WSOLA_NO_PLC;",
          "1077:     status = pjmedia_wsola_create(pool, clock_rate, samples_per_frame,",
          "1079:     if (status != PJ_SUCCESS)",
          "1080:  return NULL;",
          "",
          "[Removed Lines]",
          "1078:       channel_count, 0, &wp->wsola);",
          "",
          "[Added Lines]",
          "1078:       channel_count, opt, &wp->wsola);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1249:  opt |= PJMEDIA_WSOLA_NO_DISCARD;",
          "1251:     status = pjmedia_wsola_create(pool, clock_rate, samples_per_frame,",
          "1253:     if (status != PJ_SUCCESS)",
          "1254:  return NULL;",
          "",
          "[Removed Lines]",
          "1252:       channel_count, 0, &wp->wsola);",
          "",
          "[Added Lines]",
          "1252:       channel_count, opt, &wp->wsola);",
          "",
          "---------------"
        ],
        "pjnath/src/pjnath-test/concur_test.c||pjnath/src/pjnath-test/concur_test.c": [
          "File: pjnath/src/pjnath-test/concur_test.c -> pjnath/src/pjnath-test/concur_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: int concur_test(void)",
          "366: {",
          "371:     return 0;",
          "372: }",
          "",
          "[Removed Lines]",
          "367:     int rc = 0;",
          "369:     rc += stun_destroy_test();",
          "",
          "[Added Lines]",
          "367:     stun_destroy_test();",
          "",
          "---------------"
        ]
      }
    }
  ]
}