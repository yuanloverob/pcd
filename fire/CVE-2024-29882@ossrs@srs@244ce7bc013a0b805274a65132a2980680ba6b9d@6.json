{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d50fb1563a276bf99e25f766c580aae187842d07",
      "candidate_info": {
        "commit_hash": "d50fb1563a276bf99e25f766c580aae187842d07",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/d50fb1563a276bf99e25f766c580aae187842d07",
        "files": [
          "Dockerfile",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Dockerfile: Consistently use proper ENV syntax using equal sign. v6.0.140 (#4116)\n\nThis not only silences a deprecation warning by docker build, but also\nmakes it consistent as the other ENV statement already uses the new\nsyntax.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    139",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    140",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3917422a07f780461aac87cd04d5cabe490d94eb",
      "candidate_info": {
        "commit_hash": "3917422a07f780461aac87cd04d5cabe490d94eb",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/3917422a07f780461aac87cd04d5cabe490d94eb",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "HTTP-FLV: Crash when multiple viewers. v6.0.148 (#4144)\n\nI did some preliminary code inspection. The two playback endpoints share\nthe same `SrsLiveStream` instance. After the first one disconnects,\n`alive_` is set to false.\n```\n  alive_ = true;\n  err = do_serve_http(w, r);\n  alive_ = false;\n```\n\nIn the `SrsHttpStreamServer::http_unmount(SrsRequest* r)` function,\n`stream->alive()` is already false, so `mux.unhandle` will free the\n`SrsLiveStream`. This causes the other connection coroutine to return to\nits execution environment after the `SrsLiveStream` instance has already\nbeen freed.\n```\n    // Wait for cache and stream to stop.\n    int i = 0;\n    for (; i < 1024; i++) {\n        if (!cache->alive() && !stream->alive()) {\n            break;\n        }\n        srs_usleep(100 * SRS_UTIME_MILLISECONDS);\n    }\n\n    // Unmount the HTTP handler, which will free the entry. Note that we must free it after cache and\n    // stream stopped for it uses it.\n    mux.unhandle(entry->mount, stream.get());\n```\n\n`alive_` was changed from a `bool` to an `int` to ensure that\n`mux.unhandle` is only executed after each connection's `serve_http` has\nexited.\n\n---------\n\nCo-authored-by: liumengte <liumengte@visionular.com>\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp",
          "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:     cache = c;",
          "584:     req = r->copy()->as_http();",
          "585:     security_ = new SrsSecurity();",
          "587: }",
          "589: SrsLiveStream::~SrsLiveStream()",
          "",
          "[Removed Lines]",
          "586:     alive_ = false;",
          "",
          "[Added Lines]",
          "586:     alive_viewers_ = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:         return srs_error_wrap(err, \"http hook\");",
          "635:     }",
          "638:     err = do_serve_http(w, r);",
          "641:     http_hooks_on_stop(r);",
          "",
          "[Removed Lines]",
          "637:     alive_ = true;",
          "639:     alive_ = false;",
          "",
          "[Added Lines]",
          "637:     alive_viewers_++;",
          "639:     alive_viewers_--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646: bool SrsLiveStream::alive()",
          "647: {",
          "649: }",
          "651: srs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "[Removed Lines]",
          "648:     return alive_;",
          "",
          "[Added Lines]",
          "648:     return alive_viewers_ > 0;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     SrsRequest* req;",
          "183:     SrsBufferCache* cache;",
          "184:     SrsSecurity* security_;",
          "186: public:",
          "187:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "188:     virtual ~SrsLiveStream();",
          "",
          "[Removed Lines]",
          "185:     bool alive_;",
          "",
          "[Added Lines]",
          "188:     int alive_viewers_;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp": [
          "File: trunk/src/app/srs_app_source.cpp -> trunk/src/app/srs_app_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1886:     mix_correct = false;",
          "1887:     mix_queue = new SrsMixQueue();",
          "1890:     stream_die_at_ = 0;",
          "1891:     publisher_idle_at_ = 0;",
          "",
          "[Removed Lines]",
          "1889:     _can_publish = true;",
          "",
          "[Added Lines]",
          "1889:     can_publish_ = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1952: bool SrsLiveSource::stream_is_dead()",
          "1953: {",
          "1956:         return false;",
          "1957:     }",
          "",
          "[Removed Lines]",
          "1955:     if (!_can_publish || !publish_edge->can_publish()) {",
          "",
          "[Added Lines]",
          "1955:     if (!can_publish_ || !publish_edge->can_publish()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2152: bool SrsLiveSource::inactive()",
          "2153: {",
          "2155: }",
          "2157: void SrsLiveSource::update_auth(SrsRequest* r)",
          "",
          "[Removed Lines]",
          "2154:     return _can_publish;",
          "",
          "[Added Lines]",
          "2154:     return can_publish_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2167:         return publish_edge->can_publish();",
          "2168:     }",
          "2171: }",
          "2173: srs_error_t SrsLiveSource::on_meta_data(SrsCommonMessage* msg, SrsOnMetaDataPacket* metadata)",
          "",
          "[Removed Lines]",
          "2170:     return _can_publish;",
          "",
          "[Added Lines]",
          "2170:     return can_publish_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2567:     srs_assert(req);",
          "",
          "[Removed Lines]",
          "2569:     _can_publish = false;",
          "",
          "[Added Lines]",
          "2569:     can_publish_ = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2614: void SrsLiveSource::on_unpublish()",
          "2615: {",
          "2618:         return;",
          "2619:     }",
          "",
          "[Removed Lines]",
          "2617:     if (_can_publish) {",
          "",
          "[Added Lines]",
          "2617:     if (can_publish_) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2655:         stream_die_at_ = srs_get_system_time();",
          "2656:     }",
          "2659: }",
          "2661: srs_error_t SrsLiveSource::create_consumer(SrsLiveConsumer*& consumer)",
          "",
          "[Removed Lines]",
          "2658:     _can_publish = true;",
          "",
          "[Added Lines]",
          "2661:     can_publish_ = true;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2735:         play_edge->on_all_client_stop();",
          "2739:             stream_die_at_ = srs_get_system_time();",
          "2740:         }",
          "",
          "[Removed Lines]",
          "2738:         if (_can_publish) {",
          "",
          "[Added Lines]",
          "2741:         if (can_publish_) {",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_source.hpp||trunk/src/app/srs_app_source.hpp": [
          "File: trunk/src/app/srs_app_source.hpp -> trunk/src/app/srs_app_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:     SrsRtmpFormat* format_;",
          "530: private:",
          "534:     srs_utime_t stream_die_at_;",
          "",
          "[Removed Lines]",
          "532:     bool _can_publish;",
          "",
          "[Added Lines]",
          "532:     bool can_publish_;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    147",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    148",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc6db250fb9cbb3c7ceb620cb0237bfeee2453de",
      "candidate_info": {
        "commit_hash": "cc6db250fb9cbb3c7ceb620cb0237bfeee2453de",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/cc6db250fb9cbb3c7ceb620cb0237bfeee2453de",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp",
          "trunk/src/main/srs_main_mp4_parser.cpp"
        ],
        "message": "Build: Fix srs_mp4_parser compiling error. v6.0.150 v7.0.9 (#4156)\n\n`SrsAutoFree` moved to `srs_core_deprecated.hpp`.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp",
          "trunk/src/main/srs_main_mp4_parser.cpp||trunk/src/main/srs_main_mp4_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    149",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    150",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    8",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    9",
          "",
          "---------------"
        ],
        "trunk/src/main/srs_main_mp4_parser.cpp||trunk/src/main/srs_main_mp4_parser.cpp": [
          "File: trunk/src/main/srs_main_mp4_parser.cpp -> trunk/src/main/srs_main_mp4_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <srs_core_autofree.hpp>",
          "15: #include <srs_app_config.hpp>",
          "16: #include <srs_protocol_kbps.hpp>",
          "18: #include <stdio.h>",
          "19: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include <srs_core_deprecated.hpp>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65ad907fe4ce136ac653b098e2082d03db8b6abc",
      "candidate_info": {
        "commit_hash": "65ad907fe4ce136ac653b098e2082d03db8b6abc",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/65ad907fe4ce136ac653b098e2082d03db8b6abc",
        "files": [
          "trunk/conf/full.conf",
          "trunk/conf/gb28181-without-sip.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_gb28181.cpp",
          "trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "GB28181: Support external SIP server. v6.0.144 (#4101)\n\nFor #3369 to support an external powerful SIP server, do not use the\nembedded SIP server of SRS.\nFor more information, detailed steps, system architecture, and\nbackground explanation, please see\nhttps://ossrs.net/lts/zh-cn/docs/v6/doc/gb28181#external-sip\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/conf/gb28181-without-sip.conf||trunk/conf/gb28181-without-sip.conf",
          "trunk/src/app/srs_app_gb28181.cpp||trunk/src/app/srs_app_gb28181.cpp",
          "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "676:     listen 9000;",
          "677:     # SIP server for GB28181. Please note that this is only a demonstrated SIP server, please never use it in your",
          "678:     # online production environment. Instead please use [jsip](https://github.com/usnistgov/jsip) and there is a demo",
          "680:     sip {",
          "682:         # Default: on",
          "683:         enabled on;",
          "684:         # The SIP listen port, for TCP protocol.",
          "",
          "[Removed Lines]",
          "679:     # [srs-sip](https://github.com/ossrs/srs-sip) also base on it.",
          "681:         # Whether enable embedded SIP server.",
          "",
          "[Added Lines]",
          "679:     # [srs-sip](https://github.com/ossrs/srs-sip) also base on it, for more information please see project",
          "680:     # [GB: External SIP](https://ossrs.net/lts/zh-cn/docs/v6/doc/gb28181#external-sip).",
          "682:         # Whether enable embedded SIP server. Please disable it if you want to use your own SIP server, see",
          "683:         # [GB: External SIP](https://ossrs.net/lts/zh-cn/docs/v6/doc/gb28181#external-sip).",
          "",
          "---------------"
        ],
        "trunk/conf/gb28181-without-sip.conf||trunk/conf/gb28181-without-sip.conf": [
          "File: trunk/conf/gb28181-without-sip.conf -> trunk/conf/gb28181-without-sip.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: listen 1935;",
          "3: max_connections 1000;",
          "4: daemon off;",
          "5: srs_log_tank console;",
          "7: stream_caster {",
          "8:     enabled on;",
          "9:     caster gb28181;",
          "10:     output rtmp://127.0.0.1/live/[stream];",
          "11:     listen 9000;",
          "12:     sip {",
          "13:         enabled off;",
          "14:     }",
          "15: }",
          "17: http_server {",
          "18:     enabled on;",
          "19:     listen 8080;",
          "20:     dir ./objs/nginx/html;",
          "21: }",
          "23: http_api {",
          "24:     enabled on;",
          "25:     listen 1985;",
          "26: }",
          "27: stats {",
          "28:     network 0;",
          "29: }",
          "30: rtc_server {",
          "31:     enabled on;",
          "32:     listen 8000; # UDP port",
          "33:     # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#config-candidate",
          "34:     candidate $CANDIDATE;",
          "35: }",
          "37: vhost __defaultVhost__ {",
          "38:     rtc {",
          "39:         enabled on;",
          "40:         # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtmp-to-rtc",
          "41:         rtmp_to_rtc on;",
          "42:         # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtc-to-rtmp",
          "43:         rtc_to_rtmp on;",
          "44:     }",
          "45:     http_remux {",
          "46:         enabled on;",
          "47:         mount [vhost]/[app]/[stream].flv;",
          "48:     }",
          "49:     hls {",
          "50:         enabled on;",
          "51:     }",
          "52: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.cpp||trunk/src/app/srs_app_gb28181.cpp": [
          "File: trunk/src/app/srs_app_gb28181.cpp -> trunk/src/app/srs_app_gb28181.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <srs_app_pithy_print.hpp>",
          "23: #include <srs_app_rtmp_conn.hpp>",
          "24: #include <srs_protocol_raw_avc.hpp>",
          "26: #include <sstream>",
          "27: using namespace std;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <srs_app_server.hpp>",
          "26: #include <srs_protocol_json.hpp>",
          "27: #include <srs_app_http_api.hpp>",
          "28: #include <srs_app_statistic.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:     bool sip_enabled = _srs_config->get_stream_caster_sip_enable(conf);",
          "422:     if (!sip_enabled) {",
          "424:     }",
          "429:     return err;",
          "430: }",
          "",
          "[Removed Lines]",
          "423:         return srs_error_new(ERROR_GB_CONFIG, \"GB SIP is required\");",
          "426:     int port = _srs_config->get_stream_caster_sip_listen(conf);",
          "427:     sip_listener_->set_endpoint(ip, port)->set_label(\"SIP-TCP\");",
          "",
          "[Added Lines]",
          "427:         srs_warn(\"GB SIP is disabled.\");",
          "428:     } else {",
          "429:         int port = _srs_config->get_stream_caster_sip_listen(conf);",
          "430:         sip_listener_->set_endpoint(ip, port)->set_label(\"SIP-TCP\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:         return srs_error_wrap(err, \"listen\");",
          "442:     }",
          "444:     return err;",
          "445: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:     if ((err = listen_api()) != srs_success) {",
          "449:         return srs_error_wrap(err, \"listen api\");",
          "450:     }",
          "452:     return err;",
          "453: }",
          "455: srs_error_t SrsGbListener::listen_api()",
          "456: {",
          "457:     srs_error_t err = srs_success;",
          "460:     ISrsHttpServeMux* http_api_mux = _srs_hybrid->srs()->instance()->api_server();",
          "462:     if ((err = http_api_mux->handle(\"/gb/v1/publish/\", new SrsGoApiGbPublish(conf_))) != srs_success) {",
          "463:         return srs_error_wrap(err, \"handle publish\");",
          "464:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:     return register_->device_id();",
          "550: }",
          "552: void SrsGbSipTcpConn::set_cid(const SrsContextId& cid)",
          "553: {",
          "554:     if (owner_cid_) owner_cid_->set_cid(cid);",
          "557:     cid_ = cid;",
          "558: }",
          "",
          "[Removed Lines]",
          "555:     receiver_->set_cid(cid);",
          "556:     sender_->set_cid(cid);",
          "",
          "[Added Lines]",
          "574: void SrsGbSipTcpConn::set_device_id(const std::string &id)",
          "575: {",
          "576:     register_->from_address_user_ = id;",
          "577: }",
          "582:     if (receiver_) receiver_->set_cid(cid);",
          "583:     if (sender_) sender_->set_cid(cid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2681:     }",
          "2682: }",
          "2684: SrsResourceManager* _srs_gb_manager = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2711: SrsGoApiGbPublish::SrsGoApiGbPublish(SrsConfDirective* conf)",
          "2712: {",
          "2713:     conf_ = conf->copy();",
          "2714: }",
          "2716: SrsGoApiGbPublish::~SrsGoApiGbPublish()",
          "2717: {",
          "2718:     srs_freep(conf_);",
          "2719: }",
          "2721: srs_error_t SrsGoApiGbPublish::serve_http(ISrsHttpResponseWriter *w, ISrsHttpMessage *r)",
          "2722: {",
          "2723:     srs_error_t err = srs_success;",
          "2725:     SrsUniquePtr<SrsJsonObject> res(SrsJsonAny::object());",
          "2727:     if ((err = do_serve_http(w, r, res.get())) != srs_success) {",
          "2728:         srs_warn(\"GB error %s\", srs_error_desc(err).c_str());",
          "2729:         res->set(\"code\", SrsJsonAny::integer(srs_error_code(err)));",
          "2730:         res->set(\"desc\", SrsJsonAny::str(srs_error_code_str(err).c_str()));",
          "2731:         srs_freep(err);",
          "2732:         return srs_api_response(w, r, res->dumps());",
          "2733:     }",
          "2735:     return srs_api_response(w, r, res->dumps());",
          "2736: }",
          "2738: srs_error_t SrsGoApiGbPublish::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r, SrsJsonObject* res)",
          "2739: {",
          "2740:     srs_error_t err = srs_success;",
          "2743:     w->header()->set(\"Connection\", \"Close\");",
          "2746:     SrsSharedPtr<SrsJsonObject> req;",
          "2747:     if (true) {",
          "2748:         string req_json;",
          "2749:         if ((err = r->body_read_all(req_json)) != srs_success) {",
          "2750:             return srs_error_wrap(err, \"read body\");",
          "2751:         }",
          "2753:         SrsJsonAny* json = SrsJsonAny::loads(req_json);",
          "2754:         if (!json || !json->is_object()) {",
          "2755:             srs_freep(json);",
          "2756:             return srs_error_new(ERROR_HTTP_DATA_INVALID, \"invalid body %s\", req_json.c_str());",
          "2757:         }",
          "2759:         req = SrsSharedPtr<SrsJsonObject>(json->to_object());",
          "2760:     }",
          "2763:     SrsJsonAny* prop = NULL;",
          "2764:     if ((prop = req->ensure_property_string(\"id\")) == NULL) {",
          "2765:         return srs_error_new(ERROR_HTTP_DATA_INVALID, \"id required\");",
          "2766:     }",
          "2767:     string id = prop->to_str();",
          "2769:     if ((prop = req->ensure_property_string(\"ssrc\")) == NULL) {",
          "2770:         return srs_error_new(ERROR_HTTP_DATA_INVALID, \"ssrc required\");",
          "2771:     }",
          "2772:     uint64_t ssrc = atoi(prop->to_str().c_str());",
          "2774:     if ((err = bind_session(id, ssrc)) != srs_success) {",
          "2775:         return srs_error_wrap(err, \"bind session\");",
          "2776:     }",
          "2778:     res->set(\"code\", SrsJsonAny::integer(ERROR_SUCCESS));",
          "2779:     int port = _srs_config->get_stream_caster_listen(conf_);",
          "2780:     res->set(\"port\", SrsJsonAny::integer(port));",
          "2781:     res->set(\"is_tcp\", SrsJsonAny::boolean(true)); // only tcp supported",
          "2783:     srs_trace(\"GB publish id: %s, ssrc=%lu\", id.c_str(), ssrc);",
          "2785:     return err;",
          "2786: }",
          "2788: srs_error_t SrsGoApiGbPublish::bind_session(std::string id, uint64_t ssrc)",
          "2789: {",
          "2790:     srs_error_t err = srs_success;",
          "2792:     SrsSharedResource<SrsGbSession>* session = NULL;",
          "2793:     session = dynamic_cast<SrsSharedResource<SrsGbSession>*>(_srs_gb_manager->find_by_id(id));",
          "2794:     if (session) {",
          "2795:         return srs_error_new(ERROR_SYSTEM_STREAM_BUSY, \"stream already exists\");",
          "2796:     }",
          "2798:     session = dynamic_cast<SrsSharedResource<SrsGbSession>*>(_srs_gb_manager->find_by_fast_id(ssrc));",
          "2799:     if (session) {",
          "2800:         return srs_error_new(ERROR_SYSTEM_STREAM_BUSY, \"ssrc already exists\");",
          "2801:     }",
          "2804:     SrsGbSession* raw_session = new SrsGbSession();",
          "2805:     raw_session->setup(conf_);",
          "2807:     session = new SrsSharedResource<SrsGbSession>(raw_session);",
          "2808:     _srs_gb_manager->add_with_id(id, session);",
          "2809:     _srs_gb_manager->add_with_fast_id(ssrc, session);",
          "2811:     SrsExecutorCoroutine* executor = new SrsExecutorCoroutine(_srs_gb_manager, session, raw_session, raw_session);",
          "2812:     raw_session->setup_owner(session, executor, executor);",
          "2813:     raw_session->sip_transport()->set_device_id(id);",
          "2815:     if ((err = executor->start()) != srs_success) {",
          "2816:         srs_freep(executor);",
          "2817:         return srs_error_wrap(err, \"gb session\");",
          "2818:     }",
          "2820:     return err;",
          "2821: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp": [
          "File: trunk/src/app/srs_app_gb28181.hpp -> trunk/src/app/srs_app_gb28181.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: };",
          "90: std::string srs_gb_sip_state(SrsGbSipState state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: class SrsGoApiGbPublish : public ISrsHttpHandler",
          "107: {",
          "108: private:",
          "109:     SrsConfDirective* conf_;",
          "110: public:",
          "111:     SrsGoApiGbPublish(SrsConfDirective* conf);",
          "112:     virtual ~SrsGoApiGbPublish();",
          "113: public:",
          "114:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "115: private:",
          "116:     virtual srs_error_t do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r, SrsJsonObject* res);",
          "117:     srs_error_t bind_session(std::string stream, uint64_t ssrc);",
          "118: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192: public:",
          "193:     virtual srs_error_t on_tcp_client(ISrsListener* listener, srs_netfd_t stfd);",
          "194: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: private:",
          "223:     srs_error_t listen_api();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234: public:",
          "236:     std::string device_id();",
          "238:     virtual void set_cid(const SrsContextId& cid);",
          "239: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     void set_device_id(const std::string& id);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    143",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    144",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1656391c6792baa98e2cd005d1338a0981fc75ed",
      "candidate_info": {
        "commit_hash": "1656391c6792baa98e2cd005d1338a0981fc75ed",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/1656391c6792baa98e2cd005d1338a0981fc75ed",
        "files": [
          "trunk/conf/full.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_codec.cpp",
          "trunk/src/kernel/srs_kernel_codec.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_config.cpp"
        ],
        "message": "RTC: Support dropping h.264 SEI from NALUs. v5.0.213 v6.0.125 (#4057)\n\ntry to fix #4052.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_codec.cpp||trunk/src/kernel/srs_kernel_codec.cpp",
          "trunk/src/kernel/srs_kernel_codec.hpp||trunk/src/kernel/srs_kernel_codec.hpp",
          "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
          "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
            "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:         # Overwrite by env SRS_VHOST_RTC_KEEP_BFRAME for all vhosts.",
          "563:         # default: off",
          "564:         keep_bframe off;",
          "565:         # The transcode audio bitrate, for RTMP to RTC.",
          "566:         # Overwrite by env SRS_VHOST_RTC_OPUS_BITRATE for all vhosts.",
          "567:         # [8000, 320000]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:         # Whether to keep the h.264 SEI type NALU packet.",
          "566:         # DJI drone M30T will send many SEI type NALU packet, while iOS hardware decoder (Video Toolbox)",
          "567:         # dislike to feed it so many SEI NALU between NonIDR and IDR NALU packets.",
          "568:         # @see https://github.com/ossrs/srs/issues/4052",
          "569:         # Overwrite by env SRS_VHOST_RTC_KEEP_AVC_NALU_SEI for all vhosts.",
          "570:         # Default: on",
          "571:         keep_avc_nalu_sei on;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2726:                         && m != \"bframe\" && m != \"aac\" && m != \"stun_timeout\" && m != \"stun_strict_check\"",
          "2727:                         && m != \"dtls_role\" && m != \"dtls_version\" && m != \"drop_for_pt\" && m != \"rtc_to_rtmp\"",
          "2728:                         && m != \"pli_for_rtmp\" && m != \"rtmp_to_rtc\" && m != \"keep_bframe\" && m != \"opus_bitrate\"",
          "2730:                         return srs_error_new(ERROR_SYSTEM_CONFIG_INVALID, \"illegal vhost.rtc.%s of %s\", m.c_str(), vhost->arg0().c_str());",
          "2731:                     }",
          "2732:                 }",
          "",
          "[Removed Lines]",
          "2729:                         && m != \"aac_bitrate\") {",
          "",
          "[Added Lines]",
          "2729:                         && m != \"aac_bitrate\" && m != \"keep_avc_nalu_sei\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4474:     return SRS_CONF_PERFER_FALSE(conf->arg0());",
          "4475: }",
          "4477: bool SrsConfig::get_rtc_from_rtmp(string vhost)",
          "4478: {",
          "4479:     SRS_OVERWRITE_BY_ENV_BOOL(\"srs.vhost.rtc.rtmp_to_rtc\"); // SRS_VHOST_RTC_RTMP_TO_RTC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4477: bool SrsConfig::get_rtc_keep_avc_nalu_sei(std::string vhost)",
          "4478: {",
          "4479:     SRS_OVERWRITE_BY_ENV_BOOL2(\"srs.vhost.rtc.keep_avc_nalu_sei\"); // SRS_VHOST_RTC_KEEP_AVC_NALU_SEI",
          "4481:     static bool DEFAULT = true;",
          "4483:     SrsConfDirective* conf = get_rtc(vhost);",
          "4485:     if (!conf) {",
          "4486:         return DEFAULT;",
          "4487:     }",
          "4489:     conf = conf->get(\"keep_avc_nalu_sei\");",
          "4490:     if (!conf || conf->arg0().empty()) {",
          "4491:         return DEFAULT;",
          "4492:     }",
          "4494:     return SRS_CONF_PERFER_TRUE(conf->arg0());",
          "4495: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:     SrsConfDirective* get_rtc(std::string vhost);",
          "534:     bool get_rtc_enabled(std::string vhost);",
          "535:     bool get_rtc_keep_bframe(std::string vhost);",
          "536:     bool get_rtc_from_rtmp(std::string vhost);",
          "537:     srs_utime_t get_rtc_stun_timeout(std::string vhost);",
          "538:     bool get_rtc_stun_strict_check(std::string vhost);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     bool get_rtc_keep_avc_nalu_sei(std::string vhost);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp": [
          "File: trunk/src/app/srs_app_rtc_source.cpp -> trunk/src/app/srs_app_rtc_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:     codec_ = new SrsAudioTranscoder();",
          "740:     latest_codec_ = SrsAudioCodecIdForbidden;",
          "741:     keep_bframe = false;",
          "742:     merge_nalus = false;",
          "743:     meta = new SrsMetaCache();",
          "744:     audio_sequence = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     keep_avc_nalu_sei = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:     format->try_annexb_first = _srs_config->try_annexb_first(r->vhost);",
          "773:     keep_bframe = _srs_config->get_rtc_keep_bframe(req->vhost);",
          "774:     merge_nalus = _srs_config->get_rtc_server_merge_nalus();",
          "777:     return err;",
          "778: }",
          "",
          "[Removed Lines]",
          "775:     srs_trace(\"RTC bridge from RTMP, keep_bframe=%d, merge_nalus=%d\", keep_bframe, merge_nalus);",
          "",
          "[Added Lines]",
          "775:     keep_avc_nalu_sei = _srs_config->get_rtc_keep_avc_nalu_sei(req->vhost);",
          "777:     srs_trace(\"RTC bridge from RTMP, keep_bframe=%d, keep_avc_nalu_sei=%d, merge_nalus=%d\",",
          "778:         keep_bframe, keep_avc_nalu_sei, merge_nalus);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:         for (int i = 0; i < nn_samples; i++) {",
          "1014:             SrsSample* sample = samples[i];",
          "1022:             if (sample->size <= kRtpMaxPayloadSize) {",
          "1023:                 if ((err = package_single_nalu(msg, sample, pkts)) != srs_success) {",
          "1024:                     return srs_error_wrap(err, \"package single nalu\");",
          "",
          "[Removed Lines]",
          "1018:             if (sample->bframe) {",
          "1019:                 continue;",
          "1020:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1051:     for (int i = 0; i < format->video->nb_samples; ++i) {",
          "1052:         SrsSample* sample = &format->video->samples[i];",
          "1058:                 return srs_error_wrap(err, \"parse bframe\");",
          "1059:             }",
          "1061:                 continue;",
          "1062:             }",
          "1063:         }",
          "",
          "[Removed Lines]",
          "1056:         if (!keep_bframe) {",
          "1057:             if ((err = sample->parse_bframe()) != srs_success) {",
          "1060:             if (sample->bframe) {",
          "",
          "[Added Lines]",
          "1051:         if (!keep_avc_nalu_sei && format->vcodec->id == SrsVideoCodecIdAVC) {",
          "1052:             SrsAvcNaluType avc_nalu_type;",
          "1054:             if ((err = SrsVideoFrame::parse_avc_nalu_type(sample, avc_nalu_type)) != srs_success) {",
          "1055:                 return srs_error_wrap(err, \"parse avc nalu_type\");",
          "1056:             }",
          "1057:             if (avc_nalu_type == SrsAvcNaluTypeSEI) {",
          "1059:                 continue;",
          "1060:             }",
          "1061:         }",
          "1065:         if (!keep_bframe && format->vcodec->id == SrsVideoCodecIdAVC) {",
          "1066:             bool is_b_frame;",
          "1067:             if ((err = SrsVideoFrame::parse_avc_b_frame(sample, is_b_frame)) != srs_success) {",
          "1070:             if (is_b_frame) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1137:     for (int i = 0; i < (int)samples.size(); i++) {",
          "1138:         SrsSample* sample = samples[i];",
          "1146:         if (!sample->size) {",
          "1147:             continue;",
          "1148:         }",
          "",
          "[Removed Lines]",
          "1142:         if (sample->bframe) {",
          "1143:             continue;",
          "1144:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:     SrsAudioCodecId latest_codec_;",
          "263:     SrsAudioTranscoder* codec_;",
          "264:     bool keep_bframe;",
          "265:     bool merge_nalus;",
          "266:     uint16_t audio_sequence;",
          "267:     uint16_t video_sequence;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     bool keep_avc_nalu_sei;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    212",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    213",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    124",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    125",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_codec.cpp||trunk/src/kernel/srs_kernel_codec.cpp": [
          "File: trunk/src/kernel/srs_kernel_codec.cpp -> trunk/src/kernel/srs_kernel_codec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "504: {",
          "505:     size = 0;",
          "506:     bytes = NULL;",
          "508: }",
          "510: SrsSample::SrsSample(char* b, int s)",
          "511: {",
          "512:     size = s;",
          "513:     bytes = b;",
          "515: }",
          "517: SrsSample::~SrsSample()",
          "518: {",
          "519: }",
          "558: SrsSample* SrsSample::copy()",
          "559: {",
          "560:     SrsSample* p = new SrsSample();",
          "561:     p->bytes = bytes;",
          "562:     p->size = size;",
          "564:     return p;",
          "565: }",
          "",
          "[Removed Lines]",
          "507:     bframe = false;",
          "514:     bframe = false;",
          "521: srs_error_t SrsSample::parse_bframe()",
          "522: {",
          "523:     srs_error_t err = srs_success;",
          "525:     uint8_t header = bytes[0];",
          "526:     SrsAvcNaluType nal_type = (SrsAvcNaluType)(header & kNalTypeMask);",
          "528:     if (nal_type != SrsAvcNaluTypeNonIDR && nal_type != SrsAvcNaluTypeDataPartitionA && nal_type != SrsAvcNaluTypeIDR) {",
          "529:         return err;",
          "530:     }",
          "532:     SrsBuffer* stream = new SrsBuffer(bytes, size);",
          "533:     SrsAutoFree(SrsBuffer, stream);",
          "536:     stream->skip(1);",
          "538:     SrsBitBuffer bitstream(stream);",
          "539:     int32_t first_mb_in_slice = 0;",
          "540:     if ((err = srs_avc_nalu_read_uev(&bitstream, first_mb_in_slice)) != srs_success) {",
          "541:         return srs_error_wrap(err, \"nalu read uev\");",
          "542:     }",
          "544:     int32_t slice_type_v = 0;",
          "545:     if ((err = srs_avc_nalu_read_uev(&bitstream, slice_type_v)) != srs_success) {",
          "546:         return srs_error_wrap(err, \"nalu read uev\");",
          "547:     }",
          "548:     SrsAvcSliceType slice_type = (SrsAvcSliceType)slice_type_v;",
          "550:     if (slice_type == SrsAvcSliceTypeB || slice_type == SrsAvcSliceTypeB1) {",
          "551:         bframe = true;",
          "552:         srs_verbose(\"nal_type=%d, slice type=%d\", nal_type, slice_type);",
          "553:     }",
          "555:     return err;",
          "556: }",
          "563:     p->bframe = bframe;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     SrsSample* sample = &samples[nb_samples++];",
          "656:     sample->bytes = bytes;",
          "657:     sample->size = size;",
          "660:     return err;",
          "661: }",
          "",
          "[Removed Lines]",
          "658:     sample->bframe = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "739:     return (SrsVideoCodecConfig*)codec;",
          "740: }",
          "742: SrsFormat::SrsFormat()",
          "743: {",
          "744:     acodec = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: srs_error_t SrsVideoFrame::parse_avc_nalu_type(const SrsSample* sample, SrsAvcNaluType& avc_nalu_type)",
          "702: {",
          "703:     srs_error_t err = srs_success;",
          "705:     if (sample == NULL || sample->size < 1) {",
          "706:         return srs_error_new(ERROR_AVC_NALU_EMPTY, \"empty nalu\");",
          "707:     }",
          "709:     uint8_t header = sample->bytes[0];",
          "710:     avc_nalu_type = (SrsAvcNaluType)(header & kNalTypeMask);",
          "712:     return err;",
          "713: }",
          "715: srs_error_t SrsVideoFrame::parse_avc_b_frame(const SrsSample* sample, bool& is_b_frame)",
          "716: {",
          "717:     srs_error_t err = srs_success;",
          "719:     if (sample == NULL || sample->size < 1) {",
          "720:         return srs_error_new(ERROR_AVC_NALU_EMPTY, \"empty nalu\");",
          "721:     }",
          "723:     SrsAvcNaluType nalu_type;",
          "724:     if ((err = parse_avc_nalu_type(sample, nalu_type)) != srs_success) {",
          "725:         return srs_error_wrap(err, \"parse avc nalu type error\");",
          "726:     }",
          "728:     if (nalu_type != SrsAvcNaluTypeNonIDR && nalu_type != SrsAvcNaluTypeDataPartitionA && nalu_type != SrsAvcNaluTypeIDR) {",
          "729:         is_b_frame = false;",
          "730:         return err;",
          "731:     }",
          "733:     SrsBuffer* stream = new SrsBuffer(sample->bytes, sample->size);",
          "734:     SrsAutoFree(SrsBuffer, stream);",
          "737:     stream->skip(1);",
          "739:     SrsBitBuffer bitstream(stream);",
          "740:     int32_t first_mb_in_slice = 0;",
          "741:     if ((err = srs_avc_nalu_read_uev(&bitstream, first_mb_in_slice)) != srs_success) {",
          "742:         return srs_error_wrap(err, \"nalu read uev\");",
          "743:     }",
          "745:     int32_t slice_type_v = 0;",
          "746:     if ((err = srs_avc_nalu_read_uev(&bitstream, slice_type_v)) != srs_success) {",
          "747:         return srs_error_wrap(err, \"nalu read uev\");",
          "748:     }",
          "749:     SrsAvcSliceType slice_type = (SrsAvcSliceType)slice_type_v;",
          "751:     is_b_frame = slice_type == SrsAvcSliceTypeB || slice_type == SrsAvcSliceTypeB1;",
          "752:     if (is_b_frame) {",
          "753:         srs_verbose(\"nalu_type=%d, slice type=%d\", nalu_type, slice_type);",
          "754:     }",
          "756:     return err;",
          "757: }",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_codec.hpp||trunk/src/kernel/srs_kernel_codec.hpp": [
          "File: trunk/src/kernel/srs_kernel_codec.hpp -> trunk/src/kernel/srs_kernel_codec.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:     int size;",
          "1133:     char* bytes;",
          "1136: public:",
          "1137:     SrsSample();",
          "1138:     SrsSample(char* b, int s);",
          "1139:     ~SrsSample();",
          "1140: public:",
          "1144:     SrsSample* copy();",
          "1145: };",
          "",
          "[Removed Lines]",
          "1135:     bool bframe;",
          "1142:     srs_error_t parse_bframe();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1322:     virtual srs_error_t add_sample(char* bytes, int size);",
          "1323: public:",
          "1324:     virtual SrsVideoCodecConfig* vcodec();",
          "1325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1321: public:",
          "1322:     static srs_error_t parse_avc_nalu_type(const SrsSample* sample, SrsAvcNaluType& avc_nalu_type);",
          "1323:     static srs_error_t parse_avc_b_frame(const SrsSample* sample, bool& is_b_frame);",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
          "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     XX(ERROR_HEVC_DISABLED                 , 3098, \"HevcDisabled\", \"HEVC is disabled\") \\",
          "277:     XX(ERROR_HEVC_DECODE_ERROR             , 3099, \"HevcDecode\", \"HEVC decode av stream failed\")  \\",
          "278:     XX(ERROR_MP4_HVCC_CHANGE               , 3100, \"Mp4HvcCChange\", \"MP4 does not support video HvcC change\") \\",
          "",
          "[Removed Lines]",
          "279:     XX(ERROR_HEVC_API_NO_PREFIXED          , 3101, \"HevcAnnexbPrefix\", \"No annexb prefix for HEVC decoder\")",
          "",
          "[Added Lines]",
          "279:     XX(ERROR_HEVC_API_NO_PREFIXED          , 3101, \"HevcAnnexbPrefix\", \"No annexb prefix for HEVC decoder\") \\",
          "280:     XX(ERROR_AVC_NALU_EMPTY                , 3102, \"AvcNaluEmpty\", \"AVC NALU is empty\")",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp": [
          "File: trunk/src/utest/srs_utest_config.cpp -> trunk/src/utest/srs_utest_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4406:         SrsSetEnvConfig(rtc_keep_bframe, \"SRS_VHOST_RTC_KEEP_BFRAME\", \"on\");",
          "4407:         EXPECT_TRUE(conf.get_rtc_keep_bframe(\"__defaultVhost__\"));",
          "4408:     }",
          "4410:     if (true) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4409:         {",
          "4411:             SrsSetEnvConfig(rtc_keep_bframe, \"SRS_VHOST_RTC_KEEP_BFRAME\", \"onn\");",
          "4412:             EXPECT_FALSE(conf.get_rtc_keep_bframe(\"__defaultVhost__\"));",
          "4414:         }",
          "4416:         {",
          "4417:             SrsSetEnvConfig(rtc_keep_avc_nalu_sei, \"SRS_VHOST_RTC_KEEP_AVC_NALU_SEI\", \"off\");",
          "4418:             EXPECT_FALSE(conf.get_rtc_keep_avc_nalu_sei(\"__defaultVhost__\"));",
          "4419:         }",
          "4421:         {",
          "4422:             SrsSetEnvConfig(rtc_keep_avc_nalu_sei, \"SRS_VHOST_RTC_KEEP_AVC_NALU_SEI\", \"on\");",
          "4423:             EXPECT_TRUE(conf.get_rtc_keep_avc_nalu_sei(\"__defaultVhost__\"));",
          "4424:         }",
          "4426:         {",
          "4428:             SrsSetEnvConfig(rtc_keep_avc_nalu_sei, \"SRS_VHOST_RTC_KEEP_AVC_NALU_SEI\", \"xx\");",
          "4429:             EXPECT_TRUE(conf.get_rtc_keep_avc_nalu_sei(\"__defaultVhost__\"));",
          "4430:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}