{
  "cve_id": "CVE-2016-10207",
  "cve_desc": "The Xvnc server in TigerVNC allows remote attackers to cause a denial of service (invalid memory access and crash) by terminating a TLS handshake early.",
  "repo": "TigerVNC/tigervnc",
  "patch_hash": "8aa4bc53206c2430bbf0c8f4b642f59a379ee649",
  "patch_info": {
    "commit_hash": "8aa4bc53206c2430bbf0c8f4b642f59a379ee649",
    "repo": "TigerVNC/tigervnc",
    "commit_url": "https://github.com/TigerVNC/tigervnc/commit/8aa4bc53206c2430bbf0c8f4b642f59a379ee649",
    "files": [
      "common/rfb/CSecurityTLS.cxx",
      "common/rfb/CSecurityTLS.h",
      "common/rfb/SSecurityTLS.cxx",
      "common/rfb/SSecurityTLS.h"
    ],
    "message": "Proper global init/deinit of GnuTLS\n\nThese are reference counted so it is important to retain symmetry\nbetween the calls. Failure to do so will result in bad memory access\nand crashes.",
    "before_after_code_files": [
      "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx",
      "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h",
      "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx",
      "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h"
    ]
  },
  "patch_diff": {
    "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx": [
      "File: common/rfb/CSecurityTLS.cxx -> common/rfb/CSecurityTLS.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: static LogWriter vlog(\"TLS\");",
      "80: CSecurityTLS::CSecurityTLS(bool _anon) : session(0), anon_cred(0),",
      "81:        anon(_anon), fis(0), fos(0)",
      "82: {",
      "83:   cafile = X509CA.getData();",
      "84:   crlfile = X509CRL.getData();",
      "85: }",
      "87: void CSecurityTLS::setDefaults()",
      "",
      "[Removed Lines]",
      "70: void CSecurityTLS::initGlobal()",
      "71: {",
      "72:   static bool globalInitDone = false;",
      "74:   if (!globalInitDone) {",
      "75:     gnutls_global_init();",
      "76:     globalInitDone = true;",
      "77:   }",
      "78: }",
      "",
      "[Added Lines]",
      "76:   if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
      "77:     throw AuthFailureException(\"gnutls_global_init failed\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:   if (session) {",
      "126:     gnutls_deinit(session);",
      "127:     session = 0;",
      "130:   }",
      "131: }",
      "",
      "[Removed Lines]",
      "129:     gnutls_global_deinit();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:   delete[] cafile;",
      "144:   delete[] crlfile;",
      "145: }",
      "147: bool CSecurityTLS::processMsg(CConnection* cc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137:   gnutls_global_deinit();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:   rdr::OutStream* os = cc->getOutStream();",
      "151:   client = cc;",
      "155:   if (!session) {",
      "156:     if (!is->checkNoWait(1))",
      "157:       return false;",
      "",
      "[Removed Lines]",
      "153:   initGlobal();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h": [
      "File: common/rfb/CSecurityTLS.h -> common/rfb/CSecurityTLS.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     CConnection *client;",
      "64:   private:",
      "67:     gnutls_session_t session;",
      "68:     gnutls_anon_client_credentials_t anon_cred;",
      "69:     gnutls_certificate_credentials_t cert_cred;",
      "",
      "[Removed Lines]",
      "65:     static void initGlobal();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx": [
      "File: common/rfb/SSecurityTLS.cxx -> common/rfb/SSecurityTLS.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: static LogWriter vlog(\"TLS\");",
      "62: SSecurityTLS::SSecurityTLS(bool _anon) : session(0), dh_params(0),",
      "63:        anon_cred(0), cert_cred(0),",
      "64:        anon(_anon), fis(0), fos(0)",
      "65: {",
      "66:   certfile = X509_CertFile.getData();",
      "67:   keyfile = X509_KeyFile.getData();",
      "68: }",
      "70: void SSecurityTLS::shutdown()",
      "",
      "[Removed Lines]",
      "51: void SSecurityTLS::initGlobal()",
      "52: {",
      "53:   static bool globalInitDone = false;",
      "55:   if (!globalInitDone) {",
      "56:     if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
      "57:       throw AuthFailureException(\"gnutls_global_init failed\");",
      "58:     globalInitDone = true;",
      "59:   }",
      "60: }",
      "",
      "[Added Lines]",
      "58:   if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
      "59:     throw AuthFailureException(\"gnutls_global_init failed\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94:   if (session) {",
      "95:     gnutls_deinit(session);",
      "96:     session = 0;",
      "99:   }",
      "100: }",
      "",
      "[Removed Lines]",
      "98:     gnutls_global_deinit();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:   delete[] keyfile;",
      "113:   delete[] certfile;",
      "114: }",
      "116: bool SSecurityTLS::processMsg(SConnection *sc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:   gnutls_global_deinit();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   vlog.debug(\"Process security message (session %p)\", session);",
      "123:   if (!session) {",
      "126:     if (gnutls_init(&session, GNUTLS_SERVER) != GNUTLS_E_SUCCESS)",
      "127:       throw AuthFailureException(\"gnutls_init failed\");",
      "",
      "[Removed Lines]",
      "124:     initGlobal();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h": [
      "File: common/rfb/SSecurityTLS.h -> common/rfb/SSecurityTLS.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     void setParams(gnutls_session_t session);",
      "56:   private:",
      "59:     gnutls_session_t session;",
      "60:     gnutls_dh_params_t dh_params;",
      "61:     gnutls_anon_server_credentials_t anon_cred;",
      "",
      "[Removed Lines]",
      "57:     static void initGlobal();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8af13dd93e6723385811798c35d12da70d3641b",
      "candidate_info": {
        "commit_hash": "f8af13dd93e6723385811798c35d12da70d3641b",
        "repo": "TigerVNC/tigervnc",
        "commit_url": "https://github.com/TigerVNC/tigervnc/commit/f8af13dd93e6723385811798c35d12da70d3641b",
        "files": [
          "common/rfb/CSecurityTLS.cxx",
          "common/rfb/CSecurityTLS.h",
          "common/rfb/SSecurityTLS.cxx",
          "common/rfb/SSecurityTLS.h"
        ],
        "message": "Proper global init/deinit of GnuTLS\n\nThese are reference counted so it is important to retain symmetry\nbetween the calls. Failure to do so will result in bad memory access\nand crashes.\n\n(cherry picked from commit 8aa4bc53206c2430bbf0c8f4b642f59a379ee649)",
        "before_after_code_files": [
          "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx",
          "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h",
          "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx",
          "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx",
            "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h",
            "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx",
            "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h"
          ],
          "candidate": [
            "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx",
            "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h",
            "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx",
            "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx": [
          "File: common/rfb/CSecurityTLS.cxx -> common/rfb/CSecurityTLS.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: static LogWriter vlog(\"TLS\");",
          "80: CSecurityTLS::CSecurityTLS(bool _anon) : session(0), anon_cred(0),",
          "81:        anon(_anon), fis(0), fos(0)",
          "82: {",
          "83:   cafile = X509CA.getData();",
          "84:   crlfile = X509CRL.getData();",
          "85: }",
          "87: void CSecurityTLS::setDefaults()",
          "",
          "[Removed Lines]",
          "70: void CSecurityTLS::initGlobal()",
          "71: {",
          "72:   static bool globalInitDone = false;",
          "74:   if (!globalInitDone) {",
          "75:     gnutls_global_init();",
          "76:     globalInitDone = true;",
          "77:   }",
          "78: }",
          "",
          "[Added Lines]",
          "76:   if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
          "77:     throw AuthFailureException(\"gnutls_global_init failed\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   if (session) {",
          "126:     gnutls_deinit(session);",
          "127:     session = 0;",
          "130:   }",
          "131: }",
          "",
          "[Removed Lines]",
          "129:     gnutls_global_deinit();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   delete[] cafile;",
          "144:   delete[] crlfile;",
          "145: }",
          "147: bool CSecurityTLS::processMsg(CConnection* cc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   gnutls_global_deinit();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:   rdr::OutStream* os = cc->getOutStream();",
          "151:   client = cc;",
          "155:   if (!session) {",
          "156:     if (!is->checkNoWait(1))",
          "157:       return false;",
          "",
          "[Removed Lines]",
          "153:   initGlobal();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rfb/CSecurityTLS.h||common/rfb/CSecurityTLS.h": [
          "File: common/rfb/CSecurityTLS.h -> common/rfb/CSecurityTLS.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     CConnection *client;",
          "64:   private:",
          "67:     gnutls_session_t session;",
          "68:     gnutls_anon_client_credentials_t anon_cred;",
          "69:     gnutls_certificate_credentials_t cert_cred;",
          "",
          "[Removed Lines]",
          "65:     static void initGlobal();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rfb/SSecurityTLS.cxx||common/rfb/SSecurityTLS.cxx": [
          "File: common/rfb/SSecurityTLS.cxx -> common/rfb/SSecurityTLS.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static LogWriter vlog(\"TLS\");",
          "62: SSecurityTLS::SSecurityTLS(bool _anon) : session(0), dh_params(0),",
          "63:        anon_cred(0), cert_cred(0),",
          "64:        anon(_anon), fis(0), fos(0)",
          "65: {",
          "66:   certfile = X509_CertFile.getData();",
          "67:   keyfile = X509_KeyFile.getData();",
          "68: }",
          "70: void SSecurityTLS::shutdown()",
          "",
          "[Removed Lines]",
          "51: void SSecurityTLS::initGlobal()",
          "52: {",
          "53:   static bool globalInitDone = false;",
          "55:   if (!globalInitDone) {",
          "56:     if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
          "57:       throw AuthFailureException(\"gnutls_global_init failed\");",
          "58:     globalInitDone = true;",
          "59:   }",
          "60: }",
          "",
          "[Added Lines]",
          "58:   if (gnutls_global_init() != GNUTLS_E_SUCCESS)",
          "59:     throw AuthFailureException(\"gnutls_global_init failed\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   if (session) {",
          "95:     gnutls_deinit(session);",
          "96:     session = 0;",
          "99:   }",
          "100: }",
          "",
          "[Removed Lines]",
          "98:     gnutls_global_deinit();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:   delete[] keyfile;",
          "113:   delete[] certfile;",
          "114: }",
          "116: bool SSecurityTLS::processMsg(SConnection *sc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:   gnutls_global_deinit();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:   vlog.debug(\"Process security message (session %p)\", session);",
          "123:   if (!session) {",
          "126:     if (gnutls_init(&session, GNUTLS_SERVER) != GNUTLS_E_SUCCESS)",
          "127:       throw AuthFailureException(\"gnutls_init failed\");",
          "",
          "[Removed Lines]",
          "124:     initGlobal();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rfb/SSecurityTLS.h||common/rfb/SSecurityTLS.h": [
          "File: common/rfb/SSecurityTLS.h -> common/rfb/SSecurityTLS.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     void setParams(gnutls_session_t session);",
          "56:   private:",
          "59:     gnutls_session_t session;",
          "60:     gnutls_dh_params_t dh_params;",
          "61:     gnutls_anon_server_credentials_t anon_cred;",
          "",
          "[Removed Lines]",
          "57:     static void initGlobal();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}