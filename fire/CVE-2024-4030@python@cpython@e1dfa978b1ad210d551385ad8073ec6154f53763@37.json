{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d73f856840369a20038c606cc7f979cc2c0d6505",
      "candidate_info": {
        "commit_hash": "d73f856840369a20038c606cc7f979cc2c0d6505",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d73f856840369a20038c606cc7f979cc2c0d6505",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-06-05-06-26-04.gh-issue-",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-12-12-29-45.gh-issue-120400.lZYHVS.rst",
          "Python/asm_trampoline.S",
          "configure",
          "configure.ac"
        ],
        "message": "[3.13] gh-120400 \uff1aSupport Linux perf profile to see Python calls on RISC-V architecture (GH-120089) (#120413)\n\ngh-120400 \uff1aSupport Linux perf profile to see Python calls on RISC-V architecture (GH-120089)\n(cherry picked from commit 4b1e85bafc5bcb8cb70bb17164e07aebf7ad7e8e)\n\nCo-authored-by: ixgbe00 <yangwang@iscas.ac.cn>\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>",
        "before_after_code_files": [
          "Python/asm_trampoline.S||Python/asm_trampoline.S",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/asm_trampoline.S||Python/asm_trampoline.S": [
          "File: Python/asm_trampoline.S -> Python/asm_trampoline.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     blr     x3",
          "23:     ldp     x29, x30, [sp], 16",
          "24:     ret",
          "25: #endif",
          "26:     .globl _Py_trampoline_func_end",
          "27: _Py_trampoline_func_end:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #endif",
          "26: #ifdef __riscv",
          "27:     addi    sp,sp,-16",
          "28:     sd      ra,8(sp)",
          "29:     jalr    a3",
          "30:     ld      ra,8(sp)",
          "31:     addi    sp,sp,16",
          "32:     jr      ra",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3641: AS_CASE([$PLATFORM_TRIPLET],",
          "3642:   [x86_64-linux-gnu], [perf_trampoline=yes],",
          "3643:   [aarch64-linux-gnu], [perf_trampoline=yes],",
          "3644:   [perf_trampoline=no]",
          "3645: )",
          "3646: AC_MSG_RESULT([$perf_trampoline])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3644:   [riscv64-linux-gnu], [perf_trampoline=yes],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "872000606271c52d989e53fe4cc9904343d81855",
      "candidate_info": {
        "commit_hash": "872000606271c52d989e53fe4cc9904343d81855",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/872000606271c52d989e53fe4cc9904343d81855",
        "files": [
          "Lib/test/test_urlparse.py",
          "Lib/urllib/parse.py",
          "Misc/NEWS.d/next/Library/2019-08-27-01-16-50.gh-issue-67693.4NIAiy.rst"
        ],
        "message": "[3.13] gh-67693: Fix urlunparse() and urlunsplit() for URIs with path starting with multiple slashes and no authority (GH-113563) (GH-119023)\n\n(cherry picked from commit e237b25a4fa5626fcd1b1848aa03f725f892e40e)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_urlparse.py||Lib/test/test_urlparse.py",
          "Lib/urllib/parse.py||Lib/urllib/parse.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_urlparse.py||Lib/test/test_urlparse.py": [
          "File: Lib/test/test_urlparse.py -> Lib/test/test_urlparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: class UrlParseTestCase(unittest.TestCase):",
          "107:         result = urllib.parse.urlparse(url)",
          "108:         self.assertSequenceEqual(result, parsed)",
          "109:         t = (result.scheme, result.netloc, result.path,",
          "",
          "[Removed Lines]",
          "106:     def checkRoundtrips(self, url, parsed, split):",
          "",
          "[Added Lines]",
          "106:     def checkRoundtrips(self, url, parsed, split, url2=None):",
          "107:         if url2 is None:",
          "108:             url2 = url",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         self.assertSequenceEqual(t, parsed)",
          "112:         # put it back together and it should be the same",
          "113:         result2 = urllib.parse.urlunparse(result)",
          "115:         self.assertSequenceEqual(result2, result.geturl())",
          "117:         # the result of geturl() is a fixpoint; we can always parse it",
          "",
          "[Removed Lines]",
          "114:         self.assertSequenceEqual(result2, url)",
          "",
          "[Added Lines]",
          "116:         self.assertSequenceEqual(result2, url2)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:              result.query, result.fragment)",
          "138:         self.assertSequenceEqual(t, split)",
          "139:         result2 = urllib.parse.urlunsplit(result)",
          "141:         self.assertSequenceEqual(result2, result.geturl())",
          "143:         # check the fixpoint property of re-parsing the result of geturl()",
          "",
          "[Removed Lines]",
          "140:         self.assertSequenceEqual(result2, url)",
          "",
          "[Added Lines]",
          "142:         self.assertSequenceEqual(result2, url2)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176:     def test_roundtrips(self):",
          "177:         str_cases = [",
          "178:             ('file:///tmp/junk.txt',",
          "179:              ('file', '', '/tmp/junk.txt', '', '', ''),",
          "180:              ('file', '', '/tmp/junk.txt', '', '')),",
          "181:             ('imap://mail.python.org/mbox1',",
          "182:              ('imap', 'mail.python.org', '/mbox1', '', '', ''),",
          "183:              ('imap', 'mail.python.org', '/mbox1', '', '')),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:             ('path/to/file',",
          "181:              ('', '', 'path/to/file', '', '', ''),",
          "182:              ('', '', 'path/to/file', '', '')),",
          "183:             ('/path/to/file',",
          "184:              ('', '', '/path/to/file', '', '', ''),",
          "185:              ('', '', '/path/to/file', '', '')),",
          "186:             ('//path/to/file',",
          "187:              ('', 'path', '/to/file', '', '', ''),",
          "188:              ('', 'path', '/to/file', '', '')),",
          "189:             ('////path/to/file',",
          "190:              ('', '', '//path/to/file', '', '', ''),",
          "191:              ('', '', '//path/to/file', '', '')),",
          "192:             ('scheme:path/to/file',",
          "193:              ('scheme', '', 'path/to/file', '', '', ''),",
          "194:              ('scheme', '', 'path/to/file', '', '')),",
          "195:             ('scheme:/path/to/file',",
          "196:              ('scheme', '', '/path/to/file', '', '', ''),",
          "197:              ('scheme', '', '/path/to/file', '', '')),",
          "198:             ('scheme://path/to/file',",
          "199:              ('scheme', 'path', '/to/file', '', '', ''),",
          "200:              ('scheme', 'path', '/to/file', '', '')),",
          "201:             ('scheme:////path/to/file',",
          "202:              ('scheme', '', '//path/to/file', '', '', ''),",
          "203:              ('scheme', '', '//path/to/file', '', '')),",
          "207:             ('file:////tmp/junk.txt',",
          "208:              ('file', '', '//tmp/junk.txt', '', '', ''),",
          "209:              ('file', '', '//tmp/junk.txt', '', '')),",
          "210:             ('file://///tmp/junk.txt',",
          "211:              ('file', '', '///tmp/junk.txt', '', '', ''),",
          "212:              ('file', '', '///tmp/junk.txt', '', '')),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:         for url, parsed, split in str_cases + bytes_cases:",
          "214:             self.checkRoundtrips(url, parsed, split)",
          "216:     def test_http_roundtrips(self):",
          "217:         # urllib.parse.urlsplit treats 'http:' as an optimized special case,",
          "218:         # so we test both 'http:' and 'https:' in all the following.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     def test_roundtrips_normalization(self):",
          "249:         str_cases = [",
          "250:             ('///path/to/file',",
          "251:              '/path/to/file',",
          "252:              ('', '', '/path/to/file', '', '', ''),",
          "253:              ('', '', '/path/to/file', '', '')),",
          "254:             ('scheme:///path/to/file',",
          "255:              'scheme:/path/to/file',",
          "256:              ('scheme', '', '/path/to/file', '', '', ''),",
          "257:              ('scheme', '', '/path/to/file', '', '')),",
          "258:             ('file:/tmp/junk.txt',",
          "259:              'file:///tmp/junk.txt',",
          "260:              ('file', '', '/tmp/junk.txt', '', '', ''),",
          "261:              ('file', '', '/tmp/junk.txt', '', '')),",
          "262:             ('http:/tmp/junk.txt',",
          "263:              'http:///tmp/junk.txt',",
          "264:              ('http', '', '/tmp/junk.txt', '', '', ''),",
          "265:              ('http', '', '/tmp/junk.txt', '', '')),",
          "266:             ('https:/tmp/junk.txt',",
          "267:              'https:///tmp/junk.txt',",
          "268:              ('https', '', '/tmp/junk.txt', '', '', ''),",
          "269:              ('https', '', '/tmp/junk.txt', '', '')),",
          "270:         ]",
          "271:         def _encode(t):",
          "272:             return (t[0].encode('ascii'),",
          "273:                     t[1].encode('ascii'),",
          "274:                     tuple(x.encode('ascii') for x in t[2]),",
          "275:                     tuple(x.encode('ascii') for x in t[3]))",
          "276:         bytes_cases = [_encode(x) for x in str_cases]",
          "277:         for url, url2, parsed, split in str_cases + bytes_cases:",
          "278:             self.checkRoundtrips(url, parsed, split, url2)",
          "",
          "---------------"
        ],
        "Lib/urllib/parse.py||Lib/urllib/parse.py": [
          "File: Lib/urllib/parse.py -> Lib/urllib/parse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "525:     empty query; the RFC states that these are equivalent).\"\"\"",
          "526:     scheme, netloc, url, query, fragment, _coerce_result = (",
          "527:                                           _coerce_args(*components))",
          "529:         if url and url[:1] != '/': url = '/' + url",
          "530:         url = '//' + (netloc or '') + url",
          "531:     if scheme:",
          "",
          "[Removed Lines]",
          "528:     if netloc or (scheme and scheme in uses_netloc and url[:2] != '//'):",
          "",
          "[Added Lines]",
          "528:     if netloc or (scheme and scheme in uses_netloc) or url[:2] == '//':",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ba3cced7177f29803c59a83734a016e31949aa2",
      "candidate_info": {
        "commit_hash": "1ba3cced7177f29803c59a83734a016e31949aa2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/1ba3cced7177f29803c59a83734a016e31949aa2",
        "files": [
          "Include/patchlevel.h"
        ],
        "message": "Post 3.13.0b2",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define PY_RELEASE_SERIAL       2",
          "",
          "[Removed Lines]",
          "26: #define PY_VERSION              \"3.13.0b2\"",
          "",
          "[Added Lines]",
          "26: #define PY_VERSION              \"3.13.0b2+\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ce59849610fe03beebcddfacb3d055a7074ef16",
      "candidate_info": {
        "commit_hash": "1ce59849610fe03beebcddfacb3d055a7074ef16",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/1ce59849610fe03beebcddfacb3d055a7074ef16",
        "files": [
          "Doc/c-api/weakref.rst",
          "Include/cpython/object.h",
          "Include/internal/pycore_weakref.h",
          "Lib/test/test_capi/test_object.py",
          "Misc/NEWS.d/next/C API/2024-05-08-21-57-50.gh-issue-118789.Ni4UQx.rst",
          "Modules/_testcapi/object.c",
          "Objects/typeobject.c",
          "Objects/weakrefobject.c"
        ],
        "message": "[3.13] gh-118789: Add `PyUnstable_Object_ClearWeakRefsNoCallbacks` (GH-118807) (#120695)\n\nThis exposes `PyUnstable_Object_ClearWeakRefsNoCallbacks` as an unstable\nC-API function to provide a thread-safe mechanism for clearing weakrefs\nwithout executing callbacks.\n\nSome C-API extensions need to clear weakrefs without calling callbacks,\nsuch as after running finalizers like we do in subtype_dealloc.\nPreviously they could use `_PyWeakref_ClearRef` on each weakref, but\nthat's not thread-safe in the free-threaded build.\n\n(cherry picked from commit e8752d7b80775ec2a348cd4bf38cbe26a4a07615)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Include/cpython/object.h||Include/cpython/object.h",
          "Include/internal/pycore_weakref.h||Include/internal/pycore_weakref.h",
          "Lib/test/test_capi/test_object.py||Lib/test/test_capi/test_object.py",
          "Modules/_testcapi/object.c||Modules/_testcapi/object.c",
          "Objects/typeobject.c||Objects/typeobject.c",
          "Objects/weakrefobject.c||Objects/weakrefobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/object.h||Include/cpython/object.h": [
          "File: Include/cpython/object.h -> Include/cpython/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: PyAPI_FUNC(void) PyObject_CallFinalizer(PyObject *);",
          "289: PyAPI_FUNC(int) PyObject_CallFinalizerFromDealloc(PyObject *);",
          "293: PyAPI_FUNC(PyObject *)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: PyAPI_FUNC(void) PyUnstable_Object_ClearWeakRefsNoCallbacks(PyObject *);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_weakref.h||Include/internal/pycore_weakref.h": [
          "File: Include/internal/pycore_weakref.h -> Include/internal/pycore_weakref.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: PyAPI_FUNC(int) _PyWeakref_IsDead(PyObject *weakref);",
          "",
          "[Removed Lines]",
          "112: extern void _PyWeakref_ClearWeakRefsExceptCallbacks(PyObject *obj);",
          "",
          "[Added Lines]",
          "112: extern void _PyWeakref_ClearWeakRefsNoCallbacks(PyObject *obj);",
          "",
          "---------------"
        ],
        "Lib/test/test_capi/test_object.py||Lib/test/test_capi/test_object.py": [
          "File: Lib/test/test_capi/test_object.py -> Lib/test/test_capi/test_object.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         with self.assertRaises(OSError):",
          "104:             _testcapi.pyobject_print_os_error(output_filename)",
          "106: if __name__ == \"__main__\":",
          "107:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: class ClearWeakRefsNoCallbacksTest(unittest.TestCase):",
          "108:     \"\"\"Test PyUnstable_Object_ClearWeakRefsNoCallbacks\"\"\"",
          "109:     def test_ClearWeakRefsNoCallbacks(self):",
          "110:         \"\"\"Ensure PyUnstable_Object_ClearWeakRefsNoCallbacks works\"\"\"",
          "111:         import weakref",
          "112:         import gc",
          "113:         class C:",
          "114:             pass",
          "115:         obj = C()",
          "116:         messages = []",
          "117:         ref = weakref.ref(obj, lambda: messages.append(\"don't add this\"))",
          "118:         self.assertIs(ref(), obj)",
          "119:         self.assertFalse(messages)",
          "120:         _testcapi.pyobject_clear_weakrefs_no_callbacks(obj)",
          "121:         self.assertIsNone(ref())",
          "122:         gc.collect()",
          "123:         self.assertFalse(messages)",
          "125:     def test_ClearWeakRefsNoCallbacks_no_weakref_support(self):",
          "126:         \"\"\"Don't fail on objects that don't support weakrefs\"\"\"",
          "127:         import weakref",
          "128:         obj = object()",
          "129:         with self.assertRaises(TypeError):",
          "130:             ref = weakref.ref(obj)",
          "131:         _testcapi.pyobject_clear_weakrefs_no_callbacks(obj)",
          "",
          "---------------"
        ],
        "Modules/_testcapi/object.c||Modules/_testcapi/object.c": [
          "File: Modules/_testcapi/object.c -> Modules/_testcapi/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     Py_RETURN_NONE;",
          "118: }",
          "120: static PyMethodDef test_methods[] = {",
          "121:     {\"call_pyobject_print\", call_pyobject_print, METH_VARARGS},",
          "122:     {\"pyobject_print_null\", pyobject_print_null, METH_VARARGS},",
          "123:     {\"pyobject_print_noref_object\", pyobject_print_noref_object, METH_VARARGS},",
          "124:     {\"pyobject_print_os_error\", pyobject_print_os_error, METH_VARARGS},",
          "126:     {NULL},",
          "127: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: static PyObject *",
          "121: pyobject_clear_weakrefs_no_callbacks(PyObject *self, PyObject *obj)",
          "122: {",
          "123:     PyUnstable_Object_ClearWeakRefsNoCallbacks(obj);",
          "124:     Py_RETURN_NONE;",
          "125: }",
          "132:     {\"pyobject_clear_weakrefs_no_callbacks\", pyobject_clear_weakrefs_no_callbacks, METH_O},",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2369:            finalizers since they might rely on part of the object",
          "2371:         if (type->tp_weaklistoffset && !base->tp_weaklistoffset) {",
          "2373:         }",
          "2374:     }",
          "",
          "[Removed Lines]",
          "2372:             _PyWeakref_ClearWeakRefsExceptCallbacks(self);",
          "",
          "[Added Lines]",
          "2372:             _PyWeakref_ClearWeakRefsNoCallbacks(self);",
          "",
          "---------------"
        ],
        "Objects/weakrefobject.c||Objects/weakrefobject.c": [
          "File: Objects/weakrefobject.c -> Objects/weakrefobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1016:     PyObject *exc = PyErr_GetRaisedException();",
          "1017:     PyObject *tuple = PyTuple_New(num_weakrefs * 2);",
          "1018:     if (tuple == NULL) {",
          "1020:         PyErr_WriteUnraisable(NULL);",
          "1021:         PyErr_SetRaisedException(exc);",
          "1022:         return;",
          "",
          "[Removed Lines]",
          "1019:         _PyWeakref_ClearWeakRefsExceptCallbacks(object);",
          "",
          "[Added Lines]",
          "1019:         _PyWeakref_ClearWeakRefsNoCallbacks(object);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1057:     PyErr_SetRaisedException(exc);",
          "1058: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1060: void",
          "1061: PyUnstable_Object_ClearWeakRefsNoCallbacks(PyObject *obj)",
          "1062: {",
          "1063:     if (_PyType_SUPPORTS_WEAKREFS(Py_TYPE(obj))) {",
          "1064:         _PyWeakref_ClearWeakRefsNoCallbacks(obj);",
          "1065:     }",
          "1066: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1076: }",
          "1078: void",
          "1080: {",
          "",
          "[Removed Lines]",
          "1079: _PyWeakref_ClearWeakRefsExceptCallbacks(PyObject *obj)",
          "",
          "[Added Lines]",
          "1087: _PyWeakref_ClearWeakRefsNoCallbacks(PyObject *obj)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "251ef2e36f61a1c4b7c628ba9dc38a10a355a058",
      "candidate_info": {
        "commit_hash": "251ef2e36f61a1c4b7c628ba9dc38a10a355a058",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/251ef2e36f61a1c4b7c628ba9dc38a10a355a058",
        "files": [
          "Lib/test/test_long.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-03-25-15-07-01.gh-issue-117195.OWakgD.rst",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] GH-117195: Avoid assertion error in `object.__sizeof__` (GH-117220) (GH-119456)",
        "before_after_code_files": [
          "Lib/test/test_long.py||Lib/test/test_long.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_long.py||Lib/test/test_long.py": [
          "File: Lib/test/test_long.py -> Lib/test/test_long.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1639:                     MyInt.__basicsize__ + MyInt.__itemsize__ * ndigits",
          "1640:                 )",
          "1643: if __name__ == \"__main__\":",
          "1644:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1642:         # GH-117195 -- This shouldn't crash",
          "1643:         object.__sizeof__(1)",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7038:     res = 0;",
          "7039:     isize = Py_TYPE(self)->tp_itemsize;",
          "7042:     res += Py_TYPE(self)->tp_basicsize;",
          "7044:     return PyLong_FromSsize_t(res);",
          "",
          "[Removed Lines]",
          "7040:     if (isize > 0)",
          "7041:         res = Py_SIZE(self) * isize;",
          "",
          "[Added Lines]",
          "7040:     if (isize > 0) {",
          "7043:         res = _PyVarObject_CAST(self)->ob_size * isize;",
          "7044:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}