{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "721459831afb2a56eaa3b09e3123a78304500b03",
      "candidate_info": {
        "commit_hash": "721459831afb2a56eaa3b09e3123a78304500b03",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/721459831afb2a56eaa3b09e3123a78304500b03",
        "files": [
          "Lib/test/test_pyrepl/__init__.py",
          "Lib/test/test_pyrepl/__main__.py",
          "Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_input.py",
          "Lib/test/test_pyrepl/test_keymap.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py",
          "Lib/test/test_pyrepl/test_unix_console.py",
          "Lib/test/test_pyrepl/test_unix_eventqueue.py",
          "Makefile.pre.in"
        ],
        "message": "[3.13] gh-119306: Break up _pyrepl tests (GH-119307) (#119362)\n\n(cherry picked from commit f49df4f486e531ff2666eb22854117c564b3de3d)\n\nCo-authored-by: Eugene Triguba <eugenetriguba@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py",
          "Lib/test/test_pyrepl/__main__.py||Lib/test/test_pyrepl/__main__.py",
          "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_input.py||Lib/test/test_pyrepl/test_input.py",
          "Lib/test/test_pyrepl/test_keymap.py||Lib/test/test_pyrepl/test_keymap.py",
          "Lib/test/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py",
          "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py",
          "Lib/test/test_pyrepl/test_unix_eventqueue.py||Lib/test/test_pyrepl/test_unix_eventqueue.py",
          "Makefile.pre.in||Makefile.pre.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py": [
          "File: Lib/test/test_pyrepl/__init__.py -> Lib/test/test_pyrepl/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: from test.support import requires, load_package_tests",
          "3: from test.support.import_helper import import_module",
          "5: # Optionally test pyrepl.  This currently requires that the",
          "6: # 'curses' resource be given on the regrtest command line using the -u",
          "7: # option.  Additionally, we need to attempt to import curses and readline.",
          "8: requires(\"curses\")",
          "9: curses = import_module(\"curses\")",
          "10: readline = import_module(\"readline\")",
          "13: def load_tests(*args):",
          "14:     return load_package_tests(os.path.dirname(__file__), *args)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/__main__.py||Lib/test/test_pyrepl/__main__.py": [
          "File: Lib/test/test_pyrepl/__main__.py -> Lib/test/test_pyrepl/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import unittest",
          "2: from test.test_pyrepl import load_tests",
          "4: unittest.main()",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py": [
          "File: Lib/test/test_pyrepl/support.py -> Lib/test/test_pyrepl/support.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from code import InteractiveConsole",
          "2: from functools import partial",
          "3: from typing import Iterable",
          "4: from unittest.mock import MagicMock",
          "6: from _pyrepl.console import Console, Event",
          "7: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "8: from _pyrepl.simple_interact import _strip_final_indent",
          "11: def multiline_input(reader: ReadlineAlikeReader, namespace: dict | None = None):",
          "12:     saved = reader.more_lines",
          "13:     try:",
          "14:         reader.more_lines = partial(more_lines, namespace=namespace)",
          "15:         reader.ps1 = reader.ps2 = \">>>\"",
          "16:         reader.ps3 = reader.ps4 = \"...\"",
          "17:         return reader.readline()",
          "18:     finally:",
          "19:         reader.more_lines = saved",
          "20:         reader.paste_mode = False",
          "23: def more_lines(text: str, namespace: dict | None = None):",
          "24:     if namespace is None:",
          "25:         namespace = {}",
          "26:     src = _strip_final_indent(text)",
          "27:     console = InteractiveConsole(namespace, filename=\"<stdin>\")",
          "28:     try:",
          "29:         code = console.compile(src, \"<stdin>\", \"single\")",
          "30:     except (OverflowError, SyntaxError, ValueError):",
          "31:         return False",
          "32:     else:",
          "33:         return code is None",
          "36: def code_to_events(code: str):",
          "37:     for c in code:",
          "38:         yield Event(evt=\"key\", data=c, raw=bytearray(c.encode(\"utf-8\")))",
          "41: def prepare_reader(console: Console, **kwargs):",
          "42:     config = ReadlineConfig(readline_completer=None)",
          "43:     reader = ReadlineAlikeReader(console=console, config=config)",
          "44:     reader.more_lines = partial(more_lines, namespace=None)",
          "45:     reader.paste_mode = True  # Avoid extra indents",
          "47:     def get_prompt(lineno, cursor_on_line) -> str:",
          "48:         return \"\"",
          "50:     reader.get_prompt = get_prompt  # Remove prompt for easier calculations of (x, y)",
          "52:     for key, val in kwargs.items():",
          "53:         setattr(reader, key, val)",
          "55:     return reader",
          "58: def prepare_console(events: Iterable[Event], **kwargs):",
          "59:     console = MagicMock()",
          "60:     console.get_event.side_effect = events",
          "61:     console.height = 100",
          "62:     console.width = 80",
          "63:     for key, val in kwargs.items():",
          "64:         setattr(console, key, val)",
          "65:     return console",
          "68: def handle_all_events(",
          "69:     events, prepare_console=prepare_console, prepare_reader=prepare_reader",
          "70: ):",
          "71:     console = prepare_console(events)",
          "72:     reader = prepare_reader(console)",
          "73:     try:",
          "74:         while True:",
          "75:             reader.handle1()",
          "76:     except StopIteration:",
          "77:         pass",
          "78:     return reader, console",
          "81: handle_events_narrow_console = partial(",
          "82:     handle_all_events,",
          "83:     prepare_console=partial(prepare_console, width=10),",
          "84: )",
          "87: class FakeConsole(Console):",
          "88:     def __init__(self, events, encoding=\"utf-8\"):",
          "89:         self.events = iter(events)",
          "90:         self.encoding = encoding",
          "91:         self.screen = []",
          "92:         self.height = 100",
          "93:         self.width = 80",
          "95:     def get_event(self, block: bool = True) -> Event | None:",
          "96:         return next(self.events)",
          "98:     def getpending(self) -> Event:",
          "99:         return self.get_event(block=False)",
          "101:     def getheightwidth(self) -> tuple[int, int]:",
          "102:         return self.height, self.width",
          "104:     def refresh(self, screen: list[str], xy: tuple[int, int]) -> None:",
          "105:         pass",
          "107:     def prepare(self) -> None:",
          "108:         pass",
          "110:     def restore(self) -> None:",
          "111:         pass",
          "113:     def move_cursor(self, x: int, y: int) -> None:",
          "114:         pass",
          "116:     def set_cursor_vis(self, visible: bool) -> None:",
          "117:         pass",
          "119:     def push_char(self, char: int | bytes) -> None:",
          "120:         pass",
          "122:     def beep(self) -> None:",
          "123:         pass",
          "125:     def clear(self) -> None:",
          "126:         pass",
          "128:     def finish(self) -> None:",
          "129:         pass",
          "131:     def flushoutput(self) -> None:",
          "132:         pass",
          "134:     def forgetinput(self) -> None:",
          "135:         pass",
          "137:     def wait(self) -> None:",
          "138:         pass",
          "140:     def repaint(self) -> None:",
          "141:         pass",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_input.py||Lib/test/test_pyrepl/test_input.py": [
          "File: Lib/test/test_pyrepl/test_input.py -> Lib/test/test_pyrepl/test_input.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import unittest",
          "3: from _pyrepl.console import Event",
          "4: from _pyrepl.input import KeymapTranslator",
          "7: class KeymapTranslatorTests(unittest.TestCase):",
          "8:     def test_push_single_key(self):",
          "9:         keymap = [(\"a\", \"command_a\")]",
          "10:         translator = KeymapTranslator(keymap)",
          "11:         evt = Event(\"key\", \"a\")",
          "12:         translator.push(evt)",
          "13:         result = translator.get()",
          "14:         self.assertEqual(result, (\"command_a\", [\"a\"]))",
          "16:     def test_push_multiple_keys(self):",
          "17:         keymap = [(\"ab\", \"command_ab\")]",
          "18:         translator = KeymapTranslator(keymap)",
          "19:         evt1 = Event(\"key\", \"a\")",
          "20:         evt2 = Event(\"key\", \"b\")",
          "21:         translator.push(evt1)",
          "22:         translator.push(evt2)",
          "23:         result = translator.get()",
          "24:         self.assertEqual(result, (\"command_ab\", [\"a\", \"b\"]))",
          "26:     def test_push_invalid_key(self):",
          "27:         keymap = [(\"a\", \"command_a\")]",
          "28:         translator = KeymapTranslator(keymap)",
          "29:         evt = Event(\"key\", \"b\")",
          "30:         translator.push(evt)",
          "31:         result = translator.get()",
          "32:         self.assertEqual(result, (None, [\"b\"]))",
          "34:     def test_push_invalid_key_with_stack(self):",
          "35:         keymap = [(\"ab\", \"command_ab\")]",
          "36:         translator = KeymapTranslator(keymap)",
          "37:         evt1 = Event(\"key\", \"a\")",
          "38:         evt2 = Event(\"key\", \"c\")",
          "39:         translator.push(evt1)",
          "40:         translator.push(evt2)",
          "41:         result = translator.get()",
          "42:         self.assertEqual(result, (None, [\"a\", \"c\"]))",
          "44:     def test_push_character_key(self):",
          "45:         keymap = [(\"a\", \"command_a\")]",
          "46:         translator = KeymapTranslator(keymap)",
          "47:         evt = Event(\"key\", \"a\")",
          "48:         translator.push(evt)",
          "49:         result = translator.get()",
          "50:         self.assertEqual(result, (\"command_a\", [\"a\"]))",
          "52:     def test_push_character_key_with_stack(self):",
          "53:         keymap = [(\"ab\", \"command_ab\")]",
          "54:         translator = KeymapTranslator(keymap)",
          "55:         evt1 = Event(\"key\", \"a\")",
          "56:         evt2 = Event(\"key\", \"b\")",
          "57:         evt3 = Event(\"key\", \"c\")",
          "58:         translator.push(evt1)",
          "59:         translator.push(evt2)",
          "60:         translator.push(evt3)",
          "61:         result = translator.get()",
          "62:         self.assertEqual(result, (\"command_ab\", [\"a\", \"b\"]))",
          "64:     def test_push_transition_key(self):",
          "65:         keymap = [(\"a\", {\"b\": \"command_ab\"})]",
          "66:         translator = KeymapTranslator(keymap)",
          "67:         evt1 = Event(\"key\", \"a\")",
          "68:         evt2 = Event(\"key\", \"b\")",
          "69:         translator.push(evt1)",
          "70:         translator.push(evt2)",
          "71:         result = translator.get()",
          "72:         self.assertEqual(result, (\"command_ab\", [\"a\", \"b\"]))",
          "74:     def test_push_transition_key_interrupted(self):",
          "75:         keymap = [(\"a\", {\"b\": \"command_ab\"})]",
          "76:         translator = KeymapTranslator(keymap)",
          "77:         evt1 = Event(\"key\", \"a\")",
          "78:         evt2 = Event(\"key\", \"c\")",
          "79:         evt3 = Event(\"key\", \"b\")",
          "80:         translator.push(evt1)",
          "81:         translator.push(evt2)",
          "82:         translator.push(evt3)",
          "83:         result = translator.get()",
          "84:         self.assertEqual(result, (None, [\"a\", \"c\"]))",
          "86:     def test_push_invalid_key_with_unicode_category(self):",
          "87:         keymap = [(\"a\", \"command_a\")]",
          "88:         translator = KeymapTranslator(keymap)",
          "89:         evt = Event(\"key\", \"\\u0003\")  # Control character",
          "90:         translator.push(evt)",
          "91:         result = translator.get()",
          "92:         self.assertEqual(result, (None, [\"\\u0003\"]))",
          "94:     def test_empty(self):",
          "95:         keymap = [(\"a\", \"command_a\")]",
          "96:         translator = KeymapTranslator(keymap)",
          "97:         self.assertTrue(translator.empty())",
          "98:         evt = Event(\"key\", \"a\")",
          "99:         translator.push(evt)",
          "100:         self.assertFalse(translator.empty())",
          "101:         translator.get()",
          "102:         self.assertTrue(translator.empty())",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_keymap.py||Lib/test/test_pyrepl/test_keymap.py": [
          "File: Lib/test/test_pyrepl/test_keymap.py -> Lib/test/test_pyrepl/test_keymap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import unittest",
          "3: from _pyrepl.keymap import parse_keys, compile_keymap",
          "6: class TestParseKeys(unittest.TestCase):",
          "7:     def test_single_character(self):",
          "8:         self.assertEqual(parse_keys(\"a\"), [\"a\"])",
          "9:         self.assertEqual(parse_keys(\"b\"), [\"b\"])",
          "10:         self.assertEqual(parse_keys(\"1\"), [\"1\"])",
          "12:     def test_escape_sequences(self):",
          "13:         self.assertEqual(parse_keys(\"\\\\n\"), [\"\\n\"])",
          "14:         self.assertEqual(parse_keys(\"\\\\t\"), [\"\\t\"])",
          "15:         self.assertEqual(parse_keys(\"\\\\\\\\\"), [\"\\\\\"])",
          "16:         self.assertEqual(parse_keys(\"\\\\'\"), [\"'\"])",
          "17:         self.assertEqual(parse_keys('\\\\\"'), ['\"'])",
          "19:     def test_control_sequences(self):",
          "20:         self.assertEqual(parse_keys(\"\\\\C-a\"), [\"\\x01\"])",
          "21:         self.assertEqual(parse_keys(\"\\\\C-b\"), [\"\\x02\"])",
          "22:         self.assertEqual(parse_keys(\"\\\\C-c\"), [\"\\x03\"])",
          "24:     def test_meta_sequences(self):",
          "25:         self.assertEqual(parse_keys(\"\\\\M-a\"), [\"\\033\", \"a\"])",
          "26:         self.assertEqual(parse_keys(\"\\\\M-b\"), [\"\\033\", \"b\"])",
          "27:         self.assertEqual(parse_keys(\"\\\\M-c\"), [\"\\033\", \"c\"])",
          "29:     def test_keynames(self):",
          "30:         self.assertEqual(parse_keys(\"\\\\<up>\"), [\"up\"])",
          "31:         self.assertEqual(parse_keys(\"\\\\<down>\"), [\"down\"])",
          "32:         self.assertEqual(parse_keys(\"\\\\<left>\"), [\"left\"])",
          "33:         self.assertEqual(parse_keys(\"\\\\<right>\"), [\"right\"])",
          "35:     def test_combinations(self):",
          "36:         self.assertEqual(parse_keys(\"\\\\C-a\\\\n\\\\<up>\"), [\"\\x01\", \"\\n\", \"up\"])",
          "37:         self.assertEqual(parse_keys(\"\\\\M-a\\\\t\\\\<down>\"), [\"\\033\", \"a\", \"\\t\", \"down\"])",
          "40: class TestCompileKeymap(unittest.TestCase):",
          "41:     def test_empty_keymap(self):",
          "42:         keymap = {}",
          "43:         result = compile_keymap(keymap)",
          "44:         self.assertEqual(result, {})",
          "46:     def test_single_keymap(self):",
          "47:         keymap = {b\"a\": \"action\"}",
          "48:         result = compile_keymap(keymap)",
          "49:         self.assertEqual(result, {b\"a\": \"action\"})",
          "51:     def test_nested_keymap(self):",
          "52:         keymap = {b\"a\": {b\"b\": \"action\"}}",
          "53:         result = compile_keymap(keymap)",
          "54:         self.assertEqual(result, {b\"a\": {b\"b\": \"action\"}})",
          "56:     def test_empty_value(self):",
          "57:         keymap = {b\"a\": {b\"\": \"action\"}}",
          "58:         result = compile_keymap(keymap)",
          "59:         self.assertEqual(result, {b\"a\": {b\"\": \"action\"}})",
          "61:     def test_multiple_empty_values(self):",
          "62:         keymap = {b\"a\": {b\"\": \"action1\", b\"b\": \"action2\"}}",
          "63:         result = compile_keymap(keymap)",
          "64:         self.assertEqual(result, {b\"a\": {b\"\": \"action1\", b\"b\": \"action2\"}})",
          "66:     def test_multiple_keymaps(self):",
          "67:         keymap = {b\"a\": {b\"b\": \"action1\", b\"c\": \"action2\"}}",
          "68:         result = compile_keymap(keymap)",
          "69:         self.assertEqual(result, {b\"a\": {b\"b\": \"action1\", b\"c\": \"action2\"}})",
          "71:     def test_nested_multiple_keymaps(self):",
          "72:         keymap = {b\"a\": {b\"b\": {b\"c\": \"action\"}}}",
          "73:         result = compile_keymap(keymap)",
          "74:         self.assertEqual(result, {b\"a\": {b\"b\": {b\"c\": \"action\"}}})",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import itertools",
          "2: import os",
          "3: import rlcompleter",
          "6: import unittest",
          "9: from unittest import TestCase",
          "23: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "168: class TestCursorPosition(TestCase):",
          "",
          "[Removed Lines]",
          "4: import sys",
          "5: import tempfile",
          "7: from code import InteractiveConsole",
          "8: from functools import partial",
          "10: from unittest.mock import MagicMock, patch",
          "12: from test.support import requires",
          "13: from test.support.import_helper import import_module",
          "15: # Optionally test pyrepl.  This currently requires that the",
          "16: # 'curses' resource be given on the regrtest command line using the -u",
          "17: # option.  Additionally, we need to attempt to import curses and readline.",
          "18: requires(\"curses\")",
          "19: curses = import_module(\"curses\")",
          "20: readline = import_module(\"readline\")",
          "22: from _pyrepl.console import Console, Event",
          "24: from _pyrepl.simple_interact import _strip_final_indent",
          "25: from _pyrepl.unix_eventqueue import EventQueue",
          "26: from _pyrepl.simple_interact import InteractiveColoredConsole",
          "29: def more_lines(unicodetext, namespace=None):",
          "30:     if namespace is None:",
          "31:         namespace = {}",
          "32:     src = _strip_final_indent(unicodetext)",
          "33:     console = InteractiveConsole(namespace, filename=\"<stdin>\")",
          "34:     try:",
          "35:         code = console.compile(src, \"<stdin>\", \"single\")",
          "36:     except (OverflowError, SyntaxError, ValueError):",
          "37:         return False",
          "38:     else:",
          "39:         return code is None",
          "42: def multiline_input(reader, namespace=None):",
          "43:     saved = reader.more_lines",
          "44:     try:",
          "45:         reader.more_lines = partial(more_lines, namespace=namespace)",
          "46:         reader.ps1 = reader.ps2 = \">>>\"",
          "47:         reader.ps3 = reader.ps4 = \"...\"",
          "48:         return reader.readline()",
          "49:     finally:",
          "50:         reader.more_lines = saved",
          "51:         reader.paste_mode = False",
          "54: def code_to_events(code):",
          "55:     for c in code:",
          "56:         yield Event(evt=\"key\", data=c, raw=bytearray(c.encode(\"utf-8\")))",
          "59: def prepare_mock_console(events, **kwargs):",
          "60:     console = MagicMock()",
          "61:     console.get_event.side_effect = events",
          "62:     console.height = 100",
          "63:     console.width = 80",
          "64:     for key, val in kwargs.items():",
          "65:         setattr(console, key, val)",
          "66:     return console",
          "69: def prepare_fake_console(**kwargs):",
          "70:     console = FakeConsole()",
          "71:     for key, val in kwargs.items():",
          "72:         setattr(console, key, val)",
          "73:     return console",
          "76: def prepare_reader(console, **kwargs):",
          "77:     config = ReadlineConfig(readline_completer=None)",
          "78:     reader = ReadlineAlikeReader(console=console, config=config)",
          "79:     reader.more_lines = partial(more_lines, namespace=None)",
          "80:     reader.paste_mode = True  # Avoid extra indents",
          "82:     def get_prompt(lineno, cursor_on_line) -> str:",
          "83:         return \"\"",
          "85:     reader.get_prompt = get_prompt  # Remove prompt for easier calculations of (x, y)",
          "87:     for key, val in kwargs.items():",
          "88:         setattr(reader, key, val)",
          "90:     return reader",
          "93: def handle_all_events(",
          "94:     events, prepare_console=prepare_mock_console, prepare_reader=prepare_reader",
          "95: ):",
          "96:     console = prepare_console(events)",
          "97:     reader = prepare_reader(console)",
          "98:     try:",
          "99:         while True:",
          "100:             reader.handle1()",
          "101:     except StopIteration:",
          "102:         pass",
          "103:     return reader, console",
          "106: handle_events_narrow_console = partial(",
          "107:     handle_all_events, prepare_console=partial(prepare_mock_console, width=10)",
          "108: )",
          "111: class FakeConsole(Console):",
          "112:     def __init__(self, events, encoding=\"utf-8\"):",
          "113:         self.events = iter(events)",
          "114:         self.encoding = encoding",
          "115:         self.screen = []",
          "116:         self.height = 100",
          "117:         self.width = 80",
          "119:     def get_event(self, block: bool = True) -> Event | None:",
          "120:         return next(self.events)",
          "122:     def getpending(self) -> Event:",
          "123:         return self.get_event(block=False)",
          "125:     def getheightwidth(self) -> tuple[int, int]:",
          "126:         return self.height, self.width",
          "128:     def refresh(self, screen: list[str], xy: tuple[int, int]) -> None:",
          "129:         pass",
          "131:     def prepare(self) -> None:",
          "132:         pass",
          "134:     def restore(self) -> None:",
          "135:         pass",
          "137:     def move_cursor(self, x: int, y: int) -> None:",
          "138:         pass",
          "140:     def set_cursor_vis(self, visible: bool) -> None:",
          "141:         pass",
          "143:     def push_char(self, char: int | bytes) -> None:",
          "144:         pass",
          "146:     def beep(self) -> None:",
          "147:         pass",
          "149:     def clear(self) -> None:",
          "150:         pass",
          "152:     def finish(self) -> None:",
          "153:         pass",
          "155:     def flushoutput(self) -> None:",
          "156:         pass",
          "158:     def forgetinput(self) -> None:",
          "159:         pass",
          "161:     def wait(self) -> None:",
          "162:         pass",
          "164:     def repaint(self) -> None:",
          "165:         pass",
          "",
          "[Added Lines]",
          "7: from .support import FakeConsole, handle_all_events, handle_events_narrow_console, multiline_input, code_to_events",
          "8: from _pyrepl.console import Event",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:         events = itertools.chain(",
          "618:             code_to_events(code),",
          "619:             [",
          "621:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "622:             ],",
          "624:         )",
          "625:         reader = self.prepare_reader(events, namespace=namespace)",
          "626:         output = multiline_input(reader, namespace)",
          "",
          "[Removed Lines]",
          "620:                 Event(evt='key', data='up', raw=bytearray(b'\\x1bOA')),",
          "623:             code_to_events(\"\\n\")",
          "",
          "[Added Lines]",
          "464:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "467:             code_to_events(\"\\n\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "632:         self.assertEqual(output, \"os.\")",
          "742: class TestPasteEvent(TestCase):",
          "743:     def prepare_reader(self, events):",
          "744:         console = FakeConsole(events)",
          "",
          "[Removed Lines]",
          "635: @patch(\"_pyrepl.curses.tigetstr\", lambda x: b\"\")",
          "636: class TestUnivEventQueue(TestCase):",
          "637:     def setUp(self):",
          "638:         self.file = tempfile.TemporaryFile()",
          "640:     def tearDown(self) -> None:",
          "641:         self.file.close()",
          "643:     def test_get(self):",
          "644:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "645:         event = Event(\"key\", \"a\", b\"a\")",
          "646:         eq.insert(event)",
          "647:         self.assertEqual(eq.get(), event)",
          "649:     def test_empty(self):",
          "650:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "651:         self.assertTrue(eq.empty())",
          "652:         eq.insert(Event(\"key\", \"a\", b\"a\"))",
          "653:         self.assertFalse(eq.empty())",
          "655:     def test_flush_buf(self):",
          "656:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "657:         eq.buf.extend(b\"test\")",
          "658:         self.assertEqual(eq.flush_buf(), b\"test\")",
          "659:         self.assertEqual(eq.buf, bytearray())",
          "661:     def test_insert(self):",
          "662:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "663:         event = Event(\"key\", \"a\", b\"a\")",
          "664:         eq.insert(event)",
          "665:         self.assertEqual(eq.events[0], event)",
          "667:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "668:     def test_push_with_key_in_keymap(self, mock_keymap):",
          "669:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "670:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "671:         eq.keymap = {b\"a\": \"b\"}",
          "672:         eq.push(\"a\")",
          "673:         mock_keymap.compile_keymap.assert_called()",
          "674:         self.assertEqual(eq.events[0].evt, \"key\")",
          "675:         self.assertEqual(eq.events[0].data, \"b\")",
          "677:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "678:     def test_push_without_key_in_keymap(self, mock_keymap):",
          "679:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "680:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "681:         eq.keymap = {b\"c\": \"d\"}",
          "682:         eq.push(\"a\")",
          "683:         mock_keymap.compile_keymap.assert_called()",
          "684:         self.assertEqual(eq.events[0].evt, \"key\")",
          "685:         self.assertEqual(eq.events[0].data, \"a\")",
          "687:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "688:     def test_push_with_keymap_in_keymap(self, mock_keymap):",
          "689:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "690:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "691:         eq.keymap = {b\"a\": {b\"b\": \"c\"}}",
          "692:         eq.push(\"a\")",
          "693:         mock_keymap.compile_keymap.assert_called()",
          "694:         self.assertTrue(eq.empty())",
          "695:         eq.push(\"b\")",
          "696:         self.assertEqual(eq.events[0].evt, \"key\")",
          "697:         self.assertEqual(eq.events[0].data, \"c\")",
          "698:         eq.push(\"d\")",
          "699:         self.assertEqual(eq.events[1].evt, \"key\")",
          "700:         self.assertEqual(eq.events[1].data, \"d\")",
          "702:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "703:     def test_push_with_keymap_in_keymap_and_escape(self, mock_keymap):",
          "704:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "705:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "706:         eq.keymap = {b\"a\": {b\"b\": \"c\"}}",
          "707:         eq.push(\"a\")",
          "708:         mock_keymap.compile_keymap.assert_called()",
          "709:         self.assertTrue(eq.empty())",
          "710:         eq.flush_buf()",
          "711:         eq.push(\"\\033\")",
          "712:         self.assertEqual(eq.events[0].evt, \"key\")",
          "713:         self.assertEqual(eq.events[0].data, \"\\033\")",
          "714:         eq.push(\"b\")",
          "715:         self.assertEqual(eq.events[1].evt, \"key\")",
          "716:         self.assertEqual(eq.events[1].data, \"b\")",
          "718:     def test_push_special_key(self):",
          "719:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "720:         eq.keymap = {}",
          "721:         eq.push(\"\\x1b\")",
          "722:         eq.push(\"[\")",
          "723:         eq.push(\"A\")",
          "724:         self.assertEqual(eq.events[0].evt, \"key\")",
          "725:         self.assertEqual(eq.events[0].data, \"\\x1b\")",
          "727:     def test_push_unrecognized_escape_sequence(self):",
          "728:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "729:         eq.keymap = {}",
          "730:         eq.push(\"\\x1b\")",
          "731:         eq.push(\"[\")",
          "732:         eq.push(\"Z\")",
          "733:         self.assertEqual(len(eq.events), 3)",
          "734:         self.assertEqual(eq.events[0].evt, \"key\")",
          "735:         self.assertEqual(eq.events[0].data, \"\\x1b\")",
          "736:         self.assertEqual(eq.events[1].evt, \"key\")",
          "737:         self.assertEqual(eq.events[1].data, \"[\")",
          "738:         self.assertEqual(eq.events[2].evt, \"key\")",
          "739:         self.assertEqual(eq.events[2].data, \"Z\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "898:         self.assertEqual(output, input_code)",
          "1029:     unittest.main()",
          "",
          "[Removed Lines]",
          "901: class TestReader(TestCase):",
          "902:     def assert_screen_equals(self, reader, expected):",
          "903:         actual = reader.calc_screen()",
          "904:         expected = expected.split(\"\\n\")",
          "905:         self.assertListEqual(actual, expected)",
          "907:     def test_calc_screen_wrap_simple(self):",
          "908:         events = code_to_events(10 * \"a\")",
          "909:         reader, _ = handle_events_narrow_console(events)",
          "910:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\na\")",
          "912:     def test_calc_screen_wrap_wide_characters(self):",
          "913:         events = code_to_events(8 * \"a\" + \"\u6a02\")",
          "914:         reader, _ = handle_events_narrow_console(events)",
          "915:         self.assert_screen_equals(reader, f\"{8*\"a\"}\\\\\\n\u6a02\")",
          "917:     def test_calc_screen_wrap_three_lines(self):",
          "918:         events = code_to_events(20 * \"a\")",
          "919:         reader, _ = handle_events_narrow_console(events)",
          "920:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\n{9*\"a\"}\\\\\\naa\")",
          "922:     def test_calc_screen_wrap_three_lines_mixed_character(self):",
          "923:         # fmt: off",
          "924:         code = (",
          "925:             \"def f():\\n\"",
          "926:            f\"  {8*\"a\"}\\n\"",
          "927:            f\"  {5*\"\u6a02\"}\"",
          "928:         )",
          "929:         # fmt: on",
          "931:         events = code_to_events(code)",
          "932:         reader, _ = handle_events_narrow_console(events)",
          "934:         # fmt: off",
          "935:         self.assert_screen_equals(reader, (",
          "936:             \"def f():\\n\"",
          "937:            f\"  {7*\"a\"}\\\\\\n\"",
          "938:             \"a\\n\"",
          "939:            f\"  {3*\"\u6a02\"}\\\\\\n\"",
          "940:             \"\u6a02\u6a02\"",
          "941:         ))",
          "942:         # fmt: on",
          "944:     def test_calc_screen_backspace(self):",
          "945:         events = itertools.chain(",
          "946:             code_to_events(\"aaa\"),",
          "947:             [",
          "948:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "949:             ],",
          "950:         )",
          "951:         reader, _ = handle_all_events(events)",
          "952:         self.assert_screen_equals(reader, \"aa\")",
          "954:     def test_calc_screen_wrap_removes_after_backspace(self):",
          "955:         events = itertools.chain(",
          "956:             code_to_events(10 * \"a\"),",
          "957:             [",
          "958:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "959:             ],",
          "960:         )",
          "961:         reader, _ = handle_events_narrow_console(events)",
          "962:         self.assert_screen_equals(reader, 9 * \"a\")",
          "964:     def test_calc_screen_backspace_in_second_line_after_wrap(self):",
          "965:         events = itertools.chain(",
          "966:             code_to_events(11 * \"a\"),",
          "967:             [",
          "968:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "969:             ],",
          "970:         )",
          "971:         reader, _ = handle_events_narrow_console(events)",
          "972:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\na\")",
          "974:     def test_setpos_for_xy_simple(self):",
          "975:         events = code_to_events(\"11+11\")",
          "976:         reader, _ = handle_all_events(events)",
          "977:         reader.setpos_from_xy(0, 0)",
          "978:         self.assertEqual(reader.pos, 0)",
          "980:     def test_setpos_from_xy_multiple_lines(self):",
          "981:         # fmt: off",
          "982:         code = (",
          "983:             \"def foo():\\n\"",
          "984:             \"  return 1\"",
          "985:         )",
          "986:         # fmt: on",
          "988:         events = code_to_events(code)",
          "989:         reader, _ = handle_all_events(events)",
          "990:         reader.setpos_from_xy(2, 1)",
          "991:         self.assertEqual(reader.pos, 13)",
          "993:     def test_setpos_from_xy_after_wrap(self):",
          "994:         # fmt: off",
          "995:         code = (",
          "996:             \"def foo():\\n\"",
          "997:             \"  hello\"",
          "998:         )",
          "999:         # fmt: on",
          "1001:         events = code_to_events(code)",
          "1002:         reader, _ = handle_events_narrow_console(events)",
          "1003:         reader.setpos_from_xy(2, 2)",
          "1004:         self.assertEqual(reader.pos, 13)",
          "1006:     def test_setpos_fromxy_in_wrapped_line(self):",
          "1007:         # fmt: off",
          "1008:         code = (",
          "1009:             \"def foo():\\n\"",
          "1010:             \"  hello\"",
          "1011:         )",
          "1012:         # fmt: on",
          "1014:         events = code_to_events(code)",
          "1015:         reader, _ = handle_events_narrow_console(events)",
          "1016:         reader.setpos_from_xy(0, 1)",
          "1017:         self.assertEqual(reader.pos, 9)",
          "1019:     def test_up_arrow_after_ctrl_r(self):",
          "1020:         events = iter([",
          "1021:             Event(evt='key', data='\\x12', raw=bytearray(b'\\x12')),",
          "1022:             Event(evt='key', data='up', raw=bytearray(b'\\x1bOA')),",
          "1023:         ])",
          "1025:         reader, _ = handle_all_events(events)",
          "1026:         self.assert_screen_equals(reader, \"\")",
          "1028: if __name__ == '__main__':",
          "",
          "[Added Lines]",
          "638: if __name__ == \"__main__\":",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import itertools",
          "2: from unittest import TestCase",
          "4: from .support import handle_all_events, handle_events_narrow_console, code_to_events",
          "5: from _pyrepl.console import Event",
          "8: class TestReader(TestCase):",
          "9:     def assert_screen_equals(self, reader, expected):",
          "10:         actual = reader.calc_screen()",
          "11:         expected = expected.split(\"\\n\")",
          "12:         self.assertListEqual(actual, expected)",
          "14:     def test_calc_screen_wrap_simple(self):",
          "15:         events = code_to_events(10 * \"a\")",
          "16:         reader, _ = handle_events_narrow_console(events)",
          "17:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\na\")",
          "19:     def test_calc_screen_wrap_wide_characters(self):",
          "20:         events = code_to_events(8 * \"a\" + \"\u6a02\")",
          "21:         reader, _ = handle_events_narrow_console(events)",
          "22:         self.assert_screen_equals(reader, f\"{8*\"a\"}\\\\\\n\u6a02\")",
          "24:     def test_calc_screen_wrap_three_lines(self):",
          "25:         events = code_to_events(20 * \"a\")",
          "26:         reader, _ = handle_events_narrow_console(events)",
          "27:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\n{9*\"a\"}\\\\\\naa\")",
          "29:     def test_calc_screen_wrap_three_lines_mixed_character(self):",
          "30:         # fmt: off",
          "31:         code = (",
          "32:             \"def f():\\n\"",
          "33:            f\"  {8*\"a\"}\\n\"",
          "34:            f\"  {5*\"\u6a02\"}\"",
          "35:         )",
          "36:         # fmt: on",
          "38:         events = code_to_events(code)",
          "39:         reader, _ = handle_events_narrow_console(events)",
          "41:         # fmt: off",
          "42:         self.assert_screen_equals(reader, (",
          "43:             \"def f():\\n\"",
          "44:            f\"  {7*\"a\"}\\\\\\n\"",
          "45:             \"a\\n\"",
          "46:            f\"  {3*\"\u6a02\"}\\\\\\n\"",
          "47:             \"\u6a02\u6a02\"",
          "48:         ))",
          "49:         # fmt: on",
          "51:     def test_calc_screen_backspace(self):",
          "52:         events = itertools.chain(",
          "53:             code_to_events(\"aaa\"),",
          "54:             [",
          "55:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "56:             ],",
          "57:         )",
          "58:         reader, _ = handle_all_events(events)",
          "59:         self.assert_screen_equals(reader, \"aa\")",
          "61:     def test_calc_screen_wrap_removes_after_backspace(self):",
          "62:         events = itertools.chain(",
          "63:             code_to_events(10 * \"a\"),",
          "64:             [",
          "65:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "66:             ],",
          "67:         )",
          "68:         reader, _ = handle_events_narrow_console(events)",
          "69:         self.assert_screen_equals(reader, 9 * \"a\")",
          "71:     def test_calc_screen_backspace_in_second_line_after_wrap(self):",
          "72:         events = itertools.chain(",
          "73:             code_to_events(11 * \"a\"),",
          "74:             [",
          "75:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "76:             ],",
          "77:         )",
          "78:         reader, _ = handle_events_narrow_console(events)",
          "79:         self.assert_screen_equals(reader, f\"{9*\"a\"}\\\\\\na\")",
          "81:     def test_setpos_for_xy_simple(self):",
          "82:         events = code_to_events(\"11+11\")",
          "83:         reader, _ = handle_all_events(events)",
          "84:         reader.setpos_from_xy(0, 0)",
          "85:         self.assertEqual(reader.pos, 0)",
          "87:     def test_setpos_from_xy_multiple_lines(self):",
          "88:         # fmt: off",
          "89:         code = (",
          "90:             \"def foo():\\n\"",
          "91:             \"  return 1\"",
          "92:         )",
          "93:         # fmt: on",
          "95:         events = code_to_events(code)",
          "96:         reader, _ = handle_all_events(events)",
          "97:         reader.setpos_from_xy(2, 1)",
          "98:         self.assertEqual(reader.pos, 13)",
          "100:     def test_setpos_from_xy_after_wrap(self):",
          "101:         # fmt: off",
          "102:         code = (",
          "103:             \"def foo():\\n\"",
          "104:             \"  hello\"",
          "105:         )",
          "106:         # fmt: on",
          "108:         events = code_to_events(code)",
          "109:         reader, _ = handle_events_narrow_console(events)",
          "110:         reader.setpos_from_xy(2, 2)",
          "111:         self.assertEqual(reader.pos, 13)",
          "113:     def test_setpos_fromxy_in_wrapped_line(self):",
          "114:         # fmt: off",
          "115:         code = (",
          "116:             \"def foo():\\n\"",
          "117:             \"  hello\"",
          "118:         )",
          "119:         # fmt: on",
          "121:         events = code_to_events(code)",
          "122:         reader, _ = handle_events_narrow_console(events)",
          "123:         reader.setpos_from_xy(0, 1)",
          "124:         self.assertEqual(reader.pos, 9)",
          "126:     def test_up_arrow_after_ctrl_r(self):",
          "127:         events = iter(",
          "128:             [",
          "129:                 Event(evt=\"key\", data=\"\\x12\", raw=bytearray(b\"\\x12\")),",
          "130:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "131:             ]",
          "132:         )",
          "134:         reader, _ = handle_all_events(events)",
          "135:         self.assert_screen_equals(reader, \"\")",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py": [
          "File: Lib/test/test_pyrepl/test_unix_console.py -> Lib/test/test_pyrepl/test_unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import itertools",
          "2: from functools import partial",
          "3: from unittest import TestCase",
          "4: from unittest.mock import MagicMock, call, patch, ANY",
          "6: from .support import handle_all_events, code_to_events",
          "7: from _pyrepl.console import Event",
          "8: from _pyrepl.unix_console import UnixConsole",
          "11: def unix_console(events, **kwargs):",
          "12:     console = UnixConsole()",
          "13:     console.get_event = MagicMock(side_effect=events)",
          "15:     height = kwargs.get(\"height\", 25)",
          "16:     width = kwargs.get(\"width\", 80)",
          "17:     console.getheightwidth = MagicMock(side_effect=lambda: (height, width))",
          "19:     console.prepare()",
          "20:     for key, val in kwargs.items():",
          "21:         setattr(console, key, val)",
          "22:     return console",
          "25: handle_events_unix_console = partial(",
          "26:     handle_all_events,",
          "27:     prepare_console=partial(unix_console),",
          "28: )",
          "29: handle_events_narrow_unix_console = partial(",
          "30:     handle_all_events,",
          "31:     prepare_console=partial(unix_console, width=5),",
          "32: )",
          "33: handle_events_short_unix_console = partial(",
          "34:     handle_all_events,",
          "35:     prepare_console=partial(unix_console, height=1),",
          "36: )",
          "37: handle_events_unix_console_height_3 = partial(",
          "38:     handle_all_events, prepare_console=partial(unix_console, height=3)",
          "39: )",
          "42: TERM_CAPABILITIES = {",
          "43:     \"bel\": b\"\\x07\",",
          "44:     \"civis\": b\"\\x1b[?25l\",",
          "45:     \"clear\": b\"\\x1b[H\\x1b[2J\",",
          "46:     \"cnorm\": b\"\\x1b[?12l\\x1b[?25h\",",
          "47:     \"cub\": b\"\\x1b[%p1%dD\",",
          "48:     \"cub1\": b\"\\x08\",",
          "49:     \"cud\": b\"\\x1b[%p1%dB\",",
          "50:     \"cud1\": b\"\\n\",",
          "51:     \"cuf\": b\"\\x1b[%p1%dC\",",
          "52:     \"cuf1\": b\"\\x1b[C\",",
          "53:     \"cup\": b\"\\x1b[%i%p1%d;%p2%dH\",",
          "54:     \"cuu\": b\"\\x1b[%p1%dA\",",
          "55:     \"cuu1\": b\"\\x1b[A\",",
          "56:     \"dch1\": b\"\\x1b[P\",",
          "57:     \"dch\": b\"\\x1b[%p1%dP\",",
          "58:     \"el\": b\"\\x1b[K\",",
          "59:     \"hpa\": b\"\\x1b[%i%p1%dG\",",
          "60:     \"ich\": b\"\\x1b[%p1%d@\",",
          "61:     \"ich1\": None,",
          "62:     \"ind\": b\"\\n\",",
          "63:     \"pad\": None,",
          "64:     \"ri\": b\"\\x1bM\",",
          "65:     \"rmkx\": b\"\\x1b[?1l\\x1b>\",",
          "66:     \"smkx\": b\"\\x1b[?1h\\x1b=\",",
          "67: }",
          "70: @patch(\"_pyrepl.curses.tigetstr\", lambda s: TERM_CAPABILITIES.get(s))",
          "71: @patch(",
          "72:     \"_pyrepl.curses.tparm\",",
          "73:     lambda s, *args: s + b\":\" + b\",\".join(str(i).encode() for i in args),",
          "74: )",
          "75: @patch(\"_pyrepl.curses.setupterm\", lambda a, b: None)",
          "76: @patch(",
          "77:     \"termios.tcgetattr\",",
          "78:     lambda _: [",
          "79:         27394,",
          "80:         3,",
          "81:         19200,",
          "82:         536872399,",
          "83:         38400,",
          "84:         38400,",
          "85:         [",
          "86:             b\"\\x04\",",
          "87:             b\"\\xff\",",
          "88:             b\"\\xff\",",
          "89:             b\"\\x7f\",",
          "90:             b\"\\x17\",",
          "91:             b\"\\x15\",",
          "92:             b\"\\x12\",",
          "93:             b\"\\x00\",",
          "94:             b\"\\x03\",",
          "95:             b\"\\x1c\",",
          "96:             b\"\\x1a\",",
          "97:             b\"\\x19\",",
          "98:             b\"\\x11\",",
          "99:             b\"\\x13\",",
          "100:             b\"\\x16\",",
          "101:             b\"\\x0f\",",
          "102:             b\"\\x01\",",
          "103:             b\"\\x00\",",
          "104:             b\"\\x14\",",
          "105:             b\"\\x00\",",
          "106:         ],",
          "107:     ],",
          "108: )",
          "109: @patch(\"termios.tcsetattr\", lambda a, b, c: None)",
          "110: @patch(\"os.write\")",
          "111: class TestConsole(TestCase):",
          "112:     def test_simple_addition(self, _os_write):",
          "113:         code = \"12+34\"",
          "114:         events = code_to_events(code)",
          "115:         _, _ = handle_events_unix_console(events)",
          "116:         _os_write.assert_any_call(ANY, b\"1\")",
          "117:         _os_write.assert_any_call(ANY, b\"2\")",
          "118:         _os_write.assert_any_call(ANY, b\"+\")",
          "119:         _os_write.assert_any_call(ANY, b\"3\")",
          "120:         _os_write.assert_any_call(ANY, b\"4\")",
          "122:     def test_wrap(self, _os_write):",
          "123:         code = \"12+34\"",
          "124:         events = code_to_events(code)",
          "125:         _, _ = handle_events_narrow_unix_console(events)",
          "126:         _os_write.assert_any_call(ANY, b\"1\")",
          "127:         _os_write.assert_any_call(ANY, b\"2\")",
          "128:         _os_write.assert_any_call(ANY, b\"+\")",
          "129:         _os_write.assert_any_call(ANY, b\"3\")",
          "130:         _os_write.assert_any_call(ANY, b\"\\\\\")",
          "131:         _os_write.assert_any_call(ANY, b\"\\n\")",
          "132:         _os_write.assert_any_call(ANY, b\"4\")",
          "134:     def test_cursor_left(self, _os_write):",
          "135:         code = \"1\"",
          "136:         events = itertools.chain(",
          "137:             code_to_events(code),",
          "138:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "139:         )",
          "140:         _, _ = handle_events_unix_console(events)",
          "141:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "143:     def test_cursor_left_right(self, _os_write):",
          "144:         code = \"1\"",
          "145:         events = itertools.chain(",
          "146:             code_to_events(code),",
          "147:             [",
          "148:                 Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\")),",
          "149:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "150:             ],",
          "151:         )",
          "152:         _, _ = handle_events_unix_console(events)",
          "153:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "154:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuf\"] + b\":1\")",
          "156:     def test_cursor_up(self, _os_write):",
          "157:         code = \"1\\n2+3\"",
          "158:         events = itertools.chain(",
          "159:             code_to_events(code),",
          "160:             [Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\"))],",
          "161:         )",
          "162:         _, _ = handle_events_unix_console(events)",
          "163:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "165:     def test_cursor_up_down(self, _os_write):",
          "166:         code = \"1\\n2+3\"",
          "167:         events = itertools.chain(",
          "168:             code_to_events(code),",
          "169:             [",
          "170:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "171:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "172:             ],",
          "173:         )",
          "174:         _, _ = handle_events_unix_console(events)",
          "175:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "176:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cud\"] + b\":1\")",
          "178:     def test_cursor_back_write(self, _os_write):",
          "179:         events = itertools.chain(",
          "180:             code_to_events(\"1\"),",
          "181:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "182:             code_to_events(\"2\"),",
          "183:         )",
          "184:         _, _ = handle_events_unix_console(events)",
          "185:         _os_write.assert_any_call(ANY, b\"1\")",
          "186:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "187:         _os_write.assert_any_call(ANY, b\"2\")",
          "189:     def test_multiline_function_move_up_short_terminal(self, _os_write):",
          "190:         # fmt: off",
          "191:         code = (",
          "192:             \"def f():\\n\"",
          "193:             \"  foo\"",
          "194:         )",
          "195:         # fmt: on",
          "197:         events = itertools.chain(",
          "198:             code_to_events(code),",
          "199:             [",
          "200:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "201:                 Event(evt=\"scroll\", data=None),",
          "202:             ],",
          "203:         )",
          "204:         _, _ = handle_events_short_unix_console(events)",
          "205:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "207:     def test_multiline_function_move_up_down_short_terminal(self, _os_write):",
          "208:         # fmt: off",
          "209:         code = (",
          "210:             \"def f():\\n\"",
          "211:             \"  foo\"",
          "212:         )",
          "213:         # fmt: on",
          "215:         events = itertools.chain(",
          "216:             code_to_events(code),",
          "217:             [",
          "218:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "219:                 Event(evt=\"scroll\", data=None),",
          "220:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "221:                 Event(evt=\"scroll\", data=None),",
          "222:             ],",
          "223:         )",
          "224:         _, _ = handle_events_short_unix_console(events)",
          "225:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "226:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ind\"] + b\":\")",
          "228:     def test_resize_bigger_on_multiline_function(self, _os_write):",
          "229:         # fmt: off",
          "230:         code = (",
          "231:             \"def f():\\n\"",
          "232:             \"  foo\"",
          "233:         )",
          "234:         # fmt: on",
          "236:         events = itertools.chain(code_to_events(code))",
          "237:         reader, console = handle_events_short_unix_console(events)",
          "239:         console.height = 2",
          "240:         console.getheightwidth = MagicMock(lambda _: (2, 80))",
          "242:         def same_reader(_):",
          "243:             return reader",
          "245:         def same_console(events):",
          "246:             console.get_event = MagicMock(side_effect=events)",
          "247:             return console",
          "249:         _, _ = handle_all_events(",
          "250:             [Event(evt=\"resize\", data=None)],",
          "251:             prepare_reader=same_reader,",
          "252:             prepare_console=same_console,",
          "253:         )",
          "254:         _os_write.assert_has_calls(",
          "255:             [",
          "256:                 call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\"),",
          "257:                 call(ANY, TERM_CAPABILITIES[\"cup\"] + b\":0,0\"),",
          "258:                 call(ANY, b\"def f():\"),",
          "259:             ]",
          "260:         )",
          "262:     def test_resize_smaller_on_multiline_function(self, _os_write):",
          "263:         # fmt: off",
          "264:         code = (",
          "265:             \"def f():\\n\"",
          "266:             \"  foo\"",
          "267:         )",
          "268:         # fmt: on",
          "270:         events = itertools.chain(code_to_events(code))",
          "271:         reader, console = handle_events_unix_console_height_3(events)",
          "273:         console.height = 1",
          "274:         console.getheightwidth = MagicMock(lambda _: (1, 80))",
          "276:         def same_reader(_):",
          "277:             return reader",
          "279:         def same_console(events):",
          "280:             console.get_event = MagicMock(side_effect=events)",
          "281:             return console",
          "283:         _, _ = handle_all_events(",
          "284:             [Event(evt=\"resize\", data=None)],",
          "285:             prepare_reader=same_reader,",
          "286:             prepare_console=same_console,",
          "287:         )",
          "288:         _os_write.assert_has_calls(",
          "289:             [",
          "290:                 call(ANY, TERM_CAPABILITIES[\"ind\"] + b\":\"),",
          "291:                 call(ANY, TERM_CAPABILITIES[\"cup\"] + b\":0,0\"),",
          "292:                 call(ANY, b\"  foo\"),",
          "293:             ]",
          "294:         )",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_unix_eventqueue.py||Lib/test/test_pyrepl/test_unix_eventqueue.py": [
          "File: Lib/test/test_pyrepl/test_unix_eventqueue.py -> Lib/test/test_pyrepl/test_unix_eventqueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import tempfile",
          "2: import unittest",
          "3: from unittest.mock import patch",
          "5: from _pyrepl.console import Event",
          "6: from _pyrepl.unix_eventqueue import EventQueue",
          "9: @patch(\"_pyrepl.curses.tigetstr\", lambda x: b\"\")",
          "10: class TestUnivEventQueue(unittest.TestCase):",
          "11:     def setUp(self):",
          "12:         self.file = tempfile.TemporaryFile()",
          "14:     def tearDown(self) -> None:",
          "15:         self.file.close()",
          "17:     def test_get(self):",
          "18:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "19:         event = Event(\"key\", \"a\", b\"a\")",
          "20:         eq.insert(event)",
          "21:         self.assertEqual(eq.get(), event)",
          "23:     def test_empty(self):",
          "24:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "25:         self.assertTrue(eq.empty())",
          "26:         eq.insert(Event(\"key\", \"a\", b\"a\"))",
          "27:         self.assertFalse(eq.empty())",
          "29:     def test_flush_buf(self):",
          "30:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "31:         eq.buf.extend(b\"test\")",
          "32:         self.assertEqual(eq.flush_buf(), b\"test\")",
          "33:         self.assertEqual(eq.buf, bytearray())",
          "35:     def test_insert(self):",
          "36:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "37:         event = Event(\"key\", \"a\", b\"a\")",
          "38:         eq.insert(event)",
          "39:         self.assertEqual(eq.events[0], event)",
          "41:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "42:     def test_push_with_key_in_keymap(self, mock_keymap):",
          "43:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "44:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "45:         eq.keymap = {b\"a\": \"b\"}",
          "46:         eq.push(\"a\")",
          "47:         mock_keymap.compile_keymap.assert_called()",
          "48:         self.assertEqual(eq.events[0].evt, \"key\")",
          "49:         self.assertEqual(eq.events[0].data, \"b\")",
          "51:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "52:     def test_push_without_key_in_keymap(self, mock_keymap):",
          "53:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "54:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "55:         eq.keymap = {b\"c\": \"d\"}",
          "56:         eq.push(\"a\")",
          "57:         mock_keymap.compile_keymap.assert_called()",
          "58:         self.assertEqual(eq.events[0].evt, \"key\")",
          "59:         self.assertEqual(eq.events[0].data, \"a\")",
          "61:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "62:     def test_push_with_keymap_in_keymap(self, mock_keymap):",
          "63:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "64:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "65:         eq.keymap = {b\"a\": {b\"b\": \"c\"}}",
          "66:         eq.push(\"a\")",
          "67:         mock_keymap.compile_keymap.assert_called()",
          "68:         self.assertTrue(eq.empty())",
          "69:         eq.push(\"b\")",
          "70:         self.assertEqual(eq.events[0].evt, \"key\")",
          "71:         self.assertEqual(eq.events[0].data, \"c\")",
          "72:         eq.push(\"d\")",
          "73:         self.assertEqual(eq.events[1].evt, \"key\")",
          "74:         self.assertEqual(eq.events[1].data, \"d\")",
          "76:     @patch(\"_pyrepl.unix_eventqueue.keymap\")",
          "77:     def test_push_with_keymap_in_keymap_and_escape(self, mock_keymap):",
          "78:         mock_keymap.compile_keymap.return_value = {\"a\": \"b\"}",
          "79:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "80:         eq.keymap = {b\"a\": {b\"b\": \"c\"}}",
          "81:         eq.push(\"a\")",
          "82:         mock_keymap.compile_keymap.assert_called()",
          "83:         self.assertTrue(eq.empty())",
          "84:         eq.flush_buf()",
          "85:         eq.push(\"\\033\")",
          "86:         self.assertEqual(eq.events[0].evt, \"key\")",
          "87:         self.assertEqual(eq.events[0].data, \"\\033\")",
          "88:         eq.push(\"b\")",
          "89:         self.assertEqual(eq.events[1].evt, \"key\")",
          "90:         self.assertEqual(eq.events[1].data, \"b\")",
          "92:     def test_push_special_key(self):",
          "93:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "94:         eq.keymap = {}",
          "95:         eq.push(\"\\x1b\")",
          "96:         eq.push(\"[\")",
          "97:         eq.push(\"A\")",
          "98:         self.assertEqual(eq.events[0].evt, \"key\")",
          "99:         self.assertEqual(eq.events[0].data, \"\\x1b\")",
          "101:     def test_push_unrecognized_escape_sequence(self):",
          "102:         eq = EventQueue(self.file.fileno(), \"utf-8\")",
          "103:         eq.keymap = {}",
          "104:         eq.push(\"\\x1b\")",
          "105:         eq.push(\"[\")",
          "106:         eq.push(\"Z\")",
          "107:         self.assertEqual(len(eq.events), 3)",
          "108:         self.assertEqual(eq.events[0].evt, \"key\")",
          "109:         self.assertEqual(eq.events[0].data, \"\\x1b\")",
          "110:         self.assertEqual(eq.events[1].evt, \"key\")",
          "111:         self.assertEqual(eq.events[1].data, \"[\")",
          "112:         self.assertEqual(eq.events[2].evt, \"key\")",
          "113:         self.assertEqual(eq.events[2].data, \"Z\")",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2447:   test/test_pathlib \\",
          "2448:   test/test_peg_generator \\",
          "2449:   test/test_pydoc \\",
          "2450:   test/test_sqlite3 \\",
          "2451:   test/test_tkinter \\",
          "2452:   test/test_tomllib \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2450:   test/test_pyrepl \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6238174e47a046dd6feb09ef4dd1bb55605ea0ad",
      "candidate_info": {
        "commit_hash": "6238174e47a046dd6feb09ef4dd1bb55605ea0ad",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6238174e47a046dd6feb09ef4dd1bb55605ea0ad",
        "files": [
          "Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py"
        ],
        "message": "[3.13] gh-120200: Fix `inspect.iscoroutinefunction(inspect) is True` corner case (GH-120214) (#120237)\n\ngh-120200: Fix `inspect.iscoroutinefunction(inspect) is True` corner case (GH-120214)\n(cherry picked from commit 10fb1b8f36ab2fc3d2fe7392d5735dd19c5e2365)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/inspect.py||Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/inspect.py||Lib/inspect.py": [
          "File: Lib/inspect.py -> Lib/inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:     return _has_code_flag(obj, CO_GENERATOR)",
          "405: # A marker for markcoroutinefunction and iscoroutinefunction.",
          "408: def _has_coroutine_mark(f):",
          "409:     while ismethod(f):",
          "410:         f = f.__func__",
          "411:     f = functools._unwrap_partial(f)",
          "414: def markcoroutinefunction(func):",
          "415:     \"\"\"",
          "",
          "[Removed Lines]",
          "406: _is_coroutine_marker = object()",
          "412:     return getattr(f, \"_is_coroutine_marker\", None) is _is_coroutine_marker",
          "",
          "[Added Lines]",
          "406: _is_coroutine_mark = object()",
          "412:     return getattr(f, \"_is_coroutine_marker\", None) is _is_coroutine_mark",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:     \"\"\"",
          "418:     if hasattr(func, '__func__'):",
          "419:         func = func.__func__",
          "421:     return func",
          "423: def iscoroutinefunction(obj):",
          "",
          "[Removed Lines]",
          "420:     func._is_coroutine_marker = _is_coroutine_marker",
          "",
          "[Added Lines]",
          "420:     func._is_coroutine_marker = _is_coroutine_mark",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:                     gen_coroutine_function_example))))",
          "236:         self.assertFalse(inspect.iscoroutinefunction(gen_coro_pmi))",
          "237:         self.assertFalse(inspect.iscoroutinefunction(gen_coro_pmc))",
          "238:         self.assertFalse(inspect.iscoroutine(gen_coro))",
          "240:         self.assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:         self.assertFalse(inspect.iscoroutinefunction(inspect))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17d3398486dcbc6f5e977bf4c052d7780013c074",
      "candidate_info": {
        "commit_hash": "17d3398486dcbc6f5e977bf4c052d7780013c074",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/17d3398486dcbc6f5e977bf4c052d7780013c074",
        "files": [
          "Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_interact.py",
          "Misc/NEWS.d/next/Library/2024-05-23-22-29-59.gh-issue-119443.KAGz6S.rst"
        ],
        "message": "[3.13] gh-119443: Turn off from __future__ import annotations in REPL (GH-119493) (#119697)\n\ngh-119443: Turn off from __future__ import annotations in REPL (GH-119493)\n(cherry picked from commit a8e35e8ebad8c3bb44d14968aa05d1acbc028247)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:             the_symbol = symbol if stmt is last_stmt else \"exec\"",
          "96:             item = wrapper([stmt])",
          "97:             try:",
          "99:             except (OverflowError, ValueError):",
          "100:                     self.showsyntaxerror(filename)",
          "101:                     return False",
          "",
          "[Removed Lines]",
          "98:                 code = compile(item, filename, the_symbol)",
          "",
          "[Added Lines]",
          "98:                 code = compile(item, filename, the_symbol, dont_inherit=True)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py": [
          "File: Lib/test/test_pyrepl/test_interact.py -> Lib/test/test_pyrepl/test_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         with patch.object(console, \"showsyntaxerror\") as mock_showsyntaxerror:",
          "95:             console.runsource(source)",
          "96:             mock_showsyntaxerror.assert_called_once()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     def test_no_active_future(self):",
          "99:         console = InteractiveColoredConsole()",
          "100:         source = \"x: int = 1; print(__annotations__)\"",
          "101:         f = io.StringIO()",
          "102:         with contextlib.redirect_stdout(f):",
          "103:             result = console.runsource(source)",
          "104:         self.assertFalse(result)",
          "105:         self.assertEqual(f.getvalue(), \"{'x': <class 'int'>}\\n\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
      "candidate_info": {
        "commit_hash": "a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-05-24-21-16-52.gh-issue-119369.qBThho.rst",
          "Python/pystate.c",
          "Python/qsbr.c"
        ],
        "message": "[3.13] gh-119369: Fix deadlock during thread exit in free-threaded build (GH-119528) (#119868)\n\nRelease the GIL before calling `_Py_qsbr_unregister`.\n\nThe deadlock could occur when the GIL was enabled at runtime. The\n`_Py_qsbr_unregister` call might block while holding the GIL because the\nthread state was not active, but the GIL was still held.\n(cherry picked from commit 078b8c8cf2bf68f7484cc4d2e3dd74b6fab55664)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/pystate.c||Python/pystate.c",
          "Python/qsbr.c||Python/qsbr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1753: static void",
          "1755: {",
          "1756:     assert(tstate->_status.cleared && !tstate->_status.finalized);",
          "1757:     tstate_verify_not_active(tstate);",
          "",
          "[Removed Lines]",
          "1754: tstate_delete_common(PyThreadState *tstate)",
          "",
          "[Added Lines]",
          "1754: tstate_delete_common(PyThreadState *tstate, int release_gil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1794:     HEAD_UNLOCK(runtime);",
          "1802:     if (tstate->_status.bound_gilstate) {",
          "",
          "[Removed Lines]",
          "1796: #ifdef Py_GIL_DISABLED",
          "1797:     _Py_qsbr_unregister(tstate);",
          "1798: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1808:     clear_datastack(tstate);",
          "1810:     tstate->_status.finalized = 1;",
          "1811: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1806:     if (release_gil) {",
          "1807:         _PyEval_ReleaseLock(tstate->interp, tstate, 1);",
          "1808:     }",
          "1810: #ifdef Py_GIL_DISABLED",
          "1811:     _Py_qsbr_unregister(tstate);",
          "1812: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1819:     while ((tstate = interp->threads.head) != NULL) {",
          "1820:         tstate_verify_not_active(tstate);",
          "1822:         free_threadstate((_PyThreadStateImpl *)tstate);",
          "1823:     }",
          "1824: }",
          "",
          "[Removed Lines]",
          "1821:         tstate_delete_common(tstate);",
          "",
          "[Added Lines]",
          "1825:         tstate_delete_common(tstate, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1829: {",
          "1830:     _Py_EnsureTstateNotNULL(tstate);",
          "1831:     tstate_verify_not_active(tstate);",
          "1833:     free_threadstate((_PyThreadStateImpl *)tstate);",
          "1834: }",
          "",
          "[Removed Lines]",
          "1832:     tstate_delete_common(tstate);",
          "",
          "[Added Lines]",
          "1836:     tstate_delete_common(tstate, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1842:     _Py_qsbr_detach(((_PyThreadStateImpl *)tstate)->qsbr);",
          "1843: #endif",
          "1844:     current_fast_clear(tstate->interp->runtime);",
          "1847:     free_threadstate((_PyThreadStateImpl *)tstate);",
          "1848: }",
          "",
          "[Removed Lines]",
          "1845:     tstate_delete_common(tstate);",
          "1846:     _PyEval_ReleaseLock(tstate->interp, tstate, 1);",
          "",
          "[Added Lines]",
          "1849:     tstate_delete_common(tstate, 1);  // release GIL as part of call",
          "",
          "---------------"
        ],
        "Python/qsbr.c||Python/qsbr.c": [
          "File: Python/qsbr.c -> Python/qsbr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     struct _qsbr_shared *shared = &tstate->interp->qsbr;",
          "237:     struct _PyThreadStateImpl *tstate_imp = (_PyThreadStateImpl*) tstate;",
          "239:     PyMutex_Lock(&shared->mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     assert(!tstate->_status.holds_gil);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
      "candidate_info": {
        "commit_hash": "863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
        "files": [
          "Lib/test/test_datetime.py"
        ],
        "message": "[3.13] gh-120242: Fix handling of `[setUp,tearDown]Class` in `test_datetime` (GH-120243) (#120259)\n\ngh-120242: Fix handling of `[setUp,tearDown]Class` in `test_datetime` (GH-120243)\n(cherry picked from commit 95f4db88d5ab7d900f05d0418b2a2e77bf9ff126)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_datetime.py||Lib/test/test_datetime.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_datetime.py||Lib/test/test_datetime.py": [
          "File: Lib/test/test_datetime.py -> Lib/test/test_datetime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import unittest",
          "2: import sys",
          "4: from test.support.import_helper import import_fresh_module",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import functools",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         for cls in test_classes:",
          "40:             cls.__name__ += suffix",
          "41:             cls.__qualname__ += suffix",
          "57:     return tests",
          "",
          "[Removed Lines]",
          "42:             @classmethod",
          "43:             def setUpClass(cls_, module=module):",
          "44:                 cls_._save_sys_modules = sys.modules.copy()",
          "45:                 sys.modules[TESTS] = module",
          "46:                 sys.modules['datetime'] = module.datetime_module",
          "47:                 if hasattr(module, '_pydatetime'):",
          "48:                     sys.modules['_pydatetime'] = module._pydatetime",
          "49:                 sys.modules['_strptime'] = module._strptime",
          "50:             @classmethod",
          "51:             def tearDownClass(cls_):",
          "52:                 sys.modules.clear()",
          "53:                 sys.modules.update(cls_._save_sys_modules)",
          "54:             cls.setUpClass = setUpClass",
          "55:             cls.tearDownClass = tearDownClass",
          "56:             tests.addTests(loader.loadTestsFromTestCase(cls))",
          "",
          "[Added Lines]",
          "44:             @functools.wraps(cls, updated=())",
          "45:             class Wrapper(cls):",
          "46:                 @classmethod",
          "47:                 def setUpClass(cls_, module=module):",
          "48:                     cls_._save_sys_modules = sys.modules.copy()",
          "49:                     sys.modules[TESTS] = module",
          "50:                     sys.modules['datetime'] = module.datetime_module",
          "51:                     if hasattr(module, '_pydatetime'):",
          "52:                         sys.modules['_pydatetime'] = module._pydatetime",
          "53:                     sys.modules['_strptime'] = module._strptime",
          "54:                     super().setUpClass()",
          "56:                 @classmethod",
          "57:                 def tearDownClass(cls_):",
          "58:                     super().tearDownClass()",
          "59:                     sys.modules.clear()",
          "60:                     sys.modules.update(cls_._save_sys_modules)",
          "62:             tests.addTests(loader.loadTestsFromTestCase(Wrapper))",
          "",
          "---------------"
        ]
      }
    }
  ]
}