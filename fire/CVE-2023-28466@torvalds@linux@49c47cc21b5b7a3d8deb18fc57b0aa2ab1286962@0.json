{
  "cve_id": "CVE-2023-28466",
  "cve_desc": "do_tls_getsockopt in net/tls/tls_main.c in the Linux kernel through 6.2.6 lacks a lock_sock call, leading to a race condition (with a resultant use-after-free or NULL pointer dereference).",
  "repo": "torvalds/linux",
  "patch_hash": "49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962",
  "patch_info": {
    "commit_hash": "49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962",
    "files": [
      "net/tls/tls_main.c"
    ],
    "message": "net: tls: fix possible race condition between do_tls_getsockopt_conf() and do_tls_setsockopt_conf()\n\nctx->crypto_send.info is not protected by lock_sock in\ndo_tls_getsockopt_conf(). A race condition between do_tls_getsockopt_conf()\nand error paths of do_tls_setsockopt_conf() may lead to a use-after-free\nor null-deref.\n\nMore discussion:  https://lore.kernel.org/all/Y/ht6gQL+u6fj3dG@hog/\n\nFixes: 3c4d7559159b (\"tls: kernel TLS support\")\nSigned-off-by: Hangyu Hua <hbh25y@gmail.com>\nLink: https://lore.kernel.org/r/20230228023344.9623-1-hbh25y@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "before_after_code_files": [
      "net/tls/tls_main.c||net/tls/tls_main.c"
    ]
  },
  "patch_diff": {
    "net/tls/tls_main.c||net/tls/tls_main.c": [
      "File: net/tls/tls_main.c -> net/tls/tls_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "405:    rc = -EINVAL;",
      "406:    goto out;",
      "407:   }",
      "409:   memcpy(crypto_info_aes_gcm_128->iv,",
      "410:          cctx->iv + TLS_CIPHER_AES_GCM_128_SALT_SIZE,",
      "411:          TLS_CIPHER_AES_GCM_128_IV_SIZE);",
      "412:   memcpy(crypto_info_aes_gcm_128->rec_seq, cctx->rec_seq,",
      "413:          TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE);",
      "415:   if (copy_to_user(optval,",
      "416:      crypto_info_aes_gcm_128,",
      "417:      sizeof(*crypto_info_aes_gcm_128)))",
      "",
      "[Removed Lines]",
      "408:   lock_sock(sk);",
      "414:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "429:    rc = -EINVAL;",
      "430:    goto out;",
      "431:   }",
      "433:   memcpy(crypto_info_aes_gcm_256->iv,",
      "434:          cctx->iv + TLS_CIPHER_AES_GCM_256_SALT_SIZE,",
      "435:          TLS_CIPHER_AES_GCM_256_IV_SIZE);",
      "436:   memcpy(crypto_info_aes_gcm_256->rec_seq, cctx->rec_seq,",
      "437:          TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE);",
      "439:   if (copy_to_user(optval,",
      "440:      crypto_info_aes_gcm_256,",
      "441:      sizeof(*crypto_info_aes_gcm_256)))",
      "",
      "[Removed Lines]",
      "432:   lock_sock(sk);",
      "438:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "451:    rc = -EINVAL;",
      "452:    goto out;",
      "453:   }",
      "455:   memcpy(aes_ccm_128->iv,",
      "456:          cctx->iv + TLS_CIPHER_AES_CCM_128_SALT_SIZE,",
      "457:          TLS_CIPHER_AES_CCM_128_IV_SIZE);",
      "458:   memcpy(aes_ccm_128->rec_seq, cctx->rec_seq,",
      "459:          TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE);",
      "461:   if (copy_to_user(optval, aes_ccm_128, sizeof(*aes_ccm_128)))",
      "462:    rc = -EFAULT;",
      "463:   break;",
      "",
      "[Removed Lines]",
      "454:   lock_sock(sk);",
      "460:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    rc = -EINVAL;",
      "473:    goto out;",
      "474:   }",
      "476:   memcpy(chacha20_poly1305->iv,",
      "477:          cctx->iv + TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE,",
      "478:          TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE);",
      "479:   memcpy(chacha20_poly1305->rec_seq, cctx->rec_seq,",
      "480:          TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE);",
      "482:   if (copy_to_user(optval, chacha20_poly1305,",
      "483:     sizeof(*chacha20_poly1305)))",
      "484:    rc = -EFAULT;",
      "",
      "[Removed Lines]",
      "475:   lock_sock(sk);",
      "481:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "493:    rc = -EINVAL;",
      "494:    goto out;",
      "495:   }",
      "497:   memcpy(sm4_gcm_info->iv,",
      "498:          cctx->iv + TLS_CIPHER_SM4_GCM_SALT_SIZE,",
      "499:          TLS_CIPHER_SM4_GCM_IV_SIZE);",
      "500:   memcpy(sm4_gcm_info->rec_seq, cctx->rec_seq,",
      "501:          TLS_CIPHER_SM4_GCM_REC_SEQ_SIZE);",
      "503:   if (copy_to_user(optval, sm4_gcm_info, sizeof(*sm4_gcm_info)))",
      "504:    rc = -EFAULT;",
      "505:   break;",
      "",
      "[Removed Lines]",
      "496:   lock_sock(sk);",
      "502:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "513:    rc = -EINVAL;",
      "514:    goto out;",
      "515:   }",
      "517:   memcpy(sm4_ccm_info->iv,",
      "518:          cctx->iv + TLS_CIPHER_SM4_CCM_SALT_SIZE,",
      "519:          TLS_CIPHER_SM4_CCM_IV_SIZE);",
      "520:   memcpy(sm4_ccm_info->rec_seq, cctx->rec_seq,",
      "521:          TLS_CIPHER_SM4_CCM_REC_SEQ_SIZE);",
      "523:   if (copy_to_user(optval, sm4_ccm_info, sizeof(*sm4_ccm_info)))",
      "524:    rc = -EFAULT;",
      "525:   break;",
      "",
      "[Removed Lines]",
      "516:   lock_sock(sk);",
      "522:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "535:    rc = -EINVAL;",
      "536:    goto out;",
      "537:   }",
      "539:   memcpy(crypto_info_aria_gcm_128->iv,",
      "540:          cctx->iv + TLS_CIPHER_ARIA_GCM_128_SALT_SIZE,",
      "541:          TLS_CIPHER_ARIA_GCM_128_IV_SIZE);",
      "542:   memcpy(crypto_info_aria_gcm_128->rec_seq, cctx->rec_seq,",
      "543:          TLS_CIPHER_ARIA_GCM_128_REC_SEQ_SIZE);",
      "545:   if (copy_to_user(optval,",
      "546:      crypto_info_aria_gcm_128,",
      "547:      sizeof(*crypto_info_aria_gcm_128)))",
      "",
      "[Removed Lines]",
      "538:   lock_sock(sk);",
      "544:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "559:    rc = -EINVAL;",
      "560:    goto out;",
      "561:   }",
      "563:   memcpy(crypto_info_aria_gcm_256->iv,",
      "564:          cctx->iv + TLS_CIPHER_ARIA_GCM_256_SALT_SIZE,",
      "565:          TLS_CIPHER_ARIA_GCM_256_IV_SIZE);",
      "566:   memcpy(crypto_info_aria_gcm_256->rec_seq, cctx->rec_seq,",
      "567:          TLS_CIPHER_ARIA_GCM_256_REC_SEQ_SIZE);",
      "569:   if (copy_to_user(optval,",
      "570:      crypto_info_aria_gcm_256,",
      "571:      sizeof(*crypto_info_aria_gcm_256)))",
      "",
      "[Removed Lines]",
      "562:   lock_sock(sk);",
      "568:   release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "614:  if (len < sizeof(value))",
      "615:   return -EINVAL;",
      "618:  value = -EINVAL;",
      "619:  if (ctx->rx_conf == TLS_SW || ctx->rx_conf == TLS_HW)",
      "620:   value = ctx->rx_no_pad;",
      "622:  if (value < 0)",
      "623:   return value;",
      "",
      "[Removed Lines]",
      "617:  lock_sock(sk);",
      "621:  release_sock(sk);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "635: {",
      "636:  int rc = 0;",
      "638:  switch (optname) {",
      "639:  case TLS_TX:",
      "640:  case TLS_RX:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620:  lock_sock(sk);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "651:   rc = -ENOPROTOOPT;",
      "652:   break;",
      "653:  }",
      "654:  return rc;",
      "655: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "639:  release_sock(sk);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "077e05d135489e144d9e0d01454886bf613d32a4",
      "candidate_info": {
        "commit_hash": "077e05d135489e144d9e0d01454886bf613d32a4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/077e05d135489e144d9e0d01454886bf613d32a4",
        "files": [
          "net/tls/tls_main.c"
        ],
        "message": "tls: use tls_cipher_desc to simplify do_tls_getsockopt_conf\n\nEvery cipher uses the same code to update its crypto_info struct based\non the values contained in the cctx, with only the struct type and\nsize/offset changing. We can get those  from tls_cipher_desc, and use\na single pair of memcpy and final copy_to_user.\n\nSigned-off-by: Sabrina Dubroca <sd@queasysnail.net>\nLink: https://lore.kernel.org/r/c21a904b91e972bdbbf9d1c6d2731ccfa1eedf72.1692977948.git.sd@queasysnail.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "net/tls/tls_main.c||net/tls/tls_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/tls/tls_main.c||net/tls/tls_main.c"
          ],
          "candidate": [
            "net/tls/tls_main.c||net/tls/tls_main.c"
          ]
        }
      },
      "candidate_diff": {
        "net/tls/tls_main.c||net/tls/tls_main.c": [
          "File: net/tls/tls_main.c -> net/tls/tls_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:       int __user *optlen, int tx)",
          "436: {",
          "437:  int rc = 0;",
          "438:  struct tls_context *ctx = tls_get_ctx(sk);",
          "439:  struct tls_crypto_info *crypto_info;",
          "440:  struct cipher_context *cctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:  const struct tls_cipher_desc *cipher_desc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:   goto out;",
          "474:  }",
          "640:   rc = -EINVAL;",
          "641:  }",
          "643: out:",
          "644:  return rc;",
          "",
          "[Removed Lines]",
          "476:  switch (crypto_info->cipher_type) {",
          "477:  case TLS_CIPHER_AES_GCM_128: {",
          "478:   struct tls12_crypto_info_aes_gcm_128 *",
          "479:     crypto_info_aes_gcm_128 =",
          "480:     container_of(crypto_info,",
          "481:           struct tls12_crypto_info_aes_gcm_128,",
          "482:           info);",
          "484:   if (len != sizeof(*crypto_info_aes_gcm_128)) {",
          "485:    rc = -EINVAL;",
          "486:    goto out;",
          "487:   }",
          "488:   memcpy(crypto_info_aes_gcm_128->iv,",
          "489:          cctx->iv + TLS_CIPHER_AES_GCM_128_SALT_SIZE,",
          "490:          TLS_CIPHER_AES_GCM_128_IV_SIZE);",
          "491:   memcpy(crypto_info_aes_gcm_128->rec_seq, cctx->rec_seq,",
          "492:          TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE);",
          "493:   if (copy_to_user(optval,",
          "494:      crypto_info_aes_gcm_128,",
          "495:      sizeof(*crypto_info_aes_gcm_128)))",
          "496:    rc = -EFAULT;",
          "497:   break;",
          "498:  }",
          "499:  case TLS_CIPHER_AES_GCM_256: {",
          "500:   struct tls12_crypto_info_aes_gcm_256 *",
          "501:     crypto_info_aes_gcm_256 =",
          "502:     container_of(crypto_info,",
          "503:           struct tls12_crypto_info_aes_gcm_256,",
          "504:           info);",
          "506:   if (len != sizeof(*crypto_info_aes_gcm_256)) {",
          "507:    rc = -EINVAL;",
          "508:    goto out;",
          "509:   }",
          "510:   memcpy(crypto_info_aes_gcm_256->iv,",
          "511:          cctx->iv + TLS_CIPHER_AES_GCM_256_SALT_SIZE,",
          "512:          TLS_CIPHER_AES_GCM_256_IV_SIZE);",
          "513:   memcpy(crypto_info_aes_gcm_256->rec_seq, cctx->rec_seq,",
          "514:          TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE);",
          "515:   if (copy_to_user(optval,",
          "516:      crypto_info_aes_gcm_256,",
          "517:      sizeof(*crypto_info_aes_gcm_256)))",
          "518:    rc = -EFAULT;",
          "519:   break;",
          "520:  }",
          "521:  case TLS_CIPHER_AES_CCM_128: {",
          "522:   struct tls12_crypto_info_aes_ccm_128 *aes_ccm_128 =",
          "523:    container_of(crypto_info,",
          "524:     struct tls12_crypto_info_aes_ccm_128, info);",
          "526:   if (len != sizeof(*aes_ccm_128)) {",
          "527:    rc = -EINVAL;",
          "528:    goto out;",
          "529:   }",
          "530:   memcpy(aes_ccm_128->iv,",
          "531:          cctx->iv + TLS_CIPHER_AES_CCM_128_SALT_SIZE,",
          "532:          TLS_CIPHER_AES_CCM_128_IV_SIZE);",
          "533:   memcpy(aes_ccm_128->rec_seq, cctx->rec_seq,",
          "534:          TLS_CIPHER_AES_CCM_128_REC_SEQ_SIZE);",
          "535:   if (copy_to_user(optval, aes_ccm_128, sizeof(*aes_ccm_128)))",
          "536:    rc = -EFAULT;",
          "537:   break;",
          "538:  }",
          "539:  case TLS_CIPHER_CHACHA20_POLY1305: {",
          "540:   struct tls12_crypto_info_chacha20_poly1305 *chacha20_poly1305 =",
          "541:    container_of(crypto_info,",
          "542:     struct tls12_crypto_info_chacha20_poly1305,",
          "543:     info);",
          "545:   if (len != sizeof(*chacha20_poly1305)) {",
          "546:    rc = -EINVAL;",
          "547:    goto out;",
          "548:   }",
          "549:   memcpy(chacha20_poly1305->iv,",
          "550:          cctx->iv + TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE,",
          "551:          TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE);",
          "552:   memcpy(chacha20_poly1305->rec_seq, cctx->rec_seq,",
          "553:          TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE);",
          "554:   if (copy_to_user(optval, chacha20_poly1305,",
          "555:     sizeof(*chacha20_poly1305)))",
          "556:    rc = -EFAULT;",
          "557:   break;",
          "558:  }",
          "559:  case TLS_CIPHER_SM4_GCM: {",
          "560:   struct tls12_crypto_info_sm4_gcm *sm4_gcm_info =",
          "561:    container_of(crypto_info,",
          "562:     struct tls12_crypto_info_sm4_gcm, info);",
          "564:   if (len != sizeof(*sm4_gcm_info)) {",
          "565:    rc = -EINVAL;",
          "566:    goto out;",
          "567:   }",
          "568:   memcpy(sm4_gcm_info->iv,",
          "569:          cctx->iv + TLS_CIPHER_SM4_GCM_SALT_SIZE,",
          "570:          TLS_CIPHER_SM4_GCM_IV_SIZE);",
          "571:   memcpy(sm4_gcm_info->rec_seq, cctx->rec_seq,",
          "572:          TLS_CIPHER_SM4_GCM_REC_SEQ_SIZE);",
          "573:   if (copy_to_user(optval, sm4_gcm_info, sizeof(*sm4_gcm_info)))",
          "574:    rc = -EFAULT;",
          "575:   break;",
          "576:  }",
          "577:  case TLS_CIPHER_SM4_CCM: {",
          "578:   struct tls12_crypto_info_sm4_ccm *sm4_ccm_info =",
          "579:    container_of(crypto_info,",
          "580:     struct tls12_crypto_info_sm4_ccm, info);",
          "582:   if (len != sizeof(*sm4_ccm_info)) {",
          "583:    rc = -EINVAL;",
          "584:    goto out;",
          "585:   }",
          "586:   memcpy(sm4_ccm_info->iv,",
          "587:          cctx->iv + TLS_CIPHER_SM4_CCM_SALT_SIZE,",
          "588:          TLS_CIPHER_SM4_CCM_IV_SIZE);",
          "589:   memcpy(sm4_ccm_info->rec_seq, cctx->rec_seq,",
          "590:          TLS_CIPHER_SM4_CCM_REC_SEQ_SIZE);",
          "591:   if (copy_to_user(optval, sm4_ccm_info, sizeof(*sm4_ccm_info)))",
          "592:    rc = -EFAULT;",
          "593:   break;",
          "594:  }",
          "595:  case TLS_CIPHER_ARIA_GCM_128: {",
          "596:   struct tls12_crypto_info_aria_gcm_128 *",
          "597:     crypto_info_aria_gcm_128 =",
          "598:     container_of(crypto_info,",
          "599:           struct tls12_crypto_info_aria_gcm_128,",
          "600:           info);",
          "602:   if (len != sizeof(*crypto_info_aria_gcm_128)) {",
          "603:    rc = -EINVAL;",
          "604:    goto out;",
          "605:   }",
          "606:   memcpy(crypto_info_aria_gcm_128->iv,",
          "607:          cctx->iv + TLS_CIPHER_ARIA_GCM_128_SALT_SIZE,",
          "608:          TLS_CIPHER_ARIA_GCM_128_IV_SIZE);",
          "609:   memcpy(crypto_info_aria_gcm_128->rec_seq, cctx->rec_seq,",
          "610:          TLS_CIPHER_ARIA_GCM_128_REC_SEQ_SIZE);",
          "611:   if (copy_to_user(optval,",
          "612:      crypto_info_aria_gcm_128,",
          "613:      sizeof(*crypto_info_aria_gcm_128)))",
          "614:    rc = -EFAULT;",
          "615:   break;",
          "616:  }",
          "617:  case TLS_CIPHER_ARIA_GCM_256: {",
          "618:   struct tls12_crypto_info_aria_gcm_256 *",
          "619:     crypto_info_aria_gcm_256 =",
          "620:     container_of(crypto_info,",
          "621:           struct tls12_crypto_info_aria_gcm_256,",
          "622:           info);",
          "624:   if (len != sizeof(*crypto_info_aria_gcm_256)) {",
          "625:    rc = -EINVAL;",
          "626:    goto out;",
          "627:   }",
          "628:   memcpy(crypto_info_aria_gcm_256->iv,",
          "629:          cctx->iv + TLS_CIPHER_ARIA_GCM_256_SALT_SIZE,",
          "630:          TLS_CIPHER_ARIA_GCM_256_IV_SIZE);",
          "631:   memcpy(crypto_info_aria_gcm_256->rec_seq, cctx->rec_seq,",
          "632:          TLS_CIPHER_ARIA_GCM_256_REC_SEQ_SIZE);",
          "633:   if (copy_to_user(optval,",
          "634:      crypto_info_aria_gcm_256,",
          "635:      sizeof(*crypto_info_aria_gcm_256)))",
          "636:    rc = -EFAULT;",
          "637:   break;",
          "638:  }",
          "639:  default:",
          "",
          "[Added Lines]",
          "477:  cipher_desc = get_cipher_desc(crypto_info->cipher_type);",
          "478:  if (!cipher_desc || len != cipher_desc->crypto_info) {",
          "480:   goto out;",
          "483:  memcpy(crypto_info_iv(crypto_info, cipher_desc),",
          "484:         cctx->iv + cipher_desc->salt, cipher_desc->iv);",
          "485:  memcpy(crypto_info_rec_seq(crypto_info, cipher_desc),",
          "486:         cctx->rec_seq, cipher_desc->rec_seq);",
          "488:  if (copy_to_user(optval, crypto_info, cipher_desc->crypto_info))",
          "489:   rc = -EFAULT;",
          "",
          "---------------"
        ]
      }
    }
  ]
}