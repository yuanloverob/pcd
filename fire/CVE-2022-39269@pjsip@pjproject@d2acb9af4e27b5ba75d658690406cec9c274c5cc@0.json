{
  "cve_id": "CVE-2022-39269",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C. When processing certain packets, PJSIP may incorrectly switch from using SRTP media transport to using basic RTP upon SRTP restart, causing the media to be sent insecurely. The vulnerability impacts all PJSIP users that use SRTP. The patch is available as commit d2acb9a in the master branch of the project and will be included in version 2.13. Users are advised to manually patch or to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "pjsip/pjproject",
  "patch_hash": "d2acb9af4e27b5ba75d658690406cec9c274c5cc",
  "patch_info": {
    "commit_hash": "d2acb9af4e27b5ba75d658690406cec9c274c5cc",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/d2acb9af4e27b5ba75d658690406cec9c274c5cc",
    "files": [
      "pjmedia/src/pjmedia/transport_srtp.c"
    ],
    "message": "Merge pull request from GHSA-wx5m-cj97-4wwg",
    "before_after_code_files": [
      "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c"
    ]
  },
  "patch_diff": {
    "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c": [
      "File: pjmedia/src/pjmedia/transport_srtp.c -> pjmedia/src/pjmedia/transport_srtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1531:  pjmedia_srtp_crypto tx, rx;",
      "1532:  pj_status_t status;",
      "1537:  pjmedia_transport_srtp_stop((pjmedia_transport*)srtp);",
      "1541:  status = pjmedia_transport_srtp_start((pjmedia_transport*)srtp,",
      "1542:            &tx, &rx);",
      "1543:  if (status != PJ_SUCCESS) {",
      "",
      "[Removed Lines]",
      "1539:  tx = srtp->tx_policy;",
      "1540:  rx = srtp->rx_policy;",
      "",
      "[Added Lines]",
      "1534:  tx = srtp->tx_policy;",
      "1535:  rx = srtp->rx_policy;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0ac2478fca86638596b01213f8cff9f6e073b74",
      "candidate_info": {
        "commit_hash": "a0ac2478fca86638596b01213f8cff9f6e073b74",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/a0ac2478fca86638596b01213f8cff9f6e073b74",
        "files": [
          "pjmedia/src/pjmedia/transport_srtp.c",
          "pjmedia/src/pjmedia/transport_srtp_dtls.c",
          "pjmedia/src/pjmedia/transport_srtp_sdes.c",
          "pjmedia/src/pjmedia/transport_udp.c"
        ],
        "message": "Implement DTLS-SRTP for RTCP (#3571)",
        "before_after_code_files": [
          "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c",
          "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c",
          "pjmedia/src/pjmedia/transport_srtp_sdes.c||pjmedia/src/pjmedia/transport_srtp_sdes.c",
          "pjmedia/src/pjmedia/transport_udp.c||pjmedia/src/pjmedia/transport_udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c"
          ],
          "candidate": [
            "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c"
          ]
        }
      },
      "candidate_diff": {
        "pjmedia/src/pjmedia/transport_srtp.c||pjmedia/src/pjmedia/transport_srtp.c": [
          "File: pjmedia/src/pjmedia/transport_srtp.c -> pjmedia/src/pjmedia/transport_srtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: };",
          "233: typedef struct transport_srtp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: typedef struct srtp_context",
          "232: {",
          "234:     char                 tx_key[MAX_KEY_LEN];",
          "235:     char                 rx_key[MAX_KEY_LEN];",
          "236:     pjmedia_srtp_crypto  tx_policy;",
          "237:     pjmedia_srtp_crypto  rx_policy;",
          "240:     pjmedia_srtp_crypto  tx_policy_neg;",
          "241:     pjmedia_srtp_crypto  rx_policy_neg;",
          "244:     srtp_t               srtp_tx_ctx;",
          "245:     srtp_t               srtp_rx_ctx;",
          "246: } srtp_context;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:     unsigned             media_option;",
          "245:     pj_bool_t            session_inited;",
          "246:     pj_bool_t            offerer_side;",
          "247:     pj_bool_t            bypass_srtp;",
          "262:     void                *user_data;",
          "",
          "[Removed Lines]",
          "248:     char                 tx_key[MAX_KEY_LEN];",
          "249:     char                 rx_key[MAX_KEY_LEN];",
          "250:     pjmedia_srtp_crypto  tx_policy;",
          "251:     pjmedia_srtp_crypto  rx_policy;",
          "254:     pjmedia_srtp_crypto  tx_policy_neg;",
          "255:     pjmedia_srtp_crypto  rx_policy_neg;",
          "258:     srtp_t               srtp_tx_ctx;",
          "259:     srtp_t               srtp_rx_ctx;",
          "",
          "[Added Lines]",
          "265:     srtp_context         srtp_ctx;",
          "266:     srtp_context         srtp_rtcp;         /**< Separate context for RTCP,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413: static pj_status_t start_srtp(transport_srtp *srtp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: static pj_status_t create_srtp_ctx(transport_srtp *srtp,",
          "424:                                    srtp_context *ctx,",
          "425:                                    const pjmedia_srtp_setting *setting,",
          "426:                                    const pjmedia_srtp_crypto *tx,",
          "427:                                    const pjmedia_srtp_crypto *rx);",
          "429: static void destroy_srtp_ctx(transport_srtp *p_srtp, srtp_context *ctx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "845: }",
          "855: {",
          "857:     srtp_policy_t    tx_;",
          "858:     srtp_policy_t    rx_;",
          "859:     srtp_err_status_t err;",
          "",
          "[Removed Lines]",
          "851: PJ_DEF(pj_status_t) pjmedia_transport_srtp_start(",
          "852:                            pjmedia_transport *tp,",
          "853:                            const pjmedia_srtp_crypto *tx,",
          "854:                            const pjmedia_srtp_crypto *rx)",
          "856:     transport_srtp  *srtp = (transport_srtp*) tp;",
          "",
          "[Added Lines]",
          "865: static pj_status_t create_srtp_ctx(transport_srtp *srtp,",
          "866:                                    srtp_context *ctx,",
          "867:                                    const pjmedia_srtp_setting *setting,",
          "868:                                    const pjmedia_srtp_crypto *tx,",
          "869:                                    const pjmedia_srtp_crypto *rx)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "863:     int              au_rx_idx = 0;",
          "864:     pj_status_t      status = PJ_SUCCESS;",
          "868:     pj_lock_acquire(srtp->mutex);",
          "875:     cr_tx_idx = au_tx_idx = get_crypto_idx(&tx->name);",
          "",
          "[Removed Lines]",
          "866:     PJ_ASSERT_RETURN(tp && tx && rx, PJ_EINVAL);",
          "870:     if (srtp->session_inited) {",
          "871:         pjmedia_transport_srtp_stop(tp);",
          "872:     }",
          "",
          "[Added Lines]",
          "882:     if (ctx->srtp_tx_ctx || ctx->srtp_rx_ctx)",
          "883:         destroy_srtp_ctx(srtp, ctx);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "896:     if (cr_tx_idx == 0 && cr_rx_idx == 0 && au_tx_idx == 0 && au_rx_idx == 0) {",
          "898:         goto on_return;",
          "899:     }",
          "",
          "[Removed Lines]",
          "897:         srtp->bypass_srtp = PJ_TRUE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:     pj_bzero(&tx_, sizeof(srtp_policy_t));",
          "912:     if (cr_tx_idx && au_tx_idx)",
          "913:         tx_.rtp.sec_serv    = sec_serv_conf_and_auth;",
          "914:     else if (cr_tx_idx)",
          "",
          "[Removed Lines]",
          "911:     pj_memmove(srtp->tx_key, tx->key.ptr, tx->key.slen);",
          "",
          "[Added Lines]",
          "924:     pj_memmove(ctx->tx_key, tx->key.ptr, tx->key.slen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "917:         tx_.rtp.sec_serv    = sec_serv_auth;",
          "918:     else",
          "919:         tx_.rtp.sec_serv    = sec_serv_none;",
          "923:     {",
          "924:         tx_.ssrc.type       = ssrc_specific;",
          "926:     } else {",
          "927:         tx_.ssrc.type       = ssrc_any_outbound;",
          "928:         tx_.ssrc.value      = 0;",
          "",
          "[Removed Lines]",
          "920:     tx_.key                 = (uint8_t*)srtp->tx_key;",
          "921:     if (srtp->setting.tx_roc.roc != 0 &&",
          "922:         srtp->setting.tx_roc.ssrc != 0)",
          "925:         tx_.ssrc.value      = srtp->setting.tx_roc.ssrc;",
          "",
          "[Added Lines]",
          "933:     tx_.key                 = (uint8_t*)ctx->tx_key;",
          "934:     if (setting->tx_roc.roc != 0 &&",
          "935:         setting->tx_roc.ssrc != 0)",
          "938:         tx_.ssrc.value      = setting->tx_roc.ssrc;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "935:     tx_.rtcp                = tx_.rtp;",
          "936:     tx_.rtcp.auth_tag_len   = crypto_suites[au_tx_idx].srtcp_auth_tag_len;",
          "937:     tx_.next                = NULL;",
          "939:     if (err != srtp_err_status_ok) {",
          "940:         status = PJMEDIA_ERRNO_FROM_LIBSRTP(err);",
          "941:         goto on_return;",
          "942:     }",
          "945:     {",
          "949:         PJ_LOG(4, (THIS_FILE, \"Initializing SRTP TX ROC to SSRC %d with \"",
          "952:                    (err == srtp_err_status_ok)? \"succeeded\": \"failed\"));",
          "953:     }",
          "960:     pj_bzero(&rx_, sizeof(srtp_policy_t));",
          "962:     if (cr_rx_idx && au_rx_idx)",
          "963:         rx_.rtp.sec_serv    = sec_serv_conf_and_auth;",
          "964:     else if (cr_rx_idx)",
          "",
          "[Removed Lines]",
          "938:     err = srtp_create(&srtp->srtp_tx_ctx, &tx_);",
          "943:     if (srtp->setting.tx_roc.roc != 0 &&",
          "944:         srtp->setting.tx_roc.ssrc != 0)",
          "946:         err = srtp_set_stream_roc(srtp->srtp_tx_ctx,",
          "947:                                   srtp->setting.tx_roc.ssrc,",
          "948:                                   srtp->setting.tx_roc.roc);",
          "950:                    \"ROC %d %s\\n\", srtp->setting.tx_roc.ssrc,",
          "951:                    srtp->setting.tx_roc.roc,",
          "954:     srtp->tx_policy = *tx;",
          "955:     pj_strset(&srtp->tx_policy.key,  srtp->tx_key, tx->key.slen);",
          "956:     srtp->tx_policy.name=pj_str(crypto_suites[get_crypto_idx(&tx->name)].name);",
          "961:     pj_memmove(srtp->rx_key, rx->key.ptr, rx->key.slen);",
          "",
          "[Added Lines]",
          "951:     err = srtp_create(&ctx->srtp_tx_ctx, &tx_);",
          "956:     if (setting->tx_roc.roc != 0 &&",
          "957:         setting->tx_roc.ssrc != 0)",
          "959:         err = srtp_set_stream_roc(ctx->srtp_tx_ctx,",
          "960:                                   setting->tx_roc.ssrc,",
          "961:                                   setting->tx_roc.roc);",
          "963:                    \"ROC %d %s\\n\", setting->tx_roc.ssrc,",
          "964:                    setting->tx_roc.roc,",
          "967:     ctx->tx_policy = *tx;",
          "968:     pj_strset(&ctx->tx_policy.key,  ctx->tx_key, tx->key.slen);",
          "969:     ctx->tx_policy.name=pj_str(crypto_suites[get_crypto_idx(&tx->name)].name);",
          "974:     pj_memmove(ctx->rx_key, rx->key.ptr, rx->key.slen);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "967:         rx_.rtp.sec_serv    = sec_serv_auth;",
          "968:     else",
          "969:         rx_.rtp.sec_serv    = sec_serv_none;",
          "973:     {",
          "974:         rx_.ssrc.type       = ssrc_specific;",
          "976:     } else {",
          "977:         rx_.ssrc.type       = ssrc_any_inbound;",
          "978:         rx_.ssrc.value      = 0;",
          "",
          "[Removed Lines]",
          "970:     rx_.key                 = (uint8_t*)srtp->rx_key;",
          "971:     if (srtp->setting.rx_roc.roc != 0 &&",
          "972:         srtp->setting.rx_roc.ssrc != 0)",
          "975:         rx_.ssrc.value      = srtp->setting.rx_roc.ssrc;",
          "",
          "[Added Lines]",
          "983:     rx_.key                 = (uint8_t*)ctx->rx_key;",
          "984:     if (setting->rx_roc.roc != 0 &&",
          "985:         setting->rx_roc.ssrc != 0)",
          "988:         rx_.ssrc.value      = setting->rx_roc.ssrc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "986:     rx_.rtcp                = rx_.rtp;",
          "987:     rx_.rtcp.auth_tag_len   = crypto_suites[au_rx_idx].srtcp_auth_tag_len;",
          "988:     rx_.next                = NULL;",
          "990:     if (err != srtp_err_status_ok) {",
          "992:         status = PJMEDIA_ERRNO_FROM_LIBSRTP(err);",
          "993:         goto on_return;",
          "994:     }",
          "997:     {",
          "1001:         PJ_LOG(4, (THIS_FILE, \"Initializing SRTP RX ROC from SSRC %d with \"",
          "1002:                    \"ROC %d %s\\n\",",
          "1004:                    (err == srtp_err_status_ok)? \"succeeded\": \"failed\"));",
          "1005:     }",
          "1014: #if PJ_LOG_MAX_LEVEL >= 5",
          "",
          "[Removed Lines]",
          "989:     err = srtp_create(&srtp->srtp_rx_ctx, &rx_);",
          "991:         srtp_dealloc(srtp->srtp_tx_ctx);",
          "995:     if (srtp->setting.rx_roc.roc != 0 &&",
          "996:         srtp->setting.rx_roc.ssrc != 0)",
          "998:         err = srtp_set_stream_roc(srtp->srtp_rx_ctx,",
          "999:                                   srtp->setting.rx_roc.ssrc,",
          "1000:                                   srtp->setting.rx_roc.roc);",
          "1003:                    srtp->setting.rx_roc.ssrc, srtp->setting.rx_roc.roc,",
          "1006:     srtp->rx_policy = *rx;",
          "1007:     pj_strset(&srtp->rx_policy.key,  srtp->rx_key, rx->key.slen);",
          "1008:     srtp->rx_policy.name=pj_str(crypto_suites[get_crypto_idx(&rx->name)].name);",
          "1011:     srtp->session_inited = PJ_TRUE;",
          "",
          "[Added Lines]",
          "1002:     err = srtp_create(&ctx->srtp_rx_ctx, &rx_);",
          "1004:         srtp_dealloc(ctx->srtp_tx_ctx);",
          "1008:     if (setting->rx_roc.roc != 0 &&",
          "1009:         setting->rx_roc.ssrc != 0)",
          "1011:         err = srtp_set_stream_roc(ctx->srtp_rx_ctx,",
          "1012:                                   setting->rx_roc.ssrc,",
          "1013:                                   setting->rx_roc.roc);",
          "1016:                    setting->rx_roc.ssrc, setting->rx_roc.roc,",
          "1019:     ctx->rx_policy = *rx;",
          "1020:     pj_strset(&ctx->rx_policy.key,  ctx->rx_key, rx->key.slen);",
          "1021:     ctx->rx_policy.name=pj_str(crypto_suites[get_crypto_idx(&rx->name)].name);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1026:             b64[b64_len] = '\\0';",
          "1028:         PJ_LOG(5, (srtp->pool->obj_name, \"TX: %s key=%s\",",
          "1031:             PJ_LOG(5,(srtp->pool->obj_name, \"TX: disable%s%s\",",
          "1032:                       (cr_tx_idx?\"\":\" enc\"),",
          "1033:                       (au_tx_idx?\"\":\" auth\")));",
          "",
          "[Removed Lines]",
          "1029:                    srtp->tx_policy.name.ptr, b64));",
          "1030:         if (srtp->tx_policy.flags) {",
          "",
          "[Added Lines]",
          "1039:                    ctx->tx_policy.name.ptr, b64));",
          "1040:         if (ctx->tx_policy.flags) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1043:             b64[b64_len] = '\\0';",
          "1045:         PJ_LOG(5, (srtp->pool->obj_name, \"RX: %s key=%s\",",
          "1048:             PJ_LOG(5,(srtp->pool->obj_name,\"RX: disable%s%s\",",
          "1049:                       (cr_rx_idx?\"\":\" enc\"),",
          "1050:                       (au_rx_idx?\"\":\" auth\")));",
          "",
          "[Removed Lines]",
          "1046:                    srtp->rx_policy.name.ptr, b64));",
          "1047:         if (srtp->rx_policy.flags) {",
          "",
          "[Added Lines]",
          "1056:                    ctx->rx_policy.name.ptr, b64));",
          "1057:         if (ctx->rx_policy.flags) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1057:     return status;",
          "1058: }",
          "1063: PJ_DEF(pj_status_t) pjmedia_transport_srtp_stop(pjmedia_transport *srtp)",
          "1064: {",
          "1065:     transport_srtp *p_srtp = (transport_srtp*) srtp;",
          "1068:     PJ_ASSERT_RETURN(srtp, PJ_EINVAL);",
          "",
          "[Removed Lines]",
          "1066:     srtp_err_status_t err;",
          "",
          "[Added Lines]",
          "1073: PJ_DEF(pj_status_t) pjmedia_transport_srtp_start(",
          "1074:                            pjmedia_transport *tp,",
          "1075:                            const pjmedia_srtp_crypto *tx,",
          "1076:                            const pjmedia_srtp_crypto *rx)",
          "1077: {",
          "1078:     transport_srtp  *srtp = (transport_srtp*) tp;",
          "1079:     pj_status_t status;",
          "1081:     PJ_ASSERT_RETURN(tp && tx && rx, PJ_EINVAL);",
          "1083:     pj_lock_acquire(srtp->mutex);",
          "1085:     if (srtp->session_inited) {",
          "1086:         pjmedia_transport_srtp_stop(tp);",
          "1087:     }",
          "1089:     status = create_srtp_ctx(srtp, &srtp->srtp_ctx, &srtp->setting, tx, rx);",
          "1090:     if (status == PJ_SUCCESS) {",
          "1091:         if (srtp->srtp_ctx.srtp_tx_ctx && srtp->srtp_ctx.srtp_rx_ctx) {",
          "1093:             srtp->session_inited = PJ_TRUE;",
          "1094:         } else {",
          "1095:             srtp->bypass_srtp = PJ_TRUE;",
          "1096:         }",
          "1097:     }",
          "1099:     pj_lock_release(srtp->mutex);",
          "1101:     return status;",
          "1102: }",
          "1105: static void destroy_srtp_ctx(transport_srtp *p_srtp, srtp_context *ctx)",
          "1106: {",
          "1107:     srtp_err_status_t err;",
          "1109:     if (ctx->srtp_rx_ctx) {",
          "1110:         err = srtp_dealloc(ctx->srtp_rx_ctx);",
          "1111:         if (err != srtp_err_status_ok) {",
          "1112:             PJ_LOG(4, (p_srtp->pool->obj_name,",
          "1113:                        \"Failed to dealloc RX SRTP context: %s\",",
          "1114:                        get_libsrtp_errstr(err)));",
          "1115:         }",
          "1116:     }",
          "1117:     if (ctx->srtp_tx_ctx) {",
          "1118:         err = srtp_dealloc(ctx->srtp_tx_ctx);",
          "1119:         if (err != srtp_err_status_ok) {",
          "1120:             PJ_LOG(4, (p_srtp->pool->obj_name,",
          "1121:                        \"Failed to dealloc TX SRTP context: %s\",",
          "1122:                        get_libsrtp_errstr(err)));",
          "1123:         }",
          "1124:     }",
          "1125:     ctx->srtp_rx_ctx = NULL;",
          "1126:     ctx->srtp_tx_ctx = NULL;",
          "1128:     pj_bzero(&ctx->rx_policy, sizeof(ctx->rx_policy));",
          "1129:     pj_bzero(&ctx->tx_policy, sizeof(ctx->tx_policy));",
          "1130: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1074:         return PJ_SUCCESS;",
          "1075:     }",
          "1092:     p_srtp->session_inited = PJ_FALSE;",
          "1096:     pj_lock_release(p_srtp->mutex);",
          "",
          "[Removed Lines]",
          "1077:     err = srtp_dealloc(p_srtp->srtp_rx_ctx);",
          "1078:     if (err != srtp_err_status_ok) {",
          "1079:         PJ_LOG(4, (p_srtp->pool->obj_name,",
          "1080:                    \"Failed to dealloc RX SRTP context: %s\",",
          "1081:                    get_libsrtp_errstr(err)));",
          "1082:     }",
          "1083:     err = srtp_dealloc(p_srtp->srtp_tx_ctx);",
          "1084:     if (err != srtp_err_status_ok) {",
          "1085:         PJ_LOG(4, (p_srtp->pool->obj_name,",
          "1086:                    \"Failed to dealloc TX SRTP context: %s\",",
          "1087:                    get_libsrtp_errstr(err)));",
          "1088:     }",
          "1089:     p_srtp->srtp_rx_ctx = NULL;",
          "1090:     p_srtp->srtp_tx_ctx = NULL;",
          "1093:     pj_bzero(&p_srtp->rx_policy, sizeof(p_srtp->rx_policy));",
          "1094:     pj_bzero(&p_srtp->tx_policy, sizeof(p_srtp->tx_policy));",
          "",
          "[Added Lines]",
          "1148:     destroy_srtp_ctx(p_srtp, &p_srtp->srtp_ctx);",
          "1149:     destroy_srtp_ctx(p_srtp, &p_srtp->srtp_rtcp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1102: static pj_status_t start_srtp(transport_srtp *srtp)",
          "1103: {",
          "1107:     {",
          "1108:         srtp->bypass_srtp = PJ_TRUE;",
          "1109:         srtp->peer_use = PJMEDIA_SRTP_DISABLED;",
          "",
          "[Removed Lines]",
          "1105:     if (srtp_crypto_empty(&srtp->tx_policy_neg) ||",
          "1106:         srtp_crypto_empty(&srtp->rx_policy_neg))",
          "",
          "[Added Lines]",
          "1162:     if (srtp_crypto_empty(&srtp->srtp_ctx.tx_policy_neg) ||",
          "1163:         srtp_crypto_empty(&srtp->srtp_ctx.rx_policy_neg))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1126:     {",
          "1127:         pj_status_t status;",
          "1128:         status = pjmedia_transport_srtp_start(&srtp->base,",
          "1131:         if (status != PJ_SUCCESS)",
          "1132:             return status;",
          "",
          "[Removed Lines]",
          "1124:     if (srtp_crypto_cmp(&srtp->tx_policy_neg, &srtp->tx_policy) ||",
          "1125:         srtp_crypto_cmp(&srtp->rx_policy_neg, &srtp->rx_policy))",
          "1129:                                               &srtp->tx_policy_neg,",
          "1130:                                               &srtp->rx_policy_neg);",
          "",
          "[Added Lines]",
          "1181:     if (srtp_crypto_cmp(&srtp->srtp_ctx.tx_policy_neg,",
          "1182:                         &srtp->srtp_ctx.tx_policy) ||",
          "1183:         srtp_crypto_cmp(&srtp->srtp_ctx.rx_policy_neg,",
          "1184:                         &srtp->srtp_ctx.rx_policy))",
          "1188:                                               &srtp->srtp_ctx.tx_policy_neg,",
          "1189:                                               &srtp->srtp_ctx.rx_policy_neg);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1138:                    \"SRTP started, keying=%s, crypto=%s\",",
          "1139:                    ((int)srtp->keying[0]->type==PJMEDIA_SRTP_KEYING_SDES?",
          "1140:                     \"SDES\":\"DTLS-SRTP\"),",
          "1142:     }",
          "1144:     srtp->bypass_srtp = PJ_FALSE;",
          "",
          "[Removed Lines]",
          "1141:                    srtp->tx_policy.name.ptr));",
          "",
          "[Added Lines]",
          "1200:                    srtp->srtp_ctx.tx_policy.name.ptr));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1173:                      PJMEDIA_TRANSPORT_SPECIFIC_INFO_MAXSIZE, PJ_ENOMEM);",
          "1175:     srtp_info.active = srtp->session_inited;",
          "1178:     srtp_info.use = srtp->setting.use;",
          "1179:     srtp_info.peer_use = srtp->peer_use;",
          "1181:     pj_bzero(&srtp_info.tx_roc, sizeof(srtp_info.tx_roc));",
          "1182:     pj_bzero(&srtp_info.rx_roc, sizeof(srtp_info.rx_roc));",
          "1185:         srtp_info.rx_roc.ssrc = srtp->rx_ssrc;",
          "1187:                             &srtp_info.rx_roc.roc);",
          "1188:     } else if (srtp->setting.rx_roc.ssrc != 0) {",
          "1189:         srtp_info.rx_roc.ssrc = srtp->setting.rx_roc.ssrc;",
          "1190:         srtp_info.rx_roc.roc = srtp->setting.rx_roc.roc;",
          "1191:     }",
          "1193:         srtp_info.tx_roc.ssrc = srtp->tx_ssrc;",
          "1195:                             &srtp_info.tx_roc.roc);",
          "1196:     } else if (srtp->setting.tx_roc.ssrc != 0) {",
          "1197:         srtp_info.tx_roc.ssrc = srtp->setting.tx_roc.ssrc;",
          "",
          "[Removed Lines]",
          "1176:     srtp_info.rx_policy = srtp->rx_policy;",
          "1177:     srtp_info.tx_policy = srtp->tx_policy;",
          "1184:     if (srtp->srtp_rx_ctx && srtp->rx_ssrc != 0) {",
          "1186:         srtp_get_stream_roc(srtp->srtp_rx_ctx, srtp->rx_ssrc,",
          "1192:     if (srtp->srtp_tx_ctx && srtp->tx_ssrc != 0) {",
          "1194:         srtp_get_stream_roc(srtp->srtp_tx_ctx, srtp->tx_ssrc,",
          "",
          "[Added Lines]",
          "1235:     srtp_info.rx_policy = srtp->srtp_ctx.rx_policy;",
          "1236:     srtp_info.tx_policy = srtp->srtp_ctx.tx_policy;",
          "1243:     if (srtp->srtp_ctx.srtp_rx_ctx && srtp->rx_ssrc != 0) {",
          "1245:         srtp_get_stream_roc(srtp->srtp_ctx.srtp_rx_ctx, srtp->rx_ssrc,",
          "1251:     if (srtp->srtp_ctx.srtp_tx_ctx && srtp->tx_ssrc != 0) {",
          "1253:         srtp_get_stream_roc(srtp->srtp_ctx.srtp_tx_ctx, srtp->tx_ssrc,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1308: #if TEST_ROC",
          "1309:     if (srtp->setting.tx_roc.ssrc == 0) {",
          "1310:         srtp_err_status_t status;",
          "1312:                                      (srtp->offerer_side? 1: 2));",
          "1313:         if (status == srtp_err_status_ok) {",
          "1314:             srtp->setting.tx_roc.ssrc = srtp->tx_ssrc;",
          "",
          "[Removed Lines]",
          "1311:         status = srtp_set_stream_roc(srtp->srtp_tx_ctx, srtp->tx_ssrc,",
          "",
          "[Added Lines]",
          "1370:         status = srtp_set_stream_roc(srtp->srtp_ctx.srtp_tx_ctx, srtp->tx_ssrc,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1319:     }",
          "1320: #endif",
          "1323:     pj_lock_release(srtp->mutex);",
          "1325:     if (err == srtp_err_status_ok) {",
          "",
          "[Removed Lines]",
          "1322:     err = srtp_protect(srtp->srtp_tx_ctx, srtp->rtp_tx_buffer, &len);",
          "",
          "[Added Lines]",
          "1381:     err = srtp_protect(srtp->srtp_ctx.srtp_tx_ctx, srtp->rtp_tx_buffer, &len);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1365:         pj_lock_release(srtp->mutex);",
          "1366:         return PJMEDIA_SRTP_EKEYNOTREADY;",
          "1367:     }",
          "1369:     pj_lock_release(srtp->mutex);",
          "1371:     if (err == srtp_err_status_ok) {",
          "",
          "[Removed Lines]",
          "1368:     err = srtp_protect_rtcp(srtp->srtp_tx_ctx, srtp->rtcp_tx_buffer, &len);",
          "",
          "[Added Lines]",
          "1427:     err = srtp_protect_rtcp(srtp->srtp_rtcp.srtp_tx_ctx?",
          "1428:                             srtp->srtp_rtcp.srtp_tx_ctx:",
          "1429:                             srtp->srtp_ctx.srtp_tx_ctx,",
          "1430:                             srtp->rtcp_tx_buffer, &len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1501:         srtp_err_status_t status;",
          "1503:         srtp->rx_ssrc = ntohl(((pjmedia_rtp_hdr*)pkt)->ssrc);",
          "1505:                                      (srtp->offerer_side? 2: 1));",
          "1506:         if (status == srtp_err_status_ok) {",
          "1507:             srtp->setting.rx_roc.ssrc = srtp->rx_ssrc;",
          "",
          "[Removed Lines]",
          "1504:         status = srtp_set_stream_roc(srtp->srtp_rx_ctx, srtp->rx_ssrc,",
          "",
          "[Added Lines]",
          "1566:         status = srtp_set_stream_roc(srtp->srtp_ctx.srtp_rx_ctx, srtp->rx_ssrc,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1516:     }",
          "1517: #endif",
          "1521: #if PJMEDIA_SRTP_CHECK_RTP_SEQ_ON_RESTART",
          "1522:     if (srtp->probation_cnt > 0 &&",
          "",
          "[Removed Lines]",
          "1519:     err = srtp_unprotect(srtp->srtp_rx_ctx, (pj_uint8_t*)pkt, &len);",
          "",
          "[Added Lines]",
          "1581:     err = srtp_unprotect(srtp->srtp_ctx.srtp_rx_ctx, (pj_uint8_t*)pkt, &len);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1532:         pjmedia_srtp_crypto tx, rx;",
          "1533:         pj_status_t status;",
          "",
          "[Removed Lines]",
          "1535:         tx = srtp->tx_policy;",
          "1536:         rx = srtp->rx_policy;",
          "",
          "[Added Lines]",
          "1597:         tx = srtp->srtp_ctx.tx_policy;",
          "1598:         rx = srtp->srtp_ctx.rx_policy;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1546:             PJ_LOG(5,(srtp->pool->obj_name, \"Failed to restart SRTP, err=%s\",",
          "1547:                       get_libsrtp_errstr(err)));",
          "1548:         } else if (!srtp->bypass_srtp) {",
          "1550:         }",
          "1551:     }",
          "1552: #if PJMEDIA_SRTP_CHECK_ROC_ON_RESTART",
          "",
          "[Removed Lines]",
          "1549:             err = srtp_unprotect(srtp->srtp_rx_ctx, (pj_uint8_t*)pkt, &len);",
          "",
          "[Added Lines]",
          "1611:             err = srtp_unprotect(srtp->srtp_ctx.srtp_rx_ctx,",
          "1612:                                  (pj_uint8_t*)pkt, &len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1563:         unsigned roc, new_roc;",
          "1564:         srtp_err_status_t status;",
          "1568:         new_roc = (roc == srtp->setting.rx_roc.roc?",
          "1569:                    srtp->setting.prev_rx_roc.roc: srtp->setting.rx_roc.roc);",
          "1571:                                      srtp->setting.rx_roc.ssrc, new_roc);",
          "1572:         if (status == srtp_err_status_ok) {",
          "1573:             PJ_LOG(4, (srtp->pool->obj_name,",
          "1574:                        \"Retrying to unprotect SRTP from ROC %d to new ROC %d\",",
          "1575:                        roc, new_roc));",
          "1577:         }",
          "1578:     }",
          "1579: #endif",
          "",
          "[Removed Lines]",
          "1566:         srtp_get_stream_roc(srtp->srtp_rx_ctx, srtp->setting.rx_roc.ssrc,",
          "1567:                             &roc);",
          "1570:         status = srtp_set_stream_roc(srtp->srtp_rx_ctx,",
          "1576:             err = srtp_unprotect(srtp->srtp_rx_ctx, (pj_uint8_t*)pkt, &len);",
          "",
          "[Added Lines]",
          "1629:         srtp_get_stream_roc(srtp->srtp_ctx.srtp_rx_ctx,",
          "1630:                             srtp->setting.rx_roc.ssrc, &roc);",
          "1633:         status = srtp_set_stream_roc(srtp->srtp_ctx.srtp_rx_ctx,",
          "1639:             err = srtp_unprotect(srtp->srtp_ctx.srtp_rx_ctx, (pj_uint8_t*)pkt,",
          "1640:                                  &len);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1625:         return;",
          "1626:     }",
          "1629:     PJ_ASSERT_ON_FAIL( (((pj_ssize_t)pkt) & 0x03)==0, return );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1695:     {",
          "1696:         unsigned i;",
          "1697:         pj_status_t status;",
          "1698:         for (i=0; i < srtp->keying_cnt; i++) {",
          "1699:             if (!srtp->keying[i]->op->send_rtcp)",
          "1700:                 continue;",
          "1701:             status = pjmedia_transport_send_rtcp(srtp->keying[i], pkt, size);",
          "1702:             if (status != PJ_EIGNORED) {",
          "1704:                 return;",
          "1705:             }",
          "1706:         }",
          "1707:     }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1634:         pj_lock_release(srtp->mutex);",
          "1635:         return;",
          "1636:     }",
          "1638:     if (err != srtp_err_status_ok) {",
          "1639:         PJ_LOG(5,(srtp->pool->obj_name,",
          "1640:                   \"Failed to unprotect SRTCP, pkt size=%ld, err=%s\",",
          "",
          "[Removed Lines]",
          "1637:     err = srtp_unprotect_rtcp(srtp->srtp_rx_ctx, (pj_uint8_t*)pkt, &len);",
          "",
          "[Added Lines]",
          "1718:     err = srtp_unprotect_rtcp(srtp->srtp_rtcp.srtp_rx_ctx?",
          "1719:                               srtp->srtp_rtcp.srtp_rx_ctx:",
          "1720:                               srtp->srtp_ctx.srtp_rx_ctx,",
          "1721:                               (pj_uint8_t*)pkt, &len);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1667:     PJ_ASSERT_RETURN(tp, PJ_EINVAL);",
          "1672:     srtp->tx_ssrc = srtp->rx_ssrc = 0;",
          "1673:     srtp->media_option = member_tp_option = options;",
          "",
          "[Removed Lines]",
          "1669:     pj_bzero(&srtp->rx_policy_neg, sizeof(srtp->rx_policy_neg));",
          "1670:     pj_bzero(&srtp->tx_policy_neg, sizeof(srtp->tx_policy_neg));",
          "",
          "[Added Lines]",
          "1753:     pj_bzero(&srtp->srtp_ctx.rx_policy_neg,",
          "1754:              sizeof(srtp->srtp_ctx.rx_policy_neg));",
          "1755:     pj_bzero(&srtp->srtp_ctx.tx_policy_neg,",
          "1756:              sizeof(srtp->srtp_ctx.tx_policy_neg));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1761:     PJ_ASSERT_RETURN(tp && sdp_pool && sdp_local, PJ_EINVAL);",
          "1766:     srtp->offerer_side = (sdp_remote == NULL);",
          "",
          "[Removed Lines]",
          "1763:     pj_bzero(&srtp->rx_policy_neg, sizeof(srtp->rx_policy_neg));",
          "1764:     pj_bzero(&srtp->tx_policy_neg, sizeof(srtp->tx_policy_neg));",
          "",
          "[Added Lines]",
          "1849:     pj_bzero(&srtp->srtp_ctx.rx_policy_neg,",
          "1850:              sizeof(srtp->srtp_ctx.rx_policy_neg));",
          "1851:     pj_bzero(&srtp->srtp_ctx.tx_policy_neg,",
          "1852:              sizeof(srtp->srtp_ctx.tx_policy_neg));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1892:             continue;",
          "1893:         }",
          "1897:         {",
          "1899:             srtp->keying_cnt = 1;",
          "",
          "[Removed Lines]",
          "1895:         if (!srtp_crypto_empty(&srtp->tx_policy_neg) &&",
          "1896:             !srtp_crypto_empty(&srtp->rx_policy_neg))",
          "",
          "[Added Lines]",
          "1983:         if (!srtp_crypto_empty(&srtp->srtp_ctx.tx_policy_neg) &&",
          "1984:             !srtp_crypto_empty(&srtp->srtp_ctx.rx_policy_neg))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1974:     }",
          "1976:     if (is_rtp)",
          "1978:     else",
          "1981:     if (err != srtp_err_status_ok) {",
          "1982:         PJ_LOG(5,(srtp->pool->obj_name,",
          "",
          "[Removed Lines]",
          "1977:         err = srtp_unprotect(srtp->srtp_rx_ctx, pkt, pkt_len);",
          "1979:         err = srtp_unprotect_rtcp(srtp->srtp_rx_ctx, pkt, pkt_len);",
          "",
          "[Added Lines]",
          "2065:         err = srtp_unprotect(srtp->srtp_ctx.srtp_rx_ctx, pkt, pkt_len);",
          "2067:         err = srtp_unprotect_rtcp(srtp->srtp_ctx.srtp_rx_ctx, pkt, pkt_len);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/transport_srtp_dtls.c||pjmedia/src/pjmedia/transport_srtp_dtls.c": [
          "File: pjmedia/src/pjmedia/transport_srtp_dtls.c -> pjmedia/src/pjmedia/transport_srtp_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define DTLS_DEBUG  0",
          "44: static pj_status_t dtls_media_create  (pjmedia_transport *tp,",
          "45:                                        pj_pool_t *sdp_pool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #define NUM_CHANNEL 2",
          "45: enum {",
          "46:     RTP_CHANNEL = 0,",
          "47:     RTCP_CHANNEL = 1",
          "48: };",
          "50: #define CHANNEL_TO_STRING(idx) (idx == RTP_CHANNEL? \"RTP channel\": \\",
          "51:                                 \"RTCP channel\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: static pj_status_t dtls_on_recv_rtp   (pjmedia_transport *tp,",
          "62:                                        const void *pkt,",
          "63:                                        pj_size_t size);",
          "65: static void on_ice_complete2(pjmedia_transport *tp,",
          "66:                              pj_ice_strans_op op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: static pj_status_t dtls_on_recv_rtcp  (pjmedia_transport *tp,",
          "75:                                        const void *pkt,",
          "76:                                        pj_size_t size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     NULL,",
          "75:     NULL,",
          "76:     &dtls_on_recv_rtp,      // originally send_rtp()",
          "78:     NULL,",
          "79:     &dtls_media_create,",
          "80:     &dtls_encode_sdp,",
          "",
          "[Removed Lines]",
          "77:     NULL,",
          "",
          "[Added Lines]",
          "90:     &dtls_on_recv_rtcp,     // originally send_rtcp()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     DTLS_SETUP_PASSIVE",
          "95: } dtls_setup;",
          "98: typedef struct dtls_srtp",
          "99: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: typedef struct dtls_srtp dtls_srtp;",
          "112: typedef struct dtls_srtp_channel",
          "113: {",
          "114:     dtls_srtp           *dtls_srtp;",
          "115:     unsigned             channel;",
          "116: } dtls_srtp_channel;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:     dtls_setup           setup;",
          "105:     unsigned long        last_err;",
          "106:     pj_bool_t            use_ice;",
          "",
          "[Removed Lines]",
          "107:     pj_bool_t            nego_started;",
          "108:     pj_bool_t            nego_completed;",
          "",
          "[Added Lines]",
          "127:     dtls_srtp_channel    channel[NUM_CHANNEL];",
          "128:     pj_bool_t            nego_started[NUM_CHANNEL];",
          "129:     pj_bool_t            nego_completed[NUM_CHANNEL];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:                                                nego not done yet, so start",
          "127:     pj_lock_t           *ossl_lock;",
          "128: } dtls_srtp;",
          "",
          "[Removed Lines]",
          "117:     pjmedia_srtp_crypto  tx_crypto;",
          "118:     pjmedia_srtp_crypto  rx_crypto;",
          "120:     char                 buf[PJMEDIA_MAX_MTU];",
          "123:     SSL_CTX             *ossl_ctx;",
          "124:     SSL                 *ossl_ssl;",
          "125:     BIO                 *ossl_rbio;",
          "126:     BIO                 *ossl_wbio;",
          "",
          "[Added Lines]",
          "138:     pjmedia_srtp_crypto  tx_crypto[NUM_CHANNEL];",
          "139:     pjmedia_srtp_crypto  rx_crypto[NUM_CHANNEL];",
          "141:     char                 buf[NUM_CHANNEL][PJMEDIA_MAX_MTU];",
          "144:     SSL_CTX             *ossl_ctx[NUM_CHANNEL];",
          "145:     SSL                 *ossl_ssl[NUM_CHANNEL];",
          "146:     BIO                 *ossl_rbio[NUM_CHANNEL];",
          "147:     BIO                 *ossl_wbio[NUM_CHANNEL];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "425: }",
          "429: {",
          "430:     SSL_CTX *ctx;",
          "431:     unsigned i;",
          "432:     int mode, rc;",
          "436:         return PJ_SUCCESS;",
          "",
          "[Removed Lines]",
          "428: static pj_status_t ssl_create(dtls_srtp *ds)",
          "435:     if (ds->ossl_ssl)",
          "",
          "[Added Lines]",
          "449: static pj_status_t ssl_create(dtls_srtp *ds, unsigned idx)",
          "456:     if (ds->ossl_ssl[idx])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "488:     pj_assert(rc);",
          "494:         SSL_CTX_free(ctx);",
          "495:         return GET_SSL_STATUS(ds);",
          "496:     }",
          "499: #ifdef DTLS_CTRL_SET_LINK_MTU",
          "501:                   NULL))",
          "502:     {",
          "503:         PJ_LOG(4, (ds->base.name,",
          "",
          "[Removed Lines]",
          "491:     ds->ossl_ctx = ctx;",
          "492:     ds->ossl_ssl = SSL_new(ds->ossl_ctx);",
          "493:     if (ds->ossl_ssl == NULL) {",
          "500:     if (!SSL_ctrl(ds->ossl_ssl, DTLS_CTRL_SET_LINK_MTU, PJMEDIA_MAX_MTU,",
          "",
          "[Added Lines]",
          "512:     ds->ossl_ctx[idx] = ctx;",
          "513:     ds->ossl_ssl[idx] = SSL_new(ds->ossl_ctx[idx]);",
          "514:     if (ds->ossl_ssl[idx] == NULL) {",
          "521:     if (!SSL_ctrl(ds->ossl_ssl[idx], DTLS_CTRL_SET_LINK_MTU, PJMEDIA_MAX_MTU,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "510:     mode = SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT;",
          "520:     return PJ_SUCCESS;",
          "521: }",
          "526: {",
          "527:     pj_lock_acquire(ds->ossl_lock);",
          "538:         }",
          "544:     }",
          "550:     }",
          "552:     pj_lock_release(ds->ossl_lock);",
          "553: }",
          "556: {",
          "557:     unsigned char material[SRTP_MAX_KEY_LEN * 2];",
          "558:     SRTP_PROTECTION_PROFILE *profile;",
          "",
          "[Removed Lines]",
          "511:     SSL_set_verify(ds->ossl_ssl, mode, &verify_cb);",
          "514:     ds->ossl_rbio = BIO_new(BIO_s_mem());",
          "515:     ds->ossl_wbio = BIO_new(BIO_s_mem());",
          "516:     (void)BIO_set_close(ds->ossl_rbio, BIO_CLOSE);",
          "517:     (void)BIO_set_close(ds->ossl_wbio, BIO_CLOSE);",
          "518:     SSL_set_bio(ds->ossl_ssl, ds->ossl_rbio, ds->ossl_wbio);",
          "525: static void ssl_destroy(dtls_srtp *ds)",
          "530:     if (ds->ossl_ssl) {",
          "536:         if (SSL_in_init(ds->ossl_ssl) == 0) {",
          "537:             SSL_shutdown(ds->ossl_ssl);",
          "540:         ds->ossl_ssl = NULL;",
          "542:         ds->ossl_rbio = NULL;",
          "543:         ds->ossl_wbio = NULL;",
          "547:     if (ds->ossl_ctx) {",
          "548:         SSL_CTX_free(ds->ossl_ctx);",
          "549:         ds->ossl_ctx = NULL;",
          "555: static pj_status_t ssl_get_srtp_material(dtls_srtp *ds)",
          "",
          "[Added Lines]",
          "532:     SSL_set_verify(ds->ossl_ssl[idx], mode, &verify_cb);",
          "535:     ds->ossl_rbio[idx] = BIO_new(BIO_s_mem());",
          "536:     ds->ossl_wbio[idx] = BIO_new(BIO_s_mem());",
          "537:     (void)BIO_set_close(ds->ossl_rbio[idx], BIO_CLOSE);",
          "538:     (void)BIO_set_close(ds->ossl_wbio[idx], BIO_CLOSE);",
          "539:     SSL_set_bio(ds->ossl_ssl[idx], ds->ossl_rbio[idx], ds->ossl_wbio[idx]);",
          "546: static void ssl_destroy(dtls_srtp *ds, unsigned idx)",
          "551:     if (ds->ossl_ssl[idx]) {",
          "557:         if (SSL_in_init(ds->ossl_ssl[idx]) == 0) {",
          "558:             SSL_shutdown(ds->ossl_ssl[idx]);",
          "561:         ds->ossl_ssl[idx] = NULL;",
          "563:         ds->ossl_rbio[idx] = NULL;",
          "564:         ds->ossl_wbio[idx] = NULL;",
          "568:     if (ds->ossl_ctx[idx]) {",
          "569:         SSL_CTX_free(ds->ossl_ctx[idx]);",
          "570:         ds->ossl_ctx[idx] = NULL;",
          "576: static pj_status_t ssl_get_srtp_material(dtls_srtp *ds, unsigned idx)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "563:     pj_lock_acquire(ds->ossl_lock);",
          "566:         status = PJ_EGONE;",
          "567:         goto on_return;",
          "568:     }",
          "572:     if (!profile) {",
          "573:         status = PJMEDIA_SRTP_DTLS_ENOCRYPTO;",
          "574:         goto on_return;",
          "575:     }",
          "579:     pj_bzero(tx, sizeof(*tx));",
          "580:     pj_bzero(rx, sizeof(*rx));",
          "581:     for (i=0; i<(int)PJ_ARRAY_SIZE(ossl_profiles); ++i) {",
          "",
          "[Removed Lines]",
          "565:     if (!ds->ossl_ssl) {",
          "571:     profile = SSL_get_selected_srtp_profile(ds->ossl_ssl);",
          "577:     tx = &ds->tx_crypto;",
          "578:     rx = &ds->rx_crypto;",
          "",
          "[Added Lines]",
          "586:     if (!ds->ossl_ssl[idx]) {",
          "592:     profile = SSL_get_selected_srtp_profile(ds->ossl_ssl[idx]);",
          "598:     tx = &ds->tx_crypto[idx];",
          "599:     rx = &ds->rx_crypto[idx];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "599:     if (rc == 0) {",
          "600:         status = PJMEDIA_SRTP_EINKEYLEN;",
          "601:         goto on_return;",
          "",
          "[Removed Lines]",
          "597:     rc = SSL_export_keying_material(ds->ossl_ssl, material, sizeof(material),",
          "598:                                     \"EXTRACTOR-dtls_srtp\", 19, NULL, 0, 0);",
          "",
          "[Added Lines]",
          "618:     rc = SSL_export_keying_material(ds->ossl_ssl[idx], material,",
          "619:                                     sizeof(material), \"EXTRACTOR-dtls_srtp\",",
          "620:                                     19, NULL, 0, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "635: }",
          "639: {",
          "640:     X509 *rem_cert;",
          "641:     pj_bool_t is_sha256;",
          "",
          "[Removed Lines]",
          "638: static pj_status_t ssl_match_fingerprint(dtls_srtp *ds)",
          "",
          "[Added Lines]",
          "660: static pj_status_t ssl_match_fingerprint(dtls_srtp *ds, unsigned idx)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "655:     }",
          "657:     pj_lock_acquire(ds->ossl_lock);",
          "659:         pj_lock_release(ds->ossl_lock);",
          "660:         return PJ_EGONE;",
          "661:     }",
          "666:     pj_lock_release(ds->ossl_lock);",
          "",
          "[Removed Lines]",
          "658:     if (!ds->ossl_ssl) {",
          "664:     rem_cert = SSL_get_peer_certificate(ds->ossl_ssl);",
          "",
          "[Added Lines]",
          "680:     if (!ds->ossl_ssl[idx]) {",
          "686:     rem_cert = SSL_get_peer_certificate(ds->ossl_ssl[idx]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "686: {",
          "687: #if DTLS_DEBUG",
          "689: #endif",
          "692: }",
          "",
          "[Removed Lines]",
          "685: static pj_status_t send_raw(dtls_srtp *ds, const void *buf, pj_size_t len)",
          "688:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP sending %d bytes\", len));",
          "691:     return pjmedia_transport_send_rtp(ds->srtp->member_tp, buf, len);",
          "",
          "[Added Lines]",
          "707: static pj_status_t send_raw(dtls_srtp *ds, unsigned idx, const void *buf,",
          "708:                             pj_size_t len)",
          "711:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP %s sending %lu bytes\",",
          "712:                              CHANNEL_TO_STRING(idx), len));",
          "715:     return (idx == RTP_CHANNEL?",
          "716:             pjmedia_transport_send_rtp(ds->srtp->member_tp, buf, len):",
          "717:             pjmedia_transport_send_rtcp(ds->srtp->member_tp, buf, len));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "721: {",
          "722:     pj_size_t len;",
          "723:     pj_status_t status = PJ_SUCCESS;",
          "725:     pj_lock_acquire(ds->ossl_lock);",
          "728:         pj_lock_release(ds->ossl_lock);",
          "729:         return PJ_EGONE;",
          "730:     }",
          "736:         if (len > 0) {",
          "737:             pj_lock_release(ds->ossl_lock);",
          "740:             if (status != PJ_SUCCESS) {",
          "741: #if DTLS_DEBUG",
          "742:                 pj_perror(2, ds->base.name, status, \"Send error\");",
          "",
          "[Removed Lines]",
          "720: static pj_status_t ssl_flush_wbio(dtls_srtp *ds)",
          "727:     if (!ds->ossl_wbio) {",
          "733:     if (BIO_ctrl_pending(ds->ossl_wbio) > 0) {",
          "735:         len = BIO_read(ds->ossl_wbio, ds->buf, sizeof(ds->buf));",
          "739:             status = send_raw(ds, ds->buf, len);",
          "",
          "[Added Lines]",
          "746: static pj_status_t ssl_flush_wbio(dtls_srtp *ds, unsigned idx)",
          "753:     if (!ds->ossl_wbio[idx]) {",
          "759:     if (BIO_ctrl_pending(ds->ossl_wbio[idx]) > 0) {",
          "761:         len = BIO_read(ds->ossl_wbio[idx], ds->buf[idx], sizeof(ds->buf));",
          "765:             status = send_raw(ds, idx, ds->buf[idx], len);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "749:         }",
          "750:     }",
          "753:         pj_lock_release(ds->ossl_lock);",
          "754:         return PJ_EGONE;",
          "755:     }",
          "",
          "[Removed Lines]",
          "752:     if (!ds->ossl_ssl) {",
          "",
          "[Added Lines]",
          "778:     if (!ds->ossl_ssl[idx]) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "761:         pj_lock_release(ds->ossl_lock);",
          "762:         return PJ_SUCCESS;",
          "763:     }",
          "769:     pj_lock_release(ds->ossl_lock);",
          "",
          "[Removed Lines]",
          "760:     if (ds->nego_completed || !SSL_is_init_finished(ds->ossl_ssl)) {",
          "766:     ds->nego_completed = PJ_TRUE;",
          "767:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP negotiation completed!\"));",
          "",
          "[Added Lines]",
          "786:     if (ds->nego_completed[idx] || !SSL_is_init_finished(ds->ossl_ssl[idx])) {",
          "792:     ds->nego_completed[idx] = PJ_TRUE;",
          "793:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP negotiation for %s completed!\",",
          "794:                              CHANNEL_TO_STRING(idx)));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "780:     if (status != PJ_SUCCESS) {",
          "781:         pj_perror(4, ds->base.name, status,",
          "782:                   \"Failed to get SRTP material\");",
          "",
          "[Removed Lines]",
          "775:     if (ds->clock)",
          "776:         pjmedia_clock_stop(ds->clock);",
          "779:     status = ssl_get_srtp_material(ds);",
          "",
          "[Added Lines]",
          "802:     if (ds->clock[idx])",
          "803:         pjmedia_clock_stop(ds->clock[idx]);",
          "806:     status = ssl_get_srtp_material(ds, idx);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "787:     if (ds->rem_fingerprint.slen && ds->rem_fprint_status == PJ_EPENDING) {",
          "789:         if (status != PJ_SUCCESS) {",
          "790:             pj_perror(4, ds->base.name, status,",
          "791:                       \"Fingerprint specified in remote SDP doesn't match \"",
          "",
          "[Removed Lines]",
          "788:         ds->rem_fprint_status = status = ssl_match_fingerprint(ds);",
          "",
          "[Added Lines]",
          "815:         ds->rem_fprint_status = status = ssl_match_fingerprint(ds, idx);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "795:     }",
          "799:         ds->pending_start = PJ_FALSE;",
          "800:         ds->srtp->keying_pending_cnt--;",
          "806:         status = start_srtp(ds->srtp);",
          "807:         if (status != PJ_SUCCESS)",
          "808:             pj_perror(4, ds->base.name, status, \"Failed starting SRTP\");",
          "809:     }",
          "811: on_return:",
          "813:         (*ds->srtp->setting.cb.on_srtp_nego_complete)",
          "814:                                             (&ds->srtp->base, status);",
          "815:     }",
          "",
          "[Removed Lines]",
          "798:     if (ds->pending_start) {",
          "803:         ds->srtp->tx_policy_neg = ds->tx_crypto;",
          "804:         ds->srtp->rx_policy_neg = ds->rx_crypto;",
          "812:     if (ds->srtp->setting.cb.on_srtp_nego_complete) {",
          "",
          "[Added Lines]",
          "825:     if (ds->pending_start && idx == RTP_CHANNEL) {",
          "830:         ds->srtp->srtp_ctx.tx_policy_neg = ds->tx_crypto[idx];",
          "831:         ds->srtp->srtp_ctx.rx_policy_neg = ds->rx_crypto[idx];",
          "836:     } else if (idx == RTCP_CHANNEL) {",
          "837:         pjmedia_srtp_setting setting;",
          "839:         pjmedia_srtp_setting_default (&setting);",
          "842:         ds->srtp->srtp_rtcp.tx_policy_neg = ds->tx_crypto[idx];",
          "843:         ds->srtp->srtp_rtcp.rx_policy_neg = ds->rx_crypto[idx];",
          "845:         status = create_srtp_ctx(ds->srtp, &ds->srtp->srtp_rtcp,",
          "846:                                  &setting, &ds->srtp->srtp_rtcp.tx_policy_neg,",
          "847:                                  &ds->srtp->srtp_rtcp.rx_policy_neg);",
          "848:         if (status != PJ_SUCCESS)",
          "849:             pj_perror(4, ds->base.name, status, \"Failed creating SRTP RTCP\");",
          "853:     if (idx == RTP_CHANNEL && ds->srtp->setting.cb.on_srtp_nego_complete) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "821: static void clock_cb(const pj_timestamp *ts, void *user_data)",
          "822: {",
          "825:     PJ_UNUSED_ARG(ts);",
          "827:     pj_lock_acquire(ds->ossl_lock);",
          "830:         pj_lock_release(ds->ossl_lock);",
          "831:         return;",
          "832:     }",
          "835:         pj_lock_release(ds->ossl_lock);",
          "837:     } else {",
          "838:         pj_lock_release(ds->ossl_lock);",
          "839:     }",
          "",
          "[Removed Lines]",
          "823:     dtls_srtp *ds = (dtls_srtp*)user_data;",
          "829:     if (!ds->ossl_ssl) {",
          "834:     if (DTLSv1_handle_timeout(ds->ossl_ssl) > 0) {",
          "836:         ssl_flush_wbio(ds);",
          "",
          "[Added Lines]",
          "864:     dtls_srtp_channel *ds_ch = (dtls_srtp_channel*)user_data;",
          "865:     dtls_srtp *ds = ds_ch->dtls_srtp;",
          "866:     unsigned idx = ds_ch->channel;",
          "872:     if (!ds->ossl_ssl[idx]) {",
          "877:     if (DTLSv1_handle_timeout(ds->ossl_ssl[idx]) > 0) {",
          "879:         ssl_flush_wbio(ds, idx);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "845: {",
          "846:     pj_status_t status;",
          "847:     int err;",
          "",
          "[Removed Lines]",
          "844: static pj_status_t ssl_handshake(dtls_srtp *ds)",
          "",
          "[Added Lines]",
          "887: static pj_status_t ssl_handshake_channel(dtls_srtp *ds, unsigned idx)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "849:     pj_lock_acquire(ds->ossl_lock);",
          "853:     if (status != PJ_SUCCESS) {",
          "854:         pj_lock_release(ds->ossl_lock);",
          "855:         return status;",
          "856:     }",
          "860:         pj_lock_release(ds->ossl_lock);",
          "861:         return PJ_SUCCESS;",
          "862:     }",
          "865:     if (ds->setup == DTLS_SETUP_ACTIVE) {",
          "867:     } else {",
          "869:     }",
          "871:     if (err < 0) {",
          "874:         pj_lock_release(ds->ossl_lock);",
          "876:         if (err == SSL_ERROR_WANT_READ) {",
          "878:             if (status != PJ_SUCCESS)",
          "879:                 goto on_return;",
          "880:         } else if (err != SSL_ERROR_NONE) {",
          "",
          "[Removed Lines]",
          "852:     status = ssl_create(ds);",
          "859:     if (ds->nego_started || SSL_is_init_finished(ds->ossl_ssl)) {",
          "866:         SSL_set_connect_state(ds->ossl_ssl);",
          "868:         SSL_set_accept_state(ds->ossl_ssl);",
          "870:     err = SSL_do_handshake(ds->ossl_ssl);",
          "872:         err = SSL_get_error(ds->ossl_ssl, err);",
          "877:             status = ssl_flush_wbio(ds);",
          "",
          "[Added Lines]",
          "895:     status = ssl_create(ds, idx);",
          "902:     if (ds->nego_started[idx] || SSL_is_init_finished(ds->ossl_ssl[idx])) {",
          "909:         SSL_set_connect_state(ds->ossl_ssl[idx]);",
          "911:         SSL_set_accept_state(ds->ossl_ssl[idx]);",
          "913:     err = SSL_do_handshake(ds->ossl_ssl[idx]);",
          "915:         err = SSL_get_error(ds->ossl_ssl[idx], err);",
          "920:             status = ssl_flush_wbio(ds, idx);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "888:     }",
          "892:         status = pjmedia_clock_create(ds->pool, 4, 1, 1,",
          "893:                                       PJMEDIA_CLOCK_NO_HIGHEST_PRIO, clock_cb,",
          "895:         if (status != PJ_SUCCESS)",
          "896:             goto on_return;",
          "897:     }",
          "899:     if (status != PJ_SUCCESS)",
          "900:         goto on_return;",
          "905:               (ds->setup==DTLS_SETUP_ACTIVE? \"client\":\"server\")));",
          "907: on_return:",
          "908:     if (status != PJ_SUCCESS) {",
          "911:     }",
          "912:     return status;",
          "913: }",
          "",
          "[Removed Lines]",
          "891:     if (!ds->clock) {",
          "894:                                       ds, &ds->clock);",
          "898:     status = pjmedia_clock_start(ds->clock);",
          "903:     ds->nego_started = PJ_TRUE;",
          "904:     PJ_LOG(4,(ds->base.name, \"DTLS-SRTP negotiation initiated as %s\",",
          "909:         if (ds->clock)",
          "910:             pjmedia_clock_stop(ds->clock);",
          "",
          "[Added Lines]",
          "934:     if (!ds->clock[idx]) {",
          "935:         ds->channel[idx].dtls_srtp = ds;",
          "936:         ds->channel[idx].channel = idx;",
          "939:                                       &ds->channel[idx], &ds->clock[idx]);",
          "943:     status = pjmedia_clock_start(ds->clock[idx]);",
          "948:     ds->nego_started[idx] = PJ_TRUE;",
          "949:     PJ_LOG(4,(ds->base.name, \"DTLS-SRTP %s negotiation initiated as %s\",",
          "950:               CHANNEL_TO_STRING(idx),",
          "955:         if (ds->clock[idx])",
          "956:             pjmedia_clock_stop(ds->clock[idx]);",
          "961: static pj_status_t ssl_handshake(dtls_srtp *ds)",
          "962: {",
          "963:     pj_status_t status;",
          "965:     status = ssl_handshake_channel(ds, RTP_CHANNEL);",
          "966:     if (status != PJ_SUCCESS)",
          "967:         return status;",
          "969:     if (!ds->srtp->use_rtcp_mux)",
          "970:         status = ssl_handshake_channel(ds, RTCP_CHANNEL);",
          "972:     return status;",
          "973: }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1074:                                       const void *data, pj_size_t len)",
          "1075: {",
          "1076:     char tmp[128];",
          "",
          "[Removed Lines]",
          "1073: static pj_status_t ssl_on_recv_packet(dtls_srtp *ds,",
          "",
          "[Added Lines]",
          "1132: static pj_status_t ssl_on_recv_packet(dtls_srtp *ds, unsigned idx,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1079:     pj_lock_acquire(ds->ossl_lock);",
          "1082:         pj_lock_release(ds->ossl_lock);",
          "1083:         return PJ_EGONE;",
          "1084:     }",
          "1087:     if (nwritten < len) {",
          "1089:         pj_status_t status;",
          "",
          "[Removed Lines]",
          "1081:     if (!ds->ossl_rbio) {",
          "1086:     nwritten = BIO_write(ds->ossl_rbio, data, (int)len);",
          "",
          "[Added Lines]",
          "1140:     if (!ds->ossl_rbio[idx]) {",
          "1145:     nwritten = BIO_write(ds->ossl_rbio[idx], data, (int)len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1095:         return status;",
          "1096:     }",
          "1099:         pj_lock_release(ds->ossl_lock);",
          "1100:         return PJ_EGONE;",
          "1101:     }",
          "1104:     while (1) {",
          "1106:         if (rc <= 0) {",
          "1107: #if DTLS_DEBUG",
          "1108:             pj_status_t status = GET_SSL_STATUS(ds);",
          "",
          "[Removed Lines]",
          "1098:     if (!ds->ossl_ssl) {",
          "1105:         int rc = SSL_read(ds->ossl_ssl, tmp, sizeof(tmp));",
          "",
          "[Added Lines]",
          "1157:     if (!ds->ossl_ssl[idx]) {",
          "1164:         int rc = SSL_read(ds->ossl_ssl[idx], tmp, sizeof(tmp));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1116:     pj_lock_release(ds->ossl_lock);",
          "1120: }",
          "",
          "[Removed Lines]",
          "1119:     return ssl_flush_wbio(ds);",
          "",
          "[Added Lines]",
          "1178:     return ssl_flush_wbio(ds, idx);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1157: {",
          "1158:     dtls_srtp *ds = (dtls_srtp*)tp;",
          "1164:     }",
          "1166:     if (size < 1 || !IS_DTLS_PKT(pkt, size))",
          "1167:         return PJ_EIGNORED;",
          "1169: #if DTLS_DEBUG",
          "1171: #endif",
          "",
          "[Removed Lines]",
          "1154: static pj_status_t dtls_on_recv_rtp( pjmedia_transport *tp,",
          "1155:                                      const void *pkt,",
          "1156:                                      pj_size_t size)",
          "1161:     if (ds->clock && ds->nego_completed) {",
          "1162:         pjmedia_clock_destroy(ds->clock);",
          "1163:         ds->clock = NULL;",
          "1170:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP receiving %d bytes\", size));",
          "",
          "[Added Lines]",
          "1209: static pj_status_t dtls_on_recv(pjmedia_transport *tp, unsigned idx,",
          "1210:                                 const void *pkt, pj_size_t size)",
          "1215:     if (ds->clock[idx] && ds->nego_completed[idx]) {",
          "1216:         pjmedia_clock_destroy(ds->clock[idx]);",
          "1217:         ds->clock[idx] = NULL;",
          "1224:     PJ_LOG(2,(ds->base.name, \"DTLS-SRTP %s receiving %lu bytes\",",
          "1225:                              CHANNEL_TO_STRING(idx), size));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1180:         pjmedia_transport_info info;",
          "1181:         pjmedia_transport_get_info(ds->srtp->member_tp, &info);",
          "1182:         if (pj_sockaddr_cmp(&ds->rem_addr, &info.src_rtp_name)) {",
          "",
          "[Removed Lines]",
          "1179:     if (!ds->use_ice && !ds->nego_completed) {",
          "",
          "[Added Lines]",
          "1234:     if (idx == RTP_CHANNEL && !ds->use_ice && !ds->nego_completed[idx]) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1226:         (ds->setup == DTLS_SETUP_ACTPASS || ds->setup == DTLS_SETUP_PASSIVE))",
          "1227:     {",
          "1228:         pj_status_t status;",
          "1229:         ds->setup = DTLS_SETUP_PASSIVE;",
          "1231:         if (status != PJ_SUCCESS)",
          "1232:             return status;",
          "1233:     }",
          "1237:     return PJ_SUCCESS;",
          "1238: }",
          "1240: static pj_status_t dtls_media_create( pjmedia_transport *tp,",
          "1241:                                       pj_pool_t *sdp_pool,",
          "1242:                                       unsigned options,",
          "",
          "[Removed Lines]",
          "1225:     if (!ds->nego_started &&",
          "1230:         status = ssl_handshake(ds);",
          "1236:     ssl_on_recv_packet(ds, pkt, size);",
          "",
          "[Added Lines]",
          "1280:     if (!ds->nego_started[idx] &&",
          "1285:         status = ssl_handshake_channel(ds, idx);",
          "1291:     ssl_on_recv_packet(ds, idx, pkt, size);",
          "1299: static pj_status_t dtls_on_recv_rtp( pjmedia_transport *tp,",
          "1300:                                      const void *pkt,",
          "1301:                                      pj_size_t size)",
          "1302: {",
          "1303:     return dtls_on_recv(tp, RTP_CHANNEL, pkt, size);",
          "1304: }",
          "1310: static pj_status_t dtls_on_recv_rtcp(pjmedia_transport *tp,",
          "1311:                                      const void *pkt,",
          "1312:                                      pj_size_t size)",
          "1313: {",
          "1314:     return dtls_on_recv(tp, RTCP_CHANNEL, pkt, size);",
          "1315: }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1308:     return status;",
          "1309: }",
          "1311: static pj_status_t dtls_encode_sdp( pjmedia_transport *tp,",
          "1312:                                     pj_pool_t *sdp_pool,",
          "1313:                                     pjmedia_sdp_session *sdp_local,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1388: static void dtls_media_stop_channel(dtls_srtp *ds, unsigned idx)",
          "1389: {",
          "1390:     if (ds->clock[idx])",
          "1391:         pjmedia_clock_stop(ds->clock[idx]);",
          "1394:     ssl_destroy(ds, idx);",
          "1395:     ds->nego_started[idx] = PJ_FALSE;",
          "1396:     ds->nego_completed[idx] = PJ_FALSE;",
          "1397: }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1409:              pj_memcmp(&last_rem_fp, &ds->rem_fingerprint, sizeof(pj_str_t)))||",
          "1410:             (rem_addr_changed))",
          "1411:         {",
          "1415:             ds->got_keys = PJ_FALSE;",
          "1416:             ds->rem_fprint_status = PJ_EPENDING;",
          "1417:         }",
          "",
          "[Removed Lines]",
          "1412:             ssl_destroy(ds);",
          "1413:             ds->nego_started = PJ_FALSE;",
          "1414:             ds->nego_completed = PJ_FALSE;",
          "",
          "[Added Lines]",
          "1500:             dtls_media_stop_channel(ds, RTP_CHANNEL);",
          "1501:             dtls_media_stop_channel(ds, RTCP_CHANNEL);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1443:         pjmedia_sdp_media_add_attr(m_loc, a);",
          "1444:     }",
          "",
          "[Removed Lines]",
          "1446:     if (ds->nego_completed) {",
          "",
          "[Added Lines]",
          "1533:     if (ds->nego_completed[RTP_CHANNEL]) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1575:             (last_rem_fp.slen &&",
          "1576:              pj_memcmp(&last_rem_fp, &ds->rem_fingerprint, sizeof(pj_str_t))))",
          "1577:         {",
          "1581:             ds->got_keys = PJ_FALSE;",
          "1582:             ds->rem_fprint_status = PJ_EPENDING;",
          "1583:         }",
          "",
          "[Removed Lines]",
          "1578:             ssl_destroy(ds);",
          "1579:             ds->nego_started = PJ_FALSE;",
          "1580:             ds->nego_completed = PJ_FALSE;",
          "",
          "[Added Lines]",
          "1665:             dtls_media_stop_channel(ds, RTP_CHANNEL);",
          "1666:             dtls_media_stop_channel(ds, RTCP_CHANNEL);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1597:         if (pj_sockaddr_cmp(&info.sock_info.rtp_addr_name,",
          "1598:                             &info.sock_info.rtcp_addr_name) == 0)",
          "1599:         {",
          "1601:         }",
          "1602:         ice_info = (pjmedia_ice_transport_info*)",
          "1603:                    pjmedia_transport_info_get_spc_info(",
          "",
          "[Removed Lines]",
          "1600:             use_rtcp_mux = PJ_TRUE;",
          "",
          "[Added Lines]",
          "1686:             ds->srtp->use_rtcp_mux = use_rtcp_mux = PJ_TRUE;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1614:     if (ds->got_keys) {",
          "1619:         if (ds->rem_fingerprint.slen && ds->rem_fprint_status == PJ_EPENDING)",
          "1620:         {",
          "1622:             if (ds->rem_fprint_status != PJ_SUCCESS) {",
          "1623:                 pj_perror(4, ds->base.name, ds->rem_fprint_status,",
          "1624:                           \"Fingerprint specified in remote SDP doesn't match \"",
          "",
          "[Removed Lines]",
          "1615:         ds->srtp->tx_policy_neg = ds->tx_crypto;",
          "1616:         ds->srtp->rx_policy_neg = ds->rx_crypto;",
          "1621:             ds->rem_fprint_status = ssl_match_fingerprint(ds);",
          "",
          "[Added Lines]",
          "1701:         unsigned idx = RTP_CHANNEL;",
          "1703:         ds->srtp->srtp_ctx.tx_policy_neg = ds->tx_crypto[idx];",
          "1704:         ds->srtp->srtp_ctx.rx_policy_neg = ds->rx_crypto[idx];",
          "1709:             ds->rem_fprint_status = ssl_match_fingerprint(ds, idx);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1712:     PJ_LOG(2,(ds->base.name, \"dtls_media_stop()\"));",
          "1713: #endif",
          "1720:     ds->setup = DTLS_SETUP_UNKNOWN;",
          "1724:     ds->got_keys = PJ_FALSE;",
          "1725:     ds->rem_fingerprint.slen = 0;",
          "1726:     ds->rem_fprint_status = PJ_EPENDING;",
          "",
          "[Removed Lines]",
          "1715:     if (ds->clock)",
          "1716:         pjmedia_clock_stop(ds->clock);",
          "1719:     ssl_destroy(ds);",
          "1721:         ds->use_ice = PJ_FALSE;",
          "1722:     ds->nego_started = PJ_FALSE;",
          "1723:     ds->nego_completed = PJ_FALSE;",
          "",
          "[Added Lines]",
          "1803:     dtls_media_stop_channel(ds, RTP_CHANNEL);",
          "1804:     dtls_media_stop_channel(ds, RTCP_CHANNEL);",
          "1807:     ds->use_ice = PJ_FALSE;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1728:     return PJ_SUCCESS;",
          "1729: }",
          "1731: static pj_status_t dtls_destroy(pjmedia_transport *tp)",
          "1732: {",
          "1733:     dtls_srtp *ds = (dtls_srtp *)tp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1815: static void dtls_destroy_channel(dtls_srtp *ds, unsigned idx)",
          "1816: {",
          "1817:     if (ds->clock[idx]) {",
          "1818:         pjmedia_clock_destroy(ds->clock[idx]);",
          "1819:         ds->clock[idx] = NULL;",
          "1820:     }",
          "1821:     ssl_destroy(ds, idx);",
          "1822: }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1736:     PJ_LOG(2,(ds->base.name, \"dtls_destroy()\"));",
          "1737: #endif",
          "1743:     if (ds->ossl_lock) {",
          "1744:         pj_lock_destroy(ds->ossl_lock);",
          "",
          "[Removed Lines]",
          "1739:     if (ds->clock)",
          "1740:         pjmedia_clock_destroy(ds->clock);",
          "1741:     ssl_destroy(ds);",
          "",
          "[Added Lines]",
          "1832:     dtls_destroy_channel(ds, RTP_CHANNEL);",
          "1833:     dtls_destroy_channel(ds, RTCP_CHANNEL);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1816:     ap.user_data = ds->srtp;",
          "1817:     pj_sockaddr_cp(&ap.rem_addr, &ds->rem_addr);",
          "1818:     pj_sockaddr_cp(&ap.rem_rtcp, &ds->rem_rtcp);",
          "1819:     ap.addr_len = pj_sockaddr_get_len(&ap.rem_addr);",
          "1820:     status = pjmedia_transport_attach2(&ds->srtp->base, &ap);",
          "1821:     if (status != PJ_SUCCESS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1911:     if (pj_sockaddr_cmp(&ds->rem_addr, &ds->rem_rtcp) == 0)",
          "1912:         ds->srtp->use_rtcp_mux = PJ_TRUE;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1831: #endif",
          "1836:     status = ssl_handshake(ds);",
          "1837:     if (status != PJ_SUCCESS)",
          "1838:         goto on_return;",
          "1840: on_return:",
          "1841:     if (status != PJ_SUCCESS) {",
          "1843:     }",
          "1844:     return status;",
          "1845: }",
          "",
          "[Removed Lines]",
          "1834:     pj_bzero(&srtp->rx_policy_neg, sizeof(srtp->rx_policy_neg));",
          "1835:     pj_bzero(&srtp->tx_policy_neg, sizeof(srtp->tx_policy_neg));",
          "1842:         ssl_destroy(ds);",
          "",
          "[Added Lines]",
          "1928:     pj_bzero(&srtp->srtp_ctx.rx_policy_neg,",
          "1929:              sizeof(srtp->srtp_ctx.rx_policy_neg));",
          "1930:     pj_bzero(&srtp->srtp_ctx.tx_policy_neg,",
          "1931:              sizeof(srtp->srtp_ctx.tx_policy_neg));",
          "1938:         ssl_destroy(ds, RTP_CHANNEL);",
          "1939:         ssl_destroy(ds, RTCP_CHANNEL);",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/transport_srtp_sdes.c||pjmedia/src/pjmedia/transport_srtp_sdes.c": [
          "File: pjmedia/src/pjmedia/transport_srtp_sdes.c -> pjmedia/src/pjmedia/transport_srtp_sdes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:             for (i=0; i<srtp->setting.crypto_count; ++i) {",
          "400:                                &srtp->setting.crypto[i].name) != 0)",
          "401:                 {",
          "402:                     continue;",
          "",
          "[Removed Lines]",
          "398:                 if (srtp->tx_policy.name.slen &&",
          "399:                     pj_stricmp(&srtp->tx_policy.name,",
          "",
          "[Added Lines]",
          "398:                 if (srtp->srtp_ctx.tx_policy.name.slen &&",
          "399:                     pj_stricmp(&srtp->srtp_ctx.tx_policy.name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:                                 (int)crypto_suites[cs_idx].cipher_key_len)",
          "495:                                 return PJMEDIA_SRTP_EINKEYLEN;",
          "498:                             chosen_tag = tags[cr_attr_count];",
          "499:                             matched_idx = j;",
          "500:                             break;",
          "",
          "[Removed Lines]",
          "497:                             srtp->rx_policy_neg = tmp_rx_crypto;",
          "",
          "[Added Lines]",
          "497:                             srtp->srtp_ctx.rx_policy_neg = tmp_rx_crypto;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:             if (status != PJ_SUCCESS)",
          "552:                 return status;",
          "557:             if (buffer_len) {",
          "",
          "[Removed Lines]",
          "554:             srtp->tx_policy_neg = srtp->setting.crypto[matched_idx];",
          "",
          "[Added Lines]",
          "554:             srtp->srtp_ctx.tx_policy_neg = srtp->setting.crypto[matched_idx];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "655:     if (!srtp->offerer_side) {",
          "657:             return PJ_SUCCESS;",
          "",
          "[Removed Lines]",
          "656:         if (srtp->tx_policy_neg.name.slen == 0)",
          "",
          "[Added Lines]",
          "656:         if (srtp->srtp_ctx.tx_policy_neg.name.slen == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "662:         if (loc_cryto_cnt == 0)",
          "663:             return PJ_SUCCESS;",
          "666:                         &loc_crypto[0].name) == 0) &&",
          "668:                         &loc_crypto[0].key) != 0))",
          "669:         {",
          "671:             for (i = 0; i<srtp->setting.crypto_count ;++i) {",
          "672:                 if ((pj_stricmp(&srtp->setting.crypto[i].name,",
          "673:                                 &loc_crypto[0].name) == 0) &&",
          "",
          "[Removed Lines]",
          "665:         if ((pj_stricmp(&srtp->tx_policy_neg.name,",
          "667:             (pj_stricmp(&srtp->tx_policy_neg.key,",
          "670:             srtp->tx_policy_neg = loc_crypto[0];",
          "",
          "[Added Lines]",
          "665:         if ((pj_stricmp(&srtp->srtp_ctx.tx_policy_neg.name,",
          "667:             (pj_stricmp(&srtp->srtp_ctx.tx_policy_neg.key,",
          "670:             srtp->srtp_ctx.tx_policy_neg = loc_crypto[0];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "752:             if (pj_stricmp(&tmp_tx_crypto.name,",
          "753:                            &loc_crypto[j].name) == 0)",
          "754:             {",
          "756:                 break;",
          "757:             }",
          "758:         }",
          "761:     }",
          "763:     if (srtp->setting.use == PJMEDIA_SRTP_DISABLED) {",
          "",
          "[Removed Lines]",
          "755:                 srtp->tx_policy_neg = loc_crypto[j];",
          "760:         srtp->rx_policy_neg = tmp_tx_crypto;",
          "",
          "[Added Lines]",
          "755:                 srtp->srtp_ctx.tx_policy_neg = loc_crypto[j];",
          "760:         srtp->srtp_ctx.rx_policy_neg = tmp_tx_crypto;",
          "",
          "---------------"
        ],
        "pjmedia/src/pjmedia/transport_udp.c||pjmedia/src/pjmedia/transport_udp.c": [
          "File: pjmedia/src/pjmedia/transport_udp.c -> pjmedia/src/pjmedia/transport_udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define RTP_LEN     PJMEDIA_MAX_MRU",
          "37: #define MAX_PENDING 4",
          "",
          "[Removed Lines]",
          "34: #define RTCP_LEN    600",
          "",
          "[Added Lines]",
          "34: #if defined(PJMEDIA_SRTP_HAS_DTLS) && (PJMEDIA_SRTP_HAS_DTLS != 0)",
          "35: #   define RTCP_LEN    PJMEDIA_MAX_MRU",
          "36: #else",
          "37: #   define RTCP_LEN    600",
          "38: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}