{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "859f219690db5a1b91865e0a70c2b71d19be42a6",
      "candidate_info": {
        "commit_hash": "859f219690db5a1b91865e0a70c2b71d19be42a6",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/859f219690db5a1b91865e0a70c2b71d19be42a6",
        "files": [
          "ports/stm32/mboot/main.c"
        ],
        "message": "stm32/mboot: Guard use of tx_pending with USE_USB_POLLING option.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c": [
          "File: ports/stm32/mboot/main.c -> ports/stm32/mboot/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967: typedef struct _pyb_usbdd_obj_t {",
          "968:     bool started;",
          "969:     bool tx_pending;",
          "970:     USBD_HandleTypeDef hUSBDDevice;",
          "972:     uint8_t bRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "969:     #if USE_USB_POLLING",
          "971:     #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:         int len = dfu_handle_tx(self->bRequest, self->wValue, self->wLength, self->tx_buf, USB_XFER_SIZE);",
          "1162:         if (len >= 0) {",
          "1163:             self->tx_pending = true;",
          "1164:             USBD_CtlSendData(&self->hUSBDDevice, self->tx_buf, len);",
          "1165:         }",
          "1166:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1165:             #if USE_USB_POLLING",
          "1167:             #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1168: }",
          "1170: static uint8_t pyb_usbdd_EP0_TxSent(USBD_HandleTypeDef *pdev) {",
          "1171:     pyb_usbdd_obj_t *self = (pyb_usbdd_obj_t *)pdev->pClassData;",
          "1172:     self->tx_pending = false;",
          "1175:     dfu_process();",
          "1176:     #endif",
          "",
          "[Removed Lines]",
          "1173:     #if !USE_USB_POLLING",
          "",
          "[Added Lines]",
          "1175:     #if USE_USB_POLLING",
          "1178:     #else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1244: static void pyb_usbdd_init(pyb_usbdd_obj_t *self, int phy_id) {",
          "1245:     self->started = false;",
          "1246:     self->tx_pending = false;",
          "1247:     USBD_HandleTypeDef *usbd = &self->hUSBDDevice;",
          "1248:     usbd->id = phy_id;",
          "1249:     usbd->dev_state = USBD_STATE_DEFAULT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1251:     #if USE_USB_POLLING",
          "1253:     #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f04808151cf0b99eefe5dff036fac0ad76356c0",
      "candidate_info": {
        "commit_hash": "1f04808151cf0b99eefe5dff036fac0ad76356c0",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/1f04808151cf0b99eefe5dff036fac0ad76356c0",
        "files": [
          "ports/renesas-ra/ra/ra_config.h",
          "ports/renesas-ra/ra/ra_init.c"
        ],
        "message": "renesas-ra/ra: Fix SysTick clock source.\n\nThe SysTick_Config function must use the system/CPU clock to configure the\nticks.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "ports/renesas-ra/ra/ra_config.h||ports/renesas-ra/ra/ra_config.h",
          "ports/renesas-ra/ra/ra_init.c||ports/renesas-ra/ra/ra_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/renesas-ra/ra/ra_config.h||ports/renesas-ra/ra/ra_config.h": [
          "File: ports/renesas-ra/ra/ra_config.h -> ports/renesas-ra/ra/ra_config.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define RA_RA_CONFIG_H_",
          "28: #include <stdint.h>",
          "30: #if defined(RA4M1) | defined(RA4W1)",
          "31: #define SCI_CH_MAX      10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include \"py/mpconfig.h\"",
          "",
          "---------------"
        ],
        "ports/renesas-ra/ra/ra_init.c||ports/renesas-ra/ra/ra_init.c": [
          "File: ports/renesas-ra/ra/ra_init.c -> ports/renesas-ra/ra/ra_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: void ra_init(void) {",
          "32:     ra_int_init();",
          "34:     internal_flash_init();",
          "35: }",
          "",
          "[Removed Lines]",
          "33:     SysTick_Config(PCLK / 1000);",
          "",
          "[Added Lines]",
          "33:     SysTick_Config(MICROPY_HW_MCU_SYSCLK / 1000);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce42c9ee1659ff86337a7f528332b4eaed6df0fc",
      "candidate_info": {
        "commit_hash": "ce42c9ee1659ff86337a7f528332b4eaed6df0fc",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/ce42c9ee1659ff86337a7f528332b4eaed6df0fc",
        "files": [
          "extmod/vfs_lfsx.c"
        ],
        "message": "extmod/vfs_lfs: Fix lfs cache_size calculation.\n\nThe calculation of the lfs2 cache_size was incorrect, the maximum allowed\nsize is block_size.\n\nThe cache size must be: \"a multiple of the read and program sizes, and a\nfactor of the block size\".\n\nSigned-off-by: Peter Z\u00fcger <zueger.peter@icloud.com>",
        "before_after_code_files": [
          "extmod/vfs_lfsx.c||extmod/vfs_lfsx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "extmod/vfs_lfsx.c||extmod/vfs_lfsx.c": [
          "File: extmod/vfs_lfsx.c -> extmod/vfs_lfsx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     config->lookahead_buffer = m_new(uint8_t, config->lookahead / 8);",
          "100:     #else",
          "101:     config->block_cycles = 100;",
          "103:     config->lookahead_size = lookahead;",
          "104:     config->read_buffer = m_new(uint8_t, config->cache_size);",
          "105:     config->prog_buffer = m_new(uint8_t, config->cache_size);",
          "",
          "[Removed Lines]",
          "102:     config->cache_size = 4 * MAX(read_size, prog_size);",
          "",
          "[Added Lines]",
          "102:     config->cache_size = MIN(config->block_size, (4 * MAX(read_size, prog_size)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80fd575c8cc103133fed4c7386f0b7165abd2678",
      "candidate_info": {
        "commit_hash": "80fd575c8cc103133fed4c7386f0b7165abd2678",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/80fd575c8cc103133fed4c7386f0b7165abd2678",
        "files": [
          "ports/embed/port/mpconfigport_common.h"
        ],
        "message": "embed: Fix alloca include for FreeBSD and NetBSD.\n\nSigned-off-by: darc <darcagn@protonmail.com>",
        "before_after_code_files": [
          "ports/embed/port/mpconfigport_common.h||ports/embed/port/mpconfigport_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/embed/port/mpconfigport_common.h||ports/embed/port/mpconfigport_common.h": [
          "File: ports/embed/port/mpconfigport_common.h -> ports/embed/port/mpconfigport_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: typedef long mp_off_t;",
          "36: #include <alloca.h>",
          "38: #define MICROPY_MPHALPORT_H \"port/mphalport.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #if defined(__FreeBSD__) || defined(__NetBSD__)",
          "37: #include <stdlib.h>",
          "38: #else",
          "40: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6f6f345e6f9e92b4876c6b70ad200e6c814f4df",
      "candidate_info": {
        "commit_hash": "c6f6f345e6f9e92b4876c6b70ad200e6c814f4df",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/c6f6f345e6f9e92b4876c6b70ad200e6c814f4df",
        "files": [
          "ports/renesas-ra/ra/ra_timer.h"
        ],
        "message": "renesas-ra/ra: Remove unnecessary min_delay() declaration.\n\nThis function is private to ra_adc.c.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "ports/renesas-ra/ra/ra_timer.h||ports/renesas-ra/ra/ra_timer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/renesas-ra/ra/ra_timer.h||ports/renesas-ra/ra/ra_timer.h": [
          "File: ports/renesas-ra/ra/ra_timer.h -> ports/renesas-ra/ra/ra_timer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define TENUSEC_COUNT (PCLK / DEF_CLKDEV / 100000)",
          "35: #define MSEC_COUNT    (PCLK / DEF_CLKDEV / 100)",
          "39: typedef void (*AGT_TIMER_CB)(void *);",
          "41: void ra_agt_timer_set_callback(uint32_t ch, AGT_TIMER_CB cb, void *param);",
          "",
          "[Removed Lines]",
          "37: __attribute__((naked)) void min_delay(__attribute__((unused)) uint32_t loop_cnt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}