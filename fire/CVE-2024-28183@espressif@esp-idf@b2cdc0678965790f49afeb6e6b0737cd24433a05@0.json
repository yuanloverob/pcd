{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "b2cdc0678965790f49afeb6e6b0737cd24433a05",
  "patch_info": {
    "commit_hash": "b2cdc0678965790f49afeb6e6b0737cd24433a05",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/b2cdc0678965790f49afeb6e6b0737cd24433a05",
    "files": [
      "components/bootloader_support/src/esp_image_format.c"
    ],
    "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
    "before_after_code_files": [
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: #endif",
      "702:     }",
      "703:     uint32_t *dest = (uint32_t *)load_addr;",
      "706:     const uint32_t *src = data;",
      "708: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "711:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "712:         data_len -= len;",
      "",
      "[Removed Lines]",
      "704: #endif",
      "709:     if (segment == 0) {",
      "",
      "[Added Lines]",
      "704: #endif // BOOTLOADER_BUILD",
      "712:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "713:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c33b9e1426121ce8cccf1a94241740be9cff68de",
      "candidate_info": {
        "commit_hash": "c33b9e1426121ce8cccf1a94241740be9cff68de",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/c33b9e1426121ce8cccf1a94241740be9cff68de",
        "files": [
          "components/bootloader_support/src/esp_image_format.c"
        ],
        "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
        "before_after_code_files": [
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688: #endif",
          "689:     }",
          "690:     uint32_t *dest = (uint32_t *)load_addr;",
          "693:     const uint32_t *src = data;",
          "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "699:         data_len -= len;",
          "",
          "[Removed Lines]",
          "691: #endif",
          "696:     if (segment == 0) {",
          "",
          "[Added Lines]",
          "691: #endif // BOOTLOADER_BUILD",
          "699:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "700:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40fe00a65cf4a2785b39bd8182486bb9f36204a5",
      "candidate_info": {
        "commit_hash": "40fe00a65cf4a2785b39bd8182486bb9f36204a5",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/40fe00a65cf4a2785b39bd8182486bb9f36204a5",
        "files": [
          "components/bootloader_support/src/esp_image_format.c"
        ],
        "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
        "before_after_code_files": [
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667: #endif",
          "668:     }",
          "669:     uint32_t *dest = (uint32_t *)load_addr;",
          "672:     const uint32_t *src = data;",
          "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "677:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "678:         data_len -= len;",
          "",
          "[Removed Lines]",
          "670: #endif",
          "675:     if (segment == 0) {",
          "",
          "[Added Lines]",
          "670: #endif // BOOTLOADER_BUILD",
          "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f047237aa58008b0142e9909ab218e224f7bfcae",
      "candidate_info": {
        "commit_hash": "f047237aa58008b0142e9909ab218e224f7bfcae",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/f047237aa58008b0142e9909ab218e224f7bfcae",
        "files": [
          "components/bootloader_support/src/esp_image_format.c"
        ],
        "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
        "before_after_code_files": [
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688: #endif",
          "689:     }",
          "690:     uint32_t *dest = (uint32_t *)load_addr;",
          "693:     const uint32_t *src = data;",
          "695: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "698:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "699:         data_len -= len;",
          "",
          "[Removed Lines]",
          "691: #endif",
          "696:     if (segment == 0) {",
          "",
          "[Added Lines]",
          "691: #endif // BOOTLOADER_BUILD",
          "699:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "700:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1620858985829c864e8b624870384ed5be2e0ec9",
      "candidate_info": {
        "commit_hash": "1620858985829c864e8b624870384ed5be2e0ec9",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/1620858985829c864e8b624870384ed5be2e0ec9",
        "files": [
          "components/bootloader_support/src/esp_image_format.c"
        ],
        "message": "fix(bootloader_support): check the secure version only for app image\n\nSecure version in the image header is only available for the application\nimage. However, for certain security workflows, bootloader verifies\nitself (own image) and hence the secure version check during that must be\navoided.\n\nRegression introduced in recent commit-id: 3305cb4d\n\nTested that both secure boot and flash-enc workflows work correctly\nwith the anti-rollback scenario.",
        "before_after_code_files": [
          "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ],
          "candidate": [
            "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c"
          ]
        }
      },
      "candidate_diff": {
        "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
          "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684: #endif",
          "685:     }",
          "686:     uint32_t *dest = (uint32_t *)load_addr;",
          "689:     const uint32_t *src = data;",
          "691: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
          "694:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
          "695:         data_len -= len;",
          "",
          "[Removed Lines]",
          "687: #endif",
          "692:     if (segment == 0) {",
          "",
          "[Added Lines]",
          "687: #endif // BOOTLOADER_BUILD",
          "695:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
          "696:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}