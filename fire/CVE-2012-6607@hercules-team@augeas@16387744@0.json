{
  "cve_id": "CVE-2012-6607",
  "cve_desc": "The transform_save function in transform.c in Augeas before 1.0.0 allows local users to overwrite arbitrary files and obtain sensitive information via a symlink attack on a .augsave file in a backup save action, a different vector than CVE-2012-0786.",
  "repo": "hercules-team/augeas",
  "patch_hash": "163877441402e464266b45ee98e24bb652971def",
  "patch_info": {
    "commit_hash": "163877441402e464266b45ee98e24bb652971def",
    "repo": "hercules-team/augeas",
    "commit_url": "https://github.com/hercules-team/augeas/commit/16387744",
    "files": [
      "bootstrap",
      "src/internal.c",
      "src/internal.h",
      "src/transform.c",
      "tests/Makefile.am",
      "tests/test-put-symlink-augnew.sh",
      "tests/test-put-symlink-augsave.sh",
      "tests/test-put-symlink-augtemp.sh",
      "tests/test-put-symlink.sh",
      "tests/test-save-empty.sh"
    ],
    "message": "Prevent symlink attacks via .augnew during saving\n\nInstead of saving into a predictable PATH.augnew file, save into a securely\ncreated PATH.augnew.XXXXXX\n\n* src/transform.c (transform_save):\n    write changes to a temporary file in the same directory as the destination\n    (either the file's canonical path or the path of .augnew), before renaming\n\n* src/transform.c (transfer_file_attrs):\n    use fchown, fchmod etc. on the same file handles to ensure consistent\n    permission changes\n\n* bootstrap: add mkstemp gnulib module\n* tests/\n    test-put-symlink-augnew.sh: test symlink attack when writing .augnew\n    test-put-symlink-augsave.sh: test symlink attack when writing .augsave\n    test-put-symlink-augtemp.sh: test symlink attack via temp .augnew\n    test-put-symlink.sh: also test file modification\n\nFixes BZ 772257",
    "before_after_code_files": [
      "src/internal.c||src/internal.c",
      "src/internal.h||src/internal.h",
      "src/transform.c||src/transform.c",
      "tests/Makefile.am||tests/Makefile.am",
      "tests/test-put-symlink-augnew.sh||tests/test-put-symlink-augnew.sh",
      "tests/test-put-symlink-augsave.sh||tests/test-put-symlink-augsave.sh",
      "tests/test-put-symlink-augtemp.sh||tests/test-put-symlink-augtemp.sh",
      "tests/test-put-symlink.sh||tests/test-put-symlink.sh",
      "tests/test-save-empty.sh||tests/test-save-empty.sh"
    ]
  },
  "patch_diff": {
    "src/internal.c||src/internal.c": [
      "File: src/internal.c -> src/internal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     return NULL;",
      "126: }",
      "130:     char *result;",
      "131:     size_t len;",
      "",
      "[Removed Lines]",
      "128: char* xread_file(const char *path) {",
      "129:     FILE *fp = fopen(path, \"r\");",
      "",
      "[Added Lines]",
      "128: char* xfread_file(FILE *fp) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:         return NULL;",
      "136:     result = fread_file_lim(fp, MAX_READ_LEN, &len);",
      "139:     if (result != NULL",
      "140:         && len <= MAX_READ_LEN",
      "",
      "[Removed Lines]",
      "137:     fclose (fp);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "145:     return NULL;",
      "146: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146: char* xread_file(const char *path) {",
      "147:     FILE *fp;",
      "148:     char *result;",
      "150:     fp = fopen(path, \"r\");",
      "151:     result = xfread_file(fp);",
      "152:     fclose (fp);",
      "154:     return result;",
      "155: }",
      "",
      "---------------"
    ],
    "src/internal.h||src/internal.h": [
      "File: src/internal.h -> src/internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: char* xread_file(const char *path);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "291: char* xfread_file(FILE *fp);",
      "",
      "---------------"
    ],
    "src/transform.c||src/transform.c": [
      "File: src/transform.c -> src/transform.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "799:     return filter_matches(xfm, path + strlen(AUGEAS_FILES_TREE));",
      "800: }",
      "803:                                const char **err_status) {",
      "804:     struct stat st;",
      "805:     int ret = 0;",
      "806:     int selinux_enabled = (is_selinux_enabled() > 0);",
      "807:     security_context_t con = NULL;",
      "810:     if (ret < 0) {",
      "812:         return -1;",
      "813:     }",
      "814:     if (selinux_enabled) {",
      "817:             return -1;",
      "818:         }",
      "819:     }",
      "823:         return -1;",
      "824:     }",
      "827:         return -1;",
      "828:     }",
      "829:     if (selinux_enabled && con != NULL) {",
      "832:             return -1;",
      "833:         }",
      "",
      "[Removed Lines]",
      "802: static int transfer_file_attrs(const char *from, const char *to,",
      "809:     ret = lstat(from, &st);",
      "815:         if (lgetfilecon(from, &con) < 0 && errno != ENOTSUP) {",
      "821:     if (lchown(to, st.st_uid, st.st_gid) < 0) {",
      "825:     if (chmod(to, st.st_mode) < 0) {",
      "830:         if (lsetfilecon(to, con) < 0 && errno != ENOTSUP) {",
      "",
      "[Added Lines]",
      "802: static int transfer_file_attrs(FILE *from, FILE *to,",
      "809:     int from_fd = fileno(from);",
      "810:     int to_fd = fileno(to);",
      "812:     ret = fstat(from_fd, &st);",
      "818:         if (fgetfilecon(from_fd, &con) < 0 && errno != ENOTSUP) {",
      "824:     if (fchown(to_fd, st.st_uid, st.st_gid) < 0) {",
      "828:     if (fchmod(to_fd, st.st_mode) < 0) {",
      "833:         if (fsetfilecon(to_fd, con) < 0 && errno != ENOTSUP) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "869:         goto done;",
      "870:     }",
      "873:         goto done;",
      "875:     while ((len = fread(buf, 1, BUFSIZ, from_fp)) > 0) {",
      "",
      "[Removed Lines]",
      "872:     if (transfer_file_attrs(from, to, err_status) < 0)",
      "",
      "[Added Lines]",
      "875:     if (transfer_file_attrs(from_fp, to_fp, err_status) < 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "957: int transform_save(struct augeas *aug, struct tree *xfm,",
      "958:                    const char *path, struct tree *tree) {",
      "962:     int   augorig_exists;",
      "963:     int   copy_if_rename_fails = 0;",
      "964:     char *text = NULL;",
      "",
      "[Removed Lines]",
      "959:     FILE *fp = NULL;",
      "960:     char *augnew = NULL, *augorig = NULL, *augsave = NULL;",
      "961:     char *augorig_canon = NULL;",
      "",
      "[Added Lines]",
      "980:     int   fd;",
      "981:     FILE *fp = NULL, *augorig_canon_fp = NULL;",
      "982:     char *augtemp = NULL, *augnew = NULL, *augorig = NULL, *augsave = NULL;",
      "983:     char *augorig_canon = NULL, *augdest = NULL;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "986:         goto done;",
      "987:     }",
      "1002:     augorig_canon = canonicalize_file_name(augorig);",
      "1003:     augorig_exists = 1;",
      "1004:     if (augorig_canon == NULL) {",
      "",
      "[Removed Lines]",
      "989:     if (access(augorig, R_OK) == 0) {",
      "990:         text = xread_file(augorig);",
      "991:     } else {",
      "992:         text = strdup(\"\");",
      "993:     }",
      "995:     if (text == NULL) {",
      "996:         err_status = \"put_read\";",
      "997:         goto done;",
      "998:     }",
      "1000:     text = append_newline(text, strlen(text));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1011:         }",
      "1012:     }",
      "1016:     if (aug->flags & AUG_SAVE_NEWFILE) {",
      "1017:         if (xasprintf(&augnew, \"%s\" EXT_AUGNEW, augorig) < 0) {",
      "1018:             err_status = \"augnew_oom\";",
      "1019:             goto done;",
      "1020:         }",
      "1021:     } else {",
      "1026:     }",
      "1032:     if (fp == NULL) {",
      "1034:         goto done;",
      "1035:     }",
      "1037:     if (augorig_exists) {",
      "1039:             err_status = \"xfer_attrs\";",
      "1040:             goto done;",
      "1041:         }",
      "",
      "[Removed Lines]",
      "1022:         if (xasprintf(&augnew, \"%s\" EXT_AUGNEW, augorig_canon) < 0) {",
      "1023:             err_status = \"augnew_oom\";",
      "1024:             goto done;",
      "1025:         }",
      "1031:     fp = fopen(augnew, \"w\");",
      "1033:         err_status = \"open_augnew\";",
      "1038:         if (transfer_file_attrs(augorig_canon, augnew, &err_status) != 0) {",
      "",
      "[Added Lines]",
      "1023:     if (access(augorig_canon, R_OK) == 0) {",
      "1024:         augorig_canon_fp = fopen(augorig_canon, \"r\");",
      "1025:         text = xfread_file(augorig_canon_fp);",
      "1026:     } else {",
      "1027:         text = strdup(\"\");",
      "1028:     }",
      "1030:     if (text == NULL) {",
      "1031:         err_status = \"put_read\";",
      "1032:         goto done;",
      "1033:     }",
      "1035:     text = append_newline(text, strlen(text));",
      "1044:         augdest = augnew;",
      "1046:         augdest = augorig_canon;",
      "1047:     }",
      "1049:     if (xasprintf(&augtemp, \"%s.XXXXXX\", augdest) < 0) {",
      "1050:         err_status = \"augtemp_oom\";",
      "1051:         goto done;",
      "1057:     fd = mkstemp(augtemp);",
      "1058:     if (fd < 0) {",
      "1059:         err_status = \"mk_augtemp\";",
      "1060:         goto done;",
      "1061:     }",
      "1062:     fp = fdopen(fd, \"w\");",
      "1064:         err_status = \"open_augtemp\";",
      "1069:         if (transfer_file_attrs(augorig_canon_fp, fp, &err_status) != 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1045:         lns_put(fp, lens, tree->children, text, &err);",
      "1047:     if (ferror(fp)) {",
      "1049:         goto done;",
      "1050:     }",
      "1052:     if (fflush(fp) != 0) {",
      "1054:         goto done;",
      "1055:     }",
      "1057:     if (fsync(fileno(fp)) < 0) {",
      "1059:         goto done;",
      "1060:     }",
      "1062:     if (fclose(fp) != 0) {",
      "1064:         fp = NULL;",
      "1065:         goto done;",
      "1066:     }",
      "",
      "[Removed Lines]",
      "1048:         err_status = \"error_augnew\";",
      "1053:         err_status = \"flush_augnew\";",
      "1058:         err_status = \"sync_augnew\";",
      "1063:         err_status = \"close_augnew\";",
      "",
      "[Added Lines]",
      "1079:         err_status = \"error_augtemp\";",
      "1084:         err_status = \"flush_augtemp\";",
      "1089:         err_status = \"sync_augtemp\";",
      "1094:         err_status = \"close_augtemp\";",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1070:     if (err != NULL) {",
      "1071:         err_status = err->pos >= 0 ? \"parse_skel_failed\" : \"put_failed\";",
      "1073:         goto done;",
      "1074:     }",
      "1076:     {",
      "1078:         int same = 0;",
      "1079:         if (new_text == NULL) {",
      "1081:             goto done;",
      "1082:         }",
      "1083:         same = STREQ(text, new_text);",
      "1084:         FREE(new_text);",
      "1085:         if (same) {",
      "1086:             result = 0;",
      "1088:             goto done;",
      "1089:         } else if (aug->flags & AUG_SAVE_NOOP) {",
      "1090:             result = 1;",
      "1092:             goto done;",
      "1093:         }",
      "1094:     }",
      "1096:     if (!(aug->flags & AUG_SAVE_NEWFILE)) {",
      "1097:         if (augorig_exists && (aug->flags & AUG_SAVE_BACKUP)) {",
      "1099:             if (r == -1) {",
      "1100:                 augsave = NULL;",
      "1101:                 goto done;",
      "",
      "[Removed Lines]",
      "1072:         unlink(augnew);",
      "1077:         char *new_text = xread_file(augnew);",
      "1080:             err_status = \"read_augnew\";",
      "1087:             unlink(augnew);",
      "1091:             unlink(augnew);",
      "1098:             r = asprintf(&augsave, \"%s%s\" EXT_AUGSAVE, aug->root, filename);",
      "",
      "[Added Lines]",
      "1103:         unlink(augtemp);",
      "1108:         char *new_text = xread_file(augtemp);",
      "1111:             err_status = \"read_augtemp\";",
      "1118:             unlink(augtemp);",
      "1122:             unlink(augtemp);",
      "1129:             r = xasprintf(&augsave, \"%s\" EXT_AUGSAVE, augorig);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1107:                 goto done;",
      "1108:             }",
      "1109:         }",
      "1116:     }",
      "1117:     result = 1;",
      "1119:  done:",
      "",
      "[Removed Lines]",
      "1110:         r = clone_file(augnew, augorig_canon, &err_status,",
      "1111:                        copy_if_rename_fails);",
      "1112:         if (r != 0) {",
      "1113:             dyn_err_status = strappend(err_status, \"_augnew\");",
      "1114:             goto done;",
      "1115:         }",
      "",
      "[Added Lines]",
      "1143:     r = clone_file(augtemp, augdest, &err_status, copy_if_rename_fails);",
      "1144:     if (r != 0) {",
      "1145:         dyn_err_status = strappend(err_status, \"_augtemp\");",
      "1146:         goto done;",
      "1147:     }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1138:     free(dyn_err_status);",
      "1139:     lens_release(lens);",
      "1140:     free(text);",
      "1141:     free(augnew);",
      "1142:     if (augorig_canon != augorig)",
      "1143:         free(augorig_canon);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1173:     free(augtemp);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1148:     if (fp != NULL)",
      "1149:         fclose(fp);",
      "1150:     return result;",
      "1151: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1183:     if (augorig_canon_fp != NULL)",
      "1184:         fclose(augorig_canon_fp);",
      "",
      "---------------"
    ],
    "tests/Makefile.am||tests/Makefile.am": [
      "File: tests/Makefile.am -> tests/Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "183:   test-interpreter.sh \\",
      "184:   $(lens_tests) \\",
      "185:   test-get.sh test-augtool.sh \\",
      "187:   test-bug-1.sh test-idempotent.sh test-preserve.sh \\",
      "188:   test-events-saved.sh test-save-mode.sh test-unlink-error.sh \\",
      "189:   test-augtool-empty-line.sh test-augtool-modify-root.sh",
      "",
      "[Removed Lines]",
      "186:   test-put-symlink.sh test-save-empty.sh \\",
      "",
      "[Added Lines]",
      "186:   test-put-symlink.sh test-put-symlink-augnew.sh \\",
      "187:   test-put-symlink-augsave.sh test-put-symlink-augtemp.sh test-save-empty.sh \\",
      "",
      "---------------"
    ],
    "tests/test-put-symlink-augnew.sh||tests/test-put-symlink-augnew.sh": [
      "File: tests/test-put-symlink-augnew.sh -> tests/test-put-symlink-augnew.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #! /bin/bash",
      "3: # Test that we don't follow symlinks when writing to .augnew",
      "5: ROOT=$abs_top_builddir/build/test-put-symlink-augnew",
      "6: LENSES=$abs_top_srcdir/lenses",
      "8: HOSTS=$ROOT/etc/hosts",
      "9: HOSTS_AUGNEW=${HOSTS}.augnew",
      "11: ATTACK_FILE=$ROOT/other/attack",
      "13: rm -rf $ROOT",
      "14: mkdir -p $(dirname $HOSTS)",
      "15: mkdir -p $(dirname $ATTACK_FILE)",
      "17: cat <<EOF > $HOSTS",
      "18: 127.0.0.1 localhost",
      "19: EOF",
      "20: touch $ATTACK_FILE",
      "22: (cd $(dirname $HOSTS) && ln -s ../other/attack $(basename $HOSTS).augnew)",
      "24: HOSTS_SUM=$(sum $HOSTS)",
      "26: augtool --nostdinc -I $LENSES -r $ROOT --new > /dev/null <<EOF",
      "27: set /files/etc/hosts/1/alias myhost",
      "28: save",
      "29: EOF",
      "31: if [ ! -f $HOSTS ] ; then",
      "32:     echo \"/etc/hosts is no longer a regular file\"",
      "33:     exit 1",
      "34: fi",
      "35: if [ ! \"x${HOSTS_SUM}\" = \"x$(sum $HOSTS)\" ]; then",
      "36:     echo \"/etc/hosts has changed\"",
      "37:     exit 1",
      "38: fi",
      "40: if [ ! -f $HOSTS_AUGNEW ] ; then",
      "41:     echo \"/etc/hosts.augnew is still a symlink, should be unlinked\"",
      "42:     exit 1",
      "43: fi",
      "44: if ! grep myhost $HOSTS_AUGNEW >/dev/null; then",
      "45:     echo \"/etc/hosts does not contain the modification\"",
      "46:     exit 1",
      "47: fi",
      "49: if [ -s $ATTACK_FILE ]; then",
      "50:     echo \"/other/attack now contains data, should be blank\"",
      "51:     exit 1",
      "52: fi",
      "",
      "---------------"
    ],
    "tests/test-put-symlink-augsave.sh||tests/test-put-symlink-augsave.sh": [
      "File: tests/test-put-symlink-augsave.sh -> tests/test-put-symlink-augsave.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #! /bin/bash",
      "3: # Test that we don't follow .augsave symlinks",
      "5: ROOT=$abs_top_builddir/build/test-put-symlink-augsave",
      "6: LENSES=$abs_top_srcdir/lenses",
      "8: HOSTS=$ROOT/etc/hosts",
      "9: HOSTS_AUGSAVE=${HOSTS}.augsave",
      "11: ATTACK_FILE=$ROOT/other/attack",
      "13: rm -rf $ROOT",
      "14: mkdir -p $(dirname $HOSTS)",
      "15: mkdir -p $(dirname $ATTACK_FILE)",
      "17: cat <<EOF > $HOSTS",
      "18: 127.0.0.1 localhost",
      "19: EOF",
      "20: HOSTS_SUM=$(sum $HOSTS)",
      "22: touch $ATTACK_FILE",
      "23: (cd $(dirname $HOSTS) && ln -s ../other/attack $(basename $HOSTS).augsave)",
      "25: # Now ask for the original to be saved in .augsave",
      "26: augtool --nostdinc -I $LENSES -r $ROOT --backup > /dev/null <<EOF",
      "27: set /files/etc/hosts/1/alias myhost",
      "28: save",
      "29: EOF",
      "31: if [ ! -f $HOSTS ] ; then",
      "32:     echo \"/etc/hosts is no longer a regular file\"",
      "33:     exit 1",
      "34: fi",
      "35: if [ ! -f $HOSTS_AUGNEW ] ; then",
      "36:     echo \"/etc/hosts.augsave is still a symlink, should be unlinked\"",
      "37:     exit 1",
      "38: fi",
      "40: if [ ! \"x${HOSTS_SUM}\" = \"x$(sum $HOSTS_AUGSAVE)\" ]; then",
      "41:     echo \"/etc/hosts.augsave has changed from the original /etc/hosts\"",
      "42:     exit 1",
      "43: fi",
      "44: if ! grep myhost $HOSTS >/dev/null; then",
      "45:     echo \"/etc/hosts does not contain the modification\"",
      "46:     exit 1",
      "47: fi",
      "49: if [ -s $ATTACK_FILE ]; then",
      "50:     echo \"/other/attack now contains data, should be blank\"",
      "51:     exit 1",
      "52: fi",
      "",
      "---------------"
    ],
    "tests/test-put-symlink-augtemp.sh||tests/test-put-symlink-augtemp.sh": [
      "File: tests/test-put-symlink-augtemp.sh -> tests/test-put-symlink-augtemp.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #! /bin/bash",
      "3: # Test that we don't follow .augnew symlinks (regression test)",
      "5: ROOT=$abs_top_builddir/build/test-put-symlink-augtemp",
      "6: LENSES=$abs_top_srcdir/lenses",
      "8: HOSTS=$ROOT/etc/hosts",
      "9: HOSTS_AUGNEW=${HOSTS}.augnew",
      "11: ATTACK_FILE=$ROOT/other/attack",
      "13: rm -rf $ROOT",
      "14: mkdir -p $(dirname $HOSTS)",
      "15: mkdir -p $(dirname $ATTACK_FILE)",
      "17: cat <<EOF > $HOSTS",
      "18: 127.0.0.1 localhost",
      "19: EOF",
      "20: touch $ATTACK_FILE",
      "22: (cd $(dirname $HOSTS) && ln -s ../other/attack $(basename $HOSTS).augnew)",
      "24: # Test the normal save code path which would use a temp augnew file",
      "25: augtool --nostdinc -I $LENSES -r $ROOT > /dev/null <<EOF",
      "26: set /files/etc/hosts/1/alias myhost1",
      "27: save",
      "28: EOF",
      "30: if [ -h $HOSTS ] ; then",
      "31:     echo \"/etc/hosts is now a symlink, pointing to\" $(readlink $HOSTS)",
      "32:     exit 1",
      "33: fi",
      "34: if ! grep myhost1 $HOSTS >/dev/null; then",
      "35:     echo \"/etc/hosts does not contain the modification\"",
      "36:     exit 1",
      "37: fi",
      "39: if [ ! -h $HOSTS_AUGNEW ] ; then",
      "40:     echo \"/etc/hosts.augnew is not a symbolic link\"",
      "41:     exit 1",
      "42: fi",
      "43: LINK=$(readlink $HOSTS_AUGNEW)",
      "44: if [ \"x$LINK\" != \"x../other/attack\" ] ; then",
      "45:     echo \"/etc/hosts.augnew no longer links to ../other/attack\"",
      "46:     exit 1",
      "47: fi",
      "49: if [ -s $ATTACK_FILE ]; then",
      "50:     echo \"/other/attack now contains data, should be blank\"",
      "51:     exit 1",
      "52: fi",
      "",
      "---------------"
    ],
    "tests/test-put-symlink.sh||tests/test-put-symlink.sh": [
      "File: tests/test-put-symlink.sh -> tests/test-put-symlink.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     echo \"/etc/hosts does not link to ../other/hosts\"",
      "42:     exit 1",
      "43: fi",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: if ! grep myhost $REAL_HOSTS >/dev/null; then",
      "46:     echo \"/other/hosts does not contain the modification\"",
      "47:     exit 1",
      "48: fi",
      "",
      "---------------"
    ],
    "tests/test-save-empty.sh||tests/test-save-empty.sh": [
      "File: tests/test-save-empty.sh -> tests/test-save-empty.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: expected_errors() {",
      "17: cat <<EOF",
      "19: /augeas/files/etc/hosts/error/message = \"No such file or directory\"",
      "20: EOF",
      "21: }",
      "",
      "[Removed Lines]",
      "18: /augeas/files/etc/hosts/error = \"open_augnew\"",
      "",
      "[Added Lines]",
      "18: /augeas/files/etc/hosts/error = \"mk_augtemp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: if [ \"$ACTUAL\" != \"$EXPECTED\" ]",
      "32: then",
      "34:     exit 1",
      "35: fi",
      "",
      "[Removed Lines]",
      "33:     echo \"No error on missing /etc directory\"",
      "",
      "[Added Lines]",
      "33:     echo \"No error on missing /etc directory:\"",
      "34:     echo \"$ACTUAL\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a66739c3fc14b3257af5d4a32d0a2a714a7b39d",
      "candidate_info": {
        "commit_hash": "1a66739c3fc14b3257af5d4a32d0a2a714a7b39d",
        "repo": "hercules-team/augeas",
        "commit_url": "https://github.com/hercules-team/augeas/commit/1a66739c3fc14b3257af5d4a32d0a2a714a7b39d",
        "files": [
          "src/internal.c",
          "tests/test-load.c"
        ],
        "message": "* src/transform.c (xread_file): catch failed fopen, e.g. EACCES",
        "before_after_code_files": [
          "src/internal.c||src/internal.c",
          "tests/test-load.c||tests/test-load.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/internal.c||src/internal.c"
          ],
          "candidate": [
            "src/internal.c||src/internal.c"
          ]
        }
      },
      "candidate_diff": {
        "src/internal.c||src/internal.c": [
          "File: src/internal.c -> src/internal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     char *result;",
          "150:     fp = fopen(path, \"r\");",
          "151:     result = xfread_file(fp);",
          "154:     return result;",
          "155: }",
          "",
          "[Removed Lines]",
          "152:     fclose (fp);",
          "",
          "[Added Lines]",
          "151:     if (!fp)",
          "152:         return NULL;",
          "155:     fclose(fp);",
          "",
          "---------------"
        ],
        "tests/test-load.c||tests/test-load.c": [
          "File: tests/test-load.c -> tests/test-load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         exit(EXIT_FAILURE);                                         \\",
          "39:     } while(0)",
          "42:     char *etcdir, *build_root;",
          "46:     if (asprintf(&build_root, \"%s/build/test-load/%s\",",
          "47:                  abs_top_builddir, tc->name) < 0) {",
          "",
          "[Removed Lines]",
          "41: static struct augeas *setup_writable_hosts(CuTest *tc) {",
          "43:     struct augeas *aug = NULL;",
          "44:     int r;",
          "",
          "[Added Lines]",
          "41: static char *setup_hosts(CuTest *tc) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     if (asprintf(&etcdir, \"%s/etc\", build_root) < 0)",
          "52:         CuFail(tc, \"asprintf etcdir failed\");",
          "55:     run(tc, \"rm -rf %s\", build_root);",
          "56:     run(tc, \"mkdir -p %s\", etcdir);",
          "57:     run(tc, \"cp -pr %s/etc/hosts %s\", root, etcdir);",
          "60:     aug = aug_init(build_root, loadpath, AUG_NO_MODL_AUTOLOAD);",
          "61:     CuAssertPtrNotNull(tc, aug);",
          "",
          "[Removed Lines]",
          "54:     run(tc, \"test -d %s && chmod -R u+w %s || :\", build_root, build_root);",
          "58:     run(tc, \"chmod -R u+w %s\", build_root);",
          "",
          "[Added Lines]",
          "52:     run(tc, \"test -d %s && chmod -R u+rw %s || :\", build_root, build_root);",
          "57:     free(etcdir);",
          "58:     return build_root;",
          "59: }",
          "61: static struct augeas *setup_hosts_aug(CuTest *tc, char *build_root) {",
          "62:     struct augeas *aug = NULL;",
          "63:     int r;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     CuAssertRetSuccess(tc, r);",
          "69:     free(build_root);",
          "71:     return aug;",
          "72: }",
          "74: static void testDefault(CuTest *tc) {",
          "75:     augeas *aug = NULL;",
          "76:     int nmatches, r;",
          "",
          "[Removed Lines]",
          "70:     free(etcdir);",
          "",
          "[Added Lines]",
          "78: static struct augeas *setup_writable_hosts(CuTest *tc) {",
          "79:     char *build_root = setup_hosts(tc);",
          "80:     run(tc, \"chmod -R u+w %s\", build_root);",
          "81:     return setup_hosts_aug(tc, build_root);",
          "82: }",
          "84: static struct augeas *setup_unreadable_hosts(CuTest *tc) {",
          "85:     char *build_root = setup_hosts(tc);",
          "86:     run(tc, \"chmod -R a-r %s/etc/hosts\", build_root);",
          "87:     return setup_hosts_aug(tc, build_root);",
          "88: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "511:     aug_close(aug);",
          "512: }",
          "515: static void testLoadExclWithRoot(CuTest *tc) {",
          "516:     augeas *aug = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: static void testPermsErrorReported(CuTest *tc) {",
          "532:     augeas *aug = NULL;",
          "533:     int r;",
          "534:     const char *s;",
          "536:     aug = setup_unreadable_hosts(tc);",
          "538:     r = aug_load(aug);",
          "539:     CuAssertRetSuccess(tc, r);",
          "541:     r = aug_match(aug, \"/files/etc/hosts\", NULL);",
          "542:     CuAssertIntEquals(tc, 0, r);",
          "544:     r = aug_get(aug, \"/augeas/files/etc/hosts/error\", &s);",
          "545:     CuAssertIntEquals(tc, 1, r);",
          "546:     CuAssertStrEquals(tc, \"read_failed\", s);",
          "548:     r = aug_get(aug, \"/augeas/files/etc/hosts/error/message\", &s);",
          "549:     CuAssertIntEquals(tc, 1, r);",
          "550: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "576:     SUITE_ADD_TEST(suite, testReloadExternalMod);",
          "577:     SUITE_ADD_TEST(suite, testReloadAfterSaveNewfile);",
          "578:     SUITE_ADD_TEST(suite, testParseErrorReported);",
          "579:     SUITE_ADD_TEST(suite, testLoadExclWithRoot);",
          "580:     SUITE_ADD_TEST(suite, testLoadTrailingExcl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617:     SUITE_ADD_TEST(suite, testPermsErrorReported);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8de6a8c5cfffb007149036ffa561ced4d11c462",
      "candidate_info": {
        "commit_hash": "b8de6a8c5cfffb007149036ffa561ced4d11c462",
        "repo": "hercules-team/augeas",
        "commit_url": "https://github.com/hercules-team/augeas/commit/b8de6a8c",
        "files": [
          "src/transform.c",
          "tests/Makefile.am",
          "tests/test-put-mount-augnew.sh",
          "tests/test-put-mount-augsave.sh",
          "tests/test-put-mount.sh"
        ],
        "message": "Prevent cross-mountpoint attacks via .augsave during saving\n\nPreviously Augeas would open PATH.augsave for writing if a rename from PATH to\nPATH.augsave failed, then write the file contents in.  Now if the rename fails,\nit tries to unlink PATH.augsave and open it with O_EXCL first.\n\nMountpoints remain permitted at either PATH or PATH.augnew provided\n/augeas/save/copy_if_rename_fails exists.\n\n* src/transform.c (clone_file):\n    add argument to perform unlink and O_EXCL on destination filename after a\n    rename failure to prevent PATH.augsave being a mountpoint\n* src/transform.c (transform_save, remove_file):\n    always try to unlink PATH.augsave if rename fails, only allowing PATH to be\n    a mountpoint; allow PATH or PATH.augnew to be mountpoints\n* tests/\n    test-put-mount: check PATH being a mountpoint is supported\n    test-put-mount-augnew.sh: check PATH.augnew being a mountpoint is supported\n    test-put-mount-augsave.sh: check unlink error when PATH.augsave is a mount\n\nFixes BZ 772261",
        "before_after_code_files": [
          "src/transform.c||src/transform.c",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/test-put-mount-augnew.sh||tests/test-put-mount-augnew.sh",
          "tests/test-put-mount-augsave.sh||tests/test-put-mount-augsave.sh",
          "tests/test-put-mount.sh||tests/test-put-mount.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/transform.c||src/transform.c",
            "tests/Makefile.am||tests/Makefile.am"
          ],
          "candidate": [
            "src/transform.c||src/transform.c",
            "tests/Makefile.am||tests/Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "src/transform.c||src/transform.c": [
          "File: src/transform.c -> src/transform.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <sys/types.h>",
          "29: #include <sys/stat.h>",
          "30: #include <unistd.h>",
          "31: #include <selinux/selinux.h>",
          "32: #include <stdbool.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "850: static int clone_file(const char *from, const char *to,",
          "852:     FILE *from_fp = NULL, *to_fp = NULL;",
          "853:     char buf[BUFSIZ];",
          "854:     size_t len;",
          "855:     int result = -1;",
          "857:     if (rename(from, to) == 0)",
          "",
          "[Removed Lines]",
          "851:                       const char **err_status, int copy_if_rename_fails) {",
          "",
          "[Added Lines]",
          "857:                       const char **err_status, int copy_if_rename_fails,",
          "858:                       int unlink_if_rename_fails) {",
          "862:     int to_fd = -1, to_oflags, r;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "867:         goto done;",
          "868:     }",
          "872:         goto done;",
          "873:     }",
          "875:     if (transfer_file_attrs(from_fp, to_fp, err_status) < 0)",
          "876:         goto done;",
          "",
          "[Removed Lines]",
          "870:     if (!(to_fp = fopen(to, \"w\"))) {",
          "",
          "[Added Lines]",
          "878:     if (unlink_if_rename_fails) {",
          "879:         r = unlink(to);",
          "880:         if (r < 0) {",
          "882:             goto done;",
          "883:         }",
          "884:     }",
          "886:     to_oflags = unlink_if_rename_fails ? O_EXCL : O_TRUNC;",
          "887:     if ((to_fd = open(to, O_WRONLY|O_CREAT|to_oflags, S_IRUSR|S_IWUSR)) < 0) {",
          "891:     if (!(to_fp = fdopen(to_fd, \"w\"))) {",
          "893:         goto done;",
          "894:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "897:  done:",
          "898:     if (from_fp != NULL)",
          "899:         fclose(from_fp);",
          "901:         result = -1;",
          "902:     if (result != 0)",
          "903:         unlink(to);",
          "904:     if (result == 0)",
          "",
          "[Removed Lines]",
          "900:     if (to_fp != NULL && fclose(to_fp) != 0)",
          "",
          "[Added Lines]",
          "921:     if (to_fp != NULL) {",
          "922:         if (fclose(to_fp) != 0) {",
          "924:             result = -1;",
          "925:         }",
          "926:     } else if (to_fd >= 0 && close(to_fd) < 0) {",
          "929:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1132:                 goto done;",
          "1133:             }",
          "1136:             if (r != 0) {",
          "1137:                 dyn_err_status = strappend(err_status, \"_augsave\");",
          "1138:                 goto done;",
          "",
          "[Removed Lines]",
          "1135:             r = clone_file(augorig_canon, augsave, &err_status, 1);",
          "",
          "[Added Lines]",
          "1163:             r = clone_file(augorig_canon, augsave, &err_status, 1, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1140:         }",
          "1141:     }",
          "1144:     if (r != 0) {",
          "1145:         dyn_err_status = strappend(err_status, \"_augtemp\");",
          "1146:         goto done;",
          "",
          "[Removed Lines]",
          "1143:     r = clone_file(augtemp, augdest, &err_status, copy_if_rename_fails);",
          "",
          "[Added Lines]",
          "1171:     r = clone_file(augtemp, augdest, &err_status, copy_if_rename_fails, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1298:                 goto error;",
          "1299:         }",
          "1302:         if (r != 0) {",
          "1303:             dyn_err_status = strappend(err_status, \"_augsave\");",
          "1304:             goto error;",
          "",
          "[Removed Lines]",
          "1301:         r = clone_file(augorig_canon, augsave, &err_status, 1);",
          "",
          "[Added Lines]",
          "1329:         r = clone_file(augorig_canon, augsave, &err_status, 1, 1);",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   $(lens_tests) \\",
          "185:   test-get.sh test-augtool.sh \\",
          "186:   test-put-symlink.sh test-put-symlink-augnew.sh \\",
          "189:   test-events-saved.sh test-save-mode.sh test-unlink-error.sh \\",
          "190:   test-augtool-empty-line.sh test-augtool-modify-root.sh",
          "",
          "[Removed Lines]",
          "187:   test-put-symlink-augsave.sh test-put-symlink-augtemp.sh test-save-empty.sh \\",
          "188:   test-bug-1.sh test-idempotent.sh test-preserve.sh \\",
          "",
          "[Added Lines]",
          "187:   test-put-symlink-augsave.sh test-put-symlink-augtemp.sh \\",
          "188:   test-put-mount.sh test-put-mount-augnew.sh test-put-mount-augsave.sh \\",
          "189:   test-save-empty.sh test-bug-1.sh test-idempotent.sh test-preserve.sh \\",
          "",
          "---------------"
        ],
        "tests/test-put-mount-augnew.sh||tests/test-put-mount-augnew.sh": [
          "File: tests/test-put-mount-augnew.sh -> tests/test-put-mount-augnew.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/bash",
          "3: # Test that we can write into a bind mount placed at PATH.augnew with the",
          "4: # copy_if_rename_fails flag.",
          "5: # This requires that EXDEV or EBUSY is returned from rename(2) to activate the",
          "6: # code path, so set up a bind mount on Linux.",
          "8: if [ $UID -ne 0 -o \"$(uname -s)\" != \"Linux\" ]; then",
          "9:     echo \"Test can only be run as root on Linux to create bind mounts\"",
          "10:     exit 77",
          "11: fi",
          "13: ROOT=$abs_top_builddir/build/test-put-mount-augnew",
          "14: LENSES=$abs_top_srcdir/lenses",
          "16: HOSTS=$ROOT/etc/hosts",
          "17: HOSTS_AUGNEW=${HOSTS}.augnew",
          "18: TARGET=$ROOT/other/real_hosts",
          "20: rm -rf $ROOT",
          "21: mkdir -p $(dirname $HOSTS)",
          "22: mkdir -p $(dirname $TARGET)",
          "24: echo 127.0.0.1 localhost > $HOSTS",
          "25: touch $TARGET $HOSTS_AUGNEW",
          "27: mount --bind $TARGET $HOSTS_AUGNEW",
          "28: Exit() {",
          "29:     umount $HOSTS_AUGNEW",
          "30:     exit $1",
          "31: }",
          "33: HOSTS_SUM=$(sum $HOSTS)",
          "35: augtool --nostdinc -I $LENSES -r $ROOT --new <<EOF",
          "36: set /augeas/save/copy_if_rename_fails 1",
          "37: set /files/etc/hosts/1/alias myhost",
          "38: save",
          "39: print /augeas//error",
          "40: EOF",
          "42: if [ ! -f $HOSTS ] ; then",
          "43:     echo \"/etc/hosts is no longer a regular file\"",
          "44:     Exit 1",
          "45: fi",
          "46: if [ ! \"x${HOSTS_SUM}\" = \"x$(sum $HOSTS)\" ]; then",
          "47:     echo \"/etc/hosts has changed\"",
          "48:     Exit 1",
          "49: fi",
          "50: if [ ! \"x${HOSTS_SUM}\" = \"x$(sum $HOSTS)\" ]; then",
          "51:     echo \"/etc/hosts has changed\"",
          "52:     Exit 1",
          "53: fi",
          "55: if [ ! -s $HOSTS_AUGNEW ]; then",
          "56:     echo \"/etc/hosts.augnew is empty\"",
          "57:     Exit 1",
          "58: fi",
          "59: if [ ! -s $TARGET ]; then",
          "60:     echo \"/other/real_hosts is empty\"",
          "61:     Exit 1",
          "62: fi",
          "64: if ! grep myhost $TARGET >/dev/null; then",
          "65:     echo \"/other/real_hosts does not contain the modification\"",
          "66:     Exit 1",
          "67: fi",
          "69: Exit 0",
          "",
          "---------------"
        ],
        "tests/test-put-mount-augsave.sh||tests/test-put-mount-augsave.sh": [
          "File: tests/test-put-mount-augsave.sh -> tests/test-put-mount-augsave.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/bash",
          "3: # Test that we don't follow bind mounts when writing to .augsave.",
          "4: # This requires that EXDEV or EBUSY is returned from rename(2) to activate the",
          "5: # code path, so set up a bind mount on Linux.",
          "7: if [ $UID -ne 0 -o \"$(uname -s)\" != \"Linux\" ]; then",
          "8:     echo \"Test can only be run as root on Linux to create bind mounts\"",
          "9:     exit 77",
          "10: fi",
          "12: actual() {",
          "13:     (augtool --nostdinc -I $LENSES -r $ROOT --backup | grep ^/augeas) <<EOF",
          "14:     set /augeas/save/copy_if_rename_fails 1",
          "15:     set /files/etc/hosts/1/alias myhost",
          "16:     save",
          "17:     print /augeas//error",
          "18: EOF",
          "19: }",
          "21: expected() {",
          "22:     cat <<EOF",
          "23: /augeas/files/etc/hosts/error = \"clone_unlink_dst_augsave\"",
          "24: /augeas/files/etc/hosts/error/message = \"Device or resource busy\"",
          "25: EOF",
          "26: }",
          "28: ROOT=$abs_top_builddir/build/test-put-mount-augsave",
          "29: LENSES=$abs_top_srcdir/lenses",
          "31: HOSTS=$ROOT/etc/hosts",
          "32: HOSTS_AUGSAVE=${HOSTS}.augsave",
          "34: ATTACK_FILE=$ROOT/other/attack",
          "36: rm -rf $ROOT",
          "37: mkdir -p $(dirname $HOSTS)",
          "38: mkdir -p $(dirname $ATTACK_FILE)",
          "40: echo 127.0.0.1 localhost > $HOSTS",
          "41: touch $ATTACK_FILE $HOSTS_AUGSAVE",
          "43: mount --bind $ATTACK_FILE $HOSTS_AUGSAVE",
          "44: Exit() {",
          "45:     umount $HOSTS_AUGSAVE",
          "46:     exit $1",
          "47: }",
          "49: ACTUAL=$(actual)",
          "50: EXPECTED=$(expected)",
          "51: if [ \"$ACTUAL\" != \"$EXPECTED\" ]; then",
          "52:     echo \"No error when trying to unlink augsave (a bind mount):\"",
          "53:     echo \"$ACTUAL\"",
          "54:     exit 1",
          "55: fi",
          "57: if [ -s $ATTACK_FILE ]; then",
          "58:     echo \"/other/attack now contains data, should be blank\"",
          "59:     Exit 1",
          "60: fi",
          "62: Exit 0",
          "",
          "---------------"
        ],
        "tests/test-put-mount.sh||tests/test-put-mount.sh": [
          "File: tests/test-put-mount.sh -> tests/test-put-mount.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/bash",
          "3: # Test that we can write into a bind mount with the copy_if_rename_fails flag.",
          "4: # This requires that EXDEV or EBUSY is returned from rename(2) to activate the",
          "5: # code path, so set up a bind mount on Linux.",
          "7: if [ $UID -ne 0 -o \"$(uname -s)\" != \"Linux\" ]; then",
          "8:     echo \"Test can only be run as root on Linux to create bind mounts\"",
          "9:     exit 77",
          "10: fi",
          "12: ROOT=$abs_top_builddir/build/test-put-mount",
          "13: LENSES=$abs_top_srcdir/lenses",
          "15: HOSTS=$ROOT/etc/hosts",
          "16: TARGET=$ROOT/other/real_hosts",
          "18: rm -rf $ROOT",
          "19: mkdir -p $(dirname $HOSTS)",
          "20: mkdir -p $(dirname $TARGET)",
          "22: echo 127.0.0.1 localhost > $TARGET",
          "23: touch $HOSTS",
          "25: mount --bind $TARGET $HOSTS",
          "26: Exit() {",
          "27:     umount $HOSTS",
          "28:     exit $1",
          "29: }",
          "31: HOSTS_SUM=$(sum $HOSTS)",
          "33: augtool --nostdinc -I $LENSES -r $ROOT <<EOF",
          "34: set /augeas/save/copy_if_rename_fails 1",
          "35: set /files/etc/hosts/1/alias myhost",
          "36: save",
          "37: print /augeas//error",
          "38: EOF",
          "40: if [ ! \"x${HOSTS_SUM}\" != \"x$(sum $HOSTS)\" ]; then",
          "41:     echo \"/etc/hosts hasn't changed\"",
          "42:     Exit 1",
          "43: fi",
          "45: if [ ! \"x${HOSTS_SUM}\" != \"x$(sum $TARGET)\" ]; then",
          "46:     echo \"/other/real_hosts hasn't changed\"",
          "47:     Exit 1",
          "48: fi",
          "50: if ! grep myhost $TARGET >/dev/null; then",
          "51:     echo \"/other/real_hosts does not contain the modification\"",
          "52:     Exit 1",
          "53: fi",
          "55: Exit 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}