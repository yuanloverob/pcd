{
  "cve_id": "CVE-2017-13052",
  "cve_desc": "The CFM parser in tcpdump before 4.9.2 has a buffer over-read in print-cfm.c:cfm_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "5d340a5ca6e420a70297cdbdf777333f18bfdab7",
  "patch_info": {
    "commit_hash": "5d340a5ca6e420a70297cdbdf777333f18bfdab7",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/5d340a5ca6e420a70297cdbdf777333f18bfdab7",
    "files": [
      "print-cfm.c",
      "tests/TESTLIST",
      "tests/cfm_sender_id-oobr.out",
      "tests/cfm_sender_id-oobr.pcap"
    ],
    "message": "CVE-2017-13052/CFM: refine decoding of the Sender ID TLV\n\nIn cfm_network_addr_print() add a length argument and use it to validate\nthe input buffer.\n\nIn cfm_print() add a length check for MAC address chassis ID. Supply\ncfm_network_addr_print() with the length of its buffer and a correct\npointer to the buffer (it was off-by-one before). Change some error\nhandling blocks to skip to the next TLV in the current PDU rather than to\nstop decoding the PDU. Print the management domain and address contents,\nalthough in hex only so far.\n\nAdd some comments to clarify the code flow and to tell exact sections in\nIEEE standard documents. Add new error messages and make some existing\nmessages more specific.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-cfm.c||print-cfm.c"
    ]
  },
  "patch_diff": {
    "print-cfm.c||print-cfm.c": [
      "File: print-cfm.c -> print-cfm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "218: static int",
      "219: cfm_network_addr_print(netdissect_options *ndo,",
      "221: {",
      "222:     u_int network_addr_type;",
      "223:     u_int hexdump =  FALSE;",
      "",
      "[Removed Lines]",
      "220:                        register const u_char *tptr)",
      "",
      "[Added Lines]",
      "220:                        register const u_char *tptr, const u_int length)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "230:     network_addr_type = *tptr;",
      "231:     ND_PRINT((ndo, \"\\n\\t  Network Address Type %s (%u)\",",
      "232:            tok2str(af_values, \"Unknown\", network_addr_type),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "230:     if (length < 1) {",
      "231:         ND_PRINT((ndo, \"\\n\\t  Network Address Type (invalid, no data\"));",
      "232:         return hexdump;",
      "233:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "238:     switch(network_addr_type) {",
      "239:     case AFNUM_INET:",
      "240:         ND_PRINT((ndo, \", %s\", ipaddr_string(ndo, tptr + 1)));",
      "241:         break;",
      "243:     case AFNUM_INET6:",
      "244:         ND_PRINT((ndo, \", %s\", ip6addr_string(ndo, tptr + 1)));",
      "245:         break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:         if (length != 1 + 4) {",
      "246:             ND_PRINT((ndo, \"(invalid IPv4 address length %u)\", length - 1));",
      "247:             hexdump = TRUE;",
      "248:             break;",
      "249:         }",
      "254:         if (length != 1 + 16) {",
      "255:             ND_PRINT((ndo, \"(invalid IPv6 address length %u)\", length - 1));",
      "256:             hexdump = TRUE;",
      "257:             break;",
      "258:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "585:             if (cfm_tlv_len < 1) {",
      "586:                 ND_PRINT((ndo, \" (too short, must be >= 1)\"));",
      "588:             }",
      "593:             chassis_id_length = *tptr;",
      "594:             tptr++;",
      "",
      "[Removed Lines]",
      "587:                 return;",
      "",
      "[Added Lines]",
      "602:                 goto next_tlv;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "596:             cfm_tlv_len--;",
      "598:             if (chassis_id_length) {",
      "599:                 if (cfm_tlv_len < 1) {",
      "600:                     ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
      "602:                 }",
      "603:                 chassis_id_type = *tptr;",
      "604:                 cfm_tlv_len--;",
      "",
      "[Removed Lines]",
      "601:                     return;",
      "",
      "[Added Lines]",
      "622:                     goto next_tlv;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "612:                 if (cfm_tlv_len < chassis_id_length) {",
      "613:                     ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
      "615:                 }",
      "617:                 switch (chassis_id_type) {",
      "618:                 case CFM_CHASSIS_ID_MAC_ADDRESS:",
      "619:                     ND_PRINT((ndo, \"\\n\\t  MAC %s\", etheraddr_string(ndo, tptr + 1)));",
      "620:                     break;",
      "622:                 case CFM_CHASSIS_ID_NETWORK_ADDRESS:",
      "624:                     break;",
      "",
      "[Removed Lines]",
      "614:                     return;",
      "623:                     hexdump |= cfm_network_addr_print(ndo, tptr);",
      "",
      "[Added Lines]",
      "635:                     goto next_tlv;",
      "641:                     if (chassis_id_length != ETHER_ADDR_LEN) {",
      "642:                         ND_PRINT((ndo, \" (invalid MAC address length)\"));",
      "643:                         hexdump = TRUE;",
      "644:                         break;",
      "645:                     }",
      "650:                     hexdump |= cfm_network_addr_print(ndo, tptr + 1, chassis_id_length);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "647:             if (cfm_tlv_len == 0) {",
      "650:             }",
      "652:             mgmt_addr_length = *tptr;",
      "653:             tptr++;",
      "654:             tlen--;",
      "655:             cfm_tlv_len--;",
      "656:             if (mgmt_addr_length) {",
      "657:                 if (cfm_tlv_len < mgmt_addr_length) {",
      "658:                     ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
      "660:                 }",
      "661:                 cfm_tlv_len -= mgmt_addr_length;",
      "665:                 tptr += mgmt_addr_length;",
      "666:                 tlen -= mgmt_addr_length;",
      "668:                 if (cfm_tlv_len < 1) {",
      "671:                 }",
      "673:                 mgmt_addr_length = *tptr;",
      "674:                 tptr++;",
      "675:                 tlen--;",
      "676:                 cfm_tlv_len--;",
      "677:                 if (mgmt_addr_length) {",
      "678:                     if (cfm_tlv_len < mgmt_addr_length) {",
      "679:                         ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
      "680:                         return;",
      "",
      "[Removed Lines]",
      "649:                 return;",
      "659:                     return;",
      "669:                     ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));",
      "670:                     return;",
      "",
      "[Added Lines]",
      "679:                 break;",
      "687:             ND_PRINT((ndo, \"\\n\\t  Management Address Domain Length %u\", mgmt_addr_length));",
      "692:                     goto next_tlv;",
      "698:                 hex_print(ndo, \"\\n\\t  Management Address Domain: \", tptr, mgmt_addr_length);",
      "707:                     ND_PRINT((ndo, \" (Management Address Length is missing)\"));",
      "708:                     hexdump = TRUE;",
      "709:                     break;",
      "717:                 ND_PRINT((ndo, \"\\n\\t  Management Address Length %u\", mgmt_addr_length));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "686:                     tptr += mgmt_addr_length;",
      "687:                     tlen -= mgmt_addr_length;",
      "688:                 }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "728:                     hex_print(ndo, \"\\n\\t  Management Address: \", tptr, mgmt_addr_length);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "706:         if (hexdump || ndo->ndo_vflag > 1)",
      "707:             print_unknown_data(ndo, tlv_ptr, \"\\n\\t  \", cfm_tlv_len);",
      "709:         tptr+=cfm_tlv_len;",
      "710:         tlen-=cfm_tlv_len;",
      "711:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "752: next_tlv:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7068209574374db8934ceaaac8f92e5eb5c62880",
      "candidate_info": {
        "commit_hash": "7068209574374db8934ceaaac8f92e5eb5c62880",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/7068209574374db8934ceaaac8f92e5eb5c62880",
        "files": [
          "Makefile.in",
          "addrtoname.c",
          "ether.h",
          "ethertype.h",
          "netdissect.h",
          "print-aoe.c",
          "print-arp.c",
          "print-cfm.c",
          "print-ether.c",
          "print-fddi.c",
          "print-ipfc.c",
          "print-isoclns.c",
          "print-lane.c",
          "print-llc.c",
          "print-loopback.c",
          "print-medsa.c",
          "print-openflow-1.0.c",
          "print-rrcp.c",
          "print-sll.c",
          "print-slow.c",
          "print-symantec.c",
          "print-tipc.c",
          "print-token.c",
          "print-vqp.c"
        ],
        "message": "Use nd_ types in 802.x and FDDI headers.\n\nUse EXTRACT_U_1() as required by those changes.  Remove\nno-longer-necessary & operators from other EXTRACT_ calls.\n\nWhile we're at it, add MAC_ADDR_LEN to netdissect.h, and use it instead\nof ETHER_ADDR_LEN; eliminate ETHER_ADDR_LEN.\n\nMove the maximum Ethernet length field value to ethertype.h, under the\nname MAX_ETHERNET_LENGTH_VAL.\n\nMove the Ethernet header structure, and the #define for the Ethernet\nheader length, to print-ether.c; in non-Ethernet dissectors that were\nusing the Ethernet header structure, just declare two nd_mac_addr\nvariables for the source and destination MAC addresses and use them\ninstead of the Ethernet header (we don't need the type field there).\n\nThese changes leave nothing in ether.h, so eliminate it.",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "addrtoname.c||addrtoname.c",
          "ether.h||ether.h",
          "ethertype.h||ethertype.h",
          "netdissect.h||netdissect.h",
          "print-aoe.c||print-aoe.c",
          "print-arp.c||print-arp.c",
          "print-cfm.c||print-cfm.c",
          "print-ether.c||print-ether.c",
          "print-fddi.c||print-fddi.c",
          "print-ipfc.c||print-ipfc.c",
          "print-isoclns.c||print-isoclns.c",
          "print-lane.c||print-lane.c",
          "print-llc.c||print-llc.c",
          "print-loopback.c||print-loopback.c",
          "print-medsa.c||print-medsa.c",
          "print-openflow-1.0.c||print-openflow-1.0.c",
          "print-rrcp.c||print-rrcp.c",
          "print-sll.c||print-sll.c",
          "print-slow.c||print-slow.c",
          "print-symantec.c||print-symantec.c",
          "print-tipc.c||print-tipc.c",
          "print-token.c||print-token.c",
          "print-vqp.c||print-vqp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-cfm.c||print-cfm.c"
          ],
          "candidate": [
            "print-cfm.c||print-cfm.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  atm.h \\",
          "260:  chdlc.h \\",
          "261:  cpack.h \\",
          "263:  ethertype.h \\",
          "264:  extract.h \\",
          "265:  funcattrs.h \\",
          "",
          "[Removed Lines]",
          "262:  ether.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "addrtoname.c||addrtoname.c": [
          "File: addrtoname.c -> addrtoname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #include \"extract.h\"",
          "74: #include \"oui.h\"",
          "",
          "[Removed Lines]",
          "76: #ifndef ETHER_ADDR_LEN",
          "77: #define ETHER_ADDR_LEN 6",
          "78: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:  if (len == 0)",
          "601:   return (\"<empty>\");",
          "604:   return (etheraddr_string(ndo, ep));",
          "606:  if (type == LINKADDR_FRELAY)",
          "",
          "[Removed Lines]",
          "603:  if (type == LINKADDR_ETHER && len == ETHER_ADDR_LEN)",
          "",
          "[Added Lines]",
          "599:  if (type == LINKADDR_ETHER && len == MAC_ADDR_LEN)",
          "",
          "---------------"
        ],
        "ether.h||ether.h": [
          "File: ether.h -> ether.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ethertype.h||ethertype.h": [
          "File: ethertype.h -> ethertype.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #define MAX_ETHERNET_LENGTH_VAL 1500",
          "",
          "---------------"
        ],
        "netdissect.h||netdissect.h": [
          "File: netdissect.h -> netdissect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "93: typedef struct {",
          "94:  unsigned char bytes[6];",
          "95: } nd_mac_addr;",
          "",
          "[Added Lines]",
          "94: typedef unsigned char nd_mac_addr[MAC_ADDR_LEN];",
          "",
          "---------------"
        ],
        "print-aoe.c||print-aoe.c": [
          "File: print-aoe.c -> print-aoe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"netdissect.h\"",
          "39: #include \"extract.h\"",
          "40: #include \"addrtoname.h\"",
          "43: static const char tstr[] = \" [|aoe]\";",
          "",
          "[Removed Lines]",
          "41: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:   ND_PRINT((ndo, \"\\n\\t DCmd: %s\", tok2str(aoev1_dcmd_str, \"Unknown (0x%02x)\", EXTRACT_U_1(cp))));",
          "290:   cp += 1;",
          "293:   ND_PRINT((ndo, \", Ethernet Address: %s\", etheraddr_string(ndo, cp)));",
          "295:  }",
          "296:  return;",
          "",
          "[Removed Lines]",
          "292:   ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "294:   cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "291:   ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "293:   cp += MAC_ADDR_LEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:  const u_char *ep = cp + len;",
          "311:  uint8_t nmacs, i;",
          "314:   goto invalid;",
          "316:  ND_TCHECK_1(cp);",
          "",
          "[Removed Lines]",
          "313:  if (len < AOEV1_RESERVE_ARG_LEN || (len - AOEV1_RESERVE_ARG_LEN) % ETHER_ADDR_LEN)",
          "",
          "[Added Lines]",
          "312:  if (len < AOEV1_RESERVE_ARG_LEN || (len - AOEV1_RESERVE_ARG_LEN) % MAC_ADDR_LEN)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:  nmacs = EXTRACT_U_1(cp);",
          "322:  cp += 1;",
          "323:  ND_PRINT((ndo, \", NMacs: %u\", nmacs));",
          "325:   goto invalid;",
          "327:  for (i = 0; i < nmacs; i++) {",
          "328:   ND_PRINT((ndo, \"\\n\\tEthernet Address %u: %s\", i, etheraddr_string(ndo, cp)));",
          "330:  }",
          "331:  return;",
          "",
          "[Removed Lines]",
          "324:  if (AOEV1_RESERVE_ARG_LEN + nmacs * ETHER_ADDR_LEN != len)",
          "329:   cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "323:  if (AOEV1_RESERVE_ARG_LEN + nmacs * MAC_ADDR_LEN != len)",
          "328:   cp += MAC_ADDR_LEN;",
          "",
          "---------------"
        ],
        "print-arp.c||print-arp.c": [
          "File: print-arp.c -> print-arp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"netdissect.h\"",
          "33: #include \"addrtoname.h\"",
          "35: #include \"ethertype.h\"",
          "36: #include \"extract.h\"",
          "",
          "[Removed Lines]",
          "34: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "print-cfm.c||print-cfm.c": [
          "File: print-cfm.c -> print-cfm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"netdissect.h\"",
          "29: #include \"extract.h\"",
          "31: #include \"addrtoname.h\"",
          "32: #include \"oui.h\"",
          "33: #include \"af.h\"",
          "",
          "[Removed Lines]",
          "30: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: struct cfm_ltm_t {",
          "117:     uint8_t transaction_id[4];",
          "118:     uint8_t ttl;",
          "121: };",
          "123: static const struct tok cfm_ltm_flag_values[] = {",
          "",
          "[Removed Lines]",
          "119:     uint8_t original_mac[ETHER_ADDR_LEN];",
          "120:     uint8_t target_mac[ETHER_ADDR_LEN];",
          "",
          "[Added Lines]",
          "118:     nd_mac_addr original_mac;",
          "119:     nd_mac_addr target_mac;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "639:                 switch (chassis_id_type) {",
          "640:                 case CFM_CHASSIS_ID_MAC_ADDRESS:",
          "642:                         ND_PRINT((ndo, \" (invalid MAC address length)\"));",
          "643:                         hexdump = TRUE;",
          "644:                         break;",
          "",
          "[Removed Lines]",
          "641:                     if (chassis_id_length != ETHER_ADDR_LEN) {",
          "",
          "[Added Lines]",
          "640:                     if (chassis_id_length != MAC_ADDR_LEN) {",
          "",
          "---------------"
        ],
        "print-ether.c||print-ether.c": [
          "File: print-ether.c -> print-ether.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"extract.h\"",
          "32: #include \"addrtoname.h\"",
          "33: #include \"ethertype.h\"",
          "36: const struct tok ethertype_values[] = {",
          "37:     { ETHERTYPE_IP,  \"IPv4\" },",
          "",
          "[Removed Lines]",
          "34: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "38: struct ether_header {",
          "39:  nd_mac_addr ether_dhost;",
          "40:  nd_mac_addr ether_shost;",
          "41:  nd_uint16_t ether_length_type;",
          "42: };",
          "49: #define ETHER_HDRLEN  14",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:        etheraddr_string(ndo, ESRC(ep)),",
          "103:        etheraddr_string(ndo, EDST(ep))));",
          "106:  if (!ndo->ndo_qflag) {",
          "108:           ND_PRINT((ndo, \", 802.3\"));",
          "109:    length = length_type;",
          "110:   } else",
          "",
          "[Removed Lines]",
          "105:  length_type = EXTRACT_BE_U_2(&ep->ether_length_type);",
          "107:          if (length_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "120:  length_type = EXTRACT_BE_U_2(ep->ether_length_type);",
          "122:          if (length_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:            tok2str(ethertype_values,\"Unknown\", length_type),",
          "113:                                        length_type));",
          "114:         } else {",
          "116:                         ND_PRINT((ndo, \", 802.3\"));",
          "117:    length = length_type;",
          "118:   } else",
          "",
          "[Removed Lines]",
          "115:                 if (length_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "130:                 if (length_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:  src.addr_string = etheraddr_string;",
          "169:  dst.addr = EDST(ep);",
          "170:  dst.addr_string = etheraddr_string;",
          "173: recurse:",
          "179:   llc_hdrlen = llc_print(ndo, p, length, caplen, &src, &dst);",
          "180:   if (llc_hdrlen < 0) {",
          "",
          "[Removed Lines]",
          "171:  length_type = EXTRACT_BE_U_2(&ep->ether_length_type);",
          "177:  if (length_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "186:  length_type = EXTRACT_BE_U_2(ep->ether_length_type);",
          "192:  if (length_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:   }",
          "209:   length_type = EXTRACT_BE_U_2(p + 2);",
          "211:    ND_PRINT((ndo, \"ethertype %s, \", tok2str(ethertype_values,\"0x%04x\", length_type)));",
          "212:   p += 4;",
          "213:   length -= 4;",
          "",
          "[Removed Lines]",
          "210:   if (ndo->ndo_eflag && length_type > ETHERMTU)",
          "",
          "[Added Lines]",
          "225:   if (ndo->ndo_eflag && length_type > MAX_ETHERNET_LENGTH_VAL)",
          "",
          "---------------"
        ],
        "print-fddi.c||print-fddi.c": [
          "File: print-fddi.c -> print-fddi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <string.h>",
          "32: #include \"netdissect.h\"",
          "33: #include \"addrtoname.h\"",
          "40: struct fddi_header {",
          "44: };",
          "",
          "[Removed Lines]",
          "34: #include \"ether.h\"",
          "42:  u_char  fddi_dhost[6];",
          "43:  u_char  fddi_shost[6];",
          "",
          "[Added Lines]",
          "33: #include \"extract.h\"",
          "42:  nd_mac_addr fddi_dhost;",
          "43:  nd_mac_addr fddi_shost;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:  dstname = etheraddr_string(ndo, fdst);",
          "263:  if (!ndo->ndo_qflag)",
          "265:  ND_PRINT((ndo, \"%s > %s, length %u: \",",
          "266:         srcname, dstname,",
          "267:         length));",
          "",
          "[Removed Lines]",
          "264:   print_fddi_fc(ndo, fddip->fddi_fc);",
          "",
          "[Added Lines]",
          "264:   print_fddi_fc(ndo, EXTRACT_U_1(fddip->fddi_fc));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: fddi_print(netdissect_options *ndo, const u_char *p, u_int length, u_int caplen)",
          "278: {",
          "279:  const struct fddi_header *fddip = (const struct fddi_header *)p;",
          "281:  struct lladdr_info src, dst;",
          "282:  int llc_hdrlen;",
          "",
          "[Removed Lines]",
          "280:  struct ether_header ehdr;",
          "",
          "[Added Lines]",
          "280:  uint8_t fc;",
          "281:  nd_mac_addr srcmac, dstmac;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:   return (caplen);",
          "287:  }",
          "294:  if (ndo->ndo_eflag)",
          "298:  src.addr_string = etheraddr_string;",
          "300:  dst.addr_string = etheraddr_string;",
          "",
          "[Removed Lines]",
          "292:  extract_fddi_addrs(fddip, (char *)ESRC(&ehdr), (char *)EDST(&ehdr));",
          "295:   fddi_hdr_print(ndo, fddip, length, ESRC(&ehdr), EDST(&ehdr));",
          "297:  src.addr = ESRC(&ehdr);",
          "299:  dst.addr = EDST(&ehdr);",
          "",
          "[Added Lines]",
          "290:  fc = EXTRACT_U_1(fddip->fddi_fc);",
          "295:  extract_fddi_addrs(fddip, (char *)srcmac, (char *)dstmac);",
          "298:   fddi_hdr_print(ndo, fddip, length, srcmac, dstmac);",
          "300:  src.addr = srcmac;",
          "302:  dst.addr = dstmac;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "305:  caplen -= FDDI_HDRLEN;",
          "310:   llc_hdrlen = llc_print(ndo, p, length, caplen, &src, &dst);",
          "311:   if (llc_hdrlen < 0) {",
          "",
          "[Removed Lines]",
          "308:  if ((fddip->fddi_fc & FDDIFC_CLFF) == FDDIFC_LLC_ASYNC) {",
          "",
          "[Added Lines]",
          "311:  if ((fc & FDDIFC_CLFF) == FDDIFC_LLC_ASYNC) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:     ND_DEFAULTPRINT(p, caplen);",
          "318:    llc_hdrlen = -llc_hdrlen;",
          "319:   }",
          "321:   fddi_smt_print(ndo, p, caplen);",
          "322:   llc_hdrlen = 0;",
          "323:  } else {",
          "325:   if (!ndo->ndo_eflag)",
          "328:   if (!ndo->ndo_suppress_default_print)",
          "329:    ND_DEFAULTPRINT(p, caplen);",
          "330:   llc_hdrlen = 0;",
          "",
          "[Removed Lines]",
          "320:  } else if ((fddip->fddi_fc & FDDIFC_CLFF) == FDDIFC_SMT) {",
          "326:    fddi_hdr_print(ndo, fddip, length + FDDI_HDRLEN, ESRC(&ehdr),",
          "327:        EDST(&ehdr));",
          "",
          "[Added Lines]",
          "323:  } else if ((fc & FDDIFC_CLFF) == FDDIFC_SMT) {",
          "329:    fddi_hdr_print(ndo, fddip, length + FDDI_HDRLEN, srcmac,",
          "330:        dstmac);",
          "",
          "---------------"
        ],
        "print-ipfc.c||print-ipfc.c": [
          "File: print-ipfc.c -> print-ipfc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"netdissect.h\"",
          "35: #include \"addrtoname.h\"",
          "39: struct ipfc_header {",
          "42: };",
          "44: #define IPFC_HDRLEN 16",
          "",
          "[Removed Lines]",
          "37: #include \"ether.h\"",
          "40:  u_char  ipfc_dhost[8];",
          "41:  u_char  ipfc_shost[8];",
          "",
          "[Added Lines]",
          "38:  nd_byte ipfc_dhost[2+MAC_ADDR_LEN];",
          "39:  nd_byte ipfc_shost[2+MAC_ADDR_LEN];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: }",
          "",
          "[Removed Lines]",
          "55:  memcpy(ipfcdst, (const char *)&ipfcp->ipfc_dhost[2], 6);",
          "56:  memcpy(ipfcsrc, (const char *)&ipfcp->ipfc_shost[2], 6);",
          "",
          "[Added Lines]",
          "53:  memcpy(ipfcdst, (const char *)&ipfcp->ipfc_dhost[2], MAC_ADDR_LEN);",
          "54:  memcpy(ipfcsrc, (const char *)&ipfcp->ipfc_shost[2], MAC_ADDR_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: ipfc_print(netdissect_options *ndo, const u_char *p, u_int length, u_int caplen)",
          "93: {",
          "94:  const struct ipfc_header *ipfcp = (const struct ipfc_header *)p;",
          "96:  struct lladdr_info src, dst;",
          "97:  int llc_hdrlen;",
          "",
          "[Removed Lines]",
          "95:  struct ether_header ehdr;",
          "",
          "[Added Lines]",
          "93:  nd_mac_addr srcmac, dstmac;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:  if (ndo->ndo_eflag)",
          "112:  src.addr_string = etheraddr_string;",
          "114:  dst.addr_string = etheraddr_string;",
          "",
          "[Removed Lines]",
          "106:  extract_ipfc_addrs(ipfcp, (char *)ESRC(&ehdr), (char *)EDST(&ehdr));",
          "109:   ipfc_hdr_print(ndo, ipfcp, length, ESRC(&ehdr), EDST(&ehdr));",
          "111:  src.addr = ESRC(&ehdr);",
          "113:  dst.addr = EDST(&ehdr);",
          "",
          "[Added Lines]",
          "104:  extract_ipfc_addrs(ipfcp, (char *)srcmac, (char *)dstmac);",
          "107:   ipfc_hdr_print(ndo, ipfcp, length, srcmac, dstmac);",
          "109:  src.addr = srcmac;",
          "111:  dst.addr = dstmac;",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"netdissect.h\"",
          "38: #include \"addrtoname.h\"",
          "40: #include \"nlpid.h\"",
          "41: #include \"extract.h\"",
          "42: #include \"gmpls.h\"",
          "",
          "[Removed Lines]",
          "39: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: #define NODE_ID_LEN     (SYSTEM_ID_LEN+1)",
          "54: #define LSP_ID_LEN      (SYSTEM_ID_LEN+2)",
          "",
          "[Removed Lines]",
          "52: #define SYSTEM_ID_LEN ETHER_ADDR_LEN",
          "",
          "[Added Lines]",
          "51: #define SYSTEM_ID_LEN MAC_ADDR_LEN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2609:      }",
          "2610:      break;",
          "2611:  case ISIS_TLV_ISNEIGH:",
          "2617:      }",
          "2618:      break;",
          "",
          "[Removed Lines]",
          "2612:      while (tmp >= ETHER_ADDR_LEN) {",
          "2613:                 ND_TCHECK_LEN(tptr, ETHER_ADDR_LEN);",
          "2614:                 ND_PRINT((ndo, \"\\n\\t      SNPA: %s\", isis_print_id(tptr, ETHER_ADDR_LEN)));",
          "2615:                 tmp -= ETHER_ADDR_LEN;",
          "2616:                 tptr += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "2611:      while (tmp >= MAC_ADDR_LEN) {",
          "2612:                 ND_TCHECK_LEN(tptr, MAC_ADDR_LEN);",
          "2613:                 ND_PRINT((ndo, \"\\n\\t      SNPA: %s\", isis_print_id(tptr, MAC_ADDR_LEN)));",
          "2614:                 tmp -= MAC_ADDR_LEN;",
          "2615:                 tptr += MAC_ADDR_LEN;",
          "",
          "---------------"
        ],
        "print-lane.c||print-lane.c": [
          "File: print-lane.c -> print-lane.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"netdissect.h\"",
          "32: #include \"extract.h\"",
          "35: struct lecdatahdr_8023 {",
          "36:   uint16_t le_header;",
          "39:   uint16_t h_type;",
          "40: };",
          "",
          "[Removed Lines]",
          "33: #include \"ether.h\"",
          "37:   uint8_t h_dest[ETHER_ADDR_LEN];",
          "38:   uint8_t h_source[ETHER_ADDR_LEN];",
          "",
          "[Added Lines]",
          "36:   nd_mac_addr h_dest;",
          "37:   nd_mac_addr h_source;",
          "",
          "---------------"
        ],
        "print-llc.c||print-llc.c": [
          "File: print-llc.c -> print-llc.c"
        ],
        "print-loopback.c||print-loopback.c": [
          "File: print-loopback.c -> print-loopback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"netdissect.h\"",
          "42: #include \"extract.h\"",
          "44: #include \"addrtoname.h\"",
          "46: static const char tstr[] = \" [|loopback]\";",
          "",
          "[Removed Lines]",
          "43: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:    if (len < 8)",
          "85:     goto invalid;",
          "88:    ND_PRINT((ndo, \", forwarding address %s\", etheraddr_string(ndo, cp)));",
          "91:    ND_PRINT((ndo, \", data (%u octets)\", len - 8));",
          "92:    ND_TCHECK_LEN(cp, len - 8);",
          "",
          "[Removed Lines]",
          "87:    ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "89:    cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "86:    ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "88:    cp += MAC_ADDR_LEN;",
          "",
          "---------------"
        ],
        "print-medsa.c||print-medsa.c": [
          "File: print-medsa.c -> print-medsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <netdissect-stdinc.h>",
          "30: #include \"netdissect.h\"",
          "32: #include \"ethertype.h\"",
          "33: #include \"addrtoname.h\"",
          "34: #include \"extract.h\"",
          "",
          "[Removed Lines]",
          "31: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:  caplen -= 8;",
          "160:  ether_type = EXTRACT_BE_U_2(&medsa->ether_type);",
          "163:   if (llc_print(ndo, bp, length, caplen, src, dst) < 0) {",
          "",
          "[Removed Lines]",
          "161:  if (ether_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "160:  if (ether_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------"
        ],
        "print-openflow-1.0.c||print-openflow-1.0.c": [
          "File: print-openflow-1.0.c -> print-openflow-1.0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include \"netdissect.h\"",
          "68: #include \"extract.h\"",
          "69: #include \"addrtoname.h\"",
          "71: #include \"ethertype.h\"",
          "72: #include \"ipproto.h\"",
          "73: #include \"oui.h\"",
          "",
          "[Removed Lines]",
          "70: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1153:   ND_PRINT((ndo, \"\\n\\t  port_no %s\", tok2str(ofpp_str, \"%u\", EXTRACT_BE_U_2(cp))));",
          "1154:   cp += 2;",
          "1157:   ND_PRINT((ndo, \", hw_addr %s\", etheraddr_string(ndo, cp)));",
          "1160:   ND_TCHECK_LEN(cp, OFP_MAX_PORT_NAME_LEN);",
          "1161:   ND_PRINT((ndo, \", name '\"));",
          "",
          "[Removed Lines]",
          "1156:   ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "1158:   cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "1155:   ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "1157:   cp += MAC_ADDR_LEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1365:   ND_PRINT((ndo, \"%smatch in_port %s\", pfx, tok2str(ofpp_str, \"%u\", EXTRACT_BE_U_2(cp))));",
          "1366:  cp += 2;",
          "1369:  if (! (wildcards & OFPFW_DL_SRC))",
          "1370:   ND_PRINT((ndo, \"%smatch dl_src %s\", pfx, etheraddr_string(ndo, cp)));",
          "1374:  if (! (wildcards & OFPFW_DL_DST))",
          "1375:   ND_PRINT((ndo, \"%smatch dl_dst %s\", pfx, etheraddr_string(ndo, cp)));",
          "1378:  ND_TCHECK_2(cp);",
          "1379:  if (! (wildcards & OFPFW_DL_VLAN))",
          "",
          "[Removed Lines]",
          "1368:  ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "1371:  cp += ETHER_ADDR_LEN;",
          "1373:  ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "1376:  cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "1367:  ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "1370:  cp += MAC_ADDR_LEN;",
          "1372:  ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "1375:  cp += MAC_ADDR_LEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1543:   case OFPAT_SET_DL_SRC:",
          "1544:   case OFPAT_SET_DL_DST:",
          "1547:    ND_PRINT((ndo, \", dl_addr %s\", etheraddr_string(ndo, cp)));",
          "1550:    ND_TCHECK_6(cp);",
          "1551:    cp += 6;",
          "",
          "[Removed Lines]",
          "1546:    ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "1548:    cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "1545:    ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "1547:    cp += MAC_ADDR_LEN;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1720:  ND_PRINT((ndo, \"\\n\\t port_no %s\", tok2str(ofpp_str, \"%u\", EXTRACT_BE_U_2(cp))));",
          "1721:  cp += 2;",
          "1724:  ND_PRINT((ndo, \", hw_addr %s\", etheraddr_string(ndo, cp)));",
          "1727:  ND_TCHECK_4(cp);",
          "1728:  ND_PRINT((ndo, \"\\n\\t config 0x%08x\", EXTRACT_BE_U_4(cp)));",
          "",
          "[Removed Lines]",
          "1723:  ND_TCHECK_LEN(cp, ETHER_ADDR_LEN);",
          "1725:  cp += ETHER_ADDR_LEN;",
          "",
          "[Added Lines]",
          "1722:  ND_TCHECK_LEN(cp, MAC_ADDR_LEN);",
          "1724:  cp += MAC_ADDR_LEN;",
          "",
          "---------------"
        ],
        "print-rrcp.c||print-rrcp.c": [
          "File: print-rrcp.c -> print-rrcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"netdissect.h\"",
          "50: #include \"addrtoname.h\"",
          "51: #include \"extract.h\"",
          "",
          "[Removed Lines]",
          "52: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "print-sll.c||print-sll.c": [
          "File: print-sll.c -> print-sll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"ethertype.h\"",
          "33: #include \"extract.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:  if (!ndo->ndo_qflag) {",
          "150:   ether_type = EXTRACT_BE_U_2(&sllp->sll_protocol);",
          "",
          "[Removed Lines]",
          "152:   if (ether_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "150:   if (ether_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "235:  if (ether_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "233:  if (ether_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:   }",
          "287:   ether_type = EXTRACT_BE_U_2(p + 2);",
          "289:    ether_type = LINUX_SLL_P_802_2;",
          "290:   if (!ndo->ndo_qflag) {",
          "291:    ND_PRINT((ndo, \"ethertype %s, \",",
          "",
          "[Removed Lines]",
          "288:   if (ether_type <= ETHERMTU)",
          "",
          "[Added Lines]",
          "286:   if (ether_type <= MAX_ETHERNET_LENGTH_VAL)",
          "",
          "---------------"
        ],
        "print-slow.c||print-slow.c": [
          "File: print-slow.c -> print-slow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"netdissect.h\"",
          "30: #include \"extract.h\"",
          "31: #include \"addrtoname.h\"",
          "33: #include \"oui.h\"",
          "35: #define SLOW_PROTO_LACP                     1",
          "",
          "[Removed Lines]",
          "32: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203: struct lacp_tlv_actor_partner_info_t {",
          "204:     nd_uint16_t sys_pri;",
          "206:     nd_uint16_t key;",
          "207:     nd_uint16_t port_pri;",
          "208:     nd_uint16_t port;",
          "",
          "[Removed Lines]",
          "205:     uint8_t sys[ETHER_ADDR_LEN];",
          "",
          "[Added Lines]",
          "204:     nd_mac_addr sys;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230: struct marker_tlv_marker_info_t {",
          "231:     nd_uint16_t req_port;",
          "233:     nd_uint32_t req_trans_id;",
          "234:     uint8_t pad[2];",
          "235: };",
          "",
          "[Removed Lines]",
          "232:     uint8_t req_sys[ETHER_ADDR_LEN];",
          "",
          "[Added Lines]",
          "231:     nd_mac_addr req_sys;",
          "",
          "---------------"
        ],
        "print-symantec.c||print-symantec.c": [
          "File: print-symantec.c -> print-symantec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"extract.h\"",
          "32: #include \"ethertype.h\"",
          "36: struct symantec_header {",
          "37:  uint8_t  stuff1[6];",
          "38:  uint16_t ether_type;",
          "",
          "[Removed Lines]",
          "34: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  etype = EXTRACT_BE_U_2(&sp->ether_type);",
          "51:  if (!ndo->ndo_qflag) {",
          "53:             ND_PRINT((ndo, \"invalid ethertype %u\", etype));",
          "54:                 else",
          "55:             ND_PRINT((ndo, \"ethertype %s (0x%04x)\",",
          "56:            tok2str(ethertype_values,\"Unknown\", etype),",
          "57:                                        etype));",
          "58:         } else {",
          "60:                           ND_PRINT((ndo, \"invalid ethertype %u\", etype));",
          "61:                 else",
          "62:                           ND_PRINT((ndo, \"%s\", tok2str(ethertype_values,\"Unknown Ethertype (0x%04x)\", etype)));",
          "",
          "[Removed Lines]",
          "52:          if (etype <= ETHERMTU)",
          "59:                 if (etype <= ETHERMTU)",
          "",
          "[Added Lines]",
          "50:          if (etype <= MAX_ETHERNET_LENGTH_VAL)",
          "57:                 if (etype <= MAX_ETHERNET_LENGTH_VAL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:  ether_type = EXTRACT_BE_U_2(&sp->ether_type);",
          "99:   if (!ndo->ndo_eflag)",
          "100:    symantec_hdr_print(ndo, (const u_char *)sp, length + sizeof (struct symantec_header));",
          "",
          "[Removed Lines]",
          "97:  if (ether_type <= ETHERMTU) {",
          "",
          "[Added Lines]",
          "95:  if (ether_type <= MAX_ETHERNET_LENGTH_VAL) {",
          "",
          "---------------"
        ],
        "print-tipc.c||print-tipc.c": [
          "File: print-tipc.c -> print-tipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <netdissect-stdinc.h>",
          "36: #include \"netdissect.h\"",
          "38: #include \"ethertype.h\"",
          "39: #include \"extract.h\"",
          "",
          "[Removed Lines]",
          "37: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "print-token.c||print-token.c": [
          "File: print-token.c -> print-token.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"netdissect.h\"",
          "38: #include \"extract.h\"",
          "39: #include \"addrtoname.h\"",
          "",
          "[Removed Lines]",
          "40: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #define TOKEN_HDRLEN  14",
          "72: #define ROUTING_SEGMENT_MAX 16",
          "73: #define IS_SOURCE_ROUTED(trp) ((trp)->token_shost[0] & 0x80)",
          "75: #define TOKEN_FC_LLC  1",
          "83: #define SEGMENT_COUNT(trp) ((int)((RIF_LENGTH(trp) - 2) / 2))",
          "85: struct token_header {",
          "92: };",
          "94: static const char tstr[] = \"[|token-ring]\";",
          "",
          "[Removed Lines]",
          "71: #define TOKEN_RING_MAC_LEN 6",
          "74: #define FRAME_TYPE(trp)  (((trp)->token_fc & 0xC0) >> 6)",
          "77: #define BROADCAST(trp)  ((EXTRACT_BE_U_2(&(trp)->token_rcf) & 0xE000) >> 13)",
          "78: #define RIF_LENGTH(trp)  ((EXTRACT_BE_U_2(&(trp)->token_rcf) & 0x1f00) >> 8)",
          "79: #define DIRECTION(trp)  ((EXTRACT_BE_U_2(&(trp)->token_rcf) & 0x0080) >> 7)",
          "80: #define LARGEST_FRAME(trp) ((EXTRACT_BE_U_2(&(trp)->token_rcf) & 0x0070) >> 4)",
          "81: #define RING_NUMBER(trp, x) ((EXTRACT_BE_U_2(&(trp)->token_rseg[x]) & 0xfff0) >> 4)",
          "82: #define BRIDGE_NUMBER(trp, x) ((EXTRACT_BE_U_2(&(trp)->token_rseg[x]) & 0x000f))",
          "86:  uint8_t  token_ac;",
          "87:  uint8_t  token_fc;",
          "88:  uint8_t  token_dhost[TOKEN_RING_MAC_LEN];",
          "89:  uint8_t  token_shost[TOKEN_RING_MAC_LEN];",
          "90:  uint16_t token_rcf;",
          "91:  uint16_t token_rseg[ROUTING_SEGMENT_MAX];",
          "",
          "[Added Lines]",
          "72: #define FRAME_TYPE(trp)  ((EXTRACT_U_1((trp)->token_fc) & 0xC0) >> 6)",
          "75: #define BROADCAST(trp)  ((EXTRACT_BE_U_2((trp)->token_rcf) & 0xE000) >> 13)",
          "76: #define RIF_LENGTH(trp)  ((EXTRACT_BE_U_2((trp)->token_rcf) & 0x1f00) >> 8)",
          "77: #define DIRECTION(trp)  ((EXTRACT_BE_U_2((trp)->token_rcf) & 0x0080) >> 7)",
          "78: #define LARGEST_FRAME(trp) ((EXTRACT_BE_U_2((trp)->token_rcf) & 0x0070) >> 4)",
          "79: #define RING_NUMBER(trp, x) ((EXTRACT_BE_U_2((trp)->token_rseg[x]) & 0xfff0) >> 4)",
          "80: #define BRIDGE_NUMBER(trp, x) ((EXTRACT_BE_U_2((trp)->token_rseg[x]) & 0x000f))",
          "84:  nd_uint8_t   token_ac;",
          "85:  nd_uint8_t   token_fc;",
          "86:  nd_mac_addr  token_dhost;",
          "87:  nd_mac_addr  token_shost;",
          "88:  nd_uint16_t  token_rcf;",
          "89:  nd_uint16_t  token_rseg[ROUTING_SEGMENT_MAX];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:  if (!ndo->ndo_qflag)",
          "118:   ND_PRINT((ndo, \"%02x %02x \",",
          "121:  ND_PRINT((ndo, \"%s > %s, length %u: \",",
          "122:         srcname, dstname,",
          "123:         length));",
          "",
          "[Removed Lines]",
          "119:          trp->token_ac,",
          "120:          trp->token_fc));",
          "",
          "[Added Lines]",
          "117:          EXTRACT_U_1(trp->token_ac),",
          "118:          EXTRACT_U_1(trp->token_fc)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150: {",
          "151:  const struct token_header *trp;",
          "152:  int llc_hdrlen;",
          "154:  struct lladdr_info src, dst;",
          "155:  u_int route_len = 0, hdr_len = TOKEN_HDRLEN;",
          "156:  int seg;",
          "",
          "[Removed Lines]",
          "153:  struct ether_header ehdr;",
          "",
          "[Added Lines]",
          "151:  nd_mac_addr srcmac, dstmac;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:  if (IS_SOURCE_ROUTED(trp)) {",
          "175:   if (ndo->ndo_eflag)",
          "178:   if (caplen < TOKEN_HDRLEN + 2) {",
          "179:    ND_PRINT((ndo, \"%s\", tstr));",
          "",
          "[Removed Lines]",
          "168:  extract_token_addrs(trp, (char*)ESRC(&ehdr), (char*)EDST(&ehdr));",
          "176:    token_hdr_print(ndo, trp, length, ESRC(&ehdr), EDST(&ehdr));",
          "",
          "[Added Lines]",
          "166:  extract_token_addrs(trp, (char*)srcmac, (char*)dstmac);",
          "171:   srcmac[0] &= 0x7f;",
          "174:    token_hdr_print(ndo, trp, length, srcmac, dstmac);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:     ND_PRINT((ndo, \" [%d:%d]\", RING_NUMBER(trp, seg),",
          "194:         BRIDGE_NUMBER(trp, seg)));",
          "195:   } else {",
          "198:    for (seg = 0; seg < SEGMENT_COUNT(trp); seg++)",
          "200:   }",
          "201:   ND_PRINT((ndo, \" (%s) \", largest_frame[LARGEST_FRAME(trp)]));",
          "202:  } else {",
          "203:   if (ndo->ndo_eflag)",
          "205:  }",
          "208:  src.addr_string = etheraddr_string;",
          "210:  dst.addr_string = etheraddr_string;",
          "",
          "[Removed Lines]",
          "196:    ND_PRINT((ndo, \"rt = %x\", EXTRACT_BE_U_2(&trp->token_rcf)));",
          "199:     ND_PRINT((ndo, \":%x\", EXTRACT_BE_U_2(&trp->token_rseg[seg])));",
          "204:    token_hdr_print(ndo, trp, length, ESRC(&ehdr), EDST(&ehdr));",
          "207:  src.addr = ESRC(&ehdr);",
          "209:  dst.addr = EDST(&ehdr);",
          "",
          "[Added Lines]",
          "194:    ND_PRINT((ndo, \"rt = %x\", EXTRACT_BE_U_2(trp->token_rcf)));",
          "197:     ND_PRINT((ndo, \":%x\", EXTRACT_BE_U_2(trp->token_rseg[seg])));",
          "202:    token_hdr_print(ndo, trp, length, srcmac, dstmac);",
          "205:  src.addr = srcmac;",
          "207:  dst.addr = dstmac;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:   if (!ndo->ndo_eflag)",
          "232:    token_hdr_print(ndo, trp, length + TOKEN_HDRLEN + route_len,",
          "234:   if (!ndo->ndo_suppress_default_print)",
          "235:    ND_DEFAULTPRINT(p, caplen);",
          "236:  }",
          "",
          "[Removed Lines]",
          "233:        ESRC(&ehdr), EDST(&ehdr));",
          "",
          "[Added Lines]",
          "231:        srcmac, dstmac);",
          "",
          "---------------"
        ],
        "print-vqp.c||print-vqp.c": [
          "File: print-vqp.c -> print-vqp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"netdissect.h\"",
          "27: #include \"extract.h\"",
          "28: #include \"addrtoname.h\"",
          "31: #define VQP_VERSION              1",
          "32: #define VQP_EXTRACT_VERSION(x) ((x)&0xFF)",
          "",
          "[Removed Lines]",
          "29: #include \"ether.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:  case VQP_OBJ_MAC_ADDRESS:",
          "194:  case VQP_OBJ_MAC_NULL:",
          "196:                 goto trunc;",
          "197:        ND_PRINT((ndo, \"%s\", etheraddr_string(ndo, tptr)));",
          "198:               break;",
          "",
          "[Removed Lines]",
          "195:             if (vqp_obj_len != ETHER_ADDR_LEN)",
          "",
          "[Added Lines]",
          "194:             if (vqp_obj_len != MAC_ADDR_LEN)",
          "",
          "---------------"
        ]
      }
    }
  ]
}