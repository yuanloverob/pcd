{
  "cve_id": "CVE-2024-24814",
  "cve_desc": "mod_auth_openidc is an OpenID Certified\u2122 authentication and authorization module for the Apache 2.x HTTP server that implements the OpenID Connect Relying Party functionality. In affected versions missing input validation on mod_auth_openidc_session_chunks cookie value makes the server vulnerable to a denial of service (DoS) attack. An internal security audit has been conducted and the reviewers found that if they manipulated the value of the mod_auth_openidc_session_chunks cookie to a very large integer, like 99999999, the server struggles with the request for a long time and finally gets back with a 500 error. Making a few requests of this kind caused our server to become unresponsive. Attackers can craft requests that would make the server work very hard (and possibly become unresponsive) and/or crash with minimal effort. This issue has been addressed in version 2.4.15.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "OpenIDC/mod_auth_openidc",
  "patch_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
  "patch_info": {
    "commit_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
    "repo": "OpenIDC/mod_auth_openidc",
    "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/4022c12f314bd89d127d1be008b1a80a08e1203d",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/util.c"
    ],
    "message": "release 2.4.15.2: fix DoS CVE-2024-24814\n\nfix CVE-2024-24814: DoS when `OIDCSessionType client-cookie` is set and\na crafted Cookie header is supplied\nhttps://github.com/OpenIDC/mod_auth_openidc/security/advisories/GHSA-hxr6-w4gc-7vvv\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/util.c||src/util.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2dev],[hans.zandbelt@openidc.com])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2],[hans.zandbelt@openidc.com])",
      "",
      "---------------"
    ],
    "src/util.c||src/util.c": [
      "File: src/util.c -> src/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1561: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName, int chunkSize) {",
      "1578:   }",
      "1579:  }",
      "1580:  return cookieValue;",
      "1581: }",
      "",
      "[Removed Lines]",
      "1562:  char *cookieValue = NULL;",
      "1563:  char *chunkValue = NULL;",
      "1564:  int i = 0;",
      "1565:  if (chunkSize == 0) {",
      "1566:   cookieValue = oidc_util_get_cookie(r, cookieName);",
      "1567:  } else {",
      "1568:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1569:   if (chunkCount > 0) {",
      "1570:    cookieValue = \"\";",
      "1571:    for (i = 0; i < chunkCount; i++) {",
      "1572:     chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1573:     if (chunkValue != NULL)",
      "1574:      cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue, chunkValue);",
      "1575:    }",
      "1576:   } else {",
      "1577:    cookieValue = oidc_util_get_cookie(r, cookieName);",
      "",
      "[Added Lines]",
      "1562:  char *cookieValue = NULL, *chunkValue = NULL;",
      "1563:  int chunkCount = 0, i = 0;",
      "1564:  if (chunkSize == 0)",
      "1565:   return oidc_util_get_cookie(r, cookieName);",
      "1566:  chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1567:  if (chunkCount == 0)",
      "1568:   return oidc_util_get_cookie(r, cookieName);",
      "1569:  if ((chunkCount < 0) || (chunkCount > 99)) {",
      "1570:   oidc_warn(r, \"chunk count out of bounds: %d\", chunkCount);",
      "1571:   return NULL;",
      "1572:  }",
      "1573:  for (i = 0; i < chunkCount; i++) {",
      "1574:   chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1575:   if (chunkValue == NULL) {",
      "1576:    oidc_warn(r, \"could not find chunk %d; aborting\", i);",
      "1577:    break;",
      "1579:   cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue ? cookieValue : \"\", chunkValue);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28bda50f7aef9ee9d3ef6ace5fe6f8f236ba363a",
      "candidate_info": {
        "commit_hash": "28bda50f7aef9ee9d3ef6ace5fe6f8f236ba363a",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/28bda50f7aef9ee9d3ef6ace5fe6f8f236ba363a",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.15.5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.5dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.5],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0da954539352d74b04bf8e51abcf6cdf492d4227",
      "candidate_info": {
        "commit_hash": "0da954539352d74b04bf8e51abcf6cdf492d4227",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/0da954539352d74b04bf8e51abcf6cdf492d4227",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c",
          "src/jose.h",
          "test/test-cmd.c",
          "test/test.c"
        ],
        "message": "2.4.16.4rc2: fix oidc_jwk_copy wrt. \"x5t\"\n\nwhich broke private_key_jwt authentication to Azure AD since 2.4.13;\nsee #1269; thanks @uoe-pjackson\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c",
          "src/jose.h||src/jose.h",
          "test/test-cmd.c||test/test-cmd.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc1],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc2],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:  oidc_jwk_t *result = NULL;",
          "337:  cjose_jwk_t *cjose_jwk = NULL;",
          "338:  cjose_err cjose_err;",
          "340:  oidc_jose_error_t x5c_err;",
          "341:  char *use = NULL;",
          "346:   goto end;",
          "347:  }",
          "",
          "[Removed Lines]",
          "335: oidc_jwk_t *oidc_jwk_parse(apr_pool_t *pool, const char *s_json, oidc_jose_error_t *err) {",
          "339:  json_error_t json_error;",
          "343:  json_t *json = json_loads(s_json, 0, &json_error);",
          "344:  if (json == NULL) {",
          "345:   oidc_jose_error(err, \"could not parse JWK: %s (%s)\", json_error.text, s_json);",
          "",
          "[Added Lines]",
          "335: oidc_jwk_t *oidc_jwk_parse(apr_pool_t *pool, json_t *json, oidc_jose_error_t *err) {",
          "341:  json_t *v = NULL;",
          "343:  char *s_json = json_dumps(json, 0);",
          "344:  if (s_json == NULL) {",
          "345:   oidc_jose_error(err, \"could not serialize JWK\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:  result = oidc_jwk_from_cjose(pool, cjose_jwk, use);",
          "365: end:",
          "370:  return result;",
          "371: }",
          "",
          "[Removed Lines]",
          "367:  if (json)",
          "368:   json_decref(json);",
          "",
          "[Added Lines]",
          "368:  v = json_object_get(json, OIDC_JOSE_JWK_X5T256_STR);",
          "369:  if (v)",
          "370:   result->x5t_S256 = apr_pstrdup(pool, json_string_value(v));",
          "373:  v = json_object_get(json, OIDC_JOSE_JWK_X5T_STR);",
          "374:  if (v)",
          "375:   result->x5t = apr_pstrdup(pool, json_string_value(v));",
          "379:  if (s_json)",
          "380:   free(s_json);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376: oidc_jwk_t *oidc_jwk_copy(apr_pool_t *pool, const oidc_jwk_t *src) {",
          "382: }",
          "",
          "[Removed Lines]",
          "377:  char *s_json = NULL;",
          "378:  oidc_jose_error_t err;",
          "379:  if (oidc_jwk_to_json(pool, src, &s_json, &err) == FALSE)",
          "380:   return NULL;",
          "381:  return oidc_jwk_parse(pool, s_json, &err);",
          "",
          "[Added Lines]",
          "389:  int i = 0;",
          "390:  cjose_err err;",
          "391:  oidc_jwk_t *dst = oidc_jwk_new(pool);",
          "392:  dst->cjose_jwk = cjose_jwk_retain(src->cjose_jwk, &err);",
          "393:  dst->kid = apr_pstrdup(pool, src->kid);",
          "394:  dst->kty = src->kty;",
          "395:  dst->use = apr_pstrdup(pool, src->use);",
          "396:  dst->x5c = NULL;",
          "397:  if (src->x5c) {",
          "398:   dst->x5c = apr_array_make(pool, src->x5c->nelts, sizeof(char *));",
          "399:   for (i = 0; i < src->x5c->nelts; i++)",
          "400:    APR_ARRAY_PUSH(dst->x5c, char *) = APR_ARRAY_IDX(src->x5c, i, char *);",
          "401:  }",
          "402:  dst->x5t = apr_pstrdup(pool, src->x5t);",
          "403:  dst->x5t_S256 = apr_pstrdup(pool, src->x5t_S256);",
          "404:  return dst;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445: apr_byte_t oidc_jwk_parse_json(apr_pool_t *pool, json_t *json, oidc_jwk_t **jwk, oidc_jose_error_t *err) {",
          "449:  return (*jwk != NULL);",
          "450: }",
          "",
          "[Removed Lines]",
          "446:  char *s_json = json_dumps(json, 0);",
          "448:  cjose_get_dealloc()(s_json);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jose.h||src/jose.h": [
          "File: src/jose.h -> src/jose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: apr_byte_t oidc_jwe_decrypt(apr_pool_t *pool, const char *input_json, apr_hash_t *keys, char **plaintext,",
          "175:        int *plaintext_len, oidc_jose_error_t *err, apr_byte_t import_must_succeed);",
          "178: oidc_jwk_t *oidc_jwk_copy(apr_pool_t *pool, const oidc_jwk_t *jwk);",
          "180: apr_byte_t oidc_jwk_parse_json(apr_pool_t *pool, json_t *json, oidc_jwk_t **jwk, oidc_jose_error_t *err);",
          "",
          "[Removed Lines]",
          "177: oidc_jwk_t *oidc_jwk_parse(apr_pool_t *pool, const char *s_json, oidc_jose_error_t *err);",
          "",
          "[Added Lines]",
          "177: oidc_jwk_t *oidc_jwk_parse(apr_pool_t *pool, json_t *json, oidc_jose_error_t *err);",
          "",
          "---------------"
        ],
        "test/test-cmd.c||test/test-cmd.c": [
          "File: test/test-cmd.c -> test/test-cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   return -1;",
          "164:  }",
          "166:  oidc_jose_error_t oidc_err;",
          "168:  if (jwk == NULL) {",
          "169:   fprintf(stderr, \"could not import JWK: %s [file: %s, function: %s, line: %d]\\n\", oidc_err.text,",
          "170:    oidc_err.source, oidc_err.function, oidc_err.line);",
          "",
          "[Removed Lines]",
          "167:  oidc_jwk_t *jwk = oidc_jwk_parse(pool, s_jwk, &oidc_err);",
          "",
          "[Added Lines]",
          "166:  json_error_t json_error;",
          "167:  json_t *json = json_loads(s_jwk, 0, &json_error);",
          "170:  oidc_jwk_t *jwk = oidc_jwk_parse(pool, json, &oidc_err);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:  cjose_jws_release(jws);",
          "191:  oidc_jwk_destroy(jwk);",
          "193:  return 0;",
          "194: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:  json_decref(json);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   return -1;",
          "208:  apr_hash_t *keys = apr_hash_make(pool);",
          "212:  if (jwk == NULL) {",
          "213:   fprintf(stderr, \"could not import JWK: %s [file: %s, function: %s, line: %d]\\n\", oidc_err.text,",
          "214:    oidc_err.source, oidc_err.function, oidc_err.line);",
          "",
          "[Removed Lines]",
          "209:  oidc_jose_error_t oidc_err;",
          "211:  oidc_jwk_t *jwk = oidc_jwk_parse(pool, s_jwk, &oidc_err);",
          "",
          "[Added Lines]",
          "214:  json_error_t json_error;",
          "215:  json_t *json = json_loads(s_jwk, 0, &json_error);",
          "217:  oidc_jose_error_t oidc_err;",
          "218:  oidc_jwk_t *jwk = oidc_jwk_parse(pool, json, &oidc_err);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:  fprintf(stdout, \"%s\", plaintext);",
          "228:  oidc_jwk_destroy(jwk);",
          "230:  return 0;",
          "231: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:  json_decref(json);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   return message;",
          "121: static char *_jwk_parse(apr_pool_t *pool, const char *s, oidc_jwk_t **jwk, oidc_jose_error_t *err) {",
          "123:  TST_ASSERT_ERR(\"oidc_jwk_parse\", k != NULL, pool, (*err));",
          "125:  return 0;",
          "126: }",
          "",
          "[Removed Lines]",
          "122:  oidc_jwk_t *k = oidc_jwk_parse(pool, s, err);",
          "",
          "[Added Lines]",
          "122:  json_error_t json_err;",
          "123:  json_t *json = json_loads(s, 0, &json_err);",
          "124:  oidc_jwk_t *k = oidc_jwk_parse(pool, json, err);",
          "127:  json_decref(json);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:  return 0;",
          "778: }",
          "780: static char *test_plaintext_decrypt_symmetric(apr_pool_t *pool) {",
          "781:  oidc_jose_error_t err;",
          "782:  apr_hash_t *keys = apr_hash_make(pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783: static char *test_jwk_copy(apr_pool_t *pool) {",
          "784:  oidc_jose_error_t err;",
          "785:  char *s = NULL;",
          "786:  oidc_jwk_t *jwk1 = NULL;",
          "787:  oidc_jwk_t *jwk2 = NULL;",
          "789:  s = \"{\"",
          "790:      \"\\\"kty\\\": \\\"RSA\\\",\"",
          "791:      \"\\\"kid\\\": \\\"bilbo.baggins@hobbiton.example\\\",\"",
          "792:      \"\\\"use\\\": \\\"sig\\\",\"",
          "793:      \"\\\"n\\\": \\\"n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT\"",
          "794:      \"-O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqV\"",
          "795:      \"wGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-\"",
          "796:      \"oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde\"",
          "797:      \"3uhGqC0ZCuEHg8lhzwOHrtIQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuC\"",
          "798:      \"LqKnS2BYwdq_mzSnbLY7h_qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5g\"",
          "799:      \"HdrNP5zw\\\",\"",
          "800:      \"\\\"e\\\": \\\"AQAB\\\",\"",
          "801:      \"\\\"x5t\\\": \\\"myx5t\\\",\"",
          "802:      \"\\\"x5t#S256\\\": \\\"myx5t#S256\\\"\"",
          "803:      \"}\";",
          "805:  jwk1 = NULL;",
          "806:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, s, &jwk1, &err) == 0, pool, err);",
          "807:  jwk2 = oidc_jwk_copy(pool, jwk1);",
          "809:  TST_ASSERT_STR(\"oidc_jwk_parse (x5t)\", jwk1->x5t, \"myx5t\");",
          "810:  TST_ASSERT_STR(\"oidc_jwk_parse (x5t#S256)\", jwk1->x5t_S256, \"myx5t#S256\");",
          "811:  TST_ASSERT_STR(\"oidc_jwk_copy (x5t)\", jwk2->x5t, \"myx5t\");",
          "812:  TST_ASSERT_STR(\"oidc_jwk_copy (x5t#S256)\", jwk2->x5t_S256, \"myx5t#S256\");",
          "814:  oidc_jwk_destroy(jwk2);",
          "815:  oidc_jwk_destroy(jwk1);",
          "817:  return 0;",
          "818: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1703:  TST_RUN(test_jwt_get_string, pool);",
          "1705:  TST_RUN(test_jwk_parse_json, pool);",
          "1706:  TST_RUN(test_plaintext_decrypt_symmetric, pool);",
          "1708: #if (OPENSSL_VERSION_NUMBER >= 0x1000100f)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:  TST_RUN(test_jwk_copy, pool);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d77b02a25d4a0bf5814ef6a4aa3a2dc22aba3a16",
      "candidate_info": {
        "commit_hash": "d77b02a25d4a0bf5814ef6a4aa3a2dc22aba3a16",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/d77b02a25d4a0bf5814ef6a4aa3a2dc22aba3a16",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65d9365714f6e207207224a18045ab64a95ca4eb",
      "candidate_info": {
        "commit_hash": "65d9365714f6e207207224a18045ab64a95ca4eb",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/65d9365714f6e207207224a18045ab64a95ca4eb",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16.7\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.7dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.7],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b796cadb3a4a03e3b63cae1bd4516d5c79fa10a",
      "candidate_info": {
        "commit_hash": "7b796cadb3a4a03e3b63cae1bd4516d5c79fa10a",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/7b796cadb3a4a03e3b63cae1bd4516d5c79fa10a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cfg/provider.c"
        ],
        "message": "re-introduce OIDCSessionMaxDuration 0 option; see #1252\n\nbump to 2.4.16.2dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cfg/provider.c||src/cfg/provider.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.1],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.2dev],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cfg/provider.c||src/cfg/provider.c": [
          "File: src/cfg/provider.c -> src/cfg/provider.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409: #define OIDC_SESSION_MAX_DURATION_MAX 3600 * 24 * 365",
          "410: #define OIDC_DEFAULT_SESSION_MAX_DURATION 3600 * 8",
          "415: #define OIDC_JWKS_REFRESH_INTERVAL_MIN 300",
          "416: #define OIDC_JWKS_REFRESH_INTERVAL_MAX 3600 * 24 * 365",
          "",
          "[Removed Lines]",
          "412: OIDC_PROVIDER_MEMBER_FUNCS_INT(session_max_duration, oidc_cfg_parse_int, OIDC_SESSION_MAX_DURATION_MIN,",
          "413:           OIDC_SESSION_MAX_DURATION_MAX, OIDC_DEFAULT_SESSION_MAX_DURATION)",
          "",
          "[Added Lines]",
          "412: const char *oidc_cfg_provider_session_max_duration_set(apr_pool_t *pool, oidc_provider_t *provider, int arg) {",
          "413:  const char *rv = NULL;",
          "414:  if (arg != 0)",
          "415:   rv = oidc_cfg_parse_is_valid_int(pool, arg, OIDC_SESSION_MAX_DURATION_MIN,",
          "416:        OIDC_SESSION_MAX_DURATION_MAX);",
          "417:  if (rv == NULL)",
          "418:   provider->session_max_duration = arg;",
          "419:  else",
          "420:   provider->session_max_duration = OIDC_DEFAULT_SESSION_MAX_DURATION;",
          "421:  return rv;",
          "422: }",
          "424: const char *oidc_cmd_provider_session_max_duration_set(cmd_parms *cmd, void *ptr, const char *arg) {",
          "425:  oidc_cfg_t *cfg = (oidc_cfg_t *)ap_get_module_config(cmd->server->module_config, &auth_openidc_module);",
          "426:  int v = -1;",
          "427:  const char *rv = oidc_cfg_parse_int(cmd->pool, arg, &v);",
          "428:  if (rv == NULL)",
          "429:   rv = oidc_cfg_provider_session_max_duration_set(cmd->pool, cfg->provider, v);",
          "430:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "431: }",
          "433: OIDC_PROVIDER_MEMBER_GET_INT_DEF(session_max_duration, int, OIDC_DEFAULT_SESSION_MAX_DURATION)",
          "",
          "---------------"
        ]
      }
    }
  ]
}