{
  "cve_id": "CVE-2017-14646",
  "cve_desc": "The AP4_AvccAtom and AP4_HvccAtom classes in Bento4 version 1.5.0-617 do not properly validate data sizes, leading to a heap-based buffer over-read and application crash in AP4_DataBuffer::SetData in Core/Ap4DataBuffer.cpp.",
  "repo": "axiomatic-systems/Bento4",
  "patch_hash": "53499d8d4c69142137c7c7f0097a444783fdeb90",
  "patch_info": {
    "commit_hash": "53499d8d4c69142137c7c7f0097a444783fdeb90",
    "repo": "axiomatic-systems/Bento4",
    "commit_url": "https://github.com/axiomatic-systems/Bento4/commit/53499d8d4c69142137c7c7f0097a444783fdeb90",
    "files": [
      "Source/C++/Core/Ap4AvccAtom.cpp",
      "Source/C++/Core/Ap4HvccAtom.cpp"
    ],
    "message": "fix for #188",
    "before_after_code_files": [
      "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp",
      "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp"
    ]
  },
  "patch_diff": {
    "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp": [
      "File: Source/C++/Core/Ap4AvccAtom.cpp -> Source/C++/Core/Ap4AvccAtom.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:     m_SequenceParameters.EnsureCapacity(num_seq_params);",
      "153:     unsigned int cursor = 6;",
      "154:     for (unsigned int i=0; i<num_seq_params; i++) {",
      "159:     }",
      "160:     AP4_UI08 num_pic_params = payload[cursor++];",
      "161:     m_PictureParameters.EnsureCapacity(num_pic_params);",
      "162:     for (unsigned int i=0; i<num_pic_params; i++) {",
      "167:     }",
      "168: }",
      "",
      "[Removed Lines]",
      "155:         m_SequenceParameters.Append(AP4_DataBuffer());",
      "156:         AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
      "157:         m_SequenceParameters[i].SetData(&payload[cursor]+2, param_length);",
      "158:         cursor += 2+param_length;",
      "163:         m_PictureParameters.Append(AP4_DataBuffer());",
      "164:         AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
      "165:         m_PictureParameters[i].SetData(&payload[cursor]+2, param_length);",
      "166:         cursor += 2+param_length;",
      "",
      "[Added Lines]",
      "155:         if (cursor+2 <= payload_size) {",
      "156:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
      "157:             cursor += 2;",
      "158:             if (cursor + param_length < payload_size) {",
      "159:                 m_SequenceParameters.Append(AP4_DataBuffer());",
      "160:                 m_SequenceParameters[i].SetData(&payload[cursor], param_length);",
      "161:                 cursor += param_length;",
      "162:             }",
      "163:         }",
      "168:         if (cursor+2 <= payload_size) {",
      "169:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
      "170:             cursor += 2;",
      "171:             if (cursor + param_length < payload_size) {",
      "172:                 m_PictureParameters.Append(AP4_DataBuffer());",
      "173:                 m_PictureParameters[i].SetData(&payload[cursor], param_length);",
      "174:                 cursor += param_length;",
      "175:             }",
      "176:         }",
      "",
      "---------------"
    ],
    "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp": [
      "File: Source/C++/Core/Ap4HvccAtom.cpp -> Source/C++/Core/Ap4HvccAtom.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "247: {",
      "249:     unsigned int payload_size = size-AP4_ATOM_HEADER_SIZE;",
      "250:     m_RawBytes.SetData(payload, payload_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252:     if (payload_size < 22) return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2fe0cb251daa8c06fbe5a4338bf135ca64b18714",
      "candidate_info": {
        "commit_hash": "2fe0cb251daa8c06fbe5a4338bf135ca64b18714",
        "repo": "axiomatic-systems/Bento4",
        "commit_url": "https://github.com/axiomatic-systems/Bento4/commit/2fe0cb251daa8c06fbe5a4338bf135ca64b18714",
        "files": [
          "Source/C++/Apps/Mp4Mux/Mp4Mux.cpp",
          "Source/C++/Codecs/Ap4AvcParser.cpp",
          "Source/C++/Codecs/Ap4HevcParser.cpp",
          "Source/C++/Codecs/Ap4HevcParser.h",
          "Source/C++/Core/Ap4AvccAtom.cpp",
          "Source/C++/Core/Ap4CommonEncryption.cpp",
          "Source/C++/Core/Ap4HvccAtom.cpp",
          "Source/C++/Core/Ap4HvccAtom.h",
          "Source/C++/Core/Ap4SampleDescription.cpp",
          "Source/C++/Core/Ap4SampleDescription.h",
          "Source/Python/utils/mp4utils.py"
        ],
        "message": "making some progress...",
        "before_after_code_files": [
          "Source/C++/Apps/Mp4Mux/Mp4Mux.cpp||Source/C++/Apps/Mp4Mux/Mp4Mux.cpp",
          "Source/C++/Codecs/Ap4AvcParser.cpp||Source/C++/Codecs/Ap4AvcParser.cpp",
          "Source/C++/Codecs/Ap4HevcParser.cpp||Source/C++/Codecs/Ap4HevcParser.cpp",
          "Source/C++/Codecs/Ap4HevcParser.h||Source/C++/Codecs/Ap4HevcParser.h",
          "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp",
          "Source/C++/Core/Ap4CommonEncryption.cpp||Source/C++/Core/Ap4CommonEncryption.cpp",
          "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp",
          "Source/C++/Core/Ap4HvccAtom.h||Source/C++/Core/Ap4HvccAtom.h",
          "Source/C++/Core/Ap4SampleDescription.cpp||Source/C++/Core/Ap4SampleDescription.cpp",
          "Source/C++/Core/Ap4SampleDescription.h||Source/C++/Core/Ap4SampleDescription.h",
          "Source/Python/utils/mp4utils.py||Source/Python/utils/mp4utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp",
            "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp"
          ],
          "candidate": [
            "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp",
            "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Source/C++/Apps/Mp4Mux/Mp4Mux.cpp||Source/C++/Apps/Mp4Mux/Mp4Mux.cpp": [
          "File: Source/C++/Apps/Mp4Mux/Mp4Mux.cpp -> Source/C++/Apps/Mp4Mux/Mp4Mux.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:             \"  h265: H265/HEVC NAL units\\n\"",
          "93:             \"    optional params:\\n\"",
          "94:             \"      frame_rate: floating point number in frames per second (default=24.0)\\n\"",
          "95:             \"  aac:  AAC in ADTS format\\n\"",
          "96:             \"  mp4:  MP4 track(s) from an MP4 file\\n\"",
          "97:             \"    optional params:\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:             \"      format: hev1 or hvc1 (default) for HEVC tracks\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585: {",
          "586:     unsigned int video_width = 0;",
          "587:     unsigned int video_height = 0;",
          "589:     AP4_ByteStream* input;",
          "590:     AP4_Result result = AP4_FileByteStream::Create(input_name, AP4_FileByteStream::STREAM_MODE_READ, input);",
          "591:     if (AP4_FAILED(result)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     AP4_UI32     format = AP4_SAMPLE_FORMAT_HVC1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "603:                 return;",
          "604:             }",
          "605:             video_frame_rate = (unsigned int)(1000.0*frame_rate);",
          "606:         }",
          "607:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:         } else if (parameters[i].m_Name == \"format\") {",
          "609:             if (parameters[i].m_Value == \"hev1\") {",
          "610:                 format = AP4_SAMPLE_FORMAT_HEV1;",
          "611:             } else if (parameters[i].m_Value == \"hvc1\") {",
          "612:                 format = AP4_SAMPLE_FORMAT_HVC1;",
          "613:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764:     }",
          "767:     AP4_HevcSampleDescription* sample_description =",
          "769:                                       video_width,",
          "770:                                       video_height,",
          "771:                                       24,",
          "",
          "[Removed Lines]",
          "768:         new AP4_HevcSampleDescription(AP4_SAMPLE_FORMAT_HEV1,",
          "",
          "[Added Lines]",
          "775:     AP4_UI08 parameters_completeness = (format == AP4_SAMPLE_FORMAT_HVC1 ? 1 : 0);",
          "777:         new AP4_HevcSampleDescription(format,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "787:                                       temporal_id_nested,",
          "788:                                       nalu_length_size,",
          "789:                                       vps_array,",
          "790:                                       sps_array,",
          "793:     sample_table->AddSampleDescription(sample_description);",
          "",
          "[Removed Lines]",
          "791:                                       pps_array);",
          "",
          "[Added Lines]",
          "799:                                       parameters_completeness,",
          "801:                                       parameters_completeness,",
          "802:                                       pps_array,",
          "803:                                       parameters_completeness);",
          "",
          "---------------"
        ],
        "Source/C++/Codecs/Ap4AvcParser.cpp||Source/C++/Codecs/Ap4AvcParser.cpp": [
          "File: Source/C++/Codecs/Ap4AvcParser.cpp -> Source/C++/Codecs/Ap4AvcParser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:         eos = false;",
          "1002:     }",
          "1005: }",
          "",
          "[Removed Lines]",
          "1004:     return Feed(nal_unit->GetData(), nal_unit->GetDataSize(), access_unit_info, eos);",
          "",
          "[Added Lines]",
          "1004:     return Feed(nal_unit ? nal_unit->GetData() : NULL,",
          "1005:                 nal_unit ? nal_unit->GetDataSize() : 0,",
          "1006:                 access_unit_info,",
          "1007:                 eos);",
          "",
          "---------------"
        ],
        "Source/C++/Codecs/Ap4HevcParser.cpp||Source/C++/Codecs/Ap4HevcParser.cpp": [
          "File: Source/C++/Codecs/Ap4HevcParser.cpp -> Source/C++/Codecs/Ap4HevcParser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     AP4_NalParser::Unescape(unescaped);",
          "207:     AP4_BitReader bits(unescaped.GetData(), unescaped.GetDataSize());",
          "211:     first_slice_segment_in_pic_flag = bits.ReadBit();",
          "212:     if (nal_unit_type >= AP4_HEVC_NALU_TYPE_BLA_W_LP && nal_unit_type <= AP4_HEVC_NALU_TYPE_RSV_IRAP_VCL23) {",
          "213:         no_output_of_prior_pics_flag = bits.ReadBit();",
          "",
          "[Removed Lines]",
          "209:     bits.SkipBits(16); // NAL Unit Header",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:         }",
          "301:     }",
          "303:     return AP4_SUCCESS;",
          "304: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     size = bits.GetBitsRead();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "858:         eos = false;",
          "859:     }",
          "862: }",
          "",
          "[Removed Lines]",
          "861:     return Feed(nal_unit->GetData(), nal_unit->GetDataSize(), access_unit_info, eos);",
          "",
          "[Added Lines]",
          "862:     return Feed(nal_unit ? nal_unit->GetData() : NULL,",
          "863:                 nal_unit ? nal_unit->GetDataSize() : 0,",
          "864:                 access_unit_info,",
          "865:                 eos);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876:     access_unit_info.Reset();",
          "879:         unsigned int nal_unit_type    = (nal_unit[0] >> 1) & 0x3F;",
          "880:         unsigned int nuh_layer_id     = (((nal_unit[0] & 1) << 5) | (nal_unit[1] >> 3));",
          "881:         unsigned int nuh_temporal_id  = nal_unit[1] & 0x7;",
          "",
          "[Removed Lines]",
          "878:     if (nal_unit && nal_unit_size) {",
          "",
          "[Added Lines]",
          "882:     if (nal_unit && nal_unit_size >= 2) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "901:         if (nal_unit_type < AP4_HEVC_NALU_TYPE_VPS_NUT) {",
          "903:             AP4_HevcSliceSegmentHeader* slice_header = new AP4_HevcSliceSegmentHeader;",
          "905:             if (AP4_FAILED(result)) {",
          "907:                 return AP4_ERROR_INVALID_FORMAT;",
          "908:             }",
          "910: #if defined(AP4_HEVC_PARSER_ENABLE_DEBUG)",
          "911:             const char* slice_type_name = AP4_HevcNalParser::SliceTypeName(slice_header->slice_type);",
          "912:             if (slice_type_name == NULL) slice_type_name = \"?\";",
          "914:                 slice_header->slice_pic_parameter_set_id,",
          "915:                 slice_header->first_slice_segment_in_pic_flag?\"YES\":\"NO\",",
          "916:                 slice_header->slice_type,",
          "918: #endif",
          "919:             if (slice_header->first_slice_segment_in_pic_flag) {",
          "920:                 CheckIfAccessUnitIsCompleted(access_unit_info);",
          "",
          "[Removed Lines]",
          "904:             result = slice_header->Parse(nal_unit, nal_unit_size, nal_unit_type, &m_PPS[0], &m_SPS[0]);",
          "906:                 DBG_PRINTF_1(\"VLC parsing failed (%d)\", result);",
          "913:             DBG_PRINTF_4(\" pps_id=%d, first=%s, slice_type=%d (%s), \",",
          "917:                 slice_type_name);",
          "",
          "[Added Lines]",
          "908:             result = slice_header->Parse(nal_unit+2, nal_unit_size-2, nal_unit_type, &m_PPS[0], &m_SPS[0]);",
          "910:                 DBG_PRINTF_1(\"VCL parsing failed (%d)\", result);",
          "917:             DBG_PRINTF_5(\" pps_id=%d, first=%s, slice_type=%d (%s), size=%d, \",",
          "921:                 slice_type_name,",
          "922:                 slice_header->size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1023:     return AP4_SUCCESS;",
          "1024: }",
          "1027: |   AP4_HevFrameParser::AccessUnitInfo::Reset",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032: |   AP4_HevFrameParser::AccessUnitInfo::Reset",
          "1034: AP4_Result",
          "1035: AP4_HevcFrameParser::ParseSliceSegmentHeader(const AP4_UI08*             data,",
          "1036:                                              unsigned int                data_size,",
          "1037:                                              unsigned int                nal_unit_type,",
          "1038:                                              AP4_HevcSliceSegmentHeader& slice_header)",
          "1039: {",
          "1040:     return slice_header.Parse(data, data_size, nal_unit_type, &m_PPS[0], &m_SPS[0]);",
          "1041: }",
          "",
          "---------------"
        ],
        "Source/C++/Codecs/Ap4HevcParser.h||Source/C++/Codecs/Ap4HevcParser.h": [
          "File: Source/C++/Codecs/Ap4HevcParser.h -> Source/C++/Codecs/Ap4HevcParser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:                     AccessUnitInfo& access_unit_info,",
          "376:                     bool            last_unit=false);",
          "378:     AP4_HevcVideoParameterSet**    GetVideoParameterSets()    { return &m_VPS[0]; }",
          "379:     AP4_HevcSequenceParameterSet** GetSequenceParameterSets() { return &m_SPS[0]; }",
          "380:     AP4_HevcPictureParameterSet**  GetPictureParameterSets()  { return &m_PPS[0]; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:     AP4_Result ParseSliceSegmentHeader(const AP4_UI08*             data,",
          "379:                                        unsigned int                data_size,",
          "380:                                        unsigned int                nal_unit_type,",
          "381:                                        AP4_HevcSliceSegmentHeader& slice_header);",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp": [
          "File: Source/C++/Core/Ap4AvccAtom.cpp -> Source/C++/Core/Ap4AvccAtom.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         if (cursor+2 <= payload_size) {",
          "156:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
          "157:             cursor += 2;",
          "159:                 m_SequenceParameters.Append(AP4_DataBuffer());",
          "160:                 m_SequenceParameters[i].SetData(&payload[cursor], param_length);",
          "161:                 cursor += param_length;",
          "",
          "[Removed Lines]",
          "158:             if (cursor + param_length < payload_size) {",
          "",
          "[Added Lines]",
          "158:             if (cursor + param_length <= payload_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         if (cursor+2 <= payload_size) {",
          "169:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
          "170:             cursor += 2;",
          "172:                 m_PictureParameters.Append(AP4_DataBuffer());",
          "173:                 m_PictureParameters[i].SetData(&payload[cursor], param_length);",
          "174:                 cursor += param_length;",
          "",
          "[Removed Lines]",
          "171:             if (cursor + param_length < payload_size) {",
          "",
          "[Added Lines]",
          "171:             if (cursor + param_length <= payload_size) {",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4CommonEncryption.cpp||Source/C++/Core/Ap4CommonEncryption.cpp": [
          "File: Source/C++/Core/Ap4CommonEncryption.cpp -> Source/C++/Core/Ap4CommonEncryption.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:         AP4_HvccAtom* hvcc = AP4_DYNAMIC_CAST(AP4_HvccAtom, stsd->FindChild(\"hvc1/hvcC\"));",
          "262:         if (!hvcc)    return;",
          "",
          "[Removed Lines]",
          "261:         if (!hvcc)    hvcc = AP4_DYNAMIC_CAST(AP4_HvccAtom, stsd->FindChild(\"hev 1/hvcC\"));",
          "",
          "[Added Lines]",
          "261:         if (!hvcc)    hvcc = AP4_DYNAMIC_CAST(AP4_HvccAtom, stsd->FindChild(\"hev1/hvcC\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:         bool skip = false;",
          "360:         if (m_Format == AP4_SAMPLE_FORMAT_AVC1 ||",
          "361:             m_Format == AP4_SAMPLE_FORMAT_AVC2 ||",
          "362:             m_Format == AP4_SAMPLE_FORMAT_AVC3 ||",
          "363:             m_Format == AP4_SAMPLE_FORMAT_AVC4) {",
          "368:                 skip = true;",
          "369:             }",
          "375:                 if (AP4_FAILED(result)) {",
          "376:                     return result;",
          "377:                 }",
          "378:             }",
          "379:         } else {",
          "381:             return AP4_ERROR_NOT_SUPPORTED;",
          "382:         }",
          "",
          "[Removed Lines]",
          "358:         const AP4_UI08* nalu_data = &in[m_NaluLengthSize];",
          "359:         unsigned int nalu_type = nalu_data[0] & 0x1F;",
          "364:             if (nalu_type != AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_OF_NON_IDR_PICTURE &&",
          "365:                 nalu_type != AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_DATA_PARTITION_A   &&",
          "366:                 nalu_type != AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_OF_IDR_PICTURE) {",
          "372:             if (nalu_type == AP4_AVC_NAL_UNIT_TYPE_SPS ||",
          "373:                 nalu_type == AP4_AVC_NAL_UNIT_TYPE_PPS) {",
          "374:                 AP4_Result result = ParseAvcData(nalu_data, nalu_length);",
          "",
          "[Added Lines]",
          "362:             const AP4_UI08* nalu_data = &in[m_NaluLengthSize];",
          "363:             unsigned int nalu_type = nalu_data[0] & 0x1F;",
          "365:             if (nalu_type == AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_OF_NON_IDR_PICTURE ||",
          "366:                 nalu_type == AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_DATA_PARTITION_A   ||",
          "367:                 nalu_type == AP4_AVC_NAL_UNIT_TYPE_CODED_SLICE_OF_IDR_PICTURE) {",
          "369:                 if (m_AvcParser == NULL) return AP4_ERROR_INTERNAL;",
          "370:                 AP4_AvcSliceHeader slice_header;",
          "371:                 unsigned int nalu_ref_idc = (nalu_data[0]>>5)&3;",
          "372:                 AP4_Result result = m_AvcParser->ParseSliceHeader(&nalu_data[1],",
          "373:                                                                   nalu_length-1,",
          "374:                                                                   nalu_type,",
          "375:                                                                   nalu_ref_idc,",
          "376:                                                                   slice_header);",
          "377:                 if (AP4_FAILED(result)) {",
          "378:                     return result;",
          "379:                 }",
          "382:                 unsigned int cleartext_size = m_NaluLengthSize+1+(slice_header.size+7)/8;",
          "383:                 unsigned int encrypted_size = nalu_size-cleartext_size;",
          "385:                 bytes_of_cleartext_data.Append(cleartext_size);",
          "386:                 bytes_of_encrypted_data.Append(encrypted_size);",
          "387:             } else {",
          "392:                 if (nalu_type == AP4_AVC_NAL_UNIT_TYPE_SPS ||",
          "393:                     nalu_type == AP4_AVC_NAL_UNIT_TYPE_PPS) {",
          "394:                     AP4_Result result = ParseAvcData(nalu_data, nalu_length);",
          "395:                     if (AP4_FAILED(result)) {",
          "396:                         return result;",
          "397:                     }",
          "398:                 }",
          "400:         } else if (m_Format == AP4_SAMPLE_FORMAT_HEV1 ||",
          "401:                    m_Format == AP4_SAMPLE_FORMAT_HVC1) {",
          "402:             const AP4_UI08* nalu_data = &in[m_NaluLengthSize];",
          "403:             unsigned int nalu_type = (nalu_data[0] >> 1) & 0x3F;",
          "405:             if (nalu_type < AP4_HEVC_NALU_TYPE_VPS_NUT) {",
          "407:                 if (m_HevcParser == NULL) return AP4_ERROR_INTERNAL;",
          "408:                 AP4_HevcSliceSegmentHeader slice_header;",
          "409:                 AP4_Result result = m_HevcParser->ParseSliceSegmentHeader(&nalu_data[2], nalu_length-2, nalu_type, slice_header);",
          "415:                 unsigned int cleartext_size = m_NaluLengthSize+2+(slice_header.size+7)/8;",
          "416:                 unsigned int encrypted_size = nalu_size-cleartext_size;",
          "418:                 bytes_of_cleartext_data.Append(cleartext_size);",
          "419:                 bytes_of_encrypted_data.Append(encrypted_size);",
          "420:             } else {",
          "421:                 skip = true;",
          "424:                 if (nalu_type == AP4_HEVC_NALU_TYPE_VPS_NUT ||",
          "425:                     nalu_type == AP4_HEVC_NALU_TYPE_SPS_NUT ||",
          "426:                     nalu_type == AP4_HEVC_NALU_TYPE_PPS_NUT) {",
          "427:                     AP4_Result result = ParseHevcData(nalu_data, nalu_length);",
          "428:                     if (AP4_FAILED(result)) {",
          "429:                         return result;",
          "430:                     }",
          "431:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:                 bytes_of_encrypted_data.Append(0);",
          "391:                 range -= cleartext_size;",
          "392:             }",
          "413:         }",
          "416:         in += nalu_size;",
          "417:     }",
          "",
          "[Removed Lines]",
          "393:         } else {",
          "395:             if (m_AvcParser == NULL) return AP4_ERROR_INTERNAL;",
          "396:             AP4_AvcSliceHeader slice_header;",
          "397:             unsigned int nalu_ref_idc = (nalu_data[0]>>5)&3;",
          "398:             AP4_Result result = m_AvcParser->ParseSliceHeader(&nalu_data[1],",
          "399:                                                               nalu_length-1,",
          "400:                                                               nalu_type,",
          "401:                                                               nalu_ref_idc,",
          "402:                                                               slice_header);",
          "403:             if (AP4_FAILED(result)) {",
          "404:                 return result;",
          "405:             }",
          "408:             unsigned int cleartext_size = m_NaluLengthSize+1+(slice_header.size+7)/8;",
          "409:             unsigned int encrypted_size = nalu_size-cleartext_size;",
          "411:             bytes_of_cleartext_data.Append(cleartext_size);",
          "412:             bytes_of_encrypted_data.Append(encrypted_size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4HvccAtom.cpp||Source/C++/Core/Ap4HvccAtom.cpp": [
          "File: Source/C++/Core/Ap4HvccAtom.cpp -> Source/C++/Core/Ap4HvccAtom.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:                            AP4_UI08                         temporal_id_nested,",
          "179:                            AP4_UI08                         nalu_length_size,",
          "180:                            const AP4_Array<AP4_DataBuffer>& video_parameters,",
          "181:                            const AP4_Array<AP4_DataBuffer>& sequence_parameters,",
          "183:     AP4_Atom(AP4_ATOM_TYPE_HVCC, AP4_ATOM_HEADER_SIZE),",
          "184:     m_ConfigurationVersion(1),",
          "185:     m_GeneralProfileSpace(general_profile_space),",
          "",
          "[Removed Lines]",
          "182:                            const AP4_Array<AP4_DataBuffer>& picture_parameters) :",
          "",
          "[Added Lines]",
          "181:                            AP4_UI08                         video_parameters_completeness,",
          "183:                            AP4_UI08                         sequence_parameters_completeness,",
          "184:                            const AP4_Array<AP4_DataBuffer>& picture_parameters,",
          "185:                            AP4_UI08                         picture_parameters_completeness) :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:     AP4_HvccAtom::Sequence vps_sequence;",
          "209:     vps_sequence.m_NaluType = AP4_HEVC_NALU_TYPE_VPS_NUT;",
          "211:     for (unsigned int i=0; i<video_parameters.ItemCount(); i++) {",
          "212:         vps_sequence.m_Nalus.Append(video_parameters[i]);",
          "213:     }",
          "",
          "[Removed Lines]",
          "210:     vps_sequence.m_ArrayCompleteness = 0;",
          "",
          "[Added Lines]",
          "213:     vps_sequence.m_ArrayCompleteness = video_parameters_completeness;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:     AP4_HvccAtom::Sequence sps_sequence;",
          "219:     sps_sequence.m_NaluType = AP4_HEVC_NALU_TYPE_SPS_NUT;",
          "221:     for (unsigned int i=0; i<sequence_parameters.ItemCount(); i++) {",
          "222:         sps_sequence.m_Nalus.Append(sequence_parameters[i]);",
          "223:     }",
          "",
          "[Removed Lines]",
          "220:     sps_sequence.m_ArrayCompleteness = 0;",
          "",
          "[Added Lines]",
          "223:     sps_sequence.m_ArrayCompleteness = sequence_parameters_completeness;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:     AP4_HvccAtom::Sequence pps_sequence;",
          "229:     pps_sequence.m_NaluType = AP4_HEVC_NALU_TYPE_PPS_NUT;",
          "231:     for (unsigned int i=0; i<picture_parameters.ItemCount(); i++) {",
          "232:         pps_sequence.m_Nalus.Append(picture_parameters[i]);",
          "233:     }",
          "",
          "[Removed Lines]",
          "230:     pps_sequence.m_ArrayCompleteness = 0;",
          "",
          "[Added Lines]",
          "233:     pps_sequence.m_ArrayCompleteness = picture_parameters_completeness;",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4HvccAtom.h||Source/C++/Core/Ap4HvccAtom.h": [
          "File: Source/C++/Core/Ap4HvccAtom.h -> Source/C++/Core/Ap4HvccAtom.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                  AP4_UI08                         temporal_id_nested,",
          "91:                  AP4_UI08                         nalu_length_size,",
          "92:                  const AP4_Array<AP4_DataBuffer>& video_parameters,",
          "93:                  const AP4_Array<AP4_DataBuffer>& sequence_parameters,",
          "97:     virtual AP4_Result InspectFields(AP4_AtomInspector& inspector);",
          "",
          "[Removed Lines]",
          "94:                  const AP4_Array<AP4_DataBuffer>& picture_parameters);",
          "",
          "[Added Lines]",
          "93:                  AP4_UI08                         video_parameters_completeness,",
          "95:                  AP4_UI08                         sequence_parameters_completeness,",
          "96:                  const AP4_Array<AP4_DataBuffer>& picture_parameters,",
          "97:                  AP4_UI08                         picture_parameters_completeness);",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4SampleDescription.cpp||Source/C++/Core/Ap4SampleDescription.cpp": [
          "File: Source/C++/Core/Ap4SampleDescription.cpp -> Source/C++/Core/Ap4SampleDescription.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:                                                      AP4_UI08                         temporal_id_nested,",
          "466:                                                      AP4_UI08                         nalu_length_size,",
          "467:                                                      const AP4_Array<AP4_DataBuffer>& video_parameters,",
          "468:                                                      const AP4_Array<AP4_DataBuffer>& sequence_parameters,",
          "470:     AP4_SampleDescription(TYPE_HEVC, format, NULL),",
          "471:     AP4_VideoSampleDescription(width, height, depth, compressor_name)",
          "472: {",
          "",
          "[Removed Lines]",
          "469:                                                      const AP4_Array<AP4_DataBuffer>& picture_parameters) :",
          "",
          "[Added Lines]",
          "468:                                                      AP4_UI08                         video_parameters_completeness,",
          "470:                                                      AP4_UI08                         sequence_parameters_completeness,",
          "471:                                                      const AP4_Array<AP4_DataBuffer>& picture_parameters,",
          "472:                                                      AP4_UI08                         picture_parameters_completeness) :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:                                   temporal_id_nested,",
          "488:                                   nalu_length_size,",
          "489:                                   video_parameters,",
          "490:                                   sequence_parameters,",
          "492:     m_Details.AddChild(m_HvccAtom);",
          "493: }",
          "",
          "[Removed Lines]",
          "491:                                   picture_parameters);",
          "",
          "[Added Lines]",
          "493:                                   video_parameters_completeness,",
          "495:                                   sequence_parameters_completeness,",
          "496:                                   picture_parameters,",
          "497:                                   picture_parameters_completeness);",
          "",
          "---------------"
        ],
        "Source/C++/Core/Ap4SampleDescription.h||Source/C++/Core/Ap4SampleDescription.h": [
          "File: Source/C++/Core/Ap4SampleDescription.h -> Source/C++/Core/Ap4SampleDescription.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:                               AP4_UI08                         temporal_id_nested,",
          "375:                               AP4_UI08                         nalu_length_size,",
          "376:                               const AP4_Array<AP4_DataBuffer>& video_parameters,",
          "377:                               const AP4_Array<AP4_DataBuffer>& sequence_parameters,",
          "381:     AP4_UI08 GetConfigurationVersion()             const { return m_HvccAtom->GetConfigurationVersion(); }",
          "382:     AP4_UI08 GetGeneralProfileSpace()              const { return m_HvccAtom->GetGeneralProfileSpace(); }",
          "",
          "[Removed Lines]",
          "378:                               const AP4_Array<AP4_DataBuffer>& picture_parameters);",
          "",
          "[Added Lines]",
          "377:                               AP4_UI08                         video_parameters_completeness,",
          "379:                               AP4_UI08                         sequence_parameters_completeness,",
          "380:                               const AP4_Array<AP4_DataBuffer>& picture_parameters,",
          "381:                               AP4_UI08                         picture_parameters_completeness);",
          "",
          "---------------"
        ],
        "Source/Python/utils/mp4utils.py||Source/Python/utils/mp4utils.py": [
          "File: Source/Python/utils/mp4utils.py -> Source/Python/utils/mp4utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:         # compute the max segment bitrates",
          "446:         if len(self.segment_bitrates) > 1:",
          "447:             self.max_segment_bitrate = max(self.segment_bitrates[:-1])",
          "449:         # compute the bandwidth",
          "450:         if options.min_buffer_time == 0.0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:         else:",
          "449:             self.max_segment_bitrate = self.average_segment_bitrate",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef2b7910a2acc59eed847c933ea63a1410058e18",
      "candidate_info": {
        "commit_hash": "ef2b7910a2acc59eed847c933ea63a1410058e18",
        "repo": "axiomatic-systems/Bento4",
        "commit_url": "https://github.com/axiomatic-systems/Bento4/commit/ef2b7910a2acc59eed847c933ea63a1410058e18",
        "files": [
          "Source/C++/Core/Ap4AvccAtom.cpp"
        ],
        "message": "fix off by 1",
        "before_after_code_files": [
          "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp"
          ],
          "candidate": [
            "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp"
          ]
        }
      },
      "candidate_diff": {
        "Source/C++/Core/Ap4AvccAtom.cpp||Source/C++/Core/Ap4AvccAtom.cpp": [
          "File: Source/C++/Core/Ap4AvccAtom.cpp -> Source/C++/Core/Ap4AvccAtom.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         if (cursor+2 <= payload_size) {",
          "156:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
          "157:             cursor += 2;",
          "159:                 m_SequenceParameters.Append(AP4_DataBuffer());",
          "160:                 m_SequenceParameters[i].SetData(&payload[cursor], param_length);",
          "161:                 cursor += param_length;",
          "",
          "[Removed Lines]",
          "158:             if (cursor + param_length < payload_size) {",
          "",
          "[Added Lines]",
          "158:             if (cursor + param_length <= payload_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         if (cursor+2 <= payload_size) {",
          "169:             AP4_UI16 param_length = AP4_BytesToInt16BE(&payload[cursor]);",
          "170:             cursor += 2;",
          "172:                 m_PictureParameters.Append(AP4_DataBuffer());",
          "173:                 m_PictureParameters[i].SetData(&payload[cursor], param_length);",
          "174:                 cursor += param_length;",
          "",
          "[Removed Lines]",
          "171:             if (cursor + param_length < payload_size) {",
          "",
          "[Added Lines]",
          "171:             if (cursor + param_length <= payload_size) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}