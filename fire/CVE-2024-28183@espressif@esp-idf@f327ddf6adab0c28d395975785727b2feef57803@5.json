{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b249261f366c93ef756fa02bb7b1d601c939004",
      "candidate_info": {
        "commit_hash": "1b249261f366c93ef756fa02bb7b1d601c939004",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/1b249261f366c93ef756fa02bb7b1d601c939004",
        "files": [
          "components/bt/host/nimble/Kconfig.in"
        ],
        "message": "fix(nimble): Increase range of reattempt connection count",
        "before_after_code_files": [
          "components/bt/host/nimble/Kconfig.in||components/bt/host/nimble/Kconfig.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/nimble/Kconfig.in||components/bt/host/nimble/Kconfig.in": [
          "File: components/bt/host/nimble/Kconfig.in -> components/bt/host/nimble/Kconfig.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: config BT_NIMBLE_MAX_CONN_REATTEMPT",
          "441:     int \"Maximum number connection reattempts\"",
          "443:     default 3",
          "444:     depends on BT_NIMBLE_ENABLED && BT_NIMBLE_ENABLE_CONN_REATTEMPT",
          "445:     help",
          "",
          "[Removed Lines]",
          "442:     range 1 7",
          "",
          "[Added Lines]",
          "442:     range 1 255",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ada7f868bb3108393f4ec898baaf45c2416c8ae",
      "candidate_info": {
        "commit_hash": "8ada7f868bb3108393f4ec898baaf45c2416c8ae",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/8ada7f868bb3108393f4ec898baaf45c2416c8ae",
        "files": [
          "components/bt/host/bluedroid/stack/btu/btu_init.c"
        ],
        "message": "fix(bt/bluedroid): Fixed crash when calculating GATTS database hash",
        "before_after_code_files": [
          "components/bt/host/bluedroid/stack/btu/btu_init.c||components/bt/host/bluedroid/stack/btu/btu_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/stack/btu/btu_init.c||components/bt/host/bluedroid/stack/btu/btu_init.c": [
          "File: components/bt/host/bluedroid/stack/btu/btu_init.c -> components/bt/host/bluedroid/stack/btu/btu_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: #endif",
          "100: #if BLE_INCLUDED == TRUE",
          "104: #if (defined(SMP_INCLUDED) && SMP_INCLUDED == TRUE)",
          "105:     SMP_Init();",
          "106: #endif",
          "107:     btm_ble_init();",
          "108: #endif",
          "",
          "[Removed Lines]",
          "101: #if (defined(GATT_INCLUDED) && GATT_INCLUDED == true)",
          "102:     gatt_init();",
          "103: #endif",
          "",
          "[Added Lines]",
          "103: #endif",
          "104: #if (defined(GATT_INCLUDED) && GATT_INCLUDED == true)",
          "105:     gatt_init();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2cc7980e4d396a3c8d731f45485e73770f50746",
      "candidate_info": {
        "commit_hash": "a2cc7980e4d396a3c8d731f45485e73770f50746",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/a2cc7980e4d396a3c8d731f45485e73770f50746",
        "files": [
          "components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h",
          "components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c"
        ],
        "message": "fix(bt/bluedroid): Fixed \"reprot\" typo in esp_ble_gap_ext_adv_reprot_t",
        "before_after_code_files": [
          "components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h||components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h",
          "components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c||components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h||components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h": [
          "File: components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h -> components/bt/host/bluedroid/api/include/api/esp_gap_ble_api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "899: } esp_ble_gap_ext_adv_reprot_t;",
          "",
          "[Added Lines]",
          "899: } esp_ble_gap_ext_adv_report_t;",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c||components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c": [
          "File: components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c -> components/bt/host/bluedroid/btc/profile/std/gap/btc_gap_ble.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060:             break;",
          "1061:         case BTA_DM_BLE_5_GAP_EXT_ADV_REPORT_EVT:",
          "1062:             msg.act = ESP_GAP_BLE_EXT_ADV_REPORT_EVT;",
          "1064:             if (params->ext_adv_report.adv_data) {",
          "1065:                 memcpy(param.ext_adv_report.params.adv_data,",
          "1066:                     params->ext_adv_report.adv_data, params->ext_adv_report.adv_data_len);",
          "",
          "[Removed Lines]",
          "1063:             memcpy(&param.ext_adv_report.params, &params->ext_adv_report, sizeof(esp_ble_gap_ext_adv_reprot_t));",
          "",
          "[Added Lines]",
          "1063:             memcpy(&param.ext_adv_report.params, &params->ext_adv_report, sizeof(esp_ble_gap_ext_adv_report_t));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64b278f74e0aa0f66c8ec0e413291979581a831b",
      "candidate_info": {
        "commit_hash": "64b278f74e0aa0f66c8ec0e413291979581a831b",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/64b278f74e0aa0f66c8ec0e413291979581a831b",
        "files": [
          "components/bt/host/nimble/Kconfig.in"
        ],
        "message": "fix(nimble): Revise the help section for the Kconfig macro BLE_RPA_TIMEOUT",
        "before_after_code_files": [
          "components/bt/host/nimble/Kconfig.in||components/bt/host/nimble/Kconfig.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/nimble/Kconfig.in||components/bt/host/nimble/Kconfig.in": [
          "File: components/bt/host/nimble/Kconfig.in -> components/bt/host/nimble/Kconfig.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     depends on BT_NIMBLE_ENABLED",
          "305:     default 900",
          "306:     help",
          "310: menuconfig BT_NIMBLE_MESH",
          "311:     bool \"Enable BLE mesh functionality\"",
          "",
          "[Removed Lines]",
          "307:         Time interval between RPA address change. This is applicable in case of",
          "308:         Host based RPA",
          "",
          "[Added Lines]",
          "307:         Time interval between RPA address change.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "009d84cc8f3e987502292b397f68041dff367e99",
      "candidate_info": {
        "commit_hash": "009d84cc8f3e987502292b397f68041dff367e99",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/009d84cc8f3e987502292b397f68041dff367e99",
        "files": [
          "tools/cmake/kconfig.cmake",
          "tools/kconfig_new/menuconfig_wrapper.py"
        ],
        "message": "fix(menuconfig): Prevent Access violation on Windows with Python 3.12\n\nCloses https://github.com/espressif/esp-idf/issues/13232",
        "before_after_code_files": [
          "tools/cmake/kconfig.cmake||tools/cmake/kconfig.cmake",
          "tools/kconfig_new/menuconfig_wrapper.py||tools/kconfig_new/menuconfig_wrapper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/cmake/kconfig.cmake||tools/cmake/kconfig.cmake": [
          "File: tools/cmake/kconfig.cmake -> tools/cmake/kconfig.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:         set(MENUCONFIG_CMD ${mconf})",
          "297:     else()",
          "299:         set(TERM_CHECK_CMD ${python} ${idf_path}/tools/check_term.py)",
          "300:     endif()",
          "",
          "[Removed Lines]",
          "298:         set(MENUCONFIG_CMD ${python} -m menuconfig)",
          "",
          "[Added Lines]",
          "298:         set(MENUCONFIG_CMD ${python} ${idf_path}/tools/kconfig_new/menuconfig_wrapper.py)",
          "",
          "---------------"
        ],
        "tools/kconfig_new/menuconfig_wrapper.py||tools/kconfig_new/menuconfig_wrapper.py": [
          "File: tools/kconfig_new/menuconfig_wrapper.py -> tools/kconfig_new/menuconfig_wrapper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD",
          "2: # SPDX-License-Identifier: Apache-2.0",
          "3: import os",
          "4: import sys",
          "5: from typing import Any",
          "6: from typing import Callable",
          "8: import menuconfig",
          "10: if os.name == 'nt':",
          "11:     import curses",
          "14: def main() -> None:",
          "15:     if os.name == 'nt' and sys.version_info[:2] >= (3, 12):",
          "16:         curses.wrapper = _wrapper  # type: ignore",
          "17:     menuconfig._main()",
          "20: def _wrapper(func: Callable) -> Any:",
          "21:     # Using workaround to address windows-curses bug on Python 3.12",
          "22:     # More info: https://github.com/zephyrproject-rtos/windows-curses/issues/50",
          "23:     # This function is a copy of curses.wrapper with changes commented further in the code",
          "24:     if os.name == 'nt' and sys.version_info[:2] >= (3, 12):",
          "25:         stdscr = None",
          "26:         try:",
          "27:             import _curses",
          "29:             # This crashes on Python 3.12 and needs to be commented out.",
          "30:             # It is not needed for the menuconfig to work, though.",
          "31:             # setupterm(term=_os.environ.get('TERM', 'unknown'),",
          "32:             # fd=_sys.__stdout__.fileno())",
          "33:             stdscr = _curses.initscr()",
          "34:             for key, value in _curses.__dict__.items():",
          "35:                 if key[0:4] == 'ACS_' or key in ('LINES', 'COLS'):",
          "36:                     setattr(curses, key, value)",
          "38:             curses.noecho()",
          "39:             curses.cbreak()",
          "41:             try:",
          "42:                 curses.start_color()",
          "43:             except:  # noqa: E722",
          "44:                 pass",
          "46:             if stdscr is not None:",
          "47:                 stdscr.keypad(True)",
          "48:                 func(stdscr)",
          "49:         finally:",
          "50:             if stdscr is not None:",
          "51:                 stdscr.keypad(False)",
          "52:             curses.echo()",
          "53:             curses.nocbreak()",
          "54:             return curses.endwin()",
          "55:     else:",
          "56:         return curses.wrapper(func)",
          "59: if __name__ == '__main__':",
          "60:     main()",
          "",
          "---------------"
        ]
      }
    }
  ]
}