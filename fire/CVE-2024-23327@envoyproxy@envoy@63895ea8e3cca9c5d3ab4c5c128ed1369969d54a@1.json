{
  "cve_id": "CVE-2024-23327",
  "cve_desc": "Envoy is a high-performance edge/middle/service proxy. When PPv2 is enabled both on a listener and subsequent cluster, the Envoy instance will segfault when attempting to craft the upstream PPv2 header. This occurs when the downstream request has a command type of LOCAL and does not have the protocol block. This issue has been addressed in releases 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
  "patch_info": {
    "commit_hash": "63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/63895ea8e3cca9c5d3ab4c5c128ed1369969d54a",
    "files": [
      "changelogs/current.yaml",
      "source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
      "test/per_file_coverage.sh",
      "tools/spelling/spelling_dictionary.txt"
    ],
    "message": "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\n\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\n\nSigned-off-by: Jacob Neil Taylor <me@jacobtaylor.id.au>\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "before_after_code_files": [
      "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
      "test/per_file_coverage.sh||test/per_file_coverage.sh"
    ]
  },
  "patch_diff": {
    "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc": [
      "File: source/extensions/common/proxy_protocol/proxy_protocol_header.cc -> source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:   }",
      "129:   ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());",
      "130:   const auto& src = *proxy_proto_data.src_addr_->ip();",
      "131:   const auto& dst = *proxy_proto_data.dst_addr_->ip();",
      "132:   generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "130:   if (proxy_proto_data.src_addr_ == nullptr || proxy_proto_data.src_addr_->ip() == nullptr) {",
      "131:     IS_ENVOY_BUG(\"Missing or incorrect source IP in proxy_proto_data_\");",
      "132:     return false;",
      "133:   }",
      "134:   if (proxy_proto_data.dst_addr_ == nullptr || proxy_proto_data.dst_addr_->ip() == nullptr) {",
      "135:     IS_ENVOY_BUG(\"Missing or incorrect dest IP in proxy_proto_data_\");",
      "136:     return false;",
      "137:   }",
      "",
      "---------------"
    ],
    "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
      "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:   if (proxy_protocol_header_.has_value() &&",
      "145:       !cb_->filterState().hasData<Network::ProxyProtocolFilterState>(",
      "146:           Network::ProxyProtocolFilterState::key())) {",
      "149:       ENVOY_LOG(",
      "150:           trace,",
      "152:           proxy_protocol_header_.value().wholeHeaderLength(),",
      "153:           Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()),",
      "154:           proxy_protocol_header_.value().extensions_length_,",
      "155:           Envoy::Hex::encode(buf + proxy_protocol_header_.value().headerLengthWithoutExtension(),",
      "156:                              proxy_protocol_header_.value().extensions_length_));",
      "157:     }",
      "165:   }",
      "167:   if (proxy_protocol_header_.has_value() && !proxy_protocol_header_.value().local_command_) {",
      "",
      "[Removed Lines]",
      "147:     if (!proxy_protocol_header_.value().local_command_) {",
      "148:       auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
      "151:           \"Parsed proxy protocol header, length: {}, buffer: {}, TLV length: {}, TLV buffer: {}\",",
      "159:     cb_->filterState().setData(",
      "160:         Network::ProxyProtocolFilterState::key(),",
      "161:         std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
      "162:             proxy_protocol_header_.value().remote_address_,",
      "163:             proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
      "164:         StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
      "",
      "[Added Lines]",
      "147:     auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
      "148:     if (proxy_protocol_header_.value().local_command_) {",
      "149:       ENVOY_LOG(trace, \"Parsed proxy protocol header, cmd: LOCAL, length: {}, buffer: {}\",",
      "150:                 proxy_protocol_header_.value().wholeHeaderLength(),",
      "151:                 Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()));",
      "153:       cb_->filterState().setData(",
      "154:           Network::ProxyProtocolFilterState::key(),",
      "155:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
      "156:               socket.connectionInfoProvider().remoteAddress(),",
      "157:               socket.connectionInfoProvider().localAddress(), parsed_tlvs_}),",
      "158:           StreamInfo::FilterState::StateType::Mutable,",
      "159:           StreamInfo::FilterState::LifeSpan::Connection);",
      "160:     } else {",
      "163:           \"Parsed proxy protocol header, cmd: PROXY, length: {}, buffer: {}, TLV length: {}, TLV \"",
      "164:           \"buffer: {}\",",
      "170:       cb_->filterState().setData(",
      "171:           Network::ProxyProtocolFilterState::key(),",
      "172:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
      "173:               proxy_protocol_header_.value().remote_address_,",
      "174:               proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
      "175:           StreamInfo::FilterState::StateType::Mutable,",
      "176:           StreamInfo::FilterState::LifeSpan::Connection);",
      "",
      "---------------"
    ],
    "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
      "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "626:   disconnect();",
      "627: }",
      "629: TEST_P(ProxyProtocolTest, V2ShortV4) {",
      "631:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "629: TEST_P(ProxyProtocolTest, V2LocalConnectionFilterState) {",
      "632:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
      "633:                                 0x0a, 0x20, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x0a, 0x0b, 0x0c,",
      "634:                                 0x0d, 'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
      "635:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
      "636:   connect(true, &proto_config);",
      "637:   write(buffer, sizeof(buffer));",
      "638:   expectData(\"moredata\");",
      "640:   auto& filter_state = server_connection_->streamInfo().filterState();",
      "641:   const auto& proxy_proto_data = filter_state",
      "642:                                      ->getDataReadOnly<Network::ProxyProtocolFilterState>(",
      "643:                                          Network::ProxyProtocolFilterState::key())",
      "644:                                      ->value();",
      "646:   if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
      "647:       Envoy::Network::Address::IpVersion::v6) {",
      "648:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"::1\");",
      "649:   } else if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
      "650:              Envoy::Network::Address::IpVersion::v4) {",
      "651:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"127.0.0.1\");",
      "652:   }",
      "653:   EXPECT_FALSE(server_connection_->connectionInfoProvider().localAddressRestored());",
      "654:   disconnect();",
      "655: }",
      "",
      "---------------"
    ],
    "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc": [
      "File: test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc -> test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "640:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
      "641: }",
      "643: } // namespace",
      "644: } // namespace Envoy",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "643: TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2ProxyProtocolPassWithTypeLocal) {",
      "644:   setup(true, {}, {});",
      "645:   initialize();",
      "647:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"listener_0\"));",
      "651:   constexpr uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51,",
      "652:                                      0x55, 0x49, 0x54, 0x0a, 0x20, 0x00, 0x00, 0x00,",
      "653:                                      'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
      "654:   Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));",
      "655:   ASSERT_TRUE(tcp_client->write(buffer.toString()));",
      "656:   ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));",
      "657:   std::string header_start;",
      "661:   if (GetParam() == Envoy::Network::Address::IpVersion::v4) {",
      "662:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
      "663:                          0x21, 0x11, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};",
      "664:     header_start = std::string(data, sizeof(data));",
      "665:   } else {",
      "666:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
      "667:                          0x21, 0x21, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
      "668:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
      "669:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};",
      "670:     header_start = std::string(data, sizeof(data));",
      "671:   }",
      "673:   constexpr absl::string_view more_data(\"moredata\");",
      "674:   const size_t offset = header_start.length() + (2 * sizeof(uint16_t)); // Skip over the ports",
      "675:   std::string observed_data;",
      "676:   ASSERT_TRUE(fake_upstream_connection_->waitForData(offset + more_data.length(), &observed_data));",
      "677:   EXPECT_THAT(observed_data, testing::StartsWith(header_start));",
      "678:   EXPECT_EQ(more_data, absl::string_view(&observed_data[offset], more_data.length()));",
      "680:   tcp_client->close();",
      "681:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
      "682: }",
      "",
      "---------------"
    ],
    "test/per_file_coverage.sh||test/per_file_coverage.sh": [
      "File: test/per_file_coverage.sh -> test/per_file_coverage.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: \"source/exe:90.3\"",
      "25: \"source/extensions/clusters/common:91.5\" # This can be increased again once `#24903` lands",
      "26: \"source/extensions/common:93.0\" #flaky: be careful adjusting",
      "27: \"source/extensions/common/tap:94.5\"",
      "28: \"source/extensions/common/wasm:88.0\" # flaky: be careful adjusting",
      "29: \"source/extensions/common/wasm/ext:92.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: \"source/extensions/common/proxy_protocol:93.8\" # Adjusted for security patch",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1950e57869091078cf8c2af41ea092dc2a1be1f0",
      "candidate_info": {
        "commit_hash": "1950e57869091078cf8c2af41ea092dc2a1be1f0",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/1950e57869091078cf8c2af41ea092dc2a1be1f0",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh",
          "tools/spelling/spelling_dictionary.txt"
        ],
        "message": "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\n\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\n\nSigned-off-by: Jacob Neil Taylor <me@jacobtaylor.id.au>\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh||test/per_file_coverage.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ],
          "candidate": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc": [
          "File: source/extensions/common/proxy_protocol/proxy_protocol_header.cc -> source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());",
          "130:   const auto& src = *proxy_proto_data.src_addr_->ip();",
          "131:   const auto& dst = *proxy_proto_data.dst_addr_->ip();",
          "132:   generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   if (proxy_proto_data.src_addr_ == nullptr || proxy_proto_data.src_addr_->ip() == nullptr) {",
          "131:     IS_ENVOY_BUG(\"Missing or incorrect source IP in proxy_proto_data_\");",
          "132:     return false;",
          "133:   }",
          "134:   if (proxy_proto_data.dst_addr_ == nullptr || proxy_proto_data.dst_addr_->ip() == nullptr) {",
          "135:     IS_ENVOY_BUG(\"Missing or incorrect dest IP in proxy_proto_data_\");",
          "136:     return false;",
          "137:   }",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   if (proxy_protocol_header_.has_value() &&",
          "145:       !cb_->filterState().hasData<Network::ProxyProtocolFilterState>(",
          "146:           Network::ProxyProtocolFilterState::key())) {",
          "149:       ENVOY_LOG(",
          "150:           trace,",
          "152:           proxy_protocol_header_.value().wholeHeaderLength(),",
          "153:           Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()),",
          "154:           proxy_protocol_header_.value().extensions_length_,",
          "155:           Envoy::Hex::encode(buf + proxy_protocol_header_.value().headerLengthWithoutExtension(),",
          "156:                              proxy_protocol_header_.value().extensions_length_));",
          "157:     }",
          "165:   }",
          "167:   if (proxy_protocol_header_.has_value() && !proxy_protocol_header_.value().local_command_) {",
          "",
          "[Removed Lines]",
          "147:     if (!proxy_protocol_header_.value().local_command_) {",
          "148:       auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "151:           \"Parsed proxy protocol header, length: {}, buffer: {}, TLV length: {}, TLV buffer: {}\",",
          "159:     cb_->filterState().setData(",
          "160:         Network::ProxyProtocolFilterState::key(),",
          "161:         std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "162:             proxy_protocol_header_.value().remote_address_,",
          "163:             proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "164:         StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "[Added Lines]",
          "147:     auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "148:     if (proxy_protocol_header_.value().local_command_) {",
          "149:       ENVOY_LOG(trace, \"Parsed proxy protocol header, cmd: LOCAL, length: {}, buffer: {}\",",
          "150:                 proxy_protocol_header_.value().wholeHeaderLength(),",
          "151:                 Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()));",
          "153:       cb_->filterState().setData(",
          "154:           Network::ProxyProtocolFilterState::key(),",
          "155:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "156:               socket.connectionInfoProvider().remoteAddress(),",
          "157:               socket.connectionInfoProvider().localAddress(), parsed_tlvs_}),",
          "158:           StreamInfo::FilterState::StateType::Mutable,",
          "159:           StreamInfo::FilterState::LifeSpan::Connection);",
          "160:     } else {",
          "163:           \"Parsed proxy protocol header, cmd: PROXY, length: {}, buffer: {}, TLV length: {}, TLV \"",
          "164:           \"buffer: {}\",",
          "170:       cb_->filterState().setData(",
          "171:           Network::ProxyProtocolFilterState::key(),",
          "172:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "173:               proxy_protocol_header_.value().remote_address_,",
          "174:               proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "175:           StreamInfo::FilterState::StateType::Mutable,",
          "176:           StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:   disconnect();",
          "624: }",
          "626: TEST_P(ProxyProtocolTest, V2ShortV4) {",
          "628:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: }",
          "626: TEST_P(ProxyProtocolTest, V2LocalConnectionFilterState) {",
          "629:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "630:                                 0x0a, 0x20, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x0a, 0x0b, 0x0c,",
          "631:                                 0x0d, 'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "632:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "633:   connect(true, &proto_config);",
          "634:   write(buffer, sizeof(buffer));",
          "635:   expectData(\"moredata\");",
          "637:   auto& filter_state = server_connection_->streamInfo().filterState();",
          "638:   const auto& proxy_proto_data = filter_state",
          "639:                                      ->getDataReadOnly<Network::ProxyProtocolFilterState>(",
          "640:                                          Network::ProxyProtocolFilterState::key())",
          "641:                                      ->value();",
          "643:   if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "644:       Envoy::Network::Address::IpVersion::v6) {",
          "645:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"::1\");",
          "646:   } else if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "647:              Envoy::Network::Address::IpVersion::v4) {",
          "648:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"127.0.0.1\");",
          "649:   }",
          "650:   EXPECT_FALSE(server_connection_->connectionInfoProvider().localAddressRestored());",
          "651:   disconnect();",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc": [
          "File: test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc -> test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "641: }",
          "643: } // namespace",
          "644: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2ProxyProtocolPassWithTypeLocal) {",
          "644:   setup(true, {}, {});",
          "645:   initialize();",
          "647:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"listener_0\"));",
          "651:   constexpr uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51,",
          "652:                                      0x55, 0x49, 0x54, 0x0a, 0x20, 0x00, 0x00, 0x00,",
          "653:                                      'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "654:   Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));",
          "655:   ASSERT_TRUE(tcp_client->write(buffer.toString()));",
          "656:   ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));",
          "657:   std::string header_start;",
          "661:   if (GetParam() == Envoy::Network::Address::IpVersion::v4) {",
          "662:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "663:                          0x21, 0x11, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};",
          "664:     header_start = std::string(data, sizeof(data));",
          "665:   } else {",
          "666:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "667:                          0x21, 0x21, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "668:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
          "669:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};",
          "670:     header_start = std::string(data, sizeof(data));",
          "671:   }",
          "673:   constexpr absl::string_view more_data(\"moredata\");",
          "674:   const size_t offset = header_start.length() + (2 * sizeof(uint16_t)); // Skip over the ports",
          "675:   std::string observed_data;",
          "676:   ASSERT_TRUE(fake_upstream_connection_->waitForData(offset + more_data.length(), &observed_data));",
          "677:   EXPECT_THAT(observed_data, testing::StartsWith(header_start));",
          "678:   EXPECT_EQ(more_data, absl::string_view(&observed_data[offset], more_data.length()));",
          "680:   tcp_client->close();",
          "681:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "682: }",
          "",
          "---------------"
        ],
        "test/per_file_coverage.sh||test/per_file_coverage.sh": [
          "File: test/per_file_coverage.sh -> test/per_file_coverage.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: \"source/extensions/access_loggers/wasm:93.5\"",
          "28: \"source/extensions/clusters/common:91.5\" # This can be increased again once `#24903` lands",
          "29: \"source/extensions/common:93.0\" #flaky: be careful adjusting",
          "30: \"source/extensions/common/tap:94.5\"",
          "31: \"source/extensions/common/wasm:88.0\" # flaky: be careful adjusting",
          "32: \"source/extensions/common/wasm/ext:92.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: \"source/extensions/common/proxy_protocol:93.8\" # Adjusted for security patch",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6fe0ac50dee481834ff97d569d90876b020f45b",
      "candidate_info": {
        "commit_hash": "c6fe0ac50dee481834ff97d569d90876b020f45b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/c6fe0ac50dee481834ff97d569d90876b020f45b",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh",
          "tools/spelling/spelling_dictionary.txt"
        ],
        "message": "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\n\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\n\nSigned-off-by: Jacob Neil Taylor <me@jacobtaylor.id.au>\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh||test/per_file_coverage.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ],
          "candidate": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc": [
          "File: source/extensions/common/proxy_protocol/proxy_protocol_header.cc -> source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());",
          "130:   const auto& src = *proxy_proto_data.src_addr_->ip();",
          "131:   const auto& dst = *proxy_proto_data.dst_addr_->ip();",
          "132:   generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   if (proxy_proto_data.src_addr_ == nullptr || proxy_proto_data.src_addr_->ip() == nullptr) {",
          "131:     IS_ENVOY_BUG(\"Missing or incorrect source IP in proxy_proto_data_\");",
          "132:     return false;",
          "133:   }",
          "134:   if (proxy_proto_data.dst_addr_ == nullptr || proxy_proto_data.dst_addr_->ip() == nullptr) {",
          "135:     IS_ENVOY_BUG(\"Missing or incorrect dest IP in proxy_proto_data_\");",
          "136:     return false;",
          "137:   }",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   if (proxy_protocol_header_.has_value() &&",
          "145:       !cb_->filterState().hasData<Network::ProxyProtocolFilterState>(",
          "146:           Network::ProxyProtocolFilterState::key())) {",
          "149:       ENVOY_LOG(",
          "150:           trace,",
          "152:           proxy_protocol_header_.value().wholeHeaderLength(),",
          "153:           Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()),",
          "154:           proxy_protocol_header_.value().extensions_length_,",
          "155:           Envoy::Hex::encode(buf + proxy_protocol_header_.value().headerLengthWithoutExtension(),",
          "156:                              proxy_protocol_header_.value().extensions_length_));",
          "157:     }",
          "165:   }",
          "167:   if (proxy_protocol_header_.has_value() && !proxy_protocol_header_.value().local_command_) {",
          "",
          "[Removed Lines]",
          "147:     if (!proxy_protocol_header_.value().local_command_) {",
          "148:       auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "151:           \"Parsed proxy protocol header, length: {}, buffer: {}, TLV length: {}, TLV buffer: {}\",",
          "159:     cb_->filterState().setData(",
          "160:         Network::ProxyProtocolFilterState::key(),",
          "161:         std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "162:             proxy_protocol_header_.value().remote_address_,",
          "163:             proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "164:         StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "[Added Lines]",
          "147:     auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "148:     if (proxy_protocol_header_.value().local_command_) {",
          "149:       ENVOY_LOG(trace, \"Parsed proxy protocol header, cmd: LOCAL, length: {}, buffer: {}\",",
          "150:                 proxy_protocol_header_.value().wholeHeaderLength(),",
          "151:                 Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()));",
          "153:       cb_->filterState().setData(",
          "154:           Network::ProxyProtocolFilterState::key(),",
          "155:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "156:               socket.connectionInfoProvider().remoteAddress(),",
          "157:               socket.connectionInfoProvider().localAddress(), parsed_tlvs_}),",
          "158:           StreamInfo::FilterState::StateType::Mutable,",
          "159:           StreamInfo::FilterState::LifeSpan::Connection);",
          "160:     } else {",
          "163:           \"Parsed proxy protocol header, cmd: PROXY, length: {}, buffer: {}, TLV length: {}, TLV \"",
          "164:           \"buffer: {}\",",
          "170:       cb_->filterState().setData(",
          "171:           Network::ProxyProtocolFilterState::key(),",
          "172:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "173:               proxy_protocol_header_.value().remote_address_,",
          "174:               proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "175:           StreamInfo::FilterState::StateType::Mutable,",
          "176:           StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:   disconnect();",
          "628: }",
          "630: TEST_P(ProxyProtocolTest, V2ShortV4) {",
          "632:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630: TEST_P(ProxyProtocolTest, V2LocalConnectionFilterState) {",
          "633:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "634:                                 0x0a, 0x20, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x0a, 0x0b, 0x0c,",
          "635:                                 0x0d, 'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "636:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "637:   connect(true, &proto_config);",
          "638:   write(buffer, sizeof(buffer));",
          "639:   expectData(\"moredata\");",
          "641:   auto& filter_state = server_connection_->streamInfo().filterState();",
          "642:   const auto& proxy_proto_data = filter_state",
          "643:                                      ->getDataReadOnly<Network::ProxyProtocolFilterState>(",
          "644:                                          Network::ProxyProtocolFilterState::key())",
          "645:                                      ->value();",
          "647:   if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "648:       Envoy::Network::Address::IpVersion::v6) {",
          "649:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"::1\");",
          "650:   } else if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "651:              Envoy::Network::Address::IpVersion::v4) {",
          "652:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"127.0.0.1\");",
          "653:   }",
          "654:   EXPECT_FALSE(server_connection_->connectionInfoProvider().localAddressRestored());",
          "655:   disconnect();",
          "656: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc": [
          "File: test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc -> test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "641: }",
          "643: } // namespace",
          "644: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2ProxyProtocolPassWithTypeLocal) {",
          "644:   setup(true, {}, {});",
          "645:   initialize();",
          "647:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"listener_0\"));",
          "651:   constexpr uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51,",
          "652:                                      0x55, 0x49, 0x54, 0x0a, 0x20, 0x00, 0x00, 0x00,",
          "653:                                      'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "654:   Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));",
          "655:   ASSERT_TRUE(tcp_client->write(buffer.toString()));",
          "656:   ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));",
          "657:   std::string header_start;",
          "661:   if (GetParam() == Envoy::Network::Address::IpVersion::v4) {",
          "662:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "663:                          0x21, 0x11, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};",
          "664:     header_start = std::string(data, sizeof(data));",
          "665:   } else {",
          "666:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "667:                          0x21, 0x21, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "668:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
          "669:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};",
          "670:     header_start = std::string(data, sizeof(data));",
          "671:   }",
          "673:   constexpr absl::string_view more_data(\"moredata\");",
          "674:   const size_t offset = header_start.length() + (2 * sizeof(uint16_t)); // Skip over the ports",
          "675:   std::string observed_data;",
          "676:   ASSERT_TRUE(fake_upstream_connection_->waitForData(offset + more_data.length(), &observed_data));",
          "677:   EXPECT_THAT(observed_data, testing::StartsWith(header_start));",
          "678:   EXPECT_EQ(more_data, absl::string_view(&observed_data[offset], more_data.length()));",
          "680:   tcp_client->close();",
          "681:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "682: }",
          "",
          "---------------"
        ],
        "test/per_file_coverage.sh||test/per_file_coverage.sh": [
          "File: test/per_file_coverage.sh -> test/per_file_coverage.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: \"source/extensions/access_loggers/wasm:93.5\"",
          "30: \"source/extensions/clusters/common:91.5\" # This can be increased again once `#24903` lands",
          "31: \"source/extensions/common:93.0\" #flaky: be careful adjusting",
          "32: \"source/extensions/common/tap:94.2\"",
          "33: \"source/extensions/common/wasm:87.5\" # flaky: be careful adjusting",
          "34: \"source/extensions/common/wasm/ext:92.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: \"source/extensions/common/proxy_protocol:93.8\" # Adjusted for security patch",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ddd4e633ecb24d79f46877c54648bb6bcceec60",
      "candidate_info": {
        "commit_hash": "5ddd4e633ecb24d79f46877c54648bb6bcceec60",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/5ddd4e633ecb24d79f46877c54648bb6bcceec60",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh",
          "tools/spelling/spelling_dictionary.txt"
        ],
        "message": "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\n\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\n\nSigned-off-by: Jacob Neil Taylor <me@jacobtaylor.id.au>\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "test/per_file_coverage.sh||test/per_file_coverage.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ],
          "candidate": [
            "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
            "test/per_file_coverage.sh||test/per_file_coverage.sh"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/common/proxy_protocol/proxy_protocol_header.cc||source/extensions/common/proxy_protocol/proxy_protocol_header.cc": [
          "File: source/extensions/common/proxy_protocol/proxy_protocol_header.cc -> source/extensions/common/proxy_protocol/proxy_protocol_header.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "129:   ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());",
          "130:   const auto& src = *proxy_proto_data.src_addr_->ip();",
          "131:   const auto& dst = *proxy_proto_data.dst_addr_->ip();",
          "132:   generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   if (proxy_proto_data.src_addr_ == nullptr || proxy_proto_data.src_addr_->ip() == nullptr) {",
          "131:     IS_ENVOY_BUG(\"Missing or incorrect source IP in proxy_proto_data_\");",
          "132:     return false;",
          "133:   }",
          "134:   if (proxy_proto_data.dst_addr_ == nullptr || proxy_proto_data.dst_addr_->ip() == nullptr) {",
          "135:     IS_ENVOY_BUG(\"Missing or incorrect dest IP in proxy_proto_data_\");",
          "136:     return false;",
          "137:   }",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   if (proxy_protocol_header_.has_value() &&",
          "145:       !cb_->filterState().hasData<Network::ProxyProtocolFilterState>(",
          "146:           Network::ProxyProtocolFilterState::key())) {",
          "149:       ENVOY_LOG(",
          "150:           trace,",
          "152:           proxy_protocol_header_.value().wholeHeaderLength(),",
          "153:           Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()),",
          "154:           proxy_protocol_header_.value().extensions_length_,",
          "155:           Envoy::Hex::encode(buf + proxy_protocol_header_.value().headerLengthWithoutExtension(),",
          "156:                              proxy_protocol_header_.value().extensions_length_));",
          "157:     }",
          "165:   }",
          "167:   if (proxy_protocol_header_.has_value() && !proxy_protocol_header_.value().local_command_) {",
          "",
          "[Removed Lines]",
          "147:     if (!proxy_protocol_header_.value().local_command_) {",
          "148:       auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "151:           \"Parsed proxy protocol header, length: {}, buffer: {}, TLV length: {}, TLV buffer: {}\",",
          "159:     cb_->filterState().setData(",
          "160:         Network::ProxyProtocolFilterState::key(),",
          "161:         std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "162:             proxy_protocol_header_.value().remote_address_,",
          "163:             proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "164:         StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "[Added Lines]",
          "147:     auto buf = reinterpret_cast<const uint8_t*>(buffer.rawSlice().mem_);",
          "148:     if (proxy_protocol_header_.value().local_command_) {",
          "149:       ENVOY_LOG(trace, \"Parsed proxy protocol header, cmd: LOCAL, length: {}, buffer: {}\",",
          "150:                 proxy_protocol_header_.value().wholeHeaderLength(),",
          "151:                 Envoy::Hex::encode(buf, proxy_protocol_header_.value().wholeHeaderLength()));",
          "153:       cb_->filterState().setData(",
          "154:           Network::ProxyProtocolFilterState::key(),",
          "155:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "156:               socket.connectionInfoProvider().remoteAddress(),",
          "157:               socket.connectionInfoProvider().localAddress(), parsed_tlvs_}),",
          "158:           StreamInfo::FilterState::StateType::Mutable,",
          "159:           StreamInfo::FilterState::LifeSpan::Connection);",
          "160:     } else {",
          "163:           \"Parsed proxy protocol header, cmd: PROXY, length: {}, buffer: {}, TLV length: {}, TLV \"",
          "164:           \"buffer: {}\",",
          "170:       cb_->filterState().setData(",
          "171:           Network::ProxyProtocolFilterState::key(),",
          "172:           std::make_unique<Network::ProxyProtocolFilterState>(Network::ProxyProtocolData{",
          "173:               proxy_protocol_header_.value().remote_address_,",
          "174:               proxy_protocol_header_.value().local_address_, parsed_tlvs_}),",
          "175:           StreamInfo::FilterState::StateType::Mutable,",
          "176:           StreamInfo::FilterState::LifeSpan::Connection);",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:   disconnect();",
          "627: }",
          "629: TEST_P(ProxyProtocolTest, V2ShortV4) {",
          "631:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: TEST_P(ProxyProtocolTest, V2LocalConnectionFilterState) {",
          "632:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "633:                                 0x0a, 0x20, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x0a, 0x0b, 0x0c,",
          "634:                                 0x0d, 'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "635:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "636:   connect(true, &proto_config);",
          "637:   write(buffer, sizeof(buffer));",
          "638:   expectData(\"moredata\");",
          "640:   auto& filter_state = server_connection_->streamInfo().filterState();",
          "641:   const auto& proxy_proto_data = filter_state",
          "642:                                      ->getDataReadOnly<Network::ProxyProtocolFilterState>(",
          "643:                                          Network::ProxyProtocolFilterState::key())",
          "644:                                      ->value();",
          "646:   if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "647:       Envoy::Network::Address::IpVersion::v6) {",
          "648:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"::1\");",
          "649:   } else if (server_connection_->connectionInfoProvider().remoteAddress()->ip()->version() ==",
          "650:              Envoy::Network::Address::IpVersion::v4) {",
          "651:     EXPECT_EQ(proxy_proto_data.dst_addr_->ip()->addressAsString(), \"127.0.0.1\");",
          "652:   }",
          "653:   EXPECT_FALSE(server_connection_->connectionInfoProvider().localAddressRestored());",
          "654:   disconnect();",
          "655: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc||test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc": [
          "File: test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc -> test/extensions/transport_sockets/proxy_protocol/proxy_protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "641: }",
          "643: } // namespace",
          "644: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2ProxyProtocolPassWithTypeLocal) {",
          "644:   setup(true, {}, {});",
          "645:   initialize();",
          "647:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"listener_0\"));",
          "651:   constexpr uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51,",
          "652:                                      0x55, 0x49, 0x54, 0x0a, 0x20, 0x00, 0x00, 0x00,",
          "653:                                      'm',  'o',  'r',  'e',  'd',  'a',  't',  'a'};",
          "654:   Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));",
          "655:   ASSERT_TRUE(tcp_client->write(buffer.toString()));",
          "656:   ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));",
          "657:   std::string header_start;",
          "661:   if (GetParam() == Envoy::Network::Address::IpVersion::v4) {",
          "662:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "663:                          0x21, 0x11, 0x00, 0x0c, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};",
          "664:     header_start = std::string(data, sizeof(data));",
          "665:   } else {",
          "666:     const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,",
          "667:                          0x21, 0x21, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "668:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,",
          "669:                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};",
          "670:     header_start = std::string(data, sizeof(data));",
          "671:   }",
          "673:   constexpr absl::string_view more_data(\"moredata\");",
          "674:   const size_t offset = header_start.length() + (2 * sizeof(uint16_t)); // Skip over the ports",
          "675:   std::string observed_data;",
          "676:   ASSERT_TRUE(fake_upstream_connection_->waitForData(offset + more_data.length(), &observed_data));",
          "677:   EXPECT_THAT(observed_data, testing::StartsWith(header_start));",
          "678:   EXPECT_EQ(more_data, absl::string_view(&observed_data[offset], more_data.length()));",
          "680:   tcp_client->close();",
          "681:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "682: }",
          "",
          "---------------"
        ],
        "test/per_file_coverage.sh||test/per_file_coverage.sh": [
          "File: test/per_file_coverage.sh -> test/per_file_coverage.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: \"source/exe:90.3\"",
          "25: \"source/extensions/clusters/common:91.5\" # This can be increased again once `#24903` lands",
          "26: \"source/extensions/common:93.0\" #flaky: be careful adjusting",
          "27: \"source/extensions/common/tap:94.5\"",
          "28: \"source/extensions/common/wasm:88.0\" # flaky: be careful adjusting",
          "29: \"source/extensions/common/wasm/ext:92.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: \"source/extensions/common/proxy_protocol:93.8\" # Adjusted for security patch",
          "",
          "---------------"
        ]
      }
    }
  ]
}