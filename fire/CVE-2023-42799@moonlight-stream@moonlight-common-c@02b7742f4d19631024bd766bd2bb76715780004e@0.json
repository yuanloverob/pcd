{
  "cve_id": "CVE-2023-42799",
  "cve_desc": "Moonlight-common-c contains the core GameStream client code shared between Moonlight clients. Moonlight-common-c is vulnerable to buffer overflow starting in commit 50c0a51b10ecc5b3415ea78c21d96d679e2288f9 due to unmitigated usage of unsafe C functions and improper bounds checking. A malicious game streaming server could exploit a buffer overflow vulnerability to crash a moonlight client, or achieve remote code execution (RCE) on the client (with insufficient exploit mitigations or if mitigations can be bypassed). The bug was addressed in commit 02b7742f4d19631024bd766bd2bb76715780004e.",
  "repo": "moonlight-stream/moonlight-common-c",
  "patch_hash": "02b7742f4d19631024bd766bd2bb76715780004e",
  "patch_info": {
    "commit_hash": "02b7742f4d19631024bd766bd2bb76715780004e",
    "repo": "moonlight-stream/moonlight-common-c",
    "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/02b7742f4d19631024bd766bd2bb76715780004e",
    "files": [
      "src/RtspConnection.c"
    ],
    "message": "Fix buffer overflow in parseUrlAddrFromRtspUrlString (CVE-2023-42799)",
    "before_after_code_files": [
      "src/RtspConnection.c||src/RtspConnection.c"
    ]
  },
  "patch_diff": {
    "src/RtspConnection.c||src/RtspConnection.c": [
      "File: src/RtspConnection.c -> src/RtspConnection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "657:     return 0;",
      "658: }",
      "661:     char* rtspUrlScratchBuffer;",
      "662:     char* portSeparator;",
      "663:     char* v6EscapeEndChar;",
      "",
      "[Removed Lines]",
      "660: static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination) {",
      "",
      "[Added Lines]",
      "660: static bool parseUrlAddrFromRtspUrlString(const char* rtspUrlString, char* destination, size_t destinationLength) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "702:     }",
      "706:     free(rtspUrlScratchBuffer);",
      "707:     return true;",
      "",
      "[Removed Lines]",
      "704:     strcpy(destination, rtspUrlScratchBuffer + prefixLen);",
      "",
      "[Added Lines]",
      "704:     PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen);",
      "705:     destination[destinationLength - 1] = '\\0';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "774:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
      "775:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
      "778:             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);",
      "779:         }",
      "780:         else {",
      "",
      "[Removed Lines]",
      "777:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {",
      "",
      "[Added Lines]",
      "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "786:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
      "788:         }",
      "789:     }",
      "790:     else {",
      "791:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
      "793:     }",
      "795:     switch (AppVersionQuad[0]) {",
      "",
      "[Removed Lines]",
      "787:             sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "792:         sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "",
      "[Added Lines]",
      "788:    snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "793:   snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b84d17c8d34e76d2531c6695d61349776474df2",
      "candidate_info": {
        "commit_hash": "8b84d17c8d34e76d2531c6695d61349776474df2",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/8b84d17c8d34e76d2531c6695d61349776474df2",
        "files": [
          "src/Platform.c",
          "src/Platform.h",
          "src/PlatformSockets.c",
          "src/PlatformSockets.h",
          "src/RtspConnection.c",
          "src/SdpGenerator.c",
          "src/SimpleStun.c"
        ],
        "message": "Replace additional unsafe string functions",
        "before_after_code_files": [
          "src/Platform.c||src/Platform.c",
          "src/Platform.h||src/Platform.h",
          "src/PlatformSockets.c||src/PlatformSockets.c",
          "src/PlatformSockets.h||src/PlatformSockets.h",
          "src/RtspConnection.c||src/RtspConnection.c",
          "src/SdpGenerator.c||src/SdpGenerator.c",
          "src/SimpleStun.c||src/SimpleStun.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/Platform.c||src/Platform.c": [
          "File: src/Platform.c -> src/Platform.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411: #endif",
          "412: }",
          "414: int initializePlatform(void) {",
          "415:     int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414: bool PltSafeStrcpy(char* dest, size_t dest_size, const char* src) {",
          "415:     LC_ASSERT(dest_size > 0);",
          "417: #ifdef LC_DEBUG",
          "420:     memset(dest, 0xFE, dest_size);",
          "421: #endif",
          "423: #ifdef _MSC_VER",
          "427:     if (strncpy_s(dest, dest_size, src, _TRUNCATE) != 0) {",
          "428:         LC_ASSERT(false);",
          "429:         dest[0] = 0;",
          "430:         return false;",
          "431:     }",
          "432: #else",
          "436:     if (strlen(src) >= dest_size) {",
          "437:         LC_ASSERT(false);",
          "438:         dest[0] = 0;",
          "439:         return false;",
          "440:     }",
          "442:     strcpy(dest, src);",
          "443: #endif",
          "445:     return true;",
          "446: }",
          "",
          "---------------"
        ],
        "src/Platform.h||src/Platform.h": [
          "File: src/Platform.h -> src/Platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: void cleanupPlatform(void);",
          "130: uint64_t PltGetMillis(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: bool PltSafeStrcpy(char* dest, size_t dest_size, const char* src);",
          "",
          "---------------"
        ],
        "src/PlatformSockets.c||src/PlatformSockets.c": [
          "File: src/PlatformSockets.c -> src/PlatformSockets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #endif",
          "37: {",
          "38:     char addrstr[URLSAFESTRING_LEN];",
          "",
          "[Removed Lines]",
          "36: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string)",
          "",
          "[Added Lines]",
          "36: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string, size_t stringLength)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         inet_ntop(addr->ss_family, &sin6->sin6_addr, addrstr, sizeof(addrstr));",
          "47:     }",
          "48:     else",
          "49: #endif",
          "",
          "[Removed Lines]",
          "46:         sprintf(string, \"[%s]\", addrstr);",
          "",
          "[Added Lines]",
          "46:         snprintf(string, stringLength, \"[%s]\", addrstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:         inet_ntop(addr->ss_family, &sin->sin_addr, addrstr, sizeof(addrstr));",
          "56:     }",
          "57: }",
          "",
          "[Removed Lines]",
          "55:         sprintf(string, \"%s\", addrstr);",
          "",
          "[Added Lines]",
          "55:         snprintf(string, stringLength, \"%s\", addrstr);",
          "",
          "---------------"
        ],
        "src/PlatformSockets.h||src/PlatformSockets.h": [
          "File: src/PlatformSockets.h -> src/PlatformSockets.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #else",
          "83: #define URLSAFESTRING_LEN INET_ADDRSTRLEN",
          "84: #endif",
          "87: SOCKET createSocket(int addressFamily, int socketType, int protocol, bool nonBlocking);",
          "88: SOCKET connectTcpSocket(struct sockaddr_storage* dstaddr, SOCKADDR_LEN addrlen, unsigned short port, int timeoutSec);",
          "",
          "[Removed Lines]",
          "85: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string);",
          "",
          "[Added Lines]",
          "85: void addrToUrlSafeString(struct sockaddr_storage* addr, char* string, size_t stringLength);",
          "",
          "---------------"
        ],
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     createRtspRequest(msg, NULL, 0, command, target, \"RTSP/1.0\",",
          "73:         0, NULL, NULL, 0);",
          "77:     if (!addOption(msg, \"CSeq\", sequenceNumberStr) ||",
          "78:         !addOption(msg, \"X-GS-ClientVersion\", clientVersionStr) ||",
          "79:         (!useEnet && !addOption(msg, \"Host\", urlAddr))) {",
          "",
          "[Removed Lines]",
          "75:     sprintf(sequenceNumberStr, \"%d\", currentSeqNumber++);",
          "76:     sprintf(clientVersionStr, \"%d\", rtspClientVersion);",
          "",
          "[Added Lines]",
          "75:     snprintf(sequenceNumberStr, sizeof(sequenceNumberStr), \"%d\", currentSeqNumber++);",
          "76:     snprintf(clientVersionStr, sizeof(clientVersionStr), \"%d\", rtspClientVersion);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:         request.flags |= FLAG_ALLOCATED_PAYLOAD;",
          "479:         request.payloadLength = payloadLength;",
          "482:         if (!addOption(&request, \"Content-length\", payloadLengthStr)) {",
          "483:             goto FreeMessage;",
          "484:         }",
          "",
          "[Removed Lines]",
          "481:         sprintf(payloadLengthStr, \"%d\", payloadLength);",
          "",
          "[Added Lines]",
          "481:         snprintf(payloadLengthStr, sizeof(payloadLengthStr), \"%d\", payloadLength);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "582:         channelCount = CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration);",
          "586:         paramStart = strstr(response->payload, paramsPrefix);",
          "587:         if (paramStart) {",
          "",
          "[Removed Lines]",
          "585:         sprintf(paramsPrefix, \"a=fmtp:97 surround-params=%d\", channelCount);",
          "",
          "[Added Lines]",
          "585:         snprintf(paramsPrefix, sizeof(paramsPrefix), \"a=fmtp:97 surround-params=%d\", channelCount);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:             sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "806:         }",
          "807:     }",
          "808:     else {",
          "810:         sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "811:     }",
          "",
          "[Removed Lines]",
          "804:             addrToUrlSafeString(&RemoteAddr, urlAddr);",
          "809:         strcpy(urlAddr, \"0.0.0.0\");",
          "",
          "[Added Lines]",
          "804:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
          "809:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
          "",
          "---------------"
        ],
        "src/SdpGenerator.c||src/SdpGenerator.c": [
          "File: src/SdpGenerator.c -> src/SdpGenerator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         return -1;",
          "92:     }",
          "94:     option->next = NULL;",
          "95:     option->payloadLen = payloadLen;",
          "98:     option->payload = (void*)(option + 1);",
          "99:     memcpy(option->payload, payload, payloadLen);",
          "",
          "[Removed Lines]",
          "96:     strncpy(option->name, name, sizeof(option->name));",
          "97:     option->name[sizeof(option->name) - 1] = '\\0';",
          "",
          "[Added Lines]",
          "94:     if (!PltSafeStrcpy(option->name, sizeof(option->name), name)) {",
          "95:         free(option);",
          "96:         return -1;",
          "97:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:     char* payload;",
          "526:     char urlSafeAddr[URLSAFESTRING_LEN];",
          "530:     attributeList = getAttributesList(urlSafeAddr);",
          "531:     if (attributeList == NULL) {",
          "",
          "[Removed Lines]",
          "528:     addrToUrlSafeString(&RemoteAddr, urlSafeAddr);",
          "",
          "[Added Lines]",
          "531:     addrToUrlSafeString(&RemoteAddr, urlSafeAddr, sizeof(urlSafeAddr));",
          "",
          "---------------"
        ],
        "src/SimpleStun.c||src/SimpleStun.c": [
          "File: src/SimpleStun.c -> src/SimpleStun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     hints.ai_protocol = IPPROTO_UDP;",
          "66:     hints.ai_flags = AI_ADDRCONFIG;",
          "69:     err = getaddrinfo(stunServer, stunPortStr, &hints, &stunAddrs);",
          "70:     if (err != 0 || stunAddrs == NULL) {",
          "71:         Limelog(\"Failed to resolve STUN server: %d\\n\", err);",
          "",
          "[Removed Lines]",
          "68:     sprintf(stunPortStr, \"%u\", stunPort);",
          "",
          "[Added Lines]",
          "68:     snprintf(stunPortStr, sizeof(stunPortStr), \"%u\", stunPort);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24750d4b748fefa03d09fcfd6d45056faca354e0",
      "candidate_info": {
        "commit_hash": "24750d4b748fefa03d09fcfd6d45056faca354e0",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/24750d4b748fefa03d09fcfd6d45056faca354e0",
        "files": [
          "src/RtspConnection.c"
        ],
        "message": "Fix buffer overflow in performRtspHandshake (CVE-2023-42800)",
        "before_after_code_files": [
          "src/RtspConnection.c||src/RtspConnection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
          "780:         }",
          "781:         else {",
          "",
          "[Removed Lines]",
          "779:             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);",
          "",
          "[Added Lines]",
          "779:             PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl);",
          "780:             rtspTargetUrl[sizeof(rtspTargetUrl) - 1] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
      "candidate_info": {
        "commit_hash": "1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
        "repo": "moonlight-stream/moonlight-common-c",
        "commit_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/1351f382aa2d4da54ce93717b2c772ec8af5a6ec",
        "files": [
          "src/RtspConnection.c"
        ],
        "message": "Minor cleanups to RTSP URL parsing",
        "before_after_code_files": [
          "src/RtspConnection.c||src/RtspConnection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ],
          "candidate": [
            "src/RtspConnection.c||src/RtspConnection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/RtspConnection.c||src/RtspConnection.c": [
          "File: src/RtspConnection.c -> src/RtspConnection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     }",
          "707:     free(rtspUrlScratchBuffer);",
          "708:     return true;",
          "",
          "[Removed Lines]",
          "704:     PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen);",
          "705:     destination[destinationLength - 1] = '\\0';",
          "",
          "[Added Lines]",
          "704:     if (!PltSafeStrcpy(destination, destinationLength, rtspUrlScratchBuffer + prefixLen)) {",
          "705:         free(rtspUrlScratchBuffer);",
          "706:         return false;",
          "707:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "774:     if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&",
          "775:             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&",
          "776:             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {",
          "788:             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));",
          "790:         }",
          "791:     }",
          "792:     else {",
          "793:         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");",
          "795:     }",
          "797:     switch (AppVersionQuad[0]) {",
          "",
          "[Removed Lines]",
          "778:         if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
          "779:             PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl);",
          "780:             rtspTargetUrl[sizeof(rtspTargetUrl) - 1] = '\\0';",
          "781:         }",
          "782:         else {",
          "789:    snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "794:   snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "[Added Lines]",
          "780:         if (serverInfo->rtspSessionUrl == NULL ||",
          "781:                 !parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr)) ||",
          "782:                 !PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl)) {",
          "789:             snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "794:         snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
          "",
          "---------------"
        ]
      }
    }
  ]
}