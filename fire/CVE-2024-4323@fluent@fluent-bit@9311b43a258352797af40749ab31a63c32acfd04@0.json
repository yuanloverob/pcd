{
  "cve_id": "CVE-2024-4323",
  "cve_desc": "A memory corruption vulnerability in Fluent Bit versions 2.0.7 thru 3.0.3. This issue lies in the embedded http server\u2019s parsing of trace requests and may result in denial of service conditions, information disclosure, or remote code execution.",
  "repo": "fluent/fluent-bit",
  "patch_hash": "9311b43a258352797af40749ab31a63c32acfd04",
  "patch_info": {
    "commit_hash": "9311b43a258352797af40749ab31a63c32acfd04",
    "repo": "fluent/fluent-bit",
    "commit_url": "https://github.com/fluent/fluent-bit/commit/9311b43a258352797af40749ab31a63c32acfd04",
    "files": [
      "src/http_server/api/v1/trace.c"
    ],
    "message": "Merge pull request from GHSA-5rjf-prwh-pp7q\n\n* api/v1/traces: validate inputs when enabling traces.\n\nvalidate the array of inputs when enabling multiple traces that\nthey are strings.\n\nthis patch also refactors out the allocation of said input name.\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\n\n* api/v1/traces: disable traces api when tracing is disabled.\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\n\n* api/v1/trace: use macros for strings and lengths in responses.\n\navoid strlen when creating http response, especially in loops,\nby predefining them via macros.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/trace: use sizeof for string length macros.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/trace: use signed lenghts for strings.\n\nthis avoid potential integer overflows when using them as\nspecifiers for format strings.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: use macro for inputs string.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: use sizeof when comparing against base path.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: replace strlen with flb_sds_len when using flb_sds_t.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n---------\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\nSigned-off-by: Phillip Whelan <phil@calyptia.com>",
    "before_after_code_files": [
      "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
    ]
  },
  "patch_diff": {
    "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c": [
      "File: src/http_server/api/v1/trace.c -> src/http_server/api/v1/trace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <fluent-bit/flb_utils.h>",
      "31: #include <msgpack.h>",
      "35: {",
      "36:     struct mk_list *head;",
      "37:     struct flb_input_instance *in;",
      "",
      "[Removed Lines]",
      "34: static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name)",
      "",
      "[Added Lines]",
      "33: #define STR_INPUTS \"inputs\"",
      "34: #define STR_INPUTS_LEN (sizeof(STR_INPUTS)-1)",
      "36: #define HTTP_FIELD_MESSAGE        \"message\"",
      "37: #define HTTP_FIELD_MESSAGE_LEN    (sizeof(HTTP_FIELD_MESSAGE)-1)",
      "38: #define HTTP_FIELD_STATUS         \"status\"",
      "39: #define HTTP_FIELD_STATUS_LEN     (sizeof(HTTP_FIELD_STATUS)-1)",
      "40: #define HTTP_FIELD_RETURNCODE     \"returncode\"",
      "41: #define HTTP_FIELD_RETURNCODE_LEN (sizeof(HTTP_FIELD_RETURNCODE)-1)",
      "43: #define HTTP_RESULT_OK                   \"ok\"",
      "44: #define HTTP_RESULT_OK_LEN               (sizeof(HTTP_RESULT_OK)-1)",
      "45: #define HTTP_RESULT_ERROR                \"error\"",
      "46: #define HTTP_RESULT_ERROR_LEN            (sizeof(HTTP_RESULT_ERROR)-1)",
      "47: #define HTTP_RESULT_NOTFOUND             \"not found\"",
      "48: #define HTTP_RESULT_NOTFOUND_LEN         (sizeof(HTTP_RESULT_NOTFOUND)-1)",
      "49: #define HTTP_RESULT_METHODNOTALLOWED     \"method not allowed\"",
      "50: #define HTTP_RESULT_METHODNOTALLOWED_LEN (sizeof(HTTP_RESULT_METHODNOTALLOWED)-1)",
      "51: #define HTTP_RESULT_UNKNOWNERROR         \"unknown error\"",
      "52: #define HTTP_RESULT_UNKNOWNERROR_LEN     (sizeof(HTTP_RESULT_UNKNOWNERROR)-1)",
      "54: static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name, size_t nlen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:     mk_list_foreach(head, &hs->config->inputs) {",
      "41:         in = mk_list_entry(head, struct flb_input_instance, _head);",
      "43:             return in;",
      "44:         }",
      "45:         if (in->alias) {",
      "",
      "[Removed Lines]",
      "42:         if (strcmp(name, in->name) == 0) {",
      "",
      "[Added Lines]",
      "62:         if (strlen(in->name) != nlen) {",
      "63:             continue;",
      "64:         }",
      "65:         if (strncmp(name, in->name, nlen) == 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "51:     return NULL;",
      "52: }",
      "55: {",
      "56:     struct flb_input_instance *in;",
      "60:     if (in == NULL) {",
      "61:         return 404;",
      "62:     }",
      "64:     flb_chunk_trace_context_new(in, output_name, prefix, NULL, props);",
      "66: }",
      "69: {",
      "70:     struct flb_input_instance *in;",
      "74:     if (in == NULL) {",
      "75:         return 404;",
      "76:     }",
      "",
      "[Removed Lines]",
      "54: static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props)",
      "59:     in = find_input(hs, name);",
      "65:     return (in->chunk_trace_ctxt == NULL ? 503 : 0);",
      "68: static int disable_trace_input(struct flb_hs *hs, const char *name)",
      "73:     in = find_input(hs, name);",
      "",
      "[Added Lines]",
      "77: static int enable_trace_input(struct flb_hs *hs, const char *name, ssize_t nlen, const char *prefix,",
      "78:                               const char *output_name, struct mk_list *props)",
      "82:     in = find_input(hs, name, nlen);",
      "84:         flb_error(\"unable to find input: [%d]%.*s\", (int)nlen, (int)nlen, name);",
      "90:     if (in->chunk_trace_ctxt == NULL) {",
      "91:         flb_error(\"unable to start tracing\");",
      "92:         return 503;",
      "93:     }",
      "95:     return 0;",
      "98: static int disable_trace_input(struct flb_hs *hs, const char *name, size_t nlen)",
      "103:     in = find_input(hs, name, nlen);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:     if (request->real_path.data == NULL) {",
      "90:         return NULL;",
      "91:     }",
      "93:         return NULL;",
      "94:     }",
      "98: }",
      "101: {",
      "102:     struct flb_hs *hs = data;",
      "103:     int toggled_on = 503;",
      "107:     if (toggled_on < 300) {",
      "108:         msgpack_pack_map(mp_pck, 1);",
      "111:         return 201;",
      "112:     }",
      "114:     return toggled_on;",
      "115: }",
      "118: {",
      "119:     int ret = -1;",
      "120:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (request->real_path.len < strlen(base)) {",
      "96:     return flb_sds_create_len(&request->real_path.data[strlen(base)],",
      "97:                               request->real_path.len - strlen(base));",
      "100: static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
      "106:     toggled_on = disable_trace_input(hs, input_name);",
      "109:         msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
      "110:         msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
      "117: static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name)",
      "",
      "[Added Lines]",
      "122:     if (request->real_path.len < sizeof(base)-1) {",
      "126:     return flb_sds_create_len(&request->real_path.data[sizeof(base)-1],",
      "127:                               request->real_path.len - sizeof(base)-1);",
      "130: static int http_disable_trace(mk_request_t *request, void *data,",
      "131:                               const char *input_name, size_t input_nlen,",
      "132:                               msgpack_packer *mp_pck)",
      "138:     toggled_on = disable_trace_input(hs, input_name, input_nlen);",
      "141:         msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "142:         msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "149: static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result,",
      "150:                                        const char *input_name, ssize_t input_nlen)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "130:     msgpack_object_str *param_val;",
      "134:         for (i = 0; i < result->data.via.map.size; i++) {",
      "135:             key = &result->data.via.map.ptr[i].key;",
      "136:             val = &result->data.via.map.ptr[i].val;",
      "138:             if (key->type != MSGPACK_OBJECT_STR) {",
      "139:                 ret = -1;",
      "140:                 goto parse_error;",
      "",
      "[Removed Lines]",
      "133:     if (result->data.type == MSGPACK_OBJECT_MAP) {",
      "",
      "[Added Lines]",
      "166:     if (result->data.type == MSGPACK_OBJECT_MAP) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "193:             output_name = flb_sds_create(\"stdout\");",
      "194:         }",
      "197:         if (!toggled_on) {",
      "198:             ret = -1;",
      "199:             goto parse_error;",
      "",
      "[Removed Lines]",
      "196:         toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);",
      "",
      "[Added Lines]",
      "229:         toggled_on = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "210:     return ret;",
      "211: }",
      "214: {",
      "215:     char *buf = NULL;",
      "216:     size_t buf_size;",
      "",
      "[Removed Lines]",
      "213: static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
      "",
      "[Added Lines]",
      "246: static int http_enable_trace(mk_request_t *request, void *data,",
      "247:                              const char *input_name, ssize_t input_nlen,",
      "248:                              msgpack_packer *mp_pck)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "229:     struct mk_list *props = NULL;",
      "230:     struct flb_chunk_trace_limit limit = { 0 };",
      "231:     struct flb_input_instance *input_instance;",
      "234:     if (request->method == MK_METHOD_GET) {",
      "236:         if (ret == 0) {",
      "237:                 msgpack_pack_map(mp_pck, 1);",
      "240:                 return 200;",
      "241:         }",
      "242:         else {",
      "244:             goto input_error;",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "235:         ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);",
      "238:                 msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
      "239:                 msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
      "243:             flb_error(\"unable to enable tracing for %s\", input_name);",
      "",
      "[Added Lines]",
      "270:         ret = enable_trace_input(hs, input_name, input_nlen, \"trace.\", \"stdout\", NULL);",
      "273:                 msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "274:                 msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "278:             flb_error(\"unable to enable tracing for %.*s\", (int)input_nlen, input_name);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "257:     rc = msgpack_unpack_next(&result, buf, buf_size, &off);",
      "258:     if (rc != MSGPACK_UNPACK_SUCCESS) {",
      "259:         ret = 503;",
      "261:         goto unpack_error;",
      "262:     }",
      "",
      "[Removed Lines]",
      "260:         flb_error(\"unable to unpack msgpack parameters for %s\", input_name);",
      "",
      "[Added Lines]",
      "295:         flb_error(\"unable to unpack msgpack parameters for %.*s\", (int)input_nlen, input_name);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "359:             output_name = flb_sds_create(\"stdout\");",
      "360:         }",
      "363:         if (ret != 0) {",
      "364:             flb_error(\"error when enabling tracing\");",
      "365:             goto parse_error;",
      "366:         }",
      "368:         if (limit.type != 0) {",
      "370:             if (limit.type == FLB_CHUNK_TRACE_LIMIT_TIME) {",
      "371:                 flb_chunk_trace_context_set_limit(input_instance->chunk_trace_ctxt, limit.type, limit.seconds);",
      "372:             }",
      "",
      "[Removed Lines]",
      "362:         ret = enable_trace_input(hs, input_name, prefix, output_name, props);",
      "369:             input_instance = find_input(hs, input_name);",
      "",
      "[Added Lines]",
      "397:         ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);",
      "404:             input_instance = find_input(hs, input_name, input_nlen);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "377:     }",
      "379:     msgpack_pack_map(mp_pck, 1);",
      "383:     ret = 200;",
      "384: parse_error:",
      "",
      "[Removed Lines]",
      "380:     msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
      "381:     msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
      "",
      "[Added Lines]",
      "415:     msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "416:     msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "417:     }",
      "419:     if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {",
      "421:     }",
      "422:     else if (request->method == MK_METHOD_DELETE) {",
      "424:     }",
      "425: error:",
      "426:     if (response == 404) {",
      "427:         msgpack_pack_map(&mp_pck, 1);",
      "430:     }",
      "431:     else if (response == 503) {",
      "432:         msgpack_pack_map(&mp_pck, 1);",
      "435:     }",
      "437:     if (input_name != NULL) {",
      "",
      "[Removed Lines]",
      "420:         response = http_enable_trace(request, data, input_name, &mp_pck);",
      "423:         response = http_disable_trace(request, data, input_name, &mp_pck);",
      "428:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "429:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
      "433:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "434:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
      "",
      "[Added Lines]",
      "455:         response = http_enable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);",
      "458:         response = http_disable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);",
      "463:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "464:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);",
      "468:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "469:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "466:     msgpack_unpacked result;",
      "467:     flb_sds_t error_msg = NULL;",
      "468:     int response = 200;",
      "470:     msgpack_object_array *inputs = NULL;",
      "471:     size_t off = 0;",
      "472:     int i;",
      "476:     msgpack_sbuffer_init(&mp_sbuf);",
      "",
      "[Removed Lines]",
      "469:     flb_sds_t input_name;",
      "",
      "[Added Lines]",
      "504:     const char *input_name;",
      "505:     ssize_t input_nlen;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "503:         if (result.data.via.map.ptr[i].key.type != MSGPACK_OBJECT_STR) {",
      "504:             continue;",
      "505:         }",
      "507:             continue;",
      "508:         }",
      "510:             continue;",
      "511:         }",
      "512:         inputs = &result.data.via.map.ptr[i].val.via.array;",
      "",
      "[Removed Lines]",
      "506:         if (result.data.via.map.ptr[i].key.via.str.size < strlen(\"inputs\")) {",
      "509:         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, \"inputs\", strlen(\"inputs\"))) {",
      "",
      "[Added Lines]",
      "541:         if (result.data.via.map.ptr[i].key.via.str.size < STR_INPUTS_LEN) {",
      "544:         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_INPUTS, STR_INPUTS_LEN)) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "517:         error_msg = flb_sds_create(\"inputs not found\");",
      "518:         goto unpack_error;",
      "519:     }",
      "521:     msgpack_pack_map(&mp_pck, 2);",
      "524:     msgpack_pack_map(&mp_pck, inputs->size);",
      "526:     for (i = 0; i < inputs->size; i++) {",
      "534:         }",
      "553:             }",
      "554:             else {",
      "560:             }",
      "561:         }",
      "562:     }",
      "564:     msgpack_pack_str_with_body(&mp_pck, \"result\", strlen(\"result\"));",
      "",
      "[Removed Lines]",
      "523:     msgpack_pack_str_with_body(&mp_pck, \"inputs\", strlen(\"inputs\"));",
      "527:         input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);",
      "528:         msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));",
      "530:         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {",
      "531:             msgpack_pack_map(&mp_pck, 1);",
      "532:             msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "533:             msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
      "535:         else {",
      "536:             if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {",
      "537:                 ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);",
      "538:                 if (ret != 0) {",
      "539:                     msgpack_pack_map(&mp_pck, 2);",
      "540:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "541:                     msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
      "542:                     msgpack_pack_str_with_body(&mp_pck, \"returncode\", strlen(\"returncode\"));",
      "543:                     msgpack_pack_int64(&mp_pck, ret);",
      "544:                 }",
      "545:                 else {",
      "546:                     msgpack_pack_map(&mp_pck, 1);",
      "547:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "548:                     msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
      "549:                 }",
      "550:             }",
      "551:             else if (request->method == MK_METHOD_DELETE) {",
      "552:                 disable_trace_input((struct flb_hs *)data, input_name);",
      "555:                 msgpack_pack_map(&mp_pck, 2);",
      "556:                 msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "557:                 msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
      "558:                 msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
      "559:                 msgpack_pack_str_with_body(&mp_pck, \"method not allowed\", strlen(\"method not allowed\"));",
      "",
      "[Added Lines]",
      "558:     msgpack_pack_str_with_body(&mp_pck, STR_INPUTS, STR_INPUTS_LEN);",
      "563:         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {",
      "564:             response = 503;",
      "565:             error_msg = flb_sds_create(\"invalid input\");",
      "566:             msgpack_sbuffer_clear(&mp_sbuf);",
      "567:             goto unpack_error;",
      "569:     }",
      "571:     for (i = 0; i < inputs->size; i++) {",
      "573:         input_name = inputs->ptr[i].via.str.ptr;",
      "574:         input_nlen = inputs->ptr[i].via.str.size;",
      "576:         msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);",
      "578:         if (request->method == MK_METHOD_POST) {",
      "580:             ret = msgpack_params_enable_trace((struct flb_hs *)data, &result,",
      "581:                                               input_name, input_nlen);",
      "583:             if (ret != 0) {",
      "584:                 msgpack_pack_map(&mp_pck, 2);",
      "585:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "586:                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
      "587:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE,",
      "588:                                            HTTP_FIELD_RETURNCODE_LEN);",
      "589:                 msgpack_pack_int64(&mp_pck, ret);",
      "592:                 msgpack_pack_map(&mp_pck, 1);",
      "593:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "594:                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "597:         else if (request->method == MK_METHOD_DELETE) {",
      "598:             disable_trace_input((struct flb_hs *)data, input_name, input_nlen);",
      "599:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "600:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "601:         }",
      "602:         else {",
      "603:             msgpack_pack_map(&mp_pck, 2);",
      "604:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "605:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
      "606:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);",
      "607:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED,",
      "608:                                        HTTP_RESULT_METHODNOTALLOWED_LEN);",
      "609:         }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "569:     msgpack_unpacked_destroy(&result);",
      "570:     if (response == 404) {",
      "571:         msgpack_pack_map(&mp_pck, 1);",
      "574:     }",
      "575:     else if (response == 503) {",
      "576:         msgpack_pack_map(&mp_pck, 2);",
      "580:         if (error_msg) {",
      "581:             msgpack_pack_str_with_body(&mp_pck, error_msg, flb_sds_len(error_msg));",
      "582:             flb_sds_destroy(error_msg);",
      "583:         }",
      "584:         else {",
      "586:         }",
      "587:     }",
      "588:     else {",
      "589:         msgpack_pack_map(&mp_pck, 1);",
      "592:     }",
      "",
      "[Removed Lines]",
      "572:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "573:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
      "577:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "578:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
      "579:         msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
      "585:             msgpack_pack_str_with_body(&mp_pck, \"unknown error\", strlen(\"unknown error\"));",
      "590:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
      "591:         msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
      "",
      "[Added Lines]",
      "620:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "621:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);",
      "625:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "626:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "627:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);",
      "633:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR,",
      "634:                                        HTTP_RESULT_UNKNOWNERROR_LEN);",
      "639:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
      "640:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "610: int api_v1_trace(struct flb_hs *hs)",
      "611: {",
      "614:     return 0;",
      "615: }",
      "",
      "[Removed Lines]",
      "612:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/traces/\", cb_traces, hs);",
      "613:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/trace/*\", cb_trace, hs);",
      "",
      "[Added Lines]",
      "661:     if (hs->config->enable_chunk_trace == FLB_TRUE) {",
      "662:         mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/traces/\", cb_traces, hs);",
      "663:         mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/trace/*\", cb_trace, hs);",
      "664:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8035a0a047479b6a452d9d89a1baf16b8f309db7",
      "candidate_info": {
        "commit_hash": "8035a0a047479b6a452d9d89a1baf16b8f309db7",
        "repo": "fluent/fluent-bit",
        "commit_url": "https://github.com/fluent/fluent-bit/commit/8035a0a047479b6a452d9d89a1baf16b8f309db7",
        "files": [
          "src/http_server/api/v1/trace.c"
        ],
        "message": "http_server: api: v1: traces: fix finding inputs by alias.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>",
        "before_after_code_files": [
          "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
          ],
          "candidate": [
            "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
          ]
        }
      },
      "candidate_diff": {
        "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c": [
          "File: src/http_server/api/v1/trace.c -> src/http_server/api/v1/trace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     mk_list_foreach(head, &hs->config->inputs) {",
          "61:         in = mk_list_entry(head, struct flb_input_instance, _head);",
          "66:             return in;",
          "67:         }",
          "68:         if (in->alias) {",
          "70:                 return in;",
          "71:             }",
          "72:         }",
          "",
          "[Removed Lines]",
          "62:         if (strlen(in->name) != nlen) {",
          "63:             continue;",
          "64:         }",
          "65:         if (strncmp(name, in->name, nlen) == 0) {",
          "69:             if (strcmp(name, in->alias) == 0) {",
          "",
          "[Added Lines]",
          "62:         if ((strlen(in->name) == nlen) && (strncmp(name, in->name, nlen) == 0)) {",
          "66:             if ((strlen(in->alias) == nlen) && (strncmp(name, in->alias, nlen) == 0)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114: static flb_sds_t get_input_name(mk_request_t *request)",
          "115: {",
          "119:     if (request->real_path.data == NULL) {",
          "",
          "[Removed Lines]",
          "116:     const char *base = \"/api/v1/trace/\";",
          "",
          "[Added Lines]",
          "113:     const char base[] = \"/api/v1/trace/\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     }",
          "126:     return flb_sds_create_len(&request->real_path.data[sizeof(base)-1],",
          "128: }",
          "130: static int http_disable_trace(mk_request_t *request, void *data,",
          "",
          "[Removed Lines]",
          "127:                               request->real_path.len - sizeof(base)-1);",
          "",
          "[Added Lines]",
          "124:                               request->real_path.len - (sizeof(base)-1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be238e162cf97669fa3be3bfb6c7830a8dc6ce9d",
      "candidate_info": {
        "commit_hash": "be238e162cf97669fa3be3bfb6c7830a8dc6ce9d",
        "repo": "fluent/fluent-bit",
        "commit_url": "https://github.com/fluent/fluent-bit/commit/be238e162cf97669fa3be3bfb6c7830a8dc6ce9d",
        "files": [
          "src/http_server/api/v1/trace.c"
        ],
        "message": "http_server: api: v1: backport fix for CVE-2024-4323\n\n* api/v1/traces: validate inputs when enabling traces.\n\nvalidate the array of inputs when enabling multiple traces that\nthey are strings.\n\nthis patch also refactors out the allocation of said input name.\n\n* api/v1/traces: disable traces api when tracing is disabled.\n\n* api/v1/trace: use macros for strings and lengths in responses.\n\navoid strlen when creating http response, especially in loops,\nby predefining them via macros.\n\n* api/v1/trace: use sizeof for string length macros.\n\n* api/v1/trace: use signed lenghts for strings.\n\nthis avoid potential integer overflows when using them as\nspecifiers for format strings.\n\n* api/v1/traces: use macro for inputs string.\n\n* api/v1/traces: use sizeof when comparing against base path.\n\n* api/v1/traces: replace strlen with flb_sds_len when using flb_sds_t.\n\n---------\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\nCo-authored-by: Phillip Whelan <phil@calyptia.com>",
        "before_after_code_files": [
          "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
          ],
          "candidate": [
            "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c"
          ]
        }
      },
      "candidate_diff": {
        "src/http_server/api/v1/trace.c||src/http_server/api/v1/trace.c": [
          "File: src/http_server/api/v1/trace.c -> src/http_server/api/v1/trace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <fluent-bit/flb_utils.h>",
          "31: #include <msgpack.h>",
          "35: {",
          "36:     struct mk_list *head;",
          "37:     struct flb_input_instance *in;",
          "",
          "[Removed Lines]",
          "34: static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name)",
          "",
          "[Added Lines]",
          "33: #define STR_INPUTS \"inputs\"",
          "34: #define STR_INPUTS_LEN (sizeof(STR_INPUTS)-1)",
          "36: #define HTTP_FIELD_MESSAGE        \"message\"",
          "37: #define HTTP_FIELD_MESSAGE_LEN    (sizeof(HTTP_FIELD_MESSAGE)-1)",
          "38: #define HTTP_FIELD_STATUS         \"status\"",
          "39: #define HTTP_FIELD_STATUS_LEN     (sizeof(HTTP_FIELD_STATUS)-1)",
          "40: #define HTTP_FIELD_RETURNCODE     \"returncode\"",
          "41: #define HTTP_FIELD_RETURNCODE_LEN (sizeof(HTTP_FIELD_RETURNCODE)-1)",
          "43: #define HTTP_RESULT_OK                   \"ok\"",
          "44: #define HTTP_RESULT_OK_LEN               (sizeof(HTTP_RESULT_OK)-1)",
          "45: #define HTTP_RESULT_ERROR                \"error\"",
          "46: #define HTTP_RESULT_ERROR_LEN            (sizeof(HTTP_RESULT_ERROR)-1)",
          "47: #define HTTP_RESULT_NOTFOUND             \"not found\"",
          "48: #define HTTP_RESULT_NOTFOUND_LEN         (sizeof(HTTP_RESULT_NOTFOUND)-1)",
          "49: #define HTTP_RESULT_METHODNOTALLOWED     \"method not allowed\"",
          "50: #define HTTP_RESULT_METHODNOTALLOWED_LEN (sizeof(HTTP_RESULT_METHODNOTALLOWED)-1)",
          "51: #define HTTP_RESULT_UNKNOWNERROR         \"unknown error\"",
          "52: #define HTTP_RESULT_UNKNOWNERROR_LEN     (sizeof(HTTP_RESULT_UNKNOWNERROR)-1)",
          "54: static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name, size_t nlen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     mk_list_foreach(head, &hs->config->inputs) {",
          "41:         in = mk_list_entry(head, struct flb_input_instance, _head);",
          "43:             return in;",
          "44:         }",
          "45:         if (in->alias) {",
          "",
          "[Removed Lines]",
          "42:         if (strcmp(name, in->name) == 0) {",
          "",
          "[Added Lines]",
          "62:         if (strlen(in->name) != nlen) {",
          "63:             continue;",
          "64:         }",
          "65:         if (strncmp(name, in->name, nlen) == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     return NULL;",
          "52: }",
          "55: {",
          "56:     struct flb_input_instance *in;",
          "60:     if (in == NULL) {",
          "61:         return 404;",
          "62:     }",
          "64:     flb_chunk_trace_context_new(in, output_name, prefix, NULL, props);",
          "66: }",
          "69: {",
          "70:     struct flb_input_instance *in;",
          "74:     if (in == NULL) {",
          "75:         return 404;",
          "76:     }",
          "",
          "[Removed Lines]",
          "54: static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props)",
          "59:     in = find_input(hs, name);",
          "65:     return (in->chunk_trace_ctxt == NULL ? 503 : 0);",
          "68: static int disable_trace_input(struct flb_hs *hs, const char *name)",
          "73:     in = find_input(hs, name);",
          "",
          "[Added Lines]",
          "77: static int enable_trace_input(struct flb_hs *hs, const char *name, ssize_t nlen, const char *prefix,",
          "78:                               const char *output_name, struct mk_list *props)",
          "82:     in = find_input(hs, name, nlen);",
          "84:         flb_error(\"unable to find input: [%d]%.*s\", (int)nlen, (int)nlen, name);",
          "90:     if (in->chunk_trace_ctxt == NULL) {",
          "91:         flb_error(\"unable to start tracing\");",
          "92:         return 503;",
          "93:     }",
          "95:     return 0;",
          "98: static int disable_trace_input(struct flb_hs *hs, const char *name, size_t nlen)",
          "103:     in = find_input(hs, name, nlen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:     if (request->real_path.data == NULL) {",
          "90:         return NULL;",
          "91:     }",
          "93:         return NULL;",
          "94:     }",
          "98: }",
          "101: {",
          "102:     struct flb_hs *hs = data;",
          "103:     int toggled_on = 503;",
          "107:     if (toggled_on < 300) {",
          "108:         msgpack_pack_map(mp_pck, 1);",
          "111:         return 201;",
          "112:     }",
          "114:     return toggled_on;",
          "115: }",
          "118: {",
          "119:     int ret = -1;",
          "120:     int i;",
          "",
          "[Removed Lines]",
          "92:     if (request->real_path.len < strlen(base)) {",
          "96:     return flb_sds_create_len(&request->real_path.data[strlen(base)],",
          "97:                               request->real_path.len - strlen(base));",
          "100: static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
          "106:     toggled_on = disable_trace_input(hs, input_name);",
          "109:         msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
          "110:         msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
          "117: static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name)",
          "",
          "[Added Lines]",
          "122:     if (request->real_path.len < sizeof(base)-1) {",
          "126:     return flb_sds_create_len(&request->real_path.data[sizeof(base)-1],",
          "127:                               request->real_path.len - sizeof(base)-1);",
          "130: static int http_disable_trace(mk_request_t *request, void *data,",
          "131:                               const char *input_name, size_t input_nlen,",
          "132:                               msgpack_packer *mp_pck)",
          "138:     toggled_on = disable_trace_input(hs, input_name, input_nlen);",
          "141:         msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "142:         msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "149: static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result,",
          "150:                                        const char *input_name, ssize_t input_nlen)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     msgpack_object_str *param_val;",
          "134:         for (i = 0; i < result->data.via.map.size; i++) {",
          "135:             key = &result->data.via.map.ptr[i].key;",
          "136:             val = &result->data.via.map.ptr[i].val;",
          "138:             if (key->type != MSGPACK_OBJECT_STR) {",
          "139:                 ret = -1;",
          "140:                 goto parse_error;",
          "",
          "[Removed Lines]",
          "133:     if (result->data.type == MSGPACK_OBJECT_MAP) {",
          "",
          "[Added Lines]",
          "166:     if (result->data.type == MSGPACK_OBJECT_MAP) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:             output_name = flb_sds_create(\"stdout\");",
          "194:         }",
          "197:         if (!toggled_on) {",
          "198:             ret = -1;",
          "199:             goto parse_error;",
          "",
          "[Removed Lines]",
          "196:         toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);",
          "",
          "[Added Lines]",
          "229:         toggled_on = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:     return ret;",
          "211: }",
          "214: {",
          "215:     char *buf = NULL;",
          "216:     size_t buf_size;",
          "",
          "[Removed Lines]",
          "213: static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
          "",
          "[Added Lines]",
          "246: static int http_enable_trace(mk_request_t *request, void *data,",
          "247:                              const char *input_name, ssize_t input_nlen,",
          "248:                              msgpack_packer *mp_pck)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:     struct mk_list *props = NULL;",
          "230:     struct flb_chunk_trace_limit limit = { 0 };",
          "231:     struct flb_input_instance *input_instance;",
          "234:     if (request->method == MK_METHOD_GET) {",
          "236:         if (ret == 0) {",
          "237:                 msgpack_pack_map(mp_pck, 1);",
          "240:                 return 200;",
          "241:         }",
          "242:         else {",
          "244:             goto input_error;",
          "245:         }",
          "246:     }",
          "",
          "[Removed Lines]",
          "235:         ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);",
          "238:                 msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
          "239:                 msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
          "243:             flb_error(\"unable to enable tracing for %s\", input_name);",
          "",
          "[Added Lines]",
          "270:         ret = enable_trace_input(hs, input_name, input_nlen, \"trace.\", \"stdout\", NULL);",
          "273:                 msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "274:                 msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "278:             flb_error(\"unable to enable tracing for %.*s\", (int)input_nlen, input_name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:     rc = msgpack_unpack_next(&result, buf, buf_size, &off);",
          "258:     if (rc != MSGPACK_UNPACK_SUCCESS) {",
          "259:         ret = 503;",
          "261:         goto unpack_error;",
          "262:     }",
          "",
          "[Removed Lines]",
          "260:         flb_error(\"unable to unpack msgpack parameters for %s\", input_name);",
          "",
          "[Added Lines]",
          "295:         flb_error(\"unable to unpack msgpack parameters for %.*s\", (int)input_nlen, input_name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "359:             output_name = flb_sds_create(\"stdout\");",
          "360:         }",
          "363:         if (ret != 0) {",
          "364:             flb_error(\"error when enabling tracing\");",
          "365:             goto parse_error;",
          "366:         }",
          "368:         if (limit.type != 0) {",
          "370:             if (limit.type == FLB_CHUNK_TRACE_LIMIT_TIME) {",
          "371:                 flb_chunk_trace_context_set_limit(input_instance->chunk_trace_ctxt, limit.type, limit.seconds);",
          "372:             }",
          "",
          "[Removed Lines]",
          "362:         ret = enable_trace_input(hs, input_name, prefix, output_name, props);",
          "369:             input_instance = find_input(hs, input_name);",
          "",
          "[Added Lines]",
          "397:         ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);",
          "404:             input_instance = find_input(hs, input_name, input_nlen);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "377:     }",
          "379:     msgpack_pack_map(mp_pck, 1);",
          "383:     ret = 200;",
          "384: parse_error:",
          "",
          "[Removed Lines]",
          "380:     msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
          "381:     msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
          "",
          "[Added Lines]",
          "415:     msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "416:     msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "417:     }",
          "419:     if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {",
          "421:     }",
          "422:     else if (request->method == MK_METHOD_DELETE) {",
          "424:     }",
          "425: error:",
          "426:     if (response == 404) {",
          "427:         msgpack_pack_map(&mp_pck, 1);",
          "430:     }",
          "431:     else if (response == 503) {",
          "432:         msgpack_pack_map(&mp_pck, 1);",
          "435:     }",
          "437:     if (input_name != NULL) {",
          "",
          "[Removed Lines]",
          "420:         response = http_enable_trace(request, data, input_name, &mp_pck);",
          "423:         response = http_disable_trace(request, data, input_name, &mp_pck);",
          "428:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "429:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
          "433:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "434:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
          "",
          "[Added Lines]",
          "455:         response = http_enable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);",
          "458:         response = http_disable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);",
          "463:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "464:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);",
          "468:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "469:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "466:     msgpack_unpacked result;",
          "467:     flb_sds_t error_msg = NULL;",
          "468:     int response = 200;",
          "470:     msgpack_object_array *inputs = NULL;",
          "471:     size_t off = 0;",
          "472:     int i;",
          "476:     msgpack_sbuffer_init(&mp_sbuf);",
          "",
          "[Removed Lines]",
          "469:     flb_sds_t input_name;",
          "",
          "[Added Lines]",
          "504:     const char *input_name;",
          "505:     ssize_t input_nlen;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "503:         if (result.data.via.map.ptr[i].key.type != MSGPACK_OBJECT_STR) {",
          "504:             continue;",
          "505:         }",
          "507:             continue;",
          "508:         }",
          "510:             continue;",
          "511:         }",
          "512:         inputs = &result.data.via.map.ptr[i].val.via.array;",
          "",
          "[Removed Lines]",
          "506:         if (result.data.via.map.ptr[i].key.via.str.size < strlen(\"inputs\")) {",
          "509:         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, \"inputs\", strlen(\"inputs\"))) {",
          "",
          "[Added Lines]",
          "541:         if (result.data.via.map.ptr[i].key.via.str.size < STR_INPUTS_LEN) {",
          "544:         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_INPUTS, STR_INPUTS_LEN)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "517:         error_msg = flb_sds_create(\"inputs not found\");",
          "518:         goto unpack_error;",
          "519:     }",
          "521:     msgpack_pack_map(&mp_pck, 2);",
          "524:     msgpack_pack_map(&mp_pck, inputs->size);",
          "526:     for (i = 0; i < inputs->size; i++) {",
          "534:         }",
          "553:             }",
          "554:             else {",
          "560:             }",
          "561:         }",
          "562:     }",
          "564:     msgpack_pack_str_with_body(&mp_pck, \"result\", strlen(\"result\"));",
          "",
          "[Removed Lines]",
          "523:     msgpack_pack_str_with_body(&mp_pck, \"inputs\", strlen(\"inputs\"));",
          "527:         input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);",
          "528:         msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));",
          "530:         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {",
          "531:             msgpack_pack_map(&mp_pck, 1);",
          "532:             msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "533:             msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
          "535:         else {",
          "536:             if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {",
          "537:                 ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);",
          "538:                 if (ret != 0) {",
          "539:                     msgpack_pack_map(&mp_pck, 2);",
          "540:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "541:                     msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
          "542:                     msgpack_pack_str_with_body(&mp_pck, \"returncode\", strlen(\"returncode\"));",
          "543:                     msgpack_pack_int64(&mp_pck, ret);",
          "544:                 }",
          "545:                 else {",
          "546:                     msgpack_pack_map(&mp_pck, 1);",
          "547:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "548:                     msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
          "549:                 }",
          "550:             }",
          "551:             else if (request->method == MK_METHOD_DELETE) {",
          "552:                 disable_trace_input((struct flb_hs *)data, input_name);",
          "555:                 msgpack_pack_map(&mp_pck, 2);",
          "556:                 msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "557:                 msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
          "558:                 msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
          "559:                 msgpack_pack_str_with_body(&mp_pck, \"method not allowed\", strlen(\"method not allowed\"));",
          "",
          "[Added Lines]",
          "558:     msgpack_pack_str_with_body(&mp_pck, STR_INPUTS, STR_INPUTS_LEN);",
          "563:         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {",
          "564:             response = 503;",
          "565:             error_msg = flb_sds_create(\"invalid input\");",
          "566:             msgpack_sbuffer_clear(&mp_sbuf);",
          "567:             goto unpack_error;",
          "569:     }",
          "571:     for (i = 0; i < inputs->size; i++) {",
          "573:         input_name = inputs->ptr[i].via.str.ptr;",
          "574:         input_nlen = inputs->ptr[i].via.str.size;",
          "576:         msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);",
          "578:         if (request->method == MK_METHOD_POST) {",
          "580:             ret = msgpack_params_enable_trace((struct flb_hs *)data, &result,",
          "581:                                               input_name, input_nlen);",
          "583:             if (ret != 0) {",
          "584:                 msgpack_pack_map(&mp_pck, 2);",
          "585:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "586:                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
          "587:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE,",
          "588:                                            HTTP_FIELD_RETURNCODE_LEN);",
          "589:                 msgpack_pack_int64(&mp_pck, ret);",
          "592:                 msgpack_pack_map(&mp_pck, 1);",
          "593:                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "594:                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "597:         else if (request->method == MK_METHOD_DELETE) {",
          "598:             disable_trace_input((struct flb_hs *)data, input_name, input_nlen);",
          "599:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "600:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "601:         }",
          "602:         else {",
          "603:             msgpack_pack_map(&mp_pck, 2);",
          "604:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "605:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);",
          "606:             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);",
          "607:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED,",
          "608:                                        HTTP_RESULT_METHODNOTALLOWED_LEN);",
          "609:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "569:     msgpack_unpacked_destroy(&result);",
          "570:     if (response == 404) {",
          "571:         msgpack_pack_map(&mp_pck, 1);",
          "574:     }",
          "575:     else if (response == 503) {",
          "576:         msgpack_pack_map(&mp_pck, 2);",
          "580:         if (error_msg) {",
          "581:             msgpack_pack_str_with_body(&mp_pck, error_msg, flb_sds_len(error_msg));",
          "582:             flb_sds_destroy(error_msg);",
          "583:         }",
          "584:         else {",
          "586:         }",
          "587:     }",
          "588:     else {",
          "589:         msgpack_pack_map(&mp_pck, 1);",
          "592:     }",
          "",
          "[Removed Lines]",
          "572:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "573:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
          "577:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "578:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
          "579:         msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
          "585:             msgpack_pack_str_with_body(&mp_pck, \"unknown error\", strlen(\"unknown error\"));",
          "590:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
          "591:         msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
          "",
          "[Added Lines]",
          "620:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "621:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);",
          "625:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "626:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "627:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);",
          "633:             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR,",
          "634:                                        HTTP_RESULT_UNKNOWNERROR_LEN);",
          "639:         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);",
          "640:         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "610: int api_v1_trace(struct flb_hs *hs)",
          "611: {",
          "614:     return 0;",
          "615: }",
          "",
          "[Removed Lines]",
          "612:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/traces/\", cb_traces, hs);",
          "613:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/trace/*\", cb_trace, hs);",
          "",
          "[Added Lines]",
          "661:     if (hs->config->enable_chunk_trace == FLB_TRUE) {",
          "662:         mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/traces/\", cb_traces, hs);",
          "663:         mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/trace/*\", cb_trace, hs);",
          "664:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}