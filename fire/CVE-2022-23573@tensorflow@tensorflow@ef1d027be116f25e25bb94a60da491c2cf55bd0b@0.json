{
  "cve_id": "CVE-2022-23573",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ef1d027be116f25e25bb94a60da491c2cf55bd0b",
  "patch_info": {
    "commit_hash": "ef1d027be116f25e25bb94a60da491c2cf55bd0b",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b",
    "files": [
      "tensorflow/core/kernels/assign_op.h"
    ],
    "message": "Prevent copying uninitialized data in `AssignOp`.\n\nThis prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\n\nPiperOrigin-RevId: 408654780\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1",
    "before_after_code_files": [
      "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
      "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     context->forward_ref_input_to_ref_output(0, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:     OP_REQUIRES(",
      "56:         context, rhs.IsInitialized(),",
      "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a415c76ec70d14e3be22bda1d7bd1ccc2184486",
      "candidate_info": {
        "commit_hash": "3a415c76ec70d14e3be22bda1d7bd1ccc2184486",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3a415c76ec70d14e3be22bda1d7bd1ccc2184486",
        "files": [
          "tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h",
          "tensorflow/core/BUILD",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h"
        ],
        "message": "Add TF_AssignRefVariable",
        "before_after_code_files": [
          "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h",
          "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc": [
          "File: tensorflow/c/kernels_experimental.cc -> tensorflow/c/kernels_experimental.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/c/tf_status_helper.h\"",
          "22: #include \"tensorflow/c/tf_status_internal.h\"",
          "23: #include \"tensorflow/c/tf_tensor_internal.h\"",
          "24: #include \"tensorflow/core/framework/resource_mgr.h\"",
          "25: #include \"tensorflow/core/framework/resource_var.h\"",
          "26: #include \"tensorflow/core/framework/variant.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:   TF_SetStatus(status, TF_OK, \"\");",
          "195: }",
          "197: void TF_AssignUpdateVariable(TF_OpKernelContext* ctx, int input_index,",
          "198:                              int value_index, int Op, int isVariantType,",
          "199:                              void (*copyFunc)(TF_OpKernelContext* ctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: void TF_AssignRefVariable(TF_OpKernelContext* ctx, int input_ref_index,",
          "199:                           int output_ref_index, int value_index,",
          "200:                           bool use_locking, bool validate_shape,",
          "201:                           void (*copyFunc)(TF_OpKernelContext* ctx,",
          "202:                                            TF_Tensor* source, TF_Tensor* dest),",
          "203:                           TF_Status* status) {",
          "204:   auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);",
          "206:   auto copy = [copyFunc, ctx](::tensorflow::OpKernelContext* cc_ctx,",
          "207:                               ::tensorflow::Tensor* lhs,",
          "208:                               const ::tensorflow::Tensor& rhs) {",
          "209:     ::tensorflow::Status s;",
          "210:     TF_Tensor* tf_lhs = TF_TensorFromTensor(*lhs, &s);",
          "211:     OP_REQUIRES_OK(cc_ctx, s);",
          "213:     TF_Tensor* tf_rhs = TF_TensorFromTensor(rhs, &s);",
          "214:     OP_REQUIRES_OK(cc_ctx, s);",
          "216:     copyFunc(ctx, tf_rhs, tf_lhs);",
          "217:   };",
          "219:   ::tensorflow::AssignRefVariable(cc_ctx, input_ref_index, output_ref_index,",
          "220:                                   value_index, use_locking, validate_shape,",
          "221:                                   false, copy);",
          "222:   TF_SetStatus(status, TF_OK, \"\");",
          "223: }",
          "",
          "---------------"
        ],
        "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h": [
          "File: tensorflow/c/kernels_experimental.h -> tensorflow/c/kernels_experimental.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                      TF_Tensor* dest),",
          "60:     TF_Status* status);",
          "62: TF_CAPI_EXPORT extern void TF_AssignUpdateVariable(",
          "63:     TF_OpKernelContext* ctx, int input_index, int value_index, int Op,",
          "64:     int isVariantType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     TF_Status* status);",
          "62: TF_CAPI_EXPORT extern void TF_AssignRefVariable(",
          "63:     TF_OpKernelContext* ctx, int input_ref_index, int output_ref_index,",
          "64:     int value_index, bool use_locking, bool validate_shape,",
          "65:     void (*copyFunc)(TF_OpKernelContext* ctx, TF_Tensor* source,",
          "66:                      TF_Tensor* dest),",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc": [
          "File: tensorflow/core/framework/ref_var.cc -> tensorflow/core/framework/ref_var.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/op_kernel.h\"",
          "17: #include \"tensorflow/core/framework/tensor.h\"",
          "18: #include \"tensorflow/core/lib/core/status.h\"",
          "20: namespace tensorflow {",
          "21: void AssignRefVariable(",
          "22:     OpKernelContext* context, int input_ref_index, int output_ref_index,",
          "23:     int value_index, bool use_locking, bool validate_shape,",
          "24:     bool relax_constraints,",
          "25:     std::function<void(OpKernelContext*, Tensor*, const Tensor&)> copy) {",
          "26:   const Tensor& rhs = context->input(value_index);",
          "29:   context->forward_ref_input_to_ref_output(input_ref_index, output_ref_index);",
          "33:   OP_REQUIRES(",
          "34:       context, rhs.IsInitialized(),",
          "35:       errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "41:   AllocatorAttributes attr;",
          "42:   if (!relax_constraints) {",
          "43:     attr.set_gpu_compatible(true);",
          "44:     attr.set_nic_compatible(true);",
          "45:   }",
          "47:   {",
          "48:     mutex_lock l(*context->input_ref_mutex(0));",
          "49:     const Tensor& old_lhs = context->mutable_input(0, /* lock_held */ true);",
          "50:     const bool same_shape = old_lhs.shape().IsSameSize(rhs.shape());",
          "51:     if (validate_shape) {",
          "52:       OP_REQUIRES(context, same_shape,",
          "53:                   errors::InvalidArgument(",
          "54:                       \"Assign requires shapes of both tensors to match. \"",
          "55:                       \"lhs shape= \",",
          "56:                       old_lhs.shape().DebugString(),",
          "57:                       \" rhs shape= \", rhs.shape().DebugString()));",
          "58:     }",
          "68:     if (old_lhs.IsInitialized() &&",
          "69:         old_lhs.shape().num_elements() == rhs.shape().num_elements()) {",
          "72:       Tensor reshaped_old_lhs;",
          "73:       if (same_shape) {",
          "74:         reshaped_old_lhs = old_lhs;",
          "75:       } else {",
          "76:         CHECK(reshaped_old_lhs.CopyFrom(old_lhs, rhs.shape()));",
          "77:         context->replace_ref_input(0, reshaped_old_lhs,",
          "79:       }",
          "80:       if (use_locking) {",
          "81:         copy(context, &reshaped_old_lhs, rhs);",
          "82:         return;",
          "83:       }",
          "84:     } else {",
          "86:       std::unique_ptr<Tensor> input_alias = context->forward_input(",
          "87:           1, OpKernelContext::Params::kNoReservation /*output_index*/,",
          "88:           rhs.dtype(), rhs.shape(), DEVICE_MEMORY, attr);",
          "89:       if (input_alias != nullptr) {",
          "91:         context->replace_ref_input(0, *input_alias, /* lock_held */ true);",
          "92:         return;",
          "93:       }",
          "97:       Tensor copy_tensor;",
          "98:       OP_REQUIRES_OK(context,",
          "99:                      context->allocate_temp(old_lhs.dtype(), rhs.shape(),",
          "100:                                             &copy_tensor, attr));",
          "103:       context->clear_recorded_memory();",
          "104:       context->replace_ref_input(0, copy_tensor, /* lock_held */ true);",
          "105:       if (use_locking) {",
          "106:         copy(context, &copy_tensor, rhs);",
          "107:         return;",
          "108:       }",
          "109:     }",
          "110:   }",
          "115:   Tensor old_unlocked_lhs = context->mutable_input(0, /* lock_held */ false);",
          "116:   copy(context, &old_unlocked_lhs, rhs);",
          "117: }",
          "118: }  //  end namespace tensorflow",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h": [
          "File: tensorflow/core/framework/ref_var.h -> tensorflow/core/framework/ref_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "17: #define TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "19: #include <functional>",
          "21: namespace tensorflow {",
          "22: class OpKernelContext;",
          "24: void AssignRefVariable(",
          "25:     OpKernelContext* context, int input_ref_index, int output_ref_index,",
          "26:     int value_index, bool use_locking, bool validate_shape,",
          "27:     bool relax_constraints,",
          "28:     std::function<void(OpKernelContext*, Tensor*, const Tensor&)> copy);",
          "29: }  //  end namespace tensorflow",
          "31: #endif  // TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
          "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor_types.h\"",
          "25: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   }",
          "47:   void Compute(OpKernelContext* context) override {",
          "139:   }",
          "141:   virtual void Copy(OpKernelContext* context, Tensor* lhs,",
          "",
          "[Removed Lines]",
          "48:     const Tensor& rhs = context->input(1);",
          "51:     context->forward_ref_input_to_ref_output(0, 0);",
          "55:     OP_REQUIRES(",
          "56:         context, rhs.IsInitialized(),",
          "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "63:     AllocatorAttributes attr;",
          "64:     if (!relax_constraints_) {",
          "65:       attr.set_gpu_compatible(true);",
          "66:       attr.set_nic_compatible(true);",
          "67:     }",
          "69:     {",
          "70:       mutex_lock l(*context->input_ref_mutex(0));",
          "71:       const Tensor& old_lhs = context->mutable_input(0, /* lock_held */ true);",
          "72:       const bool same_shape = old_lhs.shape().IsSameSize(rhs.shape());",
          "73:       if (validate_shape_) {",
          "74:         OP_REQUIRES(context, same_shape,",
          "75:                     errors::InvalidArgument(",
          "76:                         \"Assign requires shapes of both tensors to match. \"",
          "77:                         \"lhs shape= \",",
          "78:                         old_lhs.shape().DebugString(),",
          "79:                         \" rhs shape= \", rhs.shape().DebugString()));",
          "80:       }",
          "90:       if (old_lhs.IsInitialized() &&",
          "91:           old_lhs.shape().num_elements() == rhs.shape().num_elements()) {",
          "94:         Tensor reshaped_old_lhs;",
          "95:         if (same_shape) {",
          "96:           reshaped_old_lhs = old_lhs;",
          "97:         } else {",
          "98:           CHECK(reshaped_old_lhs.CopyFrom(old_lhs, rhs.shape()));",
          "99:           context->replace_ref_input(0, reshaped_old_lhs,",
          "101:         }",
          "102:         if (use_exclusive_lock_) {",
          "103:           Copy(context, &reshaped_old_lhs, rhs);",
          "104:           return;",
          "105:         }",
          "106:       } else {",
          "108:         std::unique_ptr<Tensor> input_alias = context->forward_input(",
          "109:             1, OpKernelContext::Params::kNoReservation /*output_index*/,",
          "110:             rhs.dtype(), rhs.shape(), DEVICE_MEMORY, attr);",
          "111:         if (input_alias != nullptr) {",
          "113:           context->replace_ref_input(0, *input_alias, /* lock_held */ true);",
          "114:           return;",
          "115:         }",
          "119:         Tensor copy_tensor;",
          "120:         OP_REQUIRES_OK(context,",
          "121:                        context->allocate_temp(old_lhs.dtype(), rhs.shape(),",
          "122:                                               &copy_tensor, attr));",
          "125:         context->clear_recorded_memory();",
          "126:         context->replace_ref_input(0, copy_tensor, /* lock_held */ true);",
          "127:         if (use_exclusive_lock_) {",
          "128:           Copy(context, &copy_tensor, rhs);",
          "129:           return;",
          "130:         }",
          "131:       }",
          "132:     }",
          "137:     Tensor old_unlocked_lhs = context->mutable_input(0, /* lock_held */ false);",
          "138:     Copy(context, &old_unlocked_lhs, rhs);",
          "",
          "[Added Lines]",
          "49:     constexpr int input_ref_index = 0;",
          "50:     constexpr int output_ref_index = 0;",
          "51:     constexpr int value_index = 1;",
          "53:     auto copy = [this](OpKernelContext* cc_ctx, Tensor* lhs,",
          "54:                        const Tensor& rhs) { Copy(cc_ctx, lhs, rhs); };",
          "56:     AssignRefVariable(context, input_ref_index, output_ref_index, value_index,",
          "57:                       use_exclusive_lock_, validate_shape_, relax_constraints_,",
          "58:                       copy);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5531848938510fe06d53d7d61a6ab06c5266a181",
      "candidate_info": {
        "commit_hash": "5531848938510fe06d53d7d61a6ab06c5266a181",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5531848938510fe06d53d7d61a6ab06c5266a181",
        "files": [
          "tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h",
          "tensorflow/core/BUILD",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h"
        ],
        "message": "Rollback of PR #55379\n\nPiperOrigin-RevId: 439359464",
        "before_after_code_files": [
          "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h",
          "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc": [
          "File: tensorflow/c/kernels_experimental.cc -> tensorflow/c/kernels_experimental.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/c/tf_status_helper.h\"",
          "22: #include \"tensorflow/c/tf_status_internal.h\"",
          "23: #include \"tensorflow/c/tf_tensor_internal.h\"",
          "25: #include \"tensorflow/core/framework/resource_mgr.h\"",
          "26: #include \"tensorflow/core/framework/resource_var.h\"",
          "27: #include \"tensorflow/core/framework/variant.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   TF_SetStatus(status, TF_OK, \"\");",
          "196: }",
          "225: void TF_AssignUpdateVariable(TF_OpKernelContext* ctx, int input_index,",
          "226:                              int value_index, int Op, int isVariantType,",
          "227:                              void (*copyFunc)(TF_OpKernelContext* ctx,",
          "",
          "[Removed Lines]",
          "198: void TF_AssignRefVariable(TF_OpKernelContext* ctx, int input_ref_index,",
          "199:                           int output_ref_index, int value_index,",
          "200:                           bool use_locking, bool validate_shape,",
          "201:                           void (*copyFunc)(TF_OpKernelContext* ctx,",
          "202:                                            TF_Tensor* source, TF_Tensor* dest),",
          "203:                           TF_Status* status) {",
          "204:   auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);",
          "206:   auto copy = [copyFunc, ctx](::tensorflow::OpKernelContext* cc_ctx,",
          "207:                               ::tensorflow::Tensor* lhs,",
          "208:                               const ::tensorflow::Tensor& rhs) {",
          "209:     ::tensorflow::Status s;",
          "210:     TF_Tensor* tf_lhs = TF_TensorFromTensor(*lhs, &s);",
          "211:     OP_REQUIRES_OK(cc_ctx, s);",
          "213:     TF_Tensor* tf_rhs = TF_TensorFromTensor(rhs, &s);",
          "214:     OP_REQUIRES_OK(cc_ctx, s);",
          "216:     copyFunc(ctx, tf_rhs, tf_lhs);",
          "217:   };",
          "219:   ::tensorflow::AssignRefVariable(cc_ctx, input_ref_index, output_ref_index,",
          "220:                                   value_index, use_locking, validate_shape,",
          "221:                                   false, copy);",
          "222:   TF_SetStatus(status, TF_OK, \"\");",
          "223: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h": [
          "File: tensorflow/c/kernels_experimental.h -> tensorflow/c/kernels_experimental.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                      TF_Tensor* dest),",
          "67:     TF_Status* status);",
          "69: TF_CAPI_EXPORT extern void TF_AssignUpdateVariable(",
          "70:     TF_OpKernelContext* ctx, int input_index, int value_index, int Op,",
          "71:     int isVariantType,",
          "",
          "[Removed Lines]",
          "60:     TF_Status* status);",
          "62: TF_CAPI_EXPORT extern void TF_AssignRefVariable(",
          "63:     TF_OpKernelContext* ctx, int input_ref_index, int output_ref_index,",
          "64:     int value_index, bool use_locking, bool validate_shape,",
          "65:     void (*copyFunc)(TF_OpKernelContext* ctx, TF_Tensor* source,",
          "66:                      TF_Tensor* dest),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc": [
          "File: tensorflow/core/framework/ref_var.cc -> tensorflow/core/framework/ref_var.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h": [
          "File: tensorflow/core/framework/ref_var.h -> tensorflow/core/framework/ref_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
          "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "24: #include \"tensorflow/core/framework/tensor_types.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "23: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   }",
          "48:   void Compute(OpKernelContext* context) override {",
          "59:   }",
          "61:   virtual void Copy(OpKernelContext* context, Tensor* lhs,",
          "",
          "[Removed Lines]",
          "49:     constexpr int input_ref_index = 0;",
          "50:     constexpr int output_ref_index = 0;",
          "51:     constexpr int value_index = 1;",
          "53:     auto copy = [this](OpKernelContext* cc_ctx, Tensor* lhs,",
          "54:                        const Tensor& rhs) { Copy(cc_ctx, lhs, rhs); };",
          "56:     AssignRefVariable(context, input_ref_index, output_ref_index, value_index,",
          "57:                       use_exclusive_lock_, validate_shape_, relax_constraints_,",
          "58:                       copy);",
          "",
          "[Added Lines]",
          "48:     const Tensor& rhs = context->input(1);",
          "51:     context->forward_ref_input_to_ref_output(0, 0);",
          "55:     OP_REQUIRES(",
          "56:         context, rhs.IsInitialized(),",
          "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "63:     AllocatorAttributes attr;",
          "64:     if (!relax_constraints_) {",
          "65:       attr.set_gpu_compatible(true);",
          "66:       attr.set_nic_compatible(true);",
          "67:     }",
          "69:     {",
          "70:       mutex_lock l(*context->input_ref_mutex(0));",
          "71:       const Tensor& old_lhs = context->mutable_input(0, /* lock_held */ true);",
          "72:       const bool same_shape = old_lhs.shape().IsSameSize(rhs.shape());",
          "73:       if (validate_shape_) {",
          "74:         OP_REQUIRES(context, same_shape,",
          "75:                     errors::InvalidArgument(",
          "76:                         \"Assign requires shapes of both tensors to match. \"",
          "77:                         \"lhs shape= \",",
          "78:                         old_lhs.shape().DebugString(),",
          "79:                         \" rhs shape= \", rhs.shape().DebugString()));",
          "80:       }",
          "90:       if (old_lhs.IsInitialized() &&",
          "91:           old_lhs.shape().num_elements() == rhs.shape().num_elements()) {",
          "94:         Tensor reshaped_old_lhs;",
          "95:         if (same_shape) {",
          "96:           reshaped_old_lhs = old_lhs;",
          "97:         } else {",
          "98:           CHECK(reshaped_old_lhs.CopyFrom(old_lhs, rhs.shape()));",
          "99:           context->replace_ref_input(0, reshaped_old_lhs,",
          "101:         }",
          "102:         if (use_exclusive_lock_) {",
          "103:           Copy(context, &reshaped_old_lhs, rhs);",
          "104:           return;",
          "105:         }",
          "106:       } else {",
          "108:         std::unique_ptr<Tensor> input_alias = context->forward_input(",
          "109:             1, OpKernelContext::Params::kNoReservation /*output_index*/,",
          "110:             rhs.dtype(), rhs.shape(), DEVICE_MEMORY, attr);",
          "111:         if (input_alias != nullptr) {",
          "113:           context->replace_ref_input(0, *input_alias, /* lock_held */ true);",
          "114:           return;",
          "115:         }",
          "119:         Tensor copy_tensor;",
          "120:         OP_REQUIRES_OK(context,",
          "121:                        context->allocate_temp(old_lhs.dtype(), rhs.shape(),",
          "122:                                               &copy_tensor, attr));",
          "125:         context->clear_recorded_memory();",
          "126:         context->replace_ref_input(0, copy_tensor, /* lock_held */ true);",
          "127:         if (use_exclusive_lock_) {",
          "128:           Copy(context, &copy_tensor, rhs);",
          "129:           return;",
          "130:         }",
          "131:       }",
          "132:     }",
          "137:     Tensor old_unlocked_lhs = context->mutable_input(0, /* lock_held */ false);",
          "138:     Copy(context, &old_unlocked_lhs, rhs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d2dd95d8443154d5a4f1fa3def01246ecf5b2ce",
      "candidate_info": {
        "commit_hash": "2d2dd95d8443154d5a4f1fa3def01246ecf5b2ce",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2d2dd95d8443154d5a4f1fa3def01246ecf5b2ce",
        "files": [
          "tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h",
          "tensorflow/core/BUILD",
          "tensorflow/core/framework/BUILD",
          "tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h"
        ],
        "message": "Add TF_AssignRefVariable",
        "before_after_code_files": [
          "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc",
          "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h",
          "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc",
          "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h",
          "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/c/kernels_experimental.cc||tensorflow/c/kernels_experimental.cc": [
          "File: tensorflow/c/kernels_experimental.cc -> tensorflow/c/kernels_experimental.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/c/tf_status_helper.h\"",
          "22: #include \"tensorflow/c/tf_status_internal.h\"",
          "23: #include \"tensorflow/c/tf_tensor_internal.h\"",
          "24: #include \"tensorflow/core/framework/resource_mgr.h\"",
          "25: #include \"tensorflow/core/framework/resource_var.h\"",
          "26: #include \"tensorflow/core/framework/variant.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:   TF_SetStatus(status, TF_OK, \"\");",
          "195: }",
          "197: void TF_AssignUpdateVariable(TF_OpKernelContext* ctx, int input_index,",
          "198:                              int value_index, int Op, int isVariantType,",
          "199:                              void (*copyFunc)(TF_OpKernelContext* ctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: void TF_AssignRefVariable(TF_OpKernelContext* ctx, int input_ref_index,",
          "199:                           int output_ref_index, int value_index,",
          "200:                           bool use_locking, bool validate_shape,",
          "201:                           void (*copyFunc)(TF_OpKernelContext* ctx,",
          "202:                                            TF_Tensor* source,",
          "203:                                            TF_Tensor* dest)) {",
          "204:   auto* cc_ctx = reinterpret_cast<::tensorflow::OpKernelContext*>(ctx);",
          "206:   auto copy = [copyFunc, ctx](::tensorflow::OpKernelContext* cc_ctx,",
          "207:                               ::tensorflow::Tensor* lhs,",
          "208:                               const ::tensorflow::Tensor& rhs) {",
          "209:     ::tensorflow::Status s;",
          "210:     TF_Tensor* tf_lhs = TF_TensorFromTensor(*lhs, &s);",
          "211:     OP_REQUIRES_OK(cc_ctx, s);",
          "213:     TF_Tensor* tf_rhs = TF_TensorFromTensor(rhs, &s);",
          "214:     OP_REQUIRES_OK(cc_ctx, s);",
          "216:     copyFunc(ctx, tf_rhs, tf_lhs);",
          "217:   };",
          "219:   ::tensorflow::AssignRefVariable(cc_ctx, input_ref_index, output_ref_index,",
          "220:                                   value_index, use_locking, validate_shape,",
          "221:                                   false, copy);",
          "222: }",
          "",
          "---------------"
        ],
        "tensorflow/c/kernels_experimental.h||tensorflow/c/kernels_experimental.h": [
          "File: tensorflow/c/kernels_experimental.h -> tensorflow/c/kernels_experimental.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                      TF_Tensor* dest),",
          "60:     TF_Status* status);",
          "62: TF_CAPI_EXPORT extern void TF_AssignUpdateVariable(",
          "63:     TF_OpKernelContext* ctx, int input_index, int value_index, int Op,",
          "64:     int isVariantType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: TF_CAPI_EXPORT extern void TF_AssignRefVariable(",
          "63:     TF_OpKernelContext* ctx, int input_ref_index, int output_ref_index,",
          "64:     int value_index, bool use_locking, bool validate_shape,",
          "65:     void (*copyFunc)(TF_OpKernelContext* ctx, TF_Tensor* source,",
          "66:                      TF_Tensor* dest));",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.cc||tensorflow/core/framework/ref_var.cc": [
          "File: tensorflow/core/framework/ref_var.cc -> tensorflow/core/framework/ref_var.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/op_kernel.h\"",
          "17: #include \"tensorflow/core/framework/tensor.h\"",
          "18: #include \"tensorflow/core/lib/core/status.h\"",
          "20: namespace tensorflow {",
          "21: void AssignRefVariable(",
          "22:     OpKernelContext* context, int input_ref_index, int output_ref_index,",
          "23:     int value_index, bool use_locking, bool validate_shape,",
          "24:     bool relax_constraints,",
          "25:     std::function<void(OpKernelContext*, Tensor*, const Tensor&)> copy) {",
          "26:   const Tensor& rhs = context->input(value_index);",
          "29:   context->forward_ref_input_to_ref_output(input_ref_index, output_ref_index);",
          "33:   OP_REQUIRES(",
          "34:       context, rhs.IsInitialized(),",
          "35:       errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "41:   AllocatorAttributes attr;",
          "42:   if (!relax_constraints) {",
          "43:     attr.set_gpu_compatible(true);",
          "44:     attr.set_nic_compatible(true);",
          "45:   }",
          "47:   {",
          "48:     mutex_lock l(*context->input_ref_mutex(0));",
          "49:     const Tensor& old_lhs = context->mutable_input(0, /* lock_held */ true);",
          "50:     const bool same_shape = old_lhs.shape().IsSameSize(rhs.shape());",
          "51:     if (validate_shape) {",
          "52:       OP_REQUIRES(context, same_shape,",
          "53:                   errors::InvalidArgument(",
          "54:                       \"Assign requires shapes of both tensors to match. \"",
          "55:                       \"lhs shape= \",",
          "56:                       old_lhs.shape().DebugString(),",
          "57:                       \" rhs shape= \", rhs.shape().DebugString()));",
          "58:     }",
          "68:     if (old_lhs.IsInitialized() &&",
          "69:         old_lhs.shape().num_elements() == rhs.shape().num_elements()) {",
          "72:       Tensor reshaped_old_lhs;",
          "73:       if (same_shape) {",
          "74:         reshaped_old_lhs = old_lhs;",
          "75:       } else {",
          "76:         CHECK(reshaped_old_lhs.CopyFrom(old_lhs, rhs.shape()));",
          "77:         context->replace_ref_input(0, reshaped_old_lhs,",
          "79:       }",
          "80:       if (use_locking) {",
          "81:         copy(context, &reshaped_old_lhs, rhs);",
          "82:         return;",
          "83:       }",
          "84:     } else {",
          "86:       std::unique_ptr<Tensor> input_alias = context->forward_input(",
          "87:           1, OpKernelContext::Params::kNoReservation /*output_index*/,",
          "88:           rhs.dtype(), rhs.shape(), DEVICE_MEMORY, attr);",
          "89:       if (input_alias != nullptr) {",
          "91:         context->replace_ref_input(0, *input_alias, /* lock_held */ true);",
          "92:         return;",
          "93:       }",
          "97:       Tensor copy_tensor;",
          "98:       OP_REQUIRES_OK(context,",
          "99:                      context->allocate_temp(old_lhs.dtype(), rhs.shape(),",
          "100:                                             &copy_tensor, attr));",
          "103:       context->clear_recorded_memory();",
          "104:       context->replace_ref_input(0, copy_tensor, /* lock_held */ true);",
          "105:       if (use_locking) {",
          "106:         copy(context, &copy_tensor, rhs);",
          "107:         return;",
          "108:       }",
          "109:     }",
          "110:   }",
          "115:   Tensor old_unlocked_lhs = context->mutable_input(0, /* lock_held */ false);",
          "116:   copy(context, &old_unlocked_lhs, rhs);",
          "117: }",
          "118: }  //  end namespace tensorflow",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/ref_var.h||tensorflow/core/framework/ref_var.h": [
          "File: tensorflow/core/framework/ref_var.h -> tensorflow/core/framework/ref_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #ifndef TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "17: #define TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "19: #include <functional>",
          "21: namespace tensorflow {",
          "22: class OpKernelContext;",
          "24: void AssignRefVariable(",
          "25:     OpKernelContext* context, int input_ref_index, int output_ref_index,",
          "26:     int value_index, bool use_locking, bool validate_shape,",
          "27:     bool relax_constraints,",
          "28:     std::function<void(OpKernelContext*, Tensor*, const Tensor&)> copy);",
          "29: }  //  end namespace tensorflow",
          "31: #endif  // TENSORFLOW_CORE_FRAMEWORK_REF_VAR_H_",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
          "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor_types.h\"",
          "25: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/ref_var.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   }",
          "47:   void Compute(OpKernelContext* context) override {",
          "139:   }",
          "141:   virtual void Copy(OpKernelContext* context, Tensor* lhs,",
          "",
          "[Removed Lines]",
          "48:     const Tensor& rhs = context->input(1);",
          "51:     context->forward_ref_input_to_ref_output(0, 0);",
          "55:     OP_REQUIRES(",
          "56:         context, rhs.IsInitialized(),",
          "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "63:     AllocatorAttributes attr;",
          "64:     if (!relax_constraints_) {",
          "65:       attr.set_gpu_compatible(true);",
          "66:       attr.set_nic_compatible(true);",
          "67:     }",
          "69:     {",
          "70:       mutex_lock l(*context->input_ref_mutex(0));",
          "71:       const Tensor& old_lhs = context->mutable_input(0, /* lock_held */ true);",
          "72:       const bool same_shape = old_lhs.shape().IsSameSize(rhs.shape());",
          "73:       if (validate_shape_) {",
          "74:         OP_REQUIRES(context, same_shape,",
          "75:                     errors::InvalidArgument(",
          "76:                         \"Assign requires shapes of both tensors to match. \"",
          "77:                         \"lhs shape= \",",
          "78:                         old_lhs.shape().DebugString(),",
          "79:                         \" rhs shape= \", rhs.shape().DebugString()));",
          "80:       }",
          "90:       if (old_lhs.IsInitialized() &&",
          "91:           old_lhs.shape().num_elements() == rhs.shape().num_elements()) {",
          "94:         Tensor reshaped_old_lhs;",
          "95:         if (same_shape) {",
          "96:           reshaped_old_lhs = old_lhs;",
          "97:         } else {",
          "98:           CHECK(reshaped_old_lhs.CopyFrom(old_lhs, rhs.shape()));",
          "99:           context->replace_ref_input(0, reshaped_old_lhs,",
          "101:         }",
          "102:         if (use_exclusive_lock_) {",
          "103:           Copy(context, &reshaped_old_lhs, rhs);",
          "104:           return;",
          "105:         }",
          "106:       } else {",
          "108:         std::unique_ptr<Tensor> input_alias = context->forward_input(",
          "109:             1, OpKernelContext::Params::kNoReservation /*output_index*/,",
          "110:             rhs.dtype(), rhs.shape(), DEVICE_MEMORY, attr);",
          "111:         if (input_alias != nullptr) {",
          "113:           context->replace_ref_input(0, *input_alias, /* lock_held */ true);",
          "114:           return;",
          "115:         }",
          "119:         Tensor copy_tensor;",
          "120:         OP_REQUIRES_OK(context,",
          "121:                        context->allocate_temp(old_lhs.dtype(), rhs.shape(),",
          "122:                                               &copy_tensor, attr));",
          "125:         context->clear_recorded_memory();",
          "126:         context->replace_ref_input(0, copy_tensor, /* lock_held */ true);",
          "127:         if (use_exclusive_lock_) {",
          "128:           Copy(context, &copy_tensor, rhs);",
          "129:           return;",
          "130:         }",
          "131:       }",
          "132:     }",
          "137:     Tensor old_unlocked_lhs = context->mutable_input(0, /* lock_held */ false);",
          "138:     Copy(context, &old_unlocked_lhs, rhs);",
          "",
          "[Added Lines]",
          "49:     constexpr int input_ref_index = 0;",
          "50:     constexpr int output_ref_index = 0;",
          "51:     constexpr int value_index = 1;",
          "53:     auto copy = [this](OpKernelContext* cc_ctx, Tensor* lhs,",
          "54:                        const Tensor& rhs) { Copy(cc_ctx, lhs, rhs); };",
          "56:     AssignRefVariable(context, input_ref_index, output_ref_index, value_index,",
          "57:                       use_exclusive_lock_, validate_shape_, relax_constraints_,",
          "58:                       copy);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e61ce1bbc8b2c316bb121fcb032ab51c744e99a",
      "candidate_info": {
        "commit_hash": "5e61ce1bbc8b2c316bb121fcb032ab51c744e99a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5e61ce1bbc8b2c316bb121fcb032ab51c744e99a",
        "files": [
          "tensorflow/core/kernels/assign_op.h"
        ],
        "message": "Prevent copying uninitialized data in `AssignOp`.\n\nThis prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\n\nPiperOrigin-RevId: 408654780\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1",
        "before_after_code_files": [
          "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
          "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     context->forward_ref_input_to_ref_output(0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     OP_REQUIRES(",
          "56:         context, rhs.IsInitialized(),",
          "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f714008838f850123360b817b77e0d54427bf0f2",
      "candidate_info": {
        "commit_hash": "f714008838f850123360b817b77e0d54427bf0f2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f714008838f850123360b817b77e0d54427bf0f2",
        "files": [
          "tensorflow/core/kernels/assign_op.h"
        ],
        "message": "Prevent copying uninitialized data in `AssignOp`.\n\nThis prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\n\nPiperOrigin-RevId: 408654780\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1",
        "before_after_code_files": [
          "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/assign_op.h||tensorflow/core/kernels/assign_op.h": [
          "File: tensorflow/core/kernels/assign_op.h -> tensorflow/core/kernels/assign_op.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     context->forward_ref_input_to_ref_output(0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     OP_REQUIRES(",
          "56:         context, rhs.IsInitialized(),",
          "57:         errors::Internal(\"Right hand side of AssignOp is not initialized\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}