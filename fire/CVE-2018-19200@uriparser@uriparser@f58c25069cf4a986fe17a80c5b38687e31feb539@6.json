{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b90b74ee206558fed346a17fa56443a9420ca85",
      "candidate_info": {
        "commit_hash": "9b90b74ee206558fed346a17fa56443a9420ca85",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/9b90b74ee206558fed346a17fa56443a9420ca85",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseOwnPortUserInfo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  case URI_SET_DIGIT:",
          "270:  case URI_SET_ALPHA:",
          "274:  default:",
          "",
          "[Removed Lines]",
          "272:   return URI_FUNC(ParseOwnHostUserInfoNz)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "272:   return URI_FUNC(ParseOwnHostUserInfoNz)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1108:  case _UT('='):",
          "1109:  case URI_SET_DIGIT:",
          "1110:  case URI_SET_ALPHA:",
          "1113:  default:",
          "1114:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "",
          "[Removed Lines]",
          "1111:   return URI_FUNC(ParseOwnHostUserInfoNz)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1111:   return URI_FUNC(ParseOwnHostUserInfoNz)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1132:  if (first >= afterLast) {",
          "1133:   URI_FUNC(StopSyntax)(state, first);",
          "1134:   return NULL;",
          "",
          "[Removed Lines]",
          "1129: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1129: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(",
          "1130:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1131:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:  case _UT(':'):",
          "1170:  case _UT('@'):",
          "",
          "[Removed Lines]",
          "1168:   return URI_FUNC(ParseOwnPortUserInfo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1168:   return URI_FUNC(ParseOwnPortUserInfo)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1222:  if (first >= afterLast) {",
          "1223:   if (!URI_FUNC(OnExitOwnPortUserInfo)(state, first, memory)) {",
          "1224:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Removed Lines]",
          "1219: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1219: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(",
          "1220:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1221:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1254:   return URI_FUNC(ParseOwnUserInfo)(state, first + 1, afterLast);",
          "1256:  case URI_SET_DIGIT:",
          "1259:  case _UT('%'):",
          "",
          "[Removed Lines]",
          "1257:   return URI_FUNC(ParseOwnPortUserInfo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1257:   return URI_FUNC(ParseOwnPortUserInfo)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "141ec38a9dff91033c5dd7db6ec61f26a9426a80",
      "candidate_info": {
        "commit_hash": "141ec38a9dff91033c5dd7db6ec61f26a9426a80",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/141ec38a9dff91033c5dd7db6ec61f26a9426a80",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Stop inheriting C++ class from C struct",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: public:",
          "80:  FailingMemoryManager() {",
          "92:  }",
          "97:  }",
          "99:  unsigned int getCallCountFree() const {",
          "106:  }",
          "107: };",
          "",
          "[Removed Lines]",
          "78: class FailingMemoryManager : public UriMemoryManager {",
          "81:   this->malloc = failingMalloc;",
          "82:   this->calloc = failingCalloc,",
          "83:   this->realloc = failingRealloc,",
          "84:   this->reallocarray = failingReallocarray,",
          "85:   this->free = countingFree,",
          "87:   this->userData = new CallCountLog();",
          "91:   assert(sizeof(FailingMemoryManager) == sizeof(UriMemoryManager));",
          "94:  ~FailingMemoryManager() {",
          "95:   delete getCallCountLog();",
          "96:   this->userData = NULL;",
          "100:   return this->getCallCountLog()->callCountFree;",
          "101:  }",
          "103: private:",
          "104:  const CallCountLog * getCallCountLog() const {",
          "105:   return static_cast<CallCountLog *>(this->userData);",
          "",
          "[Added Lines]",
          "78: class FailingMemoryManager {",
          "79: private:",
          "80:  UriMemoryManager memoryManager;",
          "81:  CallCountLog callCountLog;",
          "85:   this->memoryManager.malloc = failingMalloc;",
          "86:   this->memoryManager.calloc = failingCalloc;",
          "87:   this->memoryManager.realloc = failingRealloc;",
          "88:   this->memoryManager.reallocarray = failingReallocarray;",
          "89:   this->memoryManager.free = countingFree;",
          "90:   this->memoryManager.userData = &(this->callCountLog);",
          "93:  UriMemoryManager * operator&() {",
          "94:   return &(this->memoryManager);",
          "98:   return this->callCountLog.callCountFree;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "840a36f2674af64d84b8ea6f4704c9a68a4246ca",
      "candidate_info": {
        "commit_hash": "840a36f2674af64d84b8ea6f4704c9a68a4246ca",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/840a36f2674af64d84b8ea6f4704c9a68a4246ca",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriParse.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function ParseUriExMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriParse.c||src/UriParse.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "238:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "239:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2112:  const URI_CHAR * afterUriReference;",
          "2113:  URI_TYPE(Uri) * uri;",
          "",
          "[Removed Lines]",
          "2110: int URI_FUNC(ParseUriEx)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "2110: int URI_FUNC(ParseUriEx)(URI_TYPE(ParserState) * state,",
          "2111:   const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "2112:  return URI_FUNC(ParseUriExMm)(state, first, afterLast, NULL);",
          "2113: }",
          "2117: int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "2118:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2119:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: TEST(FailingMemoryManagerSuite, RemoveBaseUriMm) {",
          "230:  UriUriA dest;",
          "231:  UriUriA absoluteSource = parse(\"http://example.org/a/b/c/\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: TEST(FailingMemoryManagerSuite, ParseUriExMm) {",
          "230:  UriParserStateA state;",
          "231:  UriUriA uri;",
          "232:  state.uri = &uri;",
          "233:  const char * const first = \"k1=v1&k2=v2\";",
          "234:  const char * const afterLast = first + strlen(first);",
          "235:  FailingMemoryManager failingMemoryManager;",
          "237:  ASSERT_EQ(uriParseUriExMmA(&state, first, afterLast,",
          "238:    &failingMemoryManager),",
          "239:    URI_ERROR_MALLOC);",
          "240: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0fb536030aee990b310591a851192e8dc5a10be",
      "candidate_info": {
        "commit_hash": "c0fb536030aee990b310591a851192e8dc5a10be",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/c0fb536030aee990b310591a851192e8dc5a10be",
        "files": [
          "src/UriShorten.c"
        ],
        "message": "Pass memory manager to AppendSegment",
        "before_after_code_files": [
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: static URI_INLINE UriBool URI_FUNC(AppendSegment)(URI_TYPE(Uri) * uri,",
          "76:  URI_TYPE(PathSegment) * segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "77:  if (segment == NULL) {",
          "",
          "[Removed Lines]",
          "72:   const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "72:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "73:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:         baseSeg = baseSeg->next;",
          "226:         if (!URI_FUNC(AppendSegment)(dest, URI_FUNC(ConstParent),",
          "228:          return URI_ERROR_MALLOC;",
          "229:         }",
          "",
          "[Removed Lines]",
          "227:           URI_FUNC(ConstParent) + 2)) {",
          "",
          "[Added Lines]",
          "226:           URI_FUNC(ConstParent) + 2, memory)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:          if (containsColon) {",
          "250:           if (!URI_FUNC(AppendSegment)(dest, URI_FUNC(ConstPwd),",
          "252:            return URI_ERROR_MALLOC;",
          "253:           }",
          "255:          } else if (sourceSeg->text.first == sourceSeg->text.afterLast) {",
          "257:           if (!URI_FUNC(AppendSegment)(dest, URI_FUNC(ConstPwd),",
          "259:            return URI_ERROR_MALLOC;",
          "260:           }",
          "",
          "[Removed Lines]",
          "251:             URI_FUNC(ConstPwd) + 1)) {",
          "258:             URI_FUNC(ConstPwd) + 1)) {",
          "",
          "[Added Lines]",
          "250:             URI_FUNC(ConstPwd) + 1, memory)) {",
          "257:             URI_FUNC(ConstPwd) + 1, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:         }",
          "266:         if (!URI_FUNC(AppendSegment)(dest, sourceSeg->text.first,",
          "268:          return URI_ERROR_MALLOC;",
          "269:         }",
          "",
          "[Removed Lines]",
          "267:           sourceSeg->text.afterLast)) {",
          "",
          "[Added Lines]",
          "266:           sourceSeg->text.afterLast, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b14ded7c89f193fcca9c291e20087979eb7daf7b",
      "candidate_info": {
        "commit_hash": "b14ded7c89f193fcca9c291e20087979eb7daf7b",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b14ded7c89f193fcca9c291e20087979eb7daf7b",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseAuthority",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: static const URI_CHAR * URI_FUNC(ParseAuthorityTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "160: static const URI_CHAR * URI_FUNC(ParseHexZero)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "161: static const URI_CHAR * URI_FUNC(ParseHierPart)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "158: static const URI_CHAR * URI_FUNC(ParseAuthority)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "158: static const URI_CHAR * URI_FUNC(ParseAuthority)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  if (first >= afterLast) {",
          "234:   state->uri->hostText.first = URI_FUNC(SafeToPointTo);",
          "",
          "[Removed Lines]",
          "229: static URI_INLINE const URI_CHAR * URI_FUNC(ParseAuthority)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "229: static URI_INLINE const URI_CHAR * URI_FUNC(ParseAuthority)(",
          "230:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "231:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1355:  case _UT('/'):",
          "1356:   {",
          "1357:    const URI_CHAR * const afterAuthority",
          "1359:    const URI_CHAR * afterPathAbsEmpty;",
          "1360:    if (afterAuthority == NULL) {",
          "1361:     return NULL;",
          "",
          "[Removed Lines]",
          "1358:      = URI_FUNC(ParseAuthority)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1358:      = URI_FUNC(ParseAuthority)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    }
  ]
}