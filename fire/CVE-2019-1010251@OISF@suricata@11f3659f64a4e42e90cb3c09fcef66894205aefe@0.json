{
  "cve_id": "CVE-2019-1010251",
  "cve_desc": "Open Information Security Foundation Suricata prior to version 4.1.2 is affected by: Denial of Service - DNS detection bypass. The impact is: An attacker can evade a signature detection with a specialy formed network packet. The component is: app-layer-detect-proto.c, decode.c, decode-teredo.c and decode-ipv6.c (https://github.com/OISF/suricata/pull/3590/commits/11f3659f64a4e42e90cb3c09fcef66894205aefe, https://github.com/OISF/suricata/pull/3590/commits/8357ef3f8ffc7d99ef6571350724160de356158b). The attack vector is: An attacker can trigger the vulnerability by sending a specifically crafted network request. The fixed version is: 4.1.2.",
  "repo": "OISF/suricata",
  "patch_hash": "11f3659f64a4e42e90cb3c09fcef66894205aefe",
  "patch_info": {
    "commit_hash": "11f3659f64a4e42e90cb3c09fcef66894205aefe",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/pull/3590/commits/11f3659f64a4e42e90cb3c09fcef66894205aefe",
    "files": [
      "src/decode-ipv6.c",
      "src/decode-teredo.c",
      "src/decode.c",
      "src/decode.h"
    ],
    "message": "teredo: be stricter on what to consider valid teredo\n\nInvalid Teredo can lead to valid DNS traffic (or other UDP traffic)\nbeing misdetected as Teredo. This leads to false negatives in the\nUDP payload inspection.\n\nMake the teredo code only consider a packet teredo if the encapsulated\ndata was decoded without any 'invalid' events being set.\n\nBug #2736.",
    "before_after_code_files": [
      "src/decode-ipv6.c||src/decode-ipv6.c",
      "src/decode-teredo.c||src/decode-teredo.c",
      "src/decode.c||src/decode.c",
      "src/decode.h||src/decode.h"
    ]
  },
  "patch_diff": {
    "src/decode-ipv6.c||src/decode-ipv6.c": [
      "File: src/decode-ipv6.c -> src/decode-ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     SCEnter();",
      "152:     uint8_t *orig_pkt = pkt;",
      "154:     uint16_t hdrextlen = 0;",
      "156:     char dstopts = 0;",
      "157:     char exthdr_fh_done = 0;",
      "158:     int hh = 0;",
      "",
      "[Removed Lines]",
      "155:     uint16_t plen;",
      "",
      "[Added Lines]",
      "155:     uint16_t plen = len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     int eh = 0;",
      "161:     int ah = 0;",
      "166:     while(1)",
      "167:     {",
      "171:             SCReturn;",
      "172:         }",
      "175:             SCReturn;",
      "176:         }",
      "",
      "[Removed Lines]",
      "163:     nh = IPV6_GET_NH(p);",
      "164:     plen = len;",
      "169:         if (nh == IPPROTO_NONE && plen > 0) {",
      "170:             ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
      "",
      "[Added Lines]",
      "165:         if (nh == IPPROTO_NONE) {",
      "166:             if (plen > 0) {",
      "168:                 ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
      "169:             }",
      "174:             ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "204:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
      "206:                 if (hdrextlen > plen) {",
      "208:                     SCReturn;",
      "209:                 }",
      "",
      "[Removed Lines]",
      "207:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "207:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "243:                 IPV6_SET_L4PROTO(p,nh);",
      "244:                 hdrextlen =  (*(pkt+1) + 1) << 3;",
      "245:                 if (hdrextlen > plen) {",
      "247:                     SCReturn;",
      "248:                 }",
      "",
      "[Removed Lines]",
      "246:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "246:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "288:                 if (optslen > plen) {",
      "294:                     nh = *pkt;",
      "",
      "[Removed Lines]",
      "291:                     ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "291:                     ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "311:                     }",
      "313:                     if (offset + 1 >= optslen) {",
      "315:                         break;",
      "316:                     }",
      "",
      "[Removed Lines]",
      "314:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "314:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "322:                     if ((offset + 1 + ip6_optlen) > optslen) {",
      "324:                         break;",
      "325:                     }",
      "",
      "[Removed Lines]",
      "323:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "323:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "339:                         ra->ip6ra_len  = ip6_optlen;",
      "341:                         if (ip6_optlen < sizeof(ra->ip6ra_value)) {",
      "343:                             break;",
      "344:                         }",
      "",
      "[Removed Lines]",
      "342:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "342:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "355:                         jumbo->ip6j_len  = ip6_optlen;",
      "357:                         if (ip6_optlen < sizeof(jumbo->ip6j_payload_len)) {",
      "359:                             break;",
      "360:                         }",
      "",
      "[Removed Lines]",
      "358:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "358:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "370:                         hao->ip6hao_len  = ip6_optlen;",
      "372:                         if (ip6_optlen < sizeof(hao->ip6hao_hoa)) {",
      "374:                             break;",
      "375:                         }",
      "",
      "[Removed Lines]",
      "373:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "373:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "422:                 uint16_t prev_hdrextlen = hdrextlen;",
      "423:                 hdrextlen = sizeof(IPV6FragHdr);",
      "424:                 if (hdrextlen > plen) {",
      "426:                     SCReturn;",
      "427:                 }",
      "",
      "[Removed Lines]",
      "425:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "425:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "468:                 IPV6_SET_L4PROTO(p,nh);",
      "469:                 hdrextlen = sizeof(IPV6EspHdr);",
      "470:                 if (hdrextlen > plen) {",
      "472:                     SCReturn;",
      "473:                 }",
      "",
      "[Removed Lines]",
      "471:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "471:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "497:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
      "499:                 if (hdrextlen > plen) {",
      "501:                     SCReturn;",
      "502:                 }",
      "",
      "[Removed Lines]",
      "500:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "500:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "538:             case IPPROTO_SHIM6:",
      "540:                 if (hdrextlen > plen) {",
      "542:                     SCReturn;",
      "543:                 }",
      "544:                 nh = *pkt;",
      "",
      "[Removed Lines]",
      "541:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "541:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------"
    ],
    "src/decode-teredo.c||src/decode-teredo.c": [
      "File: src/decode-teredo.c -> src/decode-teredo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:     if (IP_GET_RAW_VER(start) == 6) {",
      "105:         IPV6Hdr *thdr = (IPV6Hdr *)start;",
      "106:         if (len ==  IPV6_HEADER_LEN +",
      "107:                 IPV6_GET_RAW_PLEN(thdr) + (start - pkt)) {",
      "108:             if (pq != NULL) {",
      "109:                 int blen = len - (start - pkt);",
      "111:                 Packet *tp = PacketTunnelPktSetup(tv, dtv, p, start, blen,",
      "113:                 if (tp != NULL) {",
      "114:                     PKT_SET_SRC(tp, PKT_SRC_DECODER_TEREDO);",
      "",
      "[Removed Lines]",
      "112:                                                   DECODE_TUNNEL_IPV6, pq);",
      "",
      "[Added Lines]",
      "113:         if (IPV6_GET_RAW_HLIM(thdr) == 0)",
      "114:             return TM_ECODE_FAILED;",
      "117:         if (IPV6_GET_RAW_NH(thdr) == 0 && IPV6_GET_RAW_PLEN(thdr) < 8)",
      "118:             return TM_ECODE_FAILED;",
      "126:                                                   DECODE_TUNNEL_IPV6_TEREDO, pq);",
      "",
      "---------------"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:         case DECODE_TUNNEL_IPV4:",
      "80:             return DecodeIPV4(tv, dtv, p, pkt, len, pq);",
      "81:         case DECODE_TUNNEL_IPV6:",
      "82:             return DecodeIPV6(tv, dtv, p, pkt, len, pq);",
      "83:         case DECODE_TUNNEL_VLAN:",
      "84:             return DecodeVLAN(tv, dtv, p, pkt, len, pq);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         case DECODE_TUNNEL_IPV6_TEREDO:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:         case DECODE_TUNNEL_ERSPAN:",
      "88:             return DecodeERSPAN(tv, dtv, p, pkt, len, pq);",
      "89:         default:",
      "91:             break;",
      "92:     }",
      "93:     return TM_ECODE_OK;",
      "",
      "[Removed Lines]",
      "90:             SCLogInfo(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
      "",
      "[Added Lines]",
      "91:             SCLogDebug(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:     ret = DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),",
      "304:                        GET_PKT_LEN(p), pq, proto);",
      "308:         p->root = NULL;",
      "309:         UNSET_TUNNEL_PKT(p);",
      "310:         TmqhOutputPacketpool(tv, p);",
      "",
      "[Removed Lines]",
      "306:     if (unlikely(ret != TM_ECODE_OK)) {",
      "",
      "[Added Lines]",
      "307:     if (unlikely(ret != TM_ECODE_OK) ||",
      "308:             (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID)))",
      "309:     {",
      "311:         SCLogDebug(\"tunnel packet is invalid\");",
      "",
      "---------------"
    ],
    "src/decode.h||src/decode.h": [
      "File: src/decode.h -> src/decode.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "447c1042f476cb01d1020da47de4a33db113ebcb",
      "candidate_info": {
        "commit_hash": "447c1042f476cb01d1020da47de4a33db113ebcb",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/447c1042f476cb01d1020da47de4a33db113ebcb",
        "files": [
          "src/app-layer-smtp.c"
        ],
        "message": "smtp: improve pipelining support\n\nFixes #1863",
        "before_after_code_files": [
          "src/app-layer-smtp.c||src/app-layer-smtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3590"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/app-layer-smtp.c||src/app-layer-smtp.c": [
          "File: src/app-layer-smtp.c -> src/app-layer-smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #define SMTP_PARSER_STATE_FIRST_REPLY_SEEN        0x04",
          "83: #define SMTP_PARSER_STATE_PARSING_MULTILINE_REPLY 0x08",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #define SMTP_PARSER_STATE_PIPELINING_SERVER        0x10",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1001:     if (!(state->parser_state & SMTP_PARSER_STATE_PARSING_MULTILINE_REPLY)) {",
          "1002:         state->cmds_idx++;",
          "1003:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005:     } else if (state->parser_state & SMTP_PARSER_STATE_FIRST_REPLY_SEEN) {",
          "1007:         if (reply_code == SMTP_REPLY_250 && state->current_line_len == 14 &&",
          "1008:             SCMemcmpLowercase(\"pipelining\", state->current_line+4, 10) == 0) {",
          "1009:             state->parser_state |= SMTP_PARSER_STATE_PIPELINING_SERVER;",
          "1010:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1189:                     tx->msg_tail = tx->mime_state->msg;",
          "1190:                 }",
          "1191:             }",
          "1193:         } else if (state->current_line_len >= 4 &&",
          "1194:                    SCMemcmpLowercase(\"bdat\", state->current_line, 4) == 0) {",
          "1195:             r = SMTPParseCommandBDAT(state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1201:             if (state->parser_state & SMTP_PARSER_STATE_PIPELINING_SERVER) {",
          "1202:                 state->parser_state |= SMTP_PARSER_STATE_COMMAND_DATA_MODE;",
          "1203:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2795:         0x0d, 0x0a, 0x52, 0x43, 0x50, 0x54, 0x20, 0x54,",
          "2796:         0x4f, 0x3a, 0x70, 0x62, 0x73, 0x66, 0x40, 0x61,",
          "2797:         0x73, 0x64, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6d,",
          "2799:     };",
          "2800:     uint32_t request2_len = sizeof(request2);",
          "",
          "[Removed Lines]",
          "2798:         0x0d, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x0d, 0x0a",
          "",
          "[Added Lines]",
          "2810:         0x0d, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x0d, 0x0a,",
          "2811:         0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,",
          "2812:         0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0d, 0x0a,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2881:     if (smtp_state->input_len != 0 ||",
          "2882:         smtp_state->cmds_cnt != 0 ||",
          "2883:         smtp_state->cmds_idx != 0 ||",
          "2885:         printf(\"smtp parser in inconsistent state\\n\");",
          "2886:         goto end;",
          "2887:     }",
          "",
          "[Removed Lines]",
          "2884:         smtp_state->parser_state != SMTP_PARSER_STATE_FIRST_REPLY_SEEN) {",
          "",
          "[Added Lines]",
          "2898:         smtp_state->parser_state != ( SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "2899:                                       SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2901:         smtp_state->cmds[0] != SMTP_COMMAND_OTHER_CMD ||",
          "2902:         smtp_state->cmds[1] != SMTP_COMMAND_OTHER_CMD ||",
          "2903:         smtp_state->cmds[2] != SMTP_COMMAND_DATA ||",
          "2905:         printf(\"smtp parser in inconsistent state\\n\");",
          "2906:         goto end;",
          "2907:     }",
          "",
          "[Removed Lines]",
          "2904:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN)) {",
          "",
          "[Added Lines]",
          "2919:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "2920:                                      SMTP_PARSER_STATE_COMMAND_DATA_MODE |",
          "2921:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2919:         smtp_state->cmds_cnt != 0 ||",
          "2920:         smtp_state->cmds_idx != 0 ||",
          "2921:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "2923:         printf(\"smtp parser in inconsistent state\\n\");",
          "2924:         goto end;",
          "2925:     }",
          "",
          "[Removed Lines]",
          "2922:                                      SMTP_PARSER_STATE_COMMAND_DATA_MODE)) {",
          "",
          "[Added Lines]",
          "2939:                                      SMTP_PARSER_STATE_COMMAND_DATA_MODE |",
          "2940:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c8f6b22466e882e217a6278e026ef5beaf41979",
      "candidate_info": {
        "commit_hash": "4c8f6b22466e882e217a6278e026ef5beaf41979",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/4c8f6b22466e882e217a6278e026ef5beaf41979",
        "files": [
          "src/util-ioctl.c"
        ],
        "message": "offloading: on bsd, disable rxcsum and v6 variants",
        "before_after_code_files": [
          "src/util-ioctl.c||src/util-ioctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3590"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/util-ioctl.c||src/util-ioctl.c": [
          "File: src/util-ioctl.c -> src/util-ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:         SCLogPerf(\"%s: disabling rxcsum offloading\", ifname);",
          "593:         set_caps &= ~IFCAP_RXCSUM;",
          "594:     }",
          "596: #ifdef IFCAP_TOE",
          "597:     if (if_caps & (IFCAP_TSO|IFCAP_TOE|IFCAP_LRO)) {",
          "598:         SCLogPerf(\"%s: disabling tso|toe|lro offloading\", ifname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:     if (if_caps & IFCAP_TXCSUM) {",
          "596:         SCLogPerf(\"%s: disabling txcsum offloading\", ifname);",
          "597:         set_caps &= ~IFCAP_TXCSUM;",
          "598:     }",
          "599: #ifdef IFCAP_RXCSUM_IPV6",
          "600:     if (if_caps & IFCAP_RXCSUM_IPV6) {",
          "601:         SCLogPerf(\"%s: disabling rxcsum6 offloading\", ifname);",
          "602:         set_caps &= ~IFCAP_RXCSUM_IPV6;",
          "603:     }",
          "604: #endif",
          "605: #ifdef IFCAP_TXCSUM_IPV6",
          "606:     if (if_caps & IFCAP_TXCSUM_IPV6) {",
          "607:         SCLogPerf(\"%s: disabling txcsum6 offloading\", ifname);",
          "608:         set_caps &= ~IFCAP_TXCSUM_IPV6;",
          "609:     }",
          "610: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e30212c5d8b536f351927d943580b1fcac920fe9",
      "candidate_info": {
        "commit_hash": "e30212c5d8b536f351927d943580b1fcac920fe9",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/e30212c5d8b536f351927d943580b1fcac920fe9",
        "files": [
          "src/detect-engine.c",
          "src/util-luajit.c"
        ],
        "message": "detect: fix crash during startup with malformed yaml\n\ndetect-engine:\n  custom-values:\n    toclient-groups: 200\n    toserver-groups: 200\n\nBug #2745",
        "before_after_code_files": [
          "src/detect-engine.c||src/detect-engine.c",
          "src/util-luajit.c||src/util-luajit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3590"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/detect-engine.c||src/detect-engine.c": [
          "File: src/detect-engine.c -> src/detect-engine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1782:     if (de_ctx_custom != NULL) {",
          "1783:         TAILQ_FOREACH(opt, &de_ctx_custom->head, next) {",
          "1784:             if (de_ctx_profile == NULL) {",
          "1786:                     de_ctx_profile = opt->head.tqh_first->val;",
          "1787:                 }",
          "1788:             }",
          "1790:             if (sgh_mpm_context == NULL) {",
          "1792:                     sgh_mpm_context = opt->head.tqh_first->val;",
          "1793:                 }",
          "1794:             }",
          "",
          "[Removed Lines]",
          "1785:                 if (strcmp(opt->val, \"profile\") == 0) {",
          "1791:                 if (strcmp(opt->val, \"sgh-mpm-context\") == 0) {",
          "",
          "[Added Lines]",
          "1785:                 if (opt->val && strcmp(opt->val, \"profile\") == 0) {",
          "1791:                 if (opt->val && strcmp(opt->val, \"sgh-mpm-context\") == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1872:             if (de_ctx_custom != NULL) {",
          "1873:                 TAILQ_FOREACH(opt, &de_ctx_custom->head, next) {",
          "1875:                         if (max_uniq_toclient_groups_str == NULL) {",
          "1876:                             max_uniq_toclient_groups_str = (char *)ConfNodeLookupChildValue",
          "1877:                                 (opt->head.tqh_first, \"toclient-sp-groups\");",
          "",
          "[Removed Lines]",
          "1874:                     if (strcmp(opt->val, \"custom-values\") == 0) {",
          "",
          "[Added Lines]",
          "1874:                     if (opt->val && strcmp(opt->val, \"custom-values\") == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1950:         if (de_ctx_custom != NULL) {",
          "1951:             opt = NULL;",
          "1952:             TAILQ_FOREACH(opt, &de_ctx_custom->head, next) {",
          "1954:                     continue;",
          "1956:                 insp_recursion_limit_node = ConfNodeLookupChild(opt, opt->val);",
          "",
          "[Removed Lines]",
          "1953:                 if (strcmp(opt->val, \"inspection-recursion-limit\") != 0)",
          "",
          "[Added Lines]",
          "1953:                 if (opt->val && strcmp(opt->val, \"inspection-recursion-limit\") != 0)",
          "",
          "---------------"
        ],
        "src/util-luajit.c||src/util-luajit.c": [
          "File: src/util-luajit.c -> src/util-luajit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             ConfNode *decnf = ConfGetNode(\"detect-engine\");",
          "78:             if (decnf != NULL) {",
          "79:                 TAILQ_FOREACH(denode, &decnf->head, next) {",
          "81:                         ConfGetChildValueInt(denode, \"luajit-states\", &cnt);",
          "82:                     }",
          "83:                 }",
          "",
          "[Removed Lines]",
          "80:                     if (strcmp(denode->val, \"luajit-states\") == 0) {",
          "",
          "[Added Lines]",
          "80:                     if (denode->val && strcmp(denode->val, \"luajit-states\") == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa6b73d1c9f88d5ee534f5d85cb29d9426b78e20",
      "candidate_info": {
        "commit_hash": "fa6b73d1c9f88d5ee534f5d85cb29d9426b78e20",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/fa6b73d1c9f88d5ee534f5d85cb29d9426b78e20",
        "files": [
          "src/util-ioctl.c"
        ],
        "message": "offloading: don't set multiple times per interface\n\nThis could happen with netmap igb0->igb0^ IPS mode.",
        "before_after_code_files": [
          "src/util-ioctl.c||src/util-ioctl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3590"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/util-ioctl.c||src/util-ioctl.c": [
          "File: src/util-ioctl.c -> src/util-ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "692: int DisableIfaceOffloading(LiveDevice *dev, int csum, int other)",
          "693: {",
          "694: #if defined HAVE_LINUX_ETHTOOL_H && defined SIOCETHTOOL",
          "695:     return DisableIfaceOffloadingLinux(dev, csum, other);",
          "696: #elif defined SIOCSIFCAP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:     if (dev->offload_orig != 0)",
          "696:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fca771ef4d1467a07f7df5fdf508056243a2aeb",
      "candidate_info": {
        "commit_hash": "7fca771ef4d1467a07f7df5fdf508056243a2aeb",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/7fca771ef4d1467a07f7df5fdf508056243a2aeb",
        "files": [
          "src/app-layer-smtp.c"
        ],
        "message": "Fixes other affected tests for smtp pipelining\n\nEither checking state has pipelining\nOr removing pipelining from input",
        "before_after_code_files": [
          "src/app-layer-smtp.c||src/app-layer-smtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/suricata/pull/3590"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/app-layer-smtp.c||src/app-layer-smtp.c": [
          "File: src/app-layer-smtp.c -> src/app-layer-smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1990:         0x61, 0x5f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f,",
          "1991:         0x76, 0x6d, 0x31, 0x2e, 0x6c, 0x6f, 0x63, 0x61,",
          "1992:         0x6c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x0d,",
          "1995:         0x0a, 0x32, 0x35, 0x30, 0x2d, 0x53, 0x49, 0x5a,",
          "1996:         0x45, 0x20, 0x31, 0x30, 0x32, 0x34, 0x30, 0x30,",
          "1997:         0x30, 0x30, 0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d,",
          "",
          "[Removed Lines]",
          "1993:         0x0a, 0x32, 0x35, 0x30, 0x2d, 0x50, 0x49, 0x50,",
          "1994:         0x45, 0x4c, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x0d,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3197:     if (smtp_state->input_len != 0 ||",
          "3198:         smtp_state->cmds_cnt != 0 ||",
          "3199:         smtp_state->cmds_idx != 0 ||",
          "3201:         printf(\"smtp parser in inconsistent state\\n\");",
          "3202:         goto end;",
          "3203:     }",
          "",
          "[Removed Lines]",
          "3200:         smtp_state->parser_state != SMTP_PARSER_STATE_FIRST_REPLY_SEEN) {",
          "",
          "[Added Lines]",
          "3198:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "3199:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3215:         smtp_state->cmds_cnt != 1 ||",
          "3216:         smtp_state->cmds_idx != 0 ||",
          "3217:         smtp_state->cmds[0] != SMTP_COMMAND_STARTTLS ||",
          "3219:         printf(\"smtp parser in inconsistent state\\n\");",
          "3220:         goto end;",
          "3221:     }",
          "",
          "[Removed Lines]",
          "3218:         smtp_state->parser_state != SMTP_PARSER_STATE_FIRST_REPLY_SEEN) {",
          "",
          "[Added Lines]",
          "3217:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "3218:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3232:     if (smtp_state->input_len != 0 ||",
          "3233:         smtp_state->cmds_cnt != 0 ||",
          "3234:         smtp_state->cmds_idx != 0 ||",
          "3236:         printf(\"smtp parser in inconsistent state\\n\");",
          "3237:         goto end;",
          "3238:     }",
          "",
          "[Removed Lines]",
          "3235:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN)) {",
          "",
          "[Added Lines]",
          "3235:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "3236:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3257:         smtp_state->cmds_cnt != 1 ||",
          "3258:         smtp_state->cmds_idx != 0 ||",
          "3259:         smtp_state->cmds[0] != SMTP_COMMAND_OTHER_CMD ||",
          "3261:         printf(\"smtp parser in inconsistent state\\n\");",
          "3262:         goto end;",
          "3263:     }",
          "",
          "[Removed Lines]",
          "3260:         smtp_state->parser_state != SMTP_PARSER_STATE_FIRST_REPLY_SEEN) {",
          "",
          "[Added Lines]",
          "3261:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "3262:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3274:     if (smtp_state->input_len != 0 ||",
          "3275:         smtp_state->cmds_cnt != 0 ||",
          "3276:         smtp_state->cmds_idx != 0 ||",
          "3278:         printf(\"smtp parser in inconsistent state\\n\");",
          "3279:         goto end;",
          "3280:     }",
          "",
          "[Removed Lines]",
          "3277:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN)) {",
          "",
          "[Added Lines]",
          "3279:         smtp_state->parser_state != (SMTP_PARSER_STATE_FIRST_REPLY_SEEN |",
          "3280:                                      SMTP_PARSER_STATE_PIPELINING_SERVER)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3361:         0x5d, 0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d, 0x53,",
          "3362:         0x49, 0x5a, 0x45, 0x20, 0x32, 0x39, 0x36, 0x39,",
          "3363:         0x36, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x32, 0x35,",
          "3366:         0x30, 0x2d, 0x38, 0x62, 0x69, 0x74, 0x6d, 0x69,",
          "3367:         0x6d, 0x65, 0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d,",
          "3368:         0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x4d, 0x49,",
          "",
          "[Removed Lines]",
          "3364:         0x30, 0x2d, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49,",
          "3365:         0x4e, 0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, 0x35,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4512:             0x61, 0x5f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f,",
          "4513:             0x76, 0x6d, 0x31, 0x2e, 0x6c, 0x6f, 0x63, 0x61,",
          "4514:             0x6c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x0d,",
          "4517:             0x0a, 0x32, 0x35, 0x30, 0x2d, 0x53, 0x49, 0x5a,",
          "4518:             0x45, 0x20, 0x31, 0x30, 0x32, 0x34, 0x30, 0x30,",
          "4519:             0x30, 0x30, 0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d,",
          "",
          "[Removed Lines]",
          "4515:             0x0a, 0x32, 0x35, 0x30, 0x2d, 0x50, 0x49, 0x50,",
          "4516:             0x45, 0x4c, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x0d,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}