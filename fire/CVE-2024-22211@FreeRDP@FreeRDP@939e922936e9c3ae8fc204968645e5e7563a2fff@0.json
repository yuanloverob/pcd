{
  "cve_id": "CVE-2024-22211",
  "cve_desc": "FreeRDP is a set of free and open source remote desktop protocol library and clients. In affected versions an integer overflow in `freerdp_bitmap_planar_context_reset` leads to heap-buffer overflow. This affects FreeRDP based clients. FreeRDP based server implementations and proxy are not affected. A malicious server could prepare a `RDPGFX_RESET_GRAPHICS_PDU` to allocate too small buffers, possibly triggering later out of bound read/write. Data extraction over network is not possible, the buffers are used to display an image. This issue has been addressed in version 2.11.5 and 3.2.0. Users are advised to upgrade. there are no know workarounds for this vulnerability.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "939e922936e9c3ae8fc204968645e5e7563a2fff",
  "patch_info": {
    "commit_hash": "939e922936e9c3ae8fc204968645e5e7563a2fff",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/939e922936e9c3ae8fc204968645e5e7563a2fff",
    "files": [
      "libfreerdp/codec/planar.c"
    ],
    "message": "[codec,planar] check resolution for overflow\n\nIf the codec resolution is too large return an error as the internal\nbuffers would otherwise overflow.",
    "before_after_code_files": [
      "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
      "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1655:  context->bgr = FALSE;",
      "1656:  context->maxWidth = PLANAR_ALIGN(width, 4);",
      "1657:  context->maxHeight = PLANAR_ALIGN(height, 4);",
      "1659:  context->nTempStep = context->maxWidth * 4;",
      "1661:  memset(context->planes, 0, sizeof(context->planes));",
      "",
      "[Removed Lines]",
      "1658:  context->maxPlaneSize = context->maxWidth * context->maxHeight;",
      "",
      "[Added Lines]",
      "1658:  const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
      "1659:  if (tmp > UINT32_MAX)",
      "1660:   return FALSE;",
      "1661:  context->maxPlaneSize = tmp;",
      "1663:  if (context->maxWidth > UINT32_MAX / 4)",
      "1664:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e272eb396622e81ad53ba9f4f078c51effaace60",
      "candidate_info": {
        "commit_hash": "e272eb396622e81ad53ba9f4f078c51effaace60",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e272eb396622e81ad53ba9f4f078c51effaace60",
        "files": [
          "client/common/cmdline.c",
          "libfreerdp/codec/ncrush.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/planar.c",
          "libfreerdp/codec/progressive.c",
          "libfreerdp/common/assistance.c",
          "winpr/libwinpr/smartcard/smartcard_pcsc.c",
          "winpr/libwinpr/synch/wait.c",
          "winpr/libwinpr/utils/print.c",
          "winpr/tools/hash-cli/hash.c"
        ],
        "message": "[warnings] fix Wshadow warnings",
        "before_after_code_files": [
          "client/common/cmdline.c||client/common/cmdline.c",
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c",
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c",
          "libfreerdp/common/assistance.c||libfreerdp/common/assistance.c",
          "winpr/libwinpr/smartcard/smartcard_pcsc.c||winpr/libwinpr/smartcard/smartcard_pcsc.c",
          "winpr/libwinpr/synch/wait.c||winpr/libwinpr/synch/wait.c",
          "winpr/libwinpr/utils/print.c||winpr/libwinpr/utils/print.c",
          "winpr/tools/hash-cli/hash.c||winpr/tools/hash-cli/hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ],
          "candidate": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ]
        }
      },
      "candidate_diff": {
        "client/common/cmdline.c||client/common/cmdline.c": [
          "File: client/common/cmdline.c -> client/common/cmdline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2397:   if (p)",
          "2398:   {",
          "2400:    size_t length = 0;",
          "2403:     return COMMAND_LINE_ERROR_UNEXPECTED_VALUE;",
          "2405:    length = (size_t)(p - arg->Value);",
          "2407:     return COMMAND_LINE_ERROR_UNEXPECTED_VALUE;",
          "2408:    if (!freerdp_settings_set_string_len(settings, FreeRDP_ServerHostname, arg->Value,",
          "2409:                                         length))",
          "",
          "[Removed Lines]",
          "2399:    LONGLONG val = 0;",
          "2402:    if (!value_to_int(&p[1], &val, 1, UINT16_MAX))",
          "2406:    if (!freerdp_settings_set_uint32(settings, FreeRDP_ServerPort, val))",
          "",
          "[Added Lines]",
          "2399:    LONGLONG lval = 0;",
          "2402:    if (!value_to_int(&p[1], &lval, 1, UINT16_MAX))",
          "2406:    if (!freerdp_settings_set_uint32(settings, FreeRDP_ServerPort, lval))",
          "",
          "---------------"
        ],
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2936:  WINPR_ASSERT(context);",
          "2937:  WINPR_ASSERT(28 < ARRAYSIZE(LOMBitsLUT));",
          "2940:  for (int i = 0; i < 28; i++)",
          "2941:  {",
          "2942:   for (int j = 0; j < 1 << LOMBitsLUT[i]; j++)",
          "2943:   {",
          "2945:    context->HuffTableLOM[l] = (int)i;",
          "2946:   }",
          "2947:  }",
          "",
          "[Removed Lines]",
          "2939:  UINT32 k = 0;",
          "2944:    size_t l = (k++) + 2ull;",
          "",
          "[Added Lines]",
          "2939:  UINT32 cnt = 0;",
          "2944:    size_t l = (cnt++) + 2ull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2961:    return -1;",
          "2962:  }",
          "2966:  for (int i = 0; i < 16; i++)",
          "2967:  {",
          "2968:   for (int j = 0; j < 1 << CopyOffsetBitsLUT[i]; j++)",
          "",
          "[Removed Lines]",
          "2964:  k = 0;",
          "",
          "[Added Lines]",
          "2964:  size_t k = 0;",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: static BOOL nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data, UINT32 scanline)",
          "113: {",
          "115:  UINT16 y = 0;",
          "116:  UINT16 rw = 0;",
          "117:  BYTE ccl = 0;",
          "",
          "[Removed Lines]",
          "114:  UINT16 x = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   cgplane = context->priv->PlaneBuffers[2] + y * rw;",
          "139:   aplane = context->priv->PlaneBuffers[3] + y * context->width;",
          "142:   {",
          "143:    switch (context->format)",
          "144:    {",
          "",
          "[Removed Lines]",
          "141:   for (UINT16 x = 0; x < context->width; x++)",
          "",
          "[Added Lines]",
          "140:   UINT16 x = 0;",
          "141:   for (; x < context->width; x++)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
          "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1675:  context->bgr = FALSE;",
          "1676:  context->maxWidth = PLANAR_ALIGN(width, 4);",
          "1677:  context->maxHeight = PLANAR_ALIGN(height, 4);",
          "1683:  if (context->maxWidth > UINT32_MAX / 4)",
          "1684:   return FALSE;",
          "",
          "[Removed Lines]",
          "1678:  const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
          "1679:  if (tmp > UINT32_MAX)",
          "1680:   return FALSE;",
          "1681:  context->maxPlaneSize = tmp;",
          "",
          "[Added Lines]",
          "1678:  {",
          "1679:   const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
          "1680:   if (tmp > UINT32_MAX)",
          "1681:    return FALSE;",
          "1682:   context->maxPlaneSize = tmp;",
          "1683:  }",
          "",
          "---------------"
        ],
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1673:  int status = 0;",
          "1674:  size_t end = 0;",
          "1675:  const size_t start = Stream_GetPosition(s);",
          "1677:  UINT16 blockType = 0;",
          "1678:  UINT32 blockLen = 0;",
          "1679:  UINT32 count = 0;",
          "",
          "[Removed Lines]",
          "1676:  UINT16 index = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1779:   return -1;",
          "1780:  }",
          "1783:  {",
          "1786:   param->progressive = progressive;",
          "1787:   param->region = region;",
          "1788:   param->context = context;",
          "",
          "[Removed Lines]",
          "1782:  for (UINT32 index = 0; index < region->numTiles; index++)",
          "1784:   RFX_PROGRESSIVE_TILE* tile = region->tiles[index];",
          "1785:   PROGRESSIVE_TILE_PROCESS_WORK_PARAM* param = &params[index];",
          "",
          "[Added Lines]",
          "1781:  for (UINT32 idx = 0; idx < region->numTiles; idx++)",
          "1783:   RFX_PROGRESSIVE_TILE* tile = region->tiles[idx];",
          "1784:   PROGRESSIVE_TILE_PROCESS_WORK_PARAM* param = &params[idx];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1791:   if (progressive->rfx_context->priv->UseThreads)",
          "1792:   {",
          "1795:              &progressive->rfx_context->priv->ThreadPoolEnv)))",
          "1796:    {",
          "1798:     status = -1;",
          "1799:     break;",
          "1800:    }",
          "1804:   }",
          "1805:   else",
          "1806:   {",
          "1808:   }",
          "1810:   if (status < 0)",
          "1811:   {",
          "1812:    WLog_Print(progressive->log, WLOG_ERROR, \"Failed to decompress %s at %\" PRIu16,",
          "1814:    goto fail;",
          "1815:   }",
          "1816:  }",
          "1822:  if (progressive->rfx_context->priv->UseThreads)",
          "1823:  {",
          "1825:   {",
          "1828:   }",
          "1829:  }",
          "",
          "[Removed Lines]",
          "1793:    if (!(work_objects[index] = CreateThreadpoolWork(",
          "1794:              progressive_process_tiles_tile_work_callback, (void*)&params[index],",
          "1797:     WLog_ERR(TAG, \"CreateThreadpoolWork failed.\");",
          "1802:    SubmitThreadpoolWork(work_objects[index]);",
          "1803:    close_cnt = index + 1;",
          "1807:    progressive_process_tiles_tile_work_callback(0, &params[index], 0);",
          "1813:               rfx_get_progressive_block_type_string(tile->blockType), index);",
          "1818:  if (status < 0)",
          "1819:   WLog_Print(progressive->log, WLOG_ERROR,",
          "1820:              \"Failed to create ThreadpoolWork for tile %\" PRIu16, index);",
          "1824:   for (UINT32 index = 0; index < close_cnt; index++)",
          "1826:    WaitForThreadpoolWorkCallbacks(work_objects[index], FALSE);",
          "1827:    CloseThreadpoolWork(work_objects[index]);",
          "",
          "[Added Lines]",
          "1792:    if (!(work_objects[idx] = CreateThreadpoolWork(",
          "1793:              progressive_process_tiles_tile_work_callback, (void*)&params[idx],",
          "1796:     WLog_Print(progressive->log, WLOG_ERROR,",
          "1797:                \"Failed to create ThreadpoolWork for tile %\" PRIu32, idx);",
          "1802:    SubmitThreadpoolWork(work_objects[idx]);",
          "1803:    close_cnt = idx + 1;",
          "1807:    progressive_process_tiles_tile_work_callback(0, &params[idx], 0);",
          "1813:               rfx_get_progressive_block_type_string(tile->blockType), idx);",
          "1820:   for (UINT32 idx = 0; idx < close_cnt; idx++)",
          "1822:    WaitForThreadpoolWorkCallbacks(work_objects[idx], FALSE);",
          "1823:    CloseThreadpoolWork(work_objects[idx]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2525:  if (invalidRegion)",
          "2526:  {",
          "2527:   const RECTANGLE_16* region_rects = region16_rects(invalidRegion, NULL);",
          "2529:   {",
          "2533:    rect->x = r->left;",
          "2534:    rect->y = r->top;",
          "",
          "[Removed Lines]",
          "2528:   for (UINT32 x = 0; x < numRects; x++)",
          "2530:    const RECTANGLE_16* r = &region_rects[x];",
          "2531:    RFX_RECT* rect = &rects[x];",
          "",
          "[Added Lines]",
          "2524:   for (UINT32 idx = 0; idx < numRects; idx++)",
          "2526:    const RECTANGLE_16* r = &region_rects[idx];",
          "2527:    RFX_RECT* rect = &rects[idx];",
          "",
          "---------------"
        ],
        "libfreerdp/common/assistance.c||libfreerdp/common/assistance.c": [
          "File: libfreerdp/common/assistance.c -> libfreerdp/common/assistance.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352:  for (size_t x = 0; x < ports; x++)",
          "1353:  {",
          "1356:    return FALSE;",
          "1357:  }",
          "1358:  for (size_t i = 0; i < addresses; i++)",
          "",
          "[Removed Lines]",
          "1354:   const UINT32 port = (UINT32)ArrayList_GetItem(file->MachinePorts, x);",
          "1355:   if (!freerdp_settings_set_pointer_array(settings, FreeRDP_TargetNetPorts, x, &port))",
          "",
          "[Added Lines]",
          "1354:   const UINT32 mport = (UINT32)ArrayList_GetItem(file->MachinePorts, x);",
          "1355:   if (!freerdp_settings_set_pointer_array(settings, FreeRDP_TargetNetPorts, x, &mport))",
          "",
          "---------------"
        ],
        "winpr/libwinpr/smartcard/smartcard_pcsc.c||winpr/libwinpr/smartcard/smartcard_pcsc.c": [
          "File: winpr/libwinpr/smartcard/smartcard_pcsc.c -> winpr/libwinpr/smartcard/smartcard_pcsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1610:   if (map[i] < 0)",
          "1618:  }",
          "1620:  free(map);",
          "",
          "[Removed Lines]",
          "1613:   PCSC_DWORD j = (PCSC_DWORD)map[i];",
          "1614:   rgReaderStates[i].dwCurrentState = (DWORD)states[j].dwCurrentState;",
          "1615:   rgReaderStates[i].cbAtr = (DWORD)states[j].cbAtr;",
          "1616:   CopyMemory(&(rgReaderStates[i].rgbAtr), &(states[j].rgbAtr), PCSC_MAX_ATR_SIZE);",
          "1617:   rgReaderStates[i].dwEventState = (DWORD)states[j].dwEventState;",
          "",
          "[Added Lines]",
          "1613:   PCSC_DWORD k = (PCSC_DWORD)map[i];",
          "1614:   rgReaderStates[i].dwCurrentState = (DWORD)states[k].dwCurrentState;",
          "1615:   rgReaderStates[i].cbAtr = (DWORD)states[k].cbAtr;",
          "1616:   CopyMemory(&(rgReaderStates[i].rgbAtr), &(states[k].rgbAtr), PCSC_MAX_ATR_SIZE);",
          "1617:   rgReaderStates[i].dwEventState = (DWORD)states[k].dwEventState;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/synch/wait.c||winpr/libwinpr/synch/wait.c": [
          "File: winpr/libwinpr/synch/wait.c -> winpr/libwinpr/synch/wait.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:   polled = 0;",
          "367:   {",
          "368:    if (bWaitAll)",
          "369:    {",
          "371:      continue;",
          "374:    }",
          "377:    {",
          "379:     winpr_log_backtrace(TAG, WLOG_ERROR, 20);",
          "380:     SetLastError(ERROR_INVALID_HANDLE);",
          "381:     goto out;",
          "",
          "[Removed Lines]",
          "365:   DWORD index = 0;",
          "366:   for (; index < nCount; index++)",
          "370:     if (signalled_handles[index])",
          "373:     poll_map[polled] = index;",
          "376:    if (!winpr_Handle_GetInfo(lpHandles[index], &Type, &Object))",
          "378:     WLog_ERR(TAG, \"invalid event file descriptor at %\" PRIu32, index);",
          "",
          "[Added Lines]",
          "365:   DWORD idx = 0;",
          "366:   for (; idx < nCount; idx++)",
          "370:     if (signalled_handles[idx])",
          "373:     poll_map[polled] = idx;",
          "376:    if (!winpr_Handle_GetInfo(lpHandles[idx], &Type, &Object))",
          "378:     WLog_ERR(TAG, \"invalid event file descriptor at %\" PRIu32, idx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:    fd = winpr_Handle_getFd(Object);",
          "385:    if (fd == -1)",
          "386:    {",
          "388:     winpr_log_backtrace(TAG, WLOG_ERROR, 20);",
          "389:     SetLastError(ERROR_INVALID_HANDLE);",
          "390:     goto out;",
          "",
          "[Removed Lines]",
          "387:     WLog_ERR(TAG, \"invalid file descriptor at %\" PRIu32, index);",
          "",
          "[Added Lines]",
          "387:     WLog_ERR(TAG, \"invalid file descriptor at %\" PRIu32, idx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:    if (!pollset_add(&pollset, fd, Object->Mode))",
          "394:    {",
          "396:     winpr_log_backtrace(TAG, WLOG_ERROR, 20);",
          "397:     SetLastError(ERROR_INVALID_HANDLE);",
          "398:     goto out;",
          "",
          "[Removed Lines]",
          "395:     WLog_ERR(TAG, \"unable to register fd in pollset at %\" PRIu32, index);",
          "",
          "[Added Lines]",
          "395:     WLog_ERR(TAG, \"unable to register fd in pollset at %\" PRIu32, idx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "426:    {",
          "427:     char ebuffer[256] = { 0 };",
          "428: #ifdef WINPR_HAVE_POLL_H",
          "430:              nCount, errno, winpr_strerror(errno, ebuffer, sizeof(ebuffer)));",
          "431: #else",
          "433:              nCount, errno, winpr_strerror(errno, ebuffer, sizeof(ebuffer)));",
          "434: #endif",
          "435:     winpr_log_backtrace(TAG, WLOG_ERROR, 20);",
          "",
          "[Removed Lines]",
          "429:     WLog_ERR(TAG, \"poll() handle %\" PRIu32 \" (%\" PRIu32 \") failure [%d] %s\", index,",
          "432:     WLog_ERR(TAG, \"select() handle %\" PRIu32 \" (%\" PRIu32 \") failure [%d] %s\", index,",
          "",
          "[Added Lines]",
          "429:     WLog_ERR(TAG, \"poll() handle %\" PRIu32 \" (%\" PRIu32 \") failure [%d] %s\", idx,",
          "432:     WLog_ERR(TAG, \"select() handle %\" PRIu32 \" (%\" PRIu32 \") failure [%d] %s\", idx,",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/print.c||winpr/libwinpr/utils/print.c": [
          "File: winpr/libwinpr/utils/print.c -> winpr/libwinpr/utils/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:    pos += (size_t)rc;",
          "110:   }",
          "113:   {",
          "114:    rc = _snprintf(&buffer[pos], blen - pos, \"%c\",",
          "117:    if (rc < 0)",
          "118:     goto fail;",
          "",
          "[Removed Lines]",
          "112:   for (size_t i = 0; i < line; i++)",
          "115:                   (p[i] >= 0x20 && p[i] < 0x7F) ? (char)p[i] : '.');",
          "",
          "[Added Lines]",
          "112:   for (size_t j = 0; j < line; j++)",
          "115:                   (p[j] >= 0x20 && p[j] < 0x7F) ? (char)p[j] : '.');",
          "",
          "---------------"
        ],
        "winpr/tools/hash-cli/hash.c||winpr/tools/hash-cli/hash.c": [
          "File: winpr/tools/hash-cli/hash.c -> winpr/tools/hash-cli/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  if (format == 0)",
          "191:  {",
          "195:   printf(\"\\n\");",
          "196:  }",
          "",
          "[Removed Lines]",
          "192:   for (int index = 0; index < 16; index++)",
          "193:    printf(\"%02\" PRIx8 \"\", NtHash[index]);",
          "",
          "[Added Lines]",
          "192:   for (int idx = 0; idx < 16; idx++)",
          "193:    printf(\"%02\" PRIx8 \"\", NtHash[idx]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:   printf(\":\");",
          "211:   printf(\":::\");",
          "212:   printf(\"\\n\");",
          "",
          "[Removed Lines]",
          "208:   for (int index = 0; index < 16; index++)",
          "209:    printf(\"%02\" PRIx8 \"\", NtHash[index]);",
          "",
          "[Added Lines]",
          "208:   for (int idx = 0; idx < 16; idx++)",
          "209:    printf(\"%02\" PRIx8 \"\", NtHash[idx]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aeac3040cc99eeaff1e1171a822114c857b9dca9",
      "candidate_info": {
        "commit_hash": "aeac3040cc99eeaff1e1171a822114c857b9dca9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/aeac3040cc99eeaff1e1171a822114c857b9dca9",
        "files": [
          "libfreerdp/codec/planar.c"
        ],
        "message": "[codec,planar] check resolution for overflow\n\nIf the codec resolution is too large return an error as the internal\nbuffers would otherwise overflow.\n\n(cherry picked from commit 44edab1deae4f8c901c00a00683f888cef36d853)",
        "before_after_code_files": [
          "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ],
          "candidate": [
            "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
          "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:  context->bgr = FALSE;",
          "1497:  context->maxWidth = PLANAR_ALIGN(width, 4);",
          "1498:  context->maxHeight = PLANAR_ALIGN(height, 4);",
          "1500:  context->nTempStep = context->maxWidth * 4;",
          "1501:  free(context->planesBuffer);",
          "1502:  free(context->pTempData);",
          "",
          "[Removed Lines]",
          "1499:  context->maxPlaneSize = context->maxWidth * context->maxHeight;",
          "",
          "[Added Lines]",
          "1499:  const UINT64 tmp = (UINT64)context->maxWidth * context->maxHeight;",
          "1500:  if (tmp > UINT32_MAX)",
          "1501:   return FALSE;",
          "1502:  context->maxPlaneSize = tmp;",
          "1504:  if (context->maxWidth > UINT32_MAX / 4)",
          "1505:   return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}