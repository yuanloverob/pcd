{
  "cve_id": "CVE-2024-40130",
  "cve_desc": "open5gs v2.6.4 is vulnerable to Buffer Overflow. via /lib/core/abts.c.",
  "repo": "open5gs/open5gs",
  "patch_hash": "2f8ae91b0b9467f94f128090c88cae91bd73e008",
  "patch_info": {
    "commit_hash": "2f8ae91b0b9467f94f128090c88cae91bd73e008",
    "repo": "open5gs/open5gs",
    "commit_url": "https://github.com/open5gs/open5gs/commit/2f8ae91b0b9467f94f128090c88cae91bd73e008",
    "files": [
      "src/main.c",
      "tests/app/5gc-init.c",
      "tests/app/app-init.c",
      "tests/app/epc-init.c",
      "tests/common/application.c",
      "tests/common/context.c",
      "tests/common/context.h",
      "tests/common/gtpu.c",
      "tests/common/ngap-build.c",
      "tests/common/s1ap-handler.c",
      "tests/core/abts-main.c",
      "tests/crypt/abts-main.c",
      "tests/handover/epc-s1-test.c",
      "tests/sctp/abts-main.c",
      "tests/unit/abts-main.c"
    ],
    "message": "Fixed dynamic-stack-buffer-overflow (#2578, #2577)",
    "before_after_code_files": [
      "src/main.c||src/main.c",
      "tests/app/5gc-init.c||tests/app/5gc-init.c",
      "tests/app/app-init.c||tests/app/app-init.c",
      "tests/app/epc-init.c||tests/app/epc-init.c",
      "tests/common/application.c||tests/common/application.c",
      "tests/common/context.c||tests/common/context.c",
      "tests/common/context.h||tests/common/context.h",
      "tests/common/gtpu.c||tests/common/gtpu.c",
      "tests/common/ngap-build.c||tests/common/ngap-build.c",
      "tests/common/s1ap-handler.c||tests/common/s1ap-handler.c",
      "tests/core/abts-main.c||tests/core/abts-main.c",
      "tests/crypt/abts-main.c||tests/crypt/abts-main.c",
      "tests/handover/epc-s1-test.c||tests/handover/epc-s1-test.c",
      "tests/sctp/abts-main.c||tests/sctp/abts-main.c",
      "tests/unit/abts-main.c||tests/unit/abts-main.c"
    ]
  },
  "patch_diff": {
    "src/main.c||src/main.c": [
      "File: src/main.c -> src/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:         bool enable_debug;",
      "112:         bool enable_trace;",
      "113:     } optarg;",
      "116:     memset(&optarg, 0, sizeof(optarg));",
      "",
      "[Removed Lines]",
      "114:     const char *argv_out[argc];",
      "",
      "[Added Lines]",
      "114:     const char *argv_out[argc+1];",
      "",
      "---------------"
    ],
    "tests/app/5gc-init.c||tests/app/5gc-init.c": [
      "File: tests/app/5gc-init.c -> tests/app/5gc-init.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:     bool user_config = false;",
      "38:     int i = 0;",
      "41:         if (strcmp(\"-c\", argv[i]) == 0) {",
      "42:             user_config = true;",
      "43:         }",
      "",
      "[Removed Lines]",
      "40:     for (i = 0; argv[i]; i++) {",
      "",
      "[Added Lines]",
      "40:     for (i = 0; argv[i] && i < OGS_ARG_MAX-3; i++) {",
      "",
      "---------------"
    ],
    "tests/app/app-init.c||tests/app/app-init.c": [
      "File: tests/app/app-init.c -> tests/app/app-init.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     bool user_config = false;",
      "43:     int i = 0;",
      "46:         if (strcmp(\"-c\", argv[i]) == 0) {",
      "47:             user_config = true;",
      "48:         }",
      "",
      "[Removed Lines]",
      "45:     for (i = 0; argv[i]; i++) {",
      "",
      "[Added Lines]",
      "45:     for (i = 0; argv[i] && i < OGS_ARG_MAX-3; i++) {",
      "",
      "---------------"
    ],
    "tests/app/epc-init.c||tests/app/epc-init.c": [
      "File: tests/app/epc-init.c -> tests/app/epc-init.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     bool user_config = false;",
      "34:     int i = 0;",
      "37:         if (strcmp(\"-c\", argv[i]) == 0) {",
      "38:             user_config = true;",
      "39:         }",
      "",
      "[Removed Lines]",
      "36:     for (i = 0; argv[i]; i++) {",
      "",
      "[Added Lines]",
      "36:     for (i = 0; argv[i] && i < OGS_ARG_MAX-3; i++) {",
      "",
      "---------------"
    ],
    "tests/common/application.c||tests/common/application.c": [
      "File: tests/common/application.c -> tests/common/application.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:     bool user_config;",
      "31:     int argc_out;",
      "33:     char conf_file[OGS_MAX_FILEPATH_LEN];",
      "",
      "[Removed Lines]",
      "30:     const char *argv_out[argc+4], *new_argv[argc+4];",
      "",
      "[Added Lines]",
      "30:     const char *argv_out[argc+5], *new_argv[argc+5];",
      "",
      "---------------"
    ],
    "tests/common/context.c||tests/common/context.c": [
      "File: tests/common/context.c -> tests/common/context.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "128:     if (test_self()->nr_served_tai[index].list2.num) {",
      "129:         memcpy(&test_self()->nr_tai,",
      "131:     } else if (test_self()->nr_served_tai[index].list1.tai[0].num) {",
      "132:         test_self()->nr_tai.tac =",
      "133:             test_self()->nr_served_tai[index].list1.tai[0].tac;",
      "",
      "[Removed Lines]",
      "130:             &test_self()->nr_served_tai[index].list2.tai[0], sizeof(ogs_5gs_tai_t));",
      "",
      "[Added Lines]",
      "130:             &test_self()->nr_served_tai[index].list2.tai[0],",
      "131:             sizeof(ogs_5gs_tai_t));",
      "",
      "---------------"
    ],
    "tests/common/context.h||tests/common/context.h": [
      "File: tests/common/context.h -> tests/common/context.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:     struct {",
      "482:         uint32_t dl_teid;",
      "483:         ogs_ip_t dl_ip;",
      "484:         uint32_t ul_teid;",
      "485:         ogs_ip_t ul_ip;",
      "486:     } handover;",
      "",
      "---------------"
    ],
    "tests/common/gtpu.c||tests/common/gtpu.c": [
      "File: tests/common/gtpu.c -> tests/common/gtpu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "535:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
      "537:     } else if (bearer->ebi) {",
      "542:     } else {",
      "543:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
      "",
      "[Removed Lines]",
      "539:         ogs_fatal(\"Not implmented EPC Indirect Tunnel\");",
      "540:         ogs_assert_if_reached();",
      "",
      "[Added Lines]",
      "538:         gtp_hdesc.teid = bearer->handover.ul_teid;",
      "",
      "---------------"
    ],
    "tests/common/ngap-build.c||tests/common/ngap-build.c": [
      "File: tests/common/ngap-build.c -> tests/common/ngap-build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: ogs_pkbuf_t *testngap_build_ng_setup_request(uint32_t gnb_id, uint8_t bitsize)",
      "38: {",
      "39:     ogs_pkbuf_t *pkbuf = NULL;",
      "41:     ogs_plmn_id_t *plmn_id = NULL;",
      "42:     const char *ran_node_name = \"5G gNB-CU\";",
      "",
      "[Removed Lines]",
      "40:     int i, j;",
      "",
      "[Added Lines]",
      "40:     int i, j, k, num = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:     ogs_asn_buffer_to_OCTET_STRING((char*)ran_node_name,",
      "119:             strlen(ran_node_name), RANNodeName);",
      "122:     if (test_self()->nr_served_tai[0].list2.num)",
      "126:     else if (test_self()->nr_served_tai[0].list0.tai[0].num)",
      "130:     else",
      "131:         ogs_assert_if_reached();",
      "151:             }",
      "155:         }",
      "159:     }",
      "165:     return ogs_ngap_encode(&pdu);",
      "",
      "[Removed Lines]",
      "121:     SupportedTAItem = CALLOC(1, sizeof(NGAP_SupportedTAItem_t));",
      "123:         ogs_asn_uint24_to_OCTET_STRING(",
      "124:             test_self()->nr_served_tai[0].list2.tai[0].tac,",
      "125:             &SupportedTAItem->tAC);",
      "127:         ogs_asn_uint24_to_OCTET_STRING(",
      "128:             test_self()->nr_served_tai[0].list0.tai[0].tac[0],",
      "129:                 &SupportedTAItem->tAC);",
      "133:     for (i = 0; i < test_self()->num_of_plmn_support; i++) {",
      "134:         plmn_id = &test_self()->plmn_support[i].plmn_id;",
      "136:         BroadcastPLMNItem = CALLOC(1, sizeof(NGAP_BroadcastPLMNItem_t));",
      "138:         ogs_asn_buffer_to_OCTET_STRING(",
      "139:                 plmn_id, OGS_PLMN_ID_LEN, &BroadcastPLMNItem->pLMNIdentity);",
      "141:         for (j = 0; j < test_self()->plmn_support[i].num_of_s_nssai; j++) {",
      "142:             ogs_s_nssai_t *s_nssai = &test_self()->plmn_support[i].s_nssai[j];",
      "144:             SliceSupportItem = CALLOC(1, sizeof(NGAP_SliceSupportItem_t));",
      "145:             ogs_asn_uint8_to_OCTET_STRING(s_nssai->sst,",
      "146:                     &SliceSupportItem->s_NSSAI.sST);",
      "147:             if (s_nssai->sd.v != OGS_S_NSSAI_NO_SD_VALUE) {",
      "148:                 SliceSupportItem->s_NSSAI.sD = CALLOC(1, sizeof(NGAP_SD_t));",
      "149:                 ogs_asn_uint24_to_OCTET_STRING(",
      "150:                         s_nssai->sd, SliceSupportItem->s_NSSAI.sD);",
      "153:             ASN_SEQUENCE_ADD(&BroadcastPLMNItem->tAISliceSupportList.list,",
      "154:                             SliceSupportItem);",
      "157:         ASN_SEQUENCE_ADD(&SupportedTAItem->broadcastPLMNList.list,",
      "158:                 BroadcastPLMNItem);",
      "161:     ASN_SEQUENCE_ADD(&SupportedTAList->list, SupportedTAItem);",
      "",
      "[Added Lines]",
      "122:         num = test_self()->nr_served_tai[0].list2.num;",
      "124:         num = test_self()->nr_served_tai[0].list0.tai[0].num;",
      "128:     for (i = 0; i < num; i++) {",
      "129:         SupportedTAItem = CALLOC(1, sizeof(NGAP_SupportedTAItem_t));",
      "130:         if (test_self()->nr_served_tai[0].list2.num)",
      "131:             ogs_asn_uint24_to_OCTET_STRING(",
      "132:                 test_self()->nr_served_tai[0].list2.tai[i].tac,",
      "133:                 &SupportedTAItem->tAC);",
      "134:         else if (test_self()->nr_served_tai[0].list0.tai[0].num)",
      "135:             ogs_asn_uint24_to_OCTET_STRING(",
      "136:                 test_self()->nr_served_tai[0].list0.tai[0].tac[i],",
      "137:                     &SupportedTAItem->tAC);",
      "138:         else",
      "139:             ogs_assert_if_reached();",
      "141:         for (j = 0; j < test_self()->num_of_plmn_support; j++) {",
      "142:             plmn_id = &test_self()->plmn_support[j].plmn_id;",
      "144:             BroadcastPLMNItem = CALLOC(1, sizeof(NGAP_BroadcastPLMNItem_t));",
      "146:             ogs_asn_buffer_to_OCTET_STRING(",
      "147:                     plmn_id, OGS_PLMN_ID_LEN, &BroadcastPLMNItem->pLMNIdentity);",
      "149:             for (k = 0; k < test_self()->plmn_support[j].num_of_s_nssai; k++) {",
      "150:                 ogs_s_nssai_t *s_nssai =",
      "151:                     &test_self()->plmn_support[j].s_nssai[k];",
      "153:                 SliceSupportItem = CALLOC(1, sizeof(NGAP_SliceSupportItem_t));",
      "154:                 ogs_asn_uint8_to_OCTET_STRING(s_nssai->sst,",
      "155:                         &SliceSupportItem->s_NSSAI.sST);",
      "156:                 if (s_nssai->sd.v != OGS_S_NSSAI_NO_SD_VALUE) {",
      "157:                     SliceSupportItem->s_NSSAI.sD = CALLOC(1, sizeof(NGAP_SD_t));",
      "158:                     ogs_asn_uint24_to_OCTET_STRING(",
      "159:                             s_nssai->sd, SliceSupportItem->s_NSSAI.sD);",
      "160:                 }",
      "162:                 ASN_SEQUENCE_ADD(&BroadcastPLMNItem->tAISliceSupportList.list,",
      "163:                                 SliceSupportItem);",
      "166:             ASN_SEQUENCE_ADD(&SupportedTAItem->broadcastPLMNList.list,",
      "167:                     BroadcastPLMNItem);",
      "170:         ASN_SEQUENCE_ADD(&SupportedTAList->list, SupportedTAItem);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "168: ogs_pkbuf_t *testngap_build_ran_configuration_update(bool supported_ta_list)",
      "169: {",
      "170:     ogs_pkbuf_t *pkbuf = NULL;",
      "172:     ogs_plmn_id_t *plmn_id = NULL;",
      "174:     NGAP_NGAP_PDU_t pdu;",
      "",
      "[Removed Lines]",
      "171:     int i, j;",
      "",
      "[Added Lines]",
      "181:     int i, j, k, num;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "211:         SupportedTAList = &ie->value.choice.SupportedTAList;",
      "214:         if (test_self()->nr_served_tai[0].list2.num)",
      "218:         else if (test_self()->nr_served_tai[0].list0.tai[0].num)",
      "222:         else",
      "223:             ogs_assert_if_reached();",
      "244:                 }",
      "248:             }",
      "252:         }",
      "255:     }",
      "257:     return ogs_ngap_encode(&pdu);",
      "",
      "[Removed Lines]",
      "213:         SupportedTAItem = CALLOC(1, sizeof(NGAP_SupportedTAItem_t));",
      "215:             ogs_asn_uint24_to_OCTET_STRING(",
      "216:                 test_self()->nr_served_tai[0].list2.tai[0].tac,",
      "217:                 &SupportedTAItem->tAC);",
      "219:             ogs_asn_uint24_to_OCTET_STRING(",
      "220:                 test_self()->nr_served_tai[0].list0.tai[0].tac[0],",
      "221:                     &SupportedTAItem->tAC);",
      "225:         for (i = 0; i < test_self()->num_of_plmn_support; i++) {",
      "226:             plmn_id = &test_self()->plmn_support[i].plmn_id;",
      "228:             BroadcastPLMNItem = CALLOC(1, sizeof(NGAP_BroadcastPLMNItem_t));",
      "230:             ogs_asn_buffer_to_OCTET_STRING(",
      "231:                     plmn_id, OGS_PLMN_ID_LEN, &BroadcastPLMNItem->pLMNIdentity);",
      "233:             for (j = 0; j < test_self()->plmn_support[i].num_of_s_nssai; j++) {",
      "234:                 ogs_s_nssai_t *s_nssai =",
      "235:                     &test_self()->plmn_support[i].s_nssai[j];",
      "237:                 SliceSupportItem = CALLOC(1, sizeof(NGAP_SliceSupportItem_t));",
      "238:                 ogs_asn_uint8_to_OCTET_STRING(s_nssai->sst,",
      "239:                         &SliceSupportItem->s_NSSAI.sST);",
      "240:                 if (s_nssai->sd.v != OGS_S_NSSAI_NO_SD_VALUE) {",
      "241:                     SliceSupportItem->s_NSSAI.sD = CALLOC(1, sizeof(NGAP_SD_t));",
      "242:                     ogs_asn_uint24_to_OCTET_STRING(",
      "243:                             s_nssai->sd, SliceSupportItem->s_NSSAI.sD);",
      "246:                 ASN_SEQUENCE_ADD(&BroadcastPLMNItem->tAISliceSupportList.list,",
      "247:                                 SliceSupportItem);",
      "250:             ASN_SEQUENCE_ADD(&SupportedTAItem->broadcastPLMNList.list,",
      "251:                     BroadcastPLMNItem);",
      "254:         ASN_SEQUENCE_ADD(&SupportedTAList->list, SupportedTAItem);",
      "",
      "[Added Lines]",
      "224:             num = test_self()->nr_served_tai[0].list2.num;",
      "226:             num = test_self()->nr_served_tai[0].list0.tai[0].num;",
      "230:         for (i = 0; i < num; i++) {",
      "231:             SupportedTAItem = CALLOC(1, sizeof(NGAP_SupportedTAItem_t));",
      "232:             if (test_self()->nr_served_tai[0].list2.num)",
      "233:                 ogs_asn_uint24_to_OCTET_STRING(",
      "234:                     test_self()->nr_served_tai[0].list2.tai[i].tac,",
      "235:                     &SupportedTAItem->tAC);",
      "236:             else if (test_self()->nr_served_tai[0].list0.tai[0].num)",
      "237:                 ogs_asn_uint24_to_OCTET_STRING(",
      "238:                     test_self()->nr_served_tai[0].list0.tai[0].tac[i],",
      "239:                         &SupportedTAItem->tAC);",
      "240:             else",
      "241:                 ogs_assert_if_reached();",
      "243:             for (j = 0; j < test_self()->num_of_plmn_support; j++) {",
      "244:                 plmn_id = &test_self()->plmn_support[j].plmn_id;",
      "246:                 BroadcastPLMNItem = CALLOC(1, sizeof(NGAP_BroadcastPLMNItem_t));",
      "248:                 ogs_asn_buffer_to_OCTET_STRING(",
      "249:                         plmn_id, OGS_PLMN_ID_LEN,",
      "250:                         &BroadcastPLMNItem->pLMNIdentity);",
      "252:                 for (k = 0; k < test_self()->plmn_support[j].num_of_s_nssai;",
      "253:                         k++) {",
      "254:                     ogs_s_nssai_t *s_nssai =",
      "255:                         &test_self()->plmn_support[j].s_nssai[k];",
      "257:                     SliceSupportItem = CALLOC(1,",
      "258:                             sizeof(NGAP_SliceSupportItem_t));",
      "259:                     ogs_asn_uint8_to_OCTET_STRING(s_nssai->sst,",
      "260:                             &SliceSupportItem->s_NSSAI.sST);",
      "261:                     if (s_nssai->sd.v != OGS_S_NSSAI_NO_SD_VALUE) {",
      "262:                         SliceSupportItem->s_NSSAI.sD = CALLOC(",
      "263:                                 1, sizeof(NGAP_SD_t));",
      "264:                         ogs_asn_uint24_to_OCTET_STRING(",
      "265:                                 s_nssai->sd, SliceSupportItem->s_NSSAI.sD);",
      "266:                     }",
      "268:                     ASN_SEQUENCE_ADD(",
      "269:                             &BroadcastPLMNItem->tAISliceSupportList.list,",
      "270:                             SliceSupportItem);",
      "273:                 ASN_SEQUENCE_ADD(&SupportedTAItem->broadcastPLMNList.list,",
      "274:                         BroadcastPLMNItem);",
      "277:             ASN_SEQUENCE_ADD(&SupportedTAList->list, SupportedTAItem);",
      "",
      "---------------"
    ],
    "tests/common/s1ap-handler.c||tests/common/s1ap-handler.c": [
      "File: tests/common/s1ap-handler.c -> tests/common/s1ap-handler.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "479:     char buf[OGS_ADDRSTRLEN];",
      "481:     test_sess_t *sess = NULL;",
      "483:     S1AP_S1AP_PDU_t pdu;",
      "484:     S1AP_SuccessfulOutcome_t *successfulOutcome = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:     test_bearer_t *bearer = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "487:     S1AP_HandoverCommandIEs_t *ie = NULL;",
      "488:     S1AP_MME_UE_S1AP_ID_t *MME_UE_S1AP_ID = NULL;",
      "489:     S1AP_ENB_UE_S1AP_ID_t *ENB_UE_S1AP_ID = NULL;",
      "491:     ogs_assert(test_ue);",
      "492:     ogs_assert(message);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:     S1AP_E_RABSubjecttoDataForwardingList_t",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "505:         case S1AP_ProtocolIE_ID_id_eNB_UE_S1AP_ID:",
      "506:             ENB_UE_S1AP_ID = &ie->value.choice.ENB_UE_S1AP_ID;",
      "507:             break;",
      "508:         default:",
      "509:             break;",
      "510:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "511:         case S1AP_ProtocolIE_ID_id_E_RABSubjecttoDataForwardingList:",
      "512:             E_RABSubjecttoDataForwardingList =",
      "513:                 &ie->value.choice.E_RABSubjecttoDataForwardingList;",
      "514:             break;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "514:         test_ue->mme_ue_s1ap_id = *MME_UE_S1AP_ID;",
      "515:     if (ENB_UE_S1AP_ID)",
      "516:         test_ue->enb_ue_s1ap_id = *ENB_UE_S1AP_ID;",
      "517: }",
      "519: void tests1ap_handle_handover_preparation_failure(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "525:     if (E_RABSubjecttoDataForwardingList) {",
      "526:         for (i = 0; i < E_RABSubjecttoDataForwardingList->list.count; i++) {",
      "527:             S1AP_E_RABDataForwardingItemIEs_t *ie = NULL;",
      "528:             S1AP_E_RABDataForwardingItem_t *e_rab = NULL;",
      "530:             ie = (S1AP_E_RABDataForwardingItemIEs_t *)",
      "531:                     E_RABSubjecttoDataForwardingList->list.array[i];",
      "532:             ogs_assert(ie);",
      "533:             e_rab = &ie->value.choice.E_RABDataForwardingItem;",
      "535:             bearer = test_bearer_find_by_ue_ebi(test_ue, e_rab->e_RAB_ID);",
      "536:             ogs_assert(bearer);",
      "538:             if (e_rab->dL_gTP_TEID) {",
      "539:                 memcpy(&bearer->handover.dl_teid, e_rab->dL_gTP_TEID->buf,",
      "540:                         sizeof(bearer->handover.dl_teid));",
      "541:                 bearer->handover.dl_teid = be32toh(bearer->handover.dl_teid);",
      "542:             }",
      "543:             if (e_rab->dL_transportLayerAddress) {",
      "544:                 ogs_assert(OGS_OK ==",
      "545:                         ogs_asn_BIT_STRING_to_ip(",
      "546:                             e_rab->dL_transportLayerAddress,",
      "547:                             &bearer->handover.dl_ip));",
      "548:             }",
      "549:             if (e_rab->uL_GTP_TEID) {",
      "550:                 memcpy(&bearer->handover.ul_teid, e_rab->uL_GTP_TEID->buf,",
      "551:                         sizeof(bearer->handover.ul_teid));",
      "552:                 bearer->handover.ul_teid = be32toh(bearer->handover.ul_teid);",
      "553:             }",
      "554:             if (e_rab->uL_TransportLayerAddress) {",
      "555:                 ogs_assert(OGS_OK ==",
      "556:                         ogs_asn_BIT_STRING_to_ip(",
      "557:                             e_rab->uL_TransportLayerAddress,",
      "558:                             &bearer->handover.ul_ip));",
      "559:             }",
      "560:         }",
      "561:     }",
      "",
      "---------------"
    ],
    "tests/core/abts-main.c||tests/core/abts-main.c": [
      "File: tests/core/abts-main.c -> tests/core/abts-main.c"
    ],
    "tests/crypt/abts-main.c||tests/crypt/abts-main.c": [
      "File: tests/crypt/abts-main.c -> tests/crypt/abts-main.c"
    ],
    "tests/handover/epc-s1-test.c||tests/handover/epc-s1-test.c": [
      "File: tests/handover/epc-s1-test.c -> tests/handover/epc-s1-test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     ogs_pkbuf_t *esmbuf;",
      "29:     ogs_pkbuf_t *sendbuf;",
      "30:     ogs_pkbuf_t *recvbuf;",
      "31:     ogs_s1ap_message_t message;",
      "33:     ogs_nas_5gs_mobile_identity_suci_t mobile_identity_suci;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31:     ogs_pkbuf_t *pkbuf;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "329:     ABTS_PTR_NOTNULL(tc, recvbuf);",
      "330:     tests1ap_recv(test_ue, recvbuf);",
      "333:     sendbuf = test_s1ap_build_enb_status_transfer(test_ue);",
      "334:     ABTS_PTR_NOTNULL(tc, sendbuf);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "334:     bearer = test_bearer_find_by_ue_ebi(test_ue, 5);",
      "335:     ogs_assert(bearer);",
      "336:     rv = test_gtpu_send_ping(gtpu1, bearer, TEST_PING_IPV4);",
      "337:     ABTS_INT_EQUAL(tc, OGS_OK, rv);",
      "340:     recvbuf = test_gtpu_read(gtpu1);",
      "341:     ABTS_PTR_NOTNULL(tc, recvbuf);",
      "344:     pkbuf = ogs_pkbuf_alloc(NULL, 200);",
      "345:     ogs_assert(pkbuf);",
      "346:     ogs_pkbuf_reserve(pkbuf, OGS_GTPV1U_5GC_HEADER_LEN);",
      "347:     ogs_pkbuf_put(pkbuf, 200-OGS_GTPV1U_5GC_HEADER_LEN);",
      "348:     memset(pkbuf->data, 0, pkbuf->len);",
      "349:     memcpy(pkbuf->data, recvbuf->data + 8, recvbuf->len - 8);",
      "351:     ogs_pkbuf_free(recvbuf);",
      "354:     rv = test_gtpu_send_indirect_data_forwarding(gtpu1, bearer, pkbuf);",
      "355:     ABTS_INT_EQUAL(tc, OGS_OK, rv);",
      "358:     recvbuf = testgnb_gtpu_read(gtpu2);",
      "359:     ABTS_PTR_NOTNULL(tc, recvbuf);",
      "360:     ogs_pkbuf_free(recvbuf);",
      "",
      "---------------"
    ],
    "tests/sctp/abts-main.c||tests/sctp/abts-main.c": [
      "File: tests/sctp/abts-main.c -> tests/sctp/abts-main.c"
    ],
    "tests/unit/abts-main.c||tests/unit/abts-main.c": [
      "File: tests/unit/abts-main.c -> tests/unit/abts-main.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05ed95d623f1179c6472d454df6e369db97c5ef6",
      "candidate_info": {
        "commit_hash": "05ed95d623f1179c6472d454df6e369db97c5ef6",
        "repo": "open5gs/open5gs",
        "commit_url": "https://github.com/open5gs/open5gs/commit/05ed95d623f1179c6472d454df6e369db97c5ef6",
        "files": [
          "lib/gtp/util.c",
          "lib/gtp/util.h",
          "lib/gtp/v2/build.c",
          "lib/gtp/v2/path.c",
          "lib/gtp/v2/path.h",
          "lib/gtp/v2/types.h",
          "lib/pfcp/handler.c",
          "lib/pfcp/handler.h",
          "lib/pfcp/path.c",
          "lib/pfcp/path.h",
          "src/sgwu/gtp-path.c",
          "src/smf/gtp-path.c",
          "src/upf/gtp-path.c",
          "tests/common/gtpu.c",
          "tests/common/gtpu.h"
        ],
        "message": "[GTPU] Fixed PDCP SN handling (#2584, #2477)\n\nScenario is handover on S1AP, data forwarding is enabled, and\nthe Source ENB is forwarding DL PDCP packets to EPC(SGWU)\nwith PDCP SN included. SGWU is also forwarding these packets\nto the Target ENB.\n\nHowever the PDCP SN is not present in the forwarded packets\nfrom SGWU to Target ENB.\n\nI modified this part, and there was the same problem in 5GC, fixed it as well.\n\nA lot of code in GTP-U has been modified,\nso if you have any problems, please let us know right away.",
        "before_after_code_files": [
          "lib/gtp/util.c||lib/gtp/util.c",
          "lib/gtp/util.h||lib/gtp/util.h",
          "lib/gtp/v2/build.c||lib/gtp/v2/build.c",
          "lib/gtp/v2/path.c||lib/gtp/v2/path.c",
          "lib/gtp/v2/path.h||lib/gtp/v2/path.h",
          "lib/gtp/v2/types.h||lib/gtp/v2/types.h",
          "lib/pfcp/handler.c||lib/pfcp/handler.c",
          "lib/pfcp/handler.h||lib/pfcp/handler.h",
          "lib/pfcp/path.c||lib/pfcp/path.c",
          "lib/pfcp/path.h||lib/pfcp/path.h",
          "src/sgwu/gtp-path.c||src/sgwu/gtp-path.c",
          "src/smf/gtp-path.c||src/smf/gtp-path.c",
          "src/upf/gtp-path.c||src/upf/gtp-path.c",
          "tests/common/gtpu.c||tests/common/gtpu.c",
          "tests/common/gtpu.h||tests/common/gtpu.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/common/gtpu.c||tests/common/gtpu.c"
          ],
          "candidate": [
            "tests/common/gtpu.c||tests/common/gtpu.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/gtp/util.c||lib/gtp/util.c": [
          "File: lib/gtp/util.c -> lib/gtp/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"ogs-gtp.h\"",
          "23: {",
          "24:     ogs_gtp2_header_t *gtp_h = NULL;",
          "25:     uint8_t *ext_h = NULL;",
          "26:     uint16_t len = 0;",
          "28:     ogs_assert(pkbuf);",
          "29:     ogs_assert(pkbuf->data);",
          "31:     gtp_h = (ogs_gtp2_header_t *)pkbuf->data;",
          "33:     len = OGS_GTPV1U_HEADER_LEN;",
          "34:     if (pkbuf->len < len) {",
          "35:         ogs_error(\"the length of the packet is insufficient[%d:%d]\",",
          "",
          "[Removed Lines]",
          "22: int ogs_gtpu_header_len(ogs_pkbuf_t *pkbuf)",
          "",
          "[Added Lines]",
          "22: int ogs_gtpu_parse_header(",
          "23:         ogs_gtp2_header_desc_t *header_desc, ogs_pkbuf_t *pkbuf)",
          "26:     ogs_gtp2_extension_header_t ext_hdesc;",
          "29:     int i;",
          "36:     if (header_desc) {",
          "37:         memset(header_desc, 0, sizeof(*header_desc));",
          "39:         header_desc->flags = gtp_h->flags;",
          "40:         header_desc->type = gtp_h->type;",
          "41:         header_desc->teid = be32toh(gtp_h->teid);",
          "42:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         while (*(ext_h = (((uint8_t *)gtp_h) + len - 1))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         i = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:                         pkbuf->len, len);",
          "69:                 return -1;",
          "70:             }",
          "71:         }",
          "73:     } else if (gtp_h->flags & (OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_PN)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:                 continue;",
          "89:             memcpy(&ext_hdesc.array[i], ext_h-1, (*ext_h) * 4);",
          "91:             switch (ext_hdesc.array[i].type) {",
          "92:             case OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER:",
          "93:                 header_desc->pdu_type = ext_hdesc.array[i].pdu_type;",
          "94:                 if (ext_hdesc.array[i].pdu_type ==",
          "95:                     OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION) {",
          "96:                         header_desc->qos_flow_identifier =",
          "97:                             ext_hdesc.array[i].qos_flow_identifier;",
          "98:                         ogs_trace(\"   QFI [0x%x]\",",
          "99:                                 header_desc->qos_flow_identifier);",
          "100:                 }",
          "101:                 break;",
          "102:             case OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT:",
          "103:                 header_desc->udp.presence = true;",
          "104:                 header_desc->udp.port = be16toh(ext_hdesc.array[i].udp_port);",
          "106:                 ogs_trace(\"   UDP Port [%d]\", header_desc->udp.port);",
          "107:                 break;",
          "108:             case OGS_GTP2_EXTENSION_HEADER_TYPE_PDCP_NUMBER:",
          "109:                 header_desc->pdcp_number_presence = true;",
          "110:                 header_desc->pdcp_number =",
          "111:                     be16toh(ext_hdesc.array[i].pdcp_number);",
          "113:                 ogs_trace(\"   PDCP Number [%d]\", header_desc->pdcp_number);",
          "114:                 break;",
          "115:             default:",
          "116:                 break;",
          "117:             }",
          "119:             i++;",
          "",
          "---------------"
        ],
        "lib/gtp/util.h||lib/gtp/util.h": [
          "File: lib/gtp/util.h -> lib/gtp/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: extern \"C\" {",
          "29: #endif",
          "32: uint16_t ogs_in_cksum(uint16_t *addr, int len);",
          "34: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "31: int ogs_gtpu_header_len(ogs_pkbuf_t *pkbuf);",
          "",
          "[Added Lines]",
          "31: int ogs_gtpu_parse_header(",
          "32:         ogs_gtp2_header_desc_t *header_desc, ogs_pkbuf_t *pkbuf);",
          "",
          "---------------"
        ],
        "lib/gtp/v2/build.c||lib/gtp/v2/build.c": [
          "File: lib/gtp/v2/build.c -> lib/gtp/v2/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         ogs_error(\"ogs_pkbuf_alloc() failed\");",
          "73:         return NULL;",
          "74:     }",
          "",
          "[Removed Lines]",
          "75:     ogs_pkbuf_reserve(pkbuf, OGS_GTPV1U_5GC_HEADER_LEN);",
          "",
          "[Added Lines]",
          "75:     ogs_pkbuf_reserve(pkbuf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:         ogs_pkbuf_t *pkbuf)",
          "119: {",
          "120:     ogs_gtp2_header_t *gtp_h = NULL;",
          "122:     uint8_t flags;",
          "123:     uint8_t gtp_hlen = 0;",
          "125:     ogs_assert(gtp_hdesc);",
          "126:     ogs_assert(ext_hdesc);",
          "",
          "[Removed Lines]",
          "121:     ogs_gtp2_extension_header_t *ext_h = NULL;",
          "",
          "[Added Lines]",
          "127:     int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     flags = gtp_hdesc->flags;",
          "131:     flags |= OGS_GTPU_FLAGS_V | OGS_GTPU_FLAGS_PT;",
          "139:     else",
          "140:         gtp_hlen = OGS_GTPV1U_HEADER_LEN;",
          "",
          "[Removed Lines]",
          "132:     if (ext_hdesc->qos_flow_identifier) flags |= OGS_GTPU_FLAGS_E;",
          "135:     if (flags & OGS_GTPU_FLAGS_E)",
          "136:         gtp_hlen = OGS_GTPV1U_HEADER_LEN+8;",
          "137:     else if (flags & (OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_PN))",
          "138:         gtp_hlen = OGS_GTPV1U_HEADER_LEN+4;",
          "",
          "[Added Lines]",
          "136:     if (ext_hdesc->array[0].type && ext_hdesc->array[0].len)",
          "137:         flags |= OGS_GTPU_FLAGS_E;",
          "140:     if (flags & OGS_GTPU_FLAGS_E) {",
          "142:         gtp_hlen = OGS_GTPV1U_HEADER_LEN+OGS_GTPV1U_EXTENSION_HEADER_LEN;",
          "144:         i = 0;",
          "145:         while(ext_hdesc->array[i].len) {",
          "146:             gtp_hlen += (ext_hdesc->array[i].len*4);",
          "147:             i++;",
          "148:         }",
          "150:     } else if (flags & (OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_PN))",
          "151:         gtp_hlen = OGS_GTPV1U_HEADER_LEN+OGS_GTPV1U_EXTENSION_HEADER_LEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     if (gtp_h->flags & OGS_GTPU_FLAGS_E) {",
          "184:         ogs_assert(ext_h);",
          "200:         }",
          "201:     }",
          "202: }",
          "",
          "[Removed Lines]",
          "182:         ext_h = (ogs_gtp2_extension_header_t *)",
          "183:             (pkbuf->data + OGS_GTPV1U_HEADER_LEN);",
          "186:         if (ext_hdesc->qos_flow_identifier) {",
          "188:             ext_h->type = OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER;",
          "189:             ext_h->len = 1;",
          "190:             ext_h->pdu_type = ext_hdesc->pdu_type;",
          "191:             ext_h->qos_flow_identifier = ext_hdesc->qos_flow_identifier;",
          "192:             ext_h->next_type =",
          "193:                 OGS_GTP2_EXTENSION_HEADER_TYPE_NO_MORE_EXTENSION_HEADERS;",
          "194:         } else {",
          "196:             ext_h->type = ext_hdesc->type;",
          "197:             ext_h->len = 1;",
          "198:             ext_h->next_type =",
          "199:                 OGS_GTP2_EXTENSION_HEADER_TYPE_NO_MORE_EXTENSION_HEADERS;",
          "",
          "[Added Lines]",
          "195:         uint8_t *ext_h = (uint8_t *)(pkbuf->data +",
          "196:                     OGS_GTPV1U_HEADER_LEN + OGS_GTPV1U_EXTENSION_HEADER_LEN);",
          "202:         i = 0;",
          "203:         while (i < OGS_GTP2_NUM_OF_EXTENSION_HEADER &&",
          "204:                 (ext_h - pkbuf->data) < gtp_hlen) {",
          "205:             int len = ext_hdesc->array[i].len*4;",
          "208:             memcpy(ext_h, &ext_hdesc->array[i].len, len-1);",
          "211:             if (ext_hdesc->array[i+1].len)",
          "212:                 ext_h[len-1] = ext_hdesc->array[i+1].type;",
          "213:             else",
          "214:                 ext_h[len-1] =",
          "215:                     OGS_GTP2_EXTENSION_HEADER_TYPE_NO_MORE_EXTENSION_HEADERS;",
          "217:             ext_h += len;",
          "218:             i++;",
          "",
          "---------------"
        ],
        "lib/gtp/v2/path.c||lib/gtp/v2/path.c": [
          "File: lib/gtp/v2/path.c -> lib/gtp/v2/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: int ogs_gtp2_send_user_plane(",
          "23:         ogs_gtp_node_t *gnode,",
          "25:         ogs_pkbuf_t *pkbuf)",
          "26: {",
          "27:     char buf[OGS_ADDRSTRLEN];",
          "32:     ogs_trace(\"SEND GTP-U[%d] to Peer[%s] : TEID[0x%x]\",",
          "35:     rv = ogs_gtp_sendto(gnode, pkbuf);",
          "36:     if (rv != OGS_OK) {",
          "37:         if (ogs_socket_errno != OGS_EAGAIN) {",
          "38:             ogs_error(\"SEND GTP-U[%d] to Peer[%s] : TEID[0x%x]\",",
          "40:         }",
          "41:     }",
          "",
          "[Removed Lines]",
          "24:         ogs_gtp2_header_t *gtp_hdesc, ogs_gtp2_extension_header_t *ext_hdesc,",
          "28:     int rv;",
          "30:     ogs_gtp2_fill_header(gtp_hdesc, ext_hdesc, pkbuf);",
          "33:             gtp_hdesc->type, OGS_ADDR(&gnode->addr, buf), gtp_hdesc->teid);",
          "39:                 gtp_hdesc->type, OGS_ADDR(&gnode->addr, buf), gtp_hdesc->teid);",
          "",
          "[Added Lines]",
          "24:         ogs_gtp2_header_desc_t *header_desc,",
          "28:     int rv, i;",
          "30:     ogs_gtp2_header_t gtp_hdesc;",
          "31:     ogs_gtp2_extension_header_t ext_hdesc;",
          "33:     ogs_assert(header_desc);",
          "35:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "36:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "38:     gtp_hdesc.flags = header_desc->flags;",
          "39:     gtp_hdesc.type = header_desc->type;",
          "40:     gtp_hdesc.teid = header_desc->teid;",
          "42:     i = 0;",
          "44:     if (header_desc->qos_flow_identifier) {",
          "45:         ext_hdesc.array[i].type =",
          "46:             OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER;",
          "47:         ext_hdesc.array[i].len = 1;",
          "48:         ext_hdesc.array[i].pdu_type = header_desc->pdu_type;",
          "49:         ext_hdesc.array[i].qos_flow_identifier =",
          "50:             header_desc->qos_flow_identifier;",
          "51:         i++;",
          "52:     }",
          "54:     if (header_desc->udp.presence == true) {",
          "55:         ext_hdesc.array[i].type = OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT;",
          "56:         ext_hdesc.array[i].len = 1;",
          "57:         ext_hdesc.array[i].udp_port = htobe16(header_desc->udp.port);",
          "58:         i++;",
          "59:     }",
          "61:     if (header_desc->pdcp_number_presence == true) {",
          "62:         ext_hdesc.array[i].type = OGS_GTP2_EXTENSION_HEADER_TYPE_PDCP_NUMBER;",
          "63:         ext_hdesc.array[i].len = 1;",
          "64:         ext_hdesc.array[i].pdcp_number = htobe16(header_desc->pdcp_number);",
          "65:         i++;",
          "66:     }",
          "68:     ogs_gtp2_fill_header(&gtp_hdesc, &ext_hdesc, pkbuf);",
          "71:             header_desc->type,",
          "72:             OGS_ADDR(&gnode->addr, buf), header_desc->teid);",
          "78:                 header_desc->type,",
          "79:                 OGS_ADDR(&gnode->addr, buf), header_desc->teid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:     ogs_gtp2_header_t gtp_hdesc;",
          "272:     ogs_gtp2_extension_header_t ext_hdesc;",
          "274:     ogs_assert(sock);",
          "275:     ogs_assert(to);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:     int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_ERR_IND;",
          "287:     gtp_hdesc.flags = OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_E;",
          "291:     ogs_gtp2_fill_header(&gtp_hdesc, &ext_hdesc, pkbuf);",
          "",
          "[Removed Lines]",
          "288:     ext_hdesc.type = OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT;",
          "289:     ext_hdesc.qos_flow_identifier = qfi;",
          "",
          "[Added Lines]",
          "330:     i = 0;",
          "331:     if (qfi) {",
          "332:         ext_hdesc.array[i].type =",
          "333:             OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER;",
          "334:         ext_hdesc.array[i].len = 1;",
          "335:         ext_hdesc.array[i].pdu_type =",
          "336:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_DL_PDU_SESSION_INFORMATION;",
          "337:         ext_hdesc.array[i].qos_flow_identifier = qfi;",
          "338:         i++;",
          "339:     }",
          "340:     ext_hdesc.array[i].type = OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT;",
          "341:     ext_hdesc.array[i].len = 1;",
          "342:     ext_hdesc.array[i].udp_port = 0;",
          "",
          "---------------"
        ],
        "lib/gtp/v2/path.h||lib/gtp/v2/path.h": [
          "File: lib/gtp/v2/path.h -> lib/gtp/v2/path.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: int ogs_gtp2_send_user_plane(",
          "34:         ogs_gtp_node_t *gnode,",
          "36:         ogs_pkbuf_t *pkbuf);",
          "38: ogs_pkbuf_t *ogs_gtp2_handle_echo_req(ogs_pkbuf_t *pkb);",
          "",
          "[Removed Lines]",
          "35:         ogs_gtp2_header_t *gtp_hdesc, ogs_gtp2_extension_header_t *ext_hdesc,",
          "",
          "[Added Lines]",
          "35:         ogs_gtp2_header_desc_t *hdesc,",
          "",
          "---------------"
        ],
        "lib/gtp/v2/types.h||lib/gtp/v2/types.h": [
          "File: lib/gtp/v2/types.h -> lib/gtp/v2/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: typedef struct ogs_gtp2_extension_header_s {",
          "54: #define OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT 0x40",
          "55: #define OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER 0x85",
          "56: #define OGS_GTP2_EXTENSION_HEADER_TYPE_NO_MORE_EXTENSION_HEADERS 0x0",
          "57:     uint16_t sequence_number;",
          "58:     uint8_t n_pdu_number;",
          "61: #define OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_DL_PDU_SESSION_INFORMATION 0",
          "62: #define OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION 1",
          "69: } __attribute__ ((packed)) ogs_gtp2_extension_header_t;",
          "72: #define OGS_GTP2_CAUSE_UNDEFINED_VALUE 0",
          "73: #define OGS_GTP2_CAUSE_LOCAL_DETACH 2",
          "",
          "[Removed Lines]",
          "59:     uint8_t type;",
          "60:     uint8_t len;",
          "63:     ED2(uint8_t pdu_type:4;,",
          "64:         uint8_t spare1:4;);",
          "65:     ED3(uint8_t paging_policy_presence:1;,",
          "66:         uint8_t reflective_qos_indicator:1;,",
          "67:         uint8_t qos_flow_identifier:6;);",
          "68:     uint8_t next_type;",
          "",
          "[Added Lines]",
          "56: #define OGS_GTP2_EXTENSION_HEADER_TYPE_PDCP_NUMBER 0xc0",
          "60:     struct {",
          "61:         uint8_t type;",
          "62:         uint8_t len;",
          "63:         union {",
          "64:             struct {",
          "67:             ED2(uint8_t pdu_type:4;,",
          "68:                 uint8_t spare1:4;);",
          "69:             ED3(uint8_t paging_policy_presence:1;,",
          "70:                 uint8_t reflective_qos_indicator:1;,",
          "71:                 uint8_t qos_flow_identifier:6;);",
          "72:             };",
          "73:             uint16_t udp_port;",
          "74:             uint16_t pdcp_number;",
          "75:         };",
          "76: #define OGS_GTP2_NUM_OF_EXTENSION_HEADER 8",
          "77:     } __attribute__ ((packed)) array[OGS_GTP2_NUM_OF_EXTENSION_HEADER];",
          "80: typedef struct ogs_gtp2_header_desc_s {",
          "82:     uint8_t type;",
          "83:     uint8_t flags;",
          "84:     uint32_t teid;",
          "87:     uint8_t qos_flow_identifier;",
          "88:     uint8_t pdu_type;",
          "89:     ogs_port_t udp;",
          "90:     bool pdcp_number_presence;",
          "91:     uint16_t pdcp_number;",
          "92: } ogs_gtp2_header_desc_t;",
          "",
          "---------------"
        ],
        "lib/pfcp/handler.c||lib/pfcp/handler.c": [
          "File: lib/pfcp/handler.c -> lib/pfcp/handler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: }",
          "220: bool ogs_pfcp_up_handle_pdr(",
          "222:         ogs_pfcp_user_plane_report_t *report)",
          "223: {",
          "224:     ogs_pfcp_far_t *far = NULL;",
          "",
          "[Removed Lines]",
          "221:         ogs_pfcp_pdr_t *pdr, uint8_t type, ogs_pkbuf_t *recvbuf,",
          "",
          "[Added Lines]",
          "221:         ogs_pfcp_pdr_t *pdr, uint8_t type,",
          "222:         ogs_gtp2_header_desc_t *recvhdr, ogs_pkbuf_t *recvbuf,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:     } else {",
          "250:         if (far->apply_action & OGS_PFCP_APPLY_ACTION_FORW) {",
          "255:         } else if (far->apply_action & OGS_PFCP_APPLY_ACTION_BUFF) {",
          "",
          "[Removed Lines]",
          "253:             ogs_pfcp_send_g_pdu(pdr, type, sendbuf);",
          "",
          "[Added Lines]",
          "252:             ogs_gtp2_header_desc_t sendhdr;",
          "255:             memset(&sendhdr, 0, sizeof(sendhdr));",
          "256:             sendhdr.type = type;",
          "258:             if (recvhdr) {",
          "265:                 if (recvhdr->pdcp_number_presence == true) {",
          "266:                     sendhdr.pdcp_number_presence =",
          "267:                         recvhdr->pdcp_number_presence;",
          "268:                     sendhdr.pdcp_number = recvhdr->pdcp_number;",
          "269:                 }",
          "270:             }",
          "272:             ogs_pfcp_send_g_pdu(pdr, &sendhdr, sendbuf);",
          "",
          "---------------"
        ],
        "lib/pfcp/handler.h||lib/pfcp/handler.h": [
          "File: lib/pfcp/handler.h -> lib/pfcp/handler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         ogs_pfcp_association_setup_response_t *req);",
          "48: bool ogs_pfcp_up_handle_pdr(",
          "50:         ogs_pfcp_user_plane_report_t *report);",
          "51: bool ogs_pfcp_up_handle_error_indication(",
          "52:         ogs_pfcp_far_t *far, ogs_pfcp_user_plane_report_t *report);",
          "",
          "[Removed Lines]",
          "49:         ogs_pfcp_pdr_t *pdr, uint8_t type, ogs_pkbuf_t *recvbuf,",
          "",
          "[Added Lines]",
          "49:         ogs_pfcp_pdr_t *pdr, uint8_t type,",
          "50:         ogs_gtp2_header_desc_t *recvhdr, ogs_pkbuf_t *recvbuf,",
          "",
          "---------------"
        ],
        "lib/pfcp/path.c||lib/pfcp/path.c": [
          "File: lib/pfcp/path.c -> lib/pfcp/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344: }",
          "346: void ogs_pfcp_send_g_pdu(",
          "348: {",
          "349:     ogs_gtp_node_t *gnode = NULL;",
          "350:     ogs_pfcp_far_t *far = NULL;",
          "355:     ogs_assert(pdr);",
          "357:     ogs_assert(sendbuf);",
          "359:     far = pdr->far;",
          "",
          "[Removed Lines]",
          "347:         ogs_pfcp_pdr_t *pdr, uint8_t type, ogs_pkbuf_t *sendbuf)",
          "352:     ogs_gtp2_header_t gtp_hdesc;",
          "353:     ogs_gtp2_extension_header_t ext_hdesc;",
          "356:     ogs_assert(type);",
          "",
          "[Added Lines]",
          "347:         ogs_pfcp_pdr_t *pdr,",
          "348:         ogs_gtp2_header_desc_t *sendhdr, ogs_pkbuf_t *sendbuf)",
          "353:     ogs_gtp2_header_desc_t header_desc;",
          "356:     ogs_assert(sendhdr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373:     ogs_assert(gnode);",
          "374:     ogs_assert(gnode->sock);",
          "385: }",
          "387: int ogs_pfcp_send_end_marker(ogs_pfcp_pdr_t *pdr)",
          "",
          "[Removed Lines]",
          "376:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "377:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "379:     gtp_hdesc.type = type;",
          "380:     gtp_hdesc.teid = far->outer_header_creation.teid;",
          "381:     if (pdr->qer && pdr->qer->qfi)",
          "382:         ext_hdesc.qos_flow_identifier = pdr->qer->qfi;",
          "384:     ogs_gtp2_send_user_plane(gnode, &gtp_hdesc, &ext_hdesc, sendbuf);",
          "",
          "[Added Lines]",
          "376:     memset(&header_desc, 0, sizeof(header_desc));",
          "378:     header_desc.type = sendhdr->type;",
          "379:     header_desc.teid = far->outer_header_creation.teid;",
          "381:     if (pdr->qer && pdr->qer->qfi) {",
          "382:         header_desc.pdu_type =",
          "383:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_DL_PDU_SESSION_INFORMATION;",
          "384:         header_desc.qos_flow_identifier = pdr->qer->qfi;",
          "385:     }",
          "387:     if (sendhdr->udp.presence == true) {",
          "388:         header_desc.udp.presence = sendhdr->udp.presence;",
          "389:         header_desc.udp.port = sendhdr->udp.port;",
          "390:     }",
          "392:     if (sendhdr->pdcp_number_presence == true) {",
          "393:         header_desc.pdcp_number_presence = sendhdr->pdcp_number_presence;",
          "394:         header_desc.pdcp_number = sendhdr->pdcp_number;",
          "395:     }",
          "397:     ogs_gtp2_send_user_plane(gnode, &header_desc, sendbuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:     ogs_pkbuf_t *sendbuf = NULL;",
          "397:     ogs_assert(pdr);",
          "398:     far = pdr->far;",
          "",
          "[Removed Lines]",
          "394:     ogs_gtp2_header_t gtp_hdesc;",
          "395:     ogs_gtp2_extension_header_t ext_hdesc;",
          "",
          "[Added Lines]",
          "407:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "415:     }",
          "416:     ogs_pkbuf_reserve(sendbuf, OGS_GTPV1U_5GC_HEADER_LEN);",
          "428:     return OGS_OK;",
          "429: }",
          "",
          "[Removed Lines]",
          "418:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "419:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "421:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_END_MARKER;",
          "422:     gtp_hdesc.teid = far->outer_header_creation.teid;",
          "423:     if (pdr->qer && pdr->qer->qfi)",
          "424:         ext_hdesc.qos_flow_identifier = pdr->qer->qfi;",
          "426:     ogs_gtp2_send_user_plane(gnode, &gtp_hdesc, &ext_hdesc, sendbuf);",
          "",
          "[Added Lines]",
          "430:     memset(&header_desc, 0, sizeof(header_desc));",
          "432:     header_desc.type = OGS_GTPU_MSGTYPE_END_MARKER;",
          "433:     header_desc.teid = far->outer_header_creation.teid;",
          "435:     if (pdr->qer && pdr->qer->qfi) {",
          "436:         header_desc.pdu_type =",
          "437:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_DL_PDU_SESSION_INFORMATION;",
          "438:         header_desc.qos_flow_identifier = pdr->qer->qfi;",
          "439:     }",
          "441:     ogs_gtp2_send_user_plane(gnode, &header_desc, sendbuf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:     if (far && far->gnode) {",
          "440:         if (far->apply_action & OGS_PFCP_APPLY_ACTION_FORW) {",
          "441:             for (i = 0; i < far->num_of_buffered_packet; i++) {",
          "442:                 ogs_pfcp_send_g_pdu(",
          "444:             }",
          "445:             far->num_of_buffered_packet = 0;",
          "446:         }",
          "",
          "[Removed Lines]",
          "443:                         pdr, OGS_GTPU_MSGTYPE_GPDU, far->buffered_packet[i]);",
          "",
          "[Added Lines]",
          "457:                 ogs_gtp2_header_desc_t sendhdr;",
          "459:                 memset(&sendhdr, 0, sizeof(sendhdr));",
          "460:                 sendhdr.type = OGS_GTPU_MSGTYPE_GPDU;",
          "463:                         pdr, &sendhdr, far->buffered_packet[i]);",
          "",
          "---------------"
        ],
        "lib/pfcp/path.h||lib/pfcp/path.h": [
          "File: lib/pfcp/path.h -> lib/pfcp/path.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         uint8_t cause);",
          "81: void ogs_pfcp_send_g_pdu(",
          "83: int ogs_pfcp_send_end_marker(ogs_pfcp_pdr_t *pdr);",
          "85: void ogs_pfcp_send_buffered_packet(ogs_pfcp_pdr_t *pdr);",
          "",
          "[Removed Lines]",
          "82:         ogs_pfcp_pdr_t *pdr, uint8_t type, ogs_pkbuf_t *sendbuf);",
          "",
          "[Added Lines]",
          "82:         ogs_pfcp_pdr_t *pdr,",
          "83:         ogs_gtp2_header_desc_t *sendhdr, ogs_pkbuf_t *sendbuf);",
          "",
          "---------------"
        ],
        "src/sgwu/gtp-path.c||src/sgwu/gtp-path.c": [
          "File: src/sgwu/gtp-path.c -> src/sgwu/gtp-path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     ogs_sockaddr_t from;",
          "40:     ogs_gtp2_header_t *gtp_h = NULL;",
          "41:     ogs_pfcp_user_plane_report_t report;",
          "46:     ogs_assert(fd != INVALID_SOCKET);",
          "47:     sock = data;",
          "48:     ogs_assert(sock);",
          "",
          "[Removed Lines]",
          "43:     uint32_t teid;",
          "44:     uint8_t qfi;",
          "",
          "[Added Lines]",
          "41:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         goto cleanup;",
          "71:     }",
          "74:         ogs_pkbuf_t *echo_rsp;",
          "76:         ogs_debug(\"[RECV] Echo Request from [%s]\", OGS_ADDR(&from, buf1));",
          "",
          "[Removed Lines]",
          "73:     if (gtp_h->type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "[Added Lines]",
          "71:     len = ogs_gtpu_parse_header(&header_desc, pkbuf);",
          "72:     if (len < 0) {",
          "73:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "74:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "75:         goto cleanup;",
          "76:     }",
          "77:     if (header_desc.type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:         }",
          "92:         goto cleanup;",
          "93:     }",
          "132:         pkbuf->len <= len) {",
          "134:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "135:         goto cleanup;",
          "136:     }",
          "137:     ogs_assert(ogs_pkbuf_pull(pkbuf, len));",
          "140:         ogs_pfcp_object_t *pfcp_object = NULL;",
          "141:         ogs_pfcp_pdr_t *pdr = NULL;",
          "142:         ogs_pkbuf_t *sendbuf = NULL;",
          "145:         if (!pfcp_object) {",
          "",
          "[Removed Lines]",
          "95:     teid = be32toh(gtp_h->teid);",
          "97:     ogs_trace(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "98:             gtp_h->type, OGS_ADDR(&from, buf1), teid);",
          "100:     qfi = 0;",
          "101:     if (gtp_h->flags & OGS_GTPU_FLAGS_E) {",
          "110:         ogs_gtp2_extension_header_t *extension_header =",
          "111:             (ogs_gtp2_extension_header_t *)(pkbuf->data+OGS_GTPV1U_HEADER_LEN);",
          "112:         ogs_assert(extension_header);",
          "113:         if (extension_header->type ==",
          "114:                 OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER) {",
          "115:             if (extension_header->pdu_type ==",
          "116:                 OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION) {",
          "117:                     ogs_trace(\"   QFI [0x%x]\",",
          "118:                             extension_header->qos_flow_identifier);",
          "119:                     qfi = extension_header->qos_flow_identifier;",
          "120:             }",
          "121:         }",
          "122:     }",
          "125:     len = ogs_gtpu_header_len(pkbuf);",
          "126:     if (len < 0) {",
          "127:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "128:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "129:         goto cleanup;",
          "130:     }",
          "131:     if (gtp_h->type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "133:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\", gtp_h->type, len);",
          "139:     if (gtp_h->type == OGS_GTPU_MSGTYPE_END_MARKER) {",
          "144:         pfcp_object = ogs_pfcp_object_find_by_teid(teid);",
          "",
          "[Added Lines]",
          "98:     if (header_desc.type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "100:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\",",
          "101:                 header_desc.type, len);",
          "106:     ogs_trace(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "107:             header_desc.type, OGS_ADDR(&from, buf1), header_desc.teid);",
          "112:     if (header_desc.type == OGS_GTPU_MSGTYPE_END_MARKER) {",
          "115:         ogs_gtp2_header_desc_t sendhdr;",
          "118:         pfcp_object = ogs_pfcp_object_find_by_teid(header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:                         ogs_app()->time.message.pfcp.association_interval))) {",
          "161:                 ogs_error(\"[%s] Send Error Indication [TEID:0x%x] to [%s]\",",
          "162:                         OGS_ADDR(&sock->local_addr, buf1),",
          "164:                         OGS_ADDR(&from, buf2));",
          "166:             }",
          "167:             goto cleanup;",
          "168:         }",
          "",
          "[Removed Lines]",
          "163:                         teid,",
          "165:                 ogs_gtp1_send_error_indication(sock, teid, 0, &from);",
          "",
          "[Added Lines]",
          "137:                         header_desc.teid,",
          "139:                 ogs_gtp1_send_error_indication(",
          "140:                         sock, header_desc.teid, 0, &from);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:         ogs_assert(sendbuf);",
          "189:         ogs_pfcp_far_t *far = NULL;",
          "191:         far = ogs_pfcp_far_find_by_gtpu_error_indication(pkbuf);",
          "",
          "[Removed Lines]",
          "186:         ogs_pfcp_send_g_pdu(pdr, gtp_h->type, sendbuf);",
          "188:     } else if (gtp_h->type == OGS_GTPU_MSGTYPE_ERR_IND) {",
          "",
          "[Added Lines]",
          "161:         memset(&sendhdr, 0, sizeof(sendhdr));",
          "162:         sendhdr.type = header_desc.type;",
          "164:         ogs_pfcp_send_g_pdu(pdr, &sendhdr, sendbuf);",
          "166:     } else if (header_desc.type == OGS_GTPU_MSGTYPE_ERR_IND) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:             ogs_error(\"[DROP] Cannot find FAR by Error-Indication\");",
          "206:             ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "207:         }",
          "209:         struct ip *ip_h = NULL;",
          "210:         ogs_pfcp_object_t *pfcp_object = NULL;",
          "211:         ogs_pfcp_sess_t *pfcp_sess = NULL;",
          "",
          "[Removed Lines]",
          "208:     } else if (gtp_h->type == OGS_GTPU_MSGTYPE_GPDU) {",
          "",
          "[Added Lines]",
          "186:     } else if (header_desc.type == OGS_GTPU_MSGTYPE_GPDU) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:         ip_h = (struct ip *)pkbuf->data;",
          "215:         ogs_assert(ip_h);",
          "218:         if (!pfcp_object) {",
          "",
          "[Removed Lines]",
          "217:         pfcp_object = ogs_pfcp_object_find_by_teid(teid);",
          "",
          "[Added Lines]",
          "195:         pfcp_object = ogs_pfcp_object_find_by_teid(header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "233:                         ogs_app()->time.message.pfcp.association_interval))) {",
          "234:                 ogs_error(\"[%s] Send Error Indication [TEID:0x%x] to [%s]\",",
          "235:                         OGS_ADDR(&sock->local_addr, buf1),",
          "237:                         OGS_ADDR(&from, buf2));",
          "239:             }",
          "240:             goto cleanup;",
          "241:         }",
          "",
          "[Removed Lines]",
          "236:                         teid,",
          "238:                 ogs_gtp1_send_error_indication(sock, teid, 0, &from);",
          "",
          "[Added Lines]",
          "214:                         header_desc.teid,",
          "216:                 ogs_gtp1_send_error_indication(",
          "217:                         sock, header_desc.teid, 0, &from);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "254:             ogs_list_for_each(&pfcp_sess->pdr_list, pdr) {",
          "257:                     continue;",
          "261:                     continue;",
          "",
          "[Removed Lines]",
          "256:                 if (teid != pdr->f_teid.teid)",
          "260:                 if (qfi && pdr->qfi != qfi)",
          "",
          "[Added Lines]",
          "235:                 if (header_desc.teid != pdr->f_teid.teid)",
          "239:                 if (header_desc.qos_flow_identifier &&",
          "240:                         pdr->qfi != header_desc.qos_flow_identifier)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "282:         ogs_assert(pdr);",
          "283:         ogs_assert(true == ogs_pfcp_up_handle_pdr(",
          "286:         if (report.type.downlink_data_report) {",
          "287:             ogs_assert(pdr->sess);",
          "",
          "[Removed Lines]",
          "284:                                 pdr, gtp_h->type, pkbuf, &report));",
          "",
          "[Added Lines]",
          "264:                     pdr, header_desc.type, &header_desc, pkbuf, &report));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:             ogs_assert(sess);",
          "292:             report.downlink_data.pdr_id = pdr->id;",
          "295:             ogs_assert(OGS_OK ==",
          "296:                 sgwu_pfcp_send_session_report_request(sess, &report));",
          "297:         }",
          "298:     } else {",
          "300:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "301:     }",
          "",
          "[Removed Lines]",
          "299:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", gtp_h->type);",
          "",
          "[Added Lines]",
          "273:             report.downlink_data.qfi =",
          "280:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", header_desc.type);",
          "",
          "---------------"
        ],
        "src/smf/gtp-path.c||src/smf/gtp-path.c": [
          "File: src/smf/gtp-path.c -> src/smf/gtp-path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     ogs_sockaddr_t from;",
          "124:     ogs_gtp2_header_t *gtp_h = NULL;",
          "129:     ogs_assert(fd != INVALID_SOCKET);",
          "",
          "[Removed Lines]",
          "126:     uint32_t teid;",
          "127:     uint8_t qfi;",
          "",
          "[Added Lines]",
          "125:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:         goto cleanup;",
          "152:     }",
          "155:         ogs_pkbuf_t *echo_rsp;",
          "157:         ogs_debug(\"[RECV] Echo Request from [%s]\", OGS_ADDR(&from, buf));",
          "",
          "[Removed Lines]",
          "154:     if (gtp_h->type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "[Added Lines]",
          "152:     len = ogs_gtpu_parse_header(&header_desc, pkbuf);",
          "153:     if (len < 0) {",
          "154:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "155:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "156:         goto cleanup;",
          "157:     }",
          "158:     if (header_desc.type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:         }",
          "173:         goto cleanup;",
          "174:     }",
          "213:         pkbuf->len <= len) {",
          "215:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "216:         goto cleanup;",
          "217:     }",
          "218:     ogs_assert(ogs_pkbuf_pull(pkbuf, len));",
          "221:         smf_sess_t *sess = NULL;",
          "222:         ogs_pfcp_far_t *far = NULL;",
          "225:         if (!far) {",
          "227:             goto cleanup;",
          "228:         }",
          "",
          "[Removed Lines]",
          "176:     teid = be32toh(gtp_h->teid);",
          "178:     ogs_debug(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "179:             gtp_h->type, OGS_ADDR(&from, buf), teid);",
          "181:     qfi = 0;",
          "182:     if (gtp_h->flags & OGS_GTPU_FLAGS_E) {",
          "191:         ogs_gtp2_extension_header_t *extension_header =",
          "192:             (ogs_gtp2_extension_header_t *)(pkbuf->data + OGS_GTPV1U_HEADER_LEN);",
          "193:         ogs_assert(extension_header);",
          "194:         if (extension_header->type ==",
          "195:                 OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER) {",
          "196:             if (extension_header->pdu_type ==",
          "197:                 OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION) {",
          "198:                     ogs_debug(\"   QFI [0x%x]\",",
          "199:                             extension_header->qos_flow_identifier);",
          "200:                     qfi = extension_header->qos_flow_identifier;",
          "201:             }",
          "202:         }",
          "203:     }",
          "206:     len = ogs_gtpu_header_len(pkbuf);",
          "207:     if (len < 0) {",
          "208:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "209:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "210:         goto cleanup;",
          "211:     }",
          "212:     if (gtp_h->type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "214:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\", gtp_h->type, len);",
          "220:     if (gtp_h->type == OGS_GTPU_MSGTYPE_GPDU) {",
          "224:         far = ogs_pfcp_far_find_by_teid(teid);",
          "226:             ogs_error(\"No FAR for TEID [%d]\", teid);",
          "",
          "[Added Lines]",
          "179:     if (header_desc.type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "181:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\",",
          "182:                 header_desc.type, len);",
          "187:     ogs_debug(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "188:             header_desc.type, OGS_ADDR(&from, buf), header_desc.teid);",
          "193:     if (header_desc.type == OGS_GTPU_MSGTYPE_GPDU) {",
          "197:         far = ogs_pfcp_far_find_by_teid(header_desc.teid);",
          "199:             ogs_error(\"No FAR for TEID [%d]\", header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             goto cleanup;",
          "233:         }",
          "237:             goto cleanup;",
          "238:         }",
          "",
          "[Removed Lines]",
          "235:         if (qfi) {",
          "236:             ogs_error(\"QFI[%d] Found\", qfi);",
          "",
          "[Added Lines]",
          "208:         if (header_desc.qos_flow_identifier) {",
          "209:             ogs_error(\"QFI[%d] Found\", header_desc.qos_flow_identifier);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "247:             send_router_advertisement(sess, ip6_h->ip6_src.s6_addr);",
          "248:         }",
          "249:     } else {",
          "251:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "252:     }",
          "",
          "[Removed Lines]",
          "250:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", gtp_h->type);",
          "",
          "[Added Lines]",
          "223:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", header_desc.type);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "719:     ogs_list_for_each(&sess->pfcp.pdr_list, pdr) {",
          "720:         if (pdr->src_if == OGS_PFCP_INTERFACE_CP_FUNCTION && pdr->gnode) {",
          "723:             ogs_pkbuf_t *newbuf = NULL;",
          "731:             newbuf = ogs_pkbuf_copy(pkbuf);",
          "732:             ogs_assert(newbuf);",
          "736:             ogs_debug(\"      Send Router Advertisement\");",
          "737:             break;",
          "",
          "[Removed Lines]",
          "721:             ogs_gtp2_header_t gtp_hdesc;",
          "722:             ogs_gtp2_extension_header_t ext_hdesc;",
          "725:             memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "726:             memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "728:             gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "729:             gtp_hdesc.teid = pdr->f_teid.teid;",
          "734:             ogs_gtp2_send_user_plane(pdr->gnode, &gtp_hdesc, &ext_hdesc, newbuf);",
          "",
          "[Added Lines]",
          "694:             ogs_gtp2_header_desc_t header_desc;",
          "697:             memset(&header_desc, 0, sizeof(header_desc));",
          "699:             header_desc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "700:             header_desc.teid = pdr->f_teid.teid;",
          "705:             ogs_gtp2_send_user_plane(pdr->gnode, &header_desc, newbuf);",
          "",
          "---------------"
        ],
        "src/upf/gtp-path.c||src/upf/gtp-path.c": [
          "File: src/upf/gtp-path.c -> src/upf/gtp-path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:         upf_sess_urr_acc_add(sess, pdr->urr[i], recvbuf->len, false);",
          "216:     ogs_assert(true == ogs_pfcp_up_handle_pdr(",
          "",
          "[Removed Lines]",
          "217:                 pdr, OGS_GTPU_MSGTYPE_GPDU, recvbuf, &report));",
          "",
          "[Added Lines]",
          "217:                 pdr, OGS_GTPU_MSGTYPE_GPDU, NULL, recvbuf, &report));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:     ogs_sockaddr_t from;",
          "272:     ogs_gtp2_header_t *gtp_h = NULL;",
          "273:     ogs_pfcp_user_plane_report_t report;",
          "278:     ogs_assert(fd != INVALID_SOCKET);",
          "279:     sock = data;",
          "280:     ogs_assert(sock);",
          "",
          "[Removed Lines]",
          "275:     uint32_t teid;",
          "276:     uint8_t qfi;",
          "",
          "[Added Lines]",
          "273:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:         goto cleanup;",
          "304:     }",
          "307:         ogs_pkbuf_t *echo_rsp;",
          "309:         ogs_debug(\"[RECV] Echo Request from [%s]\", OGS_ADDR(&from, buf1));",
          "",
          "[Removed Lines]",
          "306:     if (gtp_h->type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "[Added Lines]",
          "304:     len = ogs_gtpu_parse_header(&header_desc, pkbuf);",
          "305:     if (len < 0) {",
          "306:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "307:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "308:         goto cleanup;",
          "309:     }",
          "310:     if (header_desc.type == OGS_GTPU_MSGTYPE_ECHO_REQ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:         }",
          "325:         goto cleanup;",
          "326:     }",
          "365:         pkbuf->len <= len) {",
          "367:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "368:         goto cleanup;",
          "369:     }",
          "370:     ogs_assert(ogs_pkbuf_pull(pkbuf, len));",
          "376:         ogs_pfcp_far_t *far = NULL;",
          "378:         far = ogs_pfcp_far_find_by_gtpu_error_indication(pkbuf);",
          "",
          "[Removed Lines]",
          "328:     teid = be32toh(gtp_h->teid);",
          "330:     ogs_trace(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "331:             gtp_h->type, OGS_ADDR(&from, buf1), teid);",
          "333:     qfi = 0;",
          "334:     if (gtp_h->flags & OGS_GTPU_FLAGS_E) {",
          "343:         ogs_gtp2_extension_header_t *extension_header =",
          "344:             (ogs_gtp2_extension_header_t *)(pkbuf->data+OGS_GTPV1U_HEADER_LEN);",
          "345:         ogs_assert(extension_header);",
          "346:         if (extension_header->type ==",
          "347:                 OGS_GTP2_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER) {",
          "348:             if (extension_header->pdu_type ==",
          "349:                 OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION) {",
          "350:                     ogs_trace(\"   QFI [0x%x]\",",
          "351:                             extension_header->qos_flow_identifier);",
          "352:                     qfi = extension_header->qos_flow_identifier;",
          "353:             }",
          "354:         }",
          "355:     }",
          "358:     len = ogs_gtpu_header_len(pkbuf);",
          "359:     if (len < 0) {",
          "360:         ogs_error(\"[DROP] Cannot decode GTPU packet\");",
          "361:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "362:         goto cleanup;",
          "363:     }",
          "364:     if (gtp_h->type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "366:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\", gtp_h->type, len);",
          "372:     if (gtp_h->type == OGS_GTPU_MSGTYPE_END_MARKER) {",
          "375:     } else if (gtp_h->type == OGS_GTPU_MSGTYPE_ERR_IND) {",
          "",
          "[Added Lines]",
          "331:     if (header_desc.type != OGS_GTPU_MSGTYPE_END_MARKER &&",
          "333:         ogs_error(\"[DROP] Small GTPU packet(type:%d len:%d)\",",
          "334:                 header_desc.type, len);",
          "339:     ogs_trace(\"[RECV] GPU-U Type [%d] from [%s] : TEID[0x%x]\",",
          "340:             header_desc.type, OGS_ADDR(&from, buf1), header_desc.teid);",
          "345:     if (header_desc.type == OGS_GTPU_MSGTYPE_END_MARKER) {",
          "348:     } else if (header_desc.type == OGS_GTPU_MSGTYPE_ERR_IND) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "394:             ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "395:         }",
          "398:         uint16_t eth_type = 0;",
          "399:         struct ip *ip_h = NULL;",
          "400:         uint32_t *src_addr = NULL;",
          "",
          "[Removed Lines]",
          "397:     } else if (gtp_h->type == OGS_GTPU_MSGTYPE_GPDU) {",
          "",
          "[Added Lines]",
          "370:     } else if (header_desc.type == OGS_GTPU_MSGTYPE_GPDU) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420: #if 0",
          "421:         upf_metrics_inst_global_inc(UPF_METR_GLOB_CTR_GTP_INDATAPKTN3UPF);",
          "423:                 UPF_METR_CTR_GTP_INDATAVOLUMEQOSLEVELN3UPF, pkbuf->len);",
          "424: #endif",
          "427:         if (!pfcp_object) {",
          "",
          "[Removed Lines]",
          "422:         upf_metrics_inst_by_qfi_add(qfi,",
          "426:         pfcp_object = ogs_pfcp_object_find_by_teid(teid);",
          "",
          "[Added Lines]",
          "395:         upf_metrics_inst_by_qfi_add(header_desc.qos_flow_identifier,",
          "399:         pfcp_object = ogs_pfcp_object_find_by_teid(header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "440:                         ogs_app()->time.message.pfcp.association_interval))) {",
          "441:                 ogs_error(\"[%s] Send Error Indication [TEID:0x%x] to [%s]\",",
          "442:                         OGS_ADDR(&sock->local_addr, buf1),",
          "444:                         OGS_ADDR(&from, buf2));",
          "446:             }",
          "447:             goto cleanup;",
          "448:         }",
          "",
          "[Removed Lines]",
          "443:                         teid,",
          "445:                 ogs_gtp1_send_error_indication(sock, teid, qfi, &from);",
          "",
          "[Added Lines]",
          "416:                         header_desc.teid,",
          "418:                 ogs_gtp1_send_error_indication(",
          "419:                         sock, header_desc.teid,",
          "420:                         header_desc.qos_flow_identifier, &from);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "466:                     continue;",
          "470:                     continue;",
          "474:                     continue;",
          "",
          "[Removed Lines]",
          "469:                 if (teid != pdr->f_teid.teid)",
          "473:                 if (qfi && pdr->qfi != qfi)",
          "",
          "[Added Lines]",
          "444:                 if (header_desc.teid != pdr->f_teid.teid)",
          "448:                 if (header_desc.qos_flow_identifier &&",
          "449:                     pdr->qfi != header_desc.qos_flow_identifier)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "494:                 if (ogs_time_ntp32_now() >",
          "495:                        (ogs_pfcp_self()->local_recovery +",
          "498:                     ogs_error(",
          "499:                             \"[%s] Send Error Indication [TEID:0x%x] to [%s]\",",
          "500:                             OGS_ADDR(&sock->local_addr, buf1),",
          "502:                             OGS_ADDR(&from, buf2));",
          "504:                 }",
          "505:                 goto cleanup;",
          "506:             }",
          "",
          "[Removed Lines]",
          "496:                         ogs_time_sec(",
          "497:                             ogs_app()->time.message.pfcp.association_interval))) {",
          "501:                             teid,",
          "503:                     ogs_gtp1_send_error_indication(sock, teid, qfi, &from);",
          "",
          "[Added Lines]",
          "472:                         ogs_time_sec(ogs_app()->time.message.pfcp.",
          "473:                             association_interval))) {",
          "477:                             header_desc.teid,",
          "479:                     ogs_gtp1_send_error_indication(",
          "480:                             sock, header_desc.teid,",
          "481:                             header_desc.qos_flow_identifier, &from);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "541:                 } else {",
          "542:                     ogs_error(\"[DROP] Source IP-%d Spoofing APN:%s SrcIf:%d DstIf:%d TEID:0x%x\",",
          "544:                     ogs_error(\"       SRC:%08X, UE:%08X\",",
          "545:                         be32toh(src_addr[0]), be32toh(sess->ipv4->addr[0]));",
          "546:                     ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "",
          "[Removed Lines]",
          "543:                                 ip_h->ip_v, pdr->dnn, pdr->src_if, far->dst_if, teid);",
          "",
          "[Added Lines]",
          "521:                                 ip_h->ip_v, pdr->dnn, pdr->src_if, far->dst_if, header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "619:                 } else {",
          "620:                     ogs_error(\"[DROP] Source IP-%d Spoofing APN:%s SrcIf:%d DstIf:%d TEID:0x%x\",",
          "622:                     ogs_error(\"SRC:%08x %08x %08x %08x\",",
          "623:                             be32toh(src_addr[0]), be32toh(src_addr[1]),",
          "624:                             be32toh(src_addr[2]), be32toh(src_addr[3]));",
          "",
          "[Removed Lines]",
          "621:                                 ip_h->ip_v, pdr->dnn, pdr->src_if, far->dst_if, teid);",
          "",
          "[Added Lines]",
          "599:                                 ip_h->ip_v, pdr->dnn, pdr->src_if, far->dst_if, header_desc.teid);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "679:         } else if (far->dst_if == OGS_PFCP_INTERFACE_ACCESS) {",
          "680:             ogs_assert(true == ogs_pfcp_up_handle_pdr(",
          "683:             if (report.type.downlink_data_report) {",
          "684:                 ogs_error(\"Indirect Data Fowarding Buffered\");",
          "",
          "[Removed Lines]",
          "681:                         pdr, gtp_h->type, pkbuf, &report));",
          "",
          "[Added Lines]",
          "659:                         pdr, header_desc.type, &header_desc, pkbuf, &report));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "705:             }",
          "707:             ogs_assert(true == ogs_pfcp_up_handle_pdr(",
          "710:             ogs_assert(report.type.downlink_data_report == 0);",
          "",
          "[Removed Lines]",
          "708:                         pdr, gtp_h->type, pkbuf, &report));",
          "",
          "[Added Lines]",
          "686:                         pdr, header_desc.type, &header_desc, pkbuf, &report));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "714:             ogs_assert_if_reached();",
          "715:         }",
          "716:     } else {",
          "718:         ogs_log_hexdump(OGS_LOG_ERROR, pkbuf->data, pkbuf->len);",
          "719:     }",
          "",
          "[Removed Lines]",
          "717:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", gtp_h->type);",
          "",
          "[Added Lines]",
          "695:         ogs_error(\"[DROP] Invalid GTPU Type [%d]\", header_desc.type);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "895:                     ogs_list_for_each(&sess->pfcp.pdr_list, pdr) {",
          "896:                         if (pdr->src_if == OGS_PFCP_INTERFACE_CORE) {",
          "897:                             ogs_assert(true ==",
          "900:                             break;",
          "901:                         }",
          "902:                     }",
          "",
          "[Removed Lines]",
          "898:                                 ogs_pfcp_up_handle_pdr(pdr,",
          "899:                                     OGS_GTPU_MSGTYPE_GPDU, recvbuf, &report));",
          "",
          "[Added Lines]",
          "876:                                 ogs_pfcp_up_handle_pdr(",
          "877:                                     pdr, OGS_GTPU_MSGTYPE_GPDU,",
          "878:                                     NULL, recvbuf, &report));",
          "",
          "---------------"
        ],
        "tests/common/gtpu.c||tests/common/gtpu.c": [
          "File: tests/common/gtpu.c -> tests/common/gtpu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     ogs_sockaddr_t from;",
          "62:     ogs_pkbuf_t *recvbuf = ogs_pkbuf_alloc(NULL, OGS_MAX_SDU_LEN);",
          "63:     ogs_assert(recvbuf);",
          "66:     ogs_assert(node);",
          "67:     ogs_assert(node->sock);",
          "",
          "[Removed Lines]",
          "64:     ogs_pkbuf_put(recvbuf, OGS_MAX_SDU_LEN);",
          "",
          "[Added Lines]",
          "65:     ogs_pkbuf_put(recvbuf, OGS_MAX_SDU_LEN-4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: found:",
          "150:     ogs_assert(sess);",
          "153:     ogs_assert(ip6_h);",
          "154:     if (ip6_h->ip6_nxt == IPPROTO_ICMPV6) {",
          "155:         struct nd_router_advert *advert_h = (struct nd_router_advert *)",
          "",
          "[Removed Lines]",
          "152:     ip6_h = pkbuf->data + ogs_gtpu_header_len(pkbuf);",
          "",
          "[Added Lines]",
          "153:     ip6_h = pkbuf->data + ogs_gtpu_parse_header(NULL, pkbuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: int test_gtpu_send(",
          "174:         ogs_socknode_t *node, test_bearer_t *bearer,",
          "177: {",
          "178:     ogs_gtp_node_t gnode;",
          "179:     test_sess_t *sess = NULL;",
          "183:     ogs_assert(pkbuf);",
          "185:     ogs_assert(bearer);",
          "",
          "[Removed Lines]",
          "175:         ogs_gtp2_header_t *gtp_hdesc, ogs_gtp2_extension_header_t *ext_hdesc,",
          "176:         ogs_pkbuf_t *pkbuf)",
          "181:     ogs_assert(gtp_hdesc);",
          "182:     ogs_assert(ext_hdesc);",
          "",
          "[Added Lines]",
          "176:         ogs_gtp2_header_desc_t *header_desc, ogs_pkbuf_t *pkbuf)",
          "181:     ogs_assert(header_desc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:         ogs_assert_if_reached();",
          "222:     }",
          "228: }",
          "230: int test_gtpu_send_ping(",
          "",
          "[Removed Lines]",
          "224:     ext_hdesc->pdu_type =",
          "225:         OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "227:     return ogs_gtp2_send_user_plane(&gnode, gtp_hdesc, ext_hdesc, pkbuf);",
          "",
          "[Added Lines]",
          "223:     return ogs_gtp2_send_user_plane(&gnode, header_desc, pkbuf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:     int rv;",
          "234:     test_sess_t *sess = NULL;",
          "239:     ogs_pkbuf_t *pkbuf = NULL;",
          "240:     ogs_ipsubnet_t dst_ipsub;",
          "",
          "[Removed Lines]",
          "236:     ogs_gtp2_header_t gtp_hdesc;",
          "237:     ogs_gtp2_extension_header_t ext_hdesc;",
          "",
          "[Added Lines]",
          "232:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "322:         ogs_assert_if_reached();",
          "323:     }",
          "330:     if (bearer->qfi) {",
          "334:     } else if (bearer->ebi) {",
          "337:     } else {",
          "338:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
          "339:         ogs_assert_if_reached();",
          "340:     }",
          "343: }",
          "345: int test_gtpu_send_slacc_rs(ogs_socknode_t *node, test_bearer_t *bearer)",
          "346: {",
          "347:     test_sess_t *sess = NULL;",
          "352:     ogs_pkbuf_t *pkbuf = NULL;",
          "353:     struct ip6_hdr *ip6_h = NULL;",
          "",
          "[Removed Lines]",
          "325:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "326:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "328:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "331:         gtp_hdesc.teid = sess->upf_n3_teid;",
          "332:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
          "335:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
          "342:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
          "349:     ogs_gtp2_header_t gtp_hdesc;",
          "350:     ogs_gtp2_extension_header_t ext_hdesc;",
          "",
          "[Added Lines]",
          "320:     memset(&header_desc, 0, sizeof(header_desc));",
          "322:     header_desc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "325:         header_desc.teid = sess->upf_n3_teid;",
          "326:         header_desc.pdu_type =",
          "327:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "328:         header_desc.qos_flow_identifier = bearer->qfi;",
          "330:         header_desc.teid = bearer->sgw_s1u_teid;",
          "337:     return test_gtpu_send(node, bearer, &header_desc, pkbuf);",
          "344:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "384:     ogs_pkbuf_trim(pkbuf, payload_len);",
          "392:     if (bearer->qfi) {",
          "401:     } else if (bearer->ebi) {",
          "404:     } else {",
          "405:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
          "406:         ogs_assert_if_reached();",
          "407:     }",
          "410: }",
          "412: int test_gtpu_send_slacc_rs_with_unspecified_source_address(",
          "",
          "[Removed Lines]",
          "386:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "387:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "389:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "390:     gtp_hdesc.flags = OGS_GTPU_FLAGS_S;",
          "393:         gtp_hdesc.teid = sess->upf_n3_teid;",
          "399:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
          "402:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
          "409:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
          "",
          "[Added Lines]",
          "380:     memset(&header_desc, 0, sizeof(header_desc));",
          "382:     header_desc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "383:     header_desc.flags = OGS_GTPU_FLAGS_S;",
          "390:         header_desc.teid = sess->upf_n3_teid;",
          "391:         header_desc.pdu_type =",
          "392:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "393:         header_desc.qos_flow_identifier = bearer->qfi;",
          "396:         header_desc.teid = bearer->sgw_s1u_teid;",
          "403:     return test_gtpu_send(node, bearer, &header_desc, pkbuf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "414: {",
          "415:     test_sess_t *sess = NULL;",
          "420:     ogs_pkbuf_t *pkbuf = NULL;",
          "421:     struct ip6_hdr *ip6_h = NULL;",
          "",
          "[Removed Lines]",
          "417:     ogs_gtp2_header_t gtp_hdesc;",
          "418:     ogs_gtp2_extension_header_t ext_hdesc;",
          "",
          "[Added Lines]",
          "411:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "445:     ogs_pkbuf_trim(pkbuf, payload_len);",
          "453:     if (bearer->qfi) {",
          "462:     } else if (bearer->ebi) {",
          "465:     } else {",
          "466:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
          "467:         ogs_assert_if_reached();",
          "468:     }",
          "471: }",
          "",
          "[Removed Lines]",
          "447:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "448:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "450:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "451:     gtp_hdesc.flags = OGS_GTPU_FLAGS_S;",
          "454:         gtp_hdesc.teid = sess->upf_n3_teid;",
          "460:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
          "463:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
          "470:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
          "",
          "[Added Lines]",
          "440:     memset(&header_desc, 0, sizeof(header_desc));",
          "442:     header_desc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "443:     header_desc.flags = OGS_GTPU_FLAGS_S;",
          "446:         header_desc.teid = sess->upf_n3_teid;",
          "451:         header_desc.teid = sess->upf_n3_teid;",
          "452:         header_desc.pdu_type =",
          "453:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "454:         header_desc.qos_flow_identifier = bearer->qfi;",
          "457:         header_desc.teid = bearer->sgw_s1u_teid;",
          "464:     return test_gtpu_send(node, bearer, &header_desc, pkbuf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "477:     test_sess_t *sess = NULL;",
          "478:     uint32_t teid = 0;",
          "483:     ogs_pkbuf_t *pkbuf = NULL;",
          "",
          "[Removed Lines]",
          "480:     ogs_gtp2_header_t gtp_hdesc;",
          "481:     ogs_gtp2_extension_header_t ext_hdesc;",
          "",
          "[Added Lines]",
          "474:     ogs_gtp2_header_desc_t header_desc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "486:     sess = bearer->sess;",
          "487:     ogs_assert(sess);",
          "489:     if (bearer->qfi) {",
          "491:         teid = sess->gnb_n3_teid;",
          "493:     } else if (bearer->ebi) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     memset(&header_desc, 0, sizeof(header_desc));",
          "484:     header_desc.type = OGS_GTPU_MSGTYPE_ERR_IND;",
          "485:     header_desc.flags = OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_E;",
          "486:     header_desc.udp.presence = true;",
          "487:     header_desc.udp.port = 0;",
          "492:         header_desc.pdu_type =",
          "493:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "494:         header_desc.qos_flow_identifier = bearer->qfi;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "502:     pkbuf = ogs_gtp1_build_error_indication(teid, node->addr);",
          "503:     ogs_assert(pkbuf);",
          "513: }",
          "515: int test_gtpu_send_indirect_data_forwarding(",
          "",
          "[Removed Lines]",
          "505:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "506:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "508:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_ERR_IND;",
          "509:     gtp_hdesc.flags = OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_E;",
          "510:     ext_hdesc.type = OGS_GTP2_EXTENSION_HEADER_TYPE_UDP_PORT;",
          "512:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
          "",
          "[Added Lines]",
          "508:     return test_gtpu_send(node, bearer, &header_desc, pkbuf);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "517: {",
          "518:     test_sess_t *sess = NULL;",
          "523:     ogs_assert(bearer);",
          "524:     sess = bearer->sess;",
          "525:     ogs_assert(sess);",
          "526:     ogs_assert(pkbuf);",
          "533:     if (bearer->qfi) {",
          "537:     } else if (bearer->ebi) {",
          "540:     } else {",
          "541:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
          "542:         ogs_assert_if_reached();",
          "543:     }",
          "546: }",
          "",
          "[Removed Lines]",
          "520:     ogs_gtp2_header_t gtp_hdesc;",
          "521:     ogs_gtp2_extension_header_t ext_hdesc;",
          "528:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
          "529:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
          "531:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "534:         gtp_hdesc.teid = sess->handover.upf_dl_teid;",
          "535:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
          "538:         gtp_hdesc.teid = bearer->handover.ul_teid;",
          "545:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
          "",
          "[Added Lines]",
          "516:     ogs_gtp2_header_desc_t header_desc;",
          "523:     memset(&header_desc, 0, sizeof(header_desc));",
          "525:     header_desc.type = OGS_GTPU_MSGTYPE_GPDU;",
          "528:         header_desc.teid = sess->handover.upf_dl_teid;",
          "529:         header_desc.pdu_type =",
          "530:             OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
          "531:         header_desc.qos_flow_identifier = bearer->qfi;",
          "534:         header_desc.teid = bearer->handover.ul_teid;",
          "541:     header_desc.pdcp_number_presence = true;",
          "542:     header_desc.pdcp_number = 0x4567;",
          "544:     return test_gtpu_send(node, bearer, &header_desc, pkbuf);",
          "",
          "---------------"
        ],
        "tests/common/gtpu.h||tests/common/gtpu.h": [
          "File: tests/common/gtpu.h -> tests/common/gtpu.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: int test_gtpu_send(",
          "37:         ogs_socknode_t *node, test_bearer_t *bearer,",
          "40: int test_gtpu_send_ping(",
          "41:         ogs_socknode_t *node, test_bearer_t *bearer, const char *dst_ip);",
          "42: int test_gtpu_send_slacc_rs(ogs_socknode_t *node, test_bearer_t *bearer);",
          "",
          "[Removed Lines]",
          "38:         ogs_gtp2_header_t *gtp_hdesc, ogs_gtp2_extension_header_t *ext_hdesc,",
          "39:         ogs_pkbuf_t *pkbuf);",
          "",
          "[Added Lines]",
          "38:         ogs_gtp2_header_desc_t *header_desc, ogs_pkbuf_t *pkbuf);",
          "",
          "---------------"
        ]
      }
    }
  ]
}