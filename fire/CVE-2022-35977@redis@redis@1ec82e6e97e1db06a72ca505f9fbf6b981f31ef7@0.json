{
  "cve_id": "CVE-2022-35977",
  "cve_desc": "Redis is an in-memory database that persists on disk. Authenticated users issuing specially crafted `SETRANGE` and `SORT(_RO)` commands can trigger an integer overflow, resulting with Redis attempting to allocate impossible amounts of memory and abort with an out-of-memory (OOM) panic. The problem is fixed in Redis versions 7.0.8, 6.2.9 and 6.0.17. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "redis/redis",
  "patch_hash": "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
  "patch_info": {
    "commit_hash": "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
    "files": [
      "src/sort.c",
      "src/t_string.c",
      "tests/unit/sort.tcl",
      "tests/unit/type/string.tcl"
    ],
    "message": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977) (#11720)\n\nAuthenticated users issuing specially crafted SETRANGE and SORT(_RO)\ncommands can trigger an integer overflow, resulting with Redis attempting\nto allocate impossible amounts of memory and abort with an OOM panic.",
    "before_after_code_files": [
      "src/sort.c||src/sort.c",
      "src/t_string.c||src/t_string.c",
      "tests/unit/sort.tcl||tests/unit/sort.tcl",
      "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
    ]
  },
  "patch_diff": {
    "src/sort.c||src/sort.c": [
      "File: src/sort.c -> src/sort.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "329:     }",
      "333:     end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;",
      "334:     if (start >= vectorlen) {",
      "335:         start = vectorlen-1;",
      "",
      "[Removed Lines]",
      "332:     start = (limit_start < 0) ? 0 : limit_start;",
      "",
      "[Added Lines]",
      "333:     start = min(max(limit_start, 0), vectorlen);",
      "334:     limit_count = min(max(limit_count, -1), vectorlen);",
      "",
      "---------------"
    ],
    "src/t_string.c||src/t_string.c": [
      "File: src/t_string.c -> src/t_string.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");",
      "43:         return C_ERR;",
      "44:     }",
      "",
      "[Removed Lines]",
      "40: static int checkStringLength(client *c, long long size) {",
      "41:     if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {",
      "",
      "[Added Lines]",
      "40: static int checkStringLength(client *c, long long size, long long append) {",
      "41:     if (mustObeyClient(c))",
      "42:         return C_OK;",
      "44:     long long total = (uint64_t)size + append;",
      "47:     if (total > server.proto_max_bulk_len || total < size || total < append) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "454:         }",
      "458:             return;",
      "460:         o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));",
      "",
      "[Removed Lines]",
      "457:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
      "",
      "[Added Lines]",
      "463:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:         }",
      "478:             return;",
      "",
      "[Removed Lines]",
      "477:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
      "",
      "[Added Lines]",
      "483:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "705:         append = c->argv[2];",
      "708:             return;",
      "",
      "[Removed Lines]",
      "706:         totlen = stringObjectLen(o)+sdslen(append->ptr);",
      "707:         if (checkStringLength(c,totlen) != C_OK)",
      "",
      "[Added Lines]",
      "712:         if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)",
      "",
      "---------------"
    ],
    "tests/unit/sort.tcl||tests/unit/sort.tcl": [
      "File: tests/unit/sort.tcl -> tests/unit/sort.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:             }",
      "340:         } {} {cluster:skip}",
      "341:     }",
      "342: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:     test {SETRANGE with huge offset} {",
      "344:         r lpush L 2 1 0",
      "345:         # expecting a different outcome on 32 and 64 bit systems",
      "346:         foreach value {9223372036854775807 2147483647} {",
      "347:             catch {[r sort_ro L by a limit 2 $value]} res",
      "348:             if {![string match \"2\" $res] && ![string match \"*out of range*\" $res]} {",
      "349:                 assert_not_equal $res \"expecting an error or 2\"",
      "350:             }",
      "351:         }",
      "352:     }",
      "",
      "---------------"
    ],
    "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
      "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "598:     test {LCS indexes with match len and minimum match len} {",
      "599:         dict get [r LCS virus1{t} virus2{t} IDX WITHMATCHLEN MINMATCHLEN 5] matches",
      "600:     } {{{1 222} {13 234} 222}}",
      "601: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "602:     test {SETRANGE with huge offset} {",
      "603:         foreach value {9223372036854775807 2147483647} {",
      "604:             catch {[r setrange K $value A]} res",
      "605:             # expecting a different error on 32 and 64 bit systems",
      "606:             if {![string match \"*string exceeds maximum allowed size*\" $res] && ![string match \"*out of range*\" $res]} {",
      "607:                 assert_equal $res \"expecting an error\"",
      "608:            }",
      "609:         }",
      "610:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c25c6b7da116e110e89a5db45eeae743879e7ea",
      "candidate_info": {
        "commit_hash": "6c25c6b7da116e110e89a5db45eeae743879e7ea",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/6c25c6b7da116e110e89a5db45eeae743879e7ea",
        "files": [
          "src/sort.c",
          "src/t_string.c",
          "tests/unit/sort.tcl",
          "tests/unit/type/string.tcl"
        ],
        "message": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977)\n\nAuthenticated users issuing specially crafted SETRANGE and SORT(_RO)\ncommands can trigger an integer overflow, resulting with Redis attempting\nto allocate impossible amounts of memory and abort with an OOM panic.",
        "before_after_code_files": [
          "src/sort.c||src/sort.c",
          "src/t_string.c||src/t_string.c",
          "tests/unit/sort.tcl||tests/unit/sort.tcl",
          "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ],
          "candidate": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/sort.c||src/sort.c": [
          "File: src/sort.c -> src/sort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:     }",
          "333:     end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;",
          "334:     if (start >= vectorlen) {",
          "335:         start = vectorlen-1;",
          "",
          "[Removed Lines]",
          "332:     start = (limit_start < 0) ? 0 : limit_start;",
          "",
          "[Added Lines]",
          "333:     start = min(max(limit_start, 0), vectorlen);",
          "334:     limit_count = min(max(limit_count, -1), vectorlen);",
          "",
          "---------------"
        ],
        "src/t_string.c||src/t_string.c": [
          "File: src/t_string.c -> src/t_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");",
          "43:         return C_ERR;",
          "44:     }",
          "",
          "[Removed Lines]",
          "40: static int checkStringLength(client *c, long long size) {",
          "41:     if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {",
          "",
          "[Added Lines]",
          "40: static int checkStringLength(client *c, long long size, long long append) {",
          "41:     if (mustObeyClient(c))",
          "42:         return C_OK;",
          "44:     long long total = (uint64_t)size + append;",
          "47:     if (total > server.proto_max_bulk_len || total < size || total < append) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:         }",
          "460:             return;",
          "462:         o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));",
          "",
          "[Removed Lines]",
          "459:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "465:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:         }",
          "480:             return;",
          "",
          "[Removed Lines]",
          "479:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "485:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "707:         append = c->argv[2];",
          "710:             return;",
          "",
          "[Removed Lines]",
          "708:         totlen = stringObjectLen(o)+sdslen(append->ptr);",
          "709:         if (checkStringLength(c,totlen) != C_OK)",
          "",
          "[Added Lines]",
          "714:         if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)",
          "",
          "---------------"
        ],
        "tests/unit/sort.tcl||tests/unit/sort.tcl": [
          "File: tests/unit/sort.tcl -> tests/unit/sort.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:             }",
          "328:         } {} {cluster:skip}",
          "329:     }",
          "330: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     test {SETRANGE with huge offset} {",
          "332:         r lpush L 2 1 0",
          "333:         # expecting a different outcome on 32 and 64 bit systems",
          "334:         foreach value {9223372036854775807 2147483647} {",
          "335:             catch {[r sort_ro L by a limit 2 $value]} res",
          "336:             if {![string match \"2\" $res] && ![string match \"*out of range*\" $res]} {",
          "337:                 assert_not_equal $res \"expecting an error or 2\"",
          "338:             }",
          "339:         }",
          "340:     }",
          "",
          "---------------"
        ],
        "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
          "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:     test {LCS indexes with match len and minimum match len} {",
          "599:         dict get [r LCS virus1{t} virus2{t} IDX WITHMATCHLEN MINMATCHLEN 5] matches",
          "600:     } {{{1 222} {13 234} 222}}",
          "601: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     test {SETRANGE with huge offset} {",
          "603:         foreach value {9223372036854775807 2147483647} {",
          "604:             catch {[r setrange K $value A]} res",
          "605:             # expecting a different error on 32 and 64 bit systems",
          "606:             if {![string match \"*string exceeds maximum allowed size*\" $res] && ![string match \"*out of range*\" $res]} {",
          "607:                 assert_equal $res \"expecting an error\"",
          "608:            }",
          "609:         }",
          "610:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6bbfec2fffbd43ce53b89aac7983d80b3ca0bcc",
      "candidate_info": {
        "commit_hash": "c6bbfec2fffbd43ce53b89aac7983d80b3ca0bcc",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/c6bbfec2fffbd43ce53b89aac7983d80b3ca0bcc",
        "files": [
          "src/server.h",
          "src/sort.c",
          "src/t_string.c",
          "tests/support/test.tcl",
          "tests/unit/sort.tcl",
          "tests/unit/type/string.tcl"
        ],
        "message": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977)\n\nAuthenticated users issuing specially crafted SETRANGE and SORT(_RO)\ncommands can trigger an integer overflow, resulting with Redis attempting\nto allocate impossible amounts of memory and abort with an OOM panic.",
        "before_after_code_files": [
          "src/server.h||src/server.h",
          "src/sort.c||src/sort.c",
          "src/t_string.c||src/t_string.c",
          "tests/support/test.tcl||tests/support/test.tcl",
          "tests/unit/sort.tcl||tests/unit/sort.tcl",
          "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ],
          "candidate": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #include \"endianconv.h\"",
          "84: #include \"crc64.h\"",
          "87: #define C_OK                    0",
          "88: #define C_ERR                   -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #undef min",
          "88: #undef max",
          "89: #define min(a, b) ((a) < (b) ? (a) : (b))",
          "90: #define max(a, b) ((a) > (b) ? (a) : (b))",
          "",
          "---------------"
        ],
        "src/sort.c||src/sort.c": [
          "File: src/sort.c -> src/sort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     }",
          "325:     end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;",
          "326:     if (start >= vectorlen) {",
          "327:         start = vectorlen-1;",
          "",
          "[Removed Lines]",
          "324:     start = (limit_start < 0) ? 0 : limit_start;",
          "",
          "[Added Lines]",
          "325:     start = min(max(limit_start, 0), vectorlen);",
          "326:     limit_count = min(max(limit_count, -1), vectorlen);",
          "",
          "---------------"
        ],
        "src/t_string.c||src/t_string.c": [
          "File: src/t_string.c -> src/t_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");",
          "40:         return C_ERR;",
          "41:     }",
          "",
          "[Removed Lines]",
          "37: static int checkStringLength(client *c, long long size) {",
          "38:     if (!(c->flags & CLIENT_MASTER) && size > server.proto_max_bulk_len) {",
          "",
          "[Added Lines]",
          "37: static int checkStringLength(client *c, long long size, long long append) {",
          "38:     if (c->flags & CLIENT_MASTER)",
          "39:         return C_OK;",
          "41:     long long total = (uint64_t)size + append;",
          "44:     if (total > server.proto_max_bulk_len || total < size || total < append) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         }",
          "214:             return;",
          "216:         o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));",
          "",
          "[Removed Lines]",
          "213:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "219:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:         }",
          "234:             return;",
          "",
          "[Removed Lines]",
          "233:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "239:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "460:         append = c->argv[2];",
          "463:             return;",
          "",
          "[Removed Lines]",
          "461:         totlen = stringObjectLen(o)+sdslen(append->ptr);",
          "462:         if (checkStringLength(c,totlen) != C_OK)",
          "",
          "[Added Lines]",
          "467:         if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)",
          "",
          "---------------"
        ],
        "tests/support/test.tcl||tests/support/test.tcl": [
          "File: tests/support/test.tcl -> tests/support/test.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     }",
          "32: }",
          "34: proc assert_equal {value expected {detail \"\"}} {",
          "35:     if {$expected ne $value} {",
          "36:         if {$detail ne \"\"} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: proc assert_not_equal {value expected {detail \"\"}} {",
          "35:     if {!($expected ne $value)} {",
          "36:         assert_failed \"Expected '$value' not equal to '$expected'\" $detail",
          "37:     }",
          "38: }",
          "",
          "---------------"
        ],
        "tests/unit/sort.tcl||tests/unit/sort.tcl": [
          "File: tests/unit/sort.tcl -> tests/unit/sort.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:             }",
          "316:         }",
          "317:     }",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:     test {SETRANGE with huge offset} {",
          "320:         r lpush L 2 1 0",
          "321:         # expecting a different outcome on 32 and 64 bit systems",
          "322:         foreach value {9223372036854775807 2147483647} {",
          "323:             catch {[r sort_ro L by a limit 2 $value]} res",
          "324:             if {![string match \"2\" $res] && ![string match \"*out of range*\" $res]} {",
          "325:                 assert_not_equal $res \"expecting an error or 2\"",
          "326:             }",
          "327:         }",
          "328:     }",
          "",
          "---------------"
        ],
        "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
          "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:     test {LCS indexes with match len and minimum match len} {",
          "450:         dict get [r STRALGO LCS IDX KEYS virus1 virus2 WITHMATCHLEN MINMATCHLEN 5] matches",
          "451:     } {{{1 222} {13 234} 222}}",
          "452: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:     test {SETRANGE with huge offset} {",
          "454:         foreach value {9223372036854775807 2147483647} {",
          "455:             catch {[r setrange K $value A]} res",
          "456:             # expecting a different error on 32 and 64 bit systems",
          "457:             if {![string match \"*string exceeds maximum allowed size*\" $res] && ![string match \"*out of range*\" $res]} {",
          "458:                 assert_equal $res \"expecting an error\"",
          "459:            }",
          "460:         }",
          "461:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5453899878f91a323fced7aa07b887a54fe94644",
      "candidate_info": {
        "commit_hash": "5453899878f91a323fced7aa07b887a54fe94644",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/5453899878f91a323fced7aa07b887a54fe94644",
        "files": [
          "src/server.h",
          "src/sort.c",
          "src/t_string.c",
          "tests/support/test.tcl",
          "tests/unit/sort.tcl",
          "tests/unit/type/string.tcl"
        ],
        "message": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977)\n\nAuthenticated users issuing specially crafted SETRANGE and SORT(_RO)\ncommands can trigger an integer overflow, resulting with Redis attempting\nto allocate impossible amounts of memory and abort with an OOM panic.",
        "before_after_code_files": [
          "src/server.h||src/server.h",
          "src/sort.c||src/sort.c",
          "src/t_string.c||src/t_string.c",
          "tests/support/test.tcl||tests/support/test.tcl",
          "tests/unit/sort.tcl||tests/unit/sort.tcl",
          "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ],
          "candidate": [
            "src/sort.c||src/sort.c",
            "src/t_string.c||src/t_string.c",
            "tests/unit/sort.tcl||tests/unit/sort.tcl",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #include \"endianconv.h\"",
          "85: #include \"crc64.h\"",
          "88: #define C_OK                    0",
          "89: #define C_ERR                   -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #undef min",
          "89: #undef max",
          "90: #define min(a, b) ((a) < (b) ? (a) : (b))",
          "91: #define max(a, b) ((a) > (b) ? (a) : (b))",
          "",
          "---------------"
        ],
        "src/sort.c||src/sort.c": [
          "File: src/sort.c -> src/sort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     }",
          "325:     end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;",
          "326:     if (start >= vectorlen) {",
          "327:         start = vectorlen-1;",
          "",
          "[Removed Lines]",
          "324:     start = (limit_start < 0) ? 0 : limit_start;",
          "",
          "[Added Lines]",
          "325:     start = min(max(limit_start, 0), vectorlen);",
          "326:     limit_count = min(max(limit_count, -1), vectorlen);",
          "",
          "---------------"
        ],
        "src/t_string.c||src/t_string.c": [
          "File: src/t_string.c -> src/t_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");",
          "43:         return C_ERR;",
          "44:     }",
          "",
          "[Removed Lines]",
          "40: static int checkStringLength(client *c, long long size) {",
          "41:     if (!(c->flags & CLIENT_MASTER) && size > server.proto_max_bulk_len) {",
          "",
          "[Added Lines]",
          "40: static int checkStringLength(client *c, long long size, long long append) {",
          "41:     if (c->flags & CLIENT_MASTER)",
          "42:         return C_OK;",
          "44:     long long total = (uint64_t)size + append;",
          "47:     if (total > server.proto_max_bulk_len || total < size || total < append) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:         }",
          "447:             return;",
          "449:         o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));",
          "",
          "[Removed Lines]",
          "446:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "452:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "463:         }",
          "467:             return;",
          "",
          "[Removed Lines]",
          "466:         if (checkStringLength(c,offset+sdslen(value)) != C_OK)",
          "",
          "[Added Lines]",
          "472:         if (checkStringLength(c,offset,sdslen(value)) != C_OK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "689:         append = c->argv[2];",
          "692:             return;",
          "",
          "[Removed Lines]",
          "690:         totlen = stringObjectLen(o)+sdslen(append->ptr);",
          "691:         if (checkStringLength(c,totlen) != C_OK)",
          "",
          "[Added Lines]",
          "696:         if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)",
          "",
          "---------------"
        ],
        "tests/support/test.tcl||tests/support/test.tcl": [
          "File: tests/support/test.tcl -> tests/support/test.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:      error \"assertion:$expected_err $detail\"",
          "41: }",
          "43: proc assert_equal {value expected {detail \"\"}} {",
          "44:     if {$expected ne $value} {",
          "45:         assert_failed \"Expected '$value' to be equal to '$expected'\" $detail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: proc assert_not_equal {value expected {detail \"\"}} {",
          "44:     if {!($expected ne $value)} {",
          "45:         assert_failed \"Expected '$value' not equal to '$expected'\" $detail",
          "46:     }",
          "47: }",
          "",
          "---------------"
        ],
        "tests/unit/sort.tcl||tests/unit/sort.tcl": [
          "File: tests/unit/sort.tcl -> tests/unit/sort.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:             }",
          "316:         }",
          "317:     }",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:     test {SETRANGE with huge offset} {",
          "320:         r lpush L 2 1 0",
          "321:         # expecting a different outcome on 32 and 64 bit systems",
          "322:         foreach value {9223372036854775807 2147483647} {",
          "323:             catch {[r sort_ro L by a limit 2 $value]} res",
          "324:             if {![string match \"2\" $res] && ![string match \"*out of range*\" $res]} {",
          "325:                 assert_not_equal $res \"expecting an error or 2\"",
          "326:             }",
          "327:         }",
          "328:     }",
          "",
          "---------------"
        ],
        "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
          "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     test {LCS indexes with match len and minimum match len} {",
          "575:         dict get [r STRALGO LCS IDX KEYS virus1 virus2 WITHMATCHLEN MINMATCHLEN 5] matches",
          "576:     } {{{1 222} {13 234} 222}}",
          "577: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:     test {SETRANGE with huge offset} {",
          "579:         foreach value {9223372036854775807 2147483647} {",
          "580:             catch {[r setrange K $value A]} res",
          "581:             # expecting a different error on 32 and 64 bit systems",
          "582:             if {![string match \"*string exceeds maximum allowed size*\" $res] && ![string match \"*out of range*\" $res]} {",
          "583:                 assert_equal $res \"expecting an error\"",
          "584:            }",
          "585:         }",
          "586:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}