{
  "cve_id": "CVE-2021-36979",
  "cve_desc": "Unicorn Engine 1.0.2 has an out-of-bounds write in tb_flush_armeb (called from cpu_arm_exec_armeb and tcg_cpu_exec_armeb).",
  "repo": "unicorn-engine/unicorn",
  "patch_hash": "bf1713d9e011b55ca1f502a6779fc4722b4bb077",
  "patch_info": {
    "commit_hash": "bf1713d9e011b55ca1f502a6779fc4722b4bb077",
    "repo": "unicorn-engine/unicorn",
    "commit_url": "https://github.com/unicorn-engine/unicorn/commit/bf1713d9e011b55ca1f502a6779fc4722b4bb077",
    "files": [
      "samples/sample_arm.c"
    ],
    "message": "Add arm ite blocks samples from #853 (#1381)",
    "before_after_code_files": [
      "samples/sample_arm.c||samples/sample_arm.c"
    ]
  },
  "patch_diff": {
    "samples/sample_arm.c||samples/sample_arm.c": [
      "File: samples/sample_arm.c -> samples/sample_arm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #define ARM_CODE \"\\x37\\x00\\xa0\\xe3\\x03\\x10\\x42\\xe0\" // mov r0, #0x37; sub r1, r2, r3",
      "12: #define THUMB_CODE \"\\x83\\xb0\" // sub    sp, #0xc",
      "15: #define ADDRESS 0x10000",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #define ARM_THUM_COND_CODE \"\\x9a\\x42\\x14\\xbf\\x68\\x22\\x4d\\x22\" // 'cmp r2, r3\\nit ne\\nmov r2, #0x68\\nmov r2, #0x4d'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:     uc_close(uc);",
      "131: }",
      "133: int main(int argc, char **argv, char **envp)",
      "134: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135: static void test_thumb_ite() {",
      "136:     uc_engine *uc;",
      "137:     uc_err err;",
      "139:     uint32_t sp = 0x1234;",
      "140:     uint32_t r2 = 0, r3 = 1;",
      "141:     uint32_t step_r2, step_r3;",
      "143:     int i, addr=ADDRESS;",
      "145:     printf(\"Emulate a THUMB ITE block as a whole or per instruction.\\n\");",
      "146:     err = uc_open(UC_ARCH_ARM, UC_MODE_THUMB, &uc);",
      "147:     if (err) {",
      "148:         printf(\"Failed on uc_open() with error returned: %u (%s)\\n\",",
      "149:                 err, uc_strerror(err));",
      "150:         return;",
      "151:     }",
      "153:     uc_mem_map(uc, ADDRESS, 2 * 1024 * 1024, UC_PROT_ALL);",
      "155:     uc_mem_write(uc, ADDRESS, ARM_THUM_COND_CODE, sizeof(ARM_THUM_COND_CODE) - 1);",
      "157:     uc_reg_write(uc, UC_ARM_REG_SP, &sp);",
      "159:     uc_reg_write(uc, UC_ARM_REG_R2, &r2);",
      "160:     uc_reg_write(uc, UC_ARM_REG_R3, &r3);",
      "163:     printf(\"Running the entire binary.\\n\");",
      "164:     err = uc_emu_start(uc, ADDRESS | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 0);",
      "165:     if (err) {",
      "166:         printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
      "167:     }",
      "168:     uc_reg_read(uc, UC_ARM_REG_R2, &r2);",
      "169:     uc_reg_read(uc, UC_ARM_REG_R3, &r3);",
      "171:     printf(\">>> R2: %d\\n\", r2);",
      "172:     printf(\">>> R3: %d\\n\\n\", r3);",
      "175:     printf(\"Running the binary one instruction at a time.\\n\");",
      "176:     for (i = 0; i < sizeof(ARM_THUM_COND_CODE) / 2; i++) {",
      "177:         err = uc_emu_start(uc, addr | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 1);",
      "178:         if (err) {",
      "179:             printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
      "180:         }",
      "181:         uc_reg_read(uc, UC_ARM_REG_PC, &addr);",
      "182:     }",
      "184:     uc_reg_read(uc, UC_ARM_REG_R2, &step_r2);",
      "185:     uc_reg_read(uc, UC_ARM_REG_R3, &step_r3);",
      "187:     printf(\">>> R2: %d\\n\", step_r2);",
      "188:     printf(\">>> R3: %d\\n\\n\", step_r3);",
      "190:     if (step_r2 != r2 || step_r3 != r3) {",
      "191:         printf(\"Failed with ARM ITE blocks stepping!\\n\");",
      "192:     }",
      "194:     uc_close(uc);",
      "195: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "146:     test_arm();",
      "147:     printf(\"==========================\\n\");",
      "148:     test_thumb();",
      "151: #ifdef DYNLOAD",
      "152:     uc_dyn_free();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "214:     printf(\"==========================\\n\");",
      "215:     test_thumb_ite();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34ddafcbcf6d16508a63623a68715394ea4e12d8",
      "candidate_info": {
        "commit_hash": "34ddafcbcf6d16508a63623a68715394ea4e12d8",
        "repo": "unicorn-engine/unicorn",
        "commit_url": "https://github.com/unicorn-engine/unicorn/commit/34ddafcbcf6d16508a63623a68715394ea4e12d8",
        "files": [
          "qemu/target-arm/translate.c"
        ],
        "message": "Fix pausing within Thumb2 ITE blocks (#853) (#880)\n\nCo-authored-by: Rami Ali <flowergrass@users.noreply.github.com>",
        "before_after_code_files": [
          "qemu/target-arm/translate.c||qemu/target-arm/translate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "qemu/target-arm/translate.c||qemu/target-arm/translate.c": [
          "File: qemu/target-arm/translate.c -> qemu/target-arm/translate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10435:     if (HOOK_EXISTS_BOUNDED(s->uc, UC_HOOK_CODE, s->pc)) {",
          "10448:         }",
          "10450:         check_exit_request(tcg_ctx);",
          "",
          "[Removed Lines]",
          "10437:         switch(insn & 0xf800) {",
          "10439:             case 0xe800:",
          "10440:             case 0xf000:",
          "10441:             case 0xf800:",
          "10442:                 gen_uc_tracecode(tcg_ctx, 4, UC_HOOK_CODE_IDX, s->uc, s->pc);",
          "10443:                 break;",
          "10445:             default:",
          "10446:                 gen_uc_tracecode(tcg_ctx, 2, UC_HOOK_CODE_IDX, s->uc, s->pc);",
          "10447:                 break;",
          "",
          "[Added Lines]",
          "10438:         if (s->condexec_mask == 0) {",
          "10439:             switch(insn & 0xf800) {",
          "10441:                 case 0xe800:",
          "10442:                 case 0xf000:",
          "10443:                 case 0xf800:",
          "10444:                     gen_uc_tracecode(tcg_ctx, 4, UC_HOOK_CODE_IDX, s->uc, s->pc);",
          "10445:                     break;",
          "10447:                 default:",
          "10449:                     if (!((insn & 0xff00) == 0xbf00)) {",
          "10450:                         gen_uc_tracecode(tcg_ctx, 2, UC_HOOK_CODE_IDX, s->uc, s->pc);",
          "10451:                     }",
          "10452:                     break;",
          "10453:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1f59bac5542776fe85fb225a88d5cc623f89b87",
      "candidate_info": {
        "commit_hash": "f1f59bac5542776fe85fb225a88d5cc623f89b87",
        "repo": "unicorn-engine/unicorn",
        "commit_url": "https://github.com/unicorn-engine/unicorn/commit/f1f59bac5542776fe85fb225a88d5cc623f89b87",
        "files": [
          "samples/sample_arm.c"
        ],
        "message": "The UC instance must be created twice to reproduce the problem (#1382)\n\n* The UC instance must be created twice to reproduce the problem\n\n* Fix coding style",
        "before_after_code_files": [
          "samples/sample_arm.c||samples/sample_arm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "samples/sample_arm.c||samples/sample_arm.c"
          ],
          "candidate": [
            "samples/sample_arm.c||samples/sample_arm.c"
          ]
        }
      },
      "candidate_diff": {
        "samples/sample_arm.c||samples/sample_arm.c": [
          "File: samples/sample_arm.c -> samples/sample_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     uc_close(uc);",
          "133: }",
          "136:     uc_engine *uc;",
          "137:     uc_err err;",
          "139:     uint32_t sp = 0x1234;",
          "140:     uint32_t r2 = 0, r3 = 1;",
          "146:     err = uc_open(UC_ARCH_ARM, UC_MODE_THUMB, &uc);",
          "147:     if (err) {",
          "148:         printf(\"Failed on uc_open() with error returned: %u (%s)\\n\",",
          "",
          "[Removed Lines]",
          "135: static void test_thumb_ite() {",
          "141:     uint32_t step_r2, step_r3;",
          "143:     int i, addr=ADDRESS;",
          "145:     printf(\"Emulate a THUMB ITE block as a whole or per instruction.\\n\");",
          "",
          "[Added Lines]",
          "135: static void test_thumb_ite_internal(bool step, uint32_t *r2_out, uint32_t *r3_out)",
          "136: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     uc_reg_write(uc, UC_ARM_REG_R2, &r2);",
          "160:     uc_reg_write(uc, UC_ARM_REG_R3, &r3);",
          "167:     }",
          "168:     uc_reg_read(uc, UC_ARM_REG_R2, &r2);",
          "169:     uc_reg_read(uc, UC_ARM_REG_R3, &r3);",
          "171:     printf(\">>> R2: %d\\n\", r2);",
          "172:     printf(\">>> R3: %d\\n\\n\", r3);",
          "175:     printf(\"Running the binary one instruction at a time.\\n\");",
          "187:     printf(\">>> R2: %d\\n\", step_r2);",
          "188:     printf(\">>> R3: %d\\n\\n\", step_r3);",
          "190:     if (step_r2 != r2 || step_r3 != r3) {",
          "191:         printf(\"Failed with ARM ITE blocks stepping!\\n\");",
          "192:     }",
          "195: }",
          "198: int main(int argc, char **argv, char **envp)",
          "199: {",
          "",
          "[Removed Lines]",
          "163:     printf(\"Running the entire binary.\\n\");",
          "164:     err = uc_emu_start(uc, ADDRESS | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 0);",
          "165:     if (err) {",
          "166:         printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
          "176:     for (i = 0; i < sizeof(ARM_THUM_COND_CODE) / 2; i++) {",
          "177:         err = uc_emu_start(uc, addr | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 1);",
          "178:         if (err) {",
          "179:             printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
          "180:         }",
          "181:         uc_reg_read(uc, UC_ARM_REG_PC, &addr);",
          "182:     }",
          "184:     uc_reg_read(uc, UC_ARM_REG_R2, &step_r2);",
          "185:     uc_reg_read(uc, UC_ARM_REG_R3, &step_r3);",
          "194:     uc_close(uc);",
          "",
          "[Added Lines]",
          "159:     if (!step) {",
          "160:         err = uc_emu_start(uc, ADDRESS | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 0);",
          "161:         if (err) {",
          "162:             printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
          "163:         }",
          "164:     } else {",
          "165:         int i, addr = ADDRESS;",
          "166:         for (i = 0; i < sizeof(ARM_THUM_COND_CODE) / 2; i++) {",
          "167:             err = uc_emu_start(uc, addr | 1, ADDRESS + sizeof(ARM_THUM_COND_CODE) - 1, 0, 1);",
          "168:             if (err) {",
          "169:                 printf(\"Failed on uc_emu_start() with error returned: %u\\n\", err);",
          "170:             }",
          "171:             uc_reg_read(uc, UC_ARM_REG_PC, &addr);",
          "172:         }",
          "178:     uc_close(uc);",
          "182: }",
          "184: static void test_thumb_ite()",
          "185: {",
          "186:     uint32_t r2, r3;",
          "187:     uint32_t step_r2, step_r3;",
          "189:     printf(\"Emulate a THUMB ITE block as a whole or per instruction.\\n\");",
          "192:     printf(\"Running the entire binary.\\n\");",
          "193:     test_thumb_ite_internal(false, &r2, &r3);",
          "199:     test_thumb_ite_internal(true, &step_r2, &step_r3);",
          "",
          "---------------"
        ]
      }
    }
  ]
}