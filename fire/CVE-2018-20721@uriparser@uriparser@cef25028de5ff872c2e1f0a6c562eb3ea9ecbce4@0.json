{
  "cve_id": "CVE-2018-20721",
  "cve_desc": "URI_FUNC() in UriParse.c in uriparser before 0.9.1 has an out-of-bounds read (in uriParse*Ex* functions) for an incomplete URI with an IPv6 address containing an embedded IPv4 address, such as a \"//[::44.1\" address.",
  "repo": "uriparser/uriparser",
  "patch_hash": "cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4",
  "patch_info": {
    "commit_hash": "cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/cef25028de5ff872c2e1f0a6c562eb3ea9ecbce4",
    "files": [
      "ChangeLog",
      "src/UriParse.c",
      "test/test.cpp"
    ],
    "message": "Fix uriParse*Ex* out-of-bounds read",
    "before_after_code_files": [
      "src/UriParse.c||src/UriParse.c",
      "test/test.cpp||test/test.cpp"
    ]
  },
  "patch_diff": {
    "src/UriParse.c||src/UriParse.c": [
      "File: src/UriParse.c -> src/UriParse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "692:      return NULL;",
      "693:     }",
      "694:     first++;",
      "695:    }",
      "696:   } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "696:     if (first >= afterLast) {",
      "697:      URI_FUNC(StopSyntax)(state, first, memory);",
      "698:      return NULL;",
      "699:     }",
      "",
      "---------------"
    ],
    "test/test.cpp||test/test.cpp": [
      "File: test/test.cpp -> test/test.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:   URI_TEST_IP_SIX_FAIL(\"g:0:0:0:0:0:0\");",
      "243: }",
      "245: TEST(UriSuite, TestUri) {",
      "246:   UriParserStateA stateA;",
      "247:   UriParserStateW stateW;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245: TEST(UriSuite, TestIpSixOverread) {",
      "246:   UriUriA uri;",
      "247:   const char * errorPos;",
      "250:   char uriText[2 + 3 + 2 + 1 + 1];",
      "251:   strncpy(uriText, \"//[::44.1\", sizeof(uriText));",
      "253:   EXPECT_EQ(uriParseSingleUriExA(&uri, uriText,",
      "254:     uriText + sizeof(uriText), &errorPos), URI_ERROR_SYNTAX);",
      "255:   EXPECT_EQ(errorPos, uriText + sizeof(uriText));",
      "256: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75c896bc29e7e3d08e4c550f1ec9270e2364e7df",
      "candidate_info": {
        "commit_hash": "75c896bc29e7e3d08e4c550f1ec9270e2364e7df",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/75c896bc29e7e3d08e4c550f1ec9270e2364e7df",
        "files": [
          "ChangeLog",
          "src/UriParse.c"
        ],
        "message": "Waterproof errorPos <= afterLast for parse errors",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/UriParse.c||src/UriParse.c"
          ],
          "candidate": [
            "src/UriParse.c||src/UriParse.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "389:   UriMemoryManager * memory) {",
          "390:  if (first >= afterLast) {",
          "392:   return NULL;",
          "393:  }",
          "",
          "[Removed Lines]",
          "391:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "391:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "469:   UriMemoryManager * memory) {",
          "470:  if (first >= afterLast) {",
          "472:   return NULL;",
          "473:  }",
          "",
          "[Removed Lines]",
          "471:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "471:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:  case _UT('v'):",
          "482:   if (first + 1 >= afterLast) {",
          "484:    return NULL;",
          "485:   }",
          "",
          "[Removed Lines]",
          "483:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "[Added Lines]",
          "483:    URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "493:     if (afterHexZero == NULL) {",
          "494:      return NULL;",
          "495:     }",
          "498:      URI_FUNC(StopSyntax)(state, afterHexZero, memory);",
          "499:      return NULL;",
          "500:     }",
          "",
          "[Removed Lines]",
          "496:     if ((afterHexZero >= afterLast)",
          "497:       || (*afterHexZero != _UT('.'))) {",
          "",
          "[Added Lines]",
          "496:     if (afterHexZero >= afterLast) {",
          "497:      URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "498:      return NULL;",
          "499:     }",
          "500:     if (*afterHexZero != _UT('.')) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "532:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "533:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "534:  if (first >= afterLast) {",
          "536:   return NULL;",
          "537:  }",
          "",
          "[Removed Lines]",
          "535:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "538:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "593:  for (;;) {",
          "594:   if (first >= afterLast) {",
          "596:    return NULL;",
          "597:   }",
          "",
          "[Removed Lines]",
          "595:    URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "598:    URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "697:     first++;",
          "699:     if (first >= afterLast) {",
          "701:      return NULL;",
          "702:     }",
          "703:    }",
          "",
          "[Removed Lines]",
          "700:      URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "703:      URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "762:       if (first + 1 >= afterLast) {",
          "764:        return NULL;",
          "765:       }",
          "766:       if (first[1] == _UT(':')) {",
          "",
          "[Removed Lines]",
          "763:        URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "[Added Lines]",
          "766:        URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "780:        if (first + 1 >= afterLast) {",
          "783:        }",
          "784:        if (first[1] == _UT(':')) {",
          "",
          "[Removed Lines]",
          "781:         URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "",
          "[Added Lines]",
          "784:         URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "870:     first++;",
          "872:     if (first >= afterLast) {",
          "875:     }",
          "876:    } while (walking);",
          "",
          "[Removed Lines]",
          "873:      URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "876:      URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1155:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1156:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1157:  if (first >= afterLast) {",
          "1159:   return NULL;",
          "1160:  }",
          "",
          "[Removed Lines]",
          "1158:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "1161:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1319:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1320:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "1321:  if (first >= afterLast) {",
          "1323:   return NULL;",
          "1324:  }",
          "",
          "[Removed Lines]",
          "1322:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "1325:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1527:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1528:   UriMemoryManager * memory) {",
          "1529:  if (first >= afterLast) {",
          "1531:   return NULL;",
          "1532:  }",
          "",
          "[Removed Lines]",
          "1530:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "1533:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1572:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1573:   UriMemoryManager * memory) {",
          "1574:  if (first >= afterLast) {",
          "1576:   return NULL;",
          "1577:  }",
          "",
          "[Removed Lines]",
          "1575:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "1578:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1584:  case _UT('%'):",
          "1586:   if (first + 1 >= afterLast) {",
          "1588:    return NULL;",
          "1589:   }",
          "1591:   switch (first[1]) {",
          "1592:   case URI_SET_HEXDIG:",
          "1593:    if (first + 2 >= afterLast) {",
          "1595:     return NULL;",
          "1596:    }",
          "",
          "[Removed Lines]",
          "1587:    URI_FUNC(StopSyntax)(state, first + 1, memory);",
          "1594:     URI_FUNC(StopSyntax)(state, first + 2, memory);",
          "",
          "[Added Lines]",
          "1590:    URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "1597:     URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1629:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "1630:   UriMemoryManager * memory) {",
          "1631:  if (first >= afterLast) {",
          "1633:   return NULL;",
          "1634:  }",
          "",
          "[Removed Lines]",
          "1632:   URI_FUNC(StopSyntax)(state, first, memory);",
          "",
          "[Added Lines]",
          "1635:   URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2179:  afterUriReference = URI_FUNC(ParseUriReference)(state, first, afterLast, memory);",
          "2180:  if (afterUriReference == NULL) {",
          "2181:   return state->errorCode;",
          "2182:  }",
          "2183:  if (afterUriReference != afterLast) {",
          "2185:   return state->errorCode;",
          "2186:  }",
          "2187:  return URI_SUCCESS;",
          "",
          "[Removed Lines]",
          "2184:   URI_FUNC(StopSyntax)(state, afterUriReference, memory);",
          "",
          "[Added Lines]",
          "2185:   if (state->errorPos && (state->errorPos > afterLast)) {",
          "2186:    state->errorPos = afterLast;",
          "2187:   }",
          "2191:   if (afterUriReference < afterLast) {",
          "2192:    URI_FUNC(StopSyntax)(state, afterUriReference, memory);",
          "2193:   } else {",
          "2194:    URI_FUNC(StopSyntax)(state, afterLast, memory);",
          "2195:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}