{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0041087aa12044223103c7b8a3ca07d896652ab9",
      "candidate_info": {
        "commit_hash": "0041087aa12044223103c7b8a3ca07d896652ab9",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0041087aa12044223103c7b8a3ca07d896652ab9",
        "files": [
          "Include/internal/pycore_global_objects_fini_generated.h",
          "Include/internal/pycore_global_strings.h",
          "Include/internal/pycore_runtime_init_generated.h",
          "Include/internal/pycore_unicodeobject_generated.h",
          "Lib/test/test_embed.py",
          "Misc/NEWS.d/next/Library/2024-06-07-11-23-31.gh-issue-71587.IjFajE.rst",
          "Modules/_datetimemodule.c",
          "Tools/c-analyzer/cpython/globals-to-fix.tsv"
        ],
        "message": "[3.13] gh-71587: Drop local reference cache to `_strptime` module in `_datetime` (gh-120424)\n\nThe _strptime module object was cached in a static local variable (in the datetime.strptime() implementation).  That's a problem when it crosses isolation boundaries, such as reinitializing the runtme or between interpreters.  This change fixes the problem by dropping the static variable, instead always relying on the normal sys.modules cache (via PyImport_Import()).\n\n(cherry picked from commit 127c1d2771749853e287632c086b6054212bf12a, AKA gh-120224)\n\nCo-authored-by: neonene <53406459+neonene@users.noreply.github.com>",
        "before_after_code_files": [
          "Include/internal/pycore_global_objects_fini_generated.h||Include/internal/pycore_global_objects_fini_generated.h",
          "Include/internal/pycore_global_strings.h||Include/internal/pycore_global_strings.h",
          "Include/internal/pycore_runtime_init_generated.h||Include/internal/pycore_runtime_init_generated.h",
          "Include/internal/pycore_unicodeobject_generated.h||Include/internal/pycore_unicodeobject_generated.h",
          "Lib/test/test_embed.py||Lib/test/test_embed.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_global_objects_fini_generated.h||Include/internal/pycore_global_objects_fini_generated.h": [
          "File: Include/internal/pycore_global_objects_fini_generated.h -> Include/internal/pycore_global_objects_fini_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_showwarnmsg));",
          "777:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_shutdown));",
          "778:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_slotnames));",
          "779:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_strptime_datetime));",
          "780:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_swappedbytes_));",
          "781:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_type_));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:     _PyStaticObject_CheckRefcnt((PyObject *)&_Py_ID(_strptime));",
          "",
          "---------------"
        ],
        "Include/internal/pycore_global_strings.h||Include/internal/pycore_global_strings.h": [
          "File: Include/internal/pycore_global_strings.h -> Include/internal/pycore_global_strings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         STRUCT_FOR_ID(_showwarnmsg)",
          "266:         STRUCT_FOR_ID(_shutdown)",
          "267:         STRUCT_FOR_ID(_slotnames)",
          "268:         STRUCT_FOR_ID(_strptime_datetime)",
          "269:         STRUCT_FOR_ID(_swappedbytes_)",
          "270:         STRUCT_FOR_ID(_type_)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:         STRUCT_FOR_ID(_strptime)",
          "",
          "---------------"
        ],
        "Include/internal/pycore_runtime_init_generated.h||Include/internal/pycore_runtime_init_generated.h": [
          "File: Include/internal/pycore_runtime_init_generated.h -> Include/internal/pycore_runtime_init_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:     INIT_ID(_showwarnmsg), \\",
          "775:     INIT_ID(_shutdown), \\",
          "776:     INIT_ID(_slotnames), \\",
          "777:     INIT_ID(_strptime_datetime), \\",
          "778:     INIT_ID(_swappedbytes_), \\",
          "779:     INIT_ID(_type_), \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "777:     INIT_ID(_strptime), \\",
          "",
          "---------------"
        ],
        "Include/internal/pycore_unicodeobject_generated.h||Include/internal/pycore_unicodeobject_generated.h": [
          "File: Include/internal/pycore_unicodeobject_generated.h -> Include/internal/pycore_unicodeobject_generated.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:     string = &_Py_ID(_slotnames);",
          "637:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "638:     _PyUnicode_InternInPlace(interp, &string);",
          "639:     string = &_Py_ID(_strptime_datetime);",
          "640:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "641:     _PyUnicode_InternInPlace(interp, &string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:     string = &_Py_ID(_strptime);",
          "640:     assert(_PyUnicode_CheckConsistency(string, 1));",
          "641:     _PyUnicode_InternInPlace(interp, &string);",
          "",
          "---------------"
        ],
        "Lib/test/test_embed.py||Lib/test/test_embed.py": [
          "File: Lib/test/test_embed.py -> Lib/test/test_embed.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:         out, err = self.run_embedded_interpreter(\"test_repeated_init_exec\", code)",
          "405:         self.assertEqual(out, '9\\n' * INIT_LOOPS)",
          "408: @unittest.skipIf(_testinternalcapi is None, \"requires _testinternalcapi\")",
          "409: class InitConfigTests(EmbeddingTestsMixin, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     def test_datetime_reset_strptime(self):",
          "408:         code = (",
          "409:             \"import datetime;\"",
          "410:             \"d = datetime.datetime.strptime('2000-01-01', '%Y-%m-%d');\"",
          "411:             \"print(d.strftime('%Y%m%d'))\"",
          "412:         )",
          "413:         out, err = self.run_embedded_interpreter(\"test_repeated_init_exec\", code)",
          "414:         self.assertEqual(out, '20000101\\n' * INIT_LOOPS)",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5511: static PyObject *",
          "5512: datetime_strptime(PyObject *cls, PyObject *args)",
          "5513: {",
          "5517:     if (!PyArg_ParseTuple(args, \"UU:strptime\", &string, &format))",
          "5518:         return NULL;",
          "5520:     if (module == NULL) {",
          "5524:     }",
          "5527: }",
          "",
          "[Removed Lines]",
          "5514:     static PyObject *module = NULL;",
          "5515:     PyObject *string, *format;",
          "5521:         module = PyImport_ImportModule(\"_strptime\");",
          "5522:         if (module == NULL)",
          "5523:             return NULL;",
          "5525:     return PyObject_CallMethodObjArgs(module, &_Py_ID(_strptime_datetime),",
          "5526:                                          cls, string, format, NULL);",
          "",
          "[Added Lines]",
          "5514:     PyObject *string, *format, *result;",
          "5519:     PyObject *module = PyImport_Import(&_Py_ID(_strptime));",
          "5521:         return NULL;",
          "5523:     result = PyObject_CallMethodObjArgs(module, &_Py_ID(_strptime_datetime),",
          "5524:                                         cls, string, format, NULL);",
          "5525:     Py_DECREF(module);",
          "5526:     return result;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dc27bc0b76aa5985ccef2901f7a4f5d36b97995",
      "candidate_info": {
        "commit_hash": "4dc27bc0b76aa5985ccef2901f7a4f5d36b97995",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4dc27bc0b76aa5985ccef2901f7a4f5d36b97995",
        "files": [
          "Doc/c-api/init.rst",
          "Include/Python.h",
          "Include/cpython/critical_section.h",
          "Include/critical_section.h",
          "Include/internal/pycore_critical_section.h",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/C API/2024-05-21-19-41-41.gh-issue-119344.QKvzQb.rst",
          "Modules/_sre/sre.c",
          "Modules/_testcapimodule.c",
          "Objects/dictobject.c",
          "Objects/listobject.c",
          "Objects/typeobject.c",
          "PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters",
          "Python/critical_section.c"
        ],
        "message": "[3.13] gh-119344: Make critical section API public (GH-119353) (#120856)\n\nThis makes the following macros public as part of the non-limited C-API for\nlocking a single object or two objects at once.\n\n* `Py_BEGIN_CRITICAL_SECTION(op)` / `Py_END_CRITICAL_SECTION()`\n* `Py_BEGIN_CRITICAL_SECTION2(a, b)` / `Py_END_CRITICAL_SECTION2()`\n\nThe supporting functions and structs used by the macros are also exposed for\ncases where C macros are not available.\n(cherry picked from commit 8f17d69b7bc906e8407095317842cc0fd52cd84a)",
        "before_after_code_files": [
          "Include/Python.h||Include/Python.h",
          "Include/cpython/critical_section.h||Include/cpython/critical_section.h",
          "Include/critical_section.h||Include/critical_section.h",
          "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h",
          "Makefile.pre.in||Makefile.pre.in",
          "Modules/_sre/sre.c||Modules/_sre/sre.c",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Objects/dictobject.c||Objects/dictobject.c",
          "Objects/listobject.c||Objects/listobject.c",
          "Objects/typeobject.c||Objects/typeobject.c",
          "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters",
          "Python/critical_section.c||Python/critical_section.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/Python.h||Include/Python.h": [
          "File: Include/Python.h -> Include/Python.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: #include \"import.h\"",
          "125: #include \"abstract.h\"",
          "126: #include \"bltinmodule.h\"",
          "127: #include \"cpython/pyctype.h\"",
          "128: #include \"pystrtod.h\"",
          "129: #include \"pystrcmp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: #include \"critical_section.h\"",
          "",
          "---------------"
        ],
        "Include/cpython/critical_section.h||Include/cpython/critical_section.h": [
          "File: Include/cpython/critical_section.h -> Include/cpython/critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef Py_CPYTHON_CRITICAL_SECTION_H",
          "2: #  error \"this header file must not be included directly\"",
          "3: #endif",
          "70: typedef struct PyCriticalSection PyCriticalSection;",
          "71: typedef struct PyCriticalSection2 PyCriticalSection2;",
          "73: PyAPI_FUNC(void)",
          "74: PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op);",
          "76: PyAPI_FUNC(void)",
          "77: PyCriticalSection_End(PyCriticalSection *c);",
          "79: PyAPI_FUNC(void)",
          "80: PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b);",
          "82: PyAPI_FUNC(void)",
          "83: PyCriticalSection2_End(PyCriticalSection2 *c);",
          "85: #ifndef Py_GIL_DISABLED",
          "86: # define Py_BEGIN_CRITICAL_SECTION(op)      \\",
          "87:     {",
          "88: # define Py_END_CRITICAL_SECTION()          \\",
          "89:     }",
          "90: # define Py_BEGIN_CRITICAL_SECTION2(a, b)   \\",
          "91:     {",
          "92: # define Py_END_CRITICAL_SECTION2()         \\",
          "93:     }",
          "98: struct PyCriticalSection {",
          "100:     uintptr_t _cs_prev;",
          "103:     PyMutex *_cs_mutex;",
          "104: };",
          "110: struct PyCriticalSection2 {",
          "111:     PyCriticalSection _cs_base;",
          "113:     PyMutex *_cs_mutex2;",
          "114: };",
          "116: # define Py_BEGIN_CRITICAL_SECTION(op)                                  \\",
          "117:     {                                                                   \\",
          "118:         PyCriticalSection _py_cs;                                       \\",
          "119:         PyCriticalSection_Begin(&_py_cs, _PyObject_CAST(op))",
          "121: # define Py_END_CRITICAL_SECTION()                                      \\",
          "122:         PyCriticalSection_End(&_py_cs);                                 \\",
          "123:     }",
          "125: # define Py_BEGIN_CRITICAL_SECTION2(a, b)                               \\",
          "126:     {                                                                   \\",
          "127:         PyCriticalSection2 _py_cs2;                                     \\",
          "128:         PyCriticalSection2_Begin(&_py_cs2, _PyObject_CAST(a), _PyObject_CAST(b))",
          "130: # define Py_END_CRITICAL_SECTION2()                                     \\",
          "131:         PyCriticalSection2_End(&_py_cs2);                               \\",
          "132:     }",
          "134: #endif",
          "",
          "---------------"
        ],
        "Include/critical_section.h||Include/critical_section.h": [
          "File: Include/critical_section.h -> Include/critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef Py_CRITICAL_SECTION_H",
          "2: #define Py_CRITICAL_SECTION_H",
          "3: #ifdef __cplusplus",
          "4: extern \"C\" {",
          "5: #endif",
          "7: #ifndef Py_LIMITED_API",
          "8: #  define Py_CPYTHON_CRITICAL_SECTION_H",
          "9: #  include \"cpython/critical_section.h\"",
          "10: #  undef Py_CPYTHON_CRITICAL_SECTION_H",
          "11: #endif",
          "13: #ifdef __cplusplus",
          "14: }",
          "15: #endif",
          "",
          "---------------"
        ],
        "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h": [
          "File: Include/internal/pycore_critical_section.h -> Include/internal/pycore_critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #ifdef Py_GIL_DISABLED",
          "90: # define Py_BEGIN_CRITICAL_SECTION_MUT(mutex)                           \\",
          "91:     {                                                                   \\",
          "103:     {                                                                   \\",
          "",
          "[Removed Lines]",
          "92:         _PyCriticalSection _cs;                                         \\",
          "93:         _PyCriticalSection_Begin(&_cs, mutex)",
          "95: # define Py_BEGIN_CRITICAL_SECTION(op)                                  \\",
          "96:         Py_BEGIN_CRITICAL_SECTION_MUT(&_PyObject_CAST(op)->ob_mutex)",
          "98: # define Py_END_CRITICAL_SECTION()                                      \\",
          "99:         _PyCriticalSection_End(&_cs);                                   \\",
          "100:     }",
          "102: # define Py_BEGIN_CRITICAL_SECTION2(a, b)                               \\",
          "104:         _PyCriticalSection2 _cs2;                                       \\",
          "105:         _PyCriticalSection2_Begin(&_cs2, &_PyObject_CAST(a)->ob_mutex, &_PyObject_CAST(b)->ob_mutex)",
          "107: # define Py_END_CRITICAL_SECTION2()                                     \\",
          "108:         _PyCriticalSection2_End(&_cs2);                                 \\",
          "109:     }",
          "",
          "[Added Lines]",
          "26:         PyCriticalSection _py_cs;                                       \\",
          "27:         _PyCriticalSection_BeginMutex(&_py_cs, mutex)",
          "29: # define Py_BEGIN_CRITICAL_SECTION2_MUT(m1, m2)                         \\",
          "31:         PyCriticalSection2 _py_cs2;                                     \\",
          "32:         _PyCriticalSection2_BeginMutex(&_py_cs2, m1, m2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     {                                                                   \\",
          "118:         PyObject *_orig_seq = _PyObject_CAST(original);                 \\",
          "119:         const bool _should_lock_cs = PyList_CheckExact(_orig_seq);      \\",
          "121:         if (_should_lock_cs) {                                          \\",
          "123:         }",
          "125: # define Py_END_CRITICAL_SECTION_SEQUENCE_FAST()                        \\",
          "126:         if (_should_lock_cs) {                                          \\",
          "128:         }                                                               \\",
          "129:     }",
          "135:     _PyCriticalSection_AssertHeld(mutex)",
          "",
          "[Removed Lines]",
          "120:         _PyCriticalSection _cs;                                         \\",
          "122:             _PyCriticalSection_Begin(&_cs, &_orig_seq->ob_mutex);       \\",
          "127:             _PyCriticalSection_End(&_cs);                               \\",
          "134: #define  _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(mutex) \\",
          "",
          "[Added Lines]",
          "43:         PyCriticalSection _cs;                                          \\",
          "45:             _PyCriticalSection_Begin(&_cs, _orig_seq);                  \\",
          "50:             PyCriticalSection_End(&_cs);                                \\",
          "57: #define _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(mutex) \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: #ifdef Py_DEBUG",
          "143:     if (Py_REFCNT(op) != 1) {                                                    \\",
          "144:         _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(&_PyObject_CAST(op)->ob_mutex); \\",
          "145:     }",
          "162: # define _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(mutex)",
          "163: # define _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)",
          "191: PyAPI_FUNC(void)",
          "192: _PyCriticalSection_Resume(PyThreadState *tstate);",
          "195: PyAPI_FUNC(void)",
          "198: PyAPI_FUNC(void)",
          "200:                              int is_m1_locked);",
          "202: static inline void",
          "204: {",
          "205:     if (PyMutex_LockFast(&m->_bits)) {",
          "206:         PyThreadState *tstate = _PyThreadState_GET();",
          "209:         tstate->critical_section = (uintptr_t)c;",
          "210:     }",
          "211:     else {",
          "",
          "[Removed Lines]",
          "142: #define  _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)                           \\",
          "149: #define  _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)",
          "155: # define Py_BEGIN_CRITICAL_SECTION_MUT(mut)",
          "156: # define Py_BEGIN_CRITICAL_SECTION(op)",
          "157: # define Py_END_CRITICAL_SECTION()",
          "158: # define Py_BEGIN_CRITICAL_SECTION2(a, b)",
          "159: # define Py_END_CRITICAL_SECTION2()",
          "160: # define Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST(original)",
          "161: # define Py_END_CRITICAL_SECTION_SEQUENCE_FAST()",
          "166: typedef struct {",
          "170:     uintptr_t prev;",
          "173:     PyMutex *mutex;",
          "174: } _PyCriticalSection;",
          "178: typedef struct {",
          "179:     _PyCriticalSection base;",
          "181:     PyMutex *mutex2;",
          "182: } _PyCriticalSection2;",
          "184: static inline int",
          "185: _PyCriticalSection_IsActive(uintptr_t tag)",
          "186: {",
          "187:     return tag != 0 && (tag & _Py_CRITICAL_SECTION_INACTIVE) == 0;",
          "188: }",
          "196: _PyCriticalSection_BeginSlow(_PyCriticalSection *c, PyMutex *m);",
          "199: _PyCriticalSection2_BeginSlow(_PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2,",
          "203: _PyCriticalSection_Begin(_PyCriticalSection *c, PyMutex *m)",
          "207:         c->mutex = m;",
          "208:         c->prev = tstate->critical_section;",
          "",
          "[Added Lines]",
          "65: # define _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)                           \\",
          "72: # define _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)",
          "78: # define Py_BEGIN_CRITICAL_SECTION_MUT(mut) {",
          "79: # define Py_BEGIN_CRITICAL_SECTION2_MUT(m1, m2) {",
          "80: # define Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST(original) {",
          "81: # define Py_END_CRITICAL_SECTION_SEQUENCE_FAST() }",
          "92: _PyCriticalSection_BeginSlow(PyCriticalSection *c, PyMutex *m);",
          "95: _PyCriticalSection2_BeginSlow(PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2,",
          "98: PyAPI_FUNC(void)",
          "99: _PyCriticalSection_SuspendAll(PyThreadState *tstate);",
          "101: #ifdef Py_GIL_DISABLED",
          "103: static inline int",
          "104: _PyCriticalSection_IsActive(uintptr_t tag)",
          "105: {",
          "106:     return tag != 0 && (tag & _Py_CRITICAL_SECTION_INACTIVE) == 0;",
          "107: }",
          "110: _PyCriticalSection_BeginMutex(PyCriticalSection *c, PyMutex *m)",
          "114:         c->_cs_mutex = m;",
          "115:         c->_cs_prev = tstate->critical_section;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213:     }",
          "214: }",
          "219: static inline void",
          "221: {",
          "222:     PyThreadState *tstate = _PyThreadState_GET();",
          "224:     tstate->critical_section = prev;",
          "226:     if ((prev & _Py_CRITICAL_SECTION_INACTIVE) != 0) {",
          "",
          "[Removed Lines]",
          "220: _PyCriticalSection_Pop(_PyCriticalSection *c)",
          "223:     uintptr_t prev = c->prev;",
          "",
          "[Added Lines]",
          "123: static inline void",
          "124: _PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)",
          "125: {",
          "126:     _PyCriticalSection_BeginMutex(c, &op->ob_mutex);",
          "127: }",
          "128: #define PyCriticalSection_Begin _PyCriticalSection_Begin",
          "134: _PyCriticalSection_Pop(PyCriticalSection *c)",
          "137:     uintptr_t prev = c->_cs_prev;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229: }",
          "231: static inline void",
          "233: {",
          "235:     _PyCriticalSection_Pop(c);",
          "236: }",
          "238: static inline void",
          "240: {",
          "241:     if (m1 == m2) {",
          "246:         return;",
          "247:     }",
          "",
          "[Removed Lines]",
          "232: _PyCriticalSection_End(_PyCriticalSection *c)",
          "234:     PyMutex_Unlock(c->mutex);",
          "239: _PyCriticalSection2_Begin(_PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2)",
          "244:         c->mutex2 = NULL;",
          "245:         _PyCriticalSection_Begin(&c->base, m1);",
          "",
          "[Added Lines]",
          "146: _PyCriticalSection_End(PyCriticalSection *c)",
          "148:     PyMutex_Unlock(c->_cs_mutex);",
          "151: #define PyCriticalSection_End _PyCriticalSection_End",
          "154: _PyCriticalSection2_BeginMutex(PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2)",
          "159:         c->_cs_mutex2 = NULL;",
          "160:         _PyCriticalSection_BeginMutex(&c->_cs_base, m1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:     if (PyMutex_LockFast(&m1->_bits)) {",
          "259:         if (PyMutex_LockFast(&m2->_bits)) {",
          "260:             PyThreadState *tstate = _PyThreadState_GET();",
          "265:             uintptr_t p = (uintptr_t)c | _Py_CRITICAL_SECTION_TWO_MUTEXES;",
          "266:             tstate->critical_section = p;",
          "",
          "[Removed Lines]",
          "261:             c->base.mutex = m1;",
          "262:             c->mutex2 = m2;",
          "263:             c->base.prev = tstate->critical_section;",
          "",
          "[Added Lines]",
          "176:             c->_cs_base._cs_mutex = m1;",
          "177:             c->_cs_mutex2 = m2;",
          "178:             c->_cs_base._cs_prev = tstate->critical_section;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "275: }",
          "277: static inline void",
          "279: {",
          "285: }",
          "292: static inline void",
          "293: _PyCriticalSection_AssertHeld(PyMutex *mutex)",
          "",
          "[Removed Lines]",
          "278: _PyCriticalSection2_End(_PyCriticalSection2 *c)",
          "280:     if (c->mutex2) {",
          "281:         PyMutex_Unlock(c->mutex2);",
          "282:     }",
          "283:     PyMutex_Unlock(c->base.mutex);",
          "284:     _PyCriticalSection_Pop(&c->base);",
          "287: PyAPI_FUNC(void)",
          "288: _PyCriticalSection_SuspendAll(PyThreadState *tstate);",
          "290: #ifdef Py_GIL_DISABLED",
          "",
          "[Added Lines]",
          "193: _PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)",
          "195:     _PyCriticalSection2_BeginMutex(c, &a->ob_mutex, &b->ob_mutex);",
          "197: #define PyCriticalSection2_Begin _PyCriticalSection2_Begin",
          "199: static inline void",
          "200: _PyCriticalSection2_End(PyCriticalSection2 *c)",
          "201: {",
          "202:     if (c->_cs_mutex2) {",
          "203:         PyMutex_Unlock(c->_cs_mutex2);",
          "204:     }",
          "205:     PyMutex_Unlock(c->_cs_base._cs_mutex);",
          "206:     _PyCriticalSection_Pop(&c->_cs_base);",
          "207: }",
          "208: #define PyCriticalSection2_End _PyCriticalSection2_End",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "296:     PyThreadState *tstate = _PyThreadState_GET();",
          "297:     uintptr_t prev = tstate->critical_section;",
          "298:     if (prev & _Py_CRITICAL_SECTION_TWO_MUTEXES) {",
          "301:     }",
          "302:     else {",
          "305:     }",
          "307: #endif",
          "308: }",
          "312: #ifdef __cplusplus",
          "313: }",
          "",
          "[Removed Lines]",
          "299:         _PyCriticalSection2 *cs = (_PyCriticalSection2 *)(prev & ~_Py_CRITICAL_SECTION_MASK);",
          "300:         assert(cs != NULL && (cs->base.mutex == mutex || cs->mutex2 == mutex));",
          "303:         _PyCriticalSection *cs = (_PyCriticalSection *)(tstate->critical_section & ~_Py_CRITICAL_SECTION_MASK);",
          "304:         assert(cs != NULL && cs->mutex == mutex);",
          "310: #endif",
          "",
          "[Added Lines]",
          "217:         PyCriticalSection2 *cs = (PyCriticalSection2 *)(prev & ~_Py_CRITICAL_SECTION_MASK);",
          "218:         assert(cs != NULL && (cs->_cs_base._cs_mutex == mutex || cs->_cs_mutex2 == mutex));",
          "221:         PyCriticalSection *cs = (PyCriticalSection *)(tstate->critical_section & ~_Py_CRITICAL_SECTION_MASK);",
          "222:         assert(cs != NULL && cs->_cs_mutex == mutex);",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1004:   $(srcdir)/Include/codecs.h \\",
          "1005:   $(srcdir)/Include/compile.h \\",
          "1006:   $(srcdir)/Include/complexobject.h \\",
          "1007:   $(srcdir)/Include/descrobject.h \\",
          "1008:   $(srcdir)/Include/dictobject.h \\",
          "1009:   $(srcdir)/Include/dynamic_annotations.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007:   $(srcdir)/Include/critical_section.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1081:   $(srcdir)/Include/cpython/compile.h \\",
          "1082:   $(srcdir)/Include/cpython/complexobject.h \\",
          "1083:   $(srcdir)/Include/cpython/context.h \\",
          "1084:   $(srcdir)/Include/cpython/descrobject.h \\",
          "1085:   $(srcdir)/Include/cpython/dictobject.h \\",
          "1086:   $(srcdir)/Include/cpython/fileobject.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:   $(srcdir)/Include/cpython/critical_section.h \\",
          "",
          "---------------"
        ],
        "Modules/_sre/sre.c||Modules/_sre/sre.c": [
          "File: Modules/_sre/sre.c -> Modules/_sre/sre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2371:             goto exit;",
          "2372:         }",
          "2373:     }",
          "2375:     Py_END_CRITICAL_SECTION();",
          "2377:     return result;",
          "",
          "[Removed Lines]",
          "2374: exit:",
          "",
          "[Added Lines]",
          "2374: exit:;",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3320:     Py_RETURN_NONE;",
          "3321: }",
          "3323: static PyMethodDef TestMethods[] = {",
          "3324:     {\"set_errno\",               set_errno,                       METH_VARARGS},",
          "3325:     {\"test_config\",             test_config,                     METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3323: static PyObject *",
          "3324: test_critical_sections(PyObject *module, PyObject *Py_UNUSED(args))",
          "3325: {",
          "3326:     Py_BEGIN_CRITICAL_SECTION(module);",
          "3327:     Py_END_CRITICAL_SECTION();",
          "3329:     Py_BEGIN_CRITICAL_SECTION2(module, module);",
          "3330:     Py_END_CRITICAL_SECTION2();",
          "3332:     Py_RETURN_NONE;",
          "3333: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3463:     {\"check_pyimport_addmodule\", check_pyimport_addmodule, METH_VARARGS},",
          "3464:     {\"test_weakref_capi\", test_weakref_capi, METH_NOARGS},",
          "3465:     {\"function_set_warning\", function_set_warning, METH_NOARGS},",
          "3467: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3478:     {\"test_critical_sections\", test_critical_sections, METH_NOARGS},",
          "",
          "---------------"
        ],
        "Objects/dictobject.c||Objects/dictobject.c": [
          "File: Objects/dictobject.c -> Objects/dictobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3109:                 goto dict_iter_exit;",
          "3110:             }",
          "3111:         }",
          "3113:         Py_END_CRITICAL_SECTION();",
          "3114:     } else {",
          "3115:         while ((key = PyIter_Next(it)) != NULL) {",
          "",
          "[Removed Lines]",
          "3112: dict_iter_exit:",
          "",
          "[Added Lines]",
          "3112: dict_iter_exit:;",
          "",
          "---------------"
        ],
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:     p = self->ob_item + i;",
          "453:     Py_XSETREF(*p, newitem);",
          "454:     ret = 0;",
          "456:     Py_END_CRITICAL_SECTION();",
          "457:     return ret;",
          "458: }",
          "",
          "[Removed Lines]",
          "455: end:",
          "",
          "[Added Lines]",
          "455: end:;",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #define TYPE_LOCK &PyInterpreterState_Get()->types.mutex",
          "84: #define ASSERT_TYPE_LOCK_HELD() \\",
          "85:     _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(TYPE_LOCK)",
          "",
          "[Removed Lines]",
          "65: #define BEGIN_TYPE_LOCK()                                               \\",
          "66:     {                                                                   \\",
          "67:         _PyCriticalSection _cs;                                         \\",
          "68:         _PyCriticalSection_Begin(&_cs, TYPE_LOCK);                      \\",
          "70: #define END_TYPE_LOCK()                                                 \\",
          "71:         _PyCriticalSection_End(&_cs);                                   \\",
          "72:     }",
          "74: #define BEGIN_TYPE_DICT_LOCK(d)                                         \\",
          "75:     {                                                                   \\",
          "76:         _PyCriticalSection2 _cs;                                        \\",
          "77:         _PyCriticalSection2_Begin(&_cs, TYPE_LOCK,                      \\",
          "78:                                   &_PyObject_CAST(d)->ob_mutex);        \\",
          "80: #define END_TYPE_DICT_LOCK()                                            \\",
          "81:         _PyCriticalSection2_End(&_cs);                                  \\",
          "82:     }",
          "",
          "[Added Lines]",
          "65: #define BEGIN_TYPE_LOCK() Py_BEGIN_CRITICAL_SECTION_MUT(TYPE_LOCK)",
          "66: #define END_TYPE_LOCK() Py_END_CRITICAL_SECTION()",
          "68: #define BEGIN_TYPE_DICT_LOCK(d) \\",
          "69:     Py_BEGIN_CRITICAL_SECTION2_MUT(TYPE_LOCK, &_PyObject_CAST(d)->ob_mutex)",
          "71: #define END_TYPE_DICT_LOCK() Py_END_CRITICAL_SECTION2()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:     BEGIN_TYPE_LOCK();",
          "443:     res = lookup_tp_bases(self);",
          "444:     Py_INCREF(res);",
          "447:     return res;",
          "448: }",
          "",
          "[Removed Lines]",
          "445:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "434:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "513:     BEGIN_TYPE_LOCK();",
          "514:     mro = lookup_tp_mro(self);",
          "515:     Py_XINCREF(mro);",
          "517:     return mro;",
          "518: #else",
          "519:     return Py_XNewRef(lookup_tp_mro(self));",
          "",
          "[Removed Lines]",
          "516:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "505:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "950:         return -1;",
          "951:     }",
          "954:     assign_version_tag(interp, type);",
          "955:     type->tp_watched |= (1 << watcher_id);",
          "957:     return 0;",
          "958: }",
          "",
          "[Removed Lines]",
          "953:     BEGIN_TYPE_LOCK()",
          "956:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "942:     BEGIN_TYPE_LOCK();",
          "945:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1063:         return;",
          "1064:     }",
          "1067:     type_modified_unlocked(type);",
          "1069: }",
          "1071: static int",
          "",
          "[Removed Lines]",
          "1066:     BEGIN_TYPE_LOCK()",
          "1068:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "1055:     BEGIN_TYPE_LOCK();",
          "1057:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1185: {",
          "1186:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "1187:     int assigned;",
          "1189:     assigned = assign_version_tag(interp, type);",
          "1191:     return assigned;",
          "1192: }",
          "",
          "[Removed Lines]",
          "1188:     BEGIN_TYPE_LOCK()",
          "1190:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "1177:     BEGIN_TYPE_LOCK();",
          "1179:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1470: {",
          "1471:     PyObject *mro;",
          "1474:     mro = lookup_tp_mro(type);",
          "1475:     if (mro == NULL) {",
          "1476:         mro = Py_None;",
          "",
          "[Removed Lines]",
          "1473:     BEGIN_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "1462:     BEGIN_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1478:         Py_INCREF(mro);",
          "1479:     }",
          "1482:     return mro;",
          "1483: }",
          "",
          "[Removed Lines]",
          "1481:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "1470:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2924: mro_implementation(PyTypeObject *type)",
          "2925: {",
          "2926:     PyObject *mro;",
          "2928:     mro = mro_implementation_unlocked(type);",
          "2930:     return mro;",
          "2931: }",
          "",
          "[Removed Lines]",
          "2927:     BEGIN_TYPE_LOCK()",
          "2929:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "2916:     BEGIN_TYPE_LOCK();",
          "2918:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3113: mro_internal(PyTypeObject *type, PyObject **p_old_mro)",
          "3114: {",
          "3115:     int res;",
          "3117:     res = mro_internal_unlocked(type, 0, p_old_mro);",
          "3119:     return res;",
          "3120: }",
          "",
          "[Removed Lines]",
          "3116:     BEGIN_TYPE_LOCK()",
          "3118:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "3105:     BEGIN_TYPE_LOCK();",
          "3107:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4980:     }",
          "4982:     PyObject *res = NULL;",
          "4985:     PyObject *mro = lookup_tp_mro(type);",
          "",
          "[Removed Lines]",
          "4983:     BEGIN_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "4972:     BEGIN_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5007:             break;",
          "5008:         }",
          "5009:     }",
          "5011:     return res;",
          "5012: }",
          "",
          "[Removed Lines]",
          "5010:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "4999:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5266:     int has_version = 0;",
          "5267:     int version = 0;",
          "5269:     res = find_name_in_mro(type, name, &error);",
          "5270:     if (MCACHE_CACHEABLE_NAME(name)) {",
          "5271:         has_version = assign_version_tag(interp, type);",
          "5272:         version = type->tp_version_tag;",
          "5273:     }",
          "5277:     if (error) {",
          "",
          "[Removed Lines]",
          "5268:     BEGIN_TYPE_LOCK()",
          "5274:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "5257:     BEGIN_TYPE_LOCK();",
          "5263:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8262:     }",
          "8264:     int res;",
          "8266:     if (!(type->tp_flags & Py_TPFLAGS_READY)) {",
          "8267:         res = type_ready(type, 1);",
          "8268:     } else {",
          "8269:         res = 0;",
          "8270:         assert(_PyType_CheckConsistency(type));",
          "8271:     }",
          "8273:     return res;",
          "8274: }",
          "",
          "[Removed Lines]",
          "8265:     BEGIN_TYPE_LOCK()",
          "8272:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "8254:     BEGIN_TYPE_LOCK();",
          "8261:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8303:     int res;",
          "8304:     BEGIN_TYPE_LOCK();",
          "8305:     res = type_ready(self, initial);",
          "8307:     if (res < 0) {",
          "8308:         _PyStaticType_ClearWeakRefs(interp, self);",
          "8309:         managed_static_type_state_clear(interp, self, isbuiltin, initial);",
          "",
          "[Removed Lines]",
          "8306:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "8295:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8775:     int res;",
          "8776:     BEGIN_TYPE_LOCK();",
          "8777:     res = hackcheck_unlocked(self, func, what);",
          "8779:     return res;",
          "8780: }",
          "",
          "[Removed Lines]",
          "8778:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "8767:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "10709:     assert(!PyErr_Occurred());",
          "10710:     for (pytype_slotdef *p = slotdefs; p->name; ) {",
          "10711:         p = update_one_slot(type, p);",
          "10712:     }",
          "10715: }",
          "10717: static void",
          "",
          "[Removed Lines]",
          "10707:     BEGIN_TYPE_LOCK()",
          "10714:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "10696:     BEGIN_TYPE_LOCK();",
          "10703:     END_TYPE_LOCK();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "11000:        another thread can modify it after we end the critical section",
          "11002:     Py_XINCREF(mro);",
          "11005:     if (mro == NULL)",
          "11006:         return NULL;",
          "",
          "[Removed Lines]",
          "11003:     END_TYPE_LOCK()",
          "",
          "[Added Lines]",
          "10992:     END_TYPE_LOCK();",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj": [
          "File: PCbuild/pythoncore.vcxproj -> PCbuild/pythoncore.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     <ClInclude Include=\"..\\Include\\codecs.h\" />",
          "136:     <ClInclude Include=\"..\\Include\\compile.h\" />",
          "137:     <ClInclude Include=\"..\\Include\\complexobject.h\" />",
          "138:     <ClInclude Include=\"..\\Include\\cpython\\abstract.h\" />",
          "139:     <ClInclude Include=\"..\\Include\\cpython\\bytearrayobject.h\" />",
          "140:     <ClInclude Include=\"..\\Include\\cpython\\bytesobject.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     <ClInclude Include=\"..\\Include\\critical_section.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:     <ClInclude Include=\"..\\Include\\cpython\\compile.h\" />",
          "146:     <ClInclude Include=\"..\\Include\\cpython\\complexobject.h\" />",
          "147:     <ClInclude Include=\"..\\Include\\cpython\\context.h\" />",
          "148:     <ClInclude Include=\"..\\Include\\cpython\\descrobject.h\" />",
          "149:     <ClInclude Include=\"..\\Include\\cpython\\dictobject.h\" />",
          "150:     <ClInclude Include=\"..\\Include\\cpython\\fileobject.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:     <ClInclude Include=\"..\\Include\\cpython\\critical_section.h\" />",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters": [
          "File: PCbuild/pythoncore.vcxproj.filters -> PCbuild/pythoncore.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     <ClInclude Include=\"..\\Include\\complexobject.h\">",
          "73:       <Filter>Include</Filter>",
          "74:     </ClInclude>",
          "75:     <ClInclude Include=\"..\\Include\\datetime.h\">",
          "76:       <Filter>Include</Filter>",
          "77:     </ClInclude>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     <ClInclude Include=\"..\\Include\\critical_section.h\">",
          "76:       <Filter>Include</Filter>",
          "77:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     <ClInclude Include=\"..\\Include\\cpython\\context.h\">",
          "376:       <Filter>Include\\cpython</Filter>",
          "377:     </ClInclude>",
          "378:     <ClInclude Include=\"..\\Include\\cpython\\descrobject.h\">",
          "379:       <Filter>Include\\cpython</Filter>",
          "380:     </ClInclude>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     <ClInclude Include=\"..\\Include\\cpython\\critical_section.h\">",
          "382:       <Filter>Include\\cpython</Filter>",
          "383:     </ClInclude>",
          "",
          "---------------"
        ],
        "Python/critical_section.c||Python/critical_section.c": [
          "File: Python/critical_section.c -> Python/critical_section.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"pycore_lock.h\"",
          "4: #include \"pycore_critical_section.h\"",
          "7:               \"critical section must be aligned to at least 4 bytes\");",
          "9: void",
          "11: {",
          "12:     PyThreadState *tstate = _PyThreadState_GET();",
          "15:     tstate->critical_section = (uintptr_t)c;",
          "17:     PyMutex_Lock(m);",
          "19: }",
          "21: void",
          "23:                               int is_m1_locked)",
          "24: {",
          "25:     PyThreadState *tstate = _PyThreadState_GET();",
          "29:     tstate->critical_section = (uintptr_t)c | _Py_CRITICAL_SECTION_TWO_MUTEXES;",
          "31:     if (!is_m1_locked) {",
          "32:         PyMutex_Lock(m1);",
          "33:     }",
          "34:     PyMutex_Lock(m2);",
          "37: }",
          "40: untag_critical_section(uintptr_t tag)",
          "41: {",
          "43: }",
          "47: void",
          "48: _PyCriticalSection_SuspendAll(PyThreadState *tstate)",
          "49: {",
          "50:     uintptr_t *tagptr = &tstate->critical_section;",
          "51:     while (_PyCriticalSection_IsActive(*tagptr)) {",
          "56:             if ((*tagptr & _Py_CRITICAL_SECTION_TWO_MUTEXES)) {",
          "60:                 }",
          "61:             }",
          "62:         }",
          "66:     }",
          "67: }",
          "69: void",
          "70: _PyCriticalSection_Resume(PyThreadState *tstate)",
          "71: {",
          "72:     uintptr_t p = tstate->critical_section;",
          "74:     assert(!_PyCriticalSection_IsActive(p));",
          "79:     PyMutex *m2 = NULL;",
          "81:     if ((p & _Py_CRITICAL_SECTION_TWO_MUTEXES)) {",
          "85:     }",
          "87:     if (m1) {",
          "",
          "[Removed Lines]",
          "6: static_assert(_Alignof(_PyCriticalSection) >= 4,",
          "10: _PyCriticalSection_BeginSlow(_PyCriticalSection *c, PyMutex *m)",
          "13:     c->mutex = NULL;",
          "14:     c->prev = (uintptr_t)tstate->critical_section;",
          "18:     c->mutex = m;",
          "22: _PyCriticalSection2_BeginSlow(_PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2,",
          "26:     c->base.mutex = NULL;",
          "27:     c->mutex2 = NULL;",
          "28:     c->base.prev = tstate->critical_section;",
          "35:     c->base.mutex = m1;",
          "36:     c->mutex2 = m2;",
          "39: static _PyCriticalSection *",
          "42:     return (_PyCriticalSection *)(tag & ~_Py_CRITICAL_SECTION_MASK);",
          "52:         _PyCriticalSection *c = untag_critical_section(*tagptr);",
          "54:         if (c->mutex) {",
          "55:             PyMutex_Unlock(c->mutex);",
          "57:                 _PyCriticalSection2 *c2 = (_PyCriticalSection2 *)c;",
          "58:                 if (c2->mutex2) {",
          "59:                     PyMutex_Unlock(c2->mutex2);",
          "65:         tagptr = &c->prev;",
          "73:     _PyCriticalSection *c = untag_critical_section(p);",
          "76:     PyMutex *m1 = c->mutex;",
          "77:     c->mutex = NULL;",
          "80:     _PyCriticalSection2 *c2 = NULL;",
          "82:         c2 = (_PyCriticalSection2 *)c;",
          "83:         m2 = c2->mutex2;",
          "84:         c2->mutex2 = NULL;",
          "",
          "[Added Lines]",
          "6: #ifdef Py_GIL_DISABLED",
          "7: static_assert(_Alignof(PyCriticalSection) >= 4,",
          "9: #endif",
          "12: _PyCriticalSection_BeginSlow(PyCriticalSection *c, PyMutex *m)",
          "14: #ifdef Py_GIL_DISABLED",
          "16:     c->_cs_mutex = NULL;",
          "17:     c->_cs_prev = (uintptr_t)tstate->critical_section;",
          "21:     c->_cs_mutex = m;",
          "22: #endif",
          "26: _PyCriticalSection2_BeginSlow(PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2,",
          "29: #ifdef Py_GIL_DISABLED",
          "31:     c->_cs_base._cs_mutex = NULL;",
          "32:     c->_cs_mutex2 = NULL;",
          "33:     c->_cs_base._cs_prev = tstate->critical_section;",
          "40:     c->_cs_base._cs_mutex = m1;",
          "41:     c->_cs_mutex2 = m2;",
          "42: #endif",
          "45: #ifdef Py_GIL_DISABLED",
          "46: static PyCriticalSection *",
          "49:     return (PyCriticalSection *)(tag & ~_Py_CRITICAL_SECTION_MASK);",
          "51: #endif",
          "58: #ifdef Py_GIL_DISABLED",
          "61:         PyCriticalSection *c = untag_critical_section(*tagptr);",
          "63:         if (c->_cs_mutex) {",
          "64:             PyMutex_Unlock(c->_cs_mutex);",
          "66:                 PyCriticalSection2 *c2 = (PyCriticalSection2 *)c;",
          "67:                 if (c2->_cs_mutex2) {",
          "68:                     PyMutex_Unlock(c2->_cs_mutex2);",
          "74:         tagptr = &c->_cs_prev;",
          "76: #endif",
          "82: #ifdef Py_GIL_DISABLED",
          "84:     PyCriticalSection *c = untag_critical_section(p);",
          "87:     PyMutex *m1 = c->_cs_mutex;",
          "88:     c->_cs_mutex = NULL;",
          "91:     PyCriticalSection2 *c2 = NULL;",
          "93:         c2 = (PyCriticalSection2 *)c;",
          "94:         m2 = c2->_cs_mutex2;",
          "95:         c2->_cs_mutex2 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         PyMutex_Lock(m2);",
          "92:     }",
          "95:     if (m2) {",
          "97:     }",
          "99:     tstate->critical_section &= ~_Py_CRITICAL_SECTION_INACTIVE;",
          "100: }",
          "",
          "[Removed Lines]",
          "94:     c->mutex = m1;",
          "96:         c2->mutex2 = m2;",
          "",
          "[Added Lines]",
          "105:     c->_cs_mutex = m1;",
          "107:         c2->_cs_mutex2 = m2;",
          "111: #endif",
          "112: }",
          "114: #undef PyCriticalSection_Begin",
          "115: void",
          "116: PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)",
          "117: {",
          "118: #ifdef Py_GIL_DISABLED",
          "119:     _PyCriticalSection_Begin(c, op);",
          "120: #endif",
          "121: }",
          "123: #undef PyCriticalSection_End",
          "124: void",
          "125: PyCriticalSection_End(PyCriticalSection *c)",
          "126: {",
          "127: #ifdef Py_GIL_DISABLED",
          "128:     _PyCriticalSection_End(c);",
          "129: #endif",
          "130: }",
          "132: #undef PyCriticalSection2_Begin",
          "133: void",
          "134: PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)",
          "135: {",
          "136: #ifdef Py_GIL_DISABLED",
          "137:     _PyCriticalSection2_Begin(c, a, b);",
          "138: #endif",
          "139: }",
          "141: #undef PyCriticalSection2_End",
          "142: void",
          "143: PyCriticalSection2_End(PyCriticalSection2 *c)",
          "144: {",
          "145: #ifdef Py_GIL_DISABLED",
          "146:     _PyCriticalSection2_End(c);",
          "147: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd5428d2d19f79e439d04aec7a33a00eb17bef7c",
      "candidate_info": {
        "commit_hash": "fd5428d2d19f79e439d04aec7a33a00eb17bef7c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/fd5428d2d19f79e439d04aec7a33a00eb17bef7c",
        "files": [
          "Lib/test/test_signal.py"
        ],
        "message": "[3.13] gh-120039: Reduce expected timeout in test_siginterrupt_off (GH-120047) (#120060)\n\nThe process is expected to time out. In the refleak builds,\n`support.SHORT_TIMEOUT` is often five minutes and we run the tests six\ntimes, so test_signal was taking >30 minutes.\n(cherry picked from commit d419d468ff4aaf6bc673354d0ee41b273d09dd3f)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_signal.py||Lib/test/test_signal.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_signal.py||Lib/test/test_signal.py": [
          "File: Lib/test/test_signal.py -> Lib/test/test_signal.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "698: @unittest.skipUnless(hasattr(os, \"pipe\"), \"requires os.pipe()\")",
          "699: class SiginterruptTest(unittest.TestCase):",
          "702:         \"\"\"Perform a read during which a signal will arrive.  Return True if the",
          "703:         read is interrupted by the signal and raises an exception.  Return False",
          "704:         if it returns normally.",
          "",
          "[Removed Lines]",
          "701:     def readpipe_interrupted(self, interrupt):",
          "",
          "[Added Lines]",
          "701:     def readpipe_interrupted(self, interrupt, timeout=support.SHORT_TIMEOUT):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:                 # wait until the child process is loaded and has started",
          "747:                 first_line = process.stdout.readline()",
          "750:             except subprocess.TimeoutExpired:",
          "751:                 process.kill()",
          "752:                 return False",
          "",
          "[Removed Lines]",
          "749:                 stdout, stderr = process.communicate(timeout=support.SHORT_TIMEOUT)",
          "",
          "[Added Lines]",
          "749:                 stdout, stderr = process.communicate(timeout=timeout)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "777:         # If a signal handler is installed and siginterrupt is called with",
          "778:         # a false value for the second argument, when that signal arrives, it",
          "779:         # does not interrupt a syscall that's in progress.",
          "781:         self.assertFalse(interrupted)",
          "",
          "[Removed Lines]",
          "780:         interrupted = self.readpipe_interrupted(False)",
          "",
          "[Added Lines]",
          "780:         interrupted = self.readpipe_interrupted(False, timeout=2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54839f07347122cc6a609166403076a517f2fef0",
      "candidate_info": {
        "commit_hash": "54839f07347122cc6a609166403076a517f2fef0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/54839f07347122cc6a609166403076a517f2fef0",
        "files": [
          "Lib/test/test_urlparse.py"
        ],
        "message": "[3.13] Add yet few cases for urlparse/urlunparse roundtrip tests (GH-119031) (GH-119037)\n\n(cherry picked from commit 331d385af9817eaa32b739130227781358f85771)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_urlparse.py||Lib/test/test_urlparse.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_urlparse.py||Lib/test/test_urlparse.py": [
          "File: Lib/test/test_urlparse.py -> Lib/test/test_urlparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:             ('////path/to/file',",
          "190:              ('', '', '//path/to/file', '', '', ''),",
          "191:              ('', '', '//path/to/file', '', '')),",
          "192:             ('scheme:path/to/file',",
          "193:              ('scheme', '', 'path/to/file', '', '', ''),",
          "194:              ('scheme', '', 'path/to/file', '', '')),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:             ('/////path/to/file',",
          "193:              ('', '', '///path/to/file', '', '', ''),",
          "194:              ('', '', '///path/to/file', '', '')),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:             ('scheme:////path/to/file',",
          "202:              ('scheme', '', '//path/to/file', '', '', ''),",
          "203:              ('scheme', '', '//path/to/file', '', '')),",
          "204:             ('file:///tmp/junk.txt',",
          "205:              ('file', '', '/tmp/junk.txt', '', '', ''),",
          "206:              ('file', '', '/tmp/junk.txt', '', '')),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:             ('scheme://///path/to/file',",
          "208:              ('scheme', '', '///path/to/file', '', '', ''),",
          "209:              ('scheme', '', '///path/to/file', '', '')),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:               'action=download-manifest&url=https://example.com/app', ''),",
          "237:              ('itms-services', '', '',",
          "238:               'action=download-manifest&url=https://example.com/app', '')),",
          "239:             ]",
          "240:         def _encode(t):",
          "241:             return (t[0].encode('ascii'),",
          "242:                     tuple(x.encode('ascii') for x in t[1]),",
          "243:                     tuple(x.encode('ascii') for x in t[2]))",
          "244:         bytes_cases = [_encode(x) for x in str_cases]",
          "245:         for url, parsed, split in str_cases + bytes_cases:",
          "246:             self.checkRoundtrips(url, parsed, split)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:             ('+scheme:path/to/file',",
          "246:              ('', '', '+scheme:path/to/file', '', '', ''),",
          "247:              ('', '', '+scheme:path/to/file', '', '')),",
          "248:             ('sch_me:path/to/file',",
          "249:              ('', '', 'sch_me:path/to/file', '', '', ''),",
          "250:              ('', '', 'sch_me:path/to/file', '', '')),",
          "257:         str_cases += [",
          "258:             ('sch\u00e8me:path/to/file',",
          "259:              ('', '', 'sch\u00e8me:path/to/file', '', '', ''),",
          "260:              ('', '', 'sch\u00e8me:path/to/file', '', '')),",
          "261:             ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dbb86c5bebf8d85dd295840261e1c944726271c",
      "candidate_info": {
        "commit_hash": "0dbb86c5bebf8d85dd295840261e1c944726271c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0dbb86c5bebf8d85dd295840261e1c944726271c",
        "files": [
          "Python/fileutils.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix TSan reported data race on ioctl_works (GH-120175) (#120654)\n\n(cherry picked from commit 460cc9e14e221c53c0038a847bfd411fe184ebf3)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/fileutils.c||Python/fileutils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/fileutils.c||Python/fileutils.c": [
          "File: Python/fileutils.c -> Python/fileutils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1502: #else",
          "1504: #if defined(HAVE_SYS_IOCTL_H) && defined(FIOCLEX) && defined(FIONCLEX)",
          "",
          "[Removed Lines]",
          "1505:     if (ioctl_works != 0 && raise != 0) {",
          "",
          "[Added Lines]",
          "1505:     if (raise != 0 && _Py_atomic_load_int_relaxed(&ioctl_works) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1512:             request = FIOCLEX;",
          "1513:         err = ioctl(fd, request, NULL);",
          "1514:         if (!err) {",
          "1516:             return 0;",
          "1517:         }",
          "",
          "[Removed Lines]",
          "1515:             ioctl_works = 1;",
          "",
          "[Added Lines]",
          "1515:             if (_Py_atomic_load_int_relaxed(&ioctl_works) == -1) {",
          "1516:                 _Py_atomic_store_int_relaxed(&ioctl_works, 1);",
          "1517:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1539:                with EACCES. While FIOCLEX is safe operation it may be",
          "1540:                unavailable because ioctl was denied altogether.",
          "1543:         }",
          "1545:     }",
          "",
          "[Removed Lines]",
          "1542:             ioctl_works = 0;",
          "",
          "[Added Lines]",
          "1544:             _Py_atomic_store_int_relaxed(&ioctl_works, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}