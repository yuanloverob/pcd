{
  "cve_id": "CVE-2024-32004",
  "cve_desc": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.",
  "repo": "git/git",
  "patch_hash": "f4aa8c8bb11dae6e769cd930565173808cbb69c8",
  "patch_info": {
    "commit_hash": "f4aa8c8bb11dae6e769cd930565173808cbb69c8",
    "repo": "git/git",
    "commit_url": "https://github.com/git/git/commit/f4aa8c8bb11dae6e769cd930565173808cbb69c8",
    "files": [
      "cache.h",
      "path.c",
      "setup.c",
      "t/t0411-clone-from-partial.sh"
    ],
    "message": "fetch/clone: detect dubious ownership of local repositories\n\nWhen cloning from somebody else's repositories, it is possible that,\nsay, the `upload-pack` command is overridden in the repository that is\nabout to be cloned, which would then be run in the user's context who\nstarted the clone.\n\nTo remind the user that this is a potentially unsafe operation, let's\nextend the ownership checks we have already established for regular\ngitdir discovery to extend also to local repositories that are about to\nbe cloned.\n\nThis protection extends also to file:// URLs.\n\nThe fixes in this commit address CVE-2024-32004.\n\nNote: This commit does not touch the `fetch`/`clone` code directly, but\ninstead the function used implicitly by both: `enter_repo()`. This\nfunction is also used by `git receive-pack` (i.e. pushes), by `git\nupload-archive`, by `git daemon` and by `git http-backend`. In setups\nthat want to serve repositories owned by different users than the\naccount running the service, this will require `safe.*` settings to be\nconfigured accordingly.\n\nAlso note: there are tiny time windows where a time-of-check-time-of-use\n(\"TOCTOU\") race is possible. The real solution to those would be to work\nwith `fstat()` and `openat()`. However, the latter function is not\navailable on Windows (and would have to be emulated with rather\nexpensive low-level `NtCreateFile()` calls), and the changes would be\nquite extensive, for my taste too extensive for the little gain given\nthat embargoed releases need to pay extra attention to avoid introducing\ninadvertent bugs.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
    "before_after_code_files": [
      "cache.h||cache.h",
      "path.c||path.c",
      "setup.c||setup.c",
      "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
    ]
  },
  "patch_diff": {
    "cache.h||cache.h": [
      "File: cache.h -> cache.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "607: #define ALTERNATE_DB_ENVIRONMENT \"GIT_ALTERNATE_OBJECT_DIRECTORIES\"",
      "609: void setup_work_tree(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "618: void die_upon_dubious_ownership(const char *gitfile, const char *worktree,",
      "619:     const char *gitdir);",
      "",
      "---------------"
    ],
    "path.c||path.c": [
      "File: path.c -> path.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "840:   if (!suffix[i])",
      "841:    return NULL;",
      "842:   gitfile = read_gitfile(used_path.buf);",
      "843:   if (gitfile) {",
      "844:    strbuf_reset(&used_path);",
      "845:    strbuf_addstr(&used_path, gitfile);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "843:   die_upon_dubious_ownership(gitfile, NULL, used_path.buf);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850:  }",
      "851:  else {",
      "852:   const char *gitfile = read_gitfile(path);",
      "853:   if (gitfile)",
      "854:    path = gitfile;",
      "855:   if (chdir(path))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "854:   die_upon_dubious_ownership(gitfile, NULL, path);",
      "",
      "---------------"
    ],
    "setup.c||setup.c": [
      "File: setup.c -> setup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1165:  return data.is_safe;",
      "1166: }",
      "1168: static int allowed_bare_repo_cb(const char *key, const char *value, void *d)",
      "1169: {",
      "1170:  enum allowed_bare_repo *allowed_bare_repo = d;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1168: void die_upon_dubious_ownership(const char *gitfile, const char *worktree,",
      "1169:     const char *gitdir)",
      "1170: {",
      "1171:  struct strbuf report = STRBUF_INIT, quoted = STRBUF_INIT;",
      "1172:  const char *path;",
      "1174:  if (ensure_valid_ownership(gitfile, worktree, gitdir, &report))",
      "1175:   return;",
      "1177:  strbuf_complete(&report, '\\n');",
      "1178:  path = gitfile ? gitfile : gitdir;",
      "1179:  sq_quote_buf_pretty(&quoted, path);",
      "1181:  die(_(\"detected dubious ownership in repository at '%s'\\n\"",
      "1182:        \"%s\"",
      "1183:        \"To add an exception for this directory, call:\\n\"",
      "1184:        \"\\n\"",
      "1185:        \"\\tgit config --global --add safe.directory %s\"),",
      "1186:      path, report.buf, quoted.buf);",
      "1187: }",
      "",
      "---------------"
    ],
    "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh": [
      "File: t/t0411-clone-from-partial.sh -> t/t0411-clone-from-partial.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:  >evil/.git/shallow",
      "24: '",
      "27:  rm -f script-executed &&",
      "28:  test_must_fail git clone \\",
      "29:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
      "",
      "[Removed Lines]",
      "26: test_expect_failure 'local clone must not fetch from promisor remote and execute script' '",
      "",
      "[Added Lines]",
      "26: test_expect_success 'local clone must not fetch from promisor remote and execute script' '",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:  test_path_is_missing script-executed",
      "33: '",
      "36:  rm -f script-executed &&",
      "37:  test_must_fail git clone \\",
      "38:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
      "",
      "[Removed Lines]",
      "35: test_expect_failure 'clone from file://... must not fetch from promisor remote and execute script' '",
      "",
      "[Added Lines]",
      "35: test_expect_success 'clone from file://... must not fetch from promisor remote and execute script' '",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "41:  test_path_is_missing script-executed",
      "42: '",
      "45:  rm -f script-executed &&",
      "46:  test_must_fail git fetch \\",
      "47:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
      "",
      "[Removed Lines]",
      "44: test_expect_failure 'fetch from file://... must not fetch from promisor remote and execute script' '",
      "",
      "[Added Lines]",
      "44: test_expect_success 'fetch from file://... must not fetch from promisor remote and execute script' '",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ffb5a6bf1b0fd9ce0c0b1fd9ce9fd30b89a2563",
      "candidate_info": {
        "commit_hash": "0ffb5a6bf1b0fd9ce0c0b1fd9ce9fd30b89a2563",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/0ffb5a6bf1b0fd9ce0c0b1fd9ce9fd30b89a2563",
        "files": [
          "Documentation/git-clone.txt",
          "builtin/upload-pack.c",
          "daemon.c",
          "path.c",
          "path.h",
          "t/t0411-clone-from-partial.sh",
          "t/t5605-clone-local.sh"
        ],
        "message": "Allow cloning from repositories owned by another user\n\nHistorically, Git has allowed users to clone from an untrusted\nrepository, and we have documented that this is safe to do so:\n\n    `upload-pack` tries to avoid any dangerous configuration options or\n    hooks from the repository it's serving, making it safe to clone an\n    untrusted directory and run commands on the resulting clone.\n\nHowever, this was broken by f4aa8c8bb1 (\"fetch/clone: detect dubious\nownership of local repositories\", 2024-04-10) in an attempt to make\nthings more secure.  That change resulted in a variety of problems when\ncloning locally and over SSH, but it did not change the stated security\nboundary.  Because the security boundary has not changed, it is safe to\nadjust part of the code that patch introduced.\n\nTo do that and restore the previous functionality, adjust enter_repo to\ntake two flags instead of one.\n\nThe two bits are\n\n - ENTER_REPO_STRICT: callers that require exact paths (as opposed\n   to allowing known suffixes like \".git\", \".git/.git\" to be\n   omitted) can set this bit.  Corresponds to the \"strict\" parameter\n   that the flags word replaces.\n\n - ENTER_REPO_ANY_OWNER_OK: callers that are willing to run without\n   ownership check can set this bit.\n\nThe former is --strict-paths option of \"git daemon\".  The latter is\nset only by upload-pack, which honors the claimed security boundary.\n\nNote that local clones across ownership boundaries require --no-local so\nthat upload-pack is used.  Document this fact in the manual page and\nprovide an example.\n\nThis patch was based on one written by Junio C Hamano.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "builtin/upload-pack.c||builtin/upload-pack.c",
          "daemon.c||daemon.c",
          "path.c||path.c",
          "path.h||path.h",
          "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh",
          "t/t5605-clone-local.sh||t/t5605-clone-local.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "path.c||path.c",
            "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
          ],
          "candidate": [
            "path.c||path.c",
            "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
          ]
        }
      },
      "candidate_diff": {
        "builtin/upload-pack.c||builtin/upload-pack.c": [
          "File: builtin/upload-pack.c -> builtin/upload-pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:        N_(\"interrupt transfer after <n> seconds of inactivity\")),",
          "35:   OPT_END()",
          "36:  };",
          "38:  packet_trace_identity(\"upload-pack\");",
          "39:  disable_replace_refs();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:  unsigned enter_repo_flags = ENTER_REPO_ANY_OWNER_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  dir = argv[0];",
          "53:   die(\"'%s' does not appear to be a git repository\", dir);",
          "55:  switch (determine_protocol_version_server()) {",
          "",
          "[Removed Lines]",
          "52:  if (!enter_repo(dir, strict))",
          "",
          "[Added Lines]",
          "53:  if (strict)",
          "54:   enter_repo_flags |= ENTER_REPO_STRICT;",
          "55:  if (!enter_repo(dir, enter_repo_flags))",
          "",
          "---------------"
        ],
        "daemon.c||daemon.c": [
          "File: daemon.c -> daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  size_t rlen;",
          "150:  const char *path;",
          "151:  const char *dir;",
          "153:  dir = directory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  unsigned enter_repo_flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:   dir = rpath;",
          "240:  }",
          "243:  if (!path && base_path && base_path_relaxed) {",
          "248:   dir = directory;",
          "250:  }",
          "252:  if (!path) {",
          "",
          "[Removed Lines]",
          "242:  path = enter_repo(dir, strict_paths);",
          "249:   path = enter_repo(dir, strict_paths);",
          "",
          "[Added Lines]",
          "243:  enter_repo_flags = strict_paths ? ENTER_REPO_STRICT : 0;",
          "244:  path = enter_repo(dir, enter_repo_flags);",
          "251:   path = enter_repo(dir, enter_repo_flags);",
          "",
          "---------------"
        ],
        "path.c||path.c": [
          "File: path.c -> path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: {",
          "799:  static struct strbuf validated_path = STRBUF_INIT;",
          "800:  static struct strbuf used_path = STRBUF_INIT;",
          "",
          "[Removed Lines]",
          "797: const char *enter_repo(const char *path, int strict)",
          "",
          "[Added Lines]",
          "797: const char *enter_repo(const char *path, unsigned flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "802:  if (!path)",
          "803:   return NULL;",
          "806:   static const char *suffix[] = {",
          "807:    \"/.git\", \"\", \".git/.git\", \".git\", NULL,",
          "808:   };",
          "",
          "[Removed Lines]",
          "805:  if (!strict) {",
          "",
          "[Added Lines]",
          "805:  if (!(flags & ENTER_REPO_STRICT)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "846:   if (!suffix[i])",
          "847:    return NULL;",
          "848:   gitfile = read_gitfile(used_path.buf);",
          "850:   if (gitfile) {",
          "851:    strbuf_reset(&used_path);",
          "852:    strbuf_addstr(&used_path, gitfile);",
          "",
          "[Removed Lines]",
          "849:   die_upon_dubious_ownership(gitfile, NULL, used_path.buf);",
          "",
          "[Added Lines]",
          "849:   if (!(flags & ENTER_REPO_ANY_OWNER_OK))",
          "850:    die_upon_dubious_ownership(gitfile, NULL, used_path.buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "857:  }",
          "858:  else {",
          "859:   const char *gitfile = read_gitfile(path);",
          "861:   if (gitfile)",
          "862:    path = gitfile;",
          "863:   if (chdir(path))",
          "",
          "[Removed Lines]",
          "860:   die_upon_dubious_ownership(gitfile, NULL, path);",
          "",
          "[Added Lines]",
          "861:   if (!(flags & ENTER_REPO_ANY_OWNER_OK))",
          "862:    die_upon_dubious_ownership(gitfile, NULL, path);",
          "",
          "---------------"
        ],
        "path.h||path.h": [
          "File: path.h -> path.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: int adjust_shared_perm(const char *path);",
          "186: char *interpolate_path(const char *path, int real_home);",
          "188: const char *remove_leading_path(const char *in, const char *prefix);",
          "189: const char *relative_path(const char *in, const char *prefix, struct strbuf *sb);",
          "190: int normalize_path_copy_len(char *dst, const char *src, int *prefix_len);",
          "",
          "[Removed Lines]",
          "187: const char *enter_repo(const char *path, int strict);",
          "",
          "[Added Lines]",
          "197: enum {",
          "198:  ENTER_REPO_STRICT = (1<<0),",
          "199:  ENTER_REPO_ANY_OWNER_OK = (1<<1),",
          "200: };",
          "202: const char *enter_repo(const char *path, unsigned flags);",
          "",
          "---------------"
        ],
        "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh": [
          "File: t/t0411-clone-from-partial.sh -> t/t0411-clone-from-partial.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  test_must_fail git clone \\",
          "29:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "30:   evil clone1 2>err &&",
          "32:  test_grep ! \"fake-upload-pack running\" err &&",
          "33:  test_path_is_missing script-executed",
          "34: '",
          "",
          "[Removed Lines]",
          "31:  test_grep \"detected dubious ownership\" err &&",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:  test_must_fail git clone \\",
          "39:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "40:   \"file://$(pwd)/evil\" clone2 2>err &&",
          "42:  test_grep ! \"fake-upload-pack running\" err &&",
          "43:  test_path_is_missing script-executed",
          "44: '",
          "",
          "[Removed Lines]",
          "41:  test_grep \"detected dubious ownership\" err &&",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:  test_must_fail git fetch \\",
          "49:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "50:   \"file://$(pwd)/evil\" 2>err &&",
          "52:  test_grep ! \"fake-upload-pack running\" err &&",
          "53:  test_path_is_missing script-executed",
          "54: '",
          "",
          "[Removed Lines]",
          "51:  test_grep \"detected dubious ownership\" err &&",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "t/t5605-clone-local.sh||t/t5605-clone-local.sh": [
          "File: t/t5605-clone-local.sh -> t/t5605-clone-local.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:  ! repo_is_hardlinked force-nonlocal",
          "154: '",
          "156: test_expect_success 'cloning locally respects \"-u\" for fetching refs' '",
          "157:  test_must_fail git clone --bare -u false a should_not_work.git",
          "158: '",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: test_expect_success 'cloning a local path with --no-local from a different user succeeds' '",
          "157:  git clone --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "158:   --no-local a nonlocal-otheruser 2>err &&",
          "159:  ! repo_is_hardlinked nonlocal-otheruser &&",
          "160:  # Verify that this is a git repository.",
          "161:  git -C nonlocal-otheruser rev-parse --show-toplevel &&",
          "162:  ! test_grep \"detected dubious ownership\" err",
          "164: '",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c5a4a1c05932378d259b1fdd9526cab971656a2",
      "candidate_info": {
        "commit_hash": "5c5a4a1c05932378d259b1fdd9526cab971656a2",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/5c5a4a1c05932378d259b1fdd9526cab971656a2",
        "files": [
          "t/t0411-clone-from-partial.sh"
        ],
        "message": "t0411: add tests for cloning from partial repo\n\nCloning from a partial repository must not fetch missing objects into\nthe partial repository, because that can lead to arbitrary code\nexecution.\n\nAdd a couple of test cases, pretending to the `upload-pack` command (and\nto that command only) that it is working on a repository owned by\nsomeone else.\n\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Filip Hejsek <filip.hejsek@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
          ],
          "candidate": [
            "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh"
          ]
        }
      },
      "candidate_diff": {
        "t/t0411-clone-from-partial.sh||t/t0411-clone-from-partial.sh": [
          "File: t/t0411-clone-from-partial.sh -> t/t0411-clone-from-partial.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "3: test_description='check that local clone does not fetch from promisor remotes'",
          "5: . ./test-lib.sh",
          "7: test_expect_success 'create evil repo' '",
          "8:  git init tmp &&",
          "9:  test_commit -C tmp a &&",
          "10:  git -C tmp config uploadpack.allowfilter 1 &&",
          "11:  git clone --filter=blob:none --no-local --no-checkout tmp evil &&",
          "12:  rm -rf tmp &&",
          "14:  git -C evil config remote.origin.uploadpack \\\"\\$TRASH_DIRECTORY/fake-upload-pack\\\" &&",
          "15:  write_script fake-upload-pack <<-\\EOF &&",
          "16:   echo >&2 \"fake-upload-pack running\"",
          "17:   >\"$TRASH_DIRECTORY/script-executed\"",
          "18:   exit 1",
          "19:  EOF",
          "20:  export TRASH_DIRECTORY &&",
          "22:  # empty shallow file disables local clone optimization",
          "23:  >evil/.git/shallow",
          "24: '",
          "26: test_expect_failure 'local clone must not fetch from promisor remote and execute script' '",
          "27:  rm -f script-executed &&",
          "28:  test_must_fail git clone \\",
          "29:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "30:   evil clone1 2>err &&",
          "31:  ! grep \"fake-upload-pack running\" err &&",
          "32:  test_path_is_missing script-executed",
          "33: '",
          "35: test_expect_failure 'clone from file://... must not fetch from promisor remote and execute script' '",
          "36:  rm -f script-executed &&",
          "37:  test_must_fail git clone \\",
          "38:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "39:   \"file://$(pwd)/evil\" clone2 2>err &&",
          "40:  ! grep \"fake-upload-pack running\" err &&",
          "41:  test_path_is_missing script-executed",
          "42: '",
          "44: test_expect_failure 'fetch from file://... must not fetch from promisor remote and execute script' '",
          "45:  rm -f script-executed &&",
          "46:  test_must_fail git fetch \\",
          "47:   --upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\",
          "48:   \"file://$(pwd)/evil\" 2>err &&",
          "49:  ! grep \"fake-upload-pack running\" err &&",
          "50:  test_path_is_missing script-executed",
          "51: '",
          "53: test_expect_success 'pack-objects should fetch from promisor remote and execute script' '",
          "54:  rm -f script-executed &&",
          "55:  echo \"HEAD\" | test_must_fail git -C evil pack-objects --revs --stdout >/dev/null 2>err &&",
          "56:  grep \"fake-upload-pack running\" err &&",
          "57:  test_path_is_file script-executed",
          "58: '",
          "60: test_done",
          "",
          "---------------"
        ]
      }
    }
  ]
}