{
  "cve_id": "CVE-2016-9962",
  "cve_desc": "RunC allowed additional container processes via 'runc exec' to be ptraced by the pid 1 of the container.  This allows the main processes of the container, if running as root, to gain access to file-descriptors of these new processes during the initialization and can lead to container escapes or modification of runC state before the process is fully placed inside the container.",
  "repo": "opencontainers/runc",
  "patch_hash": "50a19c6ff828c58e5dab13830bd3dacde268afe5",
  "patch_info": {
    "commit_hash": "50a19c6ff828c58e5dab13830bd3dacde268afe5",
    "repo": "opencontainers/runc",
    "commit_url": "https://github.com/opencontainers/runc/commit/50a19c6ff828c58e5dab13830bd3dacde268afe5",
    "files": [
      "libcontainer/init_linux.go",
      "libcontainer/nsenter/nsexec.c",
      "libcontainer/setns_init_linux.go",
      "libcontainer/standard_init_linux.go"
    ],
    "message": "Set init processes as non-dumpable\n\nThis sets the init processes that join and setup the container's\nnamespaces as non-dumpable before they setns to the container's pid (or\nany other ) namespace.\n\nThis settings is automatically reset to the default after the Exec in\nthe container so that it does not change functionality for the\napplications that are running inside, just our init processes.\n\nThis prevents parent processes, the pid 1 of the container, to ptrace\nthe init process before it drops caps and other sets LSMs.\n\nThis patch also ensures that the stateDirFD being used is still closed\nprior to exec, even though it is set as O_CLOEXEC, because of the order\nin the kernel.\n\nhttps://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318\n\nThe order during the exec syscall is that the process is set back to\ndumpable before O_CLOEXEC are processed.\n\nSigned-off-by: Michael Crosby <crosbymichael@gmail.com>",
    "before_after_code_files": [
      "libcontainer/init_linux.go||libcontainer/init_linux.go",
      "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c",
      "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go",
      "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go"
    ]
  },
  "patch_diff": {
    "libcontainer/init_linux.go||libcontainer/init_linux.go": [
      "File: libcontainer/init_linux.go -> libcontainer/init_linux.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:  switch t {",
      "78:  case initSetns:",
      "79:   return &linuxSetnsInit{",
      "81:   }, nil",
      "82:  case initStandard:",
      "83:   return &linuxStandardInit{",
      "",
      "[Removed Lines]",
      "80:    config: config,",
      "",
      "[Added Lines]",
      "80:    config:     config,",
      "81:    stateDirFD: stateDirFD,",
      "",
      "---------------"
    ],
    "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c": [
      "File: libcontainer/nsenter/nsexec.c -> libcontainer/nsenter/nsexec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:  if (pipenum == -1)",
      "409:   return;",
      "412:  nl_parse(pipenum, &config);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "412:  if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) != 0) {",
      "413:   bail(\"failed to set process as non-dumpable\");",
      "414:  }",
      "",
      "---------------"
    ],
    "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go": [
      "File: libcontainer/setns_init_linux.go -> libcontainer/setns_init_linux.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import (",
      "6:  \"fmt\"",
      "7:  \"os\"",
      "9:  \"github.com/opencontainers/runc/libcontainer/apparmor\"",
      "10:  \"github.com/opencontainers/runc/libcontainer/keys\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:  \"syscall\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18: type linuxSetnsInit struct {",
      "20: }",
      "22: func (l *linuxSetnsInit) getSessionRingName() string {",
      "",
      "[Removed Lines]",
      "19:  config *initConfig",
      "",
      "[Added Lines]",
      "20:  config     *initConfig",
      "21:  stateDirFD int",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "49:  if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {",
      "50:   return err",
      "51:  }",
      "52:  return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())",
      "53: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:  syscall.Close(l.stateDirFD)",
      "",
      "---------------"
    ],
    "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go": [
      "File: libcontainer/standard_init_linux.go -> libcontainer/standard_init_linux.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:    return newSystemErrorWithCause(err, \"init seccomp\")",
      "172:   }",
      "173:  }",
      "174:  if err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err != nil {",
      "175:   return newSystemErrorWithCause(err, \"exec user process\")",
      "176:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:  syscall.Close(l.stateDirFD)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d93fed3d27f1e2bab58bad13b180a7a81d0b378",
      "candidate_info": {
        "commit_hash": "5d93fed3d27f1e2bab58bad13b180a7a81d0b378",
        "repo": "opencontainers/runc",
        "commit_url": "https://github.com/opencontainers/runc/commit/5d93fed3d27f1e2bab58bad13b180a7a81d0b378",
        "files": [
          "libcontainer/init_linux.go",
          "libcontainer/nsenter/nsexec.c",
          "libcontainer/setns_init_linux.go",
          "libcontainer/standard_init_linux.go"
        ],
        "message": "Set init processes as non-dumpable\n\nThis sets the init processes that join and setup the container's\nnamespaces as non-dumpable before they setns to the container's pid (or\nany other ) namespace.\n\nThis settings is automatically reset to the default after the Exec in\nthe container so that it does not change functionality for the\napplications that are running inside, just our init processes.\n\nThis prevents parent processes, the pid 1 of the container, to ptrace\nthe init process before it drops caps and other sets LSMs.\n\nThis patch also ensures that the stateDirFD being used is still closed\nprior to exec, even though it is set as O_CLOEXEC, because of the order\nin the kernel.\n\nhttps://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318\n\nThe order during the exec syscall is that the process is set back to\ndumpable before O_CLOEXEC are processed.\n\nSigned-off-by: Michael Crosby <crosbymichael@gmail.com>",
        "before_after_code_files": [
          "libcontainer/init_linux.go||libcontainer/init_linux.go",
          "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c",
          "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go",
          "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libcontainer/init_linux.go||libcontainer/init_linux.go",
            "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c",
            "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go",
            "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go"
          ],
          "candidate": [
            "libcontainer/init_linux.go||libcontainer/init_linux.go",
            "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c",
            "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go",
            "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go"
          ]
        }
      },
      "candidate_diff": {
        "libcontainer/init_linux.go||libcontainer/init_linux.go": [
          "File: libcontainer/init_linux.go -> libcontainer/init_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  switch t {",
          "78:  case initSetns:",
          "79:   return &linuxSetnsInit{",
          "82:   }, nil",
          "83:  case initStandard:",
          "84:   return &linuxStandardInit{",
          "",
          "[Removed Lines]",
          "80:    pipe:   pipe,",
          "81:    config: config,",
          "",
          "[Added Lines]",
          "80:    pipe:       pipe,",
          "81:    config:     config,",
          "82:    stateDirFD: stateDirFD,",
          "",
          "---------------"
        ],
        "libcontainer/nsenter/nsexec.c||libcontainer/nsenter/nsexec.c": [
          "File: libcontainer/nsenter/nsexec.c -> libcontainer/nsenter/nsexec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:  if (pipenum == -1)",
          "425:   return;",
          "428:  nl_parse(pipenum, &config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:  if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) != 0) {",
          "429:   bail(\"failed to set process as non-dumpable\");",
          "430:  }",
          "",
          "---------------"
        ],
        "libcontainer/setns_init_linux.go||libcontainer/setns_init_linux.go": [
          "File: libcontainer/setns_init_linux.go -> libcontainer/setns_init_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import (",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "9:  \"github.com/opencontainers/runc/libcontainer/apparmor\"",
          "10:  \"github.com/opencontainers/runc/libcontainer/keys\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"syscall\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: type linuxSetnsInit struct {",
          "21: }",
          "23: func (l *linuxSetnsInit) getSessionRingName() string {",
          "",
          "[Removed Lines]",
          "19:  pipe   *os.File",
          "20:  config *initConfig",
          "",
          "[Added Lines]",
          "20:  pipe       *os.File",
          "21:  config     *initConfig",
          "22:  stateDirFD int",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {",
          "59:   return err",
          "60:  }",
          "61:  return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())",
          "62: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  syscall.Close(l.stateDirFD)",
          "",
          "---------------"
        ],
        "libcontainer/standard_init_linux.go||libcontainer/standard_init_linux.go": [
          "File: libcontainer/standard_init_linux.go -> libcontainer/standard_init_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:    return newSystemErrorWithCause(err, \"init seccomp\")",
          "180:   }",
          "181:  }",
          "182:  if err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err != nil {",
          "183:   return newSystemErrorWithCause(err, \"exec user process\")",
          "184:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:  syscall.Close(l.stateDirFD)",
          "",
          "---------------"
        ]
      }
    }
  ]
}