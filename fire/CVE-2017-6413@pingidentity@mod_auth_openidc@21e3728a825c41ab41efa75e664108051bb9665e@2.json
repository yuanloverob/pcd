{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d6c2f3fcb4e4e6aa2660ad8ddd0cf6b79a91f81",
      "candidate_info": {
        "commit_hash": "1d6c2f3fcb4e4e6aa2660ad8ddd0cf6b79a91f81",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/1d6c2f3fcb4e4e6aa2660ad8ddd0cf6b79a91f81",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/jose.c",
          "test/test.c"
        ],
        "message": "remove A128GCM/A192GCM from supported algorithms; refactor jose.c\n\n- mostly docs (auth_openidc.conf) because cjose doesn't support A128GCM\nand A192GCM yet (was a left-over from the included JWT implementation\npre 2.0.0)\n- refactor jose.c to use string defines\n- bump to 2.3.1rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/jose.c||src/jose.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: # The algorithm that the OP should use to encrypt to the id_token with the Content Encryption Key.",
          "238: # If OIDCIDTokenEncryptedResponseAlg is specified, the default for this value is A128CBC-HS256.",
          "239: # When OIDCIDTokenEncryptedResponseEnc is included, OIDCIDTokenEncryptedResponseAlg MUST also be provided.",
          "241: # NB: this can be overridden on a per-OP basis in the .conf file using the key: id_token_encrypted_response_enc",
          "244: # (used only in dynamic client registration)",
          "245: # The algorithm that the OP should use to sign the UserInfo response",
          "",
          "[Removed Lines]",
          "240: # (????GCM algorithms only supported when using OpenSSL >= 1.0.1)",
          "242: #OIDCIDTokenEncryptedResponseEnc [A128CBC-HS256|A256CBC-HS512|A128GCM|A192GCM|A256GCM]",
          "",
          "[Added Lines]",
          "240: # (A256GCM algorithm only supported when using OpenSSL >= 1.0.1)",
          "242: #OIDCIDTokenEncryptedResponseEnc [A128CBC-HS256|A256CBC-HS512|A256GCM]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258: # The algorithm that the OP should use to encrypt to encrypt the UserInfo response with the Content Encryption Key",
          "259: # If OIDCUserInfoEncryptedResponseAlg is specified, the default for this value is A128CBC-HS256.",
          "260: # When OIDCUserInfoEncryptedResponseEnc is included, OIDCUserInfoEncryptedResponseAlg MUST also be provided.",
          "262: # NB: this can be overridden on a per-OP basis in the .conf file using the key: userinfo_encrypted_response_enc",
          "265: ########################################################################################",
          "266: #",
          "",
          "[Removed Lines]",
          "261: # (????GCM algorithms only supported when using OpenSSL >= 1.0.1)",
          "263: #OIDCUserInfoEncryptedResponseEnc [A128CBC-HS256|A256CBC-HS512|A128GCM|A192GCM|A256GCM]",
          "",
          "[Added Lines]",
          "261: # (A256GCM algorithm only supported when using OpenSSL >= 1.0.1)",
          "263: #OIDCUserInfoEncryptedResponseEnc [A128CBC-HS256|A256CBC-HS512|A256GCM]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2166: const command_rec oidc_config_cmds[] = {",
          "2169:     (void*)APR_OFFSETOF(oidc_cfg, provider.metadata_url),",
          "2170:     RSRC_CONF,",
          "2171:     \"OpenID Connect OP configuration metadata URL.\"),",
          "2173:     (void*)APR_OFFSETOF(oidc_cfg, provider.issuer),",
          "2174:     RSRC_CONF,",
          "2175:     \"OpenID Connect OP issuer identifier.\"),",
          "",
          "[Removed Lines]",
          "2168:   AP_INIT_TAKE1(OIDCProviderMetadataURL, oidc_set_string_slot,",
          "2172:   AP_INIT_TAKE1(OIDCProviderIssuer, oidc_set_string_slot,",
          "",
          "[Added Lines]",
          "2168:   AP_INIT_TAKE1(OIDCProviderMetadataURL,",
          "2169:     oidc_set_string_slot,",
          "2173:   AP_INIT_TAKE1(OIDCProviderIssuer,",
          "2174:     oidc_set_string_slot,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2259:     oidc_set_encrypted_response_enc,",
          "2260:     (void *)APR_OFFSETOF(oidc_cfg, provider.id_token_encrypted_response_enc),",
          "2261:     RSRC_CONF,",
          "2263:   AP_INIT_TAKE1(OIDCUserInfoSignedResponseAlg,",
          "2264:     oidc_set_signed_response_alg,",
          "2265:     (void *)APR_OFFSETOF(oidc_cfg, provider.userinfo_signed_response_alg),",
          "",
          "[Removed Lines]",
          "2262:     \"The algorithm that the OP should use to encrypt to the id_token with the Content Encryption Key (used only in dynamic client registration); must be one of [A128CBC-HS256|A256CBC-HS512|A128GCM|A192GCM|A256GCM]\"),",
          "",
          "[Added Lines]",
          "2264:     \"The algorithm that the OP should use to encrypt to the id_token with the Content Encryption Key (used only in dynamic client registration); must be one of [A128CBC-HS256|A256CBC-HS512|A256GCM]\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2274:     oidc_set_encrypted_response_enc,",
          "2275:     (void *)APR_OFFSETOF(oidc_cfg, provider.userinfo_encrypted_response_enc),",
          "2276:     RSRC_CONF,",
          "2278:   AP_INIT_TAKE1(OIDCUserInfoTokenMethod,",
          "2279:     oidc_set_userinfo_token_method,",
          "2280:     (void *)APR_OFFSETOF(oidc_cfg, provider.userinfo_token_method),",
          "",
          "[Removed Lines]",
          "2277:     \"The algorithm that the OP should use to encrypt to encrypt the UserInfo response with the Content Encryption Key (used only in dynamic client registration); must be one of [A128CBC-HS256|A256CBC-HS512|A128GCM|A192GCM|A256GCM]\"),",
          "",
          "[Added Lines]",
          "2279:     \"The algorithm that the OP should use to encrypt to encrypt the UserInfo response with the Content Encryption Key (used only in dynamic client registration); must be one of [A128CBC-HS256|A256CBC-HS512|A256GCM]\"),",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  return hdr ? cjose_header_get(hdr, key, &cjose_err) : NULL;",
          "115: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: #define OIDC_JOSE_HDR_ALG_NONE \"eyJhbGciOiJub25lIn0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   oidc_jose_error_t *err) {",
          "122:  cjose_err cjose_err;",
          "123:  const char *cser = NULL;",
          "125:   if (cjose_jws_export(jwt->cjose_jws, &cser, &cjose_err) == FALSE) {",
          "126:    oidc_jose_error(err, \"cjose_jws_export failed: %s\",",
          "127:      oidc_cjose_e2s(pool, cjose_err));",
          "",
          "[Removed Lines]",
          "124:  if (strcmp(jwt->header.alg, \"none\") != 0) {",
          "",
          "[Added Lines]",
          "129:  if (strcmp(jwt->header.alg, CJOSE_HDR_ALG_NONE) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   free(s_payload);",
          "146:  }",
          "147:  return apr_pstrdup(pool, cser);",
          "148: }",
          "",
          "[Removed Lines]",
          "145:   cser = apr_psprintf(pool, \"eyJhbGciOiJub25lIn0.%s.\", cser);",
          "",
          "[Added Lines]",
          "150:   cser = apr_psprintf(pool, \"%s.%s.\", OIDC_JOSE_HDR_ALG_NONE, cser);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:  if (strcmp(alg, CJOSE_HDR_ALG_A256KW) == 0)",
          "196:   return 32;",
          "200:   return 32;",
          "203:   return 48;",
          "206:   return 64;",
          "208:  return 0;",
          "",
          "[Removed Lines]",
          "198:  if ((strcmp(alg, \"RS256\") == 0) || (strcmp(alg, \"PS256\") == 0)",
          "199:    || (strcmp(alg, \"HS256\") == 0))",
          "201:  if ((strcmp(alg, \"RS384\") == 0) || (strcmp(alg, \"PS384\") == 0)",
          "202:    || (strcmp(alg, \"HS384\") == 0))",
          "204:  if ((strcmp(alg, \"RS512\") == 0) || (strcmp(alg, \"PS512\") == 0)",
          "205:    || (strcmp(alg, \"HS512\") == 0))",
          "",
          "[Added Lines]",
          "203:  if ((strcmp(alg, CJOSE_HDR_ALG_RS256) == 0)",
          "204:    || (strcmp(alg, CJOSE_HDR_ALG_PS256) == 0)",
          "205:    || (strcmp(alg, CJOSE_HDR_ALG_HS256) == 0))",
          "207:  if ((strcmp(alg, CJOSE_HDR_ALG_RS384) == 0)",
          "208:    || (strcmp(alg, CJOSE_HDR_ALG_PS384) == 0)",
          "209:    || (strcmp(alg, CJOSE_HDR_ALG_HS384) == 0))",
          "211:  if ((strcmp(alg, CJOSE_HDR_ALG_RS512) == 0)",
          "212:    || (strcmp(alg, CJOSE_HDR_ALG_PS512) == 0)",
          "213:    || (strcmp(alg, CJOSE_HDR_ALG_HS512) == 0))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219: static apr_byte_t oidc_jwk_parse_rsa_x5c(apr_pool_t *pool, json_t *json,",
          "220:   cjose_jwk_t **jwk, oidc_jose_error_t *err);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: #define OIDC_JOSE_HDR_KTY      \"kty\"",
          "231: #define OIDC_JOSE_HDR_KTY_RSA  \"RSA\"",
          "232: #define OIDC_JOSE_HDR_X5C      \"x5c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:  }",
          "238:  char *kty = NULL;",
          "240:  if (kty == NULL) {",
          "242:   goto end;",
          "243:  }",
          "247:   goto end;",
          "248:  }",
          "251:  if (v == NULL) {",
          "253:   goto end;",
          "254:  }",
          "256:  oidc_jwk_parse_rsa_x5c(pool, json, &cjose_jwk, err);",
          "259:   json_decref(json);",
          "261:  return cjose_jwk;",
          "",
          "[Removed Lines]",
          "239:  oidc_jose_get_string(pool, json, \"kty\", FALSE, &kty, NULL);",
          "241:   oidc_jose_error(err, \"no key type \\\"kty\\\" found in JWK JSON value\");",
          "245:  if (apr_strnatcmp(kty, \"RSA\") != 0) {",
          "246:   oidc_jose_error(err, \"no RSA key type found JWK JSON value\");",
          "250:  json_t *v = json_object_get(json, \"x5c\");",
          "252:   oidc_jose_error(err, \"no x5c key found in JWK JSON value\");",
          "258:  end: if (json)",
          "",
          "[Added Lines]",
          "251:  oidc_jose_get_string(pool, json, OIDC_JOSE_HDR_KTY, FALSE, &kty, NULL);",
          "253:   oidc_jose_error(err,",
          "254:     \"no key type \\\"\" OIDC_JOSE_HDR_KTY \"\\\" found in JWK JSON value\");",
          "258:  if (apr_strnatcmp(kty, OIDC_JOSE_HDR_KTY_RSA) != 0) {",
          "259:   oidc_jose_error(err,",
          "260:     \"no \\\"\" OIDC_JOSE_HDR_KTY_RSA \"\\\" key type found JWK JSON value\");",
          "264:  json_t *v = json_object_get(json, OIDC_JOSE_HDR_X5C);",
          "266:   oidc_jose_error(err,",
          "267:     \"no \\\"\" OIDC_JOSE_HDR_X5C \"\\\" key found in JWK JSON value\");",
          "273: end:",
          "274:  if (json)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "387:   jwk_kid = apr_pstrdup(pool, s_kid);",
          "388:  } else {",
          "392:    oidc_jose_error(err, \"oidc_jose_hash_and_base64urlencode failed\");",
          "393:    return FALSE;",
          "394:   }",
          "",
          "[Removed Lines]",
          "390:   if (oidc_jose_hash_and_base64url_encode(pool, OIDC_JOSE_ALG_SHA256, key_params,",
          "391:     key_params_len, &jwk_kid) == FALSE) {",
          "",
          "[Added Lines]",
          "406:   if (oidc_jose_hash_and_base64url_encode(pool, OIDC_JOSE_ALG_SHA256,",
          "407:     key_params, key_params_len, &jwk_kid) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "442: static apr_byte_t oidc_jose_array_has_string(apr_array_header_t *haystack,",
          "443:   const char *needle) {",
          "446:   if (apr_strnatcmp(((const char**) haystack->elts)[i], needle) == 0)",
          "447:    return TRUE;",
          "448:  }",
          "449:  return FALSE;",
          "450: }",
          "",
          "[Removed Lines]",
          "444:  int i;",
          "445:  for (i = 0; i < haystack->nelts; i++) {",
          "",
          "[Added Lines]",
          "460:  int i = 0;",
          "461:  while (i < haystack->nelts) {",
          "464:   i++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "577:  return TRUE;",
          "578: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595: #define OIDC_JOSE_JWT_ISS             \"iss\"",
          "596: #define OIDC_JOSE_JWT_SUB             \"sub\"",
          "597: #define OIDC_JOSE_JWT_EXP             \"exp\"",
          "598: #define OIDC_JOSE_JWT_IAT             \"iat\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "602:   return FALSE;",
          "603:  }",
          "607:    NULL);",
          "611:    &payload->exp,",
          "612:    NULL);",
          "616:    &payload->iat,",
          "617:    NULL);",
          "621:    NULL);",
          "623:  return TRUE;",
          "",
          "[Removed Lines]",
          "606:  oidc_jose_get_string(pool, payload->value.json, \"iss\", FALSE, &payload->iss,",
          "610:  oidc_jose_get_timestamp(pool, payload->value.json, \"exp\", FALSE,",
          "615:  oidc_jose_get_timestamp(pool, payload->value.json, \"iat\", FALSE,",
          "620:  oidc_jose_get_string(pool, payload->value.json, \"sub\", FALSE, &payload->sub,",
          "",
          "[Added Lines]",
          "626:  oidc_jose_get_string(pool, payload->value.json, OIDC_JOSE_JWT_ISS, FALSE,",
          "627:    &payload->iss,",
          "631:  oidc_jose_get_timestamp(pool, payload->value.json, OIDC_JOSE_JWT_EXP, FALSE,",
          "636:  oidc_jose_get_timestamp(pool, payload->value.json, OIDC_JOSE_JWT_IAT, FALSE,",
          "641:  oidc_jose_get_string(pool, payload->value.json, OIDC_JOSE_JWT_SUB, FALSE,",
          "642:    &payload->sub,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "862:  return TRUE;",
          "863: }",
          "869: apr_byte_t oidc_jose_version_deprecated(apr_pool_t *pool) {",
          "870:  char *version = apr_pstrdup(pool, cjose_version());",
          "872: }",
          "",
          "[Removed Lines]",
          "871:  return (strstr(version, \"0.4.\") == version);",
          "",
          "[Added Lines]",
          "887: #define OIDC_JOSE_CJOSE_VERSION_DEPRECATED \"0.4.\"",
          "895:  return (strstr(version, OIDC_JOSE_CJOSE_VERSION_DEPRECATED) == version);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "978: static char *oidc_jose_alg_to_openssl_digest(const char *alg) {",
          "986:  }",
          "990:  }",
          "993:  }",
          "994:  return NULL;",
          "995: }",
          "",
          "[Removed Lines]",
          "979:  if ((strcmp(alg, \"RS256\") == 0) || (strcmp(alg, \"PS256\") == 0)",
          "980:    || (strcmp(alg, \"HS256\") == 0) || (strcmp(alg, \"ES256\") == 0)) {",
          "981:   return \"sha256\";",
          "982:  }",
          "983:  if ((strcmp(alg, \"RS384\") == 0) || (strcmp(alg, \"PS384\") == 0)",
          "984:    || (strcmp(alg, \"HS384\") == 0) || (strcmp(alg, \"ES384\") == 0)) {",
          "985:   return \"sha384\";",
          "987:  if ((strcmp(alg, \"RS512\") == 0) || (strcmp(alg, \"PS512\") == 0)",
          "988:    || (strcmp(alg, \"HS512\") == 0) || (strcmp(alg, \"ES512\") == 0)) {",
          "989:   return \"sha512\";",
          "991:  if (strcmp(alg, \"NONE\") == 0) {",
          "992:   return \"NONE\";",
          "",
          "[Added Lines]",
          "1003:  if ((strcmp(alg, CJOSE_HDR_ALG_RS256) == 0)",
          "1004:    || (strcmp(alg, CJOSE_HDR_ALG_PS256) == 0)",
          "1005:    || (strcmp(alg, CJOSE_HDR_ALG_HS256) == 0)",
          "1006:    || (strcmp(alg, CJOSE_HDR_ALG_ES256) == 0)) {",
          "1007:   return LN_sha256;",
          "1009:  if ((strcmp(alg, CJOSE_HDR_ALG_RS384) == 0)",
          "1010:    || (strcmp(alg, CJOSE_HDR_ALG_PS384) == 0)",
          "1011:    || (strcmp(alg, CJOSE_HDR_ALG_HS384) == 0)",
          "1012:    || (strcmp(alg, CJOSE_HDR_ALG_ES384) == 0)) {",
          "1013:   return LN_sha384;",
          "1015:  if ((strcmp(alg, CJOSE_HDR_ALG_RS512) == 0)",
          "1016:    || (strcmp(alg, CJOSE_HDR_ALG_PS512) == 0)",
          "1017:    || (strcmp(alg, CJOSE_HDR_ALG_HS512) == 0)",
          "1018:    || (strcmp(alg, CJOSE_HDR_ALG_ES512) == 0)) {",
          "1019:   return LN_sha512;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1019: int oidc_jose_hash_length(const char *alg) {",
          "1022:   return 32;",
          "1023:  }",
          "1026:   return 48;",
          "1027:  }",
          "1030:   return 64;",
          "1031:  }",
          "1032:  return 0;",
          "",
          "[Removed Lines]",
          "1020:  if ((strcmp(alg, \"RS256\") == 0) || (strcmp(alg, \"PS256\") == 0)",
          "1021:    || (strcmp(alg, \"HS256\") == 0) || (strcmp(alg, \"ES256\") == 0)) {",
          "1024:  if ((strcmp(alg, \"RS384\") == 0) || (strcmp(alg, \"PS384\") == 0)",
          "1025:    || (strcmp(alg, \"HS384\") == 0) || (strcmp(alg, \"ES384\") == 0)) {",
          "1028:  if ((strcmp(alg, \"RS512\") == 0) || (strcmp(alg, \"PS512\") == 0)",
          "1029:    || (strcmp(alg, \"HS512\") == 0) || (strcmp(alg, \"ES512\") == 0)) {",
          "",
          "[Added Lines]",
          "1047:  if ((strcmp(alg, CJOSE_HDR_ALG_RS256) == 0)",
          "1048:    || (strcmp(alg, CJOSE_HDR_ALG_PS256) == 0)",
          "1049:    || (strcmp(alg, CJOSE_HDR_ALG_HS256) == 0)",
          "1050:    || (strcmp(alg, CJOSE_HDR_ALG_ES256) == 0)) {",
          "1053:  if ((strcmp(alg, CJOSE_HDR_ALG_RS384) == 0)",
          "1054:    || (strcmp(alg, CJOSE_HDR_ALG_PS384) == 0)",
          "1055:    || (strcmp(alg, CJOSE_HDR_ALG_HS384) == 0)",
          "1056:    || (strcmp(alg, CJOSE_HDR_ALG_ES384) == 0)) {",
          "1059:  if ((strcmp(alg, CJOSE_HDR_ALG_RS512) == 0)",
          "1060:    || (strcmp(alg, CJOSE_HDR_ALG_PS512) == 0)",
          "1061:    || (strcmp(alg, CJOSE_HDR_ALG_HS512) == 0)",
          "1062:    || (strcmp(alg, CJOSE_HDR_ALG_ES512) == 0)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1159:  rv = TRUE;",
          "1161: end:",
          "1163:  if (input)",
          "1164:   BIO_free(input);",
          "1166:  return rv;",
          "1167: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200: #define OIDC_JOSE_CERT_BEGIN \"-----BEGIN CERTIFICATE-----\"",
          "1201: #define OIDC_JOSE_CERT_END   \"-----END CERTIFICATE-----\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1175:  apr_byte_t rv = FALSE;",
          "1179:  if (v == NULL) {",
          "1181:   return FALSE;",
          "1182:  }",
          "1183:  if (!json_is_array(v)) {",
          "1184:   oidc_jose_error(err,",
          "1185:     \"JSON key \\\"%s\\\" was found but its value is not a JSON array\",",
          "1187:   return FALSE;",
          "1188:  }",
          "",
          "[Removed Lines]",
          "1178:  json_t *v = json_object_get(json, \"x5c\");",
          "1180:   oidc_jose_error(err, \"JSON key \\\"%s\\\" could not be found\", \"x5c\");",
          "1186:     \"x5c\");",
          "",
          "[Added Lines]",
          "1212:  json_t *v = json_object_get(json, OIDC_JOSE_HDR_X5C);",
          "1214:   oidc_jose_error(err, \"JSON key \\\"%s\\\" could not be found\",",
          "1215:     OIDC_JOSE_HDR_X5C);",
          "1221:     OIDC_JOSE_HDR_X5C);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1204:  const int len = 75;",
          "1205:  int i = 0;",
          "1207:  while (i < strlen(s_x5c)) {",
          "1208:   s = apr_psprintf(pool, \"%s%s\\n\", s, apr_pstrndup(pool, s_x5c + i, len));",
          "1209:   i += len;",
          "1210:  }",
          "1213:  BIO *input = NULL;",
          "",
          "[Removed Lines]",
          "1206:  char *s = apr_psprintf(pool, \"-----BEGIN CERTIFICATE-----\\n\");",
          "1211:  s = apr_psprintf(pool, \"%s-----END CERTIFICATE-----\\n\", s);",
          "",
          "[Added Lines]",
          "1241:  char *s = apr_psprintf(pool, \"%s\\n\", OIDC_JOSE_CERT_BEGIN);",
          "1246:  s = apr_psprintf(pool, \"%s%s\\n\", s, OIDC_JOSE_CERT_END);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1239:   const char *filename, oidc_jwk_t **jwk, oidc_jose_error_t *err) {",
          "1240:  return oidc_jwk_parse_rsa_key(pool, TRUE, kid, filename, jwk, err);",
          "1241: }",
          "",
          "[Removed Lines]",
          "1238: apr_byte_t oidc_jwk_parse_rsa_private_key(apr_pool_t *pool,  const char *kid,",
          "",
          "[Added Lines]",
          "1273: apr_byte_t oidc_jwk_parse_rsa_private_key(apr_pool_t *pool, const char *kid,",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "867:    pool, err);",
          "868:     oidc_jwk_destroy(jwk_s);",
          "871:  TST_ASSERT_STR(\"payload.iss\", jwt->payload.iss, \"joe\");",
          "872:  TST_ASSERT_LONG(\"payload.exp\", (long )jwt->payload.exp, 1300819380L);",
          "",
          "[Removed Lines]",
          "870:  TST_ASSERT_STR(\"header.alg\", jwt->header.alg, \"RS256\");",
          "",
          "[Added Lines]",
          "870:  TST_ASSERT_STR(\"header.alg\", jwt->header.alg, CJOSE_HDR_ALG_RS256);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9901d9d713767613838d12394d7122fdcffe5d4",
      "candidate_info": {
        "commit_hash": "d9901d9d713767613838d12394d7122fdcffe5d4",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/d9901d9d713767613838d12394d7122fdcffe5d4",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/jose.c",
          "src/jose.h",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c",
          "src/util.c",
          "test/test-cmd.c"
        ],
        "message": "address static code analysis issues\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/jose.c||src/jose.c",
          "src/jose.h||src/jose.h",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c",
          "test/test-cmd.c||test/test-cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1615:  return dir_cfg->authn_header;",
          "1616: }",
          "1619:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1620:    &auth_openidc_module);",
          "1621:  if (dir_cfg->pass_info_in_headers == OIDC_CONFIG_POS_INT_UNSET)",
          "",
          "[Removed Lines]",
          "1618: int oidc_cfg_dir_pass_info_in_headers(request_rec *r) {",
          "",
          "[Added Lines]",
          "1618: apr_byte_t oidc_cfg_dir_pass_info_in_headers(request_rec *r) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1623:  return dir_cfg->pass_info_in_headers;",
          "1624: }",
          "1627:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1628:    &auth_openidc_module);",
          "1629:  if (dir_cfg->pass_info_in_env_vars == OIDC_CONFIG_POS_INT_UNSET)",
          "",
          "[Removed Lines]",
          "1626: int oidc_cfg_dir_pass_info_in_envvars(request_rec *r) {",
          "",
          "[Added Lines]",
          "1626: apr_byte_t oidc_cfg_dir_pass_info_in_envvars(request_rec *r) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1631:  return dir_cfg->pass_info_in_env_vars;",
          "1632: }",
          "1635:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1636:    &auth_openidc_module);",
          "1637:  if (dir_cfg->pass_refresh_token == OIDC_CONFIG_POS_INT_UNSET)",
          "",
          "[Removed Lines]",
          "1634: int oidc_cfg_dir_pass_refresh_token(request_rec *r) {",
          "",
          "[Added Lines]",
          "1634: apr_byte_t oidc_cfg_dir_pass_refresh_token(request_rec *r) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1639:  return dir_cfg->pass_refresh_token;",
          "1640: }",
          "1643:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1644:    &auth_openidc_module);",
          "1645:  if (dir_cfg->oauth_accept_token_in == OIDC_CONFIG_POS_INT_UNSET)",
          "",
          "[Removed Lines]",
          "1642: int oidc_cfg_dir_accept_token_in(request_rec *r) {",
          "",
          "[Added Lines]",
          "1642: apr_byte_t oidc_cfg_dir_accept_token_in(request_rec *r) {",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:  if (alg == NULL)",
          "194:   return 0;",
          "",
          "[Removed Lines]",
          "191: int oidc_alg2keysize(const char *alg) {",
          "",
          "[Added Lines]",
          "191: unsigned int oidc_alg2keysize(const char *alg) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "738:   return FALSE;",
          "741:  oidc_jwt_t *jwt = *j_jwt;",
          "743:  jwt->cjose_jws = cjose_jws_import(s_json, strlen(s_json), &cjose_err);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:  if (*j_jwt == NULL)",
          "742:   return FALSE;",
          "",
          "---------------"
        ],
        "src/jose.h||src/jose.h": [
          "File: src/jose.h -> src/jose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: int oidc_jwt_alg2kty(oidc_jwt_t *jwt);",
          "",
          "[Removed Lines]",
          "246: int oidc_alg2keysize(const char *alg);",
          "",
          "[Added Lines]",
          "246: unsigned int oidc_alg2keysize(const char *alg);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1276: static apr_byte_t oidc_session_pass_tokens_and_save(request_rec *r,",
          "1277:   oidc_cfg *cfg, oidc_session_t *session, apr_byte_t needs_save) {",
          "1283:  const char *refresh_token = oidc_session_get_refresh_token(r, session);",
          "",
          "[Removed Lines]",
          "1279:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "1280:  int pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "[Added Lines]",
          "1279:  apr_byte_t pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "1280:  apr_byte_t pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1355:  char *authn_header = oidc_cfg_dir_authn_header(r);",
          "1360:  if (oidc_check_cookie_domain(r, cfg, session) == FALSE)",
          "",
          "[Removed Lines]",
          "1356:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "1357:  int pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "[Added Lines]",
          "1356:  apr_byte_t pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "1357:  apr_byte_t pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2580:   if (id_token_hint != NULL) {",
          "2581:    logout_request = apr_psprintf(r->pool, \"%s%sid_token_hint=%s\",",
          "2582:      logout_request,",
          "2584:        OIDC_STR_AMP : OIDC_STR_QUERY,",
          "2585:        oidc_util_escape_string(r, id_token_hint));",
          "2586:   }",
          "",
          "[Removed Lines]",
          "2583:      strchr(logout_request, OIDC_CHAR_QUERY) != NULL ?",
          "",
          "[Added Lines]",
          "2583:      strchr(logout_request ? logout_request : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2588:   if (url != NULL) {",
          "2589:    logout_request = apr_psprintf(r->pool,",
          "2590:      \"%s%spost_logout_redirect_uri=%s\", logout_request,",
          "2592:        OIDC_STR_AMP : OIDC_STR_QUERY,",
          "2593:        oidc_util_escape_string(r, url));",
          "2594:   }",
          "",
          "[Removed Lines]",
          "2591:      strchr(logout_request, OIDC_CHAR_QUERY) != NULL ?",
          "",
          "[Added Lines]",
          "2591:      strchr(logout_request ? logout_request : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2874:  if (error_code != NULL)",
          "2875:   return_to = apr_psprintf(r->pool, \"%s%serror_code=%s\", return_to,",
          "2877:       OIDC_STR_AMP :",
          "2878:       OIDC_STR_QUERY,",
          "2879:       oidc_util_escape_string(r, error_code));",
          "",
          "[Removed Lines]",
          "2876:     strchr(return_to, OIDC_CHAR_QUERY) ?",
          "",
          "[Added Lines]",
          "2876:     strchr(return_to ? return_to : \"\", OIDC_CHAR_QUERY) ?",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "651: char *oidc_cfg_dir_cookie(request_rec *r);",
          "652: char *oidc_cfg_dir_cookie_path(request_rec *r);",
          "653: char *oidc_cfg_dir_authn_header(request_rec *r);",
          "658: char *oidc_cfg_dir_accept_token_in_option(request_rec *r, const char *key);",
          "659: int oidc_cfg_token_introspection_interval(request_rec *r);",
          "660: int oidc_cfg_dir_preserve_post(request_rec *r);",
          "",
          "[Removed Lines]",
          "654: int oidc_cfg_dir_pass_info_in_headers(request_rec *r);",
          "655: int oidc_cfg_dir_pass_info_in_envvars(request_rec *r);",
          "656: int oidc_cfg_dir_pass_refresh_token(request_rec *r);",
          "657: int oidc_cfg_dir_accept_token_in(request_rec *r);",
          "",
          "[Added Lines]",
          "654: apr_byte_t oidc_cfg_dir_pass_info_in_headers(request_rec *r);",
          "655: apr_byte_t oidc_cfg_dir_pass_info_in_envvars(request_rec *r);",
          "656: apr_byte_t oidc_cfg_dir_pass_refresh_token(request_rec *r);",
          "657: apr_byte_t oidc_cfg_dir_accept_token_in(request_rec *r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691: char *oidc_util_encode_json_object(request_rec *r, json_t *json, size_t flags);",
          "692: apr_byte_t oidc_util_decode_json_object(request_rec *r, const char *str, json_t **json);",
          "693: apr_byte_t oidc_util_decode_json_and_check_error(request_rec *r, const char *str, json_t **json);",
          "695: int oidc_util_html_send(request_rec *r, const char *title, const char *html_head, const char *on_load, const char *html_body, int status_code);",
          "696: char *oidc_util_escape_string(const request_rec *r, const char *str);",
          "697: char *oidc_util_unescape_string(const request_rec *r, const char *str);",
          "",
          "[Removed Lines]",
          "694: int oidc_util_http_send(request_rec *r, const char *data, int data_len, const char *content_type, int success_rvalue);",
          "",
          "[Added Lines]",
          "694: int oidc_util_http_send(request_rec *r, const char *data, size_t data_len, const char *content_type, int success_rvalue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "722: apr_byte_t oidc_util_jwt_verify(request_rec *r, const char *secret, const char *compact_encoded_jwt, json_t **result);",
          "723: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName, int cookie_chunk_size);",
          "724: void oidc_util_set_chunked_cookie(request_rec *r, const char *cookieName, const char *cookieValue, apr_time_t expires, int chunkSize, const char *ext);",
          "726: apr_hash_t * oidc_util_merge_symmetric_key(apr_pool_t *pool, apr_hash_t *private_keys, oidc_jwk_t *jwk);",
          "727: const char *oidc_util_get_provided_token_binding_id(const request_rec *r);",
          "728: char *oidc_util_http_query_encoded_url(request_rec *r, const char *url, const apr_table_t *params);",
          "",
          "[Removed Lines]",
          "725: apr_byte_t oidc_util_create_symmetric_key(request_rec *r, const char *client_secret, int r_key_len, const char *hash_algo, apr_byte_t set_kid, oidc_jwk_t **jwk);",
          "",
          "[Added Lines]",
          "725: apr_byte_t oidc_util_create_symmetric_key(request_rec *r, const char *client_secret, unsigned int r_key_len, const char *hash_algo, apr_byte_t set_kid, oidc_jwk_t **jwk);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   const char **access_token) {",
          "111:  const char *cookie_name = oidc_cfg_dir_accept_token_in_option(r,",
          "112:    OIDC_OAUTH_ACCEPT_TOKEN_IN_OPTION_COOKIE_NAME);",
          "",
          "[Removed Lines]",
          "110:  int accept_token_in = oidc_cfg_dir_accept_token_in(r);",
          "",
          "[Added Lines]",
          "110:  apr_byte_t accept_token_in = oidc_cfg_dir_accept_token_in(r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:  char *authn_header = oidc_cfg_dir_authn_header(r);",
          "682:  if ((r->user != NULL) && (authn_header != NULL))",
          "683:   oidc_util_hdr_in_set(r, authn_header, r->user);",
          "",
          "[Removed Lines]",
          "679:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "680:  int pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "[Added Lines]",
          "679:  apr_byte_t pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
          "680:  apr_byte_t pass_envvars = oidc_cfg_dir_pass_info_in_envvars(r);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:  }",
          "1272:   oidc_error(r,",
          "1273:     \"\\\"exp\\\" validation failure (%ld): JWT expired %ld seconds ago\",",
          "1275:   return FALSE;",
          "1276:  }",
          "",
          "[Removed Lines]",
          "1271:  if (now > jwt->payload.exp) {",
          "1274:     (long )jwt->payload.exp, (long )(now - jwt->payload.exp));",
          "",
          "[Added Lines]",
          "1271:  apr_time_t expires = jwt->payload.exp;",
          "1272:  if (now > expires) {",
          "1275:     (long )expires, (long )(now - expires));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1561: char *oidc_proto_peek_jwt_header(request_rec *r,",
          "1562:   const char *compact_encoded_jwt, char **alg) {",
          "1563:  char *input = NULL, *result = NULL;",
          "1565:  if (p == NULL) {",
          "1566:   oidc_warn(r,",
          "1567:     \"could not parse first element separated by \\\".\\\" from input\");",
          "",
          "[Removed Lines]",
          "1564:  char *p = strstr(compact_encoded_jwt, \".\");",
          "",
          "[Added Lines]",
          "1565:  char *p = strstr(compact_encoded_jwt ? compact_encoded_jwt : \"\", \".\");",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   oidc_error(r, \"not encoding anything; src=NULL and/or src_len<1\");",
          "78:   return -1;",
          "79:  }",
          "81:  char *enc = apr_palloc(r->pool, enc_len);",
          "82:  apr_base64_encode(enc, (const char *) src, src_len);",
          "84:  while (enc[i] != '\\0') {",
          "85:   if (enc[i] == '+')",
          "86:    enc[i] = '-';",
          "",
          "[Removed Lines]",
          "80:  int enc_len = apr_base64_encode_len(src_len);",
          "83:  int i = 0;",
          "",
          "[Added Lines]",
          "80:  unsigned int enc_len = apr_base64_encode_len(src_len);",
          "83:  unsigned int i = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:  }",
          "93:  if (remove_padding) {",
          "97:    enc_len--;",
          "99:    enc_len--;",
          "100:   enc[enc_len] = '\\0';",
          "101:  }",
          "",
          "[Removed Lines]",
          "95:   enc_len--;",
          "96:   if (enc[enc_len - 1] == ',')",
          "98:   if (enc[enc_len - 1] == ',')",
          "",
          "[Added Lines]",
          "95:   if (enc_len > 0)",
          "96:    enc_len--;",
          "97:   if ((enc_len > 0) && (enc[enc_len - 1] == ','))",
          "99:   if ((enc_len > 0) &&(enc[enc_len - 1] == ','))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520:  const char *redirect_uri = oidc_get_redirect_uri(r, cfg);",
          "521:  if (provider->issuer_specific_redirect_uri != 0) {",
          "522:   redirect_uri = apr_psprintf(r->pool, \"%s%s%s=%s\", redirect_uri,",
          "524:       OIDC_STR_AMP :",
          "525:       OIDC_STR_QUERY,",
          "526:       OIDC_PROTO_ISS, oidc_util_escape_string(r, provider->issuer));",
          "",
          "[Removed Lines]",
          "523:     strchr(redirect_uri, OIDC_CHAR_QUERY) != NULL ?",
          "",
          "[Added Lines]",
          "524:     strchr(redirect_uri ? redirect_uri : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "609:     NULL);",
          "610:   const char *sep = NULL;",
          "611:   if (data.encoded_params)",
          "613:      OIDC_STR_AMP :",
          "614:      OIDC_STR_QUERY;",
          "615:   result = apr_psprintf(r->pool, \"%s%s%s\", url, sep ? sep : \"\",",
          "",
          "[Removed Lines]",
          "612:    sep = strchr(url, OIDC_CHAR_QUERY) != NULL ?",
          "",
          "[Added Lines]",
          "613:    sep = strchr(url ? url : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1293:   const char *content_type, int success_rvalue) {",
          "1294:  ap_set_content_type(r, content_type);",
          "1295:  apr_bucket_brigade *bb = apr_brigade_create(r->pool,",
          "",
          "[Removed Lines]",
          "1292: int oidc_util_http_send(request_rec *r, const char *data, int data_len,",
          "",
          "[Added Lines]",
          "1293: int oidc_util_http_send(request_rec *r, const char *data, size_t data_len,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1767:    char *s_concat = apr_pstrdup(r->pool, \"\");",
          "1771:    for (i = 0; i < json_array_size(j_value); i++) {",
          "",
          "[Removed Lines]",
          "1768:    int i = 0;",
          "",
          "[Added Lines]",
          "1769:    size_t i = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1972: apr_byte_t oidc_util_create_symmetric_key(request_rec *r,",
          "1974:   apr_byte_t set_kid, oidc_jwk_t **jwk) {",
          "1975:  oidc_jose_error_t err;",
          "1976:  unsigned char *key = NULL;",
          "",
          "[Removed Lines]",
          "1973:   const char *client_secret, int r_key_len, const char *hash_algo,",
          "",
          "[Added Lines]",
          "1974:   const char *client_secret, unsigned int r_key_len, const char *hash_algo,",
          "",
          "---------------"
        ],
        "test/test-cmd.c||test/test-cmd.c": [
          "File: test/test-cmd.c -> test/test-cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:  request_rec *r = request_setup(pool);",
          "417:  oidc_jwk_t *jwk = NULL;",
          "419:   fprintf(stderr, \"oidc_util_create_symmetric_key failed\");",
          "420:   return -1;",
          "421:  }",
          "",
          "[Removed Lines]",
          "418:  if (oidc_util_create_symmetric_key(r, argv[2], argc > 4 ? atoi(argv[4]) : 0, argc > 3 ? argv[3] : NULL, FALSE, &jwk) == FALSE) {",
          "",
          "[Added Lines]",
          "418:  if (oidc_util_create_symmetric_key(r, argv[2], argc > 4 ? strtoul(argv[4], NULL, 0) : 0, argc > 3 ? argv[3] : NULL, FALSE, &jwk) == FALSE) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "886d39b0fca7b6e653ea71b830d7bf919996a970",
      "candidate_info": {
        "commit_hash": "886d39b0fca7b6e653ea71b830d7bf919996a970",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/886d39b0fca7b6e653ea71b830d7bf919996a970",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/parse.c",
          "src/util.c"
        ],
        "message": "allow high session inactivity timeout; improve errmsg on ap_pass_brigade\n\nset session inactivity timeout max value to the same max as for max\nsession duration: a year\nimprove error message in oidc_util_http_send when ap_pass_brigade fails\nand mention possible interference with mod_deflate\n\nbump to 2.2.1rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/parse.c||src/parse.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488: }",
          "490: #define OIDC_SESSION_INACTIVITY_TIMEOUT_MIN 10",
          "",
          "[Removed Lines]",
          "491: #define OIDC_SESSION_INACTIVITY_TIMEOUT_MAX 86400",
          "",
          "[Added Lines]",
          "491: #define OIDC_SESSION_INACTIVITY_TIMEOUT_MAX 3600 * 24 * 365",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:  APR_BRIGADE_INSERT_TAIL(bb, b);",
          "1177:  b = apr_bucket_eos_create(r->connection->bucket_alloc);",
          "1178:  APR_BRIGADE_INSERT_TAIL(bb, b);",
          "1180:   return HTTP_INTERNAL_SERVER_ERROR;",
          "1182:  return success_rvalue;",
          "1183: }",
          "",
          "[Removed Lines]",
          "1179:  if (ap_pass_brigade(r->output_filters, bb) != APR_SUCCESS)",
          "",
          "[Added Lines]",
          "1179:  int rc = ap_pass_brigade(r->output_filters, bb);",
          "1180:  if (rc != APR_SUCCESS) {",
          "1181:   oidc_error(r,",
          "1182:     \"ap_pass_brigade returned an error: %d; if you're using this module combined with mod_deflate try make an exception for the OIDCRedirectURI e.g. using SetEnvIf Request_URI <url> no-gzip\",",
          "1183:     rc);",
          "1185:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f9ef42170c6d9196849a77290b74d79b64e12af",
      "candidate_info": {
        "commit_hash": "4f9ef42170c6d9196849a77290b74d79b64e12af",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/4f9ef42170c6d9196849a77290b74d79b64e12af",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.h"
        ],
        "message": "use Provided-Token-Binding-ID for the provided token binding ID\n\n- use the defined name (`Provided-Token-Binding-ID`) for the provided\ntoken binding ID HTTP header conform draft-campbell-tokbind-ttrp-00\n- depends on mod_token_binding >= 0.3.0 now\n- bump to 2.3.1rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: #define OIDC_COOKIE_EXT_SAME_SITE_LAX    \"SameSite=Lax\"",
          "205: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "209: #define OIDC_TOKEN_BINDING_POLICY_DISABLED  0",
          "210: #define OIDC_TOKEN_BINDING_POLICY_OPTIONAL  1",
          "",
          "[Removed Lines]",
          "207: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Token-Binding-ID-Provided\"",
          "",
          "[Added Lines]",
          "208: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Provided-Token-Binding-ID\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df037d98ca23742f7b0c976b682b6403b53109ba",
      "candidate_info": {
        "commit_hash": "df037d98ca23742f7b0c976b682b6403b53109ba",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/df037d98ca23742f7b0c976b682b6403b53109ba",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "add support for black- and/or white-listing claims\n\nusing OIDCBlackListedClaims and OIDCWhiteListedClaims one can control\nthe number of claims ending up in the session, being passed as\nenvironment variables or headers and being returned from the session\ninfo hook\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "742: #   session (object)           : (for debugging) mod_auth_openidc specific session data such as \"remote user\", \"session expiry\", \"session id\" and a \"state\" object",
          "743: # When not defined the session hook will not return any data but a HTTP 404",
          "744: #OIDCInfoHook [iat|access_token|access_token_expires|id_token|userinfo|refresh_token|session]+",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746: # (Optional)",
          "747: # Specify claims that should be removed from the userinfo and/or id_token before storing them in the session.",
          "748: # Note that OIDCBlackListedClaims takes precedence over OIDCWhiteListedClaims",
          "749: # When not defined no claims are blacklisted and all claims are stored except when OIDCWhiteListedClaims is used.",
          "750: #OIDCBlackListedClaims [<claim>]+",
          "752: # (Optional)",
          "753: # Specify claims from the userinfo and/or id_token that should be stored in the session (all other claims will be discarded).",
          "754: # Note that OIDCBlackListedClaims takes precedence over OIDCWhiteListedClaims",
          "755: # When not defined no claims are whitelisted and all claims are stored except when blacklisted with OIDCBlackListedClaims.",
          "756: #OIDCWhiteListedClaims [<claim>]+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "740: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742: static const char * oidc_set_filtered_claims(cmd_parms *cmd, void *m,",
          "743:   const char *arg) {",
          "744:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "745:    cmd->server->module_config, &auth_openidc_module);",
          "746:  int offset = (int) (long) cmd->info;",
          "747:  apr_hash_t **list =",
          "748:    (apr_hash_t **) ((char *) cfg + offset);",
          "749:  if (*list == NULL)",
          "751:  apr_hash_set(*list, arg, APR_HASH_KEY_STRING, arg);",
          "752:  return NULL;",
          "753: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "868:    OIDC_DEFAULT_PROVIDER_METADATA_REFRESH_INTERVAL;",
          "870:  c->info_hook_data = NULL;",
          "872:  return c;",
          "873: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:  c->black_listed_claims = NULL;",
          "886:  c->white_listed_claims = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1261:  c->info_hook_data =",
          "1262:    add->info_hook_data != NULL ?",
          "1263:      add->info_hook_data : base->info_hook_data;",
          "1265:  return c;",
          "1266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1280:  c->black_listed_claims =",
          "1281:    add->black_listed_claims != NULL ?",
          "1282:      add->black_listed_claims : base->black_listed_claims;",
          "1283:  c->white_listed_claims =",
          "1284:    add->white_listed_claims != NULL ?",
          "1285:      add->white_listed_claims : base->white_listed_claims;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2353:     (void *)APR_OFFSETOF(oidc_cfg, info_hook_data),",
          "2354:     RSRC_CONF,",
          "2355:     \"The data that will be returned from the info hook.\"),",
          "2356:   { NULL }",
          "2357: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2378:   AP_INIT_ITERATE(\"OIDCBlackListedClaims\",",
          "2379:     oidc_set_filtered_claims,",
          "2380:     (void *) APR_OFFSETOF(oidc_cfg, black_listed_claims),",
          "2381:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "2382:     \"Specify claims that should be removed from the userinfo and/or id_token before storing them in the session.\"),",
          "2383:   AP_INIT_ITERATE(\"OIDCWhiteListedClaims\",",
          "2384:     oidc_set_filtered_claims,",
          "2385:     (void *) APR_OFFSETOF(oidc_cfg, white_listed_claims),",
          "2386:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "2387:     \"Specify claims from the userinfo and/or id_token that should be stored in the session (all other claims will be discarded).\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:  int provider_metadata_refresh_interval;",
          "349:  apr_hash_t *info_hook_data;",
          "351: } oidc_cfg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:  apr_hash_t *black_listed_claims;",
          "351:  apr_hash_t *white_listed_claims;",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:  return t_expires;",
          "405: }",
          "410: void oidc_session_set_userinfo_claims(request_rec *r, oidc_session_t *z,",
          "411:   const char *claims) {",
          "413: }",
          "415: const char * oidc_session_get_userinfo_claims(request_rec *r, oidc_session_t *z) {",
          "",
          "[Removed Lines]",
          "412:  oidc_session_set(r, z, OIDC_SESSION_KEY_USERINFO_CLAIMS, claims);",
          "",
          "[Added Lines]",
          "407: void oidc_session_set_filtered_claims(request_rec *r, oidc_session_t *z,",
          "408:   const char *session_key, const char *claims) {",
          "409:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "410:    &auth_openidc_module);",
          "412:  const char *name;",
          "413:  json_t *src = NULL, *dst = NULL, *value = NULL;",
          "414:  void *iter = NULL;",
          "415:  apr_byte_t is_allowed;",
          "417:  if (oidc_util_decode_json_object(r, claims, &src) == FALSE)",
          "418:   return;",
          "420:  dst = json_object();",
          "421:  iter = json_object_iter(src);",
          "422:  while (iter) {",
          "423:   is_allowed = TRUE;",
          "424:   name = json_object_iter_key(iter);",
          "425:   value = json_object_iter_value(iter);",
          "427:   if ((c->black_listed_claims != NULL)",
          "428:     && (apr_hash_get(c->black_listed_claims, name,",
          "429:       APR_HASH_KEY_STRING) != NULL)) {",
          "430:    oidc_debug(r, \"removing blacklisted claim [%s]: '%s'\", session_key, name);",
          "431:    is_allowed = FALSE;",
          "432:   }",
          "434:   if ((is_allowed == TRUE) && (c->white_listed_claims != NULL)",
          "435:     && (apr_hash_get(c->white_listed_claims, name,",
          "436:       APR_HASH_KEY_STRING) == NULL)) {",
          "437:    oidc_debug(r, \"removing non-whitelisted claim [%s]: '%s'\", session_key, name);",
          "438:    is_allowed = FALSE;",
          "439:   }",
          "441:   if (is_allowed == TRUE)",
          "442:    json_object_set(dst, name, value);",
          "444:   iter = json_object_iter_next(src, iter);",
          "445:  }",
          "447:  char *filtered_claims = oidc_util_encode_json_object(r, dst, JSON_COMPACT);",
          "448:  json_decref(dst);",
          "449:  oidc_session_set(r, z, session_key, filtered_claims);",
          "450: }",
          "457:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_USERINFO_CLAIMS, claims);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426: void oidc_session_set_idtoken_claims(request_rec *r, oidc_session_t *z,",
          "427:   const char *idtoken_claims) {",
          "429: }",
          "431: const char * oidc_session_get_idtoken_claims(request_rec *r, oidc_session_t *z) {",
          "",
          "[Removed Lines]",
          "428:  oidc_session_set(r, z, OIDC_SESSION_KEY_IDTOKEN_CLAIMS, idtoken_claims);",
          "",
          "[Added Lines]",
          "473:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_IDTOKEN_CLAIMS, idtoken_claims);",
          "",
          "---------------"
        ]
      }
    }
  ]
}