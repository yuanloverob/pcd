{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
      "candidate_info": {
        "commit_hash": "447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/447e07ab3d569bb4b2209ccfe3889fafa3ad6693",
        "files": [
          "Doc/data/stable_abi.dat",
          "Include/internal/pycore_pyerrors.h",
          "Include/pyerrors.h",
          "Lib/codeop.py",
          "Lib/test/exception_hierarchy.txt",
          "Lib/test/test_pickle.py",
          "Lib/test/test_stable_abi_ctypes.py",
          "Misc/stable_abi.toml",
          "Objects/exceptions.c",
          "PC/python3dll.c",
          "Parser/pegen.c"
        ],
        "message": "[3.13] gh-119521: Rename IncompleteInputError to _IncompleteInputError and remove from public API/ABI (GH-119680, GH-120955) (GH-120944)\n\n- gh-119521: Rename IncompleteInputError to _IncompleteInputError and remove from public API/ABI (GH-119680)\n  (cherry picked from commit ce1064e4c9bcfd673323ad690e60f86e1ab907bb)\n\n- gh-119521: Use `PyAPI_DATA`, not `extern`, for `_PyExc_IncompleteInputError` (GH-120955)\n  (cherry picked from commit ac61d58db0753a3b37de21dbc6e86b38f2a93f1b)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_pyerrors.h||Include/internal/pycore_pyerrors.h",
          "Include/pyerrors.h||Include/pyerrors.h",
          "Lib/codeop.py||Lib/codeop.py",
          "Lib/test/test_pickle.py||Lib/test/test_pickle.py",
          "Lib/test/test_stable_abi_ctypes.py||Lib/test/test_stable_abi_ctypes.py",
          "Objects/exceptions.c||Objects/exceptions.c",
          "PC/python3dll.c||PC/python3dll.c",
          "Parser/pegen.c||Parser/pegen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_pyerrors.h||Include/internal/pycore_pyerrors.h": [
          "File: Include/internal/pycore_pyerrors.h -> Include/internal/pycore_pyerrors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: Py_DEPRECATED(3.12) extern void _PyErr_ChainExceptions(PyObject *, PyObject *, PyObject *);",
          "170: #ifdef __cplusplus",
          "171: }",
          "172: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172: PyAPI_DATA(PyTypeObject) _PyExc_IncompleteInputError;",
          "173: #define PyExc_IncompleteInputError ((PyObject *)(&_PyExc_IncompleteInputError))",
          "",
          "---------------"
        ],
        "Include/pyerrors.h||Include/pyerrors.h": [
          "File: Include/pyerrors.h -> Include/pyerrors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: PyAPI_DATA(PyObject *) PyExc_SyntaxError;",
          "109: PyAPI_DATA(PyObject *) PyExc_IndentationError;",
          "110: PyAPI_DATA(PyObject *) PyExc_TabError;",
          "112: PyAPI_DATA(PyObject *) PyExc_ReferenceError;",
          "113: PyAPI_DATA(PyObject *) PyExc_SystemError;",
          "114: PyAPI_DATA(PyObject *) PyExc_SystemExit;",
          "",
          "[Removed Lines]",
          "111: PyAPI_DATA(PyObject *) PyExc_IncompleteInputError;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/codeop.py||Lib/codeop.py": [
          "File: Lib/codeop.py -> Lib/codeop.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:             try:",
          "66:                 compiler(source + \"\\n\", filename, symbol)",
          "67:                 return None",
          "69:                 return None",
          "70:             except SyntaxError as e:",
          "71:                 pass",
          "",
          "[Removed Lines]",
          "68:             except IncompleteInputError as e:",
          "",
          "[Added Lines]",
          "68:             except _IncompleteInputError as e:",
          "",
          "---------------"
        ],
        "Lib/test/test_pickle.py||Lib/test/test_pickle.py": [
          "File: Lib/test/test_pickle.py -> Lib/test/test_pickle.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:                            EncodingWarning,",
          "570:                            BaseExceptionGroup,",
          "571:                            ExceptionGroup,",
          "573:                     continue",
          "574:                 if exc is not OSError and issubclass(exc, OSError):",
          "575:                     self.assertEqual(reverse_mapping('builtins', name),",
          "",
          "[Removed Lines]",
          "572:                            IncompleteInputError):",
          "",
          "[Added Lines]",
          "572:                            _IncompleteInputError):",
          "",
          "---------------"
        ],
        "Lib/test/test_stable_abi_ctypes.py||Lib/test/test_stable_abi_ctypes.py": [
          "File: Lib/test/test_stable_abi_ctypes.py -> Lib/test/test_stable_abi_ctypes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     \"PyExc_IOError\",",
          "268:     \"PyExc_ImportError\",",
          "269:     \"PyExc_ImportWarning\",",
          "271:     \"PyExc_IndentationError\",",
          "272:     \"PyExc_IndexError\",",
          "273:     \"PyExc_InterruptedError\",",
          "",
          "[Removed Lines]",
          "270:     \"PyExc_IncompleteInputError\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Objects/exceptions.c||Objects/exceptions.c": [
          "File: Objects/exceptions.c -> Objects/exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510: }; \\",
          "511: PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "515:     PyVarObject_HEAD_INIT(NULL, 0) \\",
          "517:     sizeof(Py ## EXCSTORE ## Object), \\",
          "518:     0, (destructor)EXCSTORE ## _dealloc, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\",
          "519:     0, 0, 0, 0, 0, \\",
          "",
          "[Removed Lines]",
          "513: #define MiddlingExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCDOC) \\",
          "514: static PyTypeObject _PyExc_ ## EXCNAME = { \\",
          "516:     # EXCNAME, \\",
          "",
          "[Added Lines]",
          "513: #define MiddlingExtendsExceptionEx(EXCBASE, EXCNAME, PYEXCNAME, EXCSTORE, EXCDOC) \\",
          "514: PyTypeObject _PyExc_ ## EXCNAME = { \\",
          "516:     # PYEXCNAME, \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:     (inquiry)EXCSTORE ## _clear, 0, 0, 0, 0, 0, 0, 0, &_ ## EXCBASE, \\",
          "523:     0, 0, 0, offsetof(Py ## EXCSTORE ## Object, dict), \\",
          "524:     (initproc)EXCSTORE ## _init, 0, 0, \\",
          "528: #define ComplexExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCNEW, \\",
          "529:                                 EXCMETHODS, EXCMEMBERS, EXCGETSET, \\",
          "",
          "[Removed Lines]",
          "525: }; \\",
          "526: PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "",
          "[Added Lines]",
          "525: };",
          "527: #define MiddlingExtendsException(EXCBASE, EXCNAME, EXCSTORE, EXCDOC) \\",
          "528:     static MiddlingExtendsExceptionEx( \\",
          "529:         EXCBASE, EXCNAME, EXCNAME, EXCSTORE, EXCDOC); \\",
          "530:     PyObject *PyExc_ ## EXCNAME = (PyObject *)&_PyExc_ ## EXCNAME",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2576: MiddlingExtendsException(PyExc_SyntaxError, IncompleteInputError, SyntaxError,",
          "2577:                          \"incomplete input.\");",
          "",
          "[Added Lines]",
          "2580: MiddlingExtendsExceptionEx(PyExc_SyntaxError, IncompleteInputError, _IncompleteInputError,",
          "2581:                            SyntaxError, \"incomplete input.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3642:     ITEM(IndentationError), // base: SyntaxError(Exception)",
          "3644:     ITEM(IndexError),  // base: LookupError(Exception)",
          "3645:     ITEM(KeyError),  // base: LookupError(Exception)",
          "3646:     ITEM(ModuleNotFoundError), // base: ImportError(Exception)",
          "",
          "[Removed Lines]",
          "3643:     ITEM(IncompleteInputError), // base: SyntaxError(Exception)",
          "",
          "[Added Lines]",
          "3647:     {&_PyExc_IncompleteInputError, \"_IncompleteInputError\"}, // base: SyntaxError(Exception)",
          "",
          "---------------"
        ],
        "PC/python3dll.c||PC/python3dll.c": [
          "File: PC/python3dll.c -> PC/python3dll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839: EXPORT_DATA(PyExc_GeneratorExit)",
          "840: EXPORT_DATA(PyExc_ImportError)",
          "841: EXPORT_DATA(PyExc_ImportWarning)",
          "843: EXPORT_DATA(PyExc_IndentationError)",
          "844: EXPORT_DATA(PyExc_IndexError)",
          "845: EXPORT_DATA(PyExc_InterruptedError)",
          "",
          "[Removed Lines]",
          "842: EXPORT_DATA(PyExc_IncompleteInputError)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Parser/pegen.c||Parser/pegen.c": [
          "File: Parser/pegen.c -> Parser/pegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <Python.h>",
          "2: #include \"pycore_ast.h\"           // _PyAST_Validate(),",
          "3: #include \"pycore_pystate.h\"       // _PyThreadState_GET()",
          "4: #include <errcode.h>",
          "6: #include \"lexer/lexer.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"pycore_pyerrors.h\"      // PyExc_IncompleteInputError",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8fd80f91b980598cb378dba224cdb595b132fb4",
      "candidate_info": {
        "commit_hash": "b8fd80f91b980598cb378dba224cdb595b132fb4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b8fd80f91b980598cb378dba224cdb595b132fb4",
        "files": [
          "Doc/c-api/typeobj.rst",
          "Include/object.h",
          "Lib/test/test_type_cache.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-19-11-10-50.gh-issue-119462.DpcqSe.rst",
          "Modules/_testcapimodule.c",
          "Modules/pyexpat.c",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] GH-119462: Enforce invariants of type versioning. Backport of GH-120731. (#120748)\n\n* Remove uses of Py_TPFLAGS_VALID_VERSION_TAG",
        "before_after_code_files": [
          "Include/object.h||Include/object.h",
          "Lib/test/test_type_cache.py||Lib/test/test_type_cache.py",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Modules/pyexpat.c||Modules/pyexpat.c",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/object.h||Include/object.h": [
          "File: Include/object.h -> Include/object.h"
        ],
        "Lib/test/test_type_cache.py||Lib/test/test_type_cache.py": [
          "File: Lib/test/test_type_cache.py -> Lib/test/test_type_cache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         new_version = type_get_version(C)",
          "93:         self.assertEqual(new_version, 0)",
          "96: @support.cpython_only",
          "97: @requires_specialization",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     def test_119462(self):",
          "97:         class Holder:",
          "98:             value = None",
          "100:             @classmethod",
          "101:             def set_value(cls):",
          "102:                 cls.value = object()",
          "104:         class HolderSub(Holder):",
          "105:             pass",
          "107:         for _ in range(1050):",
          "108:             Holder.set_value()",
          "109:             HolderSub.value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         if type_get_version(type_) == 0:",
          "106:             self.skipTest(\"Could not assign valid type version\")",
          "109:         type_modified(user_type)",
          "110:         type_assign_specific_version_unsafe(user_type, 0)",
          "111:         self.assertEqual(type_get_version(user_type), 0)",
          "",
          "[Removed Lines]",
          "108:     def _assign_and_check_version_0(self, user_type):",
          "",
          "[Added Lines]",
          "123:     def _no_more_versions(self, user_type):",
          "125:         for _ in range(1001):",
          "126:             type_assign_specific_version_unsafe(user_type, 1000_000_000)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:         self._check_specialization(load_foo_1, A, \"LOAD_ATTR\", should_specialize=True)",
          "136:         del load_foo_1",
          "140:         def load_foo_2(type_):",
          "141:             return type_.foo",
          "",
          "[Removed Lines]",
          "138:         self._assign_and_check_version_0(A)",
          "",
          "[Added Lines]",
          "155:         self._no_more_versions(A)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:         self._check_specialization(load_x_1, G(), \"LOAD_ATTR\", should_specialize=True)",
          "187:         del load_x_1",
          "191:         def load_x_2(instance):",
          "192:             instance.x",
          "",
          "[Removed Lines]",
          "189:         self._assign_and_check_version_0(G)",
          "",
          "[Added Lines]",
          "206:         self._no_more_versions(G)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:         self._check_specialization(store_bar_1, B(), \"STORE_ATTR\", should_specialize=True)",
          "206:         del store_bar_1",
          "210:         def store_bar_2(type_):",
          "211:             type_.bar = 10",
          "",
          "[Removed Lines]",
          "208:         self._assign_and_check_version_0(B)",
          "",
          "[Added Lines]",
          "225:         self._no_more_versions(B)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "225:         self._check_specialization(call_class_1, F, \"CALL\", should_specialize=True)",
          "226:         del call_class_1",
          "230:         def call_class_2(type_):",
          "231:             type_()",
          "",
          "[Removed Lines]",
          "228:         self._assign_and_check_version_0(F)",
          "",
          "[Added Lines]",
          "245:         self._no_more_versions(F)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "244:         self._check_specialization(to_bool_1, H(), \"TO_BOOL\", should_specialize=True)",
          "245:         del to_bool_1",
          "249:         def to_bool_2(instance):",
          "250:             not instance",
          "",
          "[Removed Lines]",
          "247:         self._assign_and_check_version_0(H)",
          "",
          "[Added Lines]",
          "264:         self._no_more_versions(H)",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2415:     }",
          "2416:     assert(!PyType_HasFeature(type, Py_TPFLAGS_IMMUTABLETYPE));",
          "2417:     type->tp_version_tag = version;",
          "2419:     Py_RETURN_NONE;",
          "2420: }",
          "",
          "[Removed Lines]",
          "2418:     type->tp_flags |= Py_TPFLAGS_VALID_VERSION_TAG;",
          "",
          "[Added Lines]",
          "2418:     type->tp_versions_used++;",
          "",
          "---------------"
        ],
        "Modules/pyexpat.c||Modules/pyexpat.c": [
          "File: Modules/pyexpat.c -> Modules/pyexpat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1651: static int init_handler_descrs(pyexpat_state *state)",
          "1652: {",
          "1653:     int i;",
          "1655:     for (i = 0; handler_info[i].name != NULL; i++) {",
          "1656:         struct HandlerInfo *hi = &handler_info[i];",
          "1657:         hi->getset.name = hi->name;",
          "",
          "[Removed Lines]",
          "1654:     assert(!PyType_HasFeature(state->xml_parse_type, Py_TPFLAGS_VALID_VERSION_TAG));",
          "",
          "[Added Lines]",
          "1654:     assert(state->xml_parse_type->tp_version_tag == 0);",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     return 0;",
          "974: }",
          "978: static void",
          "980: {",
          "981:     ASSERT_TYPE_LOCK_HELD();",
          "990:     }",
          "1006:     }",
          "1012: #endif",
          "1014: static void",
          "1015: type_modified_unlocked(PyTypeObject *type)",
          "",
          "[Removed Lines]",
          "976: #ifdef Py_GIL_DISABLED",
          "979: type_modification_starting_unlocked(PyTypeObject *type)",
          "984:        version tag intact.  This prepares for a modification so that",
          "985:        any concurrent readers of the type cache will not see invalid",
          "986:        values.",
          "988:     if (!_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG)) {",
          "989:         return;",
          "992:     PyObject *subclasses = lookup_tp_subclasses(type);",
          "993:     if (subclasses != NULL) {",
          "994:         assert(PyDict_CheckExact(subclasses));",
          "996:         Py_ssize_t i = 0;",
          "997:         PyObject *ref;",
          "998:         while (PyDict_Next(subclasses, &i, NULL, &ref)) {",
          "999:             PyTypeObject *subclass = type_from_ref(ref);",
          "1000:             if (subclass == NULL) {",
          "1001:                 continue;",
          "1002:             }",
          "1003:             type_modification_starting_unlocked(subclass);",
          "1004:             Py_DECREF(subclass);",
          "1005:         }",
          "1009:     _Py_atomic_store_uint32_release(&type->tp_version_tag, 0);",
          "1010: }",
          "",
          "[Added Lines]",
          "977: set_version_unlocked(PyTypeObject *tp, unsigned int version)",
          "980: #ifndef Py_GIL_DISABLED",
          "981:     if (version) {",
          "982:         tp->tp_versions_used++;",
          "984: #else",
          "985:     if (version) {",
          "986:         _Py_atomic_add_uint16(&tp->tp_versions_used, 1);",
          "989:     FT_ATOMIC_STORE_UINT32_RELAXED(tp->tp_version_tag, version);",
          "990: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1021:        Invariants:",
          "1024:          it must first be set on all super types.",
          "1027:        type (so it must first clear it on all subclasses).  The",
          "1029:        We don't assign new version tags eagerly, but only as",
          "1030:        needed.",
          "1033:         return;",
          "1034:     }",
          "",
          "[Removed Lines]",
          "1023:        - before Py_TPFLAGS_VALID_VERSION_TAG can be set on a type,",
          "1026:        This function clears the Py_TPFLAGS_VALID_VERSION_TAG of a",
          "1028:        tp_version_tag value is meaningless unless this flag is set.",
          "1032:     if (!_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG)) {",
          "",
          "[Added Lines]",
          "1001:        - before tp_version_tag can be set on a type,",
          "1004:        This function clears the tp_version_tag of a",
          "1006:        tp_version_tag value is meaningless when equal to zero.",
          "1010:     if (type->tp_version_tag == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1069:         }",
          "1070:     }",
          "1074:     if (PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE)) {",
          "",
          "[Removed Lines]",
          "1072:     type->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1082: PyType_Modified(PyTypeObject *type)",
          "1083: {",
          "1086:         return;",
          "1087:     }",
          "",
          "[Removed Lines]",
          "1085:     if (!_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG)) {",
          "",
          "[Added Lines]",
          "1062:     if (type->tp_version_tag == 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1147:  clear:",
          "1148:     assert(!(type->tp_flags & _Py_TPFLAGS_STATIC_BUILTIN));",
          "1151:     if (PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE)) {",
          "",
          "[Removed Lines]",
          "1149:     type->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1162: {",
          "1163:     ASSERT_TYPE_LOCK_HELD();",
          "1171:         return 1;",
          "1172:     }",
          "1173:     if (!_PyType_HasFeature(type, Py_TPFLAGS_READY)) {",
          "",
          "[Removed Lines]",
          "1166:        Py_TPFLAGS_VALID_VERSION_TAG.  To respect the invariant, this",
          "1167:        must first be done on all super classes.  Return 0 if this",
          "1168:        cannot be done, 1 if Py_TPFLAGS_VALID_VERSION_TAG.",
          "1170:     if (_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG)) {",
          "",
          "[Added Lines]",
          "1145:     if (type->tp_version_tag != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1176:     if (type->tp_versions_used >= MAX_VERSIONS_PER_CLASS) {",
          "1177:         return 0;",
          "1178:     }",
          "1180:     if (type->tp_flags & Py_TPFLAGS_IMMUTABLETYPE) {",
          "1182:         if (NEXT_GLOBAL_VERSION_TAG > _Py_MAX_GLOBAL_TYPE_VERSION_TAG) {",
          "1184:             return 0;",
          "1185:         }",
          "1188:         assert (type->tp_version_tag <= _Py_MAX_GLOBAL_TYPE_VERSION_TAG);",
          "1189:     }",
          "1190:     else {",
          "",
          "[Removed Lines]",
          "1179:     type->tp_versions_used++;",
          "1186:         FT_ATOMIC_STORE_UINT32_RELAXED(type->tp_version_tag,",
          "1187:                                        NEXT_GLOBAL_VERSION_TAG++);",
          "",
          "[Added Lines]",
          "1155:     PyObject *bases = lookup_tp_bases(type);",
          "1156:     Py_ssize_t n = PyTuple_GET_SIZE(bases);",
          "1157:     for (Py_ssize_t i = 0; i < n; i++) {",
          "1158:         PyObject *b = PyTuple_GET_ITEM(bases, i);",
          "1159:         if (!assign_version_tag(interp, _PyType_CAST(b))) {",
          "1160:             return 0;",
          "1161:         }",
          "1162:     }",
          "1169:         set_version_unlocked(type, NEXT_GLOBAL_VERSION_TAG++);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1194:             return 0;",
          "1195:         }",
          "1198:         assert (type->tp_version_tag != 0);",
          "1199:     }",
          "1209:     return 1;",
          "1210: }",
          "",
          "[Removed Lines]",
          "1196:         FT_ATOMIC_STORE_UINT32_RELAXED(type->tp_version_tag,",
          "1197:                                        NEXT_VERSION_TAG(interp)++);",
          "1201:     PyObject *bases = lookup_tp_bases(type);",
          "1202:     Py_ssize_t n = PyTuple_GET_SIZE(bases);",
          "1203:     for (Py_ssize_t i = 0; i < n; i++) {",
          "1204:         PyObject *b = PyTuple_GET_ITEM(bases, i);",
          "1205:         if (!assign_version_tag(interp, _PyType_CAST(b)))",
          "1206:             return 0;",
          "1207:     }",
          "1208:     type->tp_flags |= Py_TPFLAGS_VALID_VERSION_TAG;",
          "",
          "[Added Lines]",
          "1178:         set_version_unlocked(type, NEXT_VERSION_TAG(interp)++);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3126:     else {",
          "3130:     }",
          "3132:     if (p_old_mro != NULL)",
          "",
          "[Removed Lines]",
          "3129:         assert(_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG));",
          "",
          "[Added Lines]",
          "3101:         assert(type->tp_version_tag);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5275: #else",
          "5276:     if (entry->version == type->tp_version_tag &&",
          "5277:         entry->name == name) {",
          "5279:         OBJECT_STAT_INC_COND(type_cache_hits, !is_dunder_name(name));",
          "5280:         OBJECT_STAT_INC_COND(type_cache_dunder_hits, is_dunder_name(name));",
          "5281:         Py_XINCREF(entry->value);",
          "",
          "[Removed Lines]",
          "5278:         assert(_PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG));",
          "",
          "[Added Lines]",
          "5250:         assert(type->tp_version_tag);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5298:     if (MCACHE_CACHEABLE_NAME(name)) {",
          "5299:         has_version = assign_version_tag(interp, type);",
          "5300:         version = type->tp_version_tag;",
          "5302:     }",
          "5303:     END_TYPE_LOCK()",
          "",
          "[Removed Lines]",
          "5301:         assert(!has_version || _PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5582:         return -1;",
          "5583:     }",
          "5596:         subclasses.  This could possibly be unified with the",
          "5597:         update_subclasses() recursion in update_slot(), but carefully:",
          "",
          "[Removed Lines]",
          "5585: #ifdef Py_GIL_DISABLED",
          "5590:     type_modification_starting_unlocked(type);",
          "5591: #endif",
          "5593:     res = _PyDict_SetItem_LockHeld((PyDictObject *)dict, name, value);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5600:     type_modified_unlocked(type);",
          "5602:     if (res == 0) {",
          "5603:         if (is_dunder_name(name)) {",
          "5604:             res = update_slot(type, name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5563:     res = _PyDict_SetItem_LockHeld((PyDictObject *)dict, name, value);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5711:     if (final) {",
          "5712:         type->tp_flags &= ~Py_TPFLAGS_READY;",
          "5714:         type->tp_version_tag = 0;",
          "5715:     }",
          "",
          "[Removed Lines]",
          "5713:         type->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8330:         assert(NEXT_GLOBAL_VERSION_TAG <= _Py_MAX_GLOBAL_TYPE_VERSION_TAG);",
          "8331:         self->tp_version_tag = NEXT_GLOBAL_VERSION_TAG++;",
          "8333:     }",
          "8334:     else {",
          "8335:         assert(!initial);",
          "8336:         assert(self->tp_flags & _Py_TPFLAGS_STATIC_BUILTIN);",
          "8338:     }",
          "8340:     managed_static_type_state_init(interp, self, isbuiltin, initial);",
          "",
          "[Removed Lines]",
          "8332:         self->tp_flags |= Py_TPFLAGS_VALID_VERSION_TAG;",
          "8337:         assert(self->tp_flags & Py_TPFLAGS_VALID_VERSION_TAG);",
          "",
          "[Added Lines]",
          "8298:         assert(self->tp_version_tag != 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "660125f864aa533b68a6ccbe11e35f0353388d56",
      "candidate_info": {
        "commit_hash": "660125f864aa533b68a6ccbe11e35f0353388d56",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/660125f864aa533b68a6ccbe11e35f0353388d56",
        "files": [
          "Lib/test/test_import/__init__.py",
          "Modules/_testsinglephase.c",
          "Python/import.c"
        ],
        "message": "[3.13] gh-119584: Fix test_import Failed Assertion (gh-119623) (gh-119633)\n\nThe fix in gh-119561 introduced an assertion that doesn't hold true if any of the three new test extension modules are loaded more than once.  This is fine normally but breaks if the new test_check_state_first() is run more than once, which happens for refleak checking and with the regrtest --forever flag.  We fix that here by clearing each of the three modules after loading them.  We also tweak a check in _modules_by_index_check().\n\n(cherry picked from commit ae7b17673f29efe17b416cbcfbf43b5b3ff5977c)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_import/__init__.py||Lib/test/test_import/__init__.py",
          "Modules/_testsinglephase.c||Modules/_testsinglephase.c",
          "Python/import.c||Python/import.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_import/__init__.py||Lib/test/test_import/__init__.py": [
          "File: Lib/test/test_import/__init__.py -> Lib/test/test_import/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2888:                 self.assertIs(reloaded.snapshot.cached, reloaded.module)",
          "2890:     def test_check_state_first(self):",
          "2891:         for variant in ['', '_with_reinit', '_with_state']:",
          "2892:             name = f'{self.NAME}{variant}_check_cache_first'",
          "2893:             with self.subTest(name):",
          "2894:                 mod = self._load_dynamic(name, self.ORIGIN)",
          "2895:                 self.assertEqual(mod.__name__, name)",
          "2897:     # Currently, for every single-phrase init module loaded",
          "2898:     # in multiple interpreters, those interpreters share a",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2890:     @unittest.skipIf(_testinternalcapi is None, \"requires _testinternalcapi\")",
          "2897:                 sys.modules.pop(name, None)",
          "2898:                 _testinternalcapi.clear_extension(name, self.ORIGIN)",
          "",
          "---------------"
        ],
        "Modules/_testsinglephase.c||Modules/_testsinglephase.c": [
          "File: Modules/_testsinglephase.c -> Modules/_testsinglephase.c"
        ],
        "Python/import.c||Python/import.c": [
          "File: Python/import.c -> Python/import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     if (MODULES_BY_INDEX(interp) == NULL) {",
          "495:         return \"Interpreters module-list not accessible.\";",
          "496:     }",
          "498:         return \"Module index out of bounds.\";",
          "499:     }",
          "500:     return NULL;",
          "",
          "[Removed Lines]",
          "497:     if (index > PyList_GET_SIZE(MODULES_BY_INDEX(interp))) {",
          "",
          "[Added Lines]",
          "497:     if (index >= PyList_GET_SIZE(MODULES_BY_INDEX(interp))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2184:     def->m_base.m_init = NULL;",
          "2185:     Py_CLEAR(def->m_base.m_copy);",
          "2189:     Py_ssize_t index = _get_cached_module_index(cached);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2186:     def->m_base.m_index = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14ff4c979c8564376707de4b5a84dd3e4fcb5d1d",
      "candidate_info": {
        "commit_hash": "14ff4c979c8564376707de4b5a84dd3e4fcb5d1d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/14ff4c979c8564376707de4b5a84dd3e4fcb5d1d",
        "files": [
          "Modules/_zoneinfo.c"
        ],
        "message": "[3.13] gh-120155: Fix Coverity issue in zoneinfo load_data() (GH-120232) (#120310)\n\ngh-120155: Fix Coverity issue in zoneinfo load_data() (GH-120232)\n\nDeclare the 'rv' varaible at the top of the load_data() function to\nmake sure that it's initialized before the first 'goto error' which\nuses 'rv' (return rv).\n\nFix the Coverity issue:\n\nError: UNINIT (CWE-457):\nPython-3.12.2/Modules/_zoneinfo.c:1233:5: skipped_decl: Jumping over declaration of \"\"rv\"\".\nPython-3.12.2/Modules/_zoneinfo.c:1284:5: uninit_use: Using uninitialized value \"\"rv\"\".\n  1282|       }\n  1283|\n  1284|->     return rv;\n  1285|   }\n  1286|\n(cherry picked from commit b90bd3e5bbc136f53b24ee791824acd6b17e0d42)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Modules/_zoneinfo.c||Modules/_zoneinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_zoneinfo.c||Modules/_zoneinfo.c": [
          "File: Modules/_zoneinfo.c -> Modules/_zoneinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944: static int",
          "945: load_data(zoneinfo_state *state, PyZoneInfo_ZoneInfo *self, PyObject *file_obj)",
          "946: {",
          "947:     PyObject *data_tuple = NULL;",
          "949:     long *utcoff = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947:     int rv = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1220:         }",
          "1221:     }",
          "1224:     goto cleanup;",
          "1225: error:",
          "",
          "[Removed Lines]",
          "1223:     int rv = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f81915cf59389b4ac03972561b53ea2b662696f",
      "candidate_info": {
        "commit_hash": "4f81915cf59389b4ac03972561b53ea2b662696f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4f81915cf59389b4ac03972561b53ea2b662696f",
        "files": [
          "Lib/tkinter/__init__.py",
          "Misc/NEWS.d/next/Library/2024-05-08-21-13-56.gh-issue-118760.mdmH3T.rst"
        ],
        "message": "[3.13] gh-118760: Fix errors in calling Tkinter bindings on Windows (GH-118782) (GH-119072)\n\nFor unknown reasons some arguments for Tkinter binding can be created\nas a 1-tuple containing a Tcl_Obj when wantobjects is 2.\n(cherry picked from commit 5b88d95cc542cf02303c6fe0e8719a93544decdb)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py": [
          "File: Lib/tkinter/__init__.py -> Lib/tkinter/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1727:             except (ValueError, TclError):",
          "1728:                 return s",
          "1730:         nsign, b, f, h, k, s, t, w, x, y, A, E, K, N, W, T, X, Y, D = args",
          "1731:         # Missing: (a, c, d, m, o, v, B, R)",
          "1732:         e = Event()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1730:         if any(isinstance(s, tuple) for s in args):",
          "1731:             args = [s[0] if isinstance(s, tuple) and len(s) == 1 else s",
          "1732:                     for s in args]",
          "",
          "---------------"
        ]
      }
    }
  ]
}