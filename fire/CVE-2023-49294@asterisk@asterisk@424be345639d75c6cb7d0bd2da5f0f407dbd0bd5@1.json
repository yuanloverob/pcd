{
  "cve_id": "CVE-2023-49294",
  "cve_desc": "Asterisk is an open source private branch exchange and telephony toolkit. In Asterisk prior to versions 18.20.1, 20.5.1, and 21.0.1, as well as certified-asterisk prior to 18.9-cert6, it is possible to read any arbitrary file even when the `live_dangerously` is not enabled. This allows arbitrary files to be read. Asterisk versions 18.20.1, 20.5.1, and 21.0.1, as well as certified-asterisk prior to 18.9-cert6, contain a fix for this issue.",
  "repo": "asterisk/asterisk",
  "patch_hash": "424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
  "patch_info": {
    "commit_hash": "424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
    "repo": "asterisk/asterisk",
    "commit_url": "https://github.com/asterisk/asterisk/commit/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
    "files": [
      "main/manager.c"
    ],
    "message": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
    "before_after_code_files": [
      "main/manager.c||main/manager.c"
    ]
  },
  "patch_diff": {
    "main/manager.c||main/manager.c": [
      "File: main/manager.c -> main/manager.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3752:  live_dangerously = new_live_dangerously;",
      "3753: }",
      "3755: static int restrictedFile(const char *filename)",
      "3756: {",
      "3759:   return 1;",
      "3760:  }",
      "3761:  return 0;",
      "3762: }",
      "",
      "[Removed Lines]",
      "3757:  if (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
      "3758:    strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {",
      "",
      "[Added Lines]",
      "3764:  char *stripped_filename;",
      "3765:  RAII_VAR(char *, path, NULL, ast_free);",
      "3766:  RAII_VAR(char *, real_path, NULL, ast_free);",
      "3768:  if (live_dangerously) {",
      "3769:   return 0;",
      "3770:  }",
      "3772:  stripped_filename = ast_strip(ast_strdupa(filename));",
      "3775:  if (stripped_filename[0] == '/') {",
      "3776:   real_path = realpath(stripped_filename, NULL);",
      "3777:  } else {",
      "3778:   if (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
      "3779:    return -1;",
      "3780:   }",
      "3781:   real_path = realpath(path, NULL);",
      "3782:  }",
      "3784:  if (!real_path) {",
      "3785:   return -1;",
      "3786:  }",
      "3788:  if (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3770:  const char *category_name;",
      "3771:  int catcount = 0;",
      "3772:  int lineno = 0;",
      "3773:  struct ast_category *cur_category = NULL;",
      "3774:  struct ast_variable *v;",
      "3775:  struct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3804:  int ret = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3779:   return 0;",
      "3780:  }",
      "3783:   astman_send_error(s, m, \"File requires escalated priveledges\");",
      "3784:   return 0;",
      "3785:  }",
      "3787:  cfg = ast_config_load2(fn, \"manager\", config_flags);",
      "",
      "[Removed Lines]",
      "3782:  if (restrictedFile(fn)) {",
      "",
      "[Added Lines]",
      "3814:  ret = restrictedFile(fn);",
      "3815:  if (ret == 1) {",
      "3818:  } else if (ret == -1) {",
      "3819:   astman_send_error(s, m, \"Config file not found\");",
      "3820:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77876a5bf49e09cb0c5bc829c4399c9464445afa",
      "candidate_info": {
        "commit_hash": "77876a5bf49e09cb0c5bc829c4399c9464445afa",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/77876a5bf49e09cb0c5bc829c4399c9464445afa",
        "files": [
          "main/manager.c"
        ],
        "message": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
        "before_after_code_files": [
          "main/manager.c||main/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "main/manager.c||main/manager.c"
          ],
          "candidate": [
            "main/manager.c||main/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "main/manager.c||main/manager.c": [
          "File: main/manager.c -> main/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:  live_dangerously = new_live_dangerously;",
          "3753: }",
          "3755: static int restrictedFile(const char *filename)",
          "3756: {",
          "3759:   return 1;",
          "3760:  }",
          "3761:  return 0;",
          "3762: }",
          "",
          "[Removed Lines]",
          "3757:  if (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
          "3758:    strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {",
          "",
          "[Added Lines]",
          "3764:  char *stripped_filename;",
          "3765:  RAII_VAR(char *, path, NULL, ast_free);",
          "3766:  RAII_VAR(char *, real_path, NULL, ast_free);",
          "3768:  if (live_dangerously) {",
          "3769:   return 0;",
          "3770:  }",
          "3772:  stripped_filename = ast_strip(ast_strdupa(filename));",
          "3775:  if (stripped_filename[0] == '/') {",
          "3776:   real_path = realpath(stripped_filename, NULL);",
          "3777:  } else {",
          "3778:   if (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
          "3779:    return -1;",
          "3780:   }",
          "3781:   real_path = realpath(path, NULL);",
          "3782:  }",
          "3784:  if (!real_path) {",
          "3785:   return -1;",
          "3786:  }",
          "3788:  if (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3770:  const char *category_name;",
          "3771:  int catcount = 0;",
          "3772:  int lineno = 0;",
          "3773:  struct ast_category *cur_category = NULL;",
          "3774:  struct ast_variable *v;",
          "3775:  struct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3804:  int ret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3779:   return 0;",
          "3780:  }",
          "3783:   astman_send_error(s, m, \"File requires escalated priveledges\");",
          "3784:   return 0;",
          "3785:  }",
          "3787:  cfg = ast_config_load2(fn, \"manager\", config_flags);",
          "",
          "[Removed Lines]",
          "3782:  if (restrictedFile(fn)) {",
          "",
          "[Added Lines]",
          "3814:  ret = restrictedFile(fn);",
          "3815:  if (ret == 1) {",
          "3818:  } else if (ret == -1) {",
          "3819:   astman_send_error(s, m, \"Config file not found\");",
          "3820:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f015af774dd0965a00c4b34e247bfb9c2abf05d",
      "candidate_info": {
        "commit_hash": "8f015af774dd0965a00c4b34e247bfb9c2abf05d",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/8f015af774dd0965a00c4b34e247bfb9c2abf05d",
        "files": [
          "main/manager.c"
        ],
        "message": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
        "before_after_code_files": [
          "main/manager.c||main/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "main/manager.c||main/manager.c"
          ],
          "candidate": [
            "main/manager.c||main/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "main/manager.c||main/manager.c": [
          "File: main/manager.c -> main/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:  live_dangerously = new_live_dangerously;",
          "3753: }",
          "3755: static int restrictedFile(const char *filename)",
          "3756: {",
          "3759:   return 1;",
          "3760:  }",
          "3761:  return 0;",
          "3762: }",
          "",
          "[Removed Lines]",
          "3757:  if (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
          "3758:    strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {",
          "",
          "[Added Lines]",
          "3764:  char *stripped_filename;",
          "3765:  RAII_VAR(char *, path, NULL, ast_free);",
          "3766:  RAII_VAR(char *, real_path, NULL, ast_free);",
          "3768:  if (live_dangerously) {",
          "3769:   return 0;",
          "3770:  }",
          "3772:  stripped_filename = ast_strip(ast_strdupa(filename));",
          "3775:  if (stripped_filename[0] == '/') {",
          "3776:   real_path = realpath(stripped_filename, NULL);",
          "3777:  } else {",
          "3778:   if (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
          "3779:    return -1;",
          "3780:   }",
          "3781:   real_path = realpath(path, NULL);",
          "3782:  }",
          "3784:  if (!real_path) {",
          "3785:   return -1;",
          "3786:  }",
          "3788:  if (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3770:  const char *category_name;",
          "3771:  int catcount = 0;",
          "3772:  int lineno = 0;",
          "3773:  struct ast_category *cur_category = NULL;",
          "3774:  struct ast_variable *v;",
          "3775:  struct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3804:  int ret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3779:   return 0;",
          "3780:  }",
          "3783:   astman_send_error(s, m, \"File requires escalated priveledges\");",
          "3784:   return 0;",
          "3785:  }",
          "3787:  cfg = ast_config_load2(fn, \"manager\", config_flags);",
          "",
          "[Removed Lines]",
          "3782:  if (restrictedFile(fn)) {",
          "",
          "[Added Lines]",
          "3814:  ret = restrictedFile(fn);",
          "3815:  if (ret == 1) {",
          "3818:  } else if (ret == -1) {",
          "3819:   astman_send_error(s, m, \"Config file not found\");",
          "3820:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce4f512bb7c4f836af9359587d427d5a470de76c",
      "candidate_info": {
        "commit_hash": "ce4f512bb7c4f836af9359587d427d5a470de76c",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/ce4f512bb7c4f836af9359587d427d5a470de76c",
        "files": [
          "main/manager.c"
        ],
        "message": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
        "before_after_code_files": [
          "main/manager.c||main/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "main/manager.c||main/manager.c"
          ],
          "candidate": [
            "main/manager.c||main/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "main/manager.c||main/manager.c": [
          "File: main/manager.c -> main/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:  live_dangerously = new_live_dangerously;",
          "3753: }",
          "3755: static int restrictedFile(const char *filename)",
          "3756: {",
          "3759:   return 1;",
          "3760:  }",
          "3761:  return 0;",
          "3762: }",
          "",
          "[Removed Lines]",
          "3757:  if (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
          "3758:    strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {",
          "",
          "[Added Lines]",
          "3764:  char *stripped_filename;",
          "3765:  RAII_VAR(char *, path, NULL, ast_free);",
          "3766:  RAII_VAR(char *, real_path, NULL, ast_free);",
          "3768:  if (live_dangerously) {",
          "3769:   return 0;",
          "3770:  }",
          "3772:  stripped_filename = ast_strip(ast_strdupa(filename));",
          "3775:  if (stripped_filename[0] == '/') {",
          "3776:   real_path = realpath(stripped_filename, NULL);",
          "3777:  } else {",
          "3778:   if (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
          "3779:    return -1;",
          "3780:   }",
          "3781:   real_path = realpath(path, NULL);",
          "3782:  }",
          "3784:  if (!real_path) {",
          "3785:   return -1;",
          "3786:  }",
          "3788:  if (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3770:  const char *category_name;",
          "3771:  int catcount = 0;",
          "3772:  int lineno = 0;",
          "3773:  struct ast_category *cur_category = NULL;",
          "3774:  struct ast_variable *v;",
          "3775:  struct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3804:  int ret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3779:   return 0;",
          "3780:  }",
          "3783:   astman_send_error(s, m, \"File requires escalated priveledges\");",
          "3784:   return 0;",
          "3785:  }",
          "3787:  cfg = ast_config_load2(fn, \"manager\", config_flags);",
          "",
          "[Removed Lines]",
          "3782:  if (restrictedFile(fn)) {",
          "",
          "[Added Lines]",
          "3814:  ret = restrictedFile(fn);",
          "3815:  if (ret == 1) {",
          "3818:  } else if (ret == -1) {",
          "3819:   astman_send_error(s, m, \"Config file not found\");",
          "3820:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b05d7e890153cf35737bc7f1efe3d298ca3e6b4b",
      "candidate_info": {
        "commit_hash": "b05d7e890153cf35737bc7f1efe3d298ca3e6b4b",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/b05d7e890153cf35737bc7f1efe3d298ca3e6b4b",
        "files": [
          "main/manager.c"
        ],
        "message": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
        "before_after_code_files": [
          "main/manager.c||main/manager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "main/manager.c||main/manager.c"
          ],
          "candidate": [
            "main/manager.c||main/manager.c"
          ]
        }
      },
      "candidate_diff": {
        "main/manager.c||main/manager.c": [
          "File: main/manager.c -> main/manager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:  live_dangerously = new_live_dangerously;",
          "3753: }",
          "3755: static int restrictedFile(const char *filename)",
          "3756: {",
          "3759:   return 1;",
          "3760:  }",
          "3761:  return 0;",
          "3762: }",
          "",
          "[Removed Lines]",
          "3757:  if (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
          "3758:    strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {",
          "",
          "[Added Lines]",
          "3764:  char *stripped_filename;",
          "3765:  RAII_VAR(char *, path, NULL, ast_free);",
          "3766:  RAII_VAR(char *, real_path, NULL, ast_free);",
          "3768:  if (live_dangerously) {",
          "3769:   return 0;",
          "3770:  }",
          "3772:  stripped_filename = ast_strip(ast_strdupa(filename));",
          "3775:  if (stripped_filename[0] == '/') {",
          "3776:   real_path = realpath(stripped_filename, NULL);",
          "3777:  } else {",
          "3778:   if (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
          "3779:    return -1;",
          "3780:   }",
          "3781:   real_path = realpath(path, NULL);",
          "3782:  }",
          "3784:  if (!real_path) {",
          "3785:   return -1;",
          "3786:  }",
          "3788:  if (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3770:  const char *category_name;",
          "3771:  int catcount = 0;",
          "3772:  int lineno = 0;",
          "3773:  struct ast_category *cur_category = NULL;",
          "3774:  struct ast_variable *v;",
          "3775:  struct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3804:  int ret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3779:   return 0;",
          "3780:  }",
          "3783:   astman_send_error(s, m, \"File requires escalated priveledges\");",
          "3784:   return 0;",
          "3785:  }",
          "3787:  cfg = ast_config_load2(fn, \"manager\", config_flags);",
          "",
          "[Removed Lines]",
          "3782:  if (restrictedFile(fn)) {",
          "",
          "[Added Lines]",
          "3814:  ret = restrictedFile(fn);",
          "3815:  if (ret == 1) {",
          "3818:  } else if (ret == -1) {",
          "3819:   astman_send_error(s, m, \"Config file not found\");",
          "3820:   return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}