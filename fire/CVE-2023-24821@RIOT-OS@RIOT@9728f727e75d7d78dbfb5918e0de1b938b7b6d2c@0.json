{
  "cve_id": "CVE-2023-24821",
  "cve_desc": "RIOT-OS, an operating system that supports Internet of Things devices, contains a network stack with the ability to process 6LoWPAN frames. Prior to version 2022.10, an attacker can send a crafted frame to the device resulting in a large out of bounds write beyond the packet buffer. The write will create a hard fault exception after reaching the last page of RAM. The hard fault is not handled and the system will be stuck until reset, thus the impact is denial of service. Version 2022.10 fixes this issue. As a workaround, disable support for fragmented IP datagrams or apply the patches manually.",
  "repo": "RIOT-OS/RIOT",
  "patch_hash": "9728f727e75d7d78dbfb5918e0de1b938b7b6d2c",
  "patch_info": {
    "commit_hash": "9728f727e75d7d78dbfb5918e0de1b938b7b6d2c",
    "repo": "RIOT-OS/RIOT",
    "commit_url": "https://github.com/RIOT-OS/RIOT/commit/9728f727e75d7d78dbfb5918e0de1b938b7b6d2c",
    "files": [
      "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
    ],
    "message": "gnrc_sixlowpan_frag_rb: fix integer underflow in _6lo_frag_size()",
    "before_after_code_files": [
      "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
    ]
  },
  "patch_diff": {
    "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c": [
      "File: sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c -> sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:     size_t frag_size;",
      "238:     if (offset == 0) {",
      "239:         frag_size = pkt->size - sizeof(sixlowpan_frag_t);",
      "240:         if (data[0] == SIXLOWPAN_UNCOMP) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "239:         if (pkt->size < sizeof(sixlowpan_frag_t)) {",
      "240:             return 0;",
      "241:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244:         }",
      "245:     }",
      "246:     else {",
      "247:         frag_size = pkt->size - sizeof(sixlowpan_frag_n_t);",
      "248:     }",
      "249:     return frag_size;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "250:         if (pkt->size < sizeof(sixlowpan_frag_n_t)) {",
      "251:             return 0;",
      "252:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "306:     if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG) && sixlowpan_frag_is(pkt->data)) {",
      "307:         data = _6lo_frag_payload(pkt);",
      "308:         frag_size = _6lo_frag_size(pkt, offset, data);",
      "309:         datagram_size = sixlowpan_frag_datagram_size(pkt->data);",
      "310:         datagram_tag = sixlowpan_frag_datagram_tag(pkt->data);",
      "311:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:         if (frag_size == 0) {",
      "316:             DEBUG(\"6lo rbuf: integer underflow detected.\\n\");",
      "317:             gnrc_pktbuf_release(pkt);",
      "318:             return RBUF_ADD_ERROR;",
      "319:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd31010231f5340e21410595dd95afc86bbfd341",
      "candidate_info": {
        "commit_hash": "bd31010231f5340e21410595dd95afc86bbfd341",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/commit/bd31010231f5340e21410595dd95afc86bbfd341",
        "files": [
          "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
        ],
        "message": "gnrc_sixlowpan_frag_rb: fix integer underflow in _6lo_frag_size()\n\n(cherry picked from commit 9728f727e75d7d78dbfb5918e0de1b938b7b6d2c)",
        "before_after_code_files": [
          "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
          ],
          "candidate": [
            "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c"
          ]
        }
      },
      "candidate_diff": {
        "sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c||sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c": [
          "File: sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c -> sys/net/gnrc/network_layer/sixlowpan/frag/rb/gnrc_sixlowpan_frag_rb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     size_t frag_size;",
          "238:     if (offset == 0) {",
          "239:         frag_size = pkt->size - sizeof(sixlowpan_frag_t);",
          "240:         if (data[0] == SIXLOWPAN_UNCOMP) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:         if (pkt->size < sizeof(sixlowpan_frag_t)) {",
          "240:             return 0;",
          "241:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:         }",
          "245:     }",
          "246:     else {",
          "247:         frag_size = pkt->size - sizeof(sixlowpan_frag_n_t);",
          "248:     }",
          "249:     return frag_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:         if (pkt->size < sizeof(sixlowpan_frag_n_t)) {",
          "251:             return 0;",
          "252:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:     if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG) && sixlowpan_frag_is(pkt->data)) {",
          "307:         data = _6lo_frag_payload(pkt);",
          "308:         frag_size = _6lo_frag_size(pkt, offset, data);",
          "309:         datagram_size = sixlowpan_frag_datagram_size(pkt->data);",
          "310:         datagram_tag = sixlowpan_frag_datagram_tag(pkt->data);",
          "311:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:         if (frag_size == 0) {",
          "316:             DEBUG(\"6lo rbuf: integer underflow detected.\\n\");",
          "317:             gnrc_pktbuf_release(pkt);",
          "318:             return RBUF_ADD_ERROR;",
          "319:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17c70f7ee0b1445f2941f516f264ed4a096e82b7",
      "candidate_info": {
        "commit_hash": "17c70f7ee0b1445f2941f516f264ed4a096e82b7",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/commit/17c70f7ee0b1445f2941f516f264ed4a096e82b7",
        "files": [
          "sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c"
        ],
        "message": "gnrc_netif_ieee802154: Ignore packets without source address",
        "before_after_code_files": [
          "sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c||sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RIOT-OS/RIOT/pull/18817"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c||sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c": [
          "File: sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c -> sys/net/gnrc/netif/ieee802154/gnrc_netif_ieee802154.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     dst_len = ieee802154_get_dst(mhr, dst, &_pan_tmp);",
          "56:     src_len = ieee802154_get_src(mhr, src, &_pan_tmp);",
          "58:         DEBUG(\"_make_netif_hdr: unable to get addresses\\n\");",
          "59:         return NULL;",
          "60:     }",
          "",
          "[Removed Lines]",
          "57:     if ((dst_len < 0) || (src_len < 0)) {",
          "",
          "[Added Lines]",
          "57:     if ((dst_len < 0) || (src_len <= 0)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73615161c01fcfbbc7216cf502cabb12c1598ee4",
      "candidate_info": {
        "commit_hash": "73615161c01fcfbbc7216cf502cabb12c1598ee4",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/pull/18817/commits/73615161c01fcfbbc7216cf502cabb12c1598ee4",
        "files": [
          "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c"
        ],
        "message": "gnrc_sixlowpan_iphc: fix buffer overflow in gnrc_sixlowpan_iphc_recv()",
        "before_after_code_files": [
          "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c||sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RIOT-OS/RIOT/pull/18817"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c||sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c": [
          "File: sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c -> sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:     if (rbuf != NULL) {",
          "738:         ipv6 = rbuf->pkt;",
          "739:         assert(ipv6 != NULL);",
          "740:     }",
          "741:     else {",
          "742:         ipv6 = gnrc_pktbuf_add(NULL, NULL, sizeof(ipv6_hdr_t),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:         if ((ipv6->size < sizeof(ipv6_hdr_t)) &&",
          "741:             (gnrc_pktbuf_realloc_data(ipv6, sizeof(ipv6_hdr_t)) != 0)) {",
          "742:             DEBUG(\"6lo iphc: no space to decompress IPHC\\n\");",
          "743:             _recv_error_release(sixlo, ipv6, rbuf);",
          "744:             return;",
          "745:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "872:         payload_len = (sixlo->size + uncomp_hdr_len -",
          "873:                        payload_offset - sizeof(ipv6_hdr_t));",
          "874:     }",
          "881:     }",
          "883:     ipv6_hdr = ipv6->data;",
          "884:     ipv6_hdr->len = byteorder_htons(payload_len);",
          "",
          "[Removed Lines]",
          "875:     if ((rbuf == NULL) &&",
          "877:         (gnrc_pktbuf_realloc_data(ipv6, uncomp_hdr_len + payload_len) != 0)) {",
          "878:         DEBUG(\"6lo iphc: no space left to copy payload\\n\");",
          "879:         _recv_error_release(sixlo, ipv6, rbuf);",
          "880:         return;",
          "",
          "[Added Lines]",
          "881:     if (rbuf == NULL) {",
          "883:         if (gnrc_pktbuf_realloc_data(ipv6, uncomp_hdr_len + payload_len) != 0) {",
          "884:             DEBUG(\"6lo iphc: no space left to copy payload\\n\");",
          "885:             _recv_error_release(sixlo, ipv6, rbuf);",
          "886:             return;",
          "887:         }",
          "889:     else {",
          "890:         if (ipv6->size < (uncomp_hdr_len + (sixlo->size - payload_offset))) {",
          "891:             DEBUG(\"6lo iphc: not enough space to copy payload.\\n\");",
          "892:             DEBUG(\"6lo iphc: potentially malicious datagram size received.\\n\");",
          "893:             _recv_error_release(sixlo, ipv6, rbuf);",
          "894:             return;",
          "895:         }",
          "896:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c7c9fefd61a57e25a08d6566ded64ca8c5326ae",
      "candidate_info": {
        "commit_hash": "3c7c9fefd61a57e25a08d6566ded64ca8c5326ae",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/commit/3c7c9fefd61a57e25a08d6566ded64ca8c5326ae",
        "files": [
          "tests/unittests/tests-ieee802154/tests-ieee802154.c"
        ],
        "message": "tests/unittests: fix get_frame_hdr_len tests for hardened parsing",
        "before_after_code_files": [
          "tests/unittests/tests-ieee802154/tests-ieee802154.c||tests/unittests/tests-ieee802154/tests-ieee802154.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RIOT-OS/RIOT/pull/18817"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/unittests/tests-ieee802154/tests-ieee802154.c||tests/unittests/tests-ieee802154/tests-ieee802154.c": [
          "File: tests/unittests/tests-ieee802154/tests-ieee802154.c -> tests/unittests/tests-ieee802154/tests-ieee802154.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407: static void test_ieee802154_get_frame_hdr_len_dst0_src0(void)",
          "408: {",
          "413: }",
          "415: static void test_ieee802154_get_frame_hdr_len_dstr(void)",
          "416: {",
          "419:     TEST_ASSERT_EQUAL_INT(0, ieee802154_get_frame_hdr_len(mhr));",
          "420: }",
          "422: static void test_ieee802154_get_frame_hdr_len_srcr(void)",
          "423: {",
          "426:     TEST_ASSERT_EQUAL_INT(0, ieee802154_get_frame_hdr_len(mhr));",
          "427: }",
          "429: static void test_ieee802154_get_frame_hdr_len_dst2_src0(void)",
          "430: {",
          "434:     TEST_ASSERT_EQUAL_INT(7, ieee802154_get_frame_hdr_len(mhr));",
          "435: }",
          "437: static void test_ieee802154_get_frame_hdr_len_dst8_src0(void)",
          "438: {",
          "441:     TEST_ASSERT_EQUAL_INT(13, ieee802154_get_frame_hdr_len(mhr));",
          "442: }",
          "444: static void test_ieee802154_get_frame_hdr_len_dst0_src2(void)",
          "445: {",
          "448:     TEST_ASSERT_EQUAL_INT(7, ieee802154_get_frame_hdr_len(mhr));",
          "449: }",
          "451: static void test_ieee802154_get_frame_hdr_len_dst0_src2_pancomp(void)",
          "452: {",
          "455:     TEST_ASSERT_EQUAL_INT(0, ieee802154_get_frame_hdr_len(mhr));",
          "456: }",
          "458: static void test_ieee802154_get_frame_hdr_len_dst0_src8(void)",
          "459: {",
          "462:     TEST_ASSERT_EQUAL_INT(13, ieee802154_get_frame_hdr_len(mhr));",
          "463: }",
          "465: static void test_ieee802154_get_frame_hdr_len_dst0_src8_pancomp(void)",
          "466: {",
          "469:     TEST_ASSERT_EQUAL_INT(0, ieee802154_get_frame_hdr_len(mhr));",
          "470: }",
          "472: static void test_ieee802154_get_frame_hdr_len_dst2_src2(void)",
          "473: {",
          "477:     TEST_ASSERT_EQUAL_INT(11, ieee802154_get_frame_hdr_len(mhr));",
          "478: }",
          "480: static void test_ieee802154_get_frame_hdr_len_dst8_src2(void)",
          "481: {",
          "485:     TEST_ASSERT_EQUAL_INT(17, ieee802154_get_frame_hdr_len(mhr));",
          "486: }",
          "488: static void test_ieee802154_get_frame_hdr_len_dst8_src8(void)",
          "489: {",
          "493:     TEST_ASSERT_EQUAL_INT(23, ieee802154_get_frame_hdr_len(mhr));",
          "494: }",
          "496: static void test_ieee802154_get_frame_hdr_len_dst2_src2_pancomp(void)",
          "497: {",
          "501:     TEST_ASSERT_EQUAL_INT(9, ieee802154_get_frame_hdr_len(mhr));",
          "502: }",
          "504: static void test_ieee802154_get_frame_hdr_len_dst8_src8_pancomp(void)",
          "505: {",
          "509:     TEST_ASSERT_EQUAL_INT(21, ieee802154_get_frame_hdr_len(mhr));",
          "510: }",
          "",
          "[Removed Lines]",
          "409:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_VOID |",
          "410:                                   IEEE802154_FCF_SRC_ADDR_VOID };",
          "412:     TEST_ASSERT_EQUAL_INT(3, ieee802154_get_frame_hdr_len(mhr));",
          "417:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_RESV };",
          "424:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_RESV };",
          "431:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_SHORT |",
          "432:                                   IEEE802154_FCF_SRC_ADDR_VOID };",
          "439:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_LONG };",
          "446:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_SRC_ADDR_SHORT };",
          "453:     const uint8_t mhr[] = { IEEE802154_FCF_PAN_COMP, IEEE802154_FCF_SRC_ADDR_SHORT };",
          "460:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_SRC_ADDR_LONG };",
          "467:     const uint8_t mhr[] = { IEEE802154_FCF_PAN_COMP, IEEE802154_FCF_SRC_ADDR_LONG };",
          "474:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_SHORT |",
          "475:                                   IEEE802154_FCF_SRC_ADDR_SHORT };",
          "482:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_LONG |",
          "483:                                   IEEE802154_FCF_SRC_ADDR_SHORT };",
          "490:     const uint8_t mhr[] = { 0x00, IEEE802154_FCF_DST_ADDR_LONG |",
          "491:                                   IEEE802154_FCF_SRC_ADDR_LONG };",
          "498:     const uint8_t mhr[] = { IEEE802154_FCF_PAN_COMP, IEEE802154_FCF_DST_ADDR_SHORT |",
          "499:                                                      IEEE802154_FCF_SRC_ADDR_SHORT };",
          "506:     const uint8_t mhr[] = { IEEE802154_FCF_PAN_COMP, IEEE802154_FCF_DST_ADDR_LONG |",
          "507:                                                      IEEE802154_FCF_SRC_ADDR_LONG };",
          "",
          "[Added Lines]",
          "409:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_DST_ADDR_VOID |",
          "410:                                                       IEEE802154_FCF_SRC_ADDR_VOID };",
          "413:     TEST_ASSERT_EQUAL_INT(0, ieee802154_get_frame_hdr_len(mhr));",
          "418:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_DST_ADDR_RESV };",
          "425:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_DST_ADDR_RESV };",
          "432:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_DST_ADDR_SHORT |",
          "433:                                                       IEEE802154_FCF_SRC_ADDR_VOID };",
          "440:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_DST_ADDR_LONG };",
          "447:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_SRC_ADDR_SHORT };",
          "454:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA | IEEE802154_FCF_PAN_COMP,",
          "455:                             IEEE802154_FCF_SRC_ADDR_SHORT };",
          "462:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA, IEEE802154_FCF_SRC_ADDR_LONG };",
          "469:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA | IEEE802154_FCF_PAN_COMP,",
          "470:                             IEEE802154_FCF_SRC_ADDR_LONG };",
          "477:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA,",
          "478:                             IEEE802154_FCF_DST_ADDR_SHORT | IEEE802154_FCF_SRC_ADDR_SHORT };",
          "485:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA,",
          "486:                             IEEE802154_FCF_DST_ADDR_LONG | IEEE802154_FCF_SRC_ADDR_SHORT };",
          "493:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA,",
          "494:                             IEEE802154_FCF_DST_ADDR_LONG | IEEE802154_FCF_SRC_ADDR_LONG };",
          "501:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA | IEEE802154_FCF_PAN_COMP,",
          "502:                             IEEE802154_FCF_DST_ADDR_SHORT | IEEE802154_FCF_SRC_ADDR_SHORT };",
          "509:     const uint8_t mhr[] = { IEEE802154_FCF_TYPE_DATA | IEEE802154_FCF_PAN_COMP,",
          "510:                             IEEE802154_FCF_DST_ADDR_LONG | IEEE802154_FCF_SRC_ADDR_LONG };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "639c04325de4ceb9d444955f4927bfae95843a39",
      "candidate_info": {
        "commit_hash": "639c04325de4ceb9d444955f4927bfae95843a39",
        "repo": "RIOT-OS/RIOT",
        "commit_url": "https://github.com/RIOT-OS/RIOT/commit/639c04325de4ceb9d444955f4927bfae95843a39",
        "files": [
          "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c"
        ],
        "message": "gnrc_sixlowpan_iphc: fix null pointer dereference in _iphc_encode()",
        "before_after_code_files": [
          "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c||sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/RIOT-OS/RIOT/pull/18817"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c||sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c": [
          "File: sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c -> sys/net/gnrc/network_layer/sixlowpan/iphc/gnrc_sixlowpan_iphc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: #ifdef MODULE_GNRC_SIXLOWPAN_IPHC_NHC",
          "1651:     while (_compressible_nh(nh)) {",
          "1652:         ssize_t local_pos = 0;",
          "1653:         switch (nh) {",
          "1654:             case PROTNUM_UDP:",
          "1655:                 local_pos = _nhc_udp_encode_snip(pkt, &iphc_hdr[inline_pos]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1653:         if (pkt->next->next == NULL) {",
          "1654:             DEBUG(\"6lo iphc: packet next header missing data\");",
          "1655:             gnrc_pktbuf_release(dispatch);",
          "1656:             return NULL;",
          "1657:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}