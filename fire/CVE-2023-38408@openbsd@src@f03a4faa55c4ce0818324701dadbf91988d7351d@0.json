{
  "cve_id": "CVE-2023-38408",
  "cve_desc": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
  "repo": "openbsd/src",
  "patch_hash": "f03a4faa55c4ce0818324701dadbf91988d7351d",
  "patch_info": {
    "commit_hash": "f03a4faa55c4ce0818324701dadbf91988d7351d",
    "repo": "openbsd/src",
    "commit_url": "https://github.com/openbsd/src/commit/f03a4faa55c4ce0818324701dadbf91988d7351d",
    "files": [
      "usr.bin/ssh/ssh-pkcs11.c"
    ],
    "message": "terminate process if requested to load a PKCS#11 provider that isn't a PKCS#11 provider; from / ok markus@",
    "before_after_code_files": [
      "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c"
    ]
  },
  "patch_diff": {
    "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c": [
      "File: usr.bin/ssh/ssh-pkcs11.c -> usr.bin/ssh/ssh-pkcs11.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1512:   error(\"dlopen %s failed: %s\", provider_id, dlerror());",
      "1513:   goto fail;",
      "1514:  }",
      "1519:  p = xcalloc(1, sizeof(*p));",
      "1520:  p->name = xstrdup(provider_id);",
      "1521:  p->handle = handle;",
      "",
      "[Removed Lines]",
      "1515:  if ((getfunctionlist = dlsym(handle, \"C_GetFunctionList\")) == NULL) {",
      "1516:   error(\"dlsym(C_GetFunctionList) failed: %s\", dlerror());",
      "1517:   goto fail;",
      "1518:  }",
      "",
      "[Added Lines]",
      "1515:  if ((getfunctionlist = dlsym(handle, \"C_GetFunctionList\")) == NULL)",
      "1516:   fatal(\"dlsym(C_GetFunctionList) failed: %s\", dlerror());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c6bff6f44037194f5f60bc701db92dc6173c9dd",
      "candidate_info": {
        "commit_hash": "2c6bff6f44037194f5f60bc701db92dc6173c9dd",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/2c6bff6f44037194f5f60bc701db92dc6173c9dd",
        "files": [
          "usr.bin/ssh/ssh-pkcs11.c"
        ],
        "message": "don't incorrectly truncate logged strings retrieved from PKCS#11 modules; based on GHPR406 by Jakub Jelen; ok markus",
        "before_after_code_files": [
          "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c"
          ],
          "candidate": [
            "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c"
          ]
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/ssh-pkcs11.c||usr.bin/ssh/ssh-pkcs11.c": [
          "File: usr.bin/ssh/ssh-pkcs11.c -> usr.bin/ssh/ssh-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "612: }",
          "616: rmspace(u_char *buf, size_t len)",
          "617: {",
          "618:  size_t i;",
          "624:    buf[i] = '\\0';",
          "625:   else",
          "626:    break;",
          "627: }",
          "",
          "[Removed Lines]",
          "615: static void",
          "620:  if (!len)",
          "621:   return;",
          "622:  for (i = len - 1;  i > 0; i--)",
          "623:   if (i == len - 1 || buf[i] == ' ')",
          "",
          "[Added Lines]",
          "615: static char *",
          "620:  if (len == 0)",
          "621:   return buf;",
          "622:  for (i = len - 1; i > 0; i--)",
          "623:   if (buf[i] == ' ')",
          "627:  return buf;",
          "630: #define RMSPACE(s) (int)sizeof(s), rmspace(s, sizeof(s))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1539:       provider_id, rv);",
          "1540:   goto fail;",
          "1541:  }",
          "1546:      provider_id,",
          "1548:      p->info.cryptokiVersion.major,",
          "1549:      p->info.cryptokiVersion.minor,",
          "1551:      p->info.libraryVersion.major,",
          "1552:      p->info.libraryVersion.minor);",
          "1553:  if ((rv = f->C_GetSlotList(CK_TRUE, NULL, &p->nslots)) != CKR_OK) {",
          "",
          "[Removed Lines]",
          "1542:  rmspace(p->info.manufacturerID, sizeof(p->info.manufacturerID));",
          "1543:  rmspace(p->info.libraryDescription, sizeof(p->info.libraryDescription));",
          "1544:  debug(\"provider %s: manufacturerID <%s> cryptokiVersion %d.%d\"",
          "1545:      \" libraryDescription <%s> libraryVersion %d.%d\",",
          "1547:      p->info.manufacturerID,",
          "1550:      p->info.libraryDescription,",
          "",
          "[Added Lines]",
          "1545:  debug(\"provider %s: manufacturerID <%.*s> cryptokiVersion %d.%d\"",
          "1546:      \" libraryDescription <%.*s> libraryVersion %d.%d\",",
          "1548:      RMSPACE(p->info.manufacturerID),",
          "1551:      RMSPACE(p->info.libraryDescription),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1582:        \"provider %s slot %lu\", provider_id, (u_long)i);",
          "1583:    continue;",
          "1584:   }",
          "1591:       provider_id, (unsigned long)i,",
          "",
          "[Removed Lines]",
          "1585:   rmspace(token->label, sizeof(token->label));",
          "1586:   rmspace(token->manufacturerID, sizeof(token->manufacturerID));",
          "1587:   rmspace(token->model, sizeof(token->model));",
          "1588:   rmspace(token->serialNumber, sizeof(token->serialNumber));",
          "1589:   debug(\"provider %s slot %lu: label <%s> manufacturerID <%s> \"",
          "1590:       \"model <%s> serial <%s> flags 0x%lx\",",
          "1592:       token->label, token->manufacturerID, token->model,",
          "1593:       token->serialNumber, token->flags);",
          "",
          "[Added Lines]",
          "1586:   debug(\"provider %s slot %lu: label <%.*s> \"",
          "1587:       \"manufacturerID <%.*s> model <%.*s> serial <%.*s> \"",
          "1588:       \"flags 0x%lx\",",
          "1590:       RMSPACE(token->label), RMSPACE(token->manufacturerID),",
          "1591:       RMSPACE(token->model), RMSPACE(token->serialNumber),",
          "1592:       token->flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3ac409df09ae014b818304db263419b15cd187f",
      "candidate_info": {
        "commit_hash": "c3ac409df09ae014b818304db263419b15cd187f",
        "repo": "openbsd/src",
        "commit_url": "https://github.com/openbsd/src/commit/c3ac409df09ae014b818304db263419b15cd187f",
        "files": [
          "usr.bin/ssh/ssh-pkcs11-client.c"
        ],
        "message": "Separate ssh-pkcs11-helpers for each p11 module\n\nMake ssh-pkcs11-client start an independent helper for each provider,\nproviding better isolation between modules and reliability if a single\nmodule misbehaves.\n\nThis also implements reference counting of PKCS#11-hosted keys,\nallowing ssh-pkcs11-helper subprocesses to be automatically reaped\nwhen no remaining keys reference them. This fixes some bugs we have\nthat make PKCS11 keys unusable after they have been deleted, e.g.\nhttps://bugzilla.mindrot.org/show_bug.cgi?id=3125\n\nok markus@",
        "before_after_code_files": [
          "usr.bin/ssh/ssh-pkcs11-client.c||usr.bin/ssh/ssh-pkcs11-client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr.bin/ssh/ssh-pkcs11-client.c||usr.bin/ssh/ssh-pkcs11-client.c": [
          "File: usr.bin/ssh/ssh-pkcs11-client.c -> usr.bin/ssh/ssh-pkcs11-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <string.h>",
          "25: #include <unistd.h>",
          "26: #include <errno.h>",
          "28: #include <openssl/ecdsa.h>",
          "29: #include <openssl/rsa.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: static void",
          "49: {",
          "50:  u_char buf[4];",
          "51:  size_t mlen = sshbuf_len(m);",
          "52:  int r;",
          "54:  POKE_U32(buf, mlen);",
          "55:  if (atomicio(vwrite, fd, buf, 4) != 4 ||",
          "56:      atomicio(vwrite, fd, sshbuf_mutable_ptr(m),",
          "",
          "[Removed Lines]",
          "44: static int fd = -1;",
          "45: static pid_t pid = -1;",
          "48: send_msg(struct sshbuf *m)",
          "",
          "[Added Lines]",
          "49: struct helper {",
          "50:  char *path;",
          "51:  pid_t pid;",
          "52:  int fd;",
          "53:  RSA_METHOD *rsa_meth;",
          "54:  EC_KEY_METHOD *ec_meth;",
          "55:  int (*rsa_finish)(RSA *rsa);",
          "56:  void (*ec_finish)(EC_KEY *key);",
          "58: };",
          "59: static struct helper **helpers;",
          "60: static size_t nhelpers;",
          "62: static struct helper *",
          "63: helper_by_provider(const char *path)",
          "64: {",
          "65:  size_t i;",
          "67:  for (i = 0; i < nhelpers; i++) {",
          "68:   if (helpers[i] == NULL || helpers[i]->path == NULL ||",
          "69:       helpers[i]->fd == -1)",
          "70:    continue;",
          "71:   if (strcmp(helpers[i]->path, path) == 0)",
          "72:    return helpers[i];",
          "73:  }",
          "74:  return NULL;",
          "75: }",
          "77: static struct helper *",
          "78: helper_by_rsa(const RSA *rsa)",
          "79: {",
          "80:  size_t i;",
          "81:  const RSA_METHOD *meth;",
          "83:  if ((meth = RSA_get_method(rsa)) == NULL)",
          "84:   return NULL;",
          "85:  for (i = 0; i < nhelpers; i++) {",
          "86:   if (helpers[i] != NULL && helpers[i]->rsa_meth == meth)",
          "87:    return helpers[i];",
          "88:  }",
          "89:  return NULL;",
          "91: }",
          "93: static struct helper *",
          "94: helper_by_ec(const EC_KEY *ec)",
          "95: {",
          "96:  size_t i;",
          "97:  const EC_KEY_METHOD *meth;",
          "99:  if ((meth = EC_KEY_get_method(ec)) == NULL)",
          "100:   return NULL;",
          "101:  for (i = 0; i < nhelpers; i++) {",
          "102:   if (helpers[i] != NULL && helpers[i]->ec_meth == meth)",
          "103:    return helpers[i];",
          "104:  }",
          "105:  return NULL;",
          "107: }",
          "110: helper_free(struct helper *helper)",
          "111: {",
          "112:  size_t i;",
          "113:  int found = 0;",
          "115:  if (helper == NULL)",
          "116:   return;",
          "117:  if (helper->path == NULL || helper->ec_meth == NULL ||",
          "118:      helper->rsa_meth == NULL)",
          "119:   fatal_f(\"inconsistent helper\");",
          "120:  debug3_f(\"free helper for provider %s\", helper->path);",
          "121:  for (i = 0; i < nhelpers; i++) {",
          "122:   if (helpers[i] == helper) {",
          "123:    if (found)",
          "124:     fatal_f(\"helper recorded more than once\");",
          "125:    found = 1;",
          "126:   }",
          "127:   else if (found)",
          "128:    helpers[i - 1] = helpers[i];",
          "129:  }",
          "130:  if (found) {",
          "131:   helpers = xrecallocarray(helpers, nhelpers,",
          "132:       nhelpers - 1, sizeof(*helpers));",
          "133:   nhelpers--;",
          "134:  }",
          "135:  free(helper->path);",
          "136:  EC_KEY_METHOD_free(helper->ec_meth);",
          "137:  RSA_meth_free(helper->rsa_meth);",
          "138:  free(helper);",
          "139: }",
          "141: static void",
          "142: helper_terminate(struct helper *helper)",
          "143: {",
          "144:  if (helper == NULL) {",
          "145:   return;",
          "146:  } else if (helper->fd == -1) {",
          "147:   debug3_f(\"already terminated\");",
          "148:  } else {",
          "149:   debug3_f(\"terminating helper for %s; \"",
          "150:       \"remaining %zu RSA %zu ECDSA\",",
          "151:       helper->path, helper->nrsa, helper->nec);",
          "152:   close(helper->fd);",
          "154:   helper->fd = -1;",
          "155:   helper->pid = -1;",
          "156:  }",
          "162:  if (helper->nrsa == 0 && helper->nec == 0)",
          "163:   helper_free(helper);",
          "164: }",
          "166: static void",
          "167: send_msg(int fd, struct sshbuf *m)",
          "173:  if (fd == -1)",
          "174:   return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: }",
          "63: static int",
          "65: {",
          "66:  u_int l, len;",
          "67:  u_char c, buf[1024];",
          "68:  int r;",
          "70:  if ((len = atomicio(read, fd, buf, 4)) != 4) {",
          "71:   error(\"read from helper failed: %u\", len);",
          "",
          "[Removed Lines]",
          "64: recv_msg(struct sshbuf *m)",
          "",
          "[Added Lines]",
          "185: recv_msg(int fd, struct sshbuf *m)",
          "191:  sshbuf_reset(m);",
          "192:  if (fd == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:  if (len > 256 * 1024)",
          "76:   fatal(\"response too long: %u\", len);",
          "79:  while (len > 0) {",
          "80:   l = len;",
          "81:   if (l > sizeof(buf))",
          "",
          "[Removed Lines]",
          "78:  sshbuf_reset(m);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96: int",
          "97: pkcs11_init(int interactive)",
          "98: {",
          "100: }",
          "102: void",
          "103: pkcs11_terminate(void)",
          "104: {",
          "107: }",
          "109: static int",
          "",
          "[Removed Lines]",
          "99:  return (0);",
          "105:  if (fd >= 0)",
          "106:   close(fd);",
          "",
          "[Added Lines]",
          "222:  return 0;",
          "228:  size_t i;",
          "230:  debug3_f(\"terminating %zu helpers\", nhelpers);",
          "231:  for (i = 0; i < nhelpers; i++)",
          "232:   helper_terminate(helpers[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:  u_char *blob = NULL, *signature = NULL;",
          "115:  size_t blen, slen = 0;",
          "116:  int r, ret = -1;",
          "118:  if (padding != RSA_PKCS1_PADDING)",
          "119:   goto fail;",
          "120:  key = sshkey_new(KEY_UNSPEC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:  struct helper *helper;",
          "245:  if ((helper = helper_by_rsa(rsa)) == NULL || helper->fd == -1)",
          "246:   fatal_f(\"no helper for PKCS11 key\");",
          "247:  debug3_f(\"signing with PKCS11 provider %s\", helper->path);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:      (r = sshbuf_put_string(msg, from, flen)) != 0 ||",
          "137:      (r = sshbuf_put_u32(msg, 0)) != 0)",
          "138:   fatal_fr(r, \"compose\");",
          "140:  sshbuf_reset(msg);",
          "143:   if ((r = sshbuf_get_string(msg, &signature, &slen)) != 0)",
          "144:    fatal_fr(r, \"parse\");",
          "145:   if (slen <= (size_t)RSA_size(rsa)) {",
          "",
          "[Removed Lines]",
          "139:  send_msg(msg);",
          "142:  if (recv_msg(msg) == SSH2_AGENT_SIGN_RESPONSE) {",
          "",
          "[Added Lines]",
          "269:  send_msg(helper->fd, msg);",
          "272:  if (recv_msg(helper->fd, msg) == SSH2_AGENT_SIGN_RESPONSE) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "155:  return (ret);",
          "156: }",
          "158: static ECDSA_SIG *",
          "159: ecdsa_do_sign(const unsigned char *dgst, int dgst_len, const BIGNUM *inv,",
          "160:     const BIGNUM *rp, EC_KEY *ec)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288: static int",
          "289: rsa_finish(RSA *rsa)",
          "290: {",
          "291:  struct helper *helper;",
          "293:  if ((helper = helper_by_rsa(rsa)) == NULL)",
          "294:   fatal_f(\"no helper for PKCS11 key\");",
          "295:  debug3_f(\"free PKCS11 RSA key for provider %s\", helper->path);",
          "296:  if (helper->rsa_finish != NULL)",
          "297:   helper->rsa_finish(rsa);",
          "298:  if (helper->nrsa == 0)",
          "299:   fatal_f(\"RSA refcount error\");",
          "300:  helper->nrsa--;",
          "301:  debug3_f(\"provider %s remaining keys: %zu RSA %zu ECDSA\",",
          "302:      helper->path, helper->nrsa, helper->nec);",
          "303:  if (helper->nrsa == 0 && helper->nec == 0)",
          "304:   helper_terminate(helper);",
          "305:  return 1;",
          "306: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "166:  u_char *blob = NULL, *signature = NULL;",
          "167:  size_t blen, slen = 0;",
          "168:  int r, nid;",
          "170:  nid = sshkey_ecdsa_key_to_nid(ec);",
          "171:  if (nid < 0) {",
          "172:   error_f(\"couldn't get curve nid\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:  struct helper *helper;",
          "321:  if ((helper = helper_by_ec(ec)) == NULL || helper->fd == -1)",
          "322:   fatal_f(\"no helper for PKCS11 key\");",
          "323:  debug3_f(\"signing with PKCS11 provider %s\", helper->path);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "194:      (r = sshbuf_put_string(msg, dgst, dgst_len)) != 0 ||",
          "195:      (r = sshbuf_put_u32(msg, 0)) != 0)",
          "196:   fatal_fr(r, \"compose\");",
          "198:  sshbuf_reset(msg);",
          "201:   if ((r = sshbuf_get_string(msg, &signature, &slen)) != 0)",
          "202:    fatal_fr(r, \"parse\");",
          "203:   cp = signature;",
          "",
          "[Removed Lines]",
          "197:  send_msg(msg);",
          "200:  if (recv_msg(msg) == SSH2_AGENT_SIGN_RESPONSE) {",
          "",
          "[Added Lines]",
          "351:  send_msg(helper->fd, msg);",
          "354:  if (recv_msg(helper->fd, msg) == SSH2_AGENT_SIGN_RESPONSE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "212:  return (ret);",
          "213: }",
          "219: static void",
          "221: {",
          "227:   fatal_f(\"unknown key type\");",
          "228: }",
          "230: static int",
          "232: {",
          "237:      unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *) = NULL;",
          "247:   fatal_f(\"RSA_meth_dup failed\");",
          "250:   fatal_f(\"failed to prepare method\");",
          "253: }",
          "257: {",
          "258:  int pair[2];",
          "269:  if (socketpair(AF_UNIX, SOCK_STREAM, 0, pair) == -1) {",
          "272:  }",
          "273:  if ((pid = fork()) == -1) {",
          "276:  } else if (pid == 0) {",
          "277:   if ((dup2(pair[1], STDIN_FILENO) == -1) ||",
          "278:       (dup2(pair[1], STDOUT_FILENO) == -1)) {",
          "",
          "[Removed Lines]",
          "215: static RSA_METHOD *helper_rsa;",
          "216: static EC_KEY_METHOD *helper_ecdsa;",
          "220: wrap_key(struct sshkey *k)",
          "222:  if (k->type == KEY_RSA)",
          "223:   RSA_set_method(k->rsa, helper_rsa);",
          "224:  else if (k->type == KEY_ECDSA)",
          "225:   EC_KEY_set_method(k->ecdsa, helper_ecdsa);",
          "226:  else",
          "231: pkcs11_start_helper_methods(void)",
          "233:  if (helper_ecdsa != NULL)",
          "234:   return (0);",
          "236:  int (*orig_sign)(int, const unsigned char *, int, unsigned char *,",
          "238:  if (helper_ecdsa != NULL)",
          "239:   return (0);",
          "240:  helper_ecdsa = EC_KEY_METHOD_new(EC_KEY_OpenSSL());",
          "241:  if (helper_ecdsa == NULL)",
          "242:   return (-1);",
          "243:  EC_KEY_METHOD_get_sign(helper_ecdsa, &orig_sign, NULL, NULL);",
          "244:  EC_KEY_METHOD_set_sign(helper_ecdsa, orig_sign, NULL, ecdsa_do_sign);",
          "246:  if ((helper_rsa = RSA_meth_dup(RSA_get_default_method())) == NULL)",
          "248:  if (!RSA_meth_set1_name(helper_rsa, \"ssh-pkcs11-helper\") ||",
          "249:      !RSA_meth_set_priv_enc(helper_rsa, rsa_encrypt))",
          "252:  return (0);",
          "255: static int",
          "256: pkcs11_start_helper(void)",
          "259:  char *helper, *verbosity = NULL;",
          "261:  if (log_level_get() >= SYSLOG_LEVEL_DEBUG1)",
          "262:   verbosity = \"-vvv\";",
          "264:  if (pkcs11_start_helper_methods() == -1) {",
          "265:   error(\"pkcs11_start_helper_methods failed\");",
          "266:   return (-1);",
          "267:  }",
          "270:   error(\"socketpair: %s\", strerror(errno));",
          "271:   return (-1);",
          "274:   error(\"fork: %s\", strerror(errno));",
          "275:   return (-1);",
          "",
          "[Added Lines]",
          "369: static void",
          "370: ecdsa_do_finish(EC_KEY *ec)",
          "371: {",
          "372:  struct helper *helper;",
          "374:  if ((helper = helper_by_ec(ec)) == NULL)",
          "375:   fatal_f(\"no helper for PKCS11 key\");",
          "376:  debug3_f(\"free PKCS11 ECDSA key for provider %s\", helper->path);",
          "377:  if (helper->ec_finish != NULL)",
          "378:   helper->ec_finish(ec);",
          "379:  if (helper->nec == 0)",
          "380:   fatal_f(\"ECDSA refcount error\");",
          "381:  helper->nec--;",
          "382:  debug3_f(\"provider %s remaining keys: %zu RSA %zu ECDSA\",",
          "383:      helper->path, helper->nrsa, helper->nec);",
          "384:  if (helper->nrsa == 0 && helper->nec == 0)",
          "385:   helper_terminate(helper);",
          "386: }",
          "390: wrap_key(struct helper *helper, struct sshkey *k)",
          "392:  debug3_f(\"wrap %s for provider %s\", sshkey_type(k), helper->path);",
          "393:  if (k->type == KEY_RSA) {",
          "394:   RSA_set_method(k->rsa, helper->rsa_meth);",
          "395:   if (helper->nrsa++ >= INT_MAX)",
          "396:    fatal_f(\"RSA refcount error\");",
          "397:  } else if (k->type == KEY_ECDSA) {",
          "398:   EC_KEY_set_method(k->ecdsa, helper->ec_meth);",
          "399:   if (helper->nec++ >= INT_MAX)",
          "400:    fatal_f(\"EC refcount error\");",
          "401:  } else",
          "403:  k->flags |= SSHKEY_FLAG_EXT;",
          "404:  debug3_f(\"provider %s remaining keys: %zu RSA %zu ECDSA\",",
          "405:      helper->path, helper->nrsa, helper->nec);",
          "409: pkcs11_start_helper_methods(struct helper *helper)",
          "411:  int (*ec_init)(EC_KEY *key);",
          "412:  int (*ec_copy)(EC_KEY *dest, const EC_KEY *src);",
          "413:  int (*ec_set_group)(EC_KEY *key, const EC_GROUP *grp);",
          "414:  int (*ec_set_private)(EC_KEY *key, const BIGNUM *priv_key);",
          "415:  int (*ec_set_public)(EC_KEY *key, const EC_POINT *pub_key);",
          "416:  int (*ec_sign)(int, const unsigned char *, int, unsigned char *,",
          "418:  RSA_METHOD *rsa_meth;",
          "419:  EC_KEY_METHOD *ec_meth;",
          "421:  if ((ec_meth = EC_KEY_METHOD_new(EC_KEY_OpenSSL())) == NULL)",
          "422:   return -1;",
          "423:  EC_KEY_METHOD_get_sign(ec_meth, &ec_sign, NULL, NULL);",
          "424:  EC_KEY_METHOD_set_sign(ec_meth, ec_sign, NULL, ecdsa_do_sign);",
          "425:  EC_KEY_METHOD_get_init(ec_meth, &ec_init, &helper->ec_finish,",
          "426:      &ec_copy, &ec_set_group, &ec_set_private, &ec_set_public);",
          "427:  EC_KEY_METHOD_set_init(ec_meth, ec_init, ecdsa_do_finish,",
          "428:      ec_copy, ec_set_group, ec_set_private, ec_set_public);",
          "430:  if ((rsa_meth = RSA_meth_dup(RSA_get_default_method())) == NULL)",
          "432:  helper->rsa_finish = RSA_meth_get_finish(rsa_meth);",
          "433:  if (!RSA_meth_set1_name(rsa_meth, \"ssh-pkcs11-helper\") ||",
          "434:      !RSA_meth_set_priv_enc(rsa_meth, rsa_encrypt) ||",
          "435:      !RSA_meth_set_finish(rsa_meth, rsa_finish))",
          "438:  helper->ec_meth = ec_meth;",
          "439:  helper->rsa_meth = rsa_meth;",
          "440:  return 0;",
          "443: static struct helper *",
          "444: pkcs11_start_helper(const char *path)",
          "447:  char *prog, *verbosity = NULL;",
          "448:  struct helper *helper;",
          "449:  pid_t pid;",
          "451:  if (nhelpers >= INT_MAX)",
          "452:   fatal_f(\"too many helpers\");",
          "453:  debug3_f(\"start helper for %s\", path);",
          "455:   error_f(\"socketpair: %s\", strerror(errno));",
          "456:   return NULL;",
          "457:  }",
          "458:  helper = xcalloc(1, sizeof(*helper));",
          "459:  if (pkcs11_start_helper_methods(helper) == -1) {",
          "460:   error_f(\"pkcs11_start_helper_methods failed\");",
          "461:   goto fail;",
          "464:   error_f(\"fork: %s\", strerror(errno));",
          "465:  fail:",
          "466:   close(pair[0]);",
          "467:   close(pair[1]);",
          "468:   RSA_meth_free(helper->rsa_meth);",
          "469:   EC_KEY_METHOD_free(helper->ec_meth);",
          "470:   free(helper);",
          "471:   return NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "281:   }",
          "282:   close(pair[0]);",
          "283:   close(pair[1]);",
          "288:       verbosity == NULL ? \"\" : verbosity);",
          "291:   _exit(1);",
          "292:  }",
          "293:  close(pair[1]);",
          "296: }",
          "298: int",
          "",
          "[Removed Lines]",
          "284:   helper = getenv(\"SSH_PKCS11_HELPER\");",
          "285:   if (helper == NULL || strlen(helper) == 0)",
          "286:    helper = _PATH_SSH_PKCS11_HELPER;",
          "287:   debug_f(\"starting %s %s\", helper,",
          "289:   execlp(helper, helper, verbosity, (char *)NULL);",
          "290:   fprintf(stderr, \"exec: %s: %s\\n\", helper, strerror(errno));",
          "294:  fd = pair[0];",
          "295:  return (0);",
          "",
          "[Added Lines]",
          "480:   prog = getenv(\"SSH_PKCS11_HELPER\");",
          "481:   if (prog == NULL || strlen(prog) == 0)",
          "482:    prog = _PATH_SSH_PKCS11_HELPER;",
          "483:   if (log_level_get() >= SYSLOG_LEVEL_DEBUG1)",
          "484:    verbosity = \"-vvv\";",
          "485:   debug_f(\"starting %s %s\", prog,",
          "487:   execlp(prog, prog, verbosity, (char *)NULL);",
          "488:   fprintf(stderr, \"exec: %s: %s\\n\", prog, strerror(errno));",
          "492:  helper->fd = pair[0];",
          "493:  helper->path = xstrdup(path);",
          "494:  helper->pid = pid;",
          "495:  debug3_f(\"helper %zu for \\\"%s\\\" on fd %d pid %ld\", nhelpers,",
          "496:      helper->path, helper->fd, (long)helper->pid);",
          "497:  helpers = xrecallocarray(helpers, nhelpers,",
          "498:      nhelpers + 1, sizeof(*helpers));",
          "499:  helpers[nhelpers++] = helper;",
          "500:  return helper;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "306:  size_t blen;",
          "307:  u_int nkeys, i;",
          "308:  struct sshbuf *msg;",
          "313:  if ((msg = sshbuf_new()) == NULL)",
          "314:   fatal_f(\"sshbuf_new failed\");",
          "",
          "[Removed Lines]",
          "310:  if (fd < 0 && pkcs11_start_helper() < 0)",
          "311:   return (-1);",
          "",
          "[Added Lines]",
          "514:  struct helper *helper;",
          "516:  if ((helper = helper_by_provider(name)) == NULL &&",
          "517:      (helper = pkcs11_start_helper(name)) == NULL)",
          "518:   return -1;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "316:      (r = sshbuf_put_cstring(msg, name)) != 0 ||",
          "317:      (r = sshbuf_put_cstring(msg, pin)) != 0)",
          "318:   fatal_fr(r, \"compose\");",
          "320:  sshbuf_reset(msg);",
          "323:  if (type == SSH2_AGENT_IDENTITIES_ANSWER) {",
          "324:   if ((r = sshbuf_get_u32(msg, &nkeys)) != 0)",
          "325:    fatal_fr(r, \"parse nkeys\");",
          "",
          "[Removed Lines]",
          "319:  send_msg(msg);",
          "322:  type = recv_msg(msg);",
          "",
          "[Added Lines]",
          "526:  send_msg(helper->fd, msg);",
          "529:  type = recv_msg(helper->fd, msg);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "333:     fatal_fr(r, \"parse key\");",
          "334:    if ((r = sshkey_from_blob(blob, blen, &k)) != 0)",
          "335:     fatal_fr(r, \"decode key\");",
          "337:    (*keysp)[i] = k;",
          "338:    if (labelsp)",
          "339:     (*labelsp)[i] = label;",
          "",
          "[Removed Lines]",
          "336:    wrap_key(k);",
          "",
          "[Added Lines]",
          "543:    wrap_key(helper, k);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "354: int",
          "355: pkcs11_del_provider(char *name)",
          "356: {",
          "373: }",
          "",
          "[Removed Lines]",
          "357:  int r, ret = -1;",
          "358:  struct sshbuf *msg;",
          "360:  if ((msg = sshbuf_new()) == NULL)",
          "361:   fatal_f(\"sshbuf_new failed\");",
          "362:  if ((r = sshbuf_put_u8(msg, SSH_AGENTC_REMOVE_SMARTCARD_KEY)) != 0 ||",
          "363:      (r = sshbuf_put_cstring(msg, name)) != 0 ||",
          "364:      (r = sshbuf_put_cstring(msg, \"\")) != 0)",
          "365:   fatal_fr(r, \"compose\");",
          "366:  send_msg(msg);",
          "367:  sshbuf_reset(msg);",
          "369:  if (recv_msg(msg) == SSH_AGENT_SUCCESS)",
          "370:   ret = 0;",
          "371:  sshbuf_free(msg);",
          "372:  return (ret);",
          "",
          "[Added Lines]",
          "564:  struct helper *helper;",
          "570:  debug3_f(\"delete %s\", name);",
          "571:  if ((helper = helper_by_provider(name)) != NULL)",
          "572:   helper_terminate(helper);",
          "573:  return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}