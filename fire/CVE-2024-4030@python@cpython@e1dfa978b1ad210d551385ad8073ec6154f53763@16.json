{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48f3378d6c620e99f17679ee11982a57640d3bb4",
      "candidate_info": {
        "commit_hash": "48f3378d6c620e99f17679ee11982a57640d3bb4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/48f3378d6c620e99f17679ee11982a57640d3bb4",
        "files": [
          "Python/gc_free_threading.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix TSAN race in free-threaded GC (GH-119883) (#119903)\n\nOnly call `gc_restore_tid()` from stop-the-world contexts.\n`worklist_pop()` can be called while other threads are running, so use a\nrelaxed atomic to modify `ob_tid`.\n(cherry picked from commit 60593b2052ca275559c11028d50e19f8e5dfee13)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/gc_free_threading.c||Python/gc_free_threading.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/gc_free_threading.c||Python/gc_free_threading.c": [
          "File: Python/gc_free_threading.c -> Python/gc_free_threading.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     PyObject *op = (PyObject *)worklist->head;",
          "87:     if (op != NULL) {",
          "88:         worklist->head = op->ob_tid;",
          "90:     }",
          "91:     return op;",
          "92: }",
          "",
          "[Removed Lines]",
          "89:         op->ob_tid = 0;",
          "",
          "[Added Lines]",
          "89:         _Py_atomic_store_uintptr_relaxed(&op->ob_tid, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: static void",
          "190: gc_restore_tid(PyObject *op)",
          "191: {",
          "192:     mi_segment_t *segment = _mi_ptr_segment(op);",
          "193:     if (_Py_REF_IS_MERGED(op->ob_ref_shared)) {",
          "194:         op->ob_tid = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     assert(_PyInterpreterState_GET()->stoptheworld.world_stopped);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "676:             Py_DECREF(temp);",
          "677:         }",
          "680:         Py_DECREF(op);  // drop worklist reference",
          "681:     }",
          "682: }",
          "",
          "[Removed Lines]",
          "679:         gc_restore_tid(op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "986: {",
          "987:     PyObject *op;",
          "988:     while ((op = worklist_pop(worklist)) != NULL) {",
          "990:         gc_clear_unreachable(op);",
          "991:         Py_DECREF(op);",
          "992:     }",
          "",
          "[Removed Lines]",
          "989:         gc_restore_tid(op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3d7823ede41f7650ae7a199186cb63f62031441",
      "candidate_info": {
        "commit_hash": "f3d7823ede41f7650ae7a199186cb63f62031441",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f3d7823ede41f7650ae7a199186cb63f62031441",
        "files": [
          "Lib/test/list_tests.py",
          "Lib/test/test_list.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-13-12-17-52.gh-issue-120384.w1UBGl.rst",
          "Objects/listobject.c"
        ],
        "message": "[3.13] gh-120384: Fix array-out-of-bounds crash in `list_ass_subscript` (GH-120442) (#120826)\n\ngh-120384: Fix array-out-of-bounds crash in `list_ass_subscript` (GH-120442)\n(cherry picked from commit 8334a1b55c93068f5d243852029baa83377ff6c9)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/list_tests.py||Lib/test/list_tests.py",
          "Lib/test/test_list.py||Lib/test/test_list.py",
          "Objects/listobject.c||Objects/listobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/list_tests.py||Lib/test/list_tests.py": [
          "File: Lib/test/list_tests.py -> Lib/test/list_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:         self.assertRaises(TypeError, a.__setitem__)",
          "194:     def test_delslice(self):",
          "195:         a = self.type2test([0, 1])",
          "196:         del a[1:2]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     def test_slice_assign_iterator(self):",
          "195:         x = self.type2test(range(5))",
          "196:         x[0:3] = reversed(range(3))",
          "197:         self.assertEqual(x, self.type2test([2, 1, 0, 3, 4]))",
          "199:         x[:] = reversed(range(3))",
          "200:         self.assertEqual(x, self.type2test([2, 1, 0]))",
          "",
          "---------------"
        ],
        "Lib/test/test_list.py||Lib/test/test_list.py": [
          "File: Lib/test/test_list.py -> Lib/test/test_list.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:         with self.assertRaises(TypeError):",
          "246:             a[0] < a",
          "248:     @cpython_only",
          "249:     def test_preallocation(self):",
          "250:         iterable = [0] * 10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:     def test_list_index_modifing_operand(self):",
          "249:         # See gh-120384",
          "250:         class evil:",
          "251:             def __init__(self, lst):",
          "252:                 self.lst = lst",
          "253:             def __iter__(self):",
          "254:                 yield from self.lst",
          "255:                 self.lst.clear()",
          "257:         lst = list(range(5))",
          "258:         operand = evil(lst)",
          "259:         with self.assertRaises(ValueError):",
          "260:             lst[::-1] = operand",
          "",
          "---------------"
        ],
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:     }",
          "3582: }",
          "3584: static int",
          "3585: list_ass_subscript(PyObject* _self, PyObject* item, PyObject* value)",
          "3586: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3584: static Py_ssize_t",
          "3585: adjust_slice_indexes(PyListObject *lst,",
          "3586:                      Py_ssize_t *start, Py_ssize_t *stop,",
          "3587:                      Py_ssize_t step)",
          "3588: {",
          "3589:     Py_ssize_t slicelength = PySlice_AdjustIndices(Py_SIZE(lst), start, stop,",
          "3590:                                                    step);",
          "3594:     if ((step < 0 && *start < *stop) ||",
          "3595:         (step > 0 && *start > *stop))",
          "3598:     return slicelength;",
          "3599: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3594:         return list_ass_item((PyObject *)self, i, value);",
          "3595:     }",
          "3596:     else if (PySlice_Check(item)) {",
          "3599:         if (PySlice_Unpack(item, &start, &stop, &step) < 0) {",
          "3600:             return -1;",
          "3601:         }",
          "3614:         if (value == NULL) {",
          "",
          "[Removed Lines]",
          "3597:         Py_ssize_t start, stop, step, slicelength;",
          "3602:         slicelength = PySlice_AdjustIndices(Py_SIZE(self), &start, &stop,",
          "3603:                                             step);",
          "3605:         if (step == 1)",
          "3606:             return list_ass_slice(self, start, stop, value);",
          "3610:         if ((step < 0 && start < stop) ||",
          "3611:             (step > 0 && start > stop))",
          "3612:             stop = start;",
          "",
          "[Added Lines]",
          "3614:         Py_ssize_t start, stop, step;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3618:             Py_ssize_t i;",
          "3619:             int res;",
          "3621:             if (slicelength <= 0)",
          "3622:                 return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3627:             Py_ssize_t slicelength = adjust_slice_indexes(self, &start, &stop,",
          "3628:                                                           step);",
          "3630:             if (step == 1)",
          "3631:                 return list_ass_slice(self, start, stop, value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3695:             if (!seq)",
          "3696:                 return -1;",
          "3698:             if (PySequence_Fast_GET_SIZE(seq) != slicelength) {",
          "3699:                 PyErr_Format(PyExc_ValueError,",
          "3700:                     \"attempt to assign sequence of \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3710:             Py_ssize_t slicelength = adjust_slice_indexes(self, &start, &stop,",
          "3711:                                                           step);",
          "3713:             if (step == 1) {",
          "3714:                 int res = list_ass_slice(self, start, stop, seq);",
          "3715:                 Py_DECREF(seq);",
          "3716:                 return res;",
          "3717:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cb6c4cd60bec1acbcd960f5e7bd65f78152dbdd",
      "candidate_info": {
        "commit_hash": "3cb6c4cd60bec1acbcd960f5e7bd65f78152dbdd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3cb6c4cd60bec1acbcd960f5e7bd65f78152dbdd",
        "files": [
          "Doc/c-api/init.rst",
          "Doc/whatsnew/3.13.rst",
          "Include/Python.h",
          "Include/cpython/lock.h",
          "Include/cpython/weakrefobject.h",
          "Include/internal/pycore_critical_section.h",
          "Include/internal/pycore_lock.h",
          "Include/internal/pycore_warnings.h",
          "Include/lock.h",
          "Include/object.h",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/C API/2024-04-10-16-48-04.gh-issue-117511.RZtBRK.rst",
          "Modules/_testinternalcapi/test_lock.c",
          "Objects/object.c",
          "PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters",
          "Python/critical_section.c",
          "Python/lock.c"
        ],
        "message": "[3.13] gh-117511: Make PyMutex public in the non-limited API (GH-117731) (#120800)\n\n(cherry picked from commit 3af7263037de1d0ef63b070fc7bfc2cf042eaebe)",
        "before_after_code_files": [
          "Include/Python.h||Include/Python.h",
          "Include/cpython/lock.h||Include/cpython/lock.h",
          "Include/cpython/weakrefobject.h||Include/cpython/weakrefobject.h",
          "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h",
          "Include/internal/pycore_lock.h||Include/internal/pycore_lock.h",
          "Include/internal/pycore_warnings.h||Include/internal/pycore_warnings.h",
          "Include/lock.h||Include/lock.h",
          "Include/object.h||Include/object.h",
          "Makefile.pre.in||Makefile.pre.in",
          "Modules/_testinternalcapi/test_lock.c||Modules/_testinternalcapi/test_lock.c",
          "Objects/object.c||Objects/object.c",
          "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters",
          "Python/critical_section.c||Python/critical_section.c",
          "Python/lock.c||Python/lock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/Python.h||Include/Python.h": [
          "File: Include/Python.h -> Include/Python.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include \"pybuffer.h\"",
          "65: #include \"pystats.h\"",
          "66: #include \"pyatomic.h\"",
          "67: #include \"object.h\"",
          "68: #include \"objimpl.h\"",
          "69: #include \"typeslots.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #include \"lock.h\"",
          "",
          "---------------"
        ],
        "Include/cpython/lock.h||Include/cpython/lock.h": [
          "File: Include/cpython/lock.h -> Include/cpython/lock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef Py_CPYTHON_LOCK_H",
          "2: #  error \"this header file must not be included directly\"",
          "3: #endif",
          "5: #define _Py_UNLOCKED    0",
          "6: #define _Py_LOCKED      1",
          "29: typedef struct PyMutex {",
          "30:     uint8_t _bits;  // (private)",
          "31: } PyMutex;",
          "34: PyAPI_FUNC(void) PyMutex_Lock(PyMutex *m);",
          "37: PyAPI_FUNC(void) PyMutex_Unlock(PyMutex *m);",
          "44: static inline void",
          "45: _PyMutex_Lock(PyMutex *m)",
          "46: {",
          "47:     uint8_t expected = _Py_UNLOCKED;",
          "48:     if (!_Py_atomic_compare_exchange_uint8(&m->_bits, &expected, _Py_LOCKED)) {",
          "49:         PyMutex_Lock(m);",
          "50:     }",
          "51: }",
          "52: #define PyMutex_Lock _PyMutex_Lock",
          "55: static inline void",
          "56: _PyMutex_Unlock(PyMutex *m)",
          "57: {",
          "58:     uint8_t expected = _Py_LOCKED;",
          "59:     if (!_Py_atomic_compare_exchange_uint8(&m->_bits, &expected, _Py_UNLOCKED)) {",
          "60:         PyMutex_Unlock(m);",
          "61:     }",
          "62: }",
          "63: #define PyMutex_Unlock _PyMutex_Unlock",
          "",
          "---------------"
        ],
        "Include/cpython/weakrefobject.h||Include/cpython/weakrefobject.h": [
          "File: Include/cpython/weakrefobject.h -> Include/cpython/weakrefobject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #endif",
          "41: };",
          "",
          "[Removed Lines]",
          "39:     struct _PyMutex *weakrefs_lock;",
          "",
          "[Added Lines]",
          "39:     PyMutex *weakrefs_lock;",
          "",
          "---------------"
        ],
        "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h": [
          "File: Include/internal/pycore_critical_section.h -> Include/internal/pycore_critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: static inline void",
          "203: _PyCriticalSection_Begin(_PyCriticalSection *c, PyMutex *m)",
          "204: {",
          "206:         PyThreadState *tstate = _PyThreadState_GET();",
          "207:         c->mutex = m;",
          "208:         c->prev = tstate->critical_section;",
          "",
          "[Removed Lines]",
          "205:     if (PyMutex_LockFast(&m->v)) {",
          "",
          "[Added Lines]",
          "205:     if (PyMutex_LockFast(&m->_bits)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:         m2 = tmp;",
          "256:     }",
          "260:             PyThreadState *tstate = _PyThreadState_GET();",
          "261:             c->base.mutex = m1;",
          "262:             c->mutex2 = m2;",
          "",
          "[Removed Lines]",
          "258:     if (PyMutex_LockFast(&m1->v)) {",
          "259:         if (PyMutex_LockFast(&m2->v)) {",
          "",
          "[Added Lines]",
          "258:     if (PyMutex_LockFast(&m1->_bits)) {",
          "259:         if (PyMutex_LockFast(&m2->_bits)) {",
          "",
          "---------------"
        ],
        "Include/internal/pycore_lock.h||Include/internal/pycore_lock.h": [
          "File: Include/internal/pycore_lock.h -> Include/internal/pycore_lock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #  error \"this header requires Py_BUILD_CORE define\"",
          "14: #endif",
          "49: #define _Py_HAS_PARKED  2",
          "50: #define _Py_ONCE_INITIALIZED 4",
          "58: static inline int",
          "59: PyMutex_LockFast(uint8_t *lock_bits)",
          "60: {",
          "",
          "[Removed Lines]",
          "41: #ifndef Py_GIL_DISABLED",
          "42: struct _PyMutex { uint8_t v; };",
          "43: #endif",
          "45: typedef struct _PyMutex PyMutex;",
          "47: #define _Py_UNLOCKED    0",
          "48: #define _Py_LOCKED      1",
          "53: PyAPI_FUNC(void) _PyMutex_LockSlow(PyMutex *m);",
          "56: PyAPI_FUNC(void) _PyMutex_UnlockSlow(PyMutex *m);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     return _Py_atomic_compare_exchange_uint8(lock_bits, &expected, _Py_LOCKED);",
          "63: }",
          "90: static inline int",
          "91: PyMutex_IsLocked(PyMutex *m)",
          "92: {",
          "94: }",
          "",
          "[Removed Lines]",
          "70: static inline void",
          "71: PyMutex_Lock(PyMutex *m)",
          "72: {",
          "73:     uint8_t expected = _Py_UNLOCKED;",
          "74:     if (!_Py_atomic_compare_exchange_uint8(&m->v, &expected, _Py_LOCKED)) {",
          "75:         _PyMutex_LockSlow(m);",
          "76:     }",
          "77: }",
          "80: static inline void",
          "81: PyMutex_Unlock(PyMutex *m)",
          "82: {",
          "83:     uint8_t expected = _Py_LOCKED;",
          "84:     if (!_Py_atomic_compare_exchange_uint8(&m->v, &expected, _Py_UNLOCKED)) {",
          "85:         _PyMutex_UnlockSlow(m);",
          "86:     }",
          "87: }",
          "93:     return (_Py_atomic_load_uint8(&m->v) & _Py_LOCKED) != 0;",
          "",
          "[Added Lines]",
          "31:     return (_Py_atomic_load_uint8(&m->_bits) & _Py_LOCKED) != 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121: PyMutex_LockFlags(PyMutex *m, _PyLockFlags flags)",
          "122: {",
          "123:     uint8_t expected = _Py_UNLOCKED;",
          "125:         _PyMutex_LockTimed(m, -1, flags);",
          "126:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "124:     if (!_Py_atomic_compare_exchange_uint8(&m->v, &expected, _Py_LOCKED)) {",
          "",
          "[Added Lines]",
          "62:     if (!_Py_atomic_compare_exchange_uint8(&m->_bits, &expected, _Py_LOCKED)) {",
          "",
          "---------------"
        ],
        "Include/internal/pycore_warnings.h||Include/internal/pycore_warnings.h": [
          "File: Include/internal/pycore_warnings.h -> Include/internal/pycore_warnings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     long filters_version;",
          "19: };",
          "",
          "[Removed Lines]",
          "17:     struct _PyMutex mutex;",
          "",
          "[Added Lines]",
          "17:     PyMutex mutex;",
          "",
          "---------------"
        ],
        "Include/lock.h||Include/lock.h": [
          "File: Include/lock.h -> Include/lock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef Py_LOCK_H",
          "2: #define Py_LOCK_H",
          "3: #ifdef __cplusplus",
          "4: extern \"C\" {",
          "5: #endif",
          "7: #ifndef Py_LIMITED_API",
          "8: #  define Py_CPYTHON_LOCK_H",
          "9: #  include \"cpython/lock.h\"",
          "10: #  undef Py_CPYTHON_LOCK_H",
          "11: #endif",
          "13: #ifdef __cplusplus",
          "14: }",
          "15: #endif",
          "",
          "---------------"
        ],
        "Include/object.h||Include/object.h": [
          "File: Include/object.h -> Include/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: #define _Py_REF_SHARED(refcnt, flags) (((refcnt) << _Py_REF_SHARED_SHIFT) + (flags))",
          "211: struct _object {",
          "215:     uintptr_t ob_tid;",
          "216:     uint16_t _padding;",
          "218:     uint8_t ob_gc_bits;         // gc-related state",
          "219:     uint32_t ob_ref_local;      // local reference count",
          "220:     Py_ssize_t ob_ref_shared;   // shared (atomic) reference count",
          "",
          "[Removed Lines]",
          "209: struct _PyMutex { uint8_t v; };",
          "217:     struct _PyMutex ob_mutex;   // per-object lock",
          "",
          "[Added Lines]",
          "213:     PyMutex ob_mutex;           // per-object lock",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019:   $(srcdir)/Include/intrcheck.h \\",
          "1020:   $(srcdir)/Include/iterobject.h \\",
          "1021:   $(srcdir)/Include/listobject.h \\",
          "1022:   $(srcdir)/Include/longobject.h \\",
          "1023:   $(srcdir)/Include/marshal.h \\",
          "1024:   $(srcdir)/Include/memoryobject.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1022:   $(srcdir)/Include/lock.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1091:   $(srcdir)/Include/cpython/import.h \\",
          "1092:   $(srcdir)/Include/cpython/initconfig.h \\",
          "1093:   $(srcdir)/Include/cpython/listobject.h \\",
          "1094:   $(srcdir)/Include/cpython/longintrepr.h \\",
          "1095:   $(srcdir)/Include/cpython/longobject.h \\",
          "1096:   $(srcdir)/Include/cpython/memoryobject.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:   $(srcdir)/Include/cpython/lock.h \\",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi/test_lock.c||Modules/_testinternalcapi/test_lock.c": [
          "File: Modules/_testinternalcapi/test_lock.c -> Modules/_testinternalcapi/test_lock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     PyMutex_Lock(&m);",
          "40:     PyMutex_Unlock(&m);",
          "43:     Py_RETURN_NONE;",
          "44: }",
          "",
          "[Removed Lines]",
          "39:     assert(m.v == 1);",
          "41:     assert(m.v == 0);",
          "",
          "[Added Lines]",
          "39:     assert(m._bits == 1);",
          "41:     assert(m._bits == 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     _Py_atomic_store_int(&test_data->started, 1);",
          "59:     PyMutex_Lock(m);",
          "62:     PyMutex_Unlock(m);",
          "65:     _PyEvent_Notify(&test_data->done);",
          "66: }",
          "",
          "[Removed Lines]",
          "60:     assert(m->v == 1);",
          "63:     assert(m->v == 0);",
          "",
          "[Added Lines]",
          "60:     assert(m->_bits == 1);",
          "63:     assert(m->_bits == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     memset(&test_data, 0, sizeof(test_data));",
          "75:     PyMutex_Lock(&test_data.m);",
          "78:     PyThread_start_new_thread(lock_thread, &test_data);",
          "",
          "[Removed Lines]",
          "76:     assert(test_data.m.v == 1);",
          "",
          "[Added Lines]",
          "76:     assert(test_data.m._bits == 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:     uint8_t v;",
          "83:     do {",
          "84:         pysleep(10);  // allow some time for the other thread to try to lock",
          "86:         assert(v == 1 || v == 3);",
          "87:         iters++;",
          "88:     } while (v != 3 && iters < 200);",
          "93:     PyMutex_Unlock(&test_data.m);",
          "94:     PyEvent_Wait(&test_data.done);",
          "97:     Py_RETURN_NONE;",
          "98: }",
          "",
          "[Removed Lines]",
          "85:         v = _Py_atomic_load_uint8_relaxed(&test_data.m.v);",
          "91:     assert(test_data.m.v == 3);",
          "95:     assert(test_data.m.v == 0);",
          "",
          "[Added Lines]",
          "85:         v = _Py_atomic_load_uint8_relaxed(&test_data.m._bits);",
          "91:     assert(test_data.m._bits == 3);",
          "95:     assert(test_data.m._bits == 0);",
          "",
          "---------------"
        ],
        "Objects/object.c||Objects/object.c": [
          "File: Objects/object.c -> Objects/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2376: #else",
          "2377:     op->ob_tid = _Py_ThreadId();",
          "2378:     op->_padding = 0;",
          "2380:     op->ob_gc_bits = 0;",
          "2381:     op->ob_ref_local = 1;",
          "2382:     op->ob_ref_shared = 0;",
          "",
          "[Removed Lines]",
          "2379:     op->ob_mutex = (struct _PyMutex){ 0 };",
          "",
          "[Added Lines]",
          "2379:     op->ob_mutex = (PyMutex){ 0 };",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj": [
          "File: PCbuild/pythoncore.vcxproj -> PCbuild/pythoncore.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     <ClInclude Include=\"..\\Include\\cpython\\import.h\" />",
          "157:     <ClInclude Include=\"..\\Include\\cpython\\initconfig.h\" />",
          "158:     <ClInclude Include=\"..\\Include\\cpython\\listobject.h\" />",
          "159:     <ClInclude Include=\"..\\Include\\cpython\\longintrepr.h\" />",
          "160:     <ClInclude Include=\"..\\Include\\cpython\\longobject.h\" />",
          "161:     <ClInclude Include=\"..\\Include\\cpython\\memoryobject.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:     <ClInclude Include=\"..\\Include\\cpython\\lock.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:     <ClInclude Include=\"..\\Include\\intrcheck.h\" />",
          "311:     <ClInclude Include=\"..\\Include\\iterobject.h\" />",
          "312:     <ClInclude Include=\"..\\Include\\listobject.h\" />",
          "313:     <ClInclude Include=\"..\\Include\\longobject.h\" />",
          "314:     <ClInclude Include=\"..\\Include\\marshal.h\" />",
          "315:     <ClInclude Include=\"..\\Include\\memoryobject.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     <ClInclude Include=\"..\\Include\\lock.h\" />",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters": [
          "File: PCbuild/pythoncore.vcxproj.filters -> PCbuild/pythoncore.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     <ClInclude Include=\"..\\Include\\listobject.h\">",
          "115:       <Filter>Include</Filter>",
          "116:     </ClInclude>",
          "117:     <ClInclude Include=\"..\\Include\\longobject.h\">",
          "118:       <Filter>Include</Filter>",
          "119:     </ClInclude>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     <ClInclude Include=\"..\\Include\\lock.h\">",
          "118:       <Filter>Include</Filter>",
          "119:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:     <ClInclude Include=\"..\\Include\\cpython\\listobject.h\">",
          "394:       <Filter>Include\\cpython</Filter>",
          "395:     </ClInclude>",
          "396:     <ClInclude Include=\"..\\Include\\cpython\\longintrepr.h\">",
          "397:       <Filter>Include</Filter>",
          "398:     </ClInclude>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     <ClInclude Include=\"..\\Include\\cpython\\lock.h\">",
          "400:       <Filter>Include</Filter>",
          "401:     </ClInclude>",
          "",
          "---------------"
        ],
        "Python/critical_section.c||Python/critical_section.c": [
          "File: Python/critical_section.c -> Python/critical_section.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     c->prev = (uintptr_t)tstate->critical_section;",
          "15:     tstate->critical_section = (uintptr_t)c;",
          "18:     c->mutex = m;",
          "19: }",
          "",
          "[Removed Lines]",
          "17:     _PyMutex_LockSlow(m);",
          "",
          "[Added Lines]",
          "17:     PyMutex_Lock(m);",
          "",
          "---------------"
        ],
        "Python/lock.c||Python/lock.c": [
          "File: Python/lock.c -> Python/lock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #endif",
          "48: }",
          "56: PyLockStatus",
          "57: _PyMutex_LockTimed(PyMutex *m, PyTime_t timeout, _PyLockFlags flags)",
          "58: {",
          "60:     if ((v & _Py_LOCKED) == 0) {",
          "62:             return PY_LOCK_ACQUIRED;",
          "63:         }",
          "64:     }",
          "",
          "[Removed Lines]",
          "50: void",
          "51: _PyMutex_LockSlow(PyMutex *m)",
          "52: {",
          "53:     _PyMutex_LockTimed(m, -1, _PY_LOCK_DETACH);",
          "54: }",
          "59:     uint8_t v = _Py_atomic_load_uint8_relaxed(&m->v);",
          "61:         if (_Py_atomic_compare_exchange_uint8(&m->v, &v, v|_Py_LOCKED)) {",
          "",
          "[Added Lines]",
          "53:     uint8_t v = _Py_atomic_load_uint8_relaxed(&m->_bits);",
          "55:         if (_Py_atomic_compare_exchange_uint8(&m->_bits, &v, v|_Py_LOCKED)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     for (;;) {",
          "84:         if ((v & _Py_LOCKED) == 0) {",
          "87:                 return PY_LOCK_ACQUIRED;",
          "88:             }",
          "89:             continue;",
          "",
          "[Removed Lines]",
          "86:             if (_Py_atomic_compare_exchange_uint8(&m->v, &v, v|_Py_LOCKED)) {",
          "",
          "[Added Lines]",
          "80:             if (_Py_atomic_compare_exchange_uint8(&m->_bits, &v, v|_Py_LOCKED)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:         if (!(v & _Py_HAS_PARKED)) {",
          "106:             newv = v | _Py_HAS_PARKED;",
          "108:                 continue;",
          "109:             }",
          "110:         }",
          "113:                                      &entry, (flags & _PY_LOCK_DETACH) != 0);",
          "114:         if (ret == Py_PARK_OK) {",
          "115:             if (entry.handed_off) {",
          "118:                 return PY_LOCK_ACQUIRED;",
          "119:             }",
          "120:         }",
          "",
          "[Removed Lines]",
          "107:             if (!_Py_atomic_compare_exchange_uint8(&m->v, &v, newv)) {",
          "112:         int ret = _PyParkingLot_Park(&m->v, &newv, sizeof(newv), timeout,",
          "117:                 assert(_Py_atomic_load_uint8_relaxed(&m->v) & _Py_LOCKED);",
          "",
          "[Added Lines]",
          "101:             if (!_Py_atomic_compare_exchange_uint8(&m->_bits, &v, newv)) {",
          "106:         int ret = _PyParkingLot_Park(&m->_bits, &newv, sizeof(newv), timeout,",
          "111:                 assert(_Py_atomic_load_uint8_relaxed(&m->_bits) & _Py_LOCKED);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:             }",
          "137:         }",
          "140:     }",
          "141: }",
          "",
          "[Removed Lines]",
          "139:         v = _Py_atomic_load_uint8_relaxed(&m->v);",
          "",
          "[Added Lines]",
          "133:         v = _Py_atomic_load_uint8_relaxed(&m->_bits);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:             v |= _Py_HAS_PARKED;",
          "159:         }",
          "160:     }",
          "162: }",
          "164: int",
          "165: _PyMutex_TryUnlock(PyMutex *m)",
          "166: {",
          "168:     for (;;) {",
          "169:         if ((v & _Py_LOCKED) == 0) {",
          "",
          "[Removed Lines]",
          "161:     _Py_atomic_store_uint8(&m->v, v);",
          "167:     uint8_t v = _Py_atomic_load_uint8(&m->v);",
          "",
          "[Added Lines]",
          "155:     _Py_atomic_store_uint8(&m->_bits, v);",
          "161:     uint8_t v = _Py_atomic_load_uint8(&m->_bits);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:         }",
          "173:         else if ((v & _Py_HAS_PARKED)) {",
          "176:             return 0;",
          "177:         }",
          "180:             return 0;",
          "181:         }",
          "182:     }",
          "183: }",
          "195: struct raw_mutex_entry {",
          "",
          "[Removed Lines]",
          "175:             _PyParkingLot_Unpark(&m->v, (_Py_unpark_fn_t *)mutex_unpark, m);",
          "178:         else if (_Py_atomic_compare_exchange_uint8(&m->v, &v, _Py_UNLOCKED)) {",
          "185: void",
          "186: _PyMutex_UnlockSlow(PyMutex *m)",
          "187: {",
          "188:     if (_PyMutex_TryUnlock(m) < 0) {",
          "189:         Py_FatalError(\"unlocking mutex that is not locked\");",
          "190:     }",
          "191: }",
          "",
          "[Added Lines]",
          "169:             _PyParkingLot_Unpark(&m->_bits, (_Py_unpark_fn_t *)mutex_unpark, m);",
          "172:         else if (_Py_atomic_compare_exchange_uint8(&m->_bits, &v, _Py_UNLOCKED)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "585:      return 0;",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574: #undef PyMutex_Lock",
          "575: void",
          "576: PyMutex_Lock(PyMutex *m)",
          "577: {",
          "578:     _PyMutex_LockTimed(m, -1, _PY_LOCK_DETACH);",
          "579: }",
          "581: #undef PyMutex_Unlock",
          "582: void",
          "583: PyMutex_Unlock(PyMutex *m)",
          "584: {",
          "585:     if (_PyMutex_TryUnlock(m) < 0) {",
          "586:         Py_FatalError(\"unlocking mutex that is not locked\");",
          "587:     }",
          "588: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a77058b7971ba140c1f9db443e536ea5f1d71aa",
      "candidate_info": {
        "commit_hash": "0a77058b7971ba140c1f9db443e536ea5f1d71aa",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0a77058b7971ba140c1f9db443e536ea5f1d71aa",
        "files": [
          "Doc/c-api/dict.rst",
          "Doc/howto/free-threading-extensions.rst",
          "Misc/NEWS.d/next/C API/2024-06-21-16-41-21.gh-issue-120858.Z5_-Mn.rst",
          "Objects/dictobject.c"
        ],
        "message": "[3.13] gh-120858: PyDict_Next should not lock the dict (GH-120859) (#120964)\n\nPyDict_Next no longer locks the dictionary in the free-threaded build. Locking\naround individual PyDict_Next calls is not sufficient because the function\nreturns borrowed references and because it allows concurrent modifications\nduring the iteraiton loop.\n\nThe internal locking also interferes with correct external synchronization\nbecause it may suspend outer critical sections created by the caller.\n(cherry picked from commit 375b723d5873f948696c7e85a97f4778d9e00ff0)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/dictobject.c||Objects/dictobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/dictobject.c||Objects/dictobject.c": [
          "File: Objects/dictobject.c -> Objects/dictobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2801:     if (!PyDict_Check(op))",
          "2802:         return 0;",
          "2806:     mp = (PyDictObject *)op;",
          "2807:     i = *ppos;",
          "2808:     if (_PyDict_HasSplitTable(mp)) {",
          "",
          "[Removed Lines]",
          "2804:     ASSERT_DICT_LOCKED(op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2875: int",
          "2876: PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey, PyObject **pvalue)",
          "2877: {",
          "2883: }",
          "",
          "[Removed Lines]",
          "2878:     int res;",
          "2879:     Py_BEGIN_CRITICAL_SECTION(op);",
          "2880:     res = _PyDict_Next(op, ppos, pkey, pvalue, NULL);",
          "2881:     Py_END_CRITICAL_SECTION();",
          "2882:     return res;",
          "",
          "[Added Lines]",
          "2876:     return _PyDict_Next(op, ppos, pkey, pvalue, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
      "candidate_info": {
        "commit_hash": "6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
        "files": [
          "Modules/_testinternalcapi/test_critical_sections.c"
        ],
        "message": "[3.13] gh-120584: Fix \"unused thread_critical_sections\" warning in `test_critical_sections` (GH-120585) (#120592)\n\ngh-120584: Fix \"unused thread_critical_sections\" warning in `test_critical_sections` (GH-120585)\n(cherry picked from commit b337aefd3e44f5c8e38cd282273359d07cce6126)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c": [
          "File: Modules/_testinternalcapi/test_critical_sections.c -> Modules/_testinternalcapi/test_critical_sections.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     Py_RETURN_NONE;",
          "131: }",
          "133: struct test_data {",
          "134:     PyObject *obj1;",
          "135:     PyObject *obj2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: #ifdef Py_CAN_START_THREADS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     }",
          "171: }",
          "174: static PyObject *",
          "175: test_critical_sections_threads(PyObject *self, PyObject *Py_UNUSED(args))",
          "176: {",
          "",
          "[Removed Lines]",
          "173: #ifdef Py_CAN_START_THREADS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}