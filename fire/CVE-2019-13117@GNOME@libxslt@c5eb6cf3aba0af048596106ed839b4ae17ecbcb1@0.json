{
  "cve_id": "CVE-2019-13117",
  "cve_desc": "In numbers.c in libxslt 1.1.33, an xsl:number with certain format strings could lead to a uninitialized read in xsltNumberFormatInsertNumbers. This could allow an attacker to discern whether a byte on the stack contains the characters A, a, I, i, or 0, or any other character.",
  "repo": "GNOME/libxslt",
  "patch_hash": "c5eb6cf3aba0af048596106ed839b4ae17ecbcb1",
  "patch_info": {
    "commit_hash": "c5eb6cf3aba0af048596106ed839b4ae17ecbcb1",
    "repo": "GNOME/libxslt",
    "commit_url": "https://github.com/GNOME/libxslt/commit/c5eb6cf3aba0af048596106ed839b4ae17ecbcb1",
    "files": [
      "libxslt/numbers.c"
    ],
    "message": "Fix uninitialized read of xsl:number token\n\nFound by OSS-Fuzz.",
    "before_after_code_files": [
      "libxslt/numbers.c||libxslt/numbers.c"
    ]
  },
  "patch_diff": {
    "libxslt/numbers.c||libxslt/numbers.c": [
      "File: libxslt/numbers.c -> libxslt/numbers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "382:   tokens->tokens[tokens->nTokens].token = val - 1;",
      "383:   ix += len;",
      "384:   val = xmlStringCurrentChar(NULL, format+ix, &len);",
      "386:  } else if ( (val == (xmlChar)'A') ||",
      "387:       (val == (xmlChar)'a') ||",
      "388:       (val == (xmlChar)'I') ||",
      "",
      "[Removed Lines]",
      "385:      }",
      "",
      "[Added Lines]",
      "385:      } else {",
      "386:                 tokens->tokens[tokens->nTokens].token = (xmlChar)'0';",
      "387:                 tokens->tokens[tokens->nTokens].width = 1;",
      "388:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de6d869a8ef5ca327231fb73489f4c9024d8757a",
      "candidate_info": {
        "commit_hash": "de6d869a8ef5ca327231fb73489f4c9024d8757a",
        "repo": "GNOME/libxslt",
        "commit_url": "https://github.com/GNOME/libxslt/commit/de6d869a8ef5ca327231fb73489f4c9024d8757a",
        "files": [
          "libxslt/numbers.c",
          "tests/docs/bug-219.xml",
          "tests/general/bug-219.out",
          "tests/general/bug-219.xsl"
        ],
        "message": "Fix numbering in non-Latin scripts\n\nThe `token` type wasn't wide enough to hold a Unicode code point.",
        "before_after_code_files": [
          "libxslt/numbers.c||libxslt/numbers.c",
          "tests/general/bug-219.xsl||tests/general/bug-219.xsl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libxslt/numbers.c||libxslt/numbers.c"
          ],
          "candidate": [
            "libxslt/numbers.c||libxslt/numbers.c"
          ]
        }
      },
      "candidate_diff": {
        "libxslt/numbers.c||libxslt/numbers.c": [
          "File: libxslt/numbers.c -> libxslt/numbers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #define SYMBOL_QUOTE  ((xmlChar)'\\'')",
          "40: #define DEFAULT_SEPARATOR \".\"",
          "42: #define MAX_TOKENS  1024",
          "",
          "[Removed Lines]",
          "39: #define DEFAULT_TOKEN  (xmlChar)'0'",
          "",
          "[Added Lines]",
          "39: #define DEFAULT_TOKEN  '0'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: typedef xsltFormatToken *xsltFormatTokenPtr;",
          "46: struct _xsltFormatToken {",
          "47:     xmlChar *separator;",
          "49:     int   width;",
          "50: };",
          "",
          "[Removed Lines]",
          "48:     xmlChar  token;",
          "",
          "[Added Lines]",
          "48:     int   token;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:      (xsltUTF8Charcmp((letter), (self)->patternSeparator) == 0))",
          "109: #define IS_DIGIT_ZERO(x) xsltIsDigitZero(x)",
          "112: static int",
          "113: xsltIsDigitZero(unsigned int ch)",
          "114: {",
          "118:     switch (ch) {",
          "119:     case 0x0030: case 0x0660: case 0x06F0: case 0x0966:",
          "120:     case 0x09E6: case 0x0A66: case 0x0AE6: case 0x0B66:",
          "121:     case 0x0C66: case 0x0CE6: case 0x0D66: case 0x0E50:",
          "124:  return TRUE;",
          "125:     default:",
          "126:  return FALSE;",
          "",
          "[Removed Lines]",
          "110: #define IS_DIGIT_ONE(x) xsltIsDigitZero((xmlChar)(x)-1)",
          "122:     case 0x0E60: case 0x0F20: case 0x1040: case 0x17E0:",
          "123:     case 0x1810: case 0xFF10:",
          "",
          "[Added Lines]",
          "110: #define IS_DIGIT_ONE(x) xsltIsDigitZero((x)-1)",
          "125:     case 0x0ED0: case 0x0F20:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "383:   ix += len;",
          "384:   val = xmlStringCurrentChar(NULL, format+ix, &len);",
          "385:      } else {",
          "387:                 tokens->tokens[tokens->nTokens].width = 1;",
          "388:             }",
          "393:      tokens->tokens[tokens->nTokens].token = val;",
          "394:      ix += len;",
          "395:      val = xmlStringCurrentChar(NULL, format+ix, &len);",
          "",
          "[Removed Lines]",
          "386:                 tokens->tokens[tokens->nTokens].token = (xmlChar)'0';",
          "389:  } else if ( (val == (xmlChar)'A') ||",
          "390:       (val == (xmlChar)'a') ||",
          "391:       (val == (xmlChar)'I') ||",
          "392:       (val == (xmlChar)'i') ) {",
          "",
          "[Added Lines]",
          "388:                 tokens->tokens[tokens->nTokens].token = '0';",
          "391:  } else if ( (val == 'A') ||",
          "392:       (val == 'a') ||",
          "393:       (val == 'I') ||",
          "394:       (val == 'i') ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "404:      tokens->tokens[tokens->nTokens].width = 1;",
          "405:  }",
          "",
          "[Removed Lines]",
          "403:      tokens->tokens[tokens->nTokens].token = (xmlChar)'0';",
          "",
          "[Added Lines]",
          "405:      tokens->tokens[tokens->nTokens].token = '0';",
          "",
          "---------------"
        ],
        "tests/general/bug-219.xsl||tests/general/bug-219.xsl": [
          "File: tests/general/bug-219.xsl -> tests/general/bug-219.xsl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">",
          "2:     <xsl:output indent=\"yes\"/>",
          "3:     <xsl:template match=\"test\">",
          "4:         <results>",
          "5:             <xsl:for-each select=\"formats/format\">",
          "6:                 <format f=\"{.}\">",
          "7:                     <xsl:variable name=\"f\" select=\".\"/>",
          "8:                     <xsl:for-each select=\"/test/values/value\">",
          "9:                         <value v=\"{.}\">",
          "10:                             <xsl:number value=\".\" format=\"{$f}\"/>",
          "11:                         </value>",
          "12:                     </xsl:for-each>",
          "13:                 </format>",
          "14:             </xsl:for-each>",
          "15:         </results>",
          "16:     </xsl:template>",
          "17: </xsl:stylesheet>",
          "",
          "---------------"
        ]
      }
    }
  ]
}