{
  "cve_id": "CVE-2017-13006",
  "cve_desc": "The L2TP parser in tcpdump before 4.9.2 has a buffer over-read in print-l2tp.c, several functions.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "cc4a7391c616be7a64ed65742ef9ed3f106eb165",
  "patch_info": {
    "commit_hash": "cc4a7391c616be7a64ed65742ef9ed3f106eb165",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/cc4a7391c616be7a64ed65742ef9ed3f106eb165",
    "files": [
      "print-l2tp.c",
      "tests/TESTLIST",
      "tests/l2tp-avp-overflow.out",
      "tests/l2tp-avp-overflow.pcap"
    ],
    "message": "CVE-2017-13006/L2TP: Check whether an AVP's content exceeds the AVP length.\n\nIt's not good enough to check whether all the data specified by the AVP\nlength was captured - you also have to check whether that length is\nlarge enough for all the required data in the AVP.\n\nThis fixes a buffer over-read discovered by Yannick Formaggio.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-l2tp.c||print-l2tp.c"
    ]
  },
  "patch_diff": {
    "print-l2tp.c||print-l2tp.c": [
      "File: print-l2tp.c -> print-l2tp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "299: static void",
      "301: {",
      "302:  const uint16_t *ptr = (const uint16_t *)dat;",
      "304:  ND_PRINT((ndo, \"%s\", tok2str(l2tp_msgtype2str, \"MSGTYPE-#%u\",",
      "305:      EXTRACT_16BITS(ptr))));",
      "306: }",
      "",
      "[Removed Lines]",
      "300: l2tp_msgtype_print(netdissect_options *ndo, const u_char *dat)",
      "",
      "[Added Lines]",
      "300: l2tp_msgtype_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "304:  if (length < 2) {",
      "305:   ND_PRINT((ndo, \"AVP too short\"));",
      "306:   return;",
      "307:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "310: {",
      "311:  const uint16_t *ptr = (const uint16_t *)dat;",
      "316:  }",
      "320:  }",
      "321: }",
      "323: static void",
      "325: {",
      "326:  ND_PRINT((ndo, \"%u.%u\", (EXTRACT_16BITS(dat) >> 8),",
      "327:      (EXTRACT_16BITS(dat) & 0xff)));",
      "328: }",
      "330: static void",
      "332: {",
      "333:  const uint32_t *ptr = (const uint32_t *)dat;",
      "335:  if (EXTRACT_32BITS(ptr) &  L2TP_FRAMING_CAP_ASYNC_MASK) {",
      "336:   ND_PRINT((ndo, \"A\"));",
      "337:  }",
      "",
      "[Removed Lines]",
      "315:          ND_PRINT((ndo, \"/%u\", EXTRACT_16BITS(ptr))); ptr++;",
      "318:   ND_PRINT((ndo, \" \"));",
      "319:   print_string(ndo, (const u_char *)ptr, length - 4);",
      "324: l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat)",
      "331: l2tp_framing_cap_print(netdissect_options *ndo, const u_char *dat)",
      "",
      "[Added Lines]",
      "318:  if (length < 2) {",
      "319:   ND_PRINT((ndo, \"AVP too short\"));",
      "320:   return;",
      "322:  ND_PRINT((ndo, \"%u\", EXTRACT_16BITS(ptr)));",
      "323:  ptr++;",
      "324:  length -= 2;",
      "327:  if (length == 0)",
      "328:   return;",
      "329:  if (length < 2) {",
      "330:   ND_PRINT((ndo, \" AVP too short\"));",
      "331:   return;",
      "333:  ND_PRINT((ndo, \"/%u\", EXTRACT_16BITS(ptr)));",
      "334:  ptr++;",
      "335:  length -= 2;",
      "338:  if (length == 0)",
      "339:   return;",
      "340:  ND_PRINT((ndo, \" \"));",
      "341:  print_string(ndo, (const u_char *)ptr, length);",
      "345: l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat, u_int length)",
      "347:  if (length < 2) {",
      "348:   ND_PRINT((ndo, \"AVP too short\"));",
      "349:   return;",
      "350:  }",
      "356: l2tp_framing_cap_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "360:  if (length < 4) {",
      "361:   ND_PRINT((ndo, \"AVP too short\"));",
      "362:   return;",
      "363:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "341: }",
      "343: static void",
      "345: {",
      "346:  const uint32_t *ptr = (const uint32_t *)dat;",
      "348:  if (EXTRACT_32BITS(ptr) &  L2TP_BEARER_CAP_ANALOG_MASK) {",
      "349:   ND_PRINT((ndo, \"A\"));",
      "350:  }",
      "",
      "[Removed Lines]",
      "344: l2tp_bearer_cap_print(netdissect_options *ndo, const u_char *dat)",
      "",
      "[Added Lines]",
      "373: l2tp_bearer_cap_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "377:  if (length < 4) {",
      "378:   ND_PRINT((ndo, \"AVP too short\"));",
      "379:   return;",
      "380:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "356: static void",
      "357: l2tp_q931_cc_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "358: {",
      "359:  print_16bits_val(ndo, (const uint16_t *)dat);",
      "360:  ND_PRINT((ndo, \", %02x\", dat[2]));",
      "362:   ND_PRINT((ndo, \" \"));",
      "364:  }",
      "365: }",
      "367: static void",
      "369: {",
      "370:  const uint32_t *ptr = (const uint32_t *)dat;",
      "372:  if (EXTRACT_32BITS(ptr) &  L2TP_BEARER_TYPE_ANALOG_MASK) {",
      "373:   ND_PRINT((ndo, \"A\"));",
      "374:  }",
      "",
      "[Removed Lines]",
      "361:  if (length > 3) {",
      "363:   print_string(ndo, dat+3, length-3);",
      "368: l2tp_bearer_type_print(netdissect_options *ndo, const u_char *dat)",
      "",
      "[Added Lines]",
      "392:  if (length < 3) {",
      "393:   ND_PRINT((ndo, \"AVP too short\"));",
      "394:   return;",
      "395:  }",
      "398:  dat += 3;",
      "399:  length -= 3;",
      "400:  if (length != 0) {",
      "402:   print_string(ndo, dat, length);",
      "407: l2tp_bearer_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "411:  if (length < 4) {",
      "412:   ND_PRINT((ndo, \"AVP too short\"));",
      "413:   return;",
      "414:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "378: }",
      "380: static void",
      "382: {",
      "383:  const uint32_t *ptr = (const uint32_t *)dat;",
      "385:  if (EXTRACT_32BITS(ptr) &  L2TP_FRAMING_TYPE_ASYNC_MASK) {",
      "386:   ND_PRINT((ndo, \"A\"));",
      "387:  }",
      "",
      "[Removed Lines]",
      "381: l2tp_framing_type_print(netdissect_options *ndo, const u_char *dat)",
      "",
      "[Added Lines]",
      "424: l2tp_framing_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "428:  if (length < 4) {",
      "429:   ND_PRINT((ndo, \"AVP too short\"));",
      "430:   return;",
      "431:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "397: }",
      "399: static void",
      "401: {",
      "402:  const uint16_t *ptr = (const uint16_t *)dat;",
      "404:  ND_PRINT((ndo, \"%s\", tok2str(l2tp_authentype2str,",
      "405:         \"AuthType-#%u\", EXTRACT_16BITS(ptr))));",
      "406: }",
      "408: static void",
      "410: {",
      "411:  const uint16_t *ptr = (const uint16_t *)dat;",
      "413:  ND_PRINT((ndo, \"%u\", EXTRACT_16BITS(ptr) & L2TP_PROXY_AUTH_ID_MASK));",
      "414: }",
      "416: static void",
      "418: {",
      "419:  const uint16_t *ptr = (const uint16_t *)dat;",
      "420:  uint16_t val_h, val_l;",
      "426:  ND_PRINT((ndo, \"CRCErr=%u \", (val_h<<16) + val_l));",
      "430:  ND_PRINT((ndo, \"FrameErr=%u \", (val_h<<16) + val_l));",
      "434:  ND_PRINT((ndo, \"HardOver=%u \", (val_h<<16) + val_l));",
      "438:  ND_PRINT((ndo, \"BufOver=%u \", (val_h<<16) + val_l));",
      "442:  ND_PRINT((ndo, \"Timeout=%u \", (val_h<<16) + val_l));",
      "444:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "445:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "446:  ND_PRINT((ndo, \"AlignErr=%u \", (val_h<<16) + val_l));",
      "447: }",
      "449: static void",
      "451: {",
      "452:  const uint16_t *ptr = (const uint16_t *)dat;",
      "453:  uint16_t val_h, val_l;",
      "459:  ND_PRINT((ndo, \"send=%08x \", (val_h<<16) + val_l));",
      "461:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "462:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "463:  ND_PRINT((ndo, \"recv=%08x \", (val_h<<16) + val_l));",
      "",
      "[Removed Lines]",
      "400: l2tp_proxy_auth_type_print(netdissect_options *ndo, const u_char *dat)",
      "409: l2tp_proxy_auth_id_print(netdissect_options *ndo, const u_char *dat)",
      "417: l2tp_call_errors_print(netdissect_options *ndo, const u_char *dat)",
      "424:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "425:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "428:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "429:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "432:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "433:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "436:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "437:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "440:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "441:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "450: l2tp_accm_print(netdissect_options *ndo, const u_char *dat)",
      "457:  val_h = EXTRACT_16BITS(ptr); ptr++;",
      "458:  val_l = EXTRACT_16BITS(ptr); ptr++;",
      "",
      "[Added Lines]",
      "447: l2tp_proxy_auth_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "451:  if (length < 2) {",
      "452:   ND_PRINT((ndo, \"AVP too short\"));",
      "453:   return;",
      "454:  }",
      "460: l2tp_proxy_auth_id_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "464:  if (length < 2) {",
      "465:   ND_PRINT((ndo, \"AVP too short\"));",
      "466:   return;",
      "467:  }",
      "472: l2tp_call_errors_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "477:  if (length < 2) {",
      "478:   ND_PRINT((ndo, \"AVP too short\"));",
      "479:   return;",
      "480:  }",
      "482:  length -= 2;",
      "484:  if (length < 4) {",
      "485:   ND_PRINT((ndo, \"AVP too short\"));",
      "486:   return;",
      "487:  }",
      "488:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "489:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "492:  if (length < 4) {",
      "493:   ND_PRINT((ndo, \"AVP too short\"));",
      "494:   return;",
      "495:  }",
      "496:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "497:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "500:  if (length < 4) {",
      "501:   ND_PRINT((ndo, \"AVP too short\"));",
      "502:   return;",
      "503:  }",
      "504:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "505:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "508:  if (length < 4) {",
      "509:   ND_PRINT((ndo, \"AVP too short\"));",
      "510:   return;",
      "511:  }",
      "512:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "513:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "516:  if (length < 4) {",
      "517:   ND_PRINT((ndo, \"AVP too short\"));",
      "518:   return;",
      "519:  }",
      "520:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "521:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "524:  if (length < 4) {",
      "525:   ND_PRINT((ndo, \"AVP too short\"));",
      "526:   return;",
      "527:  }",
      "534: l2tp_accm_print(netdissect_options *ndo, const u_char *dat, u_int length)",
      "539:  if (length < 2) {",
      "540:   ND_PRINT((ndo, \"AVP too short\"));",
      "541:   return;",
      "542:  }",
      "544:  length -= 2;",
      "546:  if (length < 4) {",
      "547:   ND_PRINT((ndo, \"AVP too short\"));",
      "548:   return;",
      "549:  }",
      "550:  val_h = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "551:  val_l = EXTRACT_16BITS(ptr); ptr++; length -= 2;",
      "554:  if (length < 4) {",
      "555:   ND_PRINT((ndo, \"AVP too short\"));",
      "556:   return;",
      "557:  }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "468: {",
      "469:  const uint16_t *ptr = (const uint16_t *)dat;",
      "473:  ND_PRINT((ndo, \"%s\", tok2str(l2tp_cc_direction2str,",
      "477:   ND_PRINT((ndo, \" \"));",
      "479:  }",
      "480: }",
      "",
      "[Removed Lines]",
      "474:         \"Direction-#%u\", *((const u_char *)ptr++))));",
      "476:  if (length > 5) {",
      "478:   print_string(ndo, (const u_char *)ptr, length-5);",
      "",
      "[Added Lines]",
      "568:  if (length < 5) {",
      "569:   ND_PRINT((ndo, \"AVP too short\"));",
      "570:   return;",
      "571:  }",
      "573:  ND_PRINT((ndo, \"%04x, \", EXTRACT_16BITS(dat)));",
      "574:  dat += 2;",
      "575:  length -= 2;",
      "577:  ND_PRINT((ndo, \"%04x \",  EXTRACT_16BITS(dat)));",
      "578:  dat += 2;",
      "579:  length -= 2;",
      "582:         \"Direction-#%u\", EXTRACT_8BITS(ptr))));",
      "583:  ptr++;",
      "584:  length--;",
      "586:  if (length != 0) {",
      "588:   print_string(ndo, (const u_char *)ptr, length);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "537:   } else {",
      "538:    switch (attr_type) {",
      "539:    case L2TP_AVP_MSGTYPE:",
      "541:     break;",
      "542:    case L2TP_AVP_RESULT_CODE:",
      "543:     l2tp_result_code_print(ndo, (const u_char *)ptr, len-6);",
      "544:     break;",
      "545:    case L2TP_AVP_PROTO_VER:",
      "547:     break;",
      "548:    case L2TP_AVP_FRAMING_CAP:",
      "550:     break;",
      "551:    case L2TP_AVP_BEARER_CAP:",
      "553:     break;",
      "554:    case L2TP_AVP_TIE_BREAKER:",
      "555:     print_octets(ndo, (const u_char *)ptr, 8);",
      "556:     break;",
      "557:    case L2TP_AVP_FIRM_VER:",
      "558:    case L2TP_AVP_ASSND_TUN_ID:",
      "559:    case L2TP_AVP_RECV_WIN_SIZE:",
      "560:    case L2TP_AVP_ASSND_SESS_ID:",
      "561:     print_16bits_val(ndo, ptr);",
      "562:     break;",
      "563:    case L2TP_AVP_HOST_NAME:",
      "",
      "[Removed Lines]",
      "540:     l2tp_msgtype_print(ndo, (const u_char *)ptr);",
      "546:     l2tp_proto_ver_print(ndo, ptr);",
      "549:     l2tp_framing_cap_print(ndo, (const u_char *)ptr);",
      "552:     l2tp_bearer_cap_print(ndo, (const u_char *)ptr);",
      "",
      "[Added Lines]",
      "655:     l2tp_msgtype_print(ndo, (const u_char *)ptr, len-6);",
      "661:     l2tp_proto_ver_print(ndo, ptr, len-6);",
      "664:     l2tp_framing_cap_print(ndo, (const u_char *)ptr, len-6);",
      "667:     l2tp_bearer_cap_print(ndo, (const u_char *)ptr, len-6);",
      "670:     if (len-6 < 8) {",
      "671:      ND_PRINT((ndo, \"AVP too short\"));",
      "672:      break;",
      "673:     }",
      "680:     if (len-6 < 2) {",
      "681:      ND_PRINT((ndo, \"AVP too short\"));",
      "682:      break;",
      "683:     }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "582:     l2tp_q931_cc_print(ndo, (const u_char *)ptr, len-6);",
      "583:     break;",
      "584:    case L2TP_AVP_CHALLENGE_RESP:",
      "585:     print_octets(ndo, (const u_char *)ptr, 16);",
      "586:     break;",
      "587:    case L2TP_AVP_CALL_SER_NUM:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     if (len-6 < 16) {",
      "709:      ND_PRINT((ndo, \"AVP too short\"));",
      "710:      break;",
      "711:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "590:    case L2TP_AVP_TX_CONN_SPEED:",
      "591:    case L2TP_AVP_PHY_CHANNEL_ID:",
      "592:    case L2TP_AVP_RX_CONN_SPEED:",
      "593:     print_32bits_val(ndo, (const uint32_t *)ptr);",
      "594:     break;",
      "595:    case L2TP_AVP_BEARER_TYPE:",
      "597:     break;",
      "598:    case L2TP_AVP_FRAMING_TYPE:",
      "600:     break;",
      "601:    case L2TP_AVP_PACKET_PROC_DELAY:",
      "602:     l2tp_packet_proc_delay_print(ndo);",
      "603:     break;",
      "604:    case L2TP_AVP_PROXY_AUTH_TYPE:",
      "606:     break;",
      "607:    case L2TP_AVP_PROXY_AUTH_ID:",
      "609:     break;",
      "610:    case L2TP_AVP_CALL_ERRORS:",
      "612:     break;",
      "613:    case L2TP_AVP_ACCM:",
      "615:     break;",
      "616:    case L2TP_AVP_SEQ_REQUIRED:",
      "",
      "[Removed Lines]",
      "596:     l2tp_bearer_type_print(ndo, (const u_char *)ptr);",
      "599:     l2tp_framing_type_print(ndo, (const u_char *)ptr);",
      "605:     l2tp_proxy_auth_type_print(ndo, (const u_char *)ptr);",
      "608:     l2tp_proxy_auth_id_print(ndo, (const u_char *)ptr);",
      "611:     l2tp_call_errors_print(ndo, (const u_char *)ptr);",
      "614:     l2tp_accm_print(ndo, (const u_char *)ptr);",
      "",
      "[Added Lines]",
      "720:     if (len-6 < 4) {",
      "721:      ND_PRINT((ndo, \"AVP too short\"));",
      "722:      break;",
      "723:     }",
      "727:     l2tp_bearer_type_print(ndo, (const u_char *)ptr, len-6);",
      "730:     l2tp_framing_type_print(ndo, (const u_char *)ptr, len-6);",
      "736:     l2tp_proxy_auth_type_print(ndo, (const u_char *)ptr, len-6);",
      "739:     l2tp_proxy_auth_id_print(ndo, (const u_char *)ptr, len-6);",
      "742:     l2tp_call_errors_print(ndo, (const u_char *)ptr, len-6);",
      "745:     l2tp_accm_print(ndo, (const u_char *)ptr, len-6);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "154b32ede55d03fb0e3c19ad45349bdb793b9e9f",
      "candidate_info": {
        "commit_hash": "154b32ede55d03fb0e3c19ad45349bdb793b9e9f",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/154b32ede55d03fb0e3c19ad45349bdb793b9e9f",
        "files": [
          "print-l2tp.c"
        ],
        "message": "Clean up dissection.\n\nDon't use pointers to anything other than octets; there is no guarantee\nthat the L2TP packet is aligned on a 2-byte or 4-byte boundary, and\nthere is no need to pretend that we have pointers to aligned values -\nwe're using the EXTRACT_ macros, which will fetch multi-byte integral\nvalues regardless of the alignment of the pointer.\n\nThis also fixes some cases where we were advancing 2 bytes after\nprocessing a 1-byte field - we were incrementing a uint16_t * by 1,\nwhich means advancing it by 2 bytes, and we're now incrementing the\nuint8_t * by 1.\n\nDon't cast a 4-byte integer to u_long - EXTRACT_BE_U_4() is guaranteed\nto return something printable with %u.\n\nDon't fetch fields dividded into \"high\" and \"low\" portions 2 bytes at a\ntime and reassemble them; the only reason they're divided into \"high\"\nand \"low\" partitions in the ASCII-art diagrams in RFC 2661 is that those\ndiagrams tend to show packets in the form of 32-bit words, and those\nfields aren't aligned on 32-bit word boundaries, so we can just fetch\nthose fields with EXTRACT_BE_U_4().\n\nDon't print a sequence of AVPs by recursion; iterate instead.\n\nAdd some RFC numbers while we're at it.",
        "before_after_code_files": [
          "print-l2tp.c||print-l2tp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-l2tp.c||print-l2tp.c"
          ],
          "candidate": [
            "print-l2tp.c||print-l2tp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-l2tp.c||print-l2tp.c": [
          "File: print-l2tp.c -> print-l2tp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283: }",
          "285: static void",
          "287: {",
          "288:  ND_PRINT(\"%u\", EXTRACT_BE_U_2(dat));",
          "289: }",
          "291: static void",
          "293: {",
          "295: }",
          "",
          "[Removed Lines]",
          "286: print_16bits_val(netdissect_options *ndo, const uint16_t *dat)",
          "292: print_32bits_val(netdissect_options *ndo, const uint32_t *dat)",
          "294:  ND_PRINT(\"%lu\", (u_long) EXTRACT_BE_U_4(dat));",
          "",
          "[Added Lines]",
          "288: print_16bits_val(netdissect_options *ndo, const uint8_t *dat)",
          "294: print_32bits_val(netdissect_options *ndo, const uint8_t *dat)",
          "296:  ND_PRINT(\"%u\", EXTRACT_BE_U_4(dat));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300: static void",
          "301: l2tp_msgtype_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "302: {",
          "305:  if (length < 2) {",
          "306:   ND_PRINT(\"AVP too short\");",
          "307:   return;",
          "308:  }",
          "309:  ND_PRINT(\"%s\", tok2str(l2tp_msgtype2str, \"MSGTYPE-#%u\",",
          "311: }",
          "313: static void",
          "314: l2tp_result_code_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "315: {",
          "319:  if (length < 2) {",
          "320:   ND_PRINT(\"AVP too short\");",
          "321:   return;",
          "322:  }",
          "325:  length -= 2;",
          "",
          "[Removed Lines]",
          "303:  const uint16_t *ptr = (const uint16_t *)dat;",
          "310:      EXTRACT_BE_U_2(ptr)));",
          "316:  const uint16_t *ptr = (const uint16_t *)dat;",
          "323:  ND_PRINT(\"%u\", EXTRACT_BE_U_2(ptr));",
          "324:  ptr++;",
          "",
          "[Added Lines]",
          "310:      EXTRACT_BE_U_2(dat)));",
          "321:  ND_PRINT(\"%u\", EXTRACT_BE_U_2(dat));",
          "322:  dat += 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:   ND_PRINT(\" AVP too short\");",
          "332:   return;",
          "333:  }",
          "336:  length -= 2;",
          "339:  if (length == 0)",
          "340:   return;",
          "341:  ND_PRINT(\" \");",
          "343: }",
          "345: static void",
          "347: {",
          "348:  if (length < 2) {",
          "349:   ND_PRINT(\"AVP too short\");",
          "",
          "[Removed Lines]",
          "334:  ND_PRINT(\"/%u\", EXTRACT_BE_U_2(ptr));",
          "335:  ptr++;",
          "342:  print_string(ndo, (const u_char *)ptr, length);",
          "346: l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat, u_int length)",
          "",
          "[Added Lines]",
          "332:  ND_PRINT(\"/%u\", EXTRACT_BE_U_2(dat));",
          "333:  dat += 2;",
          "340:  print_string(ndo, dat, length);",
          "344: l2tp_proto_ver_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356: static void",
          "357: l2tp_framing_cap_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "358: {",
          "361:  if (length < 4) {",
          "362:   ND_PRINT(\"AVP too short\");",
          "363:   return;",
          "364:  }",
          "366:   ND_PRINT(\"A\");",
          "367:  }",
          "369:   ND_PRINT(\"S\");",
          "370:  }",
          "371: }",
          "",
          "[Removed Lines]",
          "359:  const uint32_t *ptr = (const uint32_t *)dat;",
          "365:  if (EXTRACT_BE_U_4(ptr) &  L2TP_FRAMING_CAP_ASYNC_MASK) {",
          "368:  if (EXTRACT_BE_U_4(ptr) &  L2TP_FRAMING_CAP_SYNC_MASK) {",
          "",
          "[Added Lines]",
          "361:  if (EXTRACT_BE_U_4(dat) &  L2TP_FRAMING_CAP_ASYNC_MASK) {",
          "364:  if (EXTRACT_BE_U_4(dat) &  L2TP_FRAMING_CAP_SYNC_MASK) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "373: static void",
          "374: l2tp_bearer_cap_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "375: {",
          "378:  if (length < 4) {",
          "379:   ND_PRINT(\"AVP too short\");",
          "380:   return;",
          "381:  }",
          "383:   ND_PRINT(\"A\");",
          "384:  }",
          "386:   ND_PRINT(\"D\");",
          "387:  }",
          "388: }",
          "",
          "[Removed Lines]",
          "376:  const uint32_t *ptr = (const uint32_t *)dat;",
          "382:  if (EXTRACT_BE_U_4(ptr) &  L2TP_BEARER_CAP_ANALOG_MASK) {",
          "385:  if (EXTRACT_BE_U_4(ptr) &  L2TP_BEARER_CAP_DIGITAL_MASK) {",
          "",
          "[Added Lines]",
          "376:  if (EXTRACT_BE_U_4(dat) &  L2TP_BEARER_CAP_ANALOG_MASK) {",
          "379:  if (EXTRACT_BE_U_4(dat) &  L2TP_BEARER_CAP_DIGITAL_MASK) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "394:   ND_PRINT(\"AVP too short\");",
          "395:   return;",
          "396:  }",
          "398:  ND_PRINT(\", %02x\", EXTRACT_U_1(dat + 2));",
          "399:  dat += 3;",
          "400:  length -= 3;",
          "",
          "[Removed Lines]",
          "397:  print_16bits_val(ndo, (const uint16_t *)dat);",
          "",
          "[Added Lines]",
          "391:  print_16bits_val(ndo, dat);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "407: static void",
          "408: l2tp_bearer_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "409: {",
          "412:  if (length < 4) {",
          "413:   ND_PRINT(\"AVP too short\");",
          "414:   return;",
          "415:  }",
          "417:   ND_PRINT(\"A\");",
          "418:  }",
          "420:   ND_PRINT(\"D\");",
          "421:  }",
          "422: }",
          "",
          "[Removed Lines]",
          "410:  const uint32_t *ptr = (const uint32_t *)dat;",
          "416:  if (EXTRACT_BE_U_4(ptr) &  L2TP_BEARER_TYPE_ANALOG_MASK) {",
          "419:  if (EXTRACT_BE_U_4(ptr) &  L2TP_BEARER_TYPE_DIGITAL_MASK) {",
          "",
          "[Added Lines]",
          "408:  if (EXTRACT_BE_U_4(dat) &  L2TP_BEARER_TYPE_ANALOG_MASK) {",
          "411:  if (EXTRACT_BE_U_4(dat) &  L2TP_BEARER_TYPE_DIGITAL_MASK) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424: static void",
          "425: l2tp_framing_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "426: {",
          "429:  if (length < 4) {",
          "430:   ND_PRINT(\"AVP too short\");",
          "431:   return;",
          "432:  }",
          "434:   ND_PRINT(\"A\");",
          "435:  }",
          "437:   ND_PRINT(\"S\");",
          "438:  }",
          "439: }",
          "",
          "[Removed Lines]",
          "427:  const uint32_t *ptr = (const uint32_t *)dat;",
          "433:  if (EXTRACT_BE_U_4(ptr) &  L2TP_FRAMING_TYPE_ASYNC_MASK) {",
          "436:  if (EXTRACT_BE_U_4(ptr) &  L2TP_FRAMING_TYPE_SYNC_MASK) {",
          "",
          "[Added Lines]",
          "423:  if (EXTRACT_BE_U_4(dat) &  L2TP_FRAMING_TYPE_ASYNC_MASK) {",
          "426:  if (EXTRACT_BE_U_4(dat) &  L2TP_FRAMING_TYPE_SYNC_MASK) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "447: static void",
          "448: l2tp_proxy_auth_type_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "449: {",
          "452:  if (length < 2) {",
          "453:   ND_PRINT(\"AVP too short\");",
          "454:   return;",
          "455:  }",
          "456:  ND_PRINT(\"%s\", tok2str(l2tp_authentype2str,",
          "458: }",
          "460: static void",
          "461: l2tp_proxy_auth_id_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "462: {",
          "465:  if (length < 2) {",
          "466:   ND_PRINT(\"AVP too short\");",
          "467:   return;",
          "468:  }",
          "470: }",
          "472: static void",
          "473: l2tp_call_errors_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "474: {",
          "478:  if (length < 2) {",
          "479:   ND_PRINT(\"AVP too short\");",
          "480:   return;",
          "481:  }",
          "483:  length -= 2;",
          "485:  if (length < 4) {",
          "486:   ND_PRINT(\"AVP too short\");",
          "487:   return;",
          "488:  }",
          "493:  if (length < 4) {",
          "494:   ND_PRINT(\"AVP too short\");",
          "495:   return;",
          "496:  }",
          "501:  if (length < 4) {",
          "502:   ND_PRINT(\"AVP too short\");",
          "503:   return;",
          "504:  }",
          "509:  if (length < 4) {",
          "510:   ND_PRINT(\"AVP too short\");",
          "511:   return;",
          "512:  }",
          "517:  if (length < 4) {",
          "518:   ND_PRINT(\"AVP too short\");",
          "519:   return;",
          "520:  }",
          "525:  if (length < 4) {",
          "526:   ND_PRINT(\"AVP too short\");",
          "527:   return;",
          "528:  }",
          "532: }",
          "534: static void",
          "535: l2tp_accm_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "536: {",
          "540:  if (length < 2) {",
          "541:   ND_PRINT(\"AVP too short\");",
          "542:   return;",
          "543:  }",
          "545:  length -= 2;",
          "547:  if (length < 4) {",
          "548:   ND_PRINT(\"AVP too short\");",
          "549:   return;",
          "550:  }",
          "555:  if (length < 4) {",
          "556:   ND_PRINT(\"AVP too short\");",
          "557:   return;",
          "558:  }",
          "562: }",
          "564: static void",
          "565: l2tp_ppp_discon_cc_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "566: {",
          "569:  if (length < 5) {",
          "570:   ND_PRINT(\"AVP too short\");",
          "571:   return;",
          "",
          "[Removed Lines]",
          "450:  const uint16_t *ptr = (const uint16_t *)dat;",
          "457:         \"AuthType-#%u\", EXTRACT_BE_U_2(ptr)));",
          "463:  const uint16_t *ptr = (const uint16_t *)dat;",
          "469:  ND_PRINT(\"%u\", EXTRACT_BE_U_2(ptr) & L2TP_PROXY_AUTH_ID_MASK);",
          "475:  const uint16_t *ptr = (const uint16_t *)dat;",
          "476:  uint16_t val_h, val_l;",
          "489:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "490:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "491:  ND_PRINT(\"CRCErr=%u \", (val_h<<16) + val_l);",
          "497:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "498:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "499:  ND_PRINT(\"FrameErr=%u \", (val_h<<16) + val_l);",
          "505:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "506:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "507:  ND_PRINT(\"HardOver=%u \", (val_h<<16) + val_l);",
          "513:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "514:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "515:  ND_PRINT(\"BufOver=%u \", (val_h<<16) + val_l);",
          "521:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "522:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "523:  ND_PRINT(\"Timeout=%u \", (val_h<<16) + val_l);",
          "529:  val_h = EXTRACT_BE_U_2(ptr); ptr++;",
          "530:  val_l = EXTRACT_BE_U_2(ptr); ptr++;",
          "531:  ND_PRINT(\"AlignErr=%u \", (val_h<<16) + val_l);",
          "537:  const uint16_t *ptr = (const uint16_t *)dat;",
          "538:  uint16_t val_h, val_l;",
          "551:  val_h = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "552:  val_l = EXTRACT_BE_U_2(ptr); ptr++; length -= 2;",
          "553:  ND_PRINT(\"send=%08x \", (val_h<<16) + val_l);",
          "559:  val_h = EXTRACT_BE_U_2(ptr); ptr++;",
          "560:  val_l = EXTRACT_BE_U_2(ptr); ptr++;",
          "561:  ND_PRINT(\"recv=%08x \", (val_h<<16) + val_l);",
          "567:  const uint16_t *ptr = (const uint16_t *)dat;",
          "",
          "[Added Lines]",
          "445:         \"AuthType-#%u\", EXTRACT_BE_U_2(dat)));",
          "455:  ND_PRINT(\"%u\", EXTRACT_BE_U_2(dat) & L2TP_PROXY_AUTH_ID_MASK);",
          "461:  uint32_t val;",
          "474:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "475:  ND_PRINT(\"CRCErr=%u \", val);",
          "481:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "482:  ND_PRINT(\"FrameErr=%u \", val);",
          "488:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "489:  ND_PRINT(\"HardOver=%u \", val);",
          "495:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "496:  ND_PRINT(\"BufOver=%u \", val);",
          "502:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "503:  ND_PRINT(\"Timeout=%u \", val);",
          "509:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "510:  ND_PRINT(\"AlignErr=%u \", val);",
          "516:  uint32_t val;",
          "529:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "530:  ND_PRINT(\"send=%08x \", val);",
          "536:  val = EXTRACT_BE_U_4(dat); dat += 4; length -= 4;",
          "537:  ND_PRINT(\"recv=%08x \", val);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "580:  length -= 2;",
          "582:  ND_PRINT(\"%s\", tok2str(l2tp_cc_direction2str,",
          "585:  length--;",
          "587:  if (length != 0) {",
          "588:   ND_PRINT(\" \");",
          "590:  }",
          "591: }",
          "595: {",
          "596:  u_int len;",
          "598:  uint16_t attr_type;",
          "599:  int hidden = FALSE;",
          "605:  ND_PRINT(\" \");",
          "611:  if (len < 6)",
          "",
          "[Removed Lines]",
          "583:         \"Direction-#%u\", EXTRACT_U_1(ptr)));",
          "584:  ptr++;",
          "589:   print_string(ndo, (const u_char *)ptr, length);",
          "593: static void",
          "594: l2tp_avp_print(netdissect_options *ndo, const u_char *dat, int length)",
          "597:  const uint16_t *ptr = (const uint16_t *)dat;",
          "601:  if (length <= 0) {",
          "602:   return;",
          "603:  }",
          "608:  len = EXTRACT_BE_U_2(ptr) & L2TP_AVP_HDR_LEN_MASK;",
          "",
          "[Added Lines]",
          "557:         \"Direction-#%u\", EXTRACT_U_1(dat)));",
          "558:  dat++;",
          "563:   print_string(ndo, (const u_char *)dat, length);",
          "567: static u_int",
          "568: l2tp_avp_print(netdissect_options *ndo, const u_char *dat, u_int length)",
          "577:  len = EXTRACT_BE_U_2(dat) & L2TP_AVP_HDR_LEN_MASK;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "621:  ND_TCHECK_LEN(ptr, len);",
          "",
          "[Added Lines]",
          "590:  ND_TCHECK_LEN(dat, len);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "630:   ND_PRINT(\"*\");",
          "631:  }",
          "633:   hidden = TRUE;",
          "634:   ND_PRINT(\"?\");",
          "635:  }",
          "642:   ND_PRINT(\"(\");",
          "644:   ND_PRINT(\")\");",
          "645:  } else {",
          "649:   ND_PRINT(\"%s\", tok2str(l2tp_avp2str, \"AVP-#%u\", attr_type));",
          "650:   ND_PRINT(\"(\");",
          "651:   if (hidden) {",
          "",
          "[Removed Lines]",
          "629:  if (EXTRACT_BE_U_2(ptr) & L2TP_AVP_HDR_FLAG_MANDATORY) {",
          "632:  if (EXTRACT_BE_U_2(ptr) & L2TP_AVP_HDR_FLAG_HIDDEN) {",
          "636:  ptr++;",
          "638:  if (EXTRACT_BE_U_2(ptr)) {",
          "640:          ND_PRINT(\"VENDOR%04x:\", EXTRACT_BE_U_2(ptr)); ptr++;",
          "641:   ND_PRINT(\"ATTR%04x\", EXTRACT_BE_U_2(ptr)); ptr++;",
          "643:   print_octets(ndo, (const u_char *)ptr, len-6);",
          "647:   ptr++;",
          "648:   attr_type = EXTRACT_BE_U_2(ptr); ptr++;",
          "",
          "[Added Lines]",
          "598:  if (EXTRACT_BE_U_2(dat) & L2TP_AVP_HDR_FLAG_MANDATORY) {",
          "601:  if (EXTRACT_BE_U_2(dat) & L2TP_AVP_HDR_FLAG_HIDDEN) {",
          "605:  dat += 2;",
          "607:  if (EXTRACT_BE_U_2(dat)) {",
          "609:          ND_PRINT(\"VENDOR%04x:\", EXTRACT_BE_U_2(dat)); dat += 2;",
          "610:   ND_PRINT(\"ATTR%04x\", EXTRACT_BE_U_2(dat)); dat += 2;",
          "612:   print_octets(ndo, dat, len-6);",
          "616:   dat += 2;",
          "617:   attr_type = EXTRACT_BE_U_2(dat); dat += 2;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "653:   } else {",
          "654:    switch (attr_type) {",
          "655:    case L2TP_AVP_MSGTYPE:",
          "657:     break;",
          "658:    case L2TP_AVP_RESULT_CODE:",
          "660:     break;",
          "661:    case L2TP_AVP_PROTO_VER:",
          "663:     break;",
          "664:    case L2TP_AVP_FRAMING_CAP:",
          "666:     break;",
          "667:    case L2TP_AVP_BEARER_CAP:",
          "669:     break;",
          "670:    case L2TP_AVP_TIE_BREAKER:",
          "671:     if (len-6 < 8) {",
          "672:      ND_PRINT(\"AVP too short\");",
          "673:      break;",
          "674:     }",
          "676:     break;",
          "677:    case L2TP_AVP_FIRM_VER:",
          "678:    case L2TP_AVP_ASSND_TUN_ID:",
          "",
          "[Removed Lines]",
          "656:     l2tp_msgtype_print(ndo, (const u_char *)ptr, len-6);",
          "659:     l2tp_result_code_print(ndo, (const u_char *)ptr, len-6);",
          "662:     l2tp_proto_ver_print(ndo, ptr, len-6);",
          "665:     l2tp_framing_cap_print(ndo, (const u_char *)ptr, len-6);",
          "668:     l2tp_bearer_cap_print(ndo, (const u_char *)ptr, len-6);",
          "675:     print_octets(ndo, (const u_char *)ptr, 8);",
          "",
          "[Added Lines]",
          "625:     l2tp_msgtype_print(ndo, dat, len-6);",
          "628:     l2tp_result_code_print(ndo, dat, len-6);",
          "631:     l2tp_proto_ver_print(ndo, dat, len-6);",
          "634:     l2tp_framing_cap_print(ndo, dat, len-6);",
          "637:     l2tp_bearer_cap_print(ndo, dat, len-6);",
          "644:     print_octets(ndo, dat, 8);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "682:      ND_PRINT(\"AVP too short\");",
          "683:      break;",
          "684:     }",
          "686:     break;",
          "687:    case L2TP_AVP_HOST_NAME:",
          "688:    case L2TP_AVP_VENDOR_NAME:",
          "",
          "[Removed Lines]",
          "685:     print_16bits_val(ndo, ptr);",
          "",
          "[Added Lines]",
          "654:     print_16bits_val(ndo, dat);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "691:    case L2TP_AVP_SUB_ADDRESS:",
          "692:    case L2TP_AVP_PROXY_AUTH_NAME:",
          "693:    case L2TP_AVP_PRIVATE_GRP_ID:",
          "695:     break;",
          "696:    case L2TP_AVP_CHALLENGE:",
          "697:    case L2TP_AVP_INI_RECV_LCP:",
          "",
          "[Removed Lines]",
          "694:     print_string(ndo, (const u_char *)ptr, len-6);",
          "",
          "[Added Lines]",
          "663:     print_string(ndo, dat, len-6);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "700:    case L2TP_AVP_PROXY_AUTH_CHAL:",
          "701:    case L2TP_AVP_PROXY_AUTH_RESP:",
          "702:    case L2TP_AVP_RANDOM_VECTOR:",
          "704:     break;",
          "705:    case L2TP_AVP_Q931_CC:",
          "707:     break;",
          "708:    case L2TP_AVP_CHALLENGE_RESP:",
          "709:     if (len-6 < 16) {",
          "710:      ND_PRINT(\"AVP too short\");",
          "711:      break;",
          "712:     }",
          "714:     break;",
          "715:    case L2TP_AVP_CALL_SER_NUM:",
          "716:    case L2TP_AVP_MINIMUM_BPS:",
          "",
          "[Removed Lines]",
          "703:     print_octets(ndo, (const u_char *)ptr, len-6);",
          "706:     l2tp_q931_cc_print(ndo, (const u_char *)ptr, len-6);",
          "713:     print_octets(ndo, (const u_char *)ptr, 16);",
          "",
          "[Added Lines]",
          "672:     print_octets(ndo, dat, len-6);",
          "675:     l2tp_q931_cc_print(ndo, dat, len-6);",
          "682:     print_octets(ndo, dat, 16);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "722:      ND_PRINT(\"AVP too short\");",
          "723:      break;",
          "724:     }",
          "726:     break;",
          "727:    case L2TP_AVP_BEARER_TYPE:",
          "729:     break;",
          "730:    case L2TP_AVP_FRAMING_TYPE:",
          "732:     break;",
          "733:    case L2TP_AVP_PACKET_PROC_DELAY:",
          "734:     l2tp_packet_proc_delay_print(ndo);",
          "735:     break;",
          "736:    case L2TP_AVP_PROXY_AUTH_TYPE:",
          "738:     break;",
          "739:    case L2TP_AVP_PROXY_AUTH_ID:",
          "741:     break;",
          "742:    case L2TP_AVP_CALL_ERRORS:",
          "744:     break;",
          "745:    case L2TP_AVP_ACCM:",
          "747:     break;",
          "748:    case L2TP_AVP_SEQ_REQUIRED:",
          "750:    case L2TP_AVP_PPP_DISCON_CC:",
          "752:     break;",
          "753:    default:",
          "754:     break;",
          "",
          "[Removed Lines]",
          "725:     print_32bits_val(ndo, (const uint32_t *)ptr);",
          "728:     l2tp_bearer_type_print(ndo, (const u_char *)ptr, len-6);",
          "731:     l2tp_framing_type_print(ndo, (const u_char *)ptr, len-6);",
          "737:     l2tp_proxy_auth_type_print(ndo, (const u_char *)ptr, len-6);",
          "740:     l2tp_proxy_auth_id_print(ndo, (const u_char *)ptr, len-6);",
          "743:     l2tp_call_errors_print(ndo, (const u_char *)ptr, len-6);",
          "746:     l2tp_accm_print(ndo, (const u_char *)ptr, len-6);",
          "751:     l2tp_ppp_discon_cc_print(ndo, (const u_char *)ptr, len-6);",
          "",
          "[Added Lines]",
          "694:     print_32bits_val(ndo, dat);",
          "697:     l2tp_bearer_type_print(ndo, dat, len-6);",
          "700:     l2tp_framing_type_print(ndo, dat, len-6);",
          "706:     l2tp_proxy_auth_type_print(ndo, dat, len-6);",
          "709:     l2tp_proxy_auth_id_print(ndo, dat, len-6);",
          "712:     l2tp_call_errors_print(ndo, dat, len-6);",
          "715:     l2tp_accm_print(ndo, dat, len-6);",
          "720:     l2tp_ppp_discon_cc_print(ndo, dat, len-6);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "757:   ND_PRINT(\")\");",
          "758:  }",
          "763:  trunc:",
          "764:  nd_print_trunc(ndo);",
          "765: }",
          "",
          "[Removed Lines]",
          "760:  l2tp_avp_print(ndo, dat+len, length-len);",
          "761:  return;",
          "",
          "[Added Lines]",
          "729:  return (len);",
          "733:  return (0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "867:   if (length - cnt == 0) {",
          "868:    ND_PRINT(\" ZLB\");",
          "869:   } else {",
          "871:   }",
          "872:  } else {",
          "873:   ND_PRINT(\" {\");",
          "",
          "[Removed Lines]",
          "870:    l2tp_avp_print(ndo, ptr, length - cnt);",
          "",
          "[Added Lines]",
          "842:    while (length - cnt != 0) {",
          "843:     u_int avp_length;",
          "845:     avp_length = l2tp_avp_print(ndo, ptr, length - cnt);",
          "846:     if (avp_length == 0) {",
          "850:      break;",
          "851:     }",
          "852:     cnt += avp_length;",
          "853:     ptr += avp_length;",
          "854:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}