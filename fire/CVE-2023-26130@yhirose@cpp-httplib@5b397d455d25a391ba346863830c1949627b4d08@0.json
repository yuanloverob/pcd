{
  "cve_id": "CVE-2023-26130",
  "cve_desc": "Versions of the package yhirose/cpp-httplib before 0.12.4 are vulnerable to CRLF Injection when untrusted user input is used to set the content-type header in the HTTP .Patch, .Post, .Put and .Delete requests. This can lead to logical errors and other misbehaviors.\r\r**Note:** This issue is present due to an incomplete fix for [CVE-2020-11709](https://security.snyk.io/vuln/SNYK-UNMANAGED-YHIROSECPPHTTPLIB-2366507).",
  "repo": "yhirose/cpp-httplib",
  "patch_hash": "5b397d455d25a391ba346863830c1949627b4d08",
  "patch_info": {
    "commit_hash": "5b397d455d25a391ba346863830c1949627b4d08",
    "repo": "yhirose/cpp-httplib",
    "commit_url": "https://github.com/yhirose/cpp-httplib/commit/5b397d455d25a391ba346863830c1949627b4d08",
    "files": [
      "httplib.h",
      "test/test.cc"
    ],
    "message": "Fix more CRLF injection problems.",
    "before_after_code_files": [
      "httplib.h||httplib.h",
      "test/test.cc||test/test.cc"
    ]
  },
  "patch_diff": {
    "httplib.h||httplib.h": [
      "File: httplib.h -> httplib.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5925:       res.headers.erase(it);",
      "5926:     }",
      "5930:   }",
      "5932:   auto type = detail::encoding_type(req, res);",
      "",
      "[Removed Lines]",
      "5928:     res.headers.emplace(\"Content-Type\",",
      "5929:                         \"multipart/byteranges; boundary=\" + boundary);",
      "",
      "[Added Lines]",
      "5928:     res.set_header(\"Content-Type\",",
      "5929:                    \"multipart/byteranges; boundary=\" + boundary);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6617:   if (close_connection) {",
      "6618:     if (!req.has_header(\"Connection\")) {",
      "6620:     }",
      "6621:   }",
      "6623:   if (!req.has_header(\"Host\")) {",
      "6624:     if (is_ssl()) {",
      "6625:       if (port_ == 443) {",
      "6627:       } else {",
      "6629:       }",
      "6630:     } else {",
      "6631:       if (port_ == 80) {",
      "6633:       } else {",
      "6635:       }",
      "6636:     }",
      "6637:   }",
      "6641: #ifndef CPPHTTPLIB_NO_DEFAULT_USER_AGENT",
      "6642:   if (!req.has_header(\"User-Agent\")) {",
      "6643:     auto agent = std::string(\"cpp-httplib/\") + CPPHTTPLIB_VERSION;",
      "6645:   }",
      "6646: #endif",
      "",
      "[Removed Lines]",
      "6619:       req.headers.emplace(\"Connection\", \"close\");",
      "6626:         req.headers.emplace(\"Host\", host_);",
      "6628:         req.headers.emplace(\"Host\", host_and_port_);",
      "6632:         req.headers.emplace(\"Host\", host_);",
      "6634:         req.headers.emplace(\"Host\", host_and_port_);",
      "6639:   if (!req.has_header(\"Accept\")) { req.headers.emplace(\"Accept\", \"*/*\"); }",
      "6644:     req.headers.emplace(\"User-Agent\", agent);",
      "",
      "[Added Lines]",
      "6619:       req.set_header(\"Connection\", \"close\");",
      "6626:         req.set_header(\"Host\", host_);",
      "6628:         req.set_header(\"Host\", host_and_port_);",
      "6632:         req.set_header(\"Host\", host_);",
      "6634:         req.set_header(\"Host\", host_and_port_);",
      "6639:   if (!req.has_header(\"Accept\")) { req.set_header(\"Accept\", \"*/*\"); }",
      "6644:     req.set_header(\"User-Agent\", agent);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6650:       if (!req.is_chunked_content_provider_) {",
      "6651:         if (!req.has_header(\"Content-Length\")) {",
      "6652:           auto length = std::to_string(req.content_length_);",
      "6654:         }",
      "6655:       }",
      "6656:     } else {",
      "6657:       if (req.method == \"POST\" || req.method == \"PUT\" ||",
      "6658:           req.method == \"PATCH\") {",
      "6660:       }",
      "6661:     }",
      "6662:   } else {",
      "6663:     if (!req.has_header(\"Content-Type\")) {",
      "6665:     }",
      "6667:     if (!req.has_header(\"Content-Length\")) {",
      "6668:       auto length = std::to_string(req.body.size());",
      "6670:     }",
      "6671:   }",
      "",
      "[Removed Lines]",
      "6653:           req.headers.emplace(\"Content-Length\", length);",
      "6659:         req.headers.emplace(\"Content-Length\", \"0\");",
      "6664:       req.headers.emplace(\"Content-Type\", \"text/plain\");",
      "6669:       req.headers.emplace(\"Content-Length\", length);",
      "",
      "[Added Lines]",
      "6653:           req.set_header(\"Content-Length\", length);",
      "6659:         req.set_header(\"Content-Length\", \"0\");",
      "6664:       req.set_header(\"Content-Type\", \"text/plain\");",
      "6669:       req.set_header(\"Content-Length\", length);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6734:     ContentProvider content_provider,",
      "6735:     ContentProviderWithoutLength content_provider_without_length,",
      "6736:     const std::string &content_type, Error &error) {",
      "6741: #ifdef CPPHTTPLIB_ZLIB_SUPPORT",
      "6743: #endif",
      "6745: #ifdef CPPHTTPLIB_ZLIB_SUPPORT",
      "",
      "[Removed Lines]",
      "6737:   if (!content_type.empty()) {",
      "6738:     req.headers.emplace(\"Content-Type\", content_type);",
      "6739:   }",
      "6742:   if (compress_) { req.headers.emplace(\"Content-Encoding\", \"gzip\"); }",
      "",
      "[Added Lines]",
      "6737:   if (!content_type.empty()) { req.set_header(\"Content-Type\", content_type); }",
      "6740:   if (compress_) { req.set_header(\"Content-Encoding\", \"gzip\"); }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6800:       req.content_provider_ = detail::ContentProviderAdapter(",
      "6801:           std::move(content_provider_without_length));",
      "6802:       req.is_chunked_content_provider_ = true;",
      "6804:     } else {",
      "6805:       req.body.assign(body, content_length);",
      "6806:       ;",
      "",
      "[Removed Lines]",
      "6803:       req.headers.emplace(\"Transfer-Encoding\", \"chunked\");",
      "",
      "[Added Lines]",
      "6801:       req.set_header(\"Transfer-Encoding\", \"chunked\");",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "7423:   req.headers = headers;",
      "7424:   req.path = path;",
      "7429:   req.body.assign(body, content_length);",
      "7431:   return send_(std::move(req));",
      "",
      "[Removed Lines]",
      "7426:   if (!content_type.empty()) {",
      "7427:     req.headers.emplace(\"Content-Type\", content_type);",
      "7428:   }",
      "",
      "[Added Lines]",
      "7424:   if (!content_type.empty()) { req.set_header(\"Content-Type\", content_type); }",
      "",
      "---------------"
    ],
    "test/test.cc||test/test.cc": [
      "File: test/test.cc -> test/test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "6116:     EXPECT_EQ(\"val&key2=val2\", res->body);",
      "6117:   }",
      "6118: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6120: TEST(VulnerabilityTest, CRLFInjection) {",
      "6121:   Server svr;",
      "6123:   svr.Post(\"/test1\", [](const Request &/*req*/, Response &res) {",
      "6124:     res.set_content(\"Hello 1\", \"text/plain\");",
      "6125:   });",
      "6127:   svr.Delete(\"/test2\", [](const Request &/*req*/, Response &res) {",
      "6128:     res.set_content(\"Hello 2\", \"text/plain\");",
      "6129:   });",
      "6131:   svr.Put(\"/test3\", [](const Request &/*req*/, Response &res) {",
      "6132:     res.set_content(\"Hello 3\", \"text/plain\");",
      "6133:   });",
      "6135:   svr.Patch(\"/test4\", [](const Request &/*req*/, Response &res) {",
      "6136:     res.set_content(\"Hello 4\", \"text/plain\");",
      "6137:   });",
      "6139:   svr.set_logger([](const Request &req, const Response & /*res*/) {",
      "6140:     for (const auto &x : req.headers) {",
      "6141:       auto key = x.first;",
      "6142:       EXPECT_STRNE(\"evil\", key.c_str());",
      "6143:     }",
      "6144:   });",
      "6146:   auto thread = std::thread([&]() { svr.listen(HOST, PORT); });",
      "6147:   auto se = detail::scope_exit([&] {",
      "6148:     svr.stop();",
      "6149:     thread.join();",
      "6150:     ASSERT_FALSE(svr.is_running());",
      "6151:   });",
      "6153:   std::this_thread::sleep_for(std::chrono::seconds(1));",
      "6155:   {",
      "6156:     Client cli(HOST, PORT);",
      "6158:     cli.Post(\"/test1\", \"A=B\",",
      "6159:              \"application/x-www-form-urlencoded\\r\\nevil: hello1\");",
      "6160:     cli.Delete(\"/test2\", \"A=B\", \"text/plain\\r\\nevil: hello2\");",
      "6161:     cli.Put(\"/test3\", \"text\", \"text/plain\\r\\nevil: hello3\");",
      "6162:     cli.Patch(\"/test4\", \"content\", \"text/plain\\r\\nevil: hello4\");",
      "6163:   }",
      "6164: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1431311a47b57212093e30ed38ba43f42b53b7c",
      "candidate_info": {
        "commit_hash": "f1431311a47b57212093e30ed38ba43f42b53b7c",
        "repo": "yhirose/cpp-httplib",
        "commit_url": "https://github.com/yhirose/cpp-httplib/commit/f1431311a47b57212093e30ed38ba43f42b53b7c",
        "files": [
          "test/test.cc"
        ],
        "message": "Minor fixes on test cases (#1709)\n\n* Fix data race\n\n* Replace sleep_for() to wait_until_ready()",
        "before_after_code_files": [
          "test/test.cc||test/test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test.cc||test/test.cc"
          ],
          "candidate": [
            "test/test.cc||test/test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/test.cc||test/test.cc": [
          "File: test/test.cc -> test/test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:     ASSERT_FALSE(svr1.is_running());",
          "1089:   });",
          "1098:   Client cli(\"localhost\", svr2_port);",
          "1099:   cli.set_follow_location(true);",
          "",
          "[Removed Lines]",
          "1091:   while (!svr1.is_running() || !svr2.is_running()) {",
          "1092:     std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "1093:   }",
          "1096:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1091:   svr1.wait_until_ready();",
          "1092:   svr2.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1126:   svr.wait_until_ready();",
          "1131:   {",
          "1132:     Client cli(\"localhost\", PORT);",
          "1133:     cli.set_follow_location(true);",
          "",
          "[Removed Lines]",
          "1129:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1193:     ASSERT_LT(milliseconds, 5000U);",
          "1194:   }",
          "1199:   {",
          "1200:     Client cli(\"http://[::1]:1234\");",
          "1201:     cli.set_follow_location(true);",
          "",
          "[Removed Lines]",
          "1197:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:     ASSERT_FALSE(svr.is_running());",
          "1247:   });",
          "1252:   {",
          "1253:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1250:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1239:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1277:     ASSERT_FALSE(svr.is_running());",
          "1278:   });",
          "1283:   {",
          "1284:     Client cli(\"127.0.0.1\", PORT);",
          "",
          "[Removed Lines]",
          "1281:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1269:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1349:     ASSERT_FALSE(svr.is_running());",
          "1350:   });",
          "1355:   {",
          "1356:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1353:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1340:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1391:     ASSERT_FALSE(svr.is_running());",
          "1392:   });",
          "1397:   for (size_t i = 0; i < 10; i++) {",
          "1398:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1395:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1381:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1432:     ASSERT_FALSE(svr.is_running());",
          "1433:   });",
          "1438:   {",
          "1439:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1436:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1421:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1483:     ASSERT_FALSE(svr.is_running());",
          "1484:   });",
          "1489:   {",
          "1490: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "",
          "[Removed Lines]",
          "1487:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1471:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1552:     ASSERT_FALSE(svr.is_running());",
          "1553:   });",
          "1558:   {",
          "1559:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1556:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1539:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1577:     ASSERT_FALSE(svr.is_running());",
          "1578:   });",
          "1582:   {",
          "1583:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1580:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1563:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1613:     ASSERT_FALSE(svr.is_running());",
          "1614:   });",
          "1618:   {",
          "1619:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "1616:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "1599:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2206:     t_ = thread([&]() { ASSERT_TRUE(svr_.listen(HOST, PORT)); });",
          "2211:   }",
          "2213:   virtual void TearDown() {",
          "",
          "[Removed Lines]",
          "2208:     while (!svr_.is_running()) {",
          "2209:       std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "2210:     }",
          "",
          "[Added Lines]",
          "2191:     svr_.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4223:   svr.wait_until_ready();",
          "4228:   Client cli(\"localhost\", PORT);",
          "4230:   svr.set_mount_point(\"/mount2\", \"./www2\");",
          "",
          "[Removed Lines]",
          "4226:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4276:   svr.wait_until_ready();",
          "4281:   Client cli(\"localhost\", PORT);",
          "4283:   {",
          "",
          "[Removed Lines]",
          "4279:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4320:   svr.wait_until_ready();",
          "4325:   Client cli(\"localhost\", PORT);",
          "4326:   cli.set_keep_alive(true);",
          "4327:   cli.set_read_timeout(std::chrono::seconds(1));",
          "",
          "[Removed Lines]",
          "4323:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4351:     ASSERT_FALSE(svr.is_running());",
          "4352:   });",
          "4356:   Client cli(HOST, PORT);",
          "4357:   cli.set_keep_alive(true);",
          "",
          "[Removed Lines]",
          "4354:   std::this_thread::sleep_for(std::chrono::milliseconds(200));",
          "",
          "[Added Lines]",
          "4326:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4384:     ASSERT_FALSE(svr.is_running());",
          "4385:   });",
          "4389:   SSLClient cli(HOST, PORT);",
          "4390:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "4387:   std::this_thread::sleep_for(std::chrono::milliseconds(200));",
          "",
          "[Added Lines]",
          "4359:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4448:   svr.wait_until_ready();",
          "4453:   Client cli(\"localhost\", PORT);",
          "4455:   {",
          "",
          "[Removed Lines]",
          "4451:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4488:   svr.wait_until_ready();",
          "4493:   Client cli(\"localhost\", PORT);",
          "4495:   auto res = cli.Get(\"/\");",
          "",
          "[Removed Lines]",
          "4491:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4533:   });",
          "4535:   svr.wait_until_ready();",
          "4538:   {",
          "4539:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "4536:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4592:   });",
          "4594:   svr.wait_until_ready();",
          "4597:   Client cli(\"localhost\", PORT);",
          "",
          "[Removed Lines]",
          "4595:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4660:   });",
          "4662:   svr.wait_until_ready();",
          "4665:   Client cli(\"localhost\", PORT);",
          "",
          "[Removed Lines]",
          "4663:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4696:   svr.wait_until_ready();",
          "4701:   SSLClient cli(\"localhost\", PORT);",
          "4702:   cli.enable_server_certificate_verification(false);",
          "4703:   cli.set_keep_alive(true);",
          "",
          "[Removed Lines]",
          "4699:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4736:     t_ = thread(",
          "4737:         [&]() { ASSERT_TRUE(svr_.listen(std::string(), PORT, AI_PASSIVE)); });",
          "4742:   }",
          "4744:   virtual void TearDown() {",
          "",
          "[Removed Lines]",
          "4739:     while (!svr_.is_running()) {",
          "4740:       std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "4741:     }",
          "",
          "[Added Lines]",
          "4699:     svr_.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4775:       ASSERT_TRUE(svr_.listen_after_bind());",
          "4776:     });",
          "4781:   }",
          "4783:   virtual void TearDown() {",
          "",
          "[Removed Lines]",
          "4778:     while (!svr_.is_running()) {",
          "4779:       std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "4780:     }",
          "",
          "[Added Lines]",
          "4736:     svr_.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4819:     t_ = thread([&]() { ASSERT_TRUE(svr_.listen(HOST, PORT)); });",
          "4824:   }",
          "4826:   virtual void TearDown() {",
          "",
          "[Removed Lines]",
          "4821:     while (!svr_.is_running()) {",
          "4822:       std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "4823:     }",
          "",
          "[Added Lines]",
          "4777:     svr_.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4937:     ASSERT_FALSE(svr.is_running());",
          "4938:   });",
          "4942:   SSLClient cli(\"127.0.0.1\", PORT);",
          "4943:   cli.set_ca_cert_path(SERVER_CERT2_FILE);",
          "",
          "[Removed Lines]",
          "4940:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "4894:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5053:     ASSERT_FALSE(svr.is_running());",
          "5054:   });",
          "5058:   SSLClient cli(HOST, PORT, CLIENT_CERT_FILE, CLIENT_PRIVATE_KEY_FILE);",
          "5059:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "5056:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5010:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5128:     ASSERT_FALSE(svr.is_running());",
          "5129:   });",
          "5133:   SSLClient cli(HOST, PORT, client_cert, client_private_key);",
          "5134:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "5131:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5085:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5159:     ASSERT_FALSE(svr.is_running());",
          "5160:   });",
          "5164:   SSLClient cli(HOST, PORT);",
          "5165:   auto res = cli.Get(\"/test\");",
          "",
          "[Removed Lines]",
          "5162:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5116:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5183:     ASSERT_FALSE(svr.is_running());",
          "5184:   });",
          "5188:   SSLClient cli(HOST, PORT, CLIENT_CERT_FILE, CLIENT_PRIVATE_KEY_FILE);",
          "5189:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "5186:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5140:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5204:                     client_ca_cert_dir_path),",
          "5205:           stop_(false) {}",
          "5209:   private:",
          "5210:     bool process_and_close_socket(socket_t /*sock*/) override {",
          "5213:         std::this_thread::sleep_for(std::chrono::milliseconds(100));",
          "5214:       }",
          "5215:       return true;",
          "",
          "[Removed Lines]",
          "5207:     bool stop_;",
          "5212:       while (!stop_) {",
          "",
          "[Added Lines]",
          "5161:     std::atomic_bool stop_;",
          "5166:       while (!stop_.load()) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5231:     ASSERT_FALSE(svr.is_running());",
          "5232:   });",
          "5236:   SSLClient cli(HOST, PORT, CLIENT_CERT_FILE, CLIENT_PRIVATE_KEY_FILE);",
          "5237:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "5234:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5188:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5303:     ASSERT_FALSE(svr.is_running());",
          "5304:   });",
          "5308:   SSLClient cli(HOST, PORT, CLIENT_CERT_FILE, CLIENT_PRIVATE_KEY_FILE);",
          "5309:   cli.enable_server_certificate_verification(false);",
          "",
          "[Removed Lines]",
          "5306:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5260:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5455:   svr.wait_until_ready();",
          "5460:   Client cli(HOST, PORT);",
          "5461:   auto res = cli.Get(\"/foo\");",
          "5462:   ASSERT_TRUE(res);",
          "",
          "[Removed Lines]",
          "5458:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5591:     ASSERT_FALSE(svr.is_running());",
          "5592:   });",
          "5596:   Client cli(\"127.0.0.1\", PORT);",
          "5597:   cli.set_ca_cert_path(SERVER_CERT2_FILE);",
          "",
          "[Removed Lines]",
          "5594:   std::this_thread::sleep_for(std::chrono::milliseconds(1));",
          "",
          "[Added Lines]",
          "5545:   svr.wait_until_ready();",
          "5546:   ssl_svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5647:   });",
          "5649:   svr.wait_until_ready();",
          "5652:   {",
          "5653:     std::string data(1024 * 1024 * 2, '.');",
          "",
          "[Removed Lines]",
          "5650:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5795:   });",
          "5797:   svr.wait_until_ready();",
          "5800:   {",
          "5801:     Client cli(\"https://localhost:8080\");",
          "",
          "[Removed Lines]",
          "5798:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5997:   });",
          "5999:   svr.wait_until_ready();",
          "6002:   {",
          "6003:     std::string data(1024 * 1024 * 2, '.');",
          "",
          "[Removed Lines]",
          "6000:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6019: }",
          "6021: TEST(MultipartFormDataTest, PostInvalidBoundaryChars) {",
          "6025:   std::string data(1024 * 1024 * 2, '&');",
          "6026:   std::stringstream buffer;",
          "6027:   buffer << data;",
          "",
          "[Removed Lines]",
          "6023:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6084:   });",
          "6086:   svr.wait_until_ready();",
          "6089:   {",
          "6090:     std::string data(1024 * 1024 * 2, '&');",
          "",
          "[Removed Lines]",
          "6087:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "6149:   });",
          "6151:   svr.wait_until_ready();",
          "6154:   {",
          "6155:     std::string data(1024 * 1024 * 2, '&');",
          "",
          "[Removed Lines]",
          "6152:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6171: }",
          "6173: TEST(MultipartFormDataTest, PutInvalidBoundaryChars) {",
          "6177:   std::string data(1024 * 1024 * 2, '&');",
          "6178:   std::stringstream buffer;",
          "6179:   buffer << data;",
          "",
          "[Removed Lines]",
          "6175:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6502:     ASSERT_FALSE(svr.is_running());",
          "6503:   });",
          "6507:   {",
          "6508:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "6505:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "6446:   svr.wait_until_ready();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6548:     ASSERT_FALSE(svr.is_running());",
          "6549:   });",
          "6553:   {",
          "6554:     Client cli(HOST, PORT);",
          "",
          "[Removed Lines]",
          "6551:   std::this_thread::sleep_for(std::chrono::seconds(1));",
          "",
          "[Added Lines]",
          "6492:   svr.wait_until_ready();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "067890133c284ff8862eeeefdcecc540b0506014",
      "candidate_info": {
        "commit_hash": "067890133c284ff8862eeeefdcecc540b0506014",
        "repo": "yhirose/cpp-httplib",
        "commit_url": "https://github.com/yhirose/cpp-httplib/commit/067890133c284ff8862eeeefdcecc540b0506014",
        "files": [
          "test/test.cc"
        ],
        "message": "Use nghttp2-hosted httpbin.org (#1586)\n\n* Use nghttp2-hosted httpbin.org\n\n* Add CPPHTTPLIB_DEFAULT_HTTPBIN macro to choose the default httpbin.org",
        "before_after_code_files": [
          "test/test.cc||test/test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/test.cc||test/test.cc"
          ],
          "candidate": [
            "test/test.cc||test/test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/test.cc||test/test.cc": [
          "File: test/test.cc -> test/test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "526: }",
          "528: TEST(RangeTest, FromHTTPBin_Online) {",
          "529:   auto host = \"httpbin.org\";",
          "531: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "532:   auto port = 443;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "531:   auto path = std::string{\"/range/32\"};",
          "532: #else",
          "533:   auto host = \"nghttp2.org\";",
          "534:   auto path = std::string{\"/httpbin/range/32\"};",
          "535: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:   cli.set_connection_timeout(5);",
          "540:   {",
          "542:     ASSERT_TRUE(res);",
          "543:     EXPECT_EQ(\"abcdefghijklmnopqrstuvwxyzabcdef\", res->body);",
          "544:     EXPECT_EQ(200, res->status);",
          "",
          "[Removed Lines]",
          "541:     auto res = cli.Get(\"/range/32\");",
          "",
          "[Added Lines]",
          "547:     auto res = cli.Get(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "547:   {",
          "548:     Headers headers = {make_range_header({{1, -1}})};",
          "550:     ASSERT_TRUE(res);",
          "551:     EXPECT_EQ(\"bcdefghijklmnopqrstuvwxyzabcdef\", res->body);",
          "552:     EXPECT_EQ(206, res->status);",
          "",
          "[Removed Lines]",
          "549:     auto res = cli.Get(\"/range/32\", headers);",
          "",
          "[Added Lines]",
          "555:     auto res = cli.Get(path, headers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "555:   {",
          "556:     Headers headers = {make_range_header({{1, 10}})};",
          "558:     ASSERT_TRUE(res);",
          "559:     EXPECT_EQ(\"bcdefghijk\", res->body);",
          "560:     EXPECT_EQ(206, res->status);",
          "",
          "[Removed Lines]",
          "557:     auto res = cli.Get(\"/range/32\", headers);",
          "",
          "[Added Lines]",
          "563:     auto res = cli.Get(path, headers);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "563:   {",
          "564:     Headers headers = {make_range_header({{0, 31}})};",
          "566:     ASSERT_TRUE(res);",
          "567:     EXPECT_EQ(\"abcdefghijklmnopqrstuvwxyzabcdef\", res->body);",
          "568:     EXPECT_EQ(200, res->status);",
          "",
          "[Removed Lines]",
          "565:     auto res = cli.Get(\"/range/32\", headers);",
          "",
          "[Added Lines]",
          "571:     auto res = cli.Get(path, headers);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:   {",
          "572:     Headers headers = {make_range_header({{0, -1}})};",
          "574:     ASSERT_TRUE(res);",
          "575:     EXPECT_EQ(\"abcdefghijklmnopqrstuvwxyzabcdef\", res->body);",
          "576:     EXPECT_EQ(200, res->status);",
          "",
          "[Removed Lines]",
          "573:     auto res = cli.Get(\"/range/32\", headers);",
          "",
          "[Added Lines]",
          "579:     auto res = cli.Get(path, headers);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "579:   {",
          "580:     Headers headers = {make_range_header({{0, 32}})};",
          "582:     ASSERT_TRUE(res);",
          "583:     EXPECT_EQ(416, res->status);",
          "584:   }",
          "",
          "[Removed Lines]",
          "581:     auto res = cli.Get(\"/range/32\", headers);",
          "",
          "[Added Lines]",
          "587:     auto res = cli.Get(path, headers);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "673: }",
          "675: TEST(CancelTest, NoCancel_Online) {",
          "676:   auto host = \"httpbin.org\";",
          "678: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "679:   auto port = 443;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "684:   auto path = std::string{\"/range/32\"};",
          "685: #else",
          "686:   auto host = \"nghttp2.org\";",
          "687:   auto path = std::string{\"/httpbin/range/32\"};",
          "688: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "684: #endif",
          "685:   cli.set_connection_timeout(std::chrono::seconds(5));",
          "688:   ASSERT_TRUE(res);",
          "689:   EXPECT_EQ(\"abcdefghijklmnopqrstuvwxyzabcdef\", res->body);",
          "690:   EXPECT_EQ(200, res->status);",
          "691: }",
          "693: TEST(CancelTest, WithCancelSmallPayload_Online) {",
          "694:   auto host = \"httpbin.org\";",
          "696: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "697:   auto port = 443;",
          "",
          "[Removed Lines]",
          "687:   auto res = cli.Get(\"/range/32\", [](uint64_t, uint64_t) { return true; });",
          "",
          "[Added Lines]",
          "699:   auto res = cli.Get(path, [](uint64_t, uint64_t) { return true; });",
          "706: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "708:   auto path = std::string{\"/range/32\"};",
          "709: #else",
          "710:   auto host = \"nghttp2.org\";",
          "711:   auto path = std::string{\"/httpbin/range/32\"};",
          "712: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "701:   Client cli(host, port);",
          "702: #endif",
          "705:   cli.set_connection_timeout(std::chrono::seconds(5));",
          "706:   ASSERT_TRUE(!res);",
          "707:   EXPECT_EQ(Error::Canceled, res.error());",
          "708: }",
          "710: TEST(CancelTest, WithCancelLargePayload_Online) {",
          "711:   auto host = \"httpbin.org\";",
          "713: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "714:   auto port = 443;",
          "",
          "[Removed Lines]",
          "704:   auto res = cli.Get(\"/range/32\", [](uint64_t, uint64_t) { return false; });",
          "",
          "[Added Lines]",
          "722:   auto res = cli.Get(path, [](uint64_t, uint64_t) { return false; });",
          "729: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "731:   auto path = std::string{\"/range/65536\"};",
          "732: #else",
          "733:   auto host = \"nghttp2.org\";",
          "734:   auto path = std::string{\"/httpbin/range/65536\"};",
          "735: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "720:   cli.set_connection_timeout(std::chrono::seconds(5));",
          "722:   uint32_t count = 0;",
          "725:   ASSERT_TRUE(!res);",
          "726:   EXPECT_EQ(Error::Canceled, res.error());",
          "727: }",
          "729: TEST(BaseAuthTest, FromHTTPWatch_Online) {",
          "730:   auto host = \"httpbin.org\";",
          "732: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "733:   auto port = 443;",
          "",
          "[Removed Lines]",
          "723:   auto res = cli.Get(\"/range/65536\",",
          "724:                      [&count](uint64_t, uint64_t) { return (count++ == 0); });",
          "",
          "[Added Lines]",
          "747:   auto res =",
          "748:       cli.Get(path, [&count](uint64_t, uint64_t) { return (count++ == 0); });",
          "754: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "756:   auto path = std::string{\"/basic-auth/hello/world\"};",
          "757: #else",
          "758:   auto host = \"nghttp2.org\";",
          "759:   auto path = std::string{\"/httpbin/basic-auth/hello/world\"};",
          "760: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "738: #endif",
          "740:   {",
          "742:     ASSERT_TRUE(res);",
          "743:     EXPECT_EQ(401, res->status);",
          "744:   }",
          "746:   {",
          "749:     ASSERT_TRUE(res);",
          "750:     EXPECT_EQ(\"{\\n  \\\"authenticated\\\": true, \\n  \\\"user\\\": \\\"hello\\\"\\n}\\n\",",
          "751:               res->body);",
          "",
          "[Removed Lines]",
          "741:     auto res = cli.Get(\"/basic-auth/hello/world\");",
          "747:     auto res = cli.Get(\"/basic-auth/hello/world\",",
          "748:                        {make_basic_authentication_header(\"hello\", \"world\")});",
          "",
          "[Added Lines]",
          "771:     auto res = cli.Get(path);",
          "777:     auto res =",
          "778:         cli.Get(path, {make_basic_authentication_header(\"hello\", \"world\")});",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "755:   {",
          "756:     cli.set_basic_auth(\"hello\", \"world\");",
          "758:     ASSERT_TRUE(res);",
          "759:     EXPECT_EQ(\"{\\n  \\\"authenticated\\\": true, \\n  \\\"user\\\": \\\"hello\\\"\\n}\\n\",",
          "760:               res->body);",
          "",
          "[Removed Lines]",
          "757:     auto res = cli.Get(\"/basic-auth/hello/world\");",
          "",
          "[Added Lines]",
          "787:     auto res = cli.Get(path);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "764:   {",
          "765:     cli.set_basic_auth(\"hello\", \"bad\");",
          "767:     ASSERT_TRUE(res);",
          "768:     EXPECT_EQ(401, res->status);",
          "769:   }",
          "771:   {",
          "772:     cli.set_basic_auth(\"bad\", \"world\");",
          "774:     ASSERT_TRUE(res);",
          "775:     EXPECT_EQ(401, res->status);",
          "776:   }",
          "",
          "[Removed Lines]",
          "766:     auto res = cli.Get(\"/basic-auth/hello/world\");",
          "773:     auto res = cli.Get(\"/basic-auth/hello/world\");",
          "",
          "[Added Lines]",
          "796:     auto res = cli.Get(path);",
          "803:     auto res = cli.Get(path);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "779: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "780: TEST(DigestAuthTest, FromHTTPWatch_Online) {",
          "781:   auto host = \"httpbin.org\";",
          "782:   auto port = 443;",
          "783:   SSLClient cli(host, port);",
          "785:   {",
          "787:     ASSERT_TRUE(res);",
          "788:     EXPECT_EQ(401, res->status);",
          "789:   }",
          "791:   {",
          "799:     cli.set_digest_auth(\"hello\", \"world\");",
          "801:       auto res = cli.Get(path.c_str());",
          "802:       ASSERT_TRUE(res);",
          "803:       EXPECT_EQ(\"{\\n  \\\"authenticated\\\": true, \\n  \\\"user\\\": \\\"hello\\\"\\n}\\n\",",
          "",
          "[Removed Lines]",
          "786:     auto res = cli.Get(\"/digest-auth/auth/hello/world\");",
          "792:     std::vector<std::string> paths = {",
          "793:         \"/digest-auth/auth/hello/world/MD5\",",
          "794:         \"/digest-auth/auth/hello/world/SHA-256\",",
          "795:         \"/digest-auth/auth/hello/world/SHA-512\",",
          "796:         \"/digest-auth/auth-int/hello/world/MD5\",",
          "797:     };",
          "800:     for (auto path : paths) {",
          "",
          "[Added Lines]",
          "811: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "813:   auto unauth_path = std::string{\"/digest-auth/auth/hello/world\"};",
          "814:   auto paths = std::vector<std::string>{",
          "815:       \"/digest-auth/auth/hello/world/MD5\",",
          "816:       \"/digest-auth/auth/hello/world/SHA-256\",",
          "817:       \"/digest-auth/auth/hello/world/SHA-512\",",
          "818:       \"/digest-auth/auth-int/hello/world/MD5\",",
          "819:   };",
          "820: #else",
          "821:   auto host = \"nghttp2.org\";",
          "822:   auto unauth_path = std::string{\"/httpbin/digest-auth/auth/hello/world\"};",
          "823:   auto paths = std::vector<std::string>{",
          "824:       \"/httpbin/digest-auth/auth/hello/world/MD5\",",
          "825:       \"/httpbin/digest-auth/auth/hello/world/SHA-256\",",
          "826:       \"/httpbin/digest-auth/auth/hello/world/SHA-512\",",
          "827:       \"/httpbin/digest-auth/auth-int/hello/world/MD5\",",
          "828:   };",
          "829: #endif",
          "835:     auto res = cli.Get(unauth_path);",
          "843:     for (const auto &path : paths) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "806:     }",
          "808:     cli.set_digest_auth(\"hello\", \"bad\");",
          "810:       auto res = cli.Get(path.c_str());",
          "811:       ASSERT_TRUE(res);",
          "812:       EXPECT_EQ(401, res->status);",
          "",
          "[Removed Lines]",
          "809:     for (auto path : paths) {",
          "",
          "[Added Lines]",
          "852:     for (const auto &path : paths) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3920:   svr.Get(\"/events\", [](const Request & /*req*/, Response &res) {",
          "3921:     res.set_header(\"Cache-Control\", \"no-cache\");",
          "3932:   });",
          "3934:   auto listen_thread = std::thread([&svr]() { svr.listen(\"localhost\", PORT); });",
          "",
          "[Removed Lines]",
          "3922:     res.set_chunked_content_provider(\"text/event-stream\", [](size_t offset,",
          "3923:                                                              DataSink &sink) {",
          "3924:       std::string s = \"data:\";",
          "3925:       s += std::to_string(offset);",
          "3926:       s += \"\\n\\n\";",
          "3927:       auto ret = sink.write(s.data(), s.size());",
          "3928:       EXPECT_TRUE(ret);",
          "3929:       std::this_thread::sleep_for(std::chrono::seconds(1));",
          "3930:       return true;",
          "3931:     });",
          "",
          "[Added Lines]",
          "3965:     res.set_chunked_content_provider(",
          "3966:         \"text/event-stream\", [](size_t offset, DataSink &sink) {",
          "3967:           std::string s = \"data:\";",
          "3968:           s += std::to_string(offset);",
          "3969:           s += \"\\n\\n\";",
          "3970:           auto ret = sink.write(s.data(), s.size());",
          "3971:           EXPECT_TRUE(ret);",
          "3972:           std::this_thread::sleep_for(std::chrono::seconds(1));",
          "3973:           return true;",
          "3974:         });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4414: }",
          "4416: TEST(ClientDefaultHeadersTest, DefaultHeaders_Online) {",
          "4418:   cli.set_default_headers({make_range_header({{1, 10}})});",
          "4419:   cli.set_connection_timeout(5);",
          "4421:   {",
          "4423:     ASSERT_TRUE(res);",
          "4424:     EXPECT_EQ(\"bcdefghijk\", res->body);",
          "4425:     EXPECT_EQ(206, res->status);",
          "4426:   }",
          "4428:   {",
          "4430:     ASSERT_TRUE(res);",
          "4431:     EXPECT_EQ(\"bcdefghijk\", res->body);",
          "4432:     EXPECT_EQ(206, res->status);",
          "",
          "[Removed Lines]",
          "4417:   Client cli(\"httpbin.org\");",
          "4422:     auto res = cli.Get(\"/range/32\");",
          "4429:     auto res = cli.Get(\"/range/32\");",
          "",
          "[Added Lines]",
          "4460: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "4461:   auto host = \"httpbin.org\";",
          "4462:   auto path = std::string{\"/range/32\"};",
          "4463: #else",
          "4464:   auto host = \"nghttp2.org\";",
          "4465:   auto path = std::string{\"/httpbin/range/32\"};",
          "4466: #endif",
          "4468: #ifdef CPPHTTPLIB_OPENSSL_SUPPORT",
          "4469:   SSLClient cli(host);",
          "4470: #else",
          "4471:   Client cli(host);",
          "4472: #endif",
          "4478:     auto res = cli.Get(path);",
          "4485:     auto res = cli.Get(path);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4652: }",
          "4654: TEST(SSLClientTest, ServerNameIndication_Online) {",
          "4657:   ASSERT_TRUE(res);",
          "4658:   ASSERT_EQ(200, res->status);",
          "4659: }",
          "",
          "[Removed Lines]",
          "4655:   SSLClient cli(\"httpbin.org\", 443);",
          "4656:   auto res = cli.Get(\"/get\");",
          "",
          "[Added Lines]",
          "4711: #ifdef CPPHTTPLIB_DEFAULT_HTTPBIN",
          "4712:   auto host = \"httpbin.org\";",
          "4713:   auto path = std::string{\"/get\"};",
          "4714: #else",
          "4715:   auto host = \"nghttp2.org\";",
          "4716:   auto path = std::string{\"/httpbin/get\"};",
          "4717: #endif",
          "4719:   SSLClient cli(host, 443);",
          "4720:   auto res = cli.Get(path);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6164: TEST(VulnerabilityTest, CRLFInjection) {",
          "6165:   Server svr;",
          "6168:     res.set_content(\"Hello 1\", \"text/plain\");",
          "6169:   });",
          "6172:     res.set_content(\"Hello 2\", \"text/plain\");",
          "6173:   });",
          "6176:     res.set_content(\"Hello 3\", \"text/plain\");",
          "6177:   });",
          "6180:     res.set_content(\"Hello 4\", \"text/plain\");",
          "6181:   });",
          "",
          "[Removed Lines]",
          "6167:   svr.Post(\"/test1\", [](const Request &/*req*/, Response &res) {",
          "6171:   svr.Delete(\"/test2\", [](const Request &/*req*/, Response &res) {",
          "6175:   svr.Put(\"/test3\", [](const Request &/*req*/, Response &res) {",
          "6179:   svr.Patch(\"/test4\", [](const Request &/*req*/, Response &res) {",
          "",
          "[Added Lines]",
          "6231:   svr.Post(\"/test1\", [](const Request & /*req*/, Response &res) {",
          "6235:   svr.Delete(\"/test2\", [](const Request & /*req*/, Response &res) {",
          "6239:   svr.Put(\"/test3\", [](const Request & /*req*/, Response &res) {",
          "6243:   svr.Patch(\"/test4\", [](const Request & /*req*/, Response &res) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}