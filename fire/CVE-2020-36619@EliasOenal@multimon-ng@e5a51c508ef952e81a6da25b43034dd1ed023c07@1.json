{
  "cve_id": "CVE-2020-36619",
  "cve_desc": "A vulnerability was found in multimon-ng. It has been rated as critical. This issue affects the function add_ch of the file demod_flex.c. The manipulation of the argument ch leads to format string. Upgrading to version 1.2.0 is able to address this issue. The name of the patch is e5a51c508ef952e81a6da25b43034dd1ed023c07. It is recommended to upgrade the affected component. The identifier VDB-216269 was assigned to this vulnerability.",
  "repo": "EliasOenal/multimon-ng",
  "patch_hash": "e5a51c508ef952e81a6da25b43034dd1ed023c07",
  "patch_info": {
    "commit_hash": "e5a51c508ef952e81a6da25b43034dd1ed023c07",
    "repo": "EliasOenal/multimon-ng",
    "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/e5a51c508ef952e81a6da25b43034dd1ed023c07",
    "files": [
      "demod_flex.c"
    ],
    "message": "Remove uncontrolled format string vulnerability",
    "before_after_code_files": [
      "demod_flex.c||demod_flex.c"
    ]
  },
  "patch_diff": {
    "demod_flex.c||demod_flex.c": [
      "File: demod_flex.c -> demod_flex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "558:         buf[idx + 1] = 'r';",
      "559:         return 2;",
      "560:     }",
      "562:     if (ch >= 32 && ch <= 126) {",
      "563:         buf[idx] = ch;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "564:     if (ch == '%') {",
      "565:         if (idx < (MAX_ALN - 2)) {",
      "566:             buf[idx] = '%';",
      "567:             buf[idx + 1] = '%';",
      "568:             return 2;",
      "569:         }",
      "570:         return 0;",
      "571:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20ada8a264123f37bc1d9b22f0f22d46bf2c51e7",
      "candidate_info": {
        "commit_hash": "20ada8a264123f37bc1d9b22f0f22d46bf2c51e7",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/20ada8a264123f37bc1d9b22f0f22d46bf2c51e7",
        "files": [
          "demod_flex.c"
        ],
        "message": "Normalize the stdout syntax for all FLEX types",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:         static char pt_out[4096] = { 0 };",
          "634:                         gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "637:         if(flex_groupmessage == 1) {",
          "638:                 int endpoint = flex->GroupHandler.GroupCodes[flex_groupbit][CAPCODES_INDEX];",
          "",
          "[Removed Lines]",
          "633:         int pt_offset = sprintf(pt_out, \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c/%c|%02i.%03i|%10\" PRId64,",
          "635:                         flex->Sync.baud, flex->Sync.levels, frag_flag, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "[Added Lines]",
          "632:         int pt_offset = sprintf(pt_out, \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c/%c|%02i.%03i|%010\" PRId64,",
          "634:                         flex->Sync.baud, flex->Sync.levels, PhaseNo, frag_flag, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665:   time_t now=time(NULL);",
          "666:   struct tm * gmt=gmtime(&now);",
          "668:       flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "[Removed Lines]",
          "667:   verbprintf(0,  \"FLEX: %04i-%02i-%02i %02i:%02i:%02i %i/%i/%c %02i.%03i [%010\" PRId64 \"] NUM \", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "",
          "[Added Lines]",
          "666:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|NUM|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:   time_t now=time(NULL);",
          "725:   struct tm * gmt=gmtime(&now);",
          "",
          "[Removed Lines]",
          "726:   verbprintf(0,  \"FLEX: %04i-%02i-%02i %02i:%02i:%02i %i/%i/%c %02i.%03i [%010\" PRId64 \"] TON \", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec, flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "[Added Lines]",
          "725:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|TON|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec, flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "754:   if (flex==NULL) return;",
          "755:   time_t now=time(NULL);",
          "756:   struct tm * gmt=gmtime(&now);",
          "758:       flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "760:   for (unsigned int i = 0; i < len; i++) {",
          "",
          "[Removed Lines]",
          "757:   verbprintf(0,  \"FLEX: %04i-%02i-%02i %02i:%02i:%02i %i/%i/%c %02i.%03i [%010\" PRId64 \"] UNK\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "",
          "[Added Lines]",
          "756:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|UNK|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "335c049a5dc9a4ec7b87fd987635fee15a4d6bbe",
      "candidate_info": {
        "commit_hash": "335c049a5dc9a4ec7b87fd987635fee15a4d6bbe",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/335c049a5dc9a4ec7b87fd987635fee15a4d6bbe",
        "files": [
          "demod_flex.c"
        ],
        "message": "Add documentation, example to show non-printables",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:         buf[idx] = ch;",
          "564:         return 1;",
          "565:     }",
          "566:     return 0;",
          "567: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:         sprintf(buf + idx, \"\\\\x%02x\", ch);",
          "569:         return 4;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddb07c1ddf28da72a3f6a66ffb371696026823af",
      "candidate_info": {
        "commit_hash": "ddb07c1ddf28da72a3f6a66ffb371696026823af",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/ddb07c1ddf28da72a3f6a66ffb371696026823af",
        "files": [
          "demod_flex.c"
        ],
        "message": "Add FLEX binary page type",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262: }",
          "265: unsigned int count_bits(struct Flex * flex, unsigned int data) {",
          "266:   if (flex==NULL) return 0;",
          "267: #ifdef USE_BUILTIN_POPCOUNT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: int is_binary_page(struct Flex * flex) {",
          "266:   if (flex==NULL) return 0;",
          "267:   return (flex->Decode.type == FLEX_PAGETYPE_BINARY);",
          "268: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700:   }",
          "701: }",
          "704:   if (flex==NULL) return;",
          "705:   for (unsigned int i = 0; i < len; i++) {",
          "706:     verbprintf(0, \"%08x\", phaseptr[mw1 + i]);",
          "",
          "[Removed Lines]",
          "703: static void parse_unknown(struct Flex * flex, unsigned int * phaseptr, unsigned int mw1, unsigned int len) {",
          "",
          "[Added Lines]",
          "709: static void parse_binary(struct Flex * flex, unsigned int * phaseptr, unsigned int mw1, unsigned int len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "915:       verbprintf(0, \"TON|\");",
          "916:       parse_tone_only(flex, phaseptr, j);",
          "917:     }",
          "918:     else {",
          "919:       verbprintf(0, \"UNK|\");",
          "921:     }",
          "922:     verbprintf(0, \"\\n\");",
          "",
          "[Removed Lines]",
          "920:       parse_unknown(flex, phaseptr, mw1, len);",
          "",
          "[Added Lines]",
          "924:     else if (is_binary_page(flex)) {",
          "925:       verbprintf(0, \"BIN|\");",
          "926:       parse_binary(flex, phaseptr, mw1, len);",
          "927:     }",
          "930:       parse_binary(flex, phaseptr, mw1, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da5f5f160c32e87bfeb3ef85ca41265acc087744",
      "candidate_info": {
        "commit_hash": "da5f5f160c32e87bfeb3ef85ca41265acc087744",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/da5f5f160c32e87bfeb3ef85ca41265acc087744",
        "files": [
          "demod_flex.c"
        ],
        "message": "Fix incorrect arg order",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567: }",
          "571:         if (flex==NULL) return;",
          "572:         verbprintf(3, \"FLEX: Parse Alpha Numeric %u %u\\n\", mw1, len);",
          "",
          "[Removed Lines]",
          "570: static void parse_alphanumeric(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, unsigned int mw1, unsigned int len, int cont, int frag, int flex_groupmessage, int flex_groupbit) {",
          "",
          "[Added Lines]",
          "570: static void parse_alphanumeric(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, unsigned int mw1, unsigned int len, int frag, int cont, int flex_groupmessage, int flex_groupbit) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab60c8bca2aca1174f0fb8994fbb327c84186ad1",
      "candidate_info": {
        "commit_hash": "ab60c8bca2aca1174f0fb8994fbb327c84186ad1",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/ab60c8bca2aca1174f0fb8994fbb327c84186ad1",
        "files": [
          "demod_flex.c"
        ],
        "message": "Add debug printing to test VW offsets",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: static void parse_alphanumeric(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, unsigned int mw1, unsigned int len, int cont, int frag, int flex_groupmessage, int flex_groupbit) {",
          "571:         if (flex==NULL) return;",
          "574:         verbprintf(1, \"FLEX: %i/%i/%c %02i.%03i %10\" PRId64 \" %c%c|%1d|%3d\\n\", flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode, (flex->Decode.long_address ? 'L' : 'S'), (flex_groupmessage ? 'G' : 'S'), frag, len);",
          "",
          "[Removed Lines]",
          "572:         verbprintf(3, \"FLEX: Parse Alpha Numeric\\n\");",
          "",
          "[Added Lines]",
          "572:         verbprintf(3, \"FLEX: Parse Alpha Numeric %u %u\\n\", mw1, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762: static void decode_phase(struct Flex * flex, char PhaseNo) {",
          "763:   if (flex==NULL) return;",
          "765:   uint32_t *phaseptr=NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:   verbprintf(3, \"FLEX: Decoding phase %c\\n\", PhaseNo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "806:       return;",
          "807:   }",
          "811:   int flex_groupmessage = 0;",
          "812:   int flex_groupbit = 0;",
          "815:   for (unsigned int i = aoffset; i < voffset; i++) {",
          "816:     if (phaseptr[i] == 0 ||",
          "817:         (phaseptr[i] & 0x1FFFFFL) == 0x1FFFFFL) {",
          "818:       verbprintf(3, \"FLEX: Idle codewords, invalid address\\n\");",
          "",
          "[Removed Lines]",
          "809:   verbprintf(3, \"FLEX: BlockInfoWord: (Phase %c) BIW:%08X AW:%02u VW:%02u (up to %u pages)\\n\", PhaseNo, biw, aoffset, voffset, voffset-aoffset);",
          "",
          "[Added Lines]",
          "810:   verbprintf(3, \"FLEX: BlockInfoWord: (Phase %c) BIW:%08X AW %02u VW %02u (up to %u pages)\\n\", PhaseNo, biw, aoffset, voffset, voffset-aoffset);",
          "817:     verbprintf(3, \"FLEX: Processing page offset #%u AW:%08X VW:%08X\\n\", i - aoffset + 1, phaseptr[i], phaseptr[voffset + i - aoffset]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855:       verbprintf(3, \"FLEX: Don't process group messages if a long address\\n\");",
          "856:       return;",
          "857:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860:     verbprintf(3, \"FLEX: AIW %u: capcode:%\" PRId64 \" long:%d group:%d groupbit:%d\\n\", i, flex->Decode.capcode, flex->Decode.long_address, flex_groupmessage, flex_groupbit);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "865:     flex->Decode.type = ((viw >> 4) & 0x7L);",
          "866:     unsigned int mw1 = (viw >> 7) & 0x7FL;",
          "867:     unsigned int len = (viw >> 14) & 0x7FL;",
          "869:     if (flex->Decode.long_address) {",
          "871:       hdr = j + 1;",
          "",
          "[Removed Lines]",
          "868:     unsigned int hdr = mw1;",
          "",
          "[Added Lines]",
          "871:     unsigned int hdr;",
          "",
          "---------------"
        ]
      }
    }
  ]
}