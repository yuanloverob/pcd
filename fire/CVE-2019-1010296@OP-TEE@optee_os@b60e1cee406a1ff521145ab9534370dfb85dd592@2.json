{
  "cve_id": "CVE-2019-1010296",
  "cve_desc": "Linaro/OP-TEE OP-TEE 3.3.0 and earlier is affected by: Buffer Overflow. The impact is: Code execution in context of TEE core (kernel). The component is: optee_os. The fixed version is: 3.4.0 and later.",
  "repo": "OP-TEE/optee_os",
  "patch_hash": "b60e1cee406a1ff521145ab9534370dfb85dd592",
  "patch_info": {
    "commit_hash": "b60e1cee406a1ff521145ab9534370dfb85dd592",
    "repo": "OP-TEE/optee_os",
    "commit_url": "https://github.com/OP-TEE/optee_os/commit/b60e1cee406a1ff521145ab9534370dfb85dd592",
    "files": [
      "core/tee/tee_svc_cryp.c"
    ],
    "message": "svc: check for allocation overflow in syscall_cryp_obj_populate\n\nWithout checking for overflow there is a risk of allocating a buffer\nwith size smaller than anticipated and as a consequence of that it might\nlead to a heap based overflow with attacker controlled data written\noutside the boundaries of the buffer.\n\nFixes: OP-TEE-2018-0009: \"Integer overflow in crypto system calls\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
    "before_after_code_files": [
      "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
    ]
  },
  "patch_diff": {
    "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c": [
      "File: core/tee/tee_svc_cryp.c -> core/tee/tee_svc_cryp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: #include <assert.h>",
      "7: #include <crypto/crypto.h>",
      "8: #include <kernel/tee_ta_manager.h>",
      "9: #include <mm/tee_mmu.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include <compiler.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1547:  if (!type_props)",
      "1548:   return TEE_ERROR_NOT_IMPLEMENTED;",
      "1551:  if (!attrs)",
      "1552:   return TEE_ERROR_OUT_OF_MEMORY;",
      "1553:  res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_attrs, attr_count,",
      "1554:        attrs);",
      "1555:  if (res != TEE_SUCCESS)",
      "",
      "[Removed Lines]",
      "1550:  attrs = malloc(sizeof(TEE_Attribute) * attr_count);",
      "",
      "[Added Lines]",
      "1551:  size_t alloc_size = 0;",
      "1553:  if (MUL_OVERFLOW(sizeof(TEE_Attribute), attr_count, &alloc_size))",
      "1554:   return TEE_ERROR_OVERFLOW;",
      "1556:  attrs = malloc(alloc_size);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ca9e426d8d17f1e1b19ebfa782f7f914e4f6c53",
      "candidate_info": {
        "commit_hash": "4ca9e426d8d17f1e1b19ebfa782f7f914e4f6c53",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/4ca9e426d8d17f1e1b19ebfa782f7f914e4f6c53",
        "files": [
          "core/crypto/signed_hdr.c"
        ],
        "message": "core: add missing return(s) in shdr_alloc_and_copy\n\nFixes: \"Incorrect error handling in shdr_alloc_and_copy (x2)\" as\nreported by Riscure.\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/crypto/signed_hdr.c||core/crypto/signed_hdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/crypto/signed_hdr.c||core/crypto/signed_hdr.c": [
          "File: core/crypto/signed_hdr.c -> core/crypto/signed_hdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  struct shdr *shdr;",
          "20:  if (img_size < sizeof(struct shdr))",
          "22:  shdr_size = SHDR_GET_SIZE(img);",
          "23:  if (img_size < shdr_size)",
          "26:  shdr = malloc(shdr_size);",
          "27:  if (!shdr)",
          "",
          "[Removed Lines]",
          "21:   NULL;",
          "24:   NULL;",
          "",
          "[Added Lines]",
          "21:   return NULL;",
          "25:   return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e768f8a473409215fe3fff8f6e31f8a3a0103c6",
      "candidate_info": {
        "commit_hash": "7e768f8a473409215fe3fff8f6e31f8a3a0103c6",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/7e768f8a473409215fe3fff8f6e31f8a3a0103c6",
        "files": [
          "core/arch/arm/kernel/user_ta.c"
        ],
        "message": "core: clear the entire TA area\n\nPreviously we cleared (memset to zero) the size corresponding to code\nand data segments, however the allocation for the TA is made on the\ngranularity of the memory pool, meaning that we did not clear all memory\nand because of that we could potentially leak code and data of a\nprevious loaded TA.\n\nFixes: OP-TEE-2018-0006: \"Potential disclosure of previously loaded TA\ncode and data\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nSuggested-by: Jens Wiklander <jens.wiklander@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/arch/arm/kernel/user_ta.c||core/arch/arm/kernel/user_ta.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/arch/arm/kernel/user_ta.c||core/arch/arm/kernel/user_ta.c": [
          "File: core/arch/arm/kernel/user_ta.c -> core/arch/arm/kernel/user_ta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: #else",
          "198:  struct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);",
          "202:  return mobj;",
          "203: #endif",
          "204: }",
          "",
          "[Removed Lines]",
          "200:  if (mobj)",
          "201:   memset(mobj_get_va(mobj, 0), 0, size);",
          "",
          "[Added Lines]",
          "200:  if (mobj) {",
          "201:   size_t granularity = BIT(tee_mm_sec_ddr.shift);",
          "204:   memset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));",
          "205:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3adcf566cb278444830e7badfdcc3983e334fd1",
      "candidate_info": {
        "commit_hash": "e3adcf566cb278444830e7badfdcc3983e334fd1",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/e3adcf566cb278444830e7badfdcc3983e334fd1",
        "files": [
          "core/arch/arm/tee/entry_std.c"
        ],
        "message": "core: ensure that supplied range matches MOBJ\n\nIn set_rmem_param() if the MOBJ is found by the cookie it's verified to\nrepresent non-secure shared memory. Prior to this patch the supplied\nsub-range to be used of the MOBJ was not checked here and relied on\nlater checks further down the chain. Those checks seems to be enough\nfor user TAs, but not for pseudo TAs where the size isn't checked.\n\nThis patch adds a check for offset and size to see that they remain\ninside the memory covered by the MOBJ.\n\nFixes: OP-TEE-2018-0004: \"Unchecked parameters are passed through from\nREE\".\n\nSigned-off-by: Jens Wiklander <jens.wiklander@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/arch/arm/tee/entry_std.c||core/arch/arm/tee/entry_std.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/arch/arm/tee/entry_std.c||core/arch/arm/tee/entry_std.c": [
          "File: core/arch/arm/tee/entry_std.c -> core/arch/arm/tee/entry_std.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static TEE_Result set_rmem_param(const struct optee_msg_param_rmem *rmem,",
          "102:      struct param_mem *mem)",
          "103: {",
          "104:  uint64_t shm_ref = READ_ONCE(rmem->shm_ref);",
          "106:  mem->mobj = mobj_reg_shm_get_by_cookie(shm_ref);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  size_t req_size = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:  mem->offs = READ_ONCE(rmem->offs);",
          "111:  mem->size = READ_ONCE(rmem->size);",
          "113:  return TEE_SUCCESS;",
          "114: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  if (ADD_OVERFLOW(mem->offs, mem->size, &req_size) ||",
          "119:      mem->mobj->size < req_size)",
          "120:   return TEE_ERROR_SECURITY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f58cdbe41688b6d8a5e8b06bfaef1b64c51309f",
      "candidate_info": {
        "commit_hash": "8f58cdbe41688b6d8a5e8b06bfaef1b64c51309f",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/8f58cdbe41688b6d8a5e8b06bfaef1b64c51309f",
        "files": [
          "core/tee/tee_ree_fs.c"
        ],
        "message": "fs: prevent out of place write when no data\n\nFixes: \"Uninitialized return value returned if len equals 0\" as reported\nby Riscure.\n\nSigned-off-by: Jens Wiklander <jens.wiklander@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/tee/tee_ree_fs.c||core/tee/tee_ree_fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/tee/tee_ree_fs.c||core/tee/tee_ree_fs.c": [
          "File: core/tee/tee_ree_fs.c -> core/tee/tee_ree_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  uint8_t *block;",
          "97:  struct tee_fs_htree_meta *meta = tee_fs_htree_get_meta(fdp->ht);",
          "99:  block = get_tmp_block();",
          "100:  if (!block)",
          "101:   return TEE_ERROR_OUT_OF_MEMORY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  if (!len)",
          "105:   return TEE_ERROR_BAD_PARAMETERS;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84e9c40bd82d7f2b0946de15af2784a9707c9887",
      "candidate_info": {
        "commit_hash": "84e9c40bd82d7f2b0946de15af2784a9707c9887",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/84e9c40bd82d7f2b0946de15af2784a9707c9887",
        "files": [
          "core/tee/tee_svc_cryp.c"
        ],
        "message": "core: svc_cryp: fix truncated buffer length\n\nFixes truncated buffer length in multiple crypto syscalls. The buffer\nlength is truncated on 32-bit systems because a size_t can't hold a\nuint64_t which is use to carry the buffer length.\n\nFixes: \"Truncated buffer length in crypto system calls (x4)\" as reported\nby Riscure.\n\nSigned-off-by: Jens Wiklander <jens.wiklander@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [
            "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
          ],
          "candidate": [
            "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
          ]
        }
      },
      "candidate_diff": {
        "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c": [
          "File: core/tee/tee_svc_cryp.c -> core/tee/tee_svc_cryp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:  },",
          "825: };",
          "827: TEE_Result syscall_cryp_obj_get_info(unsigned long obj, TEE_ObjectInfo *info)",
          "828: {",
          "829:  TEE_Result res;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: static TEE_Result get_user_u64_as_size_t(size_t *dst, uint64_t *src)",
          "828: {",
          "829:  uint64_t d = 0;",
          "830:  TEE_Result res = tee_svc_copy_from_user(&d, src, sizeof(d));",
          "836:  if (!res && ADD_OVERFLOW(0, d, dst))",
          "837:   return TEE_ERROR_OVERFLOW;",
          "839:  return res;",
          "840: }",
          "842: static TEE_Result put_user_u64(uint64_t *dst, size_t value)",
          "843: {",
          "844:  uint64_t v = value;",
          "846:  return tee_svc_copy_to_user(dst, &v, sizeof(v));",
          "847: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2283: {",
          "2284:  TEE_Result res, res2;",
          "2285:  size_t hash_size;",
          "2286:  struct tee_cryp_state *cs;",
          "2287:  struct tee_ta_session *sess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2308:  size_t hlen = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2301:  if (res != TEE_SUCCESS)",
          "2302:   return res;",
          "2306:  if (res != TEE_SUCCESS)",
          "2307:   return res;",
          "",
          "[Removed Lines]",
          "2304:  uint64_t hlen = 0;",
          "2305:  res = tee_svc_copy_from_user(&hlen, hash_len, sizeof(hlen));",
          "",
          "[Added Lines]",
          "2327:  res = get_user_u64_as_size_t(&hlen, hash_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2365:   return TEE_ERROR_BAD_PARAMETERS;",
          "2366:  }",
          "2367: out:",
          "2370:  if (res2 != TEE_SUCCESS)",
          "2371:   return res2;",
          "2372:  return res;",
          "",
          "[Removed Lines]",
          "2368:  hlen = hash_size;",
          "2369:  res2 = tee_svc_copy_to_user(hash_len, &hlen, sizeof(*hash_len));",
          "",
          "[Added Lines]",
          "2390:  res2 = put_user_u64(hash_len, hash_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2435:  TEE_Result res;",
          "2436:  struct tee_cryp_state *cs;",
          "2437:  struct tee_ta_session *sess;",
          "2440:  res = tee_ta_get_current_session(&sess);",
          "2441:  if (res != TEE_SUCCESS)",
          "",
          "[Removed Lines]",
          "2438:  uint64_t dlen;",
          "",
          "[Added Lines]",
          "2459:  size_t dlen = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2455:  if (!dst_len) {",
          "2456:   dlen = 0;",
          "2457:  } else {",
          "2459:   if (res != TEE_SUCCESS)",
          "2460:    return res;",
          "",
          "[Removed Lines]",
          "2458:   res = tee_svc_copy_from_user(&dlen, dst_len, sizeof(dlen));",
          "",
          "[Added Lines]",
          "2479:   res = get_user_u64_as_size_t(&dlen, dst_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2489:      dst_len != NULL) {",
          "2490:   TEE_Result res2;",
          "2494:   if (res2 != TEE_SUCCESS)",
          "2495:    res = res2;",
          "2496:  }",
          "",
          "[Removed Lines]",
          "2492:   dlen = src_len;",
          "2493:   res2 = tee_svc_copy_to_user(dst_len, &dlen, sizeof(*dst_len));",
          "",
          "[Added Lines]",
          "2513:   res2 = put_user_u64(dst_len, src_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2994:  TEE_Result res;",
          "2995:  struct tee_cryp_state *cs;",
          "2996:  struct tee_ta_session *sess;",
          "3000:  res = tee_ta_get_current_session(&sess);",
          "3001:  if (res != TEE_SUCCESS)",
          "",
          "[Removed Lines]",
          "2997:  uint64_t dlen;",
          "2998:  size_t tmp_dlen;",
          "",
          "[Added Lines]",
          "3017:  size_t dlen = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3012:  if (res != TEE_SUCCESS)",
          "3013:   return res;",
          "3016:  if (res != TEE_SUCCESS)",
          "3017:   return res;",
          "",
          "[Removed Lines]",
          "3015:  res = tee_svc_copy_from_user(&dlen, dst_len, sizeof(dlen));",
          "",
          "[Added Lines]",
          "3034:  res = get_user_u64_as_size_t(&dlen, dst_len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3029:   goto out;",
          "3030:  }",
          "3033:  res = crypto_authenc_update_payload(cs->ctx, cs->algo, cs->mode,",
          "3034:          src_data, src_len, dst_data,",
          "3038: out:",
          "3039:  if (res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) {",
          "3042:   if (res2 != TEE_SUCCESS)",
          "3043:    res = res2;",
          "3044:  }",
          "",
          "[Removed Lines]",
          "3032:  tmp_dlen = dlen;",
          "3035:          &tmp_dlen);",
          "3036:  dlen = tmp_dlen;",
          "3040:   TEE_Result res2 = tee_svc_copy_to_user(dst_len, &dlen,",
          "3041:              sizeof(*dst_len));",
          "",
          "[Added Lines]",
          "3053:          &dlen);",
          "3056:   TEE_Result res2 = put_user_u64(dst_len, dlen);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3053:  TEE_Result res;",
          "3054:  struct tee_cryp_state *cs;",
          "3055:  struct tee_ta_session *sess;",
          "3061:  res = tee_ta_get_current_session(&sess);",
          "3062:  if (res != TEE_SUCCESS)",
          "",
          "[Removed Lines]",
          "3056:  uint64_t dlen;",
          "3057:  uint64_t tlen = 0;",
          "3058:  size_t tmp_dlen;",
          "3059:  size_t tmp_tlen;",
          "",
          "[Added Lines]",
          "3072:  size_t dlen = 0;",
          "3073:  size_t tlen = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3079:  if (!dst_len) {",
          "3080:   dlen = 0;",
          "3081:  } else {",
          "3083:   if (res != TEE_SUCCESS)",
          "3084:    return res;",
          "",
          "[Removed Lines]",
          "3082:   res = tee_svc_copy_from_user(&dlen, dst_len, sizeof(dlen));",
          "",
          "[Added Lines]",
          "3096:   res = get_user_u64_as_size_t(&dlen, dst_len);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3097:   goto out;",
          "3098:  }",
          "3101:  if (res != TEE_SUCCESS)",
          "3102:   return res;",
          "",
          "[Removed Lines]",
          "3100:  res = tee_svc_copy_from_user(&tlen, tag_len, sizeof(tlen));",
          "",
          "[Added Lines]",
          "3114:  res = get_user_u64_as_size_t(&tlen, tag_len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3109:  if (res != TEE_SUCCESS)",
          "3110:   return res;",
          "3114:  res = crypto_authenc_enc_final(cs->ctx, cs->algo, src_data,",
          "3120: out:",
          "3121:  if (res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) {",
          "3122:   TEE_Result res2;",
          "3124:   if (dst_len != NULL) {",
          "3127:    if (res2 != TEE_SUCCESS)",
          "3128:     return res2;",
          "3129:   }",
          "3132:   if (res2 != TEE_SUCCESS)",
          "3133:    return res2;",
          "3134:  }",
          "",
          "[Removed Lines]",
          "3112:  tmp_dlen = dlen;",
          "3113:  tmp_tlen = tlen;",
          "3115:            src_len, dst_data, &tmp_dlen, tag,",
          "3116:            &tmp_tlen);",
          "3117:  dlen = tmp_dlen;",
          "3118:  tlen = tmp_tlen;",
          "3125:    res2 = tee_svc_copy_to_user(dst_len, &dlen,",
          "3126:           sizeof(*dst_len));",
          "3131:   res2 = tee_svc_copy_to_user(tag_len, &tlen, sizeof(*tag_len));",
          "",
          "[Added Lines]",
          "3127:            src_len, dst_data, &dlen, tag, &tlen);",
          "3134:    res2 = put_user_u64(dst_len, dlen);",
          "3139:   res2 = put_user_u64(tag_len, tlen);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3143:  TEE_Result res;",
          "3144:  struct tee_cryp_state *cs;",
          "3145:  struct tee_ta_session *sess;",
          "3149:  res = tee_ta_get_current_session(&sess);",
          "3150:  if (res != TEE_SUCCESS)",
          "",
          "[Removed Lines]",
          "3146:  uint64_t dlen;",
          "3147:  size_t tmp_dlen;",
          "",
          "[Added Lines]",
          "3154:  size_t dlen = 0;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3167:  if (!dst_len) {",
          "3168:   dlen = 0;",
          "3169:  } else {",
          "3171:   if (res != TEE_SUCCESS)",
          "3172:    return res;",
          "",
          "[Removed Lines]",
          "3170:   res = tee_svc_copy_from_user(&dlen, dst_len, sizeof(dlen));",
          "",
          "[Added Lines]",
          "3177:   res = get_user_u64_as_size_t(&dlen, dst_len);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3192:  if (res != TEE_SUCCESS)",
          "3193:   return res;",
          "3196:  res = crypto_authenc_dec_final(cs->ctx, cs->algo, src_data, src_len,",
          "3200: out:",
          "3201:  if ((res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) &&",
          "3202:      dst_len != NULL) {",
          "3206:   if (res2 != TEE_SUCCESS)",
          "3207:    return res2;",
          "3208:  }",
          "",
          "[Removed Lines]",
          "3195:  tmp_dlen = dlen;",
          "3197:            dst_data, &tmp_dlen, tag, tag_len);",
          "3198:  dlen = tmp_dlen;",
          "3203:   TEE_Result res2;",
          "3205:   res2 = tee_svc_copy_to_user(dst_len, &dlen, sizeof(*dst_len));",
          "",
          "[Added Lines]",
          "3203:            dst_data, &dlen, tag, tag_len);",
          "3208:   TEE_Result res2 = put_user_u64(dst_len, dlen);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3239:  TEE_Result res;",
          "3240:  struct tee_cryp_state *cs;",
          "3241:  struct tee_ta_session *sess;",
          "3243:  size_t dlen;",
          "3244:  struct tee_obj *o;",
          "3245:  void *label = NULL;",
          "",
          "[Removed Lines]",
          "3242:  uint64_t dlen64;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3265:  if (res != TEE_SUCCESS)",
          "3266:   return res;",
          "3269:  if (res != TEE_SUCCESS)",
          "3270:   return res;",
          "3273:  res = tee_mmu_check_access_rights(",
          "3274:   utc,",
          "",
          "[Removed Lines]",
          "3268:  res = tee_svc_copy_from_user(&dlen64, dst_len, sizeof(dlen64));",
          "3271:  dlen = dlen64;",
          "",
          "[Added Lines]",
          "3271:  res = get_user_u64_as_size_t(&dlen, dst_len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3393:  free(params);",
          "3395:  if (res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) {",
          "3400:   if (res2 != TEE_SUCCESS)",
          "3401:    return res2;",
          "3402:  }",
          "",
          "[Removed Lines]",
          "3396:   TEE_Result res2;",
          "3398:   dlen64 = dlen;",
          "3399:   res2 = tee_svc_copy_to_user(dst_len, &dlen64, sizeof(*dst_len));",
          "",
          "[Added Lines]",
          "3398:   TEE_Result res2 = put_user_u64(dst_len, dlen);",
          "",
          "---------------"
        ]
      }
    }
  ]
}