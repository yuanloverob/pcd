{
  "cve_id": "CVE-2024-22862",
  "cve_desc": "Integer overflow vulnerability in FFmpeg before n6.1, allows remote attackers to execute arbitrary code via the JJPEG XL Parser.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "ca09d8a0dcd82e3128e62463231296aaf63ae6f7",
  "patch_info": {
    "commit_hash": "ca09d8a0dcd82e3128e62463231296aaf63ae6f7",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ca09d8a0dcd82e3128e62463231296aaf63ae6f7",
    "files": [
      "libavcodec/jpegxl_parser.c"
    ],
    "message": "avcodec/jpegxl_parser: Check for ctx->skip overflow\n\nFixes: out of array access\nFixes: 62113/clusterfuzz-testcase-minimized-ffmpeg_DEMUXER_fuzzer-5025082076168192\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c"
    ]
  },
  "patch_diff": {
    "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c": [
      "File: libavcodec/jpegxl_parser.c -> libavcodec/jpegxl_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1326:         if (!size)",
      "1327:             return AVERROR_INVALIDDATA;",
      "1330:             return AVERROR_INVALIDDATA;",
      "1332:         ctx->skip += size;",
      "",
      "[Removed Lines]",
      "1329:         if (size <= head_size + 4)",
      "",
      "[Added Lines]",
      "1329:         if (size <= head_size + 4 || size > INT_MAX - ctx->skip)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "019b3ea65aee78cb68ee94beb37dab1bba5d2aa6",
      "candidate_info": {
        "commit_hash": "019b3ea65aee78cb68ee94beb37dab1bba5d2aa6",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/019b3ea65aee78cb68ee94beb37dab1bba5d2aa6",
        "files": [
          "libavcodec/jpegxl_parse.c",
          "libavcodec/jpegxl_parser.c"
        ],
        "message": "avcodec/jpegxl_parse{,r}: use correct ISOBMFF extended size location\n\nAccording to ISO/IEC 14996-12, size == 1 means a 64-bit extended-size\nfield occurs *after* the 32-bit box type, not before. This fix should\nallow correct parsing of JXL files with extended-size boxes.\n\nSigned-off-by: Leo Izen <leo.izen@gmail.com>",
        "before_after_code_files": [
          "libavcodec/jpegxl_parse.c||libavcodec/jpegxl_parse.c",
          "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c"
          ],
          "candidate": [
            "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/jpegxl_parse.c||libavcodec/jpegxl_parse.c": [
          "File: libavcodec/jpegxl_parse.c -> libavcodec/jpegxl_parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:             return AVERROR_BUFFER_TOO_SMALL;",
          "464:         size = bytestream2_get_be32(&gb);",
          "465:         if (size == 1) {",
          "467:                 return AVERROR_BUFFER_TOO_SMALL;",
          "468:             size = bytestream2_get_be64(&gb);",
          "469:             head_size = 16;",
          "",
          "[Removed Lines]",
          "466:             if (bytestream2_get_bytes_left(&gb) < 12)",
          "",
          "[Added Lines]",
          "465:         tag = bytestream2_get_le32(&gb);",
          "468:             if (bytestream2_get_bytes_left(&gb) < 8)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474:         if (size)",
          "475:             size -= head_size;",
          "479:         if (tag == MKTAG('j','x','l','p')) {",
          "480:             uint32_t idx;",
          "481:             if (bytestream2_get_bytes_left(&gb) < 4)",
          "",
          "[Removed Lines]",
          "477:         tag = bytestream2_get_le32(&gb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libavcodec/jpegxl_parser.c||libavcodec/jpegxl_parser.c": [
          "File: libavcodec/jpegxl_parser.c -> libavcodec/jpegxl_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:     while (1) {",
          "1344:         uint64_t size;",
          "1347:         if (bytestream2_peek_le16(&gb) == FF_JPEGXL_CODESTREAM_SIGNATURE_LE)",
          "1348:             break;",
          "",
          "[Removed Lines]",
          "1345:         int head_size = 4;",
          "",
          "[Added Lines]",
          "1345:         int head_size = 8;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:             return AVERROR_BUFFER_TOO_SMALL;",
          "1355:         size = bytestream2_get_be32(&gb);",
          "1356:         if (size == 1) {",
          "1358:                 return AVERROR_BUFFER_TOO_SMALL;",
          "1359:             size = bytestream2_get_be64(&gb);",
          "1361:         }",
          "1362:         if (!size)",
          "1363:             return AVERROR_INVALIDDATA;",
          "1366:             return AVERROR_INVALIDDATA;",
          "1368:         ctx->skip += size;",
          "",
          "[Removed Lines]",
          "1357:             if (bytestream2_get_bytes_left(&gb) < 12)",
          "1360:             head_size = 12;",
          "1365:         if (size <= head_size + 4 || size > INT_MAX - ctx->skip)",
          "",
          "[Added Lines]",
          "1356:         bytestream2_skip(&gb, 4); // tag",
          "1358:             if (bytestream2_get_bytes_left(&gb) < 8)",
          "1361:             head_size = 16;",
          "1366:         if (size <= head_size || size > INT_MAX - ctx->skip)",
          "",
          "---------------"
        ]
      }
    }
  ]
}