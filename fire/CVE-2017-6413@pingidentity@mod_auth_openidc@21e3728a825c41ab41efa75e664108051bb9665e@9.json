{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5af398129bacf0434e83db5960108e0dfcabfb7",
      "candidate_info": {
        "commit_hash": "b5af398129bacf0434e83db5960108e0dfcabfb7",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/b5af398129bacf0434e83db5960108e0dfcabfb7",
        "files": [
          "configure.ac"
        ],
        "message": "bump to 2.2.1rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb7f90dbbc98345f7260f8c09b5571bf8a25a349",
      "candidate_info": {
        "commit_hash": "bb7f90dbbc98345f7260f8c09b5571bf8a25a349",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/bb7f90dbbc98345f7260f8c09b5571bf8a25a349",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/oauth.c",
          "src/util.c"
        ],
        "message": "refine, document and attribute relative redirect_uri changes\n\n- closes #200\n- add @moschlar to AUTHORS, thanks!\n- bump to 2.2.1rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/oauth.c||src/oauth.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3043: static int oidc_check_userid_openidc(request_rec *r, oidc_cfg *c) {",
          "3046:   oidc_error(r,",
          "3047:     \"configuration error: the authentication type is set to \\\"openid-connect\\\" but OIDCRedirectURI has not been set\");",
          "3048:   return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Removed Lines]",
          "3045:  if (c->redirect_uri == NULL) {",
          "",
          "[Added Lines]",
          "3045:  if (oidc_get_redirect_uri(r, c) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3325:    &auth_openidc_module);",
          "3327:  int rc = DECLINED;",
          "3330:   if (oidc_util_request_has_parameter(r,",
          "3331:     OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "",
          "[Removed Lines]",
          "3328:  if (oidc_util_request_matches_url(r, c->redirect_uri)) {",
          "",
          "[Added Lines]",
          "3328:  if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:   }",
          "622:   if (oidc_util_request_has_parameter(r, \"jwks\")) {",
          "",
          "[Removed Lines]",
          "619:  } else if ((c->redirect_uri != NULL)",
          "620:    && (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)))) {",
          "",
          "[Added Lines]",
          "619:  } else if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  const char *scheme_str = oidc_get_current_url_scheme(r);",
          "439:  const char *host_str = oidc_get_current_url_host(r);",
          "",
          "[Removed Lines]",
          "436: const char *oidc_get_current_url_base(request_rec *r) {",
          "",
          "[Added Lines]",
          "436: static const char *oidc_get_current_url_base(request_rec *r) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33647c9ee7c984ea3ad18151810cd8381d7e3a34",
      "candidate_info": {
        "commit_hash": "33647c9ee7c984ea3ad18151810cd8381d7e3a34",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/33647c9ee7c984ea3ad18151810cd8381d7e3a34",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c",
          "test/test.c"
        ],
        "message": "assume default port when X-Forwarded-Proto has been set\n\n- refactor oidc_get_current_url_port so that it assumes the default port\nwhen X-Forwarded-Proto has been set; closes #282 and may address #278\n- bump to 2.3.1rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: static const char *oidc_get_current_url_port(const request_rec *r,",
          "390:   const char *scheme_str) {",
          "392:  const char *port_str = oidc_util_hdr_in_x_forwarded_port_get(r);",
          "417:   }",
          "418:  }",
          "419:  return port_str;",
          "420: }",
          "",
          "[Removed Lines]",
          "393:  if (port_str == NULL) {",
          "395:   const char *host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "396:   if (host_hdr) {",
          "397:    port_str = strchr(host_hdr, OIDC_CHAR_COLON);",
          "398:    if (port_str)",
          "399:     port_str++;",
          "400:   } else {",
          "401:    host_hdr = oidc_util_hdr_in_host_get(r);",
          "402:    if (host_hdr)",
          "403:     port_str = strchr(host_hdr, OIDC_CHAR_COLON);",
          "404:    if (port_str == NULL) {",
          "406:     const apr_port_t port = r->connection->local_addr->port;",
          "407:     apr_byte_t print_port = TRUE;",
          "408:     if ((apr_strnatcmp(scheme_str, \"https\") == 0) && port == 443)",
          "409:      print_port = FALSE;",
          "410:     else if ((apr_strnatcmp(scheme_str, \"http\") == 0) && port == 80)",
          "411:      print_port = FALSE;",
          "412:     if (print_port)",
          "413:      port_str = apr_psprintf(r->pool, \"%u\", port);",
          "414:    } else {",
          "415:     port_str++;",
          "416:    }",
          "",
          "[Added Lines]",
          "397:  if (port_str)",
          "398:   return port_str;",
          "404:  const char *host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "405:  if (host_hdr) {",
          "406:   port_str = strchr(host_hdr, OIDC_CHAR_COLON);",
          "407:   if (port_str)",
          "408:    port_str++;",
          "409:   return port_str;",
          "410:  }",
          "416:  host_hdr = oidc_util_hdr_in_host_get(r);",
          "417:  if (host_hdr) {",
          "418:   port_str = strchr(host_hdr, OIDC_CHAR_COLON);",
          "419:   if (port_str) {",
          "420:    port_str++;",
          "421:    return port_str;",
          "429:  if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "430:   return NULL;",
          "436:  const apr_port_t port = r->connection->local_addr->port;",
          "437:  if ((apr_strnatcmp(scheme_str, \"https\") == 0) && port == 443)",
          "438:   return NULL;",
          "439:  else if ((apr_strnatcmp(scheme_str, \"http\") == 0) && port == 80)",
          "440:   return NULL;",
          "442:  port_str = apr_psprintf(r->pool, \"%u\", port);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1189:  url = oidc_get_current_url(r);",
          "1190:  TST_ASSERT_STR(\"test_headers (5)\", url, \"http://www.outer.com:321\");",
          "1192:  return 0;",
          "1193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1193:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1194:  url = oidc_get_current_url(r);",
          "1195:  TST_ASSERT_STR(\"test_headers (6)\", url, \"http://www.example.com\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51d8c7839840990d99c87ba00a8b3458516d1585",
      "candidate_info": {
        "commit_hash": "51d8c7839840990d99c87ba00a8b3458516d1585",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/51d8c7839840990d99c87ba00a8b3458516d1585",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "fix crash on prefork process exit when used with Redis cache; see #256\n\nFixes potential crash when used with MPM prefork: a process exits would\ncleanup the connection per-process context that may already have been\ncleaned up because of a disconnect.\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: #define OIDC_CACHE_REDIS_CONTEXT \"oidc_cache_redis_context\"",
          "164:   oidc_cache_cfg_redis_t *context) {",
          "169:    r->server->process->pool);",
          "178:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "180:    return NULL;",
          "181:   }",
          "188:   oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "189:     context->host_str, context->port);",
          "190:  }",
          "193: }",
          "",
          "[Removed Lines]",
          "163: static redisContext * oidc_cache_redis_connect(request_rec *r,",
          "167:  redisContext *ctx = NULL;",
          "168:  apr_pool_userdata_get((void **) &ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "171:  if (ctx == NULL) {",
          "174:   ctx = redisConnect(context->host_str, context->port);",
          "177:   if ((ctx == NULL) || (ctx->err != 0)) {",
          "179:      context->host_str, context->port, ctx->errstr);",
          "184:   apr_pool_userdata_set(ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "185:     (apr_status_t (*)(void *)) redisFree, r->server->process->pool);",
          "192:  return ctx;",
          "",
          "[Added Lines]",
          "163: typedef struct {",
          "164:  redisContext *ctx;",
          "165: } oidc_cache_redis_ctx_t;",
          "170: static apr_status_t oidc_cache_redis_free(void *ptr) {",
          "171:  oidc_cache_redis_ctx_t *rctx = (oidc_cache_redis_ctx_t *) ptr;",
          "172:  if (rctx->ctx != NULL) {",
          "173:   redisFree(rctx->ctx);",
          "174:   rctx->ctx = NULL;",
          "175:  }",
          "176:  return APR_SUCCESS;",
          "177: }",
          "182: static oidc_cache_redis_ctx_t * oidc_cache_redis_connect(request_rec *r,",
          "186:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "187:  apr_pool_userdata_get((void **) &rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "190:  if (rctx == NULL) {",
          "192:   rctx = apr_pcalloc(r->server->process->pool,",
          "193:     sizeof(oidc_cache_redis_ctx_t));",
          "196:   rctx->ctx = redisConnect(context->host_str, context->port);",
          "199:   if ((rctx->ctx == NULL) || (rctx->ctx->err != 0)) {",
          "201:      context->host_str, context->port, rctx->ctx->errstr);",
          "206:   apr_pool_userdata_set(rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "207:     (apr_status_t (*)(void *)) oidc_cache_redis_free,",
          "208:     r->server->process->pool);",
          "215:  return rctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "199:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "202:  redisReply *reply = NULL;",
          "203:  int i = 0;",
          "",
          "[Removed Lines]",
          "201:  redisContext *ctx = NULL;",
          "",
          "[Added Lines]",
          "224:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:  for (i = 0; i < 2; i++) {",
          "211:    break;",
          "213:   if (context->passwd != NULL) {",
          "215:      apr_psprintf(r->pool, \"AUTH %s\", context->passwd));",
          "216:   }",
          "219:   va_list args;",
          "220:   va_start(args, format);",
          "222:   va_end(args);",
          "224:   if (context->passwd != NULL) {",
          "227:    if (reply == NULL) {",
          "228:     oidc_error(r,",
          "229:       \"authentication to the Redis server (%s:%d) failed, reply == NULL\",",
          "",
          "[Removed Lines]",
          "209:   ctx = oidc_cache_redis_connect(r, context);",
          "210:   if (ctx == NULL)",
          "214:    redisAppendCommand(ctx,",
          "221:   redisvAppendCommand(ctx, format, args);",
          "226:    redisGetReply(ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "232:   rctx = oidc_cache_redis_connect(r, context);",
          "233:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "237:    redisAppendCommand(rctx->ctx,",
          "244:   redisvAppendCommand(rctx->ctx, format, args);",
          "249:    redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:   reply = NULL;",
          "243:   if (reply != NULL) {",
          "",
          "[Removed Lines]",
          "240:   redisGetReply(ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "263:   redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:   oidc_error(r,",
          "254:     \"redisvAppendCommand/redisGetReply (%d) failed, disconnecting: '%s'\",",
          "261:  }",
          "263:  return reply;",
          "",
          "[Removed Lines]",
          "255:     i, ctx->errstr);",
          "258:   redisFree(ctx);",
          "259:   apr_pool_userdata_set(NULL, OIDC_CACHE_REDIS_CONTEXT,",
          "260:     apr_pool_cleanup_null, r->server->process->pool);",
          "",
          "[Added Lines]",
          "278:     i, rctx->ctx->errstr);",
          "281:   oidc_cache_redis_free(rctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "021bb0a3d534f35642e96135ce85d4850fc5a56a",
      "candidate_info": {
        "commit_hash": "021bb0a3d534f35642e96135ce85d4850fc5a56a",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/021bb0a3d534f35642e96135ce85d4850fc5a56a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "release 1.8.10.3: security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[1.8.10.2],[hzandbelt@pingidentity.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[1.8.10.3],[hzandbelt@pingidentity.com])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "141:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "139: static void oidc_scrub_headers(request_rec *r) {",
          "",
          "[Added Lines]",
          "139: void oidc_scrub_headers(request_rec *r) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: void oidc_request_state_set(request_rec *r, const char *key, const char *value);",
          "374: const char*oidc_request_state_get(request_rec *r, const char *key);",
          "375: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
          "378: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376: void oidc_scrub_headers(request_rec *r);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:   return oidc_oauth_return_www_authenticate(r, \"invalid_token\", \"Could not set remote user\");",
          "654:  }",
          "657:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "658:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:  oidc_scrub_headers(r);",
          "",
          "---------------"
        ]
      }
    }
  ]
}