{
  "cve_id": "CVE-2019-15692",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow. Vulnerability could be triggered from CopyRectDecoder due to incorrect value checks. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
  "patch_info": {
    "commit_hash": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/996356b6c65ca165ee1ea46a571c32a1dc3c3821",
    "files": [
      "common/rfb/PixelBuffer.cxx"
    ],
    "message": "Restrict PixelBuffer dimensions to safe values\n\nWe do a lot of calculations based on pixel coordinates and we need\nto make sure they do not overflow. Restrict the maximum dimensions\nwe support rather than try to switch over all calculations to use\n64 bit integers.\n\nThis prevents attackers from from injecting code by specifying a\nhuge framebuffer size and relying on the values overflowing to\naccess invalid areas of the heap.\n\nThis primarily affects the client which gets both the screen\ndimensions and the pixel contents from the remote side. But the\nserver might also be affected as a client can adjust the screen\ndimensions, as can applications inside the session.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
    "before_after_code_files": [
      "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx"
    ]
  },
  "patch_diff": {
    "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx": [
      "File: common/rfb/PixelBuffer.cxx -> common/rfb/PixelBuffer.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: static LogWriter vlog(\"PixelBuffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: const int maxPixelBufferWidth = 16384;",
      "39: const int maxPixelBufferHeight = 16384;",
      "40: const int maxPixelBufferStride = 16384;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109: void PixelBuffer::setSize(int width, int height)",
      "110: {",
      "111:   width_ = width;",
      "112:   height_ = height;",
      "113: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:   if ((width < 0) || (width > maxPixelBufferWidth))",
      "120:     throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);",
      "121:   if ((height < 0) || (height > maxPixelBufferHeight))",
      "122:     throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "340: void FullFramePixelBuffer::setBuffer(int width, int height,",
      "341:                                      rdr::U8* data_, int stride_)",
      "342: {",
      "343:   ModifiablePixelBuffer::setSize(width, height);",
      "344:   stride = stride_;",
      "345:   data = data_;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "356:   if ((width < 0) || (width > maxPixelBufferWidth))",
      "357:     throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);",
      "358:   if ((height < 0) || (height > maxPixelBufferHeight))",
      "359:     throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);",
      "360:   if ((stride_ < 0) || (stride_ > maxPixelBufferStride) || (stride_ < width))",
      "361:     throw rfb::Exception(\"Invalid PixelBuffer stride of %d pixels requested\", stride_);",
      "362:   if ((width != 0) && (height != 0) && (data_ == NULL))",
      "363:     throw rfb::Exception(\"PixelBuffer requested without a valid memory area\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05e28490873a861379c943bf616614b78b558b89",
      "candidate_info": {
        "commit_hash": "05e28490873a861379c943bf616614b78b558b89",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/05e28490873a861379c943bf616614b78b558b89",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Handle pixel formats with odd shift values\n\nOur fast paths assume that each channel fits in to a separate byte.\nThat means the shift needs to be a multiple of 8. Start actually\nchecking this so that a client cannot trip us up and possibly cause\nincorrect code exection.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     return false;",
          "207:   if (blueMax != 255)",
          "208:     return false;",
          "210:   return true;",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   if ((redShift & 0x7) != 0)",
          "210:     return false;",
          "211:   if ((greenShift & 0x7) != 0)",
          "212:     return false;",
          "213:   if ((blueShift & 0x7) != 0)",
          "214:     return false;",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     do888Test(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
          "173:     printf(\"\\n\");",
          "174: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 8, 18);",
          "176:     do888Test(false, 32, 24, false, true, 255, 255, 255, 0, 11, 24);",
          "177:     do888Test(false, 32, 24, false, true, 255, 255, 255, 4, 16, 24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd1d650c532a46e95a1229dffaf281c76a50cdfe",
      "candidate_info": {
        "commit_hash": "cd1d650c532a46e95a1229dffaf281c76a50cdfe",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/cd1d650c532a46e95a1229dffaf281c76a50cdfe",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Add sanity checks for PixelFormat shift values\n\nOtherwise we might be tricked in to reading and writing things at\nincorrect offsets for pixels which ultimately could result in an\nattacker writing things to the stack or heap and executing things\nthey shouldn't.\n\nThis only affects the server as the client never uses the pixel\nformat suggested by th server.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:   if (totalBits > depth)",
          "683:     return false;",
          "685:   if (((redMax << redShift) & (greenMax << greenShift)) != 0)",
          "686:     return false;",
          "687:   if (((redMax << redShift) & (blueMax << blueShift)) != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:   if ((bits(redMax) + redShift) > bpp)",
          "686:     return false;",
          "687:   if ((bits(greenMax) + greenShift) > bpp)",
          "688:     return false;",
          "689:   if ((bits(blueMax) + blueShift) > bpp)",
          "690:     return false;",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);",
          "113:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     doTest(true, 32, 24, false, true, 255, 255, 255, 25, 8, 16);",
          "114:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 25, 16);",
          "115:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 8, 25);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d61a767d6842b530ffb532ddd5a3d233119aad40",
      "candidate_info": {
        "commit_hash": "d61a767d6842b530ffb532ddd5a3d233119aad40",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/d61a767d6842b530ffb532ddd5a3d233119aad40",
        "files": [
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h",
          "common/rfb/CMsgReader.cxx",
          "common/rfb/SMsgReader.cxx",
          "common/rfb/TightDecoder.cxx",
          "common/rfb/zrleDecode.h"
        ],
        "message": "Make ZlibInStream more robust against failures\n\nMove the checks around to avoid missing cases where we might access\nmemory that is no longer valid. Also avoid touching the underlying\nstream implicitly (e.g. via the destructor) as it might also no\nlonger be valid.\n\nA malicious server could theoretically use this for remote code\nexecution in the client.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab",
        "before_after_code_files": [
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
          "common/rfb/CMsgReader.cxx||common/rfb/CMsgReader.cxx",
          "common/rfb/SMsgReader.cxx||common/rfb/SMsgReader.cxx",
          "common/rfb/TightDecoder.cxx||common/rfb/TightDecoder.cxx",
          "common/rfb/zrleDecode.h||common/rfb/zrleDecode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   return offset + ptr - start;",
          "53: }",
          "56: {",
          "57:   ptr = end = start;",
          "60:   while (bytesIn > 0) {",
          "61:     decompress(true);",
          "62:     end = start; // throw away any data",
          "63:   }",
          "65: }",
          "67: void ZlibInStream::reset()",
          "",
          "[Removed Lines]",
          "55: void ZlibInStream::removeUnderlying()",
          "58:   if (!underlying) return;",
          "64:   underlying = 0;",
          "",
          "[Added Lines]",
          "55: void ZlibInStream::flushUnderlying()",
          "64:   setUnderlying(NULL, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: void ZlibInStream::deinit()",
          "91: {",
          "92:   assert(zs != NULL);",
          "94:   inflateEnd(zs);",
          "95:   delete zs;",
          "96:   zs = NULL;",
          "",
          "[Removed Lines]",
          "93:   removeUnderlying();",
          "",
          "[Added Lines]",
          "93:   setUnderlying(NULL, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: {",
          "101:   if (itemSize > bufSize)",
          "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
          "106:   if (end - ptr != 0)",
          "107:     memmove(start, ptr, end - ptr);",
          "",
          "[Removed Lines]",
          "103:   if (!underlying)",
          "104:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128: bool ZlibInStream::decompress(bool wait)",
          "129: {",
          "130:   zs->next_out = (U8*)end;",
          "131:   zs->avail_out = start + bufSize - end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   if (!underlying)",
          "129:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
          "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     virtual ~ZlibInStream();",
          "40:     void setUnderlying(InStream* is, int bytesIn);",
          "42:     int pos();",
          "43:     void reset();",
          "",
          "[Removed Lines]",
          "41:     void removeUnderlying();",
          "",
          "[Added Lines]",
          "41:     void flushUnderlying();",
          "",
          "---------------"
        ],
        "common/rfb/CMsgReader.cxx||common/rfb/CMsgReader.cxx": [
          "File: common/rfb/CMsgReader.cxx -> common/rfb/CMsgReader.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:       num++;",
          "243:     }",
          "247:     handler->handleClipboardProvide(flags, lengths, buffers);",
          "",
          "[Removed Lines]",
          "245:     zis.removeUnderlying();",
          "",
          "[Added Lines]",
          "245:     zis.flushUnderlying();",
          "246:     zis.setUnderlying(NULL, 0);",
          "",
          "---------------"
        ],
        "common/rfb/SMsgReader.cxx||common/rfb/SMsgReader.cxx": [
          "File: common/rfb/SMsgReader.cxx -> common/rfb/SMsgReader.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:       num++;",
          "294:     }",
          "298:     handler->handleClipboardProvide(flags, lengths, buffers);",
          "",
          "[Removed Lines]",
          "296:     zis.removeUnderlying();",
          "",
          "[Added Lines]",
          "296:     zis.flushUnderlying();",
          "297:     zis.setUnderlying(NULL, 0);",
          "",
          "---------------"
        ],
        "common/rfb/TightDecoder.cxx||common/rfb/TightDecoder.cxx": [
          "File: common/rfb/TightDecoder.cxx -> common/rfb/TightDecoder.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:     zis[streamId].readBytes(netbuf, dataSize);",
          "345:     delete ms;",
          "347:     bufptr = netbuf;",
          "",
          "[Removed Lines]",
          "344:     zis[streamId].removeUnderlying();",
          "",
          "[Added Lines]",
          "344:     zis[streamId].flushUnderlying();",
          "345:     zis[streamId].setUnderlying(NULL, 0);",
          "",
          "---------------"
        ],
        "common/rfb/zrleDecode.h||common/rfb/zrleDecode.h": [
          "File: common/rfb/zrleDecode.h -> common/rfb/zrleDecode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     }",
          "175:   }",
          "178: }",
          "180: #undef ZRLE_DECODE",
          "",
          "[Removed Lines]",
          "177:   zis->removeUnderlying();",
          "",
          "[Added Lines]",
          "177:   zis->flushUnderlying();",
          "178:   zis->setUnderlying(NULL, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ff58f0acaeb566b79ae12cf013b376eaaaab834",
      "candidate_info": {
        "commit_hash": "4ff58f0acaeb566b79ae12cf013b376eaaaab834",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/4ff58f0acaeb566b79ae12cf013b376eaaaab834",
        "files": [
          "common/rdr/FixedMemOutStream.h"
        ],
        "message": "Remove unused FixedMemOutStream",
        "before_after_code_files": [
          "common/rdr/FixedMemOutStream.h||common/rdr/FixedMemOutStream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rdr/FixedMemOutStream.h||common/rdr/FixedMemOutStream.h": [
          "File: common/rdr/FixedMemOutStream.h -> common/rdr/FixedMemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
      "candidate_info": {
        "commit_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/75e6e0653a48baf474fd45d78b1da53e2f324642",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx"
        ],
        "message": "Be defensive about overflows in stream objects\n\nWe use a lot of lengths given to us over the network, so be more\nparanoid about them causing an overflow as otherwise an attacker\nmight trick us in to overwriting other memory.\n\nThis primarily affects the client which often gets lengths from the\nserver, but there are also some scenarios where the server might\ntheoretically be vulnerable.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   ptr = start;",
          "138:   size_t bytes_to_read;",
          "140:     bytes_to_read = start + bufSize - end;",
          "141:     if (!timing) {",
          "",
          "[Removed Lines]",
          "139:   while (end < start + itemSize) {",
          "",
          "[Added Lines]",
          "139:   while ((size_t)(end - start) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     end += n;",
          "153:   }",
          "158:   return nItems;",
          "159: }",
          "",
          "[Removed Lines]",
          "155:   if (itemSize * nItems > (size_t)(end - ptr))",
          "156:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "155:   size_t nAvail;",
          "156:   nAvail = (end - ptr) / itemSize;",
          "157:   if (nAvail < nItems)",
          "158:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     }",
          "150:   }",
          "156:   return nItems;",
          "157: }",
          "",
          "[Removed Lines]",
          "153:   if (itemSize * nItems > (size_t)(end - ptr))",
          "154:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "152:   size_t nAvail;",
          "153:   nAvail = (end - ptr) / itemSize;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   ptr = b;",
          "72:     size_t n = fread((U8 *)end, b + sizeof(b) - end, 1, file);",
          "73:     if (n == 0) {",
          "74:       if (ferror(file))",
          "",
          "[Removed Lines]",
          "71:   while (end < b + itemSize) {",
          "",
          "[Added Lines]",
          "71:   while ((size_t)(end - b) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     end += b + sizeof(b) - end;",
          "81:   }",
          "86:   return nItems;",
          "87: }",
          "",
          "[Removed Lines]",
          "83:   if (itemSize * nItems > (size_t)(end - ptr))",
          "84:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "83:   size_t nAvail;",
          "84:   nAvail = (end - ptr) / itemSize;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "94:   while (end < ptr + itemSize) {",
          "",
          "[Added Lines]",
          "94:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     end += length;",
          "111:   }",
          "116:   return nItems;",
          "117: }",
          "",
          "[Removed Lines]",
          "113:   if (itemSize * nItems > (size_t)(end - ptr))",
          "114:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "113:   size_t nAvail;",
          "114:   nAvail = (end - ptr) / itemSize;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   writeBuffer();",
          "108:   return nItems;",
          "109: }",
          "",
          "[Removed Lines]",
          "105:   if (itemSize * nItems > (size_t)(end - ptr))",
          "106:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "105:   size_t nAvail;",
          "106:   nAvail = (end - ptr) / itemSize;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
          "45:     {",
          "52:       return nItems;",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:       if (ptr + itemSize * nItems > end) {",
          "47:         if (ptr + itemSize > end)",
          "48:           return overrun(itemSize, nItems, wait);",
          "50:         nItems = (end - ptr) / itemSize;",
          "51:       }",
          "",
          "[Added Lines]",
          "46:       size_t nAvail;",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "49:         return overrun(itemSize, nItems, wait);",
          "51:       nAvail = (end - ptr) / itemSize;",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     void readBytes(void* data, size_t length) {",
          "101:         ptr += n;",
          "103:       }",
          "104:     }",
          "",
          "[Removed Lines]",
          "96:       U8* dataPtr = (U8*)data;",
          "97:       U8* dataEnd = dataPtr + length;",
          "98:       while (dataPtr < dataEnd) {",
          "99:         size_t n = check(1, dataEnd - dataPtr);",
          "100:         memcpy(dataPtr, ptr, n);",
          "102:         dataPtr += n;",
          "",
          "[Added Lines]",
          "99:       while (length > 0) {",
          "100:         size_t n = check(1, length);",
          "101:         memcpy(data, ptr, n);",
          "103:         data = (U8*)data + n;",
          "104:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
          "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef __RDR_MEMOUTSTREAM_H__",
          "24: #define __RDR_MEMOUTSTREAM_H__",
          "26: #include <rdr/OutStream.h>",
          "28: namespace rdr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <rdr/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       if (len < (size_t)(end - start) * 2)",
          "66:         len = (end - start) * 2;",
          "68:       U8* newStart = new U8[len];",
          "69:       memcpy(newStart, start, ptr - start);",
          "70:       ptr = newStart + (ptr - start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:       if (len < (size_t)(end - start))",
          "70:         throw Exception(\"Overflow in MemOutStream::overrun()\");",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
          "48:     {",
          "55:       return nItems;",
          "56:     }",
          "",
          "[Removed Lines]",
          "49:       if (ptr + itemSize * nItems > end) {",
          "50:         if (ptr + itemSize > end)",
          "51:           return overrun(itemSize, nItems);",
          "53:         nItems = (end - ptr) / itemSize;",
          "54:       }",
          "",
          "[Added Lines]",
          "49:       size_t nAvail;",
          "51:       if (itemSize > (size_t)(end - ptr))",
          "52:         return overrun(itemSize, nItems);",
          "54:       nAvail = (end - ptr) / itemSize;",
          "55:       if (nAvail < nItems)",
          "56:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     void writeBytes(const void* data, size_t length) {",
          "99:         ptr += n;",
          "101:       }",
          "102:     }",
          "",
          "[Removed Lines]",
          "94:       const U8* dataPtr = (const U8*)data;",
          "95:       const U8* dataEnd = dataPtr + length;",
          "96:       while (dataPtr < dataEnd) {",
          "97:         size_t n = check(1, dataEnd - dataPtr);",
          "98:         memcpy(ptr, dataPtr, n);",
          "100:         dataPtr += n;",
          "",
          "[Added Lines]",
          "97:       while (length > 0) {",
          "98:         size_t n = check(1, length);",
          "99:         memcpy(ptr, data, n);",
          "101:         data = (U8*)data + n;",
          "102:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "132:   return nItems;",
          "133: }",
          "",
          "[Removed Lines]",
          "129:   if (itemSize * nItems > (size_t)(end - ptr))",
          "130:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "129:   size_t nAvail;",
          "130:   nAvail = (end - ptr) / itemSize;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       return -1;",
          "44:     }",
          "47:       size = in->getend() - in->getptr();",
          "49:     in->readBytes(data, size);",
          "",
          "[Removed Lines]",
          "46:     if (in->getend() - in->getptr() < (ptrdiff_t)size)",
          "",
          "[Added Lines]",
          "46:     if ((size_t)(in->getend() - in->getptr()) < size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   end -= ptr - start;",
          "93:   ptr = start;",
          "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
          "97:     if (!wait && n == 0)",
          "98:       return 0;",
          "99:     end += n;",
          "100:   }",
          "105:   return nItems;",
          "106: }",
          "",
          "[Removed Lines]",
          "95:   while (end < start + itemSize) {",
          "102:   if (itemSize * nItems > (size_t)(end - ptr))",
          "103:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "95:   while ((size_t)(end - start) < itemSize) {",
          "102:   size_t nAvail;",
          "103:   nAvail = (end - ptr) / itemSize;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   flush();",
          "106:   return nItems;",
          "107: }",
          "",
          "[Removed Lines]",
          "103:   if (itemSize * nItems > (size_t)(end - ptr))",
          "104:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "103:   size_t nAvail;",
          "104:   nAvail = (end - ptr) / itemSize;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:       return 0;",
          "114:   }",
          "119:   return nItems;",
          "120: }",
          "",
          "[Removed Lines]",
          "116:   if (itemSize * nItems > (size_t)(end - ptr))",
          "117:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "116:   size_t nAvail;",
          "117:   nAvail = (end - ptr) / itemSize;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     }",
          "131:   }",
          "136:   return nItems;",
          "137: }",
          "",
          "[Removed Lines]",
          "133:   if (itemSize * nItems > (size_t)(end - ptr))",
          "134:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "133:   size_t nAvail;",
          "134:   nAvail = (end - ptr) / itemSize;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "",
          "---------------"
        ]
      }
    }
  ]
}