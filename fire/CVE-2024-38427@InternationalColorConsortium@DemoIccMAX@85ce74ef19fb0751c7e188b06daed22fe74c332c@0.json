{
  "cve_id": "CVE-2024-38427",
  "cve_desc": "In International Color Consortium DemoIccMAX before 85ce74e, a logic flaw in CIccTagXmlProfileSequenceId::ParseXml in IccXML/IccLibXML/IccTagXml.cpp results in unconditionally returning false.",
  "repo": "InternationalColorConsortium/DemoIccMAX",
  "patch_hash": "85ce74ef19fb0751c7e188b06daed22fe74c332c",
  "patch_info": {
    "commit_hash": "85ce74ef19fb0751c7e188b06daed22fe74c332c",
    "repo": "InternationalColorConsortium/DemoIccMAX",
    "commit_url": "https://github.com/InternationalColorConsortium/DemoIccMAX/pull/66/commits/85ce74ef19fb0751c7e188b06daed22fe74c332c",
    "files": [
      "IccXML/IccLibXML/IccTagXml.cpp"
    ],
    "message": "Update IccTagXml.cpp Fix return value\n\nChange the unconditional return statement at the end of the CIccTagXmlProfileSequenceId::ParseXml function from false to true.",
    "before_after_code_files": [
      "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp"
    ]
  },
  "patch_diff": {
    "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp": [
      "File: IccXML/IccLibXML/IccTagXml.cpp -> IccXML/IccLibXML/IccTagXml.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "4199:     m_list->push_back(desc);",
      "4200:   }",
      "4203: }",
      "",
      "[Removed Lines]",
      "4202:   return false;",
      "",
      "[Added Lines]",
      "4202:   return true;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f891074a0f1c9d61a3dfa53749265f8c14ed4ee6",
      "candidate_info": {
        "commit_hash": "f891074a0f1c9d61a3dfa53749265f8c14ed4ee6",
        "repo": "InternationalColorConsortium/DemoIccMAX",
        "commit_url": "https://github.com/InternationalColorConsortium/DemoIccMAX/commit/f891074a0f1c9d61a3dfa53749265f8c14ed4ee6",
        "files": [
          "IccProfLib/IccUtil.cpp",
          "IccXML/IccLibXML/IccTagXml.cpp"
        ],
        "message": "Update: Fix the Compile Error in IccUtil.cpp, Fix a return value in IccTagXml.cpp (#66)\n\n* Update IccTagXml.cpp Fix return value\n\nChange the unconditional return statement at the end of the CIccTagXmlProfileSequenceId::ParseXml function from false to true.\n\n* Update IccUtil.cpp Hoyt's PATCH for ccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range\n\nUpdate IccUtil.cpp Hoyt's PATCH for ccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range\n\nDistribution Compile Error:\n-----------------------------\nmake -j$(nproc) 2>&1 | grep 'error:'\n\nDemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2064:8: error: integer value 4294967295 is outside the valid range of values [0, 1] for this enumeration type [-Wenum-constexpr-conversion]\nDemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2068:5/Users/xss/Downloads/DemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2064:8: :error:  integer value 4294967295 is outside the valid range of values [0, 1] for this enumeration type [-Wenum-constexpr-conversion]warning:\nDemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2085:8: error: integer value 4294967295 is outside the valid range of values [0, 3] for this enumeration type [-Wenum-constexpr-conversion]\nDemoIccMAX-a9a15564e3418176d60eef88c946831779f95658/IccProfLib/IccUtil.cpp:2085:8: error: integer value 4294967295 is outside the valid range of values [0, 3] for this enumeration type [-Wenum-constexpr-conversion]\n\n\n\n\nHoyt's Patch\n---------------\ndiff -u   ../IccProfLib/IccUtil.cpp.dist ../IccProfLib/IccUtil.cpp\n--- ../IccProfLib/IccUtil.cpp.dist\t2024-05-14 08:10:38\n+++ ../IccProfLib/IccUtil.cpp\t2024-05-14 08:23:25\n@@ -2054,39 +2054,36 @@\n\n const icChar *CIccInfo::GetMeasurementFlareName(icMeasurementFlare val)\n {\n-  switch ((int)val) {\n+  switch (val) { // Directly switch on the enum without casting to int\n   case icFlare0:\n-    return \"Flare 0\";\n+    return \"Flare 0\"; // Properly handle the 0% flare\n\n   case icFlare100:\n-    return \"Flare 100\";\n-\n-  case icMaxEnumFlare:\n-    return \"Max Flare\";\n+    return \"Flare 100\"; // Properly handle the 100% flare\n\n   default:\n-    sprintf(m_szStr, \"Unknown Flare '%d'\", (int)val);\n+    // Handle icMaxEnumFlare explicitly here if needed\n+    if (val == icMaxEnumFlare) {\n+      return \"Max Flare\"; // Special handling for the max sentinel value\n+    }\n+    // General default case for truly unexpected values\n+          std::snprintf(m_szStr, sizeof(m_szStr), \"Unknown Flare '%d'\", (int)val);\n     return m_szStr;\n   }\n }\n\n+\n const icChar *CIccInfo::GetMeasurementGeometryName(icMeasurementGeometry val)\n {\n-  switch ((int)val) {\n+  switch (val) {  // Directly use enum type, casting is not needed\n   case icGeometryUnknown:\n     return \"Geometry Unknown\";\n-\n   case icGeometry045or450:\n     return \"Geometry 0-45 or 45-0\";\n-\n   case icGeometry0dord0:\n     return \"Geometry 0-d or d-0\";\n-\n-  case icMaxEnumGeometry:\n-    return \"Max Geometry\";\n-\n-  default:\n-    sprintf(m_szStr, \"Unknown Geometry '%d'\", (int)val);\n+  default:\n+          std::snprintf(m_szStr, sizeof(m_szStr), \"Unknown Geometry '%d'\", (int)val);\n     return m_szStr;\n   }\n }\n\n\nCompile Result:\nmake -j$(nproc) 2>&1 | grep 'error:'",
        "before_after_code_files": [
          "IccProfLib/IccUtil.cpp||IccProfLib/IccUtil.cpp",
          "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/InternationalColorConsortium/DemoIccMAX/pull/66"
        ],
        "olp_code_files": {
          "patch": [
            "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp"
          ],
          "candidate": [
            "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp"
          ]
        }
      },
      "candidate_diff": {
        "IccProfLib/IccUtil.cpp||IccProfLib/IccUtil.cpp": [
          "File: IccProfLib/IccUtil.cpp -> IccProfLib/IccUtil.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2055: const icChar *CIccInfo::GetMeasurementFlareName(icMeasurementFlare val)",
          "2056: {",
          "2058:   case icFlare0:",
          "2061:   case icFlare100:",
          "2067:   default:",
          "2069:     return m_szStr;",
          "2070:   }",
          "2071: }",
          "2073: const icChar *CIccInfo::GetMeasurementGeometryName(icMeasurementGeometry val)",
          "2074: {",
          "2076:   case icGeometryUnknown:",
          "2077:     return \"Geometry Unknown\";",
          "2079:   case icGeometry045or450:",
          "2080:     return \"Geometry 0-45 or 45-0\";",
          "2082:   case icGeometry0dord0:",
          "2083:     return \"Geometry 0-d or d-0\";",
          "2088:   default:",
          "2090:     return m_szStr;",
          "2091:   }",
          "2092: }",
          "",
          "[Removed Lines]",
          "2057:   switch ((int)val) {",
          "2059:     return \"Flare 0\";",
          "2062:     return \"Flare 100\";",
          "2064:   case icMaxEnumFlare:",
          "2065:     return \"Max Flare\";",
          "2068:     sprintf(m_szStr, \"Unknown Flare '%d'\", (int)val);",
          "2075:   switch ((int)val) {",
          "2085:   case icMaxEnumGeometry:",
          "2086:     return \"Max Geometry\";",
          "2089:     sprintf(m_szStr, \"Unknown Geometry '%d'\", (int)val);",
          "",
          "[Added Lines]",
          "2057:   switch (val) { // Directly switch on the enum without casting to int",
          "2059:     return \"Flare 0\"; // Properly handle the 0% flare",
          "2062:     return \"Flare 100\"; // Properly handle the 100% flare",
          "2066:     if (val == icMaxEnumFlare) {",
          "2067:       return \"Max Flare\"; // Special handling for the max sentinel value",
          "2068:     }",
          "2070:           std::snprintf(m_szStr, sizeof(m_szStr), \"Unknown Flare '%d'\", (int)val);",
          "2078:   switch (val) {  // Directly use enum type, casting is not needed",
          "2086:           std::snprintf(m_szStr, sizeof(m_szStr), \"Unknown Geometry '%d'\", (int)val);",
          "",
          "---------------"
        ],
        "IccXML/IccLibXML/IccTagXml.cpp||IccXML/IccLibXML/IccTagXml.cpp": [
          "File: IccXML/IccLibXML/IccTagXml.cpp -> IccXML/IccLibXML/IccTagXml.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4199:     m_list->push_back(desc);",
          "4200:   }",
          "4203: }",
          "",
          "[Removed Lines]",
          "4202:   return false;",
          "",
          "[Added Lines]",
          "4202:   return true;",
          "",
          "---------------"
        ]
      }
    }
  ]
}