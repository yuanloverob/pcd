{
  "cve_id": "CVE-2019-11932",
  "cve_desc": "A double free vulnerability in the DDGifSlurp function in decoding.c in the android-gif-drawable library before version 1.2.18, as used in WhatsApp for Android before version 2.19.244 and many other Android applications, allows remote attackers to execute arbitrary code or cause a denial of service when the library is used to parse a specially crafted GIF image.",
  "repo": "koral--/android-gif-drawable",
  "patch_hash": "4944c92761e0a14f04868cbcf4f4e86fd4b7a4a9",
  "patch_info": {
    "commit_hash": "4944c92761e0a14f04868cbcf4f4e86fd4b7a4a9",
    "repo": "koral--/android-gif-drawable",
    "commit_url": "https://github.com/koral--/android-gif-drawable/pull/673/commits/4944c92761e0a14f04868cbcf4f4e86fd4b7a4a9",
    "files": [
      "android-gif-drawable/src/main/c/decoding.c"
    ],
    "message": "Do not realloc array if new raster size is 0.\n\nif realloc() is called with 0 size it may return NULL and this will be incorrectly handled\nas not enough memory and (also) rasterBits will be freed by realloc but we will not update\nit.",
    "before_after_code_files": [
      "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
    ]
  },
  "patch_diff": {
    "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c": [
      "File: android-gif-drawable/src/main/c/decoding.c -> android-gif-drawable/src/main/c/decoding.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:     }",
      "58:     if (decode) {",
      "61:      const uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;",
      "62:      if (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {",
      "63:       void *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));",
      "64:       if (tmpRasterBits == NULL) {",
      "",
      "[Removed Lines]",
      "59:      int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
      "60:      int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
      "",
      "[Added Lines]",
      "60:      if (newRasterSize == 0) {",
      "61:       free(info->rasterBits);",
      "62:       info->rasterBits = NULL;",
      "63:       info->rasterSize = newRasterSize;",
      "64:       return;",
      "65:      }",
      "66:      const int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
      "67:      const int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac26d1da8e2cf44aa1a5cca54e1df278efde4fcf",
      "candidate_info": {
        "commit_hash": "ac26d1da8e2cf44aa1a5cca54e1df278efde4fcf",
        "repo": "koral--/android-gif-drawable",
        "commit_url": "https://github.com/koral--/android-gif-drawable/commit/ac26d1da8e2cf44aa1a5cca54e1df278efde4fcf",
        "files": [
          "android-gif-drawable/src/main/c/gif.h"
        ],
        "message": "Let's defin LOGE as NOOP for release.\n\nThis way it is much easier to user logging.",
        "before_after_code_files": [
          "android-gif-drawable/src/main/c/gif.h||android-gif-drawable/src/main/c/gif.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/koral--/android-gif-drawable/pull/673"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "android-gif-drawable/src/main/c/gif.h||android-gif-drawable/src/main/c/gif.h": [
          "File: android-gif-drawable/src/main/c/gif.h -> android-gif-drawable/src/main/c/gif.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <android/log.h>",
          "32: #define  LOG_TAG    \"libgif\"",
          "33: #define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)",
          "34: #endif",
          "36: #define THROW_ON_NONZERO_RESULT(fun, message) if ((fun) !=0) throwException(env, RUNTIME_EXCEPTION_ERRNO, message)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #else",
          "35: #define  LOGE(...)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb137e8e66127b06e9201277b01c86e33895ca2d",
      "candidate_info": {
        "commit_hash": "cb137e8e66127b06e9201277b01c86e33895ca2d",
        "repo": "koral--/android-gif-drawable",
        "commit_url": "https://github.com/koral--/android-gif-drawable/commit/cb137e8e66127b06e9201277b01c86e33895ca2d",
        "files": [
          "android-gif-drawable/src/main/c/decoding.c"
        ],
        "message": "Do not realloc array if new raster size is 0.\n\nif realloc() is called with 0 size it may return NULL and this will be incorrectly handled\nas not enough memory and (also) rasterBits will be freed by realloc but we will not update\nit.",
        "before_after_code_files": [
          "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
          ],
          "candidate": [
            "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
          ]
        }
      },
      "candidate_diff": {
        "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c": [
          "File: android-gif-drawable/src/main/c/decoding.c -> android-gif-drawable/src/main/c/decoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     }",
          "58:     if (decode) {",
          "61:      const uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;",
          "62:      if (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {",
          "63:       void *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));",
          "64:       if (tmpRasterBits == NULL) {",
          "",
          "[Removed Lines]",
          "59:      int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
          "60:      int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
          "",
          "[Added Lines]",
          "60:      if (newRasterSize == 0) {",
          "61:       free(info->rasterBits);",
          "62:       info->rasterBits = NULL;",
          "63:       info->rasterSize = newRasterSize;",
          "64:       return;",
          "65:      }",
          "66:      const int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
          "67:      const int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc5b4f8e43463995a84efd594f89a21f906c2d20",
      "candidate_info": {
        "commit_hash": "cc5b4f8e43463995a84efd594f89a21f906c2d20",
        "repo": "koral--/android-gif-drawable",
        "commit_url": "https://github.com/koral--/android-gif-drawable/commit/cc5b4f8e43463995a84efd594f89a21f906c2d20",
        "files": [
          "android-gif-drawable/src/main/c/decoding.c"
        ],
        "message": "Do not realloc array if new raster size is 0.\n\nif realloc() is called with 0 size it may return NULL and this will be incorrectly handled\nas not enough memory and (also) rasterBits will be freed by realloc but we will not update\nit.",
        "before_after_code_files": [
          "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
          ],
          "candidate": [
            "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c"
          ]
        }
      },
      "candidate_diff": {
        "android-gif-drawable/src/main/c/decoding.c||android-gif-drawable/src/main/c/decoding.c": [
          "File: android-gif-drawable/src/main/c/decoding.c -> android-gif-drawable/src/main/c/decoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     }",
          "58:     if (decode) {",
          "61:      const uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;",
          "62:      if (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {",
          "63:       void *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));",
          "64:       if (tmpRasterBits == NULL) {",
          "",
          "[Removed Lines]",
          "59:      int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
          "60:      int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
          "",
          "[Added Lines]",
          "60:      if (newRasterSize == 0) {",
          "61:       free(info->rasterBits);",
          "62:       info->rasterBits = NULL;",
          "63:       info->rasterSize = newRasterSize;",
          "64:       return;",
          "65:      }",
          "66:      const int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;",
          "67:      const int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;",
          "",
          "---------------"
        ]
      }
    }
  ]
}