{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "666345869444ffa334e344d83c4449c1bc37dd08",
      "candidate_info": {
        "commit_hash": "666345869444ffa334e344d83c4449c1bc37dd08",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/666345869444ffa334e344d83c4449c1bc37dd08",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "Uri.h: Break up comma-separated @see pointers",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "be93f674075eaaecc16cf7766c984920b0284fdb",
      "candidate_info": {
        "commit_hash": "be93f674075eaaecc16cf7766c984920b0284fdb",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/be93f674075eaaecc16cf7766c984920b0284fdb",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParsePathAbsEmpty",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "176: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "177: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "178: static const URI_CHAR * URI_FUNC(ParsePctEncoded)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1382:  default:",
          "1383:   URI_FUNC(OnExitPartHelperTwo)(state);",
          "1385:  }",
          "1386: }",
          "",
          "[Removed Lines]",
          "1384:   return URI_FUNC(ParsePathAbsNoLeadSlash)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "1384:   return URI_FUNC(ParsePathAbsNoLeadSlash)(state, first, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1430:  if (first >= afterLast) {",
          "1431:   return afterLast;",
          "1432:  }",
          "",
          "[Removed Lines]",
          "1427: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1427: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(",
          "1428:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1429:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd1adf6a7af8905921cf78e4981ab42b0342b17a",
      "candidate_info": {
        "commit_hash": "dd1adf6a7af8905921cf78e4981ab42b0342b17a",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/dd1adf6a7af8905921cf78e4981ab42b0342b17a",
        "files": [
          "THANKS",
          "configure.ac"
        ],
        "message": "configure.ac: Fix reallocarray detection false positives getting the linker involved\n\nThanks to Periklis Akritidis!",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: ## Check for reallocarray",
          "41: AC_MSG_CHECKING(for reallocarray)",
          "44:     #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "42: AC_COMPILE_IFELSE([AC_LANG_SOURCE([",
          "",
          "[Added Lines]",
          "42: AC_LINK_IFELSE([AC_LANG_SOURCE([",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d7ac1beb41cd8b668cecf85379b2258bf8a3ca5",
      "candidate_info": {
        "commit_hash": "0d7ac1beb41cd8b668cecf85379b2258bf8a3ca5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0d7ac1beb41cd8b668cecf85379b2258bf8a3ca5",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriShorten.c"
        ],
        "message": "Add API function RemoveBaseUriMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: int URI_FUNC(RemoveBaseUriMm)(URI_TYPE(Uri) * dest,",
          "428:   const URI_TYPE(Uri) * absoluteSource,",
          "429:   const URI_TYPE(Uri) * absoluteBase,",
          "430:   UriBool domainRootMode, UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #ifndef URI_DOXYGEN",
          "65: # include <uriparser/Uri.h>",
          "66: # include \"UriCommon.h\"",
          "67: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   const URI_TYPE(Uri) * absSource,",
          "297:   const URI_TYPE(Uri) * absBase,",
          "298:   UriBool domainRootMode) {",
          "300:  const int res = URI_FUNC(RemoveBaseUriImpl)(dest, absSource,",
          "301:    absBase, domainRootMode, memory);",
          "302:  if ((res != URI_SUCCESS) && (dest != NULL)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:  UriMemoryManager * const memory = &defaultMemoryManager;",
          "301:  return URI_FUNC(RemoveBaseUriMm)(dest, absSource, absBase, domainRootMode,",
          "302:    memory);",
          "303: }",
          "307: int URI_FUNC(RemoveBaseUriMm)(URI_TYPE(Uri) * dest,",
          "308:   const URI_TYPE(Uri) * absSource,",
          "309:   const URI_TYPE(Uri) * absBase,",
          "310:   UriBool domainRootMode, UriMemoryManager * memory) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0d07df68eee588f0ebd79be7a8fec3ec9b98507",
      "candidate_info": {
        "commit_hash": "f0d07df68eee588f0ebd79be7a8fec3ec9b98507",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/f0d07df68eee588f0ebd79be7a8fec3ec9b98507",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Only include errno.h when needed",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #if HAVE_REALLOCARRAY",
          "48: # define _GNU_SOURCE",
          "49: #endif",
          "52: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "51: #include <errno.h>",
          "",
          "[Added Lines]",
          "49: #else",
          "50: # include <errno.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}