{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
      "candidate_info": {
        "commit_hash": "7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7407267ce47d95d41acd2e7e6a5cc9c0e70d2ccd",
        "files": [
          "Lib/posixpath.py",
          "Lib/test/test_posixpath.py",
          "Misc/NEWS.d/next/Library/2024-05-01-22-24-05.gh-issue-110863.GjYBbq.rst"
        ],
        "message": "[3.13] GH-118447: Fix handling of unreadable symlinks in `os.path.realpath()` (GH-118489) (#119163)\n\n(cherry picked from commit caf6064a1bc15ac344afd78b780188e60b9c628e)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>",
        "before_after_code_files": [
          "Lib/posixpath.py||Lib/posixpath.py",
          "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/posixpath.py||Lib/posixpath.py": [
          "File: Lib/posixpath.py -> Lib/posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:             if not stat.S_ISLNK(st.st_mode):",
          "472:                 path = newpath",
          "473:                 continue",
          "474:         except OSError:",
          "475:             if strict:",
          "476:                 raise",
          "477:             path = newpath",
          "478:             continue",
          "479:         # Resolve the symbolic link",
          "492:         seen[newpath] = None # not resolved symlink",
          "494:         if target.startswith(sep):",
          "495:             # Symlink target is absolute; reset resolved path.",
          "496:             path = sep",
          "",
          "[Removed Lines]",
          "480:         if newpath in seen:",
          "481:             # Already seen this path",
          "482:             path = seen[newpath]",
          "483:             if path is not None:",
          "484:                 # use cached value",
          "485:                 continue",
          "486:             # The symlink is not resolved, so we must have a symlink loop.",
          "487:             if strict:",
          "488:                 # Raise OSError(errno.ELOOP)",
          "489:                 os.stat(newpath)",
          "490:             path = newpath",
          "491:             continue",
          "493:         target = os.readlink(newpath)",
          "",
          "[Added Lines]",
          "474:             if newpath in seen:",
          "475:                 # Already seen this path",
          "476:                 path = seen[newpath]",
          "477:                 if path is not None:",
          "478:                     # use cached value",
          "479:                     continue",
          "480:                 # The symlink is not resolved, so we must have a symlink loop.",
          "481:                 if strict:",
          "482:                     # Raise OSError(errno.ELOOP)",
          "483:                     os.stat(newpath)",
          "484:                 path = newpath",
          "485:                 continue",
          "486:             target = os.readlink(newpath)",
          "",
          "---------------"
        ],
        "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py": [
          "File: Lib/test/test_posixpath.py -> Lib/test/test_posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:             safe_rmdir(ABSTFN + \"/k\")",
          "661:             safe_rmdir(ABSTFN)",
          "663:     def test_relpath(self):",
          "664:         (real_getcwd, os.getcwd) = (os.getcwd, lambda: r\"/home/user/bar\")",
          "665:         try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     @os_helper.skip_unless_symlink",
          "664:     @skip_if_ABSTFN_contains_backslash",
          "665:     @unittest.skipIf(os.chmod not in os.supports_follow_symlinks, \"Can't set symlink permissions\")",
          "666:     def test_realpath_unreadable_symlink(self):",
          "667:         try:",
          "668:             os.symlink(ABSTFN+\"1\", ABSTFN)",
          "669:             os.chmod(ABSTFN, 0o000, follow_symlinks=False)",
          "670:             self.assertEqual(realpath(ABSTFN), ABSTFN)",
          "671:             self.assertEqual(realpath(ABSTFN + '/foo'), ABSTFN + '/foo')",
          "672:             self.assertEqual(realpath(ABSTFN + '/../foo'), dirname(ABSTFN) + '/foo')",
          "673:             self.assertEqual(realpath(ABSTFN + '/foo/..'), ABSTFN)",
          "674:             with self.assertRaises(PermissionError):",
          "675:                 realpath(ABSTFN, strict=True)",
          "676:         finally:",
          "677:             os.chmod(ABSTFN, 0o755, follow_symlinks=False)",
          "678:             os.unlink(ABSTFN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
      "candidate_info": {
        "commit_hash": "ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ea48de4f4fadd7466c43ecaa88b431fc64b12acb",
        "files": [
          "Lib/test/test_capi/test_misc.py",
          "Misc/NEWS.d/next/C API/2024-05-29-21-05-59.gh-issue-119585.Sn7JL3.rst",
          "Modules/_testcapimodule.c",
          "Python/pystate.c"
        ],
        "message": "[3.13] gh-119585: Fix crash involving `PyGILState_Release()` and `PyThreadState_Clear()` (GH-119753) (#119859)\n\nMake sure that `gilstate_counter` is not zero in when calling\n`PyThreadState_Clear()`. A destructor called from `PyThreadState_Clear()` may\ncall back into `PyGILState_Ensure()` and `PyGILState_Release()`. If\n`gilstate_counter` is zero, it will try to create a new thread state before\nthe current active thread state is destroyed, leading to an assertion failure\nor crash.\n(cherry picked from commit bcc1be39cb1d04ad9fc0bd1b9193d3972835a57c)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py": [
          "File: Lib/test/test_capi/test_misc.py -> Lib/test/test_capi/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2888:         t.start()",
          "2889:         t.join()",
          "2891:     @threading_helper.reap_threads",
          "2892:     @threading_helper.requires_working_threading()",
          "2893:     def test_gilstate_ensure_no_deadlock(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2891:     @threading_helper.reap_threads",
          "2892:     @threading_helper.requires_working_threading()",
          "2893:     def test_thread_gilstate_in_clear(self):",
          "2894:         # See https://github.com/python/cpython/issues/119585",
          "2895:         class C:",
          "2896:             def __del__(self):",
          "2897:                 _testcapi.gilstate_ensure_release()",
          "2899:         # Thread-local variables are destroyed in `PyThreadState_Clear()`.",
          "2900:         local_var = threading.local()",
          "2902:         def callback():",
          "2903:             local_var.x = C()",
          "2905:         _testcapi._test_thread_state(callback)",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:     Py_RETURN_NONE;",
          "765: }",
          "767: #ifndef MS_WINDOWS",
          "768: static PyThread_type_lock wait_done = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "767: static PyObject *",
          "768: gilstate_ensure_release(PyObject *module, PyObject *Py_UNUSED(ignored))",
          "769: {",
          "770:     PyGILState_STATE state = PyGILState_Ensure();",
          "771:     PyGILState_Release(state);",
          "772:     Py_RETURN_NONE;",
          "773: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3351:     {\"test_get_type_dict\",        test_get_type_dict,            METH_NOARGS},",
          "3352:     {\"test_reftracer\",          test_reftracer,                  METH_NOARGS},",
          "3353:     {\"_test_thread_state\",      test_thread_state,               METH_VARARGS},",
          "3354: #ifndef MS_WINDOWS",
          "3355:     {\"_spawn_pthread_waiter\",   spawn_pthread_waiter,            METH_NOARGS},",
          "3356:     {\"_end_spawned_pthread\",    end_spawned_pthread,             METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3362:     {\"gilstate_ensure_release\", gilstate_ensure_release,         METH_NOARGS},",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:         assert(oldstate == PyGILState_UNLOCKED);",
          "2811:         PyThreadState_Clear(tstate);",
          "2817:         assert(current_fast_get() == tstate);",
          "2818:         _PyThreadState_DeleteCurrent(tstate);",
          "2819:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2814:         ++tstate->gilstate_counter;",
          "2816:         --tstate->gilstate_counter;",
          "2822:         assert(tstate->gilstate_counter == 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
      "candidate_info": {
        "commit_hash": "48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/48054d2306fed2a2a53d8e5dba9c1aa7ef138ed5",
        "files": [
          "Python/qsbr.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix TSAN race in QSBR assertion (GH-119887) (#119904)\n\nDue to a limitation in TSAN, all reads from `PyThreadState.state` must be\natomic to avoid reported races.\n(cherry picked from commit 90ec19fd33e2452902b9788d4821f1fbf6542304)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/qsbr.c||Python/qsbr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/qsbr.c||Python/qsbr.c": [
          "File: Python/qsbr.c -> Python/qsbr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: bool",
          "161: _Py_qsbr_poll(struct _qsbr_thread_state *qsbr, uint64_t goal)",
          "162: {",
          "164:     if (_Py_qbsr_goal_reached(qsbr, goal)) {",
          "165:         return true;",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:     assert(_PyThreadState_GET()->state == _Py_THREAD_ATTACHED);",
          "",
          "[Added Lines]",
          "163:     assert(_Py_atomic_load_int_relaxed(&_PyThreadState_GET()->state) == _Py_THREAD_ATTACHED);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a037b79597e127426a882a333d013bff6b313f6",
      "candidate_info": {
        "commit_hash": "5a037b79597e127426a882a333d013bff6b313f6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/5a037b79597e127426a882a333d013bff6b313f6",
        "files": [
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Convert datetime.IsoCalendarDate To A Heap Type (gh-119637) (gh-119695)\n\nThis is the only static type in the module that we will not keep static.\n\n(cherry picked from commit 548a11d5cf1dbb32d86ce0c045130c77f50c1427)\n(cherry-picked from commit 34f9b3e7244615d2372614b20e10250e68cc8e61)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>\nCo-authored by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #endif",
          "28: typedef struct {",
          "29:     PyTypeObject *date_type;",
          "30:     PyTypeObject *datetime_type;",
          "31:     PyTypeObject *delta_type;",
          "33:     PyTypeObject *time_type;",
          "34:     PyTypeObject *tzinfo_type;",
          "35:     PyTypeObject *timezone_type;",
          "38:     PyObject *us_per_ms;       // 1_000",
          "39:     PyObject *us_per_second;   // 1_000_000",
          "",
          "[Removed Lines]",
          "32:     PyTypeObject *isocalendar_date_type;",
          "",
          "[Added Lines]",
          "39:     PyTypeObject *isocalendar_date_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3460:     {NULL, NULL},",
          "3461: };",
          "3474: };",
          "",
          "[Removed Lines]",
          "3463: static PyTypeObject PyDateTime_IsoCalendarDateType = {",
          "3464:     PyVarObject_HEAD_INIT(NULL, 0)",
          "3465:     .tp_name = \"datetime.IsoCalendarDate\",",
          "3466:     .tp_basicsize = sizeof(PyDateTime_IsoCalendarDate),",
          "3467:     .tp_repr = (reprfunc) iso_calendar_date_repr,",
          "3468:     .tp_flags = Py_TPFLAGS_DEFAULT,",
          "3469:     .tp_doc = iso_calendar_date__doc__,",
          "3470:     .tp_methods = iso_calendar_date_methods,",
          "3471:     .tp_getset = iso_calendar_date_getset,",
          "3473:     .tp_new = iso_calendar_date_new,",
          "",
          "[Added Lines]",
          "3467: static int",
          "3468: iso_calendar_date_traverse(PyDateTime_IsoCalendarDate *self, visitproc visit,",
          "3469:                            void *arg)",
          "3470: {",
          "3471:     Py_VISIT(Py_TYPE(self));",
          "3472:     return PyTuple_Type.tp_traverse((PyObject *)self, visit, arg);",
          "3473: }",
          "3475: static void",
          "3476: iso_calendar_date_dealloc(PyDateTime_IsoCalendarDate *self)",
          "3477: {",
          "3478:     PyTypeObject *tp = Py_TYPE(self);",
          "3479:     PyTuple_Type.tp_dealloc((PyObject *)self);  // delegate GC-untrack as well",
          "3480:     Py_DECREF(tp);",
          "3481: }",
          "3483: static PyType_Slot isocal_slots[] = {",
          "3484:     {Py_tp_repr, iso_calendar_date_repr},",
          "3485:     {Py_tp_doc, (void *)iso_calendar_date__doc__},",
          "3486:     {Py_tp_methods, iso_calendar_date_methods},",
          "3487:     {Py_tp_getset, iso_calendar_date_getset},",
          "3488:     {Py_tp_new, iso_calendar_date_new},",
          "3489:     {Py_tp_dealloc, iso_calendar_date_dealloc},",
          "3490:     {Py_tp_traverse, iso_calendar_date_traverse},",
          "3491:     {0, NULL},",
          "3492: };",
          "3494: static PyType_Spec isocal_spec = {",
          "3495:     .name = \"datetime.IsoCalendarDate\",",
          "3496:     .basicsize = sizeof(PyDateTime_IsoCalendarDate),",
          "3497:     .flags = (Py_TPFLAGS_DEFAULT |",
          "3498:               Py_TPFLAGS_HAVE_GC |",
          "3499:               Py_TPFLAGS_IMMUTABLETYPE),",
          "3500:     .slots = isocal_slots,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6842: }",
          "6844: static int",
          "6846: {",
          "",
          "[Removed Lines]",
          "6845: init_state(datetime_state *st)",
          "",
          "[Added Lines]",
          "6872: init_state(datetime_state *st, PyTypeObject *PyDateTime_IsoCalendarDateType)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6850:         return 0;",
          "6851:     }",
          "6853:     st->date_type = &PyDateTime_DateType;",
          "6854:     st->datetime_type = &PyDateTime_DateTimeType;",
          "6855:     st->delta_type = &PyDateTime_DeltaType;",
          "6857:     st->time_type = &PyDateTime_TimeType;",
          "6858:     st->tzinfo_type = &PyDateTime_TZInfoType;",
          "6859:     st->timezone_type = &PyDateTime_TimeZoneType;",
          "6861:     st->us_per_ms = PyLong_FromLong(1000);",
          "6862:     if (st->us_per_ms == NULL) {",
          "6863:         return -1;",
          "",
          "[Removed Lines]",
          "6856:     st->isocalendar_date_type = &PyDateTime_IsoCalendarDateType;",
          "",
          "[Added Lines]",
          "6889:     st->isocalendar_date_type = PyDateTime_IsoCalendarDateType;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6918:     PyDateTime_TimeZoneType.tp_base = &PyDateTime_TZInfoType;",
          "6919:     PyDateTime_DateTimeType.tp_base = &PyDateTime_DateType;",
          "6922:         &PyDateTime_DateType,",
          "6923:         &PyDateTime_DateTimeType,",
          "6924:         &PyDateTime_TimeType,",
          "",
          "[Removed Lines]",
          "6917:     PyDateTime_IsoCalendarDateType.tp_base = &PyTuple_Type;",
          "6921:     PyTypeObject *types[] = {",
          "",
          "[Added Lines]",
          "6950:     PyTypeObject *capi_types[] = {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6927:         &PyDateTime_TimeZoneType,",
          "6928:     };",
          "6932:             goto error;",
          "6933:         }",
          "6934:     }",
          "6940:     datetime_state *st = get_datetime_state();",
          "6942:         goto error;",
          "6943:     }",
          "",
          "[Removed Lines]",
          "6930:     for (size_t i = 0; i < Py_ARRAY_LENGTH(types); i++) {",
          "6931:         if (PyModule_AddType(module, types[i]) < 0) {",
          "6936:     if (PyType_Ready(&PyDateTime_IsoCalendarDateType) < 0) {",
          "6937:         goto error;",
          "6938:     }",
          "6941:     if (init_state(st) < 0) {",
          "",
          "[Added Lines]",
          "6959:     for (size_t i = 0; i < Py_ARRAY_LENGTH(capi_types); i++) {",
          "6960:         if (PyModule_AddType(module, capi_types[i]) < 0) {",
          "6965: #define CREATE_TYPE(VAR, SPEC, BASE)                    \\",
          "6966:     do {                                                \\",
          "6967:         VAR = (PyTypeObject *)PyType_FromModuleAndSpec( \\",
          "6968:                 module, SPEC, (PyObject *)BASE);        \\",
          "6969:         if (VAR == NULL) {                              \\",
          "6970:             goto error;                                 \\",
          "6971:         }                                               \\",
          "6972:     } while (0)",
          "6974:     PyTypeObject *PyDateTime_IsoCalendarDateType = NULL;",
          "6977:     if (!st->initialized) {",
          "6978:         CREATE_TYPE(PyDateTime_IsoCalendarDateType, &isocal_spec, &PyTuple_Type);",
          "6979:     }",
          "6980: #undef CREATE_TYPE",
          "6982:     if (init_state(st, PyDateTime_IsoCalendarDateType) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
      "candidate_info": {
        "commit_hash": "f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f4f8a714b5fe0e83d63c54cdf39e8d8920047e6c",
        "files": [
          "Lib/test/test_typing.py",
          "Lib/test/typinganndata/ann_module695.py",
          "Lib/typing.py",
          "Misc/NEWS.d/next/Library/2024-06-08-15-46-35.gh-issue-114053.Ub2XgJ.rst"
        ],
        "message": "[3.13] gh-114053: Fix another edge case involving `get_type_hints`, PEP 695 and PEP 563 (GH-120272) (#121003)\n\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_typing.py||Lib/test/test_typing.py",
          "Lib/test/typinganndata/ann_module695.py||Lib/test/typinganndata/ann_module695.py",
          "Lib/typing.py||Lib/typing.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_typing.py||Lib/test/test_typing.py": [
          "File: Lib/test/test_typing.py -> Lib/test/test_typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:             {'x': list[list[ForwardRef('X')]]}",
          "4859:         )",
          "4862:         hints_for_A = get_type_hints(ann_module695.A)",
          "4863:         A_type_params = ann_module695.A.__type_params__",
          "4864:         self.assertIs(hints_for_A[\"x\"], A_type_params[0])",
          "4865:         self.assertEqual(hints_for_A[\"y\"].__args__[0], Unpack[A_type_params[1]])",
          "4866:         self.assertIs(hints_for_A[\"z\"].__args__[0], A_type_params[2])",
          "4868:         hints_for_B = get_type_hints(ann_module695.B)",
          "4870:         self.assertEqual(",
          "4873:         )",
          "4875:         hints_for_generic_function = get_type_hints(ann_module695.generic_function)",
          "4876:         func_t_params = ann_module695.generic_function.__type_params__",
          "4877:         self.assertEqual(",
          "",
          "[Removed Lines]",
          "4861:     def test_pep695_generic_with_future_annotations(self):",
          "4869:         self.assertEqual(hints_for_B.keys(), {\"x\", \"y\", \"z\"})",
          "4871:             set(hints_for_B.values()) ^ set(ann_module695.B.__type_params__),",
          "4872:             set()",
          "",
          "[Added Lines]",
          "4861:     def test_pep695_generic_class_with_future_annotations(self):",
          "4862:         original_globals = dict(ann_module695.__dict__)",
          "4870:         # should not have changed as a result of the get_type_hints() calls!",
          "4871:         self.assertEqual(ann_module695.__dict__, original_globals)",
          "4873:     def test_pep695_generic_class_with_future_annotations_and_local_shadowing(self):",
          "4875:         self.assertEqual(hints_for_B, {\"x\": int, \"y\": str, \"z\": bytes})",
          "4877:     def test_pep695_generic_class_with_future_annotations_name_clash_with_global_vars(self):",
          "4878:         hints_for_C = get_type_hints(ann_module695.C)",
          "4880:             set(hints_for_C.values()),",
          "4881:             set(ann_module695.C.__type_params__)",
          "4884:     def test_pep_695_generic_function_with_future_annotations(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4882:         self.assertIs(hints_for_generic_function[\"z\"].__origin__, func_t_params[2])",
          "4883:         self.assertIs(hints_for_generic_function[\"zz\"].__origin__, func_t_params[2])",
          "4885:     def test_extended_generic_rules_subclassing(self):",
          "4886:         class T1(Tuple[T, KT]): ...",
          "4887:         class T2(Tuple[T, ...]): ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4895:     def test_pep_695_generic_function_with_future_annotations_name_clash_with_global_vars(self):",
          "4896:         self.assertEqual(",
          "4897:             set(get_type_hints(ann_module695.generic_function_2).values()),",
          "4898:             set(ann_module695.generic_function_2.__type_params__)",
          "4899:         )",
          "4901:     def test_pep_695_generic_method_with_future_annotations(self):",
          "4902:         hints_for_generic_method = get_type_hints(ann_module695.D.generic_method)",
          "4903:         params = {",
          "4904:             param.__name__: param",
          "4905:             for param in ann_module695.D.generic_method.__type_params__",
          "4906:         }",
          "4907:         self.assertEqual(",
          "4908:             hints_for_generic_method,",
          "4909:             {\"x\": params[\"Foo\"], \"y\": params[\"Bar\"], \"return\": types.NoneType}",
          "4910:         )",
          "4912:     def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_vars(self):",
          "4913:         self.assertEqual(",
          "4914:             set(get_type_hints(ann_module695.D.generic_method_2).values()),",
          "4915:             set(ann_module695.D.generic_method_2.__type_params__)",
          "4916:         )",
          "4918:     def test_pep_695_generics_with_future_annotations_nested_in_function(self):",
          "4919:         results = ann_module695.nested()",
          "4921:         self.assertEqual(",
          "4922:             set(results.hints_for_E.values()),",
          "4923:             set(results.E.__type_params__)",
          "4924:         )",
          "4925:         self.assertEqual(",
          "4926:             set(results.hints_for_E_meth.values()),",
          "4927:             set(results.E.generic_method.__type_params__)",
          "4928:         )",
          "4929:         self.assertNotEqual(",
          "4930:             set(results.hints_for_E_meth.values()),",
          "4931:             set(results.E.__type_params__)",
          "4932:         )",
          "4933:         self.assertEqual(",
          "4934:             set(results.hints_for_E_meth.values()).intersection(results.E.__type_params__),",
          "4935:             set()",
          "4936:         )",
          "4938:         self.assertEqual(",
          "4939:             set(results.hints_for_generic_func.values()),",
          "4940:             set(results.generic_func.__type_params__)",
          "4941:         )",
          "",
          "---------------"
        ],
        "Lib/test/typinganndata/ann_module695.py||Lib/test/typinganndata/ann_module695.py": [
          "File: Lib/test/typinganndata/ann_module695.py -> Lib/test/typinganndata/ann_module695.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     z: P",
          "20: def generic_function[T, *Ts, **P](",
          "21:     x: T, *y: *Ts, z: P.args, zz: P.kwargs",
          "22: ) -> None: ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: Eggs = int",
          "21: Spam = str",
          "24: class C[Eggs, **Spam]:",
          "25:     x: Eggs",
          "26:     y: Spam",
          "34: def generic_function_2[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "37: class D:",
          "38:     Foo = int",
          "39:     Bar = str",
          "41:     def generic_method[Foo, **Bar](",
          "42:         self, x: Foo, y: Bar",
          "43:     ) -> None: ...",
          "45:     def generic_method_2[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "48: def nested():",
          "49:     from types import SimpleNamespace",
          "50:     from typing import get_type_hints",
          "52:     Eggs = bytes",
          "53:     Spam = memoryview",
          "56:     class E[Eggs, **Spam]:",
          "57:         x: Eggs",
          "58:         y: Spam",
          "60:         def generic_method[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "63:     def generic_function[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "66:     return SimpleNamespace(",
          "67:         E=E,",
          "68:         hints_for_E=get_type_hints(E),",
          "69:         hints_for_E_meth=get_type_hints(E.generic_method),",
          "70:         generic_func=generic_function,",
          "71:         hints_for_generic_func=get_type_hints(generic_function)",
          "72:     )",
          "",
          "---------------"
        ],
        "Lib/typing.py||Lib/typing.py": [
          "File: Lib/typing.py -> Lib/typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1061:                 globalns = getattr(",
          "1062:                     sys.modules.get(self.__forward_module__, None), '__dict__', globalns",
          "1063:                 )",
          "1064:             if type_params:",
          "1071:             type_ = _type_check(",
          "1073:                 \"Forward references must evaluate to types.\",",
          "1074:                 is_argument=self.__forward_is_argument__,",
          "1075:                 allow_special_forms=self.__forward_is_class__,",
          "",
          "[Removed Lines]",
          "1065:                 # \"Inject\" type parameters into the local namespace",
          "1066:                 # (unless they are shadowed by assignments *in* the local namespace),",
          "1067:                 # as a way of emulating annotation scopes when calling `eval()`",
          "1068:                 locals_to_pass = {param.__name__: param for param in type_params} | localns",
          "1069:             else:",
          "1070:                 locals_to_pass = localns",
          "1072:                 eval(self.__forward_code__, globalns, locals_to_pass),",
          "",
          "[Added Lines]",
          "1065:             # type parameters require some special handling,",
          "1066:             # as they exist in their own scope",
          "1067:             # but `eval()` does not have a dedicated parameter for that scope.",
          "1068:             # For classes, names in type parameter scopes should override",
          "1069:             # names in the global scope (which here are called `localns`!),",
          "1070:             # but should in turn be overridden by names in the class scope",
          "1071:             # (which here are called `globalns`!)",
          "1073:                 globalns, localns = dict(globalns), dict(localns)",
          "1074:                 for param in type_params:",
          "1075:                     param_name = param.__name__",
          "1076:                     if not self.__forward_is_class__ or param_name not in globalns:",
          "1077:                         globalns[param_name] = param",
          "1078:                         localns.pop(param_name, None)",
          "1081:                 eval(self.__forward_code__, globalns, localns),",
          "",
          "---------------"
        ]
      }
    }
  ]
}