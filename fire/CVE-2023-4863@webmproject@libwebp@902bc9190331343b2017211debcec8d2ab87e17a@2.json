{
  "cve_id": "CVE-2023-4863",
  "cve_desc": "Heap buffer overflow in libwebp in Google Chrome prior to 116.0.5845.187 and libwebp 1.3.2 allowed a remote attacker to perform an out of bounds memory write via a crafted HTML page. (Chromium security severity: Critical)",
  "repo": "webmproject/libwebp",
  "patch_hash": "902bc9190331343b2017211debcec8d2ab87e17a",
  "patch_info": {
    "commit_hash": "902bc9190331343b2017211debcec8d2ab87e17a",
    "repo": "webmproject/libwebp",
    "commit_url": "https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a",
    "files": [
      "src/dec/vp8l_dec.c",
      "src/dec/vp8li_dec.h",
      "src/utils/huffman_utils.c",
      "src/utils/huffman_utils.h"
    ],
    "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741",
    "before_after_code_files": [
      "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
      "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
      "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
      "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
    ]
  },
  "patch_diff": {
    "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
      "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "262:   int symbol;",
      "263:   int max_symbol;",
      "264:   int prev_code_len = DEFAULT_CODE_LENGTH;",
      "270:     goto End;",
      "271:   }",
      "",
      "[Removed Lines]",
      "265:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
      "267:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
      "268:                              code_length_code_lengths,",
      "269:                              NUM_CODE_LENGTH_CODES)) {",
      "",
      "[Added Lines]",
      "265:   HuffmanTables tables;",
      "267:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
      "268:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
      "269:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "286:     int code_len;",
      "287:     if (max_symbol-- == 0) break;",
      "288:     VP8LFillBitWindow(br);",
      "290:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
      "291:     code_len = p->value;",
      "292:     if (code_len < kCodeLengthLiterals) {",
      "",
      "[Removed Lines]",
      "289:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
      "",
      "[Added Lines]",
      "289:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "309:   ok = 1;",
      "311:  End:",
      "312:   if (!ok) return VP8LSetError(dec, VP8_STATUS_BITSTREAM_ERROR);",
      "313:   return ok;",
      "314: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "312:   VP8LHuffmanTablesDeallocate(&tables);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "318: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
      "320:   int ok = 0;",
      "321:   int size = 0;",
      "322:   VP8LBitReader* const br = &dec->br_;",
      "",
      "[Removed Lines]",
      "319:                            int* const code_lengths, HuffmanCode* const table) {",
      "",
      "[Added Lines]",
      "320:                            int* const code_lengths,",
      "321:                            HuffmanTables* const table) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "367:   VP8LMetadata* const hdr = &dec->hdr_;",
      "368:   uint32_t* huffman_image = NULL;",
      "369:   HTreeGroup* htree_groups = NULL;",
      "372:   int num_htree_groups = 1;",
      "373:   int num_htree_groups_max = 1;",
      "374:   const int max_alphabet_size =",
      "",
      "[Removed Lines]",
      "370:   HuffmanCode* huffman_tables = NULL;",
      "371:   HuffmanCode* huffman_table = NULL;",
      "",
      "[Added Lines]",
      "372:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "378:   int* mapping = NULL;",
      "379:   int ok = 0;",
      "381:   if (allow_recursion && VP8LReadBits(br, 1)) {",
      "383:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:   assert(huffman_tables->root.start == NULL);",
      "384:   assert(huffman_tables->curr_segment == NULL);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "430:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
      "431:                                       sizeof(*code_lengths));",
      "434:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
      "437:     VP8LSetError(dec, VP8_STATUS_OUT_OF_MEMORY);",
      "438:     goto Error;",
      "439:   }",
      "442:   for (i = 0; i < num_htree_groups_max; ++i) {",
      "",
      "[Removed Lines]",
      "432:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
      "433:                                                 sizeof(*huffman_tables));",
      "436:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
      "441:   huffman_table = huffman_tables;",
      "",
      "[Added Lines]",
      "439:   if (htree_groups == NULL || code_lengths == NULL ||",
      "440:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
      "441:                                  huffman_tables)) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "463:       int max_bits = 0;",
      "464:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
      "465:         int alphabet_size = kAlphabetSize[j];",
      "467:         if (j == 0 && color_cache_bits > 0) {",
      "468:           alphabet_size += (1 << color_cache_bits);",
      "469:         }",
      "471:         if (size == 0) {",
      "472:           goto Error;",
      "473:         }",
      "474:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
      "476:         }",
      "479:         if (j <= ALPHA) {",
      "480:           int local_max_bits = code_lengths[0];",
      "481:           int k;",
      "",
      "[Removed Lines]",
      "466:         htrees[j] = huffman_table;",
      "470:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
      "475:           is_trivial_literal = (huffman_table->bits == 0);",
      "477:         total_size += huffman_table->bits;",
      "478:         huffman_table += size;",
      "",
      "[Added Lines]",
      "473:         size =",
      "474:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
      "475:         htrees[j] = huffman_tables->curr_segment->curr_table;",
      "480:           is_trivial_literal = (htrees[j]->bits == 0);",
      "482:         total_size += htrees[j]->bits;",
      "483:         huffman_tables->curr_segment->curr_table += size;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "510:   hdr->huffman_image_ = huffman_image;",
      "511:   hdr->num_htree_groups_ = num_htree_groups;",
      "512:   hdr->htree_groups_ = htree_groups;",
      "515:  Error:",
      "516:   WebPSafeFree(code_lengths);",
      "517:   WebPSafeFree(mapping);",
      "518:   if (!ok) {",
      "519:     WebPSafeFree(huffman_image);",
      "521:     VP8LHtreeGroupsFree(htree_groups);",
      "522:   }",
      "523:   return ok;",
      "",
      "[Removed Lines]",
      "513:   hdr->huffman_tables_ = huffman_tables;",
      "520:     WebPSafeFree(huffman_tables);",
      "",
      "[Added Lines]",
      "524:     VP8LHuffmanTablesDeallocate(huffman_tables);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1352:   assert(hdr != NULL);",
      "1354:   WebPSafeFree(hdr->huffman_image_);",
      "1356:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
      "1357:   VP8LColorCacheClear(&hdr->color_cache_);",
      "1358:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
      "",
      "[Removed Lines]",
      "1355:   WebPSafeFree(hdr->huffman_tables_);",
      "",
      "[Added Lines]",
      "1359:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1667:   if (dec == NULL) return 0;",
      "1670:   assert(dec->hdr_.htree_groups_ != NULL);",
      "1671:   assert(dec->hdr_.num_htree_groups_ > 0);",
      "",
      "[Removed Lines]",
      "1669:   assert(dec->hdr_.huffman_tables_ != NULL);",
      "",
      "[Added Lines]",
      "1673:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
      "",
      "---------------"
    ],
    "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
      "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:   uint32_t*       huffman_image_;",
      "52:   int             num_htree_groups_;",
      "53:   HTreeGroup*     htree_groups_;",
      "55: } VP8LMetadata;",
      "57: typedef struct VP8LDecoder VP8LDecoder;",
      "",
      "[Removed Lines]",
      "54:   HuffmanCode*    huffman_tables_;",
      "",
      "[Added Lines]",
      "54:   HuffmanTables   huffman_tables_;",
      "",
      "---------------"
    ],
    "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
      "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:       if (num_open < 0) {",
      "178:         return 0;",
      "179:       }",
      "181:       for (; count[len] > 0; --count[len]) {",
      "182:         HuffmanCode code;",
      "183:         if ((key & mask) != low) {",
      "185:           table_bits = NextTableBitSize(count, len, root_bits);",
      "186:           table_size = 1 << table_bits;",
      "187:           total_size += table_size;",
      "188:           low = key & mask;",
      "191:         }",
      "195:         key = GetNextKey(key, len);",
      "196:       }",
      "197:     }",
      "",
      "[Removed Lines]",
      "180:       if (root_table == NULL) continue;",
      "184:           table += table_size;",
      "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
      "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
      "192:         code.bits = (uint8_t)(len - root_bits);",
      "193:         code.value = (uint16_t)sorted[symbol++];",
      "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
      "",
      "[Added Lines]",
      "183:           if (root_table != NULL) table += table_size;",
      "188:           if (root_table != NULL) {",
      "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
      "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
      "191:           }",
      "192:         }",
      "193:         if (root_table != NULL) {",
      "194:           code.bits = (uint8_t)(len - root_bits);",
      "195:           code.value = (uint16_t)sorted[symbol++];",
      "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
      "213: #define SORTED_SIZE_CUTOFF 512",
      "215:                           const int code_lengths[], int code_lengths_size) {",
      "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
      "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
      "227:     uint16_t* const sorted =",
      "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
      "229:     if (sorted == NULL) return 0;",
      "232:     WebPSafeFree(sorted);",
      "233:   }",
      "234:   return total_size;",
      "235: }",
      "",
      "[Removed Lines]",
      "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
      "216:   int total_size;",
      "218:   if (root_table == NULL) {",
      "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
      "220:                                    code_lengths, code_lengths_size, NULL);",
      "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
      "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
      "225:                                    code_lengths, code_lengths_size, sorted);",
      "226:   } else {   // rare case. Use heap allocation.",
      "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
      "231:                                    code_lengths, code_lengths_size, sorted);",
      "",
      "[Added Lines]",
      "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
      "219:   const int total_size =",
      "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
      "222:   if (total_size == 0 || root_table == NULL) return total_size;",
      "224:   if (root_table->curr_segment->curr_table + total_size >=",
      "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
      "229:     const int segment_size = root_table->curr_segment->size;",
      "230:     struct HuffmanTablesSegment* next =",
      "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
      "232:     if (next == NULL) return 0;",
      "237:     next->size = total_size > segment_size ? total_size : segment_size;",
      "238:     next->start =",
      "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
      "240:     if (next->start == NULL) {",
      "241:       WebPSafeFree(next);",
      "242:       return 0;",
      "243:     }",
      "244:     next->curr_table = next->start;",
      "245:     next->next = NULL;",
      "247:     root_table->curr_segment->next = next;",
      "248:     root_table->curr_segment = next;",
      "249:   }",
      "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
      "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
      "254:                       code_lengths, code_lengths_size, sorted);",
      "255:   } else {  // rare case. Use heap allocation.",
      "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
      "260:                       code_lengths, code_lengths_size, sorted);",
      "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
      "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
      "269:   huffman_tables->curr_segment = root;",
      "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
      "272:   if (root->start == NULL) return 0;",
      "273:   root->curr_table = root->start;",
      "274:   root->next = NULL;",
      "275:   root->size = size;",
      "276:   return 1;",
      "277: }",
      "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
      "280:   HuffmanTablesSegment *current, *next;",
      "281:   if (huffman_tables == NULL) return;",
      "283:   current = &huffman_tables->root;",
      "284:   next = current->next;",
      "285:   WebPSafeFree(current->start);",
      "286:   current->start = NULL;",
      "287:   current->next = NULL;",
      "288:   current = next;",
      "290:   while (current != NULL) {",
      "291:     next = current->next;",
      "292:     WebPSafeFree(current->start);",
      "293:     WebPSafeFree(current);",
      "294:     current = next;",
      "295:   }",
      "296: }",
      "",
      "---------------"
    ],
    "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
      "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: } HuffmanCode32;",
      "46: #define HUFFMAN_PACKED_BITS 6",
      "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: typedef struct HuffmanTablesSegment {",
      "48:   HuffmanCode* start;",
      "51:   HuffmanCode* curr_table;",
      "53:   struct HuffmanTablesSegment* next;",
      "54:   int size;",
      "55: } HuffmanTablesSegment;",
      "58: typedef struct HuffmanTables {",
      "59:   HuffmanTablesSegment root;",
      "61:   HuffmanTablesSegment* curr_segment;",
      "62: } HuffmanTables;",
      "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
      "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:                           const int code_lengths[], int code_lengths_size);",
      "86: #ifdef __cplusplus",
      "",
      "[Removed Lines]",
      "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
      "",
      "[Added Lines]",
      "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50f60add5c547b8c9bc4462bd2fc2840d8fc4525",
      "candidate_info": {
        "commit_hash": "50f60add5c547b8c9bc4462bd2fc2840d8fc4525",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/50f60add5c547b8c9bc4462bd2fc2840d8fc4525",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)\n(cherry picked from commit 2af26267cdfcb63a88e5c74a85927a12d6ca1d76)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1354:   assert(hdr != NULL);",
          "1356:   WebPSafeFree(hdr->huffman_image_);",
          "1358:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1359:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1360:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1357:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1361:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1671:   if (dec == NULL) return 0;",
          "1674:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1675:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1673:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1677:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "801d2be12dba966233c21f850490203eb1acf014",
      "candidate_info": {
        "commit_hash": "801d2be12dba966233c21f850490203eb1acf014",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/801d2be12dba966233c21f850490203eb1acf014",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)\n(cherry picked from commit 2af26267cdfcb63a88e5c74a85927a12d6ca1d76)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1358:   assert(hdr != NULL);",
          "1360:   WebPSafeFree(hdr->huffman_image_);",
          "1362:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1363:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1364:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1361:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1365:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1674:   if (dec == NULL) return 0;",
          "1677:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1678:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1676:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1680:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20ceff7eb3ccb679bd299f3d481309e10cbf2616",
      "candidate_info": {
        "commit_hash": "20ceff7eb3ccb679bd299f3d481309e10cbf2616",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/20ceff7eb3ccb679bd299f3d481309e10cbf2616",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)\n(cherry picked from commit 2af26267cdfcb63a88e5c74a85927a12d6ca1d76)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1353:   assert(hdr != NULL);",
          "1355:   WebPSafeFree(hdr->huffman_image_);",
          "1357:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1358:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1359:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1356:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1360:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1670:   if (dec == NULL) return 0;",
          "1673:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1674:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1672:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1676:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a35ea50de40066a6382b88b288ff0956ec7d0dc7",
      "candidate_info": {
        "commit_hash": "a35ea50de40066a6382b88b288ff0956ec7d0dc7",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/a35ea50de40066a6382b88b288ff0956ec7d0dc7",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "tests/fuzzer/huffman_fuzzer.c",
          "tests/fuzzer/makefile.unix"
        ],
        "message": "Add a fuzzer for ReadHuffmanCodes\n\nChange-Id: If8c30aaa87c34007ae455a03daa7b3c0f22fc8c3",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "tests/fuzzer/huffman_fuzzer.c||tests/fuzzer/huffman_fuzzer.c",
          "tests/fuzzer/makefile.unix||tests/fuzzer/makefile.unix"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: static int ReadHuffmanCodes(VP8LDecoder* const dec, int xsize, int ysize,",
          "366:                             int color_cache_bits, int allow_recursion) {",
          "368:   VP8LBitReader* const br = &dec->br_;",
          "369:   VP8LMetadata* const hdr = &dec->hdr_;",
          "370:   uint32_t* huffman_image = NULL;",
          "",
          "[Removed Lines]",
          "367:   int i, j;",
          "",
          "[Added Lines]",
          "367:   int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "373:   int num_htree_groups = 1;",
          "374:   int num_htree_groups_max = 1;",
          "379:   int* mapping = NULL;",
          "380:   int ok = 0;",
          "",
          "[Removed Lines]",
          "375:   const int max_alphabet_size =",
          "376:       kAlphabetSize[0] + ((color_cache_bits > 0) ? 1 << color_cache_bits : 0);",
          "377:   int* code_lengths = NULL;",
          "378:   const int table_size = kTableSize[color_cache_bits];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:   if (br->eos_) goto Error;",
          "440:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "441:                                  huffman_tables)) {",
          "442:     VP8LSetError(dec, VP8_STATUS_OUT_OF_MEMORY);",
          "",
          "[Removed Lines]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "437:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "439:   if (htree_groups == NULL || code_lengths == NULL ||",
          "",
          "[Added Lines]",
          "431:   if (!ReadHuffmanCodesHelper(color_cache_bits, num_htree_groups,",
          "432:                               num_htree_groups_max, mapping, dec,",
          "433:                               huffman_tables, &htree_groups)) {",
          "434:     goto Error;",
          "435:   }",
          "436:   ok = 1;",
          "439:   hdr->huffman_image_ = huffman_image;",
          "440:   hdr->num_htree_groups_ = num_htree_groups;",
          "441:   hdr->htree_groups_ = htree_groups;",
          "443:  Error:",
          "444:   WebPSafeFree(mapping);",
          "445:   if (!ok) {",
          "446:     WebPSafeFree(huffman_image);",
          "447:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "448:     VP8LHtreeGroupsFree(htree_groups);",
          "449:   }",
          "450:   return ok;",
          "451: }",
          "453: int ReadHuffmanCodesHelper(int color_cache_bits, int num_htree_groups,",
          "454:                            int num_htree_groups_max, const int* const mapping,",
          "455:                            VP8LDecoder* const dec,",
          "456:                            HuffmanTables* const huffman_tables,",
          "457:                            HTreeGroup** const htree_groups) {",
          "458:   int i, j, ok = 0;",
          "459:   const int max_alphabet_size =",
          "460:       kAlphabetSize[0] + ((color_cache_bits > 0) ? 1 << color_cache_bits : 0);",
          "461:   const int table_size = kTableSize[color_cache_bits];",
          "462:   int* code_lengths = NULL;",
          "464:   if ((mapping == NULL && num_htree_groups != num_htree_groups_max) ||",
          "465:       num_htree_groups > num_htree_groups_max) {",
          "466:     goto Error;",
          "467:   }",
          "469:   code_lengths =",
          "470:       (int*)WebPSafeCalloc((uint64_t)max_alphabet_size, sizeof(*code_lengths));",
          "473:   if (*htree_groups == NULL || code_lengths == NULL ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:       }",
          "460:     } else {",
          "461:       HTreeGroup* const htree_group =",
          "463:       HuffmanCode** const htrees = htree_group->htrees;",
          "464:       int size;",
          "465:       int total_size = 0;",
          "",
          "[Removed Lines]",
          "462:           &htree_groups[(mapping == NULL) ? i : mapping[i]];",
          "",
          "[Added Lines]",
          "496:           &(*htree_groups)[(mapping == NULL) ? i : mapping[i]];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "511:   }",
          "512:   ok = 1;",
          "519:  Error:",
          "520:   WebPSafeFree(code_lengths);",
          "522:   if (!ok) {",
          "524:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "526:   }",
          "527:   return ok;",
          "528: }",
          "",
          "[Removed Lines]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "521:   WebPSafeFree(mapping);",
          "523:     WebPSafeFree(huffman_image);",
          "525:     VP8LHtreeGroupsFree(htree_groups);",
          "",
          "[Added Lines]",
          "552:     VP8LHtreeGroupsFree(*htree_groups);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: void VP8LDelete(VP8LDecoder* const dec);",
          "131: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: int ReadHuffmanCodesHelper(int color_cache_bits, int num_htree_groups,",
          "137:                            int num_htree_groups_max, const int* const mapping,",
          "138:                            VP8LDecoder* const dec,",
          "139:                            HuffmanTables* const huffman_tables,",
          "140:                            HTreeGroup** const htree_groups);",
          "",
          "---------------"
        ],
        "tests/fuzzer/huffman_fuzzer.c||tests/fuzzer/huffman_fuzzer.c": [
          "File: tests/fuzzer/huffman_fuzzer.c -> tests/fuzzer/huffman_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include <stdint.h>",
          "18: #include <string.h>",
          "20: #include \"src/dec/vp8li_dec.h\"",
          "21: #include \"src/utils/bit_reader_utils.h\"",
          "22: #include \"src/utils/huffman_utils.h\"",
          "23: #include \"src/utils/utils.h\"",
          "24: #include \"src/webp/format_constants.h\"",
          "26: int LLVMFuzzerTestOneInput(const uint8_t* const data, size_t size) {",
          "28:   static const int kColorCacheBitsBits = 4;",
          "30:   static const int kNumHtreeGroupsBits = 16;",
          "31:   if (size * sizeof(*data) < kColorCacheBitsBits + kNumHtreeGroupsBits) {",
          "32:     return 0;",
          "33:   }",
          "37:   int* const mapping = NULL;",
          "38:   HuffmanTables huffman_tables;",
          "39:   memset(&huffman_tables, 0, sizeof(huffman_tables));",
          "40:   HTreeGroup* htree_groups = NULL;",
          "42:   VP8LDecoder* dec = VP8LNew();",
          "43:   if (dec == NULL) goto Error;",
          "44:   VP8LBitReader* const br = &dec->br_;",
          "45:   VP8LInitBitReader(br, data, size);",
          "47:   const int color_cache_bits = VP8LReadBits(br, kColorCacheBitsBits);",
          "48:   if (color_cache_bits < 1 || color_cache_bits > MAX_CACHE_BITS) goto Error;",
          "50:   const int num_htree_groups = VP8LReadBits(br, kNumHtreeGroupsBits);",
          "52:   if (num_htree_groups == 0) goto Error;",
          "54:   const int num_htree_groups_max = num_htree_groups;",
          "55:   ReadHuffmanCodesHelper(color_cache_bits, num_htree_groups,",
          "56:                          num_htree_groups_max, mapping, dec, &huffman_tables,",
          "57:                          &htree_groups);",
          "59:  Error:",
          "60:   WebPSafeFree(mapping);",
          "61:   VP8LHtreeGroupsFree(htree_groups);",
          "62:   VP8LHuffmanTablesDeallocate(&huffman_tables);",
          "63:   VP8LDelete(dec);",
          "64:   return 0;",
          "65: }",
          "",
          "---------------"
        ],
        "tests/fuzzer/makefile.unix||tests/fuzzer/makefile.unix": [
          "File: tests/fuzzer/makefile.unix -> tests/fuzzer/makefile.unix",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: LDLIBS += ../../src/libwebp.a ../../imageio/libimageio_util.a",
          "12: LDLIBS += ../../sharpyuv/libsharpyuv.a",
          "18: %.o: fuzz_utils.h img_alpha.h img_grid.h img_peak.h",
          "19: all: $(FUZZERS)",
          "",
          "[Removed Lines]",
          "14: FUZZERS = advanced_api_fuzzer animation_api_fuzzer animencoder_fuzzer",
          "15: FUZZERS += animdecoder_fuzzer mux_demux_api_fuzzer enc_dec_fuzzer",
          "16: FUZZERS += simple_api_fuzzer",
          "",
          "[Added Lines]",
          "14: FUZZERS = advanced_api_fuzzer animation_api_fuzzer animdecoder_fuzzer",
          "15: FUZZERS += animencoder_fuzzer enc_dec_fuzzer huffman_fuzzer",
          "16: FUZZERS += mux_demux_api_fuzzer simple_api_fuzzer",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d9c30b2b4b42a4444463621dd89b186969c765",
      "candidate_info": {
        "commit_hash": "13d9c30b2b4b42a4444463621dd89b186969c765",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/13d9c30b2b4b42a4444463621dd89b186969c765",
        "files": [
          "CMakeLists.txt",
          "examples/anim_dump.c",
          "examples/vwebp.c",
          "src/dec/alpha_dec.c",
          "src/dec/idec_dec.c",
          "src/dec/vp8_dec.h",
          "src/dec/vp8i_dec.h",
          "src/dec/vp8li_dec.h",
          "src/dec/webp_dec.c",
          "src/dec/webpi_dec.h",
          "src/demux/anim_decode.c",
          "src/enc/alpha_enc.c",
          "src/enc/vp8l_enc.c",
          "src/mux/anim_encode.c",
          "src/utils/huffman_utils.h",
          "src/webp/decode.h",
          "src/webp/demux.h",
          "src/webp/encode.h",
          "src/webp/mux.h",
          "src/webp/mux_types.h",
          "src/webp/types.h",
          "tests/fuzzer/advanced_api_fuzzer.c",
          "tests/fuzzer/huffman_fuzzer.c",
          "tests/fuzzer/mux_demux_api_fuzzer.c",
          "tests/fuzzer/simple_api_fuzzer.c"
        ],
        "message": "Add a WEBP_NODISCARD\n\nChange-Id: Ice66f2aa6358474d728fb19c571edc86ed139a49",
        "before_after_code_files": [
          "examples/anim_dump.c||examples/anim_dump.c",
          "examples/vwebp.c||examples/vwebp.c",
          "src/dec/alpha_dec.c||src/dec/alpha_dec.c",
          "src/dec/idec_dec.c||src/dec/idec_dec.c",
          "src/dec/vp8_dec.h||src/dec/vp8_dec.h",
          "src/dec/vp8i_dec.h||src/dec/vp8i_dec.h",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/dec/webp_dec.c||src/dec/webp_dec.c",
          "src/dec/webpi_dec.h||src/dec/webpi_dec.h",
          "src/demux/anim_decode.c||src/demux/anim_decode.c",
          "src/enc/alpha_enc.c||src/enc/alpha_enc.c",
          "src/enc/vp8l_enc.c||src/enc/vp8l_enc.c",
          "src/mux/anim_encode.c||src/mux/anim_encode.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h",
          "src/webp/decode.h||src/webp/decode.h",
          "src/webp/demux.h||src/webp/demux.h",
          "src/webp/encode.h||src/webp/encode.h",
          "src/webp/mux.h||src/webp/mux.h",
          "src/webp/mux_types.h||src/webp/mux_types.h",
          "src/webp/types.h||src/webp/types.h",
          "tests/fuzzer/advanced_api_fuzzer.c||tests/fuzzer/advanced_api_fuzzer.c",
          "tests/fuzzer/huffman_fuzzer.c||tests/fuzzer/huffman_fuzzer.c",
          "tests/fuzzer/mux_demux_api_fuzzer.c||tests/fuzzer/mux_demux_api_fuzzer.c",
          "tests/fuzzer/simple_api_fuzzer.c||tests/fuzzer/simple_api_fuzzer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "examples/anim_dump.c||examples/anim_dump.c": [
          "File: examples/anim_dump.c -> examples/anim_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:       for (i = 0; !error && i < image.num_frames; ++i) {",
          "99:         W_CHAR out_file[1024];",
          "100:         WebPDecBuffer buffer;",
          "102:         buffer.colorspace = MODE_RGBA;",
          "103:         buffer.is_external_memory = 1;",
          "104:         buffer.width = image.canvas_width;",
          "",
          "[Removed Lines]",
          "101:         WebPInitDecBuffer(&buffer);",
          "",
          "[Added Lines]",
          "101:         if (!WebPInitDecBuffer(&buffer)) {",
          "102:           fprintf(stderr, \"Cannot init dec buffer\\n\");",
          "103:           error = 1;",
          "104:           continue;",
          "105:         }",
          "",
          "---------------"
        ],
        "examples/vwebp.c||examples/vwebp.c": [
          "File: examples/vwebp.c -> examples/vwebp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:   if (kParams.loop_count) ++kParams.loop_count;",
          "619: #if defined(__unix__) || defined(__CYGWIN__)",
          "",
          "[Removed Lines]",
          "616:   WebPDemuxGetFrame(kParams.dmux, 0, curr);",
          "",
          "[Added Lines]",
          "616:   if (!WebPDemuxGetFrame(kParams.dmux, 0, curr)) goto Error;",
          "",
          "---------------"
        ],
        "src/dec/alpha_dec.c||src/dec/alpha_dec.c": [
          "File: src/dec/alpha_dec.c -> src/dec/alpha_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <stdlib.h>",
          "15: #include \"src/dec/alphai_dec.h\"",
          "16: #include \"src/dec/vp8i_dec.h\"",
          "17: #include \"src/dec/vp8li_dec.h\"",
          "18: #include \"src/dsp/dsp.h\"",
          "19: #include \"src/utils/quant_levels_dec_utils.h\"",
          "20: #include \"src/utils/utils.h\"",
          "21: #include \"src/webp/format_constants.h\"",
          "28:   ALPHDecoder* const dec = (ALPHDecoder*)WebPSafeCalloc(1ULL, sizeof(*dec));",
          "29:   return dec;",
          "30: }",
          "",
          "[Removed Lines]",
          "27: static ALPHDecoder* ALPHNew(void) {",
          "",
          "[Added Lines]",
          "16: #include \"src/dec/vp8_dec.h\"",
          "23: #include \"src/webp/types.h\"",
          "29: WEBP_NODISCARD static ALPHDecoder* ALPHNew(void) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   int ok = 0;",
          "52:   const uint8_t* const alpha_data = data + ALPHA_HEADER_LEN;",
          "53:   const size_t alpha_data_size = data_size - ALPHA_HEADER_LEN;",
          "",
          "[Removed Lines]",
          "48: static int ALPHInit(ALPHDecoder* const dec, const uint8_t* data,",
          "49:                     size_t data_size, const VP8Io* const src_io,",
          "50:                     uint8_t* output) {",
          "",
          "[Added Lines]",
          "50: WEBP_NODISCARD static int ALPHInit(ALPHDecoder* const dec, const uint8_t* data,",
          "51:                                    size_t data_size, const VP8Io* const src_io,",
          "52:                                    uint8_t* output) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:   }",
          "83:   WebPInitCustomIo(NULL, io);",
          "84:   io->opaque = dec;",
          "85:   io->width = src_io->width;",
          "",
          "[Removed Lines]",
          "82:   VP8InitIo(io);",
          "",
          "[Added Lines]",
          "84:   if (!VP8InitIo(io)) {",
          "85:     return 0;",
          "86:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   ALPHDecoder* const alph_dec = dec->alph_dec_;",
          "112:   const int width = alph_dec->width_;",
          "113:   const int height = alph_dec->io_.crop_bottom;",
          "",
          "[Removed Lines]",
          "110: static int ALPHDecode(VP8Decoder* const dec, int row, int num_rows) {",
          "",
          "[Added Lines]",
          "114: WEBP_NODISCARD static int ALPHDecode(VP8Decoder* const dec, int row,",
          "115:                                      int num_rows) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:   return 1;",
          "139: }",
          "142:   const int stride = io->width;",
          "143:   const int height = io->crop_bottom;",
          "144:   const uint64_t alpha_size = (uint64_t)stride * height;",
          "",
          "[Removed Lines]",
          "141: static int AllocateAlphaPlane(VP8Decoder* const dec, const VP8Io* const io) {",
          "",
          "[Added Lines]",
          "146: WEBP_NODISCARD static int AllocateAlphaPlane(VP8Decoder* const dec,",
          "147:                                              const VP8Io* const io) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:   const int width = io->width;",
          "173:   const int height = io->crop_bottom;",
          "",
          "[Removed Lines]",
          "169: const uint8_t* VP8DecompressAlphaRows(VP8Decoder* const dec,",
          "170:                                       const VP8Io* const io,",
          "171:                                       int row, int num_rows) {",
          "",
          "[Added Lines]",
          "175: WEBP_NODISCARD const uint8_t* VP8DecompressAlphaRows(VP8Decoder* const dec,",
          "176:                                                      const VP8Io* const io,",
          "177:                                                      int row, int num_rows) {",
          "",
          "---------------"
        ],
        "src/dec/idec_dec.c||src/dec/idec_dec.c": [
          "File: src/dec/idec_dec.c -> src/dec/idec_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"src/dec/alphai_dec.h\"",
          "19: #include \"src/dec/webpi_dec.h\"",
          "20: #include \"src/dec/vp8i_dec.h\"",
          "21: #include \"src/utils/utils.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"src/dec/vp8_dec.h\"",
          "23: #include \"src/webp/decode.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   VP8Decoder* const dec = (VP8Decoder*)idec->dec_;",
          "167:   MemBuffer* const mem = &idec->mem_;",
          "168:   const int need_compressed_alpha = NeedCompressedAlpha(idec);",
          "",
          "[Removed Lines]",
          "164: static int AppendToMemBuffer(WebPIDecoder* const idec,",
          "165:                              const uint8_t* const data, size_t data_size) {",
          "",
          "[Added Lines]",
          "166: WEBP_NODISCARD static int AppendToMemBuffer(WebPIDecoder* const idec,",
          "167:                                             const uint8_t* const data,",
          "168:                                             size_t data_size) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:   return 1;",
          "204: }",
          "208:   MemBuffer* const mem = &idec->mem_;",
          "209:   const uint8_t* const old_buf = mem->buf_;",
          "210:   const uint8_t* const old_start =",
          "",
          "[Removed Lines]",
          "206: static int RemapMemBuffer(WebPIDecoder* const idec,",
          "207:                           const uint8_t* const data, size_t data_size) {",
          "",
          "[Added Lines]",
          "209: WEBP_NODISCARD static int RemapMemBuffer(WebPIDecoder* const idec,",
          "210:                                          const uint8_t* const data,",
          "211:                                          size_t data_size) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:   }",
          "238: }",
          "241:   if (mem->mode_ == MEM_MODE_NONE) {",
          "242:     mem->mode_ = expected;    // switch to the expected mode",
          "243:   } else if (mem->mode_ != expected) {",
          "",
          "[Removed Lines]",
          "240: static int CheckMemBufferMode(MemBuffer* const mem, MemBufferMode expected) {",
          "",
          "[Added Lines]",
          "244: WEBP_NODISCARD static int CheckMemBufferMode(MemBuffer* const mem,",
          "245:                                              MemBufferMode expected) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "248: }",
          "252:   const WebPDecoderOptions* const options = idec->params_.options;",
          "253:   WebPDecBuffer* const output = idec->params_.output;",
          "",
          "[Removed Lines]",
          "251: static VP8StatusCode FinishDecoding(WebPIDecoder* const idec) {",
          "",
          "[Added Lines]",
          "256: WEBP_NODISCARD static VP8StatusCode FinishDecoding(WebPIDecoder* const idec) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:     if (status != VP8_STATUS_OK) return status;",
          "259:   }",
          "260:   if (idec->final_output_ != NULL) {",
          "262:     WebPFreeDecBuffer(&idec->output_);",
          "264:     idec->final_output_ = NULL;",
          "265:   }",
          "",
          "[Removed Lines]",
          "261:     WebPCopyDecBufferPixels(output, idec->final_output_);  // do the slow-copy",
          "",
          "[Added Lines]",
          "266:     const VP8StatusCode status = WebPCopyDecBufferPixels(",
          "267:         output, idec->final_output_);  // do the slow-copy",
          "269:     if (status != VP8_STATUS_OK) return status;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "288: static VP8StatusCode IDecError(WebPIDecoder* const idec, VP8StatusCode error) {",
          "289:   if (idec->state_ == STATE_VP8_DATA) {",
          "292:   }",
          "293:   idec->state_ = STATE_ERROR;",
          "294:   return error;",
          "",
          "[Removed Lines]",
          "291:     VP8ExitCritical((VP8Decoder*)idec->dec_, &idec->io_);",
          "",
          "[Added Lines]",
          "298:     (void)VP8ExitCritical((VP8Decoder*)idec->dec_, &idec->io_);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "607:   WebPIDecoder* idec = (WebPIDecoder*)WebPSafeCalloc(1ULL, sizeof(*idec));",
          "608:   if (idec == NULL) {",
          "609:     return NULL;",
          "",
          "[Removed Lines]",
          "605: static WebPIDecoder* NewDecoder(WebPDecBuffer* const output_buffer,",
          "606:                                 const WebPBitstreamFeatures* const features) {",
          "",
          "[Added Lines]",
          "612: WEBP_NODISCARD static WebPIDecoder* NewDecoder(",
          "613:     WebPDecBuffer* const output_buffer,",
          "614:     const WebPBitstreamFeatures* const features) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "615:   idec->last_mb_y_ = -1;",
          "617:   InitMemBuffer(&idec->mem_);",
          "621:   WebPResetDecParams(&idec->params_);",
          "622:   if (output_buffer == NULL || WebPAvoidSlowMemory(output_buffer, features)) {",
          "",
          "[Removed Lines]",
          "618:   WebPInitDecBuffer(&idec->output_);",
          "619:   VP8InitIo(&idec->io_);",
          "",
          "[Added Lines]",
          "626:   if (!WebPInitDecBuffer(&idec->output_) || !VP8InitIo(&idec->io_)) {",
          "627:     WebPSafeFree(idec);",
          "628:     return NULL;",
          "629:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "675:     if (!idec->is_lossless_) {",
          "676:       if (idec->state_ == STATE_VP8_DATA) {",
          "679:       }",
          "680:       VP8Delete((VP8Decoder*)idec->dec_);",
          "681:     } else {",
          "",
          "[Removed Lines]",
          "678:         VP8ExitCritical((VP8Decoder*)idec->dec_, &idec->io_);",
          "",
          "[Added Lines]",
          "689:         (void)VP8ExitCritical((VP8Decoder*)idec->dec_, &idec->io_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "852:   return src;",
          "853: }",
          "857:   const WebPDecBuffer* const src = GetOutputBuffer(idec);",
          "858:   if (src == NULL) return NULL;",
          "859:   if (src->colorspace >= MODE_YUV) {",
          "",
          "[Removed Lines]",
          "855: uint8_t* WebPIDecGetRGB(const WebPIDecoder* idec, int* last_y,",
          "856:                         int* width, int* height, int* stride) {",
          "",
          "[Added Lines]",
          "866: WEBP_NODISCARD uint8_t* WebPIDecGetRGB(const WebPIDecoder* idec, int* last_y,",
          "867:                                        int* width, int* height, int* stride) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "868:   return src->u.RGBA.rgba;",
          "869: }",
          "875:   const WebPDecBuffer* const src = GetOutputBuffer(idec);",
          "876:   if (src == NULL) return NULL;",
          "877:   if (src->colorspace < MODE_YUV) {",
          "",
          "[Removed Lines]",
          "871: uint8_t* WebPIDecGetYUVA(const WebPIDecoder* idec, int* last_y,",
          "872:                          uint8_t** u, uint8_t** v, uint8_t** a,",
          "873:                          int* width, int* height,",
          "874:                          int* stride, int* uv_stride, int* a_stride) {",
          "",
          "[Added Lines]",
          "882: WEBP_NODISCARD uint8_t* WebPIDecGetYUVA(const WebPIDecoder* idec, int* last_y,",
          "883:                                         uint8_t** u, uint8_t** v, uint8_t** a,",
          "884:                                         int* width, int* height, int* stride,",
          "885:                                         int* uv_stride, int* a_stride) {",
          "",
          "---------------"
        ],
        "src/dec/vp8_dec.h||src/dec/vp8_dec.h": [
          "File: src/dec/vp8_dec.h -> src/dec/vp8_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #define WEBP_DEC_VP8_DEC_H_",
          "17: #include \"src/webp/decode.h\"",
          "19: #ifdef __cplusplus",
          "20: extern \"C\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: };",
          "123: typedef struct VP8Decoder VP8Decoder;",
          "",
          "[Removed Lines]",
          "111: int VP8InitIoInternal(VP8Io* const, int);",
          "116: int WebPISetIOHooks(WebPIDecoder* const idec,",
          "117:                     VP8IoPutHook put,",
          "118:                     VP8IoSetupHook setup,",
          "119:                     VP8IoTeardownHook teardown,",
          "120:                     void* user_data);",
          "",
          "[Added Lines]",
          "112: WEBP_NODISCARD int VP8InitIoInternal(VP8Io* const, int);",
          "117: WEBP_NODISCARD int WebPISetIOHooks(WebPIDecoder* const idec, VP8IoPutHook put,",
          "118:                                    VP8IoSetupHook setup,",
          "119:                                    VP8IoTeardownHook teardown, void* user_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   return VP8InitIoInternal(io, WEBP_DECODER_ABI_VERSION);",
          "133: }",
          "144: VP8StatusCode VP8Status(VP8Decoder* const dec);",
          "",
          "[Removed Lines]",
          "131: static WEBP_INLINE int VP8InitIo(VP8Io* const io) {",
          "137: int VP8GetHeaders(VP8Decoder* const dec, VP8Io* const io);",
          "141: int VP8Decode(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "[Added Lines]",
          "130: WEBP_NODISCARD static WEBP_INLINE int VP8InitIo(VP8Io* const io) {",
          "136: WEBP_NODISCARD int VP8GetHeaders(VP8Decoder* const dec, VP8Io* const io);",
          "140: WEBP_NODISCARD int VP8Decode(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "---------------"
        ],
        "src/dec/vp8i_dec.h||src/dec/vp8i_dec.h": [
          "File: src/dec/vp8i_dec.h -> src/dec/vp8i_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"src/utils/random_utils.h\"",
          "22: #include \"src/utils/thread_utils.h\"",
          "23: #include \"src/dsp/dsp.h\"",
          "25: #ifdef __cplusplus",
          "26: extern \"C\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282: void VP8ParseQuant(VP8Decoder* const dec);",
          "",
          "[Removed Lines]",
          "285: int VP8InitFrame(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "[Added Lines]",
          "286: WEBP_NODISCARD int VP8InitFrame(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290: VP8StatusCode VP8EnterCritical(VP8Decoder* const dec, VP8Io* const io);",
          "296: int VP8GetThreadMethod(const WebPDecoderOptions* const options,",
          "",
          "[Removed Lines]",
          "293: int VP8ExitCritical(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "[Added Lines]",
          "294: WEBP_NODISCARD int VP8ExitCritical(VP8Decoder* const dec, VP8Io* const io);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: void VP8InitDithering(const WebPDecoderOptions* const options,",
          "301:                       VP8Decoder* const dec);",
          "305: void VP8InitScanline(VP8Decoder* const dec);",
          "310: const uint8_t* VP8DecompressAlphaRows(VP8Decoder* const dec,",
          "",
          "[Removed Lines]",
          "303: int VP8ProcessRow(VP8Decoder* const dec, VP8Io* const io);",
          "307: int VP8DecodeMB(VP8Decoder* const dec, VP8BitReader* const token_br);",
          "",
          "[Added Lines]",
          "304: WEBP_NODISCARD int VP8ProcessRow(VP8Decoder* const dec, VP8Io* const io);",
          "308: WEBP_NODISCARD int VP8DecodeMB(VP8Decoder* const dec,",
          "309:                                VP8BitReader* const token_br);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"src/utils/bit_reader_utils.h\"",
          "21: #include \"src/utils/color_cache_utils.h\"",
          "22: #include \"src/utils/huffman_utils.h\"",
          "24: #ifdef __cplusplus",
          "25: extern \"C\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "102: int VP8LDecodeAlphaHeader(struct ALPHDecoder* const alph_dec,",
          "103:                           const uint8_t* const data, size_t data_size);",
          "109: int VP8LDecodeAlphaImageStream(struct ALPHDecoder* const alph_dec,",
          "110:                                int last_row);",
          "113: VP8LDecoder* VP8LNew(void);",
          "116: int VP8LDecodeHeader(VP8LDecoder* const dec, VP8Io* const io);",
          "120: int VP8LDecodeImage(VP8LDecoder* const dec);",
          "",
          "[Added Lines]",
          "103: WEBP_NODISCARD int VP8LDecodeAlphaHeader(struct ALPHDecoder* const alph_dec,",
          "104:                                          const uint8_t* const data,",
          "105:                                          size_t data_size);",
          "111: WEBP_NODISCARD int VP8LDecodeAlphaImageStream(",
          "112:     struct ALPHDecoder* const alph_dec, int last_row);",
          "115: WEBP_NODISCARD VP8LDecoder* VP8LNew(void);",
          "118: WEBP_NODISCARD int VP8LDecodeHeader(VP8LDecoder* const dec, VP8Io* const io);",
          "122: WEBP_NODISCARD int VP8LDecodeImage(VP8LDecoder* const dec);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "136: int ReadHuffmanCodesHelper(int color_cache_bits, int num_htree_groups,",
          "137:                            int num_htree_groups_max, const int* const mapping,",
          "138:                            VP8LDecoder* const dec,",
          "139:                            HuffmanTables* const huffman_tables,",
          "140:                            HTreeGroup** const htree_groups);",
          "",
          "[Added Lines]",
          "138: WEBP_NODISCARD int ReadHuffmanCodesHelper(",
          "139:     int color_cache_bits, int num_htree_groups, int num_htree_groups_max,",
          "140:     const int* const mapping, VP8LDecoder* const dec,",
          "141:     HuffmanTables* const huffman_tables, HTreeGroup** const htree_groups);",
          "",
          "---------------"
        ],
        "src/dec/webp_dec.c||src/dec/webp_dec.c": [
          "File: src/dec/webp_dec.c -> src/dec/webp_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <stdlib.h>",
          "16: #include \"src/dec/vp8i_dec.h\"",
          "17: #include \"src/dec/vp8li_dec.h\"",
          "18: #include \"src/dec/webpi_dec.h\"",
          "19: #include \"src/utils/utils.h\"",
          "20: #include \"src/webp/mux_types.h\"  // ALPHA_FLAG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include \"src/dec/vp8_dec.h\"",
          "22: #include \"src/webp/decode.h\"",
          "23: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   VP8StatusCode status;",
          "450:   VP8Io io;",
          "451:   WebPHeaderStructure headers;",
          "",
          "[Removed Lines]",
          "447: static VP8StatusCode DecodeInto(const uint8_t* const data, size_t data_size,",
          "448:                                 WebPDecParams* const params) {",
          "",
          "[Added Lines]",
          "450: WEBP_NODISCARD static VP8StatusCode DecodeInto(const uint8_t* const data,",
          "451:                                                size_t data_size,",
          "452:                                                WebPDecParams* const params) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "459:   }",
          "461:   assert(params != NULL);",
          "463:   io.data = headers.data + headers.offset;",
          "464:   io.data_size = headers.data_size - headers.offset;",
          "465:   WebPInitCustomIo(params, &io);  // Plug the I/O functions.",
          "",
          "[Removed Lines]",
          "462:   VP8InitIo(&io);",
          "",
          "[Added Lines]",
          "466:   if (!VP8InitIo(&io)) {",
          "467:     return VP8_STATUS_INVALID_PARAM;",
          "468:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523: }",
          "531:   WebPDecParams params;",
          "532:   WebPDecBuffer buf;",
          "534:     return NULL;",
          "535:   }",
          "537:   WebPResetDecParams(&params);",
          "538:   params.output = &buf;",
          "539:   buf.colorspace    = colorspace;",
          "",
          "[Removed Lines]",
          "526: static uint8_t* DecodeIntoRGBABuffer(WEBP_CSP_MODE colorspace,",
          "527:                                      const uint8_t* const data,",
          "528:                                      size_t data_size,",
          "529:                                      uint8_t* const rgba,",
          "530:                                      int stride, size_t size) {",
          "533:   if (rgba == NULL) {",
          "536:   WebPInitDecBuffer(&buf);",
          "",
          "[Added Lines]",
          "532: WEBP_NODISCARD static uint8_t* DecodeIntoRGBABuffer(WEBP_CSP_MODE colorspace,",
          "533:                                                     const uint8_t* const data,",
          "534:                                                     size_t data_size,",
          "535:                                                     uint8_t* const rgba,",
          "536:                                                     int stride, size_t size) {",
          "539:   if (rgba == NULL || !WebPInitDecBuffer(&buf)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "578:                            uint8_t* v, size_t v_size, int v_stride) {",
          "579:   WebPDecParams params;",
          "580:   WebPDecBuffer output;",
          "583:   WebPResetDecParams(&params);",
          "584:   params.output = &output;",
          "585:   output.colorspace      = MODE_YUV;",
          "",
          "[Removed Lines]",
          "581:   if (luma == NULL) return NULL;",
          "582:   WebPInitDecBuffer(&output);",
          "",
          "[Added Lines]",
          "586:   if (luma == NULL || !WebPInitDecBuffer(&output)) return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607:   WebPDecParams params;",
          "608:   WebPDecBuffer output;",
          "611:   WebPResetDecParams(&params);",
          "612:   params.output = &output;",
          "613:   output.colorspace = mode;",
          "",
          "[Removed Lines]",
          "604: static uint8_t* Decode(WEBP_CSP_MODE mode, const uint8_t* const data,",
          "605:                        size_t data_size, int* const width, int* const height,",
          "606:                        WebPDecBuffer* const keep_info) {",
          "610:   WebPInitDecBuffer(&output);",
          "",
          "[Added Lines]",
          "608: WEBP_NODISCARD static uint8_t* Decode(WEBP_CSP_MODE mode,",
          "609:                                       const uint8_t* const data,",
          "610:                                       size_t data_size, int* const width,",
          "611:                                       int* const height,",
          "612:                                       WebPDecBuffer* const keep_info) {",
          "616:   if (!WebPInitDecBuffer(&output)) {",
          "617:     return NULL;",
          "618:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "733:   }",
          "734:   memset(config, 0, sizeof(*config));",
          "735:   DefaultFeatures(&config->input);",
          "737:   return 1;",
          "738: }",
          "",
          "[Removed Lines]",
          "736:   WebPInitDecBuffer(&config->output);",
          "",
          "[Added Lines]",
          "744:   if (!WebPInitDecBuffer(&config->output)) {",
          "745:     return 0;",
          "746:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "772:   if (WebPAvoidSlowMemory(params.output, &config->input)) {",
          "774:     WebPDecBuffer in_mem_buffer;",
          "776:     in_mem_buffer.colorspace = config->output.colorspace;",
          "777:     in_mem_buffer.width = config->input.width;",
          "778:     in_mem_buffer.height = config->input.height;",
          "",
          "[Removed Lines]",
          "775:     WebPInitDecBuffer(&in_mem_buffer);",
          "",
          "[Added Lines]",
          "785:     if (!WebPInitDecBuffer(&in_mem_buffer)) {",
          "786:       return VP8_STATUS_INVALID_PARAM;",
          "787:     }",
          "",
          "---------------"
        ],
        "src/dec/webpi_dec.h||src/dec/webpi_dec.h": [
          "File: src/dec/webpi_dec.h -> src/dec/webpi_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"src/utils/rescaler_utils.h\"",
          "22: #include \"src/dec/vp8_dec.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"src/webp/decode.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "90: int WebPIoInitFromOptions(const WebPDecoderOptions* const options,",
          "91:                           VP8Io* const io, WEBP_CSP_MODE src_colorspace);",
          "",
          "[Added Lines]",
          "91: WEBP_NODISCARD int WebPIoInitFromOptions(",
          "92:     const WebPDecoderOptions* const options, VP8Io* const io,",
          "93:     WEBP_CSP_MODE src_colorspace);",
          "",
          "---------------"
        ],
        "src/demux/anim_decode.c||src/demux/anim_decode.c": [
          "File: src/demux/anim_decode.c -> src/demux/anim_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"src/utils/utils.h\"",
          "21: #include \"src/webp/decode.h\"",
          "22: #include \"src/webp/demux.h\"",
          "24: #define NUM_CHANNELS 4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   return 1;",
          "69: }",
          "73:   WEBP_CSP_MODE mode;",
          "74:   WebPDecoderConfig* config = &dec->config_;",
          "75:   assert(dec_options != NULL);",
          "",
          "[Removed Lines]",
          "71: static int ApplyDecoderOptions(const WebPAnimDecoderOptions* const dec_options,",
          "72:                                WebPAnimDecoder* const dec) {",
          "",
          "[Added Lines]",
          "72: WEBP_NODISCARD static int ApplyDecoderOptions(",
          "73:     const WebPAnimDecoderOptions* const dec_options,",
          "74:     WebPAnimDecoder* const dec) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:   dec->blend_func_ = (mode == MODE_RGBA || mode == MODE_BGRA)",
          "83:                          ? &BlendPixelRowNonPremult",
          "84:                          : &BlendPixelRowPremult;",
          "86:   config->output.colorspace = mode;",
          "87:   config->output.is_external_memory = 1;",
          "88:   config->options.use_threads = dec_options->use_threads;",
          "",
          "[Removed Lines]",
          "85:   WebPInitDecoderConfig(config);",
          "",
          "[Added Lines]",
          "87:   if (!WebPInitDecoderConfig(config)) {",
          "88:     return 0;",
          "89:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157: }",
          "162:   const uint64_t size =",
          "163:       (uint64_t)canvas_width * canvas_height * NUM_CHANNELS * sizeof(*buf);",
          "164:   if (!CheckSizeOverflow(size)) return 0;",
          "",
          "[Removed Lines]",
          "160: static int ZeroFillCanvas(uint8_t* buf, uint32_t canvas_width,",
          "161:                           uint32_t canvas_height) {",
          "",
          "[Added Lines]",
          "164: WEBP_NODISCARD static int ZeroFillCanvas(uint8_t* buf, uint32_t canvas_width,",
          "165:                                          uint32_t canvas_height) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179: }",
          "184:   const uint64_t size = (uint64_t)width * height * NUM_CHANNELS;",
          "185:   if (!CheckSizeOverflow(size)) return 0;",
          "186:   assert(src != NULL && dst != NULL);",
          "",
          "[Removed Lines]",
          "182: static int CopyCanvas(const uint8_t* src, uint8_t* dst,",
          "183:                       uint32_t width, uint32_t height) {",
          "",
          "[Added Lines]",
          "186: WEBP_NODISCARD static int CopyCanvas(const uint8_t* src, uint8_t* dst,",
          "187:                                      uint32_t width, uint32_t height) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "424:   WebPDemuxReleaseIterator(&dec->prev_iter_);",
          "425:   dec->prev_iter_ = iter;",
          "426:   dec->prev_frame_was_keyframe_ = is_key_frame;",
          "428:   if (dec->prev_iter_.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND) {",
          "429:     ZeroFillFrameRect(dec->prev_frame_disposed_, width * NUM_CHANNELS,",
          "430:                       dec->prev_iter_.x_offset, dec->prev_iter_.y_offset,",
          "",
          "[Removed Lines]",
          "427:   CopyCanvas(dec->curr_frame_, dec->prev_frame_disposed_, width, height);",
          "",
          "[Added Lines]",
          "431:   if (!CopyCanvas(dec->curr_frame_, dec->prev_frame_disposed_, width, height)) {",
          "432:     goto Error;",
          "433:   }",
          "",
          "---------------"
        ],
        "src/enc/alpha_enc.c||src/enc/alpha_enc.c": [
          "File: src/enc/alpha_enc.c -> src/enc/alpha_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"src/utils/filters_utils.h\"",
          "21: #include \"src/utils/quant_levels_utils.h\"",
          "22: #include \"src/utils/utils.h\"",
          "23: #include \"src/webp/format_constants.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"src/webp/encode.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   WebPDispatchAlphaToGreen(data, width, picture.width, picture.height,",
          "67:                            picture.argb, picture.argb_stride);",
          "70:   config.lossless = 1;",
          "",
          "[Removed Lines]",
          "69:   WebPConfigInit(&config);",
          "",
          "[Added Lines]",
          "70:   if (!WebPConfigInit(&config)) return 0;",
          "",
          "---------------"
        ],
        "src/enc/vp8l_enc.c||src/enc/vp8l_enc.c": [
          "File: src/enc/vp8l_enc.c -> src/enc/vp8l_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1675:   }",
          "1681:   if (!EncoderAnalyze(enc_main, crunch_configs, &num_crunch_configs_main,",
          "",
          "[Removed Lines]",
          "1678:   WebPPictureInit(&picture_side);",
          "",
          "[Added Lines]",
          "1678:   if (!WebPPictureInit(&picture_side)) {",
          "1679:     goto Error;",
          "1680:   }",
          "",
          "---------------"
        ],
        "src/mux/anim_encode.c||src/mux/anim_encode.c": [
          "File: src/mux/anim_encode.c -> src/mux/anim_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"src/webp/encode.h\"",
          "23: #include \"src/webp/format_constants.h\"",
          "24: #include \"src/webp/mux.h\"",
          "26: #if defined(_MSC_VER) && _MSC_VER < 1900",
          "27: #define snprintf _snprintf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"src/webp/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1398:     }",
          "1399:     config = *encoder_config;",
          "1400:   } else {",
          "1402:     config.lossless = 1;",
          "1403:   }",
          "1404:   assert(enc->curr_canvas_ == NULL);",
          "",
          "[Removed Lines]",
          "1401:     WebPConfigInit(&config);",
          "",
          "[Added Lines]",
          "1402:     if (!WebPConfigInit(&config)) {",
          "1403:       MarkError(enc, \"Cannot Init config\");",
          "1404:       return 0;",
          "1405:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1424:   const WebPData* const image = &frame->bitstream;",
          "1425:   WebPPicture sub_image;",
          "1426:   WebPDecoderConfig config;",
          "1428:   WebPUtilClearPic(canvas, NULL);",
          "1429:   if (WebPGetFeatures(image->bytes, image->size, &config.input) !=",
          "1430:       VP8_STATUS_OK) {",
          "",
          "[Removed Lines]",
          "1422: static int DecodeFrameOntoCanvas(const WebPMuxFrameInfo* const frame,",
          "1423:                                  WebPPicture* const canvas) {",
          "1427:   WebPInitDecoderConfig(&config);",
          "",
          "[Added Lines]",
          "1426: WEBP_NODISCARD static int DecodeFrameOntoCanvas(",
          "1427:     const WebPMuxFrameInfo* const frame, WebPPicture* const canvas) {",
          "1431:   if (!WebPInitDecoderConfig(&config)) {",
          "1432:     return 0;",
          "1433:   }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "69: #define HUFFMAN_PACKED_BITS 6",
          "",
          "[Removed Lines]",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "",
          "[Added Lines]",
          "66: WEBP_NODISCARD int VP8LHuffmanTablesAllocate(int size,",
          "67:                                              HuffmanTables* huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: };",
          "97: void VP8LHtreeGroupsFree(HTreeGroup* const htree_groups);",
          "",
          "[Removed Lines]",
          "94: HTreeGroup* VP8LHtreeGroupsNew(int num_htree_groups);",
          "",
          "[Added Lines]",
          "95: WEBP_NODISCARD HTreeGroup* VP8LHtreeGroupsNew(int num_htree_groups);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: #ifdef __cplusplus",
          "108: }    // extern \"C\"",
          "",
          "[Removed Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "105:                           const int code_lengths[], int code_lengths_size);",
          "",
          "[Added Lines]",
          "105: WEBP_NODISCARD int VP8LBuildHuffmanTable(HuffmanTables* const root_table,",
          "106:                                          int root_bits,",
          "107:                                          const int code_lengths[],",
          "108:                                          int code_lengths_size);",
          "",
          "---------------"
        ],
        "src/webp/decode.h||src/webp/decode.h": [
          "File: src/webp/decode.h -> src/webp/decode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "51: WEBP_EXTERN int WebPGetInfo(const uint8_t* data, size_t data_size,",
          "52:                             int* width, int* height);",
          "59: WEBP_EXTERN uint8_t* WebPDecodeRGBA(const uint8_t* data, size_t data_size,",
          "60:                                     int* width, int* height);",
          "63: WEBP_EXTERN uint8_t* WebPDecodeARGB(const uint8_t* data, size_t data_size,",
          "64:                                     int* width, int* height);",
          "67: WEBP_EXTERN uint8_t* WebPDecodeBGRA(const uint8_t* data, size_t data_size,",
          "68:                                     int* width, int* height);",
          "72: WEBP_EXTERN uint8_t* WebPDecodeRGB(const uint8_t* data, size_t data_size,",
          "73:                                    int* width, int* height);",
          "76: WEBP_EXTERN uint8_t* WebPDecodeBGR(const uint8_t* data, size_t data_size,",
          "77:                                    int* width, int* height);",
          "",
          "[Added Lines]",
          "51: WEBP_NODISCARD WEBP_EXTERN int WebPGetInfo(",
          "52:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "59: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeRGBA(",
          "60:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "63: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeARGB(",
          "64:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "67: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeBGRA(",
          "68:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "72: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeRGB(",
          "73:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "76: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeBGR(",
          "77:     const uint8_t* data, size_t data_size, int* width, int* height);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "90: WEBP_EXTERN uint8_t* WebPDecodeYUV(const uint8_t* data, size_t data_size,",
          "91:                                    int* width, int* height,",
          "92:                                    uint8_t** u, uint8_t** v,",
          "93:                                    int* stride, int* uv_stride);",
          "",
          "[Added Lines]",
          "89: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeYUV(",
          "90:     const uint8_t* data, size_t data_size, int* width, int* height,",
          "91:     uint8_t** u, uint8_t** v, int* stride, int* uv_stride);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     const uint8_t* data, size_t data_size,",
          "105:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "107:     const uint8_t* data, size_t data_size,",
          "108:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "110:     const uint8_t* data, size_t data_size,",
          "111:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "116:     const uint8_t* data, size_t data_size,",
          "117:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "119:     const uint8_t* data, size_t data_size,",
          "120:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "",
          "[Removed Lines]",
          "103: WEBP_EXTERN uint8_t* WebPDecodeRGBAInto(",
          "106: WEBP_EXTERN uint8_t* WebPDecodeARGBInto(",
          "109: WEBP_EXTERN uint8_t* WebPDecodeBGRAInto(",
          "115: WEBP_EXTERN uint8_t* WebPDecodeRGBInto(",
          "118: WEBP_EXTERN uint8_t* WebPDecodeBGRInto(",
          "",
          "[Added Lines]",
          "101: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeRGBAInto(",
          "104: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeARGBInto(",
          "107: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeBGRAInto(",
          "113: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeRGBInto(",
          "116: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeBGRInto(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:     const uint8_t* data, size_t data_size,",
          "131:     uint8_t* luma, size_t luma_size, int luma_stride,",
          "132:     uint8_t* u, size_t u_size, int u_stride,",
          "",
          "[Removed Lines]",
          "129: WEBP_EXTERN uint8_t* WebPDecodeYUVInto(",
          "",
          "[Added Lines]",
          "127: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPDecodeYUVInto(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217: };",
          "225:   return WebPInitDecBufferInternal(buffer, WEBP_DECODER_ABI_VERSION);",
          "226: }",
          "",
          "[Removed Lines]",
          "220: WEBP_EXTERN int WebPInitDecBufferInternal(WebPDecBuffer*, int);",
          "224: static WEBP_INLINE int WebPInitDecBuffer(WebPDecBuffer* buffer) {",
          "",
          "[Added Lines]",
          "218: WEBP_NODISCARD WEBP_EXTERN int WebPInitDecBufferInternal(WebPDecBuffer*, int);",
          "222: WEBP_NODISCARD static WEBP_INLINE int WebPInitDecBuffer(WebPDecBuffer* buffer) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:   VP8_STATUS_OK = 0,",
          "237:   VP8_STATUS_OUT_OF_MEMORY,",
          "238:   VP8_STATUS_INVALID_PARAM,",
          "",
          "[Removed Lines]",
          "235: typedef enum VP8StatusCode {",
          "",
          "[Added Lines]",
          "233: typedef enum WEBP_NODISCARD VP8StatusCode {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "285: WEBP_EXTERN WebPIDecoder* WebPINewDecoder(WebPDecBuffer* output_buffer);",
          "",
          "[Added Lines]",
          "283: WEBP_NODISCARD WEBP_EXTERN WebPIDecoder* WebPINewDecoder(",
          "284:     WebPDecBuffer* output_buffer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:     WEBP_CSP_MODE csp,",
          "299:     uint8_t* output_buffer, size_t output_buffer_size, int output_stride);",
          "",
          "[Removed Lines]",
          "297: WEBP_EXTERN WebPIDecoder* WebPINewRGB(",
          "",
          "[Added Lines]",
          "296: WEBP_NODISCARD WEBP_EXTERN WebPIDecoder* WebPINewRGB(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "313:     uint8_t* luma, size_t luma_size, int luma_stride,",
          "314:     uint8_t* u, size_t u_size, int u_stride,",
          "315:     uint8_t* v, size_t v_size, int v_stride,",
          "",
          "[Removed Lines]",
          "312: WEBP_EXTERN WebPIDecoder* WebPINewYUVA(",
          "",
          "[Added Lines]",
          "311: WEBP_NODISCARD WEBP_EXTERN WebPIDecoder* WebPINewYUVA(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "321:     uint8_t* luma, size_t luma_size, int luma_stride,",
          "322:     uint8_t* u, size_t u_size, int u_stride,",
          "323:     uint8_t* v, size_t v_size, int v_stride);",
          "",
          "[Removed Lines]",
          "320: WEBP_EXTERN WebPIDecoder* WebPINewYUV(",
          "",
          "[Added Lines]",
          "319: WEBP_NODISCARD WEBP_EXTERN WebPIDecoder* WebPINewYUV(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "351:     const WebPIDecoder* idec, int* last_y,",
          "352:     int* width, int* height, int* stride);",
          "358:     const WebPIDecoder* idec, int* last_y,",
          "359:     uint8_t** u, uint8_t** v, uint8_t** a,",
          "360:     int* width, int* height, int* stride, int* uv_stride, int* a_stride);",
          "365:     const WebPIDecoder* idec, int* last_y, uint8_t** u, uint8_t** v,",
          "366:     int* width, int* height, int* stride, int* uv_stride) {",
          "367:   return WebPIDecGetYUVA(idec, last_y, u, v, NULL, width, height,",
          "",
          "[Removed Lines]",
          "350: WEBP_EXTERN uint8_t* WebPIDecGetRGB(",
          "357: WEBP_EXTERN uint8_t* WebPIDecGetYUVA(",
          "364: static WEBP_INLINE uint8_t* WebPIDecGetYUV(",
          "",
          "[Added Lines]",
          "349: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPIDecGetRGB(",
          "356: WEBP_NODISCARD WEBP_EXTERN uint8_t* WebPIDecGetYUVA(",
          "363: WEBP_NODISCARD static WEBP_INLINE uint8_t* WebPIDecGetYUV(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "378:     const WebPIDecoder* idec, int* left, int* top, int* width, int* height);",
          "",
          "[Removed Lines]",
          "377: WEBP_EXTERN const WebPDecBuffer* WebPIDecodedArea(",
          "",
          "[Added Lines]",
          "376: WEBP_NODISCARD WEBP_EXTERN const WebPDecBuffer* WebPIDecodedArea(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "469: };",
          "478:   return WebPInitDecoderConfigInternal(config, WEBP_DECODER_ABI_VERSION);",
          "479: }",
          "",
          "[Removed Lines]",
          "472: WEBP_EXTERN int WebPInitDecoderConfigInternal(WebPDecoderConfig*, int);",
          "477: static WEBP_INLINE int WebPInitDecoderConfig(WebPDecoderConfig* config) {",
          "",
          "[Added Lines]",
          "471: WEBP_NODISCARD WEBP_EXTERN int WebPInitDecoderConfigInternal(WebPDecoderConfig*,",
          "472:                                                              int);",
          "477: WEBP_NODISCARD static WEBP_INLINE int WebPInitDecoderConfig(",
          "478:     WebPDecoderConfig* config) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "492: WEBP_EXTERN WebPIDecoder* WebPIDecode(const uint8_t* data, size_t data_size,",
          "493:                                       WebPDecoderConfig* config);",
          "",
          "[Added Lines]",
          "493: WEBP_NODISCARD WEBP_EXTERN WebPIDecoder* WebPIDecode(",
          "494:     const uint8_t* data, size_t data_size, WebPDecoderConfig* config);",
          "",
          "---------------"
        ],
        "src/webp/demux.h||src/webp/demux.h": [
          "File: src/webp/demux.h -> src/webp/demux.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #include \"./decode.h\"     // for WEBP_CSP_MODE",
          "52: #include \"./mux_types.h\"",
          "54: #ifdef __cplusplus",
          "55: extern \"C\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #include \"./types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: } WebPDemuxState;",
          "89:     const WebPData*, int, WebPDemuxState*, int);",
          "95:   return WebPDemuxInternal(data, 0, NULL, WEBP_DEMUX_ABI_VERSION);",
          "96: }",
          "",
          "[Removed Lines]",
          "88: WEBP_EXTERN WebPDemuxer* WebPDemuxInternal(",
          "94: static WEBP_INLINE WebPDemuxer* WebPDemux(const WebPData* data) {",
          "",
          "[Added Lines]",
          "89: WEBP_NODISCARD WEBP_EXTERN WebPDemuxer* WebPDemuxInternal(",
          "95: WEBP_NODISCARD static WEBP_INLINE WebPDemuxer* WebPDemux(const WebPData* data) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     const WebPData* data, WebPDemuxState* state) {",
          "108:   return WebPDemuxInternal(data, 1, state, WEBP_DEMUX_ABI_VERSION);",
          "109: }",
          "",
          "[Removed Lines]",
          "106: static WEBP_INLINE WebPDemuxer* WebPDemuxPartial(",
          "",
          "[Added Lines]",
          "107: WEBP_NODISCARD static WEBP_INLINE WebPDemuxer* WebPDemuxPartial(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:     const WebPDemuxer* dmux, int frame_number, WebPIterator* iter);",
          "",
          "[Removed Lines]",
          "167: WEBP_EXTERN int WebPDemuxGetFrame(",
          "173: WEBP_EXTERN int WebPDemuxNextFrame(WebPIterator* iter);",
          "174: WEBP_EXTERN int WebPDemuxPrevFrame(WebPIterator* iter);",
          "",
          "[Added Lines]",
          "168: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxGetFrame(",
          "174: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxNextFrame(WebPIterator* iter);",
          "175: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxPrevFrame(WebPIterator* iter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "205: WEBP_EXTERN int WebPDemuxGetChunk(const WebPDemuxer* dmux,",
          "206:                                   const char fourcc[4], int chunk_number,",
          "207:                                   WebPChunkIterator* iter);",
          "212: WEBP_EXTERN int WebPDemuxNextChunk(WebPChunkIterator* iter);",
          "213: WEBP_EXTERN int WebPDemuxPrevChunk(WebPChunkIterator* iter);",
          "",
          "[Added Lines]",
          "206: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxGetChunk(const WebPDemuxer* dmux,",
          "207:                                                  const char fourcc[4],",
          "208:                                                  int chunk_number,",
          "209:                                                  WebPChunkIterator* iter);",
          "214: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxNextChunk(WebPChunkIterator* iter);",
          "215: WEBP_NODISCARD WEBP_EXTERN int WebPDemuxPrevChunk(WebPChunkIterator* iter);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257: };",
          "261:     WebPAnimDecoderOptions*, int);",
          "268:     WebPAnimDecoderOptions* dec_options) {",
          "269:   return WebPAnimDecoderOptionsInitInternal(dec_options,",
          "270:                                             WEBP_DEMUX_ABI_VERSION);",
          "271: }",
          "275:     const WebPData*, const WebPAnimDecoderOptions*, int);",
          "",
          "[Removed Lines]",
          "260: WEBP_EXTERN int WebPAnimDecoderOptionsInitInternal(",
          "267: static WEBP_INLINE int WebPAnimDecoderOptionsInit(",
          "274: WEBP_EXTERN WebPAnimDecoder* WebPAnimDecoderNewInternal(",
          "",
          "[Added Lines]",
          "262: WEBP_NODISCARD WEBP_EXTERN int WebPAnimDecoderOptionsInitInternal(",
          "269: WEBP_NODISCARD static WEBP_INLINE int WebPAnimDecoderOptionsInit(",
          "276: WEBP_NODISCARD WEBP_EXTERN WebPAnimDecoder* WebPAnimDecoderNewInternal(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "288:     const WebPData* webp_data, const WebPAnimDecoderOptions* dec_options) {",
          "289:   return WebPAnimDecoderNewInternal(webp_data, dec_options,",
          "290:                                     WEBP_DEMUX_ABI_VERSION);",
          "",
          "[Removed Lines]",
          "287: static WEBP_INLINE WebPAnimDecoder* WebPAnimDecoderNew(",
          "",
          "[Added Lines]",
          "289: WEBP_NODISCARD static WEBP_INLINE WebPAnimDecoder* WebPAnimDecoderNew(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "309: WEBP_EXTERN int WebPAnimDecoderGetInfo(const WebPAnimDecoder* dec,",
          "310:                                        WebPAnimInfo* info);",
          "",
          "[Added Lines]",
          "311: WEBP_NODISCARD WEBP_EXTERN int WebPAnimDecoderGetInfo(",
          "312:     const WebPAnimDecoder* dec, WebPAnimInfo* info);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "324: WEBP_EXTERN int WebPAnimDecoderGetNext(WebPAnimDecoder* dec,",
          "325:                                        uint8_t** buf, int* timestamp);",
          "",
          "[Added Lines]",
          "326: WEBP_NODISCARD WEBP_EXTERN int WebPAnimDecoderGetNext(WebPAnimDecoder* dec,",
          "327:                                                       uint8_t** buf,",
          "328:                                                       int* timestamp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "333: WEBP_EXTERN int WebPAnimDecoderHasMoreFrames(const WebPAnimDecoder* dec);",
          "",
          "[Added Lines]",
          "336: WEBP_NODISCARD WEBP_EXTERN int WebPAnimDecoderHasMoreFrames(",
          "337:     const WebPAnimDecoder* dec);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "352:     const WebPAnimDecoder* dec);",
          "",
          "[Removed Lines]",
          "351: WEBP_EXTERN const WebPDemuxer* WebPAnimDecoderGetDemuxer(",
          "",
          "[Added Lines]",
          "355: WEBP_NODISCARD WEBP_EXTERN const WebPDemuxer* WebPAnimDecoderGetDemuxer(",
          "",
          "---------------"
        ],
        "src/webp/encode.h||src/webp/encode.h": [
          "File: src/webp/encode.h -> src/webp/encode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: } WebPPreset;",
          "174:   return WebPConfigInitInternal(config, WEBP_PRESET_DEFAULT, 75.f,",
          "175:                                 WEBP_ENCODER_ABI_VERSION);",
          "176: }",
          "",
          "[Removed Lines]",
          "167: WEBP_EXTERN int WebPConfigInitInternal(WebPConfig*, WebPPreset, float, int);",
          "173: static WEBP_INLINE int WebPConfigInit(WebPConfig* config) {",
          "",
          "[Added Lines]",
          "167: WEBP_NODISCARD WEBP_EXTERN int WebPConfigInitInternal(WebPConfig*, WebPPreset,",
          "168:                                                       float, int);",
          "174: WEBP_NODISCARD static WEBP_INLINE int WebPConfigInit(WebPConfig* config) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   return WebPConfigInitInternal(config, preset, quality,",
          "185:                                 WEBP_ENCODER_ABI_VERSION);",
          "186: }",
          "",
          "[Removed Lines]",
          "182: static WEBP_INLINE int WebPConfigPreset(WebPConfig* config,",
          "183:                                         WebPPreset preset, float quality) {",
          "",
          "[Added Lines]",
          "183: WEBP_NODISCARD static WEBP_INLINE int WebPConfigPreset(WebPConfig* config,",
          "184:                                                        WebPPreset preset,",
          "185:                                                        float quality) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "194: WEBP_EXTERN int WebPConfigLosslessPreset(WebPConfig* config, int level);",
          "198: WEBP_EXTERN int WebPValidateConfig(const WebPConfig* config);",
          "",
          "[Added Lines]",
          "196: WEBP_NODISCARD WEBP_EXTERN int WebPConfigLosslessPreset(WebPConfig* config,",
          "197:                                                         int level);",
          "201: WEBP_NODISCARD WEBP_EXTERN int WebPValidateConfig(const WebPConfig* config);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "258: WEBP_EXTERN int WebPMemoryWrite(const uint8_t* data, size_t data_size,",
          "259:                                 const WebPPicture* picture);",
          "",
          "[Added Lines]",
          "261: WEBP_NODISCARD WEBP_EXTERN int WebPMemoryWrite(",
          "262:     const uint8_t* data, size_t data_size, const WebPPicture* picture);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "364: };",
          "374:   return WebPPictureInitInternal(picture, WEBP_ENCODER_ABI_VERSION);",
          "375: }",
          "",
          "[Removed Lines]",
          "367: WEBP_EXTERN int WebPPictureInitInternal(WebPPicture*, int);",
          "373: static WEBP_INLINE int WebPPictureInit(WebPPicture* picture) {",
          "",
          "[Added Lines]",
          "370: WEBP_NODISCARD WEBP_EXTERN int WebPPictureInitInternal(WebPPicture*, int);",
          "376: WEBP_NODISCARD static WEBP_INLINE int WebPPictureInit(WebPPicture* picture) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "384: WEBP_EXTERN int WebPPictureAlloc(WebPPicture* picture);",
          "",
          "[Added Lines]",
          "387: WEBP_NODISCARD WEBP_EXTERN int WebPPictureAlloc(WebPPicture* picture);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "397: WEBP_EXTERN int WebPPictureCopy(const WebPPicture* src, WebPPicture* dst);",
          "",
          "[Added Lines]",
          "400: WEBP_NODISCARD WEBP_EXTERN int WebPPictureCopy(const WebPPicture* src,",
          "401:                                                WebPPicture* dst);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "419:     const WebPPicture* src, const WebPPicture* ref,",
          "420:     int metric_type,           // 0 = PSNR, 1 = SSIM, 2 = LSIM",
          "421:     float result[5]);",
          "",
          "[Removed Lines]",
          "406: WEBP_EXTERN int WebPPlaneDistortion(const uint8_t* src, size_t src_stride,",
          "407:                                     const uint8_t* ref, size_t ref_stride,",
          "408:                                     int width, int height,",
          "409:                                     size_t x_step,",
          "410:                                     int type,   // 0 = PSNR, 1 = SSIM, 2 = LSIM",
          "411:                                     float* distortion, float* result);",
          "418: WEBP_EXTERN int WebPPictureDistortion(",
          "",
          "[Added Lines]",
          "410: WEBP_NODISCARD WEBP_EXTERN int WebPPlaneDistortion(",
          "411:     const uint8_t* src, size_t src_stride,",
          "412:     const uint8_t* ref, size_t ref_stride, int width, int height, size_t x_step,",
          "413:     int type,  // 0 = PSNR, 1 = SSIM, 2 = LSIM",
          "414:     float* distortion, float* result);",
          "421: WEBP_NODISCARD WEBP_EXTERN int WebPPictureDistortion(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "431: WEBP_EXTERN int WebPPictureCrop(WebPPicture* picture,",
          "432:                                 int left, int top, int width, int height);",
          "",
          "[Added Lines]",
          "434: WEBP_NODISCARD WEBP_EXTERN int WebPPictureCrop(",
          "435:     WebPPicture* picture, int left, int top, int width, int height);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "445: WEBP_EXTERN int WebPPictureView(const WebPPicture* src,",
          "446:                                 int left, int top, int width, int height,",
          "447:                                 WebPPicture* dst);",
          "",
          "[Added Lines]",
          "448: WEBP_NODISCARD WEBP_EXTERN int WebPPictureView(",
          "449:     const WebPPicture* src, int left, int top, int width, int height,",
          "450:     WebPPicture* dst);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "465:     WebPPicture* picture, const uint8_t* rgb, int rgb_stride);",
          "468:     WebPPicture* picture, const uint8_t* rgba, int rgba_stride);",
          "473:     WebPPicture* picture, const uint8_t* rgbx, int rgbx_stride);",
          "477:     WebPPicture* picture, const uint8_t* bgr, int bgr_stride);",
          "479:     WebPPicture* picture, const uint8_t* bgra, int bgra_stride);",
          "481:     WebPPicture* picture, const uint8_t* bgrx, int bgrx_stride);",
          "",
          "[Removed Lines]",
          "458: WEBP_EXTERN int WebPPictureRescale(WebPPicture* picture, int width, int height);",
          "464: WEBP_EXTERN int WebPPictureImportRGB(",
          "467: WEBP_EXTERN int WebPPictureImportRGBA(",
          "472: WEBP_EXTERN int WebPPictureImportRGBX(",
          "476: WEBP_EXTERN int WebPPictureImportBGR(",
          "478: WEBP_EXTERN int WebPPictureImportBGRA(",
          "480: WEBP_EXTERN int WebPPictureImportBGRX(",
          "",
          "[Added Lines]",
          "461: WEBP_NODISCARD WEBP_EXTERN int WebPPictureRescale(WebPPicture* picture,",
          "462:                                                   int width, int height);",
          "468: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportRGB(",
          "471: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportRGBA(",
          "476: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportRGBX(",
          "480: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportBGR(",
          "482: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportBGRA(",
          "484: WEBP_NODISCARD WEBP_EXTERN int WebPPictureImportBGRX(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "497:     WebPPicture* picture, WebPEncCSP colorspace, float dithering);",
          "",
          "[Removed Lines]",
          "489: WEBP_EXTERN int WebPPictureARGBToYUVA(WebPPicture* picture,",
          "490:                                       WebPEncCSP /*colorspace = WEBP_YUV420*/);",
          "496: WEBP_EXTERN int WebPPictureARGBToYUVADithered(",
          "504: WEBP_EXTERN int WebPPictureSharpARGBToYUVA(WebPPicture* picture);",
          "506: WEBP_EXTERN int WebPPictureSmartARGBToYUVA(WebPPicture* picture);",
          "",
          "[Added Lines]",
          "493: WEBP_NODISCARD WEBP_EXTERN int WebPPictureARGBToYUVA(",
          "494:     WebPPicture* picture, WebPEncCSP /*colorspace = WEBP_YUV420*/);",
          "500: WEBP_NODISCARD WEBP_EXTERN int WebPPictureARGBToYUVADithered(",
          "508: WEBP_NODISCARD WEBP_EXTERN int WebPPictureSharpARGBToYUVA(WebPPicture* picture);",
          "510: WEBP_NODISCARD WEBP_EXTERN int WebPPictureSmartARGBToYUVA(WebPPicture* picture);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "514: WEBP_EXTERN int WebPPictureYUVAToARGB(WebPPicture* picture);",
          "",
          "[Added Lines]",
          "518: WEBP_NODISCARD WEBP_EXTERN int WebPPictureYUVAToARGB(WebPPicture* picture);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "544: WEBP_EXTERN int WebPEncode(const WebPConfig* config, WebPPicture* picture);",
          "",
          "[Added Lines]",
          "548: WEBP_NODISCARD WEBP_EXTERN int WebPEncode(const WebPConfig* config,",
          "549:                                           WebPPicture* picture);",
          "",
          "---------------"
        ],
        "src/webp/mux.h||src/webp/mux.h": [
          "File: src/webp/mux.h -> src/webp/mux.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define WEBP_WEBP_MUX_H_",
          "18: #include \"./mux_types.h\"",
          "20: #ifdef __cplusplus",
          "21: extern \"C\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"./types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: typedef struct WebPAnimEncoderOptions WebPAnimEncoderOptions;",
          "74:   WEBP_MUX_OK                 =  1,",
          "75:   WEBP_MUX_NOT_FOUND          =  0,",
          "76:   WEBP_MUX_INVALID_ARGUMENT   = -1,",
          "",
          "[Removed Lines]",
          "73: typedef enum WebPMuxError {",
          "",
          "[Added Lines]",
          "74: typedef enum WEBP_NODISCARD WebPMuxError {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:   return WebPNewInternal(WEBP_MUX_ABI_VERSION);",
          "115: }",
          "",
          "[Removed Lines]",
          "107: WEBP_EXTERN WebPMux* WebPNewInternal(int);",
          "113: static WEBP_INLINE WebPMux* WebPMuxNew(void) {",
          "",
          "[Added Lines]",
          "108: WEBP_NODISCARD WEBP_EXTERN WebPMux* WebPNewInternal(int);",
          "114: WEBP_NODISCARD static WEBP_INLINE WebPMux* WebPMuxNew(void) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "126: WEBP_EXTERN WebPMux* WebPMuxCreateInternal(const WebPData*, int, int);",
          "",
          "[Added Lines]",
          "127: WEBP_NODISCARD WEBP_EXTERN WebPMux* WebPMuxCreateInternal(const WebPData*, int,",
          "128:                                                           int);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:   return WebPMuxCreateInternal(bitstream, copy_data, WEBP_MUX_ABI_VERSION);",
          "139: }",
          "",
          "[Removed Lines]",
          "136: static WEBP_INLINE WebPMux* WebPMuxCreate(const WebPData* bitstream,",
          "137:                                           int copy_data) {",
          "",
          "[Added Lines]",
          "138: WEBP_NODISCARD static WEBP_INLINE WebPMux* WebPMuxCreate(",
          "139:     const WebPData* bitstream, int copy_data) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "453:     WebPAnimEncoderOptions* enc_options) {",
          "454:   return WebPAnimEncoderOptionsInitInternal(enc_options, WEBP_MUX_ABI_VERSION);",
          "455: }",
          "",
          "[Removed Lines]",
          "452: static WEBP_INLINE int WebPAnimEncoderOptionsInit(",
          "",
          "[Added Lines]",
          "454: WEBP_NODISCARD static WEBP_INLINE int WebPAnimEncoderOptionsInit(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494:     WebPAnimEncoder* enc, struct WebPPicture* frame, int timestamp_ms,",
          "495:     const struct WebPConfig* config);",
          "",
          "[Removed Lines]",
          "493: WEBP_EXTERN int WebPAnimEncoderAdd(",
          "",
          "[Added Lines]",
          "495: WEBP_NODISCARD WEBP_EXTERN int WebPAnimEncoderAdd(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "506: WEBP_EXTERN int WebPAnimEncoderAssemble(WebPAnimEncoder* enc,",
          "507:                                         WebPData* webp_data);",
          "",
          "[Added Lines]",
          "508: WEBP_NODISCARD WEBP_EXTERN int WebPAnimEncoderAssemble(WebPAnimEncoder* enc,",
          "509:                                                        WebPData* webp_data);",
          "",
          "---------------"
        ],
        "src/webp/mux_types.h||src/webp/mux_types.h": [
          "File: src/webp/mux_types.h -> src/webp/mux_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   if (src == NULL || dst == NULL) return 0;",
          "84:   WebPDataInit(dst);",
          "85:   if (src->bytes != NULL && src->size != 0) {",
          "",
          "[Removed Lines]",
          "82: static WEBP_INLINE int WebPDataCopy(const WebPData* src, WebPData* dst) {",
          "",
          "[Added Lines]",
          "82: WEBP_NODISCARD static WEBP_INLINE int WebPDataCopy(const WebPData* src,",
          "83:                                                    WebPData* dst) {",
          "",
          "---------------"
        ],
        "src/webp/types.h||src/webp/types.h": [
          "File: src/webp/types.h -> src/webp/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define WEBP_INLINE __forceinline",
          "39: #ifndef WEBP_EXTERN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #if defined(WEBP_ENABLE_NODISCARD) ||                   \\",
          "40:     (defined(__cplusplus) && __cplusplus >= 201700L) || \\",
          "41:     (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 202311L)",
          "42: #define WEBP_NODISCARD [[nodiscard]]",
          "43: #else",
          "45: #if defined(__clang__) && defined(__has_attribute)",
          "46: #if __has_attribute(warn_unused_result)",
          "47: #define WEBP_NODISCARD __attribute__((warn_unused_result))",
          "48: #else",
          "49: #define WEBP_NODISCARD",
          "50: #endif",
          "51: #else",
          "52: #define WEBP_NODISCARD",
          "53: #endif",
          "54: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: WEBP_EXTERN void WebPFree(void* ptr);",
          "",
          "[Removed Lines]",
          "63: WEBP_EXTERN void* WebPMalloc(size_t size);",
          "",
          "[Added Lines]",
          "80: WEBP_NODISCARD WEBP_EXTERN void* WebPMalloc(size_t size);",
          "",
          "---------------"
        ],
        "tests/fuzzer/advanced_api_fuzzer.c||tests/fuzzer/advanced_api_fuzzer.c": [
          "File: tests/fuzzer/advanced_api_fuzzer.c -> tests/fuzzer/advanced_api_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:       }",
          "131:       WebPIDelete(idec);",
          "132:     } else {",
          "134:     }",
          "136:     WebPFreeDecBuffer(&config.output);",
          "",
          "[Removed Lines]",
          "133:       WebPDecode(data, size, &config);",
          "",
          "[Added Lines]",
          "133:       (void)WebPDecode(data, size, &config);",
          "",
          "---------------"
        ],
        "tests/fuzzer/huffman_fuzzer.c||tests/fuzzer/huffman_fuzzer.c": [
          "File: tests/fuzzer/huffman_fuzzer.c -> tests/fuzzer/huffman_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   if (num_htree_groups == 0) goto Error;",
          "54:   const int num_htree_groups_max = num_htree_groups;",
          "59:  Error:",
          "60:   WebPSafeFree(mapping);",
          "",
          "[Removed Lines]",
          "55:   ReadHuffmanCodesHelper(color_cache_bits, num_htree_groups,",
          "56:                          num_htree_groups_max, mapping, dec, &huffman_tables,",
          "57:                          &htree_groups);",
          "",
          "[Added Lines]",
          "55:   (void)ReadHuffmanCodesHelper(color_cache_bits, num_htree_groups,",
          "56:                                num_htree_groups_max, mapping, dec,",
          "57:                                &huffman_tables, &htree_groups);",
          "",
          "---------------"
        ],
        "tests/fuzzer/mux_demux_api_fuzzer.c||tests/fuzzer/mux_demux_api_fuzzer.c": [
          "File: tests/fuzzer/mux_demux_api_fuzzer.c -> tests/fuzzer/mux_demux_api_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     if (!mux) return 0;",
          "35:     WebPData chunk;",
          "40:     uint32_t flags;",
          "43:     WebPMuxAnimParams params;",
          "46:     WebPMuxError status;",
          "47:     WebPMuxFrameInfo info;",
          "",
          "[Removed Lines]",
          "36:     WebPMuxGetChunk(mux, \"EXIF\", &chunk);",
          "37:     WebPMuxGetChunk(mux, \"ICCP\", &chunk);",
          "38:     WebPMuxGetChunk(mux, \"FUZZ\", &chunk);  // unknown",
          "41:     WebPMuxGetFeatures(mux, &flags);",
          "44:     WebPMuxGetAnimationParams(mux, &params);",
          "",
          "[Added Lines]",
          "36:     (void)WebPMuxGetChunk(mux, \"EXIF\", &chunk);",
          "37:     (void)WebPMuxGetChunk(mux, \"ICCP\", &chunk);",
          "38:     (void)WebPMuxGetChunk(mux, \"FUZZ\", &chunk);  // unknown",
          "41:     (void)WebPMuxGetFeatures(mux, &flags);",
          "44:     (void)WebPMuxGetAnimationParams(mux, &params);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     WebPChunkIterator chunk_iter;",
          "74:     if (WebPDemuxGetChunk(demux, \"EXIF\", 1, &chunk_iter)) {",
          "76:     }",
          "77:     WebPDemuxReleaseChunkIterator(&chunk_iter);",
          "78:     if (WebPDemuxGetChunk(demux, \"ICCP\", 0, &chunk_iter)) {  // 0 == last",
          "80:     }",
          "81:     WebPDemuxReleaseChunkIterator(&chunk_iter);",
          "",
          "[Removed Lines]",
          "75:       WebPDemuxNextChunk(&chunk_iter);",
          "79:       WebPDemuxPrevChunk(&chunk_iter);",
          "",
          "[Added Lines]",
          "75:       (void)WebPDemuxNextChunk(&chunk_iter);",
          "79:       (void)WebPDemuxPrevChunk(&chunk_iter);",
          "",
          "---------------"
        ],
        "tests/fuzzer/simple_api_fuzzer.c||tests/fuzzer/simple_api_fuzzer.c": [
          "File: tests/fuzzer/simple_api_fuzzer.c -> tests/fuzzer/simple_api_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     if (value % 0x10 == 0) buf_size--;",
          "50:     uint8_t* const ext_buf = (uint8_t*)malloc(buf_size);",
          "51:     if (value < 0x94) {",
          "53: #if !defined(WEBP_REDUCE_CSP)",
          "54:     } else if (value < 0xa9) {",
          "56:     } else if (value < 0xbe) {",
          "58:     } else if (value < 0xd3) {",
          "60: #endif  // !defined(WEBP_REDUCE_CSP)",
          "61:     } else {",
          "63:     }",
          "64:     free(ext_buf);",
          "65:   } else {",
          "",
          "[Removed Lines]",
          "52:       WebPDecodeRGBAInto(data, size, ext_buf, buf_size, stride);",
          "55:       WebPDecodeARGBInto(data, size, ext_buf, buf_size, stride);",
          "57:       WebPDecodeBGRInto(data, size, ext_buf, buf_size, stride);",
          "59:       WebPDecodeRGBInto(data, size, ext_buf, buf_size, stride);",
          "62:       WebPDecodeBGRAInto(data, size, ext_buf, buf_size, stride);",
          "",
          "[Added Lines]",
          "52:       (void)WebPDecodeRGBAInto(data, size, ext_buf, buf_size, stride);",
          "55:       (void)WebPDecodeARGBInto(data, size, ext_buf, buf_size, stride);",
          "57:       (void)WebPDecodeBGRInto(data, size, ext_buf, buf_size, stride);",
          "59:       (void)WebPDecodeRGBInto(data, size, ext_buf, buf_size, stride);",
          "62:       (void)WebPDecodeBGRAInto(data, size, ext_buf, buf_size, stride);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     uint8_t* const luma_buf = (uint8_t*)malloc(luma_size);",
          "76:     uint8_t* const u_buf = (uint8_t*)malloc(u_size);",
          "77:     uint8_t* const v_buf = (uint8_t*)malloc(v_size);",
          "80:     free(luma_buf);",
          "81:     free(u_buf);",
          "82:     free(v_buf);",
          "",
          "[Removed Lines]",
          "78:     WebPDecodeYUVInto(data, size, luma_buf, luma_size, w /* luma_stride */,",
          "79:                       u_buf, u_size, uv_stride, v_buf, v_size, uv_stride);",
          "",
          "[Added Lines]",
          "78:     (void)WebPDecodeYUVInto(data, size, luma_buf, luma_size,",
          "79:                             w /* luma_stride */, u_buf, u_size, uv_stride,",
          "80:                             v_buf, v_size, uv_stride);",
          "",
          "---------------"
        ]
      }
    }
  ]
}