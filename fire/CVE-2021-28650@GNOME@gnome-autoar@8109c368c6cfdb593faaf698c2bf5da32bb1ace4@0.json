{
  "cve_id": "CVE-2021-28650",
  "cve_desc": "autoar-extractor.c in GNOME gnome-autoar before 0.3.1, as used by GNOME Shell, Nautilus, and other software, allows Directory Traversal during extraction because it lacks a check of whether a file's parent is a symlink in certain complex situations. NOTE: this issue exists because of an incomplete fix for CVE-2020-36241.",
  "repo": "GNOME/gnome-autoar",
  "patch_hash": "8109c368c6cfdb593faaf698c2bf5da32bb1ace4",
  "patch_info": {
    "commit_hash": "8109c368c6cfdb593faaf698c2bf5da32bb1ace4",
    "repo": "GNOME/gnome-autoar",
    "commit_url": "https://gitlab.gnome.org/GNOME/gnome-autoar/-/commit/8109c368c6cfdb593faaf698c2bf5da32bb1ace4",
    "files": [
      "gnome-autoar/autoar-extractor.c"
    ],
    "message": "extractor: Do not allow symlink in parents\n\nCurrently, it is still possible that some files are extracted outside of\nthe destination dir in case of malicious archives. The checks from commit\nadb067e6 can be still bypassed in certain cases. See GNOME/file-roller#108\nfor more details. After some investigation, I am convinced that it would be\nbest to\tsimply disallow symlinks in parents. For example, `tar` fails to\nextract such files with the `ENOTDIR` error. Let's do the same here.\n\nFixes: https://gitlab.gnome.org/GNOME/gnome-autoar/-/issues/12",
    "before_after_code_files": [
      "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
    ]
  },
  "patch_diff": {
    "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
      "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "921:   return extracted_filename;",
      "922: }",
      "926:                                       mode_t  extracted_filetype)",
      "927: {",
      "928:   GFileType file_type;",
      "930:   file_type = g_file_query_file_type (file,",
      "931:                                       G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
      "932:                                       NULL);",
      "936:   }",
      "942:   }",
      "945: }",
      "947: static void",
      "",
      "[Removed Lines]",
      "924: static gboolean",
      "925: autoar_extractor_check_file_conflict (GFile  *file,",
      "934:   if (file_type == G_FILE_TYPE_UNKNOWN) {",
      "935:     return FALSE;",
      "939:   if (file_type == G_FILE_TYPE_DIRECTORY &&",
      "940:       extracted_filetype == AE_IFDIR) {",
      "941:     return FALSE;",
      "944:   return TRUE;",
      "",
      "[Added Lines]",
      "931: static GFile *",
      "932: autoar_extractor_check_file_conflict (AutoarExtractor *self,",
      "933:                                       GFile  *file,",
      "937:   g_autoptr (GFile) parent = NULL;",
      "946:   if (file_type != G_FILE_TYPE_UNKNOWN &&",
      "947:       (file_type != G_FILE_TYPE_DIRECTORY ||",
      "948:        extracted_filetype != AE_IFDIR)) {",
      "949:     return g_object_ref (file);",
      "952:   if ((self->new_prefix && g_file_equal (self->new_prefix, file)) ||",
      "953:       (!self->new_prefix && g_file_equal (self->destination_dir, file))) {",
      "954:     return NULL;",
      "958:   parent = g_file_get_parent (file);",
      "959:   return autoar_extractor_check_file_conflict (self, parent, AE_IFDIR);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1864:     g_autoptr (GFile) extracted_filename = NULL;",
      "1865:     g_autoptr (GFile) hardlink_filename = NULL;",
      "1866:     AutoarConflictAction action;",
      "1869:     if (g_cancellable_is_cancelled (self->cancellable)) {",
      "1870:       archive_read_free (a);",
      "",
      "[Removed Lines]",
      "1867:     gboolean file_conflict;",
      "",
      "[Added Lines]",
      "1882:     g_autoptr (GFile) file_conflict = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1883:     }",
      "1887:                                                           archive_entry_filetype (entry));",
      "1888:     while (file_conflict) {",
      "1889:       GFile *new_extracted_filename = NULL;",
      "1891:       action = autoar_extractor_signal_conflict (self,",
      "1892:                                                  extracted_filename,",
      "1893:                                                  &new_extracted_filename);",
      "",
      "[Removed Lines]",
      "1886:     file_conflict = autoar_extractor_check_file_conflict (extracted_filename,",
      "",
      "[Added Lines]",
      "1901:     file_conflict = autoar_extractor_check_file_conflict (self,",
      "1902:                                                           extracted_filename,",
      "1914:       if (!g_file_equal (file_conflict, extracted_filename)) {",
      "1915:         self->error = g_error_new (G_IO_ERROR,",
      "1916:                                    G_IO_ERROR_NOT_DIRECTORY,",
      "1917:                                    \"The file is not a directory\");",
      "1918:         archive_read_free (a);",
      "1919:         return;",
      "1920:       }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1923:         break;",
      "1924:       }",
      "1927:                                                             archive_entry_filetype (entry));",
      "1928:     }",
      "",
      "[Removed Lines]",
      "1926:       file_conflict = autoar_extractor_check_file_conflict (extracted_filename,",
      "",
      "[Added Lines]",
      "1957:       g_clear_object (&file_conflict);",
      "1958:       file_conflict = autoar_extractor_check_file_conflict (self,",
      "1959:                                                             extracted_filename,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c4b0b9c9b6522058dc43ee817b0e0bbd1f030617",
      "candidate_info": {
        "commit_hash": "c4b0b9c9b6522058dc43ee817b0e0bbd1f030617",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/c4b0b9c9b6522058dc43ee817b0e0bbd1f030617",
        "files": [
          "gnome-autoar/autoar-extractor.c"
        ],
        "message": "extractor: Do not follow symlinks when detecting conflicts\n\nCurrently, symlinks are followed when detecting conflicts. But this\nis not desired as the original file caused the conflict, not its target.",
        "before_after_code_files": [
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   GFileType file_type;",
          "968:   file_type = g_file_query_file_type (file,",
          "970:                                       NULL);",
          "972:   if (file_type == G_FILE_TYPE_UNKNOWN) {",
          "",
          "[Removed Lines]",
          "969:                                       G_FILE_QUERY_INFO_NONE,",
          "",
          "[Added Lines]",
          "969:                                       G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
          "",
          "---------------"
        ]
      }
    }
  ]
}