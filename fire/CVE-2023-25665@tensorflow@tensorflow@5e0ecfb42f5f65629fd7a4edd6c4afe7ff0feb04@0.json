{
  "cve_id": "CVE-2023-25665",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, when `SparseSparseMaximum` is given invalid sparse tensors as inputs, it can give a null pointer error. A fix is included in TensorFlow version 2.12 and version 2.11.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04",
  "patch_info": {
    "commit_hash": "5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04",
    "files": [
      "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ],
    "message": "Add validation checks in sparse binary ops.\n\nFixes a nullptr security vulnerability.\n\nPiperOrigin-RevId: 503501621",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc": [
      "File: tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc -> tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #include \"tensorflow/core/framework/types.h\"",
      "42: #include \"tensorflow/core/kernels/cwise_ops.h\"",
      "43: #include \"tensorflow/core/kernels/cwise_ops_common.h\"",
      "44: #include \"tensorflow/core/util/sparse/sparse_tensor.h\"",
      "46: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include \"tensorflow/core/kernels/sparse_utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:     OP_REQUIRES_OK(ctx, ctx->input(\"b_shape\", &b_shape_t));",
      "151:     const int64_t a_nnz = a_indices_t->dim_size(0);",
      "152:     const int64_t b_nnz = b_indices_t->dim_size(0);",
      "",
      "[Removed Lines]",
      "134:     OP_REQUIRES(",
      "135:         ctx,",
      "136:         TensorShapeUtils::IsMatrix(a_indices_t->shape()) &&",
      "137:             TensorShapeUtils::IsMatrix(b_indices_t->shape()),",
      "138:         errors::InvalidArgument(\"Inputs a_indices and b_indices should be \"",
      "139:                                 \"matrices but received shapes: \",",
      "140:                                 a_indices_t->shape().DebugString(), \", \",",
      "141:                                 b_indices_t->shape().DebugString()));",
      "142:     OP_REQUIRES(ctx,",
      "143:                 TensorShapeUtils::IsVector(a_values_t->shape()) &&",
      "144:                     TensorShapeUtils::IsVector(b_values_t->shape()),",
      "145:                 errors::InvalidArgument(",
      "146:                     \"Inputs a_values and b_values should be vectors \"",
      "147:                     \"but received shapes: \",",
      "148:                     a_values_t->shape().DebugString(), \" and \",",
      "149:                     b_values_t->shape().DebugString()));",
      "",
      "[Added Lines]",
      "135:     OP_REQUIRES_OK(ctx, sparse_utils::ValidateSparseTensor<int64_t>(",
      "137:                             sparse_utils::IndexValidation::kUnordered));",
      "138:     OP_REQUIRES_OK(ctx, sparse_utils::ValidateSparseTensor<int64_t>(",
      "140:                             sparse_utils::IndexValidation::kUnordered));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "154:     const auto a_values = a_values_t->vec<T>();",
      "155:     const auto b_values = b_values_t->vec<T>();",
      "170:     const int num_dims = a_indices_t->dim_size(1);",
      "176:     OP_REQUIRES(ctx, num_dims > 0,",
      "177:                 errors::InvalidArgument(\"Tensors must not be empty\"));",
      "178:     OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),",
      "",
      "[Removed Lines]",
      "157:     OP_REQUIRES(",
      "158:         ctx, a_values.size() == a_nnz && b_values.size() == b_nnz,",
      "159:         errors::InvalidArgument(\"Expected \", a_nnz, \" and \", b_nnz,",
      "160:                                 \" non-empty input values, got \",",
      "161:                                 a_values.size(), \" and \", b_values.size()));",
      "163:     OP_REQUIRES(ctx,",
      "164:                 TensorShapeUtils::IsVector(a_shape_t->shape()) &&",
      "165:                     TensorShapeUtils::IsVector(b_shape_t->shape()),",
      "166:                 errors::InvalidArgument(",
      "167:                     \"Input shapes should be a vector but received shapes \",",
      "168:                     a_shape_t->shape().DebugString(), \" and \",",
      "169:                     b_shape_t->shape().DebugString()));",
      "171:     OP_REQUIRES(",
      "172:         ctx, a_shape_t->NumElements() == num_dims,",
      "173:         errors::InvalidArgument(\"Second dimension of a_indices and length of \"",
      "174:                                 \"a_shape must match, got \",",
      "175:                                 num_dims, \" and \", a_shape_t->NumElements()));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192:     const auto a_indices_mat = a_indices_t->matrix<int64_t>();",
      "193:     const auto b_indices_mat = b_indices_t->matrix<int64_t>();",
      "194:     std::vector<T> a_augmented_values, b_augmented_values;",
      "196:     UnionSparseIndicesAndValues(a_indices_mat, a_values, a_nnz, b_indices_mat,",
      "197:                                 b_values, b_nnz, num_dims, &a_augmented_values,",
      "198:                                 &b_augmented_values, &entries_to_copy);",
      "",
      "[Removed Lines]",
      "195:     std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx",
      "",
      "[Added Lines]",
      "168:     std::vector<std::pair<bool, int64_t>> entries_to_copy;  // from_a?, idx",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
      "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: from tensorflow.python.framework import tensor_spec",
      "27: from tensorflow.python.framework import test_util",
      "28: from tensorflow.python.ops import array_ops",
      "29: from tensorflow.python.ops import gradient_checker",
      "30: from tensorflow.python.ops import nn_ops",
      "31: from tensorflow.python.ops import sparse_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: from tensorflow.python.ops import gen_sparse_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1175:       self._assertSparseTensorValueEqual(expected, max_tf)",
      "1176:       self._assertSparseTensorValueEqual(expected, min_tf)",
      "1178:   @test_util.run_deprecated_v1",
      "1179:   def testRandom(self):",
      "1180:     np.random.seed(1618)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1179:   def testInvalidSparseInputs(self):",
      "1180:     with test_util.force_cpu():",
      "1181:       with self.assertRaisesRegex(",
      "1182:           (ValueError, errors.InvalidArgumentError),",
      "1183:           \".*Index rank .* and shape rank .* do not match.*\",",
      "1184:       ):",
      "1185:         self.evaluate(",
      "1186:             gen_sparse_ops.sparse_sparse_maximum(",
      "1187:                 [[1]], [0], [2], [[]], [1], [2]",
      "1188:             )",
      "1189:         )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32023b8a610c2371e3d90764a91d0e85cd000e05",
      "candidate_info": {
        "commit_hash": "32023b8a610c2371e3d90764a91d0e85cd000e05",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/32023b8a610c2371e3d90764a91d0e85cd000e05",
        "files": [
          "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Add validation checks in sparse binary ops. (#59426)\n\nFixes a nullptr security vulnerability.\n\nPiperOrigin-RevId: 503501621",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc||tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc": [
          "File: tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc -> tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"tensorflow/core/framework/types.h\"",
          "42: #include \"tensorflow/core/kernels/cwise_ops.h\"",
          "43: #include \"tensorflow/core/kernels/cwise_ops_common.h\"",
          "44: #include \"tensorflow/core/util/sparse/sparse_tensor.h\"",
          "46: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"tensorflow/core/kernels/sparse_utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     OP_REQUIRES_OK(ctx, ctx->input(\"b_shape\", &b_shape_t));",
          "151:     const int64_t a_nnz = a_indices_t->dim_size(0);",
          "152:     const int64_t b_nnz = b_indices_t->dim_size(0);",
          "",
          "[Removed Lines]",
          "134:     OP_REQUIRES(",
          "135:         ctx,",
          "136:         TensorShapeUtils::IsMatrix(a_indices_t->shape()) &&",
          "137:             TensorShapeUtils::IsMatrix(b_indices_t->shape()),",
          "138:         errors::InvalidArgument(\"Inputs a_indices and b_indices should be \"",
          "139:                                 \"matrices but received shapes: \",",
          "140:                                 a_indices_t->shape().DebugString(), \", \",",
          "141:                                 b_indices_t->shape().DebugString()));",
          "142:     OP_REQUIRES(ctx,",
          "143:                 TensorShapeUtils::IsVector(a_values_t->shape()) &&",
          "144:                     TensorShapeUtils::IsVector(b_values_t->shape()),",
          "145:                 errors::InvalidArgument(",
          "146:                     \"Inputs a_values and b_values should be vectors \"",
          "147:                     \"but received shapes: \",",
          "148:                     a_values_t->shape().DebugString(), \" and \",",
          "149:                     b_values_t->shape().DebugString()));",
          "",
          "[Added Lines]",
          "135:     OP_REQUIRES_OK(ctx, sparse_utils::ValidateSparseTensor<int64_t>(",
          "137:                             sparse_utils::IndexValidation::kUnordered));",
          "138:     OP_REQUIRES_OK(ctx, sparse_utils::ValidateSparseTensor<int64_t>(",
          "140:                             sparse_utils::IndexValidation::kUnordered));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:     const auto a_values = a_values_t->vec<T>();",
          "155:     const auto b_values = b_values_t->vec<T>();",
          "170:     const int num_dims = a_indices_t->dim_size(1);",
          "176:     OP_REQUIRES(ctx, num_dims > 0,",
          "177:                 errors::InvalidArgument(\"Tensors must not be empty\"));",
          "178:     OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),",
          "",
          "[Removed Lines]",
          "157:     OP_REQUIRES(",
          "158:         ctx, a_values.size() == a_nnz && b_values.size() == b_nnz,",
          "159:         errors::InvalidArgument(\"Expected \", a_nnz, \" and \", b_nnz,",
          "160:                                 \" non-empty input values, got \",",
          "161:                                 a_values.size(), \" and \", b_values.size()));",
          "163:     OP_REQUIRES(ctx,",
          "164:                 TensorShapeUtils::IsVector(a_shape_t->shape()) &&",
          "165:                     TensorShapeUtils::IsVector(b_shape_t->shape()),",
          "166:                 errors::InvalidArgument(",
          "167:                     \"Input shapes should be a vector but received shapes \",",
          "168:                     a_shape_t->shape().DebugString(), \" and \",",
          "169:                     b_shape_t->shape().DebugString()));",
          "171:     OP_REQUIRES(",
          "172:         ctx, a_shape_t->NumElements() == num_dims,",
          "173:         errors::InvalidArgument(\"Second dimension of a_indices and length of \"",
          "174:                                 \"a_shape must match, got \",",
          "175:                                 num_dims, \" and \", a_shape_t->NumElements()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:     const auto a_indices_mat = a_indices_t->matrix<int64_t>();",
          "193:     const auto b_indices_mat = b_indices_t->matrix<int64_t>();",
          "194:     std::vector<T> a_augmented_values, b_augmented_values;",
          "196:     UnionSparseIndicesAndValues(a_indices_mat, a_values, a_nnz, b_indices_mat,",
          "197:                                 b_values, b_nnz, num_dims, &a_augmented_values,",
          "198:                                 &b_augmented_values, &entries_to_copy);",
          "",
          "[Removed Lines]",
          "195:     std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx",
          "",
          "[Added Lines]",
          "168:     std::vector<std::pair<bool, int64_t>> entries_to_copy;  // from_a?, idx",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from tensorflow.python.framework import tensor_spec",
          "27: from tensorflow.python.framework import test_util",
          "28: from tensorflow.python.ops import array_ops",
          "29: from tensorflow.python.ops import gradient_checker",
          "30: from tensorflow.python.ops import nn_ops",
          "31: from tensorflow.python.ops import sparse_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from tensorflow.python.ops import gen_sparse_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1175:       self._assertSparseTensorValueEqual(expected, max_tf)",
          "1176:       self._assertSparseTensorValueEqual(expected, min_tf)",
          "1178:   @test_util.run_deprecated_v1",
          "1179:   def testRandom(self):",
          "1180:     np.random.seed(1618)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1179:   def testInvalidSparseInputs(self):",
          "1180:     with test_util.force_cpu():",
          "1181:       with self.assertRaisesRegex(",
          "1182:           (ValueError, errors.InvalidArgumentError),",
          "1183:           \".*Index rank .* and shape rank .* do not match.*\",",
          "1184:       ):",
          "1185:         self.evaluate(",
          "1186:             gen_sparse_ops.sparse_sparse_maximum(",
          "1187:                 [[1]], [0], [2], [[]], [1], [2]",
          "1188:             )",
          "1189:         )",
          "",
          "---------------"
        ]
      }
    }
  ]
}