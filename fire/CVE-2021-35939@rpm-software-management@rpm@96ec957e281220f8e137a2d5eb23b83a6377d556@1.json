{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dce44771b2a3325b3dc1ebfe41027df9910a39fd",
      "candidate_info": {
        "commit_hash": "dce44771b2a3325b3dc1ebfe41027df9910a39fd",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/dce44771b2a3325b3dc1ebfe41027df9910a39fd",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Fix + sanitize the hardlink metadata setting logic\n\nFix the initial setmeta value to something meaningful: we will never\nset metadata on skipped files, and hardlinks are handled with a special\nlogic during install. They'd need different kind of special logic on\nFA_TOUCH so just play it safe and always apply metadata on those.\n\nHarlink metadata setting on install should happen on the *last* entry\nof hardlinked set that gets installed (wrt various skip scenarios)\nas otherwise creating those additional links affects the timestamp.\nNote in particular the \"last file of...\" case in fsmMkfile() where we\nthe comment said just that, but set the metadata on the *first* file\nwhich would then be NULL'ed away.\n\nThis all gets current masked by the fact that we do the metadata setting on\na separate round, but that is about to change plus this makes the overall\nlogic clearer anyhow.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  if (*firstlink != fp) {",
          "195:      rc = fsmLink((*firstlink)->fpath, fp->fpath);",
          "197:  }",
          "198:  fd = *firstlinkfile;",
          "199:     }",
          "",
          "[Removed Lines]",
          "196:      fp->setmeta = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:      rc = fsmUnpack(fi, fd, psm, nodigest);",
          "206:  if (*firstlink) {",
          "210:  }",
          "",
          "[Removed Lines]",
          "207:      (*firstlink)->setmeta = 1;",
          "",
          "[Added Lines]",
          "206:      fp->setmeta = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797:  else",
          "798:      fp->action = rpmfsGetAction(fs, fx);",
          "799:  fp->skip = XFA_SKIPPING(fp->action);",
          "801:  if (XFA_CREATING(fp->action) && !S_ISDIR(rpmfiFMode(fi)))",
          "802:      fp->suffix = tid;",
          "803:  fp->fpath = fsmFsPath(fi, fp->suffix);",
          "",
          "[Removed Lines]",
          "800:  fp->setmeta = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "806:  rc = rpmfiStat(fi, 1, &fp->sb);",
          "808:  setFileState(fs, fx);",
          "809:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:  fp->setmeta = (fp->skip == 0) &&",
          "808:         (fp->sb.st_nlink == 1 || fp->action == FA_TOUCH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbc270d78fb361bd78eac9a9117070caeb537d4a",
      "candidate_info": {
        "commit_hash": "bbc270d78fb361bd78eac9a9117070caeb537d4a",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/bbc270d78fb361bd78eac9a9117070caeb537d4a",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Bury rpmio FD use to fsmUnpack()\n\nfsmUnpack() is the only place in FSM that needs to deal with rpmio FD\ntypes, everywhere else they are nothing but a hindrance that need to\nbe converted to OS level descriptors for use. Better deal with OS\nlevel descriptors to begin with.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     return rc;",
          "111: }",
          "114: {",
          "115:     int rc = 0;",
          "117:  int myerrno = errno;",
          "118:  static int oneshot = 0;",
          "119:  static int flush_io = 0;",
          "122:  if (!oneshot) {",
          "123:      flush_io = (rpmExpandNumeric(\"%{?_flush_io}\") > 0);",
          "",
          "[Removed Lines]",
          "113: static int fsmClose(FD_t *wfdp)",
          "116:     if (wfdp && *wfdp) {",
          "120:  int fdno = Fileno(*wfdp);",
          "",
          "[Added Lines]",
          "113: static int fsmClose(int *wfdp)",
          "116:     if (wfdp && *wfdp >= 0) {",
          "120:  int fdno = *wfdp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  if (flush_io) {",
          "127:      fsync(fdno);",
          "128:  }",
          "130:      rc = RPMERR_CLOSE_FAILED;",
          "132:  if (_fsm_debug) {",
          "133:      rpmlog(RPMLOG_DEBUG, \" %8s ([%d]) %s\\n\", __func__,",
          "134:      fdno, (rc < 0 ? strerror(errno) : \"\"));",
          "135:  }",
          "137:  errno = myerrno;",
          "138:     }",
          "139:     return rc;",
          "140: }",
          "143: {",
          "144:     int rc = 0;",
          "146:     int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT, 0200);",
          "154:  rc = RPMERR_OPEN_FAILED;",
          "156:     if (_fsm_debug) {",
          "157:  rpmlog(RPMLOG_DEBUG, \" %8s (%s [%d]) %s\\n\", __func__,",
          "159:     }",
          "164:     return rc;",
          "165: }",
          "168: {",
          "169:     int rc = rpmfiArchiveReadToFilePsm(fi, fd, nodigest, psm);",
          "170:     if (_fsm_debug) {",
          "171:  rpmlog(RPMLOG_DEBUG, \" %8s (%s %\" PRIu64 \" bytes [%d]) %s\\n\", __func__,",
          "172:         rpmfiFN(fi), rpmfiFSize(fi), Fileno(fd),",
          "173:         (rc < 0 ? strerror(errno) : \"\"));",
          "174:     }",
          "175:     return rc;",
          "176: }",
          "178: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "179:        rpmpsm psm, int nodigest,",
          "181: {",
          "182:     int rc = 0;",
          "185:     if (*firstlink == NULL) {",
          "",
          "[Removed Lines]",
          "129:  if (Fclose(*wfdp))",
          "142: static int fsmOpen(FD_t *wfdp, int dirfd, const char *dest)",
          "148:     if (fd >= 0) {",
          "150:  close(fd);",
          "151:     }",
          "153:     if (fd < 0 || Ferror(*wfdp))",
          "158:         dest, Fileno(*wfdp), (rc < 0 ? strerror(errno) : \"\"));",
          "161:     if (rc)",
          "162:  fsmClose(wfdp);",
          "167: static int fsmUnpack(rpmfi fi, FD_t fd, rpmpsm psm, int nodigest)",
          "180:        struct filedata_s ** firstlink, FD_t *firstlinkfile)",
          "183:     FD_t fd = NULL;",
          "",
          "[Added Lines]",
          "129:  if (close(fdno))",
          "142: static int fsmOpen(int *wfdp, int dirfd, const char *dest)",
          "148:     if (fd < 0)",
          "153:         dest, fd, (rc < 0 ? strerror(errno) : \"\"));",
          "160: static int fsmUnpack(rpmfi fi, int fdno, rpmpsm psm, int nodigest)",
          "162:     FD_t fd = fdDup(fdno);",
          "169:     Fclose(fd);",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile)",
          "178:     int fd = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "811:     int fc = rpmfilesFC(files);",
          "812:     int nodigest = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOFILEDIGEST) ? 1 : 0;",
          "813:     int nofcaps = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOCAPS) ? 1 : 0;",
          "815:     char *tid = NULL;",
          "816:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
          "817:     struct filedata_s *firstlink = NULL;",
          "",
          "[Removed Lines]",
          "814:     FD_t firstlinkfile = NULL;",
          "",
          "[Added Lines]",
          "809:     int firstlinkfile = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
      "candidate_info": {
        "commit_hash": "1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
        "files": [
          "lib/fsm.c"
        ],
        "message": "\"Factorize\" chdir-aware iterator creation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "767:     return 0;",
          "768: }",
          "770: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
          "771:               rpmpsm psm, char ** failedFile)",
          "772: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770: static rpmfi fsmIter(FD_t payload, rpmfiles files, rpmFileIter iter, void *data)",
          "771: {",
          "772:     rpmfi fi;",
          "773:     if (payload)",
          "774:  fi = rpmfiNewArchiveReader(payload, files, RPMFI_ITER_READ_ARCHIVE);",
          "775:     else",
          "776:  fi = rpmfilesIter(files, iter);",
          "777:     if (fi && data)",
          "778:  rpmfiSetOnChdir(fi, onChdir, data);",
          "779:     return fi;",
          "780: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:     if (rc)",
          "822:  goto exit;",
          "828:     if (fi == NULL) {",
          "829:         rc = RPMERR_BAD_MAGIC;",
          "830:         goto exit;",
          "831:     }",
          "835:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "",
          "[Removed Lines]",
          "824:     if (rpmteType(te) == TR_ADDED)",
          "825:  fi = rpmfiNewArchiveReader(payload, files, RPMFI_ITER_READ_ARCHIVE);",
          "826:     else",
          "827:  fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "832:     rpmfiSetOnChdir(fi, onChdir, &di);",
          "",
          "[Added Lines]",
          "836:     fi = fsmIter(payload, files,",
          "837:    payload ? RPMFI_ITER_READ_ARCHIVE : RPMFI_ITER_FWD, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d33bd513d9512f87684083603e8b533a7ef9f3db",
      "candidate_info": {
        "commit_hash": "d33bd513d9512f87684083603e8b533a7ef9f3db",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/d33bd513d9512f87684083603e8b533a7ef9f3db",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file-pre plugin hook (back) to unpack stage\n\nIt doesn't make much sense to call plugins for files that wont be\nunpacked at all, and in particular it wont make much sense to do the\nentire directory dance just to be able to pass meaningful path values\nto plugins. So from now we'll only be calling file-pre for things that\nwe're about to lay down, which it how it used to be before splitting\nthe stages anyhow.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "836:  setFileState(fs, fx);",
          "837:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "842:  fp->stage = FILE_PRE;",
          "843:     }",
          "844:     fi = rpmfiFree(fi);",
          "",
          "[Removed Lines]",
          "840:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "841:           fp->sb.st_mode, fp->action);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:     (fp->action == FA_CREATE), &di.dirfd);",
          "879:      }",
          "881:      if (rc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:      rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "880:        fp->sb.st_mode, fp->action);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
      "candidate_info": {
        "commit_hash": "1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add fsm debug logging to ensureDir()\n\nThis being one of the more central functions in fsm now, there better\nbe some diagnostics from it too. Especially when we move to\ndirfd+basename operation.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     }",
          "407:     free(path);",
          "408:     return rc;",
          "409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     if (_fsm_debug) {",
          "408:  rpmlog(RPMLOG_DEBUG, \" %8s (%s: %d) %s\\n\", __func__,",
          "409:   p, dirfd, (rc < 0 ? strerror(errno) : \"\"));",
          "410:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}