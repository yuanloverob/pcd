{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff646336e82ce1bdea56156c826520090c9786ad",
      "candidate_info": {
        "commit_hash": "ff646336e82ce1bdea56156c826520090c9786ad",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ff646336e82ce1bdea56156c826520090c9786ad",
        "files": [
          "modules/b2b_entities/b2b_common.h",
          "modules/b2b_logic/b2b_logic.c",
          "modules/b2b_logic/logic.c"
        ],
        "message": "b2b_logic: prevent possible crashes when accessing $b2b_logic vars\n\nMake sure to always search in the hash for the current tuple instead of relying\non a pointer saved in the b2b context. There might be races between processing\nBYEs and deleting the tuple and running a b2b_logic reply route where we access\na $b2b_logic variable.\n\nThanks to David Escartin from Sonoc for reporting.",
        "before_after_code_files": [
          "modules/b2b_entities/b2b_common.h||modules/b2b_entities/b2b_common.h",
          "modules/b2b_logic/b2b_logic.c||modules/b2b_logic/b2b_logic.c",
          "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2b_common.h||modules/b2b_entities/b2b_common.h": [
          "File: modules/b2b_entities/b2b_common.h -> modules/b2b_entities/b2b_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: struct b2b_context {",
          "33:  str b2bl_key;",
          "35: };",
          "37: #endif",
          "",
          "[Removed Lines]",
          "34:  void *data;",
          "",
          "[Added Lines]",
          "34:  unsigned int hash_index;",
          "35:  unsigned int local_index;",
          "36:  int init;",
          "",
          "---------------"
        ],
        "modules/b2b_logic/b2b_logic.c||modules/b2b_logic/b2b_logic.c": [
          "File: modules/b2b_logic/b2b_logic.c -> modules/b2b_logic/b2b_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1507:  return NULL;",
          "1508: }",
          "1512: {",
          "1513:  b2bl_tuple_t *tuple;",
          "1517:  if (!tuple) {",
          "1531:     ctx->b2bl_key.s);",
          "1534:    return NULL;",
          "1535:   }",
          "1542:  }",
          "1544:  return tuple;",
          "1545: }",
          "1548: {",
          "1549:  b2bl_tuple_t *tuple;",
          "1550:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1511: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx)",
          "1514:  unsigned int hash_index, local_index;",
          "1516:  tuple = ctx->data;",
          "1519:   if (b2bl_parse_key(&ctx->b2bl_key, &hash_index, &local_index) < 0) {",
          "1520:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1521:     ctx->b2bl_key.s);",
          "1522:    return NULL;",
          "1523:   }",
          "1525:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1526:    lock_get(&b2bl_htable[hash_index].lock);",
          "1528:   tuple = b2bl_search_tuple_safe(hash_index, local_index);",
          "1529:   if (!tuple) {",
          "1530:    LM_ERR(\"Tuple [%.*s] not found\\n\", ctx->b2bl_key.len,",
          "1532:    if (b2bl_htable[hash_index].locked_by != process_no)",
          "1533:     lock_release(&b2bl_htable[hash_index].lock);",
          "1538:   ctx->data = tuple;",
          "1540:   if (b2bl_htable[hash_index].locked_by != process_no)",
          "1541:    lock_release(&b2bl_htable[hash_index].lock);",
          "1547: b2bl_tuple_t *get_ctx_tuple(void)",
          "",
          "[Added Lines]",
          "1510: static b2bl_tuple_t *ctx_search_tuple(struct b2b_context *ctx, int *locked)",
          "1515:  if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1516:   lock_get(&b2bl_htable[ctx->hash_index].lock);",
          "1518:  tuple = b2bl_search_tuple_safe(ctx->hash_index, ctx->local_index);",
          "1520:   LM_ERR(\"Tuple [%u, %u] not found\\n\", ctx->hash_index, ctx->local_index);",
          "1521:   if (b2bl_htable[ctx->hash_index].locked_by != process_no)",
          "1522:    lock_release(&b2bl_htable[ctx->hash_index].lock);",
          "1523:   locked = 0;",
          "1524:   return NULL;",
          "1525:  }",
          "1527:  return tuple;",
          "1528: }",
          "1531: b2bl_tuple_t *get_entities_ctx_tuple(struct b2b_context *ctx, int *locked)",
          "1532: {",
          "1533:  b2bl_tuple_t *tuple;",
          "1535:  if (!ctx->init) {",
          "1537:   if (b2bl_parse_key(&ctx->b2bl_key,",
          "1538:    &ctx->hash_index, &ctx->local_index) < 0) {",
          "1539:    LM_ERR(\"Failed to parse key [%.*s]\\n\", ctx->b2bl_key.len,",
          "1544:   tuple = ctx_search_tuple(ctx, locked);",
          "1545:   if (tuple)",
          "1546:    ctx->init = 1;",
          "1547:  } else {",
          "1548:   tuple = ctx_search_tuple(ctx, locked);",
          "1554: b2bl_tuple_t *get_ctx_tuple(int *locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1560:    LM_DBG(\"b2b_logic key not set in b2b_entities context\\n\");",
          "1564:   }",
          "1567:   if (!tuple) {",
          "1568:    LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1569:     ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1563:    return ctx->data;",
          "1566:   tuple = get_entities_ctx_tuple(ctx);",
          "",
          "[Added Lines]",
          "1570:    if (!ctx->init)",
          "1571:     return NULL;",
          "1572:    else",
          "1573:     return ctx_search_tuple(ctx, locked);",
          "1576:   tuple = get_entities_ctx_tuple(ctx, locked);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1581: int pv_get_b2bl_key(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1582: {",
          "1583:  b2bl_tuple_t *tuple;",
          "1586:  if (!tuple) {",
          "1587:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1588:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1585:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1594:  int locked = 0;",
          "1596:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1591:  res->flags = PV_VAL_STR;",
          "1592:  res->rs = *tuple->key;",
          "1594:  return 0;",
          "1595: }",
          "1597: int pv_get_scenario(struct sip_msg *msg, pv_param_t *param, pv_value_t *res)",
          "1598: {",
          "1599:  b2bl_tuple_t *tuple;",
          "1602:  if (!tuple) {",
          "1603:   LM_DBG(\"Unable to get the tuple from the current context\\n\");",
          "1604:   return pv_get_null(msg, param, res);",
          "",
          "[Removed Lines]",
          "1601:  tuple = get_ctx_tuple();",
          "",
          "[Added Lines]",
          "1605:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1606:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "1614:  int locked = 0;",
          "1616:  tuple = get_ctx_tuple(&locked);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1607:  res->flags = PV_VAL_STR;",
          "1608:  res->rs = *tuple->scenario_id;",
          "1610:  return 0;",
          "1611: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:  if (locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "1626:   lock_release(&b2bl_htable[tuple->hash_index].lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1668:  b2b_dlginfo_t dummy_dlginfo;",
          "1669:  str callid;",
          "1670:  int i;",
          "1673:  if (!tuple) {",
          "1674:   LM_ERR(\"Failed to get the tuple from the current context\\n\");",
          "1675:   return pv_get_null(msg, param, res);",
          "1676:  }",
          "1679:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1681:  curr_entities[0] = tuple->bridge_entities[0];",
          "",
          "[Removed Lines]",
          "1672:  tuple = get_ctx_tuple();",
          "1678:  if (b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1689:  int locked = 0;",
          "1691:  tuple = get_ctx_tuple(&locked);",
          "1697:  if (!locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1914:  return 0;",
          "1915: }",
          "1918: {",
          "1919:  struct b2b_context *ctx;",
          "",
          "[Removed Lines]",
          "1917: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple)",
          "",
          "[Added Lines]",
          "1936: int get_ctx_vals(struct b2b_ctx_val ***vals, b2bl_tuple_t **tuple, int *locked)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1926:   }",
          "1928:   if (!ctx->b2bl_key.s) {",
          "1930:     LM_DBG(\"tuple not created yet\\n\");",
          "1933:     return 0;",
          "1934:    } else {",
          "1936:    }",
          "1937:   } else {",
          "1939:    if (*tuple == NULL) {",
          "1940:     LM_ERR(\"Failed to get tuple [%.*s] from b2b context\\n\",",
          "1941:      ctx->b2bl_key.len, ctx->b2bl_key.s);",
          "",
          "[Removed Lines]",
          "1929:    if (!ctx->data) {",
          "",
          "[Added Lines]",
          "1948:    if (!ctx->init) {",
          "1955:     if (*tuple == NULL)",
          "1956:      return -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1955: {",
          "1956:  struct b2b_ctx_val **vals;",
          "1957:  b2bl_tuple_t *tuple = NULL;",
          "1959:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "1960:   LM_ERR(\"Bad parameters!\\n\");",
          "1961:   return -1;",
          "1962:  }",
          "1965:   LM_ERR(\"Failed to get context values list\\n\");",
          "1966:   return pv_get_null(msg, param, res);",
          "1967:  }",
          "1970:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "1972:  if (fetch_ctx_value(*vals, &param->pvn.u.isname.name.s, &param->pvv) != 0) {",
          "",
          "[Removed Lines]",
          "1964:  if (get_ctx_vals(&vals, &tuple) < 0) {",
          "1969:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "1979:  int locked = 0;",
          "1986:  if (get_ctx_vals(&vals, &tuple, &locked) < 0) {",
          "1991:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1987: {",
          "1988:  struct b2b_ctx_val **ctx_vals = NULL;",
          "1989:  b2bl_tuple_t *tuple = NULL;",
          "1991:  if (!param || !param->pvn.u.isname.name.s.s) {",
          "1992:   LM_ERR(\"Bad parameters!\\n\");",
          "1993:   return -1;",
          "1994:  }",
          "1997:   LM_ERR(\"Failed to get context values list\\n\");",
          "1998:   return -1;",
          "1999:  }",
          "2002:   lock_get(&b2bl_htable[tuple->hash_index].lock);",
          "2004:  if (val==NULL || val->flags&(PV_VAL_NONE|PV_VAL_NULL|PV_VAL_EMPTY)) {",
          "",
          "[Removed Lines]",
          "1996:  if (get_ctx_vals(&ctx_vals, &tuple) < 0) {",
          "2001:  if (tuple && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "[Added Lines]",
          "2012:  int locked = 0;",
          "2019:  if (get_ctx_vals(&ctx_vals, &tuple, &locked) < 0) {",
          "2024:  if (tuple && !locked && b2bl_htable[tuple->hash_index].locked_by != process_no)",
          "",
          "---------------"
        ],
        "modules/b2b_logic/logic.c||modules/b2b_logic/logic.c": [
          "File: modules/b2b_logic/logic.c -> modules/b2b_logic/logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3070:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3071:   goto error;",
          "3072:  }",
          "3076:  if (params->init_timeout == 0)",
          "",
          "[Removed Lines]",
          "3073:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3073:  ctx->init = 1;",
          "3074:  ctx->hash_index = hash_index;",
          "3075:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3412:   LM_ERR(\"Failed to get b2b context\\n\");",
          "3413:   goto error;",
          "3414:  }",
          "3417:  if (new_entities_no != MAX_BRIDGE_ENT-1) {",
          "3418:   LM_ERR(\"Two bridge entities required!\\n\");",
          "",
          "[Removed Lines]",
          "3415:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "3417:  ctx->init = 1;",
          "3418:  ctx->hash_index = hash_index;",
          "3419:  ctx->local_index = tuple->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4549:   LM_ERR(\"Failed to get b2b context\\n\");",
          "4550:   goto error;",
          "4551:  }",
          "4554:  if(entity_no!=0 && entity_no!=1)",
          "4555:  {",
          "",
          "[Removed Lines]",
          "4552:  ctx->data = tuple;",
          "",
          "[Added Lines]",
          "4556:  ctx->init = 1;",
          "4557:  ctx->hash_index = hash_index;",
          "4558:  ctx->local_index = local_index;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "973b04d8805d9e1b73833eba682790fcd7d0e56c",
      "candidate_info": {
        "commit_hash": "973b04d8805d9e1b73833eba682790fcd7d0e56c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/973b04d8805d9e1b73833eba682790fcd7d0e56c",
        "files": [
          "parser/parse_hname2.c",
          "parser/test/test_parser.c"
        ],
        "message": "parse_msg(): Fix out-of-bounds read edge-case (OSS-Fuzz)\n\nAlso add a unit test suite for parse_msg().\n\nSeverity: low\nFixes OSS-Fuzz#39802\n\n(cherry picked from commit 66898d8208d158d95a27f1a76078a29bd1e08d7e)",
        "before_after_code_files": [
          "parser/parse_hname2.c||parser/parse_hname2.c",
          "parser/test/test_parser.c||parser/test/test_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_hname2.c||parser/parse_hname2.c": [
          "File: parser/parse_hname2.c -> parser/parse_hname2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:  if (p>=end)",
          "217:   goto error;",
          "218:  p = skip_ws(p, end);",
          "220:   goto error;",
          "222:  return (p+1);",
          "",
          "[Removed Lines]",
          "219:  if (*p != ':')",
          "",
          "[Added Lines]",
          "219:  if (p >= end || *p != ':')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:   case '\\t':",
          "238:    p = skip_ws( p+1, end);",
          "240:     goto error;",
          "241:    return (p+1);",
          "",
          "[Removed Lines]",
          "239:    if (*p != ':')",
          "",
          "[Added Lines]",
          "239:    if (p >= end || *p != ':')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:    case '\\t':",
          "258:     hdr->name.len = p - hdr->name.s;",
          "259:     p = skip_ws(p+1, end);",
          "261:      goto error;",
          "262:     return (p+1);",
          "263:   }",
          "",
          "[Removed Lines]",
          "260:     if (*p != ':')",
          "",
          "[Added Lines]",
          "260:     if (p >= end || *p != ':')",
          "",
          "---------------"
        ],
        "parser/test/test_parser.c||parser/test/test_parser.c": [
          "File: parser/test/test_parser.c -> parser/test/test_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  ok(str_match(&u.pn_purr_val, const_str(\"t\")), \"puri-43\");",
          "144: }",
          "146: void test_parser(void)",
          "147: {",
          "148:  test_parse_qop_val();",
          "149:  test_parse_fcaps();",
          "151:  test_parse_authenticate_body();",
          "152: }",
          "",
          "[Removed Lines]",
          "150:  test_parse_uri();",
          "",
          "[Added Lines]",
          "146: static const struct tts {",
          "147:  const unsigned char tmsg[32];",
          "148:  int tres;",
          "149: } tset[] = {",
          "150:  {",
          "152:   {'e', ' ', 255, 255, 255, 255, ' ', ' ', ' ', ' ', ' ', 255, '\\n', 255, 255, ' ', ' '},",
          "153:   -1,",
          "154:  },",
          "156:  {{0}, 0},",
          "157: };",
          "159: void test_parse_msg(void)",
          "160: {",
          "161:  int i;",
          "163:  for (i = 0; tset[i].tmsg[0]; i++) {",
          "164:   struct sip_msg msg;",
          "166:   memset(&msg, 0, sizeof msg);",
          "167:   msg.buf = (char *)tset[i].tmsg;",
          "168:   msg.len = strlen(msg.buf);",
          "170:   ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, \"parse-msg-0\");",
          "171:  }",
          "172: }",
          "177:  test_parse_uri();",
          "178:  test_parse_msg();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2fd673d9c2ce818c9172f017ee41e3962c8ec20",
      "candidate_info": {
        "commit_hash": "e2fd673d9c2ce818c9172f017ee41e3962c8ec20",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/e2fd673d9c2ce818c9172f017ee41e3962c8ec20",
        "files": [
          "Makefile.defs",
          "packaging/debian/changelog",
          "packaging/freebsd/Makefile",
          "packaging/netbsd/Makefile",
          "packaging/openbsd/Makefile",
          "packaging/redhat_fedora/opensips.spec",
          "packaging/solaris/base-pkginfo",
          "packaging/solaris/berkeley-pkginfo",
          "packaging/solaris/carrierroute-pkginfo",
          "packaging/solaris/identity-pkginfo",
          "packaging/solaris/ldap-pkginfo",
          "packaging/solaris/mmgeoip-pkginfo",
          "packaging/solaris/mysql-pkginfo",
          "packaging/solaris/perl-pkginfo",
          "packaging/solaris/pgsql-pkginfo",
          "packaging/solaris/pkginfo",
          "packaging/solaris/regex-pkginfo",
          "packaging/solaris/snmp-pkginfo",
          "packaging/solaris/tls-pkginfo",
          "packaging/solaris/xmlrpc-pkginfo"
        ],
        "message": "Bump version to 3.2.9",
        "before_after_code_files": [
          "Makefile.defs||Makefile.defs",
          "packaging/redhat_fedora/opensips.spec||packaging/redhat_fedora/opensips.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.defs||Makefile.defs": [
          "File: Makefile.defs -> Makefile.defs",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #version number",
          "67: VERSION_MAJOR = 3",
          "68: VERSION_MINOR = 2",
          "70: VERSION_BUILD =",
          "72: ifneq (,$(VERSION_BUILD))",
          "",
          "[Removed Lines]",
          "69: VERSION_SUBMINOR = 8",
          "",
          "[Added Lines]",
          "69: VERSION_SUBMINOR = 9",
          "",
          "---------------"
        ],
        "packaging/redhat_fedora/opensips.spec||packaging/redhat_fedora/opensips.spec": [
          "File: packaging/redhat_fedora/opensips.spec -> packaging/redhat_fedora/opensips.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: Summary:  Very fast and configurable SIP server",
          "47: Name:     opensips",
          "49: Release:  1%{?dist}",
          "50: License:  GPLv2+",
          "51: Group:    System Environment/Daemons",
          "",
          "[Removed Lines]",
          "48: Version:  3.2.8",
          "",
          "[Added Lines]",
          "48: Version:  3.2.9",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
      "candidate_info": {
        "commit_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/4408617e90456fc1b614f14f09ee1bddce3ac310",
        "files": [
          "modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c"
        ],
        "message": "rtpproxy+rtpengine: fair election when the first try is disabled\n\nWhen a first attempt to use a rtpproxy/rtpengine node picks a disabled\nnode, the next attempt should not consider the disabled nodes at all.\n\n(cherry picked from commit 9d5dd9539d54b2186f31d2447823cae9108b9c31)",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2608:     continue;",
          "2609:    }",
          "2610:   }",
          "2612:   node = node->rn_next;",
          "2613:  }",
          "",
          "[Removed Lines]",
          "2611:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2611:   if (!node->rn_disabled || !was_forced)",
          "2612:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ],
        "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c": [
          "File: modules/rtpproxy/rtpproxy.c -> modules/rtpproxy/rtpproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2307:     continue;",
          "2308:    }",
          "2309:   }",
          "2311:   node = node->rn_next;",
          "2312:  }",
          "",
          "[Removed Lines]",
          "2310:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2310:   if (!node->rn_disabled || !was_forced)",
          "2311:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d41bfce8c09e22e44c68dd99c6291117e9ff172",
      "candidate_info": {
        "commit_hash": "9d41bfce8c09e22e44c68dd99c6291117e9ff172",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/9d41bfce8c09e22e44c68dd99c6291117e9ff172",
        "files": [
          "route.c"
        ],
        "message": "Throw startup error if event_route can never be run\n\nOpenSIPS would start without any error or warning if an event_route\nis used but the 'event_route' module is not loaded.\n\n(cherry picked from commit bb9bd920feb712cf8ec0c32d4e418056fae8cc81)",
        "before_after_code_files": [
          "route.c||route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "route.c||route.c": [
          "File: route.c -> route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1475:   }",
          "1476:  }",
          "1479: return 0;",
          "1480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478:  for(i = 1; i< EVENT_RT_NO; i++)",
          "1479:   if (sroutes->event[i].a && !module_loaded(\"event_route\")) {",
          "1480:    LM_ERR(\"event_route used but 'event_route' module not loaded!\\n\");",
          "1481:    return E_CFG;",
          "1482:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}