{
  "cve_id": "CVE-2022-3510",
  "cve_desc": "A parsing issue similar to CVE-2022-3171, but with Message-Type Extensions in protobuf-java core and lite versions prior to 3.21.7, 3.20.3, 3.19.6 and 3.16.3 can lead to a denial of service attack. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back-n-forth between mutable and immutable forms, resulting in potentially long garbage collection pauses. We recommend updating to the versions mentioned above.\n\n",
  "repo": "protocolbuffers/protobuf",
  "patch_hash": "db7c17803320525722f45c1d26fc08bc41d1bf48",
  "patch_info": {
    "commit_hash": "db7c17803320525722f45c1d26fc08bc41d1bf48",
    "repo": "protocolbuffers/protobuf",
    "commit_url": "https://github.com/protocolbuffers/protobuf/commit/db7c17803320525722f45c1d26fc08bc41d1bf48",
    "files": [
      "CHANGES.txt",
      "java/core/src/main/java/com/google/protobuf/MessageReflection.java",
      "ruby/compatibility_tests/v3.0.0/tests/basic.rb",
      "ruby/ext/google/protobuf_c/message.c",
      "ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java",
      "ruby/tests/basic_test.proto",
      "ruby/tests/basic_test_proto2.proto",
      "ruby/tests/common_tests.rb",
      "ruby/tests/generated_code.proto",
      "ruby/tests/generated_code_proto2.proto",
      "ruby/tests/repeated_field_test.rb"
    ],
    "message": "Sync from Piper @mkruskal/footmitten\n\nPROTOBUF_SYNC_PIPER",
    "before_after_code_files": [
      "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java",
      "ruby/compatibility_tests/v3.0.0/tests/basic.rb||ruby/compatibility_tests/v3.0.0/tests/basic.rb",
      "ruby/ext/google/protobuf_c/message.c||ruby/ext/google/protobuf_c/message.c",
      "ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java||ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java",
      "ruby/tests/basic_test.proto||ruby/tests/basic_test.proto",
      "ruby/tests/basic_test_proto2.proto||ruby/tests/basic_test_proto2.proto",
      "ruby/tests/common_tests.rb||ruby/tests/common_tests.rb",
      "ruby/tests/generated_code.proto||ruby/tests/generated_code.proto",
      "ruby/tests/generated_code_proto2.proto||ruby/tests/generated_code_proto2.proto",
      "ruby/tests/repeated_field_test.rb||ruby/tests/repeated_field_test.rb"
    ]
  },
  "patch_diff": {
    "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java": [
      "File: java/core/src/main/java/com/google/protobuf/MessageReflection.java -> java/core/src/main/java/com/google/protobuf/MessageReflection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "378:   static class BuilderAdapter implements MergeTarget {",
      "380:     private final Message.Builder builder;",
      "382:     @Override",
      "383:     public Descriptors.Descriptor getDescriptorForType() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "381:     private boolean hasNestedBuilders = true;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "393:       return builder.getField(field);",
      "394:     }",
      "396:     @Override",
      "397:     public boolean hasField(Descriptors.FieldDescriptor field) {",
      "398:       return builder.hasField(field);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "397:     private Message.Builder getFieldBuilder(Descriptors.FieldDescriptor field) {",
      "398:       if (hasNestedBuilders) {",
      "399:         try {",
      "400:           return builder.getFieldBuilder(field);",
      "401:         } catch (UnsupportedOperationException e) {",
      "402:           hasNestedBuilders = false;",
      "403:         }",
      "404:       }",
      "405:       return null;",
      "406:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "401:     @Override",
      "402:     public MergeTarget setField(Descriptors.FieldDescriptor field, Object value) {",
      "403:       builder.setField(field, value);",
      "404:       return this;",
      "405:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "415:       if (!field.isRepeated() && value instanceof MessageLite.Builder) {",
      "416:         if (value != getFieldBuilder(field)) {",
      "417:           builder.setField(field, ((MessageLite.Builder) value).buildPartial());",
      "418:         }",
      "419:         return this;",
      "420:       }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "413:     @Override",
      "414:     public MergeTarget setRepeatedField(",
      "415:         Descriptors.FieldDescriptor field, int index, Object value) {",
      "416:       builder.setRepeatedField(field, index, value);",
      "417:       return this;",
      "418:     }",
      "420:     @Override",
      "421:     public MergeTarget addRepeatedField(Descriptors.FieldDescriptor field, Object value) {",
      "422:       builder.addRepeatedField(field, value);",
      "423:       return this;",
      "424:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "434:       if (value instanceof MessageLite.Builder) {",
      "435:         value = ((MessageLite.Builder) value).buildPartial();",
      "436:       }",
      "443:       if (value instanceof MessageLite.Builder) {",
      "444:         value = ((MessageLite.Builder) value).buildPartial();",
      "445:       }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "536:         Message defaultInstance)",
      "537:         throws IOException {",
      "538:       if (!field.isRepeated()) {",
      "539:         if (hasField(field)) {",
      "542:         }",
      "544:         input.readGroup(field.getNumber(), subBuilder, extensionRegistry);",
      "545:         Object unused = setField(field, subBuilder.buildPartial());",
      "546:       } else {",
      "",
      "[Removed Lines]",
      "540:           input.readGroup(field.getNumber(), builder.getFieldBuilder(field), extensionRegistry);",
      "541:           return;",
      "543:         Message.Builder subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "",
      "[Added Lines]",
      "563:         Message.Builder subBuilder;",
      "565:           subBuilder = getFieldBuilder(field);",
      "566:           if (subBuilder != null) {",
      "567:             input.readGroup(field.getNumber(), subBuilder, extensionRegistry);",
      "568:             return;",
      "569:           } else {",
      "570:             subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "571:             subBuilder.mergeFrom((Message) getField(field));",
      "572:           }",
      "573:         } else {",
      "574:           subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "558:         Message defaultInstance)",
      "559:         throws IOException {",
      "560:       if (!field.isRepeated()) {",
      "561:         if (hasField(field)) {",
      "564:         }",
      "566:         input.readMessage(subBuilder, extensionRegistry);",
      "567:         Object unused = setField(field, subBuilder.buildPartial());",
      "568:       } else {",
      "",
      "[Removed Lines]",
      "562:           input.readMessage(builder.getFieldBuilder(field), extensionRegistry);",
      "563:           return;",
      "565:         Message.Builder subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "",
      "[Added Lines]",
      "593:         Message.Builder subBuilder;",
      "595:           subBuilder = getFieldBuilder(field);",
      "596:           if (subBuilder != null) {",
      "597:             input.readMessage(subBuilder, extensionRegistry);",
      "598:             return;",
      "599:           } else {",
      "600:             subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "601:             subBuilder.mergeFrom((Message) getField(field));",
      "602:           }",
      "603:         } else {",
      "604:           subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "586:     public MergeTarget newMergeTargetForField(",
      "587:         Descriptors.FieldDescriptor field, Message defaultInstance) {",
      "588:       Message.Builder subBuilder;",
      "593:       }",
      "594:       if (!field.isRepeated()) {",
      "595:         Message originalMessage = (Message) getField(field);",
      "596:         if (originalMessage != null) {",
      "",
      "[Removed Lines]",
      "589:       if (defaultInstance != null) {",
      "590:         subBuilder = defaultInstance.newBuilderForType();",
      "591:       } else {",
      "592:         subBuilder = builder.newBuilderForField(field);",
      "",
      "[Added Lines]",
      "629:       if (!field.isRepeated() && hasField(field)) {",
      "630:         subBuilder = getFieldBuilder(field);",
      "631:         if (subBuilder != null) {",
      "632:           return new BuilderAdapter(subBuilder);",
      "633:         }",
      "636:       subBuilder = newMessageFieldInstance(field, defaultInstance);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "627:     @Override",
      "628:     public Object finish() {",
      "630:     }",
      "631:   }",
      "",
      "[Removed Lines]",
      "629:       return builder.buildPartial();",
      "",
      "[Added Lines]",
      "672:       return builder;",
      "",
      "---------------"
    ],
    "ruby/compatibility_tests/v3.0.0/tests/basic.rb||ruby/compatibility_tests/v3.0.0/tests/basic.rb": [
      "File: ruby/compatibility_tests/v3.0.0/tests/basic.rb -> ruby/compatibility_tests/v3.0.0/tests/basic.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "667:       assert m[\"z\"] == :C",
      "668:       m[\"z\"] = 2",
      "669:       assert m[\"z\"] == :B",
      "672:       assert_raise RangeError do",
      "673:         m[\"z\"] = :Z",
      "674:       end",
      "",
      "[Removed Lines]",
      "670:       m[\"z\"] = 4",
      "671:       assert m[\"z\"] == 4",
      "",
      "[Added Lines]",
      "670:       m[\"z\"] = 5",
      "671:       assert m[\"z\"] == 5",
      "",
      "---------------"
    ],
    "ruby/ext/google/protobuf_c/message.c||ruby/ext/google/protobuf_c/message.c": [
      "File: ruby/ext/google/protobuf_c/message.c -> ruby/ext/google/protobuf_c/message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1263:   int n = upb_EnumDef_ValueCount(e);",
      "1264:   for (int i = 0; i < n; i++) {",
      "1265:     const upb_EnumValueDef* ev = upb_EnumDef_Value(e, i);",
      "1267:     int32_t value = upb_EnumValueDef_Number(ev);",
      "1268:     if (name[0] < 'A' || name[0] > 'Z') {",
      "1270:           \"Enum value '%s' does not start with an uppercase letter \"",
      "1271:           \"as is required for Ruby constants.\",",
      "1272:           name);",
      "1273:     }",
      "1274:     rb_define_const(mod, name, INT2NUM(value));",
      "1275:   }",
      "1277:   rb_define_singleton_method(mod, \"lookup\", enum_lookup, 1);",
      "",
      "[Removed Lines]",
      "1266:     const char* name = upb_EnumValueDef_Name(ev);",
      "1269:       rb_warn(",
      "",
      "[Added Lines]",
      "1266:     char* name = strdup(upb_EnumValueDef_Name(ev));",
      "1269:       if (name[0] >= 'a' && name[0] <= 'z') {",
      "1270:         name[0] -= 32; // auto capitalize",
      "1271:       } else {",
      "1272:         rb_warn(",
      "1276:       }",
      "1279:     free(name);",
      "",
      "---------------"
    ],
    "ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java||ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java": [
      "File: ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java -> ruby/src/main/java/com/google/protobuf/jruby/RubyEnumDescriptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     boolean defaultValueRequiredButNotFound =",
      "163:         descriptor.getFile().getSyntax() == FileDescriptor.Syntax.PROTO3;",
      "164:     for (EnumValueDescriptor value : descriptor.getValues()) {",
      "168:         enumModule.defineConstant(name, runtime.newFixnum(value.getNumber()));",
      "169:       } else {",
      "170:         runtime",
      "",
      "[Removed Lines]",
      "165:       String name = value.getName();",
      "167:       if (Character.isUpperCase(name.codePointAt(0))) {",
      "",
      "[Added Lines]",
      "165:       String name = fixEnumConstantName(value.getName());",
      "167:       int ch = name.codePointAt(0);",
      "168:       if (Character.isUpperCase(ch)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "189:     return enumModule;",
      "190:   }",
      "192:   private EnumDescriptor descriptor;",
      "193:   private EnumDescriptorProto.Builder builder;",
      "194:   private IRubyObject name;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:   private static String fixEnumConstantName(String name) {",
      "194:     if (name != null && name.length() > 0) {",
      "195:       int ch = name.codePointAt(0);",
      "196:       if (ch >= 'a' && ch <= 'z') {",
      "200:         return new StringBuilder()",
      "201:                 .appendCodePoint(Character.toUpperCase(ch))",
      "202:                 .append(name.substring(1))",
      "203:                 .toString();",
      "204:       }",
      "205:     }",
      "206:     return name;",
      "207:   }",
      "",
      "---------------"
    ],
    "ruby/tests/basic_test.proto||ruby/tests/basic_test.proto": [
      "File: ruby/tests/basic_test.proto -> ruby/tests/basic_test.proto",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:   A = 1;",
      "74:   B = 2;",
      "75:   C = 3;",
      "76: }",
      "78: message TestEmbeddedMessageParent {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:   v0 = 4;",
      "",
      "---------------"
    ],
    "ruby/tests/basic_test_proto2.proto||ruby/tests/basic_test_proto2.proto": [
      "File: ruby/tests/basic_test_proto2.proto -> ruby/tests/basic_test_proto2.proto",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:   A = 1;",
      "70:   B = 2;",
      "71:   C = 3;",
      "72: }",
      "74: enum TestNonZeroEnum {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:   v0 = 4;",
      "",
      "---------------"
    ],
    "ruby/tests/common_tests.rb||ruby/tests/common_tests.rb": [
      "File: ruby/tests/common_tests.rb -> ruby/tests/common_tests.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "331:     l.push :A",
      "332:     l.push :B",
      "333:     l.push :C",
      "335:     assert_raise RangeError do",
      "336:       l.push :D",
      "337:     end",
      "338:     assert l[0] == :A",
      "342:   end",
      "344:   def test_rptfield_initialize",
      "",
      "[Removed Lines]",
      "334:     assert l.count == 3",
      "340:     l.push 4",
      "341:     assert l[3] == 4",
      "",
      "[Added Lines]",
      "334:     l.push :v0",
      "335:     assert l.count == 4",
      "340:     assert l[3] == :v0",
      "342:     l.push 5",
      "343:     assert l[4] == 5",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "542:     assert m[\"z\"] == :C",
      "543:     m[\"z\"] = 2",
      "544:     assert m[\"z\"] == :B",
      "547:     assert_raise RangeError do",
      "548:       m[\"z\"] = :Z",
      "549:     end",
      "",
      "[Removed Lines]",
      "545:     m[\"z\"] = 4",
      "546:     assert m[\"z\"] == 4",
      "",
      "[Added Lines]",
      "547:     m[\"z\"] = 5",
      "548:     assert m[\"z\"] == 5",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "712:     assert proto_module::TestEnum::A == 1",
      "713:     assert proto_module::TestEnum::B == 2",
      "714:     assert proto_module::TestEnum::C == 3",
      "716:     assert proto_module::TestEnum::lookup(1) == :A",
      "717:     assert proto_module::TestEnum::lookup(2) == :B",
      "718:     assert proto_module::TestEnum::lookup(3) == :C",
      "720:     assert proto_module::TestEnum::resolve(:A) == 1",
      "721:     assert proto_module::TestEnum::resolve(:B) == 2",
      "722:     assert proto_module::TestEnum::resolve(:C) == 3",
      "723:   end",
      "725:   def test_enum_const_get_helpers",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "717:     assert proto_module::TestEnum::V0 == 4",
      "722:     assert proto_module::TestEnum::lookup(4) == :v0",
      "727:     assert proto_module::TestEnum::resolve(:v0) == 4",
      "",
      "---------------"
    ],
    "ruby/tests/generated_code.proto||ruby/tests/generated_code.proto": [
      "File: ruby/tests/generated_code.proto -> ruby/tests/generated_code.proto",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:   A = 1;",
      "68:   B = 2;",
      "69:   C = 3;",
      "70: }",
      "72: message testLowercaseNested {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:   v0 = 4;",
      "",
      "---------------"
    ],
    "ruby/tests/generated_code_proto2.proto||ruby/tests/generated_code_proto2.proto": [
      "File: ruby/tests/generated_code_proto2.proto -> ruby/tests/generated_code_proto2.proto",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:   A = 1;",
      "69:   B = 2;",
      "70:   C = 3;",
      "71: }",
      "73: message TestUnknown {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:   v0 = 4;",
      "",
      "---------------"
    ],
    "ruby/tests/repeated_field_test.rb||ruby/tests/repeated_field_test.rb": [
      "File: ruby/tests/repeated_field_test.rb -> ruby/tests/repeated_field_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "697:       value :A, 1",
      "698:       value :B, 2",
      "699:       value :C, 3",
      "700:     end",
      "701:   end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "700:       value :v0, 4",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a19ae2ae38070fd51f7b0edb5b18f90a1670920a",
      "candidate_info": {
        "commit_hash": "a19ae2ae38070fd51f7b0edb5b18f90a1670920a",
        "repo": "protocolbuffers/protobuf",
        "commit_url": "https://github.com/protocolbuffers/protobuf/commit/a19ae2ae38070fd51f7b0edb5b18f90a1670920a",
        "files": [
          "kokoro/linux/32-bit/test_php.sh",
          "src/google/protobuf/arena_align_test.cc"
        ],
        "message": "Fix 32-bit test issue",
        "before_after_code_files": [
          "kokoro/linux/32-bit/test_php.sh||kokoro/linux/32-bit/test_php.sh",
          "src/google/protobuf/arena_align_test.cc||src/google/protobuf/arena_align_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/protocolbuffers/protobuf/pull/10729"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kokoro/linux/32-bit/test_php.sh||kokoro/linux/32-bit/test_php.sh": [
          "File: kokoro/linux/32-bit/test_php.sh -> kokoro/linux/32-bit/test_php.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   test_php_c",
          "37: }",
          "40: pushd build",
          "41: cmake ..",
          "42: cmake --build . -- -j20",
          "",
          "[Removed Lines]",
          "39: mkdir build",
          "",
          "[Added Lines]",
          "39: mkdir -p build",
          "",
          "---------------"
        ],
        "src/google/protobuf/arena_align_test.cc||src/google/protobuf/arena_align_test.cc": [
          "File: src/google/protobuf/arena_align_test.cc -> src/google/protobuf/arena_align_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: }",
          "70: TEST(ArenaAlignDefault, CeilPtr) {",
          "72:   auto align_default = ArenaAlignDefault();",
          "73:   EXPECT_THAT(align_default.Ceil(p + 0), Eq(p + 0));",
          "74:   EXPECT_THAT(align_default.Ceil(p + 1), Eq(p + 8));",
          "",
          "[Removed Lines]",
          "71:   char p[17] = {0};",
          "",
          "[Added Lines]",
          "71:   alignas(8) char p[17] = {0};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: }",
          "82: TEST(ArenaAlignDefault, CheckAligned) {",
          "84:   auto align_default = ArenaAlignDefault();",
          "85:   EXPECT_THAT(align_default.CheckAligned(p + 0), Eq(p + 0));",
          "86:   EXPECT_THAT(align_default.CheckAligned(p + 8), Eq(p + 8));",
          "",
          "[Removed Lines]",
          "83:   char p[17] = {0};",
          "",
          "[Added Lines]",
          "83:   alignas(8) char p[17] = {0};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: }",
          "97: TEST(ArenaAlignDefault, CeilDefaultAligned) {",
          "99:   auto align_default = ArenaAlignDefault();",
          "100:   EXPECT_THAT(align_default.CeilDefaultAligned(p + 0), Eq(p + 0));",
          "101:   EXPECT_THAT(align_default.CeilDefaultAligned(p + 8), Eq(p + 8));",
          "",
          "[Removed Lines]",
          "98:   char p[17] = {0};",
          "",
          "[Added Lines]",
          "98:   alignas(8) char p[17] = {0};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb6ebf9dd08c1dbe177109a440083812312e2717",
      "candidate_info": {
        "commit_hash": "eb6ebf9dd08c1dbe177109a440083812312e2717",
        "repo": "protocolbuffers/protobuf",
        "commit_url": "https://github.com/protocolbuffers/protobuf/commit/eb6ebf9dd08c1dbe177109a440083812312e2717",
        "files": [
          "cmake/push_auto_update.sh",
          "python/requirements.txt"
        ],
        "message": "Sync from Piper @479479714\n\nPROTOBUF_SYNC_PIPER",
        "before_after_code_files": [
          "cmake/push_auto_update.sh||cmake/push_auto_update.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/protocolbuffers/protobuf/pull/10729"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cmake/push_auto_update.sh||cmake/push_auto_update.sh": [
          "File: cmake/push_auto_update.sh -> cmake/push_auto_update.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/bash",
          "3: # This script updates the CMake file lists (i.e. src/file_lists.cmake), commits",
          "4: # the resulting change, and pushes it. This does not do anything useful when",
          "5: # run manually, but should be run by our GitHub action instead.",
          "7: set -ex",
          "9: # Exit early if the previous commit was made by the bot. This reduces the risk",
          "10: # of a bug causing an infinite loop of auto-generated commits.",
          "11: if (git log -1 --pretty=format:'%an' | grep -q \"Protobuf Team Bot\"); then",
          "12:   echo \"Previous commit was authored by bot\"",
          "13:   exit 0",
          "14: fi",
          "16: $(dirname -- \"$0\")/update_file_lists.sh",
          "18: # Try to determine the most recent pull request number.",
          "19: title=$(git log -1 --pretty='%s')",
          "20: pr_from_merge=$(echo \"$title\" | sed -n 's/^Merge pull request #\\([0-9]\\+\\).*/\\1/p')",
          "21: pr_from_squash=$(echo \"$title\" | sed -n 's/^.*(#\\([0-9]\\+\\))$/\\1/p')",
          "23: pr=\"\"",
          "24: if [ ! -z \"$pr_from_merge\" ]; then",
          "25:   pr=\"$pr_from_merge\"",
          "26: elif [ ! -z \"$pr_from_squash\" ]; then",
          "27:   pr=\"$pr_from_squash\"",
          "28: fi",
          "30: if [ ! -z \"$pr\" ]; then",
          "31:   commit_message=\"Auto-generate CMake file lists after PR #$pr\"",
          "32: else",
          "33:   # If we are unable to determine the pull request number, we fall back on this",
          "34:   # default commit message. Typically this should not occur, but could happen",
          "35:   # if a pull request was merged via a rebase.",
          "36:   commit_message=\"Auto-generate CMake file lists\"",
          "37: fi",
          "39: git add -A",
          "40: git diff --staged --quiet || git commit -am \"$commit_message\"",
          "41: git push",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24b65038cfe36191268fda355aca0e43d3ecbcbe",
      "candidate_info": {
        "commit_hash": "24b65038cfe36191268fda355aca0e43d3ecbcbe",
        "repo": "protocolbuffers/protobuf",
        "commit_url": "https://github.com/protocolbuffers/protobuf/commit/24b65038cfe36191268fda355aca0e43d3ecbcbe",
        "files": [
          "CHANGES.txt",
          "java/core/src/main/java/com/google/protobuf/MessageReflection.java"
        ],
        "message": "Fix TextFormat parser (#10674)",
        "before_after_code_files": [
          "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java"
          ],
          "candidate": [
            "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java"
          ]
        }
      },
      "candidate_diff": {
        "java/core/src/main/java/com/google/protobuf/MessageReflection.java||java/core/src/main/java/com/google/protobuf/MessageReflection.java": [
          "File: java/core/src/main/java/com/google/protobuf/MessageReflection.java -> java/core/src/main/java/com/google/protobuf/MessageReflection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   static class BuilderAdapter implements MergeTarget {",
          "380:     private final Message.Builder builder;",
          "382:     @Override",
          "383:     public Descriptors.Descriptor getDescriptorForType() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     private boolean hasNestedBuilders = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:       return builder.getField(field);",
          "394:     }",
          "396:     @Override",
          "397:     public boolean hasField(Descriptors.FieldDescriptor field) {",
          "398:       return builder.hasField(field);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     private Message.Builder getFieldBuilder(Descriptors.FieldDescriptor field) {",
          "398:       if (hasNestedBuilders) {",
          "399:         try {",
          "400:           return builder.getFieldBuilder(field);",
          "401:         } catch (UnsupportedOperationException e) {",
          "402:           hasNestedBuilders = false;",
          "403:         }",
          "404:       }",
          "405:       return null;",
          "406:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:     @Override",
          "402:     public MergeTarget setField(Descriptors.FieldDescriptor field, Object value) {",
          "403:       builder.setField(field, value);",
          "404:       return this;",
          "405:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:       if (!field.isRepeated() && value instanceof MessageLite.Builder) {",
          "416:         if (value != getFieldBuilder(field)) {",
          "417:           builder.setField(field, ((MessageLite.Builder) value).buildPartial());",
          "418:         }",
          "419:         return this;",
          "420:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:     @Override",
          "414:     public MergeTarget setRepeatedField(",
          "415:         Descriptors.FieldDescriptor field, int index, Object value) {",
          "416:       builder.setRepeatedField(field, index, value);",
          "417:       return this;",
          "418:     }",
          "420:     @Override",
          "421:     public MergeTarget addRepeatedField(Descriptors.FieldDescriptor field, Object value) {",
          "422:       builder.addRepeatedField(field, value);",
          "423:       return this;",
          "424:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:       if (value instanceof MessageLite.Builder) {",
          "435:         value = ((MessageLite.Builder) value).buildPartial();",
          "436:       }",
          "443:       if (value instanceof MessageLite.Builder) {",
          "444:         value = ((MessageLite.Builder) value).buildPartial();",
          "445:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "536:         Message defaultInstance)",
          "537:         throws IOException {",
          "538:       if (!field.isRepeated()) {",
          "539:         if (hasField(field)) {",
          "542:         }",
          "544:         input.readGroup(field.getNumber(), subBuilder, extensionRegistry);",
          "545:         Object unused = setField(field, subBuilder.buildPartial());",
          "546:       } else {",
          "",
          "[Removed Lines]",
          "540:           input.readGroup(field.getNumber(), builder.getFieldBuilder(field), extensionRegistry);",
          "541:           return;",
          "543:         Message.Builder subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "",
          "[Added Lines]",
          "563:         Message.Builder subBuilder;",
          "565:           subBuilder = getFieldBuilder(field);",
          "566:           if (subBuilder != null) {",
          "567:             input.readGroup(field.getNumber(), subBuilder, extensionRegistry);",
          "568:             return;",
          "569:           } else {",
          "570:             subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "571:             subBuilder.mergeFrom((Message) getField(field));",
          "572:           }",
          "573:         } else {",
          "574:           subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:         Message defaultInstance)",
          "559:         throws IOException {",
          "560:       if (!field.isRepeated()) {",
          "561:         if (hasField(field)) {",
          "564:         }",
          "566:         input.readMessage(subBuilder, extensionRegistry);",
          "567:         Object unused = setField(field, subBuilder.buildPartial());",
          "568:       } else {",
          "",
          "[Removed Lines]",
          "562:           input.readMessage(builder.getFieldBuilder(field), extensionRegistry);",
          "563:           return;",
          "565:         Message.Builder subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "",
          "[Added Lines]",
          "593:         Message.Builder subBuilder;",
          "595:           subBuilder = getFieldBuilder(field);",
          "596:           if (subBuilder != null) {",
          "597:             input.readMessage(subBuilder, extensionRegistry);",
          "598:             return;",
          "599:           } else {",
          "600:             subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "601:             subBuilder.mergeFrom((Message) getField(field));",
          "602:           }",
          "603:         } else {",
          "604:           subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "586:     public MergeTarget newMergeTargetForField(",
          "587:         Descriptors.FieldDescriptor field, Message defaultInstance) {",
          "588:       Message.Builder subBuilder;",
          "593:       }",
          "594:       if (!field.isRepeated()) {",
          "595:         Message originalMessage = (Message) getField(field);",
          "596:         if (originalMessage != null) {",
          "",
          "[Removed Lines]",
          "589:       if (defaultInstance != null) {",
          "590:         subBuilder = defaultInstance.newBuilderForType();",
          "591:       } else {",
          "592:         subBuilder = builder.newBuilderForField(field);",
          "",
          "[Added Lines]",
          "629:       if (!field.isRepeated() && hasField(field)) {",
          "630:         subBuilder = getFieldBuilder(field);",
          "631:         if (subBuilder != null) {",
          "632:           return new BuilderAdapter(subBuilder);",
          "633:         }",
          "636:       subBuilder = newMessageFieldInstance(field, defaultInstance);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "627:     @Override",
          "628:     public Object finish() {",
          "630:     }",
          "631:   }",
          "",
          "[Removed Lines]",
          "629:       return builder.buildPartial();",
          "",
          "[Added Lines]",
          "672:       return builder;",
          "",
          "---------------"
        ]
      }
    }
  ]
}