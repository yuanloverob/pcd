{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94591dca510c796c7d40e9b4167ea56f2fdf28ca",
      "candidate_info": {
        "commit_hash": "94591dca510c796c7d40e9b4167ea56f2fdf28ca",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/94591dca510c796c7d40e9b4167ea56f2fdf28ca",
        "files": [
          "Lib/test/test_os.py",
          "Modules/posixmodule.c"
        ],
        "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
          "1815:     def test_win32_mkdir_700(self):",
          "1816:         base = os_helper.TESTFN",
          "1833:     def tearDown(self):",
          "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
          "",
          "[Removed Lines]",
          "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
          "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
          "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
          "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
          "1821:         # check that they are different from a regularly created directory.",
          "1822:         os.mkdir(path1, mode=0o700)",
          "1823:         os.mkdir(path2, mode=0o777)",
          "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
          "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
          "1827:         os.rmdir(path1)",
          "1828:         os.rmdir(path2)",
          "1829:         out1 = out1.replace(path1, \"<PATH>\")",
          "1830:         out2 = out2.replace(path2, \"<PATH>\")",
          "1831:         self.assertNotEqual(out1, out2)",
          "",
          "[Added Lines]",
          "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
          "1818:         os.mkdir(path, mode=0o700)",
          "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1820:         os.rmdir(path)",
          "1821:         self.assertEqual(",
          "1822:             out.strip(),",
          "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "1824:         )",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c"
        ]
      }
    },
    {
      "candidate_hash": "6d0850c4c8188035643586ab4d8ec2468abd699e",
      "candidate_info": {
        "commit_hash": "6d0850c4c8188035643586ab4d8ec2468abd699e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6d0850c4c8188035643586ab4d8ec2468abd699e",
        "files": [
          "Lib/test/test_os.py",
          "Modules/posixmodule.c"
        ],
        "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1800:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
          "1801:     def test_win32_mkdir_700(self):",
          "1802:         base = os_helper.TESTFN",
          "1819:     def tearDown(self):",
          "1820:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
          "",
          "[Removed Lines]",
          "1803:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
          "1804:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
          "1805:         # mode=0o700 is special-cased to override ACLs on Windows",
          "1806:         # There's no way to know exactly how the ACLs will look, so we'll",
          "1807:         # check that they are different from a regularly created directory.",
          "1808:         os.mkdir(path1, mode=0o700)",
          "1809:         os.mkdir(path2, mode=0o777)",
          "1811:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
          "1812:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
          "1813:         os.rmdir(path1)",
          "1814:         os.rmdir(path2)",
          "1815:         out1 = out1.replace(path1, \"<PATH>\")",
          "1816:         out2 = out2.replace(path2, \"<PATH>\")",
          "1817:         self.assertNotEqual(out1, out2)",
          "",
          "[Added Lines]",
          "1803:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
          "1804:         os.mkdir(path, mode=0o700)",
          "1805:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1806:         os.rmdir(path)",
          "1807:         self.assertEqual(",
          "1808:             out.strip(),",
          "1809:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "1810:         )",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c"
        ]
      }
    },
    {
      "candidate_hash": "e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
      "candidate_info": {
        "commit_hash": "e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
        "files": [
          "Objects/unicodeobject.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix data races report by TSAN unicode-hash (gh-119907) (gh-119963)\n\ngh-117657: Fix data races report by TSAN unicode-hash (gh-119907)\n(cherry picked from commit 0594a27e5f1d87d59fa8a761dd8ca9df4e42816d)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Objects/unicodeobject.c||Objects/unicodeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/unicodeobject.c||Objects/unicodeobject.c": [
          "File: Objects/unicodeobject.c -> Objects/unicodeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1625:     assert(_PyUnicode_CHECK(unicode));",
          "1626:     if (Py_REFCNT(unicode) != 1)",
          "1627:         return 0;",
          "1629:         return 0;",
          "1630:     if (PyUnicode_CHECK_INTERNED(unicode))",
          "1631:         return 0;",
          "",
          "[Removed Lines]",
          "1628:     if (_PyUnicode_HASH(unicode) != -1)",
          "",
          "[Added Lines]",
          "1628:     if (FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(unicode)) != -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10819:     if (PyUnicode_CHECK_INTERNED(left))",
          "10820:         return 0;",
          "10825:         return 0;",
          "10826:     }",
          "",
          "[Removed Lines]",
          "10822:     assert(_PyUnicode_HASH(right_uni) != -1);",
          "10823:     Py_hash_t hash = _PyUnicode_HASH(left);",
          "10824:     if (hash != -1 && hash != _PyUnicode_HASH(right_uni)) {",
          "",
          "[Added Lines]",
          "10822:     Py_hash_t right_hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(right_uni));",
          "10823:     assert(right_hash != -1);",
          "10824:     Py_hash_t hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(left));",
          "10825:     if (hash != -1 && hash != right_hash) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11306: #ifdef Py_DEBUG",
          "11307:     assert(_Py_HashSecret_Initialized);",
          "11308: #endif",
          "11312:     x = _Py_HashBytes(PyUnicode_DATA(self),",
          "11313:                       PyUnicode_GET_LENGTH(self) * PyUnicode_KIND(self));",
          "11315:     return x;",
          "11316: }",
          "",
          "[Removed Lines]",
          "11309:     if (_PyUnicode_HASH(self) != -1)",
          "11310:         return _PyUnicode_HASH(self);",
          "11314:     _PyUnicode_HASH(self) = x;",
          "",
          "[Added Lines]",
          "11310:     Py_hash_t hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(self));",
          "11311:     if (hash != -1) {",
          "11312:         return hash;",
          "11313:     }",
          "11317:     FT_ATOMIC_STORE_SSIZE_RELAXED(_PyUnicode_HASH(self), x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5441f6aacc1eab69ad539445568a2ef779cb267",
      "candidate_info": {
        "commit_hash": "d5441f6aacc1eab69ad539445568a2ef779cb267",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d5441f6aacc1eab69ad539445568a2ef779cb267",
        "files": [
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-120837: Update _Py_DumpExtensionModules to be async-signal-safe (gh-121051) (gh-121107)\n\ngh-120837: Update _Py_DumpExtensionModules to be async-signal-safe (gh-121051)\n(cherry picked from commit 1a2e7a747540f74414e7c50556bcb2cc127e9d1c)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3036:     }",
          "3037: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3039: static inline int",
          "3040: acquire_dict_lock_for_dump(PyObject *obj)",
          "3041: {",
          "3042: #ifdef Py_GIL_DISABLED",
          "3043:     PyMutex *mutex = &obj->ob_mutex;",
          "3044:     if (_PyMutex_LockTimed(mutex, 0, 0) == PY_LOCK_ACQUIRED) {",
          "3045:         return 1;",
          "3046:     }",
          "3047:     return 0;",
          "3048: #else",
          "3049:     return 1;",
          "3050: #endif",
          "3051: }",
          "3053: static inline void",
          "3054: release_dict_lock_for_dump(PyObject *obj)",
          "3055: {",
          "3056: #ifdef Py_GIL_DISABLED",
          "3057:     PyMutex *mutex = &obj->ob_mutex;",
          "3060:     _Py_atomic_store_uint8(&mutex->_bits, _Py_UNLOCKED);",
          "3061: #endif",
          "3062: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3063:     PyObject *stdlib_module_names = NULL;",
          "3064:     if (interp->sysdict != NULL) {",
          "3065:         pos = 0;",
          "3067:             if (PyUnicode_Check(key)",
          "3068:                && PyUnicode_CompareWithASCIIString(key, \"stdlib_module_names\") == 0) {",
          "3069:                 stdlib_module_names = value;",
          "3070:                 break;",
          "3071:             }",
          "3072:         }",
          "3073:     }",
          "",
          "[Removed Lines]",
          "3066:         while (PyDict_Next(interp->sysdict, &pos, &key, &value)) {",
          "",
          "[Added Lines]",
          "3090:         if (!acquire_dict_lock_for_dump(interp->sysdict)) {",
          "3092:             return;",
          "3093:         }",
          "3094:         while (_PyDict_Next(interp->sysdict, &pos, &key, &value, NULL)) {",
          "3101:         release_dict_lock_for_dump(interp->sysdict);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3081:     int header = 1;",
          "3082:     Py_ssize_t count = 0;",
          "3083:     pos = 0;",
          "3085:         if (!PyUnicode_Check(key)) {",
          "3086:             continue;",
          "3087:         }",
          "",
          "[Removed Lines]",
          "3084:     while (PyDict_Next(modules, &pos, &key, &value)) {",
          "",
          "[Added Lines]",
          "3113:     if (!acquire_dict_lock_for_dump(modules)) {",
          "3115:         return;",
          "3116:     }",
          "3117:     while (_PyDict_Next(modules, &pos, &key, &value, NULL)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3122:         _Py_DumpASCII(fd, key);",
          "3123:         count++;",
          "3124:     }",
          "3126:     if (count) {",
          "3127:         PUTS(fd, \" (total: \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3158:     release_dict_lock_for_dump(modules);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
      "candidate_info": {
        "commit_hash": "6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
        "files": [
          "Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test__header_value_parser.py",
          "Misc/NEWS.d/next/Library/2024-05-16-17-31-46.gh-issue-118643.hAWH4C.rst"
        ],
        "message": "[3.13] gh-118643: Fix AttributeError in the email module (GH-119099) (GH-119389)\n\nFix regression introduced in gh-100884: AttributeError when re-fold a long\naddress list.\n\nAlso fix more cases of incorrect encoding of the address separator in the\naddress list missed in gh-100884.\n(cherry picked from commit 858b9e85fcdd495947c9e892ce6e3734652c48f2)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test__header_value_parser.py||Lib/test/test_email/test__header_value_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py": [
          "File: Lib/email/_header_value_parser.py -> Lib/email/_header_value_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "956: DOT = ValueTerminal('.', 'dot')",
          "957: ListSeparator = ValueTerminal(',', 'list-separator')",
          "958: ListSeparator.as_ew_allowed = False",
          "959: RouteComponentMarker = ValueTerminal('@', 'route-component-marker')",
          "961: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959: ListSeparator.syntactic_break = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2844:             if not hasattr(part, 'encode'):",
          "2845:                 # It's not a Terminal, do each piece individually.",
          "2846:                 parts = list(part) + parts",
          "2848:                 # It's a terminal, wrap it as an encoded word, possibly",
          "2849:                 # combining it with previously encoded words if allowed.",
          "2850:                 if (last_ew is not None and",
          "",
          "[Removed Lines]",
          "2847:             else:",
          "",
          "[Added Lines]",
          "2848:                 want_encoding = False",
          "2849:                 continue",
          "2850:             elif part.as_ew_allowed:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2858:                 # so clear it now.",
          "2859:                 leading_whitespace = ''",
          "2860:                 last_charset = charset",
          "2864:         if len(tstr) <= maxlen - len(lines[-1]):",
          "2865:             lines[-1] += tstr",
          "",
          "[Removed Lines]",
          "2861:             want_encoding = False",
          "2862:             continue",
          "",
          "[Added Lines]",
          "2864:                 want_encoding = False",
          "2865:                 continue",
          "2866:             else:",
          "2867:                 # It's a terminal which should be kept non-encoded",
          "2868:                 # (e.g. a ListSeparator).",
          "2869:                 last_ew = None",
          "2870:                 want_encoding = False",
          "2871:                 # fall through",
          "",
          "---------------"
        ],
        "Lib/test/test_email/test__header_value_parser.py||Lib/test/test_email/test__header_value_parser.py": [
          "File: Lib/test/test_email/test__header_value_parser.py -> Lib/test/test_email/test__header_value_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3077:                 ' =?utf-8?q?bei=C3=9Ft_bei=C3=9Ft?= <biter@example.com>\\n')",
          "3079:     def test_address_list_with_list_separator_after_fold(self):",
          "3081:         self._test(parser.get_address_list(to)[0],",
          "3084:     # XXX Need tests with comments on various sides of a unicode token,",
          "3085:     # and with unicode tokens in the comments.  Spaces inside the quotes",
          "",
          "[Removed Lines]",
          "3080:         to = '0123456789' * 8 + '@foo, \u00e4 <foo@bar>'",
          "3082:                    '0123456789' * 8 + '@foo,\\n =?utf-8?q?=C3=A4?= <foo@bar>\\n')",
          "",
          "[Added Lines]",
          "3080:         a = 'x' * 66 + '@example.com'",
          "3081:         to = f'{a}, \"H\u00fcbsch Kaktus\" <beautiful@example.com>'",
          "3083:             f'{a},\\n =?utf-8?q?H=C3=BCbsch?= Kaktus <beautiful@example.com>\\n')",
          "3085:         a = '.' * 79",
          "3086:         to = f'\"{a}\" <xyz@example.com>, \"H\u00fcbsch Kaktus\" <beautiful@example.com>'",
          "3087:         self._test(parser.get_address_list(to)[0],",
          "3088:             f'{a}\\n'",
          "3089:             ' <xyz@example.com>, =?utf-8?q?H=C3=BCbsch?= Kaktus '",
          "3090:             '<beautiful@example.com>\\n')",
          "",
          "---------------"
        ]
      }
    }
  ]
}