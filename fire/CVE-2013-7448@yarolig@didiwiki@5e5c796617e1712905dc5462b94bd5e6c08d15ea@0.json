{
  "cve_id": "CVE-2013-7448",
  "cve_desc": "Directory traversal vulnerability in wiki.c in didiwiki allows remote attackers to read arbitrary files via the page parameter to api/page/get.",
  "repo": "yarolig/didiwiki",
  "patch_hash": "5e5c796617e1712905dc5462b94bd5e6c08d15ea",
  "patch_info": {
    "commit_hash": "5e5c796617e1712905dc5462b94bd5e6c08d15ea",
    "repo": "yarolig/didiwiki",
    "commit_url": "https://github.com/yarolig/didiwiki/commit/5e5c796617e1712905dc5462b94bd5e6c08d15ea",
    "files": [
      "src/wiki.c"
    ],
    "message": "page_name_is_good function",
    "before_after_code_files": [
      "src/wiki.c||src/wiki.c"
    ]
  },
  "patch_diff": {
    "src/wiki.c||src/wiki.c": [
      "File: src/wiki.c -> src/wiki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "851:          );",
      "852: }",
      "854: void",
      "855: wiki_handle_rest_call(HttpRequest  *req,",
      "856:         HttpResponse *res,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "854: int page_name_is_good(char* page_name)",
      "855: {",
      "857:    I guess that check for absense of '/' is enough.",
      "859:    TODO: Use realpath()",
      "861:     if (!page_name)",
      "862:         return FALSE;",
      "864:     if (!isalnum(page[0]))",
      "865:         return FALSE;",
      "867:     if (strstr(page, \"..\"))",
      "868:         return FALSE;",
      "870:     return TRUE;",
      "871: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "866:    if (page == NULL)",
      "867:      page = http_request_get_query_string(req);",
      "870:      {",
      "871:        http_response_printf(res, \"%s\", file_read(page));",
      "872:        http_response_send(res);",
      "",
      "[Removed Lines]",
      "869:    if (page && (access(page, R_OK) == 0))",
      "",
      "[Added Lines]",
      "889:    if (page && page_name_is_good(page) && (access(page, R_OK) == 0))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "879:    if( ( (wikitext = http_request_param_get(req, \"text\")) != NULL)",
      "880:        && ( (page = http_request_param_get(req, \"page\")) != NULL))",
      "881:      {",
      "883:        http_response_printf(res, \"success\");",
      "884:        http_response_send(res);",
      "885:        return;",
      "886:      }",
      "887:  }",
      "888:       else if (!strcmp(func, \"page/delete\"))",
      "889:  {",
      "",
      "[Removed Lines]",
      "882:        file_write(page, wikitext);",
      "",
      "[Added Lines]",
      "902:    if (page_name_is_good(page))",
      "903:      {",
      "904:        file_write(page, wikitext);",
      "909:      }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "892:    if (page == NULL)",
      "893:      page = http_request_get_query_string(req);",
      "896:      {",
      "897:        http_response_printf(res, \"success\");",
      "898:        http_response_send(res);",
      "",
      "[Removed Lines]",
      "895:    if (page && (unlink(page) > 0))",
      "",
      "[Added Lines]",
      "918:    if (page && page_name_is_good(page) && (unlink(page) > 0))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "906:    if (page == NULL)",
      "907:      page = http_request_get_query_string(req);",
      "910:      {",
      "911:        http_response_printf(res, \"success\");",
      "912:        http_response_send(res);",
      "",
      "[Removed Lines]",
      "909:    if (page && (access(page, R_OK) == 0))",
      "",
      "[Added Lines]",
      "932:    if (page && page_name_is_good(page) && (access(page, R_OK) == 0))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1009:     {",
      "1010:       http_response_set_status(res, 404, \"Not Found\");",
      "1011:       http_response_printf(res, \"<html><body>404 Not Found</body></html>\\n\");",
      "",
      "[Removed Lines]",
      "1008:   if (strchr(page, '/'))",
      "",
      "[Added Lines]",
      "1031:   if (!page_name_is_good(page))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57b0399f4dec1bea1542ab3afa89427f08463a9c",
      "candidate_info": {
        "commit_hash": "57b0399f4dec1bea1542ab3afa89427f08463a9c",
        "repo": "yarolig/didiwiki",
        "commit_url": "https://github.com/yarolig/didiwiki/commit/57b0399f4dec1bea1542ab3afa89427f08463a9c",
        "files": [
          "src/wiki.c"
        ],
        "message": "fix build",
        "before_after_code_files": [
          "src/wiki.c||src/wiki.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/wiki.c||src/wiki.c"
          ],
          "candidate": [
            "src/wiki.c||src/wiki.c"
          ]
        }
      },
      "candidate_diff": {
        "src/wiki.c||src/wiki.c": [
          "File: src/wiki.c -> src/wiki.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:     if (!page_name)",
          "862:         return FALSE;",
          "865:         return FALSE;",
          "868:         return FALSE;",
          "870:     return TRUE;",
          "",
          "[Removed Lines]",
          "864:     if (!isalnum(page[0]))",
          "867:     if (strstr(page, \"..\"))",
          "",
          "[Added Lines]",
          "864:     if (!isalnum(page_name[0]))",
          "867:     if (strstr(page_name, \"..\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}