{
  "cve_id": "CVE-2020-11044",
  "cve_desc": "In FreeRDP greater than 1.2 and before 2.0.0, a double free in update_read_cache_bitmap_v3_order crashes the client application if corrupted data from a manipulated server is parsed. This has been patched in 2.0.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "67c2aa52b2ae0341d469071d1bc8aab91f8d2ed8",
  "patch_info": {
    "commit_hash": "67c2aa52b2ae0341d469071d1bc8aab91f8d2ed8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/67c2aa52b2ae0341d469071d1bc8aab91f8d2ed8",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed #6013: Check new length is > 0",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2165:   goto fail;",
      "2167:  new_data = (BYTE*)realloc(bitmapData->data, new_len);",
      "",
      "[Removed Lines]",
      "2164:  if (Stream_GetRemainingLength(s) < new_len)",
      "",
      "[Added Lines]",
      "2164:  if ((new_len == 0) || (Stream_GetRemainingLength(s) < new_len))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a379bfe0949dd7be5c407e8524ff3f721613419",
      "candidate_info": {
        "commit_hash": "2a379bfe0949dd7be5c407e8524ff3f721613419",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2a379bfe0949dd7be5c407e8524ff3f721613419",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Fixed invalid seek size in patrial pdu parse case",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1393:               \"pduType %s not properly parsed, %\" PRIdz",
          "1394:               \" bytes remaining unhandled. Skipping.\",",
          "1395:               pdu_type_to_str(pduType), diff);",
          "1397:      return -1;",
          "1398:    }",
          "1399:   }",
          "",
          "[Removed Lines]",
          "1396:     if (!Stream_SafeSeek(s, pduLength))",
          "",
          "[Added Lines]",
          "1396:     if (!Stream_SafeSeek(s, pduLength - diff))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b2bc41935e53b0034fe5948aeeab4f32e80f30f",
      "candidate_info": {
        "commit_hash": "6b2bc41935e53b0034fe5948aeeab4f32e80f30f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6b2bc41935e53b0034fe5948aeeab4f32e80f30f",
        "files": [
          "libfreerdp/core/window.c"
        ],
        "message": "Fix #6010: Check length in read_icon_info",
        "before_after_code_files": [
          "libfreerdp/core/window.c||libfreerdp/core/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/window.c||libfreerdp/core/window.c": [
          "File: libfreerdp/core/window.c -> libfreerdp/core/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  newBitMask = (BYTE*)realloc(iconInfo->bitsMask, iconInfo->cbBitsMask);",
          "",
          "[Removed Lines]",
          "139:  if (Stream_GetRemainingLength(s) < iconInfo->cbBitsMask + iconInfo->cbBitsColor)",
          "140:   return FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:  }",
          "152:  iconInfo->bitsMask = newBitMask;",
          "153:  Stream_Read(s, iconInfo->bitsMask, iconInfo->cbBitsMask);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  if (Stream_GetRemainingLength(s) < iconInfo->cbBitsMask)",
          "151:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:  }",
          "186:  if (iconInfo->colorTable)",
          "187:   Stream_Read(s, iconInfo->colorTable, iconInfo->cbColorTable);",
          "190:  newBitMask = (BYTE*)realloc(iconInfo->bitsColor, iconInfo->cbBitsColor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:  {",
          "187:   if (Stream_GetRemainingLength(s) < iconInfo->cbColorTable)",
          "188:    return FALSE;",
          "190:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:  }",
          "199:  iconInfo->bitsColor = newBitMask;",
          "200:  Stream_Read(s, iconInfo->bitsColor, iconInfo->cbBitsColor);",
          "201:  return TRUE;",
          "202: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  if (Stream_GetRemainingLength(s) < iconInfo->cbBitsColor)",
          "204:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df55f40ecf5ef16909f60b86bef63e0268941821",
      "candidate_info": {
        "commit_hash": "df55f40ecf5ef16909f60b86bef63e0268941821",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/df55f40ecf5ef16909f60b86bef63e0268941821",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Fixed incorrect parser error message.",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3811:    WLog_ERR(TAG,",
          "3812:             \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIu16",
          "3813:             \"\",",
          "3815:   }",
          "3817:   numberCapabilities--;",
          "",
          "[Removed Lines]",
          "3814:             type, rest + length, length);",
          "",
          "[Added Lines]",
          "3814:             type, length - rest, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3627aaf7d289315b614a584afb388f04abfb5bbf",
      "candidate_info": {
        "commit_hash": "3627aaf7d289315b614a584afb388f04abfb5bbf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3627aaf7d289315b614a584afb388f04abfb5bbf",
        "files": [
          "libfreerdp/core/capabilities.c"
        ],
        "message": "Fixed #6011: Bounds check in rdp_read_font_capability_set",
        "before_after_code_files": [
          "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/capabilities.c||libfreerdp/core/capabilities.c": [
          "File: libfreerdp/core/capabilities.c -> libfreerdp/core/capabilities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397: static BOOL rdp_read_font_capability_set(wStream* s, UINT16 length, rdpSettings* settings)",
          "1398: {",
          "1399:  WINPR_UNUSED(settings);",
          "1406:  return TRUE;",
          "",
          "[Removed Lines]",
          "1400:  if (length > 4)",
          "1403:  if (length > 6)",
          "",
          "[Added Lines]",
          "1400:  if (length > 5)",
          "1403:  if (length > 7)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad894adbc6c90e6c5b296bd3b4c5dd7b779d897",
      "candidate_info": {
        "commit_hash": "0ad894adbc6c90e6c5b296bd3b4c5dd7b779d897",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0ad894adbc6c90e6c5b296bd3b4c5dd7b779d897",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Fixed substream read in rdp_recv_tpkt_pdu",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: };",
          "106: static void rdp_write_share_control_header(wStream* s, UINT16 length, UINT16 type,",
          "107:                                            UINT16 channel_id);",
          "108: static void rdp_write_share_data_header(wStream* s, UINT16 length, BYTE type, UINT32 share_id);",
          "",
          "[Removed Lines]",
          "105: static BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type);",
          "",
          "[Added Lines]",
          "105: static BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type, UINT16* channel_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:  if (len == 0x8000)",
          "160:  {",
          "162:    return FALSE;",
          "",
          "[Removed Lines]",
          "161:   if (!rdp_read_flow_control_pdu(s, type))",
          "",
          "[Added Lines]",
          "161:   if (!rdp_read_flow_control_pdu(s, type, channel_id))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1120:  }",
          "1121: }",
          "1124: {",
          "",
          "[Removed Lines]",
          "1123: BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type)",
          "",
          "[Added Lines]",
          "1123: BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type, UINT16* channel_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1329:   while (Stream_GetRemainingLength(s) > 3)",
          "1330:   {",
          "1331:    wStream sub;",
          "1335:    if (!rdp_read_share_control_header(s, &pduLength, &pduType, &pduSource))",
          "1336:    {",
          "1337:     WLog_ERR(TAG, \"rdp_recv_tpkt_pdu: rdp_read_share_control_header() fail\");",
          "1338:     return -1;",
          "1339:    }",
          "1351:    Stream_StaticInit(&sub, Stream_Pointer(s), pduLength);",
          "1352:    if (!Stream_SafeSeek(s, pduLength))",
          "1353:     return -1;",
          "",
          "[Removed Lines]",
          "1332:    size_t startheader, endheader, start, end, diff, headerdiff;",
          "1334:    startheader = Stream_GetPosition(s);",
          "1340:    start = endheader = Stream_GetPosition(s);",
          "1341:    headerdiff = endheader - startheader;",
          "1342:    if (pduLength < headerdiff)",
          "1343:    {",
          "1344:     WLog_ERR(",
          "1345:         TAG,",
          "1346:         \"rdp_recv_tpkt_pdu: rdp_read_share_control_header() invalid pduLength %\" PRIu16,",
          "1347:         pduLength);",
          "1348:     return -1;",
          "1349:    }",
          "1350:    pduLength -= headerdiff;",
          "",
          "[Added Lines]",
          "1332:    size_t diff;",
          "1341:    if (pduLength > 5)",
          "1342:     pduLength -= 6;",
          "1343:    else",
          "1344:     pduLength -= 4;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1389:      break;",
          "1390:    }",
          "1395:    {",
          "1396:     WLog_WARN(TAG,",
          "1397:               \"pduType %s not properly parsed, %\" PRIdz",
          "",
          "[Removed Lines]",
          "1392:    end = Stream_GetPosition(&sub);",
          "1393:    diff = end - start;",
          "1394:    if (diff != pduLength)",
          "",
          "[Added Lines]",
          "1386:    diff = Stream_GetRemainingLength(&sub);",
          "1387:    if (diff > 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}