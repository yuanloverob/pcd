{
  "cve_id": "CVE-2022-47933",
  "cve_desc": "Brave Browser before 1.42.51 allowed a remote attacker to cause a denial of service via a crafted HTML file that references the IPFS scheme. This vulnerability is caused by an uncaught exception in the function ipfs::OnBeforeURLRequest_IPFSRedirectWork() in ipfs_redirect_network_delegate_helper.cc.",
  "repo": "brave/brave-core",
  "patch_hash": "7ef8cb2f232abdf59ec9c3c99a086a14b972bc56",
  "patch_info": {
    "commit_hash": "7ef8cb2f232abdf59ec9c3c99a086a14b972bc56",
    "repo": "brave/brave-core",
    "commit_url": "https://github.com/brave/brave-core/commit/7ef8cb2f232abdf59ec9c3c99a086a14b972bc56",
    "files": [
      "browser/net/ipfs_redirect_network_delegate_helper.cc",
      "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
    ],
    "message": "Merge pull request #13989 from brave/brave_23646\n\nDo not proceed loading ipfs resources if ipfs is disabled",
    "before_after_code_files": [
      "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc",
      "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
    ]
  },
  "patch_diff": {
    "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc": [
      "File: browser/net/ipfs_redirect_network_delegate_helper.cc -> browser/net/ipfs_redirect_network_delegate_helper.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: int OnBeforeURLRequest_IPFSRedirectWork(",
      "20:     const brave::ResponseCallback& next_callback,",
      "21:     std::shared_ptr<brave::BraveRequestInfo> ctx) {",
      "23:     return net::OK;",
      "24:   auto* prefs = user_prefs::UserPrefs::Get(ctx->browser_context);",
      "26:     return net::OK;",
      "27:   }",
      "",
      "[Removed Lines]",
      "22:   if (!ctx->browser_context || !brave::IsRegularProfile(ctx->browser_context))",
      "25:   if (IsIpfsResolveMethodDisabled(prefs)) {",
      "",
      "[Added Lines]",
      "22:   const bool has_ipfs_scheme = IsIPFSScheme(ctx->request_url);",
      "23:   if (!ctx->browser_context) {",
      "26:     if (has_ipfs_scheme) {",
      "27:       ctx->blocked_by = brave::kOtherBlocked;",
      "28:     }",
      "30:   }",
      "33:   const bool ipfs_disabled = IsIpfsResolveMethodDisabled(prefs);",
      "35:   if (ipfs_disabled || !brave::IsRegularProfile(ctx->browser_context)) {",
      "37:     if (has_ipfs_scheme &&",
      "38:         ctx->resource_type != blink::mojom::ResourceType::kMainFrame) {",
      "39:       ctx->blocked_by = brave::kOtherBlocked;",
      "40:     }",
      "",
      "---------------"
    ],
    "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc": [
      "File: browser/net/ipfs_redirect_network_delegate_helper_unittest.cc -> browser/net/ipfs_redirect_network_delegate_helper_unittest.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:             \"QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
      "86: }",
      "88: TEST_F(IPFSRedirectNetworkDelegateHelperTest, TranslateIPFSURIIPFSScheme) {",
      "89:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
      "90:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
      "89:        SubFrameRequestDisabledWhenIPFSDisabled) {",
      "90:   profile()->GetPrefs()->SetInteger(",
      "91:       kIPFSResolveMethod,",
      "92:       static_cast<int>(IPFSResolveMethodTypes::IPFS_DISABLED));",
      "94:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
      "95:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
      "96:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
      "97:   brave_request_info->browser_context = profile();",
      "98:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
      "99:                                                      brave_request_info);",
      "100:   EXPECT_EQ(rc, net::OK);",
      "101:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
      "102: }",
      "104: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
      "105:        SubFrameRequestDisabledWhenIPFSDisabled_Incognito) {",
      "106:   profile()->GetPrefs()->SetInteger(",
      "107:       kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));",
      "109:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
      "110:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
      "111:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
      "112:   brave_request_info->browser_context = profile()->GetOffTheRecordProfile(",
      "113:       Profile::OTRProfileID::CreateUnique(\"incognito\"), true);",
      "114:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
      "115:                                                      brave_request_info);",
      "116:   EXPECT_EQ(rc, net::OK);",
      "117:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
      "118: }",
      "120: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
      "121:        SubFrameRequestDisabledWhen_NoContext) {",
      "122:   profile()->GetPrefs()->SetInteger(",
      "123:       kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));",
      "125:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
      "126:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
      "127:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
      "128:   brave_request_info->browser_context = nullptr;",
      "129:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
      "130:                                                      brave_request_info);",
      "131:   EXPECT_EQ(rc, net::OK);",
      "132:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
      "133: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0fb80b9ff5a040e291dffb8fba2fe3129bd6de43",
      "candidate_info": {
        "commit_hash": "0fb80b9ff5a040e291dffb8fba2fe3129bd6de43",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/0fb80b9ff5a040e291dffb8fba2fe3129bd6de43",
        "files": [
          "browser/net/ipfs_redirect_network_delegate_helper.cc",
          "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
        ],
        "message": "Do not proceed loading ipfs resources if ipfs is disabled Resolves https://github.com/brave/brave-browser/issues/23646",
        "before_after_code_files": [
          "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc",
          "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brave/brave-core/pull/13989"
        ],
        "olp_code_files": {
          "patch": [
            "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc",
            "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
          ],
          "candidate": [
            "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc",
            "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/net/ipfs_redirect_network_delegate_helper.cc||browser/net/ipfs_redirect_network_delegate_helper.cc": [
          "File: browser/net/ipfs_redirect_network_delegate_helper.cc -> browser/net/ipfs_redirect_network_delegate_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: int OnBeforeURLRequest_IPFSRedirectWork(",
          "20:     const brave::ResponseCallback& next_callback,",
          "21:     std::shared_ptr<brave::BraveRequestInfo> ctx) {",
          "23:     return net::OK;",
          "24:   auto* prefs = user_prefs::UserPrefs::Get(ctx->browser_context);",
          "26:     return net::OK;",
          "27:   }",
          "",
          "[Removed Lines]",
          "22:   if (!ctx->browser_context || !brave::IsRegularProfile(ctx->browser_context))",
          "25:   if (IsIpfsResolveMethodDisabled(prefs)) {",
          "",
          "[Added Lines]",
          "22:   const bool has_ipfs_scheme = IsIPFSScheme(ctx->request_url);",
          "23:   if (!ctx->browser_context) {",
          "26:     if (has_ipfs_scheme) {",
          "27:       ctx->blocked_by = brave::kOtherBlocked;",
          "28:     }",
          "30:   }",
          "33:   const bool ipfs_disabled = IsIpfsResolveMethodDisabled(prefs);",
          "35:   if (ipfs_disabled || !brave::IsRegularProfile(ctx->browser_context)) {",
          "37:     if (has_ipfs_scheme &&",
          "38:         ctx->resource_type != blink::mojom::ResourceType::kMainFrame) {",
          "39:       ctx->blocked_by = brave::kOtherBlocked;",
          "40:     }",
          "",
          "---------------"
        ],
        "browser/net/ipfs_redirect_network_delegate_helper_unittest.cc||browser/net/ipfs_redirect_network_delegate_helper_unittest.cc": [
          "File: browser/net/ipfs_redirect_network_delegate_helper_unittest.cc -> browser/net/ipfs_redirect_network_delegate_helper_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:             \"QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
          "86: }",
          "88: TEST_F(IPFSRedirectNetworkDelegateHelperTest, TranslateIPFSURIIPFSScheme) {",
          "89:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
          "90:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
          "89:        SubFrameRequestDisabledWhenIPFSDisabled) {",
          "90:   profile()->GetPrefs()->SetInteger(",
          "91:       kIPFSResolveMethod,",
          "92:       static_cast<int>(IPFSResolveMethodTypes::IPFS_DISABLED));",
          "94:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
          "95:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "96:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
          "97:   brave_request_info->browser_context = profile();",
          "98:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
          "99:                                                      brave_request_info);",
          "100:   EXPECT_EQ(rc, net::OK);",
          "101:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
          "102: }",
          "104: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
          "105:        SubFrameRequestDisabledWhenIPFSDisabled_Incognito) {",
          "106:   profile()->GetPrefs()->SetInteger(",
          "107:       kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));",
          "109:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
          "110:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "111:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
          "112:   brave_request_info->browser_context = profile()->GetOffTheRecordProfile(",
          "113:       Profile::OTRProfileID::CreateUnique(\"incognito\"), true);",
          "114:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
          "115:                                                      brave_request_info);",
          "116:   EXPECT_EQ(rc, net::OK);",
          "117:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
          "118: }",
          "120: TEST_F(IPFSRedirectNetworkDelegateHelperTest,",
          "121:        SubFrameRequestDisabledWhen_NoContext) {",
          "122:   profile()->GetPrefs()->SetInteger(",
          "123:       kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));",
          "125:   GURL url(\"ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG\");",
          "126:   auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "127:   brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;",
          "128:   brave_request_info->browser_context = nullptr;",
          "129:   int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(brave::ResponseCallback(),",
          "130:                                                      brave_request_info);",
          "131:   EXPECT_EQ(rc, net::OK);",
          "132:   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);",
          "133: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}