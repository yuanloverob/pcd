{
  "cve_id": "CVE-2024-24479",
  "cve_desc": "A Buffer Overflow in Wireshark before 4.2.0 allows a remote attacker to cause a denial of service via the wsutil/to_str.c, and format_fractional_part_nsecs components. NOTE: this is disputed by the vendor because neither release 4.2.0 nor any other release was affected.",
  "repo": "wireshark/wireshark",
  "patch_hash": "c3720cff158c265dec2a0c6104b1d65954ae6bfd",
  "patch_info": {
    "commit_hash": "c3720cff158c265dec2a0c6104b1d65954ae6bfd",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/c3720cff158c265dec2a0c6104b1d65954ae6bfd",
    "files": [
      "wsutil/to_str.c",
      "wsutil/to_str.h"
    ],
    "message": "Various enhancements and fixes to format_fractional_part_nsecs().\n\nHave format_fractional_part_nsecs() return the number of bytes\nformatted.  This matches what snprintf() and strlcpy() do, for the\nbenefit of routines constructing a string in a fixed-length buffer with\nmultiple calls, one of which is format_fractional_part_nsecs().\n\nHave format_fractional_part_nsecs() check for a count of nanoseconds\ngreatre than or equal to 1 billion, and report that specially.\n\nFix places wher it used the bufer pointer and size of the buffer, rather\nthan the current position in the buffer and the remaining space in the\nbuffer, to append to the buffer and make sure doing so doesn't overrun\nthe buffer.\n\nRename some variable names (rename buf_remaining to just remaining,\nrename num_chars to num_bytes as it counts bytes).\n\nFix some comments.",
    "before_after_code_files": [
      "wsutil/to_str.c||wsutil/to_str.c",
      "wsutil/to_str.h||wsutil/to_str.h"
    ]
  },
  "patch_diff": {
    "wsutil/to_str.c||wsutil/to_str.c": [
      "File: wsutil/to_str.c -> wsutil/to_str.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "659: format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision)",
      "660: {",
      "661:  gsize decimal_point_len;",
      "662:  gint8 num_buf[CHARS_NANOSECONDS];",
      "663:  gint8 *num_end = &num_buf[CHARS_NANOSECONDS];",
      "664:  gint8 *num_ptr;",
      "",
      "[Removed Lines]",
      "658: void",
      "",
      "[Added Lines]",
      "659: int",
      "662:  gchar *ptr;",
      "663:  size_t remaining;",
      "664:  int num_bytes;",
      "666:  guint32 frac_part;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "675:  }",
      "",
      "[Removed Lines]",
      "674:   return;",
      "",
      "[Added Lines]",
      "679:   return 0;",
      "680:  }",
      "686:  if (nsecs >= 1000000000U) {",
      "687:   num_bytes = snprintf(buf, buflen, \"%s(%u nanoseconds)\",",
      "688:       decimal_point, nsecs);",
      "689:   if ((unsigned int)num_bytes >= buflen) {",
      "697:    return (int)(buflen - 1);",
      "698:   }",
      "699:   return num_bytes;",
      "702:  ptr = buf;",
      "703:  remaining = buflen;",
      "704:  num_bytes = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "681:  if (decimal_point_len >= buflen) {",
      "687:  }",
      "",
      "[Removed Lines]",
      "686:   return;",
      "688:  buf += decimal_point_len;",
      "689:  buflen -= decimal_point_len;",
      "",
      "[Added Lines]",
      "718:   return (int)(buflen - 1);",
      "720:  ptr += decimal_point_len;",
      "721:  remaining -= decimal_point_len;",
      "722:  num_bytes += decimal_point_len;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "714:   break;",
      "716:  case 2:",
      "722:   break;",
      "724:  case 3:",
      "730:   break;",
      "732:  case 4:",
      "738:   break;",
      "740:  case 5:",
      "746:   break;",
      "748:  case 6:",
      "754:   break;",
      "756:  case 7:",
      "762:   break;",
      "764:  case 8:",
      "770:   break;",
      "772:  case 9:",
      "778:   break;",
      "780:  default:",
      "",
      "[Removed Lines]",
      "712:   num_ptr = uint_to_str_back_len(num_end,",
      "713:       nsecs / 100000000, precision);",
      "720:   num_ptr = uint_to_str_back_len(num_end,",
      "721:       nsecs / 10000000, precision);",
      "728:   num_ptr = uint_to_str_back_len(num_end,",
      "729:       nsecs / 1000000, precision);",
      "736:   num_ptr = uint_to_str_back_len(num_end,",
      "737:       nsecs / 100000, precision);",
      "744:   num_ptr = uint_to_str_back_len(num_end,",
      "745:       nsecs / 10000, precision);",
      "752:   num_ptr = uint_to_str_back_len(num_end,",
      "753:       nsecs / 1000, precision);",
      "760:   num_ptr = uint_to_str_back_len(num_end,",
      "761:       nsecs / 100, precision);",
      "768:   num_ptr = uint_to_str_back_len(num_end,",
      "769:       nsecs / 10, precision);",
      "776:   num_ptr = uint_to_str_back_len(num_end, nsecs,",
      "777:       precision);",
      "",
      "[Added Lines]",
      "745:   frac_part = nsecs / 100000000U;",
      "752:   frac_part = nsecs / 10000000U;",
      "759:   frac_part = nsecs / 1000000U;",
      "766:   frac_part = nsecs / 100000U;",
      "773:   frac_part = nsecs / 10000U;",
      "780:   frac_part = nsecs / 1000U;",
      "787:   frac_part = nsecs / 100U;",
      "794:   frac_part = nsecs / 10U;",
      "801:   frac_part = nsecs;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "782:   break;",
      "783:  }",
      "794:  if (num_len == 0) {",
      "799:  }",
      "810: }",
      "812: void",
      "",
      "[Removed Lines]",
      "793:  num_len = MIN((size_t)(num_end - num_ptr), buflen - 1);",
      "798:   return;",
      "804:  memcpy(buf, num_ptr, num_len);",
      "",
      "[Added Lines]",
      "809:  num_ptr = uint_to_str_back_len(num_end, frac_part, precision);",
      "819:  num_len = MIN((size_t)(num_end - num_ptr), remaining - 1);",
      "825:   return num_bytes;",
      "831:  memcpy(ptr, num_ptr, num_len);",
      "832:  ptr += num_len;",
      "833:  num_bytes += num_len;",
      "839:  return num_bytes;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "892: {",
      "893:  struct tm tm, *tmp;",
      "894:  gchar *ptr;",
      "898:  if (local)",
      "899:   tmp = ws_localtime_r(&ns->secs, &tm);",
      "",
      "[Removed Lines]",
      "895:  size_t buf_remaining;",
      "896:  int num_chars;",
      "",
      "[Added Lines]",
      "925:  size_t remaining;",
      "926:  int num_bytes;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "904:   return;",
      "905:  }",
      "906:  ptr = buf;",
      "909:      \"%04d-%02d-%02d %02d:%02d:%02d\",",
      "910:      tmp->tm_year + 1900,",
      "911:      tmp->tm_mon + 1,",
      "",
      "[Removed Lines]",
      "907:  buf_remaining = buflen;",
      "908:  num_chars = snprintf(ptr, buf_remaining,",
      "",
      "[Added Lines]",
      "937:  remaining = buflen;",
      "938:  num_bytes = snprintf(ptr, remaining,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "913:      tmp->tm_hour,",
      "914:      tmp->tm_min,",
      "915:      tmp->tm_sec);",
      "920:   snprintf(buf, buflen, \"snprintf() failed\");",
      "921:   return;",
      "922:  }",
      "930:   return;",
      "931:  }",
      "940:  }",
      "946: }",
      "",
      "[Removed Lines]",
      "916:  if (num_chars < 0) {",
      "923:  if ((unsigned int)num_chars >= buf_remaining) {",
      "932:  ptr += num_chars;",
      "933:  buf_remaining -= num_chars;",
      "935:  if (precision == 0) {",
      "939:   return;",
      "945:  format_fractional_part_nsecs(ptr, buf_remaining, (guint32)ns->nsecs, decimal_point, precision);",
      "",
      "[Added Lines]",
      "946:  if (num_bytes < 0) {",
      "954:  if ((unsigned int)num_bytes >= remaining) {",
      "961:  ptr += num_bytes;",
      "962:  remaining -= num_bytes;",
      "964:  if (precision != 0) {",
      "970:   format_fractional_part_nsecs(ptr, remaining, (guint32)ns->nsecs, decimal_point, precision);",
      "",
      "---------------"
    ],
    "wsutil/to_str.h||wsutil/to_str.h": [
      "File: wsutil/to_str.h -> wsutil/to_str.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: WS_DLL_PUBLIC gchar *eui64_to_str(wmem_allocator_t *scope, const guint64 ad);",
      "304: WS_DLL_PUBLIC void display_epoch_time(gchar *, size_t, const nstime_t *, int);",
      "",
      "[Removed Lines]",
      "302: WS_DLL_PUBLIC void format_fractional_part_nsecs(gchar *, size_t, guint32, const char *, int);",
      "",
      "[Added Lines]",
      "302: WS_DLL_PUBLIC int format_fractional_part_nsecs(gchar *, size_t, guint32, const char *, int);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "143533dfe016228a039bf86371245c782b28f63e",
      "candidate_info": {
        "commit_hash": "143533dfe016228a039bf86371245c782b28f63e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/143533dfe016228a039bf86371245c782b28f63e",
        "files": [
          "ConfigureChecks.cmake",
          "capinfos.c",
          "cmakeconfig.h.in",
          "epan/column-utils.c",
          "packaging/debian/libwsutil0.symbols",
          "wsutil/time_util.c",
          "wsutil/time_util.h",
          "wsutil/to_str.c",
          "wsutil/to_str.h"
        ],
        "message": "Add a routine to format an nstime as an ISO 8601-style date/time.\n\nThis replaces code in both absolute_time_string(), in capinfos, and\nset_abs_ymd_time(), in libwireshark.  Like absolute_time_string(), it\nreports, in the formatted string, an error if the seconds value in the\nnstime can't be converted to a struct tm (looking at *you*, Visual\nStudio C library),\n\nHave that routine handle all time precision values from 0 (seconds) to 9\n(nanoseconds).\n\nAdd a ws_gmtime_r(), matching ws_localtime_r(), for use by that routine.",
        "before_after_code_files": [
          "ConfigureChecks.cmake||ConfigureChecks.cmake",
          "capinfos.c||capinfos.c",
          "cmakeconfig.h.in||cmakeconfig.h.in",
          "epan/column-utils.c||epan/column-utils.c",
          "packaging/debian/libwsutil0.symbols||packaging/debian/libwsutil0.symbols",
          "wsutil/time_util.c||wsutil/time_util.c",
          "wsutil/time_util.h||wsutil/time_util.h",
          "wsutil/to_str.c||wsutil/to_str.c",
          "wsutil/to_str.h||wsutil/to_str.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ],
          "candidate": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ]
        }
      },
      "candidate_diff": {
        "ConfigureChecks.cmake||ConfigureChecks.cmake": [
          "File: ConfigureChecks.cmake -> ConfigureChecks.cmake",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: check_symbol_exists(\"timespec_get\"   \"time.h\"   HAVE_TIMESPEC_GET)",
          "86: if(NOT MSVC)",
          "87:  check_symbol_exists(\"localtime_r\"    \"time.h\"   HAVE_LOCALTIME_R)",
          "88:  check_symbol_exists(\"timegm\"         \"time.h\"   HAVE_TIMEGM)",
          "89:  check_symbol_exists(\"tzset\"          \"time.h\"   HAVE_TZSET)",
          "90:  check_symbol_exists(\"tzname\"         \"time.h\"   HAVE_TZNAME)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  check_symbol_exists(\"gmtime_r\"       \"time.h\"   HAVE_GMTIME_R)",
          "",
          "---------------"
        ],
        "capinfos.c||capinfos.c": [
          "File: capinfos.c -> capinfos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: #include <wsutil/report_message.h>",
          "72: #include <wsutil/str_util.h>",
          "73: #include <wsutil/file_util.h>",
          "74: #include <wsutil/ws_assert.h>",
          "75: #include <wsutil/wslog.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #include <wsutil/to_str.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     static gchar time_string_buf[39];",
          "340:     if (cf_info->times_known && cf_info->packet_count > 0) {",
          "341:         if (time_as_secs) {",
          "",
          "[Removed Lines]",
          "338:     struct tm *ti_tm;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:             }",
          "396:             return time_string_buf;",
          "397:         } else {",
          "487:             return time_string_buf;",
          "488:         }",
          "489:     }",
          "",
          "[Removed Lines]",
          "398:             ti_tm = localtime(&timer->secs);",
          "399:             if (ti_tm == NULL) {",
          "400:                 snprintf(time_string_buf, sizeof time_string_buf, \"Not representable\");",
          "401:                 return time_string_buf;",
          "402:             }",
          "403:             switch (tsprecision) {",
          "405:                 case WTAP_TSPREC_SEC:",
          "406:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "407:                             \"%04d-%02d-%02d %02d:%02d:%02d\",",
          "408:                             ti_tm->tm_year + 1900,",
          "409:                             ti_tm->tm_mon + 1,",
          "410:                             ti_tm->tm_mday,",
          "411:                             ti_tm->tm_hour,",
          "412:                             ti_tm->tm_min,",
          "413:                             ti_tm->tm_sec);",
          "414:                     break;",
          "416:                 case WTAP_TSPREC_DSEC:",
          "417:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "418:                             \"%04d-%02d-%02d %02d:%02d:%02d%s%01d\",",
          "419:                             ti_tm->tm_year + 1900,",
          "420:                             ti_tm->tm_mon + 1,",
          "421:                             ti_tm->tm_mday,",
          "422:                             ti_tm->tm_hour,",
          "423:                             ti_tm->tm_min,",
          "424:                             ti_tm->tm_sec,",
          "425:                             decimal_point,",
          "426:                             timer->nsecs / 100000000);",
          "427:                     break;",
          "429:                 case WTAP_TSPREC_CSEC:",
          "430:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "431:                             \"%04d-%02d-%02d %02d:%02d:%02d%s%02d\",",
          "432:                             ti_tm->tm_year + 1900,",
          "433:                             ti_tm->tm_mon + 1,",
          "434:                             ti_tm->tm_mday,",
          "435:                             ti_tm->tm_hour,",
          "436:                             ti_tm->tm_min,",
          "437:                             ti_tm->tm_sec,",
          "438:                             decimal_point,",
          "439:                             timer->nsecs / 10000000);",
          "440:                     break;",
          "442:                 case WTAP_TSPREC_MSEC:",
          "443:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "444:                             \"%04d-%02d-%02d %02d:%02d:%02d%s%03d\",",
          "445:                             ti_tm->tm_year + 1900,",
          "446:                             ti_tm->tm_mon + 1,",
          "447:                             ti_tm->tm_mday,",
          "448:                             ti_tm->tm_hour,",
          "449:                             ti_tm->tm_min,",
          "450:                             ti_tm->tm_sec,",
          "451:                             decimal_point,",
          "452:                             timer->nsecs / 1000000);",
          "453:                     break;",
          "455:                 case WTAP_TSPREC_USEC:",
          "456:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "457:                             \"%04d-%02d-%02d %02d:%02d:%02d%s%06d\",",
          "458:                             ti_tm->tm_year + 1900,",
          "459:                             ti_tm->tm_mon + 1,",
          "460:                             ti_tm->tm_mday,",
          "461:                             ti_tm->tm_hour,",
          "462:                             ti_tm->tm_min,",
          "463:                             ti_tm->tm_sec,",
          "464:                             decimal_point,",
          "465:                             timer->nsecs / 1000);",
          "466:                     break;",
          "468:                 case WTAP_TSPREC_NSEC:",
          "469:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "470:                             \"%04d-%02d-%02d %02d:%02d:%02d%s%09d\",",
          "471:                             ti_tm->tm_year + 1900,",
          "472:                             ti_tm->tm_mon + 1,",
          "473:                             ti_tm->tm_mday,",
          "474:                             ti_tm->tm_hour,",
          "475:                             ti_tm->tm_min,",
          "476:                             ti_tm->tm_sec,",
          "477:                             decimal_point,",
          "478:                             timer->nsecs);",
          "479:                     break;",
          "481:                 default:",
          "482:                     snprintf(time_string_buf, sizeof time_string_buf,",
          "483:                             \"Unknown precision %d\",",
          "484:                             tsprecision);",
          "485:                     break;",
          "486:             }",
          "",
          "[Added Lines]",
          "398:             format_nstime_as_iso8601(time_string_buf, sizeof time_string_buf, timer, decimal_point, TRUE, tsprecision);",
          "",
          "---------------"
        ],
        "cmakeconfig.h.in||cmakeconfig.h.in": [
          "File: cmakeconfig.h.in -> cmakeconfig.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #cmakedefine HAVE_LOCALTIME_R 1",
          "56: #cmakedefine HAVE_TIMEGM 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #cmakedefine HAVE_GMTIME_R 1",
          "",
          "---------------"
        ],
        "epan/column-utils.c||epan/column-utils.c": [
          "File: epan/column-utils.c -> epan/column-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "964: static void",
          "965: set_abs_ymd_time(const frame_data *fd, gchar *buf, char *decimal_point, gboolean local)",
          "966: {",
          "969:   int tsprecision;",
          "1074:     buf[0] = '\\0';",
          "1075:   }",
          "1076: }",
          "1078: static void",
          "",
          "[Removed Lines]",
          "967:   struct tm *tmp;",
          "968:   time_t then;",
          "971:   if (fd->has_ts) {",
          "972:     then = fd->abs_ts.secs;",
          "973:     if (local)",
          "974:       tmp = localtime(&then);",
          "975:     else",
          "976:       tmp = gmtime(&then);",
          "977:   } else",
          "978:     tmp = NULL;",
          "979:   if (tmp != NULL) {",
          "980:     switch (timestamp_get_precision()) {",
          "981:     case TS_PREC_FIXED_SEC:",
          "982:       tsprecision = WTAP_TSPREC_SEC;",
          "983:       break;",
          "984:     case TS_PREC_FIXED_DSEC:",
          "985:       tsprecision = WTAP_TSPREC_DSEC;",
          "986:       break;",
          "987:     case TS_PREC_FIXED_CSEC:",
          "988:       tsprecision = WTAP_TSPREC_CSEC;",
          "989:       break;",
          "990:     case TS_PREC_FIXED_MSEC:",
          "991:       tsprecision = WTAP_TSPREC_MSEC;",
          "992:       break;",
          "993:     case TS_PREC_FIXED_USEC:",
          "994:       tsprecision = WTAP_TSPREC_USEC;",
          "995:       break;",
          "996:     case TS_PREC_FIXED_NSEC:",
          "997:       tsprecision = WTAP_TSPREC_NSEC;",
          "998:       break;",
          "999:     case TS_PREC_AUTO:",
          "1000:       tsprecision = fd->tsprec;",
          "1001:       break;",
          "1002:     default:",
          "1003:       ws_assert_not_reached();",
          "1004:     }",
          "1005:     switch (tsprecision) {",
          "1006:     case WTAP_TSPREC_SEC:",
          "1007:       snprintf(buf, COL_MAX_LEN,\"%04d-%02d-%02d %02d:%02d:%02d\",",
          "1008:         tmp->tm_year + 1900,",
          "1009:         tmp->tm_mon + 1,",
          "1010:         tmp->tm_mday,",
          "1011:         tmp->tm_hour,",
          "1012:         tmp->tm_min,",
          "1013:         tmp->tm_sec);",
          "1014:       break;",
          "1015:     case WTAP_TSPREC_DSEC:",
          "1016:       snprintf(buf, COL_MAX_LEN,\"%04d-%02d-%02d %02d:%02d:%02d%s%01d\",",
          "1017:         tmp->tm_year + 1900,",
          "1018:         tmp->tm_mon + 1,",
          "1019:         tmp->tm_mday,",
          "1020:         tmp->tm_hour,",
          "1021:         tmp->tm_min,",
          "1022:         tmp->tm_sec,",
          "1023:         decimal_point,",
          "1024:         fd->abs_ts.nsecs / 100000000);",
          "1025:       break;",
          "1026:     case WTAP_TSPREC_CSEC:",
          "1027:       snprintf(buf, COL_MAX_LEN,\"%04d-%02d-%02d %02d:%02d:%02d%s%02d\",",
          "1028:         tmp->tm_year + 1900,",
          "1029:         tmp->tm_mon + 1,",
          "1030:         tmp->tm_mday,",
          "1031:         tmp->tm_hour,",
          "1032:         tmp->tm_min,",
          "1033:         tmp->tm_sec,",
          "1034:         decimal_point,",
          "1035:         fd->abs_ts.nsecs / 10000000);",
          "1036:       break;",
          "1037:     case WTAP_TSPREC_MSEC:",
          "1038:       snprintf(buf, COL_MAX_LEN, \"%04d-%02d-%02d %02d:%02d:%02d%s%03d\",",
          "1039:         tmp->tm_year + 1900,",
          "1040:         tmp->tm_mon + 1,",
          "1041:         tmp->tm_mday,",
          "1042:         tmp->tm_hour,",
          "1043:         tmp->tm_min,",
          "1044:         tmp->tm_sec,",
          "1045:         decimal_point,",
          "1046:         fd->abs_ts.nsecs / 1000000);",
          "1047:       break;",
          "1048:     case WTAP_TSPREC_USEC:",
          "1049:       snprintf(buf, COL_MAX_LEN, \"%04d-%02d-%02d %02d:%02d:%02d%s%06d\",",
          "1050:         tmp->tm_year + 1900,",
          "1051:         tmp->tm_mon + 1,",
          "1052:         tmp->tm_mday,",
          "1053:         tmp->tm_hour,",
          "1054:         tmp->tm_min,",
          "1055:         tmp->tm_sec,",
          "1056:         decimal_point,",
          "1057:         fd->abs_ts.nsecs / 1000);",
          "1058:       break;",
          "1059:     case WTAP_TSPREC_NSEC:",
          "1060:       snprintf(buf, COL_MAX_LEN, \"%04d-%02d-%02d %02d:%02d:%02d%s%09d\",",
          "1061:         tmp->tm_year + 1900,",
          "1062:         tmp->tm_mon + 1,",
          "1063:         tmp->tm_mday,",
          "1064:         tmp->tm_hour,",
          "1065:         tmp->tm_min,",
          "1066:         tmp->tm_sec,",
          "1067:         decimal_point,",
          "1068:         fd->abs_ts.nsecs);",
          "1069:       break;",
          "1070:     default:",
          "1071:       ws_assert_not_reached();",
          "1072:     }",
          "1073:   } else {",
          "",
          "[Added Lines]",
          "969:   if (!fd->has_ts) {",
          "971:     return;",
          "973:   tsprecision = timestamp_get_precision();",
          "974:   if (tsprecision == TS_PREC_AUTO)",
          "975:     tsprecision = fd->tsprec;",
          "976:   else if (tsprecision < 0)",
          "977:     ws_assert_not_reached();",
          "978:   if (tsprecision > 9)",
          "979:     tsprecision = 9;",
          "980:   format_nstime_as_iso8601(buf, COL_MAX_LEN, &fd->abs_ts, decimal_point, local, tsprecision);",
          "",
          "---------------"
        ],
        "packaging/debian/libwsutil0.symbols||packaging/debian/libwsutil0.symbols": [
          "File: packaging/debian/libwsutil0.symbols -> packaging/debian/libwsutil0.symbols",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  find_codec@Base 3.1.0",
          "90:  find_last_pathname_separator@Base 1.12.0~rc1",
          "91:  format_char@Base 4.1.0",
          "92:  format_size_wmem@Base 3.5.0",
          "93:  format_text@Base 4.1.0",
          "94:  format_text_chr@Base 4.1.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  format_nstime_as_iso8601@Base 4.1.1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:  ws_getopt@Base 3.5.1",
          "440:  ws_getopt_long@Base 3.5.1",
          "441:  ws_getopt_long_only@Base 3.5.1",
          "442:  ws_hexstrtou16@Base 2.3.0",
          "443:  ws_hexstrtou32@Base 2.3.0",
          "444:  ws_hexstrtou64@Base 2.3.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:  ws_gmtime_r@Base 4.1.1",
          "",
          "---------------"
        ],
        "wsutil/time_util.c||wsutil/time_util.c": [
          "File: wsutil/time_util.c -> wsutil/time_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: #endif",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305: struct tm *",
          "306: ws_gmtime_r(const time_t *timep, struct tm *result)",
          "307: {",
          "308: #if defined(HAVE_GMTIME_R)",
          "309: #ifdef HAVE_TZSET",
          "310:  tzset();",
          "311: #endif",
          "312:  return gmtime_r(timep, result);",
          "313: #elif defined(_MSC_VER)",
          "314:  errno_t err = gmtime_s(result, timep);",
          "315:  if (err == 0)",
          "316:   return result;",
          "317:  return NULL;",
          "318: #else",
          "319:  struct tm *aux = gmtime(timep);",
          "320:  if (aux == NULL)",
          "321:   return NULL;",
          "323:  return result;",
          "324: #endif",
          "325: }",
          "",
          "---------------"
        ],
        "wsutil/time_util.h||wsutil/time_util.h": [
          "File: wsutil/time_util.h -> wsutil/time_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: WS_DLL_PUBLIC",
          "69: struct tm *ws_localtime_r(const time_t *timep, struct tm *result);",
          "71: #ifdef __cplusplus",
          "72: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: WS_DLL_PUBLIC",
          "72: struct tm *ws_gmtime_r(const time_t *timep, struct tm *result);",
          "",
          "---------------"
        ],
        "wsutil/to_str.c||wsutil/to_str.c": [
          "File: wsutil/to_str.c -> wsutil/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <wsutil/inet_addr.h>",
          "21: #include <wsutil/pint.h>",
          "22: #include <wsutil/ws_return.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <wsutil/time_util.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "793: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796: void",
          "797: format_nstime_as_iso8601(gchar *buf, size_t buflen, const nstime_t *ns,",
          "798:     char *decimal_point, gboolean local, int precision)",
          "799: {",
          "800:  struct tm tm, *tmp;",
          "801:  gchar *ptr;",
          "802:  size_t buf_remaining;",
          "803:  int num_chars;",
          "805:  if (local)",
          "806:   tmp = ws_localtime_r(&ns->secs, &tm);",
          "807:  else",
          "808:   tmp = ws_gmtime_r(&ns->secs, &tm);",
          "809:  if (tmp == NULL) {",
          "810:   snprintf(buf, buflen, \"Not representable\");",
          "811:   return;",
          "812:  }",
          "813:  ptr = buf;",
          "814:  buf_remaining = buflen;",
          "815:  num_chars = snprintf(ptr, buf_remaining,",
          "816:      \"%04d-%02d-%02d %02d:%02d:%02d\",",
          "817:      tmp->tm_year + 1900,",
          "818:      tmp->tm_mon + 1,",
          "819:      tmp->tm_mday,",
          "820:      tmp->tm_hour,",
          "821:      tmp->tm_min,",
          "822:      tmp->tm_sec);",
          "823:  if (num_chars < 0) {",
          "827:   snprintf(buf, buflen, \"snprintf() failed\");",
          "828:   return;",
          "829:  }",
          "830:  if ((unsigned int)num_chars >= buf_remaining) {",
          "837:   return;",
          "838:  }",
          "839:  ptr += num_chars;",
          "840:  buf_remaining -= num_chars;",
          "842:  switch (precision) {",
          "844:  case 0:",
          "848:   break;",
          "850:  case 1:",
          "856:   snprintf(ptr, buf_remaining,",
          "857:       \"%s%01d\",",
          "858:       decimal_point,",
          "859:       (guint32)ns->nsecs / 100000000);",
          "860:   break;",
          "862:  case 2:",
          "866:   snprintf(ptr, buf_remaining,",
          "867:       \"%s%02d\",",
          "868:       decimal_point,",
          "869:       (guint32)ns->nsecs / 10000000);",
          "870:   break;",
          "872:  case 3:",
          "876:   snprintf(ptr, buf_remaining,",
          "877:       \"%s%03d\",",
          "878:       decimal_point,",
          "879:       (guint32)ns->nsecs / 1000000);",
          "880:   break;",
          "882:  case 4:",
          "886:   snprintf(ptr, buf_remaining,",
          "887:       \"%s%04d\",",
          "888:       decimal_point,",
          "889:       (guint32)ns->nsecs / 100000);",
          "890:   break;",
          "892:  case 5:",
          "896:   snprintf(ptr, buf_remaining,",
          "897:       \"%s%05d\",",
          "898:       decimal_point,",
          "899:       (guint32)ns->nsecs / 10000);",
          "900:   break;",
          "902:  case 6:",
          "906:   snprintf(ptr, buf_remaining,",
          "907:       \"%s%06d\",",
          "908:       decimal_point,",
          "909:       (guint32)ns->nsecs / 1000);",
          "910:   break;",
          "912:  case 7:",
          "916:   snprintf(ptr, buf_remaining,",
          "917:       \"%s%07d\",",
          "918:       decimal_point,",
          "919:       (guint32)ns->nsecs / 100);",
          "920:   break;",
          "922:  case 8:",
          "926:   snprintf(ptr, buf_remaining,",
          "927:       \"%s%08d\",",
          "928:       decimal_point,",
          "929:       (guint32)ns->nsecs / 10);",
          "930:   break;",
          "932:  case 9:",
          "936:   snprintf(ptr, buf_remaining,",
          "937:       \"%s%09d\",",
          "938:       decimal_point,",
          "939:       (guint32)ns->nsecs);",
          "940:   break;",
          "942:  default:",
          "943:   ws_assert_not_reached();",
          "944:   break;",
          "945:  }",
          "946: }",
          "",
          "---------------"
        ],
        "wsutil/to_str.h||wsutil/to_str.h": [
          "File: wsutil/to_str.h -> wsutil/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: WS_DLL_PUBLIC void display_signed_time(gchar *, size_t, const nstime_t *, int);",
          "306: #ifdef __cplusplus",
          "307: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: WS_DLL_PUBLIC void format_nstime_as_iso8601(gchar *, size_t, const nstime_t *, char *, gboolean, int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53ec634ac2bf5f87a594aa72f16ca21c25a146a9",
      "candidate_info": {
        "commit_hash": "53ec634ac2bf5f87a594aa72f16ca21c25a146a9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/53ec634ac2bf5f87a594aa72f16ca21c25a146a9",
        "files": [
          "packaging/debian/libwsutil0.symbols",
          "wsutil/to_str.c",
          "wsutil/to_str.h"
        ],
        "message": "Add a routine to format the fractional part of a time stamp.\n\nUse it in display_signed_time() and format_nstime_as_iso8601(), and\nexport it for use in other routines outside this source file.",
        "before_after_code_files": [
          "packaging/debian/libwsutil0.symbols||packaging/debian/libwsutil0.symbols",
          "wsutil/to_str.c||wsutil/to_str.c",
          "wsutil/to_str.h||wsutil/to_str.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ],
          "candidate": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ]
        }
      },
      "candidate_diff": {
        "packaging/debian/libwsutil0.symbols||packaging/debian/libwsutil0.symbols": [
          "File: packaging/debian/libwsutil0.symbols -> packaging/debian/libwsutil0.symbols",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  find_codec@Base 3.1.0",
          "90:  find_last_pathname_separator@Base 1.12.0~rc1",
          "91:  format_char@Base 4.1.0",
          "92:  format_nstime_as_iso8601@Base 4.1.1",
          "93:  format_size_wmem@Base 3.5.0",
          "94:  format_text@Base 4.1.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  format_fractional_part_nsecs@Base 4.1.1",
          "",
          "---------------"
        ],
        "wsutil/to_str.c||wsutil/to_str.c": [
          "File: wsutil/to_str.c -> wsutil/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:  return buf;",
          "642: }",
          "659: void",
          "661: {",
          "666:  gint8 *num_ptr;",
          "667:  size_t num_len;",
          "684:  }",
          "702:  case 1:",
          "708:   num_ptr = uint_to_str_back_len(num_end,",
          "710:   break;",
          "712:  case 2:",
          "",
          "[Removed Lines]",
          "644: void",
          "645: display_epoch_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "646: {",
          "647:  display_signed_time(buf, buflen, ns, precision);",
          "648: }",
          "660: display_signed_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "662:  int nsecs;",
          "664:  gint8 num_buf[CHARS_64_BIT_SIGNED];",
          "665:  gint8 *num_end = &num_buf[CHARS_64_BIT_SIGNED];",
          "669:  if (buflen < 1)",
          "670:   return;",
          "673:     print its absolute value and, if the seconds part isn't",
          "674:     (the seconds part should be zero in that case), stick",
          "676:  nsecs = ns->nsecs;",
          "677:  if (nsecs < 0) {",
          "678:   nsecs = -nsecs;",
          "679:   if (ns->secs >= 0) {",
          "680:    buf[0] = '-';",
          "681:    buf++;",
          "682:    buflen--;",
          "683:   }",
          "686:  num_ptr = int64_to_str_back(num_end, ns->secs);",
          "688:  num_len = MIN((size_t)(num_end - num_ptr), buflen);",
          "689:  memcpy(buf, num_ptr, num_len);",
          "690:  buf += num_len;",
          "691:  buflen -= num_len;",
          "693:  switch (precision) {",
          "695:  case 0:",
          "699:   num_ptr = NULL;",
          "700:   break;",
          "709:       ((guint32)nsecs) / 100000000, 1);",
          "",
          "[Added Lines]",
          "659: format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision)",
          "661:  gsize decimal_point_len;",
          "662:  gint8 num_buf[CHARS_NANOSECONDS];",
          "663:  gint8 *num_end = &num_buf[CHARS_NANOSECONDS];",
          "667:  ws_assert(precision != 0);",
          "669:  if (buflen == 0) {",
          "674:   return;",
          "680:  decimal_point_len = g_strlcpy(buf, decimal_point, buflen);",
          "681:  if (decimal_point_len >= buflen) {",
          "686:   return;",
          "687:  }",
          "688:  buf += decimal_point_len;",
          "689:  buflen -= decimal_point_len;",
          "706:  switch (precision) {",
          "713:       nsecs / 100000000, precision);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "716:   num_ptr = uint_to_str_back_len(num_end,",
          "718:   break;",
          "720:  case 3:",
          "",
          "[Removed Lines]",
          "717:       ((guint32)nsecs) / 10000000, 2);",
          "",
          "[Added Lines]",
          "721:       nsecs / 10000000, precision);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:   num_ptr = uint_to_str_back_len(num_end,",
          "726:   break;",
          "728:  case 4:",
          "",
          "[Removed Lines]",
          "725:       ((guint32)nsecs) / 1000000, 3);",
          "",
          "[Added Lines]",
          "729:       nsecs / 1000000, precision);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:   num_ptr = uint_to_str_back_len(num_end,",
          "734:   break;",
          "736:  case 5:",
          "",
          "[Removed Lines]",
          "733:       ((guint32)nsecs) / 100000, 4);",
          "",
          "[Added Lines]",
          "737:       nsecs / 100000, precision);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:   num_ptr = uint_to_str_back_len(num_end,",
          "742:   break;",
          "744:  case 6:",
          "",
          "[Removed Lines]",
          "741:       ((guint32)nsecs) / 10000, 5);",
          "",
          "[Added Lines]",
          "745:       nsecs / 10000, precision);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "748:   num_ptr = uint_to_str_back_len(num_end,",
          "750:   break;",
          "752:  case 7:",
          "",
          "[Removed Lines]",
          "749:       ((guint32)nsecs) / 1000, 6);",
          "",
          "[Added Lines]",
          "753:       nsecs / 1000, precision);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "756:   num_ptr = uint_to_str_back_len(num_end,",
          "758:   break;",
          "760:  case 8:",
          "",
          "[Removed Lines]",
          "757:       ((guint32)nsecs) / 100, 7);",
          "",
          "[Added Lines]",
          "761:       nsecs / 100, precision);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "764:   num_ptr = uint_to_str_back_len(num_end,",
          "766:   break;",
          "768:  case 9:",
          "773:   break;",
          "775:  default:",
          "",
          "[Removed Lines]",
          "765:       ((guint32)nsecs) / 10, 8);",
          "772:   num_ptr = uint_to_str_back_len(num_end, (guint32)nsecs, 9);",
          "",
          "[Added Lines]",
          "769:       nsecs / 10, precision);",
          "776:   num_ptr = uint_to_str_back_len(num_end, nsecs,",
          "777:       precision);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "777:   break;",
          "778:  }",
          "788:  }",
          "794: }",
          "796: void",
          "",
          "[Removed Lines]",
          "780:  if (num_ptr != NULL)",
          "781:  {",
          "784:   num_len = MIN((size_t)(num_end - num_ptr), buflen);",
          "785:   memcpy(buf, num_ptr, num_len);",
          "786:   buf += num_len;",
          "787:   buflen -= num_len;",
          "791:  if (buflen == 0)",
          "792:   buf--;",
          "",
          "[Added Lines]",
          "793:  num_len = MIN((size_t)(num_end - num_ptr), buflen - 1);",
          "794:  if (num_len == 0) {",
          "798:   return;",
          "799:  }",
          "804:  memcpy(buf, num_ptr, num_len);",
          "810: }",
          "812: void",
          "813: display_epoch_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "814: {",
          "815:  display_signed_time(buf, buflen, ns, precision);",
          "816: }",
          "818: void",
          "819: display_signed_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "820: {",
          "821:  int nsecs;",
          "823:  gint8 num_buf[CHARS_64_BIT_SIGNED];",
          "824:  gint8 *num_end = &num_buf[CHARS_64_BIT_SIGNED];",
          "825:  gint8 *num_ptr;",
          "826:  size_t num_len;",
          "828:  if (buflen < 1)",
          "829:   return;",
          "832:     print its absolute value and, if the seconds part isn't",
          "833:     (the seconds part should be zero in that case), stick",
          "835:  nsecs = ns->nsecs;",
          "836:  if (nsecs < 0) {",
          "837:   nsecs = -nsecs;",
          "838:   if (ns->secs >= 0) {",
          "839:    buf[0] = '-';",
          "840:    buf++;",
          "841:    buflen--;",
          "842:   }",
          "843:  }",
          "848:  num_ptr = int64_to_str_back(num_end, ns->secs);",
          "858:  num_len = MIN((size_t)(num_end - num_ptr), buflen - 1);",
          "859:  if (num_len == 0) {",
          "863:   return;",
          "864:  }",
          "869:  memcpy(buf, num_ptr, num_len);",
          "870:  buf += num_len;",
          "871:  buflen -= num_len;",
          "873:  if (precision == 0) {",
          "880:   return;",
          "886:  format_fractional_part_nsecs(buf, buflen, (guint32)nsecs, \".\", precision);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "839:  ptr += num_chars;",
          "840:  buf_remaining -= num_chars;",
          "945:  }",
          "946: }",
          "",
          "[Removed Lines]",
          "842:  switch (precision) {",
          "844:  case 0:",
          "848:   break;",
          "850:  case 1:",
          "856:   snprintf(ptr, buf_remaining,",
          "857:       \"%s%01d\",",
          "858:       decimal_point,",
          "859:       (guint32)ns->nsecs / 100000000);",
          "860:   break;",
          "862:  case 2:",
          "866:   snprintf(ptr, buf_remaining,",
          "867:       \"%s%02d\",",
          "868:       decimal_point,",
          "869:       (guint32)ns->nsecs / 10000000);",
          "870:   break;",
          "872:  case 3:",
          "876:   snprintf(ptr, buf_remaining,",
          "877:       \"%s%03d\",",
          "878:       decimal_point,",
          "879:       (guint32)ns->nsecs / 1000000);",
          "880:   break;",
          "882:  case 4:",
          "886:   snprintf(ptr, buf_remaining,",
          "887:       \"%s%04d\",",
          "888:       decimal_point,",
          "889:       (guint32)ns->nsecs / 100000);",
          "890:   break;",
          "892:  case 5:",
          "896:   snprintf(ptr, buf_remaining,",
          "897:       \"%s%05d\",",
          "898:       decimal_point,",
          "899:       (guint32)ns->nsecs / 10000);",
          "900:   break;",
          "902:  case 6:",
          "906:   snprintf(ptr, buf_remaining,",
          "907:       \"%s%06d\",",
          "908:       decimal_point,",
          "909:       (guint32)ns->nsecs / 1000);",
          "910:   break;",
          "912:  case 7:",
          "916:   snprintf(ptr, buf_remaining,",
          "917:       \"%s%07d\",",
          "918:       decimal_point,",
          "919:       (guint32)ns->nsecs / 100);",
          "920:   break;",
          "922:  case 8:",
          "926:   snprintf(ptr, buf_remaining,",
          "927:       \"%s%08d\",",
          "928:       decimal_point,",
          "929:       (guint32)ns->nsecs / 10);",
          "930:   break;",
          "932:  case 9:",
          "936:   snprintf(ptr, buf_remaining,",
          "937:       \"%s%09d\",",
          "938:       decimal_point,",
          "939:       (guint32)ns->nsecs);",
          "940:   break;",
          "942:  default:",
          "943:   ws_assert_not_reached();",
          "944:   break;",
          "",
          "[Added Lines]",
          "935:  if (precision == 0) {",
          "939:   return;",
          "945:  format_fractional_part_nsecs(ptr, buf_remaining, (guint32)ns->nsecs, decimal_point, precision);",
          "",
          "---------------"
        ],
        "wsutil/to_str.h||wsutil/to_str.h": [
          "File: wsutil/to_str.h -> wsutil/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: WS_DLL_PUBLIC gchar *eui64_to_str(wmem_allocator_t *scope, const guint64 ad);",
          "302: WS_DLL_PUBLIC void display_epoch_time(gchar *, size_t, const nstime_t *, int);",
          "304: WS_DLL_PUBLIC void display_signed_time(gchar *, size_t, const nstime_t *, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: WS_DLL_PUBLIC void format_fractional_part_nsecs(gchar *, size_t, guint32, const char *, int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7325784552fceba971ab9d75644f6566784eea0",
      "candidate_info": {
        "commit_hash": "b7325784552fceba971ab9d75644f6566784eea0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b7325784552fceba971ab9d75644f6566784eea0",
        "files": [
          "epan/print.c",
          "epan/print.h",
          "wsutil/str_util.c",
          "wsutil/str_util.h",
          "wsutil/strtoi.c",
          "wsutil/strtoi.h",
          "wsutil/to_str.c",
          "wsutil/to_str.h"
        ],
        "message": "wsutil: Convert string modules to C99 types\n\nPing #19116",
        "before_after_code_files": [
          "epan/print.c||epan/print.c",
          "epan/print.h||epan/print.h",
          "wsutil/str_util.c||wsutil/str_util.c",
          "wsutil/str_util.h||wsutil/str_util.h",
          "wsutil/strtoi.c||wsutil/strtoi.c",
          "wsutil/strtoi.h||wsutil/strtoi.h",
          "wsutil/to_str.c||wsutil/to_str.c",
          "wsutil/to_str.h||wsutil/to_str.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ],
          "candidate": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/print.c||epan/print.c": [
          "File: epan/print.c -> epan/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: static const guint8 *get_field_data(GSList *src_list, field_info *fi);",
          "92: static void pdml_write_field_hex_value(write_pdml_data *pdata, field_info *fi);",
          "93: static void json_write_field_hex_value(write_json_data *pdata, field_info *fi);",
          "95:                                       guint length, packet_char_enc encoding,",
          "96:                                       guint hexdump_options);",
          "97: static void write_specified_fields(fields_format format,",
          "",
          "[Removed Lines]",
          "94: static gboolean print_hex_data_buffer(print_stream_t *stream, const guchar *cp,",
          "",
          "[Added Lines]",
          "94: static bool print_hex_data_buffer(print_stream_t *stream, const guchar *cp,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: }",
          "139: gboolean",
          "141:                  epan_dissect_t *edt, GHashTable *output_only_tables,",
          "142:                  print_stream_t *stream)",
          "143: {",
          "",
          "[Removed Lines]",
          "140: proto_tree_print(print_dissections_e print_dissections, gboolean print_hex,",
          "",
          "[Added Lines]",
          "140: proto_tree_print(print_dissections_e print_dissections, bool print_hex,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356: void",
          "357: write_ek_proto_tree(output_fields_t* fields,",
          "359:                     epan_dissect_t *edt,",
          "360:                     column_info *cinfo,",
          "361:                     FILE *fh)",
          "",
          "[Removed Lines]",
          "358:                     gboolean print_summary, gboolean print_hex,",
          "",
          "[Added Lines]",
          "358:                     bool print_summary, bool print_hex,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "737: void",
          "738: write_json_proto_tree(output_fields_t* fields,",
          "739:                       print_dissections_e print_dissections,",
          "741:                       epan_dissect_t *edt, column_info *cinfo,",
          "742:                       proto_node_children_grouper_func node_children_grouper,",
          "743:                       json_dumper *dumper)",
          "",
          "[Removed Lines]",
          "740:                       gboolean print_hex,",
          "",
          "[Added Lines]",
          "740:                       bool print_hex,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1958:     }",
          "1959: }",
          "1962: print_hex_data(print_stream_t *stream, epan_dissect_t *edt, guint hexdump_options)",
          "1963: {",
          "1964:     gboolean      multiple_sources;",
          "",
          "[Removed Lines]",
          "1961: gboolean",
          "",
          "[Added Lines]",
          "1961: bool",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2003:     return TRUE;",
          "2004: }",
          "2007: {",
          "2008:     return print_line(stream, 0, line);",
          "2009: }",
          "2012:                                       guint length, packet_char_enc encoding,",
          "2013:                                       guint hexdump_options)",
          "2014: {",
          "",
          "[Removed Lines]",
          "2006: static gboolean print_hex_data_line(void *stream, const char *line)",
          "2011: static gboolean print_hex_data_buffer(print_stream_t *stream, const guchar *cp,",
          "",
          "[Added Lines]",
          "2006: static bool print_hex_data_line(void *stream, const char *line)",
          "2011: static bool print_hex_data_buffer(print_stream_t *stream, const guchar *cp,",
          "",
          "---------------"
        ],
        "epan/print.h||epan/print.h": [
          "File: epan/print.h -> epan/print.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: WS_DLL_PUBLIC gboolean proto_tree_print(print_dissections_e print_dissections,",
          "81:                                         epan_dissect_t *edt,",
          "82:                                         GHashTable *output_only_tables,",
          "83:                                         print_stream_t *stream);",
          "",
          "[Removed Lines]",
          "80:                                         gboolean print_hex_data,",
          "",
          "[Added Lines]",
          "80:                                         bool print_hex_data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: WS_DLL_PUBLIC void write_pdml_preamble(FILE *fh, const gchar* filename);",
          "98: WS_DLL_PUBLIC void write_pdml_proto_tree(output_fields_t* fields, epan_dissect_t *edt, column_info *cinfo, FILE *fh, gboolean use_color);",
          "",
          "[Removed Lines]",
          "95: WS_DLL_PUBLIC gboolean print_hex_data(print_stream_t *stream, epan_dissect_t *edt, guint hexdump_options);",
          "",
          "[Added Lines]",
          "95: WS_DLL_PUBLIC bool print_hex_data(print_stream_t *stream, epan_dissect_t *edt, guint hexdump_options);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: WS_DLL_PUBLIC json_dumper write_json_preamble(FILE *fh);",
          "108: WS_DLL_PUBLIC void write_json_proto_tree(output_fields_t* fields,",
          "109:                                          print_dissections_e print_dissections,",
          "111:                                          epan_dissect_t *edt,",
          "112:                                          column_info *cinfo,",
          "113:                                          proto_node_children_grouper_func node_children_grouper,",
          "",
          "[Removed Lines]",
          "110:                                          gboolean print_hex_data,",
          "",
          "[Added Lines]",
          "110:                                          bool print_hex_data,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115: WS_DLL_PUBLIC void write_json_finale(json_dumper *dumper);",
          "117: WS_DLL_PUBLIC void write_ek_proto_tree(output_fields_t* fields,",
          "120:                                        epan_dissect_t *edt,",
          "121:                                        column_info *cinfo, FILE *fh);",
          "",
          "[Removed Lines]",
          "118:                                        gboolean print_summary,",
          "119:                                        gboolean print_hex_data,",
          "",
          "[Added Lines]",
          "118:                                        bool print_summary,",
          "119:                                        bool print_hex_data,",
          "",
          "---------------"
        ],
        "wsutil/str_util.c||wsutil/str_util.c": [
          "File: wsutil/str_util.c -> wsutil/str_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static const char hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7',",
          "23:                               '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };",
          "27: {",
          "29:     va_list args;",
          "34:     if (!first)",
          "35:         return NULL;",
          "37:     len = 1 + strlen(first);",
          "38:     va_start(args, first);",
          "40:         len += strlen(s);",
          "41:     }",
          "42:     va_end(args);",
          "46:     ptr = g_stpcpy(ptr, first);",
          "47:     va_start(args, first);",
          "49:         ptr = g_stpcpy(ptr, s);",
          "50:     }",
          "51:     va_end(args);",
          "",
          "[Removed Lines]",
          "25: gchar *",
          "26: wmem_strconcat(wmem_allocator_t *allocator, const gchar *first, ...)",
          "28:     gsize   len;",
          "30:     gchar   *s;",
          "31:     gchar   *concat;",
          "32:     gchar   *ptr;",
          "39:     while ((s = va_arg(args, gchar*))) {",
          "44:     ptr = concat = (gchar *)wmem_alloc(allocator, len);",
          "48:     while ((s = va_arg(args, gchar*))) {",
          "",
          "[Added Lines]",
          "25: char *",
          "26: wmem_strconcat(wmem_allocator_t *allocator, const char *first, ...)",
          "28:     size_t  len;",
          "30:     char    *s;",
          "31:     char    *concat;",
          "32:     char    *ptr;",
          "39:     while ((s = va_arg(args, char*))) {",
          "44:     ptr = concat = (char *)wmem_alloc(allocator, len);",
          "48:     while ((s = va_arg(args, char*))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     return concat;",
          "54: }",
          "57: wmem_strjoin(wmem_allocator_t *allocator,",
          "59: {",
          "61:     va_list args;",
          "67:     if (!first)",
          "68:         return NULL;",
          "",
          "[Removed Lines]",
          "56: gchar *",
          "58:              const gchar *separator, const gchar *first, ...)",
          "60:     gsize   len;",
          "62:     gsize separator_len;",
          "63:     gchar   *s;",
          "64:     gchar   *concat;",
          "65:     gchar   *ptr;",
          "",
          "[Added Lines]",
          "56: char *",
          "58:              const char *separator, const char *first, ...)",
          "60:     size_t  len;",
          "62:     size_t separator_len;",
          "63:     char    *s;",
          "64:     char    *concat;",
          "65:     char    *ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     va_start(args, first);",
          "79:         len += (separator_len + strlen(s));",
          "80:     }",
          "81:     va_end(args);",
          "84:     ptr = g_stpcpy(ptr, first);",
          "85:     va_start(args, first);",
          "87:         ptr = g_stpcpy(ptr, separator);",
          "88:         ptr = g_stpcpy(ptr, s);",
          "89:     }",
          "",
          "[Removed Lines]",
          "78:     while ((s = va_arg(args, gchar*))) {",
          "83:     ptr = concat = (gchar *)wmem_alloc(allocator, len);",
          "86:     while ((s = va_arg(args, gchar*))) {",
          "",
          "[Added Lines]",
          "78:     while ((s = va_arg(args, char*))) {",
          "83:     ptr = concat = (char *)wmem_alloc(allocator, len);",
          "86:     while ((s = va_arg(args, char*))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94: }",
          "97: wmem_strjoinv(wmem_allocator_t *allocator,",
          "99: {",
          "102:     if (!str_array)",
          "103:         return NULL;",
          "",
          "[Removed Lines]",
          "96: gchar *",
          "98:               const gchar *separator, gchar **str_array)",
          "100:     gchar *string = NULL;",
          "",
          "[Added Lines]",
          "96: char *",
          "98:               const char *separator, char **str_array)",
          "100:     char *string = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:     }",
          "109:     if (str_array[0]) {",
          "114:         separator_len = strlen(separator);",
          "",
          "[Removed Lines]",
          "110:         gint i;",
          "111:         gchar *ptr;",
          "112:         gsize len, separator_len;",
          "",
          "[Added Lines]",
          "110:         int i;",
          "111:         char *ptr;",
          "112:         size_t len, separator_len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "122:         }",
          "126:         ptr = g_stpcpy(string, str_array[0]);",
          "127:         for (i = 1; str_array[i] != NULL; i++) {",
          "128:             ptr = g_stpcpy(ptr, separator);",
          "",
          "[Removed Lines]",
          "125:         string = (gchar *)wmem_alloc(allocator, len);",
          "",
          "[Added Lines]",
          "125:         string = (char *)wmem_alloc(allocator, len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "135: }",
          "140: {",
          "148:     if (!src || !delimiter || !delimiter[0])",
          "149:         return NULL;",
          "152:     if (!src[0]) {",
          "154:         return vec;",
          "155:     }",
          "157:     splitted = wmem_strdup(allocator, src);",
          "160:     if (max_tokens < 1)",
          "161:         max_tokens = INT_MAX;",
          "",
          "[Removed Lines]",
          "137: gchar **",
          "138: wmem_strsplit(wmem_allocator_t *allocator, const gchar *src,",
          "139:         const gchar *delimiter, int max_tokens)",
          "141:     gchar *splitted;",
          "142:     gchar *s;",
          "143:     guint tokens;",
          "144:     guint sep_len;",
          "145:     guint i;",
          "146:     gchar **vec;",
          "153:         vec = wmem_new0(allocator, gchar *);",
          "158:     sep_len = (guint)strlen(delimiter);",
          "",
          "[Added Lines]",
          "137: char **",
          "138: wmem_strsplit(wmem_allocator_t *allocator, const char *src,",
          "139:         const char *delimiter, int max_tokens)",
          "141:     char *splitted;",
          "142:     char *s;",
          "143:     unsigned tokens;",
          "144:     unsigned sep_len;",
          "145:     unsigned i;",
          "146:     char **vec;",
          "153:         vec = wmem_new0(allocator, char *);",
          "158:     sep_len = (unsigned)strlen(delimiter);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "164:     s = splitted;",
          "165:     tokens = 1;",
          "167:         s += sep_len;",
          "168:         tokens++;",
          "169:     }",
          "174:     s = splitted;",
          "175:     vec[0] = s;",
          "176:     tokens = 1;",
          "178:         for (i = 0; i < sep_len; i++)",
          "179:             s[i] = '\\0';",
          "180:         s += sep_len;",
          "",
          "[Removed Lines]",
          "166:     while (tokens < (guint)max_tokens && (s = strstr(s, delimiter))) {",
          "171:     vec = wmem_alloc_array(allocator, gchar *, tokens + 1);",
          "177:     while (tokens < (guint)max_tokens && (s = strstr(s, delimiter))) {",
          "",
          "[Added Lines]",
          "166:     while (tokens < (unsigned)max_tokens && (s = strstr(s, delimiter))) {",
          "171:     vec = wmem_alloc_array(allocator, char *, tokens + 1);",
          "177:     while (tokens < (unsigned)max_tokens && (s = strstr(s, delimiter))) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "197: {",
          "200:     g_return_val_if_fail (str != NULL, NULL);",
          "",
          "[Removed Lines]",
          "195: gchar*",
          "196: wmem_ascii_strdown(wmem_allocator_t *allocator, const gchar *str, gssize len)",
          "198:     gchar *result, *s;",
          "",
          "[Added Lines]",
          "195: char*",
          "196: wmem_ascii_strdown(wmem_allocator_t *allocator, const char *str, ssize_t len)",
          "198:     char *result, *s;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "234: }",
          "239: {",
          "242:     for (s = str; *s; s++)",
          "246:     return (str);",
          "247: }",
          "252: {",
          "255:     for (s = str; *s; s++)",
          "259:     return (str);",
          "260: }",
          "265: {",
          "269:     for(pos = 0; str[pos] != '\\0'; pos++){",
          "270:         if(!g_ascii_isprint(str[pos])){",
          "273:         }",
          "274:     }",
          "278: }",
          "283: {",
          "286:     if (!g_utf8_validate(str, length, NULL)) {",
          "288:     }",
          "290:     while (str < strend) {",
          "",
          "[Removed Lines]",
          "237: gchar *",
          "238: ascii_strdown_inplace(gchar *str)",
          "240:     gchar *s;",
          "250: gchar *",
          "251: ascii_strup_inplace(gchar *str)",
          "253:     gchar *s;",
          "263: gboolean",
          "264: isprint_string(const gchar *str)",
          "266:     guint pos;",
          "272:             return FALSE;",
          "277:     return TRUE;",
          "281: gboolean",
          "282: isprint_utf8_string(const gchar *str, const guint length)",
          "284:     const gchar *strend = str + length;",
          "287:         return FALSE;",
          "",
          "[Added Lines]",
          "237: char *",
          "238: ascii_strdown_inplace(char *str)",
          "240:     char *s;",
          "250: char *",
          "251: ascii_strup_inplace(char *str)",
          "253:     char *s;",
          "263: bool",
          "264: isprint_string(const char *str)",
          "266:     unsigned pos;",
          "272:             return false;",
          "277:     return true;",
          "281: bool",
          "282: isprint_utf8_string(const char *str, const unsigned length)",
          "284:     const char *strend = str + length;",
          "287:         return false;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "296:         if (!g_unichar_isprint(g_utf8_get_char(str))) {",
          "298:         }",
          "299:         str = g_utf8_next_char(str);",
          "300:     }",
          "303: }",
          "308: {",
          "312:     for(pos = 0; str[pos] != '\\0'; pos++){",
          "313:         if(!g_ascii_isdigit(str[pos])){",
          "316:         }",
          "317:     }",
          "321: }",
          "323: const char *",
          "",
          "[Removed Lines]",
          "297:             return FALSE;",
          "302:     return TRUE;",
          "306: gboolean",
          "307: isdigit_string(const guchar *str)",
          "309:     guint pos;",
          "315:             return FALSE;",
          "320:     return TRUE;",
          "",
          "[Added Lines]",
          "297:             return false;",
          "302:     return true;",
          "306: bool",
          "307: isdigit_string(const unsigned char *str)",
          "309:     unsigned pos;",
          "315:             return false;",
          "320:     return true;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "326: #ifdef HAVE_STRCASESTR",
          "327:     return strcasestr(haystack, needle);",
          "328: #else",
          "332:     while (hlen-- >= nlen) {",
          "333:         if (!g_ascii_strncasecmp(haystack, needle, nlen))",
          "",
          "[Removed Lines]",
          "329:     gsize hlen = strlen(haystack);",
          "330:     gsize nlen = strlen(needle);",
          "",
          "[Added Lines]",
          "329:     size_t hlen = strlen(haystack);",
          "330:     size_t nlen = strlen(needle);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "367:     wmem_strbuf_t *human_str = wmem_strbuf_new(allocator, NULL);",
          "368:     int power = 1000;",
          "369:     int pfx_off = 0;",
          "374:     if (thousands_grouping_fmt == NULL)",
          "375:         test_printf_thousands_grouping();",
          "",
          "[Removed Lines]",
          "370:     gboolean is_small = FALSE;",
          "371:     static const gchar *prefix[] = {\" T\", \" G\", \" M\", \" k\", \" Ti\", \" Gi\", \" Mi\", \" Ki\"};",
          "372:     gchar *ret_val;",
          "",
          "[Added Lines]",
          "370:     bool is_small = false;",
          "371:     static const char *prefix[] = {\" T\", \" G\", \" M\", \" k\", \" Ti\", \" Gi\", \" Mi\", \" Ki\"};",
          "372:     char *ret_val;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "393:         wmem_strbuf_append(human_str, prefix[pfx_off+3]);",
          "394:     } else {",
          "395:         wmem_strbuf_append_printf(human_str, thousands_grouping_fmt, size);",
          "397:     }",
          "399:     switch (unit) {",
          "",
          "[Removed Lines]",
          "396:         is_small = TRUE;",
          "",
          "[Added Lines]",
          "396:         is_small = true;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "425:     return g_strchomp(ret_val);",
          "426: }",
          "430: {",
          "431:     return g_ascii_isprint(c) ? c : '.';",
          "432: }",
          "",
          "[Removed Lines]",
          "428: gchar",
          "429: printable_char_or_period(gchar c)",
          "",
          "[Added Lines]",
          "428: char",
          "429: printable_char_or_period(char c)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "574: #define FMTBUF_VARS \\",
          "",
          "[Removed Lines]",
          "575:     gchar *fmtbuf = (gchar*)wmem_alloc(allocator, INITIAL_FMTBUF_SIZE); \\",
          "576:     guint fmtbuf_len = INITIAL_FMTBUF_SIZE; \\",
          "577:     guint column = 0",
          "",
          "[Added Lines]",
          "575:     char *fmtbuf = (char*)wmem_alloc(allocator, INITIAL_FMTBUF_SIZE); \\",
          "576:     unsigned fmtbuf_len = INITIAL_FMTBUF_SIZE; \\",
          "577:     unsigned column = 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "595:         fmtbuf_len *= 2; \\",
          "597:     }",
          "",
          "[Removed Lines]",
          "596:         fmtbuf = (gchar *)wmem_realloc(allocator, fmtbuf, fmtbuf_len); \\",
          "",
          "[Added Lines]",
          "596:         fmtbuf = (char *)wmem_realloc(allocator, fmtbuf, fmtbuf_len); \\",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "628: #define FMTBUF_ENDSTR \\",
          "629:     fmtbuf[column] = '\\0'",
          "632: format_text_internal(wmem_allocator_t *allocator,",
          "635: {",
          "636:     FMTBUF_VARS;",
          "640:     while (string < stringend) {",
          "",
          "[Removed Lines]",
          "631: static gchar *",
          "633:                         const guchar *string, size_t len,",
          "634:                         gboolean replace_space)",
          "637:     const guchar *stringend = string + len;",
          "638:     guchar c;",
          "",
          "[Added Lines]",
          "631: static char *",
          "633:                         const unsigned char *string, size_t len,",
          "634:                         bool replace_space)",
          "637:     const unsigned char *stringend = string + len;",
          "638:     unsigned char c;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "721:             int utf8_len;",
          "723:             gunichar uc;",
          "726:             if ((c & 0xe0) == 0xc0) {",
          "",
          "[Removed Lines]",
          "722:             guchar mask;",
          "724:             guchar first;",
          "",
          "[Added Lines]",
          "722:             unsigned char mask;",
          "724:             unsigned char first;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "958: format_text(wmem_allocator_t *allocator,",
          "959:                         const char *string, size_t len)",
          "960: {",
          "962: }",
          "",
          "[Removed Lines]",
          "961:     return format_text_internal(allocator, string, len, FALSE);",
          "",
          "[Added Lines]",
          "961:     return format_text_internal(allocator, string, len, false);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "982: char *",
          "983: format_text_string(wmem_allocator_t* allocator, const char *string)",
          "984: {",
          "986: }",
          "",
          "[Removed Lines]",
          "985:     return format_text_internal(allocator, string, strlen(string), FALSE);",
          "",
          "[Added Lines]",
          "985:     return format_text_internal(allocator, string, strlen(string), false);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "994: char *",
          "995: format_text_wsp(wmem_allocator_t* allocator, const char *string, size_t len)",
          "996: {",
          "998: }",
          "",
          "[Removed Lines]",
          "997:     return format_text_internal(allocator, string, len, TRUE);",
          "",
          "[Added Lines]",
          "997:     return format_text_internal(allocator, string, len, true);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1077: #if 0",
          "1079:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,",
          "1080:     0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,",
          "1081:     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,",
          "",
          "[Removed Lines]",
          "1078: static const guint8 ASCII_translate_EBCDIC [ 256 ] = {",
          "",
          "[Added Lines]",
          "1078: static const uint8_t ASCII_translate_EBCDIC [ 256 ] = {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1111: };",
          "1113: void",
          "1115: {",
          "1119:     bufptr = buf;",
          "",
          "[Removed Lines]",
          "1114: ASCII_to_EBCDIC(guint8 *buf, guint bytes)",
          "1116:     guint    i;",
          "1117:     guint8    *bufptr;",
          "",
          "[Added Lines]",
          "1114: ASCII_to_EBCDIC(uint8_t *buf, unsigned bytes)",
          "1116:     unsigned i;",
          "1117:     uint8_t   *bufptr;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1123:     }",
          "1124: }",
          "1128: {",
          "1129:     return ASCII_translate_EBCDIC[c];",
          "1130: }",
          "1131: #endif",
          "1134:     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,",
          "1135:     0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,",
          "1136:     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,",
          "",
          "[Removed Lines]",
          "1126: guint8",
          "1127: ASCII_to_EBCDIC1(guint8 c)",
          "1133: static const guint8 EBCDIC_translate_ASCII [ 256 ] = {",
          "",
          "[Added Lines]",
          "1126: uint8_t",
          "1127: ASCII_to_EBCDIC1(uint8_t c)",
          "1133: static const uint8_t EBCDIC_translate_ASCII [ 256 ] = {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1166: };",
          "1168: void",
          "1170: {",
          "1174:     bufptr = buf;",
          "",
          "[Removed Lines]",
          "1169: EBCDIC_to_ASCII(guint8 *buf, guint bytes)",
          "1171:     guint   i;",
          "1172:     guint8 *bufptr;",
          "",
          "[Added Lines]",
          "1169: EBCDIC_to_ASCII(uint8_t *buf, unsigned bytes)",
          "1171:     unsigned   i;",
          "1172:     uint8_t *bufptr;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1178:     }",
          "1179: }",
          "1183: {",
          "1184:     return EBCDIC_translate_ASCII[c];",
          "1185: }",
          "",
          "[Removed Lines]",
          "1181: guint8",
          "1182: EBCDIC_to_ASCII1(guint8 c)",
          "",
          "[Added Lines]",
          "1181: uint8_t",
          "1182: EBCDIC_to_ASCII1(uint8_t c)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1207:                                    offset, 2 blanks separating offset",
          "1213:                                     hex_dump_enc encoding,",
          "1215: {",
          "1216:     register unsigned int ad, i, j, k, l;",
          "1219:     unsigned int          use_digits;",
          "1222:         '0', '1', '2', '3', '4', '5', '6', '7',",
          "1223:         '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
          "",
          "[Removed Lines]",
          "1210: gboolean",
          "1211: hex_dump_buffer(gboolean (*print_line)(void *, const char *), void *fp,",
          "1212:                                     const guchar *cp, guint length,",
          "1214:                                     guint ascii_option)",
          "1217:     guchar                c;",
          "1218:     gchar                 line[MAX_LINE_LEN + 1];",
          "1221:     static gchar binhex[16] = {",
          "",
          "[Added Lines]",
          "1210: bool",
          "1211: hex_dump_buffer(bool (*print_line)(void *, const char *), void *fp,",
          "1212:                                     const unsigned char *cp, unsigned length,",
          "1214:                                     unsigned ascii_option)",
          "1217:     unsigned char         c;",
          "1218:     char                  line[MAX_LINE_LEN + 1];",
          "1221:     static char binhex[16] = {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1287:                 line[k++] = '|';",
          "1288:             line[k] = '\\0';",
          "1289:             if (!print_line(fp, line))",
          "1291:             ad += 16;",
          "1292:         }",
          "1293:     }",
          "1295: }",
          "",
          "[Removed Lines]",
          "1290:                 return FALSE;",
          "1294:     return TRUE;",
          "",
          "[Added Lines]",
          "1290:                 return false;",
          "1294:     return true;",
          "",
          "---------------"
        ],
        "wsutil/str_util.h||wsutil/str_util.h": [
          "File: wsutil/str_util.h -> wsutil/str_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: WS_DLL_PUBLIC",
          "24: G_GNUC_MALLOC G_GNUC_NULL_TERMINATED;",
          "26: WS_DLL_PUBLIC",
          "28: wmem_strjoin(wmem_allocator_t *allocator,",
          "30: G_GNUC_MALLOC G_GNUC_NULL_TERMINATED;",
          "32: WS_DLL_PUBLIC",
          "34: wmem_strjoinv(wmem_allocator_t *allocator,",
          "36: G_GNUC_MALLOC;",
          "",
          "[Removed Lines]",
          "22: gchar *",
          "23: wmem_strconcat(wmem_allocator_t *allocator, const gchar *first, ...)",
          "27: gchar *",
          "29:              const gchar *separator, const gchar *first, ...)",
          "33: gchar *",
          "35:               const gchar *separator, gchar **str_array)",
          "",
          "[Added Lines]",
          "22: char *",
          "23: wmem_strconcat(wmem_allocator_t *allocator, const char *first, ...)",
          "27: char *",
          "29:              const char *separator, const char *first, ...)",
          "33: char *",
          "35:               const char *separator, char **str_array)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "50: gchar **",
          "51: wmem_strsplit(wmem_allocator_t *allocator, const gchar *src,",
          "52:         const gchar *delimiter, int max_tokens);",
          "",
          "[Added Lines]",
          "50: char **",
          "51: wmem_strsplit(wmem_allocator_t *allocator, const char *src,",
          "52:         const char *delimiter, int max_tokens);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "70: gchar*",
          "71: wmem_ascii_strdown(wmem_allocator_t *allocator, const gchar *str, gssize len);",
          "",
          "[Added Lines]",
          "70: char*",
          "71: wmem_ascii_strdown(wmem_allocator_t *allocator, const char *str, ssize_t len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "89: gchar *ascii_strdown_inplace(gchar *str);",
          "",
          "[Added Lines]",
          "89: char *ascii_strdown_inplace(char *str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: WS_DLL_PUBLIC",
          "114: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "107: gchar *ascii_strup_inplace(gchar *str);",
          "115: gboolean isprint_string(const gchar *str);",
          "",
          "[Added Lines]",
          "107: char *ascii_strup_inplace(char *str);",
          "115: bool isprint_string(const char *str);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143: WS_DLL_PUBLIC",
          "151: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "144: gboolean isprint_utf8_string(const gchar *str, const guint length);",
          "152: gboolean isdigit_string(const guchar *str);",
          "",
          "[Added Lines]",
          "144: bool isprint_utf8_string(const char *str, const unsigned length);",
          "152: bool isdigit_string(const unsigned char *str);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:     format_size_wmem(NULL, size, unit, flags)",
          "207: WS_DLL_PUBLIC",
          "210: WS_DLL_PUBLIC WS_RETNONNULL",
          "211: const char *ws_strerrorname_r(int errnum, char *buf, size_t buf_size);",
          "",
          "[Removed Lines]",
          "208: gchar printable_char_or_period(gchar c);",
          "",
          "[Added Lines]",
          "208: char printable_char_or_period(char c);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "330: char* ws_utf8_truncate(char *string, size_t len);",
          "332: WS_DLL_PUBLIC",
          "335: WS_DLL_PUBLIC",
          "339: typedef enum {",
          "",
          "[Removed Lines]",
          "333: void EBCDIC_to_ASCII(guint8 *buf, guint bytes);",
          "336: guint8 EBCDIC_to_ASCII1(guint8 c);",
          "",
          "[Added Lines]",
          "333: void EBCDIC_to_ASCII(uint8_t *buf, unsigned bytes);",
          "336: uint8_t EBCDIC_to_ASCII1(uint8_t c);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "355: WS_DLL_PUBLIC",
          "358:                                     hex_dump_enc encoding,",
          "362: #define plurality(d,s,p) ((d) == 1 ? (s) : (p))",
          "",
          "[Removed Lines]",
          "356: gboolean hex_dump_buffer(gboolean (*print_line)(void *, const char *), void *fp,",
          "357:                                     const guchar *cp, guint length,",
          "359:                                     guint ascii_option);",
          "",
          "[Added Lines]",
          "356: bool hex_dump_buffer(bool (*print_line)(void *, const char *), void *fp,",
          "357:                                     const unsigned char *cp, unsigned length,",
          "359:                                     unsigned ascii_option);",
          "",
          "---------------"
        ],
        "wsutil/strtoi.c||wsutil/strtoi.c": [
          "File: wsutil/strtoi.c -> wsutil/strtoi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <errno.h>",
          "17: #include <wsutil/ws_assert.h>",
          "20: {",
          "24:  ws_assert(cint);",
          "26:  if (!str) {",
          "27:   errno = EINVAL;",
          "29:  }",
          "31:  errno = 0;",
          "",
          "[Removed Lines]",
          "19: gboolean ws_strtoi64(const gchar* str, const gchar** endptr, gint64* cint)",
          "21:  gchar* end;",
          "22:  gint64 val;",
          "28:   return FALSE;",
          "",
          "[Added Lines]",
          "19: bool ws_strtoi64(const char* str, const char** endptr, int64_t* cint)",
          "21:  char* end;",
          "22:  int64_t val;",
          "28:   return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   if (endptr != NULL)",
          "37:   errno = EINVAL;",
          "39:  }",
          "",
          "[Removed Lines]",
          "38:   return FALSE;",
          "40:  if ((val == G_MAXINT64 || val == G_MININT64) && errno == ERANGE) {",
          "",
          "[Added Lines]",
          "38:   return false;",
          "40:  if ((val == INT64_MAX || val == INT64_MIN) && errno == ERANGE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   if (endptr != NULL)",
          "50:  }",
          "51:  if (endptr != NULL)",
          "55: }",
          "57: #define DEFINE_WS_STRTOI_BITS(bits) \\",
          "59: { \\",
          "61:  if (!ws_strtoi64(str, endptr, &val)) { \\",
          "",
          "[Removed Lines]",
          "49:   return FALSE;",
          "54:  return TRUE;",
          "58: gboolean ws_strtoi##bits(const gchar* str, const gchar** endptr, gint##bits* cint) \\",
          "60:  gint64 val = 0; \\",
          "",
          "[Added Lines]",
          "49:   return false;",
          "54:  return true;",
          "58: bool ws_strtoi##bits(const char* str, const char** endptr, int##bits##_t* cint) \\",
          "60:  int64_t val = 0; \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   if (errno == ERANGE) { \\",
          "72:    if (val < 0) \\",
          "74:    else \\",
          "76:   } else \\",
          "79:  } \\",
          "86:   errno = ERANGE; \\",
          "88:  } \\",
          "95:   errno = ERANGE; \\",
          "97:  } \\",
          "100: }",
          "102: DEFINE_WS_STRTOI_BITS(32)",
          "103: DEFINE_WS_STRTOI_BITS(16)",
          "104: DEFINE_WS_STRTOI_BITS(8)",
          "107: {",
          "109:  if (!ws_strtoi64(str, endptr, &val)) {",
          "",
          "[Removed Lines]",
          "78:   return FALSE; \\",
          "80:  if (val < G_MININT##bits) { \\",
          "87:   return FALSE; \\",
          "89:  if (val > G_MAXINT##bits) { \\",
          "96:   return FALSE; \\",
          "99:  return TRUE; \\",
          "106: gboolean ws_strtoi(const gchar* str, const gchar** endptr, gint* cint)",
          "108:  gint64 val = 0;",
          "",
          "[Added Lines]",
          "78:   return false; \\",
          "80:  if (val < INT##bits##_MIN) { \\",
          "87:   return false; \\",
          "89:  if (val > INT##bits##_MAX) { \\",
          "96:   return false; \\",
          "99:  return true; \\",
          "106: bool ws_strtoi(const char* str, const char** endptr, int* cint)",
          "108:  int64_t val = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:   if (errno == ERANGE) {",
          "120:    if (val < 0)",
          "122:    else",
          "124:   } else",
          "127:  }",
          "134:   errno = ERANGE;",
          "136:  }",
          "143:   errno = ERANGE;",
          "145:  }",
          "148: }",
          "151: {",
          "155:  ws_assert(cint);",
          "157:  if (!str) {",
          "158:   errno = EINVAL;",
          "160:  }",
          "162:  if (str[0] == '-' || str[0] == '+') {",
          "",
          "[Removed Lines]",
          "126:   return FALSE;",
          "128:  if (val < G_MININT) {",
          "135:   return FALSE;",
          "137:  if (val > G_MAXINT) {",
          "144:   return FALSE;",
          "147:  return TRUE;",
          "150: gboolean ws_basestrtou64(const gchar* str, const gchar** endptr, guint64* cint, int base)",
          "152:  gchar* end;",
          "153:  guint64 val;",
          "159:   return FALSE;",
          "",
          "[Added Lines]",
          "126:   return false;",
          "128:  if (val < INT_MIN) {",
          "135:   return false;",
          "137:  if (val > INT_MAX) {",
          "144:   return false;",
          "147:  return true;",
          "150: bool ws_basestrtou64(const char* str, const char** endptr, uint64_t* cint, int base)",
          "152:  char* end;",
          "153:  uint64_t val;",
          "159:   return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:   if (endptr != NULL)",
          "169:   errno = EINVAL;",
          "171:  }",
          "172:  errno = 0;",
          "173:  val = g_ascii_strtoull(str, &end, base);",
          "",
          "[Removed Lines]",
          "170:   return FALSE;",
          "",
          "[Added Lines]",
          "170:   return false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:   if (endptr != NULL)",
          "178:   errno = EINVAL;",
          "180:  }",
          "",
          "[Removed Lines]",
          "179:   return FALSE;",
          "181:  if (val == G_MAXUINT64 && errno == ERANGE) {",
          "",
          "[Added Lines]",
          "179:   return false;",
          "181:  if (val == UINT64_MAX && errno == ERANGE) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:   if (endptr != NULL)",
          "190:  }",
          "191:  if (endptr != NULL)",
          "195: }",
          "198: {",
          "199:  return ws_basestrtou64(str, endptr, cint, 10);",
          "200: }",
          "203: {",
          "204:  return ws_basestrtou64(str, endptr, cint, 16);",
          "205: }",
          "207: #define DEFINE_WS_STRTOU_BITS(bits) \\",
          "209: { \\",
          "211:  if (!ws_basestrtou64(str, endptr, &val, base)) { \\",
          "219:   if (errno == ERANGE) \\",
          "221:   else \\",
          "224:  } \\",
          "231:   errno = ERANGE; \\",
          "233:  } \\",
          "236: } \\",
          "237: \\",
          "239: { \\",
          "240:  return ws_basestrtou##bits(str, endptr, cint, 10); \\",
          "241: } \\",
          "242: \\",
          "244: { \\",
          "245:  return ws_basestrtou##bits(str, endptr, cint, 16); \\",
          "246: }",
          "",
          "[Removed Lines]",
          "189:   return FALSE;",
          "194:  return TRUE;",
          "197: gboolean ws_strtou64(const gchar* str, const gchar** endptr, guint64* cint)",
          "202: gboolean ws_hexstrtou64(const gchar* str, const gchar** endptr, guint64* cint)",
          "208: gboolean ws_basestrtou##bits(const gchar* str, const gchar** endptr, guint##bits* cint, int base) \\",
          "210:  guint64 val; \\",
          "223:   return FALSE; \\",
          "225:  if (val > G_MAXUINT##bits) { \\",
          "232:   return FALSE; \\",
          "235:  return TRUE; \\",
          "238: gboolean ws_strtou##bits(const gchar* str, const gchar** endptr, guint##bits* cint) \\",
          "243: gboolean ws_hexstrtou##bits(const gchar* str, const gchar** endptr, guint##bits* cint) \\",
          "",
          "[Added Lines]",
          "189:   return false;",
          "194:  return true;",
          "197: bool ws_strtou64(const char* str, const char** endptr, uint64_t* cint)",
          "202: bool ws_hexstrtou64(const char* str, const char** endptr, uint64_t* cint)",
          "208: bool ws_basestrtou##bits(const char* str, const char** endptr, uint##bits##_t* cint, int base) \\",
          "210:  uint64_t val; \\",
          "223:   return false; \\",
          "225:  if (val > UINT##bits##_MAX) { \\",
          "232:   return false; \\",
          "235:  return true; \\",
          "238: bool ws_strtou##bits(const char* str, const char** endptr, uint##bits##_t* cint) \\",
          "243: bool ws_hexstrtou##bits(const char* str, const char** endptr, uint##bits##_t* cint) \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "249: DEFINE_WS_STRTOU_BITS(16)",
          "250: DEFINE_WS_STRTOU_BITS(8)",
          "253: {",
          "255:  if (!ws_basestrtou64(str, endptr, &val, base)) {",
          "263:   if (errno == ERANGE)",
          "265:   else",
          "268:  }",
          "275:   errno = ERANGE;",
          "277:  }",
          "280: }",
          "283: {",
          "284:  return ws_basestrtou(str, endptr, cint, 10);",
          "285: }",
          "286: \\",
          "288: {",
          "289:  return ws_basestrtou(str, endptr, cint, 16);",
          "290: }",
          "",
          "[Removed Lines]",
          "252: gboolean ws_basestrtou(const gchar* str, const gchar** endptr, guint* cint, int base)",
          "254:  guint64 val;",
          "267:   return FALSE;",
          "269:  if (val > G_MAXUINT) {",
          "276:   return FALSE;",
          "279:  return TRUE;",
          "282: gboolean ws_strtou(const gchar* str, const gchar** endptr, guint* cint)",
          "287: gboolean ws_hexstrtou(const gchar* str, const gchar** endptr, guint* cint)",
          "",
          "[Added Lines]",
          "252: bool ws_basestrtou(const char* str, const char** endptr, unsigned* cint, int base)",
          "254:  uint64_t val;",
          "267:   return false;",
          "269:  if (val > UINT_MAX) {",
          "276:   return false;",
          "279:  return true;",
          "282: bool ws_strtou(const char* str, const char** endptr, unsigned* cint)",
          "287: bool ws_hexstrtou(const char* str, const char** endptr, unsigned* cint)",
          "",
          "---------------"
        ],
        "wsutil/strtoi.h||wsutil/strtoi.h": [
          "File: wsutil/strtoi.h -> wsutil/strtoi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #ifndef _WS_STRTOI_H",
          "14: #define _WS_STRTOI_H",
          "18: #include \"ws_symbol_export.h\"",
          "",
          "[Removed Lines]",
          "16: #include <glib.h>",
          "",
          "[Added Lines]",
          "16: #include <stdbool.h>",
          "17: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "36: WS_DLL_PUBLIC gboolean ws_strtoi64(const gchar* str, const gchar** endptr, gint64* cint);",
          "37: WS_DLL_PUBLIC gboolean ws_strtoi32(const gchar* str, const gchar** endptr, gint32* cint);",
          "38: WS_DLL_PUBLIC gboolean ws_strtoi16(const gchar* str, const gchar** endptr, gint16* cint);",
          "39: WS_DLL_PUBLIC gboolean ws_strtoi8 (const gchar* str, const gchar** endptr, gint8*  cint);",
          "40: WS_DLL_PUBLIC gboolean ws_strtoi (const gchar* str, const gchar** endptr, gint*  cint);",
          "42: WS_DLL_PUBLIC gboolean ws_strtou64(const gchar* str, const gchar** endptr, guint64* cint);",
          "43: WS_DLL_PUBLIC gboolean ws_strtou32(const gchar* str, const gchar** endptr, guint32* cint);",
          "44: WS_DLL_PUBLIC gboolean ws_strtou16(const gchar* str, const gchar** endptr, guint16* cint);",
          "45: WS_DLL_PUBLIC gboolean ws_strtou8 (const gchar* str, const gchar** endptr, guint8*  cint);",
          "46: WS_DLL_PUBLIC gboolean ws_strtou (const gchar* str, const gchar** endptr, guint*  cint);",
          "",
          "[Added Lines]",
          "37: WS_DLL_PUBLIC bool ws_strtoi64(const char* str, const char** endptr, int64_t* cint);",
          "38: WS_DLL_PUBLIC bool ws_strtoi32(const char* str, const char** endptr, int32_t* cint);",
          "39: WS_DLL_PUBLIC bool ws_strtoi16(const char* str, const char** endptr, int16_t* cint);",
          "40: WS_DLL_PUBLIC bool ws_strtoi8 (const char* str, const char** endptr, int8_t*  cint);",
          "41: WS_DLL_PUBLIC bool ws_strtoi (const char* str, const char** endptr, int*  cint);",
          "43: WS_DLL_PUBLIC bool ws_strtou64(const char* str, const char** endptr, uint64_t* cint);",
          "44: WS_DLL_PUBLIC bool ws_strtou32(const char* str, const char** endptr, uint32_t* cint);",
          "45: WS_DLL_PUBLIC bool ws_strtou16(const char* str, const char** endptr, uint16_t* cint);",
          "46: WS_DLL_PUBLIC bool ws_strtou8 (const char* str, const char** endptr, uint8_t*  cint);",
          "47: WS_DLL_PUBLIC bool ws_strtou (const char* str, const char** endptr, unsigned*  cint);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "61: WS_DLL_PUBLIC gboolean ws_hexstrtou64(const gchar* str, const gchar** endptr, guint64* cint);",
          "62: WS_DLL_PUBLIC gboolean ws_hexstrtou32(const gchar* str, const gchar** endptr, guint32* cint);",
          "63: WS_DLL_PUBLIC gboolean ws_hexstrtou16(const gchar* str, const gchar** endptr, guint16* cint);",
          "64: WS_DLL_PUBLIC gboolean ws_hexstrtou8 (const gchar* str, const gchar** endptr, guint8*  cint);",
          "65: WS_DLL_PUBLIC gboolean ws_hexstrtou (const gchar* str, const gchar** endptr, guint*  cint);",
          "",
          "[Added Lines]",
          "62: WS_DLL_PUBLIC bool ws_hexstrtou64(const char* str, const char** endptr, uint64_t* cint);",
          "63: WS_DLL_PUBLIC bool ws_hexstrtou32(const char* str, const char** endptr, uint32_t* cint);",
          "64: WS_DLL_PUBLIC bool ws_hexstrtou16(const char* str, const char** endptr, uint16_t* cint);",
          "65: WS_DLL_PUBLIC bool ws_hexstrtou8 (const char* str, const char** endptr, uint8_t*  cint);",
          "66: WS_DLL_PUBLIC bool ws_hexstrtou (const char* str, const char** endptr, unsigned*  cint);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: #ifdef __cplusplus",
          "91: }",
          "",
          "[Removed Lines]",
          "84: WS_DLL_PUBLIC gboolean ws_basestrtou64(const gchar* str, const gchar** endptr, guint64* cint, int base);",
          "85: WS_DLL_PUBLIC gboolean ws_basestrtou32(const gchar* str, const gchar** endptr, guint32* cint, int base);",
          "86: WS_DLL_PUBLIC gboolean ws_basestrtou16(const gchar* str, const gchar** endptr, guint16* cint, int base);",
          "87: WS_DLL_PUBLIC gboolean ws_basestrtou8 (const gchar* str, const gchar** endptr, guint8*  cint, int base);",
          "88: WS_DLL_PUBLIC gboolean ws_basestrtou (const gchar* str, const gchar** endptr, guint*  cint, int base);",
          "",
          "[Added Lines]",
          "85: WS_DLL_PUBLIC bool ws_basestrtou64(const char* str, const char** endptr, uint64_t* cint, int base);",
          "86: WS_DLL_PUBLIC bool ws_basestrtou32(const char* str, const char** endptr, uint32_t* cint, int base);",
          "87: WS_DLL_PUBLIC bool ws_basestrtou16(const char* str, const char** endptr, uint16_t* cint, int base);",
          "88: WS_DLL_PUBLIC bool ws_basestrtou8 (const char* str, const char** endptr, uint8_t*  cint, int base);",
          "89: WS_DLL_PUBLIC bool ws_basestrtou (const char* str, const char** endptr, unsigned*  cint, int base);",
          "",
          "---------------"
        ],
        "wsutil/to_str.c||wsutil/to_str.c": [
          "File: wsutil/to_str.c -> wsutil/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: };",
          "73: static inline char",
          "75: {",
          "77:     a complaint from the linker about the \"literal C string section\"",
          "",
          "[Removed Lines]",
          "74: low_nibble_of_octet_to_hex(guint8 oct)",
          "",
          "[Added Lines]",
          "74: low_nibble_of_octet_to_hex(uint8_t oct)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     a 16-character string, the fact that initializing such an array with",
          "80:     such a string is perfectly legitimate ANSI C nonwithstanding, the 17th",
          "83:  { '0', '1', '2', '3', '4', '5', '6', '7',",
          "84:    '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
          "",
          "[Removed Lines]",
          "82:  static const gchar hex_digits[16] =",
          "",
          "[Added Lines]",
          "82:  static const char hex_digits[16] =",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: }",
          "89: static inline char *",
          "91: {",
          "",
          "[Removed Lines]",
          "90: byte_to_hex(char *out, guint32 dword)",
          "",
          "[Added Lines]",
          "90: byte_to_hex(char *out, uint32_t dword)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95: }",
          "97: char *",
          "99: {",
          "100:  return byte_to_hex(out, val);",
          "101: }",
          "103: char *",
          "105: {",
          "106:  out = byte_to_hex(out, word >> 8);",
          "107:  out = byte_to_hex(out, word);",
          "",
          "[Removed Lines]",
          "98: guint8_to_hex(char *out, guint8 val)",
          "104: word_to_hex(char *out, guint16 word)",
          "",
          "[Added Lines]",
          "98: guint8_to_hex(char *out, uint8_t val)",
          "104: word_to_hex(char *out, uint16_t word)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109: }",
          "111: char *",
          "113: {",
          "114:  out = byte_to_hex(out, word >> 8);",
          "",
          "[Removed Lines]",
          "112: word_to_hex_punct(char *out, guint16 word, char punct)",
          "",
          "[Added Lines]",
          "112: word_to_hex_punct(char *out, uint16_t word, char punct)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "118: }",
          "120: char *",
          "122: {",
          "123:  if (word >= 0x1000)",
          "125:  if (word >= 0x0100)",
          "127:  if (word >= 0x0010)",
          "130:  return out;",
          "131: }",
          "133: char *",
          "135: {",
          "136:  out = word_to_hex(out, dword >> 16);",
          "137:  out = word_to_hex(out, dword);",
          "",
          "[Removed Lines]",
          "121: word_to_hex_npad(char *out, guint16 word)",
          "134: dword_to_hex(char *out, guint32 dword)",
          "",
          "[Added Lines]",
          "121: word_to_hex_npad(char *out, uint16_t word)",
          "134: dword_to_hex(char *out, uint32_t dword)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "139: }",
          "141: char *",
          "143: {",
          "144:  out = word_to_hex_punct(out, dword >> 16, punct);",
          "",
          "[Removed Lines]",
          "142: dword_to_hex_punct(char *out, guint32 dword, char punct)",
          "",
          "[Added Lines]",
          "142: dword_to_hex_punct(char *out, uint32_t dword, char punct)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "148: }",
          "150: char *",
          "152: {",
          "155:  return out;",
          "156: }",
          "158: char *",
          "160: {",
          "164:  return out;",
          "165: }",
          "",
          "[Removed Lines]",
          "151: qword_to_hex(char *out, guint64 qword)",
          "153:  out = dword_to_hex(out, (guint32)(qword >> 32));",
          "154:  out = dword_to_hex(out, (guint32)(qword & 0xffffffff));",
          "159: qword_to_hex_punct(char *out, guint64 qword, char punct)",
          "161:  out = dword_to_hex_punct(out, (guint32)(qword >> 32), punct);",
          "163:  out = dword_to_hex_punct(out, (guint32)(qword & 0xffffffff), punct);",
          "",
          "[Added Lines]",
          "151: qword_to_hex(char *out, uint64_t qword)",
          "153:  out = dword_to_hex(out, (uint32_t)(qword >> 32));",
          "154:  out = dword_to_hex(out, (uint32_t)(qword & 0xffffffff));",
          "159: qword_to_hex_punct(char *out, uint64_t qword, char punct)",
          "161:  out = dword_to_hex_punct(out, (uint32_t)(qword >> 32), punct);",
          "163:  out = dword_to_hex_punct(out, (uint32_t)(qword & 0xffffffff), punct);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "175: char *",
          "177: {",
          "178:  size_t i;",
          "",
          "[Removed Lines]",
          "176: bytes_to_hexstr(char *out, const guint8 *ad, size_t len)",
          "",
          "[Added Lines]",
          "176: bytes_to_hexstr(char *out, const uint8_t *ad, size_t len)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "195: char *",
          "197: {",
          "198:  size_t i;",
          "",
          "[Removed Lines]",
          "196: bytes_to_hexstr_punct(char *out, const guint8 *ad, size_t len, char punct)",
          "",
          "[Added Lines]",
          "196: bytes_to_hexstr_punct(char *out, const uint8_t *ad, size_t len, char punct)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "217: char *",
          "218: bytes_to_str_punct_maxlen(wmem_allocator_t *scope,",
          "220:    char punct, size_t max_bytes_len)",
          "221: {",
          "222:  char *buf;",
          "",
          "[Removed Lines]",
          "219:    const guint8 *src, size_t src_size,",
          "",
          "[Added Lines]",
          "219:    const uint8_t *src, size_t src_size,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "256: char *",
          "257: bytes_to_str_maxlen(wmem_allocator_t *scope,",
          "259:    size_t max_bytes_len)",
          "260: {",
          "261:  char *buf;",
          "",
          "[Removed Lines]",
          "258:    const guint8 *src, size_t src_size,",
          "",
          "[Added Lines]",
          "258:    const uint8_t *src, size_t src_size,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "293: char *",
          "295: {",
          "296:  while (value) {",
          "",
          "[Removed Lines]",
          "294: oct_to_str_back(char *ptr, guint32 value)",
          "",
          "[Added Lines]",
          "294: oct_to_str_back(char *ptr, uint32_t value)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "303: }",
          "305: char *",
          "307: {",
          "308:  while (value) {",
          "",
          "[Removed Lines]",
          "306: oct64_to_str_back(char *ptr, guint64 value)",
          "",
          "[Added Lines]",
          "306: oct64_to_str_back(char *ptr, uint64_t value)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "315: }",
          "317: char *",
          "319: {",
          "320:  do {",
          "",
          "[Removed Lines]",
          "318: hex_to_str_back_len(char *ptr, guint32 value, int len)",
          "",
          "[Added Lines]",
          "318: hex_to_str_back_len(char *ptr, uint32_t value, int len)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "336: }",
          "338: char *",
          "340: {",
          "341:  do {",
          "",
          "[Removed Lines]",
          "339: hex64_to_str_back_len(char *ptr, guint64 value, int len)",
          "",
          "[Added Lines]",
          "339: hex64_to_str_back_len(char *ptr, uint64_t value, int len)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "357: }",
          "359: char *",
          "361: {",
          "362:  char const *p;",
          "",
          "[Removed Lines]",
          "360: uint_to_str_back(char *ptr, guint32 value)",
          "",
          "[Added Lines]",
          "360: uint_to_str_back(char *ptr, uint32_t value)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "381: }",
          "383: char *",
          "385: {",
          "386:  char const *p;",
          "",
          "[Removed Lines]",
          "384: uint64_to_str_back(char *ptr, guint64 value)",
          "",
          "[Added Lines]",
          "384: uint64_to_str_back(char *ptr, uint64_t value)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "406: }",
          "408: char *",
          "410: {",
          "411:  char *new_ptr;",
          "",
          "[Removed Lines]",
          "409: uint_to_str_back_len(char *ptr, guint32 value, int len)",
          "",
          "[Added Lines]",
          "409: uint_to_str_back_len(char *ptr, uint32_t value, int len)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "426: }",
          "428: char *",
          "430: {",
          "431:  char *new_ptr;",
          "",
          "[Removed Lines]",
          "429: uint64_to_str_back_len(char *ptr, guint64 value, int len)",
          "",
          "[Added Lines]",
          "429: uint64_to_str_back_len(char *ptr, uint64_t value, int len)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "446: }",
          "448: char *",
          "450: {",
          "451:  if (value < 0) {",
          "452:   ptr = uint_to_str_back(ptr, -value);",
          "",
          "[Removed Lines]",
          "449: int_to_str_back(char *ptr, gint32 value)",
          "",
          "[Added Lines]",
          "449: int_to_str_back(char *ptr, int32_t value)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "458: }",
          "460: char *",
          "462: {",
          "463:  if (value < 0) {",
          "464:   ptr = uint64_to_str_back(ptr, -value);",
          "",
          "[Removed Lines]",
          "461: int64_to_str_back(char *ptr, gint64 value)",
          "",
          "[Added Lines]",
          "461: int64_to_str_back(char *ptr, int64_t value)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "470: }",
          "472: static size_t",
          "474: {",
          "476:  if (u >= 1000000000)return 10;",
          "",
          "[Removed Lines]",
          "473: guint32_to_str_buf_len(const guint32 u)",
          "",
          "[Added Lines]",
          "473: guint32_to_str_buf_len(const uint32_t u)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "487: }",
          "489: void",
          "491: {",
          "492:  size_t str_len = guint32_to_str_buf_len(u)+1;",
          "496:  _return_if_nospace(str_len, buf, buf_len);",
          "",
          "[Removed Lines]",
          "490: guint32_to_str_buf(guint32 u, gchar *buf, size_t buf_len)",
          "494:  gchar *bp = &buf[str_len];",
          "",
          "[Added Lines]",
          "490: guint32_to_str_buf(uint32_t u, char *buf, size_t buf_len)",
          "494:  char *bp = &buf[str_len];",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "501: }",
          "503: static size_t",
          "505: {",
          "",
          "[Removed Lines]",
          "504: guint64_to_str_buf_len(const guint64 u)",
          "",
          "[Added Lines]",
          "504: guint64_to_str_buf_len(const uint64_t u)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "529: }",
          "531: void",
          "533: {",
          "534:  size_t str_len = guint64_to_str_buf_len(u)+1;",
          "538:  _return_if_nospace(str_len, buf, buf_len);",
          "",
          "[Removed Lines]",
          "532: guint64_to_str_buf(guint64 u, gchar *buf, size_t buf_len)",
          "536:  gchar *bp = &buf[str_len];",
          "",
          "[Added Lines]",
          "532: guint64_to_str_buf(uint64_t u, char *buf, size_t buf_len)",
          "536:  char *bp = &buf[str_len];",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "547:    XXX update the address_to_str stuff to use this function.",
          "549: void",
          "551: {",
          "555:  _return_if_nospace(WS_INET_ADDRSTRLEN, buf, buf_len);",
          "",
          "[Removed Lines]",
          "550: ip_to_str_buf(const guint8 *ad, gchar *buf, const int buf_len)",
          "552:  register gchar const *p;",
          "553:  register gchar *b=buf;",
          "",
          "[Added Lines]",
          "550: ip_to_str_buf(const uint8_t *ad, char *buf, const int buf_len)",
          "552:  register char const *p;",
          "553:  register char *b=buf;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "584: }",
          "587: {",
          "588:  char *buf = wmem_alloc(scope, WS_INET_ADDRSTRLEN * sizeof(char));",
          "",
          "[Removed Lines]",
          "586: char *ip_to_str(wmem_allocator_t *scope, const guint8 *ad)",
          "",
          "[Added Lines]",
          "586: char *ip_to_str(wmem_allocator_t *scope, const uint8_t *ad)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "593: }",
          "595: void",
          "597: {",
          "604: }",
          "606: char *ip6_to_str(wmem_allocator_t *scope, const ws_in6_addr *ad)",
          "",
          "[Removed Lines]",
          "596: ip6_to_str_buf(const ws_in6_addr *addr, gchar *buf, size_t buf_size)",
          "603:  ws_inet_ntop6(addr, buf, (guint)buf_size);",
          "",
          "[Added Lines]",
          "596: ip6_to_str_buf(const ws_in6_addr *addr, char *buf, size_t buf_size)",
          "603:  ws_inet_ntop6(addr, buf, (unsigned)buf_size);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "612:  return buf;",
          "613: }",
          "617: {",
          "621:  return buf;",
          "",
          "[Removed Lines]",
          "615: gchar *",
          "616: ipxnet_to_str_punct(wmem_allocator_t *allocator, const guint32 ad, const char punct)",
          "618:  gchar *buf = (gchar *)wmem_alloc(allocator, 12);",
          "",
          "[Added Lines]",
          "615: char *",
          "616: ipxnet_to_str_punct(wmem_allocator_t *allocator, const uint32_t ad, const char punct)",
          "618:  char *buf = (char *)wmem_alloc(allocator, 12);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "624: #define WS_EUI64_STRLEN 24",
          "637:  tmp = bytes_to_hexstr_punct(buf, p_eui64, 8, ':');",
          "",
          "[Removed Lines]",
          "626: gchar *",
          "627: eui64_to_str(wmem_allocator_t *scope, const guint64 ad) {",
          "628:  gchar *buf, *tmp;",
          "629:  guint8 *p_eui64;",
          "631:  p_eui64=(guint8 *)wmem_alloc(NULL, 8);",
          "632:  buf=(gchar *)wmem_alloc(scope, WS_EUI64_STRLEN);",
          "",
          "[Added Lines]",
          "626: char *",
          "627: eui64_to_str(wmem_allocator_t *scope, const uint64_t ad) {",
          "628:  char *buf, *tmp;",
          "629:  uint8_t *p_eui64;",
          "631:  p_eui64=(uint8_t *)wmem_alloc(NULL, 8);",
          "632:  buf=(char *)wmem_alloc(scope, WS_EUI64_STRLEN);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "658: int",
          "660: {",
          "662:  size_t remaining;",
          "663:  int num_bytes;",
          "669:  size_t num_len;",
          "671:  ws_assert(precision != 0);",
          "",
          "[Removed Lines]",
          "659: format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision)",
          "661:  gchar *ptr;",
          "664:  gsize decimal_point_len;",
          "665:  guint32 frac_part;",
          "666:  gint8 num_buf[CHARS_NANOSECONDS];",
          "667:  gint8 *num_end = &num_buf[CHARS_NANOSECONDS];",
          "668:  gint8 *num_ptr;",
          "",
          "[Added Lines]",
          "659: format_fractional_part_nsecs(char *buf, size_t buflen, uint32_t nsecs, const char *decimal_point, int precision)",
          "661:  char *ptr;",
          "664:  size_t decimal_point_len;",
          "665:  uint32_t frac_part;",
          "666:  int8_t num_buf[CHARS_NANOSECONDS];",
          "667:  int8_t *num_end = &num_buf[CHARS_NANOSECONDS];",
          "668:  int8_t *num_ptr;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "844: }",
          "846: void",
          "848: {",
          "849:  display_signed_time(buf, buflen, ns, precision);",
          "850: }",
          "852: void",
          "854: {",
          "855:  int nsecs;",
          "860:  size_t num_len;",
          "862:  if (buflen < 1)",
          "",
          "[Removed Lines]",
          "847: display_epoch_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "853: display_signed_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "857:  gint8 num_buf[CHARS_64_BIT_SIGNED];",
          "858:  gint8 *num_end = &num_buf[CHARS_64_BIT_SIGNED];",
          "859:  gint8 *num_ptr;",
          "",
          "[Added Lines]",
          "847: display_epoch_time(char *buf, size_t buflen, const nstime_t *ns, int precision)",
          "853: display_signed_time(char *buf, size_t buflen, const nstime_t *ns, int precision)",
          "857:  int8_t num_buf[CHARS_64_BIT_SIGNED];",
          "858:  int8_t *num_end = &num_buf[CHARS_64_BIT_SIGNED];",
          "859:  int8_t *num_ptr;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "921: }",
          "923: void",
          "926: {",
          "927:  struct tm tm, *tmp;",
          "929:  size_t remaining;",
          "930:  int num_bytes;",
          "",
          "[Removed Lines]",
          "920:  format_fractional_part_nsecs(buf, buflen, (guint32)nsecs, \".\", precision);",
          "924: format_nstime_as_iso8601(gchar *buf, size_t buflen, const nstime_t *ns,",
          "925:     char *decimal_point, gboolean local, int precision)",
          "928:  gchar *ptr;",
          "",
          "[Added Lines]",
          "920:  format_fractional_part_nsecs(buf, buflen, (uint32_t)nsecs, \".\", precision);",
          "924: format_nstime_as_iso8601(char *buf, size_t buflen, const nstime_t *ns,",
          "925:     char *decimal_point, bool local, int precision)",
          "928:  char *ptr;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "975:  }",
          "976: }",
          "",
          "[Removed Lines]",
          "974:   format_fractional_part_nsecs(ptr, remaining, (guint32)ns->nsecs, decimal_point, precision);",
          "",
          "[Added Lines]",
          "974:   format_fractional_part_nsecs(ptr, remaining, (uint32_t)ns->nsecs, decimal_point, precision);",
          "",
          "---------------"
        ],
        "wsutil/to_str.h||wsutil/to_str.h": [
          "File: wsutil/to_str.h -> wsutil/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "34: WS_DLL_PUBLIC char *guint8_to_hex(char *out, guint8 val);",
          "45: WS_DLL_PUBLIC char *word_to_hex(char *out, guint16 word);",
          "57: WS_DLL_PUBLIC char *word_to_hex_punct(char *out, guint16 word, char punct);",
          "68: WS_DLL_PUBLIC char *word_to_hex_npad(char *out, guint16 word);",
          "79: WS_DLL_PUBLIC char *dword_to_hex(char *out, guint32 dword);",
          "91: WS_DLL_PUBLIC char *dword_to_hex_punct(char *out, guint32 dword, char punct);",
          "102: WS_DLL_PUBLIC char *qword_to_hex(char *out, guint64 qword);",
          "114: WS_DLL_PUBLIC char *qword_to_hex_punct(char *out, guint64 qword, char punct);",
          "125: WS_DLL_PUBLIC char *bytes_to_hexstr(char *out, const guint8 *ad, size_t len);",
          "137: WS_DLL_PUBLIC char *bytes_to_hexstr_punct(char *out, const guint8 *ad, size_t len, char punct);",
          "",
          "[Added Lines]",
          "34: WS_DLL_PUBLIC char *guint8_to_hex(char *out, uint8_t val);",
          "45: WS_DLL_PUBLIC char *word_to_hex(char *out, uint16_t word);",
          "57: WS_DLL_PUBLIC char *word_to_hex_punct(char *out, uint16_t word, char punct);",
          "68: WS_DLL_PUBLIC char *word_to_hex_npad(char *out, uint16_t word);",
          "79: WS_DLL_PUBLIC char *dword_to_hex(char *out, uint32_t dword);",
          "91: WS_DLL_PUBLIC char *dword_to_hex_punct(char *out, uint32_t dword, char punct);",
          "102: WS_DLL_PUBLIC char *qword_to_hex(char *out, uint64_t qword);",
          "114: WS_DLL_PUBLIC char *qword_to_hex_punct(char *out, uint64_t qword, char punct);",
          "125: WS_DLL_PUBLIC char *bytes_to_hexstr(char *out, const uint8_t *ad, size_t len);",
          "137: WS_DLL_PUBLIC char *bytes_to_hexstr_punct(char *out, const uint8_t *ad, size_t len, char punct);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: WS_DLL_PUBLIC char *bytes_to_str_punct_maxlen(wmem_allocator_t *scope,",
          "151:                                 char punct, size_t max_bytes_len);",
          "153: #define bytes_to_str_punct(scope, buf, buf_size, punct) \\",
          "",
          "[Removed Lines]",
          "150:                                 const guint8 *buf, size_t buf_size,",
          "",
          "[Added Lines]",
          "150:                                 const uint8_t *buf, size_t buf_size,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164: WS_DLL_PUBLIC char *bytes_to_str_maxlen(wmem_allocator_t *scope,",
          "166:                                 size_t max_bytes_len);",
          "168: #define bytes_to_str(scope, buf, buf_size) \\",
          "",
          "[Removed Lines]",
          "165:                                 const guint8 *buf, size_t buf_size,",
          "",
          "[Added Lines]",
          "165:                                 const uint8_t *buf, size_t buf_size,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296: WS_DLL_PUBLIC char *ip6_to_str(wmem_allocator_t *scope, const ws_in6_addr *ad);",
          "310: #ifdef __cplusplus",
          "311: }",
          "",
          "[Removed Lines]",
          "180: WS_DLL_PUBLIC char *oct_to_str_back(char *ptr, guint32 value);",
          "191: WS_DLL_PUBLIC char *oct64_to_str_back(char *ptr, guint64 value);",
          "203: WS_DLL_PUBLIC char *hex_to_str_back_len(char *ptr, guint32 value, int len);",
          "215: WS_DLL_PUBLIC char *hex64_to_str_back_len(char *ptr, guint64 value, int len);",
          "226: WS_DLL_PUBLIC char *uint_to_str_back(char *ptr, guint32 value);",
          "237: WS_DLL_PUBLIC char *uint64_to_str_back(char *ptr, guint64 value);",
          "249: WS_DLL_PUBLIC char *uint_to_str_back_len(char *ptr, guint32 value, int len);",
          "261: WS_DLL_PUBLIC char *uint64_to_str_back_len(char *ptr, guint64 value, int len);",
          "272: WS_DLL_PUBLIC char *int_to_str_back(char *ptr, gint32 value);",
          "283: WS_DLL_PUBLIC char *int64_to_str_back(char *ptr, gint64 value);",
          "285: WS_DLL_PUBLIC void guint32_to_str_buf(guint32 u, gchar *buf, size_t buf_len);",
          "287: WS_DLL_PUBLIC void guint64_to_str_buf(guint64 u, gchar *buf, size_t buf_len);",
          "289: WS_DLL_PUBLIC void ip_to_str_buf(const guint8 *ad, gchar *buf, const int buf_len);",
          "291: WS_DLL_PUBLIC char *ip_to_str(wmem_allocator_t *scope, const guint8 *ad);",
          "294: WS_DLL_PUBLIC void ip6_to_str_buf(const ws_in6_addr *ad, gchar *buf, size_t buf_size);",
          "298: WS_DLL_PUBLIC gchar *ipxnet_to_str_punct(wmem_allocator_t *scope, const guint32 ad, const char punct);",
          "300: WS_DLL_PUBLIC gchar *eui64_to_str(wmem_allocator_t *scope, const guint64 ad);",
          "302: WS_DLL_PUBLIC int format_fractional_part_nsecs(gchar *, size_t, guint32, const char *, int);",
          "304: WS_DLL_PUBLIC void display_epoch_time(gchar *, size_t, const nstime_t *, int);",
          "306: WS_DLL_PUBLIC void display_signed_time(gchar *, size_t, const nstime_t *, int);",
          "308: WS_DLL_PUBLIC void format_nstime_as_iso8601(gchar *, size_t, const nstime_t *, char *, gboolean, int);",
          "",
          "[Added Lines]",
          "180: WS_DLL_PUBLIC char *oct_to_str_back(char *ptr, uint32_t value);",
          "191: WS_DLL_PUBLIC char *oct64_to_str_back(char *ptr, uint64_t value);",
          "203: WS_DLL_PUBLIC char *hex_to_str_back_len(char *ptr, uint32_t value, int len);",
          "215: WS_DLL_PUBLIC char *hex64_to_str_back_len(char *ptr, uint64_t value, int len);",
          "226: WS_DLL_PUBLIC char *uint_to_str_back(char *ptr, uint32_t value);",
          "237: WS_DLL_PUBLIC char *uint64_to_str_back(char *ptr, uint64_t value);",
          "249: WS_DLL_PUBLIC char *uint_to_str_back_len(char *ptr, uint32_t value, int len);",
          "261: WS_DLL_PUBLIC char *uint64_to_str_back_len(char *ptr, uint64_t value, int len);",
          "272: WS_DLL_PUBLIC char *int_to_str_back(char *ptr, int32_t value);",
          "283: WS_DLL_PUBLIC char *int64_to_str_back(char *ptr, int64_t value);",
          "285: WS_DLL_PUBLIC void guint32_to_str_buf(uint32_t u, char *buf, size_t buf_len);",
          "287: WS_DLL_PUBLIC void guint64_to_str_buf(uint64_t u, char *buf, size_t buf_len);",
          "289: WS_DLL_PUBLIC void ip_to_str_buf(const uint8_t *ad, char *buf, const int buf_len);",
          "291: WS_DLL_PUBLIC char *ip_to_str(wmem_allocator_t *scope, const uint8_t *ad);",
          "294: WS_DLL_PUBLIC void ip6_to_str_buf(const ws_in6_addr *ad, char *buf, size_t buf_size);",
          "298: WS_DLL_PUBLIC char *ipxnet_to_str_punct(wmem_allocator_t *scope, const uint32_t ad, const char punct);",
          "300: WS_DLL_PUBLIC char *eui64_to_str(wmem_allocator_t *scope, const uint64_t ad);",
          "302: WS_DLL_PUBLIC int format_fractional_part_nsecs(char *, size_t, uint32_t, const char *, int);",
          "304: WS_DLL_PUBLIC void display_epoch_time(char *, size_t, const nstime_t *, int);",
          "306: WS_DLL_PUBLIC void display_signed_time(char *, size_t, const nstime_t *, int);",
          "308: WS_DLL_PUBLIC void format_nstime_as_iso8601(char *, size_t, const nstime_t *, char *, bool, int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41421662cc41faffa52eccfdf28bb61a7603f6d8",
      "candidate_info": {
        "commit_hash": "41421662cc41faffa52eccfdf28bb61a7603f6d8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/41421662cc41faffa52eccfdf28bb61a7603f6d8",
        "files": [
          "wsutil/to_str.c"
        ],
        "message": "Cast away some warnings from Visual Studio, at least with some compiler flags.\n\nNot sure why this managed to pass our Windows build - it's a 64-bit\nbuild, so it should have warned about converting a 64-bit gsize or\nsize_t to a 32-bit int.\n\nFixes #19340.",
        "before_after_code_files": [
          "wsutil/to_str.c||wsutil/to_str.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wsutil/to_str.c||wsutil/to_str.c"
          ],
          "candidate": [
            "wsutil/to_str.c||wsutil/to_str.c"
          ]
        }
      },
      "candidate_diff": {
        "wsutil/to_str.c||wsutil/to_str.c": [
          "File: wsutil/to_str.c -> wsutil/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "719:  }",
          "720:  ptr += decimal_point_len;",
          "721:  remaining -= decimal_point_len;",
          "",
          "[Removed Lines]",
          "722:  num_bytes += decimal_point_len;",
          "",
          "[Added Lines]",
          "725:  num_bytes += (int)decimal_point_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:  memcpy(ptr, num_ptr, num_len);",
          "832:  ptr += num_len;",
          "",
          "[Removed Lines]",
          "833:  num_bytes += num_len;",
          "",
          "[Added Lines]",
          "838:  num_bytes += (int)num_len;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e40bc0d100a1a5b8d0ff730baa9f4e2186bda1fb",
      "candidate_info": {
        "commit_hash": "e40bc0d100a1a5b8d0ff730baa9f4e2186bda1fb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e40bc0d100a1a5b8d0ff730baa9f4e2186bda1fb",
        "files": [
          "epan/column-utils.c",
          "epan/to_str.c",
          "wsutil/nstime.c",
          "wsutil/to_str.c",
          "wsutil/to_str.h"
        ],
        "message": "Have diaplay_signed_time() take an nstime_t as an argument.\n\nAnd have it handle all time stamp precision values from 0 to 9.",
        "before_after_code_files": [
          "epan/column-utils.c||epan/column-utils.c",
          "epan/to_str.c||epan/to_str.c",
          "wsutil/nstime.c||wsutil/nstime.c",
          "wsutil/to_str.c||wsutil/to_str.c",
          "wsutil/to_str.h||wsutil/to_str.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ],
          "candidate": [
            "wsutil/to_str.c||wsutil/to_str.c",
            "wsutil/to_str.h||wsutil/to_str.h"
          ]
        }
      },
      "candidate_diff": {
        "epan/column-utils.c||epan/column-utils.c": [
          "File: epan/column-utils.c -> epan/column-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1231:   ws_assert(fd->has_ts);",
          "1253:     tsprecision = fd->tsprec;",
          "1284:     ws_assert_not_reached();",
          "1286: }",
          "1288: static void",
          "",
          "[Removed Lines]",
          "1233:   switch (timestamp_get_precision()) {",
          "1234:   case TS_PREC_FIXED_SEC:",
          "1235:     tsprecision = WTAP_TSPREC_SEC;",
          "1236:     break;",
          "1237:   case TS_PREC_FIXED_DSEC:",
          "1238:     tsprecision = WTAP_TSPREC_DSEC;",
          "1239:     break;",
          "1240:   case TS_PREC_FIXED_CSEC:",
          "1241:     tsprecision = WTAP_TSPREC_CSEC;",
          "1242:     break;",
          "1243:   case TS_PREC_FIXED_MSEC:",
          "1244:     tsprecision = WTAP_TSPREC_MSEC;",
          "1245:     break;",
          "1246:   case TS_PREC_FIXED_USEC:",
          "1247:     tsprecision = WTAP_TSPREC_USEC;",
          "1248:     break;",
          "1249:   case TS_PREC_FIXED_NSEC:",
          "1250:     tsprecision = WTAP_TSPREC_NSEC;",
          "1251:     break;",
          "1252:   case TS_PREC_AUTO:",
          "1254:     break;",
          "1255:   default:",
          "1256:     ws_assert_not_reached();",
          "1257:   }",
          "1258:   switch (tsprecision) {",
          "1259:   case WTAP_TSPREC_SEC:",
          "1260:     display_signed_time(buf, COL_MAX_LEN,",
          "1261:       (gint64) ts->secs, ts->nsecs / 1000000000, WS_TSPREC_SEC);",
          "1262:     break;",
          "1263:   case WTAP_TSPREC_DSEC:",
          "1264:     display_signed_time(buf, COL_MAX_LEN,",
          "1265:       (gint64) ts->secs, ts->nsecs / 100000000, WS_TSPREC_100_MSEC);",
          "1266:     break;",
          "1267:   case WTAP_TSPREC_CSEC:",
          "1268:     display_signed_time(buf, COL_MAX_LEN,",
          "1269:       (gint64) ts->secs, ts->nsecs / 10000000, WS_TSPREC_10_MSEC);",
          "1270:     break;",
          "1271:   case WTAP_TSPREC_MSEC:",
          "1272:     display_signed_time(buf, COL_MAX_LEN,",
          "1273:       (gint64) ts->secs, ts->nsecs / 1000000, WS_TSPREC_MSEC);",
          "1274:     break;",
          "1275:   case WTAP_TSPREC_USEC:",
          "1276:     display_signed_time(buf, COL_MAX_LEN,",
          "1277:       (gint64) ts->secs, ts->nsecs / 1000, WS_TSPREC_USEC);",
          "1278:     break;",
          "1279:   case WTAP_TSPREC_NSEC:",
          "1280:     display_signed_time(buf, COL_MAX_LEN,",
          "1281:       (gint64) ts->secs, ts->nsecs, WS_TSPREC_NSEC);",
          "1282:     break;",
          "1283:   default:",
          "1285:   }",
          "",
          "[Added Lines]",
          "1233:   tsprecision = timestamp_get_precision();",
          "1234:   if (tsprecision == TS_PREC_AUTO)",
          "1236:   else if (tsprecision < 0)",
          "1238:   if (tsprecision > 9)",
          "1239:     tsprecision = 9;",
          "1240:   display_signed_time(buf, COL_MAX_LEN, ts, tsprecision);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1988:   for (col = cinfo->col_first[el]; col <= cinfo->col_last[el]; col++) {",
          "1989:     col_item = &cinfo->columns[col];",
          "1990:     if (col_item->fmt_matx[el]) {",
          "2018:         ws_assert_not_reached();",
          "2020:       col_item->col_data = col_item->col_buf;",
          "2021:       cinfo->col_expr.col_expr[col] = fieldname;",
          "2022:       (void) g_strlcpy(cinfo->col_expr.col_expr_val[col],col_item->col_buf,COL_MAX_LEN);",
          "",
          "[Removed Lines]",
          "1991:       switch (timestamp_get_precision()) {",
          "1992:       case TS_PREC_FIXED_SEC:",
          "1993:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "1994:           (gint64) ts->secs, ts->nsecs / 1000000000, WS_TSPREC_SEC);",
          "1995:         break;",
          "1996:       case TS_PREC_FIXED_DSEC:",
          "1997:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "1998:           (gint64) ts->secs, ts->nsecs / 100000000, WS_TSPREC_100_MSEC);",
          "1999:         break;",
          "2000:       case TS_PREC_FIXED_CSEC:",
          "2001:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "2002:           (gint64) ts->secs, ts->nsecs / 10000000, WS_TSPREC_10_MSEC);",
          "2003:         break;",
          "2004:       case TS_PREC_FIXED_MSEC:",
          "2005:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "2006:           (gint64) ts->secs, ts->nsecs / 1000000, WS_TSPREC_MSEC);",
          "2007:         break;",
          "2008:       case TS_PREC_FIXED_USEC:",
          "2009:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "2010:           (gint64) ts->secs, ts->nsecs / 1000, WS_TSPREC_USEC);",
          "2011:         break;",
          "2012:       case TS_PREC_FIXED_NSEC:",
          "2014:         display_signed_time(col_item->col_buf, COL_MAX_LEN,",
          "2015:           (gint64) ts->secs, ts->nsecs, WS_TSPREC_NSEC);",
          "2016:         break;",
          "2017:       default:",
          "2019:       }",
          "",
          "[Added Lines]",
          "1946:       int tsprecision = timestamp_get_precision();",
          "1948:       if (tsprecision == TS_PREC_AUTO)",
          "1950:       else if (tsprecision < 0)",
          "1952:       if (tsprecision > 9)",
          "1953:         tsprecision = 9;",
          "1954:       display_signed_time(col_item->col_buf, COL_MAX_LEN, ts, tsprecision);",
          "",
          "---------------"
        ],
        "epan/to_str.c||epan/to_str.c": [
          "File: epan/to_str.c -> epan/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:     buf = (gchar *)wmem_alloc(scope, NSTIME_SECS_LEN);",
          "447:     return buf;",
          "448: }",
          "",
          "[Removed Lines]",
          "445:     display_signed_time(buf, NSTIME_SECS_LEN, (gint64) rel_time->secs,",
          "446:                         rel_time->nsecs, WS_TSPREC_NSEC);",
          "",
          "[Added Lines]",
          "445:     display_signed_time(buf, NSTIME_SECS_LEN, rel_time, WS_TSPREC_NSEC);",
          "",
          "---------------"
        ],
        "wsutil/nstime.c||wsutil/nstime.c": [
          "File: wsutil/nstime.c -> wsutil/nstime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637: void nstime_to_unix(char *buf, size_t buf_size, const nstime_t *nstime)",
          "638: {",
          "641: }",
          "",
          "[Removed Lines]",
          "639:     display_signed_time(buf, buf_size, (gint64) nstime->secs,",
          "640:                         nstime->nsecs, WS_TSPREC_NSEC);",
          "",
          "[Added Lines]",
          "639:     display_signed_time(buf, buf_size, nstime, WS_TSPREC_NSEC);",
          "",
          "---------------"
        ],
        "wsutil/to_str.c||wsutil/to_str.c": [
          "File: wsutil/to_str.c -> wsutil/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: void",
          "708: {",
          "710:  gint8 num_buf[CHARS_64_BIT_SIGNED];",
          "711:  gint8 *num_end = &num_buf[CHARS_64_BIT_SIGNED];",
          "",
          "[Removed Lines]",
          "706: display_signed_time(gchar *buf, size_t buflen, const gint64 sec, gint32 frac,",
          "707:      const ws_tsprec_e units)",
          "",
          "[Added Lines]",
          "706: display_signed_time(gchar *buf, size_t buflen, const nstime_t *ns, int precision)",
          "708:  int nsecs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:     print its absolute value and, if the seconds part isn't",
          "720:     (the seconds part should be zero in that case), stick",
          "725:    buf[0] = '-';",
          "726:    buf++;",
          "727:    buflen--;",
          "728:   }",
          "729:  }",
          "733:  num_len = MIN((size_t)(num_end - num_ptr), buflen);",
          "734:  memcpy(buf, num_ptr, num_len);",
          "735:  buf += num_len;",
          "736:  buflen -= num_len;",
          "764:  }",
          "766:  if (num_ptr != NULL)",
          "",
          "[Removed Lines]",
          "722:  if (frac < 0) {",
          "723:   frac = -frac;",
          "724:   if (sec >= 0) {",
          "731:  num_ptr = int64_to_str_back(num_end, sec);",
          "738:  switch (units) {",
          "739:   case WS_TSPREC_SEC:",
          "740:   default:",
          "742:    num_ptr = NULL;",
          "743:    break;",
          "745:   case WS_TSPREC_100_MSEC:",
          "746:    num_ptr = uint_to_str_back_len(num_end, frac, 1);",
          "747:    break;",
          "749:   case WS_TSPREC_10_MSEC:",
          "750:    num_ptr = uint_to_str_back_len(num_end, frac, 2);",
          "751:    break;",
          "753:   case WS_TSPREC_MSEC:",
          "754:    num_ptr = uint_to_str_back_len(num_end, frac, 3);",
          "755:    break;",
          "757:   case WS_TSPREC_USEC:",
          "758:    num_ptr = uint_to_str_back_len(num_end, frac, 6);",
          "759:    break;",
          "761:   case WS_TSPREC_NSEC:",
          "762:    num_ptr = uint_to_str_back_len(num_end, frac, 9);",
          "763:    break;",
          "",
          "[Added Lines]",
          "722:  nsecs = ns->nsecs;",
          "723:  if (nsecs < 0) {",
          "724:   nsecs = -nsecs;",
          "725:   if (ns->secs >= 0) {",
          "732:  num_ptr = int64_to_str_back(num_end, ns->secs);",
          "739:  switch (precision) {",
          "741:  case 0:",
          "745:   num_ptr = NULL;",
          "746:   break;",
          "748:  case 1:",
          "754:   num_ptr = uint_to_str_back_len(num_end,",
          "755:       ((guint32)nsecs) / 100000000, 1);",
          "756:   break;",
          "758:  case 2:",
          "762:   num_ptr = uint_to_str_back_len(num_end,",
          "763:       ((guint32)nsecs) / 10000000, 2);",
          "764:   break;",
          "766:  case 3:",
          "770:   num_ptr = uint_to_str_back_len(num_end,",
          "771:       ((guint32)nsecs) / 1000000, 3);",
          "772:   break;",
          "774:  case 4:",
          "778:   num_ptr = uint_to_str_back_len(num_end,",
          "779:       ((guint32)nsecs) / 100000, 4);",
          "780:   break;",
          "782:  case 5:",
          "786:   num_ptr = uint_to_str_back_len(num_end,",
          "787:       ((guint32)nsecs) / 10000, 5);",
          "788:   break;",
          "790:  case 6:",
          "794:   num_ptr = uint_to_str_back_len(num_end,",
          "795:       ((guint32)nsecs) / 1000, 6);",
          "796:   break;",
          "798:  case 7:",
          "802:   num_ptr = uint_to_str_back_len(num_end,",
          "803:       ((guint32)nsecs) / 100, 7);",
          "804:   break;",
          "806:  case 8:",
          "810:   num_ptr = uint_to_str_back_len(num_end,",
          "811:       ((guint32)nsecs) / 10, 8);",
          "812:   break;",
          "814:  case 9:",
          "818:   num_ptr = uint_to_str_back_len(num_end, (guint32)nsecs, 9);",
          "819:   break;",
          "821:  default:",
          "822:   ws_assert_not_reached();",
          "823:   break;",
          "",
          "---------------"
        ],
        "wsutil/to_str.h||wsutil/to_str.h": [
          "File: wsutil/to_str.h -> wsutil/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: WS_DLL_PUBLIC void display_epoch_time(gchar *, size_t, const time_t, gint32, const ws_tsprec_e);",
          "306: #ifdef __cplusplus",
          "307: }",
          "",
          "[Removed Lines]",
          "304: WS_DLL_PUBLIC void display_signed_time(gchar *, size_t, const gint64, gint32, const ws_tsprec_e);",
          "",
          "[Added Lines]",
          "304: WS_DLL_PUBLIC void display_signed_time(gchar *, size_t, const nstime_t *, int);",
          "",
          "---------------"
        ]
      }
    }
  ]
}