{
  "cve_id": "CVE-2019-15694",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow, which could be triggered from DecodeManager::decodeRect. Vulnerability occurs due to the signdness error in processing MemOutStream. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "0943c006c7d900dfc0281639e992791d6c567438",
  "patch_info": {
    "commit_hash": "0943c006c7d900dfc0281639e992791d6c567438",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/0943c006c7d900dfc0281639e992791d6c567438",
    "files": [
      "common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h",
      "common/rdr/InStream.h",
      "common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h",
      "common/rfb/Password.cxx",
      "common/rfb/Password.h",
      "common/rfb/util.h",
      "tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h"
    ],
    "message": "Use size_t for lengths in stream objects\n\nProvides safety against them accidentally becoming negative because\nof bugs in the calculations.\n\nAlso does the same to CharArray and friends as they were strongly\nconnection to the stream objects.",
    "before_after_code_files": [
      "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
      "common/rdr/InStream.h||common/rdr/InStream.h",
      "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h||common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h||common/rfb/Configuration.h",
      "common/rfb/Password.cxx||common/rfb/Password.cxx",
      "common/rfb/Password.h||common/rfb/Password.h",
      "common/rfb/util.h||common/rfb/util.h",
      "tests/perf/encperf.cxx||tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h"
    ]
  },
  "patch_diff": {
    "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
      "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: enum { DEFAULT_BUF_SIZE = 8192,",
      "57:        MIN_BULK_SIZE = 1024 };",
      "60:                        bool closeWhenDone_)",
      "61:   : fd(fd_), closeWhenDone(closeWhenDone_),",
      "62:     timeoutms(timeoutms_), blockCallback(0),",
      "",
      "[Removed Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, int bufSize_,",
      "",
      "[Added Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67: }",
      "69: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
      "71:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
      "72:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
      "73:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "",
      "[Removed Lines]",
      "70:                        int bufSize_)",
      "",
      "[Added Lines]",
      "70:                        size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:   timeoutms = 0;",
      "93: }",
      "96: {",
      "97:   return offset + ptr - start;",
      "98: }",
      "101: {",
      "102:   if (length < MIN_BULK_SIZE) {",
      "103:     InStream::readBytes(data, length);",
      "",
      "[Removed Lines]",
      "95: int FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, int length)",
      "",
      "[Added Lines]",
      "95: size_t FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, size_t length)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:   U8* dataPtr = (U8*)data;",
      "110:   if (n > length) n = length;",
      "112:   memcpy(dataPtr, ptr, n);",
      "",
      "[Removed Lines]",
      "109:   int n = end - ptr;",
      "",
      "[Added Lines]",
      "109:   size_t n = end - ptr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123: }",
      "127: {",
      "128:   if (itemSize > bufSize)",
      "129:     throw Exception(\"FdInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "126: int FdInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "126: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "135:   end -= ptr - start;",
      "136:   ptr = start;",
      "139:   while (end < start + itemSize) {",
      "140:     bytes_to_read = start + bufSize - end;",
      "141:     if (!timing) {",
      "",
      "[Removed Lines]",
      "138:   int bytes_to_read;",
      "",
      "[Added Lines]",
      "138:   size_t bytes_to_read;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "148:       bytes_to_read = vncmin(bytes_to_read, vncmax(itemSize*nItems, 8));",
      "149:     }",
      "151:     if (n == 0) return 0;",
      "152:     end += n;",
      "153:   }",
      "156:     nItems = (end - ptr) / itemSize;",
      "158:   return nItems;",
      "",
      "[Removed Lines]",
      "150:     int n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "150:     size_t n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "175: {",
      "176:   struct timeval before, after;",
      "177:   if (timing)",
      "",
      "[Removed Lines]",
      "174: int FdInStream::readWithTimeoutOrCallback(void* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "174: size_t FdInStream::readWithTimeoutOrCallback(void* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
      "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:   public:",
      "41:                bool closeWhenDone_=false);",
      "43:     virtual ~FdInStream();",
      "45:     void setTimeout(int timeoutms);",
      "46:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
      "47:     int getFd() { return fd; }",
      "51:     void startTiming();",
      "52:     void stopTiming();",
      "",
      "[Removed Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, int bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback, int bufSize=0);",
      "48:     int pos();",
      "49:     void readBytes(void* data, int length);",
      "",
      "[Added Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, size_t bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback,",
      "43:                size_t bufSize=0);",
      "49:     size_t pos();",
      "50:     void readBytes(void* data, size_t length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:     unsigned int timeWaited() { return timeWaitedIn100us; }",
      "56:   protected:",
      "59:   private:",
      "62:     int fd;",
      "63:     bool closeWhenDone;",
      "",
      "[Removed Lines]",
      "57:     int overrun(int itemSize, int nItems, bool wait);",
      "60:     int readWithTimeoutOrCallback(void* buf, int len, bool wait=true);",
      "",
      "[Added Lines]",
      "58:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "61:     size_t readWithTimeoutOrCallback(void* buf, size_t len, bool wait=true);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:     unsigned int timeWaitedIn100us;",
      "69:     unsigned int timedKbits;",
      "73:     U8* start;",
      "74:   };",
      "",
      "[Removed Lines]",
      "71:     int bufSize;",
      "72:     int offset;",
      "",
      "[Added Lines]",
      "72:     size_t bufSize;",
      "73:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
      "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: enum { DEFAULT_BUF_SIZE = 16384 };",
      "55:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_),",
      "56:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "57: {",
      "",
      "[Removed Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, int bufSize_)",
      "",
      "[Added Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:   blocking = blocking_;",
      "80: }",
      "83: {",
      "84:   return offset + ptr - sentUpTo;",
      "85: }",
      "",
      "[Removed Lines]",
      "82: int FdOutStream::length()",
      "",
      "[Added Lines]",
      "82: size_t FdOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97: void FdOutStream::flush()",
      "98: {",
      "99:   while (sentUpTo < ptr) {",
      "105:     if (n == 0) {",
      "",
      "[Removed Lines]",
      "100:     int n = writeWithTimeout((const void*) sentUpTo,",
      "101:                              ptr - sentUpTo,",
      "102:                              blocking? timeoutms : 0);",
      "",
      "[Added Lines]",
      "100:     size_t n = writeWithTimeout((const void*) sentUpTo,",
      "101:                                 ptr - sentUpTo,",
      "102:                                 blocking? timeoutms : 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120: }",
      "124: {",
      "125:   if (itemSize > bufSize)",
      "126:     throw Exception(\"FdOutStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "123: int FdOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "123: size_t FdOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "129:   flush();",
      "136:         (itemSize < bufSize - (ptr - sentUpTo))) {",
      "137:       memmove(start, sentUpTo, ptr - sentUpTo);",
      "138:       ptr = start + (ptr - sentUpTo);",
      "",
      "[Removed Lines]",
      "132:   if (itemSize > end - ptr) {",
      "135:     if ((sentUpTo - start > bufSize / 4) &&",
      "",
      "[Added Lines]",
      "132:   if (itemSize > (size_t)(end - ptr)) {",
      "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   }",
      "154:     nItems = (end - ptr) / itemSize;",
      "156:   return nItems;",
      "",
      "[Removed Lines]",
      "153:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "153:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "170: {",
      "171:   int n;",
      "",
      "[Removed Lines]",
      "169: int FdOutStream::writeWithTimeout(const void* data, int length, int timeoutms)",
      "",
      "[Added Lines]",
      "169: size_t FdOutStream::writeWithTimeout(const void* data, size_t length, int timeoutms)",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
      "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~FdOutStream();",
      "40:     void setTimeout(int timeoutms);",
      "",
      "[Removed Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, int bufSize=0);",
      "",
      "[Added Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, size_t bufSize=0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:     int getFd() { return fd; }",
      "44:     void flush();",
      "47:     int bufferUsage();",
      "49:     unsigned getIdleTime();",
      "51:   private:",
      "54:     int fd;",
      "55:     bool blocking;",
      "56:     int timeoutms;",
      "59:     U8* start;",
      "60:     U8* sentUpTo;",
      "61:     struct timeval lastWrite;",
      "",
      "[Removed Lines]",
      "45:     int length();",
      "52:     int overrun(int itemSize, int nItems);",
      "53:     int writeWithTimeout(const void* data, int length, int timeoutms);",
      "57:     int bufSize;",
      "58:     int offset;",
      "",
      "[Added Lines]",
      "45:     size_t length();",
      "52:     size_t overrun(size_t itemSize, size_t nItems);",
      "53:     size_t writeWithTimeout(const void* data, size_t length, int timeoutms);",
      "57:     size_t bufSize;",
      "58:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
      "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:   ptr = end = b;",
      "49: }",
      "52: {",
      "53:   if (!file)",
      "54:     throw Exception(\"File is not open\");",
      "",
      "[Removed Lines]",
      "51: int FileInStream::pos()",
      "",
      "[Added Lines]",
      "51: size_t FileInStream::pos()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:   return ftell(file) + ptr - b;",
      "57: }",
      "60: {",
      "62:     throw Exception(\"FileInStream overrun: max itemSize exceeded\");",
      "64:   if (end - ptr != 0)",
      "",
      "[Removed Lines]",
      "59: int FileInStream::overrun(int itemSize, int nItems, bool wait)",
      "61:   if (itemSize > (int)sizeof(b))",
      "",
      "[Added Lines]",
      "59: size_t FileInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "61:   if (itemSize > sizeof(b))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     end += b + sizeof(b) - end;",
      "81:   }",
      "84:     nItems = (end - ptr) / itemSize;",
      "86:   return nItems;",
      "",
      "[Removed Lines]",
      "83:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "83:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.h||common/rdr/FileInStream.h": [
      "File: common/rdr/FileInStream.h -> common/rdr/FileInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     void reset(void);",
      "40:   protected:",
      "43:   private:",
      "44:     U8 b[131072];",
      "",
      "[Removed Lines]",
      "38:     int pos();",
      "41:     int overrun(int itemSize, int nItems, bool wait = true);",
      "",
      "[Added Lines]",
      "38:     size_t pos();",
      "41:     size_t overrun(size_t itemSize, size_t nItems, bool wait = true);",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
      "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static inline int min(int a, int b) {return a<b ? a : b;}",
      "32: : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_LEN), offset(0), in_stream(is)",
      "33: {",
      "34:   ptr = end = start = new U8[bufSize];",
      "",
      "[Removed Lines]",
      "31: HexInStream::HexInStream(InStream& is, int bufSize_)",
      "",
      "[Added Lines]",
      "31: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:   return true;",
      "51: }",
      "55:   if ((l % 2) == 0) {",
      "56:     delete [] *data;",
      "",
      "[Removed Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, int* length) {",
      "54:   int l=strlen(s);",
      "",
      "[Added Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, size_t* length) {",
      "54:   size_t l=strlen(s);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:       return true;",
      "63:       int byte = 0;",
      "64:       if (!readHexAndShift(s[i], &byte) ||",
      "65:         !readHexAndShift(s[i+1], &byte))",
      "",
      "[Removed Lines]",
      "62:     for(int i=0;i<l;i+=2) {",
      "",
      "[Added Lines]",
      "62:     for(size_t i=0;i<l;i+=2) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: }",
      "80:   return offset + ptr - start;",
      "81: }",
      "84:   if (itemSize > bufSize)",
      "85:     throw Exception(\"HexInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "79: int HexInStream::pos() {",
      "83: int HexInStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "79: size_t HexInStream::pos() {",
      "83: size_t HexInStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "92:   ptr = start;",
      "94:   while (end < ptr + itemSize) {",
      "96:     if (n == 0) return 0;",
      "97:     const U8* iptr = in_stream.getptr();",
      "98:     const U8* eptr = in_stream.getend();",
      "101:     U8* optr = (U8*) end;",
      "103:       int v = 0;",
      "104:       readHexAndShift(iptr[i*2], &v);",
      "105:       readHexAndShift(iptr[i*2+1], &v);",
      "",
      "[Removed Lines]",
      "95:     int n = in_stream.check(2, 1, wait);",
      "99:     int length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "95:     size_t n = in_stream.check(2, 1, wait);",
      "99:     size_t length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "110:     end += length;",
      "111:   }",
      "114:     nItems = (end - ptr) / itemSize;",
      "116:   return nItems;",
      "",
      "[Removed Lines]",
      "113:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "113:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
      "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexInStream : public InStream {",
      "27:   public:",
      "30:     virtual ~HexInStream();",
      "34:     static bool readHexAndShift(char c, int* v);",
      "37:   protected:",
      "40:   private:",
      "42:     U8* start;",
      "45:     InStream& in_stream;",
      "46:   };",
      "",
      "[Removed Lines]",
      "29:     HexInStream(InStream& is, int bufSize=0);",
      "32:     int pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, int* length);",
      "38:     int overrun(int itemSize, int nItems, bool wait);",
      "41:     int bufSize;",
      "43:     int offset;",
      "",
      "[Added Lines]",
      "29:     HexInStream(InStream& is, size_t bufSize=0);",
      "32:     size_t pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, size_t* length);",
      "38:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "41:     size_t bufSize;",
      "43:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
      "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: const int DEFAULT_BUF_LEN = 16384;",
      "29: : out_stream(os), offset(0), bufSize(buflen ? buflen : DEFAULT_BUF_LEN)",
      "30: {",
      "31:   if (bufSize % 2)",
      "",
      "[Removed Lines]",
      "26: static inline int min(int a, int b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, int buflen)",
      "",
      "[Added Lines]",
      "26: static inline size_t min(size_t a, size_t b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, size_t buflen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:     throw rdr::Exception(\"intToHex failed\");",
      "49: }",
      "52:   char* buffer = new char[length*2+1];",
      "54:     buffer[i*2] = intToHex((data[i] >> 4) & 15);",
      "55:     buffer[i*2+1] = intToHex((data[i] & 15));",
      "56:     if (!buffer[i*2] || !buffer[i*2+1]) {",
      "",
      "[Removed Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, int length) {",
      "53:   for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, size_t length) {",
      "53:   for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "70:     out_stream.check(2);",
      "71:     U8* optr = out_stream.getptr();",
      "72:     U8* oend = out_stream.getend();",
      "76:       optr[i*2] = intToHex((pos[i] >> 4) & 0xf);",
      "77:       optr[i*2+1] = intToHex(pos[i] & 0xf);",
      "78:     }",
      "",
      "[Removed Lines]",
      "73:     int length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "73:     size_t length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84:   ptr = start;",
      "85: }",
      "88: {",
      "89:   return offset + ptr - start;",
      "90: }",
      "",
      "[Removed Lines]",
      "87: int HexOutStream::length()",
      "",
      "[Added Lines]",
      "87: size_t HexOutStream::length()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "95:   out_stream.flush();",
      "96: }",
      "100:   if (itemSize > bufSize)",
      "101:     throw Exception(\"HexOutStream overrun: max itemSize exceeded\");",
      "103:   writeBuffer();",
      "106:     nItems = (end - ptr) / itemSize;",
      "108:   return nItems;",
      "",
      "[Removed Lines]",
      "98: int",
      "99: HexOutStream::overrun(int itemSize, int nItems) {",
      "105:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "98: size_t",
      "99: HexOutStream::overrun(size_t itemSize, size_t nItems) {",
      "105:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h": [
      "File: common/rdr/HexOutStream.h -> common/rdr/HexOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexOutStream : public OutStream {",
      "27:   public:",
      "30:     virtual ~HexOutStream();",
      "32:     void flush();",
      "35:     static char intToHex(int i);",
      "38:   private:",
      "39:     void writeBuffer();",
      "42:     OutStream& out_stream;",
      "44:     U8* start;",
      "47:   };",
      "49: }",
      "",
      "[Removed Lines]",
      "29:     HexOutStream(OutStream& os, int buflen=0);",
      "33:     int length();",
      "36:     static char* binToHexStr(const char* data, int length);",
      "40:     int overrun(int itemSize, int nItems);",
      "45:     int offset;",
      "46:     int bufSize;",
      "",
      "[Added Lines]",
      "29:     HexOutStream(OutStream& os, size_t buflen=0);",
      "33:     size_t length();",
      "36:     static char* binToHexStr(const char* data, size_t length);",
      "40:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t offset;",
      "46:     size_t bufSize;",
      "",
      "---------------"
    ],
    "common/rdr/InStream.h||common/rdr/InStream.h": [
      "File: common/rdr/InStream.h -> common/rdr/InStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     {",
      "46:       if (ptr + itemSize * nItems > end) {",
      "47:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "44:     inline int check(int itemSize, int nItems=1, bool wait=true)",
      "",
      "[Added Lines]",
      "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "59:     inline bool checkNoWait(int length) { return check(length, 1, false)!=0; }",
      "",
      "[Added Lines]",
      "59:     inline bool checkNoWait(size_t length) { return check(length, 1, false)!=0; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:     static U32 maxStringLength;",
      "86:       while (bytes > 0) {",
      "88:         ptr += n;",
      "89:         bytes -= n;",
      "90:       }",
      "",
      "[Removed Lines]",
      "85:     inline void skip(int bytes) {",
      "87:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "85:     inline void skip(size_t bytes) {",
      "87:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "96:       U8* dataPtr = (U8*)data;",
      "97:       U8* dataEnd = dataPtr + length;",
      "98:       while (dataPtr < dataEnd) {",
      "100:         memcpy(dataPtr, ptr, n);",
      "101:         ptr += n;",
      "102:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "95:     void readBytes(void* data, int length) {",
      "99:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "95:     void readBytes(void* data, size_t length) {",
      "99:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "117:     virtual int pos() = 0;",
      "",
      "[Added Lines]",
      "117:     virtual size_t pos() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "138:   protected:",
      "",
      "[Removed Lines]",
      "136:     virtual int overrun(int itemSize, int nItems, bool wait=true) = 0;",
      "",
      "[Added Lines]",
      "136:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait=true) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/MemInStream.h||common/rdr/MemInStream.h": [
      "File: common/rdr/MemInStream.h -> common/rdr/MemInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:   public:",
      "40:       : start((const U8*)data), deleteWhenDone(deleteWhenDone_)",
      "41:     {",
      "42:       ptr = start;",
      "",
      "[Removed Lines]",
      "39:     MemInStream(const void* data, int len, bool deleteWhenDone_=false)",
      "",
      "[Added Lines]",
      "39:     MemInStream(const void* data, size_t len, bool deleteWhenDone_=false)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         delete [] start;",
      "49:     }",
      "54:   private:",
      "57:     const U8* start;",
      "58:     bool deleteWhenDone;",
      "59:   };",
      "",
      "[Removed Lines]",
      "51:     int pos() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "56:     int overrun(int itemSize, int nItems, bool wait) { throw EndOfStream(); }",
      "",
      "[Added Lines]",
      "51:     size_t pos() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "56:     size_t overrun(size_t itemSize, size_t nItems, bool wait) { throw EndOfStream(); }",
      "",
      "---------------"
    ],
    "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
      "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:       delete [] start;",
      "41:     }",
      "44:       check(length);",
      "45:       memcpy(ptr, data, length);",
      "46:       ptr += length;",
      "47:     }",
      "50:     void clear() { ptr = start; };",
      "51:     void clearAndZero() { memset(start, 0, ptr-start); clear(); }",
      "",
      "[Removed Lines]",
      "43:     void writeBytes(const void* data, int length) {",
      "49:     int length() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "",
      "[Added Lines]",
      "43:     void writeBytes(const void* data, size_t length) {",
      "49:     size_t length() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:         len = (end - start) * 2;",
      "68:       U8* newStart = new U8[len];",
      "",
      "[Removed Lines]",
      "63:     int overrun(int itemSize, int nItems) {",
      "64:       int len = ptr - start + itemSize * nItems;",
      "65:       if (len < (end - start) * 2)",
      "",
      "[Added Lines]",
      "63:     size_t overrun(size_t itemSize, size_t nItems) {",
      "64:       size_t len = ptr - start + itemSize * nItems;",
      "65:       if (len < (size_t)(end - start) * 2)",
      "",
      "---------------"
    ],
    "common/rdr/OutStream.h||common/rdr/OutStream.h": [
      "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:     {",
      "49:       if (ptr + itemSize * nItems > end) {",
      "50:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "47:     inline int check(int itemSize, int nItems=1)",
      "",
      "[Added Lines]",
      "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:       writeBytes(str, len);",
      "77:     }",
      "80:       while (bytes-- > 0) writeU8(0);",
      "81:     }",
      "84:       while (bytes > 0) {",
      "86:         ptr += n;",
      "87:         bytes -= n;",
      "88:       }",
      "",
      "[Removed Lines]",
      "79:     inline void pad(int bytes) {",
      "83:     inline void skip(int bytes) {",
      "85:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "79:     inline void pad(size_t bytes) {",
      "83:     inline void skip(size_t bytes) {",
      "85:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:       const U8* dataPtr = (const U8*)data;",
      "95:       const U8* dataEnd = dataPtr + length;",
      "96:       while (dataPtr < dataEnd) {",
      "98:         memcpy(ptr, dataPtr, n);",
      "99:         ptr += n;",
      "100:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "93:     void writeBytes(const void* data, int length) {",
      "97:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "93:     void writeBytes(const void* data, size_t length) {",
      "97:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:       while (length > 0) {",
      "109:         is->readBytes(ptr, n);",
      "110:         ptr += n;",
      "111:         length -= n;",
      "",
      "[Removed Lines]",
      "106:     void copyBytes(InStream* is, int length) {",
      "108:         int n = check(1, length);",
      "",
      "[Added Lines]",
      "106:     void copyBytes(InStream* is, size_t length) {",
      "108:         size_t n = check(1, length);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "127:     virtual int length() = 0;",
      "",
      "[Added Lines]",
      "127:     virtual size_t length() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   protected:",
      "",
      "[Removed Lines]",
      "148:     virtual int overrun(int itemSize, int nItems) = 0;",
      "",
      "[Added Lines]",
      "148:     virtual size_t overrun(size_t itemSize, size_t nItems) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
      "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: using namespace rdr;",
      "40: unsigned int RandomStream::seed;",
      "",
      "[Removed Lines]",
      "38: const int DEFAULT_BUF_LEN = 256;",
      "",
      "[Added Lines]",
      "38: const size_t DEFAULT_BUF_LEN = 256;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: #endif",
      "87: }",
      "90:   return offset + ptr - start;",
      "91: }",
      "94:   if (itemSize > DEFAULT_BUF_LEN)",
      "95:     throw Exception(\"RandomStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "89: int RandomStream::pos() {",
      "93: int RandomStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "89: size_t RandomStream::pos() {",
      "93: size_t RandomStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   offset += ptr - start;",
      "102:   ptr = start;",
      "106: #ifdef RFB_HAVE_WINCRYPT",
      "107:   if (provider) {",
      "",
      "[Removed Lines]",
      "104:   int length = start + DEFAULT_BUF_LEN - end;",
      "",
      "[Added Lines]",
      "104:   size_t length = start + DEFAULT_BUF_LEN - end;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112: #else",
      "113: #ifndef WIN32",
      "114:   if (fp) {",
      "116:     if (n != 1)",
      "117:       throw rdr::SystemException(\"reading /dev/urandom or /dev/random failed\",",
      "118:                                  errno);",
      "",
      "[Removed Lines]",
      "115:     int n = fread((U8*)end, length, 1, fp);",
      "",
      "[Added Lines]",
      "115:     size_t n = fread((U8*)end, length, 1, fp);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "122:   {",
      "123: #endif",
      "124: #endif",
      "127:   }",
      "130:     nItems = (end - ptr) / itemSize;",
      "132:   return nItems;",
      "",
      "[Removed Lines]",
      "125:     for (int i=0; i<length; i++)",
      "129:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "125:     for (size_t i=0; i<length; i++)",
      "129:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.h||common/rdr/RandomStream.h": [
      "File: common/rdr/RandomStream.h -> common/rdr/RandomStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     RandomStream();",
      "40:     virtual ~RandomStream();",
      "44:   protected:",
      "47:   private:",
      "48:     U8* start;",
      "51:     static unsigned int seed;",
      "52: #ifdef RFB_HAVE_WINCRYPT",
      "",
      "[Removed Lines]",
      "42:     int pos();",
      "45:     int overrun(int itemSize, int nItems, bool wait);",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "42:     size_t pos();",
      "45:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
      "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete[] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "84: {",
      "85:   if (itemSize > bufSize)",
      "86:     throw Exception(\"TLSInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "78: int TLSInStream::pos()",
      "83: int TLSInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "78: size_t TLSInStream::pos()",
      "83: size_t TLSInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:   ptr = start;",
      "95:   while (end < start + itemSize) {",
      "97:     if (!wait && n == 0)",
      "98:       return 0;",
      "99:     end += n;",
      "100:   }",
      "103:     nItems = (end - ptr) / itemSize;",
      "105:   return nItems;",
      "106: }",
      "109: {",
      "110:   int n;",
      "",
      "[Removed Lines]",
      "96:     int n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > end - ptr)",
      "108: int TLSInStream::readTLS(U8* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > (size_t)(end - ptr))",
      "108: size_t TLSInStream::readTLS(U8* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h": [
      "File: common/rdr/TLSInStream.h -> common/rdr/TLSInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     TLSInStream(InStream* in, gnutls_session_t session);",
      "37:     virtual ~TLSInStream();",
      "41:   private:",
      "44:     static ssize_t pull(gnutls_transport_ptr_t str, void* data, size_t size);",
      "46:     gnutls_session_t session;",
      "47:     InStream* in;",
      "50:     U8* start;",
      "51:   };",
      "52: };",
      "",
      "[Removed Lines]",
      "39:     int pos();",
      "42:     int overrun(int itemSize, int nItems, bool wait);",
      "43:     int readTLS(U8* buf, int len, bool wait);",
      "48:     int bufSize;",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t pos();",
      "42:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "43:     size_t readTLS(U8* buf, size_t len, bool wait);",
      "48:     size_t bufSize;",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
      "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete [] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int TLSOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t TLSOutStream::length()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84: {",
      "85:   U8* sentUpTo = start;",
      "86:   while (sentUpTo < ptr) {",
      "88:     sentUpTo += n;",
      "89:     offset += n;",
      "90:   }",
      "",
      "[Removed Lines]",
      "87:     int n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "[Added Lines]",
      "87:     size_t n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:   out->flush();",
      "94: }",
      "97: {",
      "98:   if (itemSize > bufSize)",
      "99:     throw Exception(\"TLSOutStream overrun: max itemSize exceeded\");",
      "101:   flush();",
      "104:     nItems = (end - ptr) / itemSize;",
      "106:   return nItems;",
      "107: }",
      "110: {",
      "111:   int n;",
      "",
      "[Removed Lines]",
      "96: int TLSOutStream::overrun(int itemSize, int nItems)",
      "103:   if (itemSize * nItems > end - ptr)",
      "109: int TLSOutStream::writeTLS(const U8* data, int length)",
      "",
      "[Added Lines]",
      "96: size_t TLSOutStream::overrun(size_t itemSize, size_t nItems)",
      "103:   if (itemSize * nItems > (size_t)(end - ptr))",
      "109: size_t TLSOutStream::writeTLS(const U8* data, size_t length)",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h": [
      "File: common/rdr/TLSOutStream.h -> common/rdr/TLSOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     virtual ~TLSOutStream();",
      "38:     void flush();",
      "41:   protected:",
      "44:   private:",
      "46:     static ssize_t push(gnutls_transport_ptr_t str, const void* data, size_t size);",
      "48:     gnutls_session_t session;",
      "49:     OutStream* out;",
      "51:     U8* start;",
      "53:   };",
      "54: };",
      "",
      "[Removed Lines]",
      "39:     int length();",
      "42:     int overrun(int itemSize, int nItems);",
      "45:     int writeTLS(const U8* data, int length);",
      "50:     int bufSize;",
      "52:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t length();",
      "42:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t writeTLS(const U8* data, size_t length);",
      "50:     size_t bufSize;",
      "52:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
      "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: enum { DEFAULT_BUF_SIZE = 16384 };",
      "30:   : underlying(0), bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0),",
      "31:     zs(NULL), bytesIn(0)",
      "32: {",
      "",
      "[Removed Lines]",
      "29: ZlibInStream::ZlibInStream(int bufSize_)",
      "",
      "[Added Lines]",
      "29: ZlibInStream::ZlibInStream(size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   delete [] start;",
      "41: }",
      "44: {",
      "45:   underlying = is;",
      "46:   bytesIn = bytesIn_;",
      "47:   ptr = end = start;",
      "48: }",
      "51: {",
      "52:   return offset + ptr - start;",
      "53: }",
      "",
      "[Removed Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, int bytesIn_)",
      "50: int ZlibInStream::pos()",
      "",
      "[Added Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, size_t bytesIn_)",
      "50: size_t ZlibInStream::pos()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:   zs = NULL;",
      "97: }",
      "100: {",
      "101:   if (itemSize > bufSize)",
      "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "99: int ZlibInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "99: size_t ZlibInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:   end -= ptr - start;",
      "109:   ptr = start;",
      "112:     if (!decompress(wait))",
      "113:       return 0;",
      "114:   }",
      "117:     nItems = (end - ptr) / itemSize;",
      "119:   return nItems;",
      "",
      "[Removed Lines]",
      "111:   while (end - ptr < itemSize) {",
      "116:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "111:   while ((size_t)(end - ptr) < itemSize) {",
      "116:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "131:   zs->next_out = (U8*)end;",
      "132:   zs->avail_out = start + bufSize - end;",
      "135:   if (n == 0) return false;",
      "136:   zs->next_in = (U8*)underlying->getptr();",
      "137:   zs->avail_in = underlying->getend() - underlying->getptr();",
      "139:     zs->avail_in = bytesIn;",
      "141:   int rc = inflate(zs, Z_SYNC_FLUSH);",
      "",
      "[Removed Lines]",
      "134:   int n = underlying->check(1, 1, wait);",
      "138:   if ((int)zs->avail_in > bytesIn)",
      "",
      "[Added Lines]",
      "134:   size_t n = underlying->check(1, 1, wait);",
      "138:   if (zs->avail_in > bytesIn)",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
      "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~ZlibInStream();",
      "41:     void flushUnderlying();",
      "43:     void reset();",
      "45:   private:",
      "",
      "[Removed Lines]",
      "37:     ZlibInStream(int bufSize=0);",
      "40:     void setUnderlying(InStream* is, int bytesIn);",
      "42:     int pos();",
      "",
      "[Added Lines]",
      "37:     ZlibInStream(size_t bufSize=0);",
      "40:     void setUnderlying(InStream* is, size_t bytesIn);",
      "42:     size_t pos();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     void init();",
      "48:     void deinit();",
      "51:     bool decompress(bool wait);",
      "53:     InStream* underlying;",
      "56:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "50:     int overrun(int itemSize, int nItems, bool wait);",
      "54:     int bufSize;",
      "55:     int offset;",
      "57:     int bytesIn;",
      "",
      "[Added Lines]",
      "50:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "54:     size_t bufSize;",
      "55:     size_t offset;",
      "57:     size_t bytesIn;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
      "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: enum { DEFAULT_BUF_SIZE = 16384 };",
      "37:   : underlying(os), compressionLevel(compressLevel), newLevel(compressLevel),",
      "38:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "39: {",
      "",
      "[Removed Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, int bufSize_, int compressLevel)",
      "",
      "[Added Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, size_t bufSize_, int compressLevel)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:   newLevel = level;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int ZlibOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t ZlibOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:   ptr = start;",
      "99: }",
      "102: {",
      "103: #ifdef ZLIBOUT_DEBUG",
      "104:   vlog.debug(\"overrun\");",
      "",
      "[Removed Lines]",
      "101: int ZlibOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "101: size_t ZlibOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   checkCompressionLevel();",
      "113:     zs->next_in = start;",
      "114:     zs->avail_in = ptr - start;",
      "",
      "[Removed Lines]",
      "112:   while (end - ptr < itemSize) {",
      "",
      "[Added Lines]",
      "112:   while ((size_t)(end - ptr) < itemSize) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "130:     }",
      "131:   }",
      "134:     nItems = (end - ptr) / itemSize;",
      "136:   return nItems;",
      "",
      "[Removed Lines]",
      "133:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "133:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h": [
      "File: common/rdr/ZlibOutStream.h -> common/rdr/ZlibOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:   public:",
      "39:     virtual ~ZlibOutStream();",
      "41:     void setUnderlying(OutStream* os);",
      "42:     void setCompressionLevel(int level=-1);",
      "43:     void flush();",
      "46:   private:",
      "49:     void deflate(int flush);",
      "50:     void checkCompressionLevel();",
      "52:     OutStream* underlying;",
      "53:     int compressionLevel;",
      "54:     int newLevel;",
      "57:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "38:     ZlibOutStream(OutStream* os=0, int bufSize=0, int compressionLevel=-1);",
      "44:     int length();",
      "48:     int overrun(int itemSize, int nItems);",
      "55:     int bufSize;",
      "56:     int offset;",
      "",
      "[Added Lines]",
      "38:     ZlibOutStream(OutStream* os=0, size_t bufSize=0, int compressionLevel=-1);",
      "44:     size_t length();",
      "48:     size_t overrun(size_t itemSize, size_t nItems);",
      "55:     size_t bufSize;",
      "56:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx": [
      "File: common/rfb/Configuration.cxx -> common/rfb/Configuration.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "423: BinaryParameter::BinaryParameter(const char* name_, const char* desc_,",
      "425: : VoidParameter(name_, desc_, co), value(0), length(0), def_value((char*)v), def_length(l) {",
      "426:   if (l) {",
      "427:     value = new char[l];",
      "",
      "[Removed Lines]",
      "424:      const void* v, int l, ConfigurationObject co)",
      "",
      "[Added Lines]",
      "424:      const void* v, size_t l, ConfigurationObject co)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:   return rdr::HexInStream::hexStrToBin(v, &value, &length);",
      "442: }",
      "445:   LOCK_CONFIG;",
      "446:   if (immutable) return;",
      "447:   vlog.debug(\"set %s(Binary)\", getName());",
      "",
      "[Removed Lines]",
      "444: void BinaryParameter::setParam(const void* v, int len) {",
      "",
      "[Added Lines]",
      "444: void BinaryParameter::setParam(const void* v, size_t len) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:   return rdr::HexOutStream::binToHexStr(value, length);",
      "463: }",
      "466:   LOCK_CONFIG;",
      "467:   if (length_) *length_ = length;",
      "468:   if (data_) {",
      "",
      "[Removed Lines]",
      "465: void BinaryParameter::getData(void** data_, int* length_) const {",
      "",
      "[Added Lines]",
      "465: void BinaryParameter::getData(void** data_, size_t* length_) const {",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.h||common/rfb/Configuration.h": [
      "File: common/rfb/Configuration.h -> common/rfb/Configuration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "257:   class BinaryParameter : public VoidParameter {",
      "258:   public:",
      "261:     using VoidParameter::setParam;",
      "262:     virtual ~BinaryParameter();",
      "263:     virtual bool setParam(const char* value);",
      "265:     virtual char* getDefaultStr() const;",
      "266:     virtual char* getValueStr() const;",
      "272:   protected:",
      "273:     char* value;",
      "275:     char* def_value;",
      "277:   };",
      "",
      "[Removed Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_, const void* v, int l,",
      "260:       ConfigurationObject co=ConfGlobal);",
      "264:     virtual void setParam(const void* v, int l);",
      "270:     void getData(void** data, int* length) const;",
      "274:     int length;",
      "276:     int def_length;",
      "",
      "[Added Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_,",
      "260:                     const void* v, size_t l,",
      "261:                     ConfigurationObject co=ConfGlobal);",
      "265:     virtual void setParam(const void* v, size_t l);",
      "271:     void getData(void** data, size_t* length) const;",
      "275:     size_t length;",
      "277:     size_t def_length;",
      "",
      "---------------"
    ],
    "common/rfb/Password.cxx||common/rfb/Password.cxx": [
      "File: common/rfb/Password.cxx -> common/rfb/Password.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: PlainPasswd::PlainPasswd(char* pwd) : CharArray(pwd) {",
      "39: }",
      "42: }",
      "44: PlainPasswd::PlainPasswd(const ObfuscatedPasswd& obfPwd) : CharArray(9) {",
      "",
      "[Removed Lines]",
      "41: PlainPasswd::PlainPasswd(int len) : CharArray(len) {",
      "",
      "[Added Lines]",
      "41: PlainPasswd::PlainPasswd(size_t len) : CharArray(len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63: ObfuscatedPasswd::ObfuscatedPasswd() : length(0) {",
      "64: }",
      "67: }",
      "69: ObfuscatedPasswd::ObfuscatedPasswd(const PlainPasswd& plainPwd) : CharArray(8), length(8) {",
      "71:   for (i=0; i<8; i++)",
      "72:     buf[i] = i<l ? plainPwd.buf[i] : 0;",
      "73:   deskey(d3desObfuscationKey, EN0);",
      "",
      "[Removed Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(int len) : CharArray(len), length(len) {",
      "70:   int l = strlen(plainPwd.buf), i;",
      "",
      "[Added Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(size_t len) : CharArray(len), length(len) {",
      "70:   size_t l = strlen(plainPwd.buf), i;",
      "",
      "---------------"
    ],
    "common/rfb/Password.h||common/rfb/Password.h": [
      "File: common/rfb/Password.h -> common/rfb/Password.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   public:",
      "29:     PlainPasswd();",
      "30:     PlainPasswd(char* pwd);",
      "32:     PlainPasswd(const ObfuscatedPasswd& obfPwd);",
      "33:     ~PlainPasswd();",
      "34:     void replaceBuf(char* b);",
      "",
      "[Removed Lines]",
      "31:     PlainPasswd(int len);",
      "",
      "[Added Lines]",
      "31:     PlainPasswd(size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:   class ObfuscatedPasswd : public CharArray {",
      "38:   public:",
      "39:     ObfuscatedPasswd();",
      "41:     ObfuscatedPasswd(const PlainPasswd& plainPwd);",
      "42:     ~ObfuscatedPasswd();",
      "44:   };",
      "46: }",
      "",
      "[Removed Lines]",
      "40:     ObfuscatedPasswd(int l);",
      "43:     int length;",
      "",
      "[Added Lines]",
      "40:     ObfuscatedPasswd(size_t l);",
      "43:     size_t length;",
      "",
      "---------------"
    ],
    "common/rfb/util.h||common/rfb/util.h": [
      "File: common/rfb/util.h -> common/rfb/util.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:   public:",
      "51:     CharArray() : buf(0) {}",
      "52:     CharArray(char* str) : buf(str) {} // note: assumes ownership",
      "54:       buf = new char[len]();",
      "55:     }",
      "56:     ~CharArray() {",
      "",
      "[Removed Lines]",
      "53:     CharArray(int len) {",
      "",
      "[Added Lines]",
      "53:     CharArray(size_t len) {",
      "",
      "---------------"
    ],
    "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
      "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: public:",
      "72:   DummyOutStream();",
      "75:   virtual void flush();",
      "77: private:",
      "80:   int offset;",
      "81:   rdr::U8 buf[131072];",
      "",
      "[Removed Lines]",
      "74:   virtual int length();",
      "78:   virtual int overrun(int itemSize, int nItems);",
      "",
      "[Added Lines]",
      "74:   virtual size_t length();",
      "78:   virtual size_t overrun(size_t itemSize, size_t nItems);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:   end = buf + sizeof(buf);",
      "142: }",
      "145: {",
      "146:   flush();",
      "147:   return offset;",
      "",
      "[Removed Lines]",
      "144: int DummyOutStream::length()",
      "",
      "[Added Lines]",
      "144: size_t DummyOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "153:   ptr = buf;",
      "154: }",
      "157: {",
      "158:   flush();",
      "160:     nItems = (end - ptr) / itemSize;",
      "161:   return nItems;",
      "162: }",
      "",
      "[Removed Lines]",
      "156: int DummyOutStream::overrun(int itemSize, int nItems)",
      "159:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "156: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
      "159:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx": [
      "File: win/rfb_win32/Registry.cxx -> win/rfb_win32/Registry.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "146:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setString\", result);",
      "147: }",
      "150:   LONG result = RegSetValueEx(key, valname, 0, REG_BINARY, (const BYTE*)value, length);",
      "151:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setBinary\", result);",
      "152: }",
      "",
      "[Removed Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, int length) const {",
      "",
      "[Added Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, size_t length) const {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "169:   }",
      "170: }",
      "173:   TCharArray hex(getRepresentation(valname));",
      "174:   if (!rdr::HexInStream::hexStrToBin(CStr(hex.buf), (char**)data, length))",
      "175:     throw rdr::Exception(\"getBinary failed\");",
      "176: }",
      "178:   try {",
      "179:     getBinary(valname, data, length);",
      "180:   } catch(rdr::Exception&) {",
      "",
      "[Removed Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, int* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflen) const {",
      "",
      "[Added Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflen) const {",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h": [
      "File: win/rfb_win32/Registry.h -> win/rfb_win32/Registry.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:       void setExpandString(const TCHAR* valname, const TCHAR* s) const;",
      "73:       void setString(const TCHAR* valname, const TCHAR* s) const;",
      "75:       void setInt(const TCHAR* valname, int i) const;",
      "76:       void setBool(const TCHAR* valname, bool b) const;",
      "78:       TCHAR* getString(const TCHAR* valname) const;",
      "79:       TCHAR* getString(const TCHAR* valname, const TCHAR* def) const;",
      "84:       int getInt(const TCHAR* valname) const;",
      "85:       int getInt(const TCHAR* valname, int def) const;",
      "",
      "[Removed Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, int length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, int* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflength) const;",
      "",
      "[Added Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, size_t length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, size_t* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflength) const;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
      "candidate_info": {
        "commit_hash": "91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/91bdaa6c87a7f311163b5f1e4bbcd9de584968cd",
        "files": [
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Add unit tests for PixelFormat.is888() detection",
        "before_after_code_files": [
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     fflush(stdout);",
          "53: }",
          "56: {",
          "59:     doTest(false, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "[Removed Lines]",
          "55: int main(int argc, char** argv)",
          "",
          "[Added Lines]",
          "55: static void do888Test(bool expected, int b, int d, bool e, bool t,",
          "56:                    int rm, int gm, int bm, int rs, int gs, int bs)",
          "57: {",
          "58:     rfb::PixelFormat* pf;",
          "60:     printf(\"PixelFormat(%d, %d, %s, %s, %d, %d, %d, %d, %d, %d): \",",
          "61:            b, d, e ? \"true\" : \"false\", t ? \"true\": \"false\",",
          "62:            rm, gm, bm, rs, gs, bs);",
          "64:     pf = new rfb::PixelFormat(b, d, e, t, rm, gm, bm, rs, gs, bs);",
          "66:     if (pf->is888() == expected)",
          "67:         printf(\"OK\");",
          "68:     else",
          "69:         printf(\"FAILED\");",
          "70:     printf(\"\\n\");",
          "71:     fflush(stdout);",
          "73:     delete pf;",
          "74: }",
          "76: static void sanityTests()",
          "78:     printf(\"Sanity checks:\\n\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 8, 15);",
          "121:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 16, 7);",
          "123:     return 0;",
          "124: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     printf(\"\\n\");",
          "147: }",
          "149: void is888Tests()",
          "150: {",
          "151:     printf(\"Simple format detection:\\n\\n\");",
          "155:     do888Test(true, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "156:     do888Test(true, 32, 24, false, true, 255, 255, 255, 24, 16, 8);",
          "157:     do888Test(true, 32, 24, false, true, 255, 255, 255, 24, 8, 0);",
          "161:     do888Test(false, 32, 16, false, true, 15, 31, 15, 0, 8, 16);",
          "162:     do888Test(false, 32, 8, false, true, 3, 7, 3, 0, 8, 16);",
          "166:     do888Test(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "167:     do888Test(false, 8, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "171:     do888Test(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
          "173:     printf(\"\\n\");",
          "174: }",
          "176: int main(int argc, char** argv)",
          "177: {",
          "178:     sanityTests();",
          "179:     is888Tests();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f615301aba1cc54a749950bf9462c5a85217bc4",
      "candidate_info": {
        "commit_hash": "9f615301aba1cc54a749950bf9462c5a85217bc4",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/9f615301aba1cc54a749950bf9462c5a85217bc4",
        "files": [
          "common/rfb/EncodeManager.cxx",
          "common/rfb/EncodeManager.h"
        ],
        "message": "Add write protection to OffsetPixelBuffer\n\nNo one should every try to write to this buffer. Enforce that by\nthrowing an exception if any one tries to get a writeable pointer\nto the data.",
        "before_after_code_files": [
          "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx",
          "common/rfb/EncodeManager.h||common/rfb/EncodeManager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx": [
          "File: common/rfb/EncodeManager.cxx -> common/rfb/EncodeManager.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <rfb/SMsgWriter.h>",
          "29: #include <rfb/UpdateTracker.h>",
          "30: #include <rfb/LogWriter.h>",
          "32: #include <rfb/RawEncoder.h>",
          "33: #include <rfb/RREEncoder.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <rfb/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1053:   setBuffer(width, height, (rdr::U8*)data_, stride_);",
          "1054: }",
          "1058: #define BPP 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1057: rdr::U8* EncodeManager::OffsetPixelBuffer::getBufferRW(const Rect& r, int* stride)",
          "1058: {",
          "1059:   throw rfb::Exception(\"Invalid write attempt to OffsetPixelBuffer\");",
          "1060: }",
          "",
          "---------------"
        ],
        "common/rfb/EncodeManager.h||common/rfb/EncodeManager.h": [
          "File: common/rfb/EncodeManager.h -> common/rfb/EncodeManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:       void update(const PixelFormat& pf, int width, int height,",
          "150:                   const rdr::U8* data_, int stride);",
          "151:     };",
          "153:     OffsetPixelBuffer offsetPixelBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     private:",
          "153:       virtual rdr::U8* getBufferRW(const Rect& r, int* stride);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53f913a76196c7357d4858bfbf2c33caa9181bae",
      "candidate_info": {
        "commit_hash": "53f913a76196c7357d4858bfbf2c33caa9181bae",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/53f913a76196c7357d4858bfbf2c33caa9181bae",
        "files": [
          "common/rfb/Cursor.cxx",
          "common/rfb/EncodeManager.cxx",
          "common/rfb/PixelBuffer.cxx",
          "common/rfb/PixelBuffer.h",
          "unix/x0vncserver/XPixelBuffer.cxx",
          "unix/xserver/hw/vnc/XserverDesktop.cc",
          "unix/xserver/hw/vnc/XserverDesktop.h",
          "vncviewer/PlatformPixelBuffer.cxx",
          "win/rfb_win32/DIBSectionBuffer.cxx"
        ],
        "message": "Encapsulate PixelBuffer internal details\n\nDon't allow subclasses to just override dimensions or buffer details\ndirectly and instead force them to go via methods. This allows us\nto do sanity checks on the new values and catch bugs and attacks.",
        "before_after_code_files": [
          "common/rfb/Cursor.cxx||common/rfb/Cursor.cxx",
          "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx",
          "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx",
          "common/rfb/PixelBuffer.h||common/rfb/PixelBuffer.h",
          "unix/x0vncserver/XPixelBuffer.cxx||unix/x0vncserver/XPixelBuffer.cxx",
          "unix/xserver/hw/vnc/XserverDesktop.cc||unix/xserver/hw/vnc/XserverDesktop.cc",
          "unix/xserver/hw/vnc/XserverDesktop.h||unix/xserver/hw/vnc/XserverDesktop.h",
          "vncviewer/PlatformPixelBuffer.cxx||vncviewer/PlatformPixelBuffer.cxx",
          "win/rfb_win32/DIBSectionBuffer.cxx||win/rfb_win32/DIBSectionBuffer.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/Cursor.cxx||common/rfb/Cursor.cxx": [
          "File: common/rfb/Cursor.cxx -> common/rfb/Cursor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   assert(cursor);",
          "274:   format = framebuffer->getPF();",
          "278:   rawOffset = pos.subtract(cursor->hotspot());",
          "279:   clippedRect = Rect(0, 0, cursor->width(), cursor->height())",
          "",
          "[Removed Lines]",
          "275:   width_ = framebuffer->width();",
          "276:   height_ = framebuffer->height();",
          "",
          "[Added Lines]",
          "275:   setSize(framebuffer->width(), framebuffer->height());",
          "",
          "---------------"
        ],
        "common/rfb/EncodeManager.cxx||common/rfb/EncodeManager.cxx": [
          "File: common/rfb/EncodeManager.cxx -> common/rfb/EncodeManager.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049:                                               int stride_)",
          "1050: {",
          "1051:   format = pf;",
          "1057: }",
          "",
          "[Removed Lines]",
          "1052:   width_ = width;",
          "1053:   height_ = height;",
          "1055:   data = (rdr::U8*)data_;",
          "1056:   stride = stride_;",
          "",
          "[Added Lines]",
          "1053:   setBuffer(width, height, (rdr::U8*)data_, stride_);",
          "",
          "---------------"
        ],
        "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx": [
          "File: common/rfb/PixelBuffer.cxx -> common/rfb/PixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: PixelBuffer::PixelBuffer(const PixelFormat& pf, int w, int h)",
          "41: PixelBuffer::~PixelBuffer() {}",
          "",
          "[Removed Lines]",
          "38:   : format(pf), width_(w), height_(h) {}",
          "39: PixelBuffer::PixelBuffer() : width_(0), height_(0) {}",
          "",
          "[Added Lines]",
          "38:   : format(pf), width_(0), height_(0)",
          "39: {",
          "40:   setSize(w, h);",
          "41: }",
          "43: PixelBuffer::PixelBuffer() : width_(0), height_(0)",
          "44: {",
          "45: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   if (!r.enclosed_by(getRect()))",
          "54:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "55:                          r.width(), r.height(),",
          "58:   data = getBuffer(r, &inStride);",
          "",
          "[Removed Lines]",
          "56:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "62:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:   if (!r.enclosed_by(getRect()))",
          "90:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "91:                          r.width(), r.height(),",
          "94:   if (stride == 0)",
          "95:     stride = r.width();",
          "",
          "[Removed Lines]",
          "92:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "98:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:                       stride, srcStride);",
          "101: }",
          "105: ModifiablePixelBuffer::ModifiablePixelBuffer(const PixelFormat& pf,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: void PixelBuffer::setSize(int width, int height)",
          "110: {",
          "111:   width_ = width;",
          "112:   height_ = height;",
          "113: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "125:   if (!r.enclosed_by(getRect()))",
          "126:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "129:   w = r.width();",
          "130:   h = r.height();",
          "",
          "[Removed Lines]",
          "127:                          r.width(), r.height(), r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "139:                          r.width(), r.height(), r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:   if (!r.enclosed_by(getRect()))",
          "176:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "177:                          r.width(), r.height(),",
          "180:   bytesPerPixel = getPF().bpp/8;",
          "",
          "[Removed Lines]",
          "178:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "190:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:   if (!drect.enclosed_by(getRect()))",
          "215:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "216:                          drect.width(), drect.height(),",
          "219:   srect = drect.translate(move_by_delta.negate());",
          "220:   if (!srect.enclosed_by(getRect()))",
          "221:     throw rfb::Exception(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "222:                          srect.width(), srect.height(),",
          "225:   bytesPerPixel = format.bpp/8;",
          "",
          "[Removed Lines]",
          "217:                          drect.tl.x, drect.tl.y, width_, height_);",
          "223:                          srect.tl.x, srect.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "229:                          drect.tl.x, drect.tl.y, width(), height());",
          "235:                          srect.tl.x, srect.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:   if (!dest.enclosed_by(getRect()))",
          "276:     throw rfb::Exception(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "277:                          dest.width(), dest.height(),",
          "280:   if (stride == 0)",
          "281:     stride = dest.width();",
          "",
          "[Removed Lines]",
          "278:                          dest.tl.x, dest.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "290:                          dest.tl.x, dest.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "304:   if (!r.enclosed_by(getRect()))",
          "305:     throw rfb::Exception(\"Pixel buffer request %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "306:                          r.width(), r.height(),",
          "310:   return &data[(r.tl.x + (r.tl.y * stride)) * (format.bpp/8)];",
          "",
          "[Removed Lines]",
          "307:                          r.tl.x, r.tl.y, width_, height_);",
          "",
          "[Added Lines]",
          "319:                          r.tl.x, r.tl.y, width(), height());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:   if (!r.enclosed_by(getRect()))",
          "320:     throw rfb::Exception(\"Pixel buffer request %dx%d at %d,%d exceeds framebuffer %dx%d\",",
          "321:                          r.width(), r.height(),",
          "325:   return &data[(r.tl.x + (r.tl.y * stride)) * (format.bpp/8)];",
          "326: }",
          "331: ManagedPixelBuffer::ManagedPixelBuffer()",
          "333: {",
          "337: ManagedPixelBuffer::ManagedPixelBuffer(const PixelFormat& pf, int w, int h)",
          "339: {",
          "361:   if (datasize < new_datasize) {",
          "365:     }",
          "366:     if (new_datasize) {",
          "370:       datasize = new_datasize;",
          "371:     }",
          "372:   }",
          "",
          "[Removed Lines]",
          "322:                          r.tl.x, r.tl.y, width_, height_);",
          "332:   : datasize(0)",
          "334:   checkDataSize();",
          "335: };",
          "338:   : FullFramePixelBuffer(pf, w, h, NULL, w), datasize(0)",
          "340:   checkDataSize();",
          "341: };",
          "343: ManagedPixelBuffer::~ManagedPixelBuffer() {",
          "344:   if (data) delete [] data;",
          "345: };",
          "348: void",
          "349: ManagedPixelBuffer::setPF(const PixelFormat &pf) {",
          "350:   format = pf; checkDataSize();",
          "351: };",
          "352: void",
          "353: ManagedPixelBuffer::setSize(int w, int h) {",
          "354:   width_ = w; height_ = h; stride = w; checkDataSize();",
          "355: };",
          "358: inline void",
          "359: ManagedPixelBuffer::checkDataSize() {",
          "360:   unsigned long new_datasize = width_ * height_ * (format.bpp/8);",
          "362:     if (data) {",
          "363:       delete [] data;",
          "364:       datasize = 0; data = 0;",
          "367:       data = new U8[new_datasize];",
          "368:       if (!data)",
          "369:         throw Exception(\"rfb::ManagedPixelBuffer unable to allocate buffer\");",
          "373: };",
          "",
          "[Added Lines]",
          "334:                          r.tl.x, r.tl.y, width(), height());",
          "340: void FullFramePixelBuffer::setBuffer(int width, int height,",
          "341:                                      rdr::U8* data_, int stride_)",
          "342: {",
          "343:   ModifiablePixelBuffer::setSize(width, height);",
          "344:   stride = stride_;",
          "345:   data = data_;",
          "346: }",
          "348: void FullFramePixelBuffer::setSize(int w, int h)",
          "349: {",
          "351:   throw rfb::Exception(\"Invalid call to FullFramePixelBuffer::setSize()\");",
          "352: }",
          "358:   : data_(NULL), datasize(0)",
          "360: }",
          "363:   : FullFramePixelBuffer(pf, 0, 0, NULL, 0), data_(NULL), datasize(0)",
          "365:   setSize(w, h);",
          "366: }",
          "368: ManagedPixelBuffer::~ManagedPixelBuffer()",
          "369: {",
          "370:   if (data_)",
          "371:     delete [] data_;",
          "372: }",
          "374: void ManagedPixelBuffer::setPF(const PixelFormat &pf)",
          "375: {",
          "376:   format = pf;",
          "377:   setSize(width(), height());",
          "378: }",
          "380: void ManagedPixelBuffer::setSize(int w, int h)",
          "381: {",
          "382:   unsigned long new_datasize = w * h * (format.bpp/8);",
          "384:   new_datasize = w * h * (format.bpp/8);",
          "386:     if (data_) {",
          "387:       delete [] data_;",
          "388:       data_ = NULL;",
          "389:       datasize = 0;",
          "392:       data_ = new U8[new_datasize];",
          "397:   setBuffer(w, h, data_, w);",
          "398: }",
          "",
          "---------------"
        ],
        "common/rfb/PixelBuffer.h||common/rfb/PixelBuffer.h": [
          "File: common/rfb/PixelBuffer.h -> common/rfb/PixelBuffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   protected:",
          "92:     PixelBuffer();",
          "93:     PixelFormat format;",
          "94:     int width_, height_;",
          "95:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     virtual void setSize(int width, int height);",
          "95:   protected:",
          "98:   private:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   protected:",
          "156:     FullFramePixelBuffer();",
          "158:     rdr::U8* data;",
          "159:     int stride;",
          "160:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     virtual void setBuffer(int width, int height, rdr::U8* data, int stride);",
          "164:   private:",
          "165:     virtual void setSize(int w, int h);",
          "167:   private:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     virtual void setPF(const PixelFormat &pf);",
          "173:     virtual void setSize(int w, int h);",
          "179:     unsigned long datasize;",
          "181:   };",
          "183: };",
          "",
          "[Removed Lines]",
          "176:     int dataLen() const { return width_ * height_ * (format.bpp/8); }",
          "178:   protected:",
          "180:     void checkDataSize();",
          "",
          "[Added Lines]",
          "185:   private:",
          "186:     rdr::U8* data_; // Mirrors FullFramePixelBuffer::data",
          "",
          "---------------"
        ],
        "unix/x0vncserver/XPixelBuffer.cxx||unix/x0vncserver/XPixelBuffer.cxx": [
          "File: unix/x0vncserver/XPixelBuffer.cxx -> unix/x0vncserver/XPixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                        ffs(m_image->xim->blue_mask) - 1);",
          "62:   m_image->get(DefaultRootWindow(m_dpy), m_offsetLeft, m_offsetTop);",
          "",
          "[Removed Lines]",
          "53:   width_ = rect.width();",
          "54:   height_ = rect.height();",
          "55:   data = (rdr::U8 *)m_image->xim->data;",
          "59:   stride = m_image->xim->bytes_per_line * 8 / m_image->xim->bits_per_pixel;",
          "",
          "[Added Lines]",
          "53:   setBuffer(rect.width(), rect.height(), (rdr::U8 *)m_image->xim->data,",
          "54:             m_image->xim->bytes_per_line * 8 / m_image->xim->bits_per_pixel);",
          "",
          "---------------"
        ],
        "unix/xserver/hw/vnc/XserverDesktop.cc||unix/xserver/hw/vnc/XserverDesktop.cc": [
          "File: unix/xserver/hw/vnc/XserverDesktop.cc -> unix/xserver/hw/vnc/XserverDesktop.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:                                void* fbptr, int stride)",
          "76:   : screenIndex(screenIndex_),",
          "77:     server(0), listeners(listeners_),",
          "79:     queryConnectId(0), queryConnectTimer(this)",
          "80: {",
          "81:   format = pf;",
          "",
          "[Removed Lines]",
          "78:     directFbptr(true),",
          "",
          "[Added Lines]",
          "78:     shadowFramebuffer(NULL),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     delete listeners.back();",
          "98:     listeners.pop_back();",
          "99:   }",
          "102:   delete server;",
          "103: }",
          "",
          "[Removed Lines]",
          "100:   if (!directFbptr)",
          "101:     delete [] data;",
          "",
          "[Added Lines]",
          "100:   if (shadowFramebuffer)",
          "101:     delete [] shadowFramebuffer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116: {",
          "117:   ScreenSet layout;",
          "125:   }",
          "127:   if (!fbptr) {",
          "129:     stride_ = w;",
          "131:   }",
          "136:   vncSetGlueContext(screenIndex);",
          "137:   layout = ::computeScreenLayout(&outputIdMap);",
          "",
          "[Removed Lines]",
          "119:   width_ = w;",
          "120:   height_ = h;",
          "122:   if (!directFbptr) {",
          "123:     delete [] data;",
          "124:     directFbptr = true;",
          "128:     fbptr = new rdr::U8[w * h * (format.bpp/8)];",
          "130:     directFbptr = false;",
          "133:   data = (rdr::U8*)fbptr;",
          "134:   stride = stride_;",
          "",
          "[Added Lines]",
          "119:   if (shadowFramebuffer) {",
          "120:     delete [] shadowFramebuffer;",
          "121:     shadowFramebuffer = NULL;",
          "125:     shadowFramebuffer = new rdr::U8[w * h * (format.bpp/8)];",
          "126:     fbptr = shadowFramebuffer;",
          "130:   setBuffer(w, h, (rdr::U8*)fbptr, stride_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "493: void XserverDesktop::grabRegion(const rfb::Region& region)",
          "494: {",
          "496:     return;",
          "498:   std::vector<rfb::Rect> rects;",
          "",
          "[Removed Lines]",
          "495:   if (directFbptr)",
          "",
          "[Added Lines]",
          "491:   if (shadowFramebuffer == NULL)",
          "",
          "---------------"
        ],
        "unix/xserver/hw/vnc/XserverDesktop.h||unix/xserver/hw/vnc/XserverDesktop.h": [
          "File: unix/xserver/hw/vnc/XserverDesktop.h -> unix/xserver/hw/vnc/XserverDesktop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   int screenIndex;",
          "119:   rfb::VNCServer* server;",
          "120:   std::list<network::SocketListener*> listeners;",
          "123:   uint32_t queryConnectId;",
          "124:   network::Socket* queryConnectSocket;",
          "",
          "[Removed Lines]",
          "121:   bool directFbptr;",
          "",
          "[Added Lines]",
          "121:   rdr::U8* shadowFramebuffer;",
          "",
          "---------------"
        ],
        "vncviewer/PlatformPixelBuffer.cxx||vncviewer/PlatformPixelBuffer.cxx": [
          "File: vncviewer/PlatformPixelBuffer.cxx -> vncviewer/PlatformPixelBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: PlatformPixelBuffer::PlatformPixelBuffer(int width, int height) :",
          "37:   FullFramePixelBuffer(rfb::PixelFormat(32, 24, false, true,",
          "38:                                         255, 255, 255, 16, 8, 0),",
          "40:   Surface(width, height)",
          "41: #if !defined(WIN32) && !defined(__APPLE__)",
          "42:   , shminfo(NULL), xim(NULL)",
          "",
          "[Removed Lines]",
          "39:                        width, height, NULL, 0),",
          "",
          "[Added Lines]",
          "39:                        0, 0, NULL, 0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     vlog.debug(\"Using standard XImage\");",
          "57:   }",
          "63:   clear(0, 0, 0);",
          "64: #else",
          "67: #endif",
          "68: }",
          "",
          "[Removed Lines]",
          "59:   data = (rdr::U8*)xim->data;",
          "60:   stride = xim->bytes_per_line / (getPF().bpp/8);",
          "65:   FullFramePixelBuffer::data = (rdr::U8*)Surface::data;",
          "66:   stride = width;",
          "",
          "[Added Lines]",
          "59:   setBuffer(width, height, (rdr::U8*)xim->data,",
          "60:             xim->bytes_per_line / (getPF().bpp/8));",
          "65:   setBuffer(width, height, (rdr::U8*)Surface::data, width);",
          "",
          "---------------"
        ],
        "win/rfb_win32/DIBSectionBuffer.cxx||win/rfb_win32/DIBSectionBuffer.cxx": [
          "File: win/rfb_win32/DIBSectionBuffer.cxx -> win/rfb_win32/DIBSectionBuffer.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   if (!pf.trueColour)",
          "53:     throw rfb::Exception(\"palette format not supported\");",
          "54:   format = pf;",
          "56: }",
          "69: inline void initMaxAndShift(DWORD mask, int* max, int* shift) {",
          "70:   for ((*shift) = 0; (mask & 1) == 0; (*shift)++) mask >>= 1;",
          "71:   (*max) = (rdr::U16)mask;",
          "72: }",
          "75:   HBITMAP new_bitmap = 0;",
          "76:   rdr::U8* new_data = 0;",
          "79:     BitmapInfo bi;",
          "80:     memset(&bi, 0, sizeof(bi));",
          "81:     UINT iUsage = DIB_RGB_COLORS;",
          "82:     bi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);",
          "83:     bi.bmiHeader.biBitCount = format.bpp;",
          "85:     bi.bmiHeader.biPlanes = 1;",
          "88:     bi.bmiHeader.biCompression = (format.bpp > 8) ? BI_BITFIELDS : BI_RGB;",
          "89:     bi.mask.red = format.pixelFromRGB((rdr::U16)~0, 0, 0);",
          "90:     bi.mask.green = format.pixelFromRGB(0, (rdr::U16)~0, 0);",
          "",
          "[Removed Lines]",
          "55:   recreateBuffer();",
          "58: void DIBSectionBuffer::setSize(int w, int h) {",
          "59:   if (width_ == w && height_ == h) {",
          "60:     vlog.debug(\"size unchanged by setSize()\");",
          "61:     return;",
          "62:   }",
          "63:   width_ = w;",
          "64:   height_ = h;",
          "65:   recreateBuffer();",
          "66: }",
          "74: void DIBSectionBuffer::recreateBuffer() {",
          "78:   if (width_ && height_ && (format.depth != 0)) {",
          "84:     bi.bmiHeader.biSizeImage = (format.bpp / 8) * width_ * height_;",
          "86:     bi.bmiHeader.biWidth = width_;",
          "87:     bi.bmiHeader.biHeight = -height_;",
          "",
          "[Added Lines]",
          "55:   setSize(width(), height());",
          "63: void DIBSectionBuffer::setSize(int w, int h) {",
          "67:   if (w && h && (format.depth != 0)) {",
          "73:     bi.bmiHeader.biSizeImage = (format.bpp / 8) * w * h;",
          "75:     bi.bmiHeader.biWidth = w;",
          "76:     bi.bmiHeader.biHeight = -h;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:     if (device) {",
          "116:       BitmapDC src_dev(device, bitmap);",
          "117:       BitmapDC dest_dev(device, new_bitmap);",
          "119:     } else {",
          "120:       WindowDC wndDC(window);",
          "121:       BitmapDC src_dev(wndDC, bitmap);",
          "122:       BitmapDC dest_dev(wndDC, new_bitmap);",
          "124:     }",
          "125:   }",
          "",
          "[Removed Lines]",
          "118:       BitBlt(dest_dev, 0, 0, width_, height_, src_dev, 0, 0, SRCCOPY);",
          "123:       BitBlt(dest_dev, 0, 0, width_, height_, src_dev, 0, 0, SRCCOPY);",
          "",
          "[Added Lines]",
          "107:       BitBlt(dest_dev, 0, 0, w, h, src_dev, 0, 0, SRCCOPY);",
          "112:       BitBlt(dest_dev, 0, 0, w, h, src_dev, 0, 0, SRCCOPY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     DeleteObject(bitmap);",
          "130:     bitmap = 0;",
          "132:   }",
          "134:   if (new_bitmap) {",
          "135:     int bpp, depth;",
          "136:     int redMax, greenMax, blueMax;",
          "137:     int redShift, greenShift, blueShift;",
          "140:     bitmap = new_bitmap;",
          "144:     DIBSECTION ds;",
          "",
          "[Removed Lines]",
          "131:     data = 0;",
          "141:     data = new_data;",
          "",
          "[Added Lines]",
          "120:     setBuffer(0, 0, NULL, 0);",
          "127:     int new_stride;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:     if (bytesPerRow % 4) {",
          "153:       bytesPerRow += 4 - (bytesPerRow % 4);",
          "156:     }",
          "159:     bpp = depth = ds.dsBm.bmBitsPixel;",
          "",
          "[Removed Lines]",
          "150:     stride = width_;",
          "151:     int bytesPerRow = stride * format.bpp/8;",
          "154:       stride = (bytesPerRow * 8) / format.bpp;",
          "155:       vlog.info(\"adjusting DIB stride: %d to %d\", width_, stride);",
          "",
          "[Added Lines]",
          "139:     new_stride = w;",
          "140:     int bytesPerRow = new_stride * format.bpp/8;",
          "143:       new_stride = (bytesPerRow * 8) / format.bpp;",
          "144:       vlog.info(\"adjusting DIB stride: %d to %d\", w, new_stride);",
          "147:     setBuffer(w, h, new_data, new_stride);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
      "candidate_info": {
        "commit_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
        "files": [
          "common/rfb/tightDecode.h"
        ],
        "message": "Handle empty Tight gradient rects\n\nWe always assumed there would be one pixel per row so a rect with\na zero width would result in us writing to unknown memory.\n\nThis could theoretically be used by a malicious server to inject\ncode in to the viewer process.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rfb/tightDecode.h||common/rfb/tightDecode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/tightDecode.h||common/rfb/tightDecode.h": [
          "File: common/rfb/tightDecode.h -> common/rfb/tightDecode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   int rectWidth = r.width();",
          "58:   for (y = 0; y < rectHeight; y++) {",
          "68:       for (c = 0; c < 3; c++) {",
          "69:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
          "70:         if (est[c] > 0xff) {",
          "",
          "[Removed Lines]",
          "60:     for (c = 0; c < 3; c++) {",
          "61:       pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
          "62:       thisRow[c] = pix[c];",
          "63:     }",
          "64:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "67:     for (x = 1; x < rectWidth; x++) {",
          "",
          "[Added Lines]",
          "59:     for (x = 0; x < rectWidth; x++) {",
          "61:       if (x == 0) {",
          "62:         for (c = 0; c < 3; c++) {",
          "63:           pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
          "64:           thisRow[c] = pix[c];",
          "65:         }",
          "66:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "67:         continue;",
          "68:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   int rectWidth = r.width();",
          "105:   for (y = 0; y < rectHeight; y++) {",
          "117:       for (c = 0; c < 3; c++) {",
          "118:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
          "119:         if (est[c] > 255) {",
          "",
          "[Removed Lines]",
          "107:     pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
          "108:     for (c = 0; c < 3; c++)",
          "109:       pix[c] += prevRow[c];",
          "111:     memcpy(thisRow, pix, sizeof(pix));",
          "113:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "116:     for (x = 1; x < rectWidth; x++) {",
          "",
          "[Added Lines]",
          "108:     for (x = 0; x < rectWidth; x++) {",
          "110:       if (x == 0) {",
          "111:         pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
          "112:         for (c = 0; c < 3; c++)",
          "113:           pix[c] += prevRow[c];",
          "115:         memcpy(thisRow, pix, sizeof(pix));",
          "117:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
          "119:         continue;",
          "120:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014c5012377519d7f0add23ebac077ccd882aa9f",
      "candidate_info": {
        "commit_hash": "014c5012377519d7f0add23ebac077ccd882aa9f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/014c5012377519d7f0add23ebac077ccd882aa9f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/CMakeLists.txt",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Add unit test for PixelFormat sanity checks",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     redMax(rm), greenMax(gm), blueMax(bm),",
          "82:     redShift(rs), greenShift(gs), blueShift(bs)",
          "83: {",
          "86:   updateState();",
          "87: }",
          "",
          "[Removed Lines]",
          "84:   assert(isSane());",
          "",
          "[Added Lines]",
          "84:   if (!isSane())",
          "85:     throw Exception(\"invalid pixel format\");",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdio.h>",
          "21: #include <rfb/PixelFormat.h>",
          "22: #include <rfb/Exception.h>",
          "24: static void doTest(bool should_fail, int b, int d, bool e, bool t,",
          "25:                    int rm, int gm, int bm, int rs, int gs, int bs)",
          "26: {",
          "27:     rfb::PixelFormat* pf;",
          "29:     printf(\"PixelFormat(%d, %d, %s, %s, %d, %d, %d, %d, %d, %d): \",",
          "30:            b, d, e ? \"true\" : \"false\", t ? \"true\": \"false\",",
          "31:            rm, gm, bm, rs, gs, bs);",
          "33:     try {",
          "34:         pf = new rfb::PixelFormat(b, d, e, t, rm, gm, bm, rs, gs, bs);",
          "35:     } catch(rfb::Exception &e) {",
          "36:         if (should_fail)",
          "37:             printf(\"OK\");",
          "38:         else",
          "39:             printf(\"FAILED\");",
          "40:         printf(\"\\n\");",
          "41:         fflush(stdout);",
          "42:         return;",
          "43:     }",
          "45:     delete pf;",
          "47:     if (should_fail)",
          "48:         printf(\"FAILED\");",
          "49:     else",
          "50:         printf(\"OK\");",
          "51:     printf(\"\\n\");",
          "52:     fflush(stdout);",
          "53: }",
          "55: int main(int argc, char** argv)",
          "56: {",
          "59:     doTest(false, 32, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "60:     doTest(false, 32, 24, false, true, 255, 255, 255, 24, 16, 8);",
          "62:     doTest(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "64:     doTest(false, 8, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "68:     doTest(false, 32, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "70:     doTest(false, 16, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "72:     doTest(false, 32, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "74:     doTest(false, 16, 8, false, true, 3, 7, 3, 0, 2, 5);",
          "78:     doTest(false, 8, 8, false, false, 0, 0, 0, 0, 0, 0);",
          "82:     doTest(true, 64, 24, false, true, 255, 255, 255, 0, 8, 16);",
          "84:     doTest(true, 18, 16, false, true, 15, 31, 15, 0, 5, 11);",
          "86:     doTest(true, 3, 3, false, true, 1, 1, 1, 0, 1, 2);",
          "90:     doTest(true, 16, 24, false, true, 15, 31, 15, 0, 5, 11);",
          "92:     doTest(true, 8, 24, false, true, 3, 7, 3, 0, 2, 5);",
          "93:     doTest(true, 8, 16, false, true, 3, 7, 3, 0, 2, 5);",
          "95:     doTest(true, 32, 24, false, false, 0, 0, 0, 0, 0, 0);",
          "99:     doTest(true, 32, 24, false, true, 254, 255, 255, 0, 8, 16);",
          "100:     doTest(true, 32, 24, false, true, 255, 253, 255, 0, 8, 16);",
          "101:     doTest(true, 32, 24, false, true, 255, 255, 252, 0, 8, 16);",
          "103:     doTest(true, 32, 24, false, true, 511, 127, 127, 0, 16, 20);",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "110:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 8, 15);",
          "111:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 16, 7);",
          "113:     return 0;",
          "114: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}