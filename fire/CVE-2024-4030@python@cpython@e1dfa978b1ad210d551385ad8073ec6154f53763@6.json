{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
      "candidate_info": {
        "commit_hash": "b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
        "files": [
          "Doc/whatsnew/3.13.rst",
          "Lib/tkinter/__init__.py",
          "Misc/NEWS.d/3.13.0b1.rst",
          "Misc/NEWS.d/next/Library/2024-05-08-21-30-33.gh-issue-118760.XvyMHn.rst"
        ],
        "message": "[3.13] gh-118760: Restore the default value of tkinter.wantobjects to 1 (GH-118784) (GH-119251)\n\nIt was set to 2 in 65f5e586a1239ed1a66d8284773d7b02ce40e480 (GH-98592).\n(cherry picked from commit e188527c343c74574d481b77c30063db1436e62b)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py": [
          "File: Lib/tkinter/__init__.py -> Lib/tkinter/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: from tkinter.constants import *",
          "41: import re",
          "44: _debug = False  # set to True to print executed Tcl/Tk commands",
          "46: TkVersion = float(_tkinter.TK_VERSION)",
          "",
          "[Removed Lines]",
          "43: wantobjects = 2",
          "",
          "[Added Lines]",
          "43: wantobjects = 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa39ba0af33dce8736a4973be48929d02fb5261e",
      "candidate_info": {
        "commit_hash": "aa39ba0af33dce8736a4973be48929d02fb5261e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/aa39ba0af33dce8736a4973be48929d02fb5261e",
        "files": [
          "Lib/calendar.py"
        ],
        "message": "[3.13] gh-120567: Clarify weekday return in calendar.monthrange docstring (GH-120570) (#120597)\n\ngh-120567: Clarify weekday return in calendar.monthrange docstring (GH-120570)\n(cherry picked from commit bd4516d9efee109dd3b02a3d60845f9053fc6718)\n\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/calendar.py||Lib/calendar.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/calendar.py||Lib/calendar.py": [
          "File: Lib/calendar.py -> Lib/calendar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: def monthrange(year, month):",
          "164:     if not 1 <= month <= 12:",
          "165:         raise IllegalMonthError(month)",
          "166:     day1 = weekday(year, month, 1)",
          "",
          "[Removed Lines]",
          "162:     \"\"\"Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for",
          "163:        year, month.\"\"\"",
          "",
          "[Added Lines]",
          "162:     \"\"\"Return weekday of first day of month (0-6 ~ Mon-Sun)",
          "163:        and number of days (28-31) for year, month.\"\"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0165d00b758eace636c3ede8c1cfe0410e7f47c",
      "candidate_info": {
        "commit_hash": "f0165d00b758eace636c3ede8c1cfe0410e7f47c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f0165d00b758eace636c3ede8c1cfe0410e7f47c",
        "files": [
          "Misc/NEWS.d/next/Library/2024-06-04-19-03-25.gh-issue-112672.K2XfZH.rst",
          "Modules/_tkinter.c"
        ],
        "message": "[3.13] gh-112672: Fix builtin Tkinter with Tcl 9.0 (GH-112681) (GH-120208)\n\n* Add declaration of Tcl_AppInit(), missing in Tcl 9.0.\n* Use Tcl_Size instead of int where needed.\n\n(cherry picked from commit e0799352823289fafb8131341abd751923ee9c08)\n\nCo-authored-by: Christopher Chavez <chrischavez@gmx.us>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Modules/_tkinter.c||Modules/_tkinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_tkinter.c||Modules/_tkinter.c": [
          "File: Modules/_tkinter.c -> Modules/_tkinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #define USE_DEPRECATED_TOMMATH_API 1",
          "70: #endif",
          "72: #if !(defined(MS_WINDOWS) || defined(__CYGWIN__))",
          "73: #define HAVE_CREATEFILEHANDLER",
          "74: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #ifndef TCL_SIZE_MAX",
          "74: typedef int Tcl_Size;",
          "75: #define TCL_SIZE_MAX INT_MAX",
          "76: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: static PyObject *",
          "490: unicodeFromTclObj(Tcl_Obj *value)",
          "491: {",
          "493: #if USE_TCL_UNICODE",
          "494:     int byteorder = NATIVE_BYTEORDER;",
          "495:     const Tcl_UniChar *u = Tcl_GetUnicodeFromObj(value, &len);",
          "",
          "[Removed Lines]",
          "492:     int len;",
          "",
          "[Added Lines]",
          "498:     Tcl_Size len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520: #ifndef WITH_APPINIT",
          "521: int",
          "522: Tcl_AppInit(Tcl_Interp *interp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526: #if TK_MAJOR_VERSION >= 9",
          "527: int Tcl_AppInit(Tcl_Interp *);",
          "528: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1142:     }",
          "1144:     if (value->typePtr == tkapp->ByteArrayType) {",
          "1146:         char *data = (char*)Tcl_GetByteArrayFromObj(value, &size);",
          "1147:         return PyBytes_FromStringAndSize(data, size);",
          "1148:     }",
          "",
          "[Removed Lines]",
          "1145:         int size;",
          "",
          "[Added Lines]",
          "1155:         Tcl_Size size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1168:     }",
          "1170:     if (value->typePtr == tkapp->ListType) {",
          "1173:         PyObject *elem;",
          "1174:         Tcl_Obj *tcl_elem;",
          "",
          "[Removed Lines]",
          "1171:         int size;",
          "1172:         int i, status;",
          "",
          "[Added Lines]",
          "1181:         Tcl_Size i, size;",
          "1182:         int status;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1225: } Tkapp_CallEvent;",
          "1227: static void",
          "1229: {",
          "1231:     for (i = 0; i < objc; i++)",
          "1232:         Tcl_DecrRefCount(objv[i]);",
          "1233:     if (objv != objStore)",
          "",
          "[Removed Lines]",
          "1228: Tkapp_CallDeallocArgs(Tcl_Obj** objv, Tcl_Obj** objStore, int objc)",
          "1230:     int i;",
          "",
          "[Added Lines]",
          "1238: Tkapp_CallDeallocArgs(Tcl_Obj** objv, Tcl_Obj** objStore, Tcl_Size objc)",
          "1240:     Tcl_Size i;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1240: static Tcl_Obj**",
          "1242: {",
          "1243:     Tcl_Obj **objv = objStore;",
          "1244:     Py_ssize_t objc = 0, i;",
          "",
          "[Removed Lines]",
          "1241: Tkapp_CallArgs(PyObject *args, Tcl_Obj** objStore, int *pobjc)",
          "",
          "[Added Lines]",
          "1251: Tkapp_CallArgs(PyObject *args, Tcl_Obj** objStore, Tcl_Size *pobjc)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1286:             Tcl_IncrRefCount(objv[i]);",
          "1287:         }",
          "1288:     }",
          "1290:     return objv;",
          "1291: finally:",
          "1293:     return NULL;",
          "1294: }",
          "",
          "[Removed Lines]",
          "1292:     Tkapp_CallDeallocArgs(objv, objStore, (int)objc);",
          "",
          "[Added Lines]",
          "1302:     Tkapp_CallDeallocArgs(objv, objStore, (Tcl_Size)objc);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1356:     Tkapp_CallEvent *e = (Tkapp_CallEvent *)evPtr;",
          "1357:     Tcl_Obj *objStore[ARGSZ];",
          "1358:     Tcl_Obj **objv;",
          "1360:     int i;",
          "1361:     ENTER_PYTHON",
          "1362:     if (e->self->trace && !Tkapp_Trace(e->self, PyTuple_Pack(1, e->args))) {",
          "",
          "[Removed Lines]",
          "1359:     int objc;",
          "",
          "[Added Lines]",
          "1369:     Tcl_Size objc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1412: {",
          "1413:     Tcl_Obj *objStore[ARGSZ];",
          "1414:     Tcl_Obj **objv = NULL;",
          "1416:     PyObject *res = NULL;",
          "1417:     TkappObject *self = (TkappObject*)selfptr;",
          "1418:     int flags = TCL_EVAL_DIRECT | TCL_EVAL_GLOBAL;",
          "",
          "[Removed Lines]",
          "1415:     int objc, i;",
          "",
          "[Added Lines]",
          "1425:     Tcl_Size objc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1459:     {",
          "1460:         TRACE(self, (\"(O)\", args));",
          "1462:         objv = Tkapp_CallArgs(args, objStore, &objc);",
          "1463:         if (!objv)",
          "1464:             return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1472:         int i;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2194: {",
          "2195:     char *list;",
          "2197:     const char **argv;",
          "2198:     PyObject *v;",
          "2201:     if (PyTclObject_Check(arg)) {",
          "2203:         Tcl_Obj **objv;",
          "2204:         if (Tcl_ListObjGetElements(Tkapp_Interp(self),",
          "2205:                                    ((PyTclObject*)arg)->value,",
          "",
          "[Removed Lines]",
          "2196:     int argc;",
          "2199:     int i;",
          "2202:         int objc;",
          "",
          "[Added Lines]",
          "2207:     Tcl_Size argc, i;",
          "2212:         Tcl_Size objc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8470593a98a5f17d72bea0df8287f43ba4f7f627",
      "candidate_info": {
        "commit_hash": "8470593a98a5f17d72bea0df8287f43ba4f7f627",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8470593a98a5f17d72bea0df8287f43ba4f7f627",
        "files": [
          "Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/simple_interact.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-16-45-27.gh-issue-119548.pqF9Y6.rst"
        ],
        "message": "[3.13] gh-119548: Add a 'clear' command to the REPL (GH-119549) (#119552)\n\ngh-119548: Add a 'clear' command to the REPL (GH-119549)\n(cherry picked from commit e3bac04c37f6823cebc74d97feae0e0c25818b31)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     cxy: tuple[int, int] = field(init=False)",
          "239:     lxy: tuple[int, int] = field(init=False)",
          "240:     calc_screen: CalcScreen = field(init=False)",
          "242:     def __post_init__(self) -> None:",
          "243:         # Enable the use of `insert` without a `prepare` call - necessary to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     scheduled_commands: list[str] = field(default_factory=list)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:             self.restore()",
          "558:             raise",
          "560:     def last_command_is(self, cls: type) -> bool:",
          "561:         if not self.last_command:",
          "562:             return False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:         while self.scheduled_commands:",
          "562:             cmd = self.scheduled_commands.pop()",
          "563:             self.do_cmd((cmd, []))",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     return text",
          "60: REPL_COMMANDS = {",
          "61:     \"exit\": _sitebuiltins.Quitter('exit', ''),",
          "62:     \"quit\": _sitebuiltins.Quitter('quit' ,''),",
          "63:     \"copyright\": _sitebuiltins._Printer('copyright', sys.copyright),",
          "64:     \"help\": \"help\",",
          "66: }",
          "68: class InteractiveColoredConsole(code.InteractiveConsole):",
          "",
          "[Removed Lines]",
          "65:     \"clear\": \"clear_screen\",",
          "",
          "[Added Lines]",
          "60: def _clear_screen():",
          "61:     reader = _get_reader()",
          "62:     reader.scheduled_commands.append(\"clear_screen\")",
          "70:     \"clear\": _clear_screen,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a83b172af1bde6032ecca7c1a2e6b82d06325e1",
      "candidate_info": {
        "commit_hash": "3a83b172af1bde6032ecca7c1a2e6b82d06325e1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3a83b172af1bde6032ecca7c1a2e6b82d06325e1",
        "files": [
          "Include/patchlevel.h",
          "Lib/pydoc_data/topics.py",
          "Misc/NEWS.d/3.13.0b2.rst",
          "Misc/NEWS.d/next/Build/2024-05-11-15-11-30.gh-issue-118943.VI_MnY.rst",
          "Misc/NEWS.d/next/Build/2024-05-13-15-57-58.gh-issue-118836.7yN1iB.rst",
          "Misc/NEWS.d/next/Build/2024-05-17-19-53-27.gh-issue-119132.wepPgM.rst",
          "Misc/NEWS.d/next/Build/2024-05-19-22-54-55.gh-issue-115119.DwMwev.rst",
          "Misc/NEWS.d/next/Build/2024-05-29-17-40-50.gh-issue-119729.k0xJ5U.rst",
          "Misc/NEWS.d/next/C API/2024-05-08-20-13-00.gh-issue-118789.m88uUa.rst",
          "Misc/NEWS.d/next/C API/2024-05-08-23-14-06.gh-issue-116984.5sgcDo.rst",
          "Misc/NEWS.d/next/C API/2024-05-20-10-35-22.gh-issue-111389.a6axBk.rst",
          "Misc/NEWS.d/next/C API/2024-05-21-11-35-11.gh-issue-119247.U6n6mh.rst",
          "Misc/NEWS.d/next/C API/2024-05-22-17-50-48.gh-issue-119336.ff3qnS.rst",
          "Misc/NEWS.d/next/C API/2024-05-29-21-05-59.gh-issue-119585.Sn7JL3.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-03-25-15-07-01.gh-issue-117195.OWakgD.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-04-28-19-51-00.gh-issue-118263.Gaap3S.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-07-16-57-56.gh-issue-118561.wNMKVd.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-08-18-33-07.gh-issue-118507.OCQsAY.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-09-19-47-12.gh-issue-117657.Vn0Yey.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-10-19-54-18.gh-issue-118921.O4ztZG.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-11-21-44-17.gh-issue-118844.q2H_km.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-16-23-02-03.gh-issue-119049.qpd_S-.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-20-14-57-39.gh-issue-118692.Qadm7F.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-21-09-46-51.gh-issue-119011.WOe3bu.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-21-11-27-14.gh-issue-119213.nxjxrt.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-23-06-34-14.gh-issue-119395.z-Hsqb.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-23-06-34-45.gh-issue-119311.2DBwKR.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-24-21-04-00.gh-issue-119525.zLFLf1.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-24-21-16-52.gh-issue-119369.qBThho.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-12-52-25.gh-issue-119560.wSlm8q.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-13-51-48.gh-issue-111999.L0q1gh.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-16-45-27.gh-issue-119548.pqF9Y6.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-30-23-01-00.gh-issue-119821.jPGfvt.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-31-12-06-11.gh-issue-119842.tCGVsv.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-03-13-25-04.gh-issue-119724.EH1dkA.rst",
          "Misc/NEWS.d/next/Library/2019-08-27-01-16-50.gh-issue-67693.4NIAiy.rst",
          "Misc/NEWS.d/next/Library/2022-03-10-16-47-57.bpo-45767.ywmyo1.rst",
          "Misc/NEWS.d/next/Library/2023-04-10-00-04-37.gh-issue-87106.UyBnPQ.rst",
          "Misc/NEWS.d/next/Library/2023-04-24-05-34-23.gh-issue-103194.GwBwWL.rst",
          "Misc/NEWS.d/next/Library/2023-04-26-22-24-17.gh-issue-92081.V8xMot.rst",
          "Misc/NEWS.d/next/Library/2023-04-28-09-54-15.gh-issue-103956.EyLDPS.rst",
          "Misc/NEWS.d/next/Library/2024-01-12-08-51-03.gh-issue-113978.MqTgB0.rst",
          "Misc/NEWS.d/next/Library/2024-03-19-21-41-31.gh-issue-106531.Mgd--6.rst",
          "Misc/NEWS.d/next/Library/2024-04-19-14-59-53.gh-issue-118033.amS4Gw.rst",
          "Misc/NEWS.d/next/Library/2024-05-01-22-24-05.gh-issue-110863.GjYBbq.rst",
          "Misc/NEWS.d/next/Library/2024-05-08-09-21-49.gh-issue-118772.c16E8X.rst",
          "Misc/NEWS.d/next/Library/2024-05-08-21-13-56.gh-issue-118760.mdmH3T.rst",
          "Misc/NEWS.d/next/Library/2024-05-08-21-30-33.gh-issue-118760.XvyMHn.rst",
          "Misc/NEWS.d/next/Library/2024-05-09-08-46-12.gh-issue-118851.aPAoJw.rst",
          "Misc/NEWS.d/next/Library/2024-05-09-21-36-11.gh-issue-118868.uckxxP.rst",
          "Misc/NEWS.d/next/Library/2024-05-10-05-24-32.gh-issue-118895.wUm5r2.rst",
          "Misc/NEWS.d/next/Library/2024-05-12-21-38-42.gh-issue-58933.0kgU2l.rst",
          "Misc/NEWS.d/next/Library/2024-05-16-17-31-46.gh-issue-118643.hAWH4C.rst",
          "Misc/NEWS.d/next/Library/2024-05-17-17-32-12.gh-issue-119113.kEv1Ll.rst",
          "Misc/NEWS.d/next/Library/2024-05-19-13-05-59.gh-issue-119121.P1gnh1.rst",
          "Misc/NEWS.d/next/Library/2024-05-19-18-49-04.gh-issue-119174.5GTv7d.rst",
          "Misc/NEWS.d/next/Library/2024-05-20-20-30-57.gh-issue-111201.DAA5lC.rst",
          "Misc/NEWS.d/next/Library/2024-05-21-20-13-23.gh-issue-118911.iG8nMq.rst",
          "Misc/NEWS.d/next/Library/2024-05-22-21-20-43.gh-issue-118894.xHdxR_.rst",
          "Misc/NEWS.d/next/Library/2024-05-23-11-52-36.gh-issue-117398.2FG1Mk.rst",
          "Misc/NEWS.d/next/Library/2024-05-23-22-29-59.gh-issue-119443.KAGz6S.rst",
          "Misc/NEWS.d/next/Library/2024-05-24-21-54-55.gh-issue-113892.JKDFqq.rst",
          "Misc/NEWS.d/next/Library/2024-05-25-20-15-26.gh-issue-119555.mvHbEL.rst",
          "Misc/NEWS.d/next/Library/2024-05-26-21-28-11.gh-issue-119588.wlLBK5.rst",
          "Misc/NEWS.d/next/Library/2024-05-28-00-56-59.gh-issue-89727._bxoL3.rst",
          "Misc/NEWS.d/next/Library/2024-05-28-12-15-03.gh-issue-119118.FMKz1F.rst",
          "Misc/NEWS.d/next/Library/2024-05-29-20-42-17.gh-issue-89727.5lPTTW.rst",
          "Misc/NEWS.d/next/Library/2024-05-30-21-37-05.gh-issue-89727.D6S9ig.rst",
          "Misc/NEWS.d/next/Library/2024-06-01-16-58-43.gh-issue-117398.kR0RW7.rst",
          "Misc/NEWS.d/next/Library/2024-06-02-15-09-17.gh-issue-118835.KUAuz6.rst",
          "Misc/NEWS.d/next/Library/2024-06-03-11-18-16.gh-issue-117142.kWTXQo.rst",
          "Misc/NEWS.d/next/Library/2024-06-04-12-23-01.gh-issue-119819.WKKrYh.rst",
          "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
          "Misc/NEWS.d/next/Security/2024-05-08-21-59-38.gh-issue-118773.7dFRJY.rst",
          "Misc/NEWS.d/next/Tests/2024-05-18-10-59-27.gh-issue-119050.g4qiH7.rst",
          "Misc/NEWS.d/next/Windows/2024-03-19-19-04-56.gh-issue-116145.srVT3d.rst",
          "Misc/NEWS.d/next/Windows/2024-04-24-05-16-32.gh-issue-118209.Ryyzlz.rst",
          "Misc/NEWS.d/next/Windows/2024-04-24-22-50-33.gh-issue-117505.gcTb_p.rst",
          "Misc/NEWS.d/next/Windows/2024-05-22-19-43-29.gh-issue-119070._enton.rst",
          "Misc/NEWS.d/next/Windows/2024-05-25-18-43-10.gh-issue-111201.SLPJIx.rst",
          "Misc/NEWS.d/next/Windows/2024-05-29-11-06-12.gh-issue-119690.8q6e1p.rst",
          "Misc/NEWS.d/next/Windows/2024-05-30-17-39-25.gh-issue-119679.mZC87w.rst",
          "README.rst"
        ],
        "message": "Python 3.13.0b2",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h",
          "Lib/pydoc_data/topics.py||Lib/pydoc_data/topics.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define PY_MINOR_VERSION        13",
          "21: #define PY_MICRO_VERSION        0",
          "22: #define PY_RELEASE_LEVEL        PY_RELEASE_LEVEL_BETA",
          "",
          "[Removed Lines]",
          "23: #define PY_RELEASE_SERIAL       1",
          "26: #define PY_VERSION              \"3.13.0b1+\"",
          "",
          "[Added Lines]",
          "23: #define PY_RELEASE_SERIAL       2",
          "26: #define PY_VERSION              \"3.13.0b2\"",
          "",
          "---------------"
        ],
        "Lib/pydoc_data/topics.py||Lib/pydoc_data/topics.py": [
          "File: Lib/pydoc_data/topics.py -> Lib/pydoc_data/topics.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "3: # as part of the release process.",
          "4: topics = {'assert': 'The \"assert\" statement\\n'",
          "5:            '**********************\\n'",
          "",
          "[Removed Lines]",
          "2: # Autogenerated by Sphinx on Wed May  8 11:11:17 2024",
          "",
          "[Added Lines]",
          "2: # Autogenerated by Sphinx on Wed Jun  5 16:43:53 2024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5034:              '   0\\n'",
          "5035:              '   (Pdb)\\n'",
          "5036:              '\\n'",
          "5037:              'The module defines the following functions; each enters the '",
          "5038:              'debugger\\n'",
          "5039:              'in a slightly different way:\\n'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5037:              'Changed in version 3.13: The implementation of **PEP 667** means '",
          "5038:              'that\\n'",
          "5039:              'name assignments made via \"pdb\" will immediately affect the '",
          "5040:              'active\\n'",
          "5041:              'scope, even when running inside an *optimized scope*.\\n'",
          "5042:              '\\n'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5245:              '* \"$_exception\": the exception if the frame is raising an '",
          "5246:              'exception\\n'",
          "5247:              '\\n'",
          "5249:              '\\n'",
          "5250:              'If a file \".pdbrc\" exists in the user\u2019s home directory or in '",
          "5251:              'the\\n'",
          "",
          "[Removed Lines]",
          "5248:              'Added in version 3.12.\\n'",
          "",
          "[Added Lines]",
          "5254:              'Added in version 3.12: Added the *convenience variable* '",
          "5255:              'feature.\\n'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5620:              '\\n'",
          "5621:              'interact\\n'",
          "5622:              '\\n'",
          "5630:              '\\n'",
          "5631:              '   Note:\\n'",
          "5632:              '\\n'",
          "5641:              '\\n'",
          "5642:              '   Added in version 3.2.\\n'",
          "5643:              '\\n'",
          "",
          "[Removed Lines]",
          "5623:              '   Start an interactive interpreter (using the \"code\" module) '",
          "5624:              'whose\\n'",
          "5625:              '   global namespace contains all the (global and local) names '",
          "5626:              'found in\\n'",
          "5627:              '   the current scope. Use \"exit()\" or \"quit()\" to exit the '",
          "5628:              'interpreter\\n'",
          "5629:              '   and return to the debugger.\\n'",
          "5633:              '     Because interact creates a new global namespace with the '",
          "5634:              'current\\n'",
          "5635:              '     global and local namespace for execution, assignment to '",
          "5636:              'variables\\n'",
          "5637:              '     will not affect the original namespaces. However, '",
          "5638:              'modification to\\n'",
          "5639:              '     the mutable objects will be reflected in the original '",
          "5640:              'namespaces.\\n'",
          "",
          "[Added Lines]",
          "5630:              '   Start an interactive interpreter (using the \"code\" module) in '",
          "5631:              'a new\\n'",
          "5632:              '   global namespace initialised from the local and global '",
          "5633:              'namespaces\\n'",
          "5634:              '   for the current scope. Use \"exit()\" or \"quit()\" to exit the\\n'",
          "5635:              '   interpreter and return to the debugger.\\n'",
          "5639:              '     As \"interact\" creates a new dedicated namespace for code\\n'",
          "5640:              '     execution, assignments to variables will not affect the '",
          "5641:              'original\\n'",
          "5642:              '     namespaces. However, modifications to any referenced '",
          "5643:              'mutable\\n'",
          "5644:              '     objects will be reflected in the original namespaces as '",
          "5645:              'usual.\\n'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12362:                    'the\\n'",
          "12363:                    '   \"LC_NUMERIC\" locale in some cases.\\n'",
          "12364:                    '\\n'",
          "12366:                    '\\n'",
          "12367:                    '   Similar to \"str.format(**mapping)\", except that '",
          "12368:                    '\"mapping\" is used\\n'",
          "",
          "[Removed Lines]",
          "12365:                    'str.format_map(mapping)\\n'",
          "",
          "[Added Lines]",
          "12370:                    'str.format_map(mapping, /)\\n'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14766:           '   The iterator returns \"tuple\"s containing the \"(start_line,\\n'",
          "14767:           '   end_line, start_column, end_column)\". The *i-th* tuple '",
          "14768:           'corresponds\\n'",
          "14773:           '\\n'",
          "14774:           '   This positional information can be missing. A non-exhaustive '",
          "14775:           'lists\\n'",
          "",
          "[Removed Lines]",
          "14769:           '   to the position of the source code that compiled to the *i-th*\\n'",
          "14770:           '   instruction. Column information is 0-indexed utf-8 byte offsets '",
          "14771:           'on\\n'",
          "14772:           '   the given source line.\\n'",
          "",
          "[Added Lines]",
          "14774:           '   to the position of the source code that compiled to the *i-th* '",
          "14775:           'code\\n'",
          "14776:           '   unit. Column information is 0-indexed utf-8 byte offsets on the\\n'",
          "14777:           '   given source line.\\n'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14894:           '|                                                    | '",
          "14895:           '\"\"f_code\"\".                                        |\\n'",
          "14896:           '+----------------------------------------------------+----------------------------------------------------+\\n'",
          "14899:           '|                                                    | variables. '",
          "14907:           '+----------------------------------------------------+----------------------------------------------------+\\n'",
          "14908:           '| frame.f_globals                                    | The '",
          "14909:           'dictionary used by the frame to look up global |\\n'",
          "",
          "[Removed Lines]",
          "14897:           '| frame.f_locals                                     | The '",
          "14898:           'dictionary used by the frame to look up local  |\\n'",
          "14900:           'If the frame refers to a function or    |\\n'",
          "14901:           '|                                                    | '",
          "14902:           'comprehension, this may return a write- through    |\\n'",
          "14903:           '|                                                    | proxy '",
          "14904:           'object.  Changed in version 3.13: Return a   |\\n'",
          "14905:           '|                                                    | proxy for '",
          "14906:           'functions and comprehensions.            |\\n'",
          "",
          "[Added Lines]",
          "14902:           '| frame.f_locals                                     | The mapping '",
          "14903:           'used by the frame to look up local     |\\n'",
          "14905:           'If the frame refers to an *optimized    |\\n'",
          "14906:           '|                                                    | scope*, this '",
          "14907:           'may return a write-through proxy      |\\n'",
          "14908:           '|                                                    | object.  '",
          "14909:           'Changed in version 3.13: Return a proxy   |\\n'",
          "14910:           '|                                                    | for '",
          "14911:           'optimized scopes.                              |\\n'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "15312:                  '\\n'",
          "15313:                  '      Return a shallow copy of the dictionary.\\n'",
          "15314:                  '\\n'",
          "15316:                  '\\n'",
          "15317:                  '      Create a new dictionary with keys from *iterable* and '",
          "15318:                  'values set\\n'",
          "",
          "[Removed Lines]",
          "15315:                  '   classmethod fromkeys(iterable[, value])\\n'",
          "",
          "[Added Lines]",
          "15320:                  '   classmethod fromkeys(iterable, value=None)\\n'",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "15328:                  'distinct\\n'",
          "15329:                  '      values, use a dict comprehension instead.\\n'",
          "15330:                  '\\n'",
          "15332:                  '\\n'",
          "15333:                  '      Return the value for *key* if *key* is in the '",
          "15334:                  'dictionary, else\\n'",
          "",
          "[Removed Lines]",
          "15331:                  '   get(key[, default])\\n'",
          "",
          "[Added Lines]",
          "15336:                  '   get(key, default=None)\\n'",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "15380:                  '\\n'",
          "15381:                  '      Added in version 3.8.\\n'",
          "15382:                  '\\n'",
          "15384:                  '\\n'",
          "15385:                  '      If *key* is in the dictionary, return its value.  If '",
          "15386:                  'not, insert\\n'",
          "",
          "[Removed Lines]",
          "15383:                  '   setdefault(key[, default])\\n'",
          "",
          "[Added Lines]",
          "15388:                  '   setdefault(key, default=None)\\n'",
          "",
          "---------------"
        ]
      }
    }
  ]
}