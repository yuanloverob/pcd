{
  "cve_id": "CVE-2019-15694",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow, which could be triggered from DecodeManager::decodeRect. Vulnerability occurs due to the signdness error in processing MemOutStream. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "0943c006c7d900dfc0281639e992791d6c567438",
  "patch_info": {
    "commit_hash": "0943c006c7d900dfc0281639e992791d6c567438",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/0943c006c7d900dfc0281639e992791d6c567438",
    "files": [
      "common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h",
      "common/rdr/InStream.h",
      "common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h",
      "common/rfb/Password.cxx",
      "common/rfb/Password.h",
      "common/rfb/util.h",
      "tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h"
    ],
    "message": "Use size_t for lengths in stream objects\n\nProvides safety against them accidentally becoming negative because\nof bugs in the calculations.\n\nAlso does the same to CharArray and friends as they were strongly\nconnection to the stream objects.",
    "before_after_code_files": [
      "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
      "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
      "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
      "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
      "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
      "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
      "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
      "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
      "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
      "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
      "common/rdr/InStream.h||common/rdr/InStream.h",
      "common/rdr/MemInStream.h||common/rdr/MemInStream.h",
      "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
      "common/rdr/OutStream.h||common/rdr/OutStream.h",
      "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
      "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
      "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
      "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
      "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
      "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h",
      "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
      "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
      "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
      "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
      "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx",
      "common/rfb/Configuration.h||common/rfb/Configuration.h",
      "common/rfb/Password.cxx||common/rfb/Password.cxx",
      "common/rfb/Password.h||common/rfb/Password.h",
      "common/rfb/util.h||common/rfb/util.h",
      "tests/perf/encperf.cxx||tests/perf/encperf.cxx",
      "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx",
      "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h"
    ]
  },
  "patch_diff": {
    "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
      "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: enum { DEFAULT_BUF_SIZE = 8192,",
      "57:        MIN_BULK_SIZE = 1024 };",
      "60:                        bool closeWhenDone_)",
      "61:   : fd(fd_), closeWhenDone(closeWhenDone_),",
      "62:     timeoutms(timeoutms_), blockCallback(0),",
      "",
      "[Removed Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, int bufSize_,",
      "",
      "[Added Lines]",
      "59: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67: }",
      "69: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
      "71:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
      "72:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
      "73:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "",
      "[Removed Lines]",
      "70:                        int bufSize_)",
      "",
      "[Added Lines]",
      "70:                        size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:   timeoutms = 0;",
      "93: }",
      "96: {",
      "97:   return offset + ptr - start;",
      "98: }",
      "101: {",
      "102:   if (length < MIN_BULK_SIZE) {",
      "103:     InStream::readBytes(data, length);",
      "",
      "[Removed Lines]",
      "95: int FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, int length)",
      "",
      "[Added Lines]",
      "95: size_t FdInStream::pos()",
      "100: void FdInStream::readBytes(void* data, size_t length)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:   U8* dataPtr = (U8*)data;",
      "110:   if (n > length) n = length;",
      "112:   memcpy(dataPtr, ptr, n);",
      "",
      "[Removed Lines]",
      "109:   int n = end - ptr;",
      "",
      "[Added Lines]",
      "109:   size_t n = end - ptr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123: }",
      "127: {",
      "128:   if (itemSize > bufSize)",
      "129:     throw Exception(\"FdInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "126: int FdInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "126: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "135:   end -= ptr - start;",
      "136:   ptr = start;",
      "139:   while (end < start + itemSize) {",
      "140:     bytes_to_read = start + bufSize - end;",
      "141:     if (!timing) {",
      "",
      "[Removed Lines]",
      "138:   int bytes_to_read;",
      "",
      "[Added Lines]",
      "138:   size_t bytes_to_read;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "148:       bytes_to_read = vncmin(bytes_to_read, vncmax(itemSize*nItems, 8));",
      "149:     }",
      "151:     if (n == 0) return 0;",
      "152:     end += n;",
      "153:   }",
      "156:     nItems = (end - ptr) / itemSize;",
      "158:   return nItems;",
      "",
      "[Removed Lines]",
      "150:     int n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "150:     size_t n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
      "155:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "175: {",
      "176:   struct timeval before, after;",
      "177:   if (timing)",
      "",
      "[Removed Lines]",
      "174: int FdInStream::readWithTimeoutOrCallback(void* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "174: size_t FdInStream::readWithTimeoutOrCallback(void* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
      "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:   public:",
      "41:                bool closeWhenDone_=false);",
      "43:     virtual ~FdInStream();",
      "45:     void setTimeout(int timeoutms);",
      "46:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
      "47:     int getFd() { return fd; }",
      "51:     void startTiming();",
      "52:     void stopTiming();",
      "",
      "[Removed Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, int bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback, int bufSize=0);",
      "48:     int pos();",
      "49:     void readBytes(void* data, int length);",
      "",
      "[Added Lines]",
      "40:     FdInStream(int fd, int timeoutms=-1, size_t bufSize=0,",
      "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback,",
      "43:                size_t bufSize=0);",
      "49:     size_t pos();",
      "50:     void readBytes(void* data, size_t length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54:     unsigned int timeWaited() { return timeWaitedIn100us; }",
      "56:   protected:",
      "59:   private:",
      "62:     int fd;",
      "63:     bool closeWhenDone;",
      "",
      "[Removed Lines]",
      "57:     int overrun(int itemSize, int nItems, bool wait);",
      "60:     int readWithTimeoutOrCallback(void* buf, int len, bool wait=true);",
      "",
      "[Added Lines]",
      "58:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "61:     size_t readWithTimeoutOrCallback(void* buf, size_t len, bool wait=true);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:     unsigned int timeWaitedIn100us;",
      "69:     unsigned int timedKbits;",
      "73:     U8* start;",
      "74:   };",
      "",
      "[Removed Lines]",
      "71:     int bufSize;",
      "72:     int offset;",
      "",
      "[Added Lines]",
      "72:     size_t bufSize;",
      "73:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
      "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: enum { DEFAULT_BUF_SIZE = 16384 };",
      "55:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_),",
      "56:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "57: {",
      "",
      "[Removed Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, int bufSize_)",
      "",
      "[Added Lines]",
      "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:   blocking = blocking_;",
      "80: }",
      "83: {",
      "84:   return offset + ptr - sentUpTo;",
      "85: }",
      "",
      "[Removed Lines]",
      "82: int FdOutStream::length()",
      "",
      "[Added Lines]",
      "82: size_t FdOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97: void FdOutStream::flush()",
      "98: {",
      "99:   while (sentUpTo < ptr) {",
      "105:     if (n == 0) {",
      "",
      "[Removed Lines]",
      "100:     int n = writeWithTimeout((const void*) sentUpTo,",
      "101:                              ptr - sentUpTo,",
      "102:                              blocking? timeoutms : 0);",
      "",
      "[Added Lines]",
      "100:     size_t n = writeWithTimeout((const void*) sentUpTo,",
      "101:                                 ptr - sentUpTo,",
      "102:                                 blocking? timeoutms : 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120: }",
      "124: {",
      "125:   if (itemSize > bufSize)",
      "126:     throw Exception(\"FdOutStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "123: int FdOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "123: size_t FdOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "129:   flush();",
      "136:         (itemSize < bufSize - (ptr - sentUpTo))) {",
      "137:       memmove(start, sentUpTo, ptr - sentUpTo);",
      "138:       ptr = start + (ptr - sentUpTo);",
      "",
      "[Removed Lines]",
      "132:   if (itemSize > end - ptr) {",
      "135:     if ((sentUpTo - start > bufSize / 4) &&",
      "",
      "[Added Lines]",
      "132:   if (itemSize > (size_t)(end - ptr)) {",
      "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   }",
      "154:     nItems = (end - ptr) / itemSize;",
      "156:   return nItems;",
      "",
      "[Removed Lines]",
      "153:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "153:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "170: {",
      "171:   int n;",
      "",
      "[Removed Lines]",
      "169: int FdOutStream::writeWithTimeout(const void* data, int length, int timeoutms)",
      "",
      "[Added Lines]",
      "169: size_t FdOutStream::writeWithTimeout(const void* data, size_t length, int timeoutms)",
      "",
      "---------------"
    ],
    "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
      "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~FdOutStream();",
      "40:     void setTimeout(int timeoutms);",
      "",
      "[Removed Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, int bufSize=0);",
      "",
      "[Added Lines]",
      "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, size_t bufSize=0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:     int getFd() { return fd; }",
      "44:     void flush();",
      "47:     int bufferUsage();",
      "49:     unsigned getIdleTime();",
      "51:   private:",
      "54:     int fd;",
      "55:     bool blocking;",
      "56:     int timeoutms;",
      "59:     U8* start;",
      "60:     U8* sentUpTo;",
      "61:     struct timeval lastWrite;",
      "",
      "[Removed Lines]",
      "45:     int length();",
      "52:     int overrun(int itemSize, int nItems);",
      "53:     int writeWithTimeout(const void* data, int length, int timeoutms);",
      "57:     int bufSize;",
      "58:     int offset;",
      "",
      "[Added Lines]",
      "45:     size_t length();",
      "52:     size_t overrun(size_t itemSize, size_t nItems);",
      "53:     size_t writeWithTimeout(const void* data, size_t length, int timeoutms);",
      "57:     size_t bufSize;",
      "58:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
      "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:   ptr = end = b;",
      "49: }",
      "52: {",
      "53:   if (!file)",
      "54:     throw Exception(\"File is not open\");",
      "",
      "[Removed Lines]",
      "51: int FileInStream::pos()",
      "",
      "[Added Lines]",
      "51: size_t FileInStream::pos()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:   return ftell(file) + ptr - b;",
      "57: }",
      "60: {",
      "62:     throw Exception(\"FileInStream overrun: max itemSize exceeded\");",
      "64:   if (end - ptr != 0)",
      "",
      "[Removed Lines]",
      "59: int FileInStream::overrun(int itemSize, int nItems, bool wait)",
      "61:   if (itemSize > (int)sizeof(b))",
      "",
      "[Added Lines]",
      "59: size_t FileInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "61:   if (itemSize > sizeof(b))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     end += b + sizeof(b) - end;",
      "81:   }",
      "84:     nItems = (end - ptr) / itemSize;",
      "86:   return nItems;",
      "",
      "[Removed Lines]",
      "83:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "83:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/FileInStream.h||common/rdr/FileInStream.h": [
      "File: common/rdr/FileInStream.h -> common/rdr/FileInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     void reset(void);",
      "40:   protected:",
      "43:   private:",
      "44:     U8 b[131072];",
      "",
      "[Removed Lines]",
      "38:     int pos();",
      "41:     int overrun(int itemSize, int nItems, bool wait = true);",
      "",
      "[Added Lines]",
      "38:     size_t pos();",
      "41:     size_t overrun(size_t itemSize, size_t nItems, bool wait = true);",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
      "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static inline int min(int a, int b) {return a<b ? a : b;}",
      "32: : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_LEN), offset(0), in_stream(is)",
      "33: {",
      "34:   ptr = end = start = new U8[bufSize];",
      "",
      "[Removed Lines]",
      "31: HexInStream::HexInStream(InStream& is, int bufSize_)",
      "",
      "[Added Lines]",
      "31: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:   return true;",
      "51: }",
      "55:   if ((l % 2) == 0) {",
      "56:     delete [] *data;",
      "",
      "[Removed Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, int* length) {",
      "54:   int l=strlen(s);",
      "",
      "[Added Lines]",
      "53: bool HexInStream::hexStrToBin(const char* s, char** data, size_t* length) {",
      "54:   size_t l=strlen(s);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:       return true;",
      "63:       int byte = 0;",
      "64:       if (!readHexAndShift(s[i], &byte) ||",
      "65:         !readHexAndShift(s[i+1], &byte))",
      "",
      "[Removed Lines]",
      "62:     for(int i=0;i<l;i+=2) {",
      "",
      "[Added Lines]",
      "62:     for(size_t i=0;i<l;i+=2) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: }",
      "80:   return offset + ptr - start;",
      "81: }",
      "84:   if (itemSize > bufSize)",
      "85:     throw Exception(\"HexInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "79: int HexInStream::pos() {",
      "83: int HexInStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "79: size_t HexInStream::pos() {",
      "83: size_t HexInStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "92:   ptr = start;",
      "94:   while (end < ptr + itemSize) {",
      "96:     if (n == 0) return 0;",
      "97:     const U8* iptr = in_stream.getptr();",
      "98:     const U8* eptr = in_stream.getend();",
      "101:     U8* optr = (U8*) end;",
      "103:       int v = 0;",
      "104:       readHexAndShift(iptr[i*2], &v);",
      "105:       readHexAndShift(iptr[i*2+1], &v);",
      "",
      "[Removed Lines]",
      "95:     int n = in_stream.check(2, 1, wait);",
      "99:     int length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "95:     size_t n = in_stream.check(2, 1, wait);",
      "99:     size_t length = min((eptr - iptr)/2, start + bufSize - end);",
      "102:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "110:     end += length;",
      "111:   }",
      "114:     nItems = (end - ptr) / itemSize;",
      "116:   return nItems;",
      "",
      "[Removed Lines]",
      "113:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "113:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
      "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexInStream : public InStream {",
      "27:   public:",
      "30:     virtual ~HexInStream();",
      "34:     static bool readHexAndShift(char c, int* v);",
      "37:   protected:",
      "40:   private:",
      "42:     U8* start;",
      "45:     InStream& in_stream;",
      "46:   };",
      "",
      "[Removed Lines]",
      "29:     HexInStream(InStream& is, int bufSize=0);",
      "32:     int pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, int* length);",
      "38:     int overrun(int itemSize, int nItems, bool wait);",
      "41:     int bufSize;",
      "43:     int offset;",
      "",
      "[Added Lines]",
      "29:     HexInStream(InStream& is, size_t bufSize=0);",
      "32:     size_t pos();",
      "35:     static bool hexStrToBin(const char* s, char** data, size_t* length);",
      "38:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "41:     size_t bufSize;",
      "43:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
      "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: const int DEFAULT_BUF_LEN = 16384;",
      "29: : out_stream(os), offset(0), bufSize(buflen ? buflen : DEFAULT_BUF_LEN)",
      "30: {",
      "31:   if (bufSize % 2)",
      "",
      "[Removed Lines]",
      "26: static inline int min(int a, int b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, int buflen)",
      "",
      "[Added Lines]",
      "26: static inline size_t min(size_t a, size_t b) {return a<b ? a : b;}",
      "28: HexOutStream::HexOutStream(OutStream& os, size_t buflen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:     throw rdr::Exception(\"intToHex failed\");",
      "49: }",
      "52:   char* buffer = new char[length*2+1];",
      "54:     buffer[i*2] = intToHex((data[i] >> 4) & 15);",
      "55:     buffer[i*2+1] = intToHex((data[i] & 15));",
      "56:     if (!buffer[i*2] || !buffer[i*2+1]) {",
      "",
      "[Removed Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, int length) {",
      "53:   for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "51: char* HexOutStream::binToHexStr(const char* data, size_t length) {",
      "53:   for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "70:     out_stream.check(2);",
      "71:     U8* optr = out_stream.getptr();",
      "72:     U8* oend = out_stream.getend();",
      "76:       optr[i*2] = intToHex((pos[i] >> 4) & 0xf);",
      "77:       optr[i*2+1] = intToHex(pos[i] & 0xf);",
      "78:     }",
      "",
      "[Removed Lines]",
      "73:     int length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (int i=0; i<length; i++) {",
      "",
      "[Added Lines]",
      "73:     size_t length = min(ptr-pos, (oend-optr)/2);",
      "75:     for (size_t i=0; i<length; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84:   ptr = start;",
      "85: }",
      "88: {",
      "89:   return offset + ptr - start;",
      "90: }",
      "",
      "[Removed Lines]",
      "87: int HexOutStream::length()",
      "",
      "[Added Lines]",
      "87: size_t HexOutStream::length()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "95:   out_stream.flush();",
      "96: }",
      "100:   if (itemSize > bufSize)",
      "101:     throw Exception(\"HexOutStream overrun: max itemSize exceeded\");",
      "103:   writeBuffer();",
      "106:     nItems = (end - ptr) / itemSize;",
      "108:   return nItems;",
      "",
      "[Removed Lines]",
      "98: int",
      "99: HexOutStream::overrun(int itemSize, int nItems) {",
      "105:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "98: size_t",
      "99: HexOutStream::overrun(size_t itemSize, size_t nItems) {",
      "105:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h": [
      "File: common/rdr/HexOutStream.h -> common/rdr/HexOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   class HexOutStream : public OutStream {",
      "27:   public:",
      "30:     virtual ~HexOutStream();",
      "32:     void flush();",
      "35:     static char intToHex(int i);",
      "38:   private:",
      "39:     void writeBuffer();",
      "42:     OutStream& out_stream;",
      "44:     U8* start;",
      "47:   };",
      "49: }",
      "",
      "[Removed Lines]",
      "29:     HexOutStream(OutStream& os, int buflen=0);",
      "33:     int length();",
      "36:     static char* binToHexStr(const char* data, int length);",
      "40:     int overrun(int itemSize, int nItems);",
      "45:     int offset;",
      "46:     int bufSize;",
      "",
      "[Added Lines]",
      "29:     HexOutStream(OutStream& os, size_t buflen=0);",
      "33:     size_t length();",
      "36:     static char* binToHexStr(const char* data, size_t length);",
      "40:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t offset;",
      "46:     size_t bufSize;",
      "",
      "---------------"
    ],
    "common/rdr/InStream.h||common/rdr/InStream.h": [
      "File: common/rdr/InStream.h -> common/rdr/InStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     {",
      "46:       if (ptr + itemSize * nItems > end) {",
      "47:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "44:     inline int check(int itemSize, int nItems=1, bool wait=true)",
      "",
      "[Added Lines]",
      "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "59:     inline bool checkNoWait(int length) { return check(length, 1, false)!=0; }",
      "",
      "[Added Lines]",
      "59:     inline bool checkNoWait(size_t length) { return check(length, 1, false)!=0; }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:     static U32 maxStringLength;",
      "86:       while (bytes > 0) {",
      "88:         ptr += n;",
      "89:         bytes -= n;",
      "90:       }",
      "",
      "[Removed Lines]",
      "85:     inline void skip(int bytes) {",
      "87:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "85:     inline void skip(size_t bytes) {",
      "87:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "96:       U8* dataPtr = (U8*)data;",
      "97:       U8* dataEnd = dataPtr + length;",
      "98:       while (dataPtr < dataEnd) {",
      "100:         memcpy(dataPtr, ptr, n);",
      "101:         ptr += n;",
      "102:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "95:     void readBytes(void* data, int length) {",
      "99:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "95:     void readBytes(void* data, size_t length) {",
      "99:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "117:     virtual int pos() = 0;",
      "",
      "[Added Lines]",
      "117:     virtual size_t pos() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "138:   protected:",
      "",
      "[Removed Lines]",
      "136:     virtual int overrun(int itemSize, int nItems, bool wait=true) = 0;",
      "",
      "[Added Lines]",
      "136:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait=true) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/MemInStream.h||common/rdr/MemInStream.h": [
      "File: common/rdr/MemInStream.h -> common/rdr/MemInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:   public:",
      "40:       : start((const U8*)data), deleteWhenDone(deleteWhenDone_)",
      "41:     {",
      "42:       ptr = start;",
      "",
      "[Removed Lines]",
      "39:     MemInStream(const void* data, int len, bool deleteWhenDone_=false)",
      "",
      "[Added Lines]",
      "39:     MemInStream(const void* data, size_t len, bool deleteWhenDone_=false)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:         delete [] start;",
      "49:     }",
      "54:   private:",
      "57:     const U8* start;",
      "58:     bool deleteWhenDone;",
      "59:   };",
      "",
      "[Removed Lines]",
      "51:     int pos() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "56:     int overrun(int itemSize, int nItems, bool wait) { throw EndOfStream(); }",
      "",
      "[Added Lines]",
      "51:     size_t pos() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "56:     size_t overrun(size_t itemSize, size_t nItems, bool wait) { throw EndOfStream(); }",
      "",
      "---------------"
    ],
    "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
      "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:       delete [] start;",
      "41:     }",
      "44:       check(length);",
      "45:       memcpy(ptr, data, length);",
      "46:       ptr += length;",
      "47:     }",
      "50:     void clear() { ptr = start; };",
      "51:     void clearAndZero() { memset(start, 0, ptr-start); clear(); }",
      "",
      "[Removed Lines]",
      "43:     void writeBytes(const void* data, int length) {",
      "49:     int length() { return ptr - start; }",
      "52:     void reposition(int pos) { ptr = start + pos; }",
      "",
      "[Added Lines]",
      "43:     void writeBytes(const void* data, size_t length) {",
      "49:     size_t length() { return ptr - start; }",
      "52:     void reposition(size_t pos) { ptr = start + pos; }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:         len = (end - start) * 2;",
      "68:       U8* newStart = new U8[len];",
      "",
      "[Removed Lines]",
      "63:     int overrun(int itemSize, int nItems) {",
      "64:       int len = ptr - start + itemSize * nItems;",
      "65:       if (len < (end - start) * 2)",
      "",
      "[Added Lines]",
      "63:     size_t overrun(size_t itemSize, size_t nItems) {",
      "64:       size_t len = ptr - start + itemSize * nItems;",
      "65:       if (len < (size_t)(end - start) * 2)",
      "",
      "---------------"
    ],
    "common/rdr/OutStream.h||common/rdr/OutStream.h": [
      "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:     {",
      "49:       if (ptr + itemSize * nItems > end) {",
      "50:         if (ptr + itemSize > end)",
      "",
      "[Removed Lines]",
      "47:     inline int check(int itemSize, int nItems=1)",
      "",
      "[Added Lines]",
      "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:       writeBytes(str, len);",
      "77:     }",
      "80:       while (bytes-- > 0) writeU8(0);",
      "81:     }",
      "84:       while (bytes > 0) {",
      "86:         ptr += n;",
      "87:         bytes -= n;",
      "88:       }",
      "",
      "[Removed Lines]",
      "79:     inline void pad(int bytes) {",
      "83:     inline void skip(int bytes) {",
      "85:         int n = check(1, bytes);",
      "",
      "[Added Lines]",
      "79:     inline void pad(size_t bytes) {",
      "83:     inline void skip(size_t bytes) {",
      "85:         size_t n = check(1, bytes);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:       const U8* dataPtr = (const U8*)data;",
      "95:       const U8* dataEnd = dataPtr + length;",
      "96:       while (dataPtr < dataEnd) {",
      "98:         memcpy(ptr, dataPtr, n);",
      "99:         ptr += n;",
      "100:         dataPtr += n;",
      "",
      "[Removed Lines]",
      "93:     void writeBytes(const void* data, int length) {",
      "97:         int n = check(1, dataEnd - dataPtr);",
      "",
      "[Added Lines]",
      "93:     void writeBytes(const void* data, size_t length) {",
      "97:         size_t n = check(1, dataEnd - dataPtr);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:       while (length > 0) {",
      "109:         is->readBytes(ptr, n);",
      "110:         ptr += n;",
      "111:         length -= n;",
      "",
      "[Removed Lines]",
      "106:     void copyBytes(InStream* is, int length) {",
      "108:         int n = check(1, length);",
      "",
      "[Added Lines]",
      "106:     void copyBytes(InStream* is, size_t length) {",
      "108:         size_t n = check(1, length);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "127:     virtual int length() = 0;",
      "",
      "[Added Lines]",
      "127:     virtual size_t length() = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "150:   protected:",
      "",
      "[Removed Lines]",
      "148:     virtual int overrun(int itemSize, int nItems) = 0;",
      "",
      "[Added Lines]",
      "148:     virtual size_t overrun(size_t itemSize, size_t nItems) = 0;",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
      "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: using namespace rdr;",
      "40: unsigned int RandomStream::seed;",
      "",
      "[Removed Lines]",
      "38: const int DEFAULT_BUF_LEN = 256;",
      "",
      "[Added Lines]",
      "38: const size_t DEFAULT_BUF_LEN = 256;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: #endif",
      "87: }",
      "90:   return offset + ptr - start;",
      "91: }",
      "94:   if (itemSize > DEFAULT_BUF_LEN)",
      "95:     throw Exception(\"RandomStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "89: int RandomStream::pos() {",
      "93: int RandomStream::overrun(int itemSize, int nItems, bool wait) {",
      "",
      "[Added Lines]",
      "89: size_t RandomStream::pos() {",
      "93: size_t RandomStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   offset += ptr - start;",
      "102:   ptr = start;",
      "106: #ifdef RFB_HAVE_WINCRYPT",
      "107:   if (provider) {",
      "",
      "[Removed Lines]",
      "104:   int length = start + DEFAULT_BUF_LEN - end;",
      "",
      "[Added Lines]",
      "104:   size_t length = start + DEFAULT_BUF_LEN - end;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112: #else",
      "113: #ifndef WIN32",
      "114:   if (fp) {",
      "116:     if (n != 1)",
      "117:       throw rdr::SystemException(\"reading /dev/urandom or /dev/random failed\",",
      "118:                                  errno);",
      "",
      "[Removed Lines]",
      "115:     int n = fread((U8*)end, length, 1, fp);",
      "",
      "[Added Lines]",
      "115:     size_t n = fread((U8*)end, length, 1, fp);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "122:   {",
      "123: #endif",
      "124: #endif",
      "127:   }",
      "130:     nItems = (end - ptr) / itemSize;",
      "132:   return nItems;",
      "",
      "[Removed Lines]",
      "125:     for (int i=0; i<length; i++)",
      "129:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "125:     for (size_t i=0; i<length; i++)",
      "129:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/RandomStream.h||common/rdr/RandomStream.h": [
      "File: common/rdr/RandomStream.h -> common/rdr/RandomStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     RandomStream();",
      "40:     virtual ~RandomStream();",
      "44:   protected:",
      "47:   private:",
      "48:     U8* start;",
      "51:     static unsigned int seed;",
      "52: #ifdef RFB_HAVE_WINCRYPT",
      "",
      "[Removed Lines]",
      "42:     int pos();",
      "45:     int overrun(int itemSize, int nItems, bool wait);",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "42:     size_t pos();",
      "45:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
      "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete[] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "84: {",
      "85:   if (itemSize > bufSize)",
      "86:     throw Exception(\"TLSInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "78: int TLSInStream::pos()",
      "83: int TLSInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "78: size_t TLSInStream::pos()",
      "83: size_t TLSInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:   ptr = start;",
      "95:   while (end < start + itemSize) {",
      "97:     if (!wait && n == 0)",
      "98:       return 0;",
      "99:     end += n;",
      "100:   }",
      "103:     nItems = (end - ptr) / itemSize;",
      "105:   return nItems;",
      "106: }",
      "109: {",
      "110:   int n;",
      "",
      "[Removed Lines]",
      "96:     int n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > end - ptr)",
      "108: int TLSInStream::readTLS(U8* buf, int len, bool wait)",
      "",
      "[Added Lines]",
      "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
      "102:   if (itemSize * nItems > (size_t)(end - ptr))",
      "108: size_t TLSInStream::readTLS(U8* buf, size_t len, bool wait)",
      "",
      "---------------"
    ],
    "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h": [
      "File: common/rdr/TLSInStream.h -> common/rdr/TLSInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     TLSInStream(InStream* in, gnutls_session_t session);",
      "37:     virtual ~TLSInStream();",
      "41:   private:",
      "44:     static ssize_t pull(gnutls_transport_ptr_t str, void* data, size_t size);",
      "46:     gnutls_session_t session;",
      "47:     InStream* in;",
      "50:     U8* start;",
      "51:   };",
      "52: };",
      "",
      "[Removed Lines]",
      "39:     int pos();",
      "42:     int overrun(int itemSize, int nItems, bool wait);",
      "43:     int readTLS(U8* buf, int len, bool wait);",
      "48:     int bufSize;",
      "49:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t pos();",
      "42:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "43:     size_t readTLS(U8* buf, size_t len, bool wait);",
      "48:     size_t bufSize;",
      "49:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
      "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   delete [] start;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int TLSOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t TLSOutStream::length()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84: {",
      "85:   U8* sentUpTo = start;",
      "86:   while (sentUpTo < ptr) {",
      "88:     sentUpTo += n;",
      "89:     offset += n;",
      "90:   }",
      "",
      "[Removed Lines]",
      "87:     int n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "[Added Lines]",
      "87:     size_t n = writeTLS(sentUpTo, ptr - sentUpTo);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:   out->flush();",
      "94: }",
      "97: {",
      "98:   if (itemSize > bufSize)",
      "99:     throw Exception(\"TLSOutStream overrun: max itemSize exceeded\");",
      "101:   flush();",
      "104:     nItems = (end - ptr) / itemSize;",
      "106:   return nItems;",
      "107: }",
      "110: {",
      "111:   int n;",
      "",
      "[Removed Lines]",
      "96: int TLSOutStream::overrun(int itemSize, int nItems)",
      "103:   if (itemSize * nItems > end - ptr)",
      "109: int TLSOutStream::writeTLS(const U8* data, int length)",
      "",
      "[Added Lines]",
      "96: size_t TLSOutStream::overrun(size_t itemSize, size_t nItems)",
      "103:   if (itemSize * nItems > (size_t)(end - ptr))",
      "109: size_t TLSOutStream::writeTLS(const U8* data, size_t length)",
      "",
      "---------------"
    ],
    "common/rdr/TLSOutStream.h||common/rdr/TLSOutStream.h": [
      "File: common/rdr/TLSOutStream.h -> common/rdr/TLSOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     virtual ~TLSOutStream();",
      "38:     void flush();",
      "41:   protected:",
      "44:   private:",
      "46:     static ssize_t push(gnutls_transport_ptr_t str, const void* data, size_t size);",
      "48:     gnutls_session_t session;",
      "49:     OutStream* out;",
      "51:     U8* start;",
      "53:   };",
      "54: };",
      "",
      "[Removed Lines]",
      "39:     int length();",
      "42:     int overrun(int itemSize, int nItems);",
      "45:     int writeTLS(const U8* data, int length);",
      "50:     int bufSize;",
      "52:     int offset;",
      "",
      "[Added Lines]",
      "39:     size_t length();",
      "42:     size_t overrun(size_t itemSize, size_t nItems);",
      "45:     size_t writeTLS(const U8* data, size_t length);",
      "50:     size_t bufSize;",
      "52:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
      "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: enum { DEFAULT_BUF_SIZE = 16384 };",
      "30:   : underlying(0), bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0),",
      "31:     zs(NULL), bytesIn(0)",
      "32: {",
      "",
      "[Removed Lines]",
      "29: ZlibInStream::ZlibInStream(int bufSize_)",
      "",
      "[Added Lines]",
      "29: ZlibInStream::ZlibInStream(size_t bufSize_)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   delete [] start;",
      "41: }",
      "44: {",
      "45:   underlying = is;",
      "46:   bytesIn = bytesIn_;",
      "47:   ptr = end = start;",
      "48: }",
      "51: {",
      "52:   return offset + ptr - start;",
      "53: }",
      "",
      "[Removed Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, int bytesIn_)",
      "50: int ZlibInStream::pos()",
      "",
      "[Added Lines]",
      "43: void ZlibInStream::setUnderlying(InStream* is, size_t bytesIn_)",
      "50: size_t ZlibInStream::pos()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:   zs = NULL;",
      "97: }",
      "100: {",
      "101:   if (itemSize > bufSize)",
      "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
      "",
      "[Removed Lines]",
      "99: int ZlibInStream::overrun(int itemSize, int nItems, bool wait)",
      "",
      "[Added Lines]",
      "99: size_t ZlibInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:   end -= ptr - start;",
      "109:   ptr = start;",
      "112:     if (!decompress(wait))",
      "113:       return 0;",
      "114:   }",
      "117:     nItems = (end - ptr) / itemSize;",
      "119:   return nItems;",
      "",
      "[Removed Lines]",
      "111:   while (end - ptr < itemSize) {",
      "116:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "111:   while ((size_t)(end - ptr) < itemSize) {",
      "116:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "131:   zs->next_out = (U8*)end;",
      "132:   zs->avail_out = start + bufSize - end;",
      "135:   if (n == 0) return false;",
      "136:   zs->next_in = (U8*)underlying->getptr();",
      "137:   zs->avail_in = underlying->getend() - underlying->getptr();",
      "139:     zs->avail_in = bytesIn;",
      "141:   int rc = inflate(zs, Z_SYNC_FLUSH);",
      "",
      "[Removed Lines]",
      "134:   int n = underlying->check(1, 1, wait);",
      "138:   if ((int)zs->avail_in > bytesIn)",
      "",
      "[Added Lines]",
      "134:   size_t n = underlying->check(1, 1, wait);",
      "138:   if (zs->avail_in > bytesIn)",
      "",
      "---------------"
    ],
    "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
      "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   public:",
      "38:     virtual ~ZlibInStream();",
      "41:     void flushUnderlying();",
      "43:     void reset();",
      "45:   private:",
      "",
      "[Removed Lines]",
      "37:     ZlibInStream(int bufSize=0);",
      "40:     void setUnderlying(InStream* is, int bytesIn);",
      "42:     int pos();",
      "",
      "[Added Lines]",
      "37:     ZlibInStream(size_t bufSize=0);",
      "40:     void setUnderlying(InStream* is, size_t bytesIn);",
      "42:     size_t pos();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     void init();",
      "48:     void deinit();",
      "51:     bool decompress(bool wait);",
      "53:     InStream* underlying;",
      "56:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "50:     int overrun(int itemSize, int nItems, bool wait);",
      "54:     int bufSize;",
      "55:     int offset;",
      "57:     int bytesIn;",
      "",
      "[Added Lines]",
      "50:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
      "54:     size_t bufSize;",
      "55:     size_t offset;",
      "57:     size_t bytesIn;",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
      "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: enum { DEFAULT_BUF_SIZE = 16384 };",
      "37:   : underlying(os), compressionLevel(compressLevel), newLevel(compressLevel),",
      "38:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
      "39: {",
      "",
      "[Removed Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, int bufSize_, int compressLevel)",
      "",
      "[Added Lines]",
      "36: ZlibOutStream::ZlibOutStream(OutStream* os, size_t bufSize_, int compressLevel)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:   newLevel = level;",
      "76: }",
      "79: {",
      "80:   return offset + ptr - start;",
      "81: }",
      "",
      "[Removed Lines]",
      "78: int ZlibOutStream::length()",
      "",
      "[Added Lines]",
      "78: size_t ZlibOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:   ptr = start;",
      "99: }",
      "102: {",
      "103: #ifdef ZLIBOUT_DEBUG",
      "104:   vlog.debug(\"overrun\");",
      "",
      "[Removed Lines]",
      "101: int ZlibOutStream::overrun(int itemSize, int nItems)",
      "",
      "[Added Lines]",
      "101: size_t ZlibOutStream::overrun(size_t itemSize, size_t nItems)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   checkCompressionLevel();",
      "113:     zs->next_in = start;",
      "114:     zs->avail_in = ptr - start;",
      "",
      "[Removed Lines]",
      "112:   while (end - ptr < itemSize) {",
      "",
      "[Added Lines]",
      "112:   while ((size_t)(end - ptr) < itemSize) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "130:     }",
      "131:   }",
      "134:     nItems = (end - ptr) / itemSize;",
      "136:   return nItems;",
      "",
      "[Removed Lines]",
      "133:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "133:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h": [
      "File: common/rdr/ZlibOutStream.h -> common/rdr/ZlibOutStream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:   public:",
      "39:     virtual ~ZlibOutStream();",
      "41:     void setUnderlying(OutStream* os);",
      "42:     void setCompressionLevel(int level=-1);",
      "43:     void flush();",
      "46:   private:",
      "49:     void deflate(int flush);",
      "50:     void checkCompressionLevel();",
      "52:     OutStream* underlying;",
      "53:     int compressionLevel;",
      "54:     int newLevel;",
      "57:     z_stream_s* zs;",
      "58:     U8* start;",
      "59:   };",
      "",
      "[Removed Lines]",
      "38:     ZlibOutStream(OutStream* os=0, int bufSize=0, int compressionLevel=-1);",
      "44:     int length();",
      "48:     int overrun(int itemSize, int nItems);",
      "55:     int bufSize;",
      "56:     int offset;",
      "",
      "[Added Lines]",
      "38:     ZlibOutStream(OutStream* os=0, size_t bufSize=0, int compressionLevel=-1);",
      "44:     size_t length();",
      "48:     size_t overrun(size_t itemSize, size_t nItems);",
      "55:     size_t bufSize;",
      "56:     size_t offset;",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.cxx||common/rfb/Configuration.cxx": [
      "File: common/rfb/Configuration.cxx -> common/rfb/Configuration.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "423: BinaryParameter::BinaryParameter(const char* name_, const char* desc_,",
      "425: : VoidParameter(name_, desc_, co), value(0), length(0), def_value((char*)v), def_length(l) {",
      "426:   if (l) {",
      "427:     value = new char[l];",
      "",
      "[Removed Lines]",
      "424:      const void* v, int l, ConfigurationObject co)",
      "",
      "[Added Lines]",
      "424:      const void* v, size_t l, ConfigurationObject co)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:   return rdr::HexInStream::hexStrToBin(v, &value, &length);",
      "442: }",
      "445:   LOCK_CONFIG;",
      "446:   if (immutable) return;",
      "447:   vlog.debug(\"set %s(Binary)\", getName());",
      "",
      "[Removed Lines]",
      "444: void BinaryParameter::setParam(const void* v, int len) {",
      "",
      "[Added Lines]",
      "444: void BinaryParameter::setParam(const void* v, size_t len) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:   return rdr::HexOutStream::binToHexStr(value, length);",
      "463: }",
      "466:   LOCK_CONFIG;",
      "467:   if (length_) *length_ = length;",
      "468:   if (data_) {",
      "",
      "[Removed Lines]",
      "465: void BinaryParameter::getData(void** data_, int* length_) const {",
      "",
      "[Added Lines]",
      "465: void BinaryParameter::getData(void** data_, size_t* length_) const {",
      "",
      "---------------"
    ],
    "common/rfb/Configuration.h||common/rfb/Configuration.h": [
      "File: common/rfb/Configuration.h -> common/rfb/Configuration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "257:   class BinaryParameter : public VoidParameter {",
      "258:   public:",
      "261:     using VoidParameter::setParam;",
      "262:     virtual ~BinaryParameter();",
      "263:     virtual bool setParam(const char* value);",
      "265:     virtual char* getDefaultStr() const;",
      "266:     virtual char* getValueStr() const;",
      "272:   protected:",
      "273:     char* value;",
      "275:     char* def_value;",
      "277:   };",
      "",
      "[Removed Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_, const void* v, int l,",
      "260:       ConfigurationObject co=ConfGlobal);",
      "264:     virtual void setParam(const void* v, int l);",
      "270:     void getData(void** data, int* length) const;",
      "274:     int length;",
      "276:     int def_length;",
      "",
      "[Added Lines]",
      "259:     BinaryParameter(const char* name_, const char* desc_,",
      "260:                     const void* v, size_t l,",
      "261:                     ConfigurationObject co=ConfGlobal);",
      "265:     virtual void setParam(const void* v, size_t l);",
      "271:     void getData(void** data, size_t* length) const;",
      "275:     size_t length;",
      "277:     size_t def_length;",
      "",
      "---------------"
    ],
    "common/rfb/Password.cxx||common/rfb/Password.cxx": [
      "File: common/rfb/Password.cxx -> common/rfb/Password.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: PlainPasswd::PlainPasswd(char* pwd) : CharArray(pwd) {",
      "39: }",
      "42: }",
      "44: PlainPasswd::PlainPasswd(const ObfuscatedPasswd& obfPwd) : CharArray(9) {",
      "",
      "[Removed Lines]",
      "41: PlainPasswd::PlainPasswd(int len) : CharArray(len) {",
      "",
      "[Added Lines]",
      "41: PlainPasswd::PlainPasswd(size_t len) : CharArray(len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63: ObfuscatedPasswd::ObfuscatedPasswd() : length(0) {",
      "64: }",
      "67: }",
      "69: ObfuscatedPasswd::ObfuscatedPasswd(const PlainPasswd& plainPwd) : CharArray(8), length(8) {",
      "71:   for (i=0; i<8; i++)",
      "72:     buf[i] = i<l ? plainPwd.buf[i] : 0;",
      "73:   deskey(d3desObfuscationKey, EN0);",
      "",
      "[Removed Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(int len) : CharArray(len), length(len) {",
      "70:   int l = strlen(plainPwd.buf), i;",
      "",
      "[Added Lines]",
      "66: ObfuscatedPasswd::ObfuscatedPasswd(size_t len) : CharArray(len), length(len) {",
      "70:   size_t l = strlen(plainPwd.buf), i;",
      "",
      "---------------"
    ],
    "common/rfb/Password.h||common/rfb/Password.h": [
      "File: common/rfb/Password.h -> common/rfb/Password.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   public:",
      "29:     PlainPasswd();",
      "30:     PlainPasswd(char* pwd);",
      "32:     PlainPasswd(const ObfuscatedPasswd& obfPwd);",
      "33:     ~PlainPasswd();",
      "34:     void replaceBuf(char* b);",
      "",
      "[Removed Lines]",
      "31:     PlainPasswd(int len);",
      "",
      "[Added Lines]",
      "31:     PlainPasswd(size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:   class ObfuscatedPasswd : public CharArray {",
      "38:   public:",
      "39:     ObfuscatedPasswd();",
      "41:     ObfuscatedPasswd(const PlainPasswd& plainPwd);",
      "42:     ~ObfuscatedPasswd();",
      "44:   };",
      "46: }",
      "",
      "[Removed Lines]",
      "40:     ObfuscatedPasswd(int l);",
      "43:     int length;",
      "",
      "[Added Lines]",
      "40:     ObfuscatedPasswd(size_t l);",
      "43:     size_t length;",
      "",
      "---------------"
    ],
    "common/rfb/util.h||common/rfb/util.h": [
      "File: common/rfb/util.h -> common/rfb/util.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:   public:",
      "51:     CharArray() : buf(0) {}",
      "52:     CharArray(char* str) : buf(str) {} // note: assumes ownership",
      "54:       buf = new char[len]();",
      "55:     }",
      "56:     ~CharArray() {",
      "",
      "[Removed Lines]",
      "53:     CharArray(int len) {",
      "",
      "[Added Lines]",
      "53:     CharArray(size_t len) {",
      "",
      "---------------"
    ],
    "tests/perf/encperf.cxx||tests/perf/encperf.cxx": [
      "File: tests/perf/encperf.cxx -> tests/perf/encperf.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "71: public:",
      "72:   DummyOutStream();",
      "75:   virtual void flush();",
      "77: private:",
      "80:   int offset;",
      "81:   rdr::U8 buf[131072];",
      "",
      "[Removed Lines]",
      "74:   virtual int length();",
      "78:   virtual int overrun(int itemSize, int nItems);",
      "",
      "[Added Lines]",
      "74:   virtual size_t length();",
      "78:   virtual size_t overrun(size_t itemSize, size_t nItems);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:   end = buf + sizeof(buf);",
      "142: }",
      "145: {",
      "146:   flush();",
      "147:   return offset;",
      "",
      "[Removed Lines]",
      "144: int DummyOutStream::length()",
      "",
      "[Added Lines]",
      "144: size_t DummyOutStream::length()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "153:   ptr = buf;",
      "154: }",
      "157: {",
      "158:   flush();",
      "160:     nItems = (end - ptr) / itemSize;",
      "161:   return nItems;",
      "162: }",
      "",
      "[Removed Lines]",
      "156: int DummyOutStream::overrun(int itemSize, int nItems)",
      "159:   if (itemSize * nItems > end - ptr)",
      "",
      "[Added Lines]",
      "156: size_t DummyOutStream::overrun(size_t itemSize, size_t nItems)",
      "159:   if (itemSize * nItems > (size_t)(end - ptr))",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.cxx||win/rfb_win32/Registry.cxx": [
      "File: win/rfb_win32/Registry.cxx -> win/rfb_win32/Registry.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "146:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setString\", result);",
      "147: }",
      "150:   LONG result = RegSetValueEx(key, valname, 0, REG_BINARY, (const BYTE*)value, length);",
      "151:   if (result != ERROR_SUCCESS) throw rdr::SystemException(\"setBinary\", result);",
      "152: }",
      "",
      "[Removed Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, int length) const {",
      "",
      "[Added Lines]",
      "149: void RegKey::setBinary(const TCHAR* valname, const void* value, size_t length) const {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "169:   }",
      "170: }",
      "173:   TCharArray hex(getRepresentation(valname));",
      "174:   if (!rdr::HexInStream::hexStrToBin(CStr(hex.buf), (char**)data, length))",
      "175:     throw rdr::Exception(\"getBinary failed\");",
      "176: }",
      "178:   try {",
      "179:     getBinary(valname, data, length);",
      "180:   } catch(rdr::Exception&) {",
      "",
      "[Removed Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, int* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflen) const {",
      "",
      "[Added Lines]",
      "172: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length) const {",
      "177: void RegKey::getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflen) const {",
      "",
      "---------------"
    ],
    "win/rfb_win32/Registry.h||win/rfb_win32/Registry.h": [
      "File: win/rfb_win32/Registry.h -> win/rfb_win32/Registry.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:       void setExpandString(const TCHAR* valname, const TCHAR* s) const;",
      "73:       void setString(const TCHAR* valname, const TCHAR* s) const;",
      "75:       void setInt(const TCHAR* valname, int i) const;",
      "76:       void setBool(const TCHAR* valname, bool b) const;",
      "78:       TCHAR* getString(const TCHAR* valname) const;",
      "79:       TCHAR* getString(const TCHAR* valname, const TCHAR* def) const;",
      "84:       int getInt(const TCHAR* valname) const;",
      "85:       int getInt(const TCHAR* valname, int def) const;",
      "",
      "[Removed Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, int length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, int* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, int* length, void* def, int deflength) const;",
      "",
      "[Added Lines]",
      "74:       void setBinary(const TCHAR* valname, const void* data, size_t length) const;",
      "81:       void getBinary(const TCHAR* valname, void** data, size_t* length) const;",
      "82:       void getBinary(const TCHAR* valname, void** data, size_t* length, void* def, size_t deflength) const;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf40b83e2330607bab221c33b8f7b5b1885eedb3",
      "candidate_info": {
        "commit_hash": "cf40b83e2330607bab221c33b8f7b5b1885eedb3",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/cf40b83e2330607bab221c33b8f7b5b1885eedb3",
        "files": [
          "common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h",
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/HexOutStream.h",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h",
          "common/rdr/ZlibOutStream.cxx",
          "common/rdr/ZlibOutStream.h",
          "common/rfb/ZRLEEncoder.cxx"
        ],
        "message": "Remove unused bufSize argument from streams",
        "before_after_code_files": [
          "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h",
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
          "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h",
          "common/rfb/ZRLEEncoder.cxx||common/rfb/ZRLEEncoder.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
            "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx": [
          "File: common/rdr/BufferedInStream.cxx -> common/rdr/BufferedInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static const size_t DEFAULT_BUF_SIZE = 8192;",
          "33: {",
          "34:   ptr = end = start = new U8[bufSize];",
          "35: }",
          "",
          "[Removed Lines]",
          "31: BufferedInStream::BufferedInStream(size_t bufSize_)",
          "32:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "",
          "[Added Lines]",
          "31: BufferedInStream::BufferedInStream()",
          "32:   : bufSize(DEFAULT_BUF_SIZE), offset(0)",
          "",
          "---------------"
        ],
        "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h": [
          "File: common/rdr/BufferedInStream.h -> common/rdr/BufferedInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     U8* start;",
          "48:   protected:",
          "50:   };",
          "52: } // end of namespace rdr",
          "",
          "[Removed Lines]",
          "49:     BufferedInStream(size_t bufSize=0);",
          "",
          "[Added Lines]",
          "49:     BufferedInStream();",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx": [
          "File: common/rdr/BufferedOutStream.cxx -> common/rdr/BufferedOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static const size_t DEFAULT_BUF_SIZE = 16384;",
          "35: {",
          "36:   ptr = start = sentUpTo = new U8[bufSize];",
          "37:   end = start + bufSize;",
          "",
          "[Removed Lines]",
          "33: BufferedOutStream::BufferedOutStream(size_t bufSize_)",
          "34:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "",
          "[Added Lines]",
          "33: BufferedOutStream::BufferedOutStream()",
          "34:   : bufSize(DEFAULT_BUF_SIZE), offset(0)",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h": [
          "File: common/rdr/BufferedOutStream.h -> common/rdr/BufferedOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     U8* sentUpTo;",
          "59:   protected:",
          "61:   };",
          "63: }",
          "",
          "[Removed Lines]",
          "60:     BufferedOutStream(size_t bufSize=0);",
          "",
          "[Added Lines]",
          "60:     BufferedOutStream();",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: enum { DEFAULT_BUF_SIZE = 8192 };",
          "52:                        bool closeWhenDone_)",
          "55:     timeoutms(timeoutms_), blockCallback(0),",
          "56:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "57: {",
          "58: }",
          "64:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "65: {",
          "66: }",
          "",
          "[Removed Lines]",
          "51: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
          "53:   : BufferedInStream(bufSize_),",
          "54:     fd(fd_), closeWhenDone(closeWhenDone_),",
          "60: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
          "61:                        size_t bufSize_)",
          "62:   : BufferedInStream(bufSize_),",
          "63:     fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "",
          "[Added Lines]",
          "51: FdInStream::FdInStream(int fd_, int timeoutms_,",
          "53:   : fd(fd_), closeWhenDone(closeWhenDone_),",
          "59: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_)",
          "60:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
          "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   public:",
          "44:     virtual ~FdInStream();",
          "46:     void setTimeout(int timeoutms);",
          "",
          "[Removed Lines]",
          "40:     FdInStream(int fd, int timeoutms=-1, size_t bufSize=0,",
          "41:                bool closeWhenDone_=false);",
          "42:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback,",
          "43:                size_t bufSize=0);",
          "",
          "[Added Lines]",
          "40:     FdInStream(int fd, int timeoutms=-1, bool closeWhenDone_=false);",
          "41:     FdInStream(int fd, FdInStreamBlockCallback* blockCallback);",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: using namespace rdr;",
          "55: {",
          "56:   gettimeofday(&lastWrite, NULL);",
          "57: }",
          "",
          "[Removed Lines]",
          "52: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
          "53:   : BufferedOutStream(bufSize_),",
          "54:     fd(fd_), blocking(blocking_), timeoutms(timeoutms_)",
          "",
          "[Added Lines]",
          "52: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_)",
          "53:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_)",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
          "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   public:",
          "38:     virtual ~FdOutStream();",
          "40:     void setTimeout(int timeoutms);",
          "",
          "[Removed Lines]",
          "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1, size_t bufSize=0);",
          "",
          "[Added Lines]",
          "37:     FdOutStream(int fd, bool blocking=true, int timeoutms=-1);",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: static inline int min(int a, int b) {return a<b ? a : b;}",
          "31: {",
          "32: }",
          "",
          "[Removed Lines]",
          "29: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
          "30: : BufferedInStream(bufSize_), in_stream(is)",
          "",
          "[Added Lines]",
          "29: HexInStream::HexInStream(InStream& is)",
          "30: : in_stream(is)",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
          "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   class HexInStream : public BufferedInStream {",
          "27:   public:",
          "30:     virtual ~HexInStream();",
          "32:     static bool readHexAndShift(char c, int* v);",
          "",
          "[Removed Lines]",
          "29:     HexInStream(InStream& is, size_t bufSize=0);",
          "",
          "[Added Lines]",
          "29:     HexInStream(InStream& is);",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: static inline size_t min(size_t a, size_t b) {return a<b ? a : b;}",
          "30: {",
          "31:   if (bufSize % 2)",
          "32:     bufSize--;",
          "",
          "[Removed Lines]",
          "28: HexOutStream::HexOutStream(OutStream& os, size_t buflen)",
          "29: : out_stream(os), offset(0), bufSize(buflen ? buflen : DEFAULT_BUF_LEN)",
          "",
          "[Added Lines]",
          "28: HexOutStream::HexOutStream(OutStream& os)",
          "29:   : out_stream(os), offset(0), bufSize(DEFAULT_BUF_LEN)",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.h||common/rdr/HexOutStream.h": [
          "File: common/rdr/HexOutStream.h -> common/rdr/HexOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   class HexOutStream : public OutStream {",
          "27:   public:",
          "30:     virtual ~HexOutStream();",
          "32:     void flush();",
          "",
          "[Removed Lines]",
          "29:     HexOutStream(OutStream& os, size_t buflen=0);",
          "",
          "[Added Lines]",
          "29:     HexOutStream(OutStream& os);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: using namespace rdr;",
          "30: {",
          "31:   init();",
          "32: }",
          "",
          "[Removed Lines]",
          "27: ZlibInStream::ZlibInStream(size_t bufSize_)",
          "28:   : BufferedInStream(bufSize_),",
          "29:     underlying(0), zs(NULL), bytesIn(0)",
          "",
          "[Added Lines]",
          "27: ZlibInStream::ZlibInStream()",
          "28:   : underlying(0), zs(NULL), bytesIn(0)",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
          "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   class ZlibInStream : public BufferedInStream {",
          "35:   public:",
          "37:     virtual ~ZlibInStream();",
          "39:     void setUnderlying(InStream* is, size_t bytesIn);",
          "",
          "[Removed Lines]",
          "36:     ZlibInStream(size_t bufSize=0);",
          "",
          "[Added Lines]",
          "36:     ZlibInStream();",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: enum { DEFAULT_BUF_SIZE = 16384 };",
          "37:   : underlying(os), compressionLevel(compressLevel), newLevel(compressLevel),",
          "39: {",
          "40:   zs = new z_stream;",
          "41:   zs->zalloc    = Z_NULL;",
          "",
          "[Removed Lines]",
          "36: ZlibOutStream::ZlibOutStream(OutStream* os, size_t bufSize_, int compressLevel)",
          "38:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "",
          "[Added Lines]",
          "36: ZlibOutStream::ZlibOutStream(OutStream* os, int compressLevel)",
          "38:     bufSize(DEFAULT_BUF_SIZE), offset(0)",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.h||common/rdr/ZlibOutStream.h": [
          "File: common/rdr/ZlibOutStream.h -> common/rdr/ZlibOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   public:",
          "39:     virtual ~ZlibOutStream();",
          "41:     void setUnderlying(OutStream* os);",
          "",
          "[Removed Lines]",
          "38:     ZlibOutStream(OutStream* os=0, size_t bufSize=0, int compressionLevel=-1);",
          "",
          "[Added Lines]",
          "38:     ZlibOutStream(OutStream* os=0, int compressionLevel=-1);",
          "",
          "---------------"
        ],
        "common/rfb/ZRLEEncoder.cxx||common/rfb/ZRLEEncoder.cxx": [
          "File: common/rfb/ZRLEEncoder.cxx -> common/rfb/ZRLEEncoder.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: ZRLEEncoder::ZRLEEncoder(SConnection* conn)",
          "32:   : Encoder(conn, encodingZRLE, EncoderPlain, 127),",
          "34: {",
          "35:   zos.setUnderlying(&mos);",
          "36: }",
          "",
          "[Removed Lines]",
          "33:   zos(0,0,zlibLevel), mos(129*1024)",
          "",
          "[Added Lines]",
          "33:   zos(0,zlibLevel), mos(129*1024)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e875ba492944b80ad43cd4fbdedd2a6d2fd56d0",
      "candidate_info": {
        "commit_hash": "5e875ba492944b80ad43cd4fbdedd2a6d2fd56d0",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/5e875ba492944b80ad43cd4fbdedd2a6d2fd56d0",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h",
          "common/rdr/MemOutStream.h"
        ],
        "message": "Remove unused stream methods\n\nThey were accidentally left unused in fbad8a9 so they haven't been used\nin some time.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
          "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: using namespace rdr;",
          "59: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
          "60:                        bool closeWhenDone_)",
          "",
          "[Removed Lines]",
          "56: enum { DEFAULT_BUF_SIZE = 8192,",
          "57:        MIN_BULK_SIZE = 1024 };",
          "",
          "[Added Lines]",
          "56: enum { DEFAULT_BUF_SIZE = 8192 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   return offset + ptr - start;",
          "98: }",
          "126: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "127: {",
          "128:   if (itemSize > bufSize)",
          "",
          "[Removed Lines]",
          "100: void FdInStream::readBytes(void* data, size_t length)",
          "101: {",
          "102:   if (length < MIN_BULK_SIZE) {",
          "103:     InStream::readBytes(data, length);",
          "104:     return;",
          "105:   }",
          "107:   U8* dataPtr = (U8*)data;",
          "109:   size_t n = end - ptr;",
          "110:   if (n > length) n = length;",
          "112:   memcpy(dataPtr, ptr, n);",
          "113:   dataPtr += n;",
          "114:   length -= n;",
          "115:   ptr += n;",
          "117:   while (length > 0) {",
          "118:     n = readWithTimeoutOrCallback(dataPtr, length);",
          "119:     dataPtr += n;",
          "120:     length -= n;",
          "121:     offset += n;",
          "122:   }",
          "123: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
          "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
          "48:     int getFd() { return fd; }",
          "49:     size_t pos();",
          "52:     void startTiming();",
          "53:     void stopTiming();",
          "",
          "[Removed Lines]",
          "50:     void readBytes(void* data, size_t length);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
          "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:       delete [] start;",
          "42:     }",
          "50:     size_t length() { return ptr - start; }",
          "51:     void clear() { ptr = start; };",
          "52:     void clearAndZero() { memset(start, 0, ptr-start); clear(); }",
          "",
          "[Removed Lines]",
          "44:     void writeBytes(const void* data, size_t length) {",
          "45:       check(length);",
          "46:       memcpy(ptr, data, length);",
          "47:       ptr += length;",
          "48:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b00d2fe17e686527ff66856a747438dbfc73c967",
      "candidate_info": {
        "commit_hash": "b00d2fe17e686527ff66856a747438dbfc73c967",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b00d2fe17e686527ff66856a747438dbfc73c967",
        "files": [
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx"
        ],
        "message": "Make direct stream API a bit safer\n\nProvide some safety checks when directly accessing the underlying\npointer of streams.",
        "before_after_code_files": [
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx",
          "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
          ],
          "candidate": [
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   if (!in_stream.check(2, wait))",
          "77:     return false;",
          "83:   U8* optr = (U8*) end;",
          "84:   for (size_t i=0; i<length; i++) {",
          "",
          "[Removed Lines]",
          "79:   const U8* iptr = in_stream.getptr();",
          "80:   const U8* eptr = in_stream.getend();",
          "81:   size_t length = min((eptr - iptr)/2, maxSize);",
          "",
          "[Added Lines]",
          "79:   size_t length = min(in_stream.avail()/2, maxSize);",
          "80:   const U8* iptr = in_stream.getptr(length*2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     optr[i] = v;",
          "89:   }",
          "92:   end += length;",
          "94:   return true;",
          "",
          "[Removed Lines]",
          "91:   in_stream.setptr(iptr + length*2);",
          "",
          "[Added Lines]",
          "90:   in_stream.setptr(length*2);",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: HexOutStream::writeBuffer() {",
          "67:   U8* pos = start;",
          "68:   while (pos != ptr) {",
          "74:     for (size_t i=0; i<length; i++) {",
          "75:       optr[i*2] = intToHex((pos[i] >> 4) & 0xf);",
          "76:       optr[i*2+1] = intToHex(pos[i] & 0xf);",
          "77:     }",
          "80:     pos += length;",
          "81:   }",
          "82:   offset += ptr - start;",
          "",
          "[Removed Lines]",
          "69:     out_stream.check(2);",
          "70:     U8* optr = out_stream.getptr();",
          "71:     U8* oend = out_stream.getend();",
          "72:     size_t length = min(ptr-pos, (oend-optr)/2);",
          "79:     out_stream.setptr(optr + length*2);",
          "",
          "[Added Lines]",
          "69:     U8* optr = out_stream.getptr(2);",
          "70:     size_t length = min(ptr-pos, out_stream.avail()/2);",
          "77:     out_stream.setptr(length*2);",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define __RDR_INSTREAM_H__",
          "27: #include <rdr/types.h>",
          "28: #include <string.h> // for memcpy",
          "30: namespace rdr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <rdr/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     virtual size_t pos() = 0;",
          "130:   private:",
          "",
          "[Removed Lines]",
          "126:     inline const U8* getptr() const { return ptr; }",
          "127:     inline const U8* getend() const { return end; }",
          "128:     inline void setptr(const U8* p) { ptr = p; }",
          "",
          "[Added Lines]",
          "127:     inline const U8* getptr(size_t length) { check(length); return ptr; }",
          "128:     inline void setptr(size_t length) { if (length > avail())",
          "129:                                           throw Exception(\"Input stream overflow\");",
          "130:                                         skip(length); }",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define __RDR_OUTSTREAM_H__",
          "27: #include <rdr/types.h>",
          "28: #include <rdr/InStream.h>",
          "29: #include <string.h> // for memcpy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <rdr/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     virtual void cork(bool enable) { corked = enable; flush(); }",
          "143:   private:",
          "",
          "[Removed Lines]",
          "139:     inline U8* getptr() { return ptr; }",
          "140:     inline U8* getend() { return end; }",
          "141:     inline void setptr(U8* p) { ptr = p; }",
          "",
          "[Added Lines]",
          "142:     inline U8* getptr(size_t length) { check(length); return ptr; }",
          "143:     inline void setptr(size_t length) { if (length > avail())",
          "144:                                           throw Exception(\"Output stream overflow\");",
          "145:                                         ptr += length; }",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   size_t n = underlying->check(1, wait);",
          "97:   if (n == 0) return false;",
          "103:   int rc = inflate(zs, Z_SYNC_FLUSH);",
          "104:   if (rc < 0) {",
          "105:     throw Exception(\"ZlibInStream: inflate failed\");",
          "106:   }",
          "109:   end = zs->next_out;",
          "111:   return true;",
          "112: }",
          "",
          "[Removed Lines]",
          "98:   zs->next_in = (U8*)underlying->getptr();",
          "99:   zs->avail_in = underlying->avail();",
          "100:   if (zs->avail_in > bytesIn)",
          "101:     zs->avail_in = bytesIn;",
          "108:   bytesIn -= zs->next_in - underlying->getptr();",
          "110:   underlying->setptr(zs->next_in);",
          "",
          "[Added Lines]",
          "98:   size_t length = underlying->avail();",
          "99:   if (length > bytesIn)",
          "100:     length = bytesIn;",
          "101:   zs->next_in = (U8*)underlying->getptr(length);",
          "102:   zs->avail_in = length;",
          "109:   bytesIn -= length - zs->avail_in;",
          "111:   underlying->setptr(length - zs->avail_in);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return;",
          "146:   do {",
          "151: #ifdef ZLIBOUT_DEBUG",
          "152:     vlog.debug(\"calling deflate, avail_in %d, avail_out %d\",",
          "",
          "[Removed Lines]",
          "147:     underlying->check(1);",
          "148:     zs->next_out = underlying->getptr();",
          "149:     zs->avail_out = underlying->avail();",
          "",
          "[Added Lines]",
          "147:     size_t chunk;",
          "148:     zs->next_out = underlying->getptr(1);",
          "149:     zs->avail_out = chunk = underlying->avail();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:                zs->next_out-underlying->getptr());",
          "168: #endif",
          "171:   } while (zs->avail_out == 0);",
          "172: }",
          "",
          "[Removed Lines]",
          "170:     underlying->setptr(zs->next_out);",
          "",
          "[Added Lines]",
          "170:     underlying->setptr(chunk - zs->avail_out);",
          "",
          "---------------"
        ],
        "common/rfb/JpegCompressor.cxx||common/rfb/JpegCompressor.cxx": [
          "File: common/rfb/JpegCompressor.cxx -> common/rfb/JpegCompressor.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: struct JPEG_DEST_MGR {",
          "76:   struct jpeg_destination_mgr pub;",
          "77:   JpegCompressor *instance;",
          "78: };",
          "80: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   size_t chunkSize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   JpegCompressor *jc = dest->instance;",
          "86:   jc->clear();",
          "89: }",
          "91: static boolean",
          "",
          "[Removed Lines]",
          "87:   dest->pub.next_output_byte = jc->getptr();",
          "88:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "[Added Lines]",
          "88:   dest->pub.next_output_byte = jc->getptr(jc->length());",
          "89:   dest->pub.free_in_buffer = dest->chunkSize = jc->avail();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   JPEG_DEST_MGR *dest = (JPEG_DEST_MGR *)cinfo->dest;",
          "95:   JpegCompressor *jc = dest->instance;",
          "102:   return TRUE;",
          "103: }",
          "",
          "[Removed Lines]",
          "97:   jc->setptr(jc->getend());",
          "98:   jc->check(jc->length());",
          "99:   dest->pub.next_output_byte = jc->getptr();",
          "100:   dest->pub.free_in_buffer = jc->avail();",
          "",
          "[Added Lines]",
          "98:   jc->setptr(jc->avail());",
          "99:   dest->pub.next_output_byte = jc->getptr(jc->length());",
          "100:   dest->pub.free_in_buffer = dest->chunkSize = jc->avail();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:   JPEG_DEST_MGR *dest = (JPEG_DEST_MGR *)cinfo->dest;",
          "109:   JpegCompressor *jc = dest->instance;",
          "112: }",
          "114: JpegCompressor::JpegCompressor(int bufferLen) : MemOutStream(bufferLen)",
          "",
          "[Removed Lines]",
          "111:   jc->setptr(dest->pub.next_output_byte);",
          "",
          "[Added Lines]",
          "111:   jc->setptr(dest->chunkSize - dest->pub.free_in_buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
      "candidate_info": {
        "commit_hash": "75e6e0653a48baf474fd45d78b1da53e2f324642",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/75e6e0653a48baf474fd45d78b1da53e2f324642",
        "files": [
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h",
          "common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx"
        ],
        "message": "Be defensive about overflows in stream objects\n\nWe use a lot of lengths given to us over the network, so be more\nparanoid about them causing an overflow as otherwise an attacker\nmight trick us in to overwriting other memory.\n\nThis primarily affects the client which often gets lengths from the\nserver, but there are also some scenarios where the server might\ntheoretically be vulnerable.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
        "before_after_code_files": [
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
          "common/rdr/InStream.h||common/rdr/InStream.h",
          "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
          "common/rdr/OutStream.h||common/rdr/OutStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx",
            "common/rdr/InStream.h||common/rdr/InStream.h",
            "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h",
            "common/rdr/OutStream.h||common/rdr/OutStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   ptr = start;",
          "138:   size_t bytes_to_read;",
          "140:     bytes_to_read = start + bufSize - end;",
          "141:     if (!timing) {",
          "",
          "[Removed Lines]",
          "139:   while (end < start + itemSize) {",
          "",
          "[Added Lines]",
          "139:   while ((size_t)(end - start) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     end += n;",
          "153:   }",
          "158:   return nItems;",
          "159: }",
          "",
          "[Removed Lines]",
          "155:   if (itemSize * nItems > (size_t)(end - ptr))",
          "156:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "155:   size_t nAvail;",
          "156:   nAvail = (end - ptr) / itemSize;",
          "157:   if (nAvail < nItems)",
          "158:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     }",
          "150:   }",
          "156:   return nItems;",
          "157: }",
          "",
          "[Removed Lines]",
          "153:   if (itemSize * nItems > (size_t)(end - ptr))",
          "154:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "152:   size_t nAvail;",
          "153:   nAvail = (end - ptr) / itemSize;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   ptr = b;",
          "72:     size_t n = fread((U8 *)end, b + sizeof(b) - end, 1, file);",
          "73:     if (n == 0) {",
          "74:       if (ferror(file))",
          "",
          "[Removed Lines]",
          "71:   while (end < b + itemSize) {",
          "",
          "[Added Lines]",
          "71:   while ((size_t)(end - b) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     end += b + sizeof(b) - end;",
          "81:   }",
          "86:   return nItems;",
          "87: }",
          "",
          "[Removed Lines]",
          "83:   if (itemSize * nItems > (size_t)(end - ptr))",
          "84:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "83:   size_t nAvail;",
          "84:   nAvail = (end - ptr) / itemSize;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "",
          "[Removed Lines]",
          "94:   while (end < ptr + itemSize) {",
          "",
          "[Added Lines]",
          "94:   while ((size_t)(end - ptr) < itemSize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     end += length;",
          "111:   }",
          "116:   return nItems;",
          "117: }",
          "",
          "[Removed Lines]",
          "113:   if (itemSize * nItems > (size_t)(end - ptr))",
          "114:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "113:   size_t nAvail;",
          "114:   nAvail = (end - ptr) / itemSize;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/HexOutStream.cxx||common/rdr/HexOutStream.cxx": [
          "File: common/rdr/HexOutStream.cxx -> common/rdr/HexOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   writeBuffer();",
          "108:   return nItems;",
          "109: }",
          "",
          "[Removed Lines]",
          "105:   if (itemSize * nItems > (size_t)(end - ptr))",
          "106:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "105:   size_t nAvail;",
          "106:   nAvail = (end - ptr) / itemSize;",
          "107:   if (nAvail < nItems)",
          "108:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/InStream.h||common/rdr/InStream.h": [
          "File: common/rdr/InStream.h -> common/rdr/InStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     inline size_t check(size_t itemSize, size_t nItems=1, bool wait=true)",
          "45:     {",
          "52:       return nItems;",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:       if (ptr + itemSize * nItems > end) {",
          "47:         if (ptr + itemSize > end)",
          "48:           return overrun(itemSize, nItems, wait);",
          "50:         nItems = (end - ptr) / itemSize;",
          "51:       }",
          "",
          "[Added Lines]",
          "46:       size_t nAvail;",
          "48:       if (itemSize > (size_t)(end - ptr))",
          "49:         return overrun(itemSize, nItems, wait);",
          "51:       nAvail = (end - ptr) / itemSize;",
          "52:       if (nAvail < nItems)",
          "53:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     void readBytes(void* data, size_t length) {",
          "101:         ptr += n;",
          "103:       }",
          "104:     }",
          "",
          "[Removed Lines]",
          "96:       U8* dataPtr = (U8*)data;",
          "97:       U8* dataEnd = dataPtr + length;",
          "98:       while (dataPtr < dataEnd) {",
          "99:         size_t n = check(1, dataEnd - dataPtr);",
          "100:         memcpy(dataPtr, ptr, n);",
          "102:         dataPtr += n;",
          "",
          "[Added Lines]",
          "99:       while (length > 0) {",
          "100:         size_t n = check(1, length);",
          "101:         memcpy(data, ptr, n);",
          "103:         data = (U8*)data + n;",
          "104:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/MemOutStream.h||common/rdr/MemOutStream.h": [
          "File: common/rdr/MemOutStream.h -> common/rdr/MemOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef __RDR_MEMOUTSTREAM_H__",
          "24: #define __RDR_MEMOUTSTREAM_H__",
          "26: #include <rdr/OutStream.h>",
          "28: namespace rdr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <rdr/Exception.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       if (len < (size_t)(end - start) * 2)",
          "66:         len = (end - start) * 2;",
          "68:       U8* newStart = new U8[len];",
          "69:       memcpy(newStart, start, ptr - start);",
          "70:       ptr = newStart + (ptr - start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:       if (len < (size_t)(end - start))",
          "70:         throw Exception(\"Overflow in MemOutStream::overrun()\");",
          "",
          "---------------"
        ],
        "common/rdr/OutStream.h||common/rdr/OutStream.h": [
          "File: common/rdr/OutStream.h -> common/rdr/OutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     inline size_t check(size_t itemSize, size_t nItems=1)",
          "48:     {",
          "55:       return nItems;",
          "56:     }",
          "",
          "[Removed Lines]",
          "49:       if (ptr + itemSize * nItems > end) {",
          "50:         if (ptr + itemSize > end)",
          "51:           return overrun(itemSize, nItems);",
          "53:         nItems = (end - ptr) / itemSize;",
          "54:       }",
          "",
          "[Added Lines]",
          "49:       size_t nAvail;",
          "51:       if (itemSize > (size_t)(end - ptr))",
          "52:         return overrun(itemSize, nItems);",
          "54:       nAvail = (end - ptr) / itemSize;",
          "55:       if (nAvail < nItems)",
          "56:         return nAvail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     void writeBytes(const void* data, size_t length) {",
          "99:         ptr += n;",
          "101:       }",
          "102:     }",
          "",
          "[Removed Lines]",
          "94:       const U8* dataPtr = (const U8*)data;",
          "95:       const U8* dataEnd = dataPtr + length;",
          "96:       while (dataPtr < dataEnd) {",
          "97:         size_t n = check(1, dataEnd - dataPtr);",
          "98:         memcpy(ptr, dataPtr, n);",
          "100:         dataPtr += n;",
          "",
          "[Added Lines]",
          "97:       while (length > 0) {",
          "98:         size_t n = check(1, length);",
          "99:         memcpy(ptr, data, n);",
          "101:         data = (U8*)data + n;",
          "102:         length -= n;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   }",
          "132:   return nItems;",
          "133: }",
          "",
          "[Removed Lines]",
          "129:   if (itemSize * nItems > (size_t)(end - ptr))",
          "130:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "129:   size_t nAvail;",
          "130:   nAvail = (end - ptr) / itemSize;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:       return -1;",
          "44:     }",
          "47:       size = in->getend() - in->getptr();",
          "49:     in->readBytes(data, size);",
          "",
          "[Removed Lines]",
          "46:     if (in->getend() - in->getptr() < (ptrdiff_t)size)",
          "",
          "[Added Lines]",
          "46:     if ((size_t)(in->getend() - in->getptr()) < size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   end -= ptr - start;",
          "93:   ptr = start;",
          "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
          "97:     if (!wait && n == 0)",
          "98:       return 0;",
          "99:     end += n;",
          "100:   }",
          "105:   return nItems;",
          "106: }",
          "",
          "[Removed Lines]",
          "95:   while (end < start + itemSize) {",
          "102:   if (itemSize * nItems > (size_t)(end - ptr))",
          "103:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "95:   while ((size_t)(end - start) < itemSize) {",
          "102:   size_t nAvail;",
          "103:   nAvail = (end - ptr) / itemSize;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/TLSOutStream.cxx||common/rdr/TLSOutStream.cxx": [
          "File: common/rdr/TLSOutStream.cxx -> common/rdr/TLSOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   flush();",
          "106:   return nItems;",
          "107: }",
          "",
          "[Removed Lines]",
          "103:   if (itemSize * nItems > (size_t)(end - ptr))",
          "104:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "103:   size_t nAvail;",
          "104:   nAvail = (end - ptr) / itemSize;",
          "105:   if (nAvail < nItems)",
          "106:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:       return 0;",
          "114:   }",
          "119:   return nItems;",
          "120: }",
          "",
          "[Removed Lines]",
          "116:   if (itemSize * nItems > (size_t)(end - ptr))",
          "117:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "116:   size_t nAvail;",
          "117:   nAvail = (end - ptr) / itemSize;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibOutStream.cxx||common/rdr/ZlibOutStream.cxx": [
          "File: common/rdr/ZlibOutStream.cxx -> common/rdr/ZlibOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     }",
          "131:   }",
          "136:   return nItems;",
          "137: }",
          "",
          "[Removed Lines]",
          "133:   if (itemSize * nItems > (size_t)(end - ptr))",
          "134:     nItems = (end - ptr) / itemSize;",
          "",
          "[Added Lines]",
          "133:   size_t nAvail;",
          "134:   nAvail = (end - ptr) / itemSize;",
          "135:   if (nAvail < nItems)",
          "136:     return nAvail;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9425ac04d70481f7cb168a19bcbc47728f838c7",
      "candidate_info": {
        "commit_hash": "e9425ac04d70481f7cb168a19bcbc47728f838c7",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/e9425ac04d70481f7cb168a19bcbc47728f838c7",
        "files": [
          "common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h",
          "common/rdr/CMakeLists.txt",
          "common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h",
          "common/rdr/FileInStream.cxx",
          "common/rdr/FileInStream.h",
          "common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h",
          "common/rdr/RandomStream.cxx",
          "common/rdr/RandomStream.h",
          "common/rdr/TLSInStream.cxx",
          "common/rdr/TLSInStream.h",
          "common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h"
        ],
        "message": "Create common base classes for buffered streams\n\nMost streams are backed by a memory buffer. Create common base classes\nfor this functionality to avoid code duplication.",
        "before_after_code_files": [
          "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx",
          "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h",
          "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx",
          "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h",
          "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
          "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
          "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
          "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
          "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
          "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
          "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
          "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
          "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
          "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
          "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
          "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
          "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
          "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
          ],
          "candidate": [
            "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx",
            "common/rdr/FdInStream.h||common/rdr/FdInStream.h",
            "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx",
            "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h",
            "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx",
            "common/rdr/FileInStream.h||common/rdr/FileInStream.h",
            "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx",
            "common/rdr/HexInStream.h||common/rdr/HexInStream.h",
            "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx",
            "common/rdr/RandomStream.h||common/rdr/RandomStream.h",
            "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx",
            "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h",
            "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx",
            "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h"
          ]
        }
      },
      "candidate_diff": {
        "common/rdr/BufferedInStream.cxx||common/rdr/BufferedInStream.cxx": [
          "File: common/rdr/BufferedInStream.cxx -> common/rdr/BufferedInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #ifdef HAVE_CONFIG_H",
          "21: #include <config.h>",
          "22: #endif",
          "24: #include <rdr/BufferedInStream.h>",
          "25: #include <rdr/Exception.h>",
          "27: using namespace rdr;",
          "29: static const size_t DEFAULT_BUF_SIZE = 8192;",
          "31: BufferedInStream::BufferedInStream(size_t bufSize_)",
          "32:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "33: {",
          "34:   ptr = end = start = new U8[bufSize];",
          "35: }",
          "37: BufferedInStream::~BufferedInStream()",
          "38: {",
          "39:   delete [] start;",
          "40: }",
          "42: size_t BufferedInStream::pos()",
          "43: {",
          "44:   return offset + ptr - start;",
          "45: }",
          "47: size_t BufferedInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "48: {",
          "49:   if (itemSize > bufSize)",
          "50:     throw Exception(\"BufferedInStream overrun: \"",
          "51:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "52:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "54:   if (end - ptr != 0)",
          "55:     memmove(start, ptr, end - ptr);",
          "57:   offset += ptr - start;",
          "58:   end -= ptr - start;",
          "59:   ptr = start;",
          "61:   while (avail() < itemSize) {",
          "62:     if (!fillBuffer(start + bufSize - end, wait))",
          "63:       return 0;",
          "64:   }",
          "66:   size_t nAvail;",
          "67:   nAvail = avail() / itemSize;",
          "68:   if (nAvail < nItems)",
          "69:     return nAvail;",
          "71:   return nItems;",
          "72: }",
          "",
          "---------------"
        ],
        "common/rdr/BufferedInStream.h||common/rdr/BufferedInStream.h": [
          "File: common/rdr/BufferedInStream.h -> common/rdr/BufferedInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef __RDR_BUFFEREDINSTREAM_H__",
          "25: #define __RDR_BUFFEREDINSTREAM_H__",
          "27: #include <rdr/InStream.h>",
          "29: namespace rdr {",
          "31:   class BufferedInStream : public InStream {",
          "33:   public:",
          "34:     virtual ~BufferedInStream();",
          "36:     virtual size_t pos();",
          "38:   private:",
          "39:     virtual bool fillBuffer(size_t maxSize, bool wait) = 0;",
          "41:     virtual size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "43:   private:",
          "44:     size_t bufSize;",
          "45:     size_t offset;",
          "46:     U8* start;",
          "48:   protected:",
          "49:     BufferedInStream(size_t bufSize=0);",
          "50:   };",
          "52: } // end of namespace rdr",
          "54: #endif",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.cxx||common/rdr/BufferedOutStream.cxx": [
          "File: common/rdr/BufferedOutStream.cxx -> common/rdr/BufferedOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #ifdef HAVE_CONFIG_H",
          "22: #include <config.h>",
          "23: #endif",
          "25: #include <rdr/BufferedOutStream.h>",
          "26: #include <rdr/Exception.h>",
          "29: using namespace rdr;",
          "31: static const size_t DEFAULT_BUF_SIZE = 16384;",
          "33: BufferedOutStream::BufferedOutStream(size_t bufSize_)",
          "34:   : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "35: {",
          "36:   ptr = start = sentUpTo = new U8[bufSize];",
          "37:   end = start + bufSize;",
          "38: }",
          "40: BufferedOutStream::~BufferedOutStream()",
          "41: {",
          "43:   delete [] start;",
          "44: }",
          "46: size_t BufferedOutStream::length()",
          "47: {",
          "48:   return offset + ptr - sentUpTo;",
          "49: }",
          "51: size_t BufferedOutStream::bufferUsage()",
          "52: {",
          "53:   return ptr - sentUpTo;",
          "54: }",
          "56: void BufferedOutStream::flush()",
          "57: {",
          "58:   while (sentUpTo < ptr) {",
          "59:     size_t len;",
          "61:     len = bufferUsage();",
          "63:     if (!flushBuffer(false))",
          "64:       break;",
          "66:     offset += len - bufferUsage();",
          "67:   }",
          "70:   if (sentUpTo == ptr)",
          "71:     ptr = sentUpTo = start;",
          "72: }",
          "74: size_t BufferedOutStream::overrun(size_t itemSize, size_t nItems)",
          "75: {",
          "76:   if (itemSize > bufSize)",
          "77:     throw Exception(\"BufferedOutStream overrun: \"",
          "78:                     \"requested size of %lu bytes exceeds maximum of %lu bytes\",",
          "79:                     (long unsigned)itemSize, (long unsigned)bufSize);",
          "82:   flush();",
          "85:   while (itemSize > avail()) {",
          "88:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "89:         (itemSize < bufSize - (ptr - sentUpTo))) {",
          "90:       memmove(start, sentUpTo, ptr - sentUpTo);",
          "91:       ptr = start + (ptr - sentUpTo);",
          "92:       sentUpTo = start;",
          "93:     } else {",
          "94:       size_t len;",
          "96:       len = bufferUsage();",
          "99:       flushBuffer(true);",
          "101:       offset += len - bufferUsage();",
          "104:       if (sentUpTo == ptr)",
          "105:         ptr = sentUpTo = start;",
          "106:     }",
          "107:   }",
          "109:   size_t nAvail;",
          "110:   nAvail = avail() / itemSize;",
          "111:   if (nAvail < nItems)",
          "112:     return nAvail;",
          "114:   return nItems;",
          "115: }",
          "",
          "---------------"
        ],
        "common/rdr/BufferedOutStream.h||common/rdr/BufferedOutStream.h": [
          "File: common/rdr/BufferedOutStream.h -> common/rdr/BufferedOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef __RDR_BUFFEREDOUTSTREAM_H__",
          "25: #define __RDR_BUFFEREDOUTSTREAM_H__",
          "27: #include <rdr/OutStream.h>",
          "29: namespace rdr {",
          "31:   class BufferedOutStream : public OutStream {",
          "33:   public:",
          "34:     virtual ~BufferedOutStream();",
          "36:     virtual size_t length();",
          "37:     virtual void flush();",
          "39:     size_t bufferUsage();",
          "41:   private:",
          "47:     virtual bool flushBuffer(bool wait) = 0;",
          "49:     virtual size_t overrun(size_t itemSize, size_t nItems);",
          "51:   private:",
          "52:     size_t bufSize;",
          "53:     size_t offset;",
          "54:     U8* start;",
          "56:   protected:",
          "57:     U8* sentUpTo;",
          "59:   protected:",
          "60:     BufferedOutStream(size_t bufSize=0);",
          "61:   };",
          "63: }",
          "65: #endif",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.cxx||common/rdr/FdInStream.cxx": [
          "File: common/rdr/FdInStream.cxx -> common/rdr/FdInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <unistd.h>",
          "37: #endif",
          "47: #ifdef HAVE_SYS_SELECT_H",
          "48: #include <sys/select.h>",
          "",
          "[Removed Lines]",
          "39: #ifndef vncmin",
          "40: #define vncmin(a,b)            (((a) < (b)) ? (a) : (b))",
          "41: #endif",
          "42: #ifndef vncmax",
          "43: #define vncmax(a,b)            (((a) > (b)) ? (a) : (b))",
          "44: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: FdInStream::FdInStream(int fd_, int timeoutms_, size_t bufSize_,",
          "59:                        bool closeWhenDone_)",
          "61:     timeoutms(timeoutms_), blockCallback(0),",
          "64: {",
          "66: }",
          "68: FdInStream::FdInStream(int fd_, FdInStreamBlockCallback* blockCallback_,",
          "69:                        size_t bufSize_)",
          "73: {",
          "75: }",
          "77: FdInStream::~FdInStream()",
          "78: {",
          "80:   if (closeWhenDone) close(fd);",
          "81: }",
          "",
          "[Removed Lines]",
          "60:   : fd(fd_), closeWhenDone(closeWhenDone_),",
          "62:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
          "63:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "65:   ptr = end = start = new U8[bufSize];",
          "70:   : fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "71:     timing(false), timeWaitedIn100us(5), timedKbits(0),",
          "72:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "74:   ptr = end = start = new U8[bufSize];",
          "79:   delete [] start;",
          "",
          "[Added Lines]",
          "53:   : BufferedInStream(bufSize_),",
          "54:     fd(fd_), closeWhenDone(closeWhenDone_),",
          "56:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "62:   : BufferedInStream(bufSize_),",
          "63:     fd(fd_), timeoutms(0), blockCallback(blockCallback_),",
          "64:     timing(false), timeWaitedIn100us(5), timedKbits(0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   timeoutms = 0;",
          "92: }",
          "100: {",
          "134: }",
          "",
          "[Removed Lines]",
          "94: size_t FdInStream::pos()",
          "95: {",
          "96:   return offset + ptr - start;",
          "97: }",
          "99: size_t FdInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "101:   if (itemSize > bufSize)",
          "102:     throw Exception(\"FdInStream overrun: max itemSize exceeded\");",
          "104:   if (end - ptr != 0)",
          "105:     memmove(start, ptr, end - ptr);",
          "107:   offset += ptr - start;",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "111:   size_t bytes_to_read;",
          "112:   while ((size_t)(end - start) < itemSize) {",
          "113:     bytes_to_read = start + bufSize - end;",
          "114:     if (!timing) {",
          "121:       bytes_to_read = vncmin(bytes_to_read, vncmax(itemSize*nItems, 8));",
          "122:     }",
          "123:     size_t n = readWithTimeoutOrCallback((U8*)end, bytes_to_read, wait);",
          "124:     if (n == 0) return 0;",
          "125:     end += n;",
          "126:   }",
          "128:   size_t nAvail;",
          "129:   nAvail = avail() / itemSize;",
          "130:   if (nAvail < nItems)",
          "131:     return nAvail;",
          "133:   return nItems;",
          "",
          "[Added Lines]",
          "85: bool FdInStream::fillBuffer(size_t maxSize, bool wait)",
          "87:   size_t n = readWithTimeoutOrCallback((U8*)end, maxSize, wait);",
          "88:   if (n == 0)",
          "89:     return false;",
          "90:   end += n;",
          "92:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FdInStream.h||common/rdr/FdInStream.h": [
          "File: common/rdr/FdInStream.h -> common/rdr/FdInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef __RDR_FDINSTREAM_H__",
          "24: #define __RDR_FDINSTREAM_H__",
          "28: namespace rdr {",
          "",
          "[Removed Lines]",
          "26: #include <rdr/InStream.h>",
          "",
          "[Added Lines]",
          "26: #include <rdr/BufferedInStream.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     virtual ~FdInStreamBlockCallback() {}",
          "34:   };",
          "38:   public:",
          "",
          "[Removed Lines]",
          "36:   class FdInStream : public InStream {",
          "",
          "[Added Lines]",
          "36:   class FdInStream : public BufferedInStream {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     void setTimeout(int timeoutms);",
          "47:     void setBlockCallback(FdInStreamBlockCallback* blockCallback);",
          "48:     int getFd() { return fd; }",
          "51:     void startTiming();",
          "52:     void stopTiming();",
          "53:     unsigned int kbitsPerSecond();",
          "54:     unsigned int timeWaited() { return timeWaitedIn100us; }",
          "59:   private:",
          "60:     size_t readWithTimeoutOrCallback(void* buf, size_t len, bool wait=true);",
          "62:     int fd;",
          "",
          "[Removed Lines]",
          "49:     size_t pos();",
          "56:   protected:",
          "57:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "",
          "[Added Lines]",
          "56:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     unsigned int timeWaitedIn100us;",
          "69:     unsigned int timedKbits;",
          "72:     size_t offset;",
          "73:     U8* start;",
          "74:   };",
          "",
          "[Removed Lines]",
          "71:     size_t bufSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.cxx||common/rdr/FdOutStream.cxx": [
          "File: common/rdr/FdOutStream.cxx -> common/rdr/FdOutStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: using namespace rdr;",
          "54: FdOutStream::FdOutStream(int fd_, bool blocking_, int timeoutms_, size_t bufSize_)",
          "57: {",
          "61:   gettimeofday(&lastWrite, NULL);",
          "62: }",
          "64: FdOutStream::~FdOutStream()",
          "65: {",
          "66:   try {",
          "69:   } catch (Exception&) {",
          "70:   }",
          "72: }",
          "74: void FdOutStream::setTimeout(int timeoutms_) {",
          "",
          "[Removed Lines]",
          "52: enum { DEFAULT_BUF_SIZE = 16384 };",
          "55:   : fd(fd_), blocking(blocking_), timeoutms(timeoutms_),",
          "56:     bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0)",
          "58:   ptr = start = sentUpTo = new U8[bufSize];",
          "59:   end = start + bufSize;",
          "67:     blocking = true;",
          "68:     flush();",
          "71:   delete [] start;",
          "",
          "[Added Lines]",
          "53:   : BufferedOutStream(bufSize_),",
          "54:     fd(fd_), blocking(blocking_), timeoutms(timeoutms_)",
          "62:     while (sentUpTo != ptr)",
          "63:       flushBuffer(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   blocking = blocking_;",
          "80: }",
          "92: unsigned FdOutStream::getIdleTime()",
          "93: {",
          "94:   return rfb::msSince(&lastWrite);",
          "95: }",
          "98: {",
          "150:   }",
          "158: }",
          "",
          "[Removed Lines]",
          "82: size_t FdOutStream::length()",
          "83: {",
          "84:   return offset + ptr - sentUpTo;",
          "85: }",
          "87: int FdOutStream::bufferUsage()",
          "88: {",
          "89:   return ptr - sentUpTo;",
          "90: }",
          "97: void FdOutStream::flush()",
          "99:   while (sentUpTo < ptr) {",
          "100:     size_t n = writeWithTimeout((const void*) sentUpTo,",
          "101:                                 ptr - sentUpTo,",
          "102:                                 blocking? timeoutms : 0);",
          "105:     if (n == 0) {",
          "107:       if (!blocking)",
          "108:         break;",
          "110:       throw TimedOut();",
          "111:     }",
          "113:     sentUpTo += n;",
          "114:     offset += n;",
          "115:   }",
          "118:   if (sentUpTo == ptr)",
          "119:     ptr = sentUpTo = start;",
          "120: }",
          "123: size_t FdOutStream::overrun(size_t itemSize, size_t nItems)",
          "124: {",
          "125:   if (itemSize > bufSize)",
          "126:     throw Exception(\"FdOutStream overrun: max itemSize exceeded\");",
          "129:   flush();",
          "132:   if (itemSize > avail()) {",
          "135:     if (((size_t)(sentUpTo - start) > bufSize / 4) &&",
          "136:         (itemSize < bufSize - (ptr - sentUpTo))) {",
          "137:       memmove(start, sentUpTo, ptr - sentUpTo);",
          "138:       ptr = start + (ptr - sentUpTo);",
          "139:       sentUpTo = start;",
          "140:     } else {",
          "143:       bool realBlocking;",
          "145:       realBlocking = blocking;",
          "146:       blocking = true;",
          "147:       flush();",
          "148:       blocking = realBlocking;",
          "149:     }",
          "152:   size_t nAvail;",
          "153:   nAvail = avail() / itemSize;",
          "154:   if (nAvail < nItems)",
          "155:     return nAvail;",
          "157:   return nItems;",
          "",
          "[Added Lines]",
          "81: bool FdOutStream::flushBuffer(bool wait)",
          "83:   size_t n = writeWithTimeout((const void*) sentUpTo,",
          "84:                               ptr - sentUpTo,",
          "85:                               (blocking || wait)? timeoutms : 0);",
          "88:   if (n == 0) {",
          "90:     if (!blocking && !wait)",
          "91:       return false;",
          "93:     throw TimedOut();",
          "96:   sentUpTo += n;",
          "98:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FdOutStream.h||common/rdr/FdOutStream.h": [
          "File: common/rdr/FdOutStream.h -> common/rdr/FdOutStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <sys/time.h>",
          "31: namespace rdr {",
          "35:   public:",
          "",
          "[Removed Lines]",
          "29: #include <rdr/OutStream.h>",
          "33:   class FdOutStream : public OutStream {",
          "",
          "[Added Lines]",
          "29: #include <rdr/BufferedOutStream.h>",
          "33:   class FdOutStream : public BufferedOutStream {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     void setBlocking(bool blocking);",
          "42:     int getFd() { return fd; }",
          "49:     unsigned getIdleTime();",
          "51:   private:",
          "53:     size_t writeWithTimeout(const void* data, size_t length, int timeoutms);",
          "54:     int fd;",
          "55:     bool blocking;",
          "56:     int timeoutms;",
          "61:     struct timeval lastWrite;",
          "62:   };",
          "",
          "[Removed Lines]",
          "44:     void flush();",
          "45:     size_t length();",
          "47:     int bufferUsage();",
          "52:     size_t overrun(size_t itemSize, size_t nItems);",
          "57:     size_t bufSize;",
          "58:     size_t offset;",
          "59:     U8* start;",
          "60:     U8* sentUpTo;",
          "",
          "[Added Lines]",
          "47:     virtual bool flushBuffer(bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.cxx||common/rdr/FileInStream.cxx": [
          "File: common/rdr/FileInStream.cxx -> common/rdr/FileInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   file = fopen(fileName, \"rb\");",
          "31:   if (!file)",
          "32:     throw SystemException(\"fopen\", errno);",
          "34: }",
          "36: FileInStream::~FileInStream(void) {",
          "",
          "[Removed Lines]",
          "33:   ptr = end = b;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   }",
          "41: }",
          "52: {",
          "81:   }",
          "89: }",
          "",
          "[Removed Lines]",
          "43: void FileInStream::reset(void) {",
          "44:   if (!file)",
          "45:     throw Exception(\"File is not open\");",
          "46:   if (fseek(file, 0, SEEK_SET) != 0)",
          "47:     throw SystemException(\"fseek\", errno);",
          "48:   ptr = end = b;",
          "49: }",
          "51: size_t FileInStream::pos()",
          "53:   if (!file)",
          "54:     throw Exception(\"File is not open\");",
          "56:   return ftell(file) + ptr - b;",
          "57: }",
          "59: size_t FileInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "60: {",
          "61:   if (itemSize > sizeof(b))",
          "62:     throw Exception(\"FileInStream overrun: max itemSize exceeded\");",
          "64:   if (end - ptr != 0)",
          "65:     memmove(b, ptr, end - ptr);",
          "67:   end -= ptr - b;",
          "68:   ptr = b;",
          "71:   while ((size_t)(end - b) < itemSize) {",
          "72:     size_t n = fread((U8 *)end, b + sizeof(b) - end, 1, file);",
          "73:     if (n == 0) {",
          "74:       if (ferror(file))",
          "75:         throw SystemException(\"fread\", errno);",
          "76:       if (feof(file))",
          "77:         throw EndOfStream();",
          "78:       return 0;",
          "79:     }",
          "80:     end += b + sizeof(b) - end;",
          "83:   size_t nAvail;",
          "84:   nAvail = avail() / itemSize;",
          "85:   if (nAvail < nItems)",
          "86:     return nAvail;",
          "88:   return nItems;",
          "",
          "[Added Lines]",
          "42: bool FileInStream::fillBuffer(size_t maxSize, bool wait)",
          "44:   size_t n = fread((U8 *)end, 1, maxSize, file);",
          "45:   if (n == 0) {",
          "46:     if (ferror(file))",
          "47:       throw SystemException(\"fread\", errno);",
          "48:     if (feof(file))",
          "49:       throw EndOfStream();",
          "50:     return false;",
          "52:   end += n;",
          "54:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/FileInStream.h||common/rdr/FileInStream.h": [
          "File: common/rdr/FileInStream.h -> common/rdr/FileInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdio.h>",
          "27: namespace rdr {",
          "31:   public:",
          "33:     FileInStream(const char *fileName);",
          "34:     ~FileInStream(void);",
          "43:   private:",
          "45:     FILE *file;",
          "46:   };",
          "",
          "[Removed Lines]",
          "25: #include <rdr/InStream.h>",
          "29:   class FileInStream : public InStream {",
          "36:     void reset(void);",
          "38:     size_t pos();",
          "40:   protected:",
          "41:     size_t overrun(size_t itemSize, size_t nItems, bool wait = true);",
          "44:     U8 b[131072];",
          "",
          "[Added Lines]",
          "25: #include <rdr/BufferedInStream.h>",
          "29:   class FileInStream : public BufferedInStream {",
          "36:   private:",
          "37:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.cxx||common/rdr/HexInStream.cxx": [
          "File: common/rdr/HexInStream.cxx -> common/rdr/HexInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: using namespace rdr;",
          "29: static inline int min(int a, int b) {return a<b ? a : b;}",
          "31: HexInStream::HexInStream(InStream& is, size_t bufSize_)",
          "33: {",
          "35: }",
          "37: HexInStream::~HexInStream() {",
          "39: }",
          "",
          "[Removed Lines]",
          "27: const int DEFAULT_BUF_LEN = 16384;",
          "32: : bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_LEN), offset(0), in_stream(is)",
          "34:   ptr = end = start = new U8[bufSize];",
          "38:   delete [] start;",
          "",
          "[Added Lines]",
          "30: : BufferedInStream(bufSize_), in_stream(is)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: }",
          "111:   }",
          "119: }",
          "",
          "[Removed Lines]",
          "79: size_t HexInStream::pos() {",
          "80:   return offset + ptr - start;",
          "81: }",
          "83: size_t HexInStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
          "84:   if (itemSize > bufSize)",
          "85:     throw Exception(\"HexInStream overrun: max itemSize exceeded\");",
          "87:   if (end - ptr != 0)",
          "88:     memmove(start, ptr, end - ptr);",
          "90:   end -= ptr - start;",
          "91:   offset += ptr - start;",
          "92:   ptr = start;",
          "94:   while (avail() < itemSize) {",
          "95:     size_t n = in_stream.check(2, 1, wait);",
          "96:     if (n == 0) return 0;",
          "97:     const U8* iptr = in_stream.getptr();",
          "98:     const U8* eptr = in_stream.getend();",
          "99:     size_t length = min((eptr - iptr)/2, start + bufSize - end);",
          "101:     U8* optr = (U8*) end;",
          "102:     for (size_t i=0; i<length; i++) {",
          "103:       int v = 0;",
          "104:       readHexAndShift(iptr[i*2], &v);",
          "105:       readHexAndShift(iptr[i*2+1], &v);",
          "106:       optr[i] = v;",
          "107:     }",
          "109:     in_stream.setptr(iptr + length*2);",
          "110:     end += length;",
          "113:   size_t nAvail;",
          "114:   nAvail = avail() / itemSize;",
          "115:   if (nAvail < nItems)",
          "116:     return nAvail;",
          "118:   return nItems;",
          "",
          "[Added Lines]",
          "75: bool HexInStream::fillBuffer(size_t maxSize, bool wait) {",
          "76:   if (!in_stream.check(2, 1, wait))",
          "77:     return false;",
          "79:   const U8* iptr = in_stream.getptr();",
          "80:   const U8* eptr = in_stream.getend();",
          "81:   size_t length = min((eptr - iptr)/2, maxSize);",
          "83:   U8* optr = (U8*) end;",
          "84:   for (size_t i=0; i<length; i++) {",
          "85:     int v = 0;",
          "86:     readHexAndShift(iptr[i*2], &v);",
          "87:     readHexAndShift(iptr[i*2+1], &v);",
          "88:     optr[i] = v;",
          "91:   in_stream.setptr(iptr + length*2);",
          "92:   end += length;",
          "94:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/HexInStream.h||common/rdr/HexInStream.h": [
          "File: common/rdr/HexInStream.h -> common/rdr/HexInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #ifndef __RDR_HEX_INSTREAM_H__",
          "20: #define __RDR_HEX_INSTREAM_H__",
          "24: namespace rdr {",
          "27:   public:",
          "29:     HexInStream(InStream& is, size_t bufSize=0);",
          "30:     virtual ~HexInStream();",
          "34:     static bool readHexAndShift(char c, int* v);",
          "35:     static bool hexStrToBin(const char* s, char** data, size_t* length);",
          "40:   private:",
          "45:     InStream& in_stream;",
          "46:   };",
          "",
          "[Removed Lines]",
          "22: #include <rdr/InStream.h>",
          "26:   class HexInStream : public InStream {",
          "32:     size_t pos();",
          "37:   protected:",
          "38:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "41:     size_t bufSize;",
          "42:     U8* start;",
          "43:     size_t offset;",
          "",
          "[Added Lines]",
          "22: #include <rdr/BufferedInStream.h>",
          "26:   class HexInStream : public BufferedInStream {",
          "36:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "38:   private:",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.cxx||common/rdr/RandomStream.cxx": [
          "File: common/rdr/RandomStream.cxx -> common/rdr/RandomStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: using namespace rdr;",
          "40: unsigned int RandomStream::seed;",
          "42: RandomStream::RandomStream()",
          "44: {",
          "47: #ifdef RFB_HAVE_WINCRYPT",
          "48:   provider = 0;",
          "49:   if (!CryptAcquireContext(&provider, 0, 0, PROV_RSA_FULL, 0)) {",
          "",
          "[Removed Lines]",
          "38: const size_t DEFAULT_BUF_LEN = 256;",
          "43:   : offset(0)",
          "45:   ptr = end = start = new U8[DEFAULT_BUF_LEN];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: }",
          "77: RandomStream::~RandomStream() {",
          "80: #ifdef RFB_HAVE_WINCRYPT",
          "81:   if (provider)",
          "82:     CryptReleaseContext(provider, 0);",
          "",
          "[Removed Lines]",
          "78:   delete [] start;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: #endif",
          "87: }",
          "106: #ifdef RFB_HAVE_WINCRYPT",
          "107:   if (provider) {",
          "109:       throw rdr::SystemException(\"unable to CryptGenRandom\", GetLastError());",
          "111:   } else {",
          "112: #else",
          "113: #ifndef WIN32",
          "114:   if (fp) {",
          "117:       throw rdr::SystemException(\"reading /dev/urandom or /dev/random failed\",",
          "118:                                  errno);",
          "120:   } else {",
          "121: #else",
          "122:   {",
          "123: #endif",
          "124: #endif",
          "127:   }",
          "135: }",
          "",
          "[Removed Lines]",
          "89: size_t RandomStream::pos() {",
          "90:   return offset + ptr - start;",
          "91: }",
          "93: size_t RandomStream::overrun(size_t itemSize, size_t nItems, bool wait) {",
          "94:   if (itemSize > DEFAULT_BUF_LEN)",
          "95:     throw Exception(\"RandomStream overrun: max itemSize exceeded\");",
          "97:   if (end - ptr != 0)",
          "98:     memmove(start, ptr, end - ptr);",
          "100:   end -= ptr - start;",
          "101:   offset += ptr - start;",
          "102:   ptr = start;",
          "104:   size_t length = start + DEFAULT_BUF_LEN - end;",
          "108:     if (!CryptGenRandom(provider, length, (U8*)end))",
          "110:     end += length;",
          "115:     size_t n = fread((U8*)end, length, 1, fp);",
          "116:     if (n != 1)",
          "119:     end += length;",
          "125:     for (size_t i=0; i<length; i++)",
          "129:   size_t nAvail;",
          "130:   nAvail = avail() / itemSize;",
          "131:   if (nAvail < nItems)",
          "132:     return nAvail;",
          "134:   return nItems;",
          "",
          "[Added Lines]",
          "82: bool RandomStream::fillBuffer(size_t maxSize, bool wait) {",
          "85:     if (!CryptGenRandom(provider, maxSize, (U8*)end))",
          "87:     end += maxSize;",
          "92:     size_t n = fread((U8*)end, 1, maxSize, fp);",
          "93:     if (n <= 0)",
          "96:     end += n;",
          "102:     for (size_t i=0; i<maxSize; i++)",
          "106:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/RandomStream.h||common/rdr/RandomStream.h": [
          "File: common/rdr/RandomStream.h -> common/rdr/RandomStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define __RDR_RANDOMSTREAM_H__",
          "22: #include <stdio.h>",
          "25: #ifdef WIN32",
          "26: #include <windows.h>",
          "",
          "[Removed Lines]",
          "23: #include <rdr/InStream.h>",
          "",
          "[Added Lines]",
          "23: #include <rdr/BufferedInStream.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: namespace rdr {",
          "37:   public:",
          "39:     RandomStream();",
          "40:     virtual ~RandomStream();",
          "47:   private:",
          "51:     static unsigned int seed;",
          "52: #ifdef RFB_HAVE_WINCRYPT",
          "53:     HCRYPTPROV provider;",
          "",
          "[Removed Lines]",
          "35:   class RandomStream : public InStream {",
          "42:     size_t pos();",
          "44:   protected:",
          "45:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "48:     U8* start;",
          "49:     size_t offset;",
          "",
          "[Added Lines]",
          "35:   class RandomStream : public BufferedInStream {",
          "43:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "45:   private:",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.cxx||common/rdr/TLSInStream.cxx": [
          "File: common/rdr/TLSInStream.cxx -> common/rdr/TLSInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #ifdef HAVE_GNUTLS",
          "31: using namespace rdr;",
          "35: ssize_t TLSInStream::pull(gnutls_transport_ptr_t str, void* data, size_t size)",
          "36: {",
          "37:   TLSInStream* self= (TLSInStream*) str;",
          "",
          "[Removed Lines]",
          "33: enum { DEFAULT_BUF_SIZE = 16384 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:       return -1;",
          "44:     }",
          "49:     in->readBytes(data, size);",
          "",
          "[Removed Lines]",
          "46:     if ((size_t)(in->getend() - in->getptr()) < size)",
          "47:       size = in->getend() - in->getptr();",
          "",
          "[Added Lines]",
          "44:     if (in->avail() < size)",
          "45:       size = in->avail();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: }",
          "59: TLSInStream::TLSInStream(InStream* _in, gnutls_session_t _session)",
          "61: {",
          "62:   gnutls_transport_ptr_t recv, send;",
          "66:   gnutls_transport_set_pull_function(session, pull);",
          "67:   gnutls_transport_get_ptr2(session, &recv, &send);",
          "68:   gnutls_transport_set_ptr2(session, this, send);",
          "",
          "[Removed Lines]",
          "60:   : session(_session), in(_in), bufSize(DEFAULT_BUF_SIZE), offset(0)",
          "64:   ptr = end = start = new U8[bufSize];",
          "",
          "[Added Lines]",
          "58:   : session(_session), in(_in)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71: TLSInStream::~TLSInStream()",
          "72: {",
          "73:   gnutls_transport_set_pull_function(session, NULL);",
          "81: }",
          "84: {",
          "108: }",
          "110: size_t TLSInStream::readTLS(U8* buf, size_t len, bool wait)",
          "",
          "[Removed Lines]",
          "75:   delete[] start;",
          "76: }",
          "78: size_t TLSInStream::pos()",
          "79: {",
          "80:   return offset + ptr - start;",
          "83: size_t TLSInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "85:   if (itemSize > bufSize)",
          "86:     throw Exception(\"TLSInStream overrun: max itemSize exceeded\");",
          "88:   if (end - ptr != 0)",
          "89:     memmove(start, ptr, end - ptr);",
          "91:   offset += ptr - start;",
          "92:   end -= ptr - start;",
          "93:   ptr = start;",
          "95:   while ((size_t)(end - start) < itemSize) {",
          "96:     size_t n = readTLS((U8*) end, start + bufSize - end, wait);",
          "97:     if (!wait && n == 0)",
          "98:       return 0;",
          "99:     end += n;",
          "100:   }",
          "102:   size_t nAvail;",
          "103:   nAvail = avail() / itemSize;",
          "104:   if (nAvail < nItems)",
          "105:     return nAvail;",
          "107:   return nItems;",
          "",
          "[Added Lines]",
          "72: bool TLSInStream::fillBuffer(size_t maxSize, bool wait)",
          "74:   size_t n = readTLS((U8*) end, maxSize, wait);",
          "75:   if (!wait && n == 0)",
          "76:     return false;",
          "77:   end += n;",
          "79:   return true;",
          "",
          "---------------"
        ],
        "common/rdr/TLSInStream.h||common/rdr/TLSInStream.h": [
          "File: common/rdr/TLSInStream.h -> common/rdr/TLSInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #ifdef HAVE_GNUTLS",
          "29: #include <gnutls/gnutls.h>",
          "32: namespace rdr {",
          "35:   public:",
          "36:     TLSInStream(InStream* in, gnutls_session_t session);",
          "37:     virtual ~TLSInStream();",
          "41:   private:",
          "43:     size_t readTLS(U8* buf, size_t len, bool wait);",
          "44:     static ssize_t pull(gnutls_transport_ptr_t str, void* data, size_t size);",
          "46:     gnutls_session_t session;",
          "47:     InStream* in;",
          "51:   };",
          "52: };",
          "",
          "[Removed Lines]",
          "30: #include <rdr/InStream.h>",
          "34:   class TLSInStream : public InStream {",
          "39:     size_t pos();",
          "42:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "48:     size_t bufSize;",
          "49:     size_t offset;",
          "50:     U8* start;",
          "",
          "[Added Lines]",
          "30: #include <rdr/BufferedInStream.h>",
          "34:   class TLSInStream : public BufferedInStream {",
          "40:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.cxx||common/rdr/ZlibInStream.cxx": [
          "File: common/rdr/ZlibInStream.cxx -> common/rdr/ZlibInStream.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: using namespace rdr;",
          "29: ZlibInStream::ZlibInStream(size_t bufSize_)",
          "32: {",
          "34:   init();",
          "35: }",
          "37: ZlibInStream::~ZlibInStream()",
          "38: {",
          "39:   deinit();",
          "41: }",
          "43: void ZlibInStream::setUnderlying(InStream* is, size_t bytesIn_)",
          "44: {",
          "45:   underlying = is;",
          "46:   bytesIn = bytesIn_;",
          "53: }",
          "55: void ZlibInStream::flushUnderlying()",
          "56: {",
          "59:   while (bytesIn > 0) {",
          "62:   }",
          "64:   setUnderlying(NULL, 0);",
          "",
          "[Removed Lines]",
          "27: enum { DEFAULT_BUF_SIZE = 16384 };",
          "30:   : underlying(0), bufSize(bufSize_ ? bufSize_ : DEFAULT_BUF_SIZE), offset(0),",
          "31:     zs(NULL), bytesIn(0)",
          "33:   ptr = end = start = new U8[bufSize];",
          "40:   delete [] start;",
          "47:   ptr = end = start;",
          "48: }",
          "50: size_t ZlibInStream::pos()",
          "51: {",
          "52:   return offset + ptr - start;",
          "57:   ptr = end = start;",
          "60:     decompress(true);",
          "61:     end = start; // throw away any data",
          "",
          "[Added Lines]",
          "28:   : BufferedInStream(bufSize_),",
          "29:     underlying(0), zs(NULL), bytesIn(0)",
          "43:   skip(avail());",
          "49:     if (!check(1))",
          "50:       throw Exception(\"ZlibInStream: failed to flush remaining stream data\");",
          "51:     skip(avail());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   zs = NULL;",
          "97: }",
          "129: {",
          "130:   if (!underlying)",
          "131:     throw Exception(\"ZlibInStream overrun: no underlying stream\");",
          "133:   zs->next_out = (U8*)end;",
          "136:   size_t n = underlying->check(1, 1, wait);",
          "137:   if (n == 0) return false;",
          "",
          "[Removed Lines]",
          "99: size_t ZlibInStream::overrun(size_t itemSize, size_t nItems, bool wait)",
          "100: {",
          "101:   if (itemSize > bufSize)",
          "102:     throw Exception(\"ZlibInStream overrun: max itemSize exceeded\");",
          "104:   if (end - ptr != 0)",
          "105:     memmove(start, ptr, end - ptr);",
          "107:   offset += ptr - start;",
          "108:   end -= ptr - start;",
          "109:   ptr = start;",
          "111:   while (avail() < itemSize) {",
          "112:     if (!decompress(wait))",
          "113:       return 0;",
          "114:   }",
          "116:   size_t nAvail;",
          "117:   nAvail = avail() / itemSize;",
          "118:   if (nAvail < nItems)",
          "119:     return nAvail;",
          "121:   return nItems;",
          "122: }",
          "128: bool ZlibInStream::decompress(bool wait)",
          "134:   zs->avail_out = start + bufSize - end;",
          "",
          "[Added Lines]",
          "89: bool ZlibInStream::fillBuffer(size_t maxSize, bool wait)",
          "95:   zs->avail_out = maxSize;",
          "",
          "---------------"
        ],
        "common/rdr/ZlibInStream.h||common/rdr/ZlibInStream.h": [
          "File: common/rdr/ZlibInStream.h -> common/rdr/ZlibInStream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef __RDR_ZLIBINSTREAM_H__",
          "25: #define __RDR_ZLIBINSTREAM_H__",
          "29: struct z_stream_s;",
          "31: namespace rdr {",
          "35:   public:",
          "37:     ZlibInStream(size_t bufSize=0);",
          "38:     virtual ~ZlibInStream();",
          "40:     void setUnderlying(InStream* is, size_t bytesIn);",
          "41:     void flushUnderlying();",
          "43:     void reset();",
          "45:   private:",
          "47:     void init();",
          "48:     void deinit();",
          "53:     InStream* underlying;",
          "56:     z_stream_s* zs;",
          "57:     size_t bytesIn;",
          "59:   };",
          "61: } // end of namespace rdr",
          "",
          "[Removed Lines]",
          "27: #include <rdr/InStream.h>",
          "33:   class ZlibInStream : public InStream {",
          "42:     size_t pos();",
          "50:     size_t overrun(size_t itemSize, size_t nItems, bool wait);",
          "51:     bool decompress(bool wait);",
          "54:     size_t bufSize;",
          "55:     size_t offset;",
          "58:     U8* start;",
          "",
          "[Added Lines]",
          "27: #include <rdr/BufferedInStream.h>",
          "33:   class ZlibInStream : public BufferedInStream {",
          "47:     virtual bool fillBuffer(size_t maxSize, bool wait);",
          "49:   private:",
          "",
          "---------------"
        ]
      }
    }
  ]
}