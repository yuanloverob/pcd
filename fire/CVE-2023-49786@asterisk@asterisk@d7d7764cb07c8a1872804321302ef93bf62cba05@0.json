{
  "cve_id": "CVE-2023-49786",
  "cve_desc": "Asterisk is an open source private branch exchange and telephony toolkit. In Asterisk prior to versions 18.20.1, 20.5.1, and 21.0.1; as well as certified-asterisk prior to 18.9-cert6; Asterisk is susceptible to a DoS due to a race condition in the hello handshake phase of the DTLS protocol when handling DTLS-SRTP for media setup. This attack can be done continuously, thus denying new DTLS-SRTP encrypted calls during the attack. Abuse of this vulnerability may lead to a massive Denial of Service on vulnerable Asterisk servers for calls that rely on DTLS-SRTP. Commit d7d7764cb07c8a1872804321302ef93bf62cba05 contains a fix, which is part of versions 18.20.1, 20.5.1, 21.0.1, amd 18.9-cert6.",
  "repo": "asterisk/asterisk",
  "patch_hash": "d7d7764cb07c8a1872804321302ef93bf62cba05",
  "patch_info": {
    "commit_hash": "d7d7764cb07c8a1872804321302ef93bf62cba05",
    "repo": "asterisk/asterisk",
    "commit_url": "https://github.com/asterisk/asterisk/commit/d7d7764cb07c8a1872804321302ef93bf62cba05",
    "files": [
      "res/res_rtp_asterisk.c"
    ],
    "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
    "before_after_code_files": [
      "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
    ]
  },
  "patch_diff": {
    "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
      "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3208:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3217:   if (rtp->ice) {",
      "3218:    int pass_src_check = 0;",
      "3219:    struct ao2_iterator i;",
      "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
      "3221:    int cand_cnt = 0;",
      "3234:    if (!rtp->ice_media_started) {",
      "3235:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
      "3236:      ast_rtp_instance_get_channel_id(instance),",
      "3237:      ast_sockaddr_stringify(sa));",
      "3238:     return 0;",
      "3239:    }",
      "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
      "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
      "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
      "3248:     ao2_ref(candidate, -1);",
      "3249:     if (res == 0) {",
      "3250:      pass_src_check = 1;",
      "3251:      break;",
      "3252:     }",
      "3253:     cand_cnt++;",
      "3254:    }",
      "3255:    ao2_iterator_destroy(&i);",
      "3257:    if (!pass_src_check) {",
      "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
      "3259:      ast_rtp_instance_get_channel_id(instance),",
      "3260:      ast_sockaddr_stringify(sa));",
      "3261:     return 0;",
      "3262:    }",
      "3263:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c3ececb12d82ee5d63adad6b9f9e79ad239e803",
      "candidate_info": {
        "commit_hash": "8c3ececb12d82ee5d63adad6b9f9e79ad239e803",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/8c3ececb12d82ee5d63adad6b9f9e79ad239e803",
        "files": [
          "include/asterisk/res_pjproject.h",
          "res/res_pjproject.c",
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk: Fix regression issues with DTLS client check\n\n* Since ICE candidates are used for the check and pjproject is\n  required to use ICE, res_rtp_asterisk was failing to compile\n  when pjproject wasn't available.  The check is now wrapped\n  with an #ifdef HAVE_PJPROJECT.\n\n* The rtp->ice_active_remote_candidates container was being\n  used to check the address on incoming packets but that\n  container doesn't contain peer reflexive candidates discovered\n  during negotiation. This was causing the check to fail\n  where it shouldn't.  We now check against pjproject's\n  real_ice->rcand array which will contain those candidates.\n\n* Also fixed a bug in ast_sockaddr_from_pj_sockaddr() where\n  we weren't zeroing out sin->sin_zero before returning.  This\n  was causing ast_sockaddr_cmp() to always return false when\n  one of the inputs was converted from a pj_sockaddr, even\n  if both inputs had the same address and port.\n\nResolves: #500\nResolves: #503\nResolves: #505",
        "before_after_code_files": [
          "include/asterisk/res_pjproject.h||include/asterisk/res_pjproject.h",
          "res/res_pjproject.c||res/res_pjproject.c",
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "include/asterisk/res_pjproject.h||include/asterisk/res_pjproject.h": [
          "File: include/asterisk/res_pjproject.h -> include/asterisk/res_pjproject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: int ast_sockaddr_from_pj_sockaddr(struct ast_sockaddr *addr, const pj_sockaddr *pjaddr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: int ast_sockaddr_pj_sockaddr_cmp(const struct ast_sockaddr *addr,",
          "129:  const pj_sockaddr *pjaddr);",
          "",
          "---------------"
        ],
        "res/res_pjproject.c||res/res_pjproject.c": [
          "File: res/res_pjproject.c -> res/res_pjproject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sin->sin_addr.s_addr = pjaddr->ipv4.sin_addr.s_addr;",
          "523: #endif",
          "524:   sin->sin_port   = pjaddr->ipv4.sin_port;",
          "525:   addr->len = sizeof(struct sockaddr_in);",
          "526:  } else if (pjaddr->addr.sa_family == pj_AF_INET6()) {",
          "527:   struct sockaddr_in6 *sin = (struct sockaddr_in6 *) &addr->ss;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:   memset(sin->sin_zero, 0, sizeof(sin->sin_zero));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:  return 0;",
          "539: }",
          "541: #ifdef TEST_FRAMEWORK",
          "542: static void fill_with_garbage(void *x, ssize_t len)",
          "543: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542: int ast_sockaddr_pj_sockaddr_cmp(const struct ast_sockaddr *addr,",
          "543:  const pj_sockaddr *pjaddr)",
          "544: {",
          "545:  struct ast_sockaddr temp_pjaddr;",
          "546:  int rc = 0;",
          "548:  rc = ast_sockaddr_from_pj_sockaddr(&temp_pjaddr, pjaddr);",
          "549:  if (rc != 0) {",
          "550:   return -1;",
          "551:  }",
          "553:  rc = ast_sockaddr_cmp(addr, &temp_pjaddr);",
          "554:  if (DEBUG_ATLEAST(4)) {",
          "555:   char *a_str = ast_strdupa(ast_sockaddr_stringify(addr));",
          "556:   char *pj_str = ast_strdupa(ast_sockaddr_stringify(&temp_pjaddr));",
          "557:   ast_debug(4, \"Comparing %s -> %s  rc: %d\\n\", a_str, pj_str, rc);",
          "558:  }",
          "560:  return rc;",
          "561: }",
          "",
          "---------------"
        ],
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3217:   if (rtp->ice) {",
          "3218:    int pass_src_check = 0;",
          "",
          "[Removed Lines]",
          "3219:    struct ao2_iterator i;",
          "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3221:    int cand_cnt = 0;",
          "",
          "[Added Lines]",
          "3217: #ifdef HAVE_PJPROJECT",
          "3220:    int ix = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3239:    }",
          "3250:      pass_src_check = 1;",
          "3251:      break;",
          "3252:     }",
          "3254:    }",
          "3257:    if (!pass_src_check) {",
          "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "",
          "[Removed Lines]",
          "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3248:     ao2_ref(candidate, -1);",
          "3249:     if (res == 0) {",
          "3253:     cand_cnt++;",
          "3255:    ao2_iterator_destroy(&i);",
          "",
          "[Added Lines]",
          "3246:    for (ix = 0; ix < rtp->ice->real_ice->rcand_cnt; ix++) {",
          "3247:     pj_ice_sess_cand *rcand = &rtp->ice->real_ice->rcand[ix];",
          "3248:     if (ast_sockaddr_pj_sockaddr_cmp(sa, &rcand->addr) == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3261:     return 0;",
          "3262:    }",
          "3263:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3261: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04658ddcde1edda1cadbdad47523eb40665b2977",
      "candidate_info": {
        "commit_hash": "04658ddcde1edda1cadbdad47523eb40665b2977",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/04658ddcde1edda1cadbdad47523eb40665b2977",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3208:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3217:   if (rtp->ice) {",
          "3218:    int pass_src_check = 0;",
          "3219:    struct ao2_iterator i;",
          "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3221:    int cand_cnt = 0;",
          "3234:    if (!rtp->ice_media_started) {",
          "3235:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3236:      ast_rtp_instance_get_channel_id(instance),",
          "3237:      ast_sockaddr_stringify(sa));",
          "3238:     return 0;",
          "3239:    }",
          "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3248:     ao2_ref(candidate, -1);",
          "3249:     if (res == 0) {",
          "3250:      pass_src_check = 1;",
          "3251:      break;",
          "3252:     }",
          "3253:     cand_cnt++;",
          "3254:    }",
          "3255:    ao2_iterator_destroy(&i);",
          "3257:    if (!pass_src_check) {",
          "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3259:      ast_rtp_instance_get_channel_id(instance),",
          "3260:      ast_sockaddr_stringify(sa));",
          "3261:     return 0;",
          "3262:    }",
          "3263:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b6636217363897bb9cb5cf0f204c8dd3a3ec471",
      "candidate_info": {
        "commit_hash": "2b6636217363897bb9cb5cf0f204c8dd3a3ec471",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/2b6636217363897bb9cb5cf0f204c8dd3a3ec471",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3138:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3147:   if (rtp->ice) {",
          "3148:    int pass_src_check = 0;",
          "3149:    struct ao2_iterator i;",
          "3150:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3151:    int cand_cnt = 0;",
          "3164:    if (!rtp->ice_media_started) {",
          "3165:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3166:      ast_rtp_instance_get_channel_id(instance),",
          "3167:      ast_sockaddr_stringify(sa));",
          "3168:     return 0;",
          "3169:    }",
          "3175:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3176:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3177:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3178:     ao2_ref(candidate, -1);",
          "3179:     if (res == 0) {",
          "3180:      pass_src_check = 1;",
          "3181:      break;",
          "3182:     }",
          "3183:     cand_cnt++;",
          "3184:    }",
          "3185:    ao2_iterator_destroy(&i);",
          "3187:    if (!pass_src_check) {",
          "3188:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3189:      ast_rtp_instance_get_channel_id(instance),",
          "3190:      ast_sockaddr_stringify(sa));",
          "3191:     return 0;",
          "3192:    }",
          "3193:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9ebccf0645408f31e5dc0e2677116177c5f8dd0",
      "candidate_info": {
        "commit_hash": "b9ebccf0645408f31e5dc0e2677116177c5f8dd0",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/b9ebccf0645408f31e5dc0e2677116177c5f8dd0",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3208:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3217:   if (rtp->ice) {",
          "3218:    int pass_src_check = 0;",
          "3219:    struct ao2_iterator i;",
          "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3221:    int cand_cnt = 0;",
          "3234:    if (!rtp->ice_media_started) {",
          "3235:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3236:      ast_rtp_instance_get_channel_id(instance),",
          "3237:      ast_sockaddr_stringify(sa));",
          "3238:     return 0;",
          "3239:    }",
          "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3248:     ao2_ref(candidate, -1);",
          "3249:     if (res == 0) {",
          "3250:      pass_src_check = 1;",
          "3251:      break;",
          "3252:     }",
          "3253:     cand_cnt++;",
          "3254:    }",
          "3255:    ao2_iterator_destroy(&i);",
          "3257:    if (!pass_src_check) {",
          "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3259:      ast_rtp_instance_get_channel_id(instance),",
          "3260:      ast_sockaddr_stringify(sa));",
          "3261:     return 0;",
          "3262:    }",
          "3263:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46cc258abec72c592c8287d3ae64774e67f1072",
      "candidate_info": {
        "commit_hash": "e46cc258abec72c592c8287d3ae64774e67f1072",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/e46cc258abec72c592c8287d3ae64774e67f1072",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3180:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3189:   if (rtp->ice) {",
          "3190:    int pass_src_check = 0;",
          "3191:    struct ao2_iterator i;",
          "3192:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3193:    int cand_cnt = 0;",
          "3206:    if (!rtp->ice_media_started) {",
          "3207:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3208:      ast_rtp_instance_get_channel_id(instance),",
          "3209:      ast_sockaddr_stringify(sa));",
          "3210:     return 0;",
          "3211:    }",
          "3217:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3218:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3219:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3220:     ao2_ref(candidate, -1);",
          "3221:     if (res == 0) {",
          "3222:      pass_src_check = 1;",
          "3223:      break;",
          "3224:     }",
          "3225:     cand_cnt++;",
          "3226:    }",
          "3227:    ao2_iterator_destroy(&i);",
          "3229:    if (!pass_src_check) {",
          "3230:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3231:      ast_rtp_instance_get_channel_id(instance),",
          "3232:      ast_sockaddr_stringify(sa));",
          "3233:     return 0;",
          "3234:    }",
          "3235:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}