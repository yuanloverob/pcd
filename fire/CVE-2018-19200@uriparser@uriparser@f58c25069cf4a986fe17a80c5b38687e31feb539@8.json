{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4bd840d25da9c2aae1e57a793e70c65be6ef4648",
      "candidate_info": {
        "commit_hash": "4bd840d25da9c2aae1e57a793e70c65be6ef4648",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/4bd840d25da9c2aae1e57a793e70c65be6ef4648",
        "files": [
          "src/UriParse.c",
          "test/test.cpp"
        ],
        "message": "UriParse.c: Make ParseSingleUriEx de-NULL afterLast",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c",
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2189: int URI_FUNC(ParseSingleUri)(URI_TYPE(Uri) * uri, const URI_CHAR * text,",
          "2190:   const URI_CHAR ** errorPos) {",
          "2196: }",
          "",
          "[Removed Lines]",
          "2191:  if (text == NULL) {",
          "2192:   return URI_ERROR_NULL;",
          "2193:  }",
          "2194:  return URI_FUNC(ParseSingleUriEx)(uri, text, text + URI_STRLEN(text),",
          "2195:    errorPos);",
          "",
          "[Added Lines]",
          "2191:  return URI_FUNC(ParseSingleUriEx)(uri, text, NULL, errorPos);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2200: int URI_FUNC(ParseSingleUriEx)(URI_TYPE(Uri) * uri,",
          "2201:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2202:   const URI_CHAR ** errorPos) {",
          "2203:  return URI_FUNC(ParseSingleUriExMm)(uri, first, afterLast, errorPos, NULL);",
          "2204: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2199:     if ((afterLast == NULL) && (first != NULL)) {",
          "2200:   afterLast = first + URI_STRLEN(first);",
          "2201:  }",
          "",
          "---------------"
        ],
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2073: TEST(UriParseSingleSuite, ErrorNullAfterLastDetected) {",
          "2074:  UriUriA uri;",
          "2079: }",
          "2081: TEST(UriParseSingleSuite, ErrorNullMemoryManagerDetected) {",
          "",
          "[Removed Lines]",
          "2075:  const char * errorPos;",
          "2077:  EXPECT_EQ(uriParseSingleUriExA(&uri, \"foo\", NULL, &errorPos),",
          "2078:    URI_ERROR_NULL);",
          "",
          "[Added Lines]",
          "2076:  EXPECT_EQ(uriParseSingleUriExA(&uri, \"foo\", NULL, NULL), URI_SUCCESS);",
          "2078:  uriFreeUriMembersA(&uri);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29dbad8520f54d9fa35d6aa7557307ddb4a3920a",
      "candidate_info": {
        "commit_hash": "29dbad8520f54d9fa35d6aa7557307ddb4a3920a",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/29dbad8520f54d9fa35d6aa7557307ddb4a3920a",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to OnExitOwnHost2",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "188: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "192: static UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "193: static UriBool URI_FUNC(OnExitSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "",
          "[Removed Lines]",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first);",
          "",
          "[Added Lines]",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "977: static URI_INLINE UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "",
          "[Added Lines]",
          "977: static URI_INLINE UriBool URI_FUNC(OnExitOwnHost2)(",
          "978:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "979:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1002: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "1003:  if (first >= afterLast) {",
          "1005:    URI_FUNC(StopMalloc)(state);",
          "1006:    return NULL;",
          "1007:   }",
          "",
          "[Removed Lines]",
          "1004:   if (!URI_FUNC(OnExitOwnHost2)(state, first)) {",
          "",
          "[Added Lines]",
          "1006:   if (!URI_FUNC(OnExitOwnHost2)(state, first, memory)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037:   }",
          "1039:  default:",
          "1041:    URI_FUNC(StopMalloc)(state);",
          "1042:    return NULL;",
          "1043:   }",
          "",
          "[Removed Lines]",
          "1040:   if (!URI_FUNC(OnExitOwnHost2)(state, first)) {",
          "",
          "[Added Lines]",
          "1042:   if (!URI_FUNC(OnExitOwnHost2)(state, first, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c83f33e5412027dd3b2d5ecf91a1cf577624f46",
      "candidate_info": {
        "commit_hash": "9c83f33e5412027dd3b2d5ecf91a1cf577624f46",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/9c83f33e5412027dd3b2d5ecf91a1cf577624f46",
        "files": [
          "ChangeLog",
          "include/uriparser/Uri.h",
          "src/UriParse.c"
        ],
        "message": "Unexpose ParseUriExMm (was not exposed in any prior public release)",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241: int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "242:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "243:   UriMemoryManager * memory);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: static void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state, const URI_CHAR * errorPos, UriMemoryManager * memory);",
          "204: static void URI_FUNC(StopMalloc)(URI_TYPE(ParserState) * state, UriMemoryManager * memory);",
          "208: static URI_INLINE void URI_FUNC(StopSyntax)(URI_TYPE(ParserState) * state,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: static int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "207:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "208:   UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2149:   const URI_CHAR * first, const URI_CHAR * afterLast,",
          "2150:   UriMemoryManager * memory) {",
          "2151:  const URI_CHAR * afterUriReference;",
          "",
          "[Removed Lines]",
          "2148: int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "",
          "[Added Lines]",
          "2152: static int URI_FUNC(ParseUriExMm)(URI_TYPE(ParserState) * state,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b342356bf3e53d719f31c77e7bcf4ab6a456fcd5",
      "candidate_info": {
        "commit_hash": "b342356bf3e53d719f31c77e7bcf4ab6a456fcd5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b342356bf3e53d719f31c77e7bcf4ab6a456fcd5",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriQuery.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function ComposeQueryMallocExMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriQuery.c||src/UriQuery.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844: int URI_FUNC(ComposeQueryMallocExMm)(URI_CHAR ** dest,",
          "845:   const URI_TYPE(QueryList) * queryList,",
          "846:   UriBool spaceToPlus, UriBool normalizeBreaks,",
          "847:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: int URI_FUNC(ComposeQueryMallocEx)(URI_CHAR ** dest,",
          "152:   const URI_TYPE(QueryList) * queryList,",
          "153:   UriBool spaceToPlus, UriBool normalizeBreaks) {",
          "155:  int charsRequired;",
          "156:  int res;",
          "157:  URI_CHAR * queryString;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:  return URI_FUNC(ComposeQueryMallocExMm)(dest, queryList, spaceToPlus,",
          "155:    normalizeBreaks, NULL);",
          "156: }",
          "160: int URI_FUNC(ComposeQueryMallocExMm)(URI_CHAR ** dest,",
          "161:   const URI_TYPE(QueryList) * queryList,",
          "162:   UriBool spaceToPlus, UriBool normalizeBreaks,",
          "163:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: TEST(FailingMemoryManagerSuite, FreeQueryListMm) {",
          "158:  UriQueryListA * const queryList = parseQueryList(\"k1=v1\");",
          "159:  FailingMemoryManager failingMemoryManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: TEST(FailingMemoryManagerSuite, ComposeQueryMallocExMm) {",
          "158:  char * dest = NULL;",
          "159:  UriQueryListA * const queryList = parseQueryList(\"k1=v1\");",
          "160:  UriBool spaceToPlus = URI_TRUE;  // not of interest",
          "161:  UriBool normalizeBreaks = URI_TRUE;  // not of interest",
          "162:  FailingMemoryManager failingMemoryManager;",
          "164:  ASSERT_EQ(uriComposeQueryMallocExMmA(&dest, queryList,",
          "165:    spaceToPlus, normalizeBreaks, &failingMemoryManager),",
          "166:    URI_ERROR_MALLOC);",
          "168:  uriFreeQueryListA(queryList);",
          "169: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "553785ae5c08faeda4e8a9f0001a799b43c13199",
      "candidate_info": {
        "commit_hash": "553785ae5c08faeda4e8a9f0001a799b43c13199",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/553785ae5c08faeda4e8a9f0001a799b43c13199",
        "files": [
          "src/UriQuery.c"
        ],
        "message": "UriQuery.c: Resolve remaining internal calls to plain FreeQueryList",
        "before_after_code_files": [
          "src/UriQuery.c||src/UriQuery.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:      == URI_FALSE) {",
          "444:     return URI_ERROR_MALLOC;",
          "445:    }",
          "",
          "[Removed Lines]",
          "443:     URI_FUNC(FreeQueryList)(*dest);",
          "",
          "[Added Lines]",
          "443:     URI_FUNC(FreeQueryListMm)(*dest, memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489:    == URI_FALSE) {",
          "493:   return URI_ERROR_MALLOC;",
          "494:  }",
          "",
          "[Removed Lines]",
          "492:   URI_FUNC(FreeQueryList)(*dest);",
          "",
          "[Added Lines]",
          "492:   URI_FUNC(FreeQueryListMm)(*dest, memory);",
          "",
          "---------------"
        ]
      }
    }
  ]
}