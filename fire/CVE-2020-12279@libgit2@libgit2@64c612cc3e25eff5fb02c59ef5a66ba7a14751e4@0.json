{
  "cve_id": "CVE-2020-12279",
  "cve_desc": "An issue was discovered in libgit2 before 0.28.4 and 0.9x before 0.99.0. checkout.c mishandles equivalent filenames that exist because of NTFS short names. This may allow remote code execution when cloning a repository. This issue is similar to CVE-2019-1353.",
  "repo": "libgit2/libgit2",
  "patch_hash": "64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
  "patch_info": {
    "commit_hash": "64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
    "files": [
      "src/checkout.c",
      "tests/checkout/nasty.c"
    ],
    "message": "Protect against 8.3 \"short name\" attacks also on Linux/macOS\n\nThe Windows Subsystem for Linux (WSL) is getting increasingly popular,\nin particular because it makes it _so_ easy to run Linux software on\nWindows' files, via the auto-mounted Windows drives (`C:\\` is mapped to\n`/mnt/c/`, no need to set that up manually).\n\nUnfortunately, files/directories on the Windows drives can be accessed\nvia their _short names_, if that feature is enabled (which it is on the\n`C:` drive by default).\n\nWhich means that we have to safeguard even our Linux users against the\nshort name attacks.\n\nFurther, while the default options of CIFS/SMB-mounts seem to disallow\naccessing files on network shares via their short names on Linux/macOS,\nit _is_ possible to do so with the right options.\n\nSo let's just safe-guard against short name attacks _everywhere_.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
    "before_after_code_files": [
      "src/checkout.c||src/checkout.c",
      "tests/checkout/nasty.c||tests/checkout/nasty.c"
    ]
  },
  "patch_diff": {
    "src/checkout.c||src/checkout.c": [
      "File: src/checkout.c -> src/checkout.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1271:  int action,",
      "1272:  git_diff_delta *delta)",
      "1273: {",
      "1276:  if (action & CHECKOUT_ACTION__REMOVE) {",
      "1277:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
      "",
      "[Removed Lines]",
      "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
      "",
      "[Added Lines]",
      "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
      "",
      "---------------"
    ],
    "tests/checkout/nasty.c||tests/checkout/nasty.c": [
      "File: tests/checkout/nasty.c -> tests/checkout/nasty.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: void test_checkout_nasty__git_tilde1(void)",
      "208: {",
      "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \".git/foobar\");",
      "212: }",
      "",
      "[Removed Lines]",
      "209: #ifdef GIT_WIN32",
      "211: #endif",
      "",
      "[Added Lines]",
      "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \"git~1/foobar\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14ff3516e5f4203838a0edb044c6622b8e3a3755",
      "candidate_info": {
        "commit_hash": "14ff3516e5f4203838a0edb044c6622b8e3a3755",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/14ff3516e5f4203838a0edb044c6622b8e3a3755",
        "files": [
          "src/path.c",
          "tests/path/core.c"
        ],
        "message": "path: support non-ascii drive letters on dos\n\nWindows/DOS only supports drive letters that are alpha characters A-Z.\nHowever, you can `subst` any one-character as a drive letter, including\nnumbers or even emoji.  Test that we can identify emoji as drive\nletters.",
        "before_after_code_files": [
          "src/path.c||src/path.c",
          "tests/path/core.c||tests/path/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <stdio.h>",
          "22: #include <ctype.h>",
          "26: #ifdef GIT_WIN32",
          "27: static bool looks_like_network_computer_name(const char *path, int pos)",
          "",
          "[Removed Lines]",
          "24: #define LOOKS_LIKE_DRIVE_PREFIX(S) (git__isalpha((S)[0]) && (S)[1] == ':')",
          "",
          "[Added Lines]",
          "24: static int dos_drive_prefix_length(const char *path)",
          "25: {",
          "26:  int i;",
          "32:  if (!(0x80 & (unsigned char)*path))",
          "33:   return *path && path[1] == ':' ? 2 : 0;",
          "43:  for (i = 1; i < 4 && (0x80 & (unsigned char)path[i]); i++)",
          "45:  return path[i] == ':' ? i + 1 : 0;",
          "46: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  GIT_UNUSED(len);",
          "124: #else",
          "",
          "[Removed Lines]",
          "129:  if (len == 2 && LOOKS_LIKE_DRIVE_PREFIX(path))",
          "130:   return 2;",
          "",
          "[Added Lines]",
          "151:  if (dos_drive_prefix_length(path) == len)",
          "152:   return len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273: int git_path_root(const char *path)",
          "274: {",
          "281: #ifdef GIT_WIN32",
          "",
          "[Removed Lines]",
          "275:  int offset = 0;",
          "278:  if (LOOKS_LIKE_DRIVE_PREFIX(path))",
          "279:   offset += 2;",
          "",
          "[Added Lines]",
          "297:  int offset = 0, prefix_len;",
          "300:  if ((prefix_len = dos_drive_prefix_length(path)))",
          "301:   offset += prefix_len;",
          "",
          "---------------"
        ],
        "tests/path/core.c||tests/path/core.c": [
          "File: tests/path/core.c -> tests/path/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  git_buf_dispose(&out);",
          "364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: void test_path_core__join_unrooted_respects_funny_windows_roots(void)",
          "367: {",
          "368:  test_join_unrooted(\"\ud83d\udca9:/foo/bar/foobar\", 9, \"bar/foobar\", \"\ud83d\udca9:/foo\");",
          "369:  test_join_unrooted(\"\ud83d\udca9:/foo/bar/foobar\", 13, \"foobar\", \"\ud83d\udca9:/foo/bar\");",
          "370:  test_join_unrooted(\"\ud83d\udca9:/foo\", 5, \"\ud83d\udca9:/foo\", \"\ud83d\udca9:/asdf\");",
          "371:  test_join_unrooted(\"\ud83d\udca9:/foo/bar\", 5, \"\ud83d\udca9:/foo/bar\", \"\ud83d\udca9:/asdf\");",
          "372:  test_join_unrooted(\"\ud83d\udca9:/foo/bar/foobar\", 9, \"\ud83d\udca9:/foo/bar/foobar\", \"\ud83d\udca9:/foo\");",
          "373:  test_join_unrooted(\"\ud83d\udca9:/foo/bar/foobar\", 13, \"\ud83d\udca9:/foo/bar/foobar\", \"\ud83d\udca9:/foo/bar\");",
          "374:  test_join_unrooted(\"\ud83d\udca9:/foo/bar/foobar\", 9, \"\ud83d\udca9:/foo/bar/foobar\", \"\ud83d\udca9:/foo/\");",
          "375: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3b2860423815050777a731c8dd4714235929075",
      "candidate_info": {
        "commit_hash": "f3b2860423815050777a731c8dd4714235929075",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/f3b2860423815050777a731c8dd4714235929075",
        "files": [
          "tests/object/tree/write.c"
        ],
        "message": "test: ensure treebuilder validate new protection rules\n\nEnsure that the new protection around .git::$INDEX_ALLOCATION rules are\nenabled for using the treebuilder when core.protectNTFS is set.",
        "before_after_code_files": [
          "tests/object/tree/write.c||tests/object/tree/write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/object/tree/write.c||tests/object/tree/write.c": [
          "File: tests/object/tree/write.c -> tests/object/tree/write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:  cl_git_fail(git_treebuilder_insert(NULL, builder, \".git\\xef\\xbb\\xbf\", &bid, GIT_FILEMODE_BLOB));",
          "446:  cl_git_fail(git_treebuilder_insert(NULL, builder, \".git\\xe2\\x80\\xad\", &bid, GIT_FILEMODE_BLOB));",
          "448:  git_treebuilder_free(builder);",
          "449: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:  cl_git_fail(git_treebuilder_insert(NULL, builder, \".git::$INDEX_ALLOCATION/dummy-file\", &bid, GIT_FILEMODE_BLOB));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85d4ff77e2b539c525f36d0860f3faa8e68308b7",
      "candidate_info": {
        "commit_hash": "85d4ff77e2b539c525f36d0860f3faa8e68308b7",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/85d4ff77e2b539c525f36d0860f3faa8e68308b7",
        "files": [
          "tests/index/tests.c"
        ],
        "message": "index: ensure that we respect core.protectNTFS=false\n\nUsers may want to turn off core.protectNTFS, perhaps to import (and then\nrepair) a broken tree.  Ensure that core.protectNTFS=false is honored.",
        "before_after_code_files": [
          "tests/index/tests.c||tests/index/tests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/index/tests.c||tests/index/tests.c": [
          "File: tests/index/tests.c -> tests/index/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  cl_fixture_cleanup(\"invalid\");",
          "781: }",
          "783: void test_index_tests__remove_entry(void)",
          "784: {",
          "785:  git_repository *repo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783: void test_index_tests__can_disable_protectntfs(void)",
          "784: {",
          "785:  git_repository *repo;",
          "786:  git_index *index;",
          "788:  cl_must_pass(p_mkdir(\"valid\", 0700));",
          "789:  cl_git_rewritefile(\"valid/git~1\", \"steal the shortname\");",
          "791:  cl_git_pass(git_repository_init(&repo, \"./valid\", 0));",
          "792:  cl_git_pass(git_repository_index(&index, repo));",
          "793:  cl_repo_set_bool(repo, \"core.protectNTFS\", false);",
          "795:  cl_git_pass(git_index_add_bypath(index, \"git~1\"));",
          "797:  git_index_free(index);",
          "798:  git_repository_free(repo);",
          "800:  cl_fixture_cleanup(\"valid\");",
          "801: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba4c769b13d646664d7db8589e605f5923614347",
      "candidate_info": {
        "commit_hash": "ba4c769b13d646664d7db8589e605f5923614347",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ba4c769b13d646664d7db8589e605f5923614347",
        "files": [
          "tests/object/tree/write.c"
        ],
        "message": "tree: ensure we protect NTFS paths everywhere",
        "before_after_code_files": [
          "tests/object/tree/write.c||tests/object/tree/write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/object/tree/write.c||tests/object/tree/write.c": [
          "File: tests/object/tree/write.c -> tests/object/tree/write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:  cl_git_pass(git_treebuilder_new(&builder, g_repo, NULL));",
          "143:  for (i = 0; i < ARRAY_SIZE(entries); ++i) {",
          "146:   cl_git_pass(git_treebuilder_insert(NULL,",
          "147:    builder, entries[i].filename, id, entries[i].attr));",
          "",
          "[Removed Lines]",
          "144:   git_oid *id = entries[i].attr == GIT_FILEMODE_TREE ?  &tid : &bid;",
          "",
          "[Added Lines]",
          "144:   git_oid *id = entries[i].attr == GIT_FILEMODE_TREE ?  &tid : &bid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:  cl_git_pass(git_treebuilder_new(&builder, g_repo, NULL));",
          "426: #ifndef __APPLE__",
          "427:  cl_git_pass(git_treebuilder_insert(NULL, builder, \".git\\xef\\xbb\\xbf\", &bid, GIT_FILEMODE_BLOB));",
          "",
          "[Removed Lines]",
          "421: #ifndef GIT_WIN32",
          "422:  cl_git_pass(git_treebuilder_insert(NULL, builder, \".git.\", &bid, GIT_FILEMODE_BLOB));",
          "423:  cl_git_pass(git_treebuilder_insert(NULL, builder, \"git~1\", &bid, GIT_FILEMODE_BLOB));",
          "424: #endif",
          "",
          "[Added Lines]",
          "421:  cl_git_fail(git_treebuilder_insert(NULL, builder, \".git.\", &bid, GIT_FILEMODE_BLOB));",
          "422:  cl_git_fail(git_treebuilder_insert(NULL, builder, \"git~1\", &bid, GIT_FILEMODE_BLOB));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f7851eadca36a99627ad78cbe56a40d3776ed01",
      "candidate_info": {
        "commit_hash": "3f7851eadca36a99627ad78cbe56a40d3776ed01",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/3f7851eadca36a99627ad78cbe56a40d3776ed01",
        "files": [
          "src/path.c",
          "tests/checkout/nasty.c",
          "tests/resources/nasty/.gitted/objects/33/8190107c7ee7d8f5aa30061fc19b7d5ddcda86",
          "tests/resources/nasty/.gitted/objects/97/c14994866466aeb73e769a6f34e07c7f4b53f7",
          "tests/resources/nasty/.gitted/objects/b8/edf3ad62dbcbc983857a5bfee7b0181ee1a513",
          "tests/resources/nasty/.gitted/refs/heads/dotgit_alternate_data_stream"
        ],
        "message": "Disallow NTFS Alternate Data Stream attacks, even on Linux/macOS\n\nA little-known feature of NTFS is that it offers to store metadata in\nso-called \"Alternate Data Streams\" (inspired by Apple's \"resource\nforks\") that are copied together with the file they are associated with.\nThese Alternate Data Streams can be accessed via `<file name>:<stream\nname>:<stream type>`.\n\nDirectories, too, have Alternate Data Streams, and they even have a\ndefault stream type `$INDEX_ALLOCATION`. Which means that `abc/` and\n`abc::$INDEX_ALLOCATION/` are actually equivalent.\n\nThis is of course another attack vector on the Git directory that we\ndefinitely want to prevent.\n\nOn Windows, we already do this incidentally, by disallowing colons in\nfile/directory names.\n\nWhile it looks as if files'/directories' Alternate Data Streams are not\naccessible in the Windows Subsystem for Linux, and neither via\nCIFS/SMB-mounted network shares in Linux, it _is_ possible to access\nthem on SMB-mounted network shares on macOS.\n\nTherefore, let's go the extra mile and prevent this particular attack\n_everywhere_. To keep things simple, let's just disallow *any* Alternate\nData Stream of `.git`.\n\nThis is libgit2's variant of CVE-2019-1352.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "src/path.c||src/path.c",
          "tests/checkout/nasty.c||tests/checkout/nasty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ],
          "candidate": [
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ]
        }
      },
      "candidate_diff": {
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624:  if (!start)",
          "1625:   return true;",
          "1629:   return false;",
          "",
          "[Removed Lines]",
          "1628:  if (path[start] == '\\\\')",
          "",
          "[Added Lines]",
          "1632:  if (path[start] == '\\\\' || path[start] == ':')",
          "",
          "---------------"
        ],
        "tests/checkout/nasty.c||tests/checkout/nasty.c": [
          "File: tests/checkout/nasty.c -> tests/checkout/nasty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273: #endif",
          "274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280: void test_checkout_nasty__dotgit_alternate_data_stream(void)",
          "281: {",
          "282:  test_checkout_fails(\"refs/heads/dotgit_alternate_data_stream\", \".git/dummy-file\");",
          "283:  test_checkout_fails(\"refs/heads/dotgit_alternate_data_stream\", \".git::$INDEX_ALLOCATION/dummy-file\");",
          "284: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}