{
  "cve_id": "CVE-2023-35847",
  "cve_desc": "VirtualSquare picoTCP (aka PicoTCP-NG) through 2.1 does not have an MSS lower bound (e.g., it could be zero).",
  "repo": "virtualsquare/picotcp",
  "patch_hash": "eaf166009e44641e6570c576ba071217f100fd99",
  "patch_info": {
    "commit_hash": "eaf166009e44641e6570c576ba071217f100fd99",
    "repo": "virtualsquare/picotcp",
    "commit_url": "https://github.com/virtualsquare/picotcp/commit/eaf166009e44641e6570c576ba071217f100fd99",
    "files": [
      "modules/pico_tcp.c",
      "modules/pico_tcp.h"
    ],
    "message": "TCP: Fixed MSS size calculation. Set MSS lower bound.\n\nReported-by: \"P. Amsuo, Purdue University\"",
    "before_after_code_files": [
      "modules/pico_tcp.c||modules/pico_tcp.c",
      "modules/pico_tcp.h||modules/pico_tcp.h"
    ]
  },
  "patch_diff": {
    "modules/pico_tcp.c||modules/pico_tcp.c": [
      "File: modules/pico_tcp.c -> modules/pico_tcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1085:     t->sock.stack = S;",
      "1086:     t->sock.timestamp = TCP_TIME;",
      "1087:     pico_socket_set_family(&t->sock, family);",
      "1089:     t->tcpq_in.pool.root = t->tcpq_hold.pool.root = t->tcpq_out.pool.root = &LEAF;",
      "1090:     t->tcpq_hold.pool.compare = t->tcpq_out.pool.compare = segment_compare;",
      "1091:     t->tcpq_in.pool.compare = input_segment_compare;",
      "",
      "[Removed Lines]",
      "1088:     t->mss = (uint16_t)(pico_socket_get_mss(&t->sock) - PICO_SIZE_TCPHDR);",
      "",
      "[Added Lines]",
      "1088:     t->mss = (uint16_t)(pico_socket_get_mss(&t->sock));",
      "1089:     if (t->mss > PICO_SIZE_TCPHDR + PICO_TCP_MIN_MSS)",
      "1090:         t->mss -= (uint16_t)PICO_SIZE_TCPHDR;",
      "1091:     else",
      "1092:         t->mss = PICO_TCP_MIN_MSS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1254:     ts->snd_last = ts->snd_nxt;",
      "1255:     ts->cwnd = PICO_TCP_IW;",
      "1256:     mtu = (uint16_t)pico_socket_get_mss(s);",
      "1258:     ts->ssthresh = (uint16_t)((uint16_t)(PICO_DEFAULT_SOCKETQ / ts->mss) -  (((uint16_t)(PICO_DEFAULT_SOCKETQ / ts->mss)) >> 3u));",
      "1259:     syn->sock = s;",
      "1260:     hdr->seq = long_be(ts->snd_nxt);",
      "",
      "[Removed Lines]",
      "1257:     ts->mss = (uint16_t)(mtu - PICO_SIZE_TCPHDR);",
      "",
      "[Added Lines]",
      "1261:     if (mtu > PICO_SIZE_TCPHDR + PICO_TCP_MIN_MSS)",
      "1262:         ts->mss = (uint16_t)(mtu - PICO_SIZE_TCPHDR);",
      "1263:     else",
      "1264:         ts->mss = PICO_TCP_MIN_MSS;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2446: #endif",
      "2447:     f->sock = &new->sock;",
      "2448:     mtu = (uint16_t)pico_socket_get_mss(&new->sock);",
      "2450:     if (tcp_parse_options(f) < 0)",
      "2451:         return -1;",
      "2452:     new->sock.stack = s->stack;",
      "",
      "[Removed Lines]",
      "2449:     new->mss = (uint16_t)(mtu - PICO_SIZE_TCPHDR);",
      "",
      "[Added Lines]",
      "2456:     if (mtu > PICO_SIZE_TCPHDR + PICO_TCP_MIN_MSS)",
      "2457:         new->mss = (uint16_t)(mtu - PICO_SIZE_TCPHDR);",
      "2458:     else",
      "2459:         new->mss = PICO_TCP_MIN_MSS;",
      "",
      "---------------"
    ],
    "modules/pico_tcp.h||modules/pico_tcp.h": [
      "File: modules/pico_tcp.h -> modules/pico_tcp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: #define PICO_TCPHDR_SIZE 20",
      "56: #define PICO_SIZE_TCPOPT_SYN 20",
      "57: #define PICO_SIZE_TCPHDR (uint32_t)(sizeof(struct pico_tcp_hdr))",
      "60: #define PICO_TCP_OPTION_END         0x00",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: #define PICO_TCP_MIN_MSS (64 - PICO_SIZE_TCPHDR)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d561990a358899178115e156871cc054a1c55ffe",
      "candidate_info": {
        "commit_hash": "d561990a358899178115e156871cc054a1c55ffe",
        "repo": "virtualsquare/picotcp",
        "commit_url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe",
        "files": [
          "modules/pico_ipfilter.c"
        ],
        "message": "[ipfilter] Check transport layer length in frame before filtering ports\n\nReported-by: \"P. Amsuo, Purdue University\"",
        "before_after_code_files": [
          "modules/pico_ipfilter.c||modules/pico_ipfilter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/virtualsquare/picotcp/pull/15"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/pico_ipfilter.c||modules/pico_ipfilter.c": [
          "File: modules/pico_ipfilter.c -> modules/pico_ipfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:     temp.fdev = f->dev;",
          "462:     temp.out_addr = ipv4_hdr->dst.addr;",
          "463:     temp.in_addr = ipv4_hdr->src.addr;",
          "473:     }",
          "476:     temp.priority = f->priority;",
          "477:     temp.tos = ipv4_hdr->tos;",
          "478:     return ipfilter_apply_filter(f, &temp);",
          "",
          "[Removed Lines]",
          "464:     if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {",
          "465:         trans = (struct pico_trans *) f->transport_hdr;",
          "466:         temp.out_port = short_be(trans->dport);",
          "467:         temp.in_port = short_be(trans->sport);",
          "468:     }",
          "469:     else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {",
          "470:         icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;",
          "471:         if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)",
          "472:             return 0;",
          "475:     temp.proto = ipv4_hdr->proto;",
          "",
          "[Added Lines]",
          "464:     if ((f->transport_hdr + sizeof(struct pico_trans)) <= (f->buffer + f->buffer_len)) {",
          "465:         if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {",
          "466:                 trans = (struct pico_trans *) f->transport_hdr;",
          "467:                 temp.out_port = short_be(trans->dport);",
          "468:                 temp.in_port = short_be(trans->sport);",
          "469:         } else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {",
          "470:             icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;",
          "471:             if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)",
          "472:                 return 0;",
          "473:         }",
          "474:         temp.proto = ipv4_hdr->proto;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b9a16764f2b12b611de9c34a50b4713d10ca401",
      "candidate_info": {
        "commit_hash": "4b9a16764f2b12b611de9c34a50b4713d10ca401",
        "repo": "virtualsquare/picotcp",
        "commit_url": "https://github.com/virtualsquare/picotcp/commit/4b9a16764f2b12b611de9c34a50b4713d10ca401",
        "files": [
          "modules/pico_ipv4.c",
          "modules/pico_tcp.c"
        ],
        "message": "More checks for correct header sizes\n\nReported-by: \"P. Amsuo, Purdue University\"",
        "before_after_code_files": [
          "modules/pico_ipv4.c||modules/pico_ipv4.c",
          "modules/pico_tcp.c||modules/pico_tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/virtualsquare/picotcp/pull/15"
        ],
        "olp_code_files": {
          "patch": [
            "modules/pico_tcp.c||modules/pico_tcp.c"
          ],
          "candidate": [
            "modules/pico_tcp.c||modules/pico_tcp.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/pico_ipv4.c||modules/pico_ipv4.c": [
          "File: modules/pico_ipv4.c -> modules/pico_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:     f->transport_hdr = ((uint8_t *)f->net_hdr) + PICO_SIZE_IP4HDR + option_len;",
          "669:     f->transport_len = (uint16_t)(short_be(hdr->len) - PICO_SIZE_IP4HDR - option_len);",
          "670:     f->net_len = (uint16_t)(PICO_SIZE_IP4HDR + option_len);",
          "671: #if defined(PICO_SUPPORT_IPV4FRAG) || defined(PICO_SUPPORT_IPV6FRAG)",
          "672:     f->frag = short_be(hdr->frag);",
          "673: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:     if ((f->net_hdr + f->net_len) > (f->buffer + f->buffer_len)) {",
          "673:         pico_frame_discard(f);",
          "674:         return 0;",
          "675:     }",
          "",
          "---------------"
        ],
        "modules/pico_tcp.c||modules/pico_tcp.c": [
          "File: modules/pico_tcp.c -> modules/pico_tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:     if (tcpopt_len_check(idx, len, PICO_TCPOPTLEN_MSS) < 0)",
          "869:         return;",
          "871:     t->mss_ok = 1;",
          "872:     mss = short_from(opt + *idx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871:     if ((*idx + PICO_TCPOPTLEN_MSS) > len)",
          "872:         return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:     uint8_t *opt = f->transport_hdr + PICO_SIZE_TCPHDR;",
          "897:     uint32_t i = 0;",
          "898:     f->timestamp = 0;",
          "899:     while (i < (f->transport_len - PICO_SIZE_TCPHDR)) {",
          "900:         uint8_t type =  opt[i++];",
          "901:         uint8_t len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903:     if (f->buffer + f->buffer_len > f->transport_hdr + f->transport_len)",
          "904:         return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}