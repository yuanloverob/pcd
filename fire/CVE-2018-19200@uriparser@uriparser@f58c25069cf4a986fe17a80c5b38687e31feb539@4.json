{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bfe1da6a7163c2fa5c388adb6d61a8d2eb7fe087",
      "candidate_info": {
        "commit_hash": "bfe1da6a7163c2fa5c388adb6d61a8d2eb7fe087",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bfe1da6a7163c2fa5c388adb6d61a8d2eb7fe087",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "Address warning about redefined _GNU_SOURCE\n\nAlso go with 1 for a value, consistent to config.h.",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #endif",
          "49: #if HAVE_REALLOCARRAY",
          "51: #endif",
          "53: #include <errno.h>",
          "",
          "[Removed Lines]",
          "50: # define _GNU_SOURCE",
          "",
          "[Added Lines]",
          "50: # ifndef _GNU_SOURCE",
          "51: #  define _GNU_SOURCE 1",
          "52: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d01c4afee00f0a03e33f9a1656eb9c5b1a7e88f",
      "candidate_info": {
        "commit_hash": "7d01c4afee00f0a03e33f9a1656eb9c5b1a7e88f",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/7d01c4afee00f0a03e33f9a1656eb9c5b1a7e88f",
        "files": [
          "src/UriQuery.c"
        ],
        "message": "Pass memory manager to AppendQueryItem",
        "before_after_code_files": [
          "src/UriQuery.c||src/UriQuery.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: static UriBool URI_FUNC(AppendQueryItem)(URI_TYPE(QueryList) ** prevNext,",
          "81:   int * itemCount, const URI_CHAR * keyFirst, const URI_CHAR * keyAfter,",
          "82:   const URI_CHAR * valueFirst, const URI_CHAR * valueAfter,",
          "",
          "[Removed Lines]",
          "83:   UriBool plusToSpace, UriBreakConversion breakConversion);",
          "",
          "[Added Lines]",
          "83:   UriBool plusToSpace, UriBreakConversion breakConversion,",
          "84:   UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272: UriBool URI_FUNC(AppendQueryItem)(URI_TYPE(QueryList) ** prevNext,",
          "273:   int * itemCount, const URI_CHAR * keyFirst, const URI_CHAR * keyAfter,",
          "274:   const URI_CHAR * valueFirst, const URI_CHAR * valueAfter,",
          "277:  const int keyLen = (int)(keyAfter - keyFirst);",
          "278:  const int valueLen = (int)(valueAfter - valueFirst);",
          "279:  URI_CHAR * key;",
          "",
          "[Removed Lines]",
          "275:   UriBool plusToSpace, UriBreakConversion breakConversion) {",
          "",
          "[Added Lines]",
          "276:   UriBool plusToSpace, UriBreakConversion breakConversion,",
          "277:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:    if (URI_FUNC(AppendQueryItem)(prevNext, itemsAppended,",
          "405:      keyFirst, keyAfter, valueFirst, valueAfter,",
          "407:      == URI_FALSE) {",
          "",
          "[Removed Lines]",
          "406:      plusToSpace, breakConversion)",
          "",
          "[Added Lines]",
          "408:      plusToSpace, breakConversion, memory)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:  }",
          "454:  if (URI_FUNC(AppendQueryItem)(prevNext, itemsAppended, keyFirst, keyAfter,",
          "456:    == URI_FALSE) {",
          "",
          "[Removed Lines]",
          "455:    valueFirst, valueAfter, plusToSpace, breakConversion)",
          "",
          "[Added Lines]",
          "457:    valueFirst, valueAfter, plusToSpace, breakConversion, memory)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77dd2b7843116252647efdddb25a644b7a9305a6",
      "candidate_info": {
        "commit_hash": "77dd2b7843116252647efdddb25a644b7a9305a6",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/77dd2b7843116252647efdddb25a644b7a9305a6",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseMustBeSegmentNzNc",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: static const URI_CHAR * URI_FUNC(ParseIpFutStopGo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "164: static const URI_CHAR * URI_FUNC(ParseIpLit2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "165: static const URI_CHAR * URI_FUNC(ParseIPv6address2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867:  if (first >= afterLast) {",
          "869:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Removed Lines]",
          "864: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "864: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(",
          "865:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "866:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "881:    if (afterPctEncoded == NULL) {",
          "882:     return NULL;",
          "883:    }",
          "885:   }",
          "887:  case _UT('@'):",
          "",
          "[Removed Lines]",
          "884:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast);",
          "",
          "[Added Lines]",
          "884:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "902:  case _UT('~'):",
          "903:  case URI_SET_DIGIT:",
          "904:  case URI_SET_ALPHA:",
          "907:  case _UT('/'):",
          "908:   {",
          "",
          "[Removed Lines]",
          "905:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "905:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1810:    if (afterPctEncoded == NULL) {",
          "1811:     return NULL;",
          "1812:    }",
          "1814:   }",
          "1816:  case _UT('!'):",
          "",
          "[Removed Lines]",
          "1813:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast);",
          "",
          "[Added Lines]",
          "1813:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1826:  case _UT('~'):",
          "1827:  case _UT('='):",
          "1828:  case _UT('\\''):",
          "1831:  case _UT('/'):",
          "1832:   {",
          "",
          "[Removed Lines]",
          "1829:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1829:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1916:  case _UT('-'):",
          "1917:  case _UT('@'):",
          "1921:  case _UT('%'):",
          "1922:   {",
          "",
          "[Removed Lines]",
          "1919:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1921:   return URI_FUNC(ParseMustBeSegmentNzNc)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1926:     return NULL;",
          "1927:    }",
          "1930:   }",
          "1932:  case _UT('/'):",
          "",
          "[Removed Lines]",
          "1929:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast);",
          "",
          "[Added Lines]",
          "1931:    return URI_FUNC(ParseMustBeSegmentNzNc)(state, afterPctEncoded, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0301c67931d4c5bc4935bea56d5c64f5ca4c44c2",
      "candidate_info": {
        "commit_hash": "0301c67931d4c5bc4935bea56d5c64f5ca4c44c2",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0301c67931d4c5bc4935bea56d5c64f5ca4c44c2",
        "files": [
          "src/UriShorten.c"
        ],
        "message": "Pass memory manager to RemoveBaseUriImpl",
        "before_after_code_files": [
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: static int URI_FUNC(RemoveBaseUriImpl)(URI_TYPE(Uri) * dest,",
          "126:   const URI_TYPE(Uri) * absSource,",
          "127:   const URI_TYPE(Uri) * absBase,",
          "131:  if (dest == NULL) {",
          "132:   return URI_ERROR_NULL;",
          "133:  }",
          "",
          "[Removed Lines]",
          "128:   UriBool domainRootMode) {",
          "",
          "[Added Lines]",
          "128:   UriBool domainRootMode, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:   const URI_TYPE(Uri) * absSource,",
          "299:   const URI_TYPE(Uri) * absBase,",
          "300:   UriBool domainRootMode) {",
          "301:  const int res = URI_FUNC(RemoveBaseUriImpl)(dest, absSource,",
          "303:  if ((res != URI_SUCCESS) && (dest != NULL)) {",
          "304:   URI_FUNC(FreeUriMembers)(dest);",
          "305:  }",
          "",
          "[Removed Lines]",
          "302:    absBase, domainRootMode);",
          "",
          "[Added Lines]",
          "301:    absBase, domainRootMode, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7978796a992e6bfbb521ce6443a918dc9ab091a4",
      "candidate_info": {
        "commit_hash": "7978796a992e6bfbb521ce6443a918dc9ab091a4",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/7978796a992e6bfbb521ce6443a918dc9ab091a4",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseOwnHostUserInfo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: static const URI_CHAR * URI_FUNC(ParseMustBeSegmentNzNc)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "167: static const URI_CHAR * URI_FUNC(ParseOwnHost)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "168: static const URI_CHAR * URI_FUNC(ParseOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:  if (first >= afterLast) {",
          "1083:   if (!URI_FUNC(OnExitOwnHostUserInfo)(state, first, memory)) {",
          "1084:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Removed Lines]",
          "1079: static URI_INLINE const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1079: static URI_INLINE const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(",
          "1080:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1081:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1159:    if (afterPctSubUnres == NULL) {",
          "1160:     return NULL;",
          "1161:    }",
          "1163:   }",
          "1165:  case _UT(':'):",
          "",
          "[Removed Lines]",
          "1162:    return URI_FUNC(ParseOwnHostUserInfo)(state, afterPctSubUnres, afterLast);",
          "",
          "[Added Lines]",
          "1162:    return URI_FUNC(ParseOwnHostUserInfo)(state, afterPctSubUnres, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    }
  ]
}