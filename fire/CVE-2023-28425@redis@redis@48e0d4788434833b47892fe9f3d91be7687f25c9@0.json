{
  "cve_id": "CVE-2023-28425",
  "cve_desc": "Redis is an in-memory database that persists on disk. Starting in version 7.0.8 and prior to version 7.0.10, authenticated users can use the MSETNX command to trigger a runtime assertion and termination of the Redis server process. The problem is fixed in Redis version 7.0.10.",
  "repo": "redis/redis",
  "patch_hash": "48e0d4788434833b47892fe9f3d91be7687f25c9",
  "patch_info": {
    "commit_hash": "48e0d4788434833b47892fe9f3d91be7687f25c9",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/48e0d4788434833b47892fe9f3d91be7687f25c9",
    "files": [
      "src/t_string.c",
      "tests/unit/type/string.tcl"
    ],
    "message": "Avoid assertion when MSETNX is used with the same key twice (CVE-2023-28425) (#11940)\n\nUsing the same key twice in MSETNX command would trigger an assertion.\n\nThis reverts #11594 (introduced in Redis 7.0.8)",
    "before_after_code_files": [
      "src/t_string.c||src/t_string.c",
      "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
    ]
  },
  "patch_diff": {
    "src/t_string.c||src/t_string.c": [
      "File: src/t_string.c -> src/t_string.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "560: void msetGenericCommand(client *c, int nx) {",
      "561:     int j;",
      "564:     if ((c->argc % 2) == 0) {",
      "565:         addReplyErrorArity(c);",
      "",
      "[Removed Lines]",
      "562:     int setkey_flags = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "575:                 return;",
      "576:             }",
      "577:         }",
      "579:     }",
      "581:     for (j = 1; j < c->argc; j += 2) {",
      "582:         c->argv[j+1] = tryObjectEncoding(c->argv[j+1]);",
      "584:         notifyKeyspaceEvent(NOTIFY_STRING,\"set\",c->argv[j],c->db->id);",
      "585:     }",
      "586:     server.dirty += (c->argc-1)/2;",
      "",
      "[Removed Lines]",
      "578:         setkey_flags |= SETKEY_DOESNT_EXIST;",
      "583:         setKey(c, c->db, c->argv[j], c->argv[j + 1], setkey_flags);",
      "",
      "[Added Lines]",
      "581:         setKey(c, c->db, c->argv[j], c->argv[j + 1], 0);",
      "",
      "---------------"
    ],
    "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
      "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:         list [r msetnx x1{t} xxx y2{t} yyy] [r get x1{t}] [r get y2{t}]",
      "235:     } {1 xxx yyy}",
      "237:     test \"STRLEN against non-existing key\" {",
      "238:         assert_equal 0 [r strlen notakey]",
      "239:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "237:     test {MSETNX with not existing keys - same key twice} {",
      "238:         r del x1{t}",
      "239:         list [r msetnx x1{t} xxx x1{t} yyy] [r get x1{t}]",
      "240:     } {1 yyy}",
      "242:     test {MSETNX with already existing keys - same key twice} {",
      "243:         list [r msetnx x1{t} xxx x1{t} zzz] [r get x1{t}]",
      "244:     } {0 yyy}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2764dc3768675912ca21af111fc6b795270707d2",
      "candidate_info": {
        "commit_hash": "2764dc3768675912ca21af111fc6b795270707d2",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/2764dc3768675912ca21af111fc6b795270707d2",
        "files": [
          "src/db.c",
          "src/server.h",
          "src/t_string.c",
          "tests/unit/type/string.tcl"
        ],
        "message": "Optimize MSETNX to avoid double lookup (#11944)\n\nThis is a redo of #11594 which got reverted in #11940\nIt improves performance by avoiding double lookup of the the key.",
        "before_after_code_files": [
          "src/db.c||src/db.c",
          "src/server.h||src/server.h",
          "src/t_string.c||src/t_string.c",
          "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/t_string.c||src/t_string.c",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ],
          "candidate": [
            "src/t_string.c||src/t_string.c",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: int expireIfNeeded(redisDb *db, robj *key, int flags);",
          "49: int keyIsExpired(redisDb *db, robj *key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: static void dbSetValue(redisDb *db, robj *key, robj *val, int overwrite, dictEntry *de);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:     serverAssertWithInfo(NULL, key, de != NULL);",
          "195:     initObjectLRUOrLFU(val);",
          "196:     dictSetVal(db->dict, de, val);",
          "197:     signalKeyAsReady(db, key, val->type);",
          "",
          "[Removed Lines]",
          "191: void dbAdd(redisDb *db, robj *key, robj *val) {",
          "192:     sds copy = sdsdup(key->ptr);",
          "193:     dictEntry *de = dictAddRaw(db->dict, copy, NULL);",
          "",
          "[Added Lines]",
          "193: static void dbAddInternal(redisDb *db, robj *key, robj *val, int update_if_existing) {",
          "194:     dictEntry *existing;",
          "195:     dictEntry *de = dictAddRaw(db->dict, key->ptr, &existing);",
          "196:     if (update_if_existing && existing) {",
          "197:         dbSetValue(db, key, val, 1, existing);",
          "198:         return;",
          "199:     }",
          "201:     dictSetKey(db->dict, de, sdsdup(key->ptr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:     notifyKeyspaceEvent(NOTIFY_NEW,\"new\",key,db->id);",
          "200: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: void dbAdd(redisDb *db, robj *key, robj *val) {",
          "210:     dbAddInternal(db, key, val, 0);",
          "211: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:     serverAssertWithInfo(NULL,key,de != NULL);",
          "236:     robj *old = dictGetVal(de);",
          "",
          "[Removed Lines]",
          "232: static void dbSetValue(redisDb *db, robj *key, robj *val, int overwrite) {",
          "233:     dictEntry *de = dictFind(db->dict,key->ptr);",
          "",
          "[Added Lines]",
          "245: static void dbSetValue(redisDb *db, robj *key, robj *val, int overwrite, dictEntry *de) {",
          "246:     if (!de) de = dictFind(db->dict,key->ptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266: void dbReplaceValue(redisDb *db, robj *key, robj *val) {",
          "268: }",
          "",
          "[Removed Lines]",
          "267:     dbSetValue(db, key, val, 0);",
          "",
          "[Added Lines]",
          "279:     dbSetValue(db, key, val, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "286:     if (flags & SETKEY_ALREADY_EXIST)",
          "287:         keyfound = 1;",
          "288:     else if (!(flags & SETKEY_DOESNT_EXIST))",
          "289:         keyfound = (lookupKeyWrite(db,key) != NULL);",
          "291:     if (!keyfound) {",
          "292:         dbAdd(db,key,val);",
          "293:     } else {",
          "295:     }",
          "296:     incrRefCount(val);",
          "297:     if (!(flags & SETKEY_KEEPTTL)) removeExpire(db,key);",
          "",
          "[Removed Lines]",
          "294:         dbSetValue(db,key,val,1);",
          "",
          "[Added Lines]",
          "300:     else if (flags & SETKEY_ADD_OR_UPDATE)",
          "301:         keyfound = -1;",
          "307:     } else if (keyfound<0) {",
          "308:         dbAddInternal(db,key,val,1);",
          "310:         dbSetValue(db,key,val,1,NULL);",
          "",
          "---------------"
        ],
        "src/server.h||src/server.h": [
          "File: src/server.h -> src/server.h"
        ],
        "src/t_string.c||src/t_string.c": [
          "File: src/t_string.c -> src/t_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:         }",
          "577:     }",
          "579:     for (j = 1; j < c->argc; j += 2) {",
          "580:         c->argv[j+1] = tryObjectEncoding(c->argv[j+1]);",
          "582:         notifyKeyspaceEvent(NOTIFY_STRING,\"set\",c->argv[j],c->db->id);",
          "583:     }",
          "584:     server.dirty += (c->argc-1)/2;",
          "585:     addReply(c, nx ? shared.cone : shared.ok);",
          "",
          "[Removed Lines]",
          "581:         setKey(c, c->db, c->argv[j], c->argv[j + 1], 0);",
          "",
          "[Added Lines]",
          "579:     int setkey_flags = nx ? SETKEY_DOESNT_EXIST : 0;",
          "582:         setKey(c, c->db, c->argv[j], c->argv[j + 1], setkey_flags);",
          "585:         if (nx)",
          "586:             setkey_flags = SETKEY_ADD_OR_UPDATE;",
          "",
          "---------------"
        ],
        "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
          "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         assert_error {*wrong number of arguments for 'msetnx' command} {r msetnx x{t} 20 y{t} \"foo bar\" z{t}}",
          "235:     }",
          "237:     test {MSETNX with already existent key} {",
          "238:         list [r msetnx x1{t} xxx y2{t} yyy x{t} 20] [r exists x1{t}] [r exists y2{t}]",
          "239:     } {0 0 0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     test {MSET with already existing - same key twice} {",
          "238:         r set x{t} x",
          "239:         list [r mset x{t} xxx x{t} yyy] [r get x{t}]",
          "240:     } {OK yyy}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6956d15b776e72f7274b516224e930f2c957bac3",
      "candidate_info": {
        "commit_hash": "6956d15b776e72f7274b516224e930f2c957bac3",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/6956d15b776e72f7274b516224e930f2c957bac3",
        "files": [
          "src/t_string.c",
          "tests/unit/type/string.tcl"
        ],
        "message": "Avoid assertion when MSETNX is used with the same key twice (CVE-2023-28425)\n\nUsing the same key twice in MSETNX command would trigger an assertion.\n\nThis reverts #11594 (introduced in Redis 7.0.8)",
        "before_after_code_files": [
          "src/t_string.c||src/t_string.c",
          "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/t_string.c||src/t_string.c",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ],
          "candidate": [
            "src/t_string.c||src/t_string.c",
            "tests/unit/type/string.tcl||tests/unit/type/string.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_string.c||src/t_string.c": [
          "File: src/t_string.c -> src/t_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "562: void msetGenericCommand(client *c, int nx) {",
          "563:     int j;",
          "566:     if ((c->argc % 2) == 0) {",
          "567:         addReplyErrorArity(c);",
          "",
          "[Removed Lines]",
          "564:     int setkey_flags = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:                 return;",
          "578:             }",
          "579:         }",
          "581:     }",
          "583:     for (j = 1; j < c->argc; j += 2) {",
          "584:         c->argv[j+1] = tryObjectEncoding(c->argv[j+1]);",
          "586:         notifyKeyspaceEvent(NOTIFY_STRING,\"set\",c->argv[j],c->db->id);",
          "587:     }",
          "588:     server.dirty += (c->argc-1)/2;",
          "",
          "[Removed Lines]",
          "580:         setkey_flags |= SETKEY_DOESNT_EXIST;",
          "585:         setKey(c, c->db, c->argv[j], c->argv[j + 1], setkey_flags);",
          "",
          "[Added Lines]",
          "583:         setKey(c, c->db, c->argv[j], c->argv[j + 1], 0);",
          "",
          "---------------"
        ],
        "tests/unit/type/string.tcl||tests/unit/type/string.tcl": [
          "File: tests/unit/type/string.tcl -> tests/unit/type/string.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         list [r msetnx x1{t} xxx y2{t} yyy] [r get x1{t}] [r get y2{t}]",
          "235:     } {1 xxx yyy}",
          "237:     test \"STRLEN against non-existing key\" {",
          "238:         assert_equal 0 [r strlen notakey]",
          "239:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     test {MSETNX with not existing keys - same key twice} {",
          "238:         r del x1{t}",
          "239:         list [r msetnx x1{t} xxx x1{t} yyy] [r get x1{t}]",
          "240:     } {1 yyy}",
          "242:     test {MSETNX with already existing keys - same key twice} {",
          "243:         list [r msetnx x1{t} xxx x1{t} zzz] [r get x1{t}]",
          "244:     } {0 yyy}",
          "",
          "---------------"
        ]
      }
    }
  ]
}