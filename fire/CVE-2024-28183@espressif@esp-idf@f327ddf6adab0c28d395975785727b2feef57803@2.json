{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6383fd550ac23458ef44d11ef6c7eef067aea6c5",
      "candidate_info": {
        "commit_hash": "6383fd550ac23458ef44d11ef6c7eef067aea6c5",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/6383fd550ac23458ef44d11ef6c7eef067aea6c5",
        "files": [
          "components/sdmmc/sdmmc_common.h"
        ],
        "message": "fix(sdmmc): extend the maximum number of retries of ACMD41\n\nAccording to the application note in SD Card Physical Specification:\n\n> The host shall set ACMD41 timeout more than 1 second to abort repeat\nof issuing ACMD41 when the card does not indicate ready. The timeout\ncount starts from the first ACMD41 which is set voltage window\nin the argument.\n\nPreviously, the timeout was exactly one second, and this caused\ncertain larger-capacity cards to \"time out\", because they couldn't\nfinish initialization process in time.",
        "before_after_code_files": [
          "components/sdmmc/sdmmc_common.h||components/sdmmc/sdmmc_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/sdmmc/sdmmc_common.h||components/sdmmc/sdmmc_common.h": [
          "File: components/sdmmc/sdmmc_common.h -> components/sdmmc/sdmmc_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define SDMMC_SEND_OP_COND_MAX_ERRORS   3",
          "",
          "[Removed Lines]",
          "44: #define SDMMC_SEND_OP_COND_MAX_RETRIES  100",
          "",
          "[Added Lines]",
          "44: #define SDMMC_SEND_OP_COND_MAX_RETRIES  300",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d78b2b6af90414da73b8c61e904b1f8779df42f4",
      "candidate_info": {
        "commit_hash": "d78b2b6af90414da73b8c61e904b1f8779df42f4",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/d78b2b6af90414da73b8c61e904b1f8779df42f4",
        "files": [
          "components/efuse/efuse_table_gen.py"
        ],
        "message": "feat(efuse): Adds support for alternative efuse names",
        "before_after_code_files": [
          "components/efuse/efuse_table_gen.py||components/efuse/efuse_table_gen.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/efuse/efuse_table_gen.py||components/efuse/efuse_table_gen.py": [
          "File: components/efuse/efuse_table_gen.py -> components/efuse/efuse_table_gen.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #",
          "5: # Converts efuse table to header file efuse_table.h.",
          "6: #",
          "8: #",
          "9: # SPDX-License-Identifier: Apache-2.0",
          "12: import argparse",
          "13: import hashlib",
          "14: import os",
          "",
          "[Removed Lines]",
          "7: # SPDX-FileCopyrightText: 2017-2021 Espressif Systems (Shanghai) CO LTD",
          "10: from __future__ import division, print_function",
          "",
          "[Added Lines]",
          "7: # SPDX-FileCopyrightText: 2017-2024 Espressif Systems (Shanghai) CO LTD",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:         last_field_name = ''",
          "261:         for p in self:",
          "262:             if (p.field_name != last_field_name):",
          "264:                 last_field_name = p.field_name",
          "266:         rows += ['',",
          "",
          "[Removed Lines]",
          "263:                 rows += ['extern const esp_efuse_desc_t* ' + 'ESP_EFUSE_' + p.field_name.replace('.', '_') + '[];']",
          "",
          "[Added Lines]",
          "261:                 name = 'ESP_EFUSE_' + p.field_name.replace('.', '_')",
          "262:                 rows += ['extern const esp_efuse_desc_t* ' + name + '[];']",
          "263:                 for alt_name in p.get_alt_names():",
          "264:                     alt_name = 'ESP_EFUSE_' + alt_name.replace('.', '_')",
          "265:                     rows += ['#define ' + alt_name + ' ' + name]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:                          str(self.bit_start),",
          "434:                          str(self.get_bit_count()) + '}, \\t // ' + self.comment])",
          "437: def process_input_file(file, type_table):",
          "438:     status('Parsing efuse CSV input file ' + file.name + ' ...')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:     def get_alt_names(self):",
          "439:         result = re.search(r'^\\[(.*?)\\]', self.comment)",
          "440:         if result:",
          "441:             return result.group(1).split()",
          "442:         return []",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f47d9432a065f8c79799b80040fa4785028e8809",
      "candidate_info": {
        "commit_hash": "f47d9432a065f8c79799b80040fa4785028e8809",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/f47d9432a065f8c79799b80040fa4785028e8809",
        "files": [
          "components/console/esp_console.h",
          "components/console/esp_console_repl.c",
          "examples/system/console/advanced/main/console_example_main.c",
          "examples/wifi/ftm/main/ftm_main.c"
        ],
        "message": "console: Fix building issue when serial JTAG is set\n\nCloses https://github.com/espressif/esp-idf/issues/10707",
        "before_after_code_files": [
          "components/console/esp_console.h||components/console/esp_console.h",
          "components/console/esp_console_repl.c||components/console/esp_console_repl.c",
          "examples/system/console/advanced/main/console_example_main.c||examples/system/console/advanced/main/console_example_main.c",
          "examples/wifi/ftm/main/ftm_main.c||examples/wifi/ftm/main/ftm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/console/esp_console.h||components/console/esp_console.h": [
          "File: components/console/esp_console.h -> components/console/esp_console.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         .max_cmdline_length = 0,          \\",
          "66: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: #if CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     int rx_gpio_num; //!< GPIO number for RX path, -1 means using default one",
          "77: } esp_console_dev_uart_config_t;",
          "80: #define ESP_CONSOLE_DEV_UART_CONFIG_DEFAULT()       \\",
          "81: {                                                   \\",
          "82:     .channel = CONFIG_ESP_CONSOLE_UART_NUM,         \\",
          "",
          "[Removed Lines]",
          "79: #ifdef CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "[Added Lines]",
          "80: #if CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     .tx_gpio_num = -1,                             \\",
          "93:     .rx_gpio_num = -1,                             \\",
          "94: }",
          "",
          "[Removed Lines]",
          "95: #endif",
          "",
          "[Added Lines]",
          "96: #endif // CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "97: #endif // CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "99: #if CONFIG_ESP_CONSOLE_USB_CDC || (defined __DOXYGEN__ && SOC_USB_OTG_SUPPORTED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: } esp_console_dev_usb_cdc_config_t;",
          "",
          "[Removed Lines]",
          "107: #define ESP_CONSOLE_DEV_CDC_CONFIG_DEFAULT() \\",
          "108: {                                            \\",
          "109: }",
          "111: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "[Added Lines]",
          "110: #define ESP_CONSOLE_DEV_CDC_CONFIG_DEFAULT() {}",
          "111: #endif // CONFIG_ESP_CONSOLE_USB_CDC || (defined __DOXYGEN__ && SOC_USB_OTG_SUPPORTED)",
          "113: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG || (defined __DOXYGEN__ && SOC_USB_SERIAL_JTAG_SUPPORTED)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120: } esp_console_dev_usb_serial_jtag_config_t;",
          "122: #define ESP_CONSOLE_DEV_USB_SERIAL_JTAG_CONFIG_DEFAULT() {}",
          "",
          "[Removed Lines]",
          "124: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "[Added Lines]",
          "125: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG || (defined __DOXYGEN__ && SOC_USB_SERIAL_JTAG_SUPPORTED)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:     esp_err_t (*del)(esp_console_repl_t *repl);",
          "305: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: #if CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328: esp_err_t esp_console_new_repl_uart(const esp_console_dev_uart_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331: #endif // CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "333: #if CONFIG_ESP_CONSOLE_USB_CDC || (defined __DOXYGEN__ && SOC_USB_OTG_SUPPORTED)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349: esp_err_t esp_console_new_repl_usb_cdc(const esp_console_dev_usb_cdc_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl);",
          "",
          "[Removed Lines]",
          "351: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "[Added Lines]",
          "354: #endif // CONFIG_ESP_CONSOLE_USB_CDC || (defined __DOXYGEN__ && SOC_USB_OTG_SUPPORTED)",
          "356: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG || (defined __DOXYGEN__ && SOC_USB_SERIAL_JTAG_SUPPORTED)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "371: esp_err_t esp_console_new_repl_usb_serial_jtag(const esp_console_dev_usb_serial_jtag_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl);",
          "",
          "[Removed Lines]",
          "372: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "[Added Lines]",
          "377: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG || (defined __DOXYGEN__ && SOC_USB_SERIAL_JTAG_SUPPORTED)",
          "",
          "---------------"
        ],
        "components/console/esp_console_repl.c||components/console/esp_console_repl.c": [
          "File: components/console/esp_console_repl.c -> components/console/esp_console_repl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: } esp_console_repl_universal_t;",
          "49: static void esp_console_repl_task(void *args);",
          "50: static esp_err_t esp_console_repl_uart_delete(esp_console_repl_t *repl);",
          "51: static esp_err_t esp_console_repl_usb_cdc_delete(esp_console_repl_t *repl);",
          "52: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "53: static esp_err_t esp_console_repl_usb_serial_jtag_delete(esp_console_repl_t *repl);",
          "54: #endif //CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: #if CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "52: #endif // CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "53: #if CONFIG_ESP_CONSOLE_USB_CDC",
          "55: #endif // CONFIG_ESP_CONSOLE_USB_CDC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: static esp_err_t esp_console_setup_prompt(const char *prompt, esp_console_repl_com_t *repl_com);",
          "57: static esp_err_t esp_console_setup_history(const char *history_path, uint32_t max_history_len, esp_console_repl_com_t *repl_com);",
          "59: esp_err_t esp_console_new_repl_usb_cdc(const esp_console_dev_usb_cdc_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl)",
          "60: {",
          "61:     esp_err_t ret = ESP_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #if CONFIG_ESP_CONSOLE_USB_CDC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     }",
          "120:     return ret;",
          "121: }",
          "123: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "124: esp_err_t esp_console_new_repl_usb_serial_jtag(const esp_console_dev_usb_serial_jtag_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127: #endif // CONFIG_ESP_CONSOLE_USB_CDC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198: }",
          "199: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "201: esp_err_t esp_console_new_repl_uart(const esp_console_dev_uart_config_t *dev_config, const esp_console_repl_config_t *repl_config, esp_console_repl_t **ret_repl)",
          "202: {",
          "203:     esp_err_t ret = ESP_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: #if CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:     }",
          "291:     return ret;",
          "292: }",
          "294: esp_err_t esp_console_start_repl(esp_console_repl_t *repl)",
          "295: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: #endif // CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "394:     return ret;",
          "395: }",
          "397: static esp_err_t esp_console_repl_uart_delete(esp_console_repl_t *repl)",
          "398: {",
          "399:     esp_err_t ret = ESP_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405: #if CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "413: _exit:",
          "414:     return ret;",
          "415: }",
          "417: static esp_err_t esp_console_repl_usb_cdc_delete(esp_console_repl_t *repl)",
          "418: {",
          "419:     esp_err_t ret = ESP_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425: #endif // CONFIG_ESP_CONSOLE_UART_DEFAULT || CONFIG_ESP_CONSOLE_UART_CUSTOM",
          "427: #if CONFIG_ESP_CONSOLE_USB_CDC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "431: _exit:",
          "432:     return ret;",
          "433: }",
          "435: #if CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "436: static esp_err_t esp_console_repl_usb_serial_jtag_delete(esp_console_repl_t *repl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445: #endif // CONFIG_ESP_CONSOLE_USB_CDC",
          "",
          "---------------"
        ],
        "examples/system/console/advanced/main/console_example_main.c||examples/system/console/advanced/main/console_example_main.c": [
          "File: examples/system/console/advanced/main/console_example_main.c -> examples/system/console/advanced/main/console_example_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #error This example is incompatible with USB CDC console. Please try \"console_usb\" example instead.",
          "28: #endif // CONFIG_ESP_CONSOLE_USB_CDC",
          "30: static const char* TAG = \"example\";",
          "31: #define PROMPT_STR CONFIG_IDF_TARGET",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #ifdef CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "31: #error This example is incompatible with USB serial JTAG console.",
          "32: #endif // CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG",
          "",
          "---------------"
        ],
        "examples/wifi/ftm/main/ftm_main.c||examples/wifi/ftm/main/ftm_main.c": [
          "File: examples/wifi/ftm/main/ftm_main.c -> examples/wifi/ftm/main/ftm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     esp_console_repl_t *repl = NULL;",
          "662:     esp_console_repl_config_t repl_config = ESP_CONSOLE_REPL_CONFIG_DEFAULT();",
          "664:     repl_config.prompt = \"ftm>\";",
          "666:     ESP_ERROR_CHECK(esp_console_new_repl_uart(&uart_config, &repl_config, &repl));",
          "668:     register_system();",
          "669:     register_wifi();",
          "",
          "[Removed Lines]",
          "663:     esp_console_dev_uart_config_t uart_config = ESP_CONSOLE_DEV_UART_CONFIG_DEFAULT();",
          "",
          "[Added Lines]",
          "666: #if defined(CONFIG_ESP_CONSOLE_UART_DEFAULT) || defined(CONFIG_ESP_CONSOLE_UART_CUSTOM)",
          "667:     esp_console_dev_uart_config_t uart_config = ESP_CONSOLE_DEV_UART_CONFIG_DEFAULT();",
          "670: #elif defined(CONFIG_ESP_CONSOLE_USB_CDC)",
          "671:     esp_console_dev_usb_cdc_config_t hw_config = ESP_CONSOLE_DEV_CDC_CONFIG_DEFAULT();",
          "672:     ESP_ERROR_CHECK(esp_console_new_repl_usb_cdc(&hw_config, &repl_config, &repl));",
          "674: #elif defined(CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG)",
          "675:     esp_console_dev_usb_serial_jtag_config_t hw_config = ESP_CONSOLE_DEV_USB_SERIAL_JTAG_CONFIG_DEFAULT();",
          "676:     ESP_ERROR_CHECK(esp_console_new_repl_usb_serial_jtag(&hw_config, &repl_config, &repl));",
          "677: #else",
          "678: #error Unsupported console type",
          "679: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62dc1fdf04148cb3c36dd62c8b90554e9bb3748b",
      "candidate_info": {
        "commit_hash": "62dc1fdf04148cb3c36dd62c8b90554e9bb3748b",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/62dc1fdf04148cb3c36dd62c8b90554e9bb3748b",
        "files": [
          "components/nvs_flash/src/nvs_page.cpp"
        ],
        "message": "fix(nvs): corrected findItem to return BLOB_DATA when chunkIndex = CHUNK_ANY",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_page.cpp||components/nvs_flash/src/nvs_page.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_page.cpp||components/nvs_flash/src/nvs_page.cpp": [
          "File: components/nvs_flash/src/nvs_page.cpp -> components/nvs_flash/src/nvs_page.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "904:         end = ENTRY_COUNT;",
          "905:     }",
          "908:         size_t cachedIndex = mHashList.find(start, Item(nsIndex, datatype, 0, key, chunkIdx));",
          "909:         if (cachedIndex < ENTRY_COUNT) {",
          "910:             start = cachedIndex;",
          "",
          "[Removed Lines]",
          "907:     if (nsIndex != NS_ANY && datatype != ItemType::ANY && key != NULL) {",
          "",
          "[Added Lines]",
          "910:     if (nsIndex != NS_ANY && key != NULL && (datatype == ItemType::BLOB_DATA && chunkIdx != CHUNK_ANY)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959:                 && item.chunkIndex != chunkIdx) {",
          "960:             continue;",
          "961:         }",
          "964:         if (datatype == ItemType::BLOB_IDX",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:         if (chunkIdx == CHUNK_ANY",
          "969:                 && datatype == ItemType::BLOB_DATA",
          "970:                 && item.datatype != ItemType::BLOB_DATA) {",
          "971:             continue;",
          "972:         }",
          "976:         if (chunkIdx == CHUNK_ANY",
          "977:                 && datatype == ItemType::BLOB",
          "978:                 && item.datatype == ItemType::BLOB_IDX) {",
          "979:             return ESP_ERR_NVS_TYPE_MISMATCH;",
          "980:         }",
          "984:         if (chunkIdx == CHUNK_ANY",
          "985:                 && datatype == ItemType::BLOB",
          "986:                 && item.datatype == ItemType::BLOB_DATA) {",
          "987:             continue;",
          "988:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f208fd0c05b6eef411fe897c1246b27d12680f8",
      "candidate_info": {
        "commit_hash": "8f208fd0c05b6eef411fe897c1246b27d12680f8",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/8f208fd0c05b6eef411fe897c1246b27d12680f8",
        "files": [
          "components/usb/usbh.c"
        ],
        "message": "fix(usb): Fix bug where usbh_process() misses an event\n\nThis commit fixes a bug where if multiple concurrent USBH API calls trigger\nmultiple events on the same device, some events will be lost. As a result,\nthose lost events don't get processed by the subsequent usbh_process() call.",
        "before_after_code_files": [
          "components/usb/usbh.c||components/usb/usbh.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/usb/usbh.c||components/usb/usbh.c": [
          "File: components/usb/usbh.c -> components/usb/usbh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:         dev_obj->dynamic.flags.in_pending_list = 1;",
          "208:         call_notif_cb = true;",
          "209:     } else {",
          "210:         call_notif_cb = false;",
          "211:     }",
          "212:     return call_notif_cb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:         dev_obj->dynamic.action_flags |= action_flags;",
          "",
          "---------------"
        ]
      }
    }
  ]
}