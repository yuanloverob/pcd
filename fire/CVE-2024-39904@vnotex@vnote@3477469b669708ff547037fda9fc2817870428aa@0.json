{
  "cve_id": "CVE-2024-39904",
  "cve_desc": "VNote is a note-taking platform. Prior to 3.18.1, a code execution vulnerability existed in VNote, which allowed an attacker to execute arbitrary programs on the victim's system. A crafted URI can be used in a note to perform this attack using file:/// as a link. For example, file:///C:/WINDOWS/system32/cmd.exe. This allows attackers to execute arbitrary programs by embedding a reference to a local executable file such as file:///C:/WINDOWS/system32/cmd.exe and file:///C:/WINDOWS/system32/calc.exe. This vulnerability can be exploited by creating and sharing specially crafted notes. An attacker could send a crafted note file and perform further attacks. This vulnerability is fixed in 3.18.1.",
  "repo": "vnotex/vnote",
  "patch_hash": "3477469b669708ff547037fda9fc2817870428aa",
  "patch_info": {
    "commit_hash": "3477469b669708ff547037fda9fc2817870428aa",
    "repo": "vnotex/vnote",
    "commit_url": "https://github.com/vnotex/vnote/commit/3477469b669708ff547037fda9fc2817870428aa",
    "files": [
      "src/utils/widgetutils.cpp"
    ],
    "message": "check link before open",
    "before_after_code_files": [
      "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
    ]
  },
  "patch_diff": {
    "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp": [
      "File: src/utils/widgetutils.cpp -> src/utils/widgetutils.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include <QFormLayout>",
      "29: #include <core/global.h>",
      "31: using namespace vnotex;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include <widgets/messageboxhelper.h>",
      "31: #include <widgets/mainwindow.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76: void WidgetUtils::openUrlByDesktop(const QUrl &p_url)",
      "77: {",
      "78:     QDesktopServices::openUrl(p_url);",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:     const auto scheme = p_url.scheme();",
      "81:     if (scheme != \"http\" && scheme != \"https\") {",
      "83:         int ret = MessageBoxHelper::questionYesNo(MessageBoxHelper::Warning,",
      "84:                                                   MainWindow::tr(\"Are you sure to open link (%1)?\").arg(p_url.toString()),",
      "85:                                                   MainWindow::tr(\"Malicious link might do harm to your device.\"),",
      "86:                                                   QString(),",
      "87:                                                   nullptr);",
      "88:         if (ret == QMessageBox::No) {",
      "89:             return;",
      "90:         }",
      "91:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7600fa7f7e8e08c63b84ecede559041b1b4b187",
      "candidate_info": {
        "commit_hash": "a7600fa7f7e8e08c63b84ecede559041b1b4b187",
        "repo": "vnotex/vnote",
        "commit_url": "https://github.com/vnotex/vnote/commit/a7600fa7f7e8e08c63b84ecede559041b1b4b187",
        "files": [
          ".github/workflows/ci-macos.yml",
          "src/CPackMacDeployQt.cmake.in",
          "src/utils/widgetutils.cpp"
        ],
        "message": "codesign --remove-signature will cause broken binary (#2530)\n\n* codesign --remove-signature will cause broken binary\n\n* fix",
        "before_after_code_files": [
          "src/CPackMacDeployQt.cmake.in||src/CPackMacDeployQt.cmake.in",
          "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
          ],
          "candidate": [
            "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/CPackMacDeployQt.cmake.in||src/CPackMacDeployQt.cmake.in": [
          "File: src/CPackMacDeployQt.cmake.in -> src/CPackMacDeployQt.cmake.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:     WORKING_DIRECTORY ${CPACK_PACKAGE_DIRECTORY}",
          "3: )",
          "4: execute_process(COMMAND \"${MACDEPLOYQT_EXECUTABLE}\" ${CMAKE_CURRENT_BINARY_DIR}/VNote.app -dmg",
          "",
          "[Removed Lines]",
          "1: execute_process(COMMAND \"codesign\" --remove-signature ${CMAKE_CURRENT_BINARY_DIR}/VNote.app",
          "",
          "[Added Lines]",
          "1: execute_process(COMMAND \"optool\" strip -t ${CMAKE_CURRENT_BINARY_DIR}/VNote.app",
          "",
          "---------------"
        ],
        "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp": [
          "File: src/utils/widgetutils.cpp -> src/utils/widgetutils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <QPushButton>",
          "26: #include <QSplitter>",
          "27: #include <QFormLayout>",
          "29: #include <core/global.h>",
          "30: #include <widgets/messageboxhelper.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <QFileInfo>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: void WidgetUtils::openUrlByDesktop(const QUrl &p_url)",
          "79: {",
          "80:     const auto scheme = p_url.scheme();",
          "91:     }",
          "94: }",
          "96: bool WidgetUtils::processKeyEventLikeVi(QWidget *p_widget,",
          "",
          "[Removed Lines]",
          "81:     if (scheme != \"http\" && scheme != \"https\") {",
          "83:         int ret = MessageBoxHelper::questionYesNo(MessageBoxHelper::Warning,",
          "84:                                                   MainWindow::tr(\"Are you sure to open link (%1)?\").arg(p_url.toString()),",
          "85:                                                   MainWindow::tr(\"Malicious link might do harm to your device.\"),",
          "86:                                                   QString(),",
          "87:                                                   nullptr);",
          "88:         if (ret == QMessageBox::No) {",
          "89:             return;",
          "90:         }",
          "93:     QDesktopServices::openUrl(p_url);",
          "",
          "[Added Lines]",
          "82:     if (scheme == \"http\" || scheme == \"https\" ||",
          "83:         (p_url.isLocalFile() && QFileInfo(p_url.toLocalFile()).isDir())) {",
          "84:         QDesktopServices::openUrl(p_url);",
          "85:         return;",
          "89:     int ret = MessageBoxHelper::questionYesNo(MessageBoxHelper::Warning,",
          "90:                                               MainWindow::tr(\"Are you sure to open link (%1)?\").arg(p_url.toString()),",
          "91:                                               MainWindow::tr(\"Malicious link might do harm to your device.\"),",
          "92:                                               QString(),",
          "93:                                               nullptr);",
          "94:     if (ret == QMessageBox::No) {",
          "95:         return;",
          "96:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5da9268aa725bb318ef321244b75f355d3b34bfe",
      "candidate_info": {
        "commit_hash": "5da9268aa725bb318ef321244b75f355d3b34bfe",
        "repo": "vnotex/vnote",
        "commit_url": "https://github.com/vnotex/vnote/commit/5da9268aa725bb318ef321244b75f355d3b34bfe",
        "files": [
          "src/utils/widgetutils.cpp"
        ],
        "message": "fix open alert",
        "before_after_code_files": [
          "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
          ],
          "candidate": [
            "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/utils/widgetutils.cpp||src/utils/widgetutils.cpp": [
          "File: src/utils/widgetutils.cpp -> src/utils/widgetutils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: void WidgetUtils::openUrlByDesktop(const QUrl &p_url)",
          "80: {",
          "81:     const auto scheme = p_url.scheme();",
          "86:     }",
          "97: }",
          "99: bool WidgetUtils::processKeyEventLikeVi(QWidget *p_widget,",
          "",
          "[Removed Lines]",
          "82:     if (scheme == \"http\" || scheme == \"https\" ||",
          "83:         (p_url.isLocalFile() && QFileInfo(p_url.toLocalFile()).isDir())) {",
          "84:         QDesktopServices::openUrl(p_url);",
          "85:         return;",
          "89:     int ret = MessageBoxHelper::questionYesNo(MessageBoxHelper::Warning,",
          "90:                                               MainWindow::tr(\"Are you sure to open link (%1)?\").arg(p_url.toString()),",
          "91:                                               MainWindow::tr(\"Malicious link might do harm to your device.\"),",
          "92:                                               QString(),",
          "93:                                               nullptr);",
          "94:     if (ret == QMessageBox::No) {",
          "95:         return;",
          "96:     }",
          "",
          "[Added Lines]",
          "82:     if (scheme != \"http\" && scheme != \"https\" &&",
          "83:         !(p_url.isLocalFile() && QFileInfo(p_url.toLocalFile()).isDir())) {",
          "85:         int ret = MessageBoxHelper::questionYesNo(MessageBoxHelper::Warning,",
          "86:                                                   MainWindow::tr(\"Are you sure to open link (%1)?\").arg(p_url.toString()),",
          "87:                                                   MainWindow::tr(\"Malicious link might do harm to your device.\"),",
          "88:                                                   QString(),",
          "89:                                                   nullptr);",
          "90:         if (ret == QMessageBox::No) {",
          "91:             return;",
          "92:         }",
          "95:     QDesktopServices::openUrl(p_url);",
          "",
          "---------------"
        ]
      }
    }
  ]
}