{
  "cve_id": "CVE-2023-31436",
  "cve_desc": "qfq_change_class in net/sched/sch_qfq.c in the Linux kernel before 6.2.13 allows an out-of-bounds write because lmax can exceed QFQ_MIN_LMAX.",
  "repo": "torvalds/linux",
  "patch_hash": "3037933448f60f9acb705997eae62013ecb81e0d",
  "patch_info": {
    "commit_hash": "3037933448f60f9acb705997eae62013ecb81e0d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3037933448f60f9acb705997eae62013ecb81e0d",
    "files": [
      "net/sched/sch_qfq.c"
    ],
    "message": "net: sched: sch_qfq: prevent slab-out-of-bounds in qfq_activate_agg\n\nIf the TCA_QFQ_LMAX value is not offered through nlattr, lmax is determined by the MTU value of the network device.\nThe MTU of the loopback device can be set up to 2^31-1.\nAs a result, it is possible to have an lmax value that exceeds QFQ_MIN_LMAX.\n\nDue to the invalid lmax value, an index is generated that exceeds the QFQ_MAX_INDEX(=24) value, causing out-of-bounds read/write errors.\n\nThe following reports a oob access:\n\n[   84.582666] BUG: KASAN: slab-out-of-bounds in qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)\n[   84.583267] Read of size 4 at addr ffff88810f676948 by task ping/301\n[   84.583686]\n[   84.583797] CPU: 3 PID: 301 Comm: ping Not tainted 6.3.0-rc5 #1\n[   84.584164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014\n[   84.584644] Call Trace:\n[   84.584787]  <TASK>\n[   84.584906] dump_stack_lvl (lib/dump_stack.c:107 (discriminator 1))\n[   84.585108] print_report (mm/kasan/report.c:320 mm/kasan/report.c:430)\n[   84.585570] kasan_report (mm/kasan/report.c:538)\n[   84.585988] qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)\n[   84.586599] qfq_enqueue (net/sched/sch_qfq.c:1255)\n[   84.587607] dev_qdisc_enqueue (net/core/dev.c:3776)\n[   84.587749] __dev_queue_xmit (./include/net/sch_generic.h:186 net/core/dev.c:3865 net/core/dev.c:4212)\n[   84.588763] ip_finish_output2 (./include/net/neighbour.h:546 net/ipv4/ip_output.c:228)\n[   84.589460] ip_output (net/ipv4/ip_output.c:430)\n[   84.590132] ip_push_pending_frames (./include/net/dst.h:444 net/ipv4/ip_output.c:126 net/ipv4/ip_output.c:1586 net/ipv4/ip_output.c:1606)\n[   84.590285] raw_sendmsg (net/ipv4/raw.c:649)\n[   84.591960] sock_sendmsg (net/socket.c:724 net/socket.c:747)\n[   84.592084] __sys_sendto (net/socket.c:2142)\n[   84.593306] __x64_sys_sendto (net/socket.c:2150)\n[   84.593779] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n[   84.593902] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\n[   84.594070] RIP: 0033:0x7fe568032066\n[   84.594192] Code: 0e 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 41 89 ca 64 8b 04 25 18 00 00 00 85 c09[ 84.594796] RSP: 002b:00007ffce388b4e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\n\nCode starting with the faulting instruction\n===========================================\n[   84.595047] RAX: ffffffffffffffda RBX: 00007ffce388cc70 RCX: 00007fe568032066\n[   84.595281] RDX: 0000000000000040 RSI: 00005605fdad6d10 RDI: 0000000000000003\n[   84.595515] RBP: 00005605fdad6d10 R08: 00007ffce388eeec R09: 0000000000000010\n[   84.595749] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040\n[   84.595984] R13: 00007ffce388cc30 R14: 00007ffce388b4f0 R15: 0000001d00000001\n[   84.596218]  </TASK>\n[   84.596295]\n[   84.596351] Allocated by task 291:\n[   84.596467] kasan_save_stack (mm/kasan/common.c:46)\n[   84.596597] kasan_set_track (mm/kasan/common.c:52)\n[   84.596725] __kasan_kmalloc (mm/kasan/common.c:384)\n[   84.596852] __kmalloc_node (./include/linux/kasan.h:196 mm/slab_common.c:967 mm/slab_common.c:974)\n[   84.596979] qdisc_alloc (./include/linux/slab.h:610 ./include/linux/slab.h:731 net/sched/sch_generic.c:938)\n[   84.597100] qdisc_create (net/sched/sch_api.c:1244)\n[   84.597222] tc_modify_qdisc (net/sched/sch_api.c:1680)\n[   84.597357] rtnetlink_rcv_msg (net/core/rtnetlink.c:6174)\n[   84.597495] netlink_rcv_skb (net/netlink/af_netlink.c:2574)\n[   84.597627] netlink_unicast (net/netlink/af_netlink.c:1340 net/netlink/af_netlink.c:1365)\n[   84.597759] netlink_sendmsg (net/netlink/af_netlink.c:1942)\n[   84.597891] sock_sendmsg (net/socket.c:724 net/socket.c:747)\n[   84.598016] ____sys_sendmsg (net/socket.c:2501)\n[   84.598147] ___sys_sendmsg (net/socket.c:2557)\n[   84.598275] __sys_sendmsg (./include/linux/file.h:31 net/socket.c:2586)\n[   84.598399] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n[   84.598520] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\n[   84.598688]\n[   84.598744] The buggy address belongs to the object at ffff88810f674000\n[   84.598744]  which belongs to the cache kmalloc-8k of size 8192\n[   84.599135] The buggy address is located 2664 bytes to the right of\n[   84.599135]  allocated 7904-byte region [ffff88810f674000, ffff88810f675ee0)\n[   84.599544]\n[   84.599598] The buggy address belongs to the physical page:\n[   84.599777] page:00000000e638567f refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x10f670\n[   84.600074] head:00000000e638567f order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0\n[   84.600330] flags: 0x200000000010200(slab|head|node=0|zone=2)\n[   84.600517] raw: 0200000000010200 ffff888100043180 dead000000000122 0000000000000000\n[   84.600764] raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000\n[   84.601009] page dumped because: kasan: bad access detected\n[   84.601187]\n[   84.601241] Memory state around the buggy address:\n[   84.601396]  ffff88810f676800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.601620]  ffff88810f676880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.601845] >ffff88810f676900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602069]                                               ^\n[   84.602243]  ffff88810f676980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602468]  ffff88810f676a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602693] ==================================================================\n[   84.602924] Disabling lock debugging due to kernel taint\n\nFixes: 3015f3d2a3cd (\"pkt_sched: enable QFQ to support TSO/GSO\")\nReported-by: Gwangun Jung <exsociety@gmail.com>\nSigned-off-by: Gwangun Jung <exsociety@gmail.com>\nAcked-by: Jamal Hadi Salim<jhs@mojatatu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/sched/sch_qfq.c||net/sched/sch_qfq.c"
    ]
  },
  "patch_diff": {
    "net/sched/sch_qfq.c||net/sched/sch_qfq.c": [
      "File: net/sched/sch_qfq.c -> net/sched/sch_qfq.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "421:  } else",
      "422:   weight = 1;",
      "425:   lmax = nla_get_u32(tb[TCA_QFQ_LMAX]);",
      "431:   lmax = psched_mtu(qdisc_dev(sch));",
      "433:  inv_w = ONE_FP / weight;",
      "434:  weight = ONE_FP / inv_w;",
      "",
      "[Removed Lines]",
      "424:  if (tb[TCA_QFQ_LMAX]) {",
      "426:   if (lmax < QFQ_MIN_LMAX || lmax > (1UL << QFQ_MTU_SHIFT)) {",
      "427:    pr_notice(\"qfq: invalid max length %u\\n\", lmax);",
      "428:    return -EINVAL;",
      "429:   }",
      "430:  } else",
      "",
      "[Added Lines]",
      "424:  if (tb[TCA_QFQ_LMAX])",
      "426:  else",
      "429:  if (lmax < QFQ_MIN_LMAX || lmax > (1UL << QFQ_MTU_SHIFT)) {",
      "430:   pr_notice(\"qfq: invalid max length %u\\n\", lmax);",
      "431:   return -EINVAL;",
      "432:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc4efd3dd2ac9f89143e5d881609747ecff04164",
      "candidate_info": {
        "commit_hash": "cc4efd3dd2ac9f89143e5d881609747ecff04164",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cc4efd3dd2ac9f89143e5d881609747ecff04164",
        "files": [
          "fs/erofs/zmap.c"
        ],
        "message": "erofs: stop parsing non-compact HEAD index if clusterofs is invalid\n\nSyzbot generated a crafted image [1] with a non-compact HEAD index of\nclusterofs 33024 while valid numbers should be 0 ~ lclustersize-1,\nwhich causes the following unexpected behavior as below:\n\n BUG: unable to handle page fault for address: fffff52101a3fff9\n #PF: supervisor read access in kernel mode\n #PF: error_code(0x0000) - not-present page\n PGD 23ffed067 P4D 23ffed067 PUD 0\n Oops: 0000 [#1] PREEMPT SMP KASAN\n CPU: 1 PID: 4398 Comm: kworker/u5:1 Not tainted 6.3.0-rc6-syzkaller-g09a9639e56c0 #0\n Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/30/2023\n Workqueue: erofs_worker z_erofs_decompressqueue_work\n RIP: 0010:z_erofs_decompress_queue+0xb7e/0x2b40\n ...\n Call Trace:\n  <TASK>\n  z_erofs_decompressqueue_work+0x99/0xe0\n  process_one_work+0x8f6/0x1170\n  worker_thread+0xa63/0x1210\n  kthread+0x270/0x300\n  ret_from_fork+0x1f/0x30\n\nNote that normal images or images using compact indexes are not\nimpacted.  Let's fix this now.\n\n[1] https://lore.kernel.org/r/000000000000ec75b005ee97fbaa@google.com\n\nReported-and-tested-by: syzbot+aafb3f37cfeb6534c4ac@syzkaller.appspotmail.com\nFixes: 02827e1796b3 (\"staging: erofs: add erofs_map_blocks_iter\")\nFixes: 152a333a5895 (\"staging: erofs: add compacted compression indexes support\")\nSigned-off-by: Gao Xiang <hsiangkao@linux.alibaba.com>\nReviewed-by: Chao Yu <chao@kernel.org>\nLink: https://lore.kernel.org/r/20230410173714.104604-1-hsiangkao@linux.alibaba.com",
        "before_after_code_files": [
          "fs/erofs/zmap.c||fs/erofs/zmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/erofs/zmap.c||fs/erofs/zmap.c": [
          "File: fs/erofs/zmap.c -> fs/erofs/zmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   if (advise & Z_EROFS_LI_PARTIAL_REF)",
          "86:    m->partialref = true;",
          "87:   m->clusterofs = le16_to_cpu(di->di_clusterofs);",
          "88:   m->pblk = le32_to_cpu(di->di_u.blkaddr);",
          "89:   break;",
          "90:  default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   if (m->clusterofs >= 1 << vi->z_logical_clusterbits) {",
          "89:    DBG_BUGON(1);",
          "90:    return -EFSCORRUPTED;",
          "91:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "158810b261d02fc7dd92ca9c392d8f8a211a2401",
      "candidate_info": {
        "commit_hash": "158810b261d02fc7dd92ca9c392d8f8a211a2401",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/158810b261d02fc7dd92ca9c392d8f8a211a2401",
        "files": [
          "net/sched/sch_qfq.c"
        ],
        "message": "net/sched: sch_qfq: reintroduce lmax bound check for MTU\n\n25369891fcef deletes a check for the case where no 'lmax' is\nspecified which 3037933448f6 previously fixed as 'lmax'\ncould be set to the device's MTU without any bound checking\nfor QFQ_LMAX_MIN and QFQ_LMAX_MAX. Therefore, reintroduce the check.\n\nFixes: 25369891fcef (\"net/sched: sch_qfq: refactor parsing of netlink parameters\")\nAcked-by: Jamal Hadi Salim <jhs@mojatatu.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Pedro Tammela <pctammela@mojatatu.com>\nReviewed-by: Simon Horman <simon.horman@corigine.com>\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>",
        "before_after_code_files": [
          "net/sched/sch_qfq.c||net/sched/sch_qfq.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/sched/sch_qfq.c||net/sched/sch_qfq.c"
          ],
          "candidate": [
            "net/sched/sch_qfq.c||net/sched/sch_qfq.c"
          ]
        }
      },
      "candidate_diff": {
        "net/sched/sch_qfq.c||net/sched/sch_qfq.c": [
          "File: net/sched/sch_qfq.c -> net/sched/sch_qfq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:  else",
          "424:   weight = 1;",
          "427:   lmax = nla_get_u32(tb[TCA_QFQ_LMAX]);",
          "429:   lmax = psched_mtu(qdisc_dev(sch));",
          "431:  inv_w = ONE_FP / weight;",
          "432:  weight = ONE_FP / inv_w;",
          "",
          "[Removed Lines]",
          "426:  if (tb[TCA_QFQ_LMAX])",
          "428:  else",
          "",
          "[Added Lines]",
          "426:  if (tb[TCA_QFQ_LMAX]) {",
          "428:  } else {",
          "431:   if (lmax < QFQ_MIN_LMAX || lmax > QFQ_MAX_LMAX) {",
          "432:    NL_SET_ERR_MSG_MOD(extack,",
          "433:         \"MTU size out of bounds for qfq\");",
          "434:    return -EINVAL;",
          "435:   }",
          "436:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}