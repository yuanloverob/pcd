{
  "cve_id": "CVE-2020-5310",
  "cve_desc": "libImaging/TiffDecode.c in Pillow before 6.2.2 has a TIFF decoding integer overflow, related to realloc.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "4e2def2539ec13e53a82e06c4b3daf00454100c4",
  "patch_info": {
    "commit_hash": "4e2def2539ec13e53a82e06c4b3daf00454100c4",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/4e2def2539ec13e53a82e06c4b3daf00454100c4",
    "files": [
      "Tests/images/tiff_overflow_rows_per_strip.tif",
      "Tests/test_file_libtiff.py",
      "src/libImaging/TiffDecode.c"
    ],
    "message": "Overflow checks for realloc for tiff decoding",
    "before_after_code_files": [
      "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py",
      "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c"
    ]
  },
  "patch_diff": {
    "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py": [
      "File: Tests/test_file_libtiff.py -> Tests/test_file_libtiff.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "870:         out.seek(0)",
      "871:         with Image.open(out) as im:",
      "872:             im.load()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "874:     def test_realloc_overflow(self):",
      "875:         TiffImagePlugin.READ_LIBTIFF = True",
      "876:         with Image.open(\"Tests/images/tiff_overflow_rows_per_strip.tif\") as im:",
      "877:             with self.assertRaises(IOError) as e:",
      "878:                 im.load()",
      "880:             # Assert that the error code is IMAGING_CODEC_MEMORY",
      "881:             self.assertEqual(str(e.exception), \"-9\")",
      "882:         TiffImagePlugin.READ_LIBTIFF = False",
      "",
      "---------------"
    ],
    "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c": [
      "File: src/libImaging/TiffDecode.c -> src/libImaging/TiffDecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:         row_byte_size = (tile_width * state->bits + 7) / 8;",
      "360:             state->errcode = IMAGING_CODEC_MEMORY;",
      "361:             TIFFClose(tiff);",
      "362:             return -1;",
      "363:         }",
      "366:         new_data = realloc (state->buffer, state->bytes);",
      "367:         if (!new_data) {",
      "368:             state->errcode = IMAGING_CODEC_MEMORY;",
      "",
      "[Removed Lines]",
      "356:         state->bytes = row_byte_size * tile_length;",
      "359:         if (state->bytes > INT_MAX - 1) {",
      "",
      "[Added Lines]",
      "358:         if (INT_MAX / row_byte_size < tile_length) {",
      "364:         state->bytes = row_byte_size * tile_length;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:         row_byte_size = (state->xsize * state->bits + 7) / 8;",
      "418:         state->bytes = rows_per_strip * row_byte_size;",
      "420:         TRACE((\"StripSize: %d \\n\", state->bytes));",
      "423:         new_data = realloc (state->buffer, state->bytes);",
      "424:         if (!new_data) {",
      "425:             state->errcode = IMAGING_CODEC_MEMORY;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:         if (INT_MAX / row_byte_size < rows_per_strip) {",
      "423:             state->errcode = IMAGING_CODEC_MEMORY;",
      "424:             TIFFClose(tiff);",
      "425:             return -1;",
      "426:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9c68540dc7091c644860a7ed31ec4b79dd9363e",
      "candidate_info": {
        "commit_hash": "b9c68540dc7091c644860a7ed31ec4b79dd9363e",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/b9c68540dc7091c644860a7ed31ec4b79dd9363e",
        "files": [
          "Tests/images/tiff_overflow_rows_per_strip.tif",
          "Tests/test_file_libtiff.py",
          "src/libImaging/TiffDecode.c"
        ],
        "message": "Overflow checks for realloc for tiff decoding",
        "before_after_code_files": [
          "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py",
          "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py",
            "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c"
          ],
          "candidate": [
            "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py",
            "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py": [
          "File: Tests/test_file_libtiff.py -> Tests/test_file_libtiff.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:         out.seek(0)",
          "842:         with Image.open(out) as im:",
          "843:             im.load()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "845:     def test_realloc_overflow(self):",
          "846:         TiffImagePlugin.READ_LIBTIFF = True",
          "847:         with Image.open(\"Tests/images/tiff_overflow_rows_per_strip.tif\") as im:",
          "848:             with self.assertRaises(IOError) as e:",
          "849:                 im.load()",
          "851:             # Assert that the error code is IMAGING_CODEC_MEMORY",
          "852:             self.assertEqual(str(e.exception), \"-9\")",
          "853:         TiffImagePlugin.READ_LIBTIFF = False",
          "",
          "---------------"
        ],
        "src/libImaging/TiffDecode.c||src/libImaging/TiffDecode.c": [
          "File: src/libImaging/TiffDecode.c -> src/libImaging/TiffDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:         row_byte_size = (tile_width * state->bits + 7) / 8;",
          "360:             state->errcode = IMAGING_CODEC_MEMORY;",
          "361:             TIFFClose(tiff);",
          "362:             return -1;",
          "363:         }",
          "366:         new_data = realloc (state->buffer, state->bytes);",
          "367:         if (!new_data) {",
          "368:             state->errcode = IMAGING_CODEC_MEMORY;",
          "",
          "[Removed Lines]",
          "356:         state->bytes = row_byte_size * tile_length;",
          "359:         if (state->bytes > INT_MAX - 1) {",
          "",
          "[Added Lines]",
          "358:         if (INT_MAX / row_byte_size < tile_length) {",
          "364:         state->bytes = row_byte_size * tile_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:         row_byte_size = (state->xsize * state->bits + 7) / 8;",
          "418:         state->bytes = rows_per_strip * row_byte_size;",
          "420:         TRACE((\"StripSize: %d \\n\", state->bytes));",
          "423:         new_data = realloc (state->buffer, state->bytes);",
          "424:         if (!new_data) {",
          "425:             state->errcode = IMAGING_CODEC_MEMORY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422:         if (INT_MAX / row_byte_size < rows_per_strip) {",
          "423:             state->errcode = IMAGING_CODEC_MEMORY;",
          "424:             TIFFClose(tiff);",
          "425:             return -1;",
          "426:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}