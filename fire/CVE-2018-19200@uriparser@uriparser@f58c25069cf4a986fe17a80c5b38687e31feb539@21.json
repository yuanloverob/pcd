{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2404a429bab407bf5c043524f82c58cd49206f9",
      "candidate_info": {
        "commit_hash": "c2404a429bab407bf5c043524f82c58cd49206f9",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/c2404a429bab407bf5c043524f82c58cd49206f9",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "docs: Add more links, mostly related to new *Mm functions",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "496dfac247900bc41c7bec7405dd85eed0095cd7",
      "candidate_info": {
        "commit_hash": "496dfac247900bc41c7bec7405dd85eed0095cd7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/496dfac247900bc41c7bec7405dd85eed0095cd7",
        "files": [
          "configure.ac"
        ],
        "message": "configure.ac: Simplify info/config output",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: AC_CONFIG_HEADERS([config.h])",
          "152: AC_OUTPUT",
          "155: ===========================================================================",
          "157: Configuration",
          "",
          "[Removed Lines]",
          "154: cat <<CONFIG",
          "",
          "[Added Lines]",
          "154: cat <<INFO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   Test suite ........... ${URI_TEST_YESNO}",
          "163:   Documentation ........ ${URI_DOC_YESNO}",
          "168: Continue with",
          "169:   make",
          "170:   make check",
          "",
          "[Removed Lines]",
          "165: CONFIG",
          "167: cat <<\"INFO\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efcd52629a14ba1a9937081103bb496aefdfa9af",
      "candidate_info": {
        "commit_hash": "efcd52629a14ba1a9937081103bb496aefdfa9af",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/efcd52629a14ba1a9937081103bb496aefdfa9af",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParsePathAbsEmpty",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "176: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "177: static const URI_CHAR * URI_FUNC(ParsePchar)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1372:    if (afterAuthority == NULL) {",
          "1373:     return NULL;",
          "1374:    }",
          "1377:    URI_FUNC(FixEmptyTrailSegment)(state->uri, memory);",
          "",
          "[Removed Lines]",
          "1375:    afterPathAbsEmpty = URI_FUNC(ParsePathAbsEmpty)(state, afterAuthority, afterLast);",
          "",
          "[Added Lines]",
          "1375:    afterPathAbsEmpty = URI_FUNC(ParsePathAbsEmpty)(state, afterAuthority, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1397:  if (first >= afterLast) {",
          "1398:   return afterLast;",
          "1399:  }",
          "",
          "[Removed Lines]",
          "1394: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1394: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(",
          "1395:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1396:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410:     URI_FUNC(StopMalloc)(state);",
          "1411:     return NULL;",
          "1412:    }",
          "1414:   }",
          "1416:  default:",
          "",
          "[Removed Lines]",
          "1413:    return URI_FUNC(ParsePathAbsEmpty)(state, afterSegment, afterLast);",
          "",
          "[Added Lines]",
          "1413:    return URI_FUNC(ParsePathAbsEmpty)(state, afterSegment, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dfcd987721a6134b675dfc7235bca5a9ea18ae8",
      "candidate_info": {
        "commit_hash": "4dfcd987721a6134b675dfc7235bca5a9ea18ae8",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/4dfcd987721a6134b675dfc7235bca5a9ea18ae8",
        "files": [
          "ChangeLog",
          "Makefile.am"
        ],
        "message": "Bump soname from 1:22:0 to 1:23:0 for upcoming release (#36)",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  include/uriparser/UriIp4.h",
          "38: if WIN32",
          "39: liburiparser_la_LDFLAGS += -no-undefined",
          "40: endif",
          "",
          "[Removed Lines]",
          "37: liburiparser_la_LDFLAGS = -version-info 1:22:0",
          "",
          "[Added Lines]",
          "37: liburiparser_la_LDFLAGS = -version-info 1:23:0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64e651691ae4803fed63b0382f8a3e077a90dae6",
      "candidate_info": {
        "commit_hash": "64e651691ae4803fed63b0382f8a3e077a90dae6",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/64e651691ae4803fed63b0382f8a3e077a90dae6",
        "files": [
          "configure.ac",
          "test/VersionSuite.cpp"
        ],
        "message": "Move config.h out of test folder for use by UriMemory.c",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "test/VersionSuite.cpp||test/VersionSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  doc/Doxyfile",
          "159: ])",
          "160: AC_CONFIG_FILES([doc/release.sh], [chmod a+x doc/release.sh])",
          "162: AC_OUTPUT",
          "164: cat <<CONFIG",
          "",
          "[Removed Lines]",
          "161: AC_CONFIG_HEADERS([test/config.h])",
          "",
          "[Added Lines]",
          "161: AC_CONFIG_HEADERS([config.h])",
          "",
          "---------------"
        ],
        "test/VersionSuite.cpp||test/VersionSuite.cpp": [
          "File: test/VersionSuite.cpp -> test/VersionSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdio.h>",
          "30: #include <uriparser/UriBase.h>",
          "",
          "[Removed Lines]",
          "29: #include <config.h>  // for PACKAGE_VERSION",
          "",
          "[Added Lines]",
          "29: #include \"../config.h\"  // for PACKAGE_VERSION",
          "",
          "---------------"
        ]
      }
    }
  ]
}