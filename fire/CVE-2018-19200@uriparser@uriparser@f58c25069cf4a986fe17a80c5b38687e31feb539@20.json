{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5f49f78fa52f85b1e9979dba02405477cfffbde",
      "candidate_info": {
        "commit_hash": "a5f49f78fa52f85b1e9979dba02405477cfffbde",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a5f49f78fa52f85b1e9979dba02405477cfffbde",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParsePartHelperTwo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "176: static const URI_CHAR * URI_FUNC(ParsePathRootless)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:   return URI_FUNC(ParsePathRootless)(state, first, afterLast);",
          "365:  case _UT('/'):",
          "368:  default:",
          "369:   return first;",
          "",
          "[Removed Lines]",
          "366:   return URI_FUNC(ParsePartHelperTwo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "368:   return URI_FUNC(ParsePartHelperTwo)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1359:  if (first >= afterLast) {",
          "1360:   URI_FUNC(OnExitPartHelperTwo)(state);",
          "1361:   return afterLast;",
          "",
          "[Removed Lines]",
          "1356: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1358: static URI_INLINE const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(",
          "1359:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1360:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1948:  case _UT('/'):",
          "1949:   {",
          "1950:    const URI_CHAR * const afterPartHelperTwo",
          "1952:    if (afterPartHelperTwo == NULL) {",
          "1953:     return NULL;",
          "1954:    }",
          "",
          "[Removed Lines]",
          "1951:      = URI_FUNC(ParsePartHelperTwo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1953:      = URI_FUNC(ParsePartHelperTwo)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d1231dc5c6a932404da0231c40218f69e083676",
      "candidate_info": {
        "commit_hash": "4d1231dc5c6a932404da0231c40218f69e083676",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/4d1231dc5c6a932404da0231c40218f69e083676",
        "files": [
          "src/UriCommon.c",
          "src/UriNormalize.c",
          "src/UriParse.c",
          "src/UriQuery.c",
          "src/UriResolve.c",
          "src/UriShorten.c"
        ],
        "message": "src: Remove all direct use of libc malloc/realloc/free",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriNormalize.c||src/UriNormalize.c",
          "src/UriParse.c||src/UriParse.c",
          "src/UriQuery.c||src/UriQuery.c",
          "src/UriResolve.c||src/UriResolve.c",
          "src/UriShorten.c||src/UriShorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:       }",
          "175:       if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "177:       }",
          "179:      } else {",
          "181:       if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "183:       }",
          "185:       if (prev == NULL) {",
          "",
          "[Removed Lines]",
          "176:        free((URI_CHAR *)walker->text.first);",
          "178:       free(walker);",
          "182:        free((URI_CHAR *)walker->text.first);",
          "",
          "[Added Lines]",
          "177:        memory->free(memory, (URI_CHAR *)walker->text.first);",
          "179:       memory->free(memory, walker);",
          "183:        memory->free(memory, (URI_CHAR *)walker->text.first);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         walker->text.first = URI_FUNC(SafeToPointTo);",
          "190:         walker->text.afterLast = URI_FUNC(SafeToPointTo);",
          "191:        } else {",
          "194:         uri->pathHead = NULL;",
          "195:         uri->pathTail = NULL;",
          "",
          "[Removed Lines]",
          "192:         free(walker);",
          "",
          "[Added Lines]",
          "193:         memory->free(memory, walker);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:         walker->next->reserved = prevPrev;",
          "238:        } else {",
          "241:         if (segment == NULL) {",
          "242:          if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "244:          }",
          "247:          if (pathOwned && (prev->text.first != prev->text.afterLast)) {",
          "249:          }",
          "253:         }",
          "",
          "[Removed Lines]",
          "240:         URI_TYPE(PathSegment) * const segment = malloc(1 * sizeof(URI_TYPE(PathSegment)));",
          "243:           free((URI_CHAR *)walker->text.first);",
          "245:          free(walker);",
          "248:           free((URI_CHAR *)prev->text.first);",
          "250:          free(prev);",
          "",
          "[Added Lines]",
          "241:         URI_TYPE(PathSegment) * const segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "244:           memory->free(memory, (URI_CHAR *)walker->text.first);",
          "246:          memory->free(memory, walker);",
          "249:           memory->free(memory, (URI_CHAR *)prev->text.first);",
          "251:          memory->free(memory, prev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259:        }",
          "261:        if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "263:        }",
          "266:        if (pathOwned && (prev->text.first != prev->text.afterLast)) {",
          "268:        }",
          "271:        walker = nextBackup;",
          "272:       } else {",
          "",
          "[Removed Lines]",
          "262:         free((URI_CHAR *)walker->text.first);",
          "264:        free(walker);",
          "267:         free((URI_CHAR *)prev->text.first);",
          "269:        free(prev);",
          "",
          "[Added Lines]",
          "263:         memory->free(memory, (URI_CHAR *)walker->text.first);",
          "265:        memory->free(memory, walker);",
          "268:         memory->free(memory, (URI_CHAR *)prev->text.first);",
          "270:        memory->free(memory, prev);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:         walker->next->reserved = NULL;",
          "278:         if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "280:         }",
          "282:        } else {",
          "284:         URI_TYPE(PathSegment) * const segment = walker;",
          "285:         if (pathOwned && (segment->text.first != segment->text.afterLast)) {",
          "287:         }",
          "288:         segment->text.first = URI_FUNC(SafeToPointTo);",
          "289:         segment->text.afterLast = URI_FUNC(SafeToPointTo);",
          "",
          "[Removed Lines]",
          "279:          free((URI_CHAR *)walker->text.first);",
          "281:         free(walker);",
          "286:          free((URI_CHAR *)segment->text.first);",
          "",
          "[Added Lines]",
          "280:          memory->free(memory, (URI_CHAR *)walker->text.first);",
          "282:         memory->free(memory, walker);",
          "287:          memory->free(memory, (URI_CHAR *)segment->text.first);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "292:        }",
          "294:        if (pathOwned && (prev->text.first != prev->text.afterLast)) {",
          "296:        }",
          "299:        walker = nextBackup;",
          "300:       }",
          "",
          "[Removed Lines]",
          "295:         free((URI_CHAR *)prev->text.first);",
          "297:        free(prev);",
          "",
          "[Added Lines]",
          "296:         memory->free(memory, (URI_CHAR *)prev->text.first);",
          "298:        memory->free(memory, prev);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "310:       }",
          "312:       if (pathOwned && (walker->text.first != walker->text.afterLast)) {",
          "314:       }",
          "317:       walker = anotherNextBackup;",
          "318:      }",
          "",
          "[Removed Lines]",
          "313:        free((URI_CHAR *)walker->text.first);",
          "315:       free(walker);",
          "",
          "[Added Lines]",
          "314:        memory->free(memory, (URI_CHAR *)walker->text.first);",
          "316:       memory->free(memory, walker);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "439:   URI_TYPE(PathSegment) * sourceWalker = source->pathHead;",
          "440:   URI_TYPE(PathSegment) * destPrev = NULL;",
          "441:   do {",
          "443:    if (cur == NULL) {",
          "445:     if (destPrev != NULL) {",
          "",
          "[Removed Lines]",
          "442:    URI_TYPE(PathSegment) * cur = malloc(sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "445:    URI_TYPE(PathSegment) * cur = memory->malloc(memory, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "486:  if (source->hostData.ip4 != NULL) {",
          "488:   if (dest->hostData.ip4 == NULL) {",
          "490:   }",
          "",
          "[Removed Lines]",
          "487:   dest->hostData.ip4 = malloc(sizeof(UriIp4));",
          "",
          "[Added Lines]",
          "492:   dest->hostData.ip4 = memory->malloc(memory, sizeof(UriIp4));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "494:   dest->hostData.ipFuture.afterLast = NULL;",
          "495:  } else if (source->hostData.ip6 != NULL) {",
          "496:   dest->hostData.ip4 = NULL;",
          "498:   if (dest->hostData.ip6 == NULL) {",
          "500:   }",
          "",
          "[Removed Lines]",
          "497:   dest->hostData.ip6 = malloc(sizeof(UriIp6));",
          "",
          "[Added Lines]",
          "502:   dest->hostData.ip6 = memory->malloc(memory, sizeof(UriIp6));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "534:   return URI_TRUE;",
          "535:  }",
          "538:  if (segment == NULL) {",
          "540:  }",
          "",
          "[Removed Lines]",
          "537:  segment = malloc(1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "543:  segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "552: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri) {",
          "554:  if (!uri->absolutePath",
          "555:    && !URI_FUNC(IsHostSet)(uri)",
          "556:    && (uri->pathHead != NULL)",
          "557:    && (uri->pathHead->next == NULL)",
          "558:    && (uri->pathHead->text.first == uri->pathHead->text.afterLast)) {",
          "560:   uri->pathHead = NULL;",
          "561:   uri->pathTail = NULL;",
          "562:  }",
          "",
          "[Removed Lines]",
          "559:   free(uri->pathHead);",
          "",
          "[Added Lines]",
          "567:   memory->free(memory, uri->pathHead);",
          "",
          "---------------"
        ],
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static URI_INLINE void URI_FUNC(PreventLeakage)(URI_TYPE(Uri) * uri,",
          "110:   unsigned int revertMask) {",
          "111:  if (revertMask & URI_NORMALIZE_SCHEME) {",
          "113:   uri->scheme.first = NULL;",
          "114:   uri->scheme.afterLast = NULL;",
          "115:  }",
          "117:  if (revertMask & URI_NORMALIZE_USER_INFO) {",
          "119:   uri->userInfo.first = NULL;",
          "120:   uri->userInfo.afterLast = NULL;",
          "121:  }",
          "",
          "[Removed Lines]",
          "112:   free((URI_CHAR *)uri->scheme.first);",
          "118:   free((URI_CHAR *)uri->userInfo.first);",
          "",
          "[Added Lines]",
          "114:   memory->free(memory, (URI_CHAR *)uri->scheme.first);",
          "120:   memory->free(memory, (URI_CHAR *)uri->userInfo.first);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  if (revertMask & URI_NORMALIZE_HOST) {",
          "124:   if (uri->hostData.ipFuture.first != NULL) {",
          "127:    uri->hostData.ipFuture.first = NULL;",
          "128:    uri->hostData.ipFuture.afterLast = NULL;",
          "129:    uri->hostText.first = NULL;",
          "",
          "[Removed Lines]",
          "126:    free((URI_CHAR *)uri->hostData.ipFuture.first);",
          "",
          "[Added Lines]",
          "128:    memory->free(memory, (URI_CHAR *)uri->hostData.ipFuture.first);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     && (uri->hostData.ip4 == NULL)",
          "133:     && (uri->hostData.ip6 == NULL)) {",
          "136:    uri->hostText.first = NULL;",
          "137:    uri->hostText.afterLast = NULL;",
          "138:   }",
          "",
          "[Removed Lines]",
          "135:    free((URI_CHAR *)uri->hostText.first);",
          "",
          "[Added Lines]",
          "137:    memory->free(memory, (URI_CHAR *)uri->hostText.first);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:   while (walker != NULL) {",
          "146:    URI_TYPE(PathSegment) * const next = walker->next;",
          "147:    if (walker->text.afterLast > walker->text.first) {",
          "149:    }",
          "151:    walker = next;",
          "152:   }",
          "153:   uri->pathHead = NULL;",
          "",
          "[Removed Lines]",
          "148:     free((URI_CHAR *)walker->text.first);",
          "150:    free(walker);",
          "",
          "[Added Lines]",
          "150:     memory->free(memory, (URI_CHAR *)walker->text.first);",
          "152:    memory->free(memory, walker);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:  }",
          "157:  if (revertMask & URI_NORMALIZE_QUERY) {",
          "159:   uri->query.first = NULL;",
          "160:   uri->query.afterLast = NULL;",
          "161:  }",
          "163:  if (revertMask & URI_NORMALIZE_FRAGMENT) {",
          "165:   uri->fragment.first = NULL;",
          "166:   uri->fragment.afterLast = NULL;",
          "167:  }",
          "",
          "[Removed Lines]",
          "158:   free((URI_CHAR *)uri->query.first);",
          "164:   free((URI_CHAR *)uri->fragment.first);",
          "",
          "[Added Lines]",
          "160:   memory->free(memory, (URI_CHAR *)uri->query.first);",
          "166:   memory->free(memory, (URI_CHAR *)uri->fragment.first);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "248:   return URI_FALSE;",
          "249:  }",
          "252:  if (buffer == NULL) {",
          "253:   return URI_FALSE;",
          "254:  }",
          "",
          "[Removed Lines]",
          "251:  buffer = malloc(lenInChars * sizeof(URI_CHAR));",
          "",
          "[Added Lines]",
          "254:  buffer = memory->malloc(memory, lenInChars * sizeof(URI_CHAR));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "349:  }",
          "353:  if (buffer == NULL) {",
          "354:   return URI_FALSE;",
          "355:  }",
          "",
          "[Removed Lines]",
          "352:  buffer = malloc(lenInChars * sizeof(URI_CHAR));",
          "",
          "[Added Lines]",
          "356:  buffer = memory->malloc(memory, lenInChars * sizeof(URI_CHAR));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365: static URI_INLINE UriBool URI_FUNC(MakeRangeOwner)(unsigned int * doneMask,",
          "366:   unsigned int maskTest, URI_TYPE(TextRange) * range) {",
          "367:  if (((*doneMask & maskTest) == 0)",
          "368:    && (range->first != NULL)",
          "369:    && (range->afterLast != NULL)",
          "370:    && (range->afterLast > range->first)) {",
          "371:   const int lenInChars = (int)(range->afterLast - range->first);",
          "372:   const int lenInBytes = lenInChars * sizeof(URI_CHAR);",
          "374:   if (dup == NULL) {",
          "376:   }",
          "",
          "[Removed Lines]",
          "373:   URI_CHAR * dup = malloc(lenInBytes);",
          "",
          "[Added Lines]",
          "378:   URI_CHAR * dup = memory->malloc(memory, lenInBytes);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "433:      if ((ranger->text.first != NULL)",
          "434:        && (ranger->text.afterLast != NULL)",
          "435:        && (ranger->text.afterLast > ranger->text.first)) {",
          "437:      }",
          "439:      ranger = next;",
          "440:     }",
          "443:     while (walker != NULL) {",
          "444:      URI_TYPE(PathSegment) * const next = walker->next;",
          "446:      walker = next;",
          "447:     }",
          "",
          "[Removed Lines]",
          "436:       free((URI_CHAR *)ranger->text.first);",
          "438:      free(ranger);",
          "445:      free(walker);",
          "",
          "[Added Lines]",
          "442:       memory->free(memory, (URI_CHAR *)ranger->text.first);",
          "444:      memory->free(memory, ranger);",
          "451:      memory->free(memory, walker);",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967: static URI_INLINE UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "972:  if (state->uri->hostData.ip4 == NULL) {",
          "974:  }",
          "975:  if (URI_FUNC(ParseIpFourAddress)(state->uri->hostData.ip4->data,",
          "976:    state->uri->hostText.first, state->uri->hostText.afterLast)) {",
          "979:   state->uri->hostData.ip4 = NULL;",
          "980:  }",
          "",
          "[Removed Lines]",
          "978:   free(state->uri->hostData.ip4);",
          "",
          "[Added Lines]",
          "982:   memory->free(memory, state->uri->hostData.ip4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1038: static URI_INLINE UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "1045:  if (state->uri->hostData.ip4 == NULL) {",
          "1047:  }",
          "1048:  if (URI_FUNC(ParseIpFourAddress)(state->uri->hostData.ip4->data,",
          "1049:    state->uri->hostText.first, state->uri->hostText.afterLast)) {",
          "1052:   state->uri->hostData.ip4 = NULL;",
          "1053:  }",
          "",
          "[Removed Lines]",
          "1051:   free(state->uri->hostData.ip4);",
          "",
          "[Added Lines]",
          "1057:   memory->free(memory, state->uri->hostData.ip4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1163: static URI_INLINE UriBool URI_FUNC(OnExitOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first) {",
          "1170:  if (state->uri->hostData.ip4 == NULL) {",
          "1172:  }",
          "1173:  if (URI_FUNC(ParseIpFourAddress)(state->uri->hostData.ip4->data,",
          "1174:    state->uri->hostText.first, state->uri->hostText.afterLast)) {",
          "1177:   state->uri->hostData.ip4 = NULL;",
          "1178:  }",
          "",
          "[Removed Lines]",
          "1176:   free(state->uri->hostData.ip4);",
          "",
          "[Added Lines]",
          "1184:   memory->free(memory, state->uri->hostData.ip4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2034: static URI_INLINE UriBool URI_FUNC(PushPathSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "2036:  if (segment == NULL) {",
          "2038:  }",
          "",
          "[Removed Lines]",
          "2035:  URI_TYPE(PathSegment) * segment = malloc(1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "2045:  URI_TYPE(PathSegment) * segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2108:   if (uri->scheme.first != NULL) {",
          "2109:    if (uri->scheme.first != uri->scheme.afterLast) {",
          "2111:    }",
          "2112:    uri->scheme.first = NULL;",
          "2113:    uri->scheme.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2110:     free((URI_CHAR *)uri->scheme.first);",
          "",
          "[Added Lines]",
          "2122:     memory->free(memory, (URI_CHAR *)uri->scheme.first);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2117:   if (uri->userInfo.first != NULL) {",
          "2118:    if (uri->userInfo.first != uri->userInfo.afterLast) {",
          "2120:    }",
          "2121:    uri->userInfo.first = NULL;",
          "2122:    uri->userInfo.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2119:     free((URI_CHAR *)uri->userInfo.first);",
          "",
          "[Added Lines]",
          "2131:     memory->free(memory, (URI_CHAR *)uri->userInfo.first);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2126:   if (uri->hostData.ipFuture.first != NULL) {",
          "2127:    if (uri->hostData.ipFuture.first != uri->hostData.ipFuture.afterLast) {",
          "2129:    }",
          "2130:    uri->hostData.ipFuture.first = NULL;",
          "2131:    uri->hostData.ipFuture.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2128:     free((URI_CHAR *)uri->hostData.ipFuture.first);",
          "",
          "[Added Lines]",
          "2140:     memory->free(memory, (URI_CHAR *)uri->hostData.ipFuture.first);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2139:     && (uri->hostData.ip6 == NULL)) {",
          "2141:    if (uri->hostText.first != uri->hostText.afterLast) {",
          "2143:    }",
          "2144:    uri->hostText.first = NULL;",
          "2145:    uri->hostText.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2142:     free((URI_CHAR *)uri->hostText.first);",
          "",
          "[Added Lines]",
          "2154:     memory->free(memory, (URI_CHAR *)uri->hostText.first);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2150:  if (uri->hostData.ip4 != NULL) {",
          "2152:   uri->hostData.ip4 = NULL;",
          "2153:  }",
          "2156:  if (uri->hostData.ip6 != NULL) {",
          "2158:   uri->hostData.ip6 = NULL;",
          "2159:  }",
          "2162:  if (uri->owner && (uri->portText.first != NULL)) {",
          "2163:   if (uri->portText.first != uri->portText.afterLast) {",
          "2165:   }",
          "2166:   uri->portText.first = NULL;",
          "2167:   uri->portText.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2151:   free(uri->hostData.ip4);",
          "2157:   free(uri->hostData.ip6);",
          "2164:    free((URI_CHAR *)uri->portText.first);",
          "",
          "[Added Lines]",
          "2163:   memory->free(memory, uri->hostData.ip4);",
          "2169:   memory->free(memory, uri->hostData.ip6);",
          "2176:    memory->free(memory, (URI_CHAR *)uri->portText.first);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2174:    URI_TYPE(PathSegment) * const next = segWalk->next;",
          "2175:    if (uri->owner && (segWalk->text.first != NULL)",
          "2176:      && (segWalk->text.first < segWalk->text.afterLast)) {",
          "2178:    }",
          "2180:    segWalk = next;",
          "2181:   }",
          "2182:   uri->pathHead = NULL;",
          "",
          "[Removed Lines]",
          "2177:     free((URI_CHAR *)segWalk->text.first);",
          "2179:    free(segWalk);",
          "",
          "[Added Lines]",
          "2189:     memory->free(memory, (URI_CHAR *)segWalk->text.first);",
          "2191:    memory->free(memory, segWalk);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2188:   if (uri->query.first != NULL) {",
          "2189:    if (uri->query.first != uri->query.afterLast) {",
          "2191:    }",
          "2192:    uri->query.first = NULL;",
          "2193:    uri->query.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2190:     free((URI_CHAR *)uri->query.first);",
          "",
          "[Added Lines]",
          "2202:     memory->free(memory, (URI_CHAR *)uri->query.first);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2197:   if (uri->fragment.first != NULL) {",
          "2198:    if (uri->fragment.first != uri->fragment.afterLast) {",
          "2200:    }",
          "2201:    uri->fragment.first = NULL;",
          "2202:    uri->fragment.afterLast = NULL;",
          "",
          "[Removed Lines]",
          "2199:     free((URI_CHAR *)uri->fragment.first);",
          "",
          "[Added Lines]",
          "2211:     memory->free(memory, (URI_CHAR *)uri->fragment.first);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2215:  URI_FUNC(ResetUri)(&uri);",
          "2216:  parser.uri = &uri;",
          "2217:  URI_FUNC(ResetParserStateExceptUri)(&parser);",
          "2219:  res = URI_FUNC(ParseIPv6address2)(&parser, text, afterIpSix);",
          "2220:  URI_FUNC(FreeUriMembers)(&uri);",
          "2221:  return res == afterIpSix ? URI_TRUE : URI_FALSE;",
          "",
          "[Removed Lines]",
          "2218:  parser.uri->hostData.ip6 = malloc(1 * sizeof(UriIp6));",
          "",
          "[Added Lines]",
          "2231:  parser.uri->hostData.ip6 = memory->malloc(memory, 1 * sizeof(UriIp6));",
          "",
          "---------------"
        ],
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:  charsRequired++;",
          "170:  if (queryString == NULL) {",
          "171:   return URI_ERROR_MALLOC;",
          "172:  }",
          "",
          "[Removed Lines]",
          "169:  queryString = malloc(charsRequired * sizeof(URI_CHAR));",
          "",
          "[Added Lines]",
          "170:  queryString = memory->malloc(memory, charsRequired * sizeof(URI_CHAR));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:  res = URI_FUNC(ComposeQueryEx)(queryString, queryList, charsRequired,",
          "176:    NULL, spaceToPlus, normalizeBreaks);",
          "177:  if (res != URI_SUCCESS) {",
          "179:   return res;",
          "180:  }",
          "",
          "[Removed Lines]",
          "178:   free(queryString);",
          "",
          "[Added Lines]",
          "179:   memory->free(memory, queryString);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:  if (key == NULL) {",
          "302:  }",
          "",
          "[Removed Lines]",
          "297:  key = malloc((keyLen + 1) * sizeof(URI_CHAR));",
          "299:   free(*prevNext);",
          "",
          "[Added Lines]",
          "299:  key = memory->malloc(memory, (keyLen + 1) * sizeof(URI_CHAR));",
          "301:   memory->free(memory, *prevNext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:  if (valueFirst != NULL) {",
          "318:   if (value == NULL) {",
          "323:   }",
          "",
          "[Removed Lines]",
          "317:   value = malloc((valueLen + 1) * sizeof(URI_CHAR));",
          "319:    free(key);",
          "320:    free(*prevNext);",
          "",
          "[Added Lines]",
          "319:   value = memory->malloc(memory, (valueLen + 1) * sizeof(URI_CHAR));",
          "321:    memory->free(memory, key);",
          "322:    memory->free(memory, *prevNext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345: void URI_FUNC(FreeQueryList)(URI_TYPE(QueryList) * queryList) {",
          "346:  while (queryList != NULL) {",
          "347:   URI_TYPE(QueryList) * nextBackup = queryList->next;",
          "351:   queryList = nextBackup;",
          "352:  }",
          "353: }",
          "",
          "[Removed Lines]",
          "350:   free(queryList);",
          "",
          "[Added Lines]",
          "353:   memory->free(memory, queryList);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  if (absWork->pathHead == NULL) {",
          "84:   if (dup == NULL) {",
          "86:   }",
          "",
          "[Removed Lines]",
          "83:   URI_TYPE(PathSegment) * const dup = malloc(sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "84:   URI_TYPE(PathSegment) * const dup = memory->malloc(memory, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:  destPrev = absWork->pathTail;",
          "101:  for (;;) {",
          "103:   if (dup == NULL) {",
          "104:    destPrev->next = NULL;",
          "105:    absWork->pathTail = destPrev;",
          "",
          "[Removed Lines]",
          "102:   URI_TYPE(PathSegment) * const dup = malloc(sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "103:   URI_TYPE(PathSegment) * const dup = memory->malloc(memory, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:  if (URI_FUNC(IsHostSet)(absWork) && absWork->absolutePath) {",
          "131:   if (absWork->pathHead == NULL) {",
          "133:    if (segment == NULL) {",
          "134:     return URI_ERROR_MALLOC;",
          "135:    }",
          "",
          "[Removed Lines]",
          "132:    URI_TYPE(PathSegment) * const segment = malloc(sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "135:    URI_TYPE(PathSegment) * const segment = memory->malloc(memory, sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------"
        ],
        "src/UriShorten.c||src/UriShorten.c": [
          "File: src/UriShorten.c -> src/UriShorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: static URI_INLINE UriBool URI_FUNC(AppendSegment)(URI_TYPE(Uri) * uri,",
          "72:   const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "75:  if (segment == NULL) {",
          "77:  }",
          "",
          "[Removed Lines]",
          "74:  URI_TYPE(PathSegment) * segment = malloc(1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "[Added Lines]",
          "76:  URI_TYPE(PathSegment) * segment = memory->malloc(memory, 1 * sizeof(URI_TYPE(PathSegment)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b11a99b57b43bee5d7494b70cd1963cbd657b50",
      "candidate_info": {
        "commit_hash": "5b11a99b57b43bee5d7494b70cd1963cbd657b50",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/5b11a99b57b43bee5d7494b70cd1963cbd657b50",
        "files": [
          "ChangeLog",
          "include/uriparser/Uri.h"
        ],
        "message": "Uri.h: Document ParseSingleUri* functions",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "708efd455da363a08ee441482a51521f46da2966",
      "candidate_info": {
        "commit_hash": "708efd455da363a08ee441482a51521f46da2966",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/708efd455da363a08ee441482a51521f46da2966",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "docs: Fix AddBaseUriExMm and RemoveBaseUriMm docs for uriFreeUriMembersMmA",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "bf8240eef8696651e1d987acd3d2998c1495503d",
      "candidate_info": {
        "commit_hash": "bf8240eef8696651e1d987acd3d2998c1495503d",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bf8240eef8696651e1d987acd3d2998c1495503d",
        "files": [
          "include/uriparser/UriBase.h"
        ],
        "message": "docs: Document memory manager related types",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: typedef void * (*UriFuncMalloc)(struct UriMemoryManagerStruct *, size_t);",
          "160: typedef void * (*UriFuncCalloc)(struct UriMemoryManagerStruct *, size_t, size_t);",
          "161: typedef void * (*UriFuncRealloc)(struct UriMemoryManagerStruct *, void *, size_t);",
          "162: typedef void * (*UriFuncReallocarray)(struct UriMemoryManagerStruct *, void *, size_t, size_t);",
          "163: typedef void (*UriFuncFree)(struct UriMemoryManagerStruct *, void *);",
          "166: typedef struct UriMemoryManagerStruct {",
          "",
          "[Removed Lines]",
          "157: struct UriMemoryManagerStruct;",
          "167:  UriFuncMalloc malloc;",
          "168:  UriFuncCalloc calloc;",
          "169:  UriFuncRealloc realloc;",
          "170:  UriFuncReallocarray reallocarray;",
          "171:  UriFuncFree free;",
          "172:  void * userData;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}