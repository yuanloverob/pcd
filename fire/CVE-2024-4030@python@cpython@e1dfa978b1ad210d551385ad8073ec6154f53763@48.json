{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ce2810f36829ae89278219ec89f3cc798f19ae6",
      "candidate_info": {
        "commit_hash": "6ce2810f36829ae89278219ec89f3cc798f19ae6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6ce2810f36829ae89278219ec89f3cc798f19ae6",
        "files": [
          "Lib/test/test_launcher.py"
        ],
        "message": "[3.13] gh-119070: Update test_shebang_executable_extension to always use non-installed version (GH-119846) (#GH-120015)\n\ngh-119070: Update test_shebang_executable_extension to always use non-installed version (GH-119846)\n(cherry picked from commit 5c48eb0cc6c3e84aafda0a734a05ecec14fc0ccf)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_launcher.py||Lib/test/test_launcher.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_launcher.py||Lib/test/test_launcher.py": [
          "File: Lib/test/test_launcher.py -> Lib/test/test_launcher.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "766:             self.assertEqual(data[\"stdout\"].strip(), f\"{quote(exe)} arg1 {quote(script)}\")",
          "768:     def test_shebang_executable_extension(self):",
          "772:         actual = [line.strip() for line in data[\"stderr\"].splitlines()",
          "773:                   if line.startswith(\"# Search PATH\")]",
          "774:         self.assertEqual([expect], actual)",
          "",
          "[Removed Lines]",
          "769:         with self.script('#! /usr/bin/env python3.12') as script:",
          "770:             data = self.run_py([script])",
          "771:         expect = \"# Search PATH for python3.12.exe\"",
          "",
          "[Added Lines]",
          "769:         with self.script('#! /usr/bin/env python3.99') as script:",
          "770:             data = self.run_py([script], expect_returncode=103)",
          "771:         expect = \"# Search PATH for python3.99.exe\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d74eae4d492f23f33757b05f7de2cdbe210760e",
      "candidate_info": {
        "commit_hash": "8d74eae4d492f23f33757b05f7de2cdbe210760e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8d74eae4d492f23f33757b05f7de2cdbe210760e",
        "files": [
          "Lib/_pyrepl/completing_reader.py",
          "Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_reader.py"
        ],
        "message": "[3.13] gh-120041: Do not use append_to_screen when completions are visible (GH-120042) (#120051)\n\n* gh-120041: Do not use append_to_screen when completions are visible (GH-120042)\n(cherry picked from commit 8fc7653766b106bdbc4ff6154e0020aea4ab15e6)\n\n* gh-120041: Refactor check for visible completion menu in completing_reader (GH-120055)\n(cherry picked from commit bf8e5e53d0c359a1f9c285d855e7a5e9b6d91375)\n---------\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/completing_reader.py||Lib/_pyrepl/completing_reader.py",
          "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/completing_reader.py||Lib/_pyrepl/completing_reader.py": [
          "File: Lib/_pyrepl/completing_reader.py -> Lib/_pyrepl/completing_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:             if p:",
          "188:                 r.insert(p)",
          "189:             if last_is_completer:",
          "192:                 r.cmpltn_menu, r.cmpltn_menu_end = build_menu(",
          "193:                     r.console, completions, r.cmpltn_menu_end,",
          "194:                     r.use_brackets, r.sort_in_column)",
          "195:                 r.dirty = True",
          "204: class self_insert(commands.self_insert):",
          "",
          "[Removed Lines]",
          "190:                 if not r.cmpltn_menu_visible:",
          "191:                     r.cmpltn_menu_visible = True",
          "196:             elif stem + p in completions:",
          "197:                 r.msg = \"[ complete but not unique ]\"",
          "198:                 r.dirty = True",
          "199:             else:",
          "200:                 r.msg = \"[ not unique ]\"",
          "201:                 r.dirty = True",
          "",
          "[Added Lines]",
          "190:                 r.cmpltn_menu_visible = True",
          "191:                 r.cmpltn_message_visible = False",
          "196:             elif not r.cmpltn_menu_visible:",
          "197:                 r.cmpltn_message_visible = True",
          "198:                 if stem + p in completions:",
          "199:                     r.msg = \"[ complete but not unique ]\"",
          "200:                     r.dirty = True",
          "201:                 else:",
          "202:                     r.msg = \"[ not unique ]\"",
          "203:                     r.dirty = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:         commands.self_insert.do(self)",
          "211:         if r.cmpltn_menu_visible:",
          "212:             stem = r.get_stem()",
          "213:             if len(stem) < 1:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:         if r.cmpltn_menu_visible or r.cmpltn_message_visible:",
          "214:             r.calc_screen = r.calc_complete_screen",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     ### Instance variables",
          "237:     cmpltn_menu: list[str] = field(init=False)",
          "238:     cmpltn_menu_visible: bool = field(init=False)",
          "239:     cmpltn_menu_end: int = field(init=False)",
          "240:     cmpltn_menu_choices: list[str] = field(init=False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     cmpltn_message_visible: bool = field(init=False)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:     def cmpltn_reset(self) -> None:",
          "272:         self.cmpltn_menu = []",
          "273:         self.cmpltn_menu_visible = False",
          "274:         self.cmpltn_menu_end = 0",
          "275:         self.cmpltn_menu_choices = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         self.cmpltn_message_visible = False",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py": [
          "File: Lib/test/test_pyrepl/support.py -> Lib/test/test_pyrepl/support.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: def prepare_reader(console: Console, **kwargs):",
          "43:     reader = ReadlineAlikeReader(console=console, config=config)",
          "44:     reader.more_lines = partial(more_lines, namespace=None)",
          "45:     reader.paste_mode = True  # Avoid extra indents",
          "",
          "[Removed Lines]",
          "42:     config = ReadlineConfig(readline_completer=None)",
          "",
          "[Added Lines]",
          "42:     config = ReadlineConfig(readline_completer=kwargs.pop(\"readline_completer\", None))",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import itertools",
          "2: import functools",
          "3: from unittest import TestCase",
          "5: from .support import handle_all_events, handle_events_narrow_console, code_to_events, prepare_reader",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import rlcompleter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: class TestReader(TestCase):",
          "11:     def assert_screen_equals(self, reader, expected):",
          "13:         expected = expected.split(\"\\n\")",
          "14:         self.assertListEqual(actual, expected)",
          "",
          "[Removed Lines]",
          "12:         actual = reader.calc_screen()",
          "",
          "[Added Lines]",
          "13:         actual = reader.screen",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:         prompt, l = Reader.process_prompt(ps1)",
          "209:         self.assertEqual(prompt, \"\\033[0;32m\u6a02>\\033[0m> \")",
          "210:         self.assertEqual(l, 5)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     def test_completions_updated_on_key_press(self):",
          "214:         namespace = {\"itertools\": itertools}",
          "215:         code = \"itertools.\"",
          "216:         events = itertools.chain(code_to_events(code), [",
          "217:             Event(evt='key', data='\\t', raw=bytearray(b'\\t')),  # Two tabs for completion",
          "218:             Event(evt='key', data='\\t', raw=bytearray(b'\\t')),",
          "219:         ], code_to_events(\"a\"))",
          "221:         completing_reader = functools.partial(",
          "222:             prepare_reader,",
          "223:             readline_completer=rlcompleter.Completer(namespace).complete",
          "224:         )",
          "225:         reader, _ = handle_all_events(events, prepare_reader=completing_reader)",
          "227:         actual = reader.screen",
          "228:         self.assertEqual(len(actual), 2)",
          "229:         self.assertEqual(actual[0].rstrip(), \"itertools.accumulate(\")",
          "230:         self.assertEqual(actual[1], f\"{code}a\")",
          "232:     def test_key_press_on_tab_press_once(self):",
          "233:         namespace = {\"itertools\": itertools}",
          "234:         code = \"itertools.\"",
          "235:         events = itertools.chain(code_to_events(code), [",
          "236:             Event(evt='key', data='\\t', raw=bytearray(b'\\t')),",
          "237:         ], code_to_events(\"a\"))",
          "239:         completing_reader = functools.partial(",
          "240:             prepare_reader,",
          "241:             readline_completer=rlcompleter.Completer(namespace).complete",
          "242:         )",
          "243:         reader, _ = handle_all_events(events, prepare_reader=completing_reader)",
          "245:         self.assert_screen_equals(reader, f\"{code}a\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ea77d49cc5380b2fe294fb7cc3754df7ac08419",
      "candidate_info": {
        "commit_hash": "0ea77d49cc5380b2fe294fb7cc3754df7ac08419",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0ea77d49cc5380b2fe294fb7cc3754df7ac08419",
        "files": [
          "Lib/asyncio/proactor_events.py",
          "Lib/test/test_asyncio/test_proactor_events.py",
          "Misc/NEWS.d/next/Library/2024-05-24-21-54-55.gh-issue-113892.JKDFqq.rst"
        ],
        "message": "[3.13] gh-113892: Add a extra check to `ProactorEventLoop.sock_connect` to ensure that the given socket is in non-blocking mode (GH-119519) (#119912)\n\n(cherry picked from commit cf3bba3f0671d2c9fee099e3ab0f78b98b176131)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Lib/asyncio/proactor_events.py||Lib/asyncio/proactor_events.py",
          "Lib/test/test_asyncio/test_proactor_events.py||Lib/test/test_asyncio/test_proactor_events.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/asyncio/proactor_events.py||Lib/asyncio/proactor_events.py": [
          "File: Lib/asyncio/proactor_events.py -> Lib/asyncio/proactor_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "721:         return await self._proactor.sendto(sock, data, 0, address)",
          "723:     async def sock_connect(self, sock, address):",
          "724:         return await self._proactor.connect(sock, address)",
          "726:     async def sock_accept(self, sock):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:         if self._debug and sock.gettimeout() != 0:",
          "725:             raise ValueError(\"the socket must be non-blocking\")",
          "",
          "---------------"
        ],
        "Lib/test/test_asyncio/test_proactor_events.py||Lib/test/test_asyncio/test_proactor_events.py": [
          "File: Lib/test/test_asyncio/test_proactor_events.py -> Lib/test/test_asyncio/test_proactor_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:         self.addCleanup(self.file.close)",
          "1019:         super().setUp()",
          "1022:         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
          "1024:         sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024)",
          "1025:         sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024)",
          "1026:         if cleanup:",
          "",
          "[Removed Lines]",
          "1021:     def make_socket(self, cleanup=True):",
          "1023:         sock.setblocking(False)",
          "",
          "[Added Lines]",
          "1021:     def make_socket(self, cleanup=True, blocking=False):",
          "1023:         sock.setblocking(blocking)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:                                                           0, None))",
          "1083:         self.assertEqual(self.file.tell(), 0)",
          "1086: if __name__ == '__main__':",
          "1087:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:     def test_blocking_socket(self):",
          "1086:         self.loop.set_debug(True)",
          "1087:         sock = self.make_socket(blocking=True)",
          "1088:         with self.assertRaisesRegex(ValueError, \"must be non-blocking\"):",
          "1089:             self.run_loop(self.loop.sock_sendfile(sock, self.file))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "083bf3ad1795604ee833d1595f2a536b9cd57419",
      "candidate_info": {
        "commit_hash": "083bf3ad1795604ee833d1595f2a536b9cd57419",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/083bf3ad1795604ee833d1595f2a536b9cd57419",
        "files": [
          "Lib/os.py",
          "Lib/test/test_os.py"
        ],
        "message": "[3.13] GH-89727: Fix FD leak on `os.fwalk()` generator finalization. (GH-119766) (#119767)\n\nGH-89727: Fix FD leak on `os.fwalk()` generator finalization. (GH-119766)\n\nFollow-up to 3c890b50. Ensure we `os.close()` open file descriptors when\nthe `os.fwalk()` generator is finalized.\n(cherry picked from commit a5fef800d31648d19cecc240a2fa0dc71371753e)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/os.py||Lib/os.py",
          "Lib/test/test_os.py||Lib/test/test_os.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py"
          ]
        }
      },
      "candidate_diff": {
        "Lib/os.py||Lib/os.py": [
          "File: Lib/os.py -> Lib/os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:         top = fspath(top)",
          "481:         stack = [(_fwalk_walk, (True, dir_fd, top, top, None))]",
          "482:         isbytes = isinstance(top, bytes)",
          "486:     # Each item in the _fwalk() stack is a pair (action, args).",
          "487:     _fwalk_walk = 0  # args: (isroot, dirfd, toppath, topname, entry)",
          "",
          "[Removed Lines]",
          "483:         while stack:",
          "484:             yield from _fwalk(stack, isbytes, topdown, onerror, follow_symlinks)",
          "",
          "[Added Lines]",
          "483:         try:",
          "484:             while stack:",
          "485:                 yield from _fwalk(stack, isbytes, topdown, onerror, follow_symlinks)",
          "486:         finally:",
          "487:             # Close any file descriptors still on the stack.",
          "488:             while stack:",
          "489:                 action, value = stack.pop()",
          "490:                 if action == _fwalk_close:",
          "491:                     close(value)",
          "",
          "---------------"
        ],
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1685:         self.addCleanup(os.close, newfd)",
          "1686:         self.assertEqual(newfd, minfd)",
          "1688:     # fwalk() keeps file descriptors open",
          "1689:     test_walk_many_open_files = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1688:     @unittest.skipIf(",
          "1689:         support.is_emscripten, \"Cannot dup stdout on Emscripten\"",
          "1690:     )",
          "1691:     @unittest.skipIf(",
          "1692:         support.is_android, \"dup return value is unpredictable on Android\"",
          "1693:     )",
          "1694:     def test_fd_finalization(self):",
          "1695:         # Check that close()ing the fwalk() generator closes FDs",
          "1696:         def getfd():",
          "1697:             fd = os.dup(1)",
          "1698:             os.close(fd)",
          "1699:             return fd",
          "1700:         for topdown in (False, True):",
          "1701:             old_fd = getfd()",
          "1702:             it = self.fwalk(os_helper.TESTFN, topdown=topdown)",
          "1703:             self.assertEqual(getfd(), old_fd)",
          "1704:             next(it)",
          "1705:             self.assertGreater(getfd(), old_fd)",
          "1706:             it.close()",
          "1707:             self.assertEqual(getfd(), old_fd)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec484b6862711fa79a7ff598fb60f094f20926be",
      "candidate_info": {
        "commit_hash": "ec484b6862711fa79a7ff598fb60f094f20926be",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ec484b6862711fa79a7ff598fb60f094f20926be",
        "files": [
          "Lib/test/test_fractions.py"
        ],
        "message": "[3.13] gh-119189: Add yet more tests for mixed Fraction arithmetic (GH-119298) (GH-119346)\n\n(cherry picked from commit 10b1bd926a5546e0f5cbd1a47d00dc5ff84f1979)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_fractions.py||Lib/test/test_fractions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_fractions.py||Lib/test/test_fractions.py": [
          "File: Lib/test/test_fractions.py -> Lib/test/test_fractions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     def __repr__(self):",
          "136:         return f'{self.__class__.__name__}({self.value!r})'",
          "138: class Rat:",
          "139:     \"\"\"Simple Rational class for testing mixed arithmetic.\"\"\"",
          "140:     def __init__(self, n, d):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: class SymbolicReal(Symbolic):",
          "139:     pass",
          "140: numbers.Real.register(SymbolicReal)",
          "142: class SymbolicComplex(Symbolic):",
          "143:     pass",
          "144: numbers.Complex.register(SymbolicComplex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         return f'{self.__class__.__name__}({self.x!r}, {self.y!r})'",
          "274: numbers.Complex.register(Rect)",
          "277: class FractionTest(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: class RectComplex(Rect, complex):",
          "285:     pass",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "791:         self.assertTypedEquals(F(3, 2) * Root(4), Root(F(9, 1)))",
          "792:         self.assertTypedEquals(Root(4) * F(3, 2), 3.0)",
          "794:         self.assertTypedEquals(F(3, 2) * Polar(4, 2), Polar(F(6, 1), 2))",
          "795:         self.assertTypedEquals(F(3, 2) * Polar(4.0, 2), Polar(6.0, 2))",
          "796:         self.assertTypedEquals(F(3, 2) * Rect(4, 3), Rect(F(6, 1), F(9, 2)))",
          "797:         self.assertRaises(TypeError, operator.mul, Polar(4, 2), F(3, 2))",
          "798:         self.assertTypedEquals(Rect(4, 3) * F(3, 2), 6.0 + 4.5j)",
          "800:         self.assertEqual(F(3, 2) * Symbolic('X'), Symbolic('3/2 * X'))",
          "801:         self.assertRaises(TypeError, operator.mul, Symbolic('X'), F(3, 2))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:         self.assertEqual(F(3, 2) * SymbolicReal('X'), SymbolicReal('3/2 * X'))",
          "804:         self.assertRaises(TypeError, operator.mul, SymbolicReal('X'), F(3, 2))",
          "809:         self.assertTypedEquals(F(3, 2) * RectComplex(4, 3), RectComplex(6.0+0j, 4.5+0j))",
          "812:         self.assertEqual(F(3, 2) * SymbolicComplex('X'), SymbolicComplex('3/2 * X'))",
          "813:         self.assertRaises(TypeError, operator.mul, SymbolicComplex('X'), F(3, 2))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "816:         self.assertTypedEquals(F(2, 3) / Root(4), Root(F(1, 9)))",
          "817:         self.assertTypedEquals(Root(4) / F(2, 3), 3.0)",
          "819:         self.assertTypedEquals(F(3, 2) / Polar(4, 2), Polar(F(3, 8), -2))",
          "820:         self.assertTypedEquals(F(3, 2) / Polar(4.0, 2), Polar(0.375, -2))",
          "821:         self.assertTypedEquals(F(3, 2) / Rect(4, 3), Rect(0.24, 0.18))",
          "822:         self.assertRaises(TypeError, operator.truediv, Polar(4, 2), F(2, 3))",
          "823:         self.assertTypedEquals(Rect(4, 3) / F(2, 3), 6.0 + 4.5j)",
          "825:         self.assertEqual(F(3, 2) / Symbolic('X'), Symbolic('3/2 / X'))",
          "826:         self.assertRaises(TypeError, operator.truediv, Symbolic('X'), F(2, 3))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:         self.assertEqual(F(3, 2) / SymbolicReal('X'), SymbolicReal('3/2 / X'))",
          "834:         self.assertRaises(TypeError, operator.truediv, SymbolicReal('X'), F(3, 2))",
          "841:         self.assertEqual(F(3, 2) / SymbolicComplex('X'), SymbolicComplex('3/2 / X'))",
          "842:         self.assertRaises(TypeError, operator.truediv, SymbolicComplex('X'), F(3, 2))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "858:         self.assertRaises(TypeError, operator.mod, F(2, 3), Root(4))",
          "859:         self.assertTypedEquals(Root(4) % F(3, 2), 0.5)",
          "861:         self.assertRaises(TypeError, operator.mod, F(3, 2), Polar(4, 2))",
          "862:         self.assertRaises(TypeError, operator.mod, Rect(4, 3), F(2, 3))",
          "864:         self.assertEqual(F(3, 2) % Symbolic('X'), Symbolic('3/2 % X'))",
          "865:         self.assertRaises(TypeError, operator.mod, Symbolic('X'), F(2, 3))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:         self.assertEqual(F(3, 2) % SymbolicReal('X'), SymbolicReal('3/2 % X'))",
          "880:         self.assertRaises(TypeError, operator.mod, SymbolicReal('X'), F(3, 2))",
          "883:         self.assertRaises(TypeError, operator.mod, F(3, 2), RectComplex(4, 3))",
          "885:         self.assertEqual(F(3, 2) % SymbolicComplex('X'), SymbolicComplex('3/2 % X'))",
          "886:         self.assertRaises(TypeError, operator.mod, SymbolicComplex('X'), F(3, 2))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "899:         self.assertTypedEquals(Root(4) ** F(2, 1), Root(4, F(1)))",
          "900:         self.assertTypedEquals(Root(4) ** F(-2, 1), Root(4, -F(1)))",
          "901:         self.assertTypedEquals(Root(4) ** F(-2, 3), Root(4, -3.0))",
          "903:         self.assertTypedEquals(F(3, 2) ** Rect(2, 0), Polar(2.25, 0.0))",
          "904:         self.assertTypedEquals(F(1, 1) ** Rect(2, 3), Polar(1.0, 0.0))",
          "905:         self.assertTypedEquals(Polar(4, 2) ** F(3, 2), Polar(8.0, 3.0))",
          "906:         self.assertTypedEquals(Polar(4, 2) ** F(3, 1), Polar(64, 6))",
          "907:         self.assertTypedEquals(Polar(4, 2) ** F(-3, 1), Polar(0.015625, -6))",
          "908:         self.assertTypedEquals(Polar(4, 2) ** F(-3, 2), Polar(0.125, -3.0))",
          "913:     def testMixingWithDecimal(self):",
          "914:         # Decimal refuses mixed arithmetic (but not mixed comparisons)",
          "",
          "[Removed Lines]",
          "910:         self.assertTypedEquals(F(3, 2) ** Symbolic('X'), Symbolic('1.5 ** X'))",
          "911:         self.assertTypedEquals(Symbolic('X') ** F(3, 2), Symbolic('X ** 1.5'))",
          "",
          "[Added Lines]",
          "925:         self.assertEqual(F(3, 2) ** SymbolicReal('X'), SymbolicReal('1.5 ** X'))",
          "926:         self.assertEqual(SymbolicReal('X') ** F(3, 2), SymbolicReal('X ** 1.5'))",
          "930:         self.assertTypedEquals(F(3, 2) ** RectComplex(2, 0), Polar(2.25, 0.0))",
          "931:         self.assertTypedEquals(F(1, 1) ** RectComplex(2, 3), Polar(1.0, 0.0))",
          "936:         self.assertEqual(F(3, 2) ** SymbolicComplex('X'), SymbolicComplex('1.5 ** X'))",
          "937:         self.assertEqual(SymbolicComplex('X') ** F(3, 2), SymbolicComplex('X ** 1.5'))",
          "939:         self.assertEqual(F(3, 2) ** Symbolic('X'), Symbolic('1.5 ** X'))",
          "940:         self.assertEqual(Symbolic('X') ** F(3, 2), Symbolic('X ** 1.5'))",
          "",
          "---------------"
        ]
      }
    }
  ]
}