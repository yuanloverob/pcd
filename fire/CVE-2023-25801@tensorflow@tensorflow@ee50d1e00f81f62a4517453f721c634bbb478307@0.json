{
  "cve_id": "CVE-2023-25801",
  "cve_desc": "TensorFlow is an open source machine learning platform. Prior to versions 2.12.0 and 2.11.1, `nn_ops.fractional_avg_pool_v2` and `nn_ops.fractional_max_pool_v2` require the first and fourth elements of their parameter `pooling_ratio` to be equal to 1.0, as pooling on batch and channel dimensions is not supported. A fix is included in TensorFlow 2.12.0 and 2.11.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ee50d1e00f81f62a4517453f721c634bbb478307",
  "patch_info": {
    "commit_hash": "ee50d1e00f81f62a4517453f721c634bbb478307",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ee50d1e00f81f62a4517453f721c634bbb478307",
    "files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ],
    "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 501651261",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:                       pooling_ratio_[i]));",
      "52:     }",
      "53:     OP_REQUIRES(",
      "55:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
      "56:                               \"supported on the batch nor channel dimension.\"));",
      "57:     OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));",
      "",
      "[Removed Lines]",
      "54:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
      "",
      "[Added Lines]",
      "54:         context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     }",
      "55:     OP_REQUIRES(",
      "57:         errors::Unimplemented(\"Fractional max pooling is not yet \"",
      "58:                               \"supported on the batch nor channel dimension.\"));",
      "",
      "[Removed Lines]",
      "56:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
      "",
      "[Added Lines]",
      "56:         context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "351:             name=None)",
      "352:         self.evaluate(result)",
      "355:     with self.cached_session() as _:",
      "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
      "357:       with self.assertRaisesRegex(",
      "",
      "[Removed Lines]",
      "354:   def testPoolingRatioValueOutOfRange(self):",
      "",
      "[Added Lines]",
      "354:   def testPoolingRatioIllegalSmallValue(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368:         )",
      "369:         self.evaluate(result)",
      "372: class FractionalAvgPoolGradTest(test.TestCase):",
      "373:   \"\"\"Tests for FractionalAvgPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:   def testPoolingIllegalRatioForBatch(self):",
      "372:     with self.cached_session() as _:",
      "373:       with self.assertRaises(errors.UnimplementedError):",
      "374:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
      "375:             np.zeros([3, 30, 50, 3]),",
      "376:             [2, 3, 1.5, 1],",
      "377:             True,",
      "378:             True)",
      "379:         self.evaluate(result)",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "338:             name=None)",
      "339:         self.evaluate(result)",
      "342:     with self.cached_session() as _:",
      "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
      "344:       with self.assertRaisesRegex(",
      "",
      "[Removed Lines]",
      "341:   def testPoolingRatioValueOutOfRange(self):",
      "",
      "[Added Lines]",
      "341:   def testPoolingRatioIllegalSmallValue(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "355:         )",
      "356:         self.evaluate(result)",
      "359: class FractionalMaxPoolGradTest(test.TestCase):",
      "360:   \"\"\"Tests for FractionalMaxPoolGrad.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:   def testPoolingIllegalRatioForBatch(self):",
      "359:     with self.cached_session() as _:",
      "360:       with self.assertRaises(errors.UnimplementedError):",
      "361:         result = nn_ops.fractional_max_pool(",
      "362:             np.zeros([3, 30, 50, 3]),",
      "363:             [2, 3, 1.5, 1],",
      "364:             True,",
      "365:             True)",
      "366:         self.evaluate(result)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ba601b3ffa63c89826815487b9fd036746723e0",
      "candidate_info": {
        "commit_hash": "7ba601b3ffa63c89826815487b9fd036746723e0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7ba601b3ffa63c89826815487b9fd036746723e0",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio\n\nPiperOrigin-RevId: 501651261",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
            "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:                       pooling_ratio_[i]));",
          "52:     }",
          "53:     OP_REQUIRES(",
          "55:         errors::Unimplemented(\"Fractional average pooling is not yet \"",
          "56:                               \"supported on the batch nor channel dimension.\"));",
          "57:     OP_REQUIRES_OK(context, context->GetAttr(\"deterministic\", &deterministic_));",
          "",
          "[Removed Lines]",
          "54:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Added Lines]",
          "54:         context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fractional_max_pool_op.cc||tensorflow/core/kernels/fractional_max_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_max_pool_op.cc -> tensorflow/core/kernels/fractional_max_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     }",
          "55:     OP_REQUIRES(",
          "57:         errors::Unimplemented(\"Fractional max pooling is not yet \"",
          "58:                               \"supported on the batch nor channel dimension.\"));",
          "",
          "[Removed Lines]",
          "56:         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,",
          "",
          "[Added Lines]",
          "56:         context, pooling_ratio_[0] == 1 && pooling_ratio_[3] == 1,",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:             name=None)",
          "352:         self.evaluate(result)",
          "355:     with self.cached_session() as _:",
          "356:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "357:       with self.assertRaisesRegex(",
          "",
          "[Removed Lines]",
          "354:   def testPoolingRatioValueOutOfRange(self):",
          "",
          "[Added Lines]",
          "354:   def testPoolingRatioIllegalSmallValue(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:         )",
          "369:         self.evaluate(result)",
          "372: class FractionalAvgPoolGradTest(test.TestCase):",
          "373:   \"\"\"Tests for FractionalAvgPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:   def testPoolingIllegalRatioForBatch(self):",
          "372:     with self.cached_session() as _:",
          "373:       with self.assertRaises(errors.UnimplementedError):",
          "374:         result = nn_ops.gen_nn_ops.fractional_avg_pool(",
          "375:             np.zeros([3, 30, 50, 3]),",
          "376:             [2, 3, 1.5, 1],",
          "377:             True,",
          "378:             True)",
          "379:         self.evaluate(result)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:             name=None)",
          "339:         self.evaluate(result)",
          "342:     with self.cached_session() as _:",
          "343:       # Whether turn on `TF2_BEHAVIOR` generates different error messages",
          "344:       with self.assertRaisesRegex(",
          "",
          "[Removed Lines]",
          "341:   def testPoolingRatioValueOutOfRange(self):",
          "",
          "[Added Lines]",
          "341:   def testPoolingRatioIllegalSmallValue(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:         )",
          "356:         self.evaluate(result)",
          "359: class FractionalMaxPoolGradTest(test.TestCase):",
          "360:   \"\"\"Tests for FractionalMaxPoolGrad.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:   def testPoolingIllegalRatioForBatch(self):",
          "359:     with self.cached_session() as _:",
          "360:       with self.assertRaises(errors.UnimplementedError):",
          "361:         result = nn_ops.fractional_max_pool(",
          "362:             np.zeros([3, 30, 50, 3]),",
          "363:             [2, 3, 1.5, 1],",
          "364:             True,",
          "365:             True)",
          "366:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    }
  ]
}