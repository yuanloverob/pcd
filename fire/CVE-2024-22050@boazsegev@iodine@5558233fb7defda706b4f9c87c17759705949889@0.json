{
  "cve_id": "CVE-2024-22050",
  "cve_desc": "Path traversal in the static file service in Iodine less than 0.7.33 allows an unauthenticated, remote attacker to read files outside the public folder via malicious URLs.\n\n",
  "repo": "boazsegev/iodine",
  "patch_hash": "5558233fb7defda706b4f9c87c17759705949889",
  "patch_info": {
    "commit_hash": "5558233fb7defda706b4f9c87c17759705949889",
    "repo": "boazsegev/iodine",
    "commit_url": "https://github.com/boazsegev/iodine/commit/5558233fb7defda706b4f9c87c17759705949889",
    "files": [
      "CHANGELOG.md",
      "ext/iodine/fio.c",
      "ext/iodine/fio.h",
      "ext/iodine/fio_cli.c",
      "ext/iodine/fio_tls_missing.c",
      "ext/iodine/fio_tls_openssl.c",
      "ext/iodine/fiobj4fio.h",
      "ext/iodine/fiobj_numbers.h",
      "ext/iodine/http.c",
      "ext/iodine/http.h",
      "ext/iodine/http1.c",
      "ext/iodine/iodine_mustache.c",
      "iodine.gemspec",
      "lib/iodine/version.rb"
    ],
    "message": "update to facil.io 0.7.3",
    "before_after_code_files": [
      "ext/iodine/fio.c||ext/iodine/fio.c",
      "ext/iodine/fio.h||ext/iodine/fio.h",
      "ext/iodine/fio_cli.c||ext/iodine/fio_cli.c",
      "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c",
      "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c",
      "ext/iodine/fiobj4fio.h||ext/iodine/fiobj4fio.h",
      "ext/iodine/fiobj_numbers.h||ext/iodine/fiobj_numbers.h",
      "ext/iodine/http.c||ext/iodine/http.c",
      "ext/iodine/http.h||ext/iodine/http.h",
      "ext/iodine/http1.c||ext/iodine/http1.c",
      "ext/iodine/iodine_mustache.c||ext/iodine/iodine_mustache.c",
      "iodine.gemspec||iodine.gemspec",
      "lib/iodine/version.rb||lib/iodine/version.rb"
    ]
  },
  "patch_diff": {
    "ext/iodine/fio.c||ext/iodine/fio.c": [
      "File: ext/iodine/fio.c -> ext/iodine/fio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1179: static struct timespec fio_timer_calc_due(size_t interval) {",
      "1180:   struct timespec now = fio_last_tick();",
      "1184:   }",
      "1185:   now.tv_nsec += (interval * 1000000UL);",
      "1187:     now.tv_nsec -= 1000000000L;",
      "1188:     now.tv_sec += 1;",
      "1189:   }",
      "",
      "[Removed Lines]",
      "1181:   if (interval > 1000) {",
      "1182:     now.tv_sec += interval / 1000;",
      "1183:     interval -= interval / 1000;",
      "1186:   if (now.tv_nsec > 1000000000L) {",
      "",
      "[Added Lines]",
      "1181:   if (interval >= 1000) {",
      "1182:     unsigned long long secs = interval / 1000;",
      "1183:     now.tv_sec += secs;",
      "1184:     interval -= secs * 1000;",
      "1187:   if (now.tv_nsec >= 1000000000L) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1348: volatile uint8_t fio_signal_children_flag = 0;",
      "1351: static struct sigaction fio_old_sig_chld;",
      "1352: static struct sigaction fio_old_sig_pipe;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1350: volatile fio_lock_i fio_signal_set_flag = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1415:     break;",
      "1416:   }",
      "1419:     old->sa_handler(sig);",
      "1420: }",
      "",
      "[Removed Lines]",
      "1418:   if (old->sa_handler != SIG_IGN && old->sa_handler != SIG_DFL)",
      "",
      "[Added Lines]",
      "1419:   if (old && old->sa_handler != SIG_IGN && old->sa_handler != SIG_DFL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1423: static void fio_signal_handler_setup(void) {",
      "1425:   struct sigaction act;",
      "1427:     return;",
      "1429:   memset(&act, 0, sizeof(act));",
      "",
      "[Removed Lines]",
      "1426:   if (fio_old_sig_int.sa_handler)",
      "",
      "[Added Lines]",
      "1427:   if (fio_trylock(&fio_signal_set_flag))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1458: void fio_signal_handler_reset(void) {",
      "1459:   struct sigaction old;",
      "1461:     return;",
      "1462:   memset(&old, 0, sizeof(old));",
      "1463:   sigaction(SIGINT, &fio_old_sig_int, &old);",
      "1464:   sigaction(SIGTERM, &fio_old_sig_term, &old);",
      "",
      "[Removed Lines]",
      "1460:   if (!fio_old_sig_int.sa_handler)",
      "",
      "[Added Lines]",
      "1461:   if (fio_signal_set_flag)",
      "1463:   fio_unlock(&fio_signal_set_flag);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2968:     goto test_errno;",
      "2969:   }",
      "2972:       uuid_data(uuid).packet == old_packet &&",
      "2973:       uuid_data(uuid).sent >= old_sent &&",
      "2974:       (uuid_data(uuid).sent - old_sent) < 32768) {",
      "",
      "[Removed Lines]",
      "2971:   if (uuid_data(uuid).packet_count >= 1024 &&",
      "",
      "[Added Lines]",
      "2973:   if (uuid_data(uuid).packet_count >= FIO_SLOWLORIS_LIMIT &&",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3533:   fio_data->active = 0;",
      "3534:   fio_on_fork();",
      "3535:   fio_defer_perform();",
      "3536:   fio_state_callback_force(FIO_CALL_AT_EXIT);",
      "3537:   fio_state_callback_clear_all();",
      "3538:   fio_defer_perform();",
      "3539:   fio_poll_close();",
      "3541:   fio_free(fio_data);",
      "3543:   fio_mem_destroy();",
      "",
      "[Removed Lines]",
      "3540:   fio_timer_clear_all();",
      "",
      "[Added Lines]",
      "3538:   fio_timer_clear_all();",
      "3539:   fio_defer_perform();",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3811:       fio_force_close(fd2uuid(i));",
      "3812:     }",
      "3813:   }",
      "3816:   fio_defer_perform();",
      "3817:   if (!fio_data->is_worker) {",
      "3819:     while (wait(NULL) != -1)",
      "3820:       ;",
      "3821:   }",
      "3822:   fio_defer_perform();",
      "3823:   fio_signal_handler_reset();",
      "3824:   if (fio_data->parent == getpid()) {",
      "3825:     FIO_LOG_INFO(\"   ---  Shutdown Complete  ---\\n\");",
      "",
      "[Removed Lines]",
      "3814:   fio_defer_perform();",
      "3815:   fio_state_callback_force(FIO_CALL_ON_FINISH);",
      "3818:     fio_cluster_signal_children();",
      "",
      "[Added Lines]",
      "3817:   fio_timer_clear_all();",
      "3820:     kill(0, SIGINT);",
      "3825:   fio_state_callback_force(FIO_CALL_ON_FINISH);",
      "3826:   fio_defer_perform();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5125:   void *udata1;",
      "5126:   void *udata2;",
      "5130:   fio_lock_i lock;",
      "5131:   fio_lock_i unsubscribed;",
      "",
      "[Removed Lines]",
      "5128:   uintptr_t ref;",
      "",
      "[Added Lines]",
      "5132:   volatile uintptr_t ref;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "6202:                   (int)getpid());",
      "6203: #endif",
      "6204:     if (fio_data->active)",
      "6206:   }",
      "6207:   (void)uuid;",
      "6208: }",
      "",
      "[Removed Lines]",
      "6205:       fio_stop();",
      "",
      "[Added Lines]",
      "6209:       kill(0, SIGINT);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "6244:     break;",
      "6245:   case FIO_CLUSTER_MSG_SHUTDOWN:",
      "6246:     fio_stop();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6251:     kill(getpid(), SIGINT);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "6499: static void fio_cluster_signal_children(void) {",
      "6500:   if (fio_parent_pid() != getpid()) {",
      "6502:     return;",
      "6503:   }",
      "6504:   fio_cluster_server_sender(fio_msg_internal_create(0, FIO_CLUSTER_MSG_SHUTDOWN,",
      "",
      "[Removed Lines]",
      "6501:     fio_stop();",
      "",
      "[Added Lines]",
      "6506:     kill(getpid(), SIGINT);",
      "",
      "---------------"
    ],
    "ext/iodine/fio.h||ext/iodine/fio.h": [
      "File: ext/iodine/fio.h -> ext/iodine/fio.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "110: #define FIO_VERSION_MAJOR 0",
      "111: #define FIO_VERSION_MINOR 7",
      "116: #define FIO_MACRO2STR_STEP2(macro) #macro",
      "",
      "[Removed Lines]",
      "112: #define FIO_VERSION_PATCH 0",
      "113: #define FIO_VERSION_BETA 9",
      "",
      "[Added Lines]",
      "112: #define FIO_VERSION_PATCH 3",
      "113: #define FIO_VERSION_BETA 0",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1250: inline FIO_FUNC ssize_t fio_sendfile(intptr_t uuid, intptr_t source_fd,",
      "1251:                                      off_t offset, size_t length) {",
      "1252:   return fio_write2(uuid, .data.fd = source_fd, .length = length, .is_fd = 1,",
      "1254: }",
      "",
      "[Removed Lines]",
      "1253:                     .offset = offset);",
      "",
      "[Added Lines]",
      "1253:                     .offset = (uintptr_t)offset);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2986: FIO_FUNC inline void fio_throttle_thread(size_t nano_sec) {",
      "2989:   nanosleep(&tm, NULL);",
      "2990: }",
      "",
      "[Removed Lines]",
      "2987:   const struct timespec tm = {.tv_nsec = (nano_sec % 1000000000),",
      "2988:                               .tv_sec = (nano_sec / 1000000000)};",
      "",
      "[Added Lines]",
      "2987:   const struct timespec tm = {.tv_nsec = (long)(nano_sec % 1000000000),",
      "2988:                               .tv_sec = (time_t)(nano_sec / 1000000000)};",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5610: #endif",
      "5614: #define FIO_SET_KEY_COMPARE(o1, o2) ((o1) == (o2))",
      "5615: #endif",
      "5618: #define FIO_SET_COMPARE(o1, o2) FIO_SET_KEY_COMPARE((o1).key, (o2).key)",
      "5620:   do {                                                                         \\",
      "5623:   } while (0);",
      "5624: #define FIO_SET_DESTROY(couplet)                                               \\",
      "5625:   do {                                                                         \\",
      "",
      "[Removed Lines]",
      "5613: #if !defined(FIO_SET_KEY_COMPARE)",
      "5619: #define FIO_SET_COPY(dest, org)                                                \\",
      "5621:     FIO_SET_OBJ_COPY((dest).obj, (org).obj);                                   \\",
      "5622:     FIO_SET_KEY_COPY((dest).key, (org).key);                                   \\",
      "",
      "[Added Lines]",
      "5613: #ifndef FIO_SET_KEY_COMPARE",
      "5619: #define FIO_SET_COPY(dest, src)                                                \\",
      "5621:     FIO_SET_OBJ_COPY((dest).obj, (src).obj);                                   \\",
      "5622:     FIO_SET_KEY_COPY((dest).key, (src).key);                                   \\",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5871:     if (FIO_SET_HASH_COMPARE(FIO_SET_HASH_INVALID, pos->hash))",
      "5872:       return pos;",
      "5873:     if (FIO_SET_HASH_COMPARE(pos->hash, hash_value_i)) {",
      "5875:         return pos;",
      "5877:       set->has_collisions = 1;",
      "",
      "[Removed Lines]",
      "5874:       if (!pos->pos || FIO_SET_COMPARE(pos->pos->obj, obj))",
      "",
      "[Added Lines]",
      "5874:       if (!pos->pos || (FIO_SET_COMPARE(pos->pos->obj, obj)))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5890:       if (FIO_SET_HASH_COMPARE(FIO_SET_HASH_INVALID, pos->hash))",
      "5891:         return pos;",
      "5892:       if (FIO_SET_HASH_COMPARE(pos->hash, hash_value_i)) {",
      "5894:           return pos;",
      "5896:         set->has_collisions = 1;",
      "",
      "[Removed Lines]",
      "5893:         if (!pos->pos || FIO_SET_COMPARE(pos->pos->obj, obj))",
      "",
      "[Added Lines]",
      "5893:         if (!pos->pos || (FIO_SET_COMPARE(pos->pos->obj, obj)))",
      "",
      "---------------"
    ],
    "ext/iodine/fio_cli.c||ext/iodine/fio_cli.c": [
      "File: ext/iodine/fio_cli.c -> ext/iodine/fio_cli.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "272:       switch ((size_t)type) {",
      "273:       case FIO_CLI_STRING__TYPE_I:",
      "274:         fprintf(stderr,",
      "277:                 (int)(tmp - start), p + start, padding, \"\", first_len, p);",
      "278:         break;",
      "279:       case FIO_CLI_BOOL__TYPE_I:",
      "280:         fprintf(stderr,",
      "282:                 (int)(tmp - start), p + start, padding, \"\", first_len, p);",
      "283:         break;",
      "284:       case FIO_CLI_INT__TYPE_I:",
      "285:         fprintf(stderr,",
      "288:                 (int)(tmp - start), p + start, padding, \"\", first_len, p);",
      "289:         break;",
      "290:       }",
      "",
      "[Removed Lines]",
      "275:                 \" \\x1B[1m%.*s\\x1B[0m\\x1B[2m <>\\x1B[0m%*s\\t\\x1B[2msame as \"",
      "276:                 \"%.*s\\x1B[0m\\n\",",
      "281:                 \" \\x1B[1m%.*s\\x1B[0m   %*s\\t\\x1B[2msame as %.*s\\x1B[0m\\n\",",
      "286:                 \" \\x1B[1m%.*s\\x1B[0m\\x1B[2m ##\\x1B[0m%*s\\t\\x1B[2msame as \"",
      "287:                 \"%.*s\\x1B[0m\\n\",",
      "",
      "[Added Lines]",
      "275:                 \" \\x1B[1m%.*s\\x1B[0m\\x1B[2m <>\\x1B[0m%*s\\t(same as \"",
      "276:                 \"\\x1B[1m%.*s\\x1B[0m)\\n\",",
      "281:                 \" \\x1B[1m%.*s\\x1B[0m   %*s\\t(same as \\x1B[1m%.*s\\x1B[0m)\\n\",",
      "286:                 \" \\x1B[1m%.*s\\x1B[0m\\x1B[2m ##\\x1B[0m%*s\\t(same as \"",
      "287:                 \"\\x1B[1m%.*s\\x1B[0m)\\n\",",
      "",
      "---------------"
    ],
    "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c": [
      "File: ext/iodine/fio_tls_missing.c -> ext/iodine/fio_tls_missing.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:   fio_tls_destroy_context(tls);",
      "629:   alpn_list_free(&tls->alpn);",
      "630:   cert_ary_free(&tls->sni);",
      "631:   free(tls);",
      "632: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "631:   trust_ary_free(&tls->trust);",
      "",
      "---------------"
    ],
    "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c": [
      "File: ext/iodine/fio_tls_openssl.c -> ext/iodine/fio_tls_openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1005:   fio_tls_destroy_context(tls);",
      "1006:   alpn_list_free(&tls->alpn);",
      "1007:   cert_ary_free(&tls->sni);",
      "1008:   free(tls);",
      "1009: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1008:   trust_ary_free(&tls->trust);",
      "",
      "---------------"
    ],
    "ext/iodine/fiobj4fio.h||ext/iodine/fiobj4fio.h": [
      "File: ext/iodine/fiobj4fio.h -> ext/iodine/fiobj4fio.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:                                                               FIOBJ o) {",
      "15:   fio_str_info_s s = fiobj_obj2cstr(o);",
      "16:   return fio_write2(uuid, .data.buffer = (void *)(o),",
      "18:                     .length = s.len, .after.dealloc = fiobj4sock_dealloc);",
      "19: }",
      "",
      "[Removed Lines]",
      "17:                     .offset = (((intptr_t)s.data) - ((intptr_t)(o))),",
      "",
      "[Added Lines]",
      "17:                     .offset = (uintptr_t)(((intptr_t)s.data) - ((intptr_t)(o))),",
      "",
      "---------------"
    ],
    "ext/iodine/fiobj_numbers.h||ext/iodine/fiobj_numbers.h": [
      "File: ext/iodine/fiobj_numbers.h -> ext/iodine/fiobj_numbers.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "82: size_t fio_ftoa(char *dest, double num, uint8_t base);",
      "91: Pointer Wrapping Helper MACROs (uses integers)",
      "",
      "[Removed Lines]",
      "85: fio_str_info_s fio_ltocstr(long);",
      "88: fio_str_info_s fio_ftocstr(double);",
      "",
      "[Added Lines]",
      "85: fio_str_info_s __attribute__((deprecated(\"use local buffer with fio_ltoa\")))",
      "86: fio_ltocstr(long);",
      "89: fio_str_info_s __attribute__((deprecated(\"use local buffer with fio_ftoa\")))",
      "90: fio_ftocstr(double);",
      "",
      "---------------"
    ],
    "ext/iodine/http.c||ext/iodine/http.c": [
      "File: ext/iodine/http.c -> ext/iodine/http.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "356:   return ((http_vtable_s *)r->private_data.vtbl)",
      "357:       ->http_sendfile(r, fd, length, offset);",
      "358: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360: static inline int http_test_encoded_path(const char *mem, size_t len) {",
      "361:   const char *pos = NULL;",
      "362:   const char *end = mem + len;",
      "363:   while (mem < end && (pos = memchr(mem, '/', (size_t)len))) {",
      "364:     len = end - pos;",
      "365:     mem = pos + 1;",
      "366:     if (pos[1] == '/')",
      "367:       return -1;",
      "368:     if (len > 3 && pos[1] == '.' && pos[2] == '.' && pos[3] == '/')",
      "369:       return -1;",
      "370:   }",
      "371:   return 0;",
      "372: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "391:       char *pos = (char *)encoded;",
      "392:       const char *end = encoded + encoded_len;",
      "393:       while (pos < end) {",
      "399:         if (*pos == '%') {",
      "402:           if (hex2byte((uint8_t *)tmp.data + tmp.len, (uint8_t *)pos + 1))",
      "403:             return -1;",
      "404:           tmp.len++;",
      "",
      "[Removed Lines]",
      "395:         if (*pos == '/' && (pos[1] == '/' ||",
      "396:                             (((uintptr_t)end - (uintptr_t)pos >= 4) &&",
      "397:                              pos[1] == '.' && pos[2] == '.' && pos[3] == '/')))",
      "398:           return -1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "408:       }",
      "409:       tmp.data[tmp.len] = 0;",
      "410:       fiobj_str_resize(filename, tmp.len);",
      "411:     }",
      "412:     if (tmp.data[tmp.len - 1] == '/')",
      "413:       fiobj_str_write(filename, \"index.html\", 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:       if (http_test_encoded_path(tmp.data + prefix_len, tmp.len - prefix_len))",
      "422:         return -1;",
      "",
      "---------------"
    ],
    "ext/iodine/http.h||ext/iodine/http.h": [
      "File: ext/iodine/http.h -> ext/iodine/http.h"
    ],
    "ext/iodine/http1.c||ext/iodine/http1.c": [
      "File: ext/iodine/http1.c -> ext/iodine/http1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "554:   if (p->request.method && !p->stop)",
      "555:     http_finish(&p->request);",
      "556:   h1_reset(p);",
      "558: }",
      "560: static int http1_on_response(http1_parser_s *parser) {",
      "",
      "[Removed Lines]",
      "557:   return !p->close && fio_is_closed(p->p.uuid);",
      "",
      "[Added Lines]",
      "557:   return fio_is_closed(p->p.uuid);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "563:   if (p->request.status_str && !p->stop)",
      "564:     http_finish(&p->request);",
      "565:   h1_reset(p);",
      "567: }",
      "569: static int http1_on_method(http1_parser_s *parser, char *method,",
      "",
      "[Removed Lines]",
      "566:   return !p->close && fio_is_closed(p->p.uuid);",
      "",
      "[Added Lines]",
      "566:   return fio_is_closed(p->p.uuid);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "668: static int http1_on_error(http1_parser_s *parser) {",
      "672:   fio_close(parser2http(parser)->p.uuid);",
      "673:   return -1;",
      "674: }",
      "",
      "[Removed Lines]",
      "669:   FIO_LOG_DEBUG(\"HTTP parser error at HTTP/1.1 buffer position %zu/%zu\",",
      "670:                 parser->state.next - parser2http(parser)->buf,",
      "671:                 parser2http(parser)->buf_len);",
      "",
      "[Added Lines]",
      "669:   if (parser2http(parser)->close)",
      "670:     return -1;",
      "671:   FIO_LOG_DEBUG(\"HTTP parser error.\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "724: throttle:",
      "727:   p->stop |= 4;",
      "728:   FIO_LOG_DEBUG(\"(HTTP/1,1) throttling client at %.*s\",",
      "729:                 (int)fio_peer_addr(uuid).len, fio_peer_addr(uuid).data);",
      "730: }",
      "",
      "[Removed Lines]",
      "726:   fio_suspend(uuid);",
      "",
      "[Added Lines]",
      "727:   fio_suspend(uuid);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "756: static void http1_on_ready(intptr_t uuid, fio_protocol_s *protocol) {",
      "758:   http1pr_s *p = (http1pr_s *)protocol;",
      "761:     fio_force_event(uuid, FIO_EVENT_ON_DATA);",
      "762:   }",
      "763:   (void)protocol;",
      "",
      "[Removed Lines]",
      "759:   if ((p->stop & 4)) {",
      "760:     p->stop ^= 4;",
      "",
      "[Added Lines]",
      "759:   if (p->stop & 4) {",
      "",
      "---------------"
    ],
    "ext/iodine/iodine_mustache.c||ext/iodine/iodine_mustache.c": [
      "File: ext/iodine/iodine_mustache.c -> ext/iodine/iodine_mustache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:   key = rb_sym2str(key);",
      "75:   tmp = rb_hash_lookup2(udata, key, Qundef);",
      "76:   if (tmp != Qundef)",
      "77:     return tmp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:   rb_str_free(key);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:   if (filename != Qnil)",
      "296:     Check_Type(filename, T_STRING);",
      "300:   mustache_s **m = NULL;",
      "301:   TypedData_Get_Struct(self, mustache_s *, &iodine_mustache_data_type, m);",
      "302:   if (!m) {",
      "",
      "[Removed Lines]",
      "298:   fio_str_s str = FIO_STR_INIT;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "iodine.gemspec||iodine.gemspec": [
      "File: iodine.gemspec -> iodine.gemspec",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:   spec.add_development_dependency 'minitest', '>=5', '< 6.0'",
      "43:   spec.add_development_dependency 'rake-compiler', '>= 1', '< 2.0'",
      "46: end",
      "",
      "[Removed Lines]",
      "45:   spec.post_install_message = \"Thank you for installing Iodine #{Iodine::VERSION}.\\n\"",
      "",
      "[Added Lines]",
      "45:   spec.post_install_message = \"Thank you for installing Iodine #{Iodine::VERSION}.\\n\" +",
      "46:                               \"Remember: if iodine supports your business, it's is only fair to give value back (code contributions / donations).\"",
      "",
      "---------------"
    ],
    "lib/iodine/version.rb||lib/iodine/version.rb": [
      "File: lib/iodine/version.rb -> lib/iodine/version.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: module Iodine",
      "3: end",
      "",
      "[Removed Lines]",
      "2:   VERSION = '0.7.33'.freeze",
      "",
      "[Added Lines]",
      "2:   VERSION = '0.7.34'.freeze",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b8c622664409f5d22b85a88630dae7bcf44326a",
      "candidate_info": {
        "commit_hash": "6b8c622664409f5d22b85a88630dae7bcf44326a",
        "repo": "boazsegev/iodine",
        "commit_url": "https://github.com/boazsegev/iodine/commit/6b8c622664409f5d22b85a88630dae7bcf44326a",
        "files": [
          "ext/iodine/fio.c"
        ],
        "message": "rollback some replacements of `kill` with `fio_stop`",
        "before_after_code_files": [
          "ext/iodine/fio.c||ext/iodine/fio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/iodine/fio.c||ext/iodine/fio.c"
          ],
          "candidate": [
            "ext/iodine/fio.c||ext/iodine/fio.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/iodine/fio.c||ext/iodine/fio.c": [
          "File: ext/iodine/fio.c -> ext/iodine/fio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3817:   fio_timer_clear_all();",
          "3818:   fio_defer_perform();",
          "3819:   if (!fio_data->is_worker) {",
          "3821:     while (wait(NULL) != -1)",
          "3822:       ;",
          "3823:   }",
          "",
          "[Removed Lines]",
          "3820:     kill(0, SIGINT);",
          "",
          "[Added Lines]",
          "3820:     fio_cluster_signal_children();",
          "3821:     fio_defer_perform();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6206:                   (int)getpid());",
          "6207: #endif",
          "6208:     if (fio_data->active)",
          "6210:   }",
          "6211:   (void)uuid;",
          "6212: }",
          "",
          "[Removed Lines]",
          "6209:       kill(0, SIGINT);",
          "",
          "[Added Lines]",
          "6210:       fio_stop();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6504: static void fio_cluster_signal_children(void) {",
          "6505:   if (fio_parent_pid() != getpid()) {",
          "6507:     return;",
          "6508:   }",
          "6509:   fio_cluster_server_sender(fio_msg_internal_create(0, FIO_CLUSTER_MSG_SHUTDOWN,",
          "",
          "[Removed Lines]",
          "6506:     kill(getpid(), SIGINT);",
          "",
          "[Added Lines]",
          "6507:     fio_stop();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bd1b3ea66aa2310bc444953a5d26a292125ca11",
      "candidate_info": {
        "commit_hash": "0bd1b3ea66aa2310bc444953a5d26a292125ca11",
        "repo": "boazsegev/iodine",
        "commit_url": "https://github.com/boazsegev/iodine/commit/0bd1b3ea66aa2310bc444953a5d26a292125ca11",
        "files": [
          "CHANGELOG.md",
          "exe/iodine",
          "lib/iodine.rb",
          "lib/iodine/version.rb"
        ],
        "message": "fix #96",
        "before_after_code_files": [
          "lib/iodine.rb||lib/iodine.rb",
          "lib/iodine/version.rb||lib/iodine/version.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ],
          "candidate": [
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/iodine.rb||lib/iodine.rb": [
          "File: lib/iodine.rb -> lib/iodine.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: end",
          "180: ### Parse CLI for default HTTP settings",
          "183: ### Set default port (if missing)",
          "184: Iodine::DEFAULT_SETTINGS[:port] ||= (ENV[\"PORT\"] || \"3000\")",
          "",
          "[Removed Lines]",
          "181: Iodine::Base::CLI.parse",
          "",
          "[Added Lines]",
          "181: Iodine::Base::CLI.parse if defined?(IODINE_PARSE_CLI) && IODINE_PARSE_CLI",
          "",
          "---------------"
        ],
        "lib/iodine/version.rb||lib/iodine/version.rb": [
          "File: lib/iodine/version.rb -> lib/iodine/version.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module Iodine",
          "3: end",
          "",
          "[Removed Lines]",
          "2:   VERSION = '0.7.40'.freeze",
          "",
          "[Added Lines]",
          "2:   VERSION = '0.7.41'.freeze",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39d9fe12ef69c652049429ebca14fbff15cecd38",
      "candidate_info": {
        "commit_hash": "39d9fe12ef69c652049429ebca14fbff15cecd38",
        "repo": "boazsegev/iodine",
        "commit_url": "https://github.com/boazsegev/iodine/commit/39d9fe12ef69c652049429ebca14fbff15cecd38",
        "files": [
          "CHANGELOG.md",
          "ext/iodine/fio.h",
          "ext/iodine/http1_parser.c",
          "ext/iodine/http1_parser.h",
          "lib/iodine/version.rb"
        ],
        "message": "possible fix for #87",
        "before_after_code_files": [
          "ext/iodine/fio.h||ext/iodine/fio.h",
          "ext/iodine/http1_parser.c||ext/iodine/http1_parser.c",
          "ext/iodine/http1_parser.h||ext/iodine/http1_parser.h",
          "lib/iodine/version.rb||lib/iodine/version.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/iodine/fio.h||ext/iodine/fio.h",
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ],
          "candidate": [
            "ext/iodine/fio.h||ext/iodine/fio.h",
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ]
        }
      },
      "candidate_diff": {
        "ext/iodine/fio.h||ext/iodine/fio.h": [
          "File: ext/iodine/fio.h -> ext/iodine/fio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: #define FIO_VERSION_MAJOR 0",
          "111: #define FIO_VERSION_MINOR 7",
          "113: #define FIO_VERSION_BETA 0",
          "",
          "[Removed Lines]",
          "112: #define FIO_VERSION_PATCH 3",
          "",
          "[Added Lines]",
          "112: #define FIO_VERSION_PATCH 4",
          "",
          "---------------"
        ],
        "ext/iodine/http1_parser.c||ext/iodine/http1_parser.c": [
          "File: ext/iodine/http1_parser.c -> ext/iodine/http1_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static int seek2ch(uint8_t **buffer, register uint8_t *const limit,",
          "33:                    const uint8_t c) {",
          "34:   if (**buffer == c) {",
          "35: #if HTTP1_PARSER_CONVERT_EOL2NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   if (*buffer >= limit)",
          "35:     return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   {",
          "48:     const uint8_t *alignment =",
          "49:         (uint8_t *)(((uintptr_t)(*buffer) & (~(uintptr_t)7)) + 8);",
          "52:     if (limit >= alignment) {",
          "53:       while (*buffer < alignment) {",
          "54:         if (**buffer == c) {",
          "",
          "[Removed Lines]",
          "50:     if (*buffer < alignment)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: inline static uint8_t seek2ch(uint8_t **pos, uint8_t *const limit, uint8_t ch) {",
          "98:     return 1;",
          "99:   }",
          "100:   uint8_t *tmp = memchr(*pos, ch, limit - (*pos));",
          "",
          "[Removed Lines]",
          "97:   if (*pos >= limit || **pos == ch) {",
          "",
          "[Added Lines]",
          "98:   if (*pos >= limit)",
          "99:     return 0;",
          "100:   if (**pos == ch) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   return 1;",
          "126: }",
          "129: HTTP/1.1 parsre stages",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: String to Number",
          "136: static long long http1_atol(const uint8_t *buf, const uint8_t **end) {",
          "137:   register unsigned long long i = 0;",
          "138:   uint8_t inv = 0;",
          "139:   while (*buf == ' ' || *buf == '\\t' || *buf == '\\f')",
          "140:     ++buf;",
          "141:   while (*buf == '-' || *buf == '+')",
          "142:     inv ^= (*(buf++) == '-');",
          "143:   while (i <= ((((~0ULL) >> 1) / 10)) && *buf >= '0' && *buf <= '9') {",
          "144:     i = i * 10;",
          "145:     i += *buf - '0';",
          "146:     ++buf;",
          "147:   }",
          "149:   if (i >= (~((~0ULL) >> 1)) || (*buf >= '0' && *buf <= '9'))",
          "150:     i = (~0ULL >> 1);",
          "151:   if (inv)",
          "152:     i = 0ULL - i;",
          "153:   if (end)",
          "155:   return i;",
          "156: }",
          "159: static long long http1_atol16(const uint8_t *buf, const uint8_t **end) {",
          "160:   register unsigned long long i = 0;",
          "161:   uint8_t inv = 0;",
          "162:   for (int limit_ = 0;",
          "163:        (*buf == ' ' || *buf == '\\t' || *buf == '\\f') && limit_ < 32; ++limit_)",
          "164:     ++buf;",
          "165:   for (int limit_ = 0; (*buf == '-' || *buf == '+') && limit_ < 32; ++limit_)",
          "166:     inv ^= (*(buf++) == '-');",
          "167:   if (*buf == '0')",
          "168:     ++buf;",
          "169:   if ((*buf | 32) == 'x')",
          "170:     ++buf;",
          "171:   for (int limit_ = 0; (*buf == '0') && limit_ < 32; ++limit_)",
          "172:     ++buf;",
          "173:   while (!(i & (~((~(0ULL)) >> 4)))) {",
          "174:     if (*buf >= '0' && *buf <= '9') {",
          "175:       i <<= 4;",
          "176:       i |= *buf - '0';",
          "177:     } else if ((*buf | 32) >= 'a' && (*buf | 32) <= 'f') {",
          "178:       i <<= 4;",
          "179:       i |= (*buf | 32) - ('a' - 10);",
          "180:     } else",
          "181:       break;",
          "182:     ++buf;",
          "183:   }",
          "184:   if (inv)",
          "185:     i = 0ULL - i;",
          "186:   if (end)",
          "188:   return i;",
          "189: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:   if (start_value[0] == ' ') {",
          "225:     start_value++;",
          "226:   };",
          "229:   if ((end_name - start) == 14 &&",
          "247: #else",
          "257:   } else if ((end_name - start) == 7 &&",
          "260:     args->parser->state.reserved |= 64;",
          "261:     args->parser->state.reserved |= 32;",
          "262:   }",
          "265:   if (args->on_header(args->parser, (char *)start, (end_name - start),",
          "266:                       (char *)start_value, end - start_value))",
          "",
          "[Removed Lines]",
          "227: #if ALLOW_UNALIGNED_MEMORY_ACCESS && HTTP_HEADERS_LOWERCASE",
          "233:     args->parser->state.content_length = atol((char *)start_value);",
          "234:   } else if ((end_name - start) == 17 &&",
          "240:     args->parser->state.reserved |= 64;",
          "241:   } else if ((end_name - start) == 7 &&",
          "244:     args->parser->state.reserved |= 64;",
          "245:     args->parser->state.reserved |= 32;",
          "246:   }",
          "248:   if ((end_name - start) == 14 &&",
          "249:       HEADER_NAME_IS_EQ((char *)start, \"content-length\", 14)) {",
          "251:     args->parser->state.content_length = atol((char *)start_value);",
          "252:   } else if ((end_name - start) == 17 &&",
          "253:              HEADER_NAME_IS_EQ((char *)start, \"transfer-encoding\", 17) &&",
          "254:              HEADER_VALUE_IS_EQ_CASE_SENSITIVE((char *)start_value, \"chunked\", 7)) {",
          "256:     args->parser->state.reserved |= 64;",
          "258:              HEADER_NAME_IS_EQ((char *)start, \"trailer\", 7)) {",
          "263: #endif",
          "",
          "[Added Lines]",
          "292: #if HTTP1_UNALIGNED_MEMORY_ACCESS_ENABLED && HTTP_HEADERS_LOWERCASE",
          "295: #else",
          "296:       HEADER_NAME_IS_EQ((char *)start, \"content-length\", 14)",
          "297: #endif",
          "298:   ) {",
          "300:     args->parser->state.content_length = http1_atol(start_value, NULL);",
          "301:   } else if ((end_name - start) == 17 && (end - start_value) >= 7 &&",
          "302: #if HTTP1_UNALIGNED_MEMORY_ACCESS_ENABLED && HTTP_HEADERS_LOWERCASE",
          "306:              HEADER_NAME_IS_EQ((char *)start, \"transfer-encoding\", 17)",
          "307: #endif",
          "308:   ) {",
          "311:     if (",
          "312: #if HTTP1_UNALIGNED_MEMORY_ACCESS_ENABLED",
          "313:         (((uint32_t *)(start_value))[0] | 0x20202020) ==",
          "314:             ((uint32_t *)\"chun\")[0] &&",
          "315:         (((uint32_t *)(start_value + 3))[0] | 0x20202020) ==",
          "316:             ((uint32_t *)\"nked\")[0]",
          "317: #else",
          "318:         ((start_value[0] | 32) == 'c' && (start_value[1] | 32) == 'h' &&",
          "319:          (start_value[2] | 32) == 'u' && (start_value[3] | 32) == 'n' &&",
          "320:          (start_value[4] | 32) == 'k' && (start_value[5] | 32) == 'e' &&",
          "321:          (start_value[6] | 32) == 'd')",
          "322: #endif",
          "323:     ) {",
          "325:       args->parser->state.reserved |= 64;",
          "326:       start_value += 7;",
          "327:       while (start_value < end && (*start_value == ',' || *start_value == ' '))",
          "328:         ++start_value;",
          "329:       if (!(end - start_value))",
          "330:         return 0;",
          "331:     } else if ((end - start_value) > 7 &&",
          "332:                ((end[(-7 + 0)] | 32) == 'c' && (end[(-7 + 1)] | 32) == 'h' &&",
          "333:                 (end[(-7 + 2)] | 32) == 'u' && (end[(-7 + 3)] | 32) == 'n' &&",
          "334:                 (end[(-7 + 4)] | 32) == 'k' && (end[(-7 + 5)] | 32) == 'e' &&",
          "335:                 (end[(-7 + 6)] | 32) == 'd')) {",
          "337:       args->parser->state.reserved |= 64;",
          "338:       end -= 7;",
          "339:       while (start_value < end && (end[-1] == ',' || end[-1] == ' '))",
          "340:         --end;",
          "341:       if (!(end - start_value))",
          "342:         return 0;",
          "343:     } else if ((end - start_value) > 7 && (end - start_value) < 256) {",
          "345:       uint8_t val[256];",
          "346:       size_t val_len = 0;",
          "347:       while (start_value < end) {",
          "348:         if (",
          "349: #if HTTP1_UNALIGNED_MEMORY_ACCESS_ENABLED",
          "350:             (((uint32_t *)(start_value))[0] | 0x20202020) ==",
          "351:                 ((uint32_t *)\"chun\")[0] &&",
          "352:             (((uint32_t *)(start_value + 3))[0] | 0x20202020) ==",
          "353:                 ((uint32_t *)\"nked\")[0]",
          "354: #else",
          "355:             ((start_value[0] | 32) == 'c' && (start_value[1] | 32) == 'h' &&",
          "356:              (start_value[2] | 32) == 'u' && (start_value[3] | 32) == 'n' &&",
          "357:              (start_value[4] | 32) == 'k' && (start_value[5] | 32) == 'e' &&",
          "358:              (start_value[6] | 32) == 'd')",
          "359: #endif",
          "361:         ) {",
          "362:           args->parser->state.reserved |= 64;",
          "363:           start_value += 7;",
          "365:           while (start_value < end &&",
          "366:                  (*start_value == ',' || *start_value == ' '))",
          "367:             ++start_value;",
          "368:           break;",
          "369:         }",
          "370:         val[val_len++] = *start_value;",
          "371:         ++start_value;",
          "372:       }",
          "373:       while (start_value < end) {",
          "374:         val[val_len++] = *start_value;",
          "375:         ++start_value;",
          "376:       }",
          "378:       val[val_len] = 0;",
          "379:       if (val_len && args->on_header(args->parser, (char *)start,",
          "380:                                      (end_name - start), (char *)val, val_len))",
          "381:         return -1;",
          "382:       return 0;",
          "383:     }",
          "385: #if HTTP1_UNALIGNED_MEMORY_ACCESS_ENABLED && HTTP_HEADERS_LOWERCASE",
          "387: #else",
          "388:              HEADER_NAME_IS_EQ((char *)start, \"trailer\", 7)",
          "389: #endif",
          "390:   ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:   uint8_t *end = *start;",
          "296:   while (*start < stop) {",
          "297:     if (args->parser->state.content_length == 0) {",
          "305:         return 0;",
          "306:       }",
          "309:         return 0;",
          "313:       if (args->parser->state.content_length == 0) {",
          "315:         args->parser->state.content_length = args->parser->state.read;",
          "319:         if (args->parser->state.reserved & 32) {",
          "",
          "[Removed Lines]",
          "298:       size_t eol_len;",
          "300:       while (*start < stop && (**start == '\\n' || **start == '\\r'))",
          "301:         ++(*start);",
          "303:       if (!(eol_len = seek2eol(&end, stop))) {",
          "308:       if (*start + eol_len > end && (*start = end) && !seek2eol(&end, stop)) {",
          "310:       }",
          "311:       args->parser->state.content_length = 0 - strtol((char *)*start, NULL, 16);",
          "317:         if (seek2eol(start, stop))",
          "318:           (*start)++;",
          "",
          "[Added Lines]",
          "431:       if (end + 2 >= stop)",
          "433:       if ((end[0] == '\\r' && end[1] == '\\n')) {",
          "435:         end += 2;",
          "437:         if (end + 2 >= stop)",
          "438:           return 0;",
          "440:       long long chunk_len = http1_atol16(end, (const uint8_t **)&end);",
          "443:       if ((end[0] != '\\r' || end[1] != '\\n'))",
          "445:       end += 2;",
          "447:       args->parser->state.content_length = 0 - chunk_len;",
          "453:         if (*start + 2 <= stop)",
          "",
          "---------------"
        ],
        "ext/iodine/http1_parser.h||ext/iodine/http1_parser.h": [
          "File: ext/iodine/http1_parser.h -> ext/iodine/http1_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   (!strncasecmp((var_name), (const_name), (len)))",
          "49: #endif",
          "55: typedef struct http1_parser_s {",
          "56:   void *udata;",
          "",
          "[Removed Lines]",
          "51: #define HEADER_VALUE_IS_EQ_CASE_SENSITIVE(var_name, const_name, len)                           \\",
          "52:   (!memcmp((var_name), (const_name), (len)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/iodine/version.rb||lib/iodine/version.rb": [
          "File: lib/iodine/version.rb -> lib/iodine/version.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module Iodine",
          "3: end",
          "",
          "[Removed Lines]",
          "2:   VERSION = '0.7.37'.freeze",
          "",
          "[Added Lines]",
          "2:   VERSION = '0.7.38'.freeze",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3149752984c0d848337423fbfd8c1a4b615b45f",
      "candidate_info": {
        "commit_hash": "a3149752984c0d848337423fbfd8c1a4b615b45f",
        "repo": "boazsegev/iodine",
        "commit_url": "https://github.com/boazsegev/iodine/commit/a3149752984c0d848337423fbfd8c1a4b615b45f",
        "files": [
          "CHANGELOG.md",
          "ext/iodine/fio.c",
          "ext/iodine/fio_tls_missing.c",
          "ext/iodine/fio_tls_openssl.c",
          "ext/iodine/http.c",
          "ext/iodine/http1.c",
          "lib/iodine/version.rb"
        ],
        "message": "TLS and timeout improvements",
        "before_after_code_files": [
          "ext/iodine/fio.c||ext/iodine/fio.c",
          "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c",
          "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c",
          "ext/iodine/http.c||ext/iodine/http.c",
          "ext/iodine/http1.c||ext/iodine/http1.c",
          "lib/iodine/version.rb||lib/iodine/version.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/iodine/fio.c||ext/iodine/fio.c",
            "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c",
            "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c",
            "ext/iodine/http.c||ext/iodine/http.c",
            "ext/iodine/http1.c||ext/iodine/http1.c",
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ],
          "candidate": [
            "ext/iodine/fio.c||ext/iodine/fio.c",
            "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c",
            "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c",
            "ext/iodine/http.c||ext/iodine/http.c",
            "ext/iodine/http1.c||ext/iodine/http1.c",
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ]
        }
      },
      "candidate_diff": {
        "ext/iodine/fio.c||ext/iodine/fio.c": [
          "File: ext/iodine/fio.c -> ext/iodine/fio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: Core Connection Data Clearing",
          "301: static inline int fio_clear_fd(intptr_t fd, uint8_t is_open) {",
          "302:   fio_packet_s *packet;",
          "",
          "[Removed Lines]",
          "281: static void fio_max_fd_min(uint32_t fd) {",
          "282:   if (fio_data->max_protocol_fd > fd)",
          "283:     return;",
          "284:   fio_lock(&fio_data->lock);",
          "285:   if (fio_data->max_protocol_fd < fd)",
          "286:     fio_data->max_protocol_fd = fd;",
          "287:   fio_unlock(&fio_data->lock);",
          "288: }",
          "291: static void fio_max_fd_shrink(void) {",
          "292:   fio_lock(&fio_data->lock);",
          "293:   uint32_t fd = fio_data->max_protocol_fd;",
          "294:   while (fd && fd_data(fd).protocol == NULL)",
          "295:     --fd;",
          "296:   fio_data->max_protocol_fd = fd;",
          "297:   fio_unlock(&fio_data->lock);",
          "298: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:       .counter = fd_data(fd).counter + 1,",
          "319:       .packet_last = &fd_data(fd).packet,",
          "320:   };",
          "321:   fio_unlock(&(fd_data(fd).sock_lock));",
          "322:   if (rw_hooks && rw_hooks->cleanup)",
          "323:     rw_hooks->cleanup(rw_udata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:   if (fio_data->max_protocol_fd < fd) {",
          "302:     fio_data->max_protocol_fd = fd;",
          "303:   } else {",
          "304:     while (fio_data->max_protocol_fd &&",
          "305:            !fd_data(fio_data->max_protocol_fd).open)",
          "306:       --fio_data->max_protocol_fd;",
          "307:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:   if (protocol && protocol->on_close) {",
          "337:     fio_defer(deferred_on_close, (void *)fd2uuid(fd), protocol);",
          "338:   }",
          "341:   return 0;",
          "342: }",
          "",
          "[Removed Lines]",
          "339:   if (is_open)",
          "340:     fio_max_fd_min(fd);",
          "",
          "[Added Lines]",
          "326:   FIO_LOG_DEBUG(\"FD %d re-initialized (state: %p-%s).\", (int)fd,",
          "327:                 (void *)fd2uuid(fd), (is_open ? \"open\" : \"closed\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2887:   }",
          "2888:   if (uuid_data(uuid).packet || uuid_data(uuid).sock_lock) {",
          "2889:     uuid_data(uuid).close = 1;",
          "2891:     return;",
          "2892:   }",
          "2893:   fio_force_close(uuid);",
          "",
          "[Removed Lines]",
          "2890:     fio_poll_add_write(fio_uuid2fd(uuid));",
          "",
          "[Added Lines]",
          "2877:     fio_force_event(uuid, FIO_EVENT_ON_READY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3100:     .cleanup = fio_hooks_default_cleanup,",
          "3101: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3090: static inline void fio_rw_hook_validate(fio_rw_hook_s *rw_hooks) {",
          "3091:   if (!rw_hooks->read)",
          "3092:     rw_hooks->read = fio_hooks_default_read;",
          "3093:   if (!rw_hooks->write)",
          "3094:     rw_hooks->write = fio_hooks_default_write;",
          "3095:   if (!rw_hooks->flush)",
          "3096:     rw_hooks->flush = fio_hooks_default_flush;",
          "3097:   if (!rw_hooks->before_close)",
          "3098:     rw_hooks->before_close = fio_hooks_default_before_close;",
          "3099:   if (!rw_hooks->cleanup)",
          "3100:     rw_hooks->cleanup = fio_hooks_default_cleanup;",
          "3101: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3113:   int replaced = -1;",
          "3114:   uint8_t was_locked;",
          "3115:   intptr_t fd = fio_uuid2fd(uuid);",
          "3127:   was_locked = fio_trylock(&fd_data(fd).sock_lock);",
          "3129:     fd_data(fd).rw_hooks = rw_hooks;",
          "3130:     fd_data(fd).rw_udata = udata;",
          "3131:     replaced = 0;",
          "",
          "[Removed Lines]",
          "3116:   if (!rw_hooks->read)",
          "3117:     rw_hooks->read = fio_hooks_default_read;",
          "3118:   if (!rw_hooks->write)",
          "3119:     rw_hooks->write = fio_hooks_default_write;",
          "3120:   if (!rw_hooks->flush)",
          "3121:     rw_hooks->flush = fio_hooks_default_flush;",
          "3122:   if (!rw_hooks->before_close)",
          "3123:     rw_hooks->before_close = fio_hooks_default_before_close;",
          "3124:   if (!rw_hooks->cleanup)",
          "3125:     rw_hooks->cleanup = fio_hooks_default_cleanup;",
          "3128:   if (fd2uuid(fd) == uuid) {",
          "",
          "[Added Lines]",
          "3116:   fio_rw_hook_validate(rw_hooks);",
          "3119:   if (uuid_is_valid(uuid)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3139: int fio_rw_hook_set(intptr_t uuid, fio_rw_hook_s *rw_hooks, void *udata) {",
          "3140:   if (fio_is_closed(uuid))",
          "3141:     goto invalid_uuid;",
          "3152:   intptr_t fd = fio_uuid2fd(uuid);",
          "3153:   fio_rw_hook_s *old_rw_hooks;",
          "3154:   void *old_udata;",
          "",
          "[Removed Lines]",
          "3142:   if (!rw_hooks->read)",
          "3143:     rw_hooks->read = fio_hooks_default_read;",
          "3144:   if (!rw_hooks->write)",
          "3145:     rw_hooks->write = fio_hooks_default_write;",
          "3146:   if (!rw_hooks->flush)",
          "3147:     rw_hooks->flush = fio_hooks_default_flush;",
          "3148:   if (!rw_hooks->before_close)",
          "3149:     rw_hooks->before_close = fio_hooks_default_before_close;",
          "3150:   if (!rw_hooks->cleanup)",
          "3151:     rw_hooks->cleanup = fio_hooks_default_cleanup;",
          "",
          "[Added Lines]",
          "3133:   fio_rw_hook_validate(rw_hooks);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3251:     fio_poll_add(fio_uuid2fd(uuid));",
          "3252:   }",
          "3254:   return 0;",
          "3256: invalid_uuid:",
          "",
          "[Removed Lines]",
          "3253:   fio_max_fd_min(fio_uuid2fd(uuid));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3522:   }",
          "3524:   fio_pubsub_on_fork();",
          "3526:   uint16_t old_active = fio_data->active;",
          "3527:   fio_data->active = 0;",
          "3528:   fio_defer_perform();",
          "",
          "[Removed Lines]",
          "3525:   fio_max_fd_shrink();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3682:   uint16_t timeout = fd_data(fd).timeout;",
          "3683:   if (!timeout)",
          "3686:     goto finish;",
          "3692:   }",
          "3699: finish:",
          "3700:   do {",
          "3701:     fd++;",
          "3704:   if (fio_data->max_protocol_fd < fd) {",
          "3705:     fio_data->need_review = 1;",
          "",
          "[Removed Lines]",
          "3685:   if (!fd_data(fd).protocol || (fd_data(fd).active + timeout >= review))",
          "3687:   tmp = protocol_try_lock(fd, FIO_PR_LOCK_STATE);",
          "3688:   if (!tmp) {",
          "3689:     if (errno == EBADF)",
          "3690:       goto finish;",
          "3691:     goto reschedule;",
          "3693:   if (prt_meta(tmp).locks[FIO_PR_LOCK_TASK] ||",
          "3694:       prt_meta(tmp).locks[FIO_PR_LOCK_WRITE])",
          "3695:     goto unlock;",
          "3696:   fio_defer_push_task(deferred_ping, (void *)fio_fd2uuid((int)fd), NULL);",
          "3697: unlock:",
          "3698:   protocol_unlock(tmp, FIO_PR_LOCK_STATE);",
          "3702:   } while (!fd_data(fd).protocol && (fd <= fio_data->max_protocol_fd));",
          "",
          "[Added Lines]",
          "3665:   if (!fd_data(fd).open || fd_data(fd).active + timeout >= review)",
          "3667:   if (fd_data(fd).protocol) {",
          "3668:     tmp = protocol_try_lock(fd, FIO_PR_LOCK_STATE);",
          "3669:     if (!tmp) {",
          "3670:       if (errno == EBADF)",
          "3671:         goto finish;",
          "3672:       goto reschedule;",
          "3673:     }",
          "3674:     if (prt_meta(tmp).locks[FIO_PR_LOCK_TASK] ||",
          "3675:         prt_meta(tmp).locks[FIO_PR_LOCK_WRITE])",
          "3676:       goto unlock;",
          "3677:     fio_defer_push_task(deferred_ping, (void *)fio_fd2uuid((int)fd), NULL);",
          "3678:   unlock:",
          "3679:     protocol_unlock(tmp, FIO_PR_LOCK_STATE);",
          "3680:   } else {",
          "3682:     fio_close(fd2uuid(fd));",
          "3687:   } while (!fd_data(fd).open && (fd <= fio_data->max_protocol_fd));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3715:   static time_t last_to_review = 0;",
          "3716:   fio_mark_time();",
          "3717:   fio_timer_schedule();",
          "3719:   if (fio_signal_children_flag) {",
          "3721:     fio_signal_children_flag = 0;",
          "",
          "[Removed Lines]",
          "3718:   fio_max_fd_shrink();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/iodine/fio_tls_missing.c||ext/iodine/fio_tls_missing.c": [
          "File: ext/iodine/fio_tls_missing.c -> ext/iodine/fio_tls_missing.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   FIO_LOG_FATAL(\"No supported SSL/TLS library available.\");                    \\",
          "34:   exit(-1);",
          "35: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #ifndef FIO_TLS_TIMEOUT",
          "38: #define FIO_TLS_TIMEOUT 4",
          "39: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "591: void FIO_TLS_WEAK fio_tls_accept(intptr_t uuid, fio_tls_s *tls, void *udata) {",
          "592:   REQUIRE_LIBRARY();",
          "593:   fio_tls_attach2uuid(uuid, tls, udata, 1);",
          "594: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:   fio_timeout_set(uuid, FIO_TLS_TIMEOUT);",
          "",
          "---------------"
        ],
        "ext/iodine/fio_tls_openssl.c||ext/iodine/fio_tls_openssl.c": [
          "File: ext/iodine/fio_tls_openssl.c -> ext/iodine/fio_tls_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define FIO_FORCE_MALLOC_TMP 1",
          "30: #include <fio.h>",
          "32: typedef struct {",
          "33:   fio_str_s private_key;",
          "34:   fio_str_s public_key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #ifndef FIO_TLS_TIMEOUT",
          "33: #define FIO_TLS_TIMEOUT 4",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: FIO_FUNC inline void alpn_select___task(void *t_, void *ignr_) {",
          "192:   alpn_task_s *t = t_;",
          "195:   fio_free(t);",
          "196:   (void)ignr_;",
          "197: }",
          "",
          "[Removed Lines]",
          "193:   t->alpn.on_selected((fio_is_valid(t->uuid) ? t->uuid : -1),",
          "194:                       t->udata_connection, t->alpn.udata_tls);",
          "",
          "[Added Lines]",
          "197:   if (fio_is_valid(t->uuid)) {",
          "198:     fio_timeout_set(t->uuid, 0); // remove TLS timeout",
          "199:     t->alpn.on_selected(t->uuid, t->udata_connection, t->alpn.udata_tls);",
          "200:   } else {",
          "201:     t->alpn.on_selected(-1, t->udata_connection, t->alpn.udata_tls);",
          "202:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "644: static fio_rw_hook_s FIO_TLS_HOOKS = {",
          "645:     .read = fio_tls_read,",
          "646:     .write = fio_tls_write,",
          "648:     .flush = fio_tls_flush,",
          "649:     .cleanup = fio_tls_cleanup,",
          "650: };",
          "652: static size_t fio_tls_handshake(intptr_t uuid, void *udata) {",
          "653:   fio_tls_connection_s *c = udata;",
          "654:   int ri;",
          "655:   if (c->is_server) {",
          "656:     ri = SSL_accept(c->ssl);",
          "",
          "[Removed Lines]",
          "647:     .before_close = fio_tls_before_close,",
          "",
          "[Added Lines]",
          "656:     .before_close = fio_tls_before_close,",
          "660: #define FIO_TLS_HANDSHAKE_ERROR 0",
          "661: #define FIO_TLS_HANDSHAKE_OK 1",
          "662: #define FIO_TLS_HANDSHAKE_NEED_READ 2",
          "663: #define FIO_TLS_HANDSHAKE_NEED_WRITE 4",
          "666:   size_t status = FIO_TLS_HANDSHAKE_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:     case SSL_ERROR_NONE:",
          "667:     case SSL_ERROR_WANT_WRITE:",
          "672:     case SSL_ERROR_WANT_READ:",
          "677:     case SSL_ERROR_SYSCALL:",
          "683:       break;",
          "684:     case SSL_ERROR_SSL:",
          "687:       break;",
          "688:     case SSL_ERROR_ZERO_RETURN:",
          "689:       FIO_LOG_DEBUG(\"SSL_accept/SSL_connect %p error: SSL_ERROR_ZERO_RETURN\",",
          "",
          "[Removed Lines]",
          "666:       return 0;",
          "671:       return 0;",
          "676:       return 0;",
          "678:       FIO_LOG_DEBUG(",
          "679:           \"SSL_accept/SSL_connect %p error: SSL_ERROR_SYSCALL, errno: %s\",",
          "680:           (void *)uuid, strerror(errno));",
          "685:       FIO_LOG_DEBUG(\"SSL_accept/SSL_connect %p error: SSL_ERROR_SSL\",",
          "686:                     (void *)uuid);",
          "",
          "[Added Lines]",
          "681:       status = FIO_TLS_HANDSHAKE_NEED_READ | FIO_TLS_HANDSHAKE_NEED_WRITE;",
          "682:       return status;",
          "686:       status = FIO_TLS_HANDSHAKE_NEED_WRITE;",
          "687:       return status;",
          "691:       status = FIO_TLS_HANDSHAKE_NEED_READ;",
          "692:       return status;",
          "694:       if (errno) {",
          "695:         FIO_LOG_DEBUG(",
          "696:             \"SSL_accept/SSL_connect %p error: SSL_ERROR_SYSCALL, errno: %s\",",
          "697:             (void *)uuid, strerror(errno));",
          "698:       }",
          "701:       FIO_LOG_DEBUG(",
          "702:           \"SSL_accept/SSL_connect %p error: SSL_ERROR_SSL (non SSL attempt?)\",",
          "703:           (void *)uuid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "720:                     (void *)uuid, ri);",
          "721:       break;",
          "722:     }",
          "723:     fio_defer(fio_tls_delayed_close, (void *)uuid, NULL);",
          "725:   }",
          "726:   if (!c->alpn_ok) {",
          "727:     c->alpn_ok = 1;",
          "",
          "[Removed Lines]",
          "724:     return 0;",
          "",
          "[Added Lines]",
          "740:     fio_rw_hook_replace_unsafe(uuid, &FIO_TLS_HOOKS, udata);",
          "742:     return status;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "750:   } else {",
          "751:     FIO_LOG_DEBUG(\"Something went wrong during TLS handshake for %p\",",
          "752:                   (void *)uuid);",
          "754:   }",
          "756:   fio_force_event(uuid, FIO_EVENT_ON_DATA);",
          "",
          "[Removed Lines]",
          "753:     return 0;",
          "",
          "[Added Lines]",
          "771:     return status;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "773:                   buff2);",
          "774:   }",
          "775: #endif",
          "777: }",
          "779: static ssize_t fio_tls_read4handshake(intptr_t uuid, void *udata, void *buf,",
          "780:                                       size_t count) {",
          "783:     return fio_tls_read(uuid, udata, buf, count);",
          "784:   errno = EWOULDBLOCK;",
          "785:   return -1;",
          "786: }",
          "",
          "[Removed Lines]",
          "776:   return 1;",
          "782:   if (fio_tls_handshake(uuid, udata))",
          "",
          "[Added Lines]",
          "794:   status = FIO_TLS_HANDSHAKE_OK;",
          "795:   return status;",
          "801:   size_t s = fio_tls_handshake(uuid, udata);",
          "802:   if (s == FIO_TLS_HANDSHAKE_OK)",
          "804:   if (!s)",
          "805:     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788: static ssize_t fio_tls_write4handshake(intptr_t uuid, void *udata,",
          "789:                                        const void *buf, size_t count) {",
          "792:     return fio_tls_write(uuid, udata, buf, count);",
          "793:   errno = EWOULDBLOCK;",
          "794:   return -1;",
          "795: }",
          "797: static ssize_t fio_tls_flush4handshake(intptr_t uuid, void *udata) {",
          "800:     return fio_tls_flush(uuid, udata);",
          "801:   }",
          "802:   errno = 0;",
          "804: }",
          "805: static fio_rw_hook_s FIO_TLS_HANDSHAKE_HOOKS = {",
          "806:     .read = fio_tls_read4handshake,",
          "807:     .write = fio_tls_write4handshake,",
          "",
          "[Removed Lines]",
          "791:   if (fio_tls_handshake(uuid, udata))",
          "799:   if (fio_tls_handshake(uuid, udata)) {",
          "803:   return 1;",
          "",
          "[Added Lines]",
          "813:   size_t s = fio_tls_handshake(uuid, udata);",
          "814:   if (s == FIO_TLS_HANDSHAKE_OK)",
          "816:   if (!s)",
          "817:     return 0;",
          "824:   size_t s = fio_tls_handshake(uuid, udata);",
          "825:   if (s == FIO_TLS_HANDSHAKE_OK) {",
          "828:   if (!s)",
          "829:     return 0;",
          "831:   return s | FIO_TLS_HANDSHAKE_NEED_WRITE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "973: void FIO_TLS_WEAK fio_tls_accept(intptr_t uuid, fio_tls_s *tls, void *udata) {",
          "974:   REQUIRE_LIBRARY();",
          "975:   fio_tls_attach2uuid(uuid, tls, udata, 1);",
          "976: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1004:   fio_timeout_set(uuid, FIO_TLS_TIMEOUT);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1012:   cert_ary_free(&tls->sni);",
          "1013:   trust_ary_free(&tls->trust);",
          "1014:   free(tls);",
          "1015: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045:   FIO_LOG_DEBUG(\"freed TLS context %p\", (void *)tls);",
          "",
          "---------------"
        ],
        "ext/iodine/http.c||ext/iodine/http.c": [
          "File: ext/iodine/http.c -> ext/iodine/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "875: static void http_on_server_protocol_http1(intptr_t uuid, void *set,",
          "876:                                           void *ignr_) {",
          "884:     return;",
          "885:   }",
          "886:   fio_http_at_capa = 0;",
          "887:   fio_protocol_s *pr = http1_new(uuid, set, NULL, 0);",
          "888:   if (!pr)",
          "889:     fio_close(uuid);",
          "890:   (void)ignr_;",
          "891: }",
          "",
          "[Removed Lines]",
          "877:   fio_timeout_set(uuid, ((http_settings_s *)set)->timeout);",
          "878:   if (fio_uuid2fd(uuid) >= ((http_settings_s *)set)->max_clients) {",
          "879:     if (!fio_http_at_capa)",
          "880:       FIO_LOG_WARNING(\"HTTP server at capacity\");",
          "881:     fio_http_at_capa = 1;",
          "882:     http_send_error2(uuid, 503, set);",
          "883:     fio_close(uuid);",
          "",
          "[Added Lines]",
          "877:   if ((unsigned int)fio_uuid2fd(uuid) >=",
          "878:       ((http_settings_s *)set)->max_clients) {",
          "879:     if (fio_uuid2fd(uuid) != -1) {",
          "880:       if (!fio_http_at_capa)",
          "881:         FIO_LOG_WARNING(\"HTTP server at capacity\");",
          "882:       fio_http_at_capa = 1;",
          "883:       http_send_error2(uuid, 503, set);",
          "884:       fio_close(uuid);",
          "885:     }",
          "892:   else",
          "893:     fio_timeout_set(uuid, ((http_settings_s *)set)->timeout);",
          "",
          "---------------"
        ],
        "ext/iodine/http1.c||ext/iodine/http1.c": [
          "File: ext/iodine/http1.c -> ext/iodine/http1.c"
        ],
        "lib/iodine/version.rb||lib/iodine/version.rb": [
          "File: lib/iodine/version.rb -> lib/iodine/version.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module Iodine",
          "3: end",
          "",
          "[Removed Lines]",
          "2:   VERSION = '0.7.39'.freeze",
          "",
          "[Added Lines]",
          "2:   VERSION = '0.7.40'.freeze",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34daec9bec14fae5fcf9be4aa77ffbcc3805a79c",
      "candidate_info": {
        "commit_hash": "34daec9bec14fae5fcf9be4aa77ffbcc3805a79c",
        "repo": "boazsegev/iodine",
        "commit_url": "https://github.com/boazsegev/iodine/commit/34daec9bec14fae5fcf9be4aa77ffbcc3805a79c",
        "files": [
          "CHANGELOG.md",
          "lib/iodine/version.rb"
        ],
        "message": "credit + bump",
        "before_after_code_files": [
          "lib/iodine/version.rb||lib/iodine/version.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ],
          "candidate": [
            "lib/iodine/version.rb||lib/iodine/version.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/iodine/version.rb||lib/iodine/version.rb": [
          "File: lib/iodine/version.rb -> lib/iodine/version.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module Iodine",
          "3: end",
          "",
          "[Removed Lines]",
          "2:   VERSION = '0.7.35'.freeze",
          "",
          "[Added Lines]",
          "2:   VERSION = '0.7.36'.freeze",
          "",
          "---------------"
        ]
      }
    }
  ]
}