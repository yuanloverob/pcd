{
  "cve_id": "CVE-2022-29824",
  "cve_desc": "In libxml2 before 2.9.14, several buffer handling functions in buf.c (xmlBuf*) and tree.c (xmlBuffer*) don't check for integer overflows. This can result in out-of-bounds memory writes. Exploitation requires a victim to open a crafted, multi-gigabyte XML file. Other software using libxml2's buffer functions, for example libxslt through 1.1.35, is affected as well.",
  "repo": "GNOME/libxml2",
  "patch_hash": "6c283d83eccd940bcde15634ac8c7f100e3caefd",
  "patch_info": {
    "commit_hash": "6c283d83eccd940bcde15634ac8c7f100e3caefd",
    "repo": "GNOME/libxml2",
    "commit_url": "https://github.com/GNOME/libxml2/commit/6c283d83eccd940bcde15634ac8c7f100e3caefd",
    "files": [
      "buf.c",
      "tree.c"
    ],
    "message": "[CVE-2022-29824] Fix integer overflows in xmlBuf and xmlBuffer\n\nIn several places, the code handling string buffers didn't check for\ninteger overflow or used wrong types for buffer sizes. This could\nresult in out-of-bounds writes or other memory errors when working on\nlarge, multi-gigabyte buffers.\n\nThanks to Felix Wilhelm for the report.",
    "before_after_code_files": [
      "buf.c||buf.c",
      "tree.c||tree.c"
    ]
  },
  "patch_diff": {
    "buf.c||buf.c": [
      "File: buf.c -> buf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"buf.h\"",
      "29: #define WITH_BUFFER_COMPAT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #ifndef SIZE_MAX",
      "30: #define SIZE_MAX ((size_t) -1)",
      "31: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151: xmlBufCreateSize(size_t size) {",
      "152:     xmlBufPtr ret;",
      "154:     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));",
      "155:     if (ret == NULL) {",
      "156:  xmlBufMemoryError(NULL, \"creating buffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "158:     if (size == SIZE_MAX)",
      "159:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "429:     CHECK_COMPAT(buf)",
      "431:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
      "433:         return(buf->size - buf->use);",
      "450:     if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
      "",
      "[Removed Lines]",
      "432:     if (buf->use + len < buf->size)",
      "441: #if 1",
      "442:     if (buf->size > (size_t) len)",
      "443:         size = buf->size * 2;",
      "444:     else",
      "445:         size = buf->use + len + 100;",
      "446: #else",
      "447:     size = buf->use + len + 100;",
      "448: #endif",
      "",
      "[Added Lines]",
      "438:     if (len < buf->size - buf->use)",
      "440:     if (len > SIZE_MAX - buf->use)",
      "441:         return(0);",
      "443:     if (buf->size > (size_t) len) {",
      "444:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
      "445:     } else {",
      "446:         size = buf->use + len;",
      "447:         size = size > SIZE_MAX - 100 ? SIZE_MAX : size + 100;",
      "448:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "731: int",
      "732: xmlBufResize(xmlBufPtr buf, size_t size)",
      "733: {",
      "735:     xmlChar* rebuf = NULL;",
      "736:     size_t start_buf;",
      "",
      "[Removed Lines]",
      "734:     unsigned int newSize;",
      "",
      "[Added Lines]",
      "734:     size_t newSize;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "759:  case XML_BUFFER_ALLOC_IO:",
      "760:  case XML_BUFFER_ALLOC_DOUBLEIT:",
      "763:      while (size > newSize) {",
      "765:              xmlBufMemoryError(buf, \"growing buffer\");",
      "766:              return 0;",
      "767:          }",
      "",
      "[Removed Lines]",
      "762:      newSize = (buf->size ? buf->size*2 : size + 10);",
      "764:          if (newSize > UINT_MAX / 2) {",
      "",
      "[Added Lines]",
      "762:             if (buf->size == 0) {",
      "763:                 newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "764:             } else {",
      "765:                 newSize = buf->size;",
      "766:             }",
      "768:          if (newSize > SIZE_MAX / 2) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "769:      }",
      "770:      break;",
      "771:  case XML_BUFFER_ALLOC_EXACT:",
      "773:      break;",
      "774:         case XML_BUFFER_ALLOC_HYBRID:",
      "775:             if (buf->use < BASE_BUFFER_SIZE)",
      "776:                 newSize = size;",
      "777:             else {",
      "779:                 while (size > newSize) {",
      "781:                         xmlBufMemoryError(buf, \"growing buffer\");",
      "782:                         return 0;",
      "783:                     }",
      "",
      "[Removed Lines]",
      "772:      newSize = size+10;",
      "778:                 newSize = buf->size * 2;",
      "780:                     if (newSize > UINT_MAX / 2) {",
      "",
      "[Added Lines]",
      "776:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "782:                 newSize = buf->size;",
      "784:                     if (newSize > SIZE_MAX / 2) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "787:             break;",
      "789:  default:",
      "791:      break;",
      "792:     }",
      "",
      "[Removed Lines]",
      "790:      newSize = size+10;",
      "",
      "[Added Lines]",
      "794:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "854: int",
      "855: xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {",
      "858:     if ((str == NULL) || (buf == NULL) || (buf->error))",
      "859:  return -1;",
      "",
      "[Removed Lines]",
      "856:     unsigned int needSize;",
      "",
      "[Added Lines]",
      "860:     size_t needSize;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "875:     if (len < 0) return -1;",
      "876:     if (len == 0) return 0;",
      "880:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
      "",
      "[Removed Lines]",
      "878:     needSize = buf->use + len + 2;",
      "879:     if (needSize > buf->size){",
      "",
      "[Added Lines]",
      "882:     if ((size_t) len >= buf->size - buf->use) {",
      "883:         if ((size_t) len >= SIZE_MAX - buf->use)",
      "884:             return(-1);",
      "885:         needSize = buf->use + len + 1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1013: int",
      "1014: xmlBufCCat(xmlBufPtr buf, const char *str) {",
      "1040: }",
      "",
      "[Removed Lines]",
      "1015:     const char *cur;",
      "1017:     if ((buf == NULL) || (buf->error))",
      "1018:         return(-1);",
      "1019:     CHECK_COMPAT(buf)",
      "1020:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
      "1021:     if (str == NULL) {",
      "1022: #ifdef DEBUG_BUFFER",
      "1023:         xmlGenericError(xmlGenericErrorContext,",
      "1024:   \"xmlBufCCat: str == NULL\\n\");",
      "1025: #endif",
      "1026:  return -1;",
      "1027:     }",
      "1028:     for (cur = str;*cur != 0;cur++) {",
      "1029:         if (buf->use  + 10 >= buf->size) {",
      "1030:             if (!xmlBufResize(buf, buf->use+10)){",
      "1031:   xmlBufMemoryError(buf, \"growing buffer\");",
      "1032:                 return XML_ERR_NO_MEMORY;",
      "1033:             }",
      "1034:         }",
      "1035:         buf->content[buf->use++] = *cur;",
      "1036:     }",
      "1037:     buf->content[buf->use] = 0;",
      "1038:     UPDATE_COMPAT(buf)",
      "1039:     return 0;",
      "",
      "[Added Lines]",
      "1021:     return xmlBufCat(buf, (const xmlChar *) str);",
      "",
      "---------------"
    ],
    "tree.c||tree.c": [
      "File: tree.c -> tree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7120: xmlBufferCreateSize(size_t size) {",
      "7121:     xmlBufferPtr ret;",
      "7123:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
      "7124:     if (ret == NULL) {",
      "7125:  xmlTreeErrMemory(\"creating buffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7123:     if (size >= UINT_MAX)",
      "7124:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7188:     if ((mem == NULL) || (size == 0))",
      "7189:         return(NULL);",
      "7191:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
      "7192:     if (ret == NULL) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7192:     if (size > UINT_MAX)",
      "7193:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7335: int",
      "7336: xmlBufferGrow(xmlBufferPtr buf, unsigned int len) {",
      "7338:     xmlChar *newbuf;",
      "7340:     if (buf == NULL) return(-1);",
      "7342:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
      "7360:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
      "7361:         size_t start_buf = buf->content - buf->contentIO;",
      "",
      "[Removed Lines]",
      "7337:     int size;",
      "7343:     if (len + buf->use < buf->size) return(0);",
      "7351: #if 1",
      "7352:     if (buf->size > len)",
      "7353:         size = buf->size * 2;",
      "7354:     else",
      "7355:         size = buf->use + len + 100;",
      "7356: #else",
      "7357:     size = buf->use + len + 100;",
      "7358: #endif",
      "",
      "[Added Lines]",
      "7341:     unsigned int size;",
      "7347:     if (len < buf->size - buf->use)",
      "7348:         return(0);",
      "7349:     if (len > UINT_MAX - buf->use)",
      "7350:         return(-1);",
      "7352:     if (buf->size > (size_t) len) {",
      "7353:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
      "7354:     } else {",
      "7355:         size = buf->use + len;",
      "7356:         size = size > UINT_MAX - 100 ? UINT_MAX : size + 100;",
      "7357:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7482:  case XML_BUFFER_ALLOC_IO:",
      "7483:  case XML_BUFFER_ALLOC_DOUBLEIT:",
      "7486:      while (size > newSize) {",
      "7487:          if (newSize > UINT_MAX / 2) {",
      "7488:              xmlTreeErrMemory(\"growing buffer\");",
      "",
      "[Removed Lines]",
      "7485:      newSize = (buf->size ? buf->size : size + 10);",
      "",
      "[Added Lines]",
      "7484:             if (buf->size == 0)",
      "7485:                 newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
      "7486:             else",
      "7487:                 newSize = buf->size;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "7492:      }",
      "7493:      break;",
      "7494:  case XML_BUFFER_ALLOC_EXACT:",
      "7496:      break;",
      "7497:         case XML_BUFFER_ALLOC_HYBRID:",
      "7498:             if (buf->use < BASE_BUFFER_SIZE)",
      "",
      "[Removed Lines]",
      "7495:      newSize = size+10;",
      "",
      "[Added Lines]",
      "7497:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "7510:             break;",
      "7512:  default:",
      "7514:      break;",
      "7515:     }",
      "",
      "[Removed Lines]",
      "7513:      newSize = size+10;",
      "",
      "[Added Lines]",
      "7515:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "7596:     if (len < 0) return -1;",
      "7597:     if (len == 0) return 0;",
      "7601:         if (!xmlBufferResize(buf, needSize)){",
      "7602:      xmlTreeErrMemory(\"growing buffer\");",
      "7603:             return XML_ERR_NO_MEMORY;",
      "",
      "[Removed Lines]",
      "7599:     needSize = buf->use + len + 2;",
      "7600:     if (needSize > buf->size){",
      "",
      "[Added Lines]",
      "7601:     if ((unsigned) len >= buf->size - buf->use) {",
      "7602:         if ((unsigned) len >= UINT_MAX - buf->use)",
      "7603:             return XML_ERR_NO_MEMORY;",
      "7604:         needSize = buf->use + len + 1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "7711: int",
      "7712: xmlBufferCCat(xmlBufferPtr buf, const char *str) {",
      "7736: }",
      "",
      "[Removed Lines]",
      "7713:     const char *cur;",
      "7715:     if (buf == NULL)",
      "7716:         return(-1);",
      "7717:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
      "7718:     if (str == NULL) {",
      "7719: #ifdef DEBUG_BUFFER",
      "7720:         xmlGenericError(xmlGenericErrorContext,",
      "7721:   \"xmlBufferCCat: str == NULL\\n\");",
      "7722: #endif",
      "7723:  return -1;",
      "7724:     }",
      "7725:     for (cur = str;*cur != 0;cur++) {",
      "7726:         if (buf->use  + 10 >= buf->size) {",
      "7727:             if (!xmlBufferResize(buf, buf->use+10)){",
      "7728:   xmlTreeErrMemory(\"growing buffer\");",
      "7729:                 return XML_ERR_NO_MEMORY;",
      "7730:             }",
      "7731:         }",
      "7732:         buf->content[buf->use++] = *cur;",
      "7733:     }",
      "7734:     buf->content[buf->use] = 0;",
      "7735:     return 0;",
      "",
      "[Added Lines]",
      "7717:     return xmlBufferCat(buf, (const xmlChar *) str);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "461ef8ac77d898653799fcdbf471bfd04c173a6f",
      "candidate_info": {
        "commit_hash": "461ef8ac77d898653799fcdbf471bfd04c173a6f",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/461ef8ac77d898653799fcdbf471bfd04c173a6f",
        "files": [
          "tree.c"
        ],
        "message": "Fix double colon typos in xmlBufferResize()\n\nIntroduced in commit 6c283d83e.",
        "before_after_code_files": [
          "tree.c||tree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tree.c||tree.c"
          ],
          "candidate": [
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7519:      }",
          "7520:      break;",
          "7521:  case XML_BUFFER_ALLOC_EXACT:",
          "7523:      break;",
          "7524:         case XML_BUFFER_ALLOC_HYBRID:",
          "7525:             if (buf->use < BASE_BUFFER_SIZE)",
          "",
          "[Removed Lines]",
          "7522:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "[Added Lines]",
          "7522:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7537:             break;",
          "7539:  default:",
          "7541:      break;",
          "7542:     }",
          "",
          "[Removed Lines]",
          "7540:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "[Added Lines]",
          "7540:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ef16dee7ac8af32b8a0dd793445b1148e240364",
      "candidate_info": {
        "commit_hash": "6ef16dee7ac8af32b8a0dd793445b1148e240364",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/6ef16dee7ac8af32b8a0dd793445b1148e240364",
        "files": [
          "buf.c",
          "tree.c"
        ],
        "message": "Reserve byte for NUL terminator and report errors consistently in xmlBuf and xmlBuffer\n\nThis is a follow-up to commit 6c283d83.\n\n* buf.c:\n(xmlBufGrowInternal):\n- Call xmlBufMemoryError() when the buffer size would overflow.\n- Account for NUL terminator byte when using XML_MAX_TEXT_LENGTH.\n- Do not include NUL terminator byte when returning length.\n(xmlBufAdd):\n- Call xmlBufMemoryError() when the buffer size would overflow.\n\n* tree.c:\n(xmlBufferGrow):\n- Call xmlTreeErrMemory() when the buffer size would overflow.\n- Do not include NUL terminator byte when returning length.\n(xmlBufferResize):\n- Update error message in xmlTreeErrMemory() to be consistent\n  with other similar messages.\n(xmlBufferAdd):\n- Call xmlTreeErrMemory() when the buffer size would overflow.\n(xmlBufferAddHead):\n- Add overflow checks similar to those in xmlBufferAdd().",
        "before_after_code_files": [
          "buf.c||buf.c",
          "tree.c||tree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ],
          "candidate": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "buf.c||buf.c": [
          "File: buf.c -> buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "438:     if (len < buf->size - buf->use)",
          "441:         return(0);",
          "443:     if (buf->size > (size_t) len) {",
          "444:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
          "",
          "[Removed Lines]",
          "439:         return(buf->size - buf->use);",
          "440:     if (len > SIZE_MAX - buf->use)",
          "",
          "[Added Lines]",
          "439:         return(buf->size - buf->use - 1);",
          "440:     if (len >= SIZE_MAX - buf->use) {",
          "441:         xmlBufMemoryError(buf, \"growing buffer past SIZE_MAX\");",
          "443:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:      (buf->size >= XML_MAX_TEXT_LENGTH)) {",
          "456:      xmlBufMemoryError(buf, \"buffer error: text too long\\n\");",
          "457:      return(0);",
          "",
          "[Removed Lines]",
          "454:         if ((buf->use + len >= XML_MAX_TEXT_LENGTH) ||",
          "",
          "[Added Lines]",
          "456:         if ((buf->use + len + 1 >= XML_MAX_TEXT_LENGTH) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     }",
          "480:     buf->size = size;",
          "481:     UPDATE_COMPAT(buf)",
          "483: }",
          "",
          "[Removed Lines]",
          "482:     return(buf->size - buf->use);",
          "",
          "[Added Lines]",
          "484:     return(buf->size - buf->use - 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:     if (len < 0) return -1;",
          "840:     if (len == 0) return 0;",
          "842:     if ((size_t) len >= buf->size - buf->use) {",
          "844:             return(-1);",
          "845:         needSize = buf->use + len + 1;",
          "846:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "843:         if ((size_t) len >= SIZE_MAX - buf->use)",
          "",
          "[Added Lines]",
          "846:         if ((size_t) len >= SIZE_MAX - buf->use) {",
          "847:             xmlBufMemoryError(buf, \"growing buffer past SIZE_MAX\");",
          "849:         }",
          "",
          "---------------"
        ],
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7371:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "7372:     if (len < buf->size - buf->use)",
          "7373:         return(0);",
          "7375:         return(-1);",
          "7377:     if (buf->size > (size_t) len) {",
          "7378:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
          "",
          "[Removed Lines]",
          "7374:     if (len > UINT_MAX - buf->use)",
          "",
          "[Added Lines]",
          "7374:     if (len >= UINT_MAX - buf->use) {",
          "7375:         xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7377:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7400:  buf->content = newbuf;",
          "7401:     }",
          "7402:     buf->size = size;",
          "7404: }",
          "",
          "[Removed Lines]",
          "7403:     return(buf->size - buf->use);",
          "",
          "[Added Lines]",
          "7405:     return(buf->size - buf->use - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7497:         return 1;",
          "7499:     if (size > UINT_MAX - 10) {",
          "7501:         return 0;",
          "7502:     }",
          "",
          "[Removed Lines]",
          "7500:         xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Added Lines]",
          "7502:         xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7625:     if (len < 0) return -1;",
          "7626:     if (len == 0) return 0;",
          "7628:     if ((unsigned) len >= buf->size - buf->use) {",
          "7630:             return XML_ERR_NO_MEMORY;",
          "7631:         needSize = buf->use + len + 1;",
          "7632:         if (!xmlBufferResize(buf, needSize)){",
          "7633:      xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Removed Lines]",
          "7629:         if ((unsigned) len >= UINT_MAX - buf->use)",
          "",
          "[Added Lines]",
          "7632:         if ((unsigned) len >= UINT_MAX - buf->use) {",
          "7633:             xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7635:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7696:      return(0);",
          "7697:  }",
          "7698:     }",
          "7701:         if (!xmlBufferResize(buf, needSize)){",
          "7702:      xmlTreeErrMemory(\"growing buffer\");",
          "7703:             return XML_ERR_NO_MEMORY;",
          "",
          "[Removed Lines]",
          "7699:     needSize = buf->use + len + 2;",
          "7700:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "7705:     if ((unsigned) len >= buf->size - buf->use) {",
          "7706:         if ((unsigned) len >= UINT_MAX - buf->use) {",
          "7707:             xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7708:             return(-1);",
          "7709:         }",
          "7710:         needSize = buf->use + len + 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "776e1c312dc273a031ef0c3f4d67ba702c5308d3",
      "candidate_info": {
        "commit_hash": "776e1c312dc273a031ef0c3f4d67ba702c5308d3",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/776e1c312dc273a031ef0c3f4d67ba702c5308d3",
        "files": [
          "buf.c",
          "encoding.c",
          "testchar.c",
          "tree.c",
          "xmlIO.c"
        ],
        "message": "Fix more overflow checks, off-by-ones and missing NUL terminators in xmlBuf and xmlBuffer\n\nIn broad strokes, this does the following:\n- Do not include the NUL terminator byte for lengths returned\n  from functions.  This lets functions be more defensive.\n- Set error messages when returning early due to out-of-memory\n  or buffer-too-large errors.\n- Set NUL terminator consistently on buffer boundaries before\n  returning.\n- Add a few more integer overflow checks.\n\n* buf.c:\n(xmlBufGrowInternal):\n- Do not include NUL terminator byte when returning length.\n- Always set NUL terminator at the end of the new buffer length\n  before returning.\n- Call xmlBufMemoryError() when the buffer size would overflow.\n- Account for NUL terminator byte when using XML_MAX_TEXT_LENGTH.\n- Always set NUL terminator at the end of the current buffer\n  after resizing the buffer.\n(xmlBufAddLen):\n- Return an error if the buffer does not have free space for the\n  NUL terminator byte.\n(xmlBufAvail):\n- Do not include the NUL terminator byte in the length returned.\n  (See changes to encoding.c and xmlIO.c.)\n(xmlBufResize):\n- Move setting of NUL terminator to common code.  More than one\n  path through the function failed to set it.\n(xmlBufAdd):\n- Call xmlBufMemoryError() when the buffer size would overflow.\n\n* encoding.c:\n(xmlCharEncFirstLineInput):\n(xmlCharEncInput):\n(xmlCharEncOutput):\n- No longer need to subtract one from the return value of\n  xmlBufAvail() since the function does this now.\n\n* testchar.c:\n(testCharRanges):\n- Pass the string length without the NUL terminator.\n\n* tree.c:\n(xmlBufferGrow):\n- Do not include NUL terminator byte when returning length.\n- Always set NUL terminator at the end of the new buffer length\n  before returning.\n- Call xmlTreeErrMemory() when the buffer size would overflow.\n- Always set NUL terminator at the end of the current buffer\n  after resizing the buffer.\n(xmlBufferDump):\n- Change type of the return variable to match fwrite().\n- Clamp return value to INT_MAX to prevent overflow.\n(xmlBufferResize):\n- Update error message in xmlTreeErrMemory() to be consistent\n  with other similar messages.\n- Move setting of NUL terminator to common code.  More than one\n  path through the function failed to set it.\n(xmlBufferAdd):\n- Call xmlTreeErrMemory() when the buffer size would overflow.\n(xmlBufferAddHead):\n- Set NUL terminator before returning early when shifting\n  contents.\n- Add overflow checks similar to those in xmlBufferAdd().\n\n* xmlIO.c:\n(xmlOutputBufferWriteEscape):\n- No longer need to subtract one from the return value of\n  xmlBufAvail() since the function does this now.",
        "before_after_code_files": [
          "buf.c||buf.c",
          "encoding.c||encoding.c",
          "testchar.c||testchar.c",
          "tree.c||tree.c",
          "xmlIO.c||xmlIO.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ],
          "candidate": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "buf.c||buf.c": [
          "File: buf.c -> buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:     CHECK_COMPAT(buf)",
          "437:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "441:         return(0);",
          "443:     if (buf->size > (size_t) len) {",
          "444:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
          "",
          "[Removed Lines]",
          "438:     if (len < buf->size - buf->use)",
          "439:         return(buf->size - buf->use);",
          "440:     if (len > SIZE_MAX - buf->use)",
          "",
          "[Added Lines]",
          "438:     if (len < buf->size - buf->use) {",
          "439:         buf->content[buf->use + len] = 0;",
          "440:         return(buf->size - buf->use - 1);",
          "441:     }",
          "442:     if (len > SIZE_MAX - buf->use - 1) {",
          "443:         xmlBufMemoryError(buf, \"growing buffer past SIZE_MAX\");",
          "445:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:      (buf->size >= XML_MAX_TEXT_LENGTH)) {",
          "456:      xmlBufMemoryError(buf, \"buffer error: text too long\\n\");",
          "457:      return(0);",
          "",
          "[Removed Lines]",
          "454:         if ((buf->use + len >= XML_MAX_TEXT_LENGTH) ||",
          "",
          "[Added Lines]",
          "458:         if ((buf->use + len + 1 >= XML_MAX_TEXT_LENGTH) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478:  buf->content = newbuf;",
          "479:     }",
          "480:     buf->size = size;",
          "481:     UPDATE_COMPAT(buf)",
          "483: }",
          "",
          "[Removed Lines]",
          "482:     return(buf->size - buf->use);",
          "",
          "[Added Lines]",
          "485:     buf->content[buf->use] = 0;",
          "486:     buf->content[buf->use + len] = 0;",
          "488:     return(buf->size - buf->use - 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "591:     if ((buf == NULL) || (buf->error))",
          "592:         return(-1);",
          "593:     CHECK_COMPAT(buf)",
          "595:         return(-1);",
          "596:     buf->use += len;",
          "597:     UPDATE_COMPAT(buf)",
          "602:     return(0);",
          "603: }",
          "",
          "[Removed Lines]",
          "594:     if (len > (buf->size - buf->use))",
          "598:     if (buf->size > buf->use)",
          "599:         buf->content[buf->use] = 0;",
          "600:     else",
          "601:         return(-1);",
          "",
          "[Added Lines]",
          "600:     if (len >= (buf->size - buf->use))",
          "603:     buf->content[buf->use] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "658:         return 0;",
          "659:     CHECK_COMPAT(buf)",
          "662: }",
          "",
          "[Removed Lines]",
          "661:     return(buf->size - buf->use);",
          "",
          "[Added Lines]",
          "664:     return((buf->size > buf->use) ? (buf->size - 1) - buf->use : 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "763:      memmove(buf->contentIO, buf->content, buf->use);",
          "764:      buf->content = buf->contentIO;",
          "766:      buf->size += start_buf;",
          "767:  } else {",
          "768:      rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);",
          "",
          "[Removed Lines]",
          "765:      buf->content[buf->use] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "788:      if (rebuf != NULL) {",
          "789:   memcpy(rebuf, buf->content, buf->use);",
          "790:   xmlFree(buf->content);",
          "792:      }",
          "793:  }",
          "794:  if (rebuf == NULL) {",
          "",
          "[Removed Lines]",
          "791:   rebuf[buf->use] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "798:  buf->content = rebuf;",
          "799:     }",
          "800:     buf->size = newSize;",
          "801:     UPDATE_COMPAT(buf)",
          "803:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:     buf->content[buf->use] = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "839:     if (len < 0) return -1;",
          "840:     if (len == 0) return 0;",
          "842:     if ((size_t) len >= buf->size - buf->use) {",
          "844:             return(-1);",
          "845:         needSize = buf->use + len + 1;",
          "846:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "843:         if ((size_t) len >= SIZE_MAX - buf->use)",
          "",
          "[Added Lines]",
          "846:         if ((size_t) len >= SIZE_MAX - buf->use) {",
          "847:             xmlBufMemoryError(buf, \"growing buffer past SIZE_MAX\");",
          "849:         }",
          "",
          "---------------"
        ],
        "encoding.c||encoding.c": [
          "File: encoding.c -> encoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:     toconv = xmlBufUse(in);",
          "2198:     if (toconv == 0)",
          "2199:         return (0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2200:     written = xmlBufAvail(out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2215:     }",
          "2216:     if (toconv * 2 >= written) {",
          "2217:         xmlBufGrow(out, toconv * 2);",
          "2219:     }",
          "2220:     if (written > 360)",
          "2221:         written = 360;",
          "",
          "[Removed Lines]",
          "2218:         written = xmlBufAvail(out) - 1;",
          "",
          "[Added Lines]",
          "2218:         written = xmlBufAvail(out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2307:     if ((toconv > 64 * 1024) && (flush == 0))",
          "2308:         toconv = 64 * 1024;",
          "2309:     written = xmlBufAvail(out);",
          "2312:     if (toconv * 2 >= written) {",
          "2313:         xmlBufGrow(out, toconv * 2);",
          "2314:         written = xmlBufAvail(out);",
          "2317:     }",
          "2318:     if ((written > 128 * 1024) && (flush == 0))",
          "2319:         written = 128 * 1024;",
          "",
          "[Removed Lines]",
          "2310:     if (written > 0)",
          "2315:         if (written > 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2495: retry:",
          "2497:     written = xmlBufAvail(out);",
          "",
          "[Removed Lines]",
          "2498:     if (written > 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2525:         toconv = 64 * 1024;",
          "2526:     if (toconv * 4 >= written) {",
          "2527:         xmlBufGrow(out, toconv * 4);",
          "2529:     }",
          "2530:     if (written > 256 * 1024)",
          "2531:         written = 256 * 1024;",
          "",
          "[Removed Lines]",
          "2528:         written = xmlBufAvail(out) - 1;",
          "",
          "[Added Lines]",
          "2522:         written = xmlBufAvail(out);",
          "",
          "---------------"
        ],
        "testchar.c||testchar.c": [
          "File: testchar.c -> testchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         fprintf(stderr, \"Failed to allocate parser context\\n\");",
          "608:  return(1);",
          "609:     }",
          "611:                                            XML_CHAR_ENCODING_NONE);",
          "612:     if (buf == NULL) {",
          "613:         fprintf(stderr, \"Failed to allocate input buffer\\n\");",
          "",
          "[Removed Lines]",
          "610:     buf = xmlParserInputBufferCreateStatic(data, sizeof(data),",
          "",
          "[Added Lines]",
          "610:     buf = xmlParserInputBufferCreateStatic(data, sizeof(data) - 1,",
          "",
          "---------------"
        ],
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7369:     if (buf == NULL) return(-1);",
          "7371:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "7373:         return(0);",
          "7375:         return(-1);",
          "7377:     if (buf->size > (size_t) len) {",
          "7378:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
          "",
          "[Removed Lines]",
          "7372:     if (len < buf->size - buf->use)",
          "7374:     if (len > UINT_MAX - buf->use)",
          "",
          "[Added Lines]",
          "7372:     if (len < buf->size - buf->use) {",
          "7373:         buf->content[buf->use + len] = 0;",
          "7375:     }",
          "7376:     if (len > UINT_MAX - buf->use - 1) {",
          "7377:         xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7379:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7400:  buf->content = newbuf;",
          "7401:     }",
          "7402:     buf->size = size;",
          "7404: }",
          "",
          "[Removed Lines]",
          "7403:     return(buf->size - buf->use);",
          "",
          "[Added Lines]",
          "7407:     buf->content[buf->use] = 0;",
          "7408:     buf->content[buf->use + len] = 0;",
          "7409:     return(buf->size - buf->use - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7414: int",
          "7415: xmlBufferDump(FILE *file, xmlBufferPtr buf) {",
          "7418:     if (buf == NULL) {",
          "7419: #ifdef DEBUG_BUFFER",
          "",
          "[Removed Lines]",
          "7416:     int ret;",
          "",
          "[Added Lines]",
          "7422:     size_t ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7432:     if (file == NULL)",
          "7433:  file = stdout;",
          "7434:     ret = fwrite(buf->content, sizeof(xmlChar), buf->use, file);",
          "7436: }",
          "",
          "[Removed Lines]",
          "7435:     return(ret);",
          "",
          "[Added Lines]",
          "7441:     return(ret > INT_MAX ? INT_MAX : (int)ret);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7497:         return 1;",
          "7499:     if (size > UINT_MAX - 10) {",
          "7501:         return 0;",
          "7502:     }",
          "",
          "[Removed Lines]",
          "7500:         xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Added Lines]",
          "7506:         xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7549:      memmove(buf->contentIO, buf->content, buf->use);",
          "7550:      buf->content = buf->contentIO;",
          "7552:      buf->size += start_buf;",
          "7553:  } else {",
          "7554:      rebuf = (xmlChar *) xmlRealloc(buf->contentIO, start_buf + newSize);",
          "",
          "[Removed Lines]",
          "7551:      buf->content[buf->use] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7574:      if (rebuf != NULL) {",
          "7575:   memcpy(rebuf, buf->content, buf->use);",
          "7576:   xmlFree(buf->content);",
          "7578:      }",
          "7579:  }",
          "7580:  if (rebuf == NULL) {",
          "",
          "[Removed Lines]",
          "7577:   rebuf[buf->use] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7584:  buf->content = rebuf;",
          "7585:     }",
          "7586:     buf->size = newSize;",
          "7588:     return 1;",
          "7589: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7591:     buf->content[buf->use] = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7623:     if (len < 0) return -1;",
          "7624:     if (len == 0) return 0;",
          "7626:     if ((unsigned) len >= buf->size - buf->use) {",
          "7628:             return XML_ERR_NO_MEMORY;",
          "7629:         needSize = buf->use + len + 1;",
          "7630:         if (!xmlBufferResize(buf, needSize)){",
          "7631:      xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Removed Lines]",
          "7627:         if ((unsigned) len >= UINT_MAX - buf->use)",
          "",
          "[Added Lines]",
          "7633:         if ((unsigned) len >= UINT_MAX - buf->use) {",
          "7634:             xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7636:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7690:             memmove(&buf->content[0], str, len);",
          "7691:      buf->use += len;",
          "7692:      buf->size += len;",
          "7693:      return(0);",
          "7694:  }",
          "7695:     }",
          "7698:         if (!xmlBufferResize(buf, needSize)){",
          "7699:      xmlTreeErrMemory(\"growing buffer\");",
          "7700:             return XML_ERR_NO_MEMORY;",
          "",
          "[Removed Lines]",
          "7696:     needSize = buf->use + len + 2;",
          "7697:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "7701:      buf->content[buf->use] = 0;",
          "7706:     if ((unsigned) len >= buf->size - buf->use) {",
          "7707:         if ((unsigned) len >= UINT_MAX - buf->use) {",
          "7708:             xmlTreeErrMemory(\"growing buffer past UINT_MAX\");",
          "7709:             return(-1);",
          "7710:         }",
          "7711:         needSize = buf->use + len + 1;",
          "",
          "---------------"
        ],
        "xmlIO.c||xmlIO.c": [
          "File: xmlIO.c -> xmlIO.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3549:  cons = len;",
          "",
          "[Removed Lines]",
          "3550:  chunk = xmlBufAvail(out->buffer) - 1;",
          "",
          "[Added Lines]",
          "3550:  chunk = xmlBufAvail(out->buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2059df5358d978c0b891fc75d77c7e771a7cfcdc",
      "candidate_info": {
        "commit_hash": "2059df5358d978c0b891fc75d77c7e771a7cfcdc",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/2059df5358d978c0b891fc75d77c7e771a7cfcdc",
        "files": [
          "buf.c",
          "encoding.c",
          "entities.c",
          "gentest.py",
          "include/libxml/tree.h",
          "include/libxml/xmlIO.h",
          "include/private/buf.h",
          "parser.c",
          "testchar.c",
          "tree.c",
          "xmlIO.c",
          "xmlreader.c"
        ],
        "message": "buf: Deprecate static/immutable buffers",
        "before_after_code_files": [
          "buf.c||buf.c",
          "encoding.c||encoding.c",
          "entities.c||entities.c",
          "gentest.py||gentest.py",
          "include/libxml/tree.h||include/libxml/tree.h",
          "include/libxml/xmlIO.h||include/libxml/xmlIO.h",
          "include/private/buf.h||include/private/buf.h",
          "parser.c||parser.c",
          "testchar.c||testchar.c",
          "tree.c||tree.c",
          "xmlIO.c||xmlIO.c",
          "xmlreader.c||xmlreader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ],
          "candidate": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "buf.c||buf.c": [
          "File: buf.c -> buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     if (buf == NULL)",
          "202:         return(NULL);",
          "205:     if (buf->buffer != NULL)",
          "206:         return(NULL);",
          "207:     if (buf->error)",
          "",
          "[Removed Lines]",
          "203:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE)",
          "204:         return(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     return ret;",
          "217: }",
          "",
          "[Removed Lines]",
          "231: xmlBufPtr",
          "232: xmlBufCreateStatic(void *mem, size_t size) {",
          "233:     xmlBufPtr ret;",
          "235:     if (mem == NULL)",
          "236:         return(NULL);",
          "238:     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));",
          "239:     if (ret == NULL) {",
          "240:  xmlBufMemoryError(NULL, \"creating buffer\");",
          "241:         return(NULL);",
          "242:     }",
          "243:     ret->use = size;",
          "244:     ret->size = size;",
          "245:     UPDATE_COMPAT(ret);",
          "246:     ret->alloc = XML_BUFFER_ALLOC_IMMUTABLE;",
          "247:     ret->content = (xmlChar *) mem;",
          "248:     ret->error = 0;",
          "249:     ret->buffer = NULL;",
          "250:     return(ret);",
          "251: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289: #endif",
          "290:         return(-1);",
          "291:     }",
          "294:         return(-1);",
          "295:     if ((scheme == XML_BUFFER_ALLOC_DOUBLEIT) ||",
          "296:         (scheme == XML_BUFFER_ALLOC_EXACT) ||",
          "297:         (scheme == XML_BUFFER_ALLOC_HYBRID) ||",
          "299:  (scheme == XML_BUFFER_ALLOC_BOUNDED)) {",
          "300:  buf->alloc = scheme;",
          "301:         if (buf->buffer)",
          "",
          "[Removed Lines]",
          "292:     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||",
          "293:         (buf->alloc == XML_BUFFER_ALLOC_IO))",
          "298:         (scheme == XML_BUFFER_ALLOC_IMMUTABLE) ||",
          "",
          "[Added Lines]",
          "256:     if (buf->alloc == XML_BUFFER_ALLOC_IO)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&",
          "334:         (buf->contentIO != NULL)) {",
          "335:         xmlFree(buf->contentIO);",
          "338:         xmlFree(buf->content);",
          "339:     }",
          "340:     xmlFree(buf);",
          "",
          "[Removed Lines]",
          "336:     } else if ((buf->content != NULL) &&",
          "337:         (buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE)) {",
          "",
          "[Added Lines]",
          "298:     } else if (buf->content != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "352:     if (buf->content == NULL) return;",
          "353:     CHECK_COMPAT(buf)",
          "354:     buf->use = 0;",
          "358:                (buf->contentIO != NULL)) {",
          "359:         size_t start_buf = buf->content - buf->contentIO;",
          "",
          "[Removed Lines]",
          "355:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) {",
          "356:         buf->content = BAD_CAST \"\";",
          "357:     } else if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&",
          "",
          "[Added Lines]",
          "316:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "387:     if (len > buf->use) return(0);",
          "389:     buf->use -= len;",
          "",
          "[Removed Lines]",
          "390:     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||",
          "391:         ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL))) {",
          "",
          "[Added Lines]",
          "349:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "436:     if ((buf == NULL) || (buf->error != 0)) return(0);",
          "437:     CHECK_COMPAT(buf)",
          "440:     if (len < buf->size - buf->use)",
          "441:         return(buf->size - buf->use - 1);",
          "442:     if (len >= SIZE_MAX - buf->use) {",
          "",
          "[Removed Lines]",
          "439:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "701:         return(0);",
          "702:     CHECK_COMPAT(buf)",
          "705:     if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "704:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "827:  return -1;",
          "828:     CHECK_COMPAT(buf)",
          "831:     if (len < -1) {",
          "832: #ifdef DEBUG_BUFFER",
          "833:         xmlGenericError(xmlGenericErrorContext,",
          "",
          "[Removed Lines]",
          "830:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "887:     if ((buf == NULL) || (buf->error))",
          "888:         return(-1);",
          "889:     CHECK_COMPAT(buf)",
          "891:     if (str == NULL) return -1;",
          "892:     return xmlBufAdd(buf, str, -1);",
          "893: }",
          "",
          "[Removed Lines]",
          "890:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "925:     if ((buf == NULL) || (buf->error))",
          "926:         return(-1);",
          "927:     CHECK_COMPAT(buf)",
          "930:     if (xmlStrchr(string, '\\\"')) {",
          "931:         if (xmlStrchr(string, '\\'')) {",
          "932: #ifdef DEBUG_BUFFER",
          "",
          "[Removed Lines]",
          "928:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE)",
          "929:         return(-1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "encoding.c||encoding.c": [
          "File: encoding.c -> encoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2584:   xmlEncodingErr(XML_I18N_CONV_FAILED,",
          "2585:       \"output conversion failed due to conv error, bytes %s\\n\",",
          "2586:           buf);",
          "2589:                 break;",
          "2590:      }",
          "",
          "[Removed Lines]",
          "2587:   if (xmlBufGetAllocationScheme(in) != XML_BUFFER_ALLOC_IMMUTABLE)",
          "2588:       content[0] = ' ';",
          "",
          "[Added Lines]",
          "2587:   content[0] = ' ';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2745:   xmlEncodingErr(XML_I18N_CONV_FAILED,",
          "2746:       \"output conversion failed due to conv error, bytes %s\\n\",",
          "2747:           buf);",
          "2750:          break;",
          "2751:      }",
          "",
          "[Removed Lines]",
          "2748:   if (in->alloc != XML_BUFFER_ALLOC_IMMUTABLE)",
          "2749:       in->content[0] = ' ';",
          "",
          "[Added Lines]",
          "2747:   in->content[0] = ' ';",
          "",
          "---------------"
        ],
        "entities.c||entities.c": [
          "File: entities.c -> entities.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1012: static void",
          "1013: xmlDumpEntityContent(xmlBufferPtr buf, const xmlChar *content) {",
          "1015:     if (xmlStrchr(content, '%')) {",
          "1016:         const xmlChar * base, *cur;",
          "",
          "[Removed Lines]",
          "1014:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "gentest.py||gentest.py": [
          "File: gentest.py -> gentest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:    \"xmlParseChunk\": \"if (ctxt != NULL) {xmlFreeDoc(ctxt->myDoc); ctxt->myDoc = NULL;}\",",
          "262:    \"xmlParseExtParsedEnt\": \"if (ctxt != NULL) {xmlFreeDoc(ctxt->myDoc); ctxt->myDoc = NULL;}\",",
          "263:    \"xmlDOMWrapAdoptNode\": \"if ((node != NULL) && (node->parent == NULL)) {xmlUnlinkNode(node);xmlFreeNode(node);node = NULL;}\",",
          "265: }",
          "267: modules = []",
          "",
          "[Removed Lines]",
          "264:    \"xmlBufferSetAllocationScheme\": \"if ((buf != NULL) && (scheme == XML_BUFFER_ALLOC_IMMUTABLE) && (buf->content != NULL) && (buf->content != static_buf_content)) { xmlFree(buf->content); buf->content = NULL;}\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/libxml/tree.h||include/libxml/tree.h": [
          "File: include/libxml/tree.h -> include/libxml/tree.h"
        ],
        "include/libxml/xmlIO.h||include/libxml/xmlIO.h": [
          "File: include/libxml/xmlIO.h -> include/libxml/xmlIO.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: XMLPUBFUN xmlParserInputBufferPtr XMLCALL",
          "179:  xmlParserInputBufferCreateMem  (const char *mem, int size,",
          "180:                                           xmlCharEncoding enc);",
          "181: XMLPUBFUN xmlParserInputBufferPtr XMLCALL",
          "182:  xmlParserInputBufferCreateStatic (const char *mem, int size,",
          "183:                                           xmlCharEncoding enc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: XML_DEPRECATED",
          "",
          "---------------"
        ],
        "include/private/buf.h||include/private/buf.h": [
          "File: include/private/buf.h -> include/private/buf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: xmlBufPtr xmlBufCreate(void);",
          "7: xmlBufPtr xmlBufCreateSize(size_t size);",
          "10: int xmlBufSetAllocationScheme(xmlBufPtr buf,",
          "11:                               xmlBufferAllocationScheme scheme);",
          "",
          "[Removed Lines]",
          "8: xmlBufPtr xmlBufCreateStatic(void *mem, size_t size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "parser.c||parser.c": [
          "File: parser.c -> parser.c"
        ],
        "testchar.c||testchar.c": [
          "File: testchar.c -> testchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     return(test_ret);",
          "260: }",
          "263:     int i = 0;",
          "264:     int len, c;",
          "266:     data[1] = 0;",
          "267:     data[2] = 0;",
          "",
          "[Removed Lines]",
          "262: static int testCharRangeByte1(xmlParserCtxtPtr ctxt, char *data) {",
          "",
          "[Added Lines]",
          "262: static int testCharRangeByte1(xmlParserCtxtPtr ctxt) {",
          "265:     char *data = (char *) ctxt->input->cur;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:     return(0);",
          "293: }",
          "296:     int i, j;",
          "297:     int len, c;",
          "299:     data[2] = 0;",
          "300:     data[3] = 0;",
          "",
          "[Removed Lines]",
          "295: static int testCharRangeByte2(xmlParserCtxtPtr ctxt, char *data) {",
          "",
          "[Added Lines]",
          "296: static int testCharRangeByte2(xmlParserCtxtPtr ctxt) {",
          "299:     char *data = (char *) ctxt->input->cur;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:     return(0);",
          "380: }",
          "383:     int i, j, k, K;",
          "384:     int len, c;",
          "385:     unsigned char lows[6] = {0, 0x80, 0x81, 0xC1, 0xFF, 0xBF};",
          "386:     int value;",
          "388:     data[3] = 0;",
          "",
          "[Removed Lines]",
          "382: static int testCharRangeByte3(xmlParserCtxtPtr ctxt, char *data) {",
          "",
          "[Added Lines]",
          "384: static int testCharRangeByte3(xmlParserCtxtPtr ctxt) {",
          "388:     char *data = (char *) ctxt->input->cur;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "476:     return(0);",
          "477: }",
          "480:     int i, j, k, K, l, L;",
          "481:     int len, c;",
          "482:     unsigned char lows[6] = {0, 0x80, 0x81, 0xC1, 0xFF, 0xBF};",
          "483:     int value;",
          "485:     data[4] = 0;",
          "",
          "[Removed Lines]",
          "479: static int testCharRangeByte4(xmlParserCtxtPtr ctxt, char *data) {",
          "",
          "[Added Lines]",
          "482: static int testCharRangeByte4(xmlParserCtxtPtr ctxt) {",
          "486:     char *data = (char *) ctxt->input->cur;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "606:         fprintf(stderr, \"Failed to allocate parser context\\n\");",
          "607:  return(1);",
          "608:     }",
          "611:     if (buf == NULL) {",
          "612:         fprintf(stderr, \"Failed to allocate input buffer\\n\");",
          "613:  test_ret = 1;",
          "",
          "[Removed Lines]",
          "609:     buf = xmlParserInputBufferCreateStatic(data, sizeof(data),",
          "610:                                            XML_CHAR_ENCODING_NONE);",
          "",
          "[Added Lines]",
          "613:     buf = xmlParserInputBufferCreateMem(data, sizeof(data),",
          "614:                                         XML_CHAR_ENCODING_NONE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "629:     printf(\"testing char range: 1\");",
          "630:     fflush(stdout);",
          "632:     printf(\" 2\");",
          "633:     fflush(stdout);",
          "635:     printf(\" 3\");",
          "636:     fflush(stdout);",
          "638:     printf(\" 4\");",
          "639:     fflush(stdout);",
          "641:     printf(\" done\\n\");",
          "642:     fflush(stdout);",
          "",
          "[Removed Lines]",
          "631:     test_ret += testCharRangeByte1(ctxt, data);",
          "634:     test_ret += testCharRangeByte2(ctxt, data);",
          "637:     test_ret += testCharRangeByte3(ctxt, data);",
          "640:     test_ret += testCharRangeByte4(ctxt, data);",
          "",
          "[Added Lines]",
          "635:     test_ret += testCharRangeByte1(ctxt);",
          "638:     test_ret += testCharRangeByte2(ctxt);",
          "641:     test_ret += testCharRangeByte3(ctxt);",
          "644:     test_ret += testCharRangeByte4(ctxt);",
          "",
          "---------------"
        ],
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7208:     if (buf == NULL)",
          "7209:         return(NULL);",
          "7213:     ret = buf->content;",
          "7214:     buf->content = NULL;",
          "",
          "[Removed Lines]",
          "7210:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE)",
          "7211:         return(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7233: xmlBufferPtr",
          "7234: xmlBufferCreateStatic(void *mem, size_t size) {",
          "7252: }",
          "",
          "[Removed Lines]",
          "7235:     xmlBufferPtr ret;",
          "7237:     if ((mem == NULL) || (size == 0))",
          "7238:         return(NULL);",
          "7239:     if (size > UINT_MAX)",
          "7240:         return(NULL);",
          "7242:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
          "7243:     if (ret == NULL) {",
          "7244:  xmlTreeErrMemory(\"creating buffer\");",
          "7245:         return(NULL);",
          "7246:     }",
          "7247:     ret->use = size;",
          "7248:     ret->size = size;",
          "7249:     ret->alloc = XML_BUFFER_ALLOC_IMMUTABLE;",
          "7250:     ret->content = (xmlChar *) mem;",
          "7251:     return(ret);",
          "",
          "[Added Lines]",
          "7229:     xmlBufferPtr buf = xmlBufferCreateSize(size);",
          "7231:     xmlBufferAdd(buf, mem, size);",
          "7232:     return(buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7268: #endif",
          "7269:         return;",
          "7270:     }",
          "7273:     if ((scheme == XML_BUFFER_ALLOC_DOUBLEIT) ||",
          "7274:         (scheme == XML_BUFFER_ALLOC_EXACT) ||",
          "7277:  buf->alloc = scheme;",
          "7278: }",
          "",
          "[Removed Lines]",
          "7271:     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||",
          "7272:         (buf->alloc == XML_BUFFER_ALLOC_IO)) return;",
          "7275:         (scheme == XML_BUFFER_ALLOC_HYBRID) ||",
          "7276:         (scheme == XML_BUFFER_ALLOC_IMMUTABLE))",
          "",
          "[Added Lines]",
          "7252:     if (buf->alloc == XML_BUFFER_ALLOC_IO) return;",
          "7255:         (scheme == XML_BUFFER_ALLOC_HYBRID))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7297:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&",
          "7298:         (buf->contentIO != NULL)) {",
          "7299:         xmlFree(buf->contentIO);",
          "7302:         xmlFree(buf->content);",
          "7303:     }",
          "7304:     xmlFree(buf);",
          "",
          "[Removed Lines]",
          "7300:     } else if ((buf->content != NULL) &&",
          "7301:         (buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE)) {",
          "",
          "[Added Lines]",
          "7279:     } else if (buf->content != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7315:     if (buf == NULL) return;",
          "7316:     if (buf->content == NULL) return;",
          "7317:     buf->use = 0;",
          "7322:         size_t start_buf = buf->content - buf->contentIO;",
          "7324:  buf->size += start_buf;",
          "",
          "[Removed Lines]",
          "7318:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) {",
          "7319:         buf->content = BAD_CAST \"\";",
          "7320:     } else if ((buf->alloc == XML_BUFFER_ALLOC_IO) &&",
          "7321:                (buf->contentIO != NULL)) {",
          "",
          "[Added Lines]",
          "7296:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7345:     if (len > buf->use) return(-1);",
          "7347:     buf->use -= len;",
          "",
          "[Removed Lines]",
          "7348:     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||",
          "7349:         ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL))) {",
          "",
          "[Added Lines]",
          "7323:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7391:     if (buf == NULL) return(-1);",
          "7394:     if (len < buf->size - buf->use)",
          "7395:         return(0);",
          "7396:     if (len >= UINT_MAX - buf->use) {",
          "",
          "[Removed Lines]",
          "7393:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7514:     if (buf == NULL)",
          "7515:         return(0);",
          "7520:     if (size < buf->size)",
          "7521:         return 1;",
          "",
          "[Removed Lines]",
          "7517:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7633:     if ((str == NULL) || (buf == NULL)) {",
          "7634:  return -1;",
          "7635:     }",
          "7637:     if (len < -1) {",
          "7638: #ifdef DEBUG_BUFFER",
          "7639:         xmlGenericError(xmlGenericErrorContext,",
          "",
          "[Removed Lines]",
          "7636:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7687:     if (buf == NULL)",
          "7688:         return(-1);",
          "7690:     if (str == NULL) {",
          "7691: #ifdef DEBUG_BUFFER",
          "7692:         xmlGenericError(xmlGenericErrorContext,",
          "",
          "[Removed Lines]",
          "7689:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7757: xmlBufferCat(xmlBufferPtr buf, const xmlChar *str) {",
          "7758:     if (buf == NULL)",
          "7759:         return(-1);",
          "7761:     if (str == NULL) return -1;",
          "7762:     return xmlBufferAdd(buf, str, -1);",
          "7763: }",
          "",
          "[Removed Lines]",
          "7760:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7789: xmlBufferWriteCHAR(xmlBufferPtr buf, const xmlChar *string) {",
          "7790:     if (buf == NULL)",
          "7791:         return;",
          "7793:     xmlBufferCat(buf, string);",
          "7794: }",
          "",
          "[Removed Lines]",
          "7792:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7805: xmlBufferWriteChar(xmlBufferPtr buf, const char *string) {",
          "7806:     if (buf == NULL)",
          "7807:         return;",
          "7809:     xmlBufferCCat(buf, string);",
          "7810: }",
          "",
          "[Removed Lines]",
          "7808:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7824:     const xmlChar *cur, *base;",
          "7825:     if (buf == NULL)",
          "7826:         return;",
          "7828:     if (xmlStrchr(string, '\\\"')) {",
          "7829:         if (xmlStrchr(string, '\\'')) {",
          "7830: #ifdef DEBUG_BUFFER",
          "",
          "[Removed Lines]",
          "7827:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "xmlIO.c||xmlIO.c": [
          "File: xmlIO.c -> xmlIO.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2960: xmlParserInputBufferPtr",
          "2961: xmlParserInputBufferCreateStatic(const char *mem, int size,",
          "2962:                                  xmlCharEncoding enc) {",
          "2990: }",
          "2992: #ifdef LIBXML_OUTPUT_ENABLED",
          "",
          "[Removed Lines]",
          "2963:     xmlParserInputBufferPtr ret;",
          "2965:     if (size < 0) return(NULL);",
          "2966:     if (mem == NULL) return(NULL);",
          "2968:     ret = (xmlParserInputBufferPtr) xmlMalloc(sizeof(xmlParserInputBuffer));",
          "2969:     if (ret == NULL) {",
          "2970:  xmlIOErrMemory(\"creating input buffer\");",
          "2971:  return(NULL);",
          "2972:     }",
          "2973:     memset(ret, 0, sizeof(xmlParserInputBuffer));",
          "2974:     ret->buffer = xmlBufCreateStatic((void *)mem, size);",
          "2975:     if (ret->buffer == NULL) {",
          "2976:         xmlFree(ret);",
          "2977:  return(NULL);",
          "2978:     }",
          "2979:     ret->encoder = xmlGetCharEncodingHandler(enc);",
          "2980:     if (ret->encoder != NULL)",
          "2981:         ret->raw = xmlBufCreateSize(2 * xmlDefaultBufferSize);",
          "2982:     else",
          "2983:         ret->raw = NULL;",
          "2984:     ret->compressed = -1;",
          "2985:     ret->context = (void *) mem;",
          "2986:     ret->readcallback = NULL;",
          "2987:     ret->closecallback = NULL;",
          "2989:     return(ret);",
          "",
          "[Added Lines]",
          "2960:     return(xmlParserInputBufferCreateMem(mem, size, enc));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3506:     if ((out == NULL) || (out->error) || (str == NULL) ||",
          "3509:         return(-1);",
          "3510:     len = strlen((const char *)str);",
          "3511:     if (len < 0) return(0);",
          "",
          "[Removed Lines]",
          "3507:         (out->buffer == NULL) ||",
          "3508:  (xmlBufGetAllocationScheme(out->buffer) == XML_BUFFER_ALLOC_IMMUTABLE))",
          "",
          "[Added Lines]",
          "3478:         (out->buffer == NULL))",
          "",
          "---------------"
        ],
        "xmlreader.c||xmlreader.c": [
          "File: xmlreader.c -> xmlreader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     xmlBufPtr inbuf;",
          "774:     int val, s;",
          "775:     xmlTextReaderState oldstate;",
          "778:     if ((reader->input == NULL) || (reader->input->buffer == NULL))",
          "779:  return(-1);",
          "",
          "[Removed Lines]",
          "776:     int alloc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:     oldstate = reader->state;",
          "782:     reader->state = XML_TEXTREADER_NONE;",
          "783:     inbuf = reader->input->buffer;",
          "786:     while (reader->state == XML_TEXTREADER_NONE) {",
          "787:  if (xmlBufUse(inbuf) < reader->cur + CHUNK_SIZE) {",
          "",
          "[Removed Lines]",
          "784:     alloc = xmlBufGetAllocationScheme(inbuf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "791:      if (reader->mode != XML_TEXTREADER_MODE_EOF) {",
          "792:   val = xmlParserInputBufferRead(reader->input, 4096);",
          "800:       reader->mode = XML_TEXTREADER_MODE_EOF;",
          "801:       reader->state = oldstate;",
          "802:       if ((oldstate != XML_TEXTREADER_START) ||",
          "",
          "[Removed Lines]",
          "793:   if ((val == 0) &&",
          "794:       (alloc == XML_BUFFER_ALLOC_IMMUTABLE)) {",
          "795:       if (xmlBufUse(inbuf) == reader->cur) {",
          "796:    reader->mode = XML_TEXTREADER_MODE_EOF;",
          "797:    reader->state = oldstate;",
          "798:       }",
          "799:   } else if (val < 0) {",
          "",
          "[Added Lines]",
          "791:   if (val < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2554a2408e09f13652049e5ffb0d26196b02ebab",
      "candidate_info": {
        "commit_hash": "2554a2408e09f13652049e5ffb0d26196b02ebab",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/2554a2408e09f13652049e5ffb0d26196b02ebab",
        "files": [
          "buf.c",
          "tree.c"
        ],
        "message": "[CVE-2022-29824] Fix integer overflows in xmlBuf and xmlBuffer\n\nIn several places, the code handling string buffers didn't check for\ninteger overflow or used wrong types for buffer sizes. This could\nresult in out-of-bounds writes or other memory errors when working on\nlarge, multi-gigabyte buffers.\n\nThanks to Felix Wilhelm for the report.",
        "before_after_code_files": [
          "buf.c||buf.c",
          "tree.c||tree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ],
          "candidate": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "buf.c||buf.c": [
          "File: buf.c -> buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"buf.h\"",
          "33: #define WITH_BUFFER_COMPAT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #ifndef SIZE_MAX",
          "34: #define SIZE_MAX ((size_t) -1)",
          "35: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: xmlBufCreateSize(size_t size) {",
          "157:     xmlBufPtr ret;",
          "159:     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));",
          "160:     if (ret == NULL) {",
          "161:  xmlBufMemoryError(NULL, \"creating buffer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     if (size == SIZE_MAX)",
          "164:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:     ret->error = 0;",
          "167:     ret->buffer = NULL;",
          "168:     ret->alloc = xmlBufferAllocScheme;",
          "171:     if (ret->size){",
          "172:         ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));",
          "173:         if (ret->content == NULL) {",
          "",
          "[Removed Lines]",
          "170:     ret->compat_size = (int) ret->size;",
          "",
          "[Added Lines]",
          "176:     ret->compat_size = (ret->size > INT_MAX ? INT_MAX : ret->size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "442:     CHECK_COMPAT(buf)",
          "444:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "446:         return(buf->size - buf->use);",
          "463:     if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "445:     if (buf->use + len < buf->size)",
          "454: #if 1",
          "455:     if (buf->size > (size_t) len)",
          "456:         size = buf->size * 2;",
          "457:     else",
          "458:         size = buf->use + len + 100;",
          "459: #else",
          "460:     size = buf->use + len + 100;",
          "461: #endif",
          "",
          "[Added Lines]",
          "451:     if (len < buf->size - buf->use)",
          "453:     if (len > SIZE_MAX - buf->use)",
          "454:         return(0);",
          "456:     if (buf->size > (size_t) len) {",
          "457:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
          "458:     } else {",
          "459:         size = buf->use + len;",
          "460:         size = size > SIZE_MAX - 100 ? SIZE_MAX : size + 100;",
          "461:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "744: int",
          "745: xmlBufResize(xmlBufPtr buf, size_t size)",
          "746: {",
          "748:     xmlChar* rebuf = NULL;",
          "749:     size_t start_buf;",
          "",
          "[Removed Lines]",
          "747:     unsigned int newSize;",
          "",
          "[Added Lines]",
          "747:     size_t newSize;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "772:  case XML_BUFFER_ALLOC_IO:",
          "773:  case XML_BUFFER_ALLOC_DOUBLEIT:",
          "776:      while (size > newSize) {",
          "778:              xmlBufMemoryError(buf, \"growing buffer\");",
          "779:              return 0;",
          "780:          }",
          "",
          "[Removed Lines]",
          "775:      newSize = (buf->size ? buf->size*2 : size + 10);",
          "777:          if (newSize > UINT_MAX / 2) {",
          "",
          "[Added Lines]",
          "775:             if (buf->size == 0) {",
          "776:                 newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "777:             } else {",
          "778:                 newSize = buf->size;",
          "779:             }",
          "781:          if (newSize > SIZE_MAX / 2) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "782:      }",
          "783:      break;",
          "784:  case XML_BUFFER_ALLOC_EXACT:",
          "786:      break;",
          "787:         case XML_BUFFER_ALLOC_HYBRID:",
          "788:             if (buf->use < BASE_BUFFER_SIZE)",
          "789:                 newSize = size;",
          "790:             else {",
          "792:                 while (size > newSize) {",
          "794:                         xmlBufMemoryError(buf, \"growing buffer\");",
          "795:                         return 0;",
          "796:                     }",
          "",
          "[Removed Lines]",
          "785:      newSize = size+10;",
          "791:                 newSize = buf->size * 2;",
          "793:                     if (newSize > UINT_MAX / 2) {",
          "",
          "[Added Lines]",
          "789:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "795:                 newSize = buf->size;",
          "797:                     if (newSize > SIZE_MAX / 2) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "800:             break;",
          "802:  default:",
          "804:      break;",
          "805:     }",
          "",
          "[Removed Lines]",
          "803:      newSize = size+10;",
          "",
          "[Added Lines]",
          "807:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "867: int",
          "868: xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {",
          "871:     if ((str == NULL) || (buf == NULL) || (buf->error))",
          "872:  return -1;",
          "",
          "[Removed Lines]",
          "869:     unsigned int needSize;",
          "",
          "[Added Lines]",
          "873:     size_t needSize;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "888:     if (len < 0) return -1;",
          "889:     if (len == 0) return 0;",
          "893:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "891:     needSize = buf->use + len + 2;",
          "892:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "895:     if ((size_t) len >= buf->size - buf->use) {",
          "896:         if ((size_t) len >= SIZE_MAX - buf->use)",
          "897:             return(-1);",
          "898:         needSize = buf->use + len + 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1026: int",
          "1027: xmlBufCCat(xmlBufPtr buf, const char *str) {",
          "1053: }",
          "",
          "[Removed Lines]",
          "1028:     const char *cur;",
          "1030:     if ((buf == NULL) || (buf->error))",
          "1031:         return(-1);",
          "1032:     CHECK_COMPAT(buf)",
          "1033:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "1034:     if (str == NULL) {",
          "1035: #ifdef DEBUG_BUFFER",
          "1036:         xmlGenericError(xmlGenericErrorContext,",
          "1037:   \"xmlBufCCat: str == NULL\\n\");",
          "1038: #endif",
          "1039:  return -1;",
          "1040:     }",
          "1041:     for (cur = str;*cur != 0;cur++) {",
          "1042:         if (buf->use  + 10 >= buf->size) {",
          "1043:             if (!xmlBufResize(buf, buf->use+10)){",
          "1044:   xmlBufMemoryError(buf, \"growing buffer\");",
          "1045:                 return XML_ERR_NO_MEMORY;",
          "1046:             }",
          "1047:         }",
          "1048:         buf->content[buf->use++] = *cur;",
          "1049:     }",
          "1050:     buf->content[buf->use] = 0;",
          "1051:     UPDATE_COMPAT(buf)",
          "1052:     return 0;",
          "",
          "[Added Lines]",
          "1034:     return xmlBufCat(buf, (const xmlChar *) str);",
          "",
          "---------------"
        ],
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7104: xmlBufferCreateSize(size_t size) {",
          "7105:     xmlBufferPtr ret;",
          "7107:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
          "7108:     if (ret == NULL) {",
          "7109:  xmlTreeErrMemory(\"creating buffer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7107:     if (size >= UINT_MAX)",
          "7108:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7172:     if ((mem == NULL) || (size == 0))",
          "7173:         return(NULL);",
          "7175:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
          "7176:     if (ret == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7176:     if (size > UINT_MAX)",
          "7177:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7319: int",
          "7320: xmlBufferGrow(xmlBufferPtr buf, unsigned int len) {",
          "7322:     xmlChar *newbuf;",
          "7324:     if (buf == NULL) return(-1);",
          "7326:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "7344:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
          "7345:         size_t start_buf = buf->content - buf->contentIO;",
          "",
          "[Removed Lines]",
          "7321:     int size;",
          "7327:     if (len + buf->use < buf->size) return(0);",
          "7335: #if 1",
          "7336:     if (buf->size > len)",
          "7337:         size = buf->size * 2;",
          "7338:     else",
          "7339:         size = buf->use + len + 100;",
          "7340: #else",
          "7341:     size = buf->use + len + 100;",
          "7342: #endif",
          "",
          "[Added Lines]",
          "7325:     unsigned int size;",
          "7331:     if (len < buf->size - buf->use)",
          "7332:         return(0);",
          "7333:     if (len > UINT_MAX - buf->use)",
          "7334:         return(-1);",
          "7336:     if (buf->size > (size_t) len) {",
          "7337:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
          "7338:     } else {",
          "7339:         size = buf->use + len;",
          "7340:         size = size > UINT_MAX - 100 ? UINT_MAX : size + 100;",
          "7341:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7466:  case XML_BUFFER_ALLOC_IO:",
          "7467:  case XML_BUFFER_ALLOC_DOUBLEIT:",
          "7470:      while (size > newSize) {",
          "7471:          if (newSize > UINT_MAX / 2) {",
          "7472:              xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Removed Lines]",
          "7469:      newSize = (buf->size ? buf->size : size + 10);",
          "",
          "[Added Lines]",
          "7468:             if (buf->size == 0)",
          "7469:                 newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
          "7470:             else",
          "7471:                 newSize = buf->size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7476:      }",
          "7477:      break;",
          "7478:  case XML_BUFFER_ALLOC_EXACT:",
          "7480:      break;",
          "7481:         case XML_BUFFER_ALLOC_HYBRID:",
          "7482:             if (buf->use < BASE_BUFFER_SIZE)",
          "",
          "[Removed Lines]",
          "7479:      newSize = size+10;",
          "",
          "[Added Lines]",
          "7481:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7494:             break;",
          "7496:  default:",
          "7498:      break;",
          "7499:     }",
          "",
          "[Removed Lines]",
          "7497:      newSize = size+10;",
          "",
          "[Added Lines]",
          "7499:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7580:     if (len < 0) return -1;",
          "7581:     if (len == 0) return 0;",
          "7585:         if (!xmlBufferResize(buf, needSize)){",
          "7586:      xmlTreeErrMemory(\"growing buffer\");",
          "7587:             return XML_ERR_NO_MEMORY;",
          "",
          "[Removed Lines]",
          "7583:     needSize = buf->use + len + 2;",
          "7584:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "7585:     if ((unsigned) len >= buf->size - buf->use) {",
          "7586:         if ((unsigned) len >= UINT_MAX - buf->use)",
          "7587:             return XML_ERR_NO_MEMORY;",
          "7588:         needSize = buf->use + len + 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7695: int",
          "7696: xmlBufferCCat(xmlBufferPtr buf, const char *str) {",
          "7720: }",
          "",
          "[Removed Lines]",
          "7697:     const char *cur;",
          "7699:     if (buf == NULL)",
          "7700:         return(-1);",
          "7701:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "7702:     if (str == NULL) {",
          "7703: #ifdef DEBUG_BUFFER",
          "7704:         xmlGenericError(xmlGenericErrorContext,",
          "7705:   \"xmlBufferCCat: str == NULL\\n\");",
          "7706: #endif",
          "7707:  return -1;",
          "7708:     }",
          "7709:     for (cur = str;*cur != 0;cur++) {",
          "7710:         if (buf->use  + 10 >= buf->size) {",
          "7711:             if (!xmlBufferResize(buf, buf->use+10)){",
          "7712:   xmlTreeErrMemory(\"growing buffer\");",
          "7713:                 return XML_ERR_NO_MEMORY;",
          "7714:             }",
          "7715:         }",
          "7716:         buf->content[buf->use++] = *cur;",
          "7717:     }",
          "7718:     buf->content[buf->use] = 0;",
          "7719:     return 0;",
          "",
          "[Added Lines]",
          "7701:     return xmlBufferCat(buf, (const xmlChar *) str);",
          "",
          "---------------"
        ]
      }
    }
  ]
}