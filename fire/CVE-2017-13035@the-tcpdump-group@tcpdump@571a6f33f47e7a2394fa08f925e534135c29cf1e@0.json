{
  "cve_id": "CVE-2017-13035",
  "cve_desc": "The ISO IS-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:isis_print_id().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "571a6f33f47e7a2394fa08f925e534135c29cf1e",
  "patch_info": {
    "commit_hash": "571a6f33f47e7a2394fa08f925e534135c29cf1e",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/571a6f33f47e7a2394fa08f925e534135c29cf1e",
    "files": [
      "print-isoclns.c",
      "tests/TESTLIST",
      "tests/isis_sysid_asan.out",
      "tests/isis_sysid_asan.pcap"
    ],
    "message": "CVE-2017-13035/Properly handle IS-IS IDs shorter than a system ID (MAC address).\n\nSome of them are variable-length, with a field giving the total length,\nand therefore they can be shorter than 6 octets.  If one is, don't run\npast the end.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-isoclns.c||print-isoclns.c"
    ]
  },
  "patch_diff": {
    "print-isoclns.c||print-isoclns.c": [
      "File: print-isoclns.c -> print-isoclns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1646:     int i;",
      "1647:     static char id[sizeof(\"xxxx.xxxx.xxxx.yy-zz\")];",
      "1648:     char *pos = id;",
      "1651:         snprintf(pos, sizeof(id) - (pos - id), \"%02x\", *cp++);",
      "1652:  pos += strlen(pos);",
      "1653:  if (i == 2 || i == 4)",
      "",
      "[Removed Lines]",
      "1650:     for (i = 1; i <= SYSTEM_ID_LEN; i++) {",
      "",
      "[Added Lines]",
      "1649:     int sysid_len;",
      "1651:     sysid_len = SYSTEM_ID_LEN;",
      "1652:     if (sysid_len > id_len)",
      "1653:         sysid_len = id_len;",
      "1654:     for (i = 1; i <= sysid_len; i++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "509c212dc6deac4346142bf08d561a2fa7930098",
      "candidate_info": {
        "commit_hash": "509c212dc6deac4346142bf08d561a2fa7930098",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/509c212dc6deac4346142bf08d561a2fa7930098",
        "files": [
          "print-isoclns.c"
        ],
        "message": "Use nd_ types in packet structures.\n\nAdd EXTRACT_U_1() calls as appropriate.\n\nUse EXTRACT_IPV4_TO_HOST_ORDER(), rather than EXTRACT_BE_U_4(), when\nextracting an IPv4 mask into host byte order.\n\nUse %u, and u_int, for unsigned values.\n\nAdd ISO standard numbers for the protocols in a specification comment up\nfront.",
        "before_after_code_files": [
          "print-isoclns.c||print-isoclns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-isoclns.c||print-isoclns.c"
          ],
          "candidate": [
            "print-isoclns.c||print-isoclns.c"
          ]
        }
      },
      "candidate_diff": {
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450: };",
          "452: struct isis_spb_mcid {",
          "457: };",
          "459: struct isis_subtlv_spb_mcid {",
          "",
          "[Removed Lines]",
          "453:   uint8_t  format_id;",
          "454:   uint8_t  name[32];",
          "455:   uint8_t  revision_lvl[2];",
          "456:   uint8_t  digest[16];",
          "",
          "[Added Lines]",
          "461:   nd_uint8_t  format_id;",
          "462:   nd_byte     name[32];",
          "463:   nd_uint16_t revision_lvl;",
          "464:   nd_byte     digest[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462: };",
          "464: struct isis_subtlv_spb_instance {",
          "470: };",
          "472: #define CLNP_SEGMENT_PART  0x80",
          "",
          "[Removed Lines]",
          "465:   uint8_t cist_root_id[8];",
          "466:   uint8_t cist_external_root_path_cost[4];",
          "467:   uint8_t bridge_priority[2];",
          "468:   uint8_t spsourceid[4];",
          "469:   uint8_t no_of_trees;",
          "",
          "[Added Lines]",
          "473:   nd_byte     cist_root_id[8];",
          "474:   nd_uint32_t cist_external_root_path_cost;",
          "475:   nd_uint16_t bridge_priority;",
          "476:   nd_uint32_t spsourceid;",
          "477:   nd_uint8_t  no_of_trees;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:     { 0, NULL}",
          "481: };",
          "492: #define ISIS_MASK_MTID(x)                  ((x)&0x0fff)",
          "493: #define ISIS_MASK_MTFLAGS(x)               ((x)&0xf000)",
          "",
          "[Removed Lines]",
          "483: #define ISIS_MASK_LSP_OL_BIT(x)            ((x)&0x4)",
          "484: #define ISIS_MASK_LSP_ISTYPE_BITS(x)       ((x)&0x3)",
          "485: #define ISIS_MASK_LSP_PARTITION_BIT(x)     ((x)&0x80)",
          "486: #define ISIS_MASK_LSP_ATT_BITS(x)          ((x)&0x78)",
          "487: #define ISIS_MASK_LSP_ATT_ERROR_BIT(x)     ((x)&0x40)",
          "488: #define ISIS_MASK_LSP_ATT_EXPENSE_BIT(x)   ((x)&0x20)",
          "489: #define ISIS_MASK_LSP_ATT_DELAY_BIT(x)     ((x)&0x10)",
          "490: #define ISIS_MASK_LSP_ATT_DEFAULT_BIT(x)   ((x)&0x8)",
          "",
          "[Added Lines]",
          "491: #define ISIS_MASK_LSP_OL_BIT(x)            (EXTRACT_U_1(x)&0x4)",
          "492: #define ISIS_MASK_LSP_ISTYPE_BITS(x)       (EXTRACT_U_1(x)&0x3)",
          "493: #define ISIS_MASK_LSP_PARTITION_BIT(x)     (EXTRACT_U_1(x)&0x80)",
          "494: #define ISIS_MASK_LSP_ATT_BITS(x)          (EXTRACT_U_1(x)&0x78)",
          "495: #define ISIS_MASK_LSP_ATT_ERROR_BIT(x)     (EXTRACT_U_1(x)&0x40)",
          "496: #define ISIS_MASK_LSP_ATT_EXPENSE_BIT(x)   (EXTRACT_U_1(x)&0x20)",
          "497: #define ISIS_MASK_LSP_ATT_DELAY_BIT(x)     (EXTRACT_U_1(x)&0x10)",
          "498: #define ISIS_MASK_LSP_ATT_DEFAULT_BIT(x)   (EXTRACT_U_1(x)&0x8)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504: #define ISIS_MASK_TLV_EXTD_IP6_IE(x)        ((x)&0x40)",
          "505: #define ISIS_MASK_TLV_EXTD_IP6_SUBTLV(x)    ((x)&0x20)",
          "512: #define ISIS_MASK_TLV_SHARED_RISK_GROUP(x) ((x)&0x1)",
          "",
          "[Removed Lines]",
          "507: #define ISIS_LSP_TLV_METRIC_SUPPORTED(x)   ((x)&0x80)",
          "508: #define ISIS_LSP_TLV_METRIC_IE(x)          ((x)&0x40)",
          "509: #define ISIS_LSP_TLV_METRIC_UPDOWN(x)      ((x)&0x80)",
          "510: #define ISIS_LSP_TLV_METRIC_VALUE(x)    ((x)&0x3f)",
          "",
          "[Added Lines]",
          "515: #define ISIS_LSP_TLV_METRIC_SUPPORTED(x)   (EXTRACT_U_1(x)&0x80)",
          "516: #define ISIS_LSP_TLV_METRIC_IE(x)          (EXTRACT_U_1(x)&0x40)",
          "517: #define ISIS_LSP_TLV_METRIC_UPDOWN(x)      (EXTRACT_U_1(x)&0x80)",
          "518: #define ISIS_LSP_TLV_METRIC_VALUE(x)    (EXTRACT_U_1(x)&0x3f)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "557: };",
          "559: struct isis_tlv_ptp_adj {",
          "564: };",
          "566: static void osi_print_cksum(netdissect_options *, const uint8_t *pptr,",
          "",
          "[Removed Lines]",
          "560:     uint8_t adjacency_state;",
          "561:     uint8_t extd_local_circuit_id[4];",
          "562:     uint8_t neighbor_sysid[SYSTEM_ID_LEN];",
          "563:     uint8_t neighbor_extd_local_circuit_id[4];",
          "",
          "[Added Lines]",
          "568:     nd_uint8_t  adjacency_state;",
          "569:     nd_uint32_t extd_local_circuit_id;",
          "570:     nd_byte     neighbor_sysid[SYSTEM_ID_LEN];",
          "571:     nd_uint32_t neighbor_extd_local_circuit_id;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "570: static int isis_print(netdissect_options *, const uint8_t *, u_int);",
          "572: struct isis_metric_block {",
          "577: };",
          "579: struct isis_tlv_is_reach {",
          "580:     struct isis_metric_block isis_metric_block;",
          "582: };",
          "584: struct isis_tlv_es_reach {",
          "585:     struct isis_metric_block isis_metric_block;",
          "587: };",
          "589: struct isis_tlv_ip_reach {",
          "590:     struct isis_metric_block isis_metric_block;",
          "593: };",
          "595: static const struct tok isis_is_reach_virtual_values[] = {",
          "",
          "[Removed Lines]",
          "573:     uint8_t metric_default;",
          "574:     uint8_t metric_delay;",
          "575:     uint8_t metric_expense;",
          "576:     uint8_t metric_error;",
          "581:     uint8_t neighbor_nodeid[NODE_ID_LEN];",
          "586:     uint8_t neighbor_sysid[SYSTEM_ID_LEN];",
          "591:     uint8_t prefix[4];",
          "592:     uint8_t mask[4];",
          "",
          "[Added Lines]",
          "581:     nd_uint8_t metric_default;",
          "582:     nd_uint8_t metric_delay;",
          "583:     nd_uint8_t metric_expense;",
          "584:     nd_uint8_t metric_error;",
          "589:     nd_byte neighbor_nodeid[NODE_ID_LEN];",
          "594:     nd_byte neighbor_sysid[SYSTEM_ID_LEN];",
          "599:     nd_ipv4 prefix;",
          "600:     nd_ipv4 mask;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "606: };",
          "608: struct isis_common_header {",
          "617: };",
          "619: struct isis_iih_lan_header {",
          "626: };",
          "628: struct isis_iih_ptp_header {",
          "634: };",
          "636: struct isis_lsp_header {",
          "643: };",
          "645: struct isis_csnp_header {",
          "650: };",
          "652: struct isis_psnp_header {",
          "655: };",
          "657: struct isis_tlv_lsp {",
          "662: };",
          "664: #define ISIS_COMMON_HEADER_SIZE (sizeof(struct isis_common_header))",
          "",
          "[Removed Lines]",
          "609:     uint8_t nlpid;",
          "610:     uint8_t fixed_len;",
          "612:     uint8_t id_length;",
          "615:     uint8_t reserved;",
          "616:     uint8_t max_area;",
          "620:     uint8_t circuit_type;",
          "621:     uint8_t source_id[SYSTEM_ID_LEN];",
          "622:     uint8_t holding_time[2];",
          "623:     uint8_t pdu_len[2];",
          "624:     uint8_t priority;",
          "625:     uint8_t lan_id[NODE_ID_LEN];",
          "629:     uint8_t circuit_type;",
          "630:     uint8_t source_id[SYSTEM_ID_LEN];",
          "631:     uint8_t holding_time[2];",
          "632:     uint8_t pdu_len[2];",
          "633:     uint8_t circuit_id;",
          "637:     uint8_t pdu_len[2];",
          "638:     uint8_t remaining_lifetime[2];",
          "639:     uint8_t lsp_id[LSP_ID_LEN];",
          "640:     uint8_t sequence_number[4];",
          "641:     uint8_t checksum[2];",
          "642:     uint8_t typeblock;",
          "646:     uint8_t pdu_len[2];",
          "647:     uint8_t source_id[NODE_ID_LEN];",
          "648:     uint8_t start_lsp_id[LSP_ID_LEN];",
          "649:     uint8_t end_lsp_id[LSP_ID_LEN];",
          "653:     uint8_t pdu_len[2];",
          "654:     uint8_t source_id[NODE_ID_LEN];",
          "658:     uint8_t remaining_lifetime[2];",
          "659:     uint8_t lsp_id[LSP_ID_LEN];",
          "660:     uint8_t sequence_number[4];",
          "661:     uint8_t checksum[2];",
          "",
          "[Added Lines]",
          "617:     nd_uint8_t nlpid;",
          "618:     nd_uint8_t fixed_len;",
          "620:     nd_uint8_t id_length;",
          "623:     nd_byte reserved;",
          "624:     nd_uint8_t max_area;",
          "628:     nd_uint8_t  circuit_type;",
          "629:     nd_byte     source_id[SYSTEM_ID_LEN];",
          "630:     nd_uint16_t holding_time;",
          "631:     nd_uint16_t pdu_len;",
          "632:     nd_uint8_t  priority;",
          "633:     nd_byte     lan_id[NODE_ID_LEN];",
          "637:     nd_uint8_t  circuit_type;",
          "638:     nd_byte     source_id[SYSTEM_ID_LEN];",
          "639:     nd_uint16_t holding_time;",
          "640:     nd_uint16_t pdu_len;",
          "641:     nd_uint8_t  circuit_id;",
          "645:     nd_uint16_t pdu_len;",
          "646:     nd_uint16_t remaining_lifetime;",
          "647:     nd_byte     lsp_id[LSP_ID_LEN];",
          "648:     nd_uint32_t sequence_number;",
          "649:     nd_uint16_t checksum;",
          "650:     nd_uint8_t  typeblock;",
          "654:     nd_uint16_t pdu_len;",
          "655:     nd_byte     source_id[NODE_ID_LEN];",
          "656:     nd_byte     start_lsp_id[LSP_ID_LEN];",
          "657:     nd_byte     end_lsp_id[LSP_ID_LEN];",
          "661:     nd_uint16_t pdu_len;",
          "662:     nd_byte     source_id[NODE_ID_LEN];",
          "666:     nd_uint16_t remaining_lifetime;",
          "667:     nd_byte     lsp_id[LSP_ID_LEN];",
          "668:     nd_uint32_t sequence_number;",
          "669:     nd_uint16_t checksum;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "741: };",
          "743: struct clnp_header_t {",
          "751: };",
          "753: struct clnp_segment_header_t {",
          "757: };",
          "",
          "[Removed Lines]",
          "744:     uint8_t nlpid;",
          "745:     uint8_t length_indicator;",
          "746:     uint8_t version;",
          "748:     uint8_t type;",
          "749:     uint8_t segment_length[2];",
          "750:     uint8_t cksum[2];",
          "754:     uint8_t data_unit_id[2];",
          "755:     uint8_t segment_offset[2];",
          "756:     uint8_t total_length[2];",
          "",
          "[Added Lines]",
          "752:     nd_uint8_t  nlpid;",
          "753:     nd_uint8_t  length_indicator;",
          "754:     nd_uint8_t  version;",
          "756:     nd_uint8_t  type;",
          "757:     nd_uint16_t segment_length;",
          "758:     nd_uint16_t cksum;",
          "762:     nd_uint16_t data_unit_id;",
          "763:     nd_uint16_t segment_offset;",
          "764:     nd_uint16_t total_length;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "766:            const uint8_t *pptr, u_int length)",
          "767: {",
          "768:  const uint8_t *optr,*source_address,*dest_address;",
          "770:  const struct clnp_header_t *clnp_header;",
          "771:  const struct clnp_segment_header_t *clnp_segment_header;",
          "772:         uint8_t rfd_error,rfd_error_major,rfd_error_minor;",
          "",
          "[Removed Lines]",
          "769:         u_int li,tlen,nsap_offset,source_address_length,dest_address_length, clnp_pdu_type, clnp_flags;",
          "",
          "[Added Lines]",
          "777:         u_int li,li_remaining,tlen,nsap_offset,source_address_length,dest_address_length, clnp_pdu_type, clnp_flags;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "774:  clnp_header = (const struct clnp_header_t *) pptr;",
          "775:         ND_TCHECK(*clnp_header);",
          "778:         optr = pptr;",
          "780:         if (!ndo->ndo_eflag)",
          "",
          "[Removed Lines]",
          "777:         li = clnp_header->length_indicator;",
          "",
          "[Added Lines]",
          "785:         li = EXTRACT_U_1(clnp_header->length_indicator);",
          "786:         li_remaining = li;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "789:             return (0);",
          "790:         }",
          "",
          "[Removed Lines]",
          "787:         if (clnp_header->version != CLNP_VERSION) {",
          "788:             ND_PRINT((ndo, \"version %d packet not supported\", clnp_header->version));",
          "",
          "[Added Lines]",
          "796:         if (EXTRACT_U_1(clnp_header->version) != CLNP_VERSION) {",
          "797:             ND_PRINT((ndo, \"version %u packet not supported\", EXTRACT_U_1(clnp_header->version)));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "811:         pptr += sizeof(struct clnp_header_t);",
          "815:             ND_PRINT((ndo, \"li < size of fixed part of CLNP header and addresses\"));",
          "816:             return (0);",
          "817:         }",
          "818:  ND_TCHECK_1(pptr);",
          "819:         dest_address_length = EXTRACT_U_1(pptr);",
          "820:         pptr += 1;",
          "823:             ND_PRINT((ndo, \"li < size of fixed part of CLNP header and addresses\"));",
          "824:             return (0);",
          "825:         }",
          "826:         ND_TCHECK_LEN(pptr, dest_address_length);",
          "827:         dest_address = pptr;",
          "828:         pptr += dest_address_length;",
          "832:             ND_PRINT((ndo, \"li < size of fixed part of CLNP header and addresses\"));",
          "833:             return (0);",
          "834:         }",
          "835:  ND_TCHECK_1(pptr);",
          "836:         source_address_length = EXTRACT_U_1(pptr);",
          "837:         pptr += 1;",
          "840:             ND_PRINT((ndo, \"li < size of fixed part of CLNP header and addresses\"));",
          "841:             return (0);",
          "842:         }",
          "843:         ND_TCHECK_LEN(pptr, source_address_length);",
          "844:         source_address = pptr;",
          "845:         pptr += source_address_length;",
          "848:         if (ndo->ndo_vflag < 1) {",
          "849:             ND_PRINT((ndo, \"%s%s > %s, %s, length %u\",",
          "",
          "[Removed Lines]",
          "808:         clnp_pdu_type = clnp_header->type & CLNP_PDU_TYPE_MASK;",
          "809:         clnp_flags = clnp_header->type & CLNP_FLAG_MASK;",
          "812:         li -= sizeof(struct clnp_header_t);",
          "814:         if (li < 1) {",
          "821:         li -= 1;",
          "822:         if (li < dest_address_length) {",
          "829:         li -= dest_address_length;",
          "831:         if (li < 1) {",
          "838:         li -= 1;",
          "839:         if (li < source_address_length) {",
          "846:         li -= source_address_length;",
          "",
          "[Added Lines]",
          "817:         clnp_pdu_type = EXTRACT_U_1(clnp_header->type) & CLNP_PDU_TYPE_MASK;",
          "818:         clnp_flags = EXTRACT_U_1(clnp_header->type) & CLNP_FLAG_MASK;",
          "821:         li_remaining -= sizeof(struct clnp_header_t);",
          "823:         if (li_remaining < 1) {",
          "830:         li_remaining -= 1;",
          "831:         if (li_remaining < dest_address_length) {",
          "838:         li_remaining -= dest_address_length;",
          "840:         if (li_remaining < 1) {",
          "847:         li_remaining -= 1;",
          "848:         if (li_remaining < source_address_length) {",
          "855:         li_remaining -= source_address_length;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "859:         ND_PRINT((ndo, \"\\n\\t%s PDU, hlen: %u, v: %u, lifetime: %u.%us, Segment PDU length: %u, checksum: 0x%04x\",",
          "860:                tok2str(clnp_pdu_values, \"unknown (%u)\",clnp_pdu_type),",
          "865:                EXTRACT_BE_U_2(clnp_header->segment_length),",
          "866:                EXTRACT_BE_U_2(clnp_header->cksum)));",
          "868:         osi_print_cksum(ndo, optr, EXTRACT_BE_U_2(clnp_header->cksum), 7,",
          "871:         ND_PRINT((ndo, \"\\n\\tFlags [%s]\",",
          "872:                bittok2str(clnp_flag_values, \"none\", clnp_flags)));",
          "",
          "[Removed Lines]",
          "861:                clnp_header->length_indicator,",
          "862:                clnp_header->version,",
          "863:                clnp_header->lifetime/2,",
          "864:                (clnp_header->lifetime%2)*5,",
          "869:                         clnp_header->length_indicator);",
          "",
          "[Added Lines]",
          "870:                EXTRACT_U_1(clnp_header->length_indicator),",
          "871:                EXTRACT_U_1(clnp_header->version),",
          "872:                EXTRACT_U_1(clnp_header->lifetime)/2,",
          "873:                (EXTRACT_U_1(clnp_header->lifetime)%2)*5,",
          "878:                         EXTRACT_U_1(clnp_header->length_indicator));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "878:                isonsap_string(ndo, dest_address, dest_address_length)));",
          "880:         if (clnp_flags & CLNP_SEGMENT_PART) {",
          "882:                     ND_PRINT((ndo, \"li < size of fixed part of CLNP header, addresses, and segment part\"));",
          "883:                     return (0);",
          "884:                 }",
          "",
          "[Removed Lines]",
          "881:                 if (li < sizeof(struct clnp_segment_header_t)) {",
          "",
          "[Added Lines]",
          "890:                 if (li_remaining < sizeof(struct clnp_segment_header_t)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "889:                        EXTRACT_BE_U_2(clnp_segment_header->segment_offset),",
          "890:                        EXTRACT_BE_U_2(clnp_segment_header->total_length)));",
          "891:                 pptr+=sizeof(struct clnp_segment_header_t);",
          "893:         }",
          "897:             u_int op, opli;",
          "898:             const uint8_t *tptr;",
          "901:                 ND_PRINT((ndo, \", bad opts/li\"));",
          "902:                 return (0);",
          "903:             }",
          "",
          "[Removed Lines]",
          "892:                 li-=sizeof(struct clnp_segment_header_t);",
          "896:         while (li >= 2) {",
          "900:             if (li < 2) {",
          "",
          "[Added Lines]",
          "901:                 li_remaining-=sizeof(struct clnp_segment_header_t);",
          "905:         while (li_remaining >= 2) {",
          "909:             if (li_remaining < 2) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "905:             op = EXTRACT_U_1(pptr);",
          "906:             opli = EXTRACT_U_1(pptr + 1);",
          "907:             pptr += 2;",
          "911:                 return (0);",
          "912:             }",
          "913:             ND_TCHECK_LEN(pptr, opli);",
          "915:             tptr = pptr;",
          "916:             tlen = opli;",
          "",
          "[Removed Lines]",
          "908:             li -= 2;",
          "909:             if (opli > li) {",
          "910:                 ND_PRINT((ndo, \", opt (%d) too long\", op));",
          "914:             li -= opli;",
          "",
          "[Added Lines]",
          "917:             li_remaining -= 2;",
          "918:             if (opli > li_remaining) {",
          "919:                 ND_PRINT((ndo, \", opt (%u) too long\", op));",
          "923:             li_remaining -= opli;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1044:             if (EXTRACT_U_1(pptr) == NLPID_CLNP) {",
          "1045:                 ND_PRINT((ndo, \"\\n\\t-----original packet-----\\n\\t\"));",
          "1048:                 break;",
          "1049:             }",
          "",
          "[Removed Lines]",
          "1047:                 clnp_print(ndo, pptr, length - clnp_header->length_indicator);",
          "",
          "[Added Lines]",
          "1056:                 clnp_print(ndo, pptr, length - li);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1055:         default:",
          "1057:             if (length-(pptr-optr) > 0) {",
          "1059:                 print_unknown_data(ndo, pptr, \"\\n\\t  \", length - (pptr - optr));",
          "1060:             }",
          "1061:         }",
          "",
          "[Removed Lines]",
          "1058:                 ND_PRINT((ndo, \"\\n\\t  undecoded non-header data, length %u\", length-clnp_header->length_indicator));",
          "",
          "[Added Lines]",
          "1067:                 ND_PRINT((ndo, \"\\n\\t  undecoded non-header data, length %u\", length-li));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1081: };",
          "1083: struct esis_header_t {",
          "1091: };",
          "1093: static void",
          "",
          "[Removed Lines]",
          "1084:  uint8_t nlpid;",
          "1085:  uint8_t length_indicator;",
          "1086:  uint8_t version;",
          "1087:  uint8_t reserved;",
          "1088:  uint8_t type;",
          "1089:  uint8_t holdtime[2];",
          "1090:  uint8_t cksum[2];",
          "",
          "[Added Lines]",
          "1093:  nd_uint8_t  nlpid;",
          "1094:  nd_uint8_t  length_indicator;",
          "1095:  nd_uint8_t  version;",
          "1096:  nd_byte     reserved;",
          "1097:  nd_uint8_t  type;",
          "1098:  nd_uint16_t holdtime;",
          "1099:  nd_uint16_t cksum;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1095:            const uint8_t *pptr, u_int length)",
          "1096: {",
          "1097:  const uint8_t *optr;",
          "1099:  const struct esis_header_t *esis_header;",
          "1101:  if (!ndo->ndo_eflag)",
          "",
          "[Removed Lines]",
          "1098:  u_int li,esis_pdu_type,source_address_length, source_address_number;",
          "",
          "[Added Lines]",
          "1107:  u_int li, version, esis_pdu_type, source_address_length, source_address_number;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1109:  esis_header = (const struct esis_header_t *) pptr;",
          "1110:         ND_TCHECK(*esis_header);",
          "1112:         optr = pptr;",
          "1120:             return;",
          "1121:         }",
          "1125:             return;",
          "1126:         }",
          "",
          "[Removed Lines]",
          "1111:         li = esis_header->length_indicator;",
          "1118:         if (esis_header->nlpid != NLPID_ESIS) {",
          "1119:             ND_PRINT((ndo, \" nlpid 0x%02x packet not supported\", esis_header->nlpid));",
          "1123:         if (esis_header->version != ESIS_VERSION) {",
          "1124:             ND_PRINT((ndo, \" version %d packet not supported\", esis_header->version));",
          "",
          "[Added Lines]",
          "1120:         li = EXTRACT_U_1(esis_header->length_indicator);",
          "1127:         if (EXTRACT_U_1(esis_header->nlpid) != NLPID_ESIS) {",
          "1128:             ND_PRINT((ndo, \" nlpid 0x%02x packet not supported\", EXTRACT_U_1(esis_header->nlpid)));",
          "1132:         version = EXTRACT_U_1(esis_header->version);",
          "1133:         if (version != ESIS_VERSION) {",
          "1134:             ND_PRINT((ndo, \" version %u packet not supported\", version));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1139:             return;",
          "1140:  }",
          "1144:         if (ndo->ndo_vflag < 1) {",
          "1145:             ND_PRINT((ndo, \"%s%s, length %u\",",
          "",
          "[Removed Lines]",
          "1142:         esis_pdu_type = esis_header->type & ESIS_PDU_TYPE_MASK;",
          "",
          "[Added Lines]",
          "1152:         esis_pdu_type = EXTRACT_U_1(esis_header->type) & ESIS_PDU_TYPE_MASK;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1154:                    tok2str(esis_pdu_values,\"unknown type: %u\", esis_pdu_type),",
          "1155:                    esis_pdu_type));",
          "1158:         ND_PRINT((ndo, \", checksum: 0x%04x\", EXTRACT_BE_U_2(esis_header->cksum)));",
          "1160:         osi_print_cksum(ndo, pptr, EXTRACT_BE_U_2(esis_header->cksum), 7,",
          "",
          "[Removed Lines]",
          "1157:         ND_PRINT((ndo, \", v: %u%s\", esis_header->version, esis_header->version == ESIS_VERSION ? \"\" : \"unsupported\" ));",
          "",
          "[Added Lines]",
          "1167:         ND_PRINT((ndo, \", v: %u%s\", version, version == ESIS_VERSION ? \"\" : \"unsupported\" ));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1319:             pptr += 2;",
          "1320:             li -= 2;",
          "1321:             if (opli > li) {",
          "1323:                 return;",
          "1324:             }",
          "1325:             li -= opli;",
          "",
          "[Removed Lines]",
          "1322:                 ND_PRINT((ndo, \", opt (%d) too long\", op));",
          "",
          "[Added Lines]",
          "1332:                 ND_PRINT((ndo, \", opt (%u) too long\", op));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1385:   int i;",
          "1387:   ND_TCHECK(*mcid);",
          "1390:   if (fn_printzp(ndo, mcid->name, 32, ndo->ndo_snapend))",
          "1391:     goto trunc;",
          "1395:   ND_PRINT((ndo,  \", Digest: \"));",
          "",
          "[Removed Lines]",
          "1388:   ND_PRINT((ndo,  \"ID: %d, Name: \", mcid->format_id));",
          "1393:   ND_PRINT((ndo, \"\\n\\t              Lvl: %d\", EXTRACT_BE_U_2(mcid->revision_lvl)));",
          "",
          "[Added Lines]",
          "1398:   ND_PRINT((ndo,  \"ID: %u, Name: \", EXTRACT_U_1(mcid->format_id)));",
          "1403:   ND_PRINT((ndo, \"\\n\\t              Lvl: %u\", EXTRACT_BE_U_2(mcid->revision_lvl)));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1404: static int",
          "1405: isis_print_mt_port_cap_subtlv(netdissect_options *ndo,",
          "1407: {",
          "1409:   const struct isis_subtlv_spb_mcid *subtlv_spb_mcid;",
          "1410:   int i;",
          "",
          "[Removed Lines]",
          "1406:                               const uint8_t *tptr, int len)",
          "1408:   int stlv_type, stlv_len;",
          "",
          "[Added Lines]",
          "1416:                               const uint8_t *tptr, u_int len)",
          "1418:   u_int stlv_type, stlv_len;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1463:         if (stlv_len < ISIS_SUBTLV_SPB_DIGEST_MIN_LEN)",
          "1464:           goto trunc;",
          "1467:                         (EXTRACT_U_1(tptr) >> 5),",
          "1468:                         ((EXTRACT_U_1(tptr) >> 4) & 0x01),",
          "1469:                         ((EXTRACT_U_1(tptr) >> 2) & 0x03),",
          "",
          "[Removed Lines]",
          "1466:         ND_PRINT((ndo, \"\\n\\t        RES: %d V: %d A: %d D: %d\",",
          "",
          "[Added Lines]",
          "1476:         ND_PRINT((ndo, \"\\n\\t        RES: %u V: %u A: %u D: %u\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1497:           tptr = tptr+4;",
          "1500:                      (EXTRACT_BE_U_2(tptr) >> 4) ,",
          "1501:                      (EXTRACT_BE_U_2(tptr) >> 3) & 0x01,",
          "1502:                      (EXTRACT_BE_U_2(tptr) >> 2) & 0x01));",
          "",
          "[Removed Lines]",
          "1499:           ND_PRINT((ndo, \" BVID: %d, U:%01x M:%01x \",",
          "",
          "[Added Lines]",
          "1509:           ND_PRINT((ndo, \" BVID: %u, U:%01x M:%01x \",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1527: static int",
          "1528: isis_print_mt_capability_subtlv(netdissect_options *ndo,",
          "1530: {",
          "1533:   while (len > 2)",
          "1534:   {",
          "",
          "[Removed Lines]",
          "1529:                                 const uint8_t *tptr, int len)",
          "1531:   int stlv_type, stlv_len, tmp;",
          "",
          "[Added Lines]",
          "1539:                                 const uint8_t *tptr, u_int len)",
          "1541:   u_int stlv_type, stlv_len, tmp;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1562:           tptr = tptr+4;",
          "1563:           ND_PRINT((ndo, \", Path Cost: %08x\", EXTRACT_BE_U_4(tptr)));",
          "1564:           tptr = tptr+4;",
          "1566:           tptr = tptr + 2;",
          "1568:                     EXTRACT_BE_U_2(tptr) >> 5));",
          "1570:                     (EXTRACT_BE_U_2(tptr) >> 4) & 0x0001));",
          "1572:                     (EXTRACT_BE_U_4(tptr) & 0x000fffff)));",
          "1573:           tptr = tptr+4;",
          "1574:           ND_PRINT((ndo, \", No of Trees: %x\", EXTRACT_U_1(tptr)));",
          "",
          "[Removed Lines]",
          "1565:           ND_PRINT((ndo, \", Prio: %d\", EXTRACT_BE_U_2(tptr)));",
          "1567:           ND_PRINT((ndo, \"\\n\\t        RES: %d\",",
          "1569:           ND_PRINT((ndo, \", V: %d\",",
          "1571:           ND_PRINT((ndo, \", SPSource-ID: %d\",",
          "",
          "[Added Lines]",
          "1575:           ND_PRINT((ndo, \", Prio: %u\", EXTRACT_BE_U_2(tptr)));",
          "1577:           ND_PRINT((ndo, \"\\n\\t        RES: %u\",",
          "1579:           ND_PRINT((ndo, \", V: %u\",",
          "1581:           ND_PRINT((ndo, \", SPSource-ID: %u\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1584:             if (stlv_len < ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN)",
          "1585:               goto trunc;",
          "1588:                       EXTRACT_U_1(tptr) >> 7,",
          "1589:                       (EXTRACT_U_1(tptr) >> 6) & 0x01,",
          "1590:                       (EXTRACT_U_1(tptr) >> 5) & 0x01,",
          "",
          "[Removed Lines]",
          "1587:             ND_PRINT((ndo, \"\\n\\t         U:%d, M:%d, A:%d, RES:%d\",",
          "",
          "[Added Lines]",
          "1597:             ND_PRINT((ndo, \"\\n\\t         U:%u, M:%u, A:%u, RES:%u\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1597:             tptr = tptr + 4;",
          "1600:                       (EXTRACT_BE_U_3(tptr) >> 12) & 0x000fff,",
          "1601:                       EXTRACT_BE_U_3(tptr) & 0x000fff));",
          "",
          "[Removed Lines]",
          "1599:             ND_PRINT((ndo, \", BVID: %d, SPVID: %d\",",
          "",
          "[Added Lines]",
          "1609:             ND_PRINT((ndo, \", BVID: %u, SPVID: %u\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1617:           ND_PRINT((ndo, \"%04x\", EXTRACT_BE_U_2(tptr)));",
          "1618:           tptr = tptr+2;",
          "1621:                     (EXTRACT_BE_U_2(tptr)) & 0x0fff));",
          "1623:           tptr = tptr+2;",
          "",
          "[Removed Lines]",
          "1620:           ND_PRINT((ndo, \", RES: %d, VID: %d\", EXTRACT_BE_U_2(tptr) >> 12,",
          "",
          "[Added Lines]",
          "1630:           ND_PRINT((ndo, \", RES: %u, VID: %u\", EXTRACT_BE_U_2(tptr) >> 12,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1627:           while (stlv_len >= 4) {",
          "1628:             ND_TCHECK_4(tptr);",
          "1630:                     (EXTRACT_BE_U_4(tptr) >> 31),",
          "1631:                     (EXTRACT_BE_U_4(tptr) >> 30) & 0x01,",
          "1632:                     (EXTRACT_BE_U_4(tptr) >> 24) & 0x03f,",
          "",
          "[Removed Lines]",
          "1629:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "",
          "[Added Lines]",
          "1639:             ND_PRINT((ndo, \"\\n\\t        T: %u, R: %u, RES: %u, ISID: %u\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1657: static char *",
          "1659: {",
          "1661:     static char id[sizeof(\"xxxx.xxxx.xxxx.yy-zz\")];",
          "1662:     char *pos = id;",
          "1665:     sysid_len = SYSTEM_ID_LEN;",
          "1666:     if (sysid_len > id_len)",
          "",
          "[Removed Lines]",
          "1658: isis_print_id(const uint8_t *cp, int id_len)",
          "1660:     int i;",
          "1663:     int sysid_len;",
          "",
          "[Added Lines]",
          "1668: isis_print_id(const uint8_t *cp, u_int id_len)",
          "1670:     u_int i;",
          "1673:     u_int sysid_len;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1687: isis_print_metric_block(netdissect_options *ndo,",
          "1688:                         const struct isis_metric_block *isis_metric_block)",
          "1689: {",
          "1691:            ISIS_LSP_TLV_METRIC_VALUE(isis_metric_block->metric_default),",
          "1692:            ISIS_LSP_TLV_METRIC_IE(isis_metric_block->metric_default) ? \"External\" : \"Internal\"));",
          "1693:     if (!ISIS_LSP_TLV_METRIC_SUPPORTED(isis_metric_block->metric_delay))",
          "1695:                ISIS_LSP_TLV_METRIC_VALUE(isis_metric_block->metric_delay),",
          "1696:                ISIS_LSP_TLV_METRIC_IE(isis_metric_block->metric_delay) ? \"External\" : \"Internal\"));",
          "1697:     if (!ISIS_LSP_TLV_METRIC_SUPPORTED(isis_metric_block->metric_expense))",
          "1699:                ISIS_LSP_TLV_METRIC_VALUE(isis_metric_block->metric_expense),",
          "1700:                ISIS_LSP_TLV_METRIC_IE(isis_metric_block->metric_expense) ? \"External\" : \"Internal\"));",
          "1701:     if (!ISIS_LSP_TLV_METRIC_SUPPORTED(isis_metric_block->metric_error))",
          "1703:                ISIS_LSP_TLV_METRIC_VALUE(isis_metric_block->metric_error),",
          "1704:                ISIS_LSP_TLV_METRIC_IE(isis_metric_block->metric_error) ? \"External\" : \"Internal\"));",
          "",
          "[Removed Lines]",
          "1690:     ND_PRINT((ndo, \", Default Metric: %d, %s\",",
          "1694:         ND_PRINT((ndo, \"\\n\\t\\t  Delay Metric: %d, %s\",",
          "1698:         ND_PRINT((ndo, \"\\n\\t\\t  Expense Metric: %d, %s\",",
          "1702:         ND_PRINT((ndo, \"\\n\\t\\t  Error Metric: %d, %s\",",
          "",
          "[Added Lines]",
          "1700:     ND_PRINT((ndo, \", Default Metric: %u, %s\",",
          "1704:         ND_PRINT((ndo, \"\\n\\t\\t  Delay Metric: %u, %s\",",
          "1708:         ND_PRINT((ndo, \"\\n\\t\\t  Expense Metric: %u, %s\",",
          "1712:         ND_PRINT((ndo, \"\\n\\t\\t  Error Metric: %u, %s\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1709: static int",
          "1710: isis_print_tlv_ip_reach(netdissect_options *ndo,",
          "1712: {",
          "1713:  int prefix_len;",
          "1714:  const struct isis_tlv_ip_reach *tlv_ip_reach;",
          "",
          "[Removed Lines]",
          "1711:                         const uint8_t *cp, const char *ident, int length)",
          "",
          "[Added Lines]",
          "1721:                         const uint8_t *cp, const char *ident, u_int length)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1718:  while (length > 0) {",
          "1719:   if ((size_t)length < sizeof(*tlv_ip_reach)) {",
          "1721:                                length,",
          "1722:                                (unsigned long)sizeof(*tlv_ip_reach)));",
          "1723:    return (0);",
          "",
          "[Removed Lines]",
          "1720:    ND_PRINT((ndo, \"short IPv4 Reachability (%d vs %lu)\",",
          "",
          "[Added Lines]",
          "1730:    ND_PRINT((ndo, \"short IPv4 Reachability (%u vs %lu)\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1726:   if (!ND_TTEST(*tlv_ip_reach))",
          "1727:       return (0);",
          "1731:   if (prefix_len == -1)",
          "1732:    ND_PRINT((ndo, \"%sIPv4 prefix: %s mask %s\",",
          "",
          "[Removed Lines]",
          "1729:   prefix_len = mask2plen(EXTRACT_BE_U_4(tlv_ip_reach->mask));",
          "",
          "[Added Lines]",
          "1739:   prefix_len = mask2plen(EXTRACT_IPV4_TO_HOST_ORDER(tlv_ip_reach->mask));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1776: static int",
          "1777: isis_print_ip_reach_subtlv(netdissect_options *ndo,",
          "1779:                            const char *ident)",
          "1780: {",
          "",
          "[Removed Lines]",
          "1778:                            const uint8_t *tptr, int subt, int subl,",
          "",
          "[Added Lines]",
          "1788:                            const uint8_t *tptr, u_int subt, u_int subl,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1935:               ND_PRINT((ndo, \"%s  Max LSP Bandwidth:\", ident));",
          "1936:               for (priority_level = 0; priority_level < 8; priority_level++) {",
          "1937:                 bw.i = EXTRACT_BE_U_4(tptr);",
          "1939:                        ident,",
          "1940:                        priority_level,",
          "1941:                        bw.f * 8 / 1000000));",
          "",
          "[Removed Lines]",
          "1938:                 ND_PRINT((ndo, \"%s    priority level %d: %.3f Mbps\",",
          "",
          "[Added Lines]",
          "1948:                 ND_PRINT((ndo, \"%s    priority level %u: %.3f Mbps\",",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1990: static int",
          "1991: isis_print_ext_is_reach(netdissect_options *ndo,",
          "1993: {",
          "1994:     char ident_buffer[20];",
          "1998:     if (!ND_TTEST_LEN(tptr, NODE_ID_LEN))",
          "",
          "[Removed Lines]",
          "1992:                         const uint8_t *tptr, const char *ident, int tlv_type)",
          "1995:     int subtlv_type,subtlv_len,subtlv_sum_len;",
          "",
          "[Added Lines]",
          "2002:                         const uint8_t *tptr, const char *ident, u_int tlv_type)",
          "2005:     u_int subtlv_type,subtlv_len,subtlv_sum_len;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2006:      return(0);",
          "2008:  tptr+=3;",
          "2009:     }",
          "",
          "[Removed Lines]",
          "2007:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_U_3(tptr)));",
          "",
          "[Added Lines]",
          "2017:  ND_PRINT((ndo, \", Metric: %u\", EXTRACT_BE_U_3(tptr)));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2207:     const struct isis_tlv_is_reach *tlv_is_reach;",
          "2208:     const struct isis_tlv_es_reach *tlv_es_reach;",
          "2211:     uint8_t ext_is_len, ext_ip_len, mt_len;",
          "2212:     uint8_t isis_subtlv_idrp;",
          "2213:     const uint8_t *optr, *pptr, *tptr;",
          "",
          "[Removed Lines]",
          "2210:     uint8_t pdu_type, max_area, id_length, tlv_type, tlv_len, tmp, alen, lan_alen, prefix_len;",
          "",
          "[Added Lines]",
          "2220:     uint8_t version, pdu_version, fixed_len;",
          "2221:     uint8_t pdu_type, pdu_max_area, max_area, pdu_id_length, id_length, tlv_type, tlv_len, tmp, alen, lan_alen, prefix_len;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2242:  return (0);",
          "2243:     }",
          "2248:  return (0);",
          "2249:     }",
          "2253:  return (0);",
          "2254:     }",
          "2258:  return (0);",
          "2259:     }",
          "2263:  return (0);",
          "2264:     }",
          "2268:     case 0:",
          "2270:  break;",
          "",
          "[Removed Lines]",
          "2240:     if (isis_header->version != ISIS_VERSION) {",
          "2241:  ND_PRINT((ndo, \"version %d packet not supported\", isis_header->version));",
          "2245:     if ((isis_header->id_length != SYSTEM_ID_LEN) && (isis_header->id_length != 0)) {",
          "2246:  ND_PRINT((ndo, \"system ID length of %d is not supported\",",
          "2247:         isis_header->id_length));",
          "2251:     if (isis_header->pdu_version != ISIS_VERSION) {",
          "2252:  ND_PRINT((ndo, \"version %d packet not supported\", isis_header->pdu_version));",
          "2256:     if (length < isis_header->fixed_len) {",
          "2257:  ND_PRINT((ndo, \"fixed header length %u > packet length %u\", isis_header->fixed_len, length));",
          "2261:     if (isis_header->fixed_len < ISIS_COMMON_HEADER_SIZE) {",
          "2262:  ND_PRINT((ndo, \"fixed header length %u < minimum header size %u\", isis_header->fixed_len, (u_int)ISIS_COMMON_HEADER_SIZE));",
          "2266:     max_area = isis_header->max_area;",
          "2267:     switch(max_area) {",
          "",
          "[Added Lines]",
          "2251:     version = EXTRACT_U_1(isis_header->version);",
          "2252:     if (version != ISIS_VERSION) {",
          "2253:  ND_PRINT((ndo, \"version %u packet not supported\", version));",
          "2257:     pdu_id_length = EXTRACT_U_1(isis_header->id_length);",
          "2258:     if ((pdu_id_length != SYSTEM_ID_LEN) && (pdu_id_length != 0)) {",
          "2259:  ND_PRINT((ndo, \"system ID length of %u is not supported\",",
          "2260:         pdu_id_length));",
          "2264:     pdu_version = EXTRACT_U_1(isis_header->pdu_version);",
          "2265:     if (pdu_version != ISIS_VERSION) {",
          "2266:  ND_PRINT((ndo, \"version %u packet not supported\", pdu_version));",
          "2270:     fixed_len = EXTRACT_U_1(isis_header->fixed_len);",
          "2271:     if (length < fixed_len) {",
          "2272:  ND_PRINT((ndo, \"fixed header length %u > packet length %u\", fixed_len, length));",
          "2276:     if (fixed_len < ISIS_COMMON_HEADER_SIZE) {",
          "2277:  ND_PRINT((ndo, \"fixed header length %u < minimum header size %u\", fixed_len, (u_int)ISIS_COMMON_HEADER_SIZE));",
          "2281:     pdu_max_area = EXTRACT_U_1(isis_header->max_area);",
          "2282:     switch(pdu_max_area) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2272:  ND_PRINT((ndo, \"bad packet -- 255 areas\"));",
          "2273:  return (0);",
          "2274:     default:",
          "2275:  break;",
          "2276:     }",
          "2280:     case 0:",
          "2282:  break;",
          "",
          "[Removed Lines]",
          "2278:     id_length = isis_header->id_length;",
          "2279:     switch(id_length) {",
          "",
          "[Added Lines]",
          "2290:         max_area = pdu_max_area;",
          "2294:     switch(pdu_id_length) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2288:     case 6:",
          "2289:     case 7:",
          "2290:     case 8:",
          "2291:         break;",
          "2292:     case 255:",
          "2294:  break;",
          "2295:     default:",
          "2296:         break;",
          "2297:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2306:         id_length = pdu_id_length;",
          "2312:         id_length = pdu_id_length;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2302:  return (0);",
          "2303:     }",
          "2308:     if (ndo->ndo_vflag == 0) {",
          "",
          "[Removed Lines]",
          "2305:     pdu_type=isis_header->pdu_type;",
          "",
          "[Added Lines]",
          "2322:     pdu_type = EXTRACT_U_1(isis_header->pdu_type);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2317:                tok2str(isis_pdu_values,",
          "2318:                        \"unknown, type %u\",",
          "2319:                        pdu_type),",
          "2323:                id_length,",
          "2325:                max_area,",
          "2328:         if (ndo->ndo_vflag > 1) {",
          "",
          "[Removed Lines]",
          "2320:                isis_header->fixed_len,",
          "2321:                isis_header->version,",
          "2322:                isis_header->pdu_version,",
          "2324:                isis_header->id_length,",
          "2326:                isis_header->max_area));",
          "",
          "[Added Lines]",
          "2337:                fixed_len,",
          "2338:                version,",
          "2339:                pdu_version,",
          "2341:                pdu_id_length,",
          "2343:                pdu_max_area));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2336:     case ISIS_PDU_L1_LAN_IIH:",
          "2337:     case ISIS_PDU_L2_LAN_IIH:",
          "2339:             ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\",",
          "2341:             return (0);",
          "2342:         }",
          "2343:         ND_TCHECK(*header_iih_lan);",
          "",
          "[Removed Lines]",
          "2338:         if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)) {",
          "2340:                      isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)));",
          "",
          "[Added Lines]",
          "2355:         if (fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)) {",
          "2357:                      fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2348:                       isis_print_id(header_iih_lan->source_id, SYSTEM_ID_LEN)));",
          "2349:             ND_PRINT((ndo, \", lan-id %s, prio %u\",",
          "2350:                       isis_print_id(header_iih_lan->lan_id,NODE_ID_LEN),",
          "2352:             ND_PRINT((ndo, \", length %u\", length));",
          "2353:             return (1);",
          "2354:         }",
          "",
          "[Removed Lines]",
          "2351:                       header_iih_lan->priority));",
          "",
          "[Added Lines]",
          "2368:                       EXTRACT_U_1(header_iih_lan->priority)));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2363:                   EXTRACT_BE_U_2(header_iih_lan->holding_time),",
          "2364:                   tok2str(isis_iih_circuit_type_values,",
          "2365:                           \"unknown circuit type 0x%02x\",",
          "2368:         ND_PRINT((ndo, \"\\n\\t  lan-id:    %s, Priority: %u, PDU length: %u\",",
          "2369:                   isis_print_id(header_iih_lan->lan_id, NODE_ID_LEN),",
          "2371:                   pdu_len));",
          "2373:         if (ndo->ndo_vflag > 1) {",
          "",
          "[Removed Lines]",
          "2366:                           header_iih_lan->circuit_type)));",
          "2370:                   (header_iih_lan->priority) & ISIS_LAN_PRIORITY_MASK,",
          "",
          "[Added Lines]",
          "2383:                           EXTRACT_U_1(header_iih_lan->circuit_type))));",
          "2387:                   EXTRACT_U_1(header_iih_lan->priority) & ISIS_LAN_PRIORITY_MASK,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2380:         break;",
          "2382:     case ISIS_PDU_PTP_IIH:",
          "2384:             ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\",",
          "2386:             return (0);",
          "2387:         }",
          "2388:         ND_TCHECK(*header_iih_ptp);",
          "",
          "[Removed Lines]",
          "2383:         if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)) {",
          "2385:                       isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)));",
          "",
          "[Added Lines]",
          "2400:         if (fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)) {",
          "2402:                       fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)));",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2404:                   EXTRACT_BE_U_2(header_iih_ptp->holding_time),",
          "2405:                   tok2str(isis_iih_circuit_type_values,",
          "2406:                           \"unknown circuit type 0x%02x\",",
          "2409:         ND_PRINT((ndo, \"\\n\\t  circuit-id: 0x%02x, PDU length: %u\",",
          "2411:                   pdu_len));",
          "2413:         if (ndo->ndo_vflag > 1) {",
          "",
          "[Removed Lines]",
          "2407:                           header_iih_ptp->circuit_type)));",
          "2410:                   header_iih_ptp->circuit_id,",
          "",
          "[Added Lines]",
          "2424:                           EXTRACT_U_1(header_iih_ptp->circuit_type))));",
          "2427:                   EXTRACT_U_1(header_iih_ptp->circuit_id),",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2422:     case ISIS_PDU_L1_LSP:",
          "2423:     case ISIS_PDU_L2_LSP:",
          "2425:             ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\",",
          "2427:             return (0);",
          "2428:         }",
          "2429:         ND_TCHECK(*header_lsp);",
          "",
          "[Removed Lines]",
          "2424:         if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE)) {",
          "2426:                    isis_header->fixed_len, (unsigned long)ISIS_LSP_HEADER_SIZE));",
          "",
          "[Added Lines]",
          "2441:         if (fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE)) {",
          "2443:                    fixed_len, (unsigned long)ISIS_LSP_HEADER_SIZE));",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2480:     case ISIS_PDU_L1_CSNP:",
          "2481:     case ISIS_PDU_L2_CSNP:",
          "2483:             ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\",",
          "2485:             return (0);",
          "2486:         }",
          "2487:         ND_TCHECK(*header_csnp);",
          "",
          "[Removed Lines]",
          "2482:         if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)) {",
          "2484:                       isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)));",
          "",
          "[Added Lines]",
          "2499:         if (fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)) {",
          "2501:                       fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)));",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2518:     case ISIS_PDU_L1_PSNP:",
          "2519:     case ISIS_PDU_L2_PSNP:",
          "2521:             ND_PRINT((ndo, \"- bogus fixed header length %u should be %lu\",",
          "2523:             return (0);",
          "2524:         }",
          "2525:         ND_TCHECK(*header_psnp);",
          "",
          "[Removed Lines]",
          "2520:         if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)) {",
          "2522:                    isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)));",
          "",
          "[Added Lines]",
          "2537:         if (fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)) {",
          "2539:                    fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2867:     {",
          "2868:       ND_TCHECK_2(tptr);",
          "2871:               (EXTRACT_BE_U_2(tptr) >> 12),",
          "2872:               (EXTRACT_BE_U_2(tptr) & 0x0fff)));",
          "",
          "[Removed Lines]",
          "2870:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "",
          "[Added Lines]",
          "2887:       ND_PRINT((ndo, \"\\n\\t       RES: %u, MTID(s): %u\",",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2885:       ND_TCHECK_2(tptr);",
          "2888:                 (EXTRACT_BE_U_2(tptr) >> 15) & 0x01,",
          "2889:                 (EXTRACT_BE_U_2(tptr) >> 12) & 0x07,",
          "2890:                 EXTRACT_BE_U_2(tptr) & 0x0fff));",
          "",
          "[Removed Lines]",
          "2887:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "",
          "[Added Lines]",
          "2904:       ND_PRINT((ndo, \"\\n\\t      O: %u, RES: %u, MTID(s): %u\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}