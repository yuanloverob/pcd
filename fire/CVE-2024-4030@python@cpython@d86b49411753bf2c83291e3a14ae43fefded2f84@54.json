{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "2b46253c5fdf57fd35eb471ad0035e61afe924a6",
      "candidate_info": {
        "commit_hash": "2b46253c5fdf57fd35eb471ad0035e61afe924a6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/2b46253c5fdf57fd35eb471ad0035e61afe924a6",
        "files": [
          "Lib/test/test_dataclasses/__init__.py"
        ],
        "message": "[3.13] gh-119581: Add a test of InitVar with name shadowing (GH-119582) (#119672)\n\ngh-119581: Add a test of InitVar with name shadowing (GH-119582)\n(cherry picked from commit 6ec371223dff4da7719039e271f35a16a5b861c6)\n\nCo-authored-by: Steven Troxler <steven.troxler@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_dataclasses/__init__.py||Lib/test/test_dataclasses/__init__.py": [
          "File: Lib/test/test_dataclasses/__init__.py -> Lib/test/test_dataclasses/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:         c = C(10, 11, 50, 51)",
          "1318:         self.assertEqual(vars(c), {'x': 21, 'y': 101})",
          "1320:     def test_default_factory(self):",
          "1321:         # Test a factory that returns a new list.",
          "1322:         @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320:     def test_init_var_name_shadowing(self):",
          "1321:         # Because dataclasses rely exclusively on `__annotations__` for",
          "1322:         # handling InitVar and `__annotations__` preserves shadowed definitions,",
          "1323:         # you can actually shadow an InitVar with a method or property.",
          "1324:         #",
          "1325:         # This only works when there is no default value; `dataclasses` uses the",
          "1326:         # actual name (which will be bound to the shadowing method) for default",
          "1327:         # values.",
          "1328:         @dataclass",
          "1329:         class C:",
          "1330:             shadowed: InitVar[int]",
          "1331:             _shadowed: int = field(init=False)",
          "1333:             def __post_init__(self, shadowed):",
          "1334:                 self._shadowed = shadowed * 2",
          "1336:             @property",
          "1337:             def shadowed(self):",
          "1338:                 return self._shadowed * 3",
          "1340:         c = C(5)",
          "1341:         self.assertEqual(c.shadowed, 30)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdcc738fec377a9936d21899b08129374fe3cc7b",
      "candidate_info": {
        "commit_hash": "bdcc738fec377a9936d21899b08129374fe3cc7b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bdcc738fec377a9936d21899b08129374fe3cc7b",
        "files": [
          "Lib/idlelib/run.py"
        ],
        "message": "[3.13] gh-121008: Fix idlelib.run tests (GH-121046) (#121049)\n\ngh-121008: Fix idlelib.run tests (GH-121046)\n\nWhen testing IDLE, don't create a Tk to avoid side effects such as\ninstalling a PyOS_InputHook hook.\n(cherry picked from commit 44eafd66882589d4f4eb569d70c49724da3e9291)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/idlelib/run.py||Lib/idlelib/run.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/idlelib/run.py||Lib/idlelib/run.py": [
          "File: Lib/idlelib/run.py -> Lib/idlelib/run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:             _warnings_showwarning = None",
          "93: capture_warnings(True)",
          "102: # Thread shared globals: Establish a queue between a subthread (which handles",
          "103: # the socket) and the main thread (which runs user code), plus global",
          "",
          "[Removed Lines]",
          "94: tcl = tkinter.Tcl()",
          "96: def handle_tk_events(tcl=tcl):",
          "97:     \"\"\"Process any tk events that are ready to be dispatched if tkinter",
          "98:     has been imported, a tcl interpreter has been created and tk has been",
          "99:     loaded.\"\"\"",
          "100:     tcl.eval(\"update\")",
          "",
          "[Added Lines]",
          "95: if idlelib.testing:",
          "96:     # gh-121008: When testing IDLE, don't create a Tk object to avoid side",
          "97:     # effects such as installing a PyOS_InputHook hook.",
          "98:     def handle_tk_events():",
          "99:         pass",
          "100: else:",
          "101:     tcl = tkinter.Tcl()",
          "103:     def handle_tk_events(tcl=tcl):",
          "104:         \"\"\"Process any tk events that are ready to be dispatched if tkinter",
          "105:         has been imported, a tcl interpreter has been created and tk has been",
          "106:         loaded.\"\"\"",
          "107:         tcl.eval(\"update\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee7d2681f6e2ece539bc70d21893353da84401fd",
      "candidate_info": {
        "commit_hash": "ee7d2681f6e2ece539bc70d21893353da84401fd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ee7d2681f6e2ece539bc70d21893353da84401fd",
        "files": [
          "Include/internal/pycore_mimalloc.h",
          "Python/gc_free_threading.c",
          "Python/pystate.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix race involving GC and heap initialization (GH-119923) (#120038)\n\nThe `_PyThreadState_Bind()` function is called before the first\n`PyEval_AcquireThread()` so it's not synchronized with the stop the\nworld GC. We had a race where `gc_visit_heaps()` might visit a thread's\nheap while it's being initialized.\n\nUse a simple atomic int to avoid visiting heaps for threads that are not\nyet fully initialized (i.e., before `tstate_mimalloc_bind()` is called).\n\nThe race was reproducible by running:\n`python Lib/test/test_importlib/partial/pool_in_threads.py`.\n(cherry picked from commit e69d068ad0bd6a25434ea476a647b635da4d82bb)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h",
          "Python/gc_free_threading.c||Python/gc_free_threading.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_mimalloc.h||Include/internal/pycore_mimalloc.h": [
          "File: Include/internal/pycore_mimalloc.h -> Include/internal/pycore_mimalloc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     mi_heap_t *current_object_heap;",
          "53:     mi_heap_t heaps[_Py_MIMALLOC_HEAP_COUNT];",
          "54:     mi_tld_t tld;",
          "55:     struct llist_node page_list;",
          "56: };",
          "57: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     int initialized;",
          "",
          "---------------"
        ],
        "Python/gc_free_threading.c||Python/gc_free_threading.c": [
          "File: Python/gc_free_threading.c -> Python/gc_free_threading.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     for (PyThreadState *p = interp->threads.head; p != NULL; p = p->next) {",
          "254:         struct _mimalloc_thread_state *m = &((_PyThreadStateImpl *)p)->mimalloc;",
          "256:         arg->offset = offset_base;",
          "257:         if (!mi_heap_visit_blocks(&m->heaps[_Py_MIMALLOC_HEAP_GC], true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:         if (!_Py_atomic_load_int(&m->initialized)) {",
          "257:             continue;",
          "258:         }",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3076:     mts->current_object_heap = &mts->heaps[_Py_MIMALLOC_HEAP_OBJECT];",
          "3077: #endif",
          "3078: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3078:     _Py_atomic_store_int(&mts->initialized, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a860b1d60b8e3d09c58daf6996a38606f407a009",
      "candidate_info": {
        "commit_hash": "a860b1d60b8e3d09c58daf6996a38606f407a009",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a860b1d60b8e3d09c58daf6996a38606f407a009",
        "files": [
          "Misc/NEWS.d/next/Library/2024-06-21-14-32-56.gh-issue-120811.eBmVTV.rst",
          "Python/context.c"
        ],
        "message": "[3.13] gh-120811: Fix reference leak upon `_PyContext_Exit` failure (GH-120812) (#120843)\n\ngh-120811: Fix reference leak upon `_PyContext_Exit` failure (GH-120812)\n(cherry picked from commit aed31beca9a54b85a1392631a48da80602210f18)\n\nCo-authored-by: Peter <zintensitydev@gmail.com>\nCo-authored-by: Kumar Aditya <kumaraditya@python.org>",
        "before_after_code_files": [
          "Python/context.c||Python/context.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/context.c||Python/context.c": [
          "File: Python/context.c -> Python/context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:         ts, args[0], args + 1, nargs - 1, kwnames);",
          "663:     if (_PyContext_Exit(ts, (PyObject *)self)) {",
          "664:         return NULL;",
          "665:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:         Py_XDECREF(call_result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
      "candidate_info": {
        "commit_hash": "3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3067c62a34eb0a99a01af3e9edaaf082fb7fa0a2",
        "files": [
          "Include/internal/pycore_object.h",
          "Include/internal/pycore_pyatomic_ft_wrappers.h",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Make PyType_HasFeature atomic (GH-120210) (#120443)\n\ngh-117657: Make PyType_HasFeature atomic (GH-120210)\n\nMake PyType_HasFeature atomic\n(cherry picked from commit eebae2c460dabdc70dc0d9b6e189368eb1abb716)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Include/internal/pycore_object.h||Include/internal/pycore_object.h",
          "Include/internal/pycore_pyatomic_ft_wrappers.h||Include/internal/pycore_pyatomic_ft_wrappers.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_object.h||Include/internal/pycore_object.h": [
          "File: Include/internal/pycore_object.h -> Include/internal/pycore_object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: static inline int",
          "264: _PyType_HasFeature(PyTypeObject *type, unsigned long feature) {",
          "266: }",
          "268: extern void _PyType_InitCache(PyInterpreterState *interp);",
          "",
          "[Removed Lines]",
          "265:     return ((type->tp_flags & feature) != 0);",
          "",
          "[Added Lines]",
          "265:     return ((FT_ATOMIC_LOAD_ULONG_RELAXED(type->tp_flags) & feature) != 0);",
          "",
          "---------------"
        ],
        "Include/internal/pycore_pyatomic_ft_wrappers.h||Include/internal/pycore_pyatomic_ft_wrappers.h": [
          "File: Include/internal/pycore_pyatomic_ft_wrappers.h -> Include/internal/pycore_pyatomic_ft_wrappers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     _Py_atomic_load_uint16_relaxed(&value)",
          "46: #define FT_ATOMIC_LOAD_UINT32_RELAXED(value) \\",
          "47:     _Py_atomic_load_uint32_relaxed(&value)",
          "48: #define FT_ATOMIC_STORE_PTR_RELAXED(value, new_value) \\",
          "49:     _Py_atomic_store_ptr_relaxed(&value, new_value)",
          "50: #define FT_ATOMIC_STORE_PTR_RELEASE(value, new_value) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #define FT_ATOMIC_LOAD_ULONG_RELAXED(value) \\",
          "49:     _Py_atomic_load_ulong_relaxed(&value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: #define FT_ATOMIC_LOAD_UINT8_RELAXED(value) value",
          "76: #define FT_ATOMIC_LOAD_UINT16_RELAXED(value) value",
          "77: #define FT_ATOMIC_LOAD_UINT32_RELAXED(value) value",
          "78: #define FT_ATOMIC_STORE_PTR_RELAXED(value, new_value) value = new_value",
          "79: #define FT_ATOMIC_STORE_PTR_RELEASE(value, new_value) value = new_value",
          "80: #define FT_ATOMIC_STORE_UINTPTR_RELEASE(value, new_value) value = new_value",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #define FT_ATOMIC_LOAD_ULONG_RELAXED(value) value",
          "",
          "---------------"
        ]
      }
    }
  ]
}