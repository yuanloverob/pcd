{
  "cve_id": "CVE-2020-24240",
  "cve_desc": "GNU Bison before 3.7.1 has a use-after-free in _obstack_free in lib/obstack.c (called from gram_lex) when a '\\0' byte is encountered. NOTE: there is a risk only if Bison is used with untrusted input, and the observed bug happens to cause unsafe behavior with a specific compiler/architecture. The bug report was intended to show that a crash may occur in Bison itself, not that a crash may occur in code that is generated by Bison.",
  "repo": "akimd/bison",
  "patch_hash": "be95a4fe2951374676efc9454ffee8638faaf68d",
  "patch_info": {
    "commit_hash": "be95a4fe2951374676efc9454ffee8638faaf68d",
    "repo": "akimd/bison",
    "commit_url": "https://github.com/akimd/bison/commit/be95a4fe2951374676efc9454ffee8638faaf68d",
    "files": [
      "THANKS",
      "src/flex-scanner.h",
      "src/scan-gram.l",
      "tests/input.at"
    ],
    "message": "scanner: don't crash on strings containing a NUL byte\n\nWe crash if the input contains a string containing a NUL byte.\nReported by Suhwan Song.\nhttps://lists.gnu.org/r/bug-bison/2020-07/msg00051.html\n\n* src/flex-scanner.h (STRING_FREE): Avoid accidental use of\nlast_string.\n* src/scan-gram.l: Don't call STRING_FREE without calling\nSTRING_FINISH first.\n* tests/input.at (Invalid inputs): Check that case.",
    "before_after_code_files": [
      "src/flex-scanner.h||src/flex-scanner.h",
      "src/scan-gram.l||src/scan-gram.l",
      "tests/input.at||tests/input.at"
    ]
  },
  "patch_diff": {
    "src/flex-scanner.h||src/flex-scanner.h": [
      "File: src/flex-scanner.h -> src/flex-scanner.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "112: # define STRING_1GROW(Char)                     \\",
      "113:   obstack_1grow (&obstack_for_string, Char)",
      "116:   obstack_free (&obstack_for_string, last_string)",
      "118: #endif",
      "",
      "[Removed Lines]",
      "115: # define STRING_FREE()                                  \\",
      "",
      "[Added Lines]",
      "115: # ifdef NDEBUG",
      "116: #  define STRING_FREE()                                 \\",
      "118: # else",
      "119: #  define STRING_FREE()                                  \\",
      "120:   do {                                                   \\",
      "121:     obstack_free (&obstack_for_string, last_string);     \\",
      "122:     last_string = NULL;                                  \\",
      "123:   } while (0)",
      "124: #endif",
      "",
      "---------------"
    ],
    "src/scan-gram.l||src/scan-gram.l": [
      "File: src/scan-gram.l -> src/scan-gram.l",
      "--- Hunk 1 ---",
      "[Context before]",
      "403: {",
      "404:   \\0         {",
      "405:     complain (loc, complaint, _(\"invalid null character\"));",
      "406:     STRING_FREE ();",
      "407:     return GRAM_error;",
      "408:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "406:     STRING_FINISH ();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "599:     STRING_FINISH ();",
      "600:     BEGIN INITIAL;",
      "601:     loc->start = token_start;",
      "604:     if (last_string[0] == '\\0')",
      "605:       {",
      "",
      "[Removed Lines]",
      "602:     val->CHAR = last_string[0];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "615:       }",
      "616:     else",
      "617:       {",
      "618:         STRING_FREE ();",
      "619:         return CHAR;",
      "620:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "618:         val->CHAR = last_string[0];",
      "",
      "---------------"
    ],
    "tests/input.at||tests/input.at": [
      "File: tests/input.at -> tests/input.at",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: # Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.",
      "",
      "[Removed Lines]",
      "1: # Checking the Bison scanner.                    -*- Autotest -*-",
      "",
      "[Added Lines]",
      "1: # Checking the Bison reader.                    -*- Autotest -*-",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78: ## Invalid inputs.  ##",
      "79: ## ---------------- ##",
      "81: AT_SETUP([Invalid inputs])",
      "83: AT_DATA([input.y],",
      "84: [[\\000\\001\\002\\377?",
      "85: %%",
      "86: ?",
      "87: default: 'a' }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: # The truly bad guys no human would write, but easily uncovered by",
      "82: # fuzzers.",
      "87: \"\\000\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92: ]])",
      "93: AT_PERL_REQUIRE([[-pi -e 's/\\\\(\\d{3})/chr(oct($1))/ge' input.y]])",
      "96: [[input.y:1.1-2: error: invalid characters: '\\0\\001\\002\\377?'",
      "105: ]])",
      "107: AT_CLEANUP",
      "",
      "[Removed Lines]",
      "95: AT_BISON_CHECK([input.y], [1], [],",
      "97: input.y:3.1: error: invalid character: '?'",
      "98: input.y:4.14: error: invalid character: '}'",
      "99: input.y:5.1: error: invalid character: '%'",
      "100: input.y:5.2: error: invalid character: '&'",
      "101: input.y:6.1-17: error: invalid directive: '%a-does-not-exist'",
      "102: input.y:7.1: error: invalid character: '%'",
      "103: input.y:7.2: error: invalid character: '-'",
      "104: input.y:8.1-9.0: error: missing '%}' at end of file",
      "",
      "[Added Lines]",
      "98: AT_BISON_CHECK([-fcaret input.y], [1], [], [stderr])",
      "100: # Autotest's diffing, when there are NUL bytes, just reports \"binary",
      "101: # files differ\".  So don't leave NUL bytes.",
      "102: AT_PERL_CHECK([[-p -e 's{([\\0\\377])}{sprintf \"\\\\x%02x\", ord($1)}ge' stderr]], [],",
      "104:     1 | \\x00\u0001\u0002\\xff?",
      "105:       | ^~",
      "106: input.y:2.2: error: invalid null character",
      "107:     2 | \"\\x00\"",
      "108:       |  ^",
      "109: input.y:4.1: error: invalid character: '?'",
      "110:     4 | ?",
      "111:       | ^",
      "112: input.y:5.14: error: invalid character: '}'",
      "113:     5 | default: 'a' }",
      "114:       |              ^",
      "115: input.y:6.1: error: invalid character: '%'",
      "116:     6 | %&",
      "117:       | ^",
      "118: input.y:6.2: error: invalid character: '&'",
      "119:     6 | %&",
      "120:       |  ^",
      "121: input.y:7.1-17: error: invalid directive: '%a-does-not-exist'",
      "122:     7 | %a-does-not-exist",
      "123:       | ^~~~~~~~~~~~~~~~~",
      "124: input.y:8.1: error: invalid character: '%'",
      "125:     8 | %-",
      "126:       | ^",
      "127: input.y:8.2: error: invalid character: '-'",
      "128:     8 | %-",
      "129:       |  ^",
      "130: input.y:9.1-10.0: error: missing '%}' at end of file",
      "131:     9 | %{",
      "132:       | ^~",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f8a8742155b7810c63dc897a9798f48aa512d10",
      "candidate_info": {
        "commit_hash": "2f8a8742155b7810c63dc897a9798f48aa512d10",
        "repo": "akimd/bison",
        "commit_url": "https://github.com/akimd/bison/commit/2f8a8742155b7810c63dc897a9798f48aa512d10",
        "files": [
          "NEWS",
          "TODO",
          "bootstrap.conf",
          "lib/.gitignore",
          "m4/.gitignore",
          "src/flex-scanner.h"
        ],
        "message": "portability: we use termios.h and sys/ioctl.h\n\nReported by Maarten De Braekeleer.\nhttps://lists.gnu.org/r/bison-patches/2020-07/msg00079.html\n\n* bootstrap.conf (gnulib_modules): Add termios and sys_ioctl.",
        "before_after_code_files": [
          "bootstrap.conf||bootstrap.conf",
          "src/flex-scanner.h||src/flex-scanner.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/flex-scanner.h||src/flex-scanner.h"
          ],
          "candidate": [
            "src/flex-scanner.h||src/flex-scanner.h"
          ]
        }
      },
      "candidate_diff": {
        "bootstrap.conf||bootstrap.conf": [
          "File: bootstrap.conf -> bootstrap.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   relocatable-prog relocatable-script",
          "46:   rename",
          "47:   spawn-pipe stdbool stpcpy stpncpy strdup-posix strerror strverscmp",
          "48:   timevar",
          "49:   unicodeio unistd unistd-safer unlink unlocked-io",
          "50:   update-copyright unsetenv verify",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   sys_ioctl",
          "49:   termios",
          "",
          "---------------"
        ],
        "src/flex-scanner.h||src/flex-scanner.h": [
          "File: src/flex-scanner.h -> src/flex-scanner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     obstack_free (&obstack_for_string, last_string);     \\",
          "122:     last_string = NULL;                                  \\",
          "123:   } while (0)",
          "126: #endif",
          "",
          "[Removed Lines]",
          "124: #endif",
          "",
          "[Added Lines]",
          "124: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e73f086b0de0f9049364ca8ba8d9109a8326e652",
      "candidate_info": {
        "commit_hash": "e73f086b0de0f9049364ca8ba8d9109a8326e652",
        "repo": "akimd/bison",
        "commit_url": "https://github.com/akimd/bison/commit/e73f086b0de0f9049364ca8ba8d9109a8326e652",
        "files": [
          "src/parse-gram.y",
          "src/scan-gram.l"
        ],
        "message": "portability: use CHAR_LITERAL instead of CHAR because MSVC defines CHAR\n\n* src/parse-gram.y, src/scan-gram.l: here.",
        "before_after_code_files": [
          "src/parse-gram.y||src/parse-gram.y",
          "src/scan-gram.l||src/scan-gram.l"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/scan-gram.l||src/scan-gram.l"
          ],
          "candidate": [
            "src/scan-gram.l||src/scan-gram.l"
          ]
        }
      },
      "candidate_diff": {
        "src/parse-gram.y||src/parse-gram.y": [
          "File: src/parse-gram.y -> src/parse-gram.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   BRACED_CODE       \"{...}\"",
          "215:   BRACED_PREDICATE  \"%?{...}\"",
          "216:   BRACKETED_ID      _(\"[identifier]\")",
          "218:   COLON             \":\"",
          "219:   EPILOGUE          _(\"epilogue\")",
          "220:   EQUAL             \"=\"",
          "",
          "[Removed Lines]",
          "217:   CHAR              _(\"character literal\")",
          "",
          "[Added Lines]",
          "217:   CHAR_LITERAL      _(\"character literal\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232: %code pre-printer  {tron (yyo);}",
          "233: %code post-printer {troff (yyo);}",
          "236: %printer { fputs (char_name ($$), yyo); } <unsigned char>",
          "238: %type <char*> \"{...}\" \"%?{...}\" \"%{...%}\" EPILOGUE STRING TSTRING",
          "",
          "[Removed Lines]",
          "235: %type <unsigned char> CHAR",
          "",
          "[Added Lines]",
          "235: %type <unsigned char> CHAR_LITERAL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "765: id:",
          "766:   ID",
          "767:     { $$ = symbol_from_uniqstr ($1, @1); }",
          "769:     {",
          "770:       const char *var = \"api.token.raw\";",
          "771:       if (current_class == nterm_sym)",
          "",
          "[Removed Lines]",
          "768: | CHAR",
          "",
          "[Added Lines]",
          "768: | CHAR_LITERAL",
          "",
          "---------------"
        ],
        "src/scan-gram.l||src/scan-gram.l": [
          "File: src/scan-gram.l -> src/scan-gram.l",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:       }",
          "616:     else",
          "617:       {",
          "619:         STRING_FREE ();",
          "621:       }",
          "622:   }",
          "623:   {eol}     unexpected_newline (token_start, \"'\");",
          "",
          "[Removed Lines]",
          "618:         val->CHAR = last_string[0];",
          "620:         return CHAR;",
          "",
          "[Added Lines]",
          "618:         val->CHAR_LITERAL = last_string[0];",
          "620:         return CHAR_LITERAL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}