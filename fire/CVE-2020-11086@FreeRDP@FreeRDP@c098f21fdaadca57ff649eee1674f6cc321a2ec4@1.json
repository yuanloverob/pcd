{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da03f7e04e384085c76aefdd77996efb9ceeb68b",
      "candidate_info": {
        "commit_hash": "da03f7e04e384085c76aefdd77996efb9ceeb68b",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/da03f7e04e384085c76aefdd77996efb9ceeb68b",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed #6122: Allow SSL server and client purpose",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:  if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "842:   goto end;",
          "845:  X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "847:  if (X509_verify_cert(csc) == 1)",
          "",
          "[Removed Lines]",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_SSL_SERVER);",
          "",
          "[Added Lines]",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_ANY);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eee9dead2d28ca99b0beeb8a56218fc05733974f",
      "candidate_info": {
        "commit_hash": "eee9dead2d28ca99b0beeb8a56218fc05733974f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/eee9dead2d28ca99b0beeb8a56218fc05733974f",
        "files": [
          "channels/urbdrc/client/urbdrc_main.c"
        ],
        "message": "Fixed compiler warnings for usb channel",
        "before_after_code_files": [
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:   const UINT16 bcdDevice = (UINT16)pdev->query_device_descriptor(pdev, BCD_DEVICE);",
          "266:   sprintf_s(HardwareIds[1], DEVICE_HARDWARE_ID_SIZE,",
          "267:             \"USB\\\\VID_%04\" PRIX16 \"&PID_%04\" PRIX16 \"\", idVendor, idProduct);",
          "269:             bcdDevice);",
          "270:  }",
          "271:  {",
          "",
          "[Removed Lines]",
          "268:   sprintf_s(HardwareIds[0], DEVICE_HARDWARE_ID_SIZE, \"%s&REV_%04\" PRIX16 \"\", HardwareIds[1],",
          "",
          "[Added Lines]",
          "268:   sprintf_s(HardwareIds[0], DEVICE_HARDWARE_ID_SIZE,",
          "269:             \"USB\\\\VID_%04\" PRIX16 \"&PID_%04\" PRIX16 \"&REV_%04\" PRIX16 \"\", idVendor, idProduct,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:   {",
          "278:    sprintf_s(CompatibilityIds[2], DEVICE_COMPATIBILITY_ID_SIZE, \"USB\\\\Class_%02\" PRIX8 \"\",",
          "279:              bDeviceClass);",
          "284:   }",
          "285:   else",
          "286:   {",
          "287:    sprintf_s(CompatibilityIds[2], DEVICE_COMPATIBILITY_ID_SIZE, \"USB\\\\DevClass_00\");",
          "292:   }",
          "293:  }",
          "294:  func_instance_id_generate(pdev, strInstanceId, DEVICE_INSTANCE_STR_SIZE);",
          "",
          "[Removed Lines]",
          "280:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&SubClass_%02\" PRIX8 \"\",",
          "281:              CompatibilityIds[2], bDeviceSubClass);",
          "282:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&Prot_%02\" PRIX8 \"\",",
          "283:              CompatibilityIds[1], bDeviceProtocol);",
          "288:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&SubClass_00\",",
          "289:              CompatibilityIds[2]);",
          "290:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&Prot_00\",",
          "291:              CompatibilityIds[1]);",
          "",
          "[Added Lines]",
          "281:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE,",
          "282:              \"USB\\\\Class_%02\" PRIX8 \"&SubClass_%02\" PRIX8 \"\", bDeviceClass,",
          "283:              bDeviceSubClass);",
          "284:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE,",
          "285:              \"USB\\\\Class_%02\" PRIX8 \"&SubClass_%02\" PRIX8 \"&Prot_%02\" PRIX8 \"\",",
          "286:              bDeviceClass, bDeviceSubClass, bDeviceProtocol);",
          "291:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE,",
          "292:              \"USB\\\\DevClass_00&SubClass_00\");",
          "293:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE,",
          "294:              \"USB\\\\DevClass_00&SubClass_00&Prot_00\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
      "candidate_info": {
        "commit_hash": "b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_create",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: {",
          "84:  char* path = NULL;",
          "85:  int status;",
          "86:  UINT32 PathLength;",
          "90:  Stream_Read_UINT32(irp->input, PathLength);",
          "94:  if (status < 1)",
          "95:   if (!(path = (char*)calloc(1, 1)))",
          "",
          "[Removed Lines]",
          "87:  Stream_Seek(irp->input, 28);",
          "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
          "92:                              &path, 0, NULL, NULL);",
          "",
          "[Added Lines]",
          "86:  WCHAR* ptr;",
          "88:  if (!Stream_SafeSeek(irp->input, 28))",
          "89:   return ERROR_INVALID_DATA;",
          "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
          "93:   return ERROR_INVALID_DATA;",
          "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
          "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
          "97:   return ERROR_INVALID_DATA;",
          "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55ee2cce3467ed33c1b60f445dbe50132f96cd65",
      "candidate_info": {
        "commit_hash": "55ee2cce3467ed33c1b60f445dbe50132f96cd65",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/55ee2cce3467ed33c1b60f445dbe50132f96cd65",
        "files": [
          "client/Wayland/wlf_input.c"
        ],
        "message": "Fixed #6087: Inconsistend scroll on wayland\n\nThanks to @yol and @SaschaWessel a bug in scroll step conversion\nwas uncovered. The RDP value ranges are inverted when scrolling\nin negative direction.",
        "before_after_code_files": [
          "client/Wayland/wlf_input.c||client/Wayland/wlf_input.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlf_input.c||client/Wayland/wlf_input.c": [
          "File: client/Wayland/wlf_input.c -> client/Wayland/wlf_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:    return FALSE;",
          "172:  }",
          "177:  flags |= step;",
          "179:  return freerdp_input_send_mouse_event(input, flags, (UINT16)x, (UINT16)y);",
          "",
          "[Removed Lines]",
          "174:  step = (uint32_t)abs(direction);",
          "175:  if (step > WheelRotationMask)",
          "176:   step = WheelRotationMask;",
          "",
          "[Added Lines]",
          "179:  step = abs(direction);",
          "180:  if (step > 0xFF)",
          "181:   step = 0xFF;",
          "184:  if (flags & PTR_FLAGS_WHEEL_NEGATIVE)",
          "185:   step = 0xFF - step;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
      "candidate_info": {
        "commit_hash": "0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6112: Segfault in update_decompress_brush\n\nThe iterators need to be signed for the loop check to work.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2497: }",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2499: {",
          "2501:  BYTE byte = 0;",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2506:   return FALSE;",
          "",
          "[Removed Lines]",
          "2500:  UINT32 x, y, k;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "[Added Lines]",
          "2500:  INT32 x, y, k;",
          "2503:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "---------------"
        ]
      }
    }
  ]
}