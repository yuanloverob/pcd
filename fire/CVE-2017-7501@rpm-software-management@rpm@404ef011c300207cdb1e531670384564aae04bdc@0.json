{
  "cve_id": "CVE-2017-7501",
  "cve_desc": "It was found that versions of rpm before 4.13.0.2 use temporary files with predictable names when installing an RPM. An attacker with ability to write in a directory where files will be installed could create symbolic links to an arbitrary location and modify content, and possibly permissions to arbitrary files, which could be used for denial of service or possibly privilege escalation.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "404ef011c300207cdb1e531670384564aae04bdc",
  "patch_info": {
    "commit_hash": "404ef011c300207cdb1e531670384564aae04bdc",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/404ef011c300207cdb1e531670384564aae04bdc",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Don't follow symlinks on file creation (CVE-2017-7501)\n\nOpen newly created files with O_EXCL to prevent symlink tricks.\nWhen reopening hardlinks for writing the actual content, use append\nmode instead. This is compatible with the write-only permissions but\nis not destructive in case we got redirected to somebody elses file,\nverify the target before actually writing anything.\n\nAs these are files with the temporary suffix, errors mean a local\nuser with sufficient privileges to break the installation of the package\nanyway is trying to goof us on purpose, don't bother trying to mend it\n(we couldn't fix the hardlink case anyhow) but just bail out.\n\nBased on a patch by Florian Festi.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "206:     return rc;",
      "207: }",
      "214: {",
      "215:     FD_t wfd = NULL;",
      "216:     int rc = 0;",
      "",
      "[Removed Lines]",
      "213: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest, int nocontent)",
      "",
      "[Added Lines]",
      "210: static int linkSane(FD_t wfd, const char *dest)",
      "211: {",
      "212:     struct stat sb, lsb;",
      "214:     return (fstat(Fileno(wfd), &sb) == 0 && sb.st_size == 0 &&",
      "215:      (sb.st_mode & ~S_IFMT) == S_IWUSR &&",
      "216:      lstat(dest, &lsb) == 0 && S_ISREG(lsb.st_mode) &&",
      "217:      sb.st_dev == lsb.st_dev && sb.st_ino == lsb.st_ino);",
      "218: }",
      "224: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "219:     {",
      "220:  mode_t old_umask = umask(0577);",
      "222:  umask(old_umask);",
      "223:     }",
      "224:     if (Ferror(wfd)) {",
      "225:  rc = RPMERR_OPEN_FAILED;",
      "",
      "[Removed Lines]",
      "221:  wfd = Fopen(dest, \"w.ufdio\");",
      "",
      "[Added Lines]",
      "232:  wfd = Fopen(dest, exclusive ? \"wx.ufdio\" : \"a.ufdio\");",
      "236:  if (!exclusive && wfd != NULL && !linkSane(wfd, dest)) {",
      "237:      rc = RPMERR_OPEN_FAILED;",
      "238:      goto exit;",
      "239:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:  if (*firsthardlink < 0) {",
      "252:  } else {",
      "254:      char *fn = rpmfilesFN(files, *firsthardlink);",
      "",
      "[Removed Lines]",
      "251:      rc = expandRegular(fi, dest, psm, nodigest, 1);",
      "",
      "[Added Lines]",
      "268:      rc = expandRegular(fi, dest, psm, 1, nodigest, 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "264:     if (numHardlinks<=1) {",
      "265:  if (!rc)",
      "267:     } else if (rpmfiArchiveHasContent(fi)) {",
      "268:  if (!rc)",
      "271:     } else {",
      "",
      "[Removed Lines]",
      "266:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
      "269:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
      "",
      "[Added Lines]",
      "283:      rc = expandRegular(fi, dest, psm, 1, nodigest, 0);",
      "286:      rc = expandRegular(fi, dest, psm, 0, nodigest, 0);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "941:      char *fn = rpmfilesFN(files, firsthardlink);",
      "943:      firsthardlink = -1;",
      "944:      free(fn);",
      "945:  }",
      "",
      "[Removed Lines]",
      "942:      rc = expandRegular(fi, fn, psm, nodigest, 0);",
      "",
      "[Added Lines]",
      "959:      rc = expandRegular(fi, fn, psm, 0, nodigest, 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8aa8eaae94d976f14aa8ec456d0e15445fc3672c",
      "candidate_info": {
        "commit_hash": "8aa8eaae94d976f14aa8ec456d0e15445fc3672c",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/8aa8eaae94d976f14aa8ec456d0e15445fc3672c",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Don't follow symlinks on file creation (CVE-2017-7501)\n\nOpen newly created files with O_EXCL to prevent symlink tricks.\nWhen reopening hardlinks for writing the actual content, use append\nmode instead. This is compatible with the write-only permissions but\nis not destructive in case we got redirected to somebody elses file,\nverify the target before actually writing anything.\n\nAs these are files with the temporary suffix, errors mean a local\nuser with sufficient privileges to break the installation of the package\nanyway is trying to goof us on purpose, don't bother trying to mend it\n(we couldn't fix the hardlink case anyhow) but just bail out.\n\nBased on a patch by Florian Festi.\n\n(cherry picked from commit 404ef011c300207cdb1e531670384564aae04bdc)",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     return rc;",
          "207: }",
          "214: {",
          "215:     FD_t wfd = NULL;",
          "216:     int rc = 0;",
          "",
          "[Removed Lines]",
          "213: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest, int nocontent)",
          "",
          "[Added Lines]",
          "210: static int linkSane(FD_t wfd, const char *dest)",
          "211: {",
          "212:     struct stat sb, lsb;",
          "214:     return (fstat(Fileno(wfd), &sb) == 0 && sb.st_size == 0 &&",
          "215:      (sb.st_mode & ~S_IFMT) == S_IWUSR &&",
          "216:      lstat(dest, &lsb) == 0 && S_ISREG(lsb.st_mode) &&",
          "217:      sb.st_dev == lsb.st_dev && sb.st_ino == lsb.st_ino);",
          "218: }",
          "224: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     {",
          "220:  mode_t old_umask = umask(0577);",
          "222:  umask(old_umask);",
          "223:     }",
          "224:     if (Ferror(wfd)) {",
          "225:  rc = RPMERR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "221:  wfd = Fopen(dest, \"w.ufdio\");",
          "",
          "[Added Lines]",
          "232:  wfd = Fopen(dest, exclusive ? \"wx.ufdio\" : \"a.ufdio\");",
          "236:  if (!exclusive && wfd != NULL && !linkSane(wfd, dest)) {",
          "237:      rc = RPMERR_OPEN_FAILED;",
          "238:      goto exit;",
          "239:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:  if (*firsthardlink < 0) {",
          "252:  } else {",
          "254:      char *fn = rpmfilesFN(files, *firsthardlink);",
          "",
          "[Removed Lines]",
          "251:      rc = expandRegular(fi, dest, psm, nodigest, 1);",
          "",
          "[Added Lines]",
          "268:      rc = expandRegular(fi, dest, psm, 1, nodigest, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:     if (numHardlinks<=1) {",
          "265:  if (!rc)",
          "267:     } else if (rpmfiArchiveHasContent(fi)) {",
          "268:  if (!rc)",
          "271:     } else {",
          "",
          "[Removed Lines]",
          "266:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
          "269:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
          "",
          "[Added Lines]",
          "283:      rc = expandRegular(fi, dest, psm, 1, nodigest, 0);",
          "286:      rc = expandRegular(fi, dest, psm, 0, nodigest, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "941:      char *fn = rpmfilesFN(files, firsthardlink);",
          "943:      firsthardlink = -1;",
          "944:      free(fn);",
          "945:  }",
          "",
          "[Removed Lines]",
          "942:      rc = expandRegular(fi, fn, psm, nodigest, 0);",
          "",
          "[Added Lines]",
          "959:      rc = expandRegular(fi, fn, psm, 0, nodigest, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd166638ee404a0a1ac77be669d31bdb2c68d7e1",
      "candidate_info": {
        "commit_hash": "fd166638ee404a0a1ac77be669d31bdb2c68d7e1",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/fd166638ee404a0a1ac77be669d31bdb2c68d7e1",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Don't follow symlinks on file creation (CVE-2017-7501)\n\nOpen newly created files with O_EXCL to prevent symlink tricks.\nWhen reopening hardlinks for writing the actual content, use append\nmode instead. This is compatible with the write-only permissions but\nis not destructive in case we got redirected to somebody elses file,\nverify the target before actually writing anything.\n\nAs these are files with the temporary suffix, errors mean a local\nuser with sufficient privileges to break the installation of the package\nanyway is trying to goof us on purpose, don't bother trying to mend it\n(we couldn't fix the hardlink case anyhow) but just bail out.\n\nBased on a patch by Florian Festi.\n\n(cherry picked from commit 404ef011c300207cdb1e531670384564aae04bdc)",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     return rc;",
          "207: }",
          "214: {",
          "215:     FD_t wfd = NULL;",
          "216:     int rc = 0;",
          "",
          "[Removed Lines]",
          "213: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest, int nocontent)",
          "",
          "[Added Lines]",
          "210: static int linkSane(FD_t wfd, const char *dest)",
          "211: {",
          "212:     struct stat sb, lsb;",
          "214:     return (fstat(Fileno(wfd), &sb) == 0 && sb.st_size == 0 &&",
          "215:      (sb.st_mode & ~S_IFMT) == S_IWUSR &&",
          "216:      lstat(dest, &lsb) == 0 && S_ISREG(lsb.st_mode) &&",
          "217:      sb.st_dev == lsb.st_dev && sb.st_ino == lsb.st_ino);",
          "218: }",
          "224: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     {",
          "220:  mode_t old_umask = umask(0577);",
          "222:  umask(old_umask);",
          "223:     }",
          "224:     if (Ferror(wfd)) {",
          "225:  rc = RPMERR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "221:  wfd = Fopen(dest, \"w.ufdio\");",
          "",
          "[Added Lines]",
          "232:  wfd = Fopen(dest, exclusive ? \"wx.ufdio\" : \"a.ufdio\");",
          "236:  if (!exclusive && wfd != NULL && !linkSane(wfd, dest)) {",
          "237:      rc = RPMERR_OPEN_FAILED;",
          "238:      goto exit;",
          "239:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:  if (*firsthardlink < 0) {",
          "252:  } else {",
          "254:      char *fn = rpmfilesFN(files, *firsthardlink);",
          "",
          "[Removed Lines]",
          "251:      rc = expandRegular(fi, dest, psm, nodigest, 1);",
          "",
          "[Added Lines]",
          "268:      rc = expandRegular(fi, dest, psm, 1, nodigest, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:     if (numHardlinks<=1) {",
          "265:  if (!rc)",
          "267:     } else if (rpmfiArchiveHasContent(fi)) {",
          "268:  if (!rc)",
          "271:     } else {",
          "",
          "[Removed Lines]",
          "266:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
          "269:      rc = expandRegular(fi, dest, psm, nodigest, 0);",
          "",
          "[Added Lines]",
          "283:      rc = expandRegular(fi, dest, psm, 1, nodigest, 0);",
          "286:      rc = expandRegular(fi, dest, psm, 0, nodigest, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "930:      char *fn = rpmfilesFN(files, firsthardlink);",
          "932:      firsthardlink = -1;",
          "933:      free(fn);",
          "934:  }",
          "",
          "[Removed Lines]",
          "931:      rc = expandRegular(fi, fn, psm, nodigest, 0);",
          "",
          "[Added Lines]",
          "948:      rc = expandRegular(fi, fn, psm, 0, nodigest, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b58096e586fba3923c1ff6029b0e10ed02d6397d",
      "candidate_info": {
        "commit_hash": "b58096e586fba3923c1ff6029b0e10ed02d6397d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/b58096e586fba3923c1ff6029b0e10ed02d6397d",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Remove now redundant code and parameters from expandRegular()\n\nThe 'nocontent' parameter is now always 0, and the 'exclusive' parameter\nis now always 1 so they can be removed, along with the linkSane() helper\nwhich becomes unused here.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     return rc;",
          "208: }",
          "221: static void wfd_close(FD_t *wfdp)",
          "222: {",
          "223:     if (wfdp && *wfdp) {",
          "",
          "[Removed Lines]",
          "211: static int linkSane(FD_t wfd, const char *dest)",
          "212: {",
          "213:     struct stat sb, lsb;",
          "215:     return (fstat(Fileno(wfd), &sb) == 0 && sb.st_size == 0 &&",
          "216:      (sb.st_mode & ~S_IFMT) == S_IWUSR &&",
          "217:      lstat(dest, &lsb) == 0 && S_ISREG(lsb.st_mode) &&",
          "218:      sb.st_dev == lsb.st_dev && sb.st_ino == lsb.st_ino);",
          "219: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     }",
          "239: }",
          "242: {",
          "243:     int rc = 0;",
          "245:     {",
          "246:  mode_t old_umask = umask(0577);",
          "248:  umask(old_umask);",
          "255:     }",
          "256:     if (Ferror(*wfdp)) {",
          "257:  rc = RPMERR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "241: static int wfd_open(FD_t *wfdp, const char *dest, int exclusive)",
          "251:  if (!exclusive && *wfdp != NULL && !linkSane(*wfdp, dest)) {",
          "252:      rc = RPMERR_OPEN_FAILED;",
          "253:      goto exit;",
          "254:  }",
          "",
          "[Added Lines]",
          "230: static int wfd_open(FD_t *wfdp, const char *dest)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273: {",
          "274:     FD_t wfd = NULL;",
          "275:     int rc;",
          "278:     if (rc != 0)",
          "279:         goto exit;",
          "283:     wfd_close(&wfd);",
          "284: exit:",
          "285:     return rc;",
          "",
          "[Removed Lines]",
          "272: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
          "277:     rc = wfd_open(&wfd, dest, exclusive);",
          "281:     if (!nocontent)",
          "282:  rc = rpmfiArchiveReadToFilePsm(fi, wfd, nodigest, psm);",
          "",
          "[Added Lines]",
          "255: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int nodigest)",
          "260:     rc = wfd_open(&wfd, dest);",
          "264:     rc = rpmfiArchiveReadToFilePsm(fi, wfd, nodigest, psm);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:  if (*firsthardlink < 0) {",
          "300:  } else {",
          "302:      char *fn = rpmfilesFN(files, *firsthardlink);",
          "",
          "[Removed Lines]",
          "299:      rc = wfd_open(firstlinkfile, dest, 1);",
          "",
          "[Added Lines]",
          "281:      rc = wfd_open(firstlinkfile, dest);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "312:     if (numHardlinks<=1) {",
          "313:  if (!rc)",
          "315:     } else if (rpmfiArchiveHasContent(fi)) {",
          "316:  if (!rc)",
          "317:      rc = rpmfiArchiveReadToFilePsm(fi, *firstlinkfile, nodigest, psm);",
          "",
          "[Removed Lines]",
          "314:      rc = expandRegular(fi, dest, psm, 1, nodigest, 0);",
          "",
          "[Added Lines]",
          "296:      rc = expandRegular(fi, dest, psm, nodigest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0afe0c3c6cba64d8b7adcdec6ed70f8d32961b58",
      "candidate_info": {
        "commit_hash": "0afe0c3c6cba64d8b7adcdec6ed70f8d32961b58",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/0afe0c3c6cba64d8b7adcdec6ed70f8d32961b58",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Split off function wfd_open() to open a file",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     }",
          "239: }",
          "246: {",
          "248:     int rc = 0;",
          "251:     {",
          "252:  mode_t old_umask = umask(0577);",
          "254:  umask(old_umask);",
          "258:      rc = RPMERR_OPEN_FAILED;",
          "259:      goto exit;",
          "260:  }",
          "261:     }",
          "263:  rc = RPMERR_OPEN_FAILED;",
          "264:  goto exit;",
          "265:     }",
          "267:     if (!nocontent)",
          "268:  rc = rpmfiArchiveReadToFilePsm(fi, wfd, nodigest, psm);",
          "270:     wfd_close(&wfd);",
          "271:     return rc;",
          "272: }",
          "",
          "[Removed Lines]",
          "245: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
          "247:     FD_t wfd = NULL;",
          "253:  wfd = Fopen(dest, exclusive ? \"wx.ufdio\" : \"a.ufdio\");",
          "257:  if (!exclusive && wfd != NULL && !linkSane(wfd, dest)) {",
          "262:     if (Ferror(wfd)) {",
          "269: exit:",
          "",
          "[Added Lines]",
          "241: static int wfd_open(FD_t *wfdp, const char *dest, int exclusive)",
          "251:  if (!exclusive && *wfdp != NULL && !linkSane(*wfdp, dest)) {",
          "256:     if (Ferror(*wfdp)) {",
          "261:     return 0;",
          "263: exit:",
          "264:     wfd_close(wfdp);",
          "265:     return rc;",
          "266: }",
          "272: static int expandRegular(rpmfi fi, const char *dest, rpmpsm psm, int exclusive, int nodigest, int nocontent)",
          "273: {",
          "274:     FD_t wfd = NULL;",
          "275:     int rc;",
          "277:     rc = wfd_open(&wfd, dest, exclusive);",
          "278:     if (rc != 0)",
          "279:         goto exit;",
          "284: exit:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef3ff412c33a71be6b3543a50c244377dff3d9e7",
      "candidate_info": {
        "commit_hash": "ef3ff412c33a71be6b3543a50c244377dff3d9e7",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ef3ff412c33a71be6b3543a50c244377dff3d9e7",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Create first hard link file and keep open, write it at end\n\nThis avoids having to reopen the file later on, which was problematic\nin various ways: it was fundamentally incompatible with IMA (#333) and\nalso required validating the file wasn't changed in the meanwhile so\nit simplifies things too.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: static int fsmMkfile(rpmfi fi, const char *dest, rpmfiles files,",
          "289:        rpmpsm psm, int nodigest, int *setmeta,",
          "291: {",
          "292:     int rc = 0;",
          "293:     int numHardlinks = rpmfiFNlink(fi);",
          "",
          "[Removed Lines]",
          "290:        int * firsthardlink)",
          "",
          "[Added Lines]",
          "290:        int * firsthardlink, FD_t *firstlinkfile)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:  if (*firsthardlink < 0) {",
          "300:  } else {",
          "302:      char *fn = rpmfilesFN(files, *firsthardlink);",
          "",
          "[Removed Lines]",
          "299:      rc = expandRegular(fi, dest, psm, 1, nodigest, 1);",
          "",
          "[Added Lines]",
          "299:      rc = wfd_open(firstlinkfile, dest, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:      rc = expandRegular(fi, dest, psm, 1, nodigest, 0);",
          "315:     } else if (rpmfiArchiveHasContent(fi)) {",
          "316:  if (!rc)",
          "319:     } else {",
          "",
          "[Removed Lines]",
          "317:      rc = expandRegular(fi, dest, psm, 0, nodigest, 0);",
          "",
          "[Added Lines]",
          "317:      rc = rpmfiArchiveReadToFilePsm(fi, *firstlinkfile, nodigest, psm);",
          "318:  wfd_close(firstlinkfile);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "881:     int nodigest = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOFILEDIGEST) ? 1 : 0;",
          "882:     int nofcaps = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOCAPS) ? 1 : 0;",
          "883:     int firsthardlink = -1;",
          "884:     int skip;",
          "885:     rpmFileAction action;",
          "886:     char *tid = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:     FD_t firstlinkfile = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "952:             if (S_ISREG(sb.st_mode)) {",
          "953:   if (rc == RPMERR_ENOENT) {",
          "954:       rc = fsmMkfile(fi, fpath, files, psm, nodigest,",
          "956:   }",
          "957:             } else if (S_ISDIR(sb.st_mode)) {",
          "958:                 if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "955:        &setmeta, &firsthardlink);",
          "",
          "[Added Lines]",
          "957:        &setmeta, &firsthardlink, &firstlinkfile);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "992:      char *fn = rpmfilesFN(files, firsthardlink);",
          "994:      firsthardlink = -1;",
          "995:      free(fn);",
          "996:  }",
          "",
          "[Removed Lines]",
          "993:      rc = expandRegular(fi, fn, psm, 0, nodigest, 0);",
          "",
          "[Added Lines]",
          "995:      rc = rpmfiArchiveReadToFilePsm(fi, firstlinkfile, nodigest, psm);",
          "996:      wfd_close(&firstlinkfile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}