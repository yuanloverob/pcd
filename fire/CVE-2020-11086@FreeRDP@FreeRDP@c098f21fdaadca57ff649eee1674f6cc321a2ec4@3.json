{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e35d06f6e1cbdea8cc80fe7c2fbdb010050013b5",
      "candidate_info": {
        "commit_hash": "e35d06f6e1cbdea8cc80fe7c2fbdb010050013b5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e35d06f6e1cbdea8cc80fe7c2fbdb010050013b5",
        "files": [
          "libfreerdp/codec/rfx.c"
        ],
        "message": "Fixed oob read in rfx_process_message_tileset\n\nCheck input data length\nThanks to hac425 CVE-2020-11043",
        "before_after_code_files": [
          "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c": [
          "File: libfreerdp/codec/rfx.c -> libfreerdp/codec/rfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752: {",
          "753:  BOOL rc;",
          "754:  int i, close_cnt;",
          "756:  BYTE quant;",
          "757:  RFX_TILE* tile;",
          "758:  RFX_TILE** tmpTiles;",
          "",
          "[Removed Lines]",
          "755:  size_t pos;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:  for (i = 0; i < message->numTiles; i++)",
          "887:  {",
          "888:   if (!(tile = (RFX_TILE*)ObjectPool_Take(context->priv->TilePool)))",
          "889:   {",
          "890:    WLog_ERR(TAG, \"RfxMessageTileSet failed to get tile from object pool\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:   wStream sub;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:    break;",
          "904:   }",
          "911:   {",
          "912:    WLog_ERR(TAG,",
          "913:             \"RfxMessageTileSet not enough bytes to read tile %d/%\" PRIu16",
          "",
          "[Removed Lines]",
          "906:   Stream_Read_UINT16(s,",
          "910:   if (Stream_GetRemainingLength(s) < blockLen - 6)",
          "",
          "[Added Lines]",
          "906:   Stream_StaticInit(&sub, Stream_Pointer(s), Stream_GetRemainingLength(s));",
          "907:   Stream_Read_UINT16(&sub,",
          "911:   if (!Stream_SafeSeek(s, blockLen))",
          "912:   {",
          "913:    rc = FALSE;",
          "914:    break;",
          "915:   }",
          "916:   if ((blockLen < 6 + 13) || (Stream_GetRemainingLength(&sub) < blockLen - 6))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "917:    break;",
          "918:   }",
          "922:   if (blockType != CBT_TILE)",
          "923:   {",
          "924:    WLog_ERR(TAG, \"unknown block type 0x%\" PRIX32 \", expected CBT_TILE (0xCAC3).\",",
          "",
          "[Removed Lines]",
          "920:   pos = Stream_GetPosition(s) - 6 + blockLen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:    break;",
          "928:   }",
          "944:   tile->x = tile->xIdx * 64;",
          "945:   tile->y = tile->yIdx * 64;",
          "",
          "[Removed Lines]",
          "938:   Stream_GetPointer(s, tile->YData);",
          "939:   Stream_Seek(s, tile->YLen);",
          "940:   Stream_GetPointer(s, tile->CbData);",
          "941:   Stream_Seek(s, tile->CbLen);",
          "942:   Stream_GetPointer(s, tile->CrData);",
          "943:   Stream_Seek(s, tile->CrLen);",
          "",
          "[Added Lines]",
          "942:   Stream_GetPointer(&sub, tile->YData);",
          "943:   if (!Stream_SafeSeek(&sub, tile->YLen))",
          "944:   {",
          "945:    rc = FALSE;",
          "946:    break;",
          "947:   }",
          "948:   Stream_GetPointer(&sub, tile->CbData);",
          "949:   if (!Stream_SafeSeek(&sub, tile->CbLen))",
          "950:   {",
          "951:    rc = FALSE;",
          "952:    break;",
          "953:   }",
          "954:   Stream_GetPointer(&sub, tile->CrData);",
          "955:   if (!Stream_SafeSeek(&sub, tile->CrLen))",
          "956:   {",
          "957:    rc = FALSE;",
          "958:    break;",
          "959:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "971:   {",
          "972:    rfx_decode_rgb(context, tile, tile->data, 64 * 4);",
          "973:   }",
          "976:  }",
          "978:  if (context->priv->UseThreads)",
          "",
          "[Removed Lines]",
          "975:   Stream_SetPosition(s, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e928888dabb907a57da9f8ad8301373c98f59716",
      "candidate_info": {
        "commit_hash": "e928888dabb907a57da9f8ad8301373c98f59716",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e928888dabb907a57da9f8ad8301373c98f59716",
        "files": [
          "channels/urbdrc/client/data_transfer.c"
        ],
        "message": "Fixed various input buffer length checks in URBDRC\n\nThanks to hac425 CVE-2020-11039",
        "before_after_code_files": [
          "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
          "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  Stream_Read_UINT32(s, IoControlCode);",
          "235:  Stream_Read_UINT32(s, InputBufferSize);",
          "238:   return ERROR_INVALID_DATA;",
          "241:  Stream_Read_UINT32(s, OutputBufferSize);",
          "242:  Stream_Read_UINT32(s, RequestId);",
          "243:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "237:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "240:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "237:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "238:   return ERROR_INVALID_DATA;",
          "239:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:  Stream_Read_UINT32(s, IoControlCode);",
          "316:  Stream_Read_UINT32(s, InputBufferSize);",
          "319:   return ERROR_INVALID_DATA;",
          "322:  Stream_Read_UINT32(s, OutputBufferSize);",
          "323:  Stream_Read_UINT32(s, RequestId);",
          "324:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "318:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "321:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "319:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "320:   return ERROR_INVALID_DATA;",
          "321:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:                                      int transferDir)",
          "399: {",
          "400:  MSUSB_CONFIG_DESCRIPTOR* MsConfig = NULL;",
          "402:  BYTE ConfigurationDescriptorIsValid;",
          "403:  wStream* out;",
          "404:  int MsOutSize = 0;",
          "",
          "[Removed Lines]",
          "401:  UINT32 out_size, InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "[Added Lines]",
          "402:  size_t out_size;",
          "403:  UINT32 InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:  if (MsConfig)",
          "453:   MsOutSize = MsConfig->MsOutSize;",
          "455:  if (MsOutSize > 0)",
          "456:   out_size = 36 + MsOutSize;",
          "457:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:  if (MsOutSize > SIZE_MAX - 36)",
          "458:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "808:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "809: {",
          "811:  BYTE bmRequestType, desc_index, desc_type;",
          "812:  UINT16 langId;",
          "813:  wStream* out;",
          "",
          "[Removed Lines]",
          "810:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "815:  size_t out_size;",
          "816:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "831:  Stream_Read_UINT8(s, desc_type);",
          "832:  Stream_Read_UINT16(s, langId);",
          "833:  Stream_Read_UINT32(s, OutputBufferSize);",
          "835:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "836:  {",
          "837:   if (Stream_GetRemainingLength(s) < OutputBufferSize)",
          "838:    return ERROR_INVALID_DATA;",
          "839:  }",
          "842:  out = Stream_New(NULL, out_size);",
          "844:  if (!out)",
          "",
          "[Removed Lines]",
          "841:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "840:  if (OutputBufferSize > UINT32_MAX - 36)",
          "841:   return ERROR_INVALID_DATA;",
          "848:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "885:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "886:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "887: {",
          "889:  UINT16 Index;",
          "890:  BYTE bmRequestType;",
          "891:  wStream* out;",
          "",
          "[Removed Lines]",
          "888:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "895:  size_t out_size;",
          "896:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "916:  Stream_Seek(s, 2);",
          "917:  Stream_Read_UINT32(s, OutputBufferSize);",
          "919:  out = Stream_New(NULL, out_size);",
          "921:  if (!out)",
          "",
          "[Removed Lines]",
          "918:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "926:  if (OutputBufferSize > UINT32_MAX - 36)",
          "927:   return ERROR_INVALID_DATA;",
          "928:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:  Stream_Read_UINT32(s, OutputBufferSize);",
          "974:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "975:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:  if (OutputBufferSize > UINT32_MAX - 36)",
          "984:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "977:    return ERROR_INVALID_DATA;",
          "978:  }",
          "981:  out = Stream_New(NULL, out_size);",
          "983:  if (!out)",
          "",
          "[Removed Lines]",
          "980:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "992:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1022:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1023:                                               IUDEVMAN* udevman, int transferDir)",
          "1024: {",
          "1026:  BYTE Recipient, InterfaceNumber, Ms_PageIndex;",
          "1027:  UINT16 Ms_featureDescIndex;",
          "1028:  wStream* out;",
          "",
          "[Removed Lines]",
          "1025:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1037:  size_t out_size;",
          "1038:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1052:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1054:  switch (transferDir)",
          "1055:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1067:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1064:  }",
          "1066:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "1068:  out = Stream_New(NULL, out_size);",
          "1070:  if (!out)",
          "",
          "[Removed Lines]",
          "1067:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1082:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1245:                                                   wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1246:                                                   IUDEVMAN* udevman, int transferDir)",
          "1247: {",
          "1249:  wStream* out;",
          "1250:  URBDRC_PLUGIN* urbdrc;",
          "1251:  const BOOL noAck = (RequestField & 0x80000000U) != 0;",
          "",
          "[Removed Lines]",
          "1248:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1263:  size_t out_size;",
          "1264:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1271:   return ERROR_INVALID_DATA;",
          "1273:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1275:  out = Stream_New(NULL, out_size);",
          "1277:  if (!out)",
          "",
          "[Removed Lines]",
          "1274:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1290:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1291:   return ERROR_INVALID_DATA;",
          "1292:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1298:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1299:                                               IUDEVMAN* udevman, int transferDir)",
          "1300: {",
          "1302:  UINT16 interface;",
          "1303:  wStream* out;",
          "1304:  URBDRC_PLUGIN* urbdrc;",
          "",
          "[Removed Lines]",
          "1301:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1319:  size_t out_size;",
          "1320:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1327:  Stream_Read_UINT16(s, interface);",
          "1328:  Stream_Seek(s, 2);",
          "1329:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1331:  out = Stream_New(NULL, out_size);",
          "1333:  if (!out)",
          "",
          "[Removed Lines]",
          "1330:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1349:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1350:   return ERROR_INVALID_DATA;",
          "1351:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1376:  Stream_Read_UINT16(s, FeatureSelector);",
          "1377:  Stream_Read_UINT16(s, Index);",
          "1378:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1380:  switch (transferDir)",
          "1381:  {",
          "1382:   case USBD_TRANSFER_DIRECTION_OUT:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1401:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1389:    break;",
          "1390:  }",
          "1394:  if (!out)",
          "1395:   return ERROR_OUTOFMEMORY;",
          "",
          "[Removed Lines]",
          "1392:  out = Stream_New(NULL, 36 + OutputBufferSize);",
          "",
          "[Added Lines]",
          "1414:  out = Stream_New(NULL, 36ULL + OutputBufferSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
      "candidate_info": {
        "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
        "files": [
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fixed oob read in cliprdr_read_format_list",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "402:  WCHAR* wszFormatName;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "405:  UINT error = CHANNEL_RC_OK;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "409:  index = 0;",
          "410:  formatList->numFormats = 0;",
          "413:  if (!formatList->dataLen)",
          "414:  {",
          "418:  }",
          "419:  else if (!useLongFormatNames)",
          "420:  {",
          "424:   {",
          "426:    return ERROR_INTERNAL_ERROR;",
          "427:   }",
          "",
          "[Removed Lines]",
          "403:  UINT32 dataLen = formatList->dataLen;",
          "411:  position = Stream_GetPosition(s);",
          "416:   formatList->formats = NULL;",
          "417:   formatList->numFormats = 0;",
          "421:   formatList->numFormats = (dataLen / 36);",
          "423:   if ((formatList->numFormats * 36) != dataLen)",
          "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
          "",
          "[Added Lines]",
          "403:  wStream sub1, sub2;",
          "411:  formatList->formats = NULL;",
          "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
          "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
          "416:   return ERROR_INVALID_DATA;",
          "423:   const size_t cap = Stream_Capacity(&sub1);",
          "424:   formatList->numFormats = (cap / 36);",
          "426:   if ((formatList->numFormats * 36) != cap)",
          "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:   formatList->formats = formats;",
          "441:   {",
          "445:    formats[index].formatName = NULL;",
          "",
          "[Removed Lines]",
          "440:   while (dataLen)",
          "443:    dataLen -= 4;",
          "",
          "[Added Lines]",
          "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:    if (asciiNames)",
          "456:    {",
          "459:     if (szFormatName[0])",
          "460:     {",
          "",
          "[Removed Lines]",
          "457:     szFormatName = (char*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
          "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "459:    if (!Stream_SafeSeek(&sub1, 32))",
          "460:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:    }",
          "473:    else",
          "474:    {",
          "477:     if (wszFormatName[0])",
          "478:     {",
          "",
          "[Removed Lines]",
          "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:     }",
          "490:    }",
          "494:    index++;",
          "495:   }",
          "496:  }",
          "497:  else",
          "498:  {",
          "500:   {",
          "514:    formatList->numFormats++;",
          "515:   }",
          "520:   if (formatList->numFormats)",
          "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
          "",
          "[Removed Lines]",
          "492:    Stream_Seek(s, 32);",
          "493:    dataLen -= 32;",
          "499:   while (dataLen)",
          "502:    dataLen -= 4;",
          "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "506:    if (!wszFormatName[0])",
          "507:     formatNameLength = 0;",
          "508:    else",
          "509:     formatNameLength = _wcslen(wszFormatName);",
          "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "512:    dataLen -= ((formatNameLength + 1) * 2);",
          "517:   dataLen = formatList->dataLen;",
          "518:   Stream_SetPosition(s, position);",
          "",
          "[Added Lines]",
          "499:   sub2 = sub1;",
          "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
          "502:    size_t rest;",
          "504:     goto error_out;",
          "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "507:    rest = Stream_GetRemainingLength(&sub1);",
          "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
          "511:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   formatList->formats = formats;",
          "532:   {",
          "536:    formats[index].formatName = NULL;",
          "545:    if (formatNameLength)",
          "546:    {",
          "549:     {",
          "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
          "551:      error = ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "531:   while (dataLen)",
          "534:    dataLen -= 4;",
          "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "540:    if (!wszFormatName[0])",
          "541:     formatNameLength = 0;",
          "542:    else",
          "543:     formatNameLength = _wcslen(wszFormatName);",
          "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
          "548:                            0, NULL, NULL) < 1)",
          "",
          "[Added Lines]",
          "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
          "528:    size_t rest;",
          "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
          "534:    rest = Stream_GetRemainingLength(&sub2);",
          "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
          "537:     goto error_out;",
          "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
          "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553:     }",
          "554:    }",
          "559:    index++;",
          "560:   }",
          "561:  }",
          "",
          "[Removed Lines]",
          "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "557:    dataLen -= ((formatNameLength + 1) * 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:   }",
          "584:   free(formatList->formats);",
          "585:  }",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:   formatList->formats = NULL;",
          "577:   formatList->numFormats = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00b5ff301f088b56d3dbd712866e61b16a1bce02",
      "candidate_info": {
        "commit_hash": "00b5ff301f088b56d3dbd712866e61b16a1bce02",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/00b5ff301f088b56d3dbd712866e61b16a1bce02",
        "files": [
          "channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c"
        ],
        "message": "Fixed clipboard 'called with invalid type' warning",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c",
          "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c",
          "client/Mac/Clipboard.m||client/Mac/Clipboard.m",
          "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c",
          "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c",
          "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c",
          "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_format.c||channels/cliprdr/client/cliprdr_format.c": [
          "File: channels/cliprdr/client/cliprdr_format.c -> channels/cliprdr/client/cliprdr_format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: UINT cliprdr_process_format_list(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "44:                                  UINT16 msgFlags)",
          "45: {",
          "47:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "48:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "46:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: UINT cliprdr_process_format_list_response(cliprdrPlugin* cliprdr, wStream* s, UINT32 dataLen,",
          "83:                                           UINT16 msgFlags)",
          "84: {",
          "86:  CliprdrClientContext* context = cliprdr_get_client_interface(cliprdr);",
          "87:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse;",
          "",
          "[Added Lines]",
          "85:  CLIPRDR_FORMAT_LIST_RESPONSE formatListResponse = { 0 };",
          "",
          "---------------"
        ],
        "client/Android/android_cliprdr.c||client/Android/android_cliprdr.c": [
          "File: client/Android/android_cliprdr.c -> client/Android/android_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  formatList.msgFlags = CB_RESPONSE_OK;",
          "82:  formatList.numFormats = numFormats;",
          "83:  formatList.formats = formats;",
          "85:  if (!afc->cliprdr->ClientFormatList)",
          "86:   goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Mac/Clipboard.m||client/Mac/Clipboard.m": [
          "File: client/Mac/Clipboard.m -> client/Mac/Clipboard.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  UINT32 *pFormatIds;",
          "29:  const char *formatName;",
          "30:  CLIPRDR_FORMAT *formats;",
          "32:  mfContext *mfc = (mfContext *)cliprdr->custom;",
          "34:  ZeroMemory(&formatList, sizeof(CLIPRDR_FORMAT_LIST));",
          "",
          "[Removed Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "31:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  formatList.msgFlags = CB_RESPONSE_OK;",
          "57:  formatList.numFormats = numFormats;",
          "58:  formatList.formats = formats;",
          "60:  mfc->cliprdr->ClientFormatList(mfc->cliprdr, &formatList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c": [
          "File: client/Wayland/wlf_cliprdr.c -> client/Wayland/wlf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:  formatList.msgFlags = CB_RESPONSE_OK;",
          "175:  formatList.numFormats = (UINT32)clipboard->numClientFormats;",
          "176:  formatList.formats = clipboard->clientFormats;",
          "177:  return clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/Windows/wf_cliprdr.c||client/Windows/wf_cliprdr.c": [
          "File: client/Windows/wf_cliprdr.c -> client/Windows/wf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235:  UINT32 formatId = 0;",
          "1236:  char formatName[1024];",
          "1237:  CLIPRDR_FORMAT* formats = NULL;",
          "1240:  if (!clipboard)",
          "1241:   return ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList;",
          "",
          "[Added Lines]",
          "1238:  CLIPRDR_FORMAT_LIST formatList = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288:  formatList.numFormats = numFormats;",
          "1289:  formatList.formats = formats;",
          "1290:  rc = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1292:  for (index = 0; index < numFormats; index++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "client/X11/xf_cliprdr.c||client/X11/xf_cliprdr.c": [
          "File: client/X11/xf_cliprdr.c -> client/X11/xf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:  formatList.msgFlags = CB_RESPONSE_OK;",
          "534:  formatList.numFormats = numFormats;",
          "535:  formatList.formats = formats;",
          "536:  clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "537:  xf_cliprdr_free_formats(formats, numFormats);",
          "538: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:  formatList.msgFlags = CB_RESPONSE_OK;",
          "1101:  formatList.numFormats = numFormats;",
          "1102:  formatList.formats = formats;",
          "1103:  ret = clipboard->context->ClientFormatList(clipboard->context, &formatList);",
          "1104:  free(formats);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:  formatList.msgType = CB_FORMAT_LIST;",
          "",
          "---------------"
        ],
        "server/proxy/pf_cliprdr.c||server/proxy/pf_cliprdr.c": [
          "File: server/proxy/pf_cliprdr.c -> server/proxy/pf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:  if (pdata->config->TextOnly)",
          "296:  {",
          "298:   pf_cliprdr_create_text_only_format_list(&list);",
          "299:   return server->ServerFormatList(server, &list);",
          "300:  }",
          "",
          "[Removed Lines]",
          "297:   CLIPRDR_FORMAT_LIST list;",
          "",
          "[Added Lines]",
          "297:   CLIPRDR_FORMAT_LIST list = { 0 };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe7124fc8d2a6350b16eea8d56c2049d58560bc6",
      "candidate_info": {
        "commit_hash": "fe7124fc8d2a6350b16eea8d56c2049d58560bc6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/fe7124fc8d2a6350b16eea8d56c2049d58560bc6",
        "files": [
          "winpr/libwinpr/utils/image.c"
        ],
        "message": "Fixed integer overflow in winpr_image_bitmap_read_buffer\n\nThanks to hac425\n\n(cherry picked from commit dffd893dc5874b63c99777d7df147e37c770fc92)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c": [
          "File: winpr/libwinpr/utils/image.c -> winpr/libwinpr/utils/image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  image->type = WINPR_IMAGE_BITMAP;",
          "343:   goto fail;",
          "346:  image->width = bi.biWidth;",
          "348:  if (bi.biHeight < 0)",
          "",
          "[Removed Lines]",
          "342:  if (Stream_Capacity(s) < bf.bfOffBits + bi.biSizeImage)",
          "345:  Stream_SetPosition(s, bf.bfOffBits);",
          "",
          "[Added Lines]",
          "342:  if (Stream_GetPosition(s) > bf.bfOffBits)",
          "343:   goto fail;",
          "344:  if (!Stream_SafeSeek(s, bf.bfOffBits - Stream_GetPosition(s)))",
          "345:   goto fail;",
          "346:  if (Stream_GetRemainingCapacity(s) < bi.biSizeImage)",
          "",
          "---------------"
        ]
      }
    }
  ]
}