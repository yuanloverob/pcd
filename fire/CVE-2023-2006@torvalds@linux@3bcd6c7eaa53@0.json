{
  "cve_id": "CVE-2023-2006",
  "cve_desc": "A race condition was found in the Linux kernel's RxRPC network protocol, within the processing of RxRPC bundles. This issue results from the lack of proper locking when performing operations on an object. This may allow an attacker to escalate privileges and execute arbitrary code in the context of the kernel.",
  "repo": "torvalds/linux",
  "patch_hash": "3bcd6c7eaa53b56c3f584da46a1f7652e759d0e5",
  "patch_info": {
    "commit_hash": "3bcd6c7eaa53b56c3f584da46a1f7652e759d0e5",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3bcd6c7eaa53",
    "files": [
      "net/rxrpc/ar-internal.h",
      "net/rxrpc/conn_client.c"
    ],
    "message": "rxrpc: Fix race between conn bundle lookup and bundle removal [ZDI-CAN-15975]\n\nAfter rxrpc_unbundle_conn() has removed a connection from a bundle, it\nchecks to see if there are any conns with available channels and, if not,\nremoves and attempts to destroy the bundle.\n\nWhilst it does check after grabbing client_bundles_lock that there are no\nconnections attached, this races with rxrpc_look_up_bundle() retrieving the\nbundle, but not attaching a connection for the connection to be attached\nlater.\n\nThere is therefore a window in which the bundle can get destroyed before we\nmanage to attach a new connection to it.\n\nFix this by adding an \"active\" counter to struct rxrpc_bundle:\n\n (1) rxrpc_connect_call() obtains an active count by prepping/looking up a\n     bundle and ditches it before returning.\n\n (2) If, during rxrpc_connect_call(), a connection is added to the bundle,\n     this obtains an active count, which is held until the connection is\n     discarded.\n\n (3) rxrpc_deactivate_bundle() is created to drop an active count on a\n     bundle and destroy it when the active count reaches 0.  The active\n     count is checked inside client_bundles_lock() to prevent a race with\n     rxrpc_look_up_bundle().\n\n (4) rxrpc_unbundle_conn() then calls rxrpc_deactivate_bundle().\n\nFixes: 245500d853e9 (\"rxrpc: Rewrite the client connection manager\")\nReported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-15975\nSigned-off-by: David Howells <dhowells@redhat.com>\nTested-by: zdi-disclosures@trendmicro.com\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
      "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
    ]
  },
  "patch_diff": {
    "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
      "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h"
    ],
    "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
      "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: DEFINE_IDR(rxrpc_client_conn_ids);",
      "41: static DEFINE_SPINLOCK(rxrpc_conn_id_lock);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: static void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   bundle->params = *cp;",
      "124:   rxrpc_get_peer(bundle->params.peer);",
      "125:   refcount_set(&bundle->ref, 1);",
      "126:   spin_lock_init(&bundle->channel_lock);",
      "127:   INIT_LIST_HEAD(&bundle->waiting_calls);",
      "128:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:   atomic_set(&bundle->active, 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:  dead = __refcount_dec_and_test(&bundle->ref, &r);",
      "153:  if (dead)",
      "154:   rxrpc_free_bundle(bundle);",
      "155: }",
      "",
      "[Removed Lines]",
      "152:  _debug(\"PUT B=%x %d\", d, r);",
      "",
      "[Added Lines]",
      "155:  _debug(\"PUT B=%x %d\", d, r - 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "338:  rxrpc_free_bundle(candidate);",
      "339: found_bundle:",
      "340:  rxrpc_get_bundle(bundle);",
      "341:  spin_unlock(&local->client_bundles_lock);",
      "342:  _leave(\" = %u [found]\", bundle->debug_id);",
      "343:  return bundle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344:  atomic_inc(&bundle->active);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "435:    if (old)",
      "436:     trace_rxrpc_client(old, -1, rxrpc_client_replace);",
      "437:    candidate->bundle_shift = shift;",
      "438:    bundle->conns[i] = candidate;",
      "439:    for (j = 0; j < RXRPC_MAXCALLS; j++)",
      "440:     set_bit(shift + j, &bundle->avail_chans);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "442:    atomic_inc(&bundle->active);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "725:  smp_rmb();",
      "727: out_put_bundle:",
      "728:  rxrpc_put_bundle(bundle);",
      "729: out:",
      "730:  _leave(\" = %d\", ret);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "733:  rxrpc_deactivate_bundle(bundle);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "900: static void rxrpc_unbundle_conn(struct rxrpc_connection *conn)",
      "901: {",
      "902:  struct rxrpc_bundle *bundle = conn->bundle;",
      "904:  unsigned int bindex;",
      "906:  int i;",
      "908:  _enter(\"C=%x\", conn->debug_id);",
      "",
      "[Removed Lines]",
      "903:  struct rxrpc_local *local = bundle->params.local;",
      "905:  bool need_drop = false, need_put = false;",
      "",
      "[Added Lines]",
      "910:  bool need_drop = false;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "921:  }",
      "922:  spin_unlock(&bundle->channel_lock);",
      "933:    _debug(\"erase bundle\");",
      "934:    rb_erase(&bundle->local_node, &local->client_bundles);",
      "935:    need_put = true;",
      "",
      "[Removed Lines]",
      "925:  if (!bundle->avail_chans) {",
      "926:   _debug(\"maybe unbundle\");",
      "927:   spin_lock(&local->client_bundles_lock);",
      "929:   for (i = 0; i < ARRAY_SIZE(bundle->conns); i++)",
      "930:    if (bundle->conns[i])",
      "931:     break;",
      "932:   if (i == ARRAY_SIZE(bundle->conns) && !bundle->params.exclusive) {",
      "",
      "[Added Lines]",
      "929:  if (need_drop) {",
      "930:   rxrpc_deactivate_bundle(bundle);",
      "931:   rxrpc_put_connection(conn);",
      "932:  }",
      "933: }",
      "938: static void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle)",
      "939: {",
      "940:  struct rxrpc_local *local = bundle->params.local;",
      "941:  bool need_put = false;",
      "943:  if (atomic_dec_and_lock(&bundle->active, &local->client_bundles_lock)) {",
      "944:   if (!bundle->params.exclusive) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "939:   if (need_put)",
      "940:    rxrpc_put_bundle(bundle);",
      "941:  }",
      "946: }",
      "",
      "[Removed Lines]",
      "943:  if (need_drop)",
      "944:   rxrpc_put_connection(conn);",
      "945:  _leave(\"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1bab27af6b88b5c811f99de4812b5590f20d1cb7",
      "candidate_info": {
        "commit_hash": "1bab27af6b88b5c811f99de4812b5590f20d1cb7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1bab27af6b88b5c811f99de4812b5590f20d1cb7",
        "files": [
          "include/trace/events/rxrpc.h",
          "net/rxrpc/af_rxrpc.c",
          "net/rxrpc/ar-internal.h",
          "net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c",
          "net/rxrpc/conn_object.c",
          "net/rxrpc/sendmsg.c"
        ],
        "message": "rxrpc: Set up a connection bundle from a call, not rxrpc_conn_parameters\n\nUse the information now stored in struct rxrpc_call to configure the\nconnection bundle and thence the connection, rather than using the\nrxrpc_conn_parameters struct.\n\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org",
        "before_after_code_files": [
          "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h",
          "net/rxrpc/af_rxrpc.c||net/rxrpc/af_rxrpc.c",
          "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
          "net/rxrpc/call_object.c||net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c",
          "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c",
          "net/rxrpc/sendmsg.c||net/rxrpc/sendmsg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ],
          "candidate": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ]
        }
      },
      "candidate_diff": {
        "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h": [
          "File: include/trace/events/rxrpc.h -> include/trace/events/rxrpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: #define rxrpc_peer_traces \\",
          "179:  EM(rxrpc_peer_free,   \"FREE        \") \\",
          "180:  EM(rxrpc_peer_get_accept,  \"GET accept  \") \\",
          "182:  EM(rxrpc_peer_get_bundle,  \"GET bundle  \") \\",
          "183:  EM(rxrpc_peer_get_client_conn,  \"GET cln-conn\") \\",
          "184:  EM(rxrpc_peer_get_input,  \"GET input   \") \\",
          "",
          "[Removed Lines]",
          "181:  EM(rxrpc_peer_get_activate_call, \"GET act-call\") \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:  EM(rxrpc_peer_put_bundle,  \"PUT bundle  \") \\",
          "192:  EM(rxrpc_peer_put_call,   \"PUT call    \") \\",
          "193:  EM(rxrpc_peer_put_conn,   \"PUT conn    \") \\",
          "195:  EM(rxrpc_peer_put_input,  \"PUT input   \") \\",
          "196:  EM(rxrpc_peer_put_input_error,  \"PUT inpt-err\") \\",
          "197:  E_(rxrpc_peer_put_keepalive,  \"PUT keepaliv\")",
          "",
          "[Removed Lines]",
          "194:  EM(rxrpc_peer_put_discard_tmp,  \"PUT disc-tmp\") \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  EM(rxrpc_bundle_get_client_call, \"GET clt-call\") \\",
          "202:  EM(rxrpc_bundle_get_client_conn, \"GET clt-conn\") \\",
          "203:  EM(rxrpc_bundle_get_service_conn, \"GET svc-conn\") \\",
          "204:  EM(rxrpc_bundle_put_conn,  \"PUT conn    \") \\",
          "205:  EM(rxrpc_bundle_put_discard,  \"PUT discard \") \\",
          "206:  E_(rxrpc_bundle_new,   \"NEW         \")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:  EM(rxrpc_bundle_put_call,  \"PUT call    \") \\",
          "",
          "---------------"
        ],
        "net/rxrpc/af_rxrpc.c||net/rxrpc/af_rxrpc.c": [
          "File: net/rxrpc/af_rxrpc.c -> net/rxrpc/af_rxrpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:   mutex_unlock(&call->user_mutex);",
          "329:  }",
          "332:  _leave(\" = %p\", call);",
          "333:  return call;",
          "334: }",
          "",
          "[Removed Lines]",
          "331:  rxrpc_put_peer(cp.peer, rxrpc_peer_put_discard_tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
          "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "894: void rxrpc_destroy_client_conn_ids(struct rxrpc_local *local);",
          "895: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "896: void rxrpc_put_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "900: void rxrpc_expose_client_call(struct rxrpc_call *);",
          "901: void rxrpc_disconnect_client_call(struct rxrpc_bundle *, struct rxrpc_call *);",
          "902: void rxrpc_put_client_conn(struct rxrpc_connection *, enum rxrpc_conn_trace);",
          "903: void rxrpc_discard_expired_client_conns(struct work_struct *);",
          "904: void rxrpc_destroy_all_client_connections(struct rxrpc_net *);",
          "",
          "[Removed Lines]",
          "897: int rxrpc_connect_call(struct rxrpc_sock *, struct rxrpc_call *,",
          "898:          struct rxrpc_conn_parameters *, struct sockaddr_rxrpc *,",
          "899:          gfp_t);",
          "",
          "[Added Lines]",
          "898: int rxrpc_connect_call(struct rxrpc_call *call, gfp_t gfp);",
          "901: void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_object.c||net/rxrpc/call_object.c": [
          "File: net/rxrpc/call_object.c -> net/rxrpc/call_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:  if (ret < 0)",
          "370:   goto error_attached_to_socket;",
          "",
          "[Removed Lines]",
          "368:  ret = rxrpc_connect_call(rx, call, cp, srx, gfp);",
          "",
          "[Added Lines]",
          "368:  ret = rxrpc_connect_call(call, gfp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "664:  rxrpc_put_txbuf(call->tx_pending, rxrpc_txbuf_put_cleaned);",
          "665:  rxrpc_put_connection(call->conn, rxrpc_conn_put_call);",
          "666:  rxrpc_put_peer(call->peer, rxrpc_peer_put_call);",
          "667:  rxrpc_put_local(call->local, rxrpc_local_put_call);",
          "668:  call_rcu(&call->rcu, rxrpc_rcu_free_call);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:  rxrpc_deactivate_bundle(call->bundle);",
          "667:  rxrpc_put_bundle(call->bundle, rxrpc_bundle_put_call);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
          "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: __read_mostly unsigned long rxrpc_conn_idle_client_expiry = 2 * 60 * HZ;",
          "35: __read_mostly unsigned long rxrpc_conn_idle_client_fast_expiry = 2 * HZ;",
          "",
          "[Removed Lines]",
          "37: static void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle);",
          "",
          "[Added Lines]",
          "37: static void rxrpc_activate_bundle(struct rxrpc_bundle *bundle)",
          "38: {",
          "39:  atomic_inc(&bundle->active);",
          "40: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             gfp_t gfp)",
          "114: {",
          "115:  struct rxrpc_bundle *bundle;",
          "117:  bundle = kzalloc(sizeof(*bundle), gfp);",
          "118:  if (bundle) {",
          "126:   refcount_set(&bundle->ref, 1);",
          "127:   atomic_set(&bundle->active, 1);",
          "128:   spin_lock_init(&bundle->channel_lock);",
          "",
          "[Removed Lines]",
          "112: static struct rxrpc_bundle *rxrpc_alloc_bundle(struct rxrpc_conn_parameters *cp,",
          "119:   bundle->local  = cp->local;",
          "120:   bundle->peer  = rxrpc_get_peer(cp->peer, rxrpc_peer_get_bundle);",
          "121:   bundle->key  = cp->key;",
          "122:   bundle->exclusive = cp->exclusive;",
          "123:   bundle->upgrade  = cp->upgrade;",
          "124:   bundle->service_id = cp->service_id;",
          "125:   bundle->security_level = cp->security_level;",
          "",
          "[Added Lines]",
          "115: static struct rxrpc_bundle *rxrpc_alloc_bundle(struct rxrpc_call *call,",
          "122:   bundle->local  = call->local;",
          "123:   bundle->peer  = rxrpc_get_peer(call->peer, rxrpc_peer_get_bundle);",
          "124:   bundle->key  = key_get(call->key);",
          "125:   bundle->security = call->security;",
          "126:   bundle->exclusive = test_bit(RXRPC_CALL_EXCLUSIVE, &call->flags);",
          "127:   bundle->upgrade  = test_bit(RXRPC_CALL_UPGRADE, &call->flags);",
          "128:   bundle->service_id = call->dest_srx.srx_service;",
          "129:   bundle->security_level = call->security_level;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146: {",
          "147:  trace_rxrpc_bundle(bundle->debug_id, 1, rxrpc_bundle_free);",
          "148:  rxrpc_put_peer(bundle->peer, rxrpc_peer_put_bundle);",
          "149:  kfree(bundle);",
          "150: }",
          "152: void rxrpc_put_bundle(struct rxrpc_bundle *bundle, enum rxrpc_bundle_trace why)",
          "153: {",
          "155:  bool dead;",
          "156:  int r;",
          "162: }",
          "",
          "[Removed Lines]",
          "154:  unsigned int id = bundle->debug_id;",
          "158:  dead = __refcount_dec_and_test(&bundle->ref, &r);",
          "159:  trace_rxrpc_bundle(id, r - 1, why);",
          "160:  if (dead)",
          "161:   rxrpc_free_bundle(bundle);",
          "",
          "[Added Lines]",
          "153:  key_put(bundle->key);",
          "159:  unsigned int id;",
          "163:  if (bundle) {",
          "164:   id = bundle->debug_id;",
          "165:   dead = __refcount_dec_and_test(&bundle->ref, &r);",
          "166:   trace_rxrpc_bundle(id, r - 1, why);",
          "167:   if (dead)",
          "168:    rxrpc_free_bundle(bundle);",
          "169:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277: {",
          "278:  static atomic_t rxrpc_bundle_id;",
          "279:  struct rxrpc_bundle *bundle, *candidate;",
          "281:  struct rb_node *p, **pp, *parent;",
          "282:  long diff;",
          "284:  _enter(\"{%px,%x,%u,%u}\",",
          "291:  _debug(\"search 1\");",
          "",
          "[Removed Lines]",
          "275: static struct rxrpc_bundle *rxrpc_look_up_bundle(struct rxrpc_conn_parameters *cp,",
          "276:        gfp_t gfp)",
          "280:  struct rxrpc_local *local = cp->local;",
          "285:         cp->peer, key_serial(cp->key), cp->security_level, cp->upgrade);",
          "287:  if (cp->exclusive)",
          "288:   return rxrpc_alloc_bundle(cp, gfp);",
          "",
          "[Added Lines]",
          "283: static struct rxrpc_bundle *rxrpc_look_up_bundle(struct rxrpc_call *call, gfp_t gfp)",
          "287:  struct rxrpc_local *local = call->local;",
          "290:  bool upgrade = test_bit(RXRPC_CALL_UPGRADE, &call->flags);",
          "293:         call->peer, key_serial(call->key), call->security_level,",
          "294:         upgrade);",
          "296:  if (test_bit(RXRPC_CALL_EXCLUSIVE, &call->flags)) {",
          "297:   call->bundle = rxrpc_alloc_bundle(call, gfp);",
          "298:   return call->bundle;",
          "299:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:  while (p) {",
          "295:   bundle = rb_entry(p, struct rxrpc_bundle, local_node);",
          "302: #undef cmp",
          "303:   if (diff < 0)",
          "304:    p = p->rb_left;",
          "",
          "[Removed Lines]",
          "297: #define cmp(X) ((long)bundle->X - (long)cp->X)",
          "298:   diff = (cmp(peer) ?:",
          "299:    cmp(key) ?:",
          "300:    cmp(security_level) ?:",
          "301:    cmp(upgrade));",
          "",
          "[Added Lines]",
          "308: #define cmp(X, Y) ((long)(X) - (long)(Y))",
          "309:   diff = (cmp(bundle->peer, call->peer) ?:",
          "310:    cmp(bundle->key, call->key) ?:",
          "311:    cmp(bundle->security_level, call->security_level) ?:",
          "312:    cmp(bundle->upgrade, upgrade));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "311:  _debug(\"not found\");",
          "315:  if (!candidate)",
          "318:  _debug(\"search 2\");",
          "319:  spin_lock(&local->client_bundles_lock);",
          "",
          "[Removed Lines]",
          "314:  candidate = rxrpc_alloc_bundle(cp, gfp);",
          "316:   return NULL;",
          "",
          "[Added Lines]",
          "325:  candidate = rxrpc_alloc_bundle(call, gfp);",
          "327:   return ERR_PTR(-ENOMEM);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "323:   parent = *pp;",
          "324:   bundle = rb_entry(parent, struct rxrpc_bundle, local_node);",
          "331: #undef cmp",
          "332:   if (diff < 0)",
          "333:    pp = &(*pp)->rb_left;",
          "",
          "[Removed Lines]",
          "326: #define cmp(X) ((long)bundle->X - (long)cp->X)",
          "327:   diff = (cmp(peer) ?:",
          "328:    cmp(key) ?:",
          "329:    cmp(security_level) ?:",
          "330:    cmp(upgrade));",
          "",
          "[Added Lines]",
          "337: #define cmp(X, Y) ((long)(X) - (long)(Y))",
          "338:   diff = (cmp(bundle->peer, call->peer) ?:",
          "339:    cmp(bundle->key, call->key) ?:",
          "340:    cmp(bundle->security_level, call->security_level) ?:",
          "341:    cmp(bundle->upgrade, upgrade));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "341:  candidate->debug_id = atomic_inc_return(&rxrpc_bundle_id);",
          "342:  rb_link_node(&candidate->local_node, parent, pp);",
          "343:  rb_insert_color(&candidate->local_node, &local->client_bundles);",
          "345:  spin_unlock(&local->client_bundles_lock);",
          "349: found_bundle_free:",
          "350:  rxrpc_free_bundle(candidate);",
          "351: found_bundle:",
          "354:  spin_unlock(&local->client_bundles_lock);",
          "357: }",
          "",
          "[Removed Lines]",
          "344:  rxrpc_get_bundle(candidate, rxrpc_bundle_get_client_call);",
          "346:  _leave(\" = %u [new]\", candidate->debug_id);",
          "347:  return candidate;",
          "352:  rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_call);",
          "353:  atomic_inc(&bundle->active);",
          "355:  _leave(\" = %u [found]\", bundle->debug_id);",
          "356:  return bundle;",
          "",
          "[Added Lines]",
          "355:  call->bundle = rxrpc_get_bundle(candidate, rxrpc_bundle_get_client_call);",
          "357:  _leave(\" = B=%u [new]\", call->bundle->debug_id);",
          "358:  return call->bundle;",
          "363:  call->bundle = rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_call);",
          "364:  rxrpc_activate_bundle(bundle);",
          "366:  _leave(\" = B=%u [found]\", call->bundle->debug_id);",
          "367:  return call->bundle;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "370: {",
          "371:  struct rxrpc_bundle *bundle;",
          "373:  _enter(\"{%d,%lx},\", call->debug_id, call->user_call_ID);",
          "377:   goto error;",
          "379:  call->tx_last_sent = ktime_get_real();",
          "381:  if (call->cong_cwnd >= call->cong_ssthresh)",
          "382:   call->cong_mode = RXRPC_CALL_CONGEST_AVOIDANCE;",
          "383:  else",
          "384:   call->cong_mode = RXRPC_CALL_SLOW_START;",
          "390:  if (!bundle)",
          "391:   goto error;",
          "",
          "[Removed Lines]",
          "365: static struct rxrpc_bundle *rxrpc_prep_call(struct rxrpc_sock *rx,",
          "366:          struct rxrpc_call *call,",
          "367:          struct rxrpc_conn_parameters *cp,",
          "368:          struct sockaddr_rxrpc *srx,",
          "369:          gfp_t gfp)",
          "375:  cp->peer = rxrpc_lookup_peer(cp->local, srx, gfp);",
          "376:  if (!cp->peer)",
          "380:  call->cong_ssthresh = cp->peer->cong_ssthresh;",
          "385:  if (cp->upgrade)",
          "386:   __set_bit(RXRPC_CALL_UPGRADE, &call->flags);",
          "389:  bundle = rxrpc_look_up_bundle(cp, gfp);",
          "",
          "[Added Lines]",
          "376: static struct rxrpc_bundle *rxrpc_prep_call(struct rxrpc_call *call, gfp_t gfp)",
          "382:  call->peer = rxrpc_lookup_peer(call->local, &call->dest_srx, gfp);",
          "383:  if (!call->peer)",
          "387:  call->cong_ssthresh = call->peer->cong_ssthresh;",
          "394:  bundle = rxrpc_look_up_bundle(call, gfp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "449:    if (old)",
          "450:     trace_rxrpc_client(old, -1, rxrpc_client_replace);",
          "451:    candidate->bundle_shift = shift;",
          "453:    bundle->conns[i] = candidate;",
          "454:    for (j = 0; j < RXRPC_MAXCALLS; j++)",
          "455:     set_bit(shift + j, &bundle->avail_chans);",
          "",
          "[Removed Lines]",
          "452:    atomic_inc(&bundle->active);",
          "",
          "[Added Lines]",
          "457:    rxrpc_activate_bundle(bundle);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "542:  rxrpc_see_call(call, rxrpc_call_see_activate_client);",
          "543:  list_del_init(&call->chan_wait_link);",
          "545:  call->conn = rxrpc_get_connection(conn, rxrpc_conn_get_activate_call);",
          "546:  call->cid = conn->proto.cid | channel;",
          "547:  call->call_id = call_id;",
          "",
          "[Removed Lines]",
          "544:  call->peer = rxrpc_get_peer(conn->peer, rxrpc_peer_get_activate_call);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "713: {",
          "714:  struct rxrpc_bundle *bundle;",
          "716:  int ret = 0;",
          "718:  _enter(\"{%d,%lx},\", call->debug_id, call->user_call_ID);",
          "",
          "[Removed Lines]",
          "708: int rxrpc_connect_call(struct rxrpc_sock *rx,",
          "709:          struct rxrpc_call *call,",
          "710:          struct rxrpc_conn_parameters *cp,",
          "711:          struct sockaddr_rxrpc *srx,",
          "712:          gfp_t gfp)",
          "715:  struct rxrpc_net *rxnet = cp->local->rxnet;",
          "",
          "[Added Lines]",
          "712: int rxrpc_connect_call(struct rxrpc_call *call, gfp_t gfp)",
          "715:  struct rxrpc_local *local = call->local;",
          "716:  struct rxrpc_net *rxnet = local->rxnet;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "722:  rxrpc_get_call(call, rxrpc_call_get_io_thread);",
          "725:  if (IS_ERR(bundle)) {",
          "726:   rxrpc_put_call(call, rxrpc_call_get_io_thread);",
          "727:   ret = PTR_ERR(bundle);",
          "",
          "[Removed Lines]",
          "724:  bundle = rxrpc_prep_call(rx, call, cp, srx, gfp);",
          "",
          "[Added Lines]",
          "725:  bundle = rxrpc_prep_call(call, gfp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "739:  smp_rmb();",
          "744: out:",
          "745:  _leave(\" = %d\", ret);",
          "746:  return ret;",
          "",
          "[Removed Lines]",
          "741: out_put_bundle:",
          "742:  rxrpc_deactivate_bundle(bundle);",
          "743:  rxrpc_put_bundle(bundle, rxrpc_bundle_get_client_call);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "758:  trace_rxrpc_client(call->conn, ret, rxrpc_client_chan_wait_failed);",
          "759:  rxrpc_set_call_completion(call, RXRPC_CALL_LOCAL_ERROR, 0, ret);",
          "760:  rxrpc_disconnect_client_call(bundle, call);",
          "762: }",
          "",
          "[Removed Lines]",
          "761:  goto out_put_bundle;",
          "",
          "[Added Lines]",
          "759:  goto out;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "949: {",
          "951:  bool need_put = false;",
          "953:  if (atomic_dec_and_lock(&bundle->active, &local->client_bundles_lock)) {",
          "954:   if (!bundle->exclusive) {",
          "955:    _debug(\"erase bundle\");",
          "",
          "[Removed Lines]",
          "948: static void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle)",
          "950:  struct rxrpc_local *local = bundle->local;",
          "",
          "[Added Lines]",
          "946: void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle)",
          "948:  struct rxrpc_local *local;",
          "951:  if (!bundle)",
          "952:   return;",
          "954:  local = bundle->local;",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c": [
          "File: net/rxrpc/conn_object.c -> net/rxrpc/conn_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:  }",
          "210:  if (rxrpc_is_client_call(call)) {",
          "212:  } else {",
          "213:   spin_lock(&conn->bundle->channel_lock);",
          "214:   __rxrpc_disconnect_call(conn, call);",
          "",
          "[Removed Lines]",
          "211:   rxrpc_disconnect_client_call(conn->bundle, call);",
          "",
          "[Added Lines]",
          "211:   rxrpc_disconnect_client_call(call->bundle, call);",
          "",
          "---------------"
        ],
        "net/rxrpc/sendmsg.c||net/rxrpc/sendmsg.c": [
          "File: net/rxrpc/sendmsg.c -> net/rxrpc/sendmsg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:          atomic_inc_return(&rxrpc_debug_id));",
          "568:  _leave(\" = %p\\n\", call);",
          "569:  return call;",
          "570: }",
          "",
          "[Removed Lines]",
          "567:  rxrpc_put_peer(cp.peer, rxrpc_peer_put_discard_tmp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d35d880e0e4a3ab32d8c12f9e4d76198aadd42d",
      "candidate_info": {
        "commit_hash": "9d35d880e0e4a3ab32d8c12f9e4d76198aadd42d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9d35d880e0e4a3ab32d8c12f9e4d76198aadd42d",
        "files": [
          "include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h",
          "net/rxrpc/call_object.c",
          "net/rxrpc/call_state.c",
          "net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c",
          "net/rxrpc/io_thread.c",
          "net/rxrpc/local_object.c",
          "net/rxrpc/proc.c",
          "net/rxrpc/rxkad.c",
          "net/rxrpc/security.c",
          "net/rxrpc/sendmsg.c"
        ],
        "message": "rxrpc: Move client call connection to the I/O thread\n\nMove the connection setup of client calls to the I/O thread so that a whole\nload of locking and barrierage can be eliminated.  This necessitates the\napp thread waiting for connection to complete before it can begin\nencrypting data.\n\nThis also completes the fix for a race that exists between call connection\nand call disconnection whereby the data transmission code adds the call to\nthe peer error distribution list after the call has been disconnected (say\nby the rxrpc socket getting closed).\n\nThe fix is to complete the process of moving call connection, data\ntransmission and call disconnection into the I/O thread and thus forcibly\nserialising them.\n\nNote that the issue may predate the overhaul to an I/O thread model that\nwere included in the merge window for v6.2, but the timing is very much\nchanged by the change given below.\n\nFixes: cf37b5987508 (\"rxrpc: Move DATA transmission into call processor work item\")\nReported-by: syzbot+c22650d2844392afdcfd@syzkaller.appspotmail.com\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org",
        "before_after_code_files": [
          "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
          "net/rxrpc/call_object.c||net/rxrpc/call_object.c",
          "net/rxrpc/call_state.c||net/rxrpc/call_state.c",
          "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c",
          "net/rxrpc/io_thread.c||net/rxrpc/io_thread.c",
          "net/rxrpc/local_object.c||net/rxrpc/local_object.c",
          "net/rxrpc/proc.c||net/rxrpc/proc.c",
          "net/rxrpc/rxkad.c||net/rxrpc/rxkad.c",
          "net/rxrpc/security.c||net/rxrpc/security.c",
          "net/rxrpc/sendmsg.c||net/rxrpc/sendmsg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ],
          "candidate": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ]
        }
      },
      "candidate_diff": {
        "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h": [
          "File: include/trace/events/rxrpc.h -> include/trace/events/rxrpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:  EM(rxrpc_conn_put_call,   \"PUT call    \") \\",
          "219:  EM(rxrpc_conn_put_call_input,  \"PUT inp-call\") \\",
          "220:  EM(rxrpc_conn_put_conn_input,  \"PUT inp-conn\") \\",
          "222:  EM(rxrpc_conn_put_discard_idle,  \"PUT disc-idl\") \\",
          "223:  EM(rxrpc_conn_put_local_dead,  \"PUT loc-dead\") \\",
          "224:  EM(rxrpc_conn_put_noreuse,  \"PUT noreuse \") \\",
          "",
          "[Removed Lines]",
          "221:  EM(rxrpc_conn_put_discard,  \"PUT discard \") \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:  EM(rxrpc_client_chan_activate,  \"ChActv\") \\",
          "241:  EM(rxrpc_client_chan_disconnect, \"ChDisc\") \\",
          "242:  EM(rxrpc_client_chan_pass,  \"ChPass\") \\",
          "244:  EM(rxrpc_client_cleanup,  \"Clean \") \\",
          "245:  EM(rxrpc_client_discard,  \"Discar\") \\",
          "247:  EM(rxrpc_client_exposed,  \"Expose\") \\",
          "248:  EM(rxrpc_client_replace,  \"Replac\") \\",
          "249:  EM(rxrpc_client_to_active,  \"->Actv\") \\",
          "250:  E_(rxrpc_client_to_idle,  \"->Idle\")",
          "",
          "[Removed Lines]",
          "243:  EM(rxrpc_client_chan_wait_failed, \"ChWtFl\") \\",
          "246:  EM(rxrpc_client_duplicate,  \"Duplic\") \\",
          "",
          "[Added Lines]",
          "246:  EM(rxrpc_client_queue_new_call,  \"Q-Call\") \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:  EM(rxrpc_call_put_sendmsg,  \"PUT sendmsg \") \\",
          "274:  EM(rxrpc_call_put_unnotify,  \"PUT unnotify\") \\",
          "275:  EM(rxrpc_call_put_userid_exists, \"PUT u-exists\") \\",
          "276:  EM(rxrpc_call_see_accept,  \"SEE accept  \") \\",
          "277:  EM(rxrpc_call_see_activate_client, \"SEE act-clnt\") \\",
          "278:  EM(rxrpc_call_see_connect_failed, \"SEE con-fail\") \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:  EM(rxrpc_call_put_userid,  \"PUT user-id \") \\",
          "",
          "---------------"
        ],
        "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
          "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "443:  spinlock_t  channel_lock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "866:       struct sockaddr_rxrpc *,",
          "867:       struct rxrpc_call_params *, gfp_t,",
          "868:       unsigned int);",
          "869: void rxrpc_incoming_call(struct rxrpc_sock *, struct rxrpc_call *,",
          "870:     struct sk_buff *);",
          "871: void rxrpc_release_call(struct rxrpc_sock *, struct rxrpc_call *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868: void rxrpc_start_call_timer(struct rxrpc_call *call);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905: {",
          "907:  smp_store_release(&call->_state, state);",
          "908: }",
          "910: static inline enum rxrpc_call_state __rxrpc_call_state(const struct rxrpc_call *call)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:  wake_up(&call->waitq);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "940: extern unsigned long rxrpc_conn_idle_client_expiry;",
          "941: extern unsigned long rxrpc_conn_idle_client_fast_expiry;",
          "944: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "945: void rxrpc_put_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "947: void rxrpc_expose_client_call(struct rxrpc_call *);",
          "948: void rxrpc_disconnect_client_call(struct rxrpc_bundle *, struct rxrpc_call *);",
          "949: void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle);",
          "",
          "[Removed Lines]",
          "943: void rxrpc_destroy_client_conn_ids(struct rxrpc_local *local);",
          "946: int rxrpc_connect_call(struct rxrpc_call *call, gfp_t gfp);",
          "",
          "[Added Lines]",
          "944: void rxrpc_purge_client_connections(struct rxrpc_local *local);",
          "947: int rxrpc_look_up_bundle(struct rxrpc_call *call, gfp_t gfp);",
          "948: void rxrpc_connect_client_calls(struct rxrpc_local *local);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_object.c||net/rxrpc/call_object.c": [
          "File: net/rxrpc/call_object.c -> net/rxrpc/call_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:  timer_setup(&call->timer, rxrpc_call_timer_expired, 0);",
          "151:  INIT_WORK(&call->destroyer, rxrpc_destroy_call);",
          "152:  INIT_LIST_HEAD(&call->link);",
          "154:  INIT_LIST_HEAD(&call->accept_link);",
          "155:  INIT_LIST_HEAD(&call->recvmsg_link);",
          "156:  INIT_LIST_HEAD(&call->sock_link);",
          "",
          "[Removed Lines]",
          "153:  INIT_LIST_HEAD(&call->chan_wait_link);",
          "",
          "[Added Lines]",
          "153:  INIT_LIST_HEAD(&call->wait_link);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246: {",
          "247:  unsigned long now = jiffies;",
          "248:  unsigned long j = now + MAX_JIFFY_OFFSET;",
          "",
          "[Removed Lines]",
          "245: static void rxrpc_start_call_timer(struct rxrpc_call *call)",
          "",
          "[Added Lines]",
          "245: void rxrpc_start_call_timer(struct rxrpc_call *call)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:  up(limiter);",
          "287: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: static int rxrpc_connect_call(struct rxrpc_call *call, gfp_t gfp)",
          "295: {",
          "296:  struct rxrpc_local *local = call->local;",
          "297:  int ret = 0;",
          "299:  _enter(\"{%d,%lx},\", call->debug_id, call->user_call_ID);",
          "301:  call->peer = rxrpc_lookup_peer(local, &call->dest_srx, gfp);",
          "302:  if (!call->peer)",
          "303:   goto error;",
          "305:  ret = rxrpc_look_up_bundle(call, gfp);",
          "306:  if (ret < 0)",
          "307:   goto error;",
          "309:  trace_rxrpc_client(NULL, -1, rxrpc_client_queue_new_call);",
          "310:  rxrpc_get_call(call, rxrpc_call_get_io_thread);",
          "311:  spin_lock(&local->client_call_lock);",
          "312:  list_add_tail(&call->wait_link, &local->new_client_calls);",
          "313:  spin_unlock(&local->client_call_lock);",
          "314:  rxrpc_wake_up_io_thread(local);",
          "315:  return 0;",
          "317: error:",
          "318:  __set_bit(RXRPC_CALL_DISCONNECTED, &call->flags);",
          "319:  return ret;",
          "320: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:  if (ret < 0)",
          "370:   goto error_attached_to_socket;",
          "376:  _leave(\" = %p [new]\", call);",
          "377:  return call;",
          "",
          "[Removed Lines]",
          "372:  rxrpc_see_call(call, rxrpc_call_see_connected);",
          "374:  rxrpc_start_call_timer(call);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "387:  rxrpc_prefail_call(call, RXRPC_CALL_LOCAL_ERROR, -EEXIST);",
          "388:  trace_rxrpc_call(call->debug_id, refcount_read(&call->ref), 0,",
          "389:     rxrpc_call_see_userid_exists);",
          "391:  mutex_unlock(&call->user_mutex);",
          "392:  rxrpc_put_call(call, rxrpc_call_put_userid_exists);",
          "393:  _leave(\" = -EEXIST\");",
          "394:  return ERR_PTR(-EEXIST);",
          "401: error_attached_to_socket:",
          "402:  trace_rxrpc_call(call->debug_id, refcount_read(&call->ref), ret,",
          "403:     rxrpc_call_see_connect_failed);",
          "406:  _leave(\" = c=%08x [err]\", call->debug_id);",
          "407:  return call;",
          "408: }",
          "",
          "[Removed Lines]",
          "390:  rxrpc_release_call(rx, call);",
          "404:  set_bit(RXRPC_CALL_DISCONNECTED, &call->flags);",
          "405:  rxrpc_prefail_call(call, RXRPC_CALL_LOCAL_ERROR, ret);",
          "",
          "[Added Lines]",
          "432:  rxrpc_set_call_completion(call, RXRPC_CALL_LOCAL_ERROR, 0, ret);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:  chan = sp->hdr.cid & RXRPC_CHANNELMASK;",
          "461:  conn->channels[chan].call_counter = call->call_id;",
          "462:  conn->channels[chan].call_id = call->call_id;",
          "464:  spin_unlock(&conn->state_lock);",
          "466:  spin_lock(&conn->peer->lock);",
          "",
          "[Removed Lines]",
          "463:  rcu_assign_pointer(conn->channels[chan].call, call);",
          "",
          "[Added Lines]",
          "490:  conn->channels[chan].call = call;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "520: void rxrpc_release_call(struct rxrpc_sock *rx, struct rxrpc_call *call)",
          "521: {",
          "522:  struct rxrpc_connection *conn = call->conn;",
          "525:  _enter(\"{%d,%d}\", call->debug_id, refcount_read(&call->ref));",
          "",
          "[Removed Lines]",
          "523:  bool put = false;",
          "",
          "[Added Lines]",
          "550:  bool put = false, putu = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "555:  if (test_and_clear_bit(RXRPC_CALL_HAS_USERID, &call->flags)) {",
          "556:   rb_erase(&call->sock_node, &rx->calls);",
          "557:   memset(&call->sock_node, 0xdd, sizeof(call->sock_node));",
          "559:  }",
          "561:  list_del(&call->sock_link);",
          "",
          "[Removed Lines]",
          "558:   rxrpc_put_call(call, rxrpc_call_put_userid_exists);",
          "",
          "[Added Lines]",
          "585:   putu = true;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "564:  _debug(\"RELEASE CALL %p (%d CONN %p)\", call, call->debug_id, conn);",
          "566:  _leave(\"\");",
          "567: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:  if (putu)",
          "594:   rxrpc_put_call(call, rxrpc_call_put_userid);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_state.c||net/rxrpc/call_state.c": [
          "File: net/rxrpc/call_state.c -> net/rxrpc/call_state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  call->completion = compl;",
          "66:  call->_state  = RXRPC_CALL_COMPLETE;",
          "67:  trace_rxrpc_call_complete(call);",
          "69: }",
          "",
          "[Removed Lines]",
          "68:  __set_bit(RXRPC_CALL_RELEASED, &call->flags);",
          "",
          "[Added Lines]",
          "68:  WARN_ON_ONCE(__test_and_set_bit(RXRPC_CALL_RELEASED, &call->flags));",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
          "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  atomic_inc(&bundle->active);",
          "40: }",
          "83: static void rxrpc_put_client_connection_id(struct rxrpc_local *local,",
          "84:         struct rxrpc_connection *conn)",
          "85: {",
          "91: }",
          "97: {",
          "98:  struct rxrpc_connection *conn;",
          "99:  int id;",
          "",
          "[Removed Lines]",
          "48: static int rxrpc_get_client_connection_id(struct rxrpc_connection *conn,",
          "49:        gfp_t gfp)",
          "50: {",
          "51:  struct rxrpc_local *local = conn->local;",
          "52:  int id;",
          "54:  _enter(\"\");",
          "56:  idr_preload(gfp);",
          "57:  spin_lock(&local->conn_lock);",
          "59:  id = idr_alloc_cyclic(&local->conn_ids, conn,",
          "60:          1, 0x40000000, GFP_NOWAIT);",
          "61:  if (id < 0)",
          "62:   goto error;",
          "64:  spin_unlock(&local->conn_lock);",
          "65:  idr_preload_end();",
          "67:  conn->proto.epoch = local->rxnet->epoch;",
          "68:  conn->proto.cid = id << RXRPC_CIDSHIFT;",
          "69:  set_bit(RXRPC_CONN_HAS_IDR, &conn->flags);",
          "70:  _leave(\" [CID %x]\", conn->proto.cid);",
          "71:  return 0;",
          "73: error:",
          "74:  spin_unlock(&local->conn_lock);",
          "75:  idr_preload_end();",
          "76:  _leave(\" = %d\", id);",
          "77:  return id;",
          "78: }",
          "86:  if (test_bit(RXRPC_CONN_HAS_IDR, &conn->flags)) {",
          "87:   spin_lock(&local->conn_lock);",
          "88:   idr_remove(&local->conn_ids, conn->proto.cid >> RXRPC_CIDSHIFT);",
          "89:   spin_unlock(&local->conn_lock);",
          "90:  }",
          "96: void rxrpc_destroy_client_conn_ids(struct rxrpc_local *local)",
          "",
          "[Added Lines]",
          "48:  idr_remove(&local->conn_ids, conn->proto.cid >> RXRPC_CIDSHIFT);",
          "54: static void rxrpc_destroy_client_conn_ids(struct rxrpc_local *local)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:   bundle->security_level = call->security_level;",
          "130:   refcount_set(&bundle->ref, 1);",
          "131:   atomic_set(&bundle->active, 1);",
          "133:   INIT_LIST_HEAD(&bundle->waiting_calls);",
          "134:   trace_rxrpc_bundle(bundle->debug_id, 1, rxrpc_bundle_new);",
          "135:  }",
          "",
          "[Removed Lines]",
          "132:   spin_lock_init(&bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:  }",
          "170: }",
          "175: static struct rxrpc_connection *",
          "177: {",
          "178:  struct rxrpc_connection *conn;",
          "182:  _enter(\"\");",
          "187:   return ERR_PTR(-ENOMEM);",
          "188:  }",
          "190:  refcount_set(&conn->ref, 1);",
          "195:  conn->exclusive  = bundle->exclusive;",
          "196:  conn->upgrade  = bundle->upgrade;",
          "197:  conn->orig_service_id = bundle->service_id;",
          "198:  conn->security_level = bundle->security_level;",
          "201:  conn->service_id = conn->orig_service_id;",
          "211:  atomic_inc(&rxnet->nr_conns);",
          "212:  write_lock(&rxnet->conn_lock);",
          "213:  list_add_tail(&conn->proc_link, &rxnet->conn_proc_list);",
          "214:  write_unlock(&rxnet->conn_lock);",
          "224:  atomic_inc(&rxnet->nr_client_conns);",
          "225:  trace_rxrpc_client(conn, -1, rxrpc_client_alloc);",
          "227:  return conn;",
          "235: }",
          "",
          "[Removed Lines]",
          "176: rxrpc_alloc_client_connection(struct rxrpc_bundle *bundle, gfp_t gfp)",
          "179:  struct rxrpc_net *rxnet = bundle->local->rxnet;",
          "180:  int ret;",
          "184:  conn = rxrpc_alloc_connection(rxnet, gfp);",
          "185:  if (!conn) {",
          "186:   _leave(\" = -ENOMEM\");",
          "191:  conn->bundle  = bundle;",
          "192:  conn->local  = bundle->local;",
          "193:  conn->peer  = bundle->peer;",
          "194:  conn->key  = bundle->key;",
          "199:  conn->out_clientflag = RXRPC_CLIENT_INITIATED;",
          "200:  conn->state  = RXRPC_CONN_CLIENT;",
          "203:  ret = rxrpc_get_client_connection_id(conn, gfp);",
          "204:  if (ret < 0)",
          "205:   goto error_0;",
          "207:  ret = rxrpc_init_client_conn_security(conn);",
          "208:  if (ret < 0)",
          "209:   goto error_1;",
          "216:  rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_conn);",
          "217:  rxrpc_get_peer(conn->peer, rxrpc_peer_get_client_conn);",
          "218:  rxrpc_get_local(conn->local, rxrpc_local_get_client_conn);",
          "219:  key_get(conn->key);",
          "221:  trace_rxrpc_conn(conn->debug_id, refcount_read(&conn->ref),",
          "222:     rxrpc_conn_new_client);",
          "226:  _leave(\" = %p\", conn);",
          "229: error_1:",
          "230:  rxrpc_put_client_connection_id(bundle->local, conn);",
          "231: error_0:",
          "232:  kfree(conn);",
          "233:  _leave(\" = %d\", ret);",
          "234:  return ERR_PTR(ret);",
          "",
          "[Added Lines]",
          "133: void rxrpc_purge_client_connections(struct rxrpc_local *local)",
          "134: {",
          "135:  rxrpc_destroy_client_conn_ids(local);",
          "136: }",
          "142: rxrpc_alloc_client_connection(struct rxrpc_bundle *bundle)",
          "145:  struct rxrpc_local *local = bundle->local;",
          "146:  struct rxrpc_net *rxnet = local->rxnet;",
          "147:  int id;",
          "151:  conn = rxrpc_alloc_connection(rxnet, GFP_ATOMIC | __GFP_NOWARN);",
          "152:  if (!conn)",
          "155:  id = idr_alloc_cyclic(&local->conn_ids, conn, 1, 0x40000000,",
          "156:          GFP_ATOMIC | __GFP_NOWARN);",
          "157:  if (id < 0) {",
          "158:   kfree(conn);",
          "159:   return ERR_PTR(id);",
          "163:  conn->proto.cid  = id << RXRPC_CIDSHIFT;",
          "164:  conn->proto.epoch = local->rxnet->epoch;",
          "165:  conn->out_clientflag = RXRPC_CLIENT_INITIATED;",
          "166:  conn->bundle  = rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_conn);",
          "167:  conn->local  = rxrpc_get_local(bundle->local, rxrpc_local_get_client_conn);",
          "168:  conn->peer  = rxrpc_get_peer(bundle->peer, rxrpc_peer_get_client_conn);",
          "169:  conn->key  = key_get(bundle->key);",
          "170:  conn->security  = bundle->security;",
          "175:  conn->state  = RXRPC_CONN_CLIENT_UNSECURED;",
          "178:  if (conn->security == &rxrpc_no_security)",
          "179:   conn->state = RXRPC_CONN_CLIENT;",
          "186:  rxrpc_see_connection(conn, rxrpc_conn_new_client);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249:  if (test_bit(RXRPC_CONN_DONT_REUSE, &conn->flags))",
          "250:   goto dont_reuse;",
          "253:      conn->proto.epoch != rxnet->epoch)",
          "254:   goto mark_dont_reuse;",
          "",
          "[Removed Lines]",
          "252:  if (conn->state != RXRPC_CONN_CLIENT ||",
          "",
          "[Added Lines]",
          "208:  if ((conn->state != RXRPC_CONN_CLIENT_UNSECURED &&",
          "209:       conn->state != RXRPC_CONN_CLIENT) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284: {",
          "285:  static atomic_t rxrpc_bundle_id;",
          "286:  struct rxrpc_bundle *bundle, *candidate;",
          "",
          "[Removed Lines]",
          "283: static struct rxrpc_bundle *rxrpc_look_up_bundle(struct rxrpc_call *call, gfp_t gfp)",
          "",
          "[Added Lines]",
          "240: int rxrpc_look_up_bundle(struct rxrpc_call *call, gfp_t gfp)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:  if (test_bit(RXRPC_CALL_EXCLUSIVE, &call->flags)) {",
          "297:   call->bundle = rxrpc_alloc_bundle(call, gfp);",
          "299:  }",
          "",
          "[Removed Lines]",
          "298:   return call->bundle;",
          "",
          "[Added Lines]",
          "255:   return call->bundle ? 0 : -ENOMEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325:  candidate = rxrpc_alloc_bundle(call, gfp);",
          "326:  if (!candidate)",
          "329:  _debug(\"search 2\");",
          "330:  spin_lock(&local->client_bundles_lock);",
          "",
          "[Removed Lines]",
          "327:   return ERR_PTR(-ENOMEM);",
          "",
          "[Added Lines]",
          "284:   return -ENOMEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "355:  call->bundle = rxrpc_get_bundle(candidate, rxrpc_bundle_get_client_call);",
          "356:  spin_unlock(&local->client_bundles_lock);",
          "357:  _leave(\" = B=%u [new]\", call->bundle->debug_id);",
          "360: found_bundle_free:",
          "361:  rxrpc_free_bundle(candidate);",
          "",
          "[Removed Lines]",
          "358:  return call->bundle;",
          "",
          "[Added Lines]",
          "315:  return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:  rxrpc_activate_bundle(bundle);",
          "365:  spin_unlock(&local->client_bundles_lock);",
          "366:  _leave(\" = B=%u [found]\", call->bundle->debug_id);",
          "411: }",
          "418: {",
          "444:  }",
          "466:  }",
          "478: }",
          "485: {",
          "489:  _enter(\"\");",
          "494:  usable = 0;",
          "496:   if (rxrpc_may_reuse_conn(bundle->conns[i]))",
          "497:    usable++;",
          "504:  }",
          "506:  if (!usable)",
          "507:   goto alloc_conn;",
          "509:  if (!bundle->avail_chans &&",
          "510:      !bundle->try_upgrade &&",
          "512:      usable < ARRAY_SIZE(bundle->conns))",
          "513:   goto alloc_conn;",
          "516:  _leave(\"\");",
          "519: alloc_conn:",
          "521: }",
          "",
          "[Removed Lines]",
          "367:  return call->bundle;",
          "368: }",
          "376: static struct rxrpc_bundle *rxrpc_prep_call(struct rxrpc_call *call, gfp_t gfp)",
          "377: {",
          "378:  struct rxrpc_bundle *bundle;",
          "380:  _enter(\"{%d,%lx},\", call->debug_id, call->user_call_ID);",
          "382:  call->peer = rxrpc_lookup_peer(call->local, &call->dest_srx, gfp);",
          "383:  if (!call->peer)",
          "384:   goto error;",
          "386:  call->tx_last_sent = ktime_get_real();",
          "387:  call->cong_ssthresh = call->peer->cong_ssthresh;",
          "388:  if (call->cong_cwnd >= call->cong_ssthresh)",
          "389:   call->cong_mode = RXRPC_CALL_CONGEST_AVOIDANCE;",
          "390:  else",
          "391:   call->cong_mode = RXRPC_CALL_SLOW_START;",
          "394:  bundle = rxrpc_look_up_bundle(call, gfp);",
          "395:  if (!bundle)",
          "396:   goto error;",
          "401:  spin_lock(&bundle->channel_lock);",
          "402:  list_add_tail(&call->chan_wait_link, &bundle->waiting_calls);",
          "403:  spin_unlock(&bundle->channel_lock);",
          "405:  _leave(\" = [B=%x]\", bundle->debug_id);",
          "406:  return bundle;",
          "408: error:",
          "409:  _leave(\" = -ENOMEM\");",
          "410:  return ERR_PTR(-ENOMEM);",
          "416: static void rxrpc_add_conn_to_bundle(struct rxrpc_bundle *bundle, gfp_t gfp)",
          "417:  __releases(bundle->channel_lock)",
          "419:  struct rxrpc_connection *candidate = NULL, *old = NULL;",
          "420:  bool conflict;",
          "421:  int i;",
          "423:  _enter(\"\");",
          "425:  conflict = bundle->alloc_conn;",
          "426:  if (!conflict)",
          "427:   bundle->alloc_conn = true;",
          "428:  spin_unlock(&bundle->channel_lock);",
          "429:  if (conflict) {",
          "430:   _leave(\" [conf]\");",
          "431:   return;",
          "432:  }",
          "434:  candidate = rxrpc_alloc_client_connection(bundle, gfp);",
          "436:  spin_lock(&bundle->channel_lock);",
          "437:  bundle->alloc_conn = false;",
          "439:  if (IS_ERR(candidate)) {",
          "440:   bundle->alloc_error = PTR_ERR(candidate);",
          "441:   spin_unlock(&bundle->channel_lock);",
          "442:   _leave(\" [err %ld]\", PTR_ERR(candidate));",
          "443:   return;",
          "446:  bundle->alloc_error = 0;",
          "448:  for (i = 0; i < ARRAY_SIZE(bundle->conns); i++) {",
          "449:   unsigned int shift = i * RXRPC_MAXCALLS;",
          "450:   int j;",
          "452:   old = bundle->conns[i];",
          "453:   if (!rxrpc_may_reuse_conn(old)) {",
          "454:    if (old)",
          "455:     trace_rxrpc_client(old, -1, rxrpc_client_replace);",
          "456:    candidate->bundle_shift = shift;",
          "457:    rxrpc_activate_bundle(bundle);",
          "458:    bundle->conns[i] = candidate;",
          "459:    for (j = 0; j < RXRPC_MAXCALLS; j++)",
          "460:     set_bit(shift + j, &bundle->avail_chans);",
          "461:    candidate = NULL;",
          "462:    break;",
          "463:   }",
          "465:   old = NULL;",
          "468:  spin_unlock(&bundle->channel_lock);",
          "470:  if (candidate) {",
          "471:   _debug(\"discard C=%x\", candidate->debug_id);",
          "472:   trace_rxrpc_client(candidate, -1, rxrpc_client_duplicate);",
          "473:   rxrpc_put_connection(candidate, rxrpc_conn_put_discard);",
          "474:  }",
          "476:  rxrpc_put_connection(old, rxrpc_conn_put_noreuse);",
          "477:  _leave(\"\");",
          "484: static void rxrpc_maybe_add_conn(struct rxrpc_bundle *bundle, gfp_t gfp)",
          "486:  struct rxrpc_call *call;",
          "487:  int i, usable;",
          "491:  spin_lock(&bundle->channel_lock);",
          "495:  for (i = 0; i < ARRAY_SIZE(bundle->conns); i++)",
          "499:  if (!usable && !list_empty(&bundle->waiting_calls)) {",
          "500:   call = list_first_entry(&bundle->waiting_calls,",
          "501:      struct rxrpc_call, chan_wait_link);",
          "502:   if (test_bit(RXRPC_CALL_UPGRADE, &call->flags))",
          "503:    bundle->try_upgrade = true;",
          "511:      !list_empty(&bundle->waiting_calls) &&",
          "515:  spin_unlock(&bundle->channel_lock);",
          "517:  return;",
          "520:  return rxrpc_add_conn_to_bundle(bundle, gfp);",
          "",
          "[Added Lines]",
          "324:  return 0;",
          "330: static bool rxrpc_add_conn_to_bundle(struct rxrpc_bundle *bundle,",
          "331:          unsigned int slot)",
          "333:  struct rxrpc_connection *conn, *old;",
          "334:  unsigned int shift = slot * RXRPC_MAXCALLS;",
          "335:  unsigned int i;",
          "337:  old = bundle->conns[slot];",
          "338:  if (old) {",
          "339:   bundle->conns[slot] = NULL;",
          "340:   trace_rxrpc_client(old, -1, rxrpc_client_replace);",
          "341:   rxrpc_put_connection(old, rxrpc_conn_put_noreuse);",
          "344:  conn = rxrpc_alloc_client_connection(bundle);",
          "345:  if (IS_ERR(conn)) {",
          "346:   bundle->alloc_error = PTR_ERR(conn);",
          "347:   return false;",
          "350:  rxrpc_activate_bundle(bundle);",
          "351:  conn->bundle_shift = shift;",
          "352:  bundle->conns[slot] = conn;",
          "353:  for (i = 0; i < RXRPC_MAXCALLS; i++)",
          "354:   set_bit(shift + i, &bundle->avail_chans);",
          "355:  return true;",
          "362: static bool rxrpc_bundle_has_space(struct rxrpc_bundle *bundle)",
          "364:  int slot = -1, i, usable;",
          "368:  bundle->alloc_error = 0;",
          "372:  for (i = 0; i < ARRAY_SIZE(bundle->conns); i++) {",
          "375:   else if (slot == -1)",
          "376:    slot = i;",
          "379:  if (!usable && bundle->upgrade)",
          "380:   bundle->try_upgrade = true;",
          "391:  return usable;",
          "394:  return slot >= 0 ? rxrpc_add_conn_to_bundle(bundle, slot) : false;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "531:  struct rxrpc_channel *chan = &conn->channels[channel];",
          "532:  struct rxrpc_bundle *bundle = conn->bundle;",
          "533:  struct rxrpc_call *call = list_entry(bundle->waiting_calls.next,",
          "535:  u32 call_id = chan->call_counter + 1;",
          "537:  _enter(\"C=%x,%u\", conn->debug_id, channel);",
          "539:  trace_rxrpc_client(conn, channel, rxrpc_client_chan_activate);",
          "",
          "[Removed Lines]",
          "534:           struct rxrpc_call, chan_wait_link);",
          "",
          "[Added Lines]",
          "408:           struct rxrpc_call, wait_link);",
          "413:  list_del_init(&call->wait_link);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "545:  clear_bit(conn->bundle_shift + channel, &bundle->avail_chans);",
          "547:  rxrpc_see_call(call, rxrpc_call_see_activate_client);",
          "549:  call->conn = rxrpc_get_connection(conn, rxrpc_conn_get_activate_call);",
          "550:  call->cid = conn->proto.cid | channel;",
          "551:  call->call_id = call_id;",
          "552:  call->dest_srx.srx_service = conn->service_id;",
          "570:  chan->call_id  = call_id;",
          "571:  chan->call_debug_id = call->debug_id;",
          "573:  wake_up(&call->waitq);",
          "574: }",
          "580: {",
          "584:  if (!list_empty(&conn->cache_link)) {",
          "594:  }",
          "595: }",
          "602: {",
          "603:  struct rxrpc_connection *conn;",
          "604:  unsigned long avail, mask;",
          "605:  unsigned int channel, slot;",
          "607:  if (bundle->try_upgrade)",
          "608:   mask = 1;",
          "609:  else",
          "",
          "[Removed Lines]",
          "548:  list_del_init(&call->chan_wait_link);",
          "554:  trace_rxrpc_connect_call(call);",
          "556:  rxrpc_set_call_state(call, RXRPC_CALL_CLIENT_SEND_REQUEST);",
          "568:  smp_wmb();",
          "572:  rcu_assign_pointer(chan->call, call);",
          "579: static void rxrpc_unidle_conn(struct rxrpc_bundle *bundle, struct rxrpc_connection *conn)",
          "581:  struct rxrpc_local *local = bundle->local;",
          "582:  bool drop_ref;",
          "585:   drop_ref = false;",
          "586:   spin_lock(&local->client_conn_cache_lock);",
          "587:   if (!list_empty(&conn->cache_link)) {",
          "588:    list_del_init(&conn->cache_link);",
          "589:    drop_ref = true;",
          "590:   }",
          "591:   spin_unlock(&local->client_conn_cache_lock);",
          "592:   if (drop_ref)",
          "593:    rxrpc_put_connection(conn, rxrpc_conn_put_unidle);",
          "601: static void rxrpc_activate_channels_locked(struct rxrpc_bundle *bundle)",
          "",
          "[Added Lines]",
          "428:  call->cong_ssthresh = call->peer->cong_ssthresh;",
          "429:  if (call->cong_cwnd >= call->cong_ssthresh)",
          "430:   call->cong_mode = RXRPC_CALL_CONGEST_AVOIDANCE;",
          "431:  else",
          "432:   call->cong_mode = RXRPC_CALL_SLOW_START;",
          "436:  chan->call  = call;",
          "438:  rxrpc_see_call(call, rxrpc_call_see_connected);",
          "439:  trace_rxrpc_connect_call(call);",
          "440:  call->tx_last_sent = ktime_get_real();",
          "441:  rxrpc_start_call_timer(call);",
          "442:  rxrpc_set_call_state(call, RXRPC_CALL_CLIENT_SEND_REQUEST);",
          "449: static void rxrpc_unidle_conn(struct rxrpc_connection *conn)",
          "452:   list_del_init(&conn->cache_link);",
          "453:   rxrpc_put_connection(conn, rxrpc_conn_put_unidle);",
          "460: static void rxrpc_activate_channels(struct rxrpc_bundle *bundle)",
          "466:  trace_rxrpc_client(NULL, -1, rxrpc_client_activate_chans);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "624:   if (bundle->try_upgrade)",
          "625:    set_bit(RXRPC_CONN_PROBING_FOR_UPGRADE, &conn->flags);",
          "628:   channel &= (RXRPC_MAXCALLS - 1);",
          "629:   conn->act_chans |= 1 << channel;",
          "",
          "[Removed Lines]",
          "626:   rxrpc_unidle_conn(bundle, conn);",
          "",
          "[Added Lines]",
          "487:   rxrpc_unidle_conn(conn);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "632: }",
          "711: {",
          "748:  }",
          "754: }",
          "",
          "[Removed Lines]",
          "637: static void rxrpc_activate_channels(struct rxrpc_bundle *bundle)",
          "638: {",
          "639:  _enter(\"B=%x\", bundle->debug_id);",
          "641:  trace_rxrpc_client(NULL, -1, rxrpc_client_activate_chans);",
          "643:  if (!bundle->avail_chans)",
          "644:   return;",
          "646:  spin_lock(&bundle->channel_lock);",
          "647:  rxrpc_activate_channels_locked(bundle);",
          "648:  spin_unlock(&bundle->channel_lock);",
          "649:  _leave(\"\");",
          "650: }",
          "655: static int rxrpc_wait_for_channel(struct rxrpc_bundle *bundle,",
          "656:       struct rxrpc_call *call, gfp_t gfp)",
          "657: {",
          "658:  DECLARE_WAITQUEUE(myself, current);",
          "659:  int ret = 0;",
          "661:  _enter(\"%d\", call->debug_id);",
          "663:  if (!gfpflags_allow_blocking(gfp)) {",
          "664:   rxrpc_maybe_add_conn(bundle, gfp);",
          "665:   rxrpc_activate_channels(bundle);",
          "666:   ret = bundle->alloc_error ?: -EAGAIN;",
          "667:   goto out;",
          "668:  }",
          "670:  add_wait_queue_exclusive(&call->waitq, &myself);",
          "671:  for (;;) {",
          "672:   rxrpc_maybe_add_conn(bundle, gfp);",
          "673:   rxrpc_activate_channels(bundle);",
          "674:   ret = bundle->alloc_error;",
          "675:   if (ret < 0)",
          "676:    break;",
          "678:   switch (call->interruptibility) {",
          "679:   case RXRPC_INTERRUPTIBLE:",
          "680:   case RXRPC_PREINTERRUPTIBLE:",
          "681:    set_current_state(TASK_INTERRUPTIBLE);",
          "682:    break;",
          "683:   case RXRPC_UNINTERRUPTIBLE:",
          "684:   default:",
          "685:    set_current_state(TASK_UNINTERRUPTIBLE);",
          "686:    break;",
          "687:   }",
          "688:   if (rxrpc_call_state(call) != RXRPC_CALL_CLIENT_AWAIT_CONN)",
          "689:    break;",
          "690:   if ((call->interruptibility == RXRPC_INTERRUPTIBLE ||",
          "691:        call->interruptibility == RXRPC_PREINTERRUPTIBLE) &&",
          "692:       signal_pending(current)) {",
          "693:    ret = -ERESTARTSYS;",
          "694:    break;",
          "695:   }",
          "696:   schedule();",
          "697:  }",
          "698:  remove_wait_queue(&call->waitq, &myself);",
          "699:  __set_current_state(TASK_RUNNING);",
          "701: out:",
          "702:  _leave(\" = %d\", ret);",
          "703:  return ret;",
          "704: }",
          "710: int rxrpc_connect_call(struct rxrpc_call *call, gfp_t gfp)",
          "712:  struct rxrpc_bundle *bundle;",
          "713:  int ret = 0;",
          "715:  _enter(\"{%d,%lx},\", call->debug_id, call->user_call_ID);",
          "717:  rxrpc_get_call(call, rxrpc_call_get_io_thread);",
          "719:  bundle = rxrpc_prep_call(call, gfp);",
          "720:  if (IS_ERR(bundle)) {",
          "721:   rxrpc_put_call(call, rxrpc_call_get_io_thread);",
          "722:   ret = PTR_ERR(bundle);",
          "723:   goto out;",
          "724:  }",
          "726:  if (rxrpc_call_state(call) == RXRPC_CALL_CLIENT_AWAIT_CONN) {",
          "727:   ret = rxrpc_wait_for_channel(bundle, call, gfp);",
          "728:   if (ret < 0)",
          "729:    goto wait_failed;",
          "730:  }",
          "732: granted_channel:",
          "734:  smp_rmb();",
          "736: out:",
          "737:  _leave(\" = %d\", ret);",
          "738:  return ret;",
          "740: wait_failed:",
          "741:  spin_lock(&bundle->channel_lock);",
          "742:  list_del_init(&call->chan_wait_link);",
          "743:  spin_unlock(&bundle->channel_lock);",
          "745:  if (rxrpc_call_state(call) != RXRPC_CALL_CLIENT_AWAIT_CONN) {",
          "746:   ret = 0;",
          "747:   goto granted_channel;",
          "750:  trace_rxrpc_client(call->conn, ret, rxrpc_client_chan_wait_failed);",
          "751:  rxrpc_set_call_completion(call, RXRPC_CALL_LOCAL_ERROR, 0, ret);",
          "752:  rxrpc_disconnect_client_call(bundle, call);",
          "753:  goto out;",
          "",
          "[Added Lines]",
          "498: void rxrpc_connect_client_calls(struct rxrpc_local *local)",
          "500:  struct rxrpc_call *call;",
          "502:  while ((call = list_first_entry_or_null(&local->new_client_calls,",
          "503:       struct rxrpc_call, wait_link))",
          "504:         ) {",
          "505:   struct rxrpc_bundle *bundle = call->bundle;",
          "507:   spin_lock(&local->client_call_lock);",
          "508:   list_move_tail(&call->wait_link, &bundle->waiting_calls);",
          "509:   spin_unlock(&local->client_call_lock);",
          "511:   if (rxrpc_bundle_has_space(bundle))",
          "512:    rxrpc_activate_channels(bundle);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "809:  _enter(\"c=%x\", call->debug_id);",
          "",
          "[Removed Lines]",
          "811:  spin_lock(&bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "818:   _debug(\"call is waiting\");",
          "819:   ASSERTCMP(call->call_id, ==, 0);",
          "820:   ASSERT(!test_bit(RXRPC_CALL_EXPOSED, &call->flags));",
          "823:  }",
          "825:  cid = call->cid;",
          "",
          "[Removed Lines]",
          "821:   list_del_init(&call->chan_wait_link);",
          "822:   goto out;",
          "",
          "[Added Lines]",
          "579:   list_del_init(&call->wait_link);",
          "580:   return;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "827:  chan = &conn->channels[channel];",
          "828:  trace_rxrpc_client(conn, channel, rxrpc_client_chan_disconnect);",
          "835:  may_reuse = rxrpc_may_reuse_conn(conn);",
          "",
          "[Removed Lines]",
          "830:  if (rcu_access_pointer(chan->call) != call) {",
          "831:   spin_unlock(&bundle->channel_lock);",
          "832:   BUG();",
          "833:  }",
          "",
          "[Added Lines]",
          "588:  if (WARN_ON(chan->call != call))",
          "589:   return;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "851:    trace_rxrpc_client(conn, channel, rxrpc_client_to_active);",
          "852:    bundle->try_upgrade = false;",
          "853:    if (may_reuse)",
          "855:   }",
          "857:  }",
          "860:  if (may_reuse && !list_empty(&bundle->waiting_calls)) {",
          "861:   trace_rxrpc_client(conn, channel, rxrpc_client_chan_pass);",
          "862:   rxrpc_activate_one_channel(conn, channel);",
          "864:  }",
          "",
          "[Removed Lines]",
          "854:     rxrpc_activate_channels_locked(bundle);",
          "863:   goto out;",
          "",
          "[Added Lines]",
          "610:     rxrpc_activate_channels(bundle);",
          "618:   return;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "878:  }",
          "882:  set_bit(conn->bundle_shift + channel, &conn->bundle->avail_chans);",
          "883:  conn->act_chans &= ~(1 << channel);",
          "",
          "[Removed Lines]",
          "881:  rcu_assign_pointer(chan->call, NULL);",
          "",
          "[Added Lines]",
          "636:  chan->call = NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "891:   conn->idle_timestamp = jiffies;",
          "893:   rxrpc_get_connection(conn, rxrpc_conn_get_idle);",
          "895:   list_move_tail(&conn->cache_link, &local->idle_client_conns);",
          "898:   rxrpc_set_client_reap_timer(local);",
          "899:  }",
          "903: }",
          "",
          "[Removed Lines]",
          "894:   spin_lock(&local->client_conn_cache_lock);",
          "896:   spin_unlock(&local->client_conn_cache_lock);",
          "901: out:",
          "902:  spin_unlock(&bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "909: {",
          "910:  struct rxrpc_bundle *bundle = conn->bundle;",
          "911:  unsigned int bindex;",
          "913:  int i;",
          "915:  _enter(\"C=%x\", conn->debug_id);",
          "",
          "[Removed Lines]",
          "912:  bool need_drop = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "917:  if (conn->flags & RXRPC_CONN_FINAL_ACK_MASK)",
          "918:   rxrpc_process_delayed_final_acks(conn, true);",
          "921:  bindex = conn->bundle_shift / RXRPC_MAXCALLS;",
          "922:  if (bundle->conns[bindex] == conn) {",
          "923:   _debug(\"clear slot %u\", bindex);",
          "924:   bundle->conns[bindex] = NULL;",
          "925:   for (i = 0; i < RXRPC_MAXCALLS; i++)",
          "926:    clear_bit(conn->bundle_shift + i, &bundle->avail_chans);",
          "932:   rxrpc_deactivate_bundle(bundle);",
          "933:   rxrpc_put_connection(conn, rxrpc_conn_put_unbundle);",
          "934:  }",
          "",
          "[Removed Lines]",
          "920:  spin_lock(&bundle->channel_lock);",
          "927:   need_drop = true;",
          "928:  }",
          "929:  spin_unlock(&bundle->channel_lock);",
          "931:  if (need_drop) {",
          "",
          "[Added Lines]",
          "675:   rxrpc_put_client_connection_id(bundle->local, conn);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "991:  _enter(\"\");",
          "1001:  nr_conns = atomic_read(&local->rxnet->nr_client_conns);",
          "1003: next:",
          "1012:  if (!local->kill_all_client_conns) {",
          "",
          "[Removed Lines]",
          "993:  if (list_empty(&local->idle_client_conns)) {",
          "994:   _leave(\" [empty]\");",
          "995:   return;",
          "996:  }",
          "1004:  spin_lock(&local->client_conn_cache_lock);",
          "1006:  if (list_empty(&local->idle_client_conns))",
          "1007:   goto out;",
          "1009:  conn = list_entry(local->idle_client_conns.next,",
          "1010:      struct rxrpc_connection, cache_link);",
          "",
          "[Added Lines]",
          "743:  conn = list_first_entry_or_null(&local->idle_client_conns,",
          "744:      struct rxrpc_connection, cache_link);",
          "745:  if (!conn)",
          "746:   return;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1032:  trace_rxrpc_client(conn, -1, rxrpc_client_discard);",
          "1033:  list_del_init(&conn->cache_link);",
          "1037:  rxrpc_unbundle_conn(conn);",
          "1039:  rxrpc_put_connection(conn, rxrpc_conn_put_discard_idle);",
          "",
          "[Removed Lines]",
          "1035:  spin_unlock(&local->client_conn_cache_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1053:  if (!local->kill_all_client_conns)",
          "1054:   timer_reduce(&local->client_conn_reap_timer, conn_expires_at);",
          "1058:  _leave(\"\");",
          "1059: }",
          "",
          "[Removed Lines]",
          "1056: out:",
          "1057:  spin_unlock(&local->client_conn_cache_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1064: void rxrpc_clean_up_local_conns(struct rxrpc_local *local)",
          "1065: {",
          "1069:  _enter(\"\");",
          "1072:  local->kill_all_client_conns = true;",
          "1075:  del_timer_sync(&local->client_conn_reap_timer);",
          "1093:   list_del_init(&conn->cache_link);",
          "1094:   rxrpc_unbundle_conn(conn);",
          "1095:   rxrpc_put_connection(conn, rxrpc_conn_put_local_dead);",
          "1096:  }",
          "",
          "[Removed Lines]",
          "1066:  struct rxrpc_connection *conn, *tmp;",
          "1067:  LIST_HEAD(graveyard);",
          "1071:  spin_lock(&local->client_conn_cache_lock);",
          "1073:  spin_unlock(&local->client_conn_cache_lock);",
          "1077:  spin_lock(&local->client_conn_cache_lock);",
          "1079:  list_for_each_entry_safe(conn, tmp, &local->idle_client_conns,",
          "1080:      cache_link) {",
          "1081:   if (conn->local == local) {",
          "1082:    atomic_dec(&conn->active);",
          "1083:    trace_rxrpc_client(conn, -1, rxrpc_client_discard);",
          "1084:    list_move(&conn->cache_link, &graveyard);",
          "1085:   }",
          "1086:  }",
          "1088:  spin_unlock(&local->client_conn_cache_lock);",
          "1090:  while (!list_empty(&graveyard)) {",
          "1091:   conn = list_entry(graveyard.next,",
          "1092:       struct rxrpc_connection, cache_link);",
          "",
          "[Added Lines]",
          "798:  struct rxrpc_connection *conn;",
          "806:  while ((conn = list_first_entry_or_null(&local->idle_client_conns,",
          "807:       struct rxrpc_connection, cache_link))) {",
          "809:   atomic_dec(&conn->active);",
          "810:   trace_rxrpc_client(conn, -1, rxrpc_client_discard);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c": [
          "File: net/rxrpc/conn_event.c -> net/rxrpc/conn_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  if (skb && call_id != sp->hdr.callNumber)",
          "107:   return;",
          "",
          "[Removed Lines]",
          "103:  call_id = READ_ONCE(chan->last_call);",
          "105:  smp_rmb();",
          "",
          "[Added Lines]",
          "103:  call_id = chan->last_call;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  iov[2].iov_base = &ack_info;",
          "120:  iov[2].iov_len = sizeof(ack_info);",
          "122:  pkt.whdr.epoch  = htonl(conn->proto.epoch);",
          "123:  pkt.whdr.cid  = htonl(conn->proto.cid | channel);",
          "124:  pkt.whdr.callNumber = htonl(call_id);",
          "125:  pkt.whdr.seq  = 0;",
          "126:  pkt.whdr.type  = chan->last_type;",
          "127:  pkt.whdr.flags  = conn->out_clientflag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:  serial = atomic_inc_return(&conn->serial);",
          "125:  pkt.whdr.serial  = htonl(serial);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:   iov[0].iov_len += sizeof(pkt.ack);",
          "159:   len += sizeof(pkt.ack) + 3 + sizeof(ack_info);",
          "160:   ioc = 3;",
          "181:   trace_rxrpc_tx_ack(chan->call_debug_id, serial,",
          "182:        ntohl(pkt.ack.firstPacket),",
          "183:        ntohl(pkt.ack.serial),",
          "184:        pkt.ack.reason, 0);",
          "185:   break;",
          "186:  }",
          "188:  ret = kernel_sendmsg(conn->local->socket, &msg, iov, ioc, len);",
          "",
          "[Removed Lines]",
          "161:   break;",
          "163:  default:",
          "164:   return;",
          "165:  }",
          "170:  smp_rmb();",
          "171:  if (READ_ONCE(chan->last_call) != call_id)",
          "172:   return;",
          "174:  serial = atomic_inc_return(&conn->serial);",
          "175:  pkt.whdr.serial = htonl(serial);",
          "177:  switch (chan->last_type) {",
          "178:  case RXRPC_PACKET_TYPE_ABORT:",
          "179:   break;",
          "180:  case RXRPC_PACKET_TYPE_ACK:",
          "",
          "[Added Lines]",
          "169:  default:",
          "170:   return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:  _enter(\"{%d},%x\", conn->debug_id, conn->abort_code);",
          "212:  for (i = 0; i < RXRPC_MAXCALLS; i++) {",
          "216:   if (call)",
          "217:    rxrpc_set_call_completion(call,",
          "218:         conn->completion,",
          "",
          "[Removed Lines]",
          "210:  spin_lock(&conn->bundle->channel_lock);",
          "213:   call = rcu_dereference_protected(",
          "214:    conn->channels[i].call,",
          "215:    lockdep_is_held(&conn->bundle->channel_lock));",
          "",
          "[Added Lines]",
          "196:   call = conn->channels[i].call;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "220:         conn->error);",
          "221:  }",
          "224:  _leave(\"\");",
          "225: }",
          "",
          "[Removed Lines]",
          "223:  spin_unlock(&conn->bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "316:   if (!test_bit(RXRPC_CONN_FINAL_ACK_0 + channel, &conn->flags))",
          "317:    continue;",
          "322:   if (time_before(j, ack_at) && !force) {",
          "323:    if (time_before(ack_at, next_j)) {",
          "324:     next_j = ack_at;",
          "",
          "[Removed Lines]",
          "320:   ack_at = READ_ONCE(chan->final_ack_at);",
          "",
          "[Added Lines]",
          "299:   ack_at = chan->final_ack_at;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "446:   if (conn->state != RXRPC_CONN_SERVICE)",
          "447:    break;",
          "451:   for (loop = 0; loop < RXRPC_MAXCALLS; loop++)",
          "458:   break;",
          "459:  }",
          "",
          "[Removed Lines]",
          "449:   spin_lock(&conn->bundle->channel_lock);",
          "452:    rxrpc_call_is_secure(",
          "453:     rcu_dereference_protected(",
          "454:      conn->channels[loop].call,",
          "455:      lockdep_is_held(&conn->bundle->channel_lock)));",
          "457:   spin_unlock(&conn->bundle->channel_lock);",
          "",
          "[Added Lines]",
          "428:    rxrpc_call_is_secure(conn->channels[loop].call);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c": [
          "File: net/rxrpc/conn_object.c -> net/rxrpc/conn_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   INIT_WORK(&conn->destructor, rxrpc_clean_up_connection);",
          "68:   INIT_LIST_HEAD(&conn->proc_link);",
          "69:   INIT_LIST_HEAD(&conn->link);",
          "70:   skb_queue_head_init(&conn->rx_queue);",
          "71:   conn->rxnet = rxnet;",
          "72:   conn->security = &rxrpc_no_security;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   mutex_init(&conn->security_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:  _enter(\"%d,%x\", conn->debug_id, call->cid);",
          "",
          "[Removed Lines]",
          "160:  if (rcu_access_pointer(chan->call) == call) {",
          "",
          "[Added Lines]",
          "161:  if (chan->call == call) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:    break;",
          "178:   }",
          "182:   chan->last_call = chan->call_id;",
          "183:   chan->call_id = chan->call_counter;",
          "186:  }",
          "188:  _leave(\"\");",
          "",
          "[Removed Lines]",
          "181:   smp_wmb();",
          "185:   rcu_assign_pointer(chan->call, NULL);",
          "",
          "[Added Lines]",
          "183:   chan->call = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:  if (rxrpc_is_client_call(call)) {",
          "211:   rxrpc_disconnect_client_call(call->bundle, call);",
          "212:  } else {",
          "214:   __rxrpc_disconnect_call(conn, call);",
          "217:   conn->idle_timestamp = jiffies;",
          "218:   if (atomic_dec_and_test(&conn->active))",
          "219:    rxrpc_set_service_reap_timer(conn->rxnet,",
          "",
          "[Removed Lines]",
          "213:   spin_lock(&conn->bundle->channel_lock);",
          "215:   spin_unlock(&conn->bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   container_of(work, struct rxrpc_connection, destructor);",
          "317:  struct rxrpc_net *rxnet = conn->rxnet;",
          "323:  ASSERT(list_empty(&conn->cache_link));",
          "325:  del_timer_sync(&conn->timer);",
          "",
          "[Removed Lines]",
          "319:  ASSERT(!rcu_access_pointer(conn->channels[0].call) &&",
          "320:         !rcu_access_pointer(conn->channels[1].call) &&",
          "321:         !rcu_access_pointer(conn->channels[2].call) &&",
          "322:         !rcu_access_pointer(conn->channels[3].call));",
          "",
          "[Added Lines]",
          "314:  ASSERT(!conn->channels[0].call &&",
          "315:         !conn->channels[1].call &&",
          "316:         !conn->channels[2].call &&",
          "317:         !conn->channels[3].call);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c": [
          "File: net/rxrpc/conn_service.c -> net/rxrpc/conn_service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: static struct rxrpc_bundle rxrpc_service_dummy_bundle = {",
          "12:  .ref  = REFCOUNT_INIT(1),",
          "13:  .debug_id = UINT_MAX,",
          "15: };",
          "",
          "[Removed Lines]",
          "14:  .channel_lock = __SPIN_LOCK_UNLOCKED(&rxrpc_service_dummy_bundle.channel_lock),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/rxrpc/io_thread.c||net/rxrpc/io_thread.c": [
          "File: net/rxrpc/io_thread.c -> net/rxrpc/io_thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   return just_discard;",
          "370:  }",
          "377:  if (sp->hdr.callNumber > chan->call_id) {",
          "378:   if (rxrpc_to_client(sp)) {",
          "",
          "[Removed Lines]",
          "372:  rcu_read_lock();",
          "373:  call = rxrpc_try_get_call(rcu_dereference(chan->call),",
          "374:       rxrpc_call_get_input);",
          "375:  rcu_read_unlock();",
          "",
          "[Added Lines]",
          "372:  call = rxrpc_try_get_call(chan->call, rxrpc_call_get_input);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "453:    continue;",
          "454:   }",
          "457:   if ((skb = __skb_dequeue(&rx_queue))) {",
          "458:    struct rxrpc_skb_priv *sp = rxrpc_skb(skb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:   if (!list_empty(&local->new_client_calls))",
          "454:    rxrpc_connect_client_calls(local);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "492:   should_stop = kthread_should_stop();",
          "493:   if (!skb_queue_empty(&local->rx_queue) ||",
          "494:       !list_empty(&local->call_attend_q) ||",
          "496:    __set_current_state(TASK_RUNNING);",
          "497:    continue;",
          "498:   }",
          "",
          "[Removed Lines]",
          "495:       !list_empty(&local->conn_attend_q)) {",
          "",
          "[Added Lines]",
          "495:       !list_empty(&local->conn_attend_q) ||",
          "496:       !list_empty(&local->new_client_calls) ||",
          "497:       test_bit(RXRPC_CLIENT_CONN_REAP_TIMER,",
          "498:         &local->client_conn_flags)) {",
          "",
          "---------------"
        ],
        "net/rxrpc/local_object.c||net/rxrpc/local_object.c": [
          "File: net/rxrpc/local_object.c -> net/rxrpc/local_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   local->client_bundles = RB_ROOT;",
          "118:   spin_lock_init(&local->client_bundles_lock);",
          "119:   local->kill_all_client_conns = false;",
          "121:   INIT_LIST_HEAD(&local->idle_client_conns);",
          "122:   timer_setup(&local->client_conn_reap_timer,",
          "123:        rxrpc_client_conn_reap_timeout, 0);",
          "",
          "[Removed Lines]",
          "120:   spin_lock_init(&local->client_conn_cache_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   if (tmp == 0)",
          "134:    tmp = 1;",
          "135:   idr_set_cursor(&local->conn_ids, tmp);",
          "138:   trace_rxrpc_local(local->debug_id, rxrpc_local_new, 1, 1);",
          "139:  }",
          "",
          "[Removed Lines]",
          "136:   spin_lock_init(&local->conn_lock);",
          "",
          "[Added Lines]",
          "135:   INIT_LIST_HEAD(&local->new_client_calls);",
          "136:   spin_lock_init(&local->client_call_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "437:  rxrpc_purge_queue(&local->rx_queue);",
          "439: }",
          "",
          "[Removed Lines]",
          "438:  rxrpc_destroy_client_conn_ids(local);",
          "",
          "[Added Lines]",
          "438:  rxrpc_purge_client_connections(local);",
          "",
          "---------------"
        ],
        "net/rxrpc/proc.c||net/rxrpc/proc.c": [
          "File: net/rxrpc/proc.c -> net/rxrpc/proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: static const char *const rxrpc_conn_states[RXRPC_CONN__NR_STATES] = {",
          "14:  [RXRPC_CONN_UNUSED]   = \"Unused  \",",
          "15:  [RXRPC_CONN_CLIENT]   = \"Client  \",",
          "16:  [RXRPC_CONN_SERVICE_PREALLOC]  = \"SvPrealc\",",
          "17:  [RXRPC_CONN_SERVICE_UNSECURED]  = \"SvUnsec \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  [RXRPC_CONN_CLIENT_UNSECURED]  = \"ClUnsec \",",
          "",
          "---------------"
        ],
        "net/rxrpc/rxkad.c||net/rxrpc/rxkad.c": [
          "File: net/rxrpc/rxkad.c -> net/rxrpc/rxkad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1122:   goto protocol_error_free;",
          "1123:  }",
          "1126:  for (i = 0; i < RXRPC_MAXCALLS; i++) {",
          "1128:   u32 call_id = ntohl(response->encrypted.call_id[i]);",
          "1130:   if (call_id > INT_MAX) {",
          "1131:    rxrpc_abort_conn(conn, skb, RXKADSEALEDINCON, -EPROTO,",
          "1132:       rxkad_abort_resp_bad_callid);",
          "1134:   }",
          "1137:    rxrpc_abort_conn(conn, skb, RXKADSEALEDINCON, -EPROTO,",
          "1138:       rxkad_abort_resp_call_ctr);",
          "1140:   }",
          "1147:     rxrpc_abort_conn(conn, skb, RXKADSEALEDINCON, -EPROTO,",
          "1148:        rxkad_abort_resp_call_state);",
          "1150:    }",
          "1151:    conn->channels[i].call_counter = call_id;",
          "1152:   }",
          "1153:  }",
          "1156:  if (ntohl(response->encrypted.inc_nonce) != conn->rxkad.nonce + 1) {",
          "1157:   rxrpc_abort_conn(conn, skb, RXKADOUTOFSEQUENCE, -EPROTO,",
          "",
          "[Removed Lines]",
          "1125:  spin_lock(&conn->bundle->channel_lock);",
          "1127:   struct rxrpc_call *call;",
          "1133:    goto protocol_error_unlock;",
          "1136:   if (call_id < conn->channels[i].call_counter) {",
          "1139:    goto protocol_error_unlock;",
          "1142:   if (call_id > conn->channels[i].call_counter) {",
          "1143:    call = rcu_dereference_protected(",
          "1144:     conn->channels[i].call,",
          "1145:     lockdep_is_held(&conn->bundle->channel_lock));",
          "1146:    if (call && !__rxrpc_call_is_complete(call)) {",
          "1149:     goto protocol_error_unlock;",
          "1154:  spin_unlock(&conn->bundle->channel_lock);",
          "",
          "[Added Lines]",
          "1127:   u32 counter = READ_ONCE(conn->channels[i].call_counter);",
          "1132:    goto protocol_error_free;",
          "1135:   if (call_id < counter) {",
          "1138:    goto protocol_error_free;",
          "1141:   if (call_id > counter) {",
          "1142:    if (conn->channels[i].call) {",
          "1145:     goto protocol_error_free;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179:  _leave(\" = 0\");",
          "1180:  return 0;",
          "1184: protocol_error_free:",
          "1185:  kfree(ticket);",
          "1186: protocol_error:",
          "",
          "[Removed Lines]",
          "1182: protocol_error_unlock:",
          "1183:  spin_unlock(&conn->bundle->channel_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/rxrpc/security.c||net/rxrpc/security.c": [
          "File: net/rxrpc/security.c -> net/rxrpc/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: int rxrpc_init_client_conn_security(struct rxrpc_connection *conn)",
          "99: {",
          "101:  struct rxrpc_key_token *token;",
          "102:  struct key *key = conn->key;",
          "105:  _enter(\"{%d},{%x}\", conn->debug_id, key_serial(key));",
          "114:  for (token = key->payload.data[0]; token; token = token->next) {",
          "117:    goto found;",
          "118:  }",
          "119:  return -EKEYREJECTED;",
          "121: found:",
          "128:  }",
          "132: }",
          "",
          "[Removed Lines]",
          "100:  const struct rxrpc_security *sec;",
          "103:  int ret;",
          "107:  if (!key)",
          "108:   return 0;",
          "110:  ret = key_validate(key);",
          "111:  if (ret < 0)",
          "112:   return ret;",
          "115:   sec = rxrpc_security_lookup(token->security_index);",
          "116:   if (sec)",
          "122:  conn->security = sec;",
          "124:  ret = conn->security->init_connection_security(conn, token);",
          "125:  if (ret < 0) {",
          "126:   conn->security = &rxrpc_no_security;",
          "127:   return ret;",
          "130:  _leave(\" = 0\");",
          "131:  return 0;",
          "",
          "[Added Lines]",
          "102:  int ret = 0;",
          "107:   if (token->security_index == conn->security->security_index)",
          "113:  mutex_lock(&conn->security_lock);",
          "114:  if (conn->state == RXRPC_CONN_CLIENT_UNSECURED) {",
          "115:   ret = conn->security->init_connection_security(conn, token);",
          "116:   if (ret == 0) {",
          "117:    spin_lock(&conn->state_lock);",
          "118:    if (conn->state == RXRPC_CONN_CLIENT_UNSECURED)",
          "119:     conn->state = RXRPC_CONN_CLIENT;",
          "120:    spin_unlock(&conn->state_lock);",
          "121:   }",
          "123:  mutex_unlock(&conn->security_lock);",
          "124:  return ret;",
          "",
          "---------------"
        ],
        "net/rxrpc/sendmsg.c||net/rxrpc/sendmsg.c": [
          "File: net/rxrpc/sendmsg.c -> net/rxrpc/sendmsg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  return false;",
          "39: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: static int rxrpc_wait_to_be_connected(struct rxrpc_call *call, long *timeo)",
          "46: {",
          "47:  DECLARE_WAITQUEUE(myself, current);",
          "48:  int ret = 0;",
          "50:  _enter(\"%d\", call->debug_id);",
          "52:  if (rxrpc_call_state(call) != RXRPC_CALL_CLIENT_AWAIT_CONN)",
          "53:   return call->error;",
          "55:  add_wait_queue_exclusive(&call->waitq, &myself);",
          "57:  for (;;) {",
          "58:   ret = call->error;",
          "59:   if (ret < 0)",
          "60:    break;",
          "62:   switch (call->interruptibility) {",
          "63:   case RXRPC_INTERRUPTIBLE:",
          "64:   case RXRPC_PREINTERRUPTIBLE:",
          "65:    set_current_state(TASK_INTERRUPTIBLE);",
          "66:    break;",
          "67:   case RXRPC_UNINTERRUPTIBLE:",
          "68:   default:",
          "69:    set_current_state(TASK_UNINTERRUPTIBLE);",
          "70:    break;",
          "71:   }",
          "72:   if (rxrpc_call_state(call) != RXRPC_CALL_CLIENT_AWAIT_CONN) {",
          "73:    ret = call->error;",
          "74:    break;",
          "75:   }",
          "76:   if ((call->interruptibility == RXRPC_INTERRUPTIBLE ||",
          "77:        call->interruptibility == RXRPC_PREINTERRUPTIBLE) &&",
          "78:       signal_pending(current)) {",
          "79:    ret = sock_intr_errno(*timeo);",
          "80:    break;",
          "81:   }",
          "83:  }",
          "85:  remove_wait_queue(&call->waitq, &myself);",
          "86:  __set_current_state(TASK_RUNNING);",
          "88:  if (ret == 0 && rxrpc_call_is_complete(call))",
          "89:   ret = call->error;",
          "91:  _leave(\" = %d\", ret);",
          "92:  return ret;",
          "93: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:  timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);",
          "243:  sk_clear_bit(SOCKWQ_ASYNC_NOSPACE, sk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:  ret = rxrpc_wait_to_be_connected(call, &timeo);",
          "297:  if (ret < 0)",
          "298:   return ret;",
          "300:  if (call->conn->state == RXRPC_CONN_CLIENT_UNSECURED) {",
          "301:   ret = rxrpc_init_client_conn_security(call->conn);",
          "302:   if (ret < 0)",
          "303:    return ret;",
          "304:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fa25105b2d32fcb0f38668bc20d0adf6508322f",
      "candidate_info": {
        "commit_hash": "7fa25105b2d32fcb0f38668bc20d0adf6508322f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7fa25105b2d32fcb0f38668bc20d0adf6508322f",
        "files": [
          "include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h",
          "net/rxrpc/call_accept.c",
          "net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c",
          "net/rxrpc/input.c"
        ],
        "message": "rxrpc: trace: Don't use __builtin_return_address for rxrpc_conn tracing\n\nIn rxrpc tracing, use enums to generate lists of points of interest rather\nthan __builtin_return_address() for the rxrpc_conn tracepoint\n\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org",
        "before_after_code_files": [
          "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
          "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c",
          "net/rxrpc/call_object.c||net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c",
          "net/rxrpc/input.c||net/rxrpc/input.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ],
          "candidate": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ]
        }
      },
      "candidate_diff": {
        "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h": [
          "File: include/trace/events/rxrpc.h -> include/trace/events/rxrpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  E_(rxrpc_peer_put_keepalive,  \"PUT keepaliv\")",
          "84: #define rxrpc_conn_traces \\",
          "94: #define rxrpc_client_traces \\",
          "95:  EM(rxrpc_client_activate_chans,  \"Activa\") \\",
          "",
          "[Removed Lines]",
          "85:  EM(rxrpc_conn_got,   \"GOT\") \\",
          "86:  EM(rxrpc_conn_new_client,  \"NWc\") \\",
          "87:  EM(rxrpc_conn_new_service,  \"NWs\") \\",
          "88:  EM(rxrpc_conn_put_client,  \"PTc\") \\",
          "89:  EM(rxrpc_conn_put_service,  \"PTs\") \\",
          "90:  EM(rxrpc_conn_queued,   \"QUE\") \\",
          "91:  EM(rxrpc_conn_reap_service,  \"RPs\") \\",
          "92:  E_(rxrpc_conn_seen,   \"SEE\")",
          "",
          "[Added Lines]",
          "85:  EM(rxrpc_conn_free,   \"FREE        \") \\",
          "86:  EM(rxrpc_conn_get_activate_call, \"GET act-call\") \\",
          "87:  EM(rxrpc_conn_get_call_input,  \"GET inp-call\") \\",
          "88:  EM(rxrpc_conn_get_conn_input,  \"GET inp-conn\") \\",
          "89:  EM(rxrpc_conn_get_idle,   \"GET idle    \") \\",
          "90:  EM(rxrpc_conn_get_poke,   \"GET poke    \") \\",
          "91:  EM(rxrpc_conn_get_service_conn,  \"GET svc-conn\") \\",
          "92:  EM(rxrpc_conn_new_client,  \"NEW client  \") \\",
          "93:  EM(rxrpc_conn_new_service,  \"NEW service \") \\",
          "94:  EM(rxrpc_conn_put_already_queued, \"PUT alreadyq\") \\",
          "95:  EM(rxrpc_conn_put_call,   \"PUT call    \") \\",
          "96:  EM(rxrpc_conn_put_call_input,  \"PUT inp-call\") \\",
          "97:  EM(rxrpc_conn_put_conn_input,  \"PUT inp-conn\") \\",
          "98:  EM(rxrpc_conn_put_discard,  \"PUT discard \") \\",
          "99:  EM(rxrpc_conn_put_discard_idle,  \"PUT disc-idl\") \\",
          "100:  EM(rxrpc_conn_put_local_dead,  \"PUT loc-dead\") \\",
          "101:  EM(rxrpc_conn_put_noreuse,  \"PUT noreuse \") \\",
          "102:  EM(rxrpc_conn_put_poke,   \"PUT poke    \") \\",
          "103:  EM(rxrpc_conn_put_unbundle,  \"PUT unbundle\") \\",
          "104:  EM(rxrpc_conn_put_unidle,  \"PUT unidle  \") \\",
          "105:  EM(rxrpc_conn_put_work,   \"PUT work    \") \\",
          "106:  EM(rxrpc_conn_queue_challenge,  \"GQ  chall   \") \\",
          "107:  EM(rxrpc_conn_queue_retry_work,  \"GQ  retry-wk\") \\",
          "108:  EM(rxrpc_conn_queue_rx_work,  \"GQ  rx-work \") \\",
          "109:  EM(rxrpc_conn_queue_timer,  \"GQ  timer   \") \\",
          "110:  EM(rxrpc_conn_see_new_service_conn, \"SEE new-svc \") \\",
          "111:  EM(rxrpc_conn_see_reap_service,  \"SEE reap-svc\") \\",
          "112:  E_(rxrpc_conn_see_work,   \"SEE work    \")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:      );",
          "432: TRACE_EVENT(rxrpc_conn,",
          "438:      TP_STRUCT__entry(",
          "439:       __field(unsigned int, conn  )",
          "443:         ),",
          "445:      TP_fast_assign(",
          "446:       __entry->conn = conn_debug_id;",
          "450:       ),",
          "453:         __entry->conn,",
          "457:      );",
          "459: TRACE_EVENT(rxrpc_client,",
          "",
          "[Removed Lines]",
          "433:      TP_PROTO(unsigned int conn_debug_id, enum rxrpc_conn_trace op,",
          "434:        int usage, const void *where),",
          "436:      TP_ARGS(conn_debug_id, op, usage, where),",
          "440:       __field(int,  op  )",
          "441:       __field(int,  usage  )",
          "442:       __field(const void *, where  )",
          "447:       __entry->op = op;",
          "448:       __entry->usage = usage;",
          "449:       __entry->where = where;",
          "452:      TP_printk(\"C=%08x %s u=%d sp=%pSR\",",
          "454:         __print_symbolic(__entry->op, rxrpc_conn_traces),",
          "455:         __entry->usage,",
          "456:         __entry->where)",
          "",
          "[Added Lines]",
          "453:      TP_PROTO(unsigned int conn_debug_id, int ref, enum rxrpc_conn_trace why),",
          "455:      TP_ARGS(conn_debug_id, ref, why),",
          "459:       __field(int,  ref  )",
          "460:       __field(int,  why  )",
          "465:       __entry->ref = ref;",
          "466:       __entry->why = why;",
          "469:      TP_printk(\"C=%08x %s r=%d\",",
          "471:         __print_symbolic(__entry->why, rxrpc_conn_traces),",
          "472:         __entry->ref)",
          "",
          "---------------"
        ],
        "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
          "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:          gfp_t);",
          "883: void rxrpc_expose_client_call(struct rxrpc_call *);",
          "884: void rxrpc_disconnect_client_call(struct rxrpc_bundle *, struct rxrpc_call *);",
          "886: void rxrpc_discard_expired_client_conns(struct work_struct *);",
          "887: void rxrpc_destroy_all_client_connections(struct rxrpc_net *);",
          "888: void rxrpc_clean_up_local_conns(struct rxrpc_local *);",
          "",
          "[Removed Lines]",
          "885: void rxrpc_put_client_conn(struct rxrpc_connection *);",
          "",
          "[Added Lines]",
          "885: void rxrpc_put_client_conn(struct rxrpc_connection *, enum rxrpc_conn_trace);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "906: void __rxrpc_disconnect_call(struct rxrpc_connection *, struct rxrpc_call *);",
          "907: void rxrpc_disconnect_call(struct rxrpc_call *);",
          "908: void rxrpc_kill_connection(struct rxrpc_connection *);",
          "914: void rxrpc_service_connection_reaper(struct work_struct *);",
          "915: void rxrpc_destroy_all_connections(struct rxrpc_net *);",
          "",
          "[Removed Lines]",
          "909: bool rxrpc_queue_conn(struct rxrpc_connection *);",
          "910: void rxrpc_see_connection(struct rxrpc_connection *);",
          "911: struct rxrpc_connection *rxrpc_get_connection(struct rxrpc_connection *);",
          "912: struct rxrpc_connection *rxrpc_get_connection_maybe(struct rxrpc_connection *);",
          "913: void rxrpc_put_service_conn(struct rxrpc_connection *);",
          "",
          "[Added Lines]",
          "909: bool rxrpc_queue_conn(struct rxrpc_connection *, enum rxrpc_conn_trace);",
          "910: void rxrpc_see_connection(struct rxrpc_connection *, enum rxrpc_conn_trace);",
          "911: struct rxrpc_connection *rxrpc_get_connection(struct rxrpc_connection *,",
          "912:            enum rxrpc_conn_trace);",
          "913: struct rxrpc_connection *rxrpc_get_connection_maybe(struct rxrpc_connection *,",
          "914:           enum rxrpc_conn_trace);",
          "915: void rxrpc_put_service_conn(struct rxrpc_connection *, enum rxrpc_conn_trace);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "924:  return !rxrpc_conn_is_client(conn);",
          "925: }",
          "928: {",
          "929:  if (!conn)",
          "930:   return;",
          "932:  if (rxrpc_conn_is_client(conn))",
          "934:  else",
          "936: }",
          "938: static inline void rxrpc_reduce_conn_timer(struct rxrpc_connection *conn,",
          "",
          "[Removed Lines]",
          "927: static inline void rxrpc_put_connection(struct rxrpc_connection *conn)",
          "933:   rxrpc_put_client_conn(conn);",
          "935:   rxrpc_put_service_conn(conn);",
          "",
          "[Added Lines]",
          "929: static inline void rxrpc_put_connection(struct rxrpc_connection *conn,",
          "930:      enum rxrpc_conn_trace why)",
          "936:   rxrpc_put_client_conn(conn, why);",
          "938:   rxrpc_put_service_conn(conn, why);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c": [
          "File: net/rxrpc/call_accept.c -> net/rxrpc/call_accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   b->conn_backlog[head] = conn;",
          "92:   smp_store_release(&b->conn_backlog_head,",
          "93:       (head + 1) & (size - 1));",
          "97:  }",
          "",
          "[Removed Lines]",
          "95:   trace_rxrpc_conn(conn->debug_id, rxrpc_conn_new_service,",
          "96:      refcount_read(&conn->ref), here);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:       (conn_tail + 1) & (RXRPC_BACKLOG_MAX - 1));",
          "310:   conn->local = rxrpc_get_local(local, rxrpc_local_get_prealloc_conn);",
          "311:   conn->peer = peer;",
          "313:   rxrpc_new_incoming_connection(rx, conn, sec, skb);",
          "314:  } else {",
          "316:  }",
          "",
          "[Removed Lines]",
          "312:   rxrpc_see_connection(conn);",
          "315:   rxrpc_get_connection(conn);",
          "",
          "[Added Lines]",
          "309:   rxrpc_see_connection(conn, rxrpc_conn_see_new_service_conn);",
          "312:   rxrpc_get_connection(conn, rxrpc_conn_get_service_conn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:  case RXRPC_CONN_SERVICE_UNSECURED:",
          "403:   conn->state = RXRPC_CONN_SERVICE_CHALLENGING;",
          "404:   set_bit(RXRPC_CONN_EV_CHALLENGE, &call->conn->events);",
          "406:   break;",
          "408:  case RXRPC_CONN_SERVICE:",
          "",
          "[Removed Lines]",
          "405:   rxrpc_queue_conn(call->conn);",
          "",
          "[Added Lines]",
          "402:   rxrpc_queue_conn(call->conn, rxrpc_conn_queue_challenge);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_object.c||net/rxrpc/call_object.c": [
          "File: net/rxrpc/call_object.c -> net/rxrpc/call_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:  rxrpc_delete_call_timer(call);",
          "639:  rxrpc_put_peer(call->peer, rxrpc_peer_put_call);",
          "640:  kmem_cache_free(rxrpc_call_jar, call);",
          "641:  if (atomic_dec_and_test(&rxnet->nr_calls))",
          "",
          "[Removed Lines]",
          "638:  rxrpc_put_connection(call->conn);",
          "",
          "[Added Lines]",
          "638:  rxrpc_put_connection(call->conn, rxrpc_conn_put_call);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
          "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:  rxrpc_get_local(conn->local, rxrpc_local_get_client_conn);",
          "212:  key_get(conn->key);",
          "218:  atomic_inc(&rxnet->nr_client_conns);",
          "219:  trace_rxrpc_client(conn, -1, rxrpc_client_alloc);",
          "",
          "[Removed Lines]",
          "214:  trace_rxrpc_conn(conn->debug_id, rxrpc_conn_new_client,",
          "215:     refcount_read(&conn->ref),",
          "216:     __builtin_return_address(0));",
          "",
          "[Added Lines]",
          "214:  trace_rxrpc_conn(conn->debug_id, refcount_read(&conn->ref),",
          "215:     rxrpc_conn_new_client);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:  if (candidate) {",
          "468:   _debug(\"discard C=%x\", candidate->debug_id);",
          "469:   trace_rxrpc_client(candidate, -1, rxrpc_client_duplicate);",
          "471:  }",
          "474:  _leave(\"\");",
          "475: }",
          "",
          "[Removed Lines]",
          "470:   rxrpc_put_connection(candidate);",
          "473:  rxrpc_put_connection(old);",
          "",
          "[Added Lines]",
          "469:   rxrpc_put_connection(candidate, rxrpc_conn_put_discard);",
          "472:  rxrpc_put_connection(old, rxrpc_conn_put_noreuse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:  rxrpc_see_call(call);",
          "545:  list_del_init(&call->chan_wait_link);",
          "546:  call->peer = rxrpc_get_peer(conn->peer, rxrpc_peer_get_activate_call);",
          "548:  call->cid = conn->proto.cid | channel;",
          "549:  call->call_id = call_id;",
          "550:  call->security = conn->security;",
          "",
          "[Removed Lines]",
          "547:  call->conn = rxrpc_get_connection(conn);",
          "",
          "[Added Lines]",
          "546:  call->conn = rxrpc_get_connection(conn, rxrpc_conn_get_activate_call);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "592:   }",
          "593:   spin_unlock(&rxnet->client_conn_cache_lock);",
          "594:   if (drop_ref)",
          "596:  }",
          "597: }",
          "",
          "[Removed Lines]",
          "595:    rxrpc_put_connection(conn);",
          "",
          "[Added Lines]",
          "594:    rxrpc_put_connection(conn, rxrpc_conn_put_unidle);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "896:   trace_rxrpc_client(conn, channel, rxrpc_client_to_idle);",
          "897:   conn->idle_timestamp = jiffies;",
          "900:   spin_lock(&rxnet->client_conn_cache_lock);",
          "901:   list_move_tail(&conn->cache_link, &rxnet->idle_client_conns);",
          "902:   spin_unlock(&rxnet->client_conn_cache_lock);",
          "",
          "[Removed Lines]",
          "899:   rxrpc_get_connection(conn);",
          "",
          "[Added Lines]",
          "898:   rxrpc_get_connection(conn, rxrpc_conn_get_idle);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "939:  if (need_drop) {",
          "940:   rxrpc_deactivate_bundle(bundle);",
          "942:  }",
          "943: }",
          "",
          "[Removed Lines]",
          "941:   rxrpc_put_connection(conn);",
          "",
          "[Added Lines]",
          "940:   rxrpc_put_connection(conn, rxrpc_conn_put_unbundle);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "987: {",
          "989:  unsigned int debug_id = conn->debug_id;",
          "990:  bool dead;",
          "991:  int r;",
          "993:  dead = __refcount_dec_and_test(&conn->ref, &r);",
          "995:  if (dead)",
          "996:   rxrpc_kill_client_conn(conn);",
          "997: }",
          "",
          "[Removed Lines]",
          "986: void rxrpc_put_client_conn(struct rxrpc_connection *conn)",
          "988:  const void *here = __builtin_return_address(0);",
          "994:  trace_rxrpc_conn(debug_id, rxrpc_conn_put_client, r - 1, here);",
          "",
          "[Added Lines]",
          "985: void rxrpc_put_client_conn(struct rxrpc_connection *conn,",
          "986:       enum rxrpc_conn_trace why)",
          "993:  trace_rxrpc_conn(debug_id, r - 1, why);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1063:  spin_unlock(&rxnet->client_conn_cache_lock);",
          "1065:  rxrpc_unbundle_conn(conn);",
          "1068:  nr_conns--;",
          "1069:  goto next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:  rxrpc_put_connection(conn, rxrpc_conn_put_discard_idle);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1134:       struct rxrpc_connection, cache_link);",
          "1135:   list_del_init(&conn->cache_link);",
          "1136:   rxrpc_unbundle_conn(conn);",
          "1138:  }",
          "1140:  _leave(\" [culled]\");",
          "",
          "[Removed Lines]",
          "1137:   rxrpc_put_connection(conn);",
          "",
          "[Added Lines]",
          "1137:   rxrpc_put_connection(conn, rxrpc_conn_put_local_dead);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c": [
          "File: net/rxrpc/conn_event.c -> net/rxrpc/conn_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "472:  struct rxrpc_connection *conn =",
          "473:   container_of(work, struct rxrpc_connection, processor);",
          "477:  if (__rxrpc_use_local(conn->local, rxrpc_local_use_conn_work)) {",
          "478:   rxrpc_do_process_connection(conn);",
          "479:   rxrpc_unuse_local(conn->local, rxrpc_local_unuse_conn_work);",
          "480:  }",
          "483:  _leave(\"\");",
          "484:  return;",
          "485: }",
          "",
          "[Removed Lines]",
          "475:  rxrpc_see_connection(conn);",
          "482:  rxrpc_put_connection(conn);",
          "",
          "[Added Lines]",
          "475:  rxrpc_see_connection(conn, rxrpc_conn_see_work);",
          "482:  rxrpc_put_connection(conn, rxrpc_conn_put_work);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c": [
          "File: net/rxrpc/conn_object.c -> net/rxrpc/conn_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  struct rxrpc_connection *conn =",
          "27:   container_of(timer, struct rxrpc_connection, timer);",
          "30: }",
          "",
          "[Removed Lines]",
          "29:  rxrpc_queue_conn(conn);",
          "",
          "[Added Lines]",
          "29:  rxrpc_queue_conn(conn, rxrpc_conn_queue_timer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264: {",
          "266:  int r;",
          "268:  if (!__refcount_inc_not_zero(&conn->ref, &r))",
          "269:   return false;",
          "270:  if (rxrpc_queue_work(&conn->processor))",
          "272:  else",
          "274:  return true;",
          "275: }",
          "281: {",
          "283:  if (conn) {",
          "287:  }",
          "288: }",
          "294: {",
          "296:  int r;",
          "298:  __refcount_inc(&conn->ref, &r);",
          "300:  return conn;",
          "301: }",
          "",
          "[Removed Lines]",
          "263: bool rxrpc_queue_conn(struct rxrpc_connection *conn)",
          "265:  const void *here = __builtin_return_address(0);",
          "271:   trace_rxrpc_conn(conn->debug_id, rxrpc_conn_queued, r + 1, here);",
          "273:   rxrpc_put_connection(conn);",
          "280: void rxrpc_see_connection(struct rxrpc_connection *conn)",
          "282:  const void *here = __builtin_return_address(0);",
          "284:   int n = refcount_read(&conn->ref);",
          "286:   trace_rxrpc_conn(conn->debug_id, rxrpc_conn_seen, n, here);",
          "293: struct rxrpc_connection *rxrpc_get_connection(struct rxrpc_connection *conn)",
          "295:  const void *here = __builtin_return_address(0);",
          "299:  trace_rxrpc_conn(conn->debug_id, rxrpc_conn_got, r, here);",
          "",
          "[Added Lines]",
          "263: bool rxrpc_queue_conn(struct rxrpc_connection *conn, enum rxrpc_conn_trace why)",
          "270:   trace_rxrpc_conn(conn->debug_id, why, r + 1);",
          "272:   rxrpc_put_connection(conn, rxrpc_conn_put_already_queued);",
          "279: void rxrpc_see_connection(struct rxrpc_connection *conn,",
          "280:      enum rxrpc_conn_trace why)",
          "283:   int r = refcount_read(&conn->ref);",
          "285:   trace_rxrpc_conn(conn->debug_id, r, why);",
          "292: struct rxrpc_connection *rxrpc_get_connection(struct rxrpc_connection *conn,",
          "293:            enum rxrpc_conn_trace why)",
          "298:  trace_rxrpc_conn(conn->debug_id, r + 1, why);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: struct rxrpc_connection *",
          "308: {",
          "310:  int r;",
          "312:  if (conn) {",
          "313:   if (__refcount_inc_not_zero(&conn->ref, &r))",
          "315:   else",
          "316:    conn = NULL;",
          "317:  }",
          "",
          "[Removed Lines]",
          "307: rxrpc_get_connection_maybe(struct rxrpc_connection *conn)",
          "309:  const void *here = __builtin_return_address(0);",
          "314:    trace_rxrpc_conn(conn->debug_id, rxrpc_conn_got, r + 1, here);",
          "",
          "[Added Lines]",
          "306: rxrpc_get_connection_maybe(struct rxrpc_connection *conn,",
          "307:       enum rxrpc_conn_trace why)",
          "313:    trace_rxrpc_conn(conn->debug_id, r + 1, why);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335: {",
          "337:  unsigned int debug_id = conn->debug_id;",
          "338:  int r;",
          "340:  __refcount_dec(&conn->ref, &r);",
          "342:  if (r - 1 == 1)",
          "343:   rxrpc_set_service_reap_timer(conn->local->rxnet,",
          "344:           jiffies + rxrpc_connection_expiry);",
          "",
          "[Removed Lines]",
          "334: void rxrpc_put_service_conn(struct rxrpc_connection *conn)",
          "336:  const void *here = __builtin_return_address(0);",
          "341:  trace_rxrpc_conn(debug_id, rxrpc_conn_put_service, r - 1, here);",
          "",
          "[Added Lines]",
          "333: void rxrpc_put_service_conn(struct rxrpc_connection *conn,",
          "334:        enum rxrpc_conn_trace why)",
          "340:  trace_rxrpc_conn(debug_id, r - 1, why);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:  _enter(\"{%d,u=%d}\", conn->debug_id, refcount_read(&conn->ref));",
          "357:  ASSERTCMP(refcount_read(&conn->ref), ==, 0);",
          "359:  del_timer_sync(&conn->timer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:  trace_rxrpc_conn(conn->debug_id, refcount_read(&conn->ref),",
          "357:     rxrpc_conn_free);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420:   if (!refcount_dec_if_one(&conn->ref))",
          "421:    continue;",
          "424:   if (rxrpc_conn_is_client(conn))",
          "425:    BUG();",
          "",
          "[Removed Lines]",
          "422:   trace_rxrpc_conn(conn->debug_id, rxrpc_conn_reap_service, 0, NULL);",
          "",
          "[Added Lines]",
          "424:   rxrpc_see_connection(conn, rxrpc_conn_see_reap_service);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c": [
          "File: net/rxrpc/conn_service.c -> net/rxrpc/conn_service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   list_add_tail(&conn->proc_link, &rxnet->conn_proc_list);",
          "142:   write_unlock(&rxnet->conn_lock);",
          "147:  }",
          "149:  return conn;",
          "",
          "[Removed Lines]",
          "144:   trace_rxrpc_conn(conn->debug_id, rxrpc_conn_new_service,",
          "145:      refcount_read(&conn->ref),",
          "146:      __builtin_return_address(0));",
          "",
          "[Added Lines]",
          "144:   rxrpc_see_connection(conn, rxrpc_conn_new_service);",
          "",
          "---------------"
        ],
        "net/rxrpc/input.c||net/rxrpc/input.c": [
          "File: net/rxrpc/input.c -> net/rxrpc/input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:  _enter(\"%p,%p\", conn, skb);",
          "1123:  skb_queue_tail(&conn->rx_queue, skb);",
          "1125: }",
          "",
          "[Removed Lines]",
          "1124:  rxrpc_queue_conn(conn);",
          "",
          "[Added Lines]",
          "1124:  rxrpc_queue_conn(conn, rxrpc_conn_queue_rx_work);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa3492abb64b93b2b5d6fdf7a5b687a1fa810d74",
      "candidate_info": {
        "commit_hash": "fa3492abb64b93b2b5d6fdf7a5b687a1fa810d74",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fa3492abb64b93b2b5d6fdf7a5b687a1fa810d74",
        "files": [
          "include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h",
          "net/rxrpc/conn_client.c",
          "net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c"
        ],
        "message": "rxrpc: Trace rxrpc_bundle refcount\n\nAdd a tracepoint for the rxrpc_bundle refcounting.\n\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org",
        "before_after_code_files": [
          "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h",
          "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
          "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c",
          "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ],
          "candidate": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ]
        }
      },
      "candidate_diff": {
        "include/trace/events/rxrpc.h||include/trace/events/rxrpc.h": [
          "File: include/trace/events/rxrpc.h -> include/trace/events/rxrpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  EM(rxrpc_peer_put_input_error,  \"PUT inpt-err\") \\",
          "82:  E_(rxrpc_peer_put_keepalive,  \"PUT keepaliv\")",
          "84: #define rxrpc_conn_traces \\",
          "85:  EM(rxrpc_conn_free,   \"FREE        \") \\",
          "86:  EM(rxrpc_conn_get_activate_call, \"GET act-call\") \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #define rxrpc_bundle_traces \\",
          "85:  EM(rxrpc_bundle_free,   \"FREE        \") \\",
          "86:  EM(rxrpc_bundle_get_client_call, \"GET clt-call\") \\",
          "87:  EM(rxrpc_bundle_get_client_conn, \"GET clt-conn\") \\",
          "88:  EM(rxrpc_bundle_get_service_conn, \"GET svc-conn\") \\",
          "89:  EM(rxrpc_bundle_put_conn,  \"PUT conn    \") \\",
          "90:  EM(rxrpc_bundle_put_discard,  \"PUT discard \") \\",
          "91:  E_(rxrpc_bundle_new,   \"NEW         \")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361: #define EM(a, b) a,",
          "362: #define E_(a, b) a",
          "364: enum rxrpc_call_trace  { rxrpc_call_traces } __mode(byte);",
          "365: enum rxrpc_client_trace  { rxrpc_client_traces } __mode(byte);",
          "366: enum rxrpc_congest_change { rxrpc_congest_changes } __mode(byte);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: enum rxrpc_bundle_trace  { rxrpc_bundle_traces } __mode(byte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390: #define EM(a, b) TRACE_DEFINE_ENUM(a);",
          "391: #define E_(a, b) TRACE_DEFINE_ENUM(a);",
          "393: rxrpc_call_traces;",
          "394: rxrpc_client_traces;",
          "395: rxrpc_congest_changes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: rxrpc_bundle_traces;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "467:         __entry->ref)",
          "468:      );",
          "470: TRACE_EVENT(rxrpc_conn,",
          "471:      TP_PROTO(unsigned int conn_debug_id, int ref, enum rxrpc_conn_trace why),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: TRACE_EVENT(rxrpc_bundle,",
          "482:      TP_PROTO(unsigned int bundle_debug_id, int ref, enum rxrpc_bundle_trace why),",
          "484:      TP_ARGS(bundle_debug_id, ref, why),",
          "486:      TP_STRUCT__entry(",
          "487:       __field(unsigned int, bundle  )",
          "488:       __field(int,  ref  )",
          "489:       __field(int,  why  )",
          "490:         ),",
          "492:      TP_fast_assign(",
          "493:       __entry->bundle = bundle_debug_id;",
          "494:       __entry->ref = ref;",
          "495:       __entry->why = why;",
          "496:       ),",
          "498:      TP_printk(\"CB=%08x %s r=%d\",",
          "499:         __entry->bundle,",
          "500:         __print_symbolic(__entry->why, rxrpc_bundle_traces),",
          "501:         __entry->ref)",
          "502:      );",
          "",
          "---------------"
        ],
        "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
          "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "875: extern struct idr rxrpc_client_conn_ids;",
          "877: void rxrpc_destroy_client_conn_ids(void);",
          "880: int rxrpc_connect_call(struct rxrpc_sock *, struct rxrpc_call *,",
          "881:          struct rxrpc_conn_parameters *, struct sockaddr_rxrpc *,",
          "882:          gfp_t);",
          "",
          "[Removed Lines]",
          "878: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *);",
          "879: void rxrpc_put_bundle(struct rxrpc_bundle *);",
          "",
          "[Added Lines]",
          "878: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "879: void rxrpc_put_bundle(struct rxrpc_bundle *, enum rxrpc_bundle_trace);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
          "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   atomic_set(&bundle->active, 1);",
          "134:   spin_lock_init(&bundle->channel_lock);",
          "135:   INIT_LIST_HEAD(&bundle->waiting_calls);",
          "136:  }",
          "137:  return bundle;",
          "138: }",
          "141: {",
          "143:  return bundle;",
          "144: }",
          "146: static void rxrpc_free_bundle(struct rxrpc_bundle *bundle)",
          "147: {",
          "148:  rxrpc_put_peer(bundle->peer, rxrpc_peer_put_bundle);",
          "149:  kfree(bundle);",
          "150: }",
          "153: {",
          "155:  bool dead;",
          "156:  int r;",
          "158:  dead = __refcount_dec_and_test(&bundle->ref, &r);",
          "161:  if (dead)",
          "162:   rxrpc_free_bundle(bundle);",
          "163: }",
          "",
          "[Removed Lines]",
          "140: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *bundle)",
          "142:  refcount_inc(&bundle->ref);",
          "152: void rxrpc_put_bundle(struct rxrpc_bundle *bundle)",
          "154:  unsigned int d = bundle->debug_id;",
          "160:  _debug(\"PUT B=%x %d\", d, r - 1);",
          "",
          "[Added Lines]",
          "136:   trace_rxrpc_bundle(bundle->debug_id, 1, rxrpc_bundle_new);",
          "141: struct rxrpc_bundle *rxrpc_get_bundle(struct rxrpc_bundle *bundle,",
          "142:           enum rxrpc_bundle_trace why)",
          "144:  int r;",
          "146:  __refcount_inc(&bundle->ref, &r);",
          "147:  trace_rxrpc_bundle(bundle->debug_id, r + 1, why);",
          "153:  trace_rxrpc_bundle(bundle->debug_id, 1, rxrpc_bundle_free);",
          "158: void rxrpc_put_bundle(struct rxrpc_bundle *bundle, enum rxrpc_bundle_trace why)",
          "160:  unsigned int id = bundle->debug_id;",
          "165:  trace_rxrpc_bundle(id, r - 1, why);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:  list_add_tail(&conn->proc_link, &rxnet->conn_proc_list);",
          "207:  write_unlock(&rxnet->conn_lock);",
          "210:  rxrpc_get_peer(conn->peer, rxrpc_peer_get_client_conn);",
          "211:  rxrpc_get_local(conn->local, rxrpc_local_get_client_conn);",
          "212:  key_get(conn->key);",
          "",
          "[Removed Lines]",
          "209:  rxrpc_get_bundle(bundle);",
          "",
          "[Added Lines]",
          "214:  rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_conn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:  candidate->debug_id = atomic_inc_return(&rxrpc_bundle_id);",
          "343:  rb_link_node(&candidate->local_node, parent, pp);",
          "344:  rb_insert_color(&candidate->local_node, &local->client_bundles);",
          "346:  spin_unlock(&local->client_bundles_lock);",
          "347:  _leave(\" = %u [new]\", candidate->debug_id);",
          "348:  return candidate;",
          "",
          "[Removed Lines]",
          "345:  rxrpc_get_bundle(candidate);",
          "",
          "[Added Lines]",
          "350:  rxrpc_get_bundle(candidate, rxrpc_bundle_get_client_call);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350: found_bundle_free:",
          "351:  rxrpc_free_bundle(candidate);",
          "352: found_bundle:",
          "354:  atomic_inc(&bundle->active);",
          "355:  spin_unlock(&local->client_bundles_lock);",
          "356:  _leave(\" = %u [found]\", bundle->debug_id);",
          "",
          "[Removed Lines]",
          "353:  rxrpc_get_bundle(bundle);",
          "",
          "[Added Lines]",
          "358:  rxrpc_get_bundle(bundle, rxrpc_bundle_get_client_call);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "741: out_put_bundle:",
          "742:  rxrpc_deactivate_bundle(bundle);",
          "744: out:",
          "745:  _leave(\" = %d\", ret);",
          "746:  return ret;",
          "",
          "[Removed Lines]",
          "743:  rxrpc_put_bundle(bundle);",
          "",
          "[Added Lines]",
          "748:  rxrpc_put_bundle(bundle, rxrpc_bundle_get_client_call);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "959:   spin_unlock(&local->client_bundles_lock);",
          "960:   if (need_put)",
          "962:  }",
          "963: }",
          "",
          "[Removed Lines]",
          "961:    rxrpc_put_bundle(bundle);",
          "",
          "[Added Lines]",
          "966:    rxrpc_put_bundle(bundle, rxrpc_bundle_put_discard);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c": [
          "File: net/rxrpc/conn_object.c -> net/rxrpc/conn_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:  conn->security->clear(conn);",
          "365:  key_put(conn->key);",
          "367:  rxrpc_put_peer(conn->peer, rxrpc_peer_put_conn);",
          "369:  if (atomic_dec_and_test(&conn->local->rxnet->nr_conns))",
          "",
          "[Removed Lines]",
          "366:  rxrpc_put_bundle(conn->bundle);",
          "",
          "[Added Lines]",
          "366:  rxrpc_put_bundle(conn->bundle, rxrpc_bundle_put_conn);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c": [
          "File: net/rxrpc/conn_service.c -> net/rxrpc/conn_service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   conn->state = RXRPC_CONN_SERVICE_PREALLOC;",
          "135:   refcount_set(&conn->ref, 2);",
          "138:   atomic_inc(&rxnet->nr_conns);",
          "139:   write_lock(&rxnet->conn_lock);",
          "",
          "[Removed Lines]",
          "136:   conn->bundle = rxrpc_get_bundle(&rxrpc_service_dummy_bundle);",
          "",
          "[Added Lines]",
          "136:   conn->bundle = rxrpc_get_bundle(&rxrpc_service_dummy_bundle,",
          "137:       rxrpc_bundle_get_service_conn);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cc800863c49a1f4be1b10b756c09a878d3a3f00",
      "candidate_info": {
        "commit_hash": "2cc800863c49a1f4be1b10b756c09a878d3a3f00",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2cc800863c49a1f4be1b10b756c09a878d3a3f00",
        "files": [
          "net/rxrpc/ar-internal.h",
          "net/rxrpc/call_accept.c",
          "net/rxrpc/call_event.c",
          "net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c",
          "net/rxrpc/input.c",
          "net/rxrpc/key.c",
          "net/rxrpc/output.c",
          "net/rxrpc/proc.c",
          "net/rxrpc/rxkad.c",
          "net/rxrpc/security.c"
        ],
        "message": "rxrpc: Drop rxrpc_conn_parameters from rxrpc_connection and rxrpc_bundle\n\nRemove the rxrpc_conn_parameters struct from the rxrpc_connection and\nrxrpc_bundle structs and emplace the members directly.  These are going to\nget filled in from the rxrpc_call struct in future.\n\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org",
        "before_after_code_files": [
          "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
          "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c",
          "net/rxrpc/call_event.c||net/rxrpc/call_event.c",
          "net/rxrpc/call_object.c||net/rxrpc/call_object.c",
          "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c",
          "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c",
          "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c",
          "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c",
          "net/rxrpc/input.c||net/rxrpc/input.c",
          "net/rxrpc/key.c||net/rxrpc/key.c",
          "net/rxrpc/output.c||net/rxrpc/output.c",
          "net/rxrpc/proc.c||net/rxrpc/proc.c",
          "net/rxrpc/rxkad.c||net/rxrpc/rxkad.c",
          "net/rxrpc/security.c||net/rxrpc/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ],
          "candidate": [
            "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h",
            "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c"
          ]
        }
      },
      "candidate_diff": {
        "net/rxrpc/ar-internal.h||net/rxrpc/ar-internal.h": [
          "File: net/rxrpc/ar-internal.h -> net/rxrpc/ar-internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: struct rxrpc_bundle {",
          "407:  refcount_t  ref;",
          "409:  unsigned int  debug_id;",
          "413:  spinlock_t  channel_lock;",
          "",
          "[Removed Lines]",
          "406:  struct rxrpc_conn_parameters params;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425: struct rxrpc_connection {",
          "426:  struct rxrpc_conn_proto proto;",
          "429:  refcount_t  ref;",
          "430:  struct rcu_head  rcu;",
          "",
          "[Removed Lines]",
          "427:  struct rxrpc_conn_parameters params;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c": [
          "File: net/rxrpc/call_accept.c -> net/rxrpc/call_accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:   b->conn_backlog[conn_tail] = NULL;",
          "306:   smp_store_release(&b->conn_backlog_tail,",
          "307:       (conn_tail + 1) & (RXRPC_BACKLOG_MAX - 1));",
          "310:   rxrpc_see_connection(conn);",
          "311:   rxrpc_new_incoming_connection(rx, conn, sec, skb);",
          "312:  } else {",
          "",
          "[Removed Lines]",
          "308:   conn->params.local = rxrpc_get_local(local);",
          "309:   conn->params.peer = peer;",
          "",
          "[Added Lines]",
          "308:   conn->local = rxrpc_get_local(local);",
          "309:   conn->peer = peer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:  call->conn = conn;",
          "324:  call->security = conn->security;",
          "325:  call->security_ix = conn->security_ix;",
          "327:  call->cong_ssthresh = call->peer->cong_ssthresh;",
          "328:  call->tx_last_sent = ktime_get_real();",
          "329:  return call;",
          "",
          "[Removed Lines]",
          "326:  call->peer = rxrpc_get_peer(conn->params.peer);",
          "",
          "[Added Lines]",
          "326:  call->peer = rxrpc_get_peer(conn->peer);",
          "",
          "---------------"
        ],
        "net/rxrpc/call_event.c||net/rxrpc/call_event.c": [
          "File: net/rxrpc/call_event.c -> net/rxrpc/call_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: void rxrpc_send_ACK(struct rxrpc_call *call, u8 ack_reason,",
          "70:       rxrpc_serial_t serial, enum rxrpc_propose_ack_trace why)",
          "71: {",
          "73:  struct rxrpc_txbuf *txb;",
          "75:  if (test_bit(RXRPC_CALL_DISCONNECTED, &call->flags))",
          "",
          "[Removed Lines]",
          "72:  struct rxrpc_local *local = call->conn->params.local;",
          "",
          "[Added Lines]",
          "72:  struct rxrpc_local *local = call->conn->local;",
          "",
          "---------------"
        ],
        "net/rxrpc/call_object.c||net/rxrpc/call_object.c": [
          "File: net/rxrpc/call_object.c -> net/rxrpc/call_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:  conn->channels[chan].call_id = call->call_id;",
          "418:  rcu_assign_pointer(conn->channels[chan].call, call);",
          "424:  rxrpc_start_call_timer(call);",
          "425:  _leave(\"\");",
          "",
          "[Removed Lines]",
          "420:  spin_lock(&conn->params.peer->lock);",
          "421:  hlist_add_head_rcu(&call->error_link, &conn->params.peer->error_targets);",
          "422:  spin_unlock(&conn->params.peer->lock);",
          "",
          "[Added Lines]",
          "420:  spin_lock(&conn->peer->lock);",
          "421:  hlist_add_head_rcu(&call->error_link, &conn->peer->error_targets);",
          "422:  spin_unlock(&conn->peer->lock);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_client.c||net/rxrpc/conn_client.c": [
          "File: net/rxrpc/conn_client.c -> net/rxrpc/conn_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: static int rxrpc_get_client_connection_id(struct rxrpc_connection *conn,",
          "52:        gfp_t gfp)",
          "53: {",
          "55:  int id;",
          "57:  _enter(\"\");",
          "",
          "[Removed Lines]",
          "54:  struct rxrpc_net *rxnet = conn->params.local->rxnet;",
          "",
          "[Added Lines]",
          "54:  struct rxrpc_net *rxnet = conn->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  bundle = kzalloc(sizeof(*bundle), gfp);",
          "124:  if (bundle) {",
          "127:   refcount_set(&bundle->ref, 1);",
          "128:   atomic_set(&bundle->active, 1);",
          "129:   spin_lock_init(&bundle->channel_lock);",
          "",
          "[Removed Lines]",
          "125:   bundle->params = *cp;",
          "126:   rxrpc_get_peer(bundle->params.peer);",
          "",
          "[Added Lines]",
          "125:   bundle->local  = cp->local;",
          "126:   bundle->peer  = rxrpc_get_peer(cp->peer);",
          "127:   bundle->key  = cp->key;",
          "128:   bundle->exclusive = cp->exclusive;",
          "129:   bundle->upgrade  = cp->upgrade;",
          "130:   bundle->service_id = cp->service_id;",
          "131:   bundle->security_level = cp->security_level;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: static void rxrpc_free_bundle(struct rxrpc_bundle *bundle)",
          "142: {",
          "144:  kfree(bundle);",
          "145: }",
          "",
          "[Removed Lines]",
          "143:  rxrpc_put_peer(bundle->params.peer);",
          "",
          "[Added Lines]",
          "148:  rxrpc_put_peer(bundle->peer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164: rxrpc_alloc_client_connection(struct rxrpc_bundle *bundle, gfp_t gfp)",
          "165: {",
          "166:  struct rxrpc_connection *conn;",
          "168:  int ret;",
          "170:  _enter(\"\");",
          "",
          "[Removed Lines]",
          "167:  struct rxrpc_net *rxnet = bundle->params.local->rxnet;",
          "",
          "[Added Lines]",
          "172:  struct rxrpc_net *rxnet = bundle->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:  refcount_set(&conn->ref, 1);",
          "179:  conn->bundle  = bundle;",
          "181:  conn->out_clientflag = RXRPC_CLIENT_INITIATED;",
          "182:  conn->state  = RXRPC_CONN_CLIENT;",
          "185:  ret = rxrpc_get_client_connection_id(conn, gfp);",
          "186:  if (ret < 0)",
          "",
          "[Removed Lines]",
          "180:  conn->params  = bundle->params;",
          "183:  conn->service_id = conn->params.service_id;",
          "",
          "[Added Lines]",
          "185:  conn->local  = bundle->local;",
          "186:  conn->peer  = bundle->peer;",
          "187:  conn->key  = bundle->key;",
          "188:  conn->exclusive  = bundle->exclusive;",
          "189:  conn->upgrade  = bundle->upgrade;",
          "190:  conn->orig_service_id = bundle->service_id;",
          "191:  conn->security_level = bundle->security_level;",
          "194:  conn->service_id = conn->orig_service_id;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:  write_unlock(&rxnet->conn_lock);",
          "198:  rxrpc_get_bundle(bundle);",
          "203:  trace_rxrpc_conn(conn->debug_id, rxrpc_conn_new_client,",
          "204:     refcount_read(&conn->ref),",
          "",
          "[Removed Lines]",
          "199:  rxrpc_get_peer(conn->params.peer);",
          "200:  rxrpc_get_local(conn->params.local);",
          "201:  key_get(conn->params.key);",
          "",
          "[Added Lines]",
          "210:  rxrpc_get_peer(conn->peer);",
          "211:  rxrpc_get_local(conn->local);",
          "212:  key_get(conn->key);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "228:  if (!conn)",
          "229:   goto dont_reuse;",
          "232:  if (test_bit(RXRPC_CONN_DONT_REUSE, &conn->flags))",
          "233:   goto dont_reuse;",
          "",
          "[Removed Lines]",
          "231:  rxnet = conn->params.local->rxnet;",
          "",
          "[Added Lines]",
          "242:  rxnet = conn->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "285:  while (p) {",
          "286:   bundle = rb_entry(p, struct rxrpc_bundle, local_node);",
          "289:   diff = (cmp(peer) ?:",
          "290:    cmp(key) ?:",
          "291:    cmp(security_level) ?:",
          "",
          "[Removed Lines]",
          "288: #define cmp(X) ((long)bundle->params.X - (long)cp->X)",
          "",
          "[Added Lines]",
          "299: #define cmp(X) ((long)bundle->X - (long)cp->X)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "314:   parent = *pp;",
          "315:   bundle = rb_entry(parent, struct rxrpc_bundle, local_node);",
          "318:   diff = (cmp(peer) ?:",
          "319:    cmp(key) ?:",
          "320:    cmp(security_level) ?:",
          "",
          "[Removed Lines]",
          "317: #define cmp(X) ((long)bundle->params.X - (long)cp->X)",
          "",
          "[Added Lines]",
          "328: #define cmp(X) ((long)bundle->X - (long)cp->X)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:  rxrpc_see_call(call);",
          "534:  list_del_init(&call->chan_wait_link);",
          "536:  call->conn = rxrpc_get_connection(conn);",
          "537:  call->cid = conn->proto.cid | channel;",
          "538:  call->call_id = call_id;",
          "",
          "[Removed Lines]",
          "535:  call->peer = rxrpc_get_peer(conn->params.peer);",
          "",
          "[Added Lines]",
          "546:  call->peer = rxrpc_get_peer(conn->peer);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "570: static void rxrpc_unidle_conn(struct rxrpc_bundle *bundle, struct rxrpc_connection *conn)",
          "571: {",
          "573:  bool drop_ref;",
          "575:  if (!list_empty(&conn->cache_link)) {",
          "",
          "[Removed Lines]",
          "572:  struct rxrpc_net *rxnet = bundle->params.local->rxnet;",
          "",
          "[Added Lines]",
          "583:  struct rxrpc_net *rxnet = bundle->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "795: {",
          "796:  struct rxrpc_connection *conn;",
          "797:  struct rxrpc_channel *chan = NULL;",
          "799:  unsigned int channel;",
          "800:  bool may_reuse;",
          "801:  u32 cid;",
          "",
          "[Removed Lines]",
          "798:  struct rxrpc_net *rxnet = bundle->params.local->rxnet;",
          "",
          "[Added Lines]",
          "809:  struct rxrpc_net *rxnet = bundle->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "937: static void rxrpc_deactivate_bundle(struct rxrpc_bundle *bundle)",
          "938: {",
          "940:  bool need_put = false;",
          "942:  if (atomic_dec_and_lock(&bundle->active, &local->client_bundles_lock)) {",
          "944:    _debug(\"erase bundle\");",
          "945:    rb_erase(&bundle->local_node, &local->client_bundles);",
          "946:    need_put = true;",
          "",
          "[Removed Lines]",
          "939:  struct rxrpc_local *local = bundle->params.local;",
          "943:   if (!bundle->params.exclusive) {",
          "",
          "[Added Lines]",
          "950:  struct rxrpc_local *local = bundle->local;",
          "954:   if (!bundle->exclusive) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "958: static void rxrpc_kill_client_conn(struct rxrpc_connection *conn)",
          "959: {",
          "961:  struct rxrpc_net *rxnet = local->rxnet;",
          "963:  _enter(\"C=%x\", conn->debug_id);",
          "",
          "[Removed Lines]",
          "960:  struct rxrpc_local *local = conn->params.local;",
          "",
          "[Added Lines]",
          "971:  struct rxrpc_local *local = conn->local;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1036:   expiry = rxrpc_conn_idle_client_expiry;",
          "1037:   if (nr_conns > rxrpc_reap_client_connections)",
          "1038:    expiry = rxrpc_conn_idle_client_fast_expiry;",
          "1040:    expiry = rxrpc_closed_conn_expiry * HZ;",
          "1042:   conn_expires_at = conn->idle_timestamp + expiry;",
          "",
          "[Removed Lines]",
          "1039:   if (conn->params.local->service_closed)",
          "",
          "[Added Lines]",
          "1050:   if (conn->local->service_closed)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1111:  list_for_each_entry_safe(conn, tmp, &rxnet->idle_client_conns,",
          "1112:      cache_link) {",
          "1114:    trace_rxrpc_client(conn, -1, rxrpc_client_discard);",
          "1115:    list_move(&conn->cache_link, &graveyard);",
          "1116:   }",
          "",
          "[Removed Lines]",
          "1113:   if (conn->params.local == local) {",
          "",
          "[Added Lines]",
          "1124:   if (conn->local == local) {",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_event.c||net/rxrpc/conn_event.c": [
          "File: net/rxrpc/conn_event.c -> net/rxrpc/conn_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  if (skb && call_id != sp->hdr.callNumber)",
          "53:   return;",
          "57:  msg.msg_control = NULL;",
          "58:  msg.msg_controllen = 0;",
          "59:  msg.msg_flags = 0;",
          "",
          "[Removed Lines]",
          "55:  msg.msg_name = &conn->params.peer->srx.transport;",
          "56:  msg.msg_namelen = conn->params.peer->srx.transport_len;",
          "",
          "[Added Lines]",
          "55:  msg.msg_name = &conn->peer->srx.transport;",
          "56:  msg.msg_namelen = conn->peer->srx.transport_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   break;",
          "88:  case RXRPC_PACKET_TYPE_ACK:",
          "91:   pkt.ack.bufferSpace = 0;",
          "92:   pkt.ack.maxSkew  = htons(skb ? skb->priority : 0);",
          "93:   pkt.ack.firstPacket = htonl(chan->last_seq + 1);",
          "",
          "[Removed Lines]",
          "89:   mtu = conn->params.peer->if_mtu;",
          "90:   mtu -= conn->params.peer->hdrsize;",
          "",
          "[Added Lines]",
          "89:   mtu = conn->peer->if_mtu;",
          "90:   mtu -= conn->peer->hdrsize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:   break;",
          "132:  }",
          "136:  if (ret < 0)",
          "137:   trace_rxrpc_tx_fail(chan->call_debug_id, serial, ret,",
          "138:         rxrpc_tx_point_call_final_resend);",
          "",
          "[Removed Lines]",
          "134:  ret = kernel_sendmsg(conn->params.local->socket, &msg, iov, ioc, len);",
          "135:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "",
          "[Added Lines]",
          "134:  ret = kernel_sendmsg(conn->local->socket, &msg, iov, ioc, len);",
          "135:  conn->peer->last_tx_at = ktime_get_seconds();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:  set_bit(RXRPC_CONN_DONT_REUSE, &conn->flags);",
          "212:  spin_unlock_bh(&conn->state_lock);",
          "216:  msg.msg_control = NULL;",
          "217:  msg.msg_controllen = 0;",
          "218:  msg.msg_flags = 0;",
          "",
          "[Removed Lines]",
          "214:  msg.msg_name = &conn->params.peer->srx.transport;",
          "215:  msg.msg_namelen = conn->params.peer->srx.transport_len;",
          "",
          "[Added Lines]",
          "214:  msg.msg_name = &conn->peer->srx.transport;",
          "215:  msg.msg_namelen = conn->peer->srx.transport_len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:  rxrpc_abort_calls(conn, RXRPC_CALL_LOCALLY_ABORTED, serial);",
          "242:  whdr.serial = htonl(serial);",
          "245:  if (ret < 0) {",
          "246:   trace_rxrpc_tx_fail(conn->debug_id, serial, ret,",
          "247:         rxrpc_tx_point_conn_abort);",
          "",
          "[Removed Lines]",
          "244:  ret = kernel_sendmsg(conn->params.local->socket, &msg, iov, 2, len);",
          "",
          "[Added Lines]",
          "244:  ret = kernel_sendmsg(conn->local->socket, &msg, iov, 2, len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:  trace_rxrpc_tx_packet(conn->debug_id, &whdr, rxrpc_tx_point_conn_abort);",
          "256:  _leave(\" = 0\");",
          "257:  return 0;",
          "",
          "[Removed Lines]",
          "254:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "",
          "[Added Lines]",
          "254:  conn->peer->last_tx_at = ktime_get_seconds();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "330:    return ret;",
          "332:   ret = conn->security->init_connection_security(",
          "334:   if (ret < 0)",
          "335:    return ret;",
          "",
          "[Removed Lines]",
          "333:    conn, conn->params.key->payload.data[0]);",
          "",
          "[Added Lines]",
          "333:    conn, conn->key->payload.data[0]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "485:  rxrpc_see_connection(conn);",
          "488:   rxrpc_do_process_connection(conn);",
          "490:  }",
          "492:  rxrpc_put_connection(conn);",
          "",
          "[Removed Lines]",
          "487:  if (__rxrpc_use_local(conn->params.local)) {",
          "489:   rxrpc_unuse_local(conn->params.local);",
          "",
          "[Added Lines]",
          "487:  if (__rxrpc_use_local(conn->local)) {",
          "489:   rxrpc_unuse_local(conn->local);",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_object.c||net/rxrpc/conn_object.c": [
          "File: net/rxrpc/conn_object.c -> net/rxrpc/conn_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   }",
          "122:   if (conn->proto.epoch != k.epoch ||",
          "124:    goto not_found;",
          "127:   switch (srx.transport.family) {",
          "128:   case AF_INET:",
          "129:    if (peer->srx.transport.sin.sin_port !=",
          "",
          "[Removed Lines]",
          "123:       conn->params.local != local)",
          "126:   peer = conn->params.peer;",
          "",
          "[Added Lines]",
          "123:       conn->local != local)",
          "126:   peer = conn->peer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232: void rxrpc_kill_connection(struct rxrpc_connection *conn)",
          "233: {",
          "236:  ASSERT(!rcu_access_pointer(conn->channels[0].call) &&",
          "237:         !rcu_access_pointer(conn->channels[1].call) &&",
          "",
          "[Removed Lines]",
          "234:  struct rxrpc_net *rxnet = conn->params.local->rxnet;",
          "",
          "[Added Lines]",
          "234:  struct rxrpc_net *rxnet = conn->local->rxnet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340:  __refcount_dec(&conn->ref, &r);",
          "341:  trace_rxrpc_conn(debug_id, rxrpc_conn_put_service, r - 1, here);",
          "342:  if (r - 1 == 1)",
          "344:           jiffies + rxrpc_connection_expiry);",
          "345: }",
          "",
          "[Removed Lines]",
          "343:   rxrpc_set_service_reap_timer(conn->params.local->rxnet,",
          "",
          "[Added Lines]",
          "343:   rxrpc_set_service_reap_timer(conn->local->rxnet,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "360:  rxrpc_purge_queue(&conn->rx_queue);",
          "362:  conn->security->clear(conn);",
          "364:  rxrpc_put_bundle(conn->bundle);",
          "371:  kfree(conn);",
          "372:  _leave(\"\");",
          "",
          "[Removed Lines]",
          "363:  key_put(conn->params.key);",
          "365:  rxrpc_put_peer(conn->params.peer);",
          "367:  if (atomic_dec_and_test(&conn->params.local->rxnet->nr_conns))",
          "368:   wake_up_var(&conn->params.local->rxnet->nr_conns);",
          "369:  rxrpc_put_local(conn->params.local);",
          "",
          "[Added Lines]",
          "363:  key_put(conn->key);",
          "365:  rxrpc_put_peer(conn->peer);",
          "367:  if (atomic_dec_and_test(&conn->local->rxnet->nr_conns))",
          "368:   wake_up_var(&conn->local->rxnet->nr_conns);",
          "369:  rxrpc_put_local(conn->local);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "397:   if (conn->state == RXRPC_CONN_SERVICE_PREALLOC)",
          "398:    continue;",
          "401:    idle_timestamp = READ_ONCE(conn->idle_timestamp);",
          "402:    expire_at = idle_timestamp + rxrpc_connection_expiry * HZ;",
          "404:     expire_at = idle_timestamp + rxrpc_closed_conn_expiry * HZ;",
          "406:    _debug(\"reap CONN %d { u=%d,t=%ld }\",",
          "",
          "[Removed Lines]",
          "400:   if (rxnet->live && !conn->params.local->dead) {",
          "403:    if (conn->params.local->service_closed)",
          "",
          "[Added Lines]",
          "400:   if (rxnet->live && !conn->local->dead) {",
          "403:    if (conn->local->service_closed)",
          "",
          "---------------"
        ],
        "net/rxrpc/conn_service.c||net/rxrpc/conn_service.c": [
          "File: net/rxrpc/conn_service.c -> net/rxrpc/conn_service.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:  conn->proto.epoch = sp->hdr.epoch;",
          "166:  conn->proto.cid  = sp->hdr.cid & RXRPC_CIDMASK;",
          "168:  conn->service_id = sp->hdr.serviceId;",
          "169:  conn->security_ix = sp->hdr.securityIndex;",
          "170:  conn->out_clientflag = 0;",
          "",
          "[Removed Lines]",
          "167:  conn->params.service_id = sp->hdr.serviceId;",
          "",
          "[Added Lines]",
          "167:  conn->orig_service_id = sp->hdr.serviceId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   conn->service_id = rx->service_upgrade.to;",
          "187: }",
          "",
          "[Removed Lines]",
          "186:  rxrpc_publish_service_conn(conn->params.peer, conn);",
          "",
          "[Added Lines]",
          "186:  rxrpc_publish_service_conn(conn->peer, conn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193: void rxrpc_unpublish_service_conn(struct rxrpc_connection *conn)",
          "194: {",
          "197:  write_seqlock_bh(&peer->service_conn_lock);",
          "198:  if (test_and_clear_bit(RXRPC_CONN_IN_SERVICE_CONNS, &conn->flags))",
          "",
          "[Removed Lines]",
          "195:  struct rxrpc_peer *peer = conn->params.peer;",
          "",
          "[Added Lines]",
          "195:  struct rxrpc_peer *peer = conn->peer;",
          "",
          "---------------"
        ],
        "net/rxrpc/input.c||net/rxrpc/input.c": [
          "File: net/rxrpc/input.c -> net/rxrpc/input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1340:    if (!test_bit(RXRPC_CONN_PROBING_FOR_UPGRADE, &conn->flags))",
          "1341:     goto reupgrade;",
          "1343:       sp->hdr.serviceId);",
          "1346:        old_id != sp->hdr.serviceId)",
          "1347:     goto reupgrade;",
          "1348:   }",
          "",
          "[Removed Lines]",
          "1342:    old_id = cmpxchg(&conn->service_id, conn->params.service_id,",
          "1345:    if (old_id != conn->params.service_id &&",
          "",
          "[Added Lines]",
          "1342:    old_id = cmpxchg(&conn->service_id, conn->orig_service_id,",
          "1345:    if (old_id != conn->orig_service_id &&",
          "",
          "---------------"
        ],
        "net/rxrpc/key.c||net/rxrpc/key.c": [
          "File: net/rxrpc/key.c -> net/rxrpc/key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:  if (ret < 0)",
          "514:   goto error;",
          "517:  _leave(\" = 0 [%d]\", key_serial(key));",
          "518:  return 0;",
          "",
          "[Removed Lines]",
          "516:  conn->params.key = key;",
          "",
          "[Added Lines]",
          "516:  conn->key = key;",
          "",
          "---------------"
        ],
        "net/rxrpc/output.c||net/rxrpc/output.c": [
          "File: net/rxrpc/output.c -> net/rxrpc/output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   txb->ack.reason = RXRPC_ACK_IDLE;",
          "143:  }",
          "147:  jmax = rxrpc_rx_jumbo_max;",
          "148:  qsize = (window - 1) - call->rx_consumed;",
          "149:  rsize = max_t(int, call->rx_winsize - qsize, 0);",
          "",
          "[Removed Lines]",
          "145:  mtu = conn->params.peer->if_mtu;",
          "146:  mtu -= conn->params.peer->hdrsize;",
          "",
          "[Added Lines]",
          "145:  mtu = conn->peer->if_mtu;",
          "146:  mtu -= conn->peer->hdrsize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:  txb->ack.previousPacket = htonl(call->rx_highest_seq);",
          "261:  iov_iter_kvec(&msg.msg_iter, WRITE, iov, 1, len);",
          "263:  call->peer->last_tx_at = ktime_get_seconds();",
          "264:  if (ret < 0)",
          "265:   trace_rxrpc_tx_fail(call->debug_id, serial, ret,",
          "",
          "[Removed Lines]",
          "262:  ret = do_udp_sendmsg(conn->params.local->socket, &msg, len);",
          "",
          "[Added Lines]",
          "262:  ret = do_udp_sendmsg(conn->local->socket, &msg, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:  pkt.whdr.serial = htonl(serial);",
          "370:  iov_iter_kvec(&msg.msg_iter, WRITE, iov, 1, sizeof(pkt));",
          "373:  if (ret < 0)",
          "374:   trace_rxrpc_tx_fail(call->debug_id, serial, ret,",
          "375:         rxrpc_tx_point_call_abort);",
          "",
          "[Removed Lines]",
          "371:  ret = do_udp_sendmsg(conn->params.local->socket, &msg, sizeof(pkt));",
          "372:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "",
          "[Added Lines]",
          "371:  ret = do_udp_sendmsg(conn->local->socket, &msg, sizeof(pkt));",
          "372:  conn->peer->last_tx_at = ktime_get_seconds();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "473:  if (txb->len >= call->peer->maxdata)",
          "474:   goto send_fragmentable;",
          "478:  txb->last_sent = ktime_get_real();",
          "479:  if (txb->wire.flags & RXRPC_REQUEST_ACK)",
          "",
          "[Removed Lines]",
          "476:  down_read(&conn->params.local->defrag_sem);",
          "",
          "[Added Lines]",
          "476:  down_read(&conn->local->defrag_sem);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:  rxrpc_inc_stat(call->rxnet, stat_tx_data_send);",
          "493:  if (ret < 0) {",
          "494:   rxrpc_cancel_rtt_probe(call, serial, rtt_slot);",
          "495:   trace_rxrpc_tx_fail(call->debug_id, serial, ret,",
          "",
          "[Removed Lines]",
          "489:  ret = do_udp_sendmsg(conn->params.local->socket, &msg, len);",
          "490:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "492:  up_read(&conn->params.local->defrag_sem);",
          "",
          "[Added Lines]",
          "489:  ret = do_udp_sendmsg(conn->local->socket, &msg, len);",
          "490:  conn->peer->last_tx_at = ktime_get_seconds();",
          "492:  up_read(&conn->local->defrag_sem);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "550:  _debug(\"send fragment\");",
          "554:  txb->last_sent = ktime_get_real();",
          "555:  if (txb->wire.flags & RXRPC_REQUEST_ACK)",
          "556:   rtt_slot = rxrpc_begin_rtt_probe(call, serial, rxrpc_rtt_tx_data);",
          "559:  case AF_INET6:",
          "560:  case AF_INET:",
          "562:       IP_PMTUDISC_DONT);",
          "563:   rxrpc_inc_stat(call->rxnet, stat_tx_data_send_frag);",
          "568:       IP_PMTUDISC_DO);",
          "569:   break;",
          "",
          "[Removed Lines]",
          "552:  down_write(&conn->params.local->defrag_sem);",
          "558:  switch (conn->params.local->srx.transport.family) {",
          "561:   ip_sock_set_mtu_discover(conn->params.local->socket->sk,",
          "564:   ret = do_udp_sendmsg(conn->params.local->socket, &msg, len);",
          "565:   conn->params.peer->last_tx_at = ktime_get_seconds();",
          "567:   ip_sock_set_mtu_discover(conn->params.local->socket->sk,",
          "",
          "[Added Lines]",
          "552:  down_write(&conn->local->defrag_sem);",
          "558:  switch (conn->local->srx.transport.family) {",
          "561:   ip_sock_set_mtu_discover(conn->local->socket->sk,",
          "564:   ret = do_udp_sendmsg(conn->local->socket, &msg, len);",
          "565:   conn->peer->last_tx_at = ktime_get_seconds();",
          "567:   ip_sock_set_mtu_discover(conn->local->socket->sk,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "582:  }",
          "583:  rxrpc_tx_backoff(call, ret);",
          "586:  goto done;",
          "587: }",
          "",
          "[Removed Lines]",
          "585:  up_write(&conn->params.local->defrag_sem);",
          "",
          "[Added Lines]",
          "585:  up_write(&conn->local->defrag_sem);",
          "",
          "---------------"
        ],
        "net/rxrpc/proc.c||net/rxrpc/proc.c": [
          "File: net/rxrpc/proc.c -> net/rxrpc/proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   goto print;",
          "173:  }",
          "178: print:",
          "179:  seq_printf(seq,",
          "180:      \"UDP   %-47.47s %-47.47s %4x %08x %s %3u\"",
          "",
          "[Removed Lines]",
          "175:  sprintf(lbuff, \"%pISpc\", &conn->params.local->srx.transport);",
          "177:  sprintf(rbuff, \"%pISpc\", &conn->params.peer->srx.transport);",
          "",
          "[Added Lines]",
          "175:  sprintf(lbuff, \"%pISpc\", &conn->local->srx.transport);",
          "177:  sprintf(rbuff, \"%pISpc\", &conn->peer->srx.transport);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:      rxrpc_conn_is_service(conn) ? \"Svc\" : \"Clt\",",
          "187:      refcount_read(&conn->ref),",
          "188:      rxrpc_conn_states[conn->state],",
          "190:      atomic_read(&conn->serial),",
          "191:      conn->hi_serial,",
          "192:      conn->channels[0].call_id,",
          "",
          "[Removed Lines]",
          "189:      key_serial(conn->params.key),",
          "",
          "[Added Lines]",
          "189:      key_serial(conn->key),",
          "",
          "---------------"
        ],
        "net/rxrpc/rxkad.c||net/rxrpc/rxkad.c": [
          "File: net/rxrpc/rxkad.c -> net/rxrpc/rxkad.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  struct crypto_sync_skcipher *ci;",
          "104:  int ret;",
          "108:  conn->security_ix = token->security_index;",
          "",
          "[Removed Lines]",
          "106:  _enter(\"{%d},{%x}\", conn->debug_id, key_serial(conn->params.key));",
          "",
          "[Added Lines]",
          "106:  _enter(\"{%d},{%x}\", conn->debug_id, key_serial(conn->key));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:        sizeof(token->kad->session_key)) < 0)",
          "119:   BUG();",
          "122:  case RXRPC_SECURITY_PLAIN:",
          "123:  case RXRPC_SECURITY_AUTH:",
          "124:  case RXRPC_SECURITY_ENCRYPT:",
          "",
          "[Removed Lines]",
          "121:  switch (conn->params.security_level) {",
          "",
          "[Added Lines]",
          "121:  switch (conn->security_level) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150: {",
          "151:  size_t shdr, buf_size, chunk;",
          "154:  default:",
          "155:   buf_size = chunk = min_t(size_t, remain, RXRPC_JUMBO_DATALEN);",
          "156:   shdr = 0;",
          "",
          "[Removed Lines]",
          "153:  switch (call->conn->params.security_level) {",
          "",
          "[Added Lines]",
          "153:  switch (call->conn->security_level) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:  _enter(\"\");",
          "196:   return 0;",
          "198:  tmpbuf = kmalloc(tmpsize, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "195:  if (!conn->params.key)",
          "",
          "[Added Lines]",
          "195:  if (!conn->key)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   return -ENOMEM;",
          "206:  }",
          "209:  memcpy(&iv, token->kad->session_key, sizeof(iv));",
          "211:  tmpbuf[0] = htonl(conn->proto.epoch);",
          "",
          "[Removed Lines]",
          "208:  token = conn->params.key->payload.data[0];",
          "",
          "[Added Lines]",
          "208:  token = conn->key->payload.data[0];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:  }",
          "321:  memcpy(&iv, token->kad->session_key, sizeof(iv));",
          "323:  sg_init_one(&sg, txb->data, txb->len);",
          "",
          "[Removed Lines]",
          "320:  token = call->conn->params.key->payload.data[0];",
          "",
          "[Added Lines]",
          "320:  token = call->conn->key->payload.data[0];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "344:  int ret;",
          "346:  _enter(\"{%d{%x}},{#%u},%u,\",",
          "348:         txb->seq, txb->len);",
          "350:  if (!call->conn->rxkad.cipher)",
          "351:   return 0;",
          "354:  if (ret < 0)",
          "355:   return ret;",
          "",
          "[Removed Lines]",
          "347:         call->debug_id, key_serial(call->conn->params.key),",
          "353:  ret = key_validate(call->conn->params.key);",
          "",
          "[Added Lines]",
          "347:         call->debug_id, key_serial(call->conn->key),",
          "353:  ret = key_validate(call->conn->key);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "381:  txb->wire.cksum = htons(y);",
          "384:  case RXRPC_SECURITY_PLAIN:",
          "385:   ret = 0;",
          "386:   break;",
          "",
          "[Removed Lines]",
          "383:  switch (call->conn->params.security_level) {",
          "",
          "[Added Lines]",
          "383:  switch (call->conn->security_level) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "525:  }",
          "529:  memcpy(&iv, token->kad->session_key, sizeof(iv));",
          "531:  skcipher_request_set_sync_tfm(req, call->conn->rxkad.cipher);",
          "",
          "[Removed Lines]",
          "528:  token = call->conn->params.key->payload.data[0];",
          "",
          "[Added Lines]",
          "528:  token = call->conn->key->payload.data[0];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "596:  u32 x, y;",
          "598:  _enter(\"{%d{%x}},{#%u}\",",
          "601:  if (!call->conn->rxkad.cipher)",
          "602:   return 0;",
          "",
          "[Removed Lines]",
          "599:         call->debug_id, key_serial(call->conn->params.key), seq);",
          "",
          "[Added Lines]",
          "599:         call->debug_id, key_serial(call->conn->key), seq);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "632:   goto protocol_error;",
          "633:  }",
          "636:  case RXRPC_SECURITY_PLAIN:",
          "637:   ret = 0;",
          "638:   break;",
          "",
          "[Removed Lines]",
          "635:  switch (call->conn->params.security_level) {",
          "",
          "[Added Lines]",
          "635:  switch (call->conn->security_level) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "678:  challenge.min_level = htonl(0);",
          "679:  challenge.__padding = 0;",
          "683:  msg.msg_control = NULL;",
          "684:  msg.msg_controllen = 0;",
          "685:  msg.msg_flags = 0;",
          "",
          "[Removed Lines]",
          "681:  msg.msg_name = &conn->params.peer->srx.transport;",
          "682:  msg.msg_namelen = conn->params.peer->srx.transport_len;",
          "",
          "[Added Lines]",
          "681:  msg.msg_name = &conn->peer->srx.transport;",
          "682:  msg.msg_namelen = conn->peer->srx.transport_len;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "705:  serial = atomic_inc_return(&conn->serial);",
          "706:  whdr.serial = htonl(serial);",
          "709:  if (ret < 0) {",
          "710:   trace_rxrpc_tx_fail(conn->debug_id, serial, ret,",
          "711:         rxrpc_tx_point_rxkad_challenge);",
          "712:   return -EAGAIN;",
          "713:  }",
          "716:  trace_rxrpc_tx_packet(conn->debug_id, &whdr,",
          "717:          rxrpc_tx_point_rxkad_challenge);",
          "718:  _leave(\" = 0\");",
          "",
          "[Removed Lines]",
          "708:  ret = kernel_sendmsg(conn->params.local->socket, &msg, iov, 2, len);",
          "715:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "",
          "[Added Lines]",
          "708:  ret = kernel_sendmsg(conn->local->socket, &msg, iov, 2, len);",
          "715:  conn->peer->last_tx_at = ktime_get_seconds();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "737:  _enter(\"\");",
          "741:  msg.msg_control = NULL;",
          "742:  msg.msg_controllen = 0;",
          "743:  msg.msg_flags = 0;",
          "",
          "[Removed Lines]",
          "739:  msg.msg_name = &conn->params.peer->srx.transport;",
          "740:  msg.msg_namelen = conn->params.peer->srx.transport_len;",
          "",
          "[Added Lines]",
          "739:  msg.msg_name = &conn->peer->srx.transport;",
          "740:  msg.msg_namelen = conn->peer->srx.transport_len;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "762:  serial = atomic_inc_return(&conn->serial);",
          "763:  whdr.serial = htonl(serial);",
          "766:  if (ret < 0) {",
          "767:   trace_rxrpc_tx_fail(conn->debug_id, serial, ret,",
          "768:         rxrpc_tx_point_rxkad_response);",
          "769:   return -EAGAIN;",
          "770:  }",
          "773:  _leave(\" = 0\");",
          "774:  return 0;",
          "775: }",
          "",
          "[Removed Lines]",
          "765:  ret = kernel_sendmsg(conn->params.local->socket, &msg, iov, 3, len);",
          "772:  conn->params.peer->last_tx_at = ktime_get_seconds();",
          "",
          "[Added Lines]",
          "765:  ret = kernel_sendmsg(conn->local->socket, &msg, iov, 3, len);",
          "772:  conn->peer->last_tx_at = ktime_get_seconds();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "832:  u32 version, nonce, min_level, abort_code;",
          "833:  int ret;",
          "837:  eproto = tracepoint_string(\"chall_no_key\");",
          "838:  abort_code = RX_PROTOCOL_ERROR;",
          "840:   goto protocol_error;",
          "842:  abort_code = RXKADEXPIRED;",
          "844:  if (ret < 0)",
          "845:   goto other_error;",
          "",
          "[Removed Lines]",
          "835:  _enter(\"{%d,%x}\", conn->debug_id, key_serial(conn->params.key));",
          "839:  if (!conn->params.key)",
          "843:  ret = key_validate(conn->params.key);",
          "",
          "[Added Lines]",
          "835:  _enter(\"{%d,%x}\", conn->debug_id, key_serial(conn->key));",
          "839:  if (!conn->key)",
          "843:  ret = key_validate(conn->key);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "864:  abort_code = RXKADLEVELFAIL;",
          "865:  ret = -EACCES;",
          "867:   goto other_error;",
          "872:  resp = kzalloc(sizeof(struct rxkad_response), GFP_NOFS);",
          "",
          "[Removed Lines]",
          "866:  if (conn->params.security_level < min_level)",
          "869:  token = conn->params.key->payload.data[0];",
          "",
          "[Added Lines]",
          "866:  if (conn->security_level < min_level)",
          "869:  token = conn->key->payload.data[0];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "878:  resp->encrypted.cid  = htonl(conn->proto.cid);",
          "879:  resp->encrypted.securityIndex = htonl(conn->security_ix);",
          "880:  resp->encrypted.inc_nonce = htonl(nonce + 1);",
          "882:  resp->kvno   = htonl(token->kad->kvno);",
          "883:  resp->ticket_len  = htonl(token->kad->ticket_len);",
          "884:  resp->encrypted.call_id[0] = htonl(conn->channels[0].call_counter);",
          "",
          "[Removed Lines]",
          "881:  resp->encrypted.level  = htonl(conn->params.security_level);",
          "",
          "[Added Lines]",
          "881:  resp->encrypted.level  = htonl(conn->security_level);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1226:  level = ntohl(response->encrypted.level);",
          "1227:  if (level > RXRPC_SECURITY_ENCRYPT)",
          "1228:   goto protocol_error_free;",
          "",
          "[Removed Lines]",
          "1229:  conn->params.security_level = level;",
          "",
          "[Added Lines]",
          "1229:  conn->security_level = level;",
          "",
          "---------------"
        ],
        "net/rxrpc/security.c||net/rxrpc/security.c": [
          "File: net/rxrpc/security.c -> net/rxrpc/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: {",
          "70:  const struct rxrpc_security *sec;",
          "71:  struct rxrpc_key_token *token;",
          "73:  int ret;",
          "75:  _enter(\"{%d},{%x}\", conn->debug_id, key_serial(key));",
          "",
          "[Removed Lines]",
          "72:  struct key *key = conn->params.key;",
          "",
          "[Added Lines]",
          "72:  struct key *key = conn->key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:  rcu_read_lock();",
          "167:  if (!rx)",
          "168:   goto out;",
          "",
          "[Removed Lines]",
          "166:  rx = rcu_dereference(conn->params.local->service);",
          "",
          "[Added Lines]",
          "166:  rx = rcu_dereference(conn->local->service);",
          "",
          "---------------"
        ]
      }
    }
  ]
}