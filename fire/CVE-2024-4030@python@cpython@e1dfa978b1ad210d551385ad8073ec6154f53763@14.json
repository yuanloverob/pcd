{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b908072578d44673b8f278117c9d4c3d42a3127",
      "candidate_info": {
        "commit_hash": "3b908072578d44673b8f278117c9d4c3d42a3127",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3b908072578d44673b8f278117c9d4c3d42a3127",
        "files": [
          "Lib/idlelib/config.py"
        ],
        "message": "[3.13] IDLE: fix url in config.py comment (GH-119198) (#119199)\n\nIDLE: fix url in config.py comment (GH-119198)\n(cherry picked from commit 357f5a1f73684d0c126a5e8f79d76ff3641c4d52)\n\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>",
        "before_after_code_files": [
          "Lib/idlelib/config.py||Lib/idlelib/config.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/idlelib/config.py||Lib/idlelib/config.py": [
          "File: Lib/idlelib/config.py -> Lib/idlelib/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         self.userCfg = {}",
          "160:         self.cfg = {}  # TODO use to select userCfg vs defaultCfg",
          "161:         # self.blink_off_time = <first editor text>['insertofftime']",
          "164:         if not _utest:",
          "165:             self.CreateConfigHandlers()",
          "",
          "[Removed Lines]",
          "162:         # See https:/bugs.python.org/issue4630, msg356516.",
          "",
          "[Added Lines]",
          "162:         # See https://bugs.python.org/issue4630#msg356516.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d98d6b1776996484e05ec6b755a6770977a5000a",
      "candidate_info": {
        "commit_hash": "d98d6b1776996484e05ec6b755a6770977a5000a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d98d6b1776996484e05ec6b755a6770977a5000a",
        "files": [
          "Include/cpython/pystate.h",
          "Include/internal/pycore_ceval.h",
          "Lib/test/test_importlib/test_threaded_import.py",
          "Python/ceval_gil.c",
          "Python/pystate.c"
        ],
        "message": "[3.13] gh-118727: Don't drop the GIL in `drop_gil()` unless the current thread holds it (GH-118745) (#119474)\n\n`drop_gil()` assumes that its caller is attached, which means that the current\nthread holds the GIL if and only if the GIL is enabled, and the enabled-state\nof the GIL won't change. This isn't true, though, because `detach_thread()`\ncalls `_PyEval_ReleaseLock()` after detaching and\n`_PyThreadState_DeleteCurrent()` calls it after removing the current thread\nfrom consideration for stop-the-world requests (effectively detaching it).\n\nFix this by remembering whether or not a thread acquired the GIL when it last\nattached, in `PyThreadState._status.holds_gil`, and check this in `drop_gil()`\ninstead of `gil->enabled`.\n\nThis fixes a crash in `test_multiprocessing_pool_circular_import()`, so I've\nreenabled it.\n(cherry picked from commit be1dfccdf2c5c7671b8a549e969b8cf7d60d9936)\n\nCo-authored-by: Brett Simmers <swtaarrs@users.noreply.github.com>",
        "before_after_code_files": [
          "Include/cpython/pystate.h||Include/cpython/pystate.h",
          "Include/internal/pycore_ceval.h||Include/internal/pycore_ceval.h",
          "Lib/test/test_importlib/test_threaded_import.py||Lib/test/test_importlib/test_threaded_import.py",
          "Python/ceval_gil.c||Python/ceval_gil.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/pystate.h||Include/cpython/pystate.h": [
          "File: Include/cpython/pystate.h -> Include/cpython/pystate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         unsigned int bound_gilstate:1;",
          "85:         unsigned int active:1;",
          "88:         unsigned int finalizing:1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         unsigned int holds_gil:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         unsigned int finalized:1;",
          "94:     } _status;",
          "95: #ifdef Py_BUILD_CORE",
          "96: #  define _PyThreadState_WHENCE_NOTSET -1",
          "",
          "[Removed Lines]",
          "93:         unsigned int :24;",
          "",
          "[Added Lines]",
          "95:         unsigned int :23;",
          "",
          "---------------"
        ],
        "Include/internal/pycore_ceval.h||Include/internal/pycore_ceval.h": [
          "File: Include/internal/pycore_ceval.h -> Include/internal/pycore_ceval.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: extern void _PyEval_InitGIL(PyThreadState *tstate, int own_gil);",
          "132: extern void _PyEval_FiniGIL(PyInterpreterState *interp);",
          "140: #ifdef Py_GIL_DISABLED",
          "",
          "[Removed Lines]",
          "136: extern int _PyEval_AcquireLock(PyThreadState *tstate);",
          "138: extern void _PyEval_ReleaseLock(PyInterpreterState *, PyThreadState *);",
          "",
          "[Added Lines]",
          "134: extern void _PyEval_AcquireLock(PyThreadState *tstate);",
          "136: extern void _PyEval_ReleaseLock(PyInterpreterState *, PyThreadState *,",
          "137:                                 int final_release);",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/test_threaded_import.py||Lib/test/test_importlib/test_threaded_import.py": [
          "File: Lib/test/test_importlib/test_threaded_import.py -> Lib/test/test_importlib/test_threaded_import.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from test.support import verbose",
          "18: from test.support.import_helper import forget, mock_register_at_fork",
          "19: from test.support.os_helper import (TESTFN, unlink, rmtree)",
          "22: threading_helper.requires_working_threading(module=True)",
          "",
          "[Removed Lines]",
          "20: from test.support import script_helper, threading_helper, requires_gil_enabled",
          "",
          "[Added Lines]",
          "20: from test.support import script_helper, threading_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:                           'partial', 'cfimport.py')",
          "249:         script_helper.assert_python_ok(fn)",
          "254:     def test_multiprocessing_pool_circular_import(self):",
          "255:         # Regression test for bpo-41567",
          "256:         fn = os.path.join(os.path.dirname(__file__),",
          "",
          "[Removed Lines]",
          "251:     # gh-118727 and gh-118729: pool_in_threads.py may crash in free-threaded",
          "252:     # builds, which can hang the Tsan test so temporarily skip it for now.",
          "253:     @requires_gil_enabled(\"gh-118727: test may crash in free-threaded builds\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/ceval_gil.c||Python/ceval_gil.c": [
          "File: Python/ceval_gil.c -> Python/ceval_gil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: }",
          "206: #endif",
          "210: {",
          "211:     MUTEX_LOCK(gil->mutex);",
          "212:     _Py_ANNOTATE_RWLOCK_RELEASED(&gil->locked, /*is_write=*/1);",
          "213:     _Py_atomic_store_int_relaxed(&gil->locked, 0);",
          "214:     COND_SIGNAL(gil->cond);",
          "215:     MUTEX_UNLOCK(gil->mutex);",
          "216: }",
          "218: static void",
          "220: {",
          "221:     struct _ceval_state *ceval = &interp->ceval;",
          "223:        the GIL for the last time in this thread.  This is particularly",
          "224:        relevant when the current thread state is finalizing or its",
          "225:        interpreter is finalizing (either may be in an inconsistent",
          "226:        state).  In that case the current thread will definitely",
          "231:     struct _gil_runtime_state *gil = ceval->gil;",
          "232: #ifdef Py_GIL_DISABLED",
          "234:         return;",
          "235:     }",
          "236: #endif",
          "",
          "[Removed Lines]",
          "208: static void",
          "209: drop_gil_impl(struct _gil_runtime_state *gil)",
          "219: drop_gil(PyInterpreterState *interp, PyThreadState *tstate)",
          "233:     if (!_Py_atomic_load_int_relaxed(&gil->enabled)) {",
          "",
          "[Added Lines]",
          "208: static inline void",
          "209: drop_gil_impl(PyThreadState *tstate, struct _gil_runtime_state *gil)",
          "214:     if (tstate != NULL) {",
          "215:         tstate->_status.holds_gil = 0;",
          "216:     }",
          "222: drop_gil(PyInterpreterState *interp, PyThreadState *tstate, int final_release)",
          "234:     assert(final_release || tstate != NULL);",
          "240:     if (tstate != NULL && !tstate->_status.holds_gil) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:         Py_FatalError(\"drop_gil: GIL is not locked\");",
          "239:     }",
          "244:            under our feet using PyThreadState_Swap(). Fix the GIL last",
          "246:         _Py_atomic_store_ptr_relaxed(&gil->last_holder, tstate);",
          "247:     }",
          "251: #ifdef FORCE_SWITCHING",
          "261:         _Py_eval_breaker_bit_is_set(tstate, _PY_GIL_DROP_REQUEST_BIT)) {",
          "262:         MUTEX_LOCK(gil->switch_mutex);",
          "",
          "[Removed Lines]",
          "242:     if (tstate != NULL) {",
          "249:     drop_gil_impl(gil);",
          "253:        the last time in this thread.  In that case there's a possible",
          "254:        race with tstate->interp getting deleted after gil->mutex is",
          "255:        unlocked and before the following code runs, leading to a crash.",
          "256:        We can use (tstate == NULL) to indicate the thread is done with",
          "257:        the GIL, and that's the only time we might delete the",
          "258:        interpreter, so checking tstate first prevents the crash.",
          "260:     if (tstate != NULL &&",
          "",
          "[Added Lines]",
          "248:     if (!final_release) {",
          "255:     drop_gil_impl(tstate, gil);",
          "259:        case there's a possible race with tstate->interp getting deleted after",
          "260:        gil->mutex is unlocked and before the following code runs, leading to a",
          "261:        crash.  We can use final_release to indicate the thread is done with the",
          "262:        GIL, and that's the only time we might delete the interpreter.  See",
          "264:     if (!final_release &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:    tstate must be non-NULL.",
          "288: take_gil(PyThreadState *tstate)",
          "289: {",
          "290:     int err = errno;",
          "",
          "[Removed Lines]",
          "287: static int",
          "",
          "[Added Lines]",
          "291: static void",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:     struct _gil_runtime_state *gil = interp->ceval.gil;",
          "310: #ifdef Py_GIL_DISABLED",
          "311:     if (!_Py_atomic_load_int_relaxed(&gil->enabled)) {",
          "313:     }",
          "314: #endif",
          "",
          "[Removed Lines]",
          "312:         return 0;",
          "",
          "[Added Lines]",
          "316:         return;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:     if (!_Py_atomic_load_int_relaxed(&gil->enabled)) {",
          "362:         COND_SIGNAL(gil->cond);",
          "363:         MUTEX_UNLOCK(gil->mutex);",
          "365:     }",
          "366: #endif",
          "",
          "[Removed Lines]",
          "364:         return 0;",
          "",
          "[Added Lines]",
          "368:         return;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:            in take_gil() while the main thread called",
          "395:         MUTEX_UNLOCK(gil->mutex);",
          "399:         PyThread_exit_thread();",
          "400:     }",
          "401:     assert(_PyThreadState_CheckConsistency(tstate));",
          "403:     _Py_unset_eval_breaker_bit(tstate, _PY_GIL_DROP_REQUEST_BIT);",
          "404:     update_eval_breaker_for_thread(interp, tstate);",
          "406:     MUTEX_UNLOCK(gil->mutex);",
          "408:     errno = err;",
          "410: }",
          "412: void _PyEval_SetSwitchInterval(unsigned long microseconds)",
          "",
          "[Removed Lines]",
          "398:         drop_gil(interp, NULL);",
          "409:     return 1;",
          "",
          "[Added Lines]",
          "402:         drop_gil(interp, NULL, 1);",
          "407:     tstate->_status.holds_gil = 1;",
          "414:     return;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451: static inline int",
          "452: current_thread_holds_gil(struct _gil_runtime_state *gil, PyThreadState *tstate)",
          "453: {",
          "458: }",
          "459: #endif",
          "",
          "[Removed Lines]",
          "454:     if (((PyThreadState*)_Py_atomic_load_ptr_relaxed(&gil->last_holder)) != tstate) {",
          "455:         return 0;",
          "456:     }",
          "457:     return _Py_atomic_load_int_relaxed(&gil->locked);",
          "",
          "[Added Lines]",
          "459:     int holds_gil = tstate->_status.holds_gil;",
          "463:     int locked = _Py_atomic_load_int_relaxed(&gil->locked);",
          "464:     int is_last_holder =",
          "465:         ((PyThreadState*)_Py_atomic_load_ptr_relaxed(&gil->last_holder)) == tstate;",
          "466:     assert(!holds_gil || locked);",
          "467:     assert(!holds_gil || is_last_holder);",
          "469:     return holds_gil;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "564:        We therefore avoid PyThreadState_Get() which dumps a fatal error",
          "567: }",
          "570: _PyEval_AcquireLock(PyThreadState *tstate)",
          "571: {",
          "572:     _Py_EnsureTstateNotNULL(tstate);",
          "574: }",
          "576: void",
          "578: {",
          "583: }",
          "585: void",
          "",
          "[Removed Lines]",
          "566:     drop_gil(tstate->interp, tstate);",
          "569: int",
          "573:     return take_gil(tstate);",
          "577: _PyEval_ReleaseLock(PyInterpreterState *interp, PyThreadState *tstate)",
          "581:     assert(tstate == NULL || tstate->interp == interp);",
          "582:     drop_gil(interp, tstate);",
          "",
          "[Added Lines]",
          "578:     drop_gil(tstate->interp, tstate, 0);",
          "581: void",
          "585:     take_gil(tstate);",
          "589: _PyEval_ReleaseLock(PyInterpreterState *interp,",
          "590:                     PyThreadState *tstate,",
          "591:                     int final_release)",
          "593:     assert(tstate != NULL);",
          "594:     assert(tstate->interp == interp);",
          "595:     drop_gil(interp, tstate, final_release);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1140:         return 1;",
          "1141:     }",
          "1142:     return 0;",
          "",
          "[Removed Lines]",
          "1139:         drop_gil_impl(gil);",
          "",
          "[Added Lines]",
          "1152:         drop_gil_impl(tstate, gil);",
          "1157:         _Py_unset_eval_breaker_bit(tstate, _PY_GIL_DROP_REQUEST_BIT);",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1843: #endif",
          "1844:     current_fast_clear(tstate->interp->runtime);",
          "1845:     tstate_delete_common(tstate);",
          "1847:     free_threadstate((_PyThreadStateImpl *)tstate);",
          "1848: }",
          "",
          "[Removed Lines]",
          "1846:     _PyEval_ReleaseLock(tstate->interp, NULL);",
          "",
          "[Added Lines]",
          "1846:     _PyEval_ReleaseLock(tstate->interp, tstate, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2070:     while (1) {",
          "2074:         current_fast_set(&_PyRuntime, tstate);",
          "",
          "[Removed Lines]",
          "2071:         int acquired_gil = _PyEval_AcquireLock(tstate);",
          "",
          "[Added Lines]",
          "2071:         _PyEval_AcquireLock(tstate);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2079:         }",
          "2081: #ifdef Py_GIL_DISABLED",
          "2088:             tstate_set_detached(tstate, _Py_THREAD_DETACHED);",
          "2089:             tstate_deactivate(tstate);",
          "2090:             current_fast_clear(&_PyRuntime);",
          "2091:             continue;",
          "2092:         }",
          "2093:         _Py_qsbr_attach(((_PyThreadStateImpl *)tstate)->qsbr);",
          "2096: #endif",
          "2097:         break;",
          "2098:     }",
          "",
          "[Removed Lines]",
          "2082:         if (_PyEval_IsGILEnabled(tstate) != acquired_gil) {",
          "2087:             assert(!acquired_gil);",
          "2094: #else",
          "2095:         (void)acquired_gil;",
          "",
          "[Added Lines]",
          "2082:         if (_PyEval_IsGILEnabled(tstate) && !tstate->_status.holds_gil) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2123:     tstate_deactivate(tstate);",
          "2124:     tstate_set_detached(tstate, detached_state);",
          "2125:     current_fast_clear(&_PyRuntime);",
          "2127: }",
          "2129: void",
          "",
          "[Removed Lines]",
          "2126:     _PyEval_ReleaseLock(tstate->interp, tstate);",
          "",
          "[Added Lines]",
          "2123:     _PyEval_ReleaseLock(tstate->interp, tstate, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f2f9c4ff5c8f1b362766fc4fd38a665674504d1",
      "candidate_info": {
        "commit_hash": "1f2f9c4ff5c8f1b362766fc4fd38a665674504d1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/1f2f9c4ff5c8f1b362766fc4fd38a665674504d1",
        "files": [
          "Lib/test/libregrtest/testresult.py",
          "Lib/test/libregrtest/utils.py",
          "Lib/test/test_regrtest.py",
          "Misc/NEWS.d/next/Tests/2024-07-01-09-04-32.gh-issue-121188.XbuTVa.rst"
        ],
        "message": "[3.13] gh-121188: Sanitize invalid XML characters in regrtest (GH-121195) (#121204)\n\ngh-121188: Sanitize invalid XML characters in regrtest (GH-121195)\n\nWhen creating the JUnit XML file, regrtest now escapes characters\nwhich are invalid in XML, such as the chr(27) control character used\nin ANSI escape sequences.\n(cherry picked from commit af8c3d7a26d605099f5b3406a8d33ecddb77e8fb)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/test/libregrtest/testresult.py||Lib/test/libregrtest/testresult.py",
          "Lib/test/libregrtest/utils.py||Lib/test/libregrtest/utils.py",
          "Lib/test/test_regrtest.py||Lib/test/test_regrtest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/libregrtest/testresult.py||Lib/test/libregrtest/testresult.py": [
          "File: Lib/test/libregrtest/testresult.py -> Lib/test/libregrtest/testresult.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import traceback",
          "10: import unittest",
          "11: from test import support",
          "13: class RegressionTestResult(unittest.TextTestResult):",
          "14:     USE_XML = False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from test.libregrtest.utils import sanitize_xml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         if capture:",
          "66:             if self._stdout_buffer is not None:",
          "67:                 stdout = self._stdout_buffer.getvalue().rstrip()",
          "69:             if self._stderr_buffer is not None:",
          "70:                 stderr = self._stderr_buffer.getvalue().rstrip()",
          "73:         for k, v in args.items():",
          "74:             if not k or not v:",
          "75:                 continue",
          "76:             e2 = ET.SubElement(e, k)",
          "77:             if hasattr(v, 'items'):",
          "78:                 for k2, v2 in v.items():",
          "79:                     if k2:",
          "81:                     else:",
          "83:             else:",
          "86:     @classmethod",
          "87:     def __makeErrorDict(cls, err_type, err_value, err_tb):",
          "",
          "[Removed Lines]",
          "68:                 ET.SubElement(e, 'system-out').text = stdout",
          "71:                 ET.SubElement(e, 'system-err').text = stderr",
          "80:                         e2.set(k2, str(v2))",
          "82:                         e2.text = str(v2)",
          "84:                 e2.text = str(v)",
          "",
          "[Added Lines]",
          "69:                 ET.SubElement(e, 'system-out').text = sanitize_xml(stdout)",
          "72:                 ET.SubElement(e, 'system-err').text = sanitize_xml(stderr)",
          "82:                         e2.set(k2, sanitize_xml(str(v2)))",
          "84:                         e2.text = sanitize_xml(str(v2))",
          "86:                 e2.text = sanitize_xml(str(v))",
          "",
          "---------------"
        ],
        "Lib/test/libregrtest/utils.py||Lib/test/libregrtest/utils.py": [
          "File: Lib/test/libregrtest/utils.py -> Lib/test/libregrtest/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import os.path",
          "6: import platform",
          "7: import random",
          "8: import shlex",
          "9: import signal",
          "10: import subprocess",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import re",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:         pass",
          "714:     return None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718: ILLEGAL_XML_CHARS_RE = re.compile(",
          "719:     '['",
          "720:     # Control characters; newline (\\x0A and \\x0D) and TAB (\\x09) are legal",
          "721:     '\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F'",
          "722:     # Surrogate characters",
          "723:     '\\uD800-\\uDFFF'",
          "724:     # Special Unicode characters",
          "725:     '\\uFFFE'",
          "726:     '\\uFFFF'",
          "727:     # Match multiple sequential invalid characters for better effiency",
          "728:     ']+')",
          "730: def _sanitize_xml_replace(regs):",
          "731:     text = regs[0]",
          "732:     return ''.join(f'\\\\x{ord(ch):02x}' if ch <= '\\xff' else ascii(ch)[1:-1]",
          "733:                    for ch in text)",
          "735: def sanitize_xml(text):",
          "736:     return ILLEGAL_XML_CHARS_RE.sub(_sanitize_xml_replace, text)",
          "",
          "---------------"
        ],
        "Lib/test/test_regrtest.py||Lib/test/test_regrtest.py": [
          "File: Lib/test/test_regrtest.py -> Lib/test/test_regrtest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import tempfile",
          "22: import textwrap",
          "23: import unittest",
          "24: from test import support",
          "25: from test.support import os_helper, without_optimizer",
          "26: from test.libregrtest import cmdline",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from xml.etree import ElementTree",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2243:             self.check_executed_tests(output, testname, stats=1, parallel=True)",
          "2244:             self.assertNotIn('SPAM SPAM SPAM', output)",
          "2247: class TestUtils(unittest.TestCase):",
          "2248:     def test_format_duration(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2248:     def test_xml(self):",
          "2249:         code = textwrap.dedent(r\"\"\"",
          "2250:             import unittest",
          "2251:             from test import support",
          "2253:             class VerboseTests(unittest.TestCase):",
          "2254:                 def test_failed(self):",
          "2255:                     print(\"abc \\x1b def\")",
          "2256:                     self.fail()",
          "2257:         \"\"\")",
          "2258:         testname = self.create_test(code=code)",
          "2260:         # Run sequentially",
          "2261:         filename = os_helper.TESTFN",
          "2262:         self.addCleanup(os_helper.unlink, filename)",
          "2264:         output = self.run_tests(testname, \"--junit-xml\", filename,",
          "2265:                                 exitcode=EXITCODE_BAD_TEST)",
          "2266:         self.check_executed_tests(output, testname,",
          "2267:                                   failed=testname,",
          "2268:                                   stats=TestStats(1, 1, 0))",
          "2270:         # Test generated XML",
          "2271:         with open(filename, encoding=\"utf8\") as fp:",
          "2272:             content = fp.read()",
          "2274:         testsuite = ElementTree.fromstring(content)",
          "2275:         self.assertEqual(int(testsuite.get('tests')), 1)",
          "2276:         self.assertEqual(int(testsuite.get('errors')), 0)",
          "2277:         self.assertEqual(int(testsuite.get('failures')), 1)",
          "2279:         testcase = testsuite[0][0]",
          "2280:         self.assertEqual(testcase.get('status'), 'run')",
          "2281:         self.assertEqual(testcase.get('result'), 'completed')",
          "2282:         self.assertGreater(float(testcase.get('time')), 0)",
          "2283:         for out in testcase.iter('system-out'):",
          "2284:             self.assertEqual(out.text, r\"abc \\x1b def\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2426:             self.assertTrue(match_test(test_chdir))",
          "2427:             self.assertFalse(match_test(test_copy))",
          "2430: if __name__ == '__main__':",
          "2431:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2469:     def test_sanitize_xml(self):",
          "2470:         sanitize_xml = utils.sanitize_xml",
          "2472:         # escape invalid XML characters",
          "2473:         self.assertEqual(sanitize_xml('abc \\x1b\\x1f def'),",
          "2474:                          r'abc \\x1b\\x1f def')",
          "2475:         self.assertEqual(sanitize_xml('nul:\\x00, bell:\\x07'),",
          "2476:                          r'nul:\\x00, bell:\\x07')",
          "2477:         self.assertEqual(sanitize_xml('surrogate:\\uDC80'),",
          "2478:                          r'surrogate:\\udc80')",
          "2479:         self.assertEqual(sanitize_xml('illegal \\uFFFE and \\uFFFF'),",
          "2480:                          r'illegal \\ufffe and \\uffff')",
          "2482:         # no escape for valid XML characters",
          "2483:         self.assertEqual(sanitize_xml('a\\n\\tb'),",
          "2484:                          'a\\n\\tb')",
          "2485:         self.assertEqual(sanitize_xml('valid t\\xe9xt \\u20ac'),",
          "2486:                          'valid t\\xe9xt \\u20ac')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48c777688305bfa45038a15ab09c03350503a2c4",
      "candidate_info": {
        "commit_hash": "48c777688305bfa45038a15ab09c03350503a2c4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/48c777688305bfa45038a15ab09c03350503a2c4",
        "files": [
          "Modules/_ctypes/clinic/_ctypes.c.h",
          "Modules/_io/clinic/bufferedio.c.h",
          "Modules/_io/clinic/iobase.c.h",
          "Modules/_io/clinic/textio.c.h",
          "Modules/clinic/_curses_panel.c.h",
          "Modules/clinic/_dbmmodule.c.h",
          "Modules/clinic/_elementtree.c.h",
          "Modules/clinic/_gdbmmodule.c.h",
          "Modules/clinic/_pickle.c.h",
          "Modules/clinic/arraymodule.c.h",
          "Modules/clinic/pyexpat.c.h",
          "Tools/clinic/libclinic/parse_args.py"
        ],
        "message": "[3.13] gh-119661: Add _Py_SINGLETON() include in Argumenet Clinic (#119712) (#119716)\n\ngh-119661: Add _Py_SINGLETON() include in Argumenet Clinic (#119712)\n\nWhen the _Py_SINGLETON() is used, Argument Clinic now adds an\nexplicit \"pycore_runtime.h\" include to get the macro. Previously, the\nmacro may or may not be included indirectly by another include.\n\n(cherry picked from commit 7ca74a760a5d3cdf48159f003d4db7c2778e9261)",
        "before_after_code_files": [
          "Modules/_ctypes/clinic/_ctypes.c.h||Modules/_ctypes/clinic/_ctypes.c.h",
          "Modules/_io/clinic/bufferedio.c.h||Modules/_io/clinic/bufferedio.c.h",
          "Modules/_io/clinic/iobase.c.h||Modules/_io/clinic/iobase.c.h",
          "Modules/_io/clinic/textio.c.h||Modules/_io/clinic/textio.c.h",
          "Modules/clinic/_curses_panel.c.h||Modules/clinic/_curses_panel.c.h",
          "Modules/clinic/_dbmmodule.c.h||Modules/clinic/_dbmmodule.c.h",
          "Modules/clinic/_elementtree.c.h||Modules/clinic/_elementtree.c.h",
          "Modules/clinic/_gdbmmodule.c.h||Modules/clinic/_gdbmmodule.c.h",
          "Modules/clinic/_pickle.c.h||Modules/clinic/_pickle.c.h",
          "Modules/clinic/arraymodule.c.h||Modules/clinic/arraymodule.c.h",
          "Modules/clinic/pyexpat.c.h||Modules/clinic/pyexpat.c.h",
          "Tools/clinic/libclinic/parse_args.py||Tools/clinic/libclinic/parse_args.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_ctypes/clinic/_ctypes.c.h||Modules/_ctypes/clinic/_ctypes.c.h": [
          "File: Modules/_ctypes/clinic/_ctypes.c.h -> Modules/_ctypes/clinic/_ctypes.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_abstract.h\"      // _PyNumber_Index()",
          "6: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/_io/clinic/bufferedio.c.h||Modules/_io/clinic/bufferedio.c.h": [
          "File: Modules/_io/clinic/bufferedio.c.h -> Modules/_io/clinic/bufferedio.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_gc.h\"          // PyGC_Head",
          "8: #endif",
          "9: #include \"pycore_abstract.h\"      // _PyNumber_Index()",
          "10: #include \"pycore_critical_section.h\"// Py_BEGIN_CRITICAL_SECTION()",
          "",
          "[Removed Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_ID()",
          "",
          "[Added Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "",
          "---------------"
        ],
        "Modules/_io/clinic/iobase.c.h||Modules/_io/clinic/iobase.c.h": [
          "File: Modules/_io/clinic/iobase.c.h -> Modules/_io/clinic/iobase.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_abstract.h\"      // _Py_convert_optional_to_ssize_t()",
          "6: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/_io/clinic/textio.c.h||Modules/_io/clinic/textio.c.h": [
          "File: Modules/_io/clinic/textio.c.h -> Modules/_io/clinic/textio.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_gc.h\"          // PyGC_Head",
          "8: #endif",
          "9: #include \"pycore_abstract.h\"      // _Py_convert_optional_to_ssize_t()",
          "10: #include \"pycore_critical_section.h\"// Py_BEGIN_CRITICAL_SECTION()",
          "",
          "[Removed Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_ID()",
          "",
          "[Added Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "",
          "---------------"
        ],
        "Modules/clinic/_curses_panel.c.h||Modules/clinic/_curses_panel.c.h": [
          "File: Modules/clinic/_curses_panel.c.h -> Modules/clinic/_curses_panel.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "7: PyDoc_STRVAR(_curses_panel_panel_bottom__doc__,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/clinic/_dbmmodule.c.h||Modules/clinic/_dbmmodule.c.h": [
          "File: Modules/clinic/_dbmmodule.c.h -> Modules/clinic/_dbmmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "7: PyDoc_STRVAR(_dbm_dbm_close__doc__,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/clinic/_elementtree.c.h||Modules/clinic/_elementtree.c.h": [
          "File: Modules/clinic/_elementtree.c.h -> Modules/clinic/_elementtree.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_gc.h\"          // PyGC_Head",
          "8: #endif",
          "9: #include \"pycore_abstract.h\"      // _PyNumber_Index()",
          "10: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "",
          "[Removed Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_ID()",
          "",
          "[Added Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "",
          "---------------"
        ],
        "Modules/clinic/_gdbmmodule.c.h||Modules/clinic/_gdbmmodule.c.h": [
          "File: Modules/clinic/_gdbmmodule.c.h -> Modules/clinic/_gdbmmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_modsupport.h\"    // _PyArg_CheckPositional()",
          "7: PyDoc_STRVAR(_gdbm_gdbm_get__doc__,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/clinic/_pickle.c.h||Modules/clinic/_pickle.c.h": [
          "File: Modules/clinic/_pickle.c.h -> Modules/clinic/_pickle.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_gc.h\"          // PyGC_Head",
          "8: #endif",
          "9: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "",
          "[Removed Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_ID()",
          "",
          "[Added Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "",
          "---------------"
        ],
        "Modules/clinic/arraymodule.c.h||Modules/clinic/arraymodule.c.h": [
          "File: Modules/clinic/arraymodule.c.h -> Modules/clinic/arraymodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: preserve",
          "5: #include \"pycore_abstract.h\"      // _PyNumber_Index()",
          "6: #include \"pycore_modsupport.h\"    // _PyArg_CheckPositional()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "7: #endif",
          "",
          "---------------"
        ],
        "Modules/clinic/pyexpat.c.h||Modules/clinic/pyexpat.c.h": [
          "File: Modules/clinic/pyexpat.c.h -> Modules/clinic/pyexpat.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)",
          "6: #  include \"pycore_gc.h\"          // PyGC_Head",
          "8: #endif",
          "9: #include \"pycore_modsupport.h\"    // _PyArg_UnpackKeywords()",
          "",
          "[Removed Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_ID()",
          "",
          "[Added Lines]",
          "7: #  include \"pycore_runtime.h\"     // _Py_SINGLETON()",
          "",
          "---------------"
        ],
        "Tools/clinic/libclinic/parse_args.py||Tools/clinic/libclinic/parse_args.py": [
          "File: Tools/clinic/libclinic/parse_args.py -> Tools/clinic/libclinic/parse_args.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         p for p in f.parameters.values()",
          "39:         if not p.is_positional_only() and not p.is_vararg()",
          "40:     ])",
          "41:     if limited_capi:",
          "42:         declarations = \"\"\"",
          "43:             #define KWTUPLE NULL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     condition = '#if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:             #  define KWTUPLE NULL",
          "51:             #endif",
          "52:         \"\"\"",
          "53:     else:",
          "54:         # XXX Why do we not statically allocate the tuple",
          "55:         # for non-builtin modules?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         codegen.add_include('pycore_runtime.h', '_Py_SINGLETON()',",
          "57:                             condition=condition)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:             #endif  // !Py_BUILD_CORE",
          "74:         \"\"\" % num_keywords",
          "80:     declarations += \"\"\"",
          "81:             static const char * const _keywords[] = {{{keywords_c} NULL}};",
          "",
          "[Removed Lines]",
          "76:         condition = '#if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)'",
          "77:         codegen.add_include('pycore_gc.h', 'PyGC_Head', condition=condition)",
          "78:         codegen.add_include('pycore_runtime.h', '_Py_ID()', condition=condition)",
          "",
          "[Added Lines]",
          "81:         codegen.add_include('pycore_gc.h', 'PyGC_Head',",
          "82:                             condition=condition)",
          "83:         codegen.add_include('pycore_runtime.h', '_Py_ID()',",
          "84:                             condition=condition)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
      "candidate_info": {
        "commit_hash": "dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
        "files": [
          "Lib/test/test_zipfile/_path/test_complexity.py",
          "Lib/test/test_zipfile/_path/test_path.py"
        ],
        "message": "[3.13] Re-order imports to align with zipp 3.18.2 (GH-119587) (#119589)\n\nRe-order imports to align with zipp 3.18.2 (GH-119587)\n(cherry picked from commit 5482a939ac18f4cd861d212c759960af8fa2b19d)\n\nCo-authored-by: Jason R. Coombs <jaraco@jaraco.com>",
        "before_after_code_files": [
          "Lib/test/test_zipfile/_path/test_complexity.py||Lib/test/test_zipfile/_path/test_complexity.py",
          "Lib/test/test_zipfile/_path/test_path.py||Lib/test/test_zipfile/_path/test_path.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_zipfile/_path/test_complexity.py||Lib/test/test_zipfile/_path/test_complexity.py": [
          "File: Lib/test/test_zipfile/_path/test_complexity.py -> Lib/test/test_zipfile/_path/test_complexity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     @pytest.mark.flaky",
          "21:     def test_implied_dirs_performance(self):",
          "22:         best, others = big_o.big_o(",
          "24:             lambda size: [",
          "25:                 '/'.join(string.ascii_lowercase + str(n)) for n in range(size)",
          "26:             ],",
          "",
          "[Removed Lines]",
          "23:             compose(consume, zipfile.CompleteDirs._implied_dirs),",
          "",
          "[Added Lines]",
          "23:             compose(consume, zipfile._path.CompleteDirs._implied_dirs),",
          "",
          "---------------"
        ],
        "Lib/test/test_zipfile/_path/test_path.py||Lib/test/test_zipfile/_path/test_path.py": [
          "File: Lib/test/test_zipfile/_path/test_path.py -> Lib/test/test_zipfile/_path/test_path.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import zipfile",
          "9: import zipfile._path",
          "11: from ._functools import compose",
          "12: from ._itertools import Counter",
          "14: from ._test_params import parameterize, Invoked",
          "19: class jaraco:",
          "20:     class itertools:",
          "",
          "[Removed Lines]",
          "16: from test.support.os_helper import temp_dir, FakePath",
          "",
          "[Added Lines]",
          "11: from test.support.os_helper import temp_dir, FakePath",
          "",
          "---------------"
        ]
      }
    }
  ]
}