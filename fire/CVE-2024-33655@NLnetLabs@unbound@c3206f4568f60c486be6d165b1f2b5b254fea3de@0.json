{
  "cve_id": "CVE-2024-33655",
  "cve_desc": "The DNS protocol in RFC 1035 and updates allows remote attackers to cause a denial of service (resource consumption) by arranging for DNS queries to be accumulated for seconds, such that responses are later sent in a pulsing burst (which can be considered traffic amplification in some cases), aka the \"DNSBomb\" issue.",
  "repo": "NLnetLabs/unbound",
  "patch_hash": "c3206f4568f60c486be6d165b1f2b5b254fea3de",
  "patch_info": {
    "commit_hash": "c3206f4568f60c486be6d165b1f2b5b254fea3de",
    "repo": "NLnetLabs/unbound",
    "commit_url": "https://github.com/NLnetLabs/unbound/commit/c3206f4568f60c486be6d165b1f2b5b254fea3de",
    "files": [
      "doc/Changelog",
      "doc/example.conf.in",
      "doc/unbound.conf.5.in",
      "services/cache/infra.c",
      "services/cache/infra.h",
      "services/mesh.c",
      "testdata/cachedb_expired_client_timeout.crpl",
      "testdata/cachedb_subnet_expired.crpl",
      "testdata/doh_downstream.tdir/doh_downstream.conf",
      "testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf",
      "testdata/doh_downstream_post.tdir/doh_downstream_post.conf",
      "testdata/fwd_three_service.tdir/fwd_three_service.conf",
      "testdata/iter_ghost_timewindow.rpl",
      "testdata/ssl_req_order.tdir/ssl_req_order.conf",
      "testdata/tcp_req_order.tdir/tcp_req_order.conf",
      "testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf",
      "util/config_file.c",
      "util/config_file.h",
      "util/configlexer.lex",
      "util/configparser.y"
    ],
    "message": "- Fix for the DNSBomb vulnerability CVE-2024-33655. Thanks to Xiang Li   from the Network and Information Security Lab of Tsinghua University   for reporting it.",
    "before_after_code_files": [
      "services/cache/infra.c||services/cache/infra.c",
      "services/cache/infra.h||services/cache/infra.h",
      "services/mesh.c||services/mesh.c",
      "testdata/cachedb_expired_client_timeout.crpl||testdata/cachedb_expired_client_timeout.crpl",
      "testdata/cachedb_subnet_expired.crpl||testdata/cachedb_subnet_expired.crpl",
      "testdata/doh_downstream.tdir/doh_downstream.conf||testdata/doh_downstream.tdir/doh_downstream.conf",
      "testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf||testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf",
      "testdata/doh_downstream_post.tdir/doh_downstream_post.conf||testdata/doh_downstream_post.tdir/doh_downstream_post.conf",
      "testdata/fwd_three_service.tdir/fwd_three_service.conf||testdata/fwd_three_service.tdir/fwd_three_service.conf",
      "testdata/iter_ghost_timewindow.rpl||testdata/iter_ghost_timewindow.rpl",
      "testdata/ssl_req_order.tdir/ssl_req_order.conf||testdata/ssl_req_order.tdir/ssl_req_order.conf",
      "testdata/tcp_req_order.tdir/tcp_req_order.conf||testdata/tcp_req_order.tdir/tcp_req_order.conf",
      "testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf||testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf",
      "util/config_file.c||util/config_file.c",
      "util/config_file.h||util/config_file.h",
      "util/configlexer.lex||util/configlexer.lex",
      "util/configparser.y||util/configparser.y"
    ]
  },
  "patch_diff": {
    "services/cache/infra.c||services/cache/infra.c": [
      "File: services/cache/infra.c -> services/cache/infra.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:  return 1;",
      "235: }",
      "237: struct infra_cache*",
      "238: infra_create(struct config_file* cfg)",
      "239: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238: static struct wait_limit_netblock_info*",
      "239: wait_limit_netblock_findcreate(struct infra_cache* infra, char* str,",
      "240:  int cookie)",
      "241: {",
      "242:  rbtree_type* tree;",
      "243:  struct sockaddr_storage addr;",
      "244:  int net;",
      "245:  socklen_t addrlen;",
      "246:  struct wait_limit_netblock_info* d;",
      "248:  if(!netblockstrtoaddr(str, 0, &addr, &addrlen, &net)) {",
      "249:   log_err(\"cannot parse wait limit netblock '%s'\", str);",
      "250:   return 0;",
      "251:  }",
      "254:  if(cookie)",
      "255:   tree = &infra->wait_limits_cookie_netblock;",
      "256:  else",
      "257:   tree = &infra->wait_limits_netblock;",
      "258:  d = (struct wait_limit_netblock_info*)addr_tree_find(tree, &addr,",
      "259:   addrlen, net);",
      "260:  if(d)",
      "261:   return d;",
      "264:  d = (struct wait_limit_netblock_info*)calloc(1, sizeof(*d));",
      "265:  if(!d)",
      "266:   return NULL;",
      "267:  d->limit = -1;",
      "268:  if(!addr_tree_insert(tree, &d->node, &addr, addrlen, net)) {",
      "269:   log_err(\"duplicate element in domainlimit tree\");",
      "270:   free(d);",
      "271:   return NULL;",
      "272:  }",
      "273:  return d;",
      "274: }",
      "278: static int",
      "279: infra_wait_limit_netblock_insert(struct infra_cache* infra,",
      "280:  struct config_file* cfg)",
      "281: {",
      "282:  struct config_str2list* p;",
      "283:  struct wait_limit_netblock_info* d;",
      "284:  for(p = cfg->wait_limit_netblock; p; p = p->next) {",
      "285:   d = wait_limit_netblock_findcreate(infra, p->str, 0);",
      "286:   if(!d)",
      "287:    return 0;",
      "288:   d->limit = atoi(p->str2);",
      "289:  }",
      "290:  for(p = cfg->wait_limit_cookie_netblock; p; p = p->next) {",
      "291:   d = wait_limit_netblock_findcreate(infra, p->str, 1);",
      "292:   if(!d)",
      "293:    return 0;",
      "294:   d->limit = atoi(p->str2);",
      "295:  }",
      "296:  return 1;",
      "297: }",
      "300: static int",
      "301: setup_wait_limits(struct infra_cache* infra, struct config_file* cfg)",
      "302: {",
      "303:  addr_tree_init(&infra->wait_limits_netblock);",
      "304:  addr_tree_init(&infra->wait_limits_cookie_netblock);",
      "305:  if(!infra_wait_limit_netblock_insert(infra, cfg))",
      "306:   return 0;",
      "307:  addr_tree_init_parents(&infra->wait_limits_netblock);",
      "308:  addr_tree_init_parents(&infra->wait_limits_cookie_netblock);",
      "309:  return 1;",
      "310: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "267:   infra_delete(infra);",
      "268:   return NULL;",
      "269:  }",
      "270:  infra_ip_ratelimit = cfg->ip_ratelimit;",
      "271:  infra->client_ip_rates = slabhash_create(cfg->ip_ratelimit_slabs,",
      "272:      INFRA_HOST_STARTSIZE, cfg->ip_ratelimit_size, &ip_rate_sizefunc,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "345:  if(!setup_wait_limits(infra, cfg)) {",
      "346:   infra_delete(infra);",
      "347:   return NULL;",
      "348:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "287:  }",
      "288: }",
      "290: void",
      "291: infra_delete(struct infra_cache* infra)",
      "292: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370: static void wait_limit_netblock_del(rbnode_type* n, void* ATTR_UNUSED(arg))",
      "371: {",
      "372:  free(n);",
      "373: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "296:  slabhash_delete(infra->domain_rates);",
      "297:  traverse_postorder(&infra->domain_limits, domain_limit_free, NULL);",
      "298:  slabhash_delete(infra->client_ip_rates);",
      "299:  free(infra);",
      "300: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "384:  traverse_postorder(&infra->wait_limits_netblock,",
      "385:   wait_limit_netblock_del, NULL);",
      "386:  traverse_postorder(&infra->wait_limits_cookie_netblock,",
      "387:   wait_limit_netblock_del, NULL);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "882: static void infra_ip_create_ratedata(struct infra_cache* infra,",
      "884: {",
      "885:  hashvalue_type h = hash_addr(addr, addrlen, 0);",
      "886:  struct ip_rate_key* k = (struct ip_rate_key*)calloc(1, sizeof(*k));",
      "",
      "[Removed Lines]",
      "883:  struct sockaddr_storage* addr, socklen_t addrlen, time_t timenow)",
      "",
      "[Added Lines]",
      "972:  struct sockaddr_storage* addr, socklen_t addrlen, time_t timenow,",
      "973:  int mesh_wait)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "898:  k->entry.data = d;",
      "899:  d->qps[0] = 1;",
      "900:  d->timestamp[0] = timenow;",
      "901:  slabhash_insert(infra->client_ip_rates, h, &k->entry, d, NULL);",
      "902: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "991:  d->mesh_wait = mesh_wait;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1121:  }",
      "1125:  return 1;",
      "1126: }",
      "",
      "[Removed Lines]",
      "1124:  infra_ip_create_ratedata(infra, addr, addrlen, timenow);",
      "",
      "[Added Lines]",
      "1215:  infra_ip_create_ratedata(infra, addr, addrlen, timenow, 0);",
      "1219: int infra_wait_limit_allowed(struct infra_cache* infra, struct comm_reply* rep,",
      "1220:  int cookie_valid, struct config_file* cfg)",
      "1221: {",
      "1222:  struct lruhash_entry* entry;",
      "1223:  if(cfg->wait_limit == 0)",
      "1224:   return 1;",
      "1226:  entry = infra_find_ip_ratedata(infra, &rep->client_addr,",
      "1227:   rep->client_addrlen, 0);",
      "1228:  if(entry) {",
      "1229:   rbtree_type* tree;",
      "1230:   struct wait_limit_netblock_info* w;",
      "1231:   struct rate_data* d = (struct rate_data*)entry->data;",
      "1232:   int mesh_wait = d->mesh_wait;",
      "1233:   lock_rw_unlock(&entry->lock);",
      "1236:   if(cookie_valid)",
      "1237:    tree = &infra->wait_limits_cookie_netblock;",
      "1238:   else tree = &infra->wait_limits_netblock;",
      "1239:   w = (struct wait_limit_netblock_info*)addr_tree_lookup(tree,",
      "1240:    &rep->client_addr, rep->client_addrlen);",
      "1241:   if(w) {",
      "1242:    if(w->limit != -1 && mesh_wait > w->limit)",
      "1243:     return 0;",
      "1244:   } else {",
      "1247:    if(mesh_wait > (cookie_valid?cfg->wait_limit_cookie:",
      "1248:     cfg->wait_limit))",
      "1249:     return 0;",
      "1250:   }",
      "1251:  }",
      "1252:  return 1;",
      "1253: }",
      "1255: void infra_wait_limit_inc(struct infra_cache* infra, struct comm_reply* rep,",
      "1256:  time_t timenow, struct config_file* cfg)",
      "1257: {",
      "1258:  struct lruhash_entry* entry;",
      "1259:  if(cfg->wait_limit == 0)",
      "1260:   return;",
      "1263:  entry = infra_find_ip_ratedata(infra, &rep->client_addr,",
      "1264:   rep->client_addrlen, 1);",
      "1265:  if(entry) {",
      "1266:   struct rate_data* d = (struct rate_data*)entry->data;",
      "1267:   d->mesh_wait++;",
      "1268:   lock_rw_unlock(&entry->lock);",
      "1269:   return;",
      "1270:  }",
      "1273:  infra_ip_create_ratedata(infra, &rep->client_addr,",
      "1274:   rep->client_addrlen, timenow, 1);",
      "1275: }",
      "1277: void infra_wait_limit_dec(struct infra_cache* infra, struct comm_reply* rep,",
      "1278:  struct config_file* cfg)",
      "1279: {",
      "1280:  struct lruhash_entry* entry;",
      "1281:  if(cfg->wait_limit == 0)",
      "1282:   return;",
      "1284:  entry = infra_find_ip_ratedata(infra, &rep->client_addr,",
      "1285:   rep->client_addrlen, 1);",
      "1286:  if(entry) {",
      "1287:   struct rate_data* d = (struct rate_data*)entry->data;",
      "1288:   if(d->mesh_wait > 0)",
      "1289:    d->mesh_wait--;",
      "1290:   lock_rw_unlock(&entry->lock);",
      "1291:  }",
      "1292: }",
      "",
      "---------------"
    ],
    "services/cache/infra.h||services/cache/infra.h": [
      "File: services/cache/infra.h -> services/cache/infra.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:  rbtree_type domain_limits;",
      "124:  struct slabhash* client_ip_rates;",
      "125: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:  rbtree_type wait_limits_netblock;",
      "128:  rbtree_type wait_limits_cookie_netblock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186:  time_t timestamp[RATE_WINDOW];",
      "187: };",
      "189: #define ip_rate_data rate_data",
      "192: #define INFRA_HOST_STARTSIZE 32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:  int mesh_wait;",
      "200: struct wait_limit_netblock_info {",
      "202:  struct addr_tree_node node;",
      "204:  int limit;",
      "205: };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "475: #define ip_rate_deldatafunc rate_deldatafunc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "494: int infra_wait_limit_allowed(struct infra_cache* infra, struct comm_reply* rep,",
      "495:  int cookie_valid, struct config_file* cfg);",
      "498: void infra_wait_limit_inc(struct infra_cache* infra, struct comm_reply* rep,",
      "499:  time_t timenow, struct config_file* cfg);",
      "502: void infra_wait_limit_dec(struct infra_cache* infra, struct comm_reply* rep,",
      "503:  struct config_file* cfg);",
      "",
      "---------------"
    ],
    "services/mesh.c||services/mesh.c": [
      "File: services/mesh.c -> services/mesh.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: #include \"services/outbound_list.h\"",
      "48: #include \"services/cache/dns.h\"",
      "49: #include \"services/cache/rrset.h\"",
      "50: #include \"util/log.h\"",
      "51: #include \"util/net_help.h\"",
      "52: #include \"util/module.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50: #include \"services/cache/infra.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415:  if(rep->c->tcp_req_info) {",
      "416:   r_buffer = rep->c->tcp_req_info->spool_buffer;",
      "417:  }",
      "418:  if(!unique)",
      "419:   s = mesh_area_find(mesh, cinfo, qinfo, qflags&(BIT_RD|BIT_CD), 0, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:  if(!infra_wait_limit_allowed(mesh->env->infra_cache, rep,",
      "420:   edns->cookie_valid, mesh->env->cfg)) {",
      "421:   verbose(VERB_ALGO, \"Too many queries waiting from the IP. \"",
      "422:    \"dropping incoming query.\");",
      "423:   comm_point_drop_reply(rep);",
      "424:   mesh->stats_dropped++;",
      "425:   return;",
      "426:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "522:   }",
      "523:  }",
      "524: #endif",
      "526:  if(was_detached) {",
      "527:   log_assert(mesh->num_detached_states > 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534:  infra_wait_limit_inc(mesh->env->infra_cache, rep, *mesh->env->now,",
      "535:   mesh->env->cfg);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "954:   mstate->reply_list = NULL;",
      "955:   for(; rep; rep=rep->next) {",
      "956:    comm_point_drop_reply(&rep->query_reply);",
      "957:    log_assert(mesh->num_reply_addrs > 0);",
      "958:    mesh->num_reply_addrs--;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "967:    infra_wait_limit_dec(mesh->env->infra_cache,",
      "968:     &rep->query_reply, mesh->env->cfg);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1436:   comm_point_send_reply(&r->query_reply);",
      "1437:   m->reply_list = rlist;",
      "1438:  }",
      "1440:  log_assert(m->s.env->mesh->num_reply_addrs > 0);",
      "1441:  m->s.env->mesh->num_reply_addrs--;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1452:  infra_wait_limit_dec(m->s.env->infra_cache, &r->query_reply,",
      "1453:   m->s.env->cfg);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1491:   }",
      "1492:  }",
      "1493:  for(r = mstate->reply_list; r; r = r->next) {",
      "1494:   i++;",
      "1495:   tv = r->start_time;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1509:   struct timeval old;",
      "1510:   timeval_subtract(&old, mstate->s.env->now_tv, &r->start_time);",
      "1511:   if(mstate->s.env->cfg->discard_timeout != 0 &&",
      "1512:    ((int)old.tv_sec)*1000+((int)old.tv_usec)/1000 >",
      "1513:    mstate->s.env->cfg->discard_timeout) {",
      "1520:    struct mesh_reply* reply_list = mstate->reply_list;",
      "1521:    verbose(VERB_ALGO, \"drop reply, it is older than discard-timeout\");",
      "1522:    infra_wait_limit_dec(mstate->s.env->infra_cache,",
      "1523:     &r->query_reply, mstate->s.env->cfg);",
      "1524:    mstate->reply_list = NULL;",
      "1525:    comm_point_drop_reply(&r->query_reply);",
      "1526:    mstate->reply_list = reply_list;",
      "1527:    mstate->s.env->mesh->stats_dropped++;",
      "1528:    continue;",
      "1529:   }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1516:    struct mesh_reply* reply_list = mstate->reply_list;",
      "1517:    mstate->reply_list = NULL;",
      "1518:    comm_point_drop_reply(&r->query_reply);",
      "1519:    mstate->reply_list = reply_list;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1554:    infra_wait_limit_dec(mstate->s.env->infra_cache,",
      "1555:     &r->query_reply, mstate->s.env->cfg);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2047:    log_assert(mesh->num_reply_addrs > 0);",
      "2048:    mesh->num_reply_addrs--;",
      "2051:    n = n->next;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2088:    infra_wait_limit_dec(mesh->env->infra_cache,",
      "2089:     &n->query_reply, mesh->env->cfg);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2186:   log_dns_msg(\"Serve expired lookup\", &qstate->qinfo, msg->rep);",
      "2188:  for(r = mstate->reply_list; r; r = r->next) {",
      "2189:   i++;",
      "2190:   tv = r->start_time;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2230:   struct timeval old;",
      "2231:   timeval_subtract(&old, mstate->s.env->now_tv, &r->start_time);",
      "2232:   if(mstate->s.env->cfg->discard_timeout != 0 &&",
      "2233:    ((int)old.tv_sec)*1000+((int)old.tv_usec)/1000 >",
      "2234:    mstate->s.env->cfg->discard_timeout) {",
      "2241:    struct mesh_reply* reply_list = mstate->reply_list;",
      "2242:    verbose(VERB_ALGO, \"drop reply, it is older than discard-timeout\");",
      "2243:    infra_wait_limit_dec(mstate->s.env->infra_cache,",
      "2244:     &r->query_reply, mstate->s.env->cfg);",
      "2245:    mstate->reply_list = NULL;",
      "2246:    comm_point_drop_reply(&r->query_reply);",
      "2247:    mstate->reply_list = reply_list;",
      "2248:    mstate->s.env->mesh->stats_dropped++;",
      "2249:    continue;",
      "2250:   }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2213:    r, r_buffer, prev, prev_buffer);",
      "2214:   if(r->query_reply.c->tcp_req_info)",
      "2215:    tcp_req_info_remove_mesh_state(r->query_reply.c->tcp_req_info, mstate);",
      "2216:   prev = r;",
      "2217:   prev_buffer = r_buffer;",
      "2218:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2279:   infra_wait_limit_dec(mstate->s.env->infra_cache,",
      "2280:    &r->query_reply, mstate->s.env->cfg);",
      "",
      "---------------"
    ],
    "testdata/cachedb_expired_client_timeout.crpl||testdata/cachedb_expired_client_timeout.crpl": [
      "File: testdata/cachedb_expired_client_timeout.crpl -> testdata/cachedb_expired_client_timeout.crpl",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:  ; testbound script steps, but also reply within the time.",
      "10:  serve-expired-client-timeout: 1200",
      "11:  module-config: \"cachedb iterator\"",
      "13: cachedb:",
      "14:  backend: \"testframe\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  discard-timeout: 3000",
      "",
      "---------------"
    ],
    "testdata/cachedb_subnet_expired.crpl||testdata/cachedb_subnet_expired.crpl": [
      "File: testdata/cachedb_subnet_expired.crpl -> testdata/cachedb_subnet_expired.crpl",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:  ; store for edns subnet content for modules to the right of it.",
      "15:  ; this keeps subnet content out of cachedb as global content.",
      "16:  module-config: \"subnetcache cachedb iterator\"",
      "18: cachedb:",
      "19:  backend: \"testframe\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:  discard-timeout: 3000",
      "",
      "---------------"
    ],
    "testdata/doh_downstream.tdir/doh_downstream.conf||testdata/doh_downstream.tdir/doh_downstream.conf": [
      "File: testdata/doh_downstream.tdir/doh_downstream.conf -> testdata/doh_downstream.tdir/doh_downstream.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  chroot: \"\"",
      "12:  username: \"\"",
      "13:  do-not-query-localhost: no",
      "14:  http-query-buffer-size: 1G",
      "15:  http-response-buffer-size: 1G",
      "16:  http-max-streams: 200",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf||testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf": [
      "File: testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf -> testdata/doh_downstream_notls.tdir/doh_downstream_notls.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  chroot: \"\"",
      "12:  username: \"\"",
      "13:  do-not-query-localhost: no",
      "14:  http-query-buffer-size: 1G",
      "15:  http-response-buffer-size: 1G",
      "16:  http-max-streams: 200",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/doh_downstream_post.tdir/doh_downstream_post.conf||testdata/doh_downstream_post.tdir/doh_downstream_post.conf": [
      "File: testdata/doh_downstream_post.tdir/doh_downstream_post.conf -> testdata/doh_downstream_post.tdir/doh_downstream_post.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  chroot: \"\"",
      "12:  username: \"\"",
      "13:  do-not-query-localhost: no",
      "14:  http-query-buffer-size: 1G",
      "15:  http-response-buffer-size: 1G",
      "16:  http-max-streams: 200",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/fwd_three_service.tdir/fwd_three_service.conf||testdata/fwd_three_service.tdir/fwd_three_service.conf": [
      "File: testdata/fwd_three_service.tdir/fwd_three_service.conf -> testdata/fwd_three_service.tdir/fwd_three_service.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  num-queries-per-thread: 1024",
      "12:  use-syslog: no",
      "13:  do-not-query-localhost: no",
      "14: forward-zone:",
      "15:  name: \".\"",
      "16:  forward-addr: \"127.0.0.1@@TOPORT@\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/iter_ghost_timewindow.rpl||testdata/iter_ghost_timewindow.rpl": [
      "File: testdata/iter_ghost_timewindow.rpl -> testdata/iter_ghost_timewindow.rpl",
      "--- Hunk 1 ---",
      "[Context before]",
      "3:  target-fetch-policy: \"0 0 0 0 0\"",
      "4:  qname-minimisation: \"no\"",
      "5:  minimal-responses: no",
      "7: stub-zone:",
      "8:  name: \".\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  discard-timeout: 86400",
      "",
      "---------------"
    ],
    "testdata/ssl_req_order.tdir/ssl_req_order.conf||testdata/ssl_req_order.tdir/ssl_req_order.conf": [
      "File: testdata/ssl_req_order.tdir/ssl_req_order.conf -> testdata/ssl_req_order.tdir/ssl_req_order.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:  chroot: \"\"",
      "10:  username: \"\"",
      "11:  do-not-query-localhost: no",
      "12:  ssl-port: @PORT@",
      "13:  ssl-service-key: \"unbound_server.key\"",
      "14:  ssl-service-pem: \"unbound_server.pem\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/tcp_req_order.tdir/tcp_req_order.conf||testdata/tcp_req_order.tdir/tcp_req_order.conf": [
      "File: testdata/tcp_req_order.tdir/tcp_req_order.conf -> testdata/tcp_req_order.tdir/tcp_req_order.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:  chroot: \"\"",
      "10:  username: \"\"",
      "11:  do-not-query-localhost: no",
      "13:  local-zone: \"example.net\" static",
      "14:  local-data: \"www1.example.net. IN A 1.2.3.1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf||testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf": [
      "File: testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf -> testdata/tcp_sigpipe.tdir/tcp_sigpipe.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: server:",
      "3:  # num-threads: 1",
      "4:  interface: 127.0.0.1",
      "5:  port: @PORT@",
      "",
      "[Removed Lines]",
      "2:  verbosity: 2",
      "",
      "[Added Lines]",
      "2:  verbosity: 4",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9:  chroot: \"\"",
      "10:  username: \"\"",
      "11:  do-not-query-localhost: no",
      "13: forward-zone:",
      "14:  name: \".\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  discard-timeout: 3000  # testns uses sleep=2",
      "",
      "---------------"
    ],
    "util/config_file.c||util/config_file.c": [
      "File: util/config_file.c -> util/config_file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "309:  cfg->minimal_responses = 1;",
      "310:  cfg->rrset_roundrobin = 1;",
      "311:  cfg->unknown_server_time_limit = 376;",
      "313:  if(!(cfg->server_key_file = strdup(RUN_DIR\"/unbound_server.key\")))",
      "314:   goto error_exit;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "313:  cfg->wait_limit = 1000;",
      "314:  cfg->wait_limit_cookie = 10000;",
      "315:  cfg->wait_limit_netblock = NULL;",
      "316:  cfg->wait_limit_cookie_netblock = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "726:  else S_YNO(\"minimal-responses:\", minimal_responses)",
      "727:  else S_YNO(\"rrset-roundrobin:\", rrset_roundrobin)",
      "728:  else S_NUMBER_OR_ZERO(\"unknown-server-time-limit:\", unknown_server_time_limit)",
      "729:  else S_STRLIST(\"local-data:\", local_data)",
      "730:  else S_YNO(\"unblock-lan-zones:\", unblock_lan_zones)",
      "731:  else S_YNO(\"insecure-lan-zones:\", insecure_lan_zones)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "734:  else S_NUMBER_OR_ZERO(\"discard-timeout:\", discard_timeout)",
      "735:  else S_NUMBER_OR_ZERO(\"wait-limit:\", wait_limit)",
      "736:  else S_NUMBER_OR_ZERO(\"wait-limit-cookie:\", wait_limit_cookie)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1207:  else O_YNO(opt, \"minimal-responses\", minimal_responses)",
      "1208:  else O_YNO(opt, \"rrset-roundrobin\", rrset_roundrobin)",
      "1209:  else O_DEC(opt, \"unknown-server-time-limit\", unknown_server_time_limit)",
      "1210: #ifdef CLIENT_SUBNET",
      "1211:  else O_LST(opt, \"send-client-subnet\", client_subnet)",
      "1212:  else O_LST(opt, \"client-subnet-zone\", client_subnet_zone)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1218:  else O_DEC(opt, \"discard-timeout\", discard_timeout)",
      "1219:  else O_DEC(opt, \"wait-limit\", wait_limit)",
      "1220:  else O_DEC(opt, \"wait-limit-cookie\", wait_limit_cookie)",
      "1221:  else O_LS2(opt, \"wait-limit-netblock\", wait_limit_netblock)",
      "1222:  else O_LS2(opt, \"wait-limit-cookie-netblock\", wait_limit_cookie_netblock)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1678:  config_deltrplstrlist(cfg->interface_tag_actions);",
      "1679:  config_deltrplstrlist(cfg->interface_tag_datas);",
      "1680:  config_delstrlist(cfg->control_ifs.first);",
      "1681:  free(cfg->server_key_file);",
      "1682:  free(cfg->server_cert_file);",
      "1683:  free(cfg->control_key_file);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1694:  config_deldblstrlist(cfg->wait_limit_netblock);",
      "1695:  config_deldblstrlist(cfg->wait_limit_cookie_netblock);",
      "",
      "---------------"
    ],
    "util/config_file.h||util/config_file.h": [
      "File: util/config_file.h -> util/config_file.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "538:  int unknown_server_time_limit;",
      "541:  size_t max_udp_size;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "541:  int discard_timeout;",
      "544:  int wait_limit;",
      "547:  int wait_limit_cookie;",
      "550:  struct config_str2list* wait_limit_netblock;",
      "553:  struct config_str2list* wait_limit_cookie_netblock;",
      "",
      "---------------"
    ],
    "util/configlexer.lex||util/configlexer.lex": [
      "File: util/configlexer.lex -> util/configlexer.lex",
      "--- Hunk 1 ---",
      "[Context before]",
      "464: minimal-responses{COLON} { YDVAR(1, VAR_MINIMAL_RESPONSES) }",
      "465: rrset-roundrobin{COLON}  { YDVAR(1, VAR_RRSET_ROUNDROBIN) }",
      "466: unknown-server-time-limit{COLON} { YDVAR(1, VAR_UNKNOWN_SERVER_TIME_LIMIT) }",
      "467: max-udp-size{COLON}  { YDVAR(1, VAR_MAX_UDP_SIZE) }",
      "468: dns64-prefix{COLON}  { YDVAR(1, VAR_DNS64_PREFIX) }",
      "469: dns64-synthall{COLON}  { YDVAR(1, VAR_DNS64_SYNTHALL) }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "467: discard-timeout{COLON}  { YDVAR(1, VAR_DISCARD_TIMEOUT) }",
      "468: wait-limit{COLON}  { YDVAR(1, VAR_WAIT_LIMIT) }",
      "469: wait-limit-cookie{COLON} { YDVAR(1, VAR_WAIT_LIMIT_COOKIE) }",
      "470: wait-limit-netblock{COLON} { YDVAR(1, VAR_WAIT_LIMIT_NETBLOCK) }",
      "471: wait-limit-cookie-netblock{COLON} { YDVAR(1, VAR_WAIT_LIMIT_COOKIE_NETBLOCK) }",
      "",
      "---------------"
    ],
    "util/configparser.y||util/configparser.y": [
      "File: util/configparser.y -> util/configparser.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: %token VAR_ANSWER_COOKIE VAR_COOKIE_SECRET VAR_IP_RATELIMIT_COOKIE",
      "190: %token VAR_FORWARD_NO_CACHE VAR_STUB_NO_CACHE VAR_LOG_SERVFAIL VAR_DENY_ANY",
      "191: %token VAR_UNKNOWN_SERVER_TIME_LIMIT VAR_LOG_TAG_QUERYREPLY",
      "192: %token VAR_STREAM_WAIT_SIZE VAR_TLS_CIPHERS VAR_TLS_CIPHERSUITES VAR_TLS_USE_SNI",
      "193: %token VAR_IPSET VAR_IPSET_NAME_V4 VAR_IPSET_NAME_V6",
      "194: %token VAR_TLS_SESSION_TICKET_KEYS VAR_RPZ VAR_TAGS VAR_RPZ_ACTION_OVERRIDE",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192: %token VAR_DISCARD_TIMEOUT VAR_WAIT_LIMIT VAR_WAIT_LIMIT_COOKIE",
      "193: %token VAR_WAIT_LIMIT_NETBLOCK VAR_WAIT_LIMIT_COOKIE_NETBLOCK",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "327:  server_fast_server_permil | server_fast_server_num  | server_tls_win_cert |",
      "328:  server_tcp_connection_limit | server_log_servfail | server_deny_any |",
      "329:  server_unknown_server_time_limit | server_log_tag_queryreply |",
      "330:  server_stream_wait_size | server_tls_ciphers |",
      "331:  server_tls_ciphersuites | server_tls_session_ticket_keys |",
      "332:  server_answer_cookie | server_cookie_secret | server_ip_ratelimit_cookie |",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332:  server_discard_timeout | server_wait_limit | server_wait_limit_cookie |",
      "333:  server_wait_limit_netblock | server_wait_limit_cookie_netblock |",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2377:   free($2);",
      "2378:  }",
      "2379:  ;",
      "2380: server_max_udp_size: VAR_MAX_UDP_SIZE STRING_ARG",
      "2381:  {",
      "2382:   OUTYY((\"P(server_max_udp_size:%s)\\n\", $2));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2384: server_discard_timeout: VAR_DISCARD_TIMEOUT STRING_ARG",
      "2385:  {",
      "2386:   OUTYY((\"P(server_discard_timeout:%s)\\n\", $2));",
      "2387:   cfg_parser->cfg->discard_timeout = atoi($2);",
      "2388:   free($2);",
      "2389:  }",
      "2390:  ;",
      "2391: server_wait_limit: VAR_WAIT_LIMIT STRING_ARG",
      "2392:  {",
      "2393:   OUTYY((\"P(server_wait_limit:%s)\\n\", $2));",
      "2394:   cfg_parser->cfg->wait_limit = atoi($2);",
      "2395:   free($2);",
      "2396:  }",
      "2397:  ;",
      "2398: server_wait_limit_cookie: VAR_WAIT_LIMIT_COOKIE STRING_ARG",
      "2399:  {",
      "2400:   OUTYY((\"P(server_wait_limit_cookie:%s)\\n\", $2));",
      "2401:   cfg_parser->cfg->wait_limit_cookie = atoi($2);",
      "2402:   free($2);",
      "2403:  }",
      "2404:  ;",
      "2405: server_wait_limit_netblock: VAR_WAIT_LIMIT_NETBLOCK STRING_ARG STRING_ARG",
      "2406:  {",
      "2407:   OUTYY((\"P(server_wait_limit_netblock:%s %s)\\n\", $2, $3));",
      "2408:   if(atoi($3) == 0 && strcmp($3, \"0\") != 0) {",
      "2409:    yyerror(\"number expected\");",
      "2410:    free($2);",
      "2411:    free($3);",
      "2412:   } else {",
      "2413:    if(!cfg_str2list_insert(&cfg_parser->cfg->",
      "2414:     wait_limit_netblock, $2, $3))",
      "2415:     fatal_exit(\"out of memory adding \"",
      "2416:      \"wait-limit-netblock\");",
      "2417:   }",
      "2418:  }",
      "2419:  ;",
      "2420: server_wait_limit_cookie_netblock: VAR_WAIT_LIMIT_COOKIE_NETBLOCK STRING_ARG STRING_ARG",
      "2421:  {",
      "2422:   OUTYY((\"P(server_wait_limit_cookie_netblock:%s %s)\\n\", $2, $3));",
      "2423:   if(atoi($3) == 0 && strcmp($3, \"0\") != 0) {",
      "2424:    yyerror(\"number expected\");",
      "2425:    free($2);",
      "2426:    free($3);",
      "2427:   } else {",
      "2428:    if(!cfg_str2list_insert(&cfg_parser->cfg->",
      "2429:     wait_limit_cookie_netblock, $2, $3))",
      "2430:     fatal_exit(\"out of memory adding \"",
      "2431:      \"wait-limit-cookie-netblock\");",
      "2432:   }",
      "2433:  }",
      "2434:  ;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa2da45499c272561ff0420fbc2691875939f2e4",
      "candidate_info": {
        "commit_hash": "fa2da45499c272561ff0420fbc2691875939f2e4",
        "repo": "NLnetLabs/unbound",
        "commit_url": "https://github.com/NLnetLabs/unbound/commit/fa2da45499c272561ff0420fbc2691875939f2e4",
        "files": [
          "daemon/remote.c",
          "doc/unbound-control.8.in",
          "services/cache/infra.c",
          "services/cache/infra.h"
        ],
        "message": "- fast-reload, reload settings stored in the infra structure.",
        "before_after_code_files": [
          "daemon/remote.c||daemon/remote.c",
          "services/cache/infra.c||services/cache/infra.c",
          "services/cache/infra.h||services/cache/infra.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/cache/infra.c||services/cache/infra.c",
            "services/cache/infra.h||services/cache/infra.h"
          ],
          "candidate": [
            "services/cache/infra.c||services/cache/infra.c",
            "services/cache/infra.h||services/cache/infra.h"
          ]
        }
      },
      "candidate_diff": {
        "daemon/remote.c||daemon/remote.c": [
          "File: daemon/remote.c -> daemon/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3990:  struct rbtree_type* caps_white;",
          "3992:  struct iter_nat64 nat64;",
          "3995:  struct config_file* oldcfg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3994:  struct rbtree_type wait_limits_netblock;",
          "3996:  struct rbtree_type wait_limits_cookie_netblock;",
          "3998:  struct rbtree_type domain_limits;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4144:  }",
          "4145: }",
          "4148: static int",
          "4149: fr_check_compat_cfg(struct fast_reload_thread* fr, struct config_file* newcfg)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4154: static void",
          "4155: fr_check_changed_cfg_str2list(struct config_str2list* cmp1,",
          "4156:  struct config_str2list* cmp2, const char* desc, char* str, size_t len)",
          "4157: {",
          "4158:  struct config_str2list* p1 = cmp1, *p2 = cmp2;",
          "4159:  while(p1 && p2) {",
          "4160:   if((!p1->str && p2->str) ||",
          "4161:    (p1->str && !p2->str) ||",
          "4162:    (p1->str && p2->str && strcmp(p1->str, p2->str) != 0)) {",
          "4164:    fr_check_changed_cfg(1, desc, str, len);",
          "4165:    return;",
          "4166:   }",
          "4167:   if((!p1->str2 && p2->str2) ||",
          "4168:    (p1->str2 && !p2->str2) ||",
          "4169:    (p1->str2 && p2->str2 &&",
          "4170:    strcmp(p1->str2, p2->str2) != 0)) {",
          "4172:    fr_check_changed_cfg(1, desc, str, len);",
          "4173:    return;",
          "4174:   }",
          "4175:   p1 = p1->next;",
          "4176:   p2 = p2->next;",
          "4177:  }",
          "4178:  if((!p1 && p2) || (p1 && !p2)) {",
          "4179:   fr_check_changed_cfg(1, desc, str, len);",
          "4180:  }",
          "4181: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4276:   \"val-nsec3-keysize-iterations\", changed_str,",
          "4277:   sizeof(changed_str));",
          "4280:  fr_check_changed_cfg(",
          "4281:   cfg->dnstap_send_identity != newcfg->dnstap_send_identity,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4316:  fr_check_changed_cfg(cfg->host_ttl != newcfg->host_ttl,",
          "4317:   \"infra-host-ttl\", changed_str, sizeof(changed_str));",
          "4318:  fr_check_changed_cfg(",
          "4319:   cfg->infra_keep_probing != newcfg->infra_keep_probing,",
          "4320:   \"infra-keep-probing\", changed_str, sizeof(changed_str));",
          "4321:  fr_check_changed_cfg(",
          "4322:   cfg->ratelimit != newcfg->ratelimit,",
          "4323:   \"ratelimit\", changed_str, sizeof(changed_str));",
          "4324:  fr_check_changed_cfg(",
          "4325:   cfg->ip_ratelimit != newcfg->ip_ratelimit,",
          "4326:   \"ip-ratelimit\", changed_str, sizeof(changed_str));",
          "4327:  fr_check_changed_cfg(",
          "4328:   cfg->ip_ratelimit_cookie != newcfg->ip_ratelimit_cookie,",
          "4329:   \"ip-ratelimit-cookie\", changed_str, sizeof(changed_str));",
          "4330:  fr_check_changed_cfg_str2list(cfg->wait_limit_netblock,",
          "4331:   newcfg->wait_limit_netblock, \"wait-limit-netblock\",",
          "4332:   changed_str, sizeof(changed_str));",
          "4333:  fr_check_changed_cfg_str2list(cfg->wait_limit_cookie_netblock,",
          "4334:   newcfg->wait_limit_cookie_netblock,",
          "4335:   \"wait-limit-cookie-netblock\", changed_str,",
          "4336:   sizeof(changed_str));",
          "4337:  fr_check_changed_cfg_str2list(cfg->ratelimit_below_domain,",
          "4338:   newcfg->ratelimit_below_domain, \"ratelimit-below-domain\",",
          "4339:   changed_str, sizeof(changed_str));",
          "4340:  fr_check_changed_cfg_str2list(cfg->ratelimit_for_domain,",
          "4341:   newcfg->ratelimit_for_domain, \"ratelimit-for-domain\",",
          "4342:   changed_str, sizeof(changed_str));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4324:  donotq_delete(ct->donotq);",
          "4325:  priv_delete(ct->priv);",
          "4326:  caps_white_delete(ct->caps_white);",
          "4329:  if(ct->oldcfg && ct->oldcfg->log_identity) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4392:  wait_limits_free(&ct->wait_limits_netblock);",
          "4393:  wait_limits_free(&ct->wait_limits_cookie_netblock);",
          "4394:  domain_limits_free(&ct->domain_limits);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5001:  if(fr_poll_for_quit(fr))",
          "5002:   return 1;",
          "5004:  if(!(ct->oldcfg = (struct config_file*)calloc(1,",
          "5005:   sizeof(*ct->oldcfg)))) {",
          "5006:   fr_construct_clear(ct);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5072:  if(!setup_wait_limits(&ct->wait_limits_netblock,",
          "5073:   &ct->wait_limits_cookie_netblock, newcfg)) {",
          "5074:   fr_construct_clear(ct);",
          "5075:   return 0;",
          "5076:  }",
          "5077:  if(!setup_domain_limits(&ct->domain_limits, newcfg)) {",
          "5078:   fr_construct_clear(ct);",
          "5079:   return 0;",
          "5080:  }",
          "5081:  if(fr_poll_for_quit(fr))",
          "5082:   return 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5534:  }",
          "5535: }",
          "5539: static int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5618: static void",
          "5619: fr_adjust_infra(struct module_env* env, struct fast_reload_construct* ct)",
          "5620: {",
          "5621:  struct infra_cache* infra = env->infra_cache;",
          "5622:  struct config_file* cfg = env->cfg;",
          "5623:  struct rbtree_type oldwaitlim = infra->wait_limits_netblock;",
          "5624:  struct rbtree_type oldwaitlimcookie =",
          "5625:   infra->wait_limits_cookie_netblock;",
          "5626:  struct rbtree_type olddomainlim = infra->domain_limits;",
          "5630:  infra->host_ttl = cfg->host_ttl;",
          "5631:  infra->infra_keep_probing = cfg->infra_keep_probing;",
          "5632:  infra_dp_ratelimit = cfg->ratelimit;",
          "5633:  infra_ip_ratelimit = cfg->ip_ratelimit;",
          "5634:  infra_ip_ratelimit_cookie = cfg->ip_ratelimit_cookie;",
          "5635:  infra->wait_limits_netblock = ct->wait_limits_netblock;",
          "5636:  infra->wait_limits_cookie_netblock = ct->wait_limits_cookie_netblock;",
          "5637:  infra->domain_limits = ct->domain_limits;",
          "5639:  ct->wait_limits_netblock = oldwaitlim;",
          "5640:  ct->wait_limits_cookie_netblock = oldwaitlimcookie;",
          "5641:  ct->domain_limits = olddomainlim;",
          "5642: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5625:  if(!fr->fr_nopause) {",
          "5626:   fr_adjust_iter_env(env, ct);",
          "5627:   fr_adjust_val_env(env, ct, ct->oldcfg);",
          "5628:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5735:   fr_adjust_infra(env, ct);",
          "",
          "---------------"
        ],
        "services/cache/infra.c||services/cache/infra.c": [
          "File: services/cache/infra.c -> services/cache/infra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: static struct domain_limit_data* domain_limit_findcreate(",
          "169: {",
          "170:  uint8_t* nm;",
          "171:  int labs;",
          "",
          "[Removed Lines]",
          "168:  struct infra_cache* infra, char* name)",
          "",
          "[Added Lines]",
          "168:  struct rbtree_type* domain_limits, char* name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:  labs = dname_count_labels(nm);",
          "186:  if(d) {",
          "187:   free(nm);",
          "188:   return d;",
          "",
          "[Removed Lines]",
          "184:  d = (struct domain_limit_data*)name_tree_find(&infra->domain_limits,",
          "185:   nm, nmlen, labs, LDNS_RR_CLASS_IN);",
          "",
          "[Added Lines]",
          "184:  d = (struct domain_limit_data*)name_tree_find(domain_limits, nm,",
          "185:   nmlen, labs, LDNS_RR_CLASS_IN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  d->node.dclass = LDNS_RR_CLASS_IN;",
          "202:  d->lim = -1;",
          "203:  d->below = -1;",
          "206:   log_err(\"duplicate element in domainlimit tree\");",
          "207:   free(nm);",
          "208:   free(d);",
          "",
          "[Removed Lines]",
          "204:  if(!name_tree_insert(&infra->domain_limits, &d->node, nm, nmlen,",
          "205:   labs, LDNS_RR_CLASS_IN)) {",
          "",
          "[Added Lines]",
          "204:  if(!name_tree_insert(domain_limits, &d->node, nm, nmlen, labs,",
          "205:   LDNS_RR_CLASS_IN)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212: }",
          "216:  struct config_file* cfg)",
          "217: {",
          "218:  struct config_str2list* p;",
          "219:  struct domain_limit_data* d;",
          "220:  for(p = cfg->ratelimit_for_domain; p; p = p->next) {",
          "222:   if(!d)",
          "223:    return 0;",
          "224:   d->lim = atoi(p->str2);",
          "225:  }",
          "226:  for(p = cfg->ratelimit_below_domain; p; p = p->next) {",
          "228:   if(!d)",
          "229:    return 0;",
          "230:   d->below = atoi(p->str2);",
          "",
          "[Removed Lines]",
          "215: static int infra_ratelimit_cfg_insert(struct infra_cache* infra,",
          "221:   d = domain_limit_findcreate(infra, p->str);",
          "227:   d = domain_limit_findcreate(infra, p->str);",
          "",
          "[Added Lines]",
          "215: static int infra_ratelimit_cfg_insert(struct rbtree_type* domain_limits,",
          "221:   d = domain_limit_findcreate(domain_limits, p->str);",
          "227:   d = domain_limit_findcreate(domain_limits, p->str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:  return 1;",
          "233: }",
          "238: {",
          "241:   return 0;",
          "242:  }",
          "244:  return 1;",
          "245: }",
          "248: static struct wait_limit_netblock_info*",
          "251: {",
          "253:  struct sockaddr_storage addr;",
          "254:  int net;",
          "255:  socklen_t addrlen;",
          "",
          "[Removed Lines]",
          "236: static int",
          "237: setup_domain_limits(struct infra_cache* infra, struct config_file* cfg)",
          "239:  name_tree_init(&infra->domain_limits);",
          "240:  if(!infra_ratelimit_cfg_insert(infra, cfg)) {",
          "243:  name_tree_init_parents(&infra->domain_limits);",
          "249: wait_limit_netblock_findcreate(struct infra_cache* infra, char* str,",
          "250:  int cookie)",
          "252:  rbtree_type* tree;",
          "",
          "[Added Lines]",
          "235: int",
          "236: setup_domain_limits(struct rbtree_type* domain_limits, struct config_file* cfg)",
          "238:  name_tree_init(domain_limits);",
          "239:  if(!infra_ratelimit_cfg_insert(domain_limits, cfg)) {",
          "242:  name_tree_init_parents(domain_limits);",
          "248: wait_limit_netblock_findcreate(struct rbtree_type* tree, char* str)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "261:  }",
          "268:  d = (struct wait_limit_netblock_info*)addr_tree_find(tree, &addr,",
          "269:   addrlen, net);",
          "270:  if(d)",
          "",
          "[Removed Lines]",
          "264:  if(cookie)",
          "265:   tree = &infra->wait_limits_cookie_netblock;",
          "266:  else",
          "267:   tree = &infra->wait_limits_netblock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "288: static int",
          "291: {",
          "292:  struct config_str2list* p;",
          "293:  struct wait_limit_netblock_info* d;",
          "294:  for(p = cfg->wait_limit_netblock; p; p = p->next) {",
          "296:   if(!d)",
          "297:    return 0;",
          "298:   d->limit = atoi(p->str2);",
          "299:  }",
          "300:  for(p = cfg->wait_limit_cookie_netblock; p; p = p->next) {",
          "302:   if(!d)",
          "303:    return 0;",
          "304:   d->limit = atoi(p->str2);",
          "",
          "[Removed Lines]",
          "289: infra_wait_limit_netblock_insert(struct infra_cache* infra,",
          "290:  struct config_file* cfg)",
          "295:   d = wait_limit_netblock_findcreate(infra, p->str, 0);",
          "301:   d = wait_limit_netblock_findcreate(infra, p->str, 1);",
          "",
          "[Added Lines]",
          "282: infra_wait_limit_netblock_insert(rbtree_type* wait_limits_netblock,",
          "283:         rbtree_type* wait_limits_cookie_netblock, struct config_file* cfg)",
          "288:   d = wait_limit_netblock_findcreate(wait_limits_netblock,",
          "289:    p->str);",
          "295:   d = wait_limit_netblock_findcreate(wait_limits_cookie_netblock,",
          "296:    p->str);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:  return 1;",
          "307: }",
          "312: {",
          "316:   return 0;",
          "319:  return 1;",
          "320: }",
          "",
          "[Removed Lines]",
          "310: static int",
          "311: setup_wait_limits(struct infra_cache* infra, struct config_file* cfg)",
          "313:  addr_tree_init(&infra->wait_limits_netblock);",
          "314:  addr_tree_init(&infra->wait_limits_cookie_netblock);",
          "315:  if(!infra_wait_limit_netblock_insert(infra, cfg))",
          "317:  addr_tree_init_parents(&infra->wait_limits_netblock);",
          "318:  addr_tree_init_parents(&infra->wait_limits_cookie_netblock);",
          "",
          "[Added Lines]",
          "304: int",
          "305: setup_wait_limits(rbtree_type* wait_limits_netblock,",
          "306:  rbtree_type* wait_limits_cookie_netblock, struct config_file* cfg)",
          "308:  addr_tree_init(wait_limits_netblock);",
          "309:  addr_tree_init(wait_limits_cookie_netblock);",
          "310:  if(!infra_wait_limit_netblock_insert(wait_limits_netblock,",
          "311:   wait_limits_cookie_netblock, cfg))",
          "313:  addr_tree_init_parents(wait_limits_netblock);",
          "314:  addr_tree_init_parents(wait_limits_cookie_netblock);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "348:   return NULL;",
          "349:  }",
          "352:   infra_delete(infra);",
          "353:   return NULL;",
          "354:  }",
          "356:   infra_delete(infra);",
          "357:   return NULL;",
          "358:  }",
          "",
          "[Removed Lines]",
          "351:  if(!setup_domain_limits(infra, cfg)) {",
          "355:  if(!setup_wait_limits(infra, cfg)) {",
          "",
          "[Added Lines]",
          "347:  if(!setup_domain_limits(&infra->domain_limits, cfg)) {",
          "351:  if(!setup_wait_limits(&infra->wait_limits_netblock,",
          "352:   &infra->wait_limits_cookie_netblock, cfg)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:  }",
          "378: }",
          "381: static void wait_limit_netblock_del(rbnode_type* n, void* ATTR_UNUSED(arg))",
          "382: {",
          "383:  free(n);",
          "384: }",
          "386: void",
          "387: infra_delete(struct infra_cache* infra)",
          "388: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377: void",
          "378: domain_limits_free(struct rbtree_type* domain_limits)",
          "379: {",
          "380:  if(!domain_limits)",
          "381:   return;",
          "382:  traverse_postorder(domain_limits, domain_limit_free, NULL);",
          "383: }",
          "391: void",
          "392: wait_limits_free(struct rbtree_type* wait_limits_tree)",
          "393: {",
          "394:  if(!wait_limits_tree)",
          "395:   return;",
          "396:  traverse_postorder(wait_limits_tree, wait_limit_netblock_del,",
          "397:   NULL);",
          "398: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "390:   return;",
          "391:  slabhash_delete(infra->hosts);",
          "392:  slabhash_delete(infra->domain_rates);",
          "394:  slabhash_delete(infra->client_ip_rates);",
          "399:  free(infra);",
          "400: }",
          "",
          "[Removed Lines]",
          "393:  traverse_postorder(&infra->domain_limits, domain_limit_free, NULL);",
          "395:  traverse_postorder(&infra->wait_limits_netblock,",
          "396:   wait_limit_netblock_del, NULL);",
          "397:  traverse_postorder(&infra->wait_limits_cookie_netblock,",
          "398:   wait_limit_netblock_del, NULL);",
          "",
          "[Added Lines]",
          "407:  domain_limits_free(&infra->domain_limits);",
          "409:  wait_limits_free(&infra->wait_limits_netblock);",
          "410:  wait_limits_free(&infra->wait_limits_cookie_netblock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "427:   traverse_postorder(&infra->domain_limits, domain_limit_free,",
          "428:    NULL);",
          "430:    infra_delete(infra);",
          "431:    return NULL;",
          "432:   }",
          "",
          "[Removed Lines]",
          "429:   if(!setup_domain_limits(infra, cfg)) {",
          "",
          "[Added Lines]",
          "441:   if(!setup_domain_limits(&infra->domain_limits, cfg)) {",
          "",
          "---------------"
        ],
        "services/cache/infra.h||services/cache/infra.h": [
          "File: services/cache/infra.h -> services/cache/infra.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "502: void infra_wait_limit_dec(struct infra_cache* infra, struct comm_reply* rep,",
          "503:  struct config_file* cfg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: int setup_wait_limits(struct rbtree_type* wait_limits_netblock,",
          "507:  struct rbtree_type* wait_limits_cookie_netblock,",
          "508:  struct config_file* cfg);",
          "511: void wait_limits_free(struct rbtree_type* wait_limits_tree);",
          "514: int setup_domain_limits(struct rbtree_type* domain_limits,",
          "515:  struct config_file* cfg);",
          "518: void domain_limits_free(struct rbtree_type* domain_limits);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f91d5f74c9258ea032f447778ecfea88558bc44",
      "candidate_info": {
        "commit_hash": "5f91d5f74c9258ea032f447778ecfea88558bc44",
        "repo": "NLnetLabs/unbound",
        "commit_url": "https://github.com/NLnetLabs/unbound/commit/5f91d5f74c9258ea032f447778ecfea88558bc44",
        "files": [
          "doc/Changelog",
          "util/configlexer.lex"
        ],
        "message": "- Fix wait-limit-netblock and wait-limit-cookie-netblock config parse   to allow two arguments.",
        "before_after_code_files": [
          "util/configlexer.lex||util/configlexer.lex"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/configlexer.lex||util/configlexer.lex"
          ],
          "candidate": [
            "util/configlexer.lex||util/configlexer.lex"
          ]
        }
      },
      "candidate_diff": {
        "util/configlexer.lex||util/configlexer.lex": [
          "File: util/configlexer.lex -> util/configlexer.lex",
          "--- Hunk 1 ---",
          "[Context before]",
          "471: discard-timeout{COLON}  { YDVAR(1, VAR_DISCARD_TIMEOUT) }",
          "472: wait-limit{COLON}  { YDVAR(1, VAR_WAIT_LIMIT) }",
          "473: wait-limit-cookie{COLON} { YDVAR(1, VAR_WAIT_LIMIT_COOKIE) }",
          "476: max-udp-size{COLON}  { YDVAR(1, VAR_MAX_UDP_SIZE) }",
          "477: dns64-prefix{COLON}  { YDVAR(1, VAR_DNS64_PREFIX) }",
          "478: dns64-synthall{COLON}  { YDVAR(1, VAR_DNS64_SYNTHALL) }",
          "",
          "[Removed Lines]",
          "474: wait-limit-netblock{COLON} { YDVAR(1, VAR_WAIT_LIMIT_NETBLOCK) }",
          "475: wait-limit-cookie-netblock{COLON} { YDVAR(1, VAR_WAIT_LIMIT_COOKIE_NETBLOCK) }",
          "",
          "[Added Lines]",
          "474: wait-limit-netblock{COLON} { YDVAR(2, VAR_WAIT_LIMIT_NETBLOCK) }",
          "475: wait-limit-cookie-netblock{COLON} { YDVAR(2, VAR_WAIT_LIMIT_COOKIE_NETBLOCK) }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75967e7f5eca0be5ee99d5b933f327e3aa07202e",
      "candidate_info": {
        "commit_hash": "75967e7f5eca0be5ee99d5b933f327e3aa07202e",
        "repo": "NLnetLabs/unbound",
        "commit_url": "https://github.com/NLnetLabs/unbound/commit/75967e7f5eca0be5ee99d5b933f327e3aa07202e",
        "files": [
          "daemon/remote.c",
          "daemon/stats.c",
          "doc/unbound-control.8.in",
          "libunbound/unbound.h",
          "services/mesh.c",
          "services/mesh.h",
          "smallapp/unbound-control.c"
        ],
        "message": "Stats for discard-timeout and wait-limit (#1159)\n\n* - Stats num.queries_discard_timeout and num.queries_wait_limit are used\n  instead of the mesh dropped that of requests exceeded.",
        "before_after_code_files": [
          "daemon/remote.c||daemon/remote.c",
          "daemon/stats.c||daemon/stats.c",
          "libunbound/unbound.h||libunbound/unbound.h",
          "services/mesh.c||services/mesh.c",
          "services/mesh.h||services/mesh.h",
          "smallapp/unbound-control.c||smallapp/unbound-control.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "services/mesh.c||services/mesh.c"
          ],
          "candidate": [
            "services/mesh.c||services/mesh.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/remote.c||daemon/remote.c": [
          "File: daemon/remote.c -> daemon/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:   (unsigned long)s->svr.num_queries_cookie_client)) return 0;",
          "708:  if(!ssl_printf(ssl, \"%s.num.queries_cookie_invalid\"SQ\"%lu\\n\", nm,",
          "709:   (unsigned long)s->svr.num_queries_cookie_invalid)) return 0;",
          "710:  if(!ssl_printf(ssl, \"%s.num.cachehits\"SQ\"%lu\\n\", nm,",
          "711:   (unsigned long)(s->svr.num_queries",
          "712:    - s->svr.num_queries_missed_cache))) return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:  if(!ssl_printf(ssl, \"%s.num.queries_discard_timeout\"SQ\"%lu\\n\", nm,",
          "711:   (unsigned long)s->svr.num_queries_discard_timeout)) return 0;",
          "712:  if(!ssl_printf(ssl, \"%s.num.queries_wait_limit\"SQ\"%lu\\n\", nm,",
          "713:   (unsigned long)s->svr.num_queries_wait_limit)) return 0;",
          "",
          "---------------"
        ],
        "daemon/stats.c||daemon/stats.c": [
          "File: daemon/stats.c -> daemon/stats.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   s->svr.rpz_action[i] += (long long)worker->env.mesh->rpz_action[i];",
          "282:  timehist_export(worker->env.mesh->histogram, s->svr.hist,",
          "283:   NUM_BUCKETS_HIST);",
          "285:  s->svr.unwanted_replies = (long long)worker->back->unwanted_replies;",
          "286:  s->svr.qtcp_outgoing = (long long)worker->back->num_tcp_outgoing;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:  s->svr.num_queries_discard_timeout +=",
          "285:   (long long)worker->env.mesh->num_queries_discard_timeout;",
          "286:  s->svr.num_queries_wait_limit +=",
          "287:   (long long)worker->env.mesh->num_queries_wait_limit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:  total->svr.num_queries_cookie_valid += a->svr.num_queries_cookie_valid;",
          "452:  total->svr.num_queries_cookie_client += a->svr.num_queries_cookie_client;",
          "453:  total->svr.num_queries_cookie_invalid += a->svr.num_queries_cookie_invalid;",
          "454:  total->svr.num_queries_missed_cache += a->svr.num_queries_missed_cache;",
          "455:  total->svr.num_queries_prefetch += a->svr.num_queries_prefetch;",
          "456:  total->svr.num_queries_timed_out += a->svr.num_queries_timed_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:  total->svr.num_queries_discard_timeout +=",
          "459:   a->svr.num_queries_discard_timeout;",
          "460:  total->svr.num_queries_wait_limit += a->svr.num_queries_wait_limit;",
          "",
          "---------------"
        ],
        "libunbound/unbound.h||libunbound/unbound.h": [
          "File: libunbound/unbound.h -> libunbound/unbound.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:  long long mem_quic;",
          "851:  long long qquic;",
          "852: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:  long long num_queries_discard_timeout;",
          "855:  long long num_queries_wait_limit;",
          "",
          "---------------"
        ],
        "services/mesh.c||services/mesh.c": [
          "File: services/mesh.c -> services/mesh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:  mesh->stats_dropped = 0;",
          "215:  mesh->ans_expired = 0;",
          "216:  mesh->ans_cachedb = 0;",
          "217:  mesh->max_reply_states = env->cfg->num_queries_per_thread;",
          "218:  mesh->max_forever_states = (mesh->max_reply_states+1)/2;",
          "219: #ifndef S_SPLINT_S",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:  mesh->num_queries_discard_timeout = 0;",
          "218:  mesh->num_queries_wait_limit = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:   verbose(VERB_ALGO, \"Too many queries waiting from the IP. \"",
          "425:    \"dropping incoming query.\");",
          "426:   comm_point_drop_reply(rep);",
          "428:   return;",
          "429:  }",
          "430:  if(!unique)",
          "",
          "[Removed Lines]",
          "427:   mesh->stats_dropped++;",
          "",
          "[Added Lines]",
          "429:   mesh->num_queries_wait_limit++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1540:     http2_stream_remove_mesh_state(r->h2_stream);",
          "1541:    comm_point_drop_reply(&r->query_reply);",
          "1542:    mstate->reply_list = reply_list;",
          "1544:    continue;",
          "1545:   }",
          "",
          "[Removed Lines]",
          "1543:    mstate->s.env->mesh->stats_dropped++;",
          "",
          "[Added Lines]",
          "1545:    mstate->s.env->mesh->num_queries_discard_timeout++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2042:  memset(&mesh->ans_rcode[0], 0, sizeof(size_t)*UB_STATS_RCODE_NUM);",
          "2043:  memset(&mesh->rpz_action[0], 0, sizeof(size_t)*UB_STATS_RPZ_ACTION_NUM);",
          "2044:  mesh->ans_nodata = 0;",
          "2045: }",
          "2047: size_t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2047:  mesh->num_queries_discard_timeout = 0;",
          "2048:  mesh->num_queries_wait_limit = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2270:     http2_stream_remove_mesh_state(r->h2_stream);",
          "2271:    comm_point_drop_reply(&r->query_reply);",
          "2272:    mstate->reply_list = reply_list;",
          "2274:    continue;",
          "2275:   }",
          "",
          "[Removed Lines]",
          "2273:    mstate->s.env->mesh->stats_dropped++;",
          "",
          "[Added Lines]",
          "2277:    mstate->s.env->mesh->num_queries_discard_timeout++;",
          "",
          "---------------"
        ],
        "services/mesh.h||services/mesh.h": [
          "File: services/mesh.h -> services/mesh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:  size_t ans_nodata;",
          "134:  size_t rpz_action[UB_STATS_RPZ_ACTION_NUM];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  size_t num_queries_discard_timeout;",
          "138:  size_t num_queries_wait_limit;",
          "",
          "---------------"
        ],
        "smallapp/unbound-control.c||smallapp/unbound-control.c": [
          "File: smallapp/unbound-control.c -> smallapp/unbound-control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   s->svr.num_queries_cookie_client);",
          "223:  PR_UL_NM(\"num.queries_cookie_invalid\",",
          "224:   s->svr.num_queries_cookie_invalid);",
          "225:  PR_UL_NM(\"num.cachehits\",",
          "226:   s->svr.num_queries - s->svr.num_queries_missed_cache);",
          "227:  PR_UL_NM(\"num.cachemiss\", s->svr.num_queries_missed_cache);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  PR_UL_NM(\"num.queries_discard_timeout\",",
          "226:   s->svr.num_queries_discard_timeout);",
          "227:  PR_UL_NM(\"num.queries_wait_limit\", s->svr.num_queries_wait_limit);",
          "",
          "---------------"
        ]
      }
    }
  ]
}