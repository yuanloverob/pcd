{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d7608143089cb8505a3a26796836be00b476f3b",
      "candidate_info": {
        "commit_hash": "0d7608143089cb8505a3a26796836be00b476f3b",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/0d7608143089cb8505a3a26796836be00b476f3b",
        "files": [
          "trunk/auto/auto_headers.sh",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "API: Support new HTTP API for VALGRIND. v6.0.149 v7.0.6 (#4150)\n\nNew features for valgrind:\n\n1. ST: Support /api/v1/valgrind for leaking check.\n2. ST: Support /api/v1/valgrind?check=full|added|changed|new|quick\n\nTo use Valgrind to detect memory leaks in SRS, even though Valgrind\nhooks are supported in ST, there are still many false positives. A more\nreasonable approach is to have Valgrind report incremental memory leaks.\nThis way, global and static variables can be avoided, and detection can\nbe achieved without exiting the program. Follow these steps:\n\n1. Compile SRS with Valgrind support: `./configure --valgrind=on &&\nmake`\n2. Start SRS with memory leak detection enabled: `valgrind\n--leak-check=full ./objs/srs -c conf/console.conf`\n3. Trigger memory detection by using curl to access the API and generate\ncalibration data. There will still be many false positives, but these\ncan be ignored: `curl http://127.0.0.1:1985/api/v1/valgrind?check=added`\n4. Perform load testing or test the suspected leaking functionality,\nsuch as RTMP streaming: `ffmpeg -re -i doc/source.flv -c copy -f flv\nrtmp://127.0.0.1/live/livestream`\n5. Stop streaming and wait for SRS to clean up the Source memory,\napproximately 30 seconds.\n6. Perform incremental memory leak detection. The reported leaks will be\nvery accurate at this point: `curl\nhttp://127.0.0.1:1985/api/v1/valgrind?check=added`\n\n> Note: To avoid interference from the HTTP request itself on Valgrind,\nSRS uses a separate coroutine to perform periodic checks. Therefore,\nafter accessing the API, you may need to wait a few seconds for the\ndetection to be triggered.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh",
          "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh": [
          "File: trunk/auto/auto_headers.sh -> trunk/auto/auto_headers.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: else",
          "172:     srs_undefine_macro \"SRS_SANITIZER_LOG\" $SRS_AUTO_HEADERS_H",
          "173: fi",
          "175: #####################################################################################",
          "176: # for embeded.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: if [ $SRS_VALGRIND == YES ]; then",
          "175:     srs_define_macro \"SRS_VALGRIND\" $SRS_AUTO_HEADERS_H",
          "176: else",
          "177:     srs_undefine_macro \"SRS_VALGRIND\" $SRS_AUTO_HEADERS_H",
          "178: fi",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp": [
          "File: trunk/src/app/srs_app_gb28181.hpp -> trunk/src/app/srs_app_gb28181.hpp"
        ],
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <srs_protocol_utility.hpp>",
          "32: #include <srs_app_coworkers.hpp>",
          "34: #if defined(__linux__) || defined(SRS_OSX)",
          "35: #include <sys/utsname.h>",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #ifdef SRS_VALGRIND",
          "35: #include <valgrind/valgrind.h>",
          "36: #include <valgrind/memcheck.h>",
          "37: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     urls->set(\"clusters\", SrsJsonAny::str(\"origin cluster server API\"));",
          "268:     urls->set(\"perf\", SrsJsonAny::str(\"System performance stat\"));",
          "269:     urls->set(\"tcmalloc\", SrsJsonAny::str(\"tcmalloc api with params ?page=summary|api\"));",
          "271:     SrsJsonObject* tests = SrsJsonAny::object();",
          "272:     obj->set(\"tests\", tests);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     urls->set(\"valgrind\", SrsJsonAny::str(\"valgrind api with params ?check=full|added|changed|new|quick\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1090: }",
          "1091: #endif",
          "1094: SrsGoApiMetrics::SrsGoApiMetrics()",
          "1095: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1099: #ifdef SRS_VALGRIND",
          "1101: SrsGoApiValgrind::SrsGoApiValgrind()",
          "1102: {",
          "1103:     trd_ = NULL;",
          "1104: }",
          "1106: SrsGoApiValgrind::~SrsGoApiValgrind()",
          "1107: {",
          "1108:     srs_freep(trd_);",
          "1109: }",
          "1111: srs_error_t SrsGoApiValgrind::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "1112: {",
          "1113:     srs_error_t err = srs_success;",
          "1115:     if (!trd_) {",
          "1116:         trd_ = new SrsSTCoroutine(\"valgrind\", this, _srs_context->get_id());",
          "1117:         if ((err = trd_->start()) != srs_success) {",
          "1118:             return srs_error_wrap(err, \"start\");",
          "1119:         }",
          "1120:     }",
          "1122:     string check = r->query_get(\"check\");",
          "1123:     srs_trace(\"query check=%s\", check.c_str());",
          "1126:     if (check != \"full\" && check != \"added\" && check != \"changed\" && check != \"new\" && check != \"quick\") {",
          "1127:         srs_warn(\"force set check=%s to full\", check.c_str());",
          "1128:         check = \"full\";",
          "1129:     }",
          "1132:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "1134:     obj->set(\"code\", SrsJsonAny::integer(ERROR_SUCCESS));",
          "1136:     SrsJsonObject* res = SrsJsonAny::object();",
          "1137:     res->set(\"check\", SrsJsonAny::str(check.c_str()));",
          "1138:     res->set(\"help\", SrsJsonAny::str(\"?check=full|added|changed|new|quick\"));",
          "1139:     res->set(\"see\", SrsJsonAny::str(\"https://valgrind.org/docs/manual/mc-manual.html\"));",
          "1140:     obj->set(\"data\", res);",
          "1143:     if (check == \"full\") {",
          "1144:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_LEAK_CHECK\"));",
          "1145:     } else if (check == \"quick\") {",
          "1146:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_QUICK_LEAK_CHECK\"));",
          "1147:     } else if (check == \"added\") {",
          "1148:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_ADDED_LEAK_CHECK\"));",
          "1149:     } else if (check == \"changed\") {",
          "1150:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_CHANGED_LEAK_CHECK\"));",
          "1151:     } else if (check == \"new\") {",
          "1152:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_NEW_LEAK_CHECK\"));",
          "1153:     }",
          "1154:     task_ = check;",
          "1156:     return srs_api_response(w, r, obj->dumps());",
          "1157: }",
          "1159: srs_error_t SrsGoApiValgrind::cycle()",
          "1160: {",
          "1161:     srs_error_t err = srs_success;",
          "1163:     while (true) {",
          "1164:         if ((err = trd_->pull()) != srs_success) {",
          "1165:             return srs_error_wrap(err, \"pull\");",
          "1166:         }",
          "1168:         std::string check = task_;",
          "1169:         task_ = \"\";",
          "1171:         if (!check.empty()) {",
          "1172:             srs_trace(\"do memory check=%s\", check.c_str());",
          "1173:         }",
          "1175:         if (check == \"full\") {",
          "1176:             VALGRIND_DO_LEAK_CHECK;",
          "1177:         } else if (check == \"quick\") {",
          "1178:             VALGRIND_DO_QUICK_LEAK_CHECK;",
          "1179:         } else if (check == \"added\") {",
          "1180:             VALGRIND_DO_ADDED_LEAK_CHECK;",
          "1181:         } else if (check == \"changed\") {",
          "1182:             VALGRIND_DO_CHANGED_LEAK_CHECK;",
          "1183:         } else if (check == \"new\") {",
          "1184:             VALGRIND_DO_NEW_LEAK_CHECK;",
          "1185:         }",
          "1187:         srs_usleep(3 * SRS_UTIME_SECONDS);",
          "1188:     }",
          "1190:     return err;",
          "1191: }",
          "1192: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp": [
          "File: trunk/src/app/srs_app_http_api.hpp -> trunk/src/app/srs_app_http_api.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: };",
          "217: #endif",
          "219: class SrsGoApiMetrics : public ISrsHttpHandler",
          "220: {",
          "221: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: #ifdef SRS_VALGRIND",
          "220: class SrsGoApiValgrind : public ISrsHttpHandler, public ISrsCoroutineHandler",
          "221: {",
          "222: private:",
          "223:     SrsCoroutine* trd_;",
          "224:     std::string task_;",
          "225: public:",
          "226:     SrsGoApiValgrind();",
          "227:     virtual ~SrsGoApiValgrind();",
          "228: public:",
          "229:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "231: public:",
          "232:     virtual srs_error_t cycle();",
          "233: };",
          "234: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp": [
          "File: trunk/src/app/srs_app_http_conn.hpp -> trunk/src/app/srs_app_http_conn.hpp"
        ],
        "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp": [
          "File: trunk/src/app/srs_app_recv_thread.hpp -> trunk/src/app/srs_app_recv_thread.hpp"
        ],
        "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.hpp -> trunk/src/app/srs_app_rtmp_conn.hpp"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:     if ((err = http_api_mux->handle(\"/api/v1/tcmalloc\", new SrsGoApiTcmalloc())) != srs_success) {",
          "777:     }",
          "778: #endif",
          "780:     if ((err = http_api_mux->handle(\"/metrics\", new SrsGoApiMetrics())) != srs_success) {",
          "781:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Removed Lines]",
          "776:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Added Lines]",
          "776:         return srs_error_wrap(err, \"handle tcmalloc errors\");",
          "780: #ifdef SRS_VALGRIND",
          "782:     if ((err = http_api_mux->handle(\"/api/v1/valgrind\", new SrsGoApiValgrind())) != srs_success) {",
          "783:         return srs_error_wrap(err, \"handle valgrind errors\");",
          "784:     }",
          "785: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp": [
          "File: trunk/src/app/srs_app_st.hpp -> trunk/src/app/srs_app_st.hpp"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    148",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    149",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    5",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    6",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f04e9392fa1380f42a0d87e04d65df82a347ca14",
      "candidate_info": {
        "commit_hash": "f04e9392fa1380f42a0d87e04d65df82a347ca14",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/f04e9392fa1380f42a0d87e04d65df82a347ca14",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_edge.cpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Edge: Improve stability for state and fd closing. v5.0.214 v6.0.139 (#4126)\n\n1. Should always stop coroutine before close fd, see #511, #1784\n2. When edge forwarder coroutine quit, always set the error code.\n3. Do not unpublish if invalid state.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_edge.cpp||trunk/src/app/srs_app_edge.cpp",
          "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_edge.cpp||trunk/src/app/srs_app_edge.cpp": [
          "File: trunk/src/app/srs_app_edge.cpp -> trunk/src/app/srs_app_edge.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:         url = srs_generate_rtmp_url(server, port, req->host, vhost, req->app, req->stream, req->param);",
          "784:     }",
          "787:     srs_freep(sdk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:     srs_freep(trd);",
          "788:     trd = new SrsSTCoroutine(\"edge-fwr\", this, _srs_context->get_id());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "806:     if ((err = sdk->publish(_srs_config->get_chunk_size(req->vhost), false, &stream)) != srs_success) {",
          "807:         return srs_error_wrap(err, \"sdk publish\");",
          "808:     }",
          "813:     if ((err = trd->start()) != srs_success) {",
          "814:         return srs_error_wrap(err, \"coroutine\");",
          "815:     }",
          "",
          "[Removed Lines]",
          "810:     srs_freep(trd);",
          "811:     trd = new SrsSTCoroutine(\"edge-fwr\", this, _srs_context->get_id());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822: void SrsEdgeForwarder::stop()",
          "823: {",
          "824:     trd->stop();",
          "826:     srs_freep(sdk);",
          "827: }",
          "",
          "[Removed Lines]",
          "825:     queue->clear();",
          "",
          "[Added Lines]",
          "831:     queue->clear();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:         }",
          "843:         if ((err = do_cycle()) != srs_success) {",
          "844:             return srs_error_wrap(err, \"do cycle\");",
          "845:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:             if (send_error_code == 0) {",
          "851:                 send_error_code = srs_error_code(err);",
          "852:             }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.cpp -> trunk/src/app/srs_app_rtmp_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "946:     }",
          "952:         SrsPublishRecvThread rtrd(rtmp, req, srs_netfd_fileno(stfd), 0, this, source, _srs_context->get_id());",
          "",
          "[Removed Lines]",
          "949:     if ((err = acquire_publish(source)) == srs_success) {",
          "",
          "[Added Lines]",
          "949:     srs_error_t acquire_err = acquire_publish(source);",
          "950:     if ((err = acquire_err) == srs_success) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "954:         rtrd.stop();",
          "955:     }",
          "963:         release_publish(source);",
          "964:     }",
          "968:     return err;",
          "969: }",
          "",
          "[Removed Lines]",
          "962:     if (srs_error_code(err) != ERROR_SYSTEM_STREAM_BUSY) {",
          "966:     http_hooks_on_unpublish();",
          "",
          "[Added Lines]",
          "960:     if (acquire_err == srs_success) {",
          "962:         http_hooks_on_unpublish();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    213",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    214",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    138",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    139",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bac21df6e1ddb4b74d3eedda3c92f177b7d93cd",
      "candidate_info": {
        "commit_hash": "0bac21df6e1ddb4b74d3eedda3c92f177b7d93cd",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/0bac21df6e1ddb4b74d3eedda3c92f177b7d93cd",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp"
        ],
        "message": "Fix #3767: RTMP: Do not response empty data packet. v6.0.153 (#4162)\n\nIf SRS responds with this empty data packet, FFmpeg will receive an\nempty stream, like `Stream #0:0: Data: none` in following logs:\n\n```bash\nffmpeg -i rtmp://localhost:11935/live/livestream\n```\n\nThis won't cause the player to fail, but it will inconvenience the user\nsignificantly. It may also cause FFmpeg slower to analysis the stream,\nsee #3767\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    152",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    153",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp": [
          "File: trunk/src/protocol/srs_protocol_rtmp_stack.cpp -> trunk/src/protocol/srs_protocol_rtmp_stack.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2573:         SrsOnStatusDataPacket* pkt = new SrsOnStatusDataPacket();",
          "2574:         pkt->data->set(StatusCode, SrsAmf0Any::str(StatusCodeDataStart));",
          "2575:         if ((err = protocol->send_and_free_packet(pkt, stream_id)) != srs_success) {",
          "",
          "[Removed Lines]",
          "2572:     if (true) {",
          "",
          "[Added Lines]",
          "2573:     if (false) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7aa2eaf76e60e076f77f4747acb8816172d1be4",
      "candidate_info": {
        "commit_hash": "a7aa2eaf76e60e076f77f4747acb8816172d1be4",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/a7aa2eaf76e60e076f77f4747acb8816172d1be4",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp"
        ],
        "message": "Fix #3767: RTMP: Do not response empty data packet. v6.0.153 v7.0.12 (#4162)\n\nIf SRS responds with this empty data packet, FFmpeg will receive an\nempty stream, like `Stream #0:0: Data: none` in following logs:\n\n```bash\nffmpeg -i rtmp://localhost:11935/live/livestream\n#  Stream #0:0: Data: none\n#  Stream #0:1: Audio: aac (LC), 44100 Hz, stereo, fltp, 30 kb/s\n#  Stream #0:2: Video: h264 (High), yuv420p(progressive), 768x320 [SAR 1:1 DAR 12:5], 212 kb/s, 25 fps, 25 tbr, 1k tbn\n```\n\nThis won't cause the player to fail, but it will inconvenience the user\nsignificantly. It may also cause FFmpeg slower to analysis the stream,\nsee #3767\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp",
          "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    152",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    153",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    11",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    12",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_rtmp_stack.cpp||trunk/src/protocol/srs_protocol_rtmp_stack.cpp": [
          "File: trunk/src/protocol/srs_protocol_rtmp_stack.cpp -> trunk/src/protocol/srs_protocol_rtmp_stack.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2573:         SrsOnStatusDataPacket* pkt = new SrsOnStatusDataPacket();",
          "2574:         pkt->data->set(StatusCode, SrsAmf0Any::str(StatusCodeDataStart));",
          "2575:         if ((err = protocol->send_and_free_packet(pkt, stream_id)) != srs_success) {",
          "",
          "[Removed Lines]",
          "2572:     if (true) {",
          "",
          "[Added Lines]",
          "2573:     if (false) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20c8e6423b8cc3d6798a0bcffc6303b0bcb1da73",
      "candidate_info": {
        "commit_hash": "20c8e6423b8cc3d6798a0bcffc6303b0bcb1da73",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/20c8e6423b8cc3d6798a0bcffc6303b0bcb1da73",
        "files": [
          "trunk/3rdparty/srs-bench/README.md",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "SmartPtr: Fix SRT source memory leaking. v6.0.134 (#4106)\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_srt_source.cpp||trunk/src/app/srs_app_srt_source.cpp": [
          "File: trunk/src/app/srs_app_srt_source.cpp -> trunk/src/app/srs_app_srt_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1084:     can_publish_ = true;",
          "1086:     if (bridge_) {",
          "1087:         frame_builder_->on_unpublish();",
          "1088:         srs_freep(frame_builder_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:     SrsStatistic* stat = SrsStatistic::instance();",
          "1087:     stat->on_stream_close(req);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    133",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    134",
          "",
          "---------------"
        ]
      }
    }
  ]
}