{
  "cve_id": "CVE-2017-13021",
  "cve_desc": "The ICMPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp6.c:icmp6_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "67c7126062d59729cd421bb38f9594015c9907ba",
  "patch_info": {
    "commit_hash": "67c7126062d59729cd421bb38f9594015c9907ba",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/67c7126062d59729cd421bb38f9594015c9907ba",
    "files": [
      "print-icmp6.c",
      "tests/TESTLIST",
      "tests/icmp6_mobileprefix_asan.out",
      "tests/icmp6_mobileprefix_asan.pcap"
    ],
    "message": "CVE-2017-13021/ICMP6: Add a missing bounds check.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-icmp6.c||print-icmp6.c"
    ]
  },
  "patch_diff": {
    "print-icmp6.c||print-icmp6.c": [
      "File: print-icmp6.c -> print-icmp6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1131:   if (ndo->ndo_vflag) {",
      "1132:    ND_TCHECK(dp->icmp6_data16[0]);",
      "1133:    ND_PRINT((ndo,\", id 0x%04x\", EXTRACT_16BITS(&dp->icmp6_data16[0])));",
      "1134:    if (dp->icmp6_data16[1] & 0xc0)",
      "1135:     ND_PRINT((ndo,\" \"));",
      "1136:    if (dp->icmp6_data16[1] & 0x80)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1134:    ND_TCHECK(dp->icmp6_data16[1]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58f2aa4b57a2a1c15ce7e890201cce009b476ee7",
      "candidate_info": {
        "commit_hash": "58f2aa4b57a2a1c15ce7e890201cce009b476ee7",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/58f2aa4b57a2a1c15ce7e890201cce009b476ee7",
        "files": [
          "netdissect.h",
          "print-icmp.c",
          "print-icmp6.c",
          "tests/rpl-19-pickdag.out",
          "tests/rpl-19-pickdagvvv.out"
        ],
        "message": "Use nd_ types, clean up ICMPv6 dissection.\n\nUse nd_ types for various packet structures, and use EXTRACT_ macros as\nnecessary.  Get rid of & in EXTRACT_ macros if not necessary.\n\nThe 1-byte pad RPL suboption is called PAD1, not PAD0, in the RFC.\n\nRename rpl_dio_printopt() to rpl_printopts() because 1) it's for all RPL\nmessages and 2) it prints multiple options.  Clean up its processing\nloop.\n\nPass rpl_print() the ICMPv6 code, not a pointer to the full header; all\nit needs is the code.\n\nUse %u to print unsigned values.\n\nIn Node Information node address lists, the TTL comes before the\naddress, as per the RFC.  Dissect it that way.",
        "before_after_code_files": [
          "netdissect.h||netdissect.h",
          "print-icmp.c||print-icmp.c",
          "print-icmp6.c||print-icmp6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-icmp6.c||print-icmp6.c"
          ],
          "candidate": [
            "print-icmp6.c||print-icmp6.c"
          ]
        }
      },
      "candidate_diff": {
        "netdissect.h||netdissect.h": [
          "File: netdissect.h -> netdissect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: typedef signed char nd_int8_t[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: typedef unsigned char nd_int32_t[4];",
          "",
          "---------------"
        ],
        "print-icmp.c||print-icmp.c": [
          "File: print-icmp.c -> print-icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: struct icmp {",
          "54:  union {",
          "57:   struct ih_idseq {",
          "60:   } ih_idseq;",
          "62:  } icmp_hun;",
          "63: #define icmp_pptr icmp_hun.ih_pptr",
          "64: #define icmp_gwaddr icmp_hun.ih_gwaddr",
          "",
          "[Removed Lines]",
          "58:    uint16_t icd_id;",
          "59:    uint16_t icd_seq;",
          "61:   uint32_t ih_void;",
          "",
          "[Added Lines]",
          "58:    nd_uint16_t icd_id;",
          "59:    nd_uint16_t icd_seq;",
          "61:   nd_uint32_t ih_void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: #define icmp_void icmp_hun.ih_void",
          "68:  union {",
          "69:   struct id_ts {",
          "73:   } id_ts;",
          "74:   struct id_ip  {",
          "75:    struct ip idi_ip;",
          "77:   } id_ip;",
          "80:  } icmp_dun;",
          "81: #define icmp_otime icmp_dun.id_ts.its_otime",
          "82: #define icmp_rtime icmp_dun.id_ts.its_rtime",
          "",
          "[Removed Lines]",
          "70:    uint32_t its_otime;",
          "71:    uint32_t its_rtime;",
          "72:    uint32_t its_ttime;",
          "78:   uint32_t id_mask;",
          "79:   uint8_t id_data[1];",
          "",
          "[Added Lines]",
          "70:    nd_uint32_t its_otime;",
          "71:    nd_uint32_t its_rtime;",
          "72:    nd_uint32_t its_ttime;",
          "78:   nd_uint32_t id_mask;",
          "79:   nd_byte id_data[1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242: struct mtu_discovery {",
          "245: };",
          "248: struct ih_rdiscovery {",
          "252: };",
          "254: struct id_rdiscovery {",
          "257: };",
          "",
          "[Removed Lines]",
          "243:  uint16_t unused;",
          "244:  uint16_t nexthopmtu;",
          "249:  uint8_t ird_addrnum;",
          "250:  uint8_t ird_addrsiz;",
          "251:  uint16_t ird_lifetime;",
          "255:  uint32_t ird_addr;",
          "256:  uint32_t ird_pref;",
          "",
          "[Added Lines]",
          "243:  nd_uint16_t unused;",
          "244:  nd_uint16_t nexthopmtu;",
          "249:  nd_uint8_t ird_addrnum;",
          "250:  nd_uint8_t ird_addrsiz;",
          "251:  nd_uint16_t ird_lifetime;",
          "255:  nd_uint32_t ird_addr;",
          "256:  nd_uint32_t ird_pref;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285: struct icmp_ext_t {",
          "296: };",
          "298: struct icmp_mpls_ext_object_header_t {",
          "302: };",
          "304: static const struct tok icmp_mpls_ext_obj_values[] = {",
          "",
          "[Removed Lines]",
          "286:     uint8_t icmp_type;",
          "287:     uint8_t icmp_code;",
          "288:     uint8_t icmp_checksum[2];",
          "289:     uint8_t icmp_reserved;",
          "290:     uint8_t icmp_length;",
          "291:     uint8_t icmp_reserved2[2];",
          "293:     uint8_t icmp_ext_version_res[2];",
          "294:     uint8_t icmp_ext_checksum[2];",
          "295:     uint8_t icmp_ext_data[1];",
          "299:     uint8_t length[2];",
          "300:     uint8_t class_num;",
          "301:     uint8_t ctype;",
          "",
          "[Added Lines]",
          "286:     nd_uint8_t  icmp_type;",
          "287:     nd_uint8_t  icmp_code;",
          "288:     nd_uint16_t icmp_checksum;",
          "289:     nd_byte     icmp_reserved;",
          "290:     nd_uint8_t  icmp_length;",
          "291:     nd_byte     icmp_reserved2[2];",
          "293:     nd_byte     icmp_ext_version_res[2];",
          "294:     nd_uint16_t icmp_ext_checksum;",
          "295:     nd_byte     icmp_ext_data[1];",
          "299:     nd_uint16_t length;",
          "300:     nd_uint8_t  class_num;",
          "301:     nd_uint8_t  ctype;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332: {",
          "333:  char *cp;",
          "334:  const struct icmp *dp;",
          "335:         const struct icmp_ext_t *ext_dp;",
          "336:  const struct ip *ip;",
          "337:  const char *str, *fmt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:  uint8_t icmp_type, icmp_code;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:  str = buf;",
          "354:  ND_TCHECK(dp->icmp_code);",
          "357:  case ICMP_ECHO:",
          "358:  case ICMP_ECHOREPLY:",
          "359:   ND_TCHECK(dp->icmp_seq);",
          "360:   (void)snprintf(buf, sizeof(buf), \"echo %s, id %u, seq %u\",",
          "362:                                \"request\" : \"reply\",",
          "365:   break;",
          "367:  case ICMP_UNREACH:",
          "368:   ND_TCHECK(dp->icmp_ip.ip_dst);",
          "371:   case ICMP_UNREACH_PROTOCOL:",
          "372:    ND_TCHECK_1(dp->icmp_ip.ip_p);",
          "",
          "[Removed Lines]",
          "355:  switch (dp->icmp_type) {",
          "361:                                dp->icmp_type == ICMP_ECHO ?",
          "363:                                EXTRACT_BE_U_2(&dp->icmp_id),",
          "364:                                EXTRACT_BE_U_2(&dp->icmp_seq));",
          "369:   switch (dp->icmp_code) {",
          "",
          "[Added Lines]",
          "356:  icmp_type = EXTRACT_U_1(dp->icmp_type);",
          "357:  icmp_code = EXTRACT_U_1(dp->icmp_code);",
          "358:  switch (icmp_type) {",
          "364:                                icmp_type == ICMP_ECHO ?",
          "366:                                EXTRACT_BE_U_2(dp->icmp_id),",
          "367:                                EXTRACT_BE_U_2(dp->icmp_seq));",
          "372:   switch (icmp_code) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:    hlen = IP_HL(oip) * 4;",
          "383:    ouh = (const struct udphdr *)(((const u_char *)oip) + hlen);",
          "384:    ND_TCHECK(ouh->uh_dport);",
          "386:    ip_proto = EXTRACT_U_1(oip->ip_p);",
          "387:    switch (ip_proto) {",
          "",
          "[Removed Lines]",
          "385:    dport = EXTRACT_BE_U_2(&ouh->uh_dport);",
          "",
          "[Added Lines]",
          "388:    dport = EXTRACT_BE_U_2(ouh->uh_dport);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "413:       {",
          "414:    const struct mtu_discovery *mp;",
          "415:    mp = (const struct mtu_discovery *)(const u_char *)&dp->icmp_void;",
          "417:    if (mtu) {",
          "418:     (void)snprintf(buf, sizeof(buf),",
          "419:         \"%s unreachable - need to frag (mtu %d)\",",
          "",
          "[Removed Lines]",
          "416:    mtu = EXTRACT_BE_U_2(&mp->nexthopmtu);",
          "",
          "[Added Lines]",
          "419:    mtu = EXTRACT_BE_U_2(mp->nexthopmtu);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "429:   default:",
          "430:    fmt = tok2str(unreach2str, \"#%d %%s unreachable\",",
          "432:    (void)snprintf(buf, sizeof(buf), fmt,",
          "433:        ipaddr_string(ndo, &dp->icmp_ip.ip_dst));",
          "434:    break;",
          "",
          "[Removed Lines]",
          "431:        dp->icmp_code);",
          "",
          "[Added Lines]",
          "434:        icmp_code);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "438:  case ICMP_REDIRECT:",
          "439:   ND_TCHECK(dp->icmp_ip.ip_dst);",
          "440:   fmt = tok2str(type2str, \"redirect-#%d %%s to net %%s\",",
          "442:   (void)snprintf(buf, sizeof(buf), fmt,",
          "443:       ipaddr_string(ndo, &dp->icmp_ip.ip_dst),",
          "444:       ipaddr_string(ndo, &dp->icmp_gwaddr));",
          "",
          "[Removed Lines]",
          "441:       dp->icmp_code);",
          "",
          "[Added Lines]",
          "444:       icmp_code);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "457:   ND_TCHECK(*ihp);",
          "458:   (void)strncpy(cp, \" lifetime \", sizeof(buf) - (cp - buf));",
          "459:   cp = buf + strlen(buf);",
          "461:   if (lifetime < 60) {",
          "462:    (void)snprintf(cp, sizeof(buf) - (cp - buf), \"%u\",",
          "463:        lifetime);",
          "",
          "[Removed Lines]",
          "460:   lifetime = EXTRACT_BE_U_2(&ihp->ird_lifetime);",
          "",
          "[Added Lines]",
          "463:   lifetime = EXTRACT_BE_U_2(ihp->ird_lifetime);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "473:   }",
          "474:   cp = buf + strlen(buf);",
          "477:   (void)snprintf(cp, sizeof(buf) - (cp - buf), \" %d:\", num);",
          "478:   cp = buf + strlen(buf);",
          "481:   if (size != 2) {",
          "482:    (void)snprintf(cp, sizeof(buf) - (cp - buf),",
          "483:        \" [size %d]\", size);",
          "",
          "[Removed Lines]",
          "476:   num = ihp->ird_addrnum;",
          "480:   size = ihp->ird_addrsiz;",
          "",
          "[Added Lines]",
          "479:   num = EXTRACT_U_1(ihp->ird_addrnum);",
          "483:   size = EXTRACT_U_1(ihp->ird_addrsiz);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "488:    ND_TCHECK(*idp);",
          "489:    (void)snprintf(cp, sizeof(buf) - (cp - buf), \" {%s %u}\",",
          "490:        ipaddr_string(ndo, &idp->ird_addr),",
          "492:    cp = buf + strlen(buf);",
          "493:    ++idp;",
          "494:   }",
          "",
          "[Removed Lines]",
          "491:        EXTRACT_BE_U_4(&idp->ird_pref));",
          "",
          "[Added Lines]",
          "494:        EXTRACT_BE_U_4(idp->ird_pref));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "498:  case ICMP_TIMXCEED:",
          "499:   ND_TCHECK(dp->icmp_ip.ip_dst);",
          "502:   case ICMP_TIMXCEED_INTRANS:",
          "503:    str = \"time exceeded in-transit\";",
          "",
          "[Removed Lines]",
          "500:   switch (dp->icmp_code) {",
          "",
          "[Added Lines]",
          "503:   switch (icmp_code) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "510:   default:",
          "511:    (void)snprintf(buf, sizeof(buf), \"time exceeded-#%u\",",
          "513:    break;",
          "514:   }",
          "515:   break;",
          "517:  case ICMP_PARAMPROB:",
          "519:    (void)snprintf(buf, sizeof(buf),",
          "521:   else {",
          "522:    ND_TCHECK(dp->icmp_pptr);",
          "523:    (void)snprintf(buf, sizeof(buf),",
          "525:   }",
          "526:   break;",
          "528:  case ICMP_MASKREPLY:",
          "529:   ND_TCHECK(dp->icmp_mask);",
          "530:   (void)snprintf(buf, sizeof(buf), \"address mask is 0x%08x\",",
          "532:   break;",
          "534:  case ICMP_TSTAMP:",
          "535:   ND_TCHECK(dp->icmp_seq);",
          "536:   (void)snprintf(buf, sizeof(buf),",
          "537:       \"time stamp query id %u seq %u\",",
          "540:   break;",
          "542:  case ICMP_TSTAMPREPLY:",
          "543:   ND_TCHECK(dp->icmp_ttime);",
          "544:   (void)snprintf(buf, sizeof(buf),",
          "545:       \"time stamp reply id %u seq %u: org %s\",",
          "550:                 (void)snprintf(buf+strlen(buf),sizeof(buf)-strlen(buf),\", recv %s\",",
          "552:                 (void)snprintf(buf+strlen(buf),sizeof(buf)-strlen(buf),\", xmit %s\",",
          "554:                 break;",
          "556:  default:",
          "558:   break;",
          "559:  }",
          "560:  ND_PRINT((ndo, \"ICMP %s, length %u\", str, plen));",
          "",
          "[Removed Lines]",
          "512:        dp->icmp_code);",
          "518:   if (dp->icmp_code)",
          "520:        \"parameter problem - code %u\", dp->icmp_code);",
          "524:        \"parameter problem - octet %u\", dp->icmp_pptr);",
          "531:       EXTRACT_BE_U_4(&dp->icmp_mask));",
          "538:       EXTRACT_BE_U_2(&dp->icmp_id),",
          "539:       EXTRACT_BE_U_2(&dp->icmp_seq));",
          "546:                                EXTRACT_BE_U_2(&dp->icmp_id),",
          "547:                                EXTRACT_BE_U_2(&dp->icmp_seq),",
          "548:                                icmp_tstamp_print(EXTRACT_BE_U_4(&dp->icmp_otime)));",
          "551:                          icmp_tstamp_print(EXTRACT_BE_U_4(&dp->icmp_rtime)));",
          "553:                          icmp_tstamp_print(EXTRACT_BE_U_4(&dp->icmp_ttime)));",
          "557:   str = tok2str(icmp2str, \"type-#%d\", dp->icmp_type);",
          "",
          "[Added Lines]",
          "515:        icmp_code);",
          "521:   if (icmp_code)",
          "523:        \"parameter problem - code %u\", icmp_code);",
          "527:        \"parameter problem - octet %u\", EXTRACT_U_1(dp->icmp_pptr));",
          "534:       EXTRACT_BE_U_4(dp->icmp_mask));",
          "541:       EXTRACT_BE_U_2(dp->icmp_id),",
          "542:       EXTRACT_BE_U_2(dp->icmp_seq));",
          "549:                                EXTRACT_BE_U_2(dp->icmp_id),",
          "550:                                EXTRACT_BE_U_2(dp->icmp_seq),",
          "551:                                icmp_tstamp_print(EXTRACT_BE_U_4(dp->icmp_otime)));",
          "554:                          icmp_tstamp_print(EXTRACT_BE_U_4(dp->icmp_rtime)));",
          "556:                          icmp_tstamp_print(EXTRACT_BE_U_4(dp->icmp_ttime)));",
          "560:   str = tok2str(icmp2str, \"type-#%d\", icmp_type);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "566:    vec[0].len = plen;",
          "567:    sum = in_cksum(vec, 1);",
          "568:    if (sum != 0) {",
          "570:     ND_PRINT((ndo, \" (wrong icmp cksum %x (->%x)!)\",",
          "571:           icmp_sum,",
          "572:           in_cksum_shouldbe(icmp_sum, sum)));",
          "",
          "[Removed Lines]",
          "569:     uint16_t icmp_sum = EXTRACT_BE_U_2(&dp->icmp_cksum);",
          "",
          "[Added Lines]",
          "572:     uint16_t icmp_sum = EXTRACT_BE_U_2(dp->icmp_cksum);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "582:   bp += 8;",
          "583:   ND_PRINT((ndo, \"\\n\\t\"));",
          "584:   ip = (const struct ip *)bp;",
          "585:                 snapend_save = ndo->ndo_snapend;",
          "588:                 ndo->ndo_snapend = snapend_save;",
          "589:  }",
          "596:             ND_TCHECK(*ext_dp);",
          "",
          "[Removed Lines]",
          "581:  if (ndo->ndo_vflag >= 1 && ICMP_ERRTYPE(dp->icmp_type)) {",
          "586:   ND_TCHECK_2(&ip->ip_len);",
          "587:   ip_print(ndo, bp, EXTRACT_BE_U_2(&ip->ip_len));",
          "594:         if (ndo->ndo_vflag >= 1 && plen > ICMP_EXTD_MINLEN && ICMP_MPLS_EXT_TYPE(dp->icmp_type)) {",
          "",
          "[Added Lines]",
          "584:  if (ndo->ndo_vflag >= 1 && ICMP_ERRTYPE(icmp_type)) {",
          "589:   ND_TCHECK_2(ip->ip_len);",
          "590:   ip_print(ndo, bp, EXTRACT_BE_U_2(ip->ip_len));",
          "597:         if (ndo->ndo_vflag >= 1 && plen > ICMP_EXTD_MINLEN && ICMP_MPLS_EXT_TYPE(icmp_type)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "605:                 ND_TTEST_LEN(ext_dp->icmp_ext_version_res, plen - ICMP_EXTD_MINLEN)) {",
          "606:                 vec[0].ptr = (const uint8_t *)(const void *)&ext_dp->icmp_ext_version_res;",
          "607:                 vec[0].len = plen - ICMP_EXTD_MINLEN;",
          "",
          "[Removed Lines]",
          "604:             if (!ext_dp->icmp_length &&",
          "",
          "[Added Lines]",
          "607:             if (EXTRACT_U_1(ext_dp->icmp_length) == 0 &&",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "640:                 icmp_mpls_ext_object_header = (const struct icmp_mpls_ext_object_header_t *)obj_tptr;",
          "641:                 ND_TCHECK(*icmp_mpls_ext_object_header);",
          "642:                 obj_tlen = EXTRACT_BE_U_2(icmp_mpls_ext_object_header->length);",
          "645:                 obj_tptr += sizeof(struct icmp_mpls_ext_object_header_t);",
          "647:                 ND_PRINT((ndo, \"\\n\\t  %s Object (%u), Class-Type: %u, length %u\",",
          "",
          "[Removed Lines]",
          "643:                 obj_class_num = icmp_mpls_ext_object_header->class_num;",
          "644:                 obj_ctype = icmp_mpls_ext_object_header->ctype;",
          "",
          "[Added Lines]",
          "646:                 obj_class_num = EXTRACT_U_1(icmp_mpls_ext_object_header->class_num);",
          "647:                 obj_ctype = EXTRACT_U_1(icmp_mpls_ext_object_header->ctype);",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: struct icmp6_hdr {",
          "80:  union {",
          "84:  } icmp6_dataun;",
          "85: };",
          "87: #define icmp6_data32 icmp6_dataun.icmp6_un_data32",
          "88: #define icmp6_data16 icmp6_dataun.icmp6_un_data16",
          "89: #define icmp6_data8 icmp6_dataun.icmp6_un_data8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: #define icmp6_data icmp6_dataun.icmp6_un_data",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307: };",
          "314: };",
          "322: };",
          "330: };",
          "337: };",
          "345: };",
          "354: };",
          "",
          "[Removed Lines]",
          "302:  uint8_t  nd_opt_rh_type;",
          "303:  uint8_t  nd_opt_rh_len;",
          "304:  uint16_t nd_opt_rh_reserved1;",
          "305:  uint32_t nd_opt_rh_reserved2;",
          "310:  uint8_t  nd_opt_mtu_type;",
          "311:  uint8_t  nd_opt_mtu_len;",
          "312:  uint16_t nd_opt_mtu_reserved;",
          "313:  uint32_t nd_opt_mtu_mtu;",
          "317:  uint8_t  nd_opt_rdnss_type;",
          "318:  uint8_t  nd_opt_rdnss_len;",
          "319:  uint16_t nd_opt_rdnss_reserved;",
          "320:  uint32_t nd_opt_rdnss_lifetime;",
          "325:  uint8_t  nd_opt_dnssl_type;",
          "326:  uint8_t  nd_opt_dnssl_len;",
          "327:  uint16_t nd_opt_dnssl_reserved;",
          "328:  uint32_t nd_opt_dnssl_lifetime;",
          "333:  uint8_t  nd_opt_adv_type;",
          "334:  uint8_t  nd_opt_adv_len;",
          "335:  uint16_t nd_opt_adv_reserved;",
          "336:  uint32_t nd_opt_adv_interval;",
          "340:  uint8_t  nd_opt_hai_type;",
          "341:  uint8_t  nd_opt_hai_len;",
          "342:  uint16_t nd_opt_hai_reserved;",
          "343:  int16_t  nd_opt_hai_preference;",
          "344:  uint16_t nd_opt_hai_lifetime;",
          "348:  uint8_t  nd_opt_rti_type;",
          "349:  uint8_t  nd_opt_rti_len;",
          "350:  uint8_t  nd_opt_rti_prefixlen;",
          "351:  uint8_t  nd_opt_rti_flags;",
          "352:  uint32_t nd_opt_rti_lifetime;",
          "",
          "[Added Lines]",
          "304:  nd_uint8_t nd_opt_rh_type;",
          "305:  nd_uint8_t nd_opt_rh_len;",
          "306:  nd_uint16_t nd_opt_rh_reserved1;",
          "307:  nd_uint32_t nd_opt_rh_reserved2;",
          "312:  nd_uint8_t nd_opt_mtu_type;",
          "313:  nd_uint8_t nd_opt_mtu_len;",
          "314:  nd_uint16_t nd_opt_mtu_reserved;",
          "315:  nd_uint32_t nd_opt_mtu_mtu;",
          "319:  nd_uint8_t nd_opt_rdnss_type;",
          "320:  nd_uint8_t nd_opt_rdnss_len;",
          "321:  nd_uint16_t nd_opt_rdnss_reserved;",
          "322:  nd_uint32_t nd_opt_rdnss_lifetime;",
          "327:  nd_uint8_t  nd_opt_dnssl_type;",
          "328:  nd_uint8_t  nd_opt_dnssl_len;",
          "329:  nd_uint16_t nd_opt_dnssl_reserved;",
          "330:  nd_uint32_t nd_opt_dnssl_lifetime;",
          "335:  nd_uint8_t nd_opt_adv_type;",
          "336:  nd_uint8_t nd_opt_adv_len;",
          "337:  nd_uint16_t nd_opt_adv_reserved;",
          "338:  nd_uint32_t nd_opt_adv_interval;",
          "342:  nd_uint8_t nd_opt_hai_type;",
          "343:  nd_uint8_t nd_opt_hai_len;",
          "344:  nd_uint16_t nd_opt_hai_reserved;",
          "345:  nd_uint16_t nd_opt_hai_preference;",
          "346:  nd_uint16_t nd_opt_hai_lifetime;",
          "350:  nd_uint8_t nd_opt_rti_type;",
          "351:  nd_uint8_t nd_opt_rti_len;",
          "352:  nd_uint8_t nd_opt_rti_prefixlen;",
          "353:  nd_uint8_t nd_opt_rti_flags;",
          "354:  nd_uint32_t nd_opt_rti_lifetime;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360: struct icmp6_namelookup {",
          "364: #if 0",
          "367: #endif",
          "369: };",
          "",
          "[Removed Lines]",
          "361:  struct icmp6_hdr  icmp6_nl_hdr;",
          "362:  uint8_t  icmp6_nl_nonce[8];",
          "363:  int32_t  icmp6_nl_ttl;",
          "365:  uint8_t  icmp6_nl_len;",
          "366:  uint8_t  icmp6_nl_name[3];",
          "",
          "[Added Lines]",
          "363:  struct icmp6_hdr icmp6_nl_hdr;",
          "364:  nd_byte   icmp6_nl_nonce[8];",
          "365:  nd_int32_t  icmp6_nl_ttl;",
          "367:  nd_uint8_t  icmp6_nl_len;",
          "368:  nd_byte   icmp6_nl_name[3];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374: struct icmp6_nodeinfo {",
          "375:  struct icmp6_hdr icmp6_ni_hdr;",
          "378: };",
          "",
          "[Removed Lines]",
          "376:  uint8_t icmp6_ni_nonce[8];",
          "",
          "[Added Lines]",
          "378:  nd_byte icmp6_ni_nonce[8];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416:  struct icmp6_hdr rr_hdr;",
          "421: };",
          "422: #define ICMP6_RR_FLAGS_TEST  0x80",
          "423: #define ICMP6_RR_FLAGS_REQRESULT 0x40",
          "",
          "[Removed Lines]",
          "417:  uint8_t  rr_segnum;",
          "418:  uint8_t  rr_flags;",
          "419:  uint16_t rr_maxdelay;",
          "420:  uint32_t rr_reserved;",
          "",
          "[Added Lines]",
          "419:  nd_uint8_t  rr_segnum;",
          "420:  nd_uint8_t  rr_flags;",
          "421:  nd_uint16_t  rr_maxdelay;",
          "422:  nd_uint32_t  rr_reserved;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "431: #define rr_seqnum  rr_hdr.icmp6_data32[0]",
          "441:  struct in6_addr rpm_prefix;",
          "442: };",
          "",
          "[Removed Lines]",
          "434:  uint8_t  rpm_code;",
          "435:  uint8_t  rpm_len;",
          "436:  uint8_t  rpm_ordinal;",
          "437:  uint8_t  rpm_matchlen;",
          "438:  uint8_t  rpm_minlen;",
          "439:  uint8_t  rpm_maxlen;",
          "440:  uint16_t rpm_reserved;",
          "",
          "[Added Lines]",
          "436:  nd_uint8_t  rpm_code;",
          "437:  nd_uint8_t  rpm_len;",
          "438:  nd_uint8_t  rpm_ordinal;",
          "439:  nd_uint8_t  rpm_matchlen;",
          "440:  nd_uint8_t  rpm_minlen;",
          "441:  nd_uint8_t  rpm_maxlen;",
          "442:  nd_uint16_t  rpm_reserved;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "447: #define RPM_PCO_MAX  4",
          "457:  struct in6_addr rpu_prefix;",
          "458: };",
          "459: #define ICMP6_RR_PCOUSE_RAFLAGS_ONLINK 0x80",
          "",
          "[Removed Lines]",
          "450:  uint8_t  rpu_uselen;",
          "451:  uint8_t  rpu_keeplen;",
          "452:  uint8_t  rpu_ramask;",
          "453:  uint8_t  rpu_raflags;",
          "454:  uint32_t rpu_vltime;",
          "455:  uint32_t rpu_pltime;",
          "456:  uint32_t rpu_flags;",
          "",
          "[Added Lines]",
          "452:  nd_uint8_t rpu_uselen;",
          "453:  nd_uint8_t rpu_keeplen;",
          "454:  nd_uint8_t rpu_ramask;",
          "455:  nd_uint8_t rpu_raflags;",
          "456:  nd_uint32_t rpu_vltime;",
          "457:  nd_uint32_t rpu_pltime;",
          "458:  nd_uint32_t rpu_flags;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "464: #define ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME     ((uint32_t)htonl(0x40000000))",
          "471:  struct in6_addr rrr_prefix;",
          "472: };",
          "",
          "[Removed Lines]",
          "467:  uint16_t rrr_flags;",
          "468:  uint8_t  rrr_ordinal;",
          "469:  uint8_t  rrr_matchedlen;",
          "470:  uint32_t rrr_ifid;",
          "",
          "[Added Lines]",
          "469:  nd_uint16_t rrr_flags;",
          "470:  nd_uint8_t rrr_ordinal;",
          "471:  nd_uint8_t rrr_matchedlen;",
          "472:  nd_uint32_t rrr_ifid;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "523: struct nd_rpl_security {",
          "529: #if 0",
          "531: #endif",
          "532: };",
          "535: struct nd_rpl_dis_is {",
          "538: #if 0",
          "540: #endif",
          "541: };",
          "544: struct nd_rpl_dio {",
          "553: };",
          "554: #define RPL_DIO_GROUND_FLAG 0x80",
          "555: #define RPL_DIO_MOP_SHIFT   3",
          "",
          "[Removed Lines]",
          "525:     uint8_t  rpl_sec_algo;",
          "528:     uint32_t rpl_sec_counter;",
          "536:     uint8_t rpl_dis_flags;",
          "537:     uint8_t rpl_dis_reserved;",
          "539:     uint8_t rpl_dis_options[0];",
          "545:     uint8_t  rpl_instanceid;",
          "546:     uint8_t  rpl_version;",
          "547:     uint16_t rpl_dagrank;",
          "551:     uint8_t  rpl_resv1;",
          "552:     uint8_t  rpl_dagid[DAGID_LEN];",
          "",
          "[Added Lines]",
          "527:     nd_uint8_t  rpl_sec_algo;",
          "530:     nd_uint32_t rpl_sec_counter;",
          "538:     nd_uint8_t rpl_dis_flags;",
          "539:     nd_uint8_t rpl_dis_reserved;",
          "541:     nd_byte    rpl_dis_options[0];",
          "547:     nd_uint8_t  rpl_instanceid;",
          "548:     nd_uint8_t  rpl_version;",
          "549:     nd_uint16_t rpl_dagrank;",
          "553:     nd_uint8_t  rpl_resv1;",
          "554:     nd_byte     rpl_dagid[DAGID_LEN];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "568: };",
          "570: enum RPL_SUBOPT {",
          "572:         RPL_OPT_PADN        = 1,",
          "573:         RPL_DIO_METRICS     = 2,",
          "574:         RPL_DIO_ROUTINGINFO = 3,",
          "",
          "[Removed Lines]",
          "571:         RPL_OPT_PAD0        = 0,",
          "",
          "[Added Lines]",
          "573:         RPL_OPT_PAD1        = 0,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "579:         RPL_DAO_RPLTARGET_DESC=9",
          "580: };",
          "585: };",
          "588: #define RPL_DIO_LIFETIME_INFINITE   0xffffffff",
          "589: #define RPL_DIO_LIFETIME_DISCONNECT 0",
          "591: struct rpl_dio_destprefix {",
          "597: #if 0",
          "599: #endif",
          "600: };",
          "603: struct nd_rpl_dao {",
          "609: };",
          "",
          "[Removed Lines]",
          "582: struct rpl_dio_genoption {",
          "583:     uint8_t rpl_dio_type;",
          "586: #define RPL_DIO_GENOPTION_LEN 2",
          "592:     uint8_t rpl_dio_type;",
          "593:     uint8_t rpl_dio_len;",
          "604:     uint8_t  rpl_instanceid;",
          "606:     uint8_t  rpl_resv;",
          "607:     uint8_t  rpl_daoseq;",
          "",
          "[Added Lines]",
          "584: struct rpl_genoption {",
          "585:     nd_uint8_t rpl_dio_type;",
          "588: #define RPL_GENOPTION_LEN 2",
          "594:     nd_uint8_t rpl_dio_type;",
          "595:     nd_uint8_t rpl_dio_len;",
          "606:     nd_uint8_t  rpl_instanceid;",
          "608:     nd_uint8_t  rpl_resv;",
          "609:     nd_uint8_t  rpl_daoseq;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "620: #define RPL_DAO_D(X)      (((X)&RPL_DAO_D_MASK) >> RPL_DAO_D_SHIFT)",
          "622: struct rpl_dao_target {",
          "627: #if 0",
          "629: #endif",
          "630: };",
          "633: struct nd_rpl_daoack {",
          "639: };",
          "",
          "[Removed Lines]",
          "623:     uint8_t rpl_dao_type;",
          "624:     uint8_t rpl_dao_len;",
          "634:     uint8_t  rpl_instanceid;",
          "636:     uint8_t  rpl_daoseq;",
          "637:     uint8_t  rpl_status;",
          "",
          "[Added Lines]",
          "625:     nd_uint8_t rpl_dao_type;",
          "626:     nd_uint8_t rpl_dao_len;",
          "636:     nd_uint8_t  rpl_instanceid;",
          "638:     nd_uint8_t  rpl_daoseq;",
          "639:     nd_uint8_t  rpl_status;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "790: };",
          "792: static const struct tok rpl_subopt_values[] = {",
          "794:         { RPL_OPT_PADN, \"padN\"},",
          "795:         { RPL_DIO_METRICS, \"metrics\"},",
          "796:         { RPL_DIO_ROUTINGINFO, \"routinginfo\"},",
          "",
          "[Removed Lines]",
          "793:         { RPL_OPT_PAD0, \"pad0\"},",
          "",
          "[Added Lines]",
          "795:         { RPL_OPT_PAD1, \"pad1\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "803: };",
          "805: static void",
          "809: {",
          "821:                         optlen = 1;",
          "823:                 } else {",
          "824:                         ND_PRINT((ndo, \" opt:%s len:%u \",",
          "826:                                   optlen));",
          "830:                                 hex_print(ndo,",
          "831:                                           \" \",",
          "834:                         }",
          "835:                 }",
          "837:                 length -= optlen;",
          "838:         }",
          "839:         return;",
          "",
          "[Removed Lines]",
          "806: rpl_dio_printopt(netdissect_options *ndo,",
          "807:                  const struct rpl_dio_genoption *opt,",
          "808:                  u_int length)",
          "810:         if(length < RPL_DIO_GENOPTION_LEN) return;",
          "811:         length -= RPL_DIO_GENOPTION_LEN;",
          "813:         ND_TCHECK(opt->rpl_dio_len);",
          "815:         while((opt->rpl_dio_type == RPL_OPT_PAD0 &&",
          "816:                (const u_char *)opt < ndo->ndo_snapend) ||",
          "817:               ND_TTEST_LEN(opt, (opt->rpl_dio_len + 2))) {",
          "819:                 unsigned int optlen = opt->rpl_dio_len+2;",
          "820:                 if(opt->rpl_dio_type == RPL_OPT_PAD0) {",
          "822:                         ND_PRINT((ndo, \" opt:pad0\"));",
          "825:                                   tok2str(rpl_subopt_values, \"subopt:%u\", opt->rpl_dio_type),",
          "827:                         if(ndo->ndo_vflag > 2) {",
          "828:                                 unsigned int paylen = opt->rpl_dio_len;",
          "829:                                 if(paylen > length) paylen = length;",
          "833:                                           paylen);",
          "836:                 opt = (const struct rpl_dio_genoption *)(((const char *)opt) + optlen);",
          "",
          "[Added Lines]",
          "808: rpl_printopts(netdissect_options *ndo, const uint8_t *opts, u_int length)",
          "810:  const struct rpl_genoption *opt;",
          "811:  uint8_t dio_type;",
          "812:  u_int optlen;",
          "814:  while (length != 0) {",
          "815:   opt = (const struct rpl_genoption *)opts;",
          "816:   ND_TCHECK_1(opt->rpl_dio_type);",
          "817:   dio_type = EXTRACT_U_1(opt->rpl_dio_type);",
          "818:   if (dio_type == RPL_OPT_PAD1) {",
          "820:                         ND_PRINT((ndo, \" opt:pad1\"));",
          "822:                  if (length < RPL_GENOPTION_LEN)",
          "823:                   goto trunc;",
          "824:                  optlen = EXTRACT_U_1(opt->rpl_dio_len)+RPL_GENOPTION_LEN;",
          "826:                                   tok2str(rpl_subopt_values, \"subopt:%u\", dio_type),",
          "828:                         ND_TCHECK_LEN(opt, optlen);",
          "829:                         if (length < optlen)",
          "830:                          goto trunc;",
          "831:                         if (ndo->ndo_vflag > 2) {",
          "835:                                           optlen - RPL_GENOPTION_LEN);",
          "838:                 opts += optlen;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "855:         ND_PRINT((ndo, \" [dagid:%s,seq:%u,instance:%u,rank:%u,%smop:%s,prf:%u]\",",
          "856:                   dagid_str,",
          "864:         if(ndo->ndo_vflag > 1) {",
          "867:         }",
          "868:  return;",
          "869: trunc:",
          "",
          "[Removed Lines]",
          "857:                   dio->rpl_dtsn,",
          "858:                   dio->rpl_instanceid,",
          "859:                   EXTRACT_BE_U_2(&dio->rpl_dagrank),",
          "860:                   RPL_DIO_GROUNDED(dio->rpl_mopprf) ? \"grounded,\":\"\",",
          "861:                   tok2str(rpl_mop_values, \"mop%u\", RPL_DIO_MOP(dio->rpl_mopprf)),",
          "862:                   RPL_DIO_PRF(dio->rpl_mopprf)));",
          "865:                 const struct rpl_dio_genoption *opt = (const struct rpl_dio_genoption *)&dio[1];",
          "866:                 rpl_dio_printopt(ndo, opt, length);",
          "",
          "[Added Lines]",
          "859:                   EXTRACT_U_1(dio->rpl_dtsn),",
          "860:                   EXTRACT_U_1(dio->rpl_instanceid),",
          "861:                   EXTRACT_BE_U_2(dio->rpl_dagrank),",
          "862:                   RPL_DIO_GROUNDED(EXTRACT_U_1(dio->rpl_mopprf)) ? \"grounded,\":\"\",",
          "863:                   tok2str(rpl_mop_values, \"mop%u\", RPL_DIO_MOP(EXTRACT_U_1(dio->rpl_mopprf))),",
          "864:                   RPL_DIO_PRF(EXTRACT_U_1(dio->rpl_mopprf))));",
          "867:                 rpl_printopts(ndo, bp + sizeof(struct nd_rpl_dio),",
          "868:                               length - sizeof(struct nd_rpl_dio));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "877: {",
          "878:         const struct nd_rpl_dao *dao = (const struct nd_rpl_dao *)bp;",
          "879:         const char *dagid_str = \"<elided>\";",
          "881:         ND_TCHECK(*dao);",
          "882:         if (length < ND_RPL_DAO_MIN_LEN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:         uint8_t rpl_flags;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "885:         bp += ND_RPL_DAO_MIN_LEN;",
          "886:         length -= ND_RPL_DAO_MIN_LEN;",
          "888:                 ND_TCHECK_LEN(dao->rpl_dagid, DAGID_LEN);",
          "889:                 if (length < DAGID_LEN)",
          "890:                  goto tooshort;",
          "",
          "[Removed Lines]",
          "887:         if(RPL_DAO_D(dao->rpl_flags)) {",
          "",
          "[Added Lines]",
          "890:         rpl_flags = EXTRACT_U_1(dao->rpl_flags);",
          "891:         if(RPL_DAO_D(rpl_flags)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "896:         ND_PRINT((ndo, \" [dagid:%s,seq:%u,instance:%u%s%s,%02x]\",",
          "897:                   dagid_str,",
          "904:         if(ndo->ndo_vflag > 1) {",
          "907:         }",
          "908:  return;",
          "",
          "[Removed Lines]",
          "898:                   dao->rpl_daoseq,",
          "899:                   dao->rpl_instanceid,",
          "900:                   RPL_DAO_K(dao->rpl_flags) ? \",acK\":\"\",",
          "901:                   RPL_DAO_D(dao->rpl_flags) ? \",Dagid\":\"\",",
          "902:                   dao->rpl_flags));",
          "905:                 const struct rpl_dio_genoption *opt = (const struct rpl_dio_genoption *)bp;",
          "906:                 rpl_dio_printopt(ndo, opt, length);",
          "",
          "[Added Lines]",
          "902:                   EXTRACT_U_1(dao->rpl_daoseq),",
          "903:                   EXTRACT_U_1(dao->rpl_instanceid),",
          "904:                   RPL_DAO_K(rpl_flags) ? \",acK\":\"\",",
          "905:                   RPL_DAO_D(rpl_flags) ? \",Dagid\":\"\",",
          "906:                   rpl_flags));",
          "909:                 rpl_printopts(ndo, bp, length);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "930:         bp += ND_RPL_DAOACK_MIN_LEN;",
          "931:         length -= ND_RPL_DAOACK_MIN_LEN;",
          "933:                 ND_TCHECK_LEN(daoack->rpl_dagid, DAGID_LEN);",
          "934:                 if (length < DAGID_LEN)",
          "935:                  goto tooshort;",
          "",
          "[Removed Lines]",
          "932:         if(RPL_DAOACK_D(daoack->rpl_flags)) {",
          "",
          "[Added Lines]",
          "935:         if(RPL_DAOACK_D(EXTRACT_U_1(daoack->rpl_flags))) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "941:         ND_PRINT((ndo, \" [dagid:%s,seq:%u,instance:%u,status:%u]\",",
          "942:                   dagid_str,",
          "948:         if(ndo->ndo_vflag > 1) {",
          "951:         }",
          "952:  return;",
          "",
          "[Removed Lines]",
          "943:                   daoack->rpl_daoseq,",
          "944:                   daoack->rpl_instanceid,",
          "945:                   daoack->rpl_status));",
          "949:                 const struct rpl_dio_genoption *opt = (const struct rpl_dio_genoption *)bp;",
          "950:                 rpl_dio_printopt(ndo, opt, length);",
          "",
          "[Added Lines]",
          "946:                   EXTRACT_U_1(daoack->rpl_daoseq),",
          "947:                   EXTRACT_U_1(daoack->rpl_instanceid),",
          "948:                   EXTRACT_U_1(daoack->rpl_status)));",
          "952:                 rpl_printopts(ndo, bp, length);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "963: static void",
          "964: rpl_print(netdissect_options *ndo,",
          "966:           const u_char *bp, u_int length)",
          "967: {",
          "971:         if(secured) {",
          "972:                 ND_PRINT((ndo, \", (SEC) [worktodo]\"));",
          "",
          "[Removed Lines]",
          "965:           const struct icmp6_hdr *hdr,",
          "968:         int secured = hdr->icmp6_code & 0x80;",
          "969:         int basecode= hdr->icmp6_code & 0x7f;",
          "",
          "[Added Lines]",
          "967:           uint8_t icmp6_code,",
          "970:         int secured = icmp6_code & 0x80;",
          "971:         int basecode= icmp6_code & 0x7f;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1004:                 }",
          "1005:                 break;",
          "1006:         default:",
          "1008:                 break;",
          "1009:         }",
          "1010:  return;",
          "",
          "[Removed Lines]",
          "1007:                 ND_PRINT((ndo, \"RPL message, unknown code %u\",hdr->icmp6_code));",
          "",
          "[Added Lines]",
          "1009:                 ND_PRINT((ndo, \"RPL message, unknown code %u\",icmp6_code));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1023:             const u_char *bp, u_int length, const u_char *bp2, int fragmented)",
          "1024: {",
          "1025:  const struct icmp6_hdr *dp;",
          "1026:  const struct ip6_hdr *ip;",
          "1027:  const struct ip6_hdr *oip;",
          "1028:  const struct udphdr *ouh;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:  uint8_t icmp6_type, icmp6_code;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1037:  ep = ndo->ndo_snapend;",
          "1041:  if (ndo->ndo_vflag && !fragmented) {",
          "1042:   uint16_t sum, udp_sum;",
          "1044:   if (ND_TTEST_LEN(bp, length)) {",
          "1046:    sum = icmp6_cksum(ndo, ip, dp, length);",
          "1047:    if (sum != 0)",
          "1048:     ND_PRINT((ndo,\"[bad icmp6 cksum 0x%04x -> 0x%04x!] \",",
          "",
          "[Removed Lines]",
          "1039:  ND_TCHECK(dp->icmp6_cksum);",
          "1045:    udp_sum = EXTRACT_BE_U_2(&dp->icmp6_cksum);",
          "",
          "[Added Lines]",
          "1046:    ND_TCHECK(dp->icmp6_cksum);",
          "1047:    udp_sum = EXTRACT_BE_U_2(dp->icmp6_cksum);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1053:   }",
          "1054:  }",
          "1066:                 ND_PRINT((ndo,\", length %u\", length));",
          "1069:  case ICMP6_DST_UNREACH:",
          "1070:   ND_TCHECK(oip->ip6_dst);",
          "1075:   case ICMP6_DST_UNREACH_ADMIN:",
          "",
          "[Removed Lines]",
          "1056:         ND_PRINT((ndo,\"ICMP6, %s\", tok2str(icmp6_type_values,\"unknown icmp6 type (%u)\",dp->icmp6_type)));",
          "1059:         if (ndo->ndo_vflag && (dp->icmp6_type == ND_ROUTER_SOLICIT ||",
          "1060:                       dp->icmp6_type == ND_ROUTER_ADVERT ||",
          "1061:                       dp->icmp6_type == ND_NEIGHBOR_ADVERT ||",
          "1062:                       dp->icmp6_type == ND_NEIGHBOR_SOLICIT ||",
          "1063:                       dp->icmp6_type == ND_REDIRECT ||",
          "1064:                       dp->icmp6_type == ICMP6_HADISCOV_REPLY ||",
          "1065:                       dp->icmp6_type == ICMP6_MOBILEPREFIX_ADVERT ))",
          "1068:  switch (dp->icmp6_type) {",
          "1071:                 ND_PRINT((ndo,\", %s\", tok2str(icmp6_dst_unreach_code_values,\"unknown unreach code (%u)\",dp->icmp6_code)));",
          "1072:   switch (dp->icmp6_code) {",
          "",
          "[Added Lines]",
          "1058:  ND_TCHECK_1(dp->icmp6_type);",
          "1059:  icmp6_type = EXTRACT_U_1(dp->icmp6_type);",
          "1060:  ND_PRINT((ndo,\"ICMP6, %s\", tok2str(icmp6_type_values,\"unknown icmp6 type (%u)\",icmp6_type)));",
          "1063:         if (ndo->ndo_vflag && (icmp6_type == ND_ROUTER_SOLICIT ||",
          "1064:                       icmp6_type == ND_ROUTER_ADVERT ||",
          "1065:                       icmp6_type == ND_NEIGHBOR_ADVERT ||",
          "1066:                       icmp6_type == ND_NEIGHBOR_SOLICIT ||",
          "1067:                       icmp6_type == ND_REDIRECT ||",
          "1068:                       icmp6_type == ICMP6_HADISCOV_REPLY ||",
          "1069:                       icmp6_type == ICMP6_MOBILEPREFIX_ADVERT ))",
          "1072:  ND_TCHECK_1(dp->icmp6_code);",
          "1073:  icmp6_code = EXTRACT_U_1(dp->icmp6_code);",
          "1075:  switch (icmp6_type) {",
          "1078:                 ND_PRINT((ndo,\", %s\", tok2str(icmp6_dst_unreach_code_values,\"unknown unreach code (%u)\",icmp6_code)));",
          "1079:   switch (icmp6_code) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1114:   }",
          "1115:   break;",
          "1116:  case ICMP6_PACKET_TOO_BIG:",
          "1119:   break;",
          "1120:  case ICMP6_TIME_EXCEEDED:",
          "1121:   ND_TCHECK(oip->ip6_dst);",
          "1123:   case ICMP6_TIME_EXCEED_TRANSIT:",
          "1124:    ND_PRINT((ndo,\" for %s\",",
          "1125:                                   ip6addr_string(ndo, &oip->ip6_dst)));",
          "",
          "[Removed Lines]",
          "1117:   ND_TCHECK(dp->icmp6_mtu);",
          "1118:   ND_PRINT((ndo,\", mtu %u\", EXTRACT_BE_U_4(&dp->icmp6_mtu)));",
          "1122:   switch (dp->icmp6_code) {",
          "",
          "[Added Lines]",
          "1124:   ND_TCHECK_4(dp->icmp6_mtu);",
          "1125:   ND_PRINT((ndo,\", mtu %u\", EXTRACT_BE_U_4(dp->icmp6_mtu)));",
          "1129:   switch (icmp6_code) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1128:    ND_PRINT((ndo,\" (reassembly)\"));",
          "1129:    break;",
          "1130:   default:",
          "1132:    break;",
          "1133:   }",
          "1134:   break;",
          "1135:  case ICMP6_PARAM_PROB:",
          "1136:   ND_TCHECK(oip->ip6_dst);",
          "1138:   case ICMP6_PARAMPROB_HEADER:",
          "1140:                         break;",
          "1141:   case ICMP6_PARAMPROB_NEXTHEADER:",
          "1143:                         break;",
          "1144:   case ICMP6_PARAMPROB_OPTION:",
          "1146:                         break;",
          "1147:   default:",
          "1150:                         break;",
          "1151:   }",
          "1152:   break;",
          "1153:  case ICMP6_ECHO_REQUEST:",
          "1154:  case ICMP6_ECHO_REPLY:",
          "1157:   break;",
          "1158:  case ICMP6_MEMBERSHIP_QUERY:",
          "1159:   if (length == MLD_MINLEN) {",
          "",
          "[Removed Lines]",
          "1131:                         ND_PRINT((ndo,\", unknown code (%u)\", dp->icmp6_code));",
          "1137:   switch (dp->icmp6_code) {",
          "1139:                         ND_PRINT((ndo,\", erroneous - octet %u\", EXTRACT_BE_U_4(&dp->icmp6_pptr)));",
          "1142:                         ND_PRINT((ndo,\", next header - octet %u\", EXTRACT_BE_U_4(&dp->icmp6_pptr)));",
          "1145:                         ND_PRINT((ndo,\", option - octet %u\", EXTRACT_BE_U_4(&dp->icmp6_pptr)));",
          "1148:                         ND_PRINT((ndo,\", code-#%d\",",
          "1149:                                   dp->icmp6_code));",
          "1155:                 ND_TCHECK(dp->icmp6_seq);",
          "1156:                 ND_PRINT((ndo,\", seq %u\", EXTRACT_BE_U_2(&dp->icmp6_seq)));",
          "",
          "[Added Lines]",
          "1138:                         ND_PRINT((ndo,\", unknown code (%u)\", icmp6_code));",
          "1144:   switch (icmp6_code) {",
          "1146:                         ND_PRINT((ndo,\", erroneous - octet %u\", EXTRACT_BE_U_4(dp->icmp6_pptr)));",
          "1149:                         ND_PRINT((ndo,\", next header - octet %u\", EXTRACT_BE_U_4(dp->icmp6_pptr)));",
          "1152:                         ND_PRINT((ndo,\", option - octet %u\", EXTRACT_BE_U_4(dp->icmp6_pptr)));",
          "1155:                         ND_PRINT((ndo,\", code-#%u\",",
          "1156:                                   icmp6_code));",
          "1162:                 ND_TCHECK_2(dp->icmp6_seq);",
          "1163:                 ND_PRINT((ndo,\", seq %u\", EXTRACT_BE_U_2(dp->icmp6_seq)));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1187:    ND_TCHECK(p->nd_ra_retransmit);",
          "1188:    ND_PRINT((ndo,\"\\n\\thop limit %u, Flags [%s]\" \\",
          "1189:                                   \", pref %s, router lifetime %us, reachable time %us, retrans time %us\",",
          "1197:    icmp6_opt_print(ndo, (const u_char *)dp + RTADVLEN,",
          "1198:      length - RTADVLEN);",
          "",
          "[Removed Lines]",
          "1190:                                   (u_int)p->nd_ra_curhoplimit,",
          "1191:                                   bittok2str(icmp6_opt_ra_flag_values,\"none\",(p->nd_ra_flags_reserved)),",
          "1192:                                   get_rtpref(p->nd_ra_flags_reserved),",
          "1193:                                   EXTRACT_BE_U_2(&p->nd_ra_router_lifetime),",
          "1194:                                   EXTRACT_BE_U_4(&p->nd_ra_reachable),",
          "1195:                                   EXTRACT_BE_U_4(&p->nd_ra_retransmit)));",
          "",
          "[Added Lines]",
          "1197:                                   EXTRACT_U_1(p->nd_ra_curhoplimit),",
          "1198:                                   bittok2str(icmp6_opt_ra_flag_values,\"none\",EXTRACT_U_1(p->nd_ra_flags_reserved)),",
          "1199:                                   get_rtpref(EXTRACT_U_1(p->nd_ra_flags_reserved)),",
          "1200:                                   EXTRACT_BE_U_2(p->nd_ra_router_lifetime),",
          "1201:                                   EXTRACT_BE_U_4(p->nd_ra_reachable),",
          "1202:                                   EXTRACT_BE_U_4(p->nd_ra_retransmit)));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1223:                         ND_PRINT((ndo,\", Flags [%s]\",",
          "1224:                                   bittok2str(icmp6_nd_na_flag_values,",
          "1225:                                              \"none\",",
          "1227: #define NDADVLEN 24",
          "1228:    icmp6_opt_print(ndo, (const u_char *)dp + NDADVLEN,",
          "1229:      length - NDADVLEN);",
          "",
          "[Removed Lines]",
          "1226:                                              EXTRACT_BE_U_4(&p->nd_na_flags_reserved))));",
          "",
          "[Added Lines]",
          "1233:                                              EXTRACT_BE_U_4(p->nd_na_flags_reserved))));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1281:   break;",
          "1282:  case ICMP6_MOBILEPREFIX_ADVERT:",
          "1283:   if (ndo->ndo_vflag) {",
          "1288:     ND_PRINT((ndo,\" \"));",
          "1290:     ND_PRINT((ndo,\"M\"));",
          "1292:     ND_PRINT((ndo,\"O\"));",
          "1293: #define MPADVLEN 8",
          "1294:    icmp6_opt_print(ndo, (const u_char *)dp + MPADVLEN,",
          "",
          "[Removed Lines]",
          "1284:    ND_TCHECK(dp->icmp6_data16[0]);",
          "1285:    ND_PRINT((ndo,\", id 0x%04x\", EXTRACT_BE_U_2(&dp->icmp6_data16[0])));",
          "1286:    ND_TCHECK(dp->icmp6_data16[1]);",
          "1287:    if (dp->icmp6_data16[1] & 0xc0)",
          "1289:    if (dp->icmp6_data16[1] & 0x80)",
          "1291:    if (dp->icmp6_data16[1] & 0x40)",
          "",
          "[Added Lines]",
          "1291:    uint16_t flags;",
          "1293:    ND_TCHECK_2(dp->icmp6_data16[0]);",
          "1294:    ND_PRINT((ndo,\", id 0x%04x\", EXTRACT_BE_U_2(dp->icmp6_data16[0])));",
          "1295:    ND_TCHECK_2(dp->icmp6_data16[1]);",
          "1296:    flags = EXTRACT_BE_U_2(dp->icmp6_data16[1]);",
          "1297:    if (flags & 0xc000)",
          "1299:    if (flags & 0x8000)",
          "1301:    if (flags & 0x4000)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1297:   break;",
          "1298:         case ND_RPL_MESSAGE:",
          "1301:                 break;",
          "1302:  default:",
          "1303:                 ND_PRINT((ndo,\", length %u\", length));",
          "",
          "[Removed Lines]",
          "1300:                 rpl_print(ndo, dp, &dp->icmp6_data8[0], length-sizeof(struct icmp6_hdr)+4);",
          "",
          "[Added Lines]",
          "1310:                 rpl_print(ndo, icmp6_code, dp->icmp6_data, length-sizeof(struct icmp6_hdr)+4);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1457:    opm = (const struct nd_opt_mtu *)op;",
          "1458:    ND_TCHECK(opm->nd_opt_mtu_mtu);",
          "1459:    ND_PRINT((ndo,\" %u%s\",",
          "1461:                                (opt_len != 1) ? \"bad option length\" : \"\" ));",
          "1462:                         break;",
          "1463:   case ND_OPT_RDNSS:",
          "1464:    oprd = (const struct nd_opt_rdnss *)op;",
          "1465:    l = (opt_len - 1) / 2;",
          "1466:    ND_PRINT((ndo,\" lifetime %us,\",",
          "1468:    for (i = 0; i < l; i++) {",
          "1469:     ND_TCHECK(oprd->nd_opt_rdnss_addr[i]);",
          "1470:     ND_PRINT((ndo,\" addr: %s\",",
          "",
          "[Removed Lines]",
          "1460:                                EXTRACT_BE_U_4(&opm->nd_opt_mtu_mtu),",
          "1467:                                   EXTRACT_BE_U_4(&oprd->nd_opt_rdnss_lifetime)));",
          "",
          "[Added Lines]",
          "1470:                                EXTRACT_BE_U_4(opm->nd_opt_mtu_mtu),",
          "1477:                                   EXTRACT_BE_U_4(oprd->nd_opt_rdnss_lifetime)));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1474:   case ND_OPT_DNSSL:",
          "1475:    opds = (const struct nd_opt_dnssl *)op;",
          "1476:    ND_PRINT((ndo,\" lifetime %us, domain(s):\",",
          "1479:    while (domp < cp + (opt_len << 3) && EXTRACT_U_1(domp) != '\\0')",
          "1480:    {",
          "",
          "[Removed Lines]",
          "1477:                                   EXTRACT_BE_U_4(&opds->nd_opt_dnssl_lifetime)));",
          "",
          "[Added Lines]",
          "1487:                                   EXTRACT_BE_U_4(opds->nd_opt_dnssl_lifetime)));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1486:   case ND_OPT_ADVINTERVAL:",
          "1487:    opa = (const struct nd_opt_advinterval *)op;",
          "1488:    ND_TCHECK(opa->nd_opt_adv_interval);",
          "1490:    break;",
          "1491:                 case ND_OPT_HOMEAGENT_INFO:",
          "1492:    oph = (const struct nd_opt_homeagent_info *)op;",
          "1493:    ND_TCHECK(oph->nd_opt_hai_lifetime);",
          "1494:    ND_PRINT((ndo,\" preference %u, lifetime %u\",",
          "1497:    break;",
          "1498:   case ND_OPT_ROUTE_INFO:",
          "1499:    opri = (const struct nd_opt_route_info *)op;",
          "",
          "[Removed Lines]",
          "1489:    ND_PRINT((ndo,\" %ums\", EXTRACT_BE_U_4(&opa->nd_opt_adv_interval)));",
          "1495:                                   EXTRACT_BE_U_2(&oph->nd_opt_hai_preference),",
          "1496:                                   EXTRACT_BE_U_2(&oph->nd_opt_hai_lifetime)));",
          "",
          "[Added Lines]",
          "1499:    ND_PRINT((ndo,\" %ums\", EXTRACT_BE_U_4(opa->nd_opt_adv_interval)));",
          "1505:                                   EXTRACT_BE_U_2(oph->nd_opt_hai_preference),",
          "1506:                                   EXTRACT_BE_U_2(oph->nd_opt_hai_lifetime)));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1515:     goto trunc;",
          "1516:    }",
          "1517:    ND_PRINT((ndo,\" %s/%u\", ip6addr_string(ndo, &in6),",
          "1520:    ND_PRINT((ndo,\", lifetime=%s\",",
          "1522:    break;",
          "1523:   default:",
          "1524:                         if (ndo->ndo_vflag <= 1) {",
          "",
          "[Removed Lines]",
          "1518:                                   opri->nd_opt_rti_prefixlen));",
          "1519:    ND_PRINT((ndo,\", pref=%s\", get_rtpref(opri->nd_opt_rti_flags)));",
          "1521:                                   get_lifetime(EXTRACT_BE_U_4(&opri->nd_opt_rti_lifetime))));",
          "",
          "[Added Lines]",
          "1528:                                   EXTRACT_U_1(opri->nd_opt_rti_prefixlen)));",
          "1529:    ND_PRINT((ndo,\", pref=%s\", get_rtpref(EXTRACT_U_1(opri->nd_opt_rti_flags))));",
          "1531:                                   get_lifetime(EXTRACT_BE_U_4(opri->nd_opt_rti_lifetime))));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1554:  if ((const u_char *)mp + sizeof(*mp) > ep)",
          "1555:   return;",
          "1558:  ND_PRINT((ndo,\"addr: %s\", ip6addr_string(ndo, &mp->mld6_addr)));",
          "1559: }",
          "",
          "[Removed Lines]",
          "1557:  ND_PRINT((ndo,\"max resp delay: %d \", EXTRACT_BE_U_2(&mp->mld6_maxdelay)));",
          "",
          "[Added Lines]",
          "1567:  ND_PRINT((ndo,\"max resp delay: %d \", EXTRACT_BE_U_2(mp->mld6_maxdelay)));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1569:     if (len < 8) {",
          "1571:             return;",
          "1572:     }",
          "1574:     ND_TCHECK(icp->icmp6_data16[1]);",
          "1575:     ngroups = EXTRACT_BE_U_2(&icp->icmp6_data16[1]);",
          "1577:     if (ndo->ndo_vflag > 0) {",
          "1579:  group = 8;",
          "",
          "[Removed Lines]",
          "1570:             ND_PRINT((ndo,\" [invalid len %d]\", len));",
          "1576:     ND_PRINT((ndo,\", %d group record(s)\", ngroups));",
          "",
          "[Added Lines]",
          "1580:             ND_PRINT((ndo,\" [invalid len %u]\", len));",
          "1586:     ND_PRINT((ndo,\", %u group record(s)\", ngroups));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1585:      }",
          "1586:             ND_TCHECK_LEN(bp + 4 + group, sizeof(struct in6_addr));",
          "1587:             ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4)));",
          "1589:                                          EXTRACT_U_1(bp + group))));",
          "1593:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "1595:                     return;",
          "1596:      }",
          "1597:             if (ndo->ndo_vflag == 1)",
          "1599:             else {",
          "1601:                     ND_PRINT((ndo,\" {\"));",
          "",
          "[Removed Lines]",
          "1588:      ND_PRINT((ndo,\" %s\", tok2str(mldv2report2str, \" [v2-report-#%d]\",",
          "1590:             nsrcs = (EXTRACT_U_1(bp + group + 2) << 8) +",
          "1591:        EXTRACT_U_1(bp + group + 3);",
          "1594:                     ND_PRINT((ndo,\" [invalid number of sources %d]\", nsrcs));",
          "1598:                     ND_PRINT((ndo,\", %d source(s)\", nsrcs));",
          "",
          "[Added Lines]",
          "1598:      ND_PRINT((ndo,\" %s\", tok2str(mldv2report2str, \" [v2-report-#%u]\",",
          "1600:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "1603:                     ND_PRINT((ndo,\" [invalid number of sources %u]\", nsrcs));",
          "1607:                     ND_PRINT((ndo,\", %u source(s)\", nsrcs));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1622: {",
          "1623:     const struct icmp6_hdr *icp = (const struct icmp6_hdr *) bp;",
          "1624:     u_int mrc;",
          "1626:     u_int nsrcs;",
          "1627:     u_int i;",
          "1630:     if (len < 28) {",
          "1632:  return;",
          "1633:     }",
          "1634:     ND_TCHECK(icp->icmp6_data16[0]);",
          "",
          "[Removed Lines]",
          "1625:     int mrt, qqi;",
          "1631:             ND_PRINT((ndo,\" [invalid len %d]\", len));",
          "",
          "[Added Lines]",
          "1634:     u_int mrt, qqi;",
          "1640:         ND_PRINT((ndo,\" [invalid len %u]\", len));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1639:         mrt = ((mrc & 0x0fff) | 0x1000) << (((mrc & 0x7000) >> 12) + 3);",
          "1640:     }",
          "1641:     if (ndo->ndo_vflag) {",
          "1643:     }",
          "1644:     ND_TCHECK_LEN(bp + 8, sizeof(struct in6_addr));",
          "1645:     ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, bp + 8)));",
          "",
          "[Removed Lines]",
          "1642:             ND_PRINT((ndo,\" [max resp delay=%d]\", mrt));",
          "",
          "[Added Lines]",
          "1651:             ND_PRINT((ndo,\" [max resp delay=%u]\", mrt));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1650:   ND_PRINT((ndo,\" sflag\"));",
          "1651:  }",
          "1652:  if (EXTRACT_U_1(bp + 24) & 0x07) {",
          "1654:  }",
          "1655:  if (EXTRACT_U_1(bp + 25) < 128) {",
          "1656:   qqi = EXTRACT_U_1(bp + 25);",
          "",
          "[Removed Lines]",
          "1653:   ND_PRINT((ndo,\" robustness=%d\", EXTRACT_U_1(bp + 24) & 0x07));",
          "",
          "[Added Lines]",
          "1662:   ND_PRINT((ndo,\" robustness=%u\", EXTRACT_U_1(bp + 24) & 0x07));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1658:   qqi = ((EXTRACT_U_1(bp + 25) & 0x0f) | 0x10) <<",
          "1659:          (((EXTRACT_U_1(bp + 25) & 0x70) >> 4) + 3);",
          "1660:  }",
          "1662:     }",
          "1664:     ND_TCHECK_2(bp + 26);",
          "",
          "[Removed Lines]",
          "1661:  ND_PRINT((ndo,\" qqi=%d\", qqi));",
          "",
          "[Added Lines]",
          "1670:  ND_PRINT((ndo,\" qqi=%u\", qqi));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1675:      }",
          "1676:      ND_PRINT((ndo,\" }\"));",
          "1677:  } else",
          "1679:     }",
          "1680:     ND_PRINT((ndo,\"]\"));",
          "1681:     return;",
          "",
          "[Removed Lines]",
          "1678:                 ND_PRINT((ndo,\", %d source(s)\", nsrcs));",
          "",
          "[Added Lines]",
          "1687:                 ND_PRINT((ndo,\", %u source(s)\", nsrcs));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1736:  ni6 = (const struct icmp6_nodeinfo *)bp;",
          "1737:  siz = ep - bp;",
          "1740:  case ICMP6_NI_QUERY:",
          "1741:   if (siz == sizeof(*dp) + 4) {",
          "",
          "[Removed Lines]",
          "1739:  switch (ni6->ni_type) {",
          "",
          "[Added Lines]",
          "1748:  switch (EXTRACT_U_1(ni6->ni_type)) {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1748:   ND_TCHECK_LEN(dp, sizeof(*ni6));",
          "1749:   ni6 = (const struct icmp6_nodeinfo *)dp;",
          "1752:   case NI_QTYPE_NOOP:",
          "1753:    ND_PRINT((ndo,\"noop\"));",
          "1754:    break;",
          "1755:   case NI_QTYPE_SUPTYPES:",
          "1756:    ND_PRINT((ndo,\"supported qtypes\"));",
          "1758:    if (i)",
          "1759:     ND_PRINT((ndo,\" [%s]\", (i & 0x01) ? \"C\" : \"\"));",
          "1760:    break;",
          "",
          "[Removed Lines]",
          "1751:   switch (EXTRACT_BE_U_2(&ni6->ni_qtype)) {",
          "1757:    i = EXTRACT_BE_U_2(&ni6->ni_flags);",
          "",
          "[Added Lines]",
          "1760:   switch (EXTRACT_BE_U_2(ni6->ni_qtype)) {",
          "1766:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1763:    break;",
          "1764:   case NI_QTYPE_NODEADDR:",
          "1765:    ND_PRINT((ndo,\"node addresses\"));",
          "1767:    if (!i)",
          "1768:     break;",
          "",
          "[Removed Lines]",
          "1766:    i = ni6->ni_flags;",
          "",
          "[Added Lines]",
          "1775:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1780:    break;",
          "1781:   }",
          "1785:    if (siz != sizeof(*ni6))",
          "1786:     if (ndo->ndo_vflag)",
          "1787:      ND_PRINT((ndo,\", invalid len\"));",
          "",
          "[Removed Lines]",
          "1783:   if (ni6->ni_qtype == NI_QTYPE_NOOP ||",
          "1784:       ni6->ni_qtype == NI_QTYPE_SUPTYPES) {",
          "",
          "[Added Lines]",
          "1792:   if (EXTRACT_BE_U_2(ni6->ni_qtype) == NI_QTYPE_NOOP ||",
          "1793:       EXTRACT_BE_U_2(ni6->ni_qtype) == NI_QTYPE_SUPTYPES) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1799:    break;",
          "1800:   }",
          "1803:   case ICMP6_NI_SUBJ_IPV6:",
          "1804:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in6_addr)))",
          "1805:     break;",
          "",
          "[Removed Lines]",
          "1802:   switch (ni6->ni_code) {",
          "",
          "[Added Lines]",
          "1811:   switch (EXTRACT_U_1(ni6->ni_code)) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1860:   ni6 = (const struct icmp6_nodeinfo *)dp;",
          "1861:   ND_PRINT((ndo,\" node information reply\"));",
          "1864:   case ICMP6_NI_SUCCESS:",
          "1865:    if (ndo->ndo_vflag) {",
          "1866:     ND_PRINT((ndo,\"success\"));",
          "",
          "[Removed Lines]",
          "1863:   switch (ni6->ni_code) {",
          "",
          "[Added Lines]",
          "1872:   switch (EXTRACT_U_1(ni6->ni_code)) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1883:    break;",
          "1884:   }",
          "1888:    ND_PRINT((ndo,\")\"));",
          "1889:    break;",
          "1890:   }",
          "1893:   case NI_QTYPE_NOOP:",
          "1894:    if (needcomma)",
          "1895:     ND_PRINT((ndo,\", \"));",
          "",
          "[Removed Lines]",
          "1886:   if (ni6->ni_code != ICMP6_NI_SUCCESS) {",
          "1892:   switch (EXTRACT_BE_U_2(&ni6->ni_qtype)) {",
          "",
          "[Added Lines]",
          "1895:   if (EXTRACT_U_1(ni6->ni_code) != ICMP6_NI_SUCCESS) {",
          "1901:   switch (EXTRACT_BE_U_2(ni6->ni_qtype)) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1902:    if (needcomma)",
          "1903:     ND_PRINT((ndo,\", \"));",
          "1904:    ND_PRINT((ndo,\"supported qtypes\"));",
          "1906:    if (i)",
          "1907:     ND_PRINT((ndo,\" [%s]\", (i & 0x01) ? \"C\" : \"\"));",
          "1908:    break;",
          "",
          "[Removed Lines]",
          "1905:    i = EXTRACT_BE_U_2(&ni6->ni_flags);",
          "",
          "[Added Lines]",
          "1914:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1925:     ND_PRINT((ndo,\"\\\"\"));",
          "1926:    } else",
          "1927:     dnsname_print(ndo, cp, ep);",
          "1929:     ND_PRINT((ndo,\" [TTL=%u]\", EXTRACT_BE_U_4(ni6 + 1)));",
          "1930:    break;",
          "1931:   case NI_QTYPE_NODEADDR:",
          "",
          "[Removed Lines]",
          "1928:    if ((EXTRACT_BE_U_2(&ni6->ni_flags) & 0x01) != 0)",
          "",
          "[Added Lines]",
          "1937:    if ((EXTRACT_BE_U_2(ni6->ni_flags) & 0x01) != 0)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1934:    ND_PRINT((ndo,\"node addresses\"));",
          "1935:    i = sizeof(*ni6);",
          "1936:    while (i < siz) {",
          "1938:      break;",
          "1943:    }",
          "1945:    if (!i)",
          "1946:     break;",
          "1947:    ND_PRINT((ndo,\" [%s%s%s%s%s%s%s]\",",
          "",
          "[Removed Lines]",
          "1937:     if (i + sizeof(struct in6_addr) + sizeof(int32_t) > siz)",
          "1939:     ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, bp + i)));",
          "1940:     i += sizeof(struct in6_addr);",
          "1941:     ND_PRINT((ndo,\"(%d)\", (int32_t) EXTRACT_BE_U_4(bp + i)));",
          "1942:     i += sizeof(int32_t);",
          "1944:    i = ni6->ni_flags;",
          "",
          "[Added Lines]",
          "1946:     if (i + sizeof(uint32_t) + sizeof(struct in6_addr) > siz)",
          "1948:     ND_PRINT((ndo,\" %s(%u)\",",
          "1949:         ip6addr_string(ndo, bp + i + sizeof(uint32_t)),",
          "1950:         EXTRACT_BE_U_4(bp + i)));",
          "1951:     i += sizeof(uint32_t) + sizeof(struct in6_addr);",
          "1953:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1986:  cp = (const char *)(rr6 + 1);",
          "1988:  ND_TCHECK(rr6->rr_reserved);",
          "1990:  case ICMP6_ROUTER_RENUMBERING_COMMAND:",
          "1991:   ND_PRINT((ndo,\"router renum: command\"));",
          "1992:   break;",
          "",
          "[Removed Lines]",
          "1989:  switch (rr6->rr_code) {",
          "",
          "[Added Lines]",
          "1998:  switch (EXTRACT_U_1(rr6->rr_code)) {",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1997:   ND_PRINT((ndo,\"router renum: sequence number reset\"));",
          "1998:   break;",
          "1999:  default:",
          "2001:   break;",
          "2002:  }",
          "2006:  if (ndo->ndo_vflag) {",
          "2010:    ND_PRINT((ndo,\"%s%s%s%s%s,\", F(ICMP6_RR_FLAGS_TEST, \"T\"),",
          "2011:                                   F(ICMP6_RR_FLAGS_REQRESULT, \"R\"),",
          "2012:                                   F(ICMP6_RR_FLAGS_FORCEAPPLY, \"A\"),",
          "2013:                                   F(ICMP6_RR_FLAGS_SPECSITE, \"S\"),",
          "2014:                                   F(ICMP6_RR_FLAGS_PREVDONE, \"P\")));",
          "2015:   }",
          "2021:   ND_PRINT((ndo,\"]\"));",
          "2022: #undef F",
          "2023:  }",
          "2026:   match = (const struct rr_pco_match *)cp;",
          "2027:   cp = (const char *)(match + 1);",
          "",
          "[Removed Lines]",
          "2000:   ND_PRINT((ndo,\"router renum: code-#%d\", rr6->rr_code));",
          "2004:         ND_PRINT((ndo,\", seq=%u\", EXTRACT_BE_U_4(&rr6->rr_seqnum)));",
          "2007: #define F(x, y) ((rr6->rr_flags) & (x) ? (y) : \"\")",
          "2009:   if (rr6->rr_flags) {",
          "2016:                 ND_PRINT((ndo,\"seg=%u,\", rr6->rr_segnum));",
          "2017:                 ND_PRINT((ndo,\"maxdelay=%u\", EXTRACT_BE_U_2(&rr6->rr_maxdelay)));",
          "2018:   if (rr6->rr_reserved)",
          "2019:    ND_PRINT((ndo,\"rsvd=0x%x\", EXTRACT_BE_U_4(&rr6->rr_reserved)));",
          "2025:  if (rr6->rr_code == ICMP6_ROUTER_RENUMBERING_COMMAND) {",
          "",
          "[Added Lines]",
          "2009:   ND_PRINT((ndo,\"router renum: code-#%u\", EXTRACT_U_1(rr6->rr_code)));",
          "2013:         ND_PRINT((ndo,\", seq=%u\", EXTRACT_BE_U_4(rr6->rr_seqnum)));",
          "2016:   uint8_t rr_flags = EXTRACT_U_1(rr6->rr_flags);",
          "2017: #define F(x, y) (rr_flags & (x) ? (y) : \"\")",
          "2019:   if (rr_flags) {",
          "2026:                 ND_PRINT((ndo,\"seg=%u,\", EXTRACT_U_1(rr6->rr_segnum)));",
          "2027:                 ND_PRINT((ndo,\"maxdelay=%u\", EXTRACT_BE_U_2(rr6->rr_maxdelay)));",
          "2028:   if (EXTRACT_BE_U_4(rr6->rr_reserved))",
          "2029:    ND_PRINT((ndo,\"rsvd=0x%x\", EXTRACT_BE_U_4(rr6->rr_reserved)));",
          "2035:  if (EXTRACT_U_1(rr6->rr_code) == ICMP6_ROUTER_RENUMBERING_COMMAND) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2033:   else",
          "2034:    ND_PRINT((ndo,\" \"));",
          "2037:   case RPM_PCO_ADD: ND_PRINT((ndo,\"add\")); break;",
          "2038:   case RPM_PCO_CHANGE: ND_PRINT((ndo,\"change\")); break;",
          "2039:   case RPM_PCO_SETGLOBAL: ND_PRINT((ndo,\"setglobal\")); break;",
          "2041:   }",
          "2043:   if (ndo->ndo_vflag) {",
          "2047:   }",
          "2048:   if (addrtostr6(&match->rpm_prefix, hbuf, sizeof(hbuf)))",
          "2050:   else",
          "2053:   ND_PRINT((ndo,\")\"));",
          "2056:   if (n % 4)",
          "2057:    goto trunc;",
          "2058:   n /= 4;",
          "",
          "[Removed Lines]",
          "2036:   switch (match->rpm_code) {",
          "2040:   default:  ND_PRINT((ndo,\"#%u\", match->rpm_code)); break;",
          "2044:    ND_PRINT((ndo,\",ord=%u\", match->rpm_ordinal));",
          "2045:    ND_PRINT((ndo,\",min=%u\", match->rpm_minlen));",
          "2046:    ND_PRINT((ndo,\",max=%u\", match->rpm_maxlen));",
          "2049:    ND_PRINT((ndo,\",%s/%u\", hbuf, match->rpm_matchlen));",
          "2051:    ND_PRINT((ndo,\",?/%u\", match->rpm_matchlen));",
          "2055:   n = match->rpm_len - 3;",
          "",
          "[Added Lines]",
          "2046:   switch (EXTRACT_U_1(match->rpm_code)) {",
          "2050:   default:  ND_PRINT((ndo,\"#%u\", EXTRACT_U_1(match->rpm_code))); break;",
          "2054:    ND_PRINT((ndo,\",ord=%u\", EXTRACT_U_1(match->rpm_ordinal)));",
          "2055:    ND_PRINT((ndo,\",min=%u\", EXTRACT_U_1(match->rpm_minlen)));",
          "2056:    ND_PRINT((ndo,\",max=%u\", EXTRACT_U_1(match->rpm_maxlen)));",
          "2059:    ND_PRINT((ndo,\",%s/%u\", hbuf, EXTRACT_U_1(match->rpm_matchlen)));",
          "2061:    ND_PRINT((ndo,\",?/%u\", EXTRACT_U_1(match->rpm_matchlen)));",
          "2065:   n = EXTRACT_U_1(match->rpm_len) - 3;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2067:    else",
          "2068:     ND_PRINT((ndo,\" \"));",
          "2072:     ND_PRINT((ndo,\"%s%s,\",",
          "2073:                                           F(ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME, \"V\"),",
          "2074:                                           F(ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME, \"P\")));",
          "2075: #undef F",
          "2076:    }",
          "2077:    if (ndo->ndo_vflag) {",
          "2081:      ND_PRINT((ndo,\"vltime=infty,\"));",
          "2082:     else",
          "2083:      ND_PRINT((ndo,\"vltime=%u,\",",
          "2086:      ND_PRINT((ndo,\"pltime=infty,\"));",
          "2087:     else",
          "2088:      ND_PRINT((ndo,\"pltime=%u,\",",
          "2090:    }",
          "2091:    if (addrtostr6(&use->rpu_prefix, hbuf, sizeof(hbuf)))",
          "2094:    else",
          "2098:                         ND_PRINT((ndo,\")\"));",
          "2099:   }",
          "",
          "[Removed Lines]",
          "2070:    if (use->rpu_flags) {",
          "2071: #define F(x, y) ((use->rpu_flags) & (x) ? (y) : \"\")",
          "2078:     ND_PRINT((ndo,\"mask=0x%x,\", use->rpu_ramask));",
          "2079:     ND_PRINT((ndo,\"raflags=0x%x,\", use->rpu_raflags));",
          "2080:     if (~use->rpu_vltime == 0)",
          "2084:                                                   EXTRACT_BE_U_4(&use->rpu_vltime)));",
          "2085:     if (~use->rpu_pltime == 0)",
          "2089:                                                   EXTRACT_BE_U_4(&use->rpu_pltime)));",
          "2092:     ND_PRINT((ndo,\"%s/%u/%u\", hbuf, use->rpu_uselen,",
          "2093:                                           use->rpu_keeplen));",
          "2095:     ND_PRINT((ndo,\"?/%u/%u\", use->rpu_uselen,",
          "2096:                                           use->rpu_keeplen));",
          "",
          "[Added Lines]",
          "2080:    if (EXTRACT_U_1(use->rpu_flags)) {",
          "2081: #define F(x, y) (EXTRACT_U_1(use->rpu_flags) & (x) ? (y) : \"\")",
          "2088:     ND_PRINT((ndo,\"mask=0x%x,\", EXTRACT_U_1(use->rpu_ramask)));",
          "2089:     ND_PRINT((ndo,\"raflags=0x%x,\", EXTRACT_U_1(use->rpu_raflags)));",
          "2090:     if (EXTRACT_BE_U_4(use->rpu_vltime) == 0xffffffff)",
          "2094:                                                   EXTRACT_BE_U_4(use->rpu_vltime)));",
          "2095:     if (EXTRACT_BE_U_4(use->rpu_pltime) == 0xffffffff)",
          "2099:                                                   EXTRACT_BE_U_4(use->rpu_pltime)));",
          "2102:     ND_PRINT((ndo,\"%s/%u/%u\", hbuf, EXTRACT_U_1(use->rpu_uselen),",
          "2103:                                           EXTRACT_U_1(use->rpu_keeplen)));",
          "2105:     ND_PRINT((ndo,\"?/%u/%u\", EXTRACT_U_1(use->rpu_uselen),",
          "2106:                                           EXTRACT_U_1(use->rpu_keeplen)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}