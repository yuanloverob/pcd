{
  "cve_id": "CVE-2023-1654",
  "cve_desc": "Denial of Service in GitHub repository gpac/gpac prior to 2.4.0.",
  "repo": "gpac/gpac",
  "patch_hash": "2c055153d401b8c49422971e3a0159869652d3da",
  "patch_info": {
    "commit_hash": "2c055153d401b8c49422971e3a0159869652d3da",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/2c055153d401b8c49422971e3a0159869652d3da",
    "files": [
      "src/filter_core/filter_pid.c"
    ],
    "message": "fixed #2429",
    "before_after_code_files": [
      "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
    ]
  },
  "patch_diff": {
    "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c": [
      "File: src/filter_core/filter_pid.c -> src/filter_core/filter_pid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  gf_list_del(pidinst->pck_reassembly);",
      "63:  if (pidinst->props) {",
      "64:   assert(pidinst->props->reference_count);",
      "71:   }",
      "72:  }",
      "73:  gf_free(pidinst);",
      "74: }",
      "",
      "[Removed Lines]",
      "65:   if (safe_int_dec(&pidinst->props->reference_count) == 0) {",
      "67:    gf_mx_p(pidinst->pid->filter->tasks_mx);",
      "68:    gf_list_del_item(pidinst->pid->properties, pidinst->props);",
      "69:    gf_mx_v(pidinst->pid->filter->tasks_mx);",
      "70:    gf_props_del(pidinst->props);",
      "",
      "[Added Lines]",
      "65:   gf_mx_p(pidinst->pid->filter->tasks_mx);",
      "68:   if (gf_list_find(pidinst->pid->properties, pidinst->props)>=0) {",
      "69:    if (safe_int_dec(&pidinst->props->reference_count) == 0) {",
      "71:     gf_list_del_item(pidinst->pid->properties, pidinst->props);",
      "72:     gf_props_del(pidinst->props);",
      "73:    }",
      "75:   gf_mx_v(pidinst->pid->filter->tasks_mx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1044:       if (!target->detached_pid_inst) {",
      "1045:        target->detached_pid_inst = gf_list_new();",
      "1046:       }",
      "1048:       if (filter->swap_pidinst_dst->props) {",
      "1049:        filter->swap_pidinst_dst->props = NULL;",
      "1050:       }",
      "1051:       filter->swap_pidinst_dst->pid = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1053:        GF_FilterPidInst *swap_pidi = filter->swap_pidinst_dst;",
      "1054:        if (safe_int_dec(&swap_pidi->props->reference_count)==0) {",
      "1055:         gf_mx_p(swap_pidi->pid->filter->tasks_mx);",
      "1056:         gf_list_del_item(swap_pidi->pid->properties, pidinst->props);",
      "1057:         gf_mx_v(swap_pidi->pid->filter->tasks_mx);",
      "1058:         gf_props_del(pidinst->props);",
      "1059:        }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eca3eb6f569475e1b89dd73b9d0c883baf06dc77",
      "candidate_info": {
        "commit_hash": "eca3eb6f569475e1b89dd73b9d0c883baf06dc77",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/eca3eb6f569475e1b89dd73b9d0c883baf06dc77",
        "files": [
          "src/filter_core/filter_pid.c",
          "src/filters/ff_enc.c",
          "src/filters/reframe_nalu.c"
        ],
        "message": "fixed potential fps signaling bug in nalu reframer",
        "before_after_code_files": [
          "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c",
          "src/filters/ff_enc.c||src/filters/ff_enc.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
          ],
          "candidate": [
            "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c": [
          "File: src/filter_core/filter_pid.c -> src/filter_core/filter_pid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956:    gf_filter_pid_inst_del(pidinst);",
          "957:    gf_mx_v(pid->filter->tasks_mx);",
          "958:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:    pidinst = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1073:       if (filter->swap_pidinst_dst->props) {",
          "1074:        GF_FilterPidInst *swap_pidi = filter->swap_pidinst_dst;",
          "1075:        if (safe_int_dec(&swap_pidi->props->reference_count)==0) {",
          "1080:        }",
          "1081:        filter->swap_pidinst_dst->props = NULL;",
          "1082:       }",
          "",
          "[Removed Lines]",
          "1076:         gf_mx_p(swap_pidi->pid->filter->tasks_mx);",
          "1077:         gf_list_del_item(swap_pidi->pid->properties, pidinst->props);",
          "1078:         gf_mx_v(swap_pidi->pid->filter->tasks_mx);",
          "1079:         gf_props_del(pidinst->props);",
          "",
          "[Added Lines]",
          "1077:         if (pidinst) {",
          "1078:          gf_mx_p(swap_pidi->pid->filter->tasks_mx);",
          "1079:          gf_list_del_item(swap_pidi->pid->properties, pidinst->props);",
          "1080:          gf_mx_v(swap_pidi->pid->filter->tasks_mx);",
          "1081:          gf_props_del(pidinst->props);",
          "1082:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:  if (ctype==GF_PID_CONF_REMOVE) {",
          "1128:   gf_mx_p(filter->tasks_mx);",
          "1130:   filter->num_input_pids = gf_list_count(filter->input_pids);",
          "1131:   if (!filter->num_input_pids)",
          "1132:    filter->single_source = NULL;",
          "",
          "[Removed Lines]",
          "1129:   gf_list_del_item(filter->input_pids, pidinst);",
          "",
          "[Added Lines]",
          "1132:   if (pidinst)",
          "1133:    gf_list_del_item(filter->input_pids, pidinst);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1149:   if (!filter->num_input_pids && !filter->sticky) {",
          "",
          "[Removed Lines]",
          "1141:   gf_mx_p(pidinst->pid->filter->tasks_mx);",
          "1142:   pidinst->pid->num_pidinst_del_pending ++;",
          "1143:   gf_list_del_item(pidinst->pid->destinations, pidinst);",
          "1144:   pidinst->pid->num_destinations = gf_list_count(pidinst->pid->destinations);",
          "1145:   gf_filter_instance_detach_pid(pidinst);",
          "1146:   gf_mx_v(pidinst->pid->filter->tasks_mx);",
          "",
          "[Added Lines]",
          "1145:   if (pidinst) {",
          "1146:    gf_mx_p(pidinst->pid->filter->tasks_mx);",
          "1147:    pidinst->pid->num_pidinst_del_pending ++;",
          "1148:    gf_list_del_item(pidinst->pid->destinations, pidinst);",
          "1149:    pidinst->pid->num_destinations = gf_list_count(pidinst->pid->destinations);",
          "1150:    gf_filter_instance_detach_pid(pidinst);",
          "1151:    gf_mx_v(pidinst->pid->filter->tasks_mx);",
          "1152:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1151:    filter->removed = 1;",
          "1152:   }",
          "1156:   return e;",
          "1157:  }",
          "",
          "[Removed Lines]",
          "1154:   gf_fs_post_task(filter->session, gf_filter_pid_inst_delete_task, pid->filter, pid, \"pid_inst_delete\", pidinst);",
          "",
          "[Added Lines]",
          "1160:   if (pidinst)",
          "1161:    gf_fs_post_task(filter->session, gf_filter_pid_inst_delete_task, pid->filter, pid, \"pid_inst_delete\", pidinst);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1166:     GF_FilterEvent evt;",
          "1167:     if (pidinst->is_playing) {",
          "1168:      pidinst->is_playing = GF_FALSE;",
          "",
          "[Removed Lines]",
          "1165:    if (refire_events) {",
          "",
          "[Added Lines]",
          "1172:    if (refire_events && pidinst) {",
          "",
          "---------------"
        ],
        "src/filters/ff_enc.c||src/filters/ff_enc.c": [
          "File: src/filters/ff_enc.c -> src/filters/ff_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1755:   ctx->timescale = ctx->encoder->time_base.den = prop ? prop->value.uint : 1000;",
          "1757:   prop = gf_filter_pid_get_property(pid, GF_PROP_PID_FPS);",
          "1759:    Bool reset_gop = GF_FALSE;",
          "1761:    if (codec_id==AV_CODEC_ID_FFV1) reset_gop = GF_TRUE;",
          "",
          "[Removed Lines]",
          "1758:   if (prop) {",
          "",
          "[Added Lines]",
          "1758:   if (prop && prop->value.frac.den) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1864:   ctx->encoder->pix_fmt = ctx->pixel_fmt;",
          "1865:   ctx->init_cts_setup = GF_TRUE;",
          "1866:   ctx->frame->format = ctx->encoder->pix_fmt;",
          "1867:  } else if (type==GF_STREAM_AUDIO) {",
          "1868:   ctx->encoder->sample_rate = ctx->sample_rate;",
          "1869:   ctx->encoder->channels = ctx->channels;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1868:   if (ctx->codecid==GF_CODECID_AV1)",
          "1869:    av_dict_set(&ctx->options, \"strict\", \"experimental\", 0);",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2984:        ctx->prev_cts -= 3000;",
          "2985:        ctx->prev_cts += diff;",
          "2986:       }",
          "2988:       ctx->cur_fps.den = (u32) diff;",
          "2990:      ctx->prev_dts = ts;",
          "2991:     }",
          "",
          "[Removed Lines]",
          "2987:      } else if (ctx->cur_fps.den > diff)",
          "",
          "[Added Lines]",
          "2987:       if (!gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_FPS))",
          "2988:        gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_FPS, & PROP_FRAC(ctx->cur_fps));",
          "2989:      } else if (ctx->cur_fps.den > diff) {",
          "2991:       if (!gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_FPS))",
          "2992:        gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_FPS, & PROP_FRAC(ctx->cur_fps));",
          "2993:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dad447d37226a5adcbb1c2f2e3f47d6321c8cbe",
      "candidate_info": {
        "commit_hash": "2dad447d37226a5adcbb1c2f2e3f47d6321c8cbe",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/2dad447d37226a5adcbb1c2f2e3f47d6321c8cbe",
        "files": [
          "src/filter_core/filter_pid.c"
        ],
        "message": "fixed #2429",
        "before_after_code_files": [
          "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
          ],
          "candidate": [
            "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c": [
          "File: src/filter_core/filter_pid.c -> src/filter_core/filter_pid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  gf_list_del(pidinst->pck_reassembly);",
          "63:  if (pidinst->props) {",
          "64:   assert(pidinst->props->reference_count);",
          "71:   }",
          "72:  }",
          "73:  gf_free(pidinst);",
          "74: }",
          "",
          "[Removed Lines]",
          "65:   if (safe_int_dec(&pidinst->props->reference_count) == 0) {",
          "67:    gf_mx_p(pidinst->pid->filter->tasks_mx);",
          "68:    gf_list_del_item(pidinst->pid->properties, pidinst->props);",
          "69:    gf_mx_v(pidinst->pid->filter->tasks_mx);",
          "70:    gf_props_del(pidinst->props);",
          "",
          "[Added Lines]",
          "65:   gf_mx_p(pidinst->pid->filter->tasks_mx);",
          "68:   if (gf_list_find(pidinst->pid->properties, pidinst->props)>=0) {",
          "69:    if (safe_int_dec(&pidinst->props->reference_count) == 0) {",
          "71:     gf_list_del_item(pidinst->pid->properties, pidinst->props);",
          "72:     gf_props_del(pidinst->props);",
          "73:    }",
          "75:   gf_mx_v(pidinst->pid->filter->tasks_mx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1025:       if (!target->detached_pid_inst) {",
          "1026:        target->detached_pid_inst = gf_list_new();",
          "1027:       }",
          "1029:       if (filter->swap_pidinst_dst->props) {",
          "1030:        filter->swap_pidinst_dst->props = NULL;",
          "1031:       }",
          "1032:       filter->swap_pidinst_dst->pid = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:        GF_FilterPidInst *swap_pidi = filter->swap_pidinst_dst;",
          "1035:        if (safe_int_dec(&swap_pidi->props->reference_count)==0) {",
          "1036:         gf_mx_p(swap_pidi->pid->filter->tasks_mx);",
          "1037:         gf_list_del_item(swap_pidi->pid->properties, pidinst->props);",
          "1038:         gf_mx_v(swap_pidi->pid->filter->tasks_mx);",
          "1039:         gf_props_del(pidinst->props);",
          "1040:        }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1276:  if (!pidinst) {",
          "1277:   GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Trying to detach PID %s not present in filter %s inputs\\n\",  pid->name, filter->name));",
          "1279:   assert(!new_chain_input->swap_pidinst_src);",
          "1280:   new_chain_input->swap_needs_init = GF_FALSE;",
          "1281:   return;",
          "",
          "[Removed Lines]",
          "1278:   assert(!new_chain_input->swap_pidinst_dst);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}