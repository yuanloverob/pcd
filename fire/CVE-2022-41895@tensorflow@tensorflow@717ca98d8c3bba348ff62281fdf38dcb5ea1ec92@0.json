{
  "cve_id": "CVE-2022-41895",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `MirrorPadGrad` is given outsize input `paddings`, TensorFlow will give a heap OOB error. We have patched the issue in GitHub commit 717ca98d8c3bba348ff62281fdf38dcb5ea1ec92. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "717ca98d8c3bba348ff62281fdf38dcb5ea1ec92",
  "patch_info": {
    "commit_hash": "717ca98d8c3bba348ff62281fdf38dcb5ea1ec92",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/717ca98d8c3bba348ff62281fdf38dcb5ea1ec92",
    "files": [
      "tensorflow/core/kernels/image/mirror_pad_op.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ],
    "message": "Adding missing requirement on inputs for MirrorPadGrad op and updating arithmetic to account for int32 padding values.\n\nPiperOrigin-RevId: 480691952",
    "before_after_code_files": [
      "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc": [
      "File: tensorflow/core/kernels/image/mirror_pad_op.cc -> tensorflow/core/kernels/image/mirror_pad_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "297:     TensorShape output_shape;",
      "298:     typename TTypes<Tpaddings>::ConstMatrix paddings = in1.matrix<Tpaddings>();",
      "299:     for (int d = 0; d < dims; ++d) {",
      "302:       OP_REQUIRES(context, before >= 0 && after >= 0,",
      "303:                   errors::InvalidArgument(",
      "304:                       \"Paddings must be non-negative: \", before, \", \", after));",
      "307:       if (offset_ == 0) {  // SYMMETRIC mode.",
      "308:         OP_REQUIRES(context, before <= out_size && after <= out_size,",
      "309:                     errors::InvalidArgument(\"paddings must be no greater \"",
      "",
      "[Removed Lines]",
      "300:       const Tpaddings before = paddings(d, 0);  // Pad before existing elements.",
      "301:       const Tpaddings after = paddings(d, 1);   // Pad after existing elements.",
      "306:       const int64_t out_size = in0.dim_size(d) - (before + after);",
      "",
      "[Added Lines]",
      "300:       const int64_t before = paddings(d, 0);  // Pad before existing elements.",
      "301:       const int64_t after = paddings(d, 1);   // Pad after existing elements.",
      "306:       const int64_t in_size = in0.dim_size(d);",
      "307:       const int64_t total_padding = before + after;",
      "308:       OP_REQUIRES(",
      "309:           context, total_padding < in_size && total_padding >= 0,",
      "310:           errors::InvalidArgument(",
      "311:               \"Total paddings must be less than the input dimension size: \",",
      "312:               total_padding, \" was not less than \", in_size));",
      "314:       const int64_t out_size = in_size - total_padding;",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1617:                           [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 3, 0, 0],",
      "1618:                            [0, 0, 4, 5, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
      "1620:   def testSymmetricMirrorPadGrad(self):",
      "1621:     t = np.broadcast_to(np.arange(0, 7), (3, 2, 1, 7))",
      "1622:     paddings = constant_op.constant([",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1620:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
      "1621:   def testInvalidMirrorPadGradEagerMode(self):",
      "1622:     with context.eager_mode():",
      "1623:       with self.assertRaises(Exception):",
      "1624:         gen_array_ops.MirrorPadGrad(",
      "1625:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
      "1627:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
      "1628:   def testInvalidMirrorPadGradGraphMode(self):",
      "1629:     with context.graph_mode():",
      "1630:       with self.assertRaises(Exception):",
      "1631:         result = gen_array_ops.MirrorPadGrad(",
      "1632:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
      "1633:         self.evaluate(result)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3727bc7ddd244295fb49ac752427d8234a5815db",
      "candidate_info": {
        "commit_hash": "3727bc7ddd244295fb49ac752427d8234a5815db",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3727bc7ddd244295fb49ac752427d8234a5815db",
        "files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ],
        "message": "Adding missing requirement on inputs for MirrorPadGrad op and updating arithmetic to account for int32 padding values.\n\nPiperOrigin-RevId: 480691952",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc": [
          "File: tensorflow/core/kernels/image/mirror_pad_op.cc -> tensorflow/core/kernels/image/mirror_pad_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:     TensorShape output_shape;",
          "298:     typename TTypes<Tpaddings>::ConstMatrix paddings = in1.matrix<Tpaddings>();",
          "299:     for (int d = 0; d < dims; ++d) {",
          "302:       OP_REQUIRES(context, before >= 0 && after >= 0,",
          "303:                   errors::InvalidArgument(",
          "304:                       \"Paddings must be non-negative: \", before, \", \", after));",
          "307:       if (offset_ == 0) {  // SYMMETRIC mode.",
          "308:         OP_REQUIRES(context, before <= out_size && after <= out_size,",
          "309:                     errors::InvalidArgument(\"paddings must be no greater \"",
          "",
          "[Removed Lines]",
          "300:       const Tpaddings before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const Tpaddings after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t out_size = in0.dim_size(d) - (before + after);",
          "",
          "[Added Lines]",
          "300:       const int64_t before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const int64_t after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t in_size = in0.dim_size(d);",
          "307:       const int64_t total_padding = before + after;",
          "308:       OP_REQUIRES(",
          "309:           context, total_padding < in_size && total_padding >= 0,",
          "310:           errors::InvalidArgument(",
          "311:               \"Total paddings must be less than the input dimension size: \",",
          "312:               total_padding, \" was not less than \", in_size));",
          "314:       const int64_t out_size = in_size - total_padding;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1553:                           [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 3, 0, 0],",
          "1554:                            [0, 0, 4, 5, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
          "1556:   def testSymmetricMirrorPadGrad(self):",
          "1557:     t = np.broadcast_to(np.arange(0, 7), (3, 2, 1, 7))",
          "1558:     paddings = constant_op.constant([",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1556:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1557:   def testInvalidMirrorPadGradEagerMode(self):",
          "1558:     with context.eager_mode():",
          "1559:       with self.assertRaises(Exception):",
          "1560:         gen_array_ops.MirrorPadGrad(",
          "1561:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1563:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1564:   def testInvalidMirrorPadGradGraphMode(self):",
          "1565:     with context.graph_mode():",
          "1566:       with self.assertRaises(Exception):",
          "1567:         result = gen_array_ops.MirrorPadGrad(",
          "1568:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1569:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd92bee13c9409112b9719b65138d1757345244a",
      "candidate_info": {
        "commit_hash": "fd92bee13c9409112b9719b65138d1757345244a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/fd92bee13c9409112b9719b65138d1757345244a",
        "files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ],
        "message": "Adding missing requirement on inputs for MirrorPadGrad op and updating arithmetic to account for int32 padding values.\n\nPiperOrigin-RevId: 480691952",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc": [
          "File: tensorflow/core/kernels/image/mirror_pad_op.cc -> tensorflow/core/kernels/image/mirror_pad_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:     TensorShape output_shape;",
          "298:     typename TTypes<Tpaddings>::ConstMatrix paddings = in1.matrix<Tpaddings>();",
          "299:     for (int d = 0; d < dims; ++d) {",
          "302:       OP_REQUIRES(context, before >= 0 && after >= 0,",
          "303:                   errors::InvalidArgument(",
          "304:                       \"Paddings must be non-negative: \", before, \", \", after));",
          "307:       if (offset_ == 0) {  // SYMMETRIC mode.",
          "308:         OP_REQUIRES(context, before <= out_size && after <= out_size,",
          "309:                     errors::InvalidArgument(\"paddings must be no greater \"",
          "",
          "[Removed Lines]",
          "300:       const Tpaddings before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const Tpaddings after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t out_size = in0.dim_size(d) - (before + after);",
          "",
          "[Added Lines]",
          "300:       const int64_t before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const int64_t after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t in_size = in0.dim_size(d);",
          "307:       const int64_t total_padding = before + after;",
          "308:       OP_REQUIRES(",
          "309:           context, total_padding < in_size && total_padding >= 0,",
          "310:           errors::InvalidArgument(",
          "311:               \"Total paddings must be less than the input dimension size: \",",
          "312:               total_padding, \" was not less than \", in_size));",
          "314:       const int64_t out_size = in_size - total_padding;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1617:                           [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 3, 0, 0],",
          "1618:                            [0, 0, 4, 5, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
          "1620:   def testSymmetricMirrorPadGrad(self):",
          "1621:     t = np.broadcast_to(np.arange(0, 7), (3, 2, 1, 7))",
          "1622:     paddings = constant_op.constant([",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1620:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1621:   def testInvalidMirrorPadGradEagerMode(self):",
          "1622:     with context.eager_mode():",
          "1623:       with self.assertRaises(Exception):",
          "1624:         gen_array_ops.MirrorPadGrad(",
          "1625:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1627:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1628:   def testInvalidMirrorPadGradGraphMode(self):",
          "1629:     with context.graph_mode():",
          "1630:       with self.assertRaises(Exception):",
          "1631:         result = gen_array_ops.MirrorPadGrad(",
          "1632:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1633:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7d1756c872b04584a7ebafa072e586764ceadc1",
      "candidate_info": {
        "commit_hash": "f7d1756c872b04584a7ebafa072e586764ceadc1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f7d1756c872b04584a7ebafa072e586764ceadc1",
        "files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ],
        "message": "Adding missing requirement on inputs for MirrorPadGrad op and updating arithmetic to account for int32 padding values.\n\nPiperOrigin-RevId: 480691952",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
          "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc",
            "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/mirror_pad_op.cc||tensorflow/core/kernels/image/mirror_pad_op.cc": [
          "File: tensorflow/core/kernels/image/mirror_pad_op.cc -> tensorflow/core/kernels/image/mirror_pad_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:     TensorShape output_shape;",
          "298:     typename TTypes<Tpaddings>::ConstMatrix paddings = in1.matrix<Tpaddings>();",
          "299:     for (int d = 0; d < dims; ++d) {",
          "302:       OP_REQUIRES(context, before >= 0 && after >= 0,",
          "303:                   errors::InvalidArgument(",
          "304:                       \"Paddings must be non-negative: \", before, \", \", after));",
          "307:       if (offset_ == 0) {  // SYMMETRIC mode.",
          "308:         OP_REQUIRES(context, before <= out_size && after <= out_size,",
          "309:                     errors::InvalidArgument(\"paddings must be no greater \"",
          "",
          "[Removed Lines]",
          "300:       const Tpaddings before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const Tpaddings after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t out_size = in0.dim_size(d) - (before + after);",
          "",
          "[Added Lines]",
          "300:       const int64_t before = paddings(d, 0);  // Pad before existing elements.",
          "301:       const int64_t after = paddings(d, 1);   // Pad after existing elements.",
          "306:       const int64_t in_size = in0.dim_size(d);",
          "307:       const int64_t total_padding = before + after;",
          "308:       OP_REQUIRES(",
          "309:           context, total_padding < in_size && total_padding >= 0,",
          "310:           errors::InvalidArgument(",
          "311:               \"Total paddings must be less than the input dimension size: \",",
          "312:               total_padding, \" was not less than \", in_size));",
          "314:       const int64_t out_size = in_size - total_padding;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1522:                           [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 3, 0, 0],",
          "1523:                            [0, 0, 4, 5, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
          "1525:   def testSymmetricMirrorPadGrad(self):",
          "1526:     t = np.broadcast_to(np.arange(0, 7), (3, 2, 1, 7))",
          "1527:     paddings = constant_op.constant([",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1525:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1526:   def testInvalidMirrorPadGradEagerMode(self):",
          "1527:     with context.eager_mode():",
          "1528:       with self.assertRaises(Exception):",
          "1529:         gen_array_ops.MirrorPadGrad(",
          "1530:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1532:   # b/246325518: Bad shape size. Explicitly testing different execution paths.",
          "1533:   def testInvalidMirrorPadGradGraphMode(self):",
          "1534:     with context.graph_mode():",
          "1535:       with self.assertRaises(Exception):",
          "1536:         result = gen_array_ops.MirrorPadGrad(",
          "1537:             input=[1], paddings=[[0x77f00000, 0xa000000]], mode=\"REFLECT\")",
          "1538:         self.evaluate(result)",
          "",
          "---------------"
        ]
      }
    }
  ]
}