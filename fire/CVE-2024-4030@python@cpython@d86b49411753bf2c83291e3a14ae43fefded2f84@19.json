{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "13a5082afea155b8558c700156e3832548d78b3a",
      "candidate_info": {
        "commit_hash": "13a5082afea155b8558c700156e3832548d78b3a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/13a5082afea155b8558c700156e3832548d78b3a",
        "files": [
          "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "Lib/test/test_inspect/test_inspect.py"
        ],
        "message": "[3.13] Add some more edge-case tests for `inspect.get_annotations` with `eval_str=True` (GH-120550) (#120551)\n\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py||Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py||Lib/test/test_inspect/inspect_stringized_annotations_pep695.py": [
          "File: Lib/test/test_inspect/inspect_stringized_annotations_pep695.py -> Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     def generic_method_2[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "48: def nested():",
          "49:     from types import SimpleNamespace",
          "50:     from inspect import get_annotations",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: # Eggs is `int` in globals, a TypeVar in type_params, and `str` in locals:",
          "49: class E[Eggs]:",
          "50:     Eggs = str",
          "51:     x: Eggs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     Spam = memoryview",
          "57:         x: Eggs",
          "58:         y: Spam",
          "",
          "[Removed Lines]",
          "56:     class E[Eggs, **Spam]:",
          "",
          "[Added Lines]",
          "63:     class F[Eggs, **Spam]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     def generic_function[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "66:     return SimpleNamespace(",
          "70:         generic_func=generic_function,",
          "71:         generic_func_annotations=get_annotations(generic_function, eval_str=True)",
          "72:     )",
          "",
          "[Removed Lines]",
          "67:         E=E,",
          "68:         E_annotations=get_annotations(E, eval_str=True),",
          "69:         E_meth_annotations=get_annotations(E.generic_method, eval_str=True),",
          "",
          "[Added Lines]",
          "73:     # Eggs is `int` in globals, `bytes` in the function scope,",
          "74:     # a TypeVar in the type_params, and `str` in locals:",
          "75:     class G[Eggs]:",
          "76:         Eggs = str",
          "77:         x: Eggs",
          "81:         F=F,",
          "82:         F_annotations=get_annotations(F, eval_str=True),",
          "83:         F_meth_annotations=get_annotations(F.generic_method, eval_str=True),",
          "84:         G_annotations=get_annotations(G, eval_str=True),",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1770:             )",
          "1771:         )",
          "1773:     def test_pep_695_generics_with_future_annotations_nested_in_function(self):",
          "1774:         results = inspect_stringized_annotations_pep695.nested()",
          "1776:         self.assertEqual(",
          "1779:         )",
          "1780:         self.assertEqual(",
          "1783:         )",
          "1784:         self.assertNotEqual(",
          "1787:         )",
          "1788:         self.assertEqual(",
          "1790:             set()",
          "1791:         )",
          "1793:         self.assertEqual(",
          "1794:             set(results.generic_func_annotations.values()),",
          "1795:             set(results.generic_func.__type_params__)",
          "",
          "[Removed Lines]",
          "1777:             set(results.E_annotations.values()),",
          "1778:             set(results.E.__type_params__)",
          "1781:             set(results.E_meth_annotations.values()),",
          "1782:             set(results.E.generic_method.__type_params__)",
          "1785:             set(results.E_meth_annotations.values()),",
          "1786:             set(results.E.__type_params__)",
          "1789:             set(results.E_meth_annotations.values()).intersection(results.E.__type_params__),",
          "",
          "[Added Lines]",
          "1773:     def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_and_local_vars(self):",
          "1774:         self.assertEqual(",
          "1775:             inspect.get_annotations(",
          "1776:                 inspect_stringized_annotations_pep695.E, eval_str=True",
          "1777:             ),",
          "1778:             {\"x\": str},",
          "1779:         )",
          "1785:             set(results.F_annotations.values()),",
          "1786:             set(results.F.__type_params__)",
          "1789:             set(results.F_meth_annotations.values()),",
          "1790:             set(results.F.generic_method.__type_params__)",
          "1793:             set(results.F_meth_annotations.values()),",
          "1794:             set(results.F.__type_params__)",
          "1797:             set(results.F_meth_annotations.values()).intersection(results.F.__type_params__),",
          "1801:         self.assertEqual(results.G_annotations, {\"x\": str})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c88898a696785fb4872a271d7c90f6505178fd7",
      "candidate_info": {
        "commit_hash": "3c88898a696785fb4872a271d7c90f6505178fd7",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3c88898a696785fb4872a271d7c90f6505178fd7",
        "files": [
          "Lib/test/test_logging.py"
        ],
        "message": "[3.13] gh-119819: Conditional skip of logging tests that require multiprocessing subprocess support (GH-120476) (#120531)\n\ngh-119819: Conditional skip of logging tests that require multiprocessing subprocess support (GH-120476)\n\nSkip tests that require multiprocessing subprocess support.\n(cherry picked from commit 92f6d400f76b6a04dddd944568870f689c8fab5f)\n\nCo-authored-by: Russell Keith-Magee <russell@keith-magee.com>",
        "before_after_code_files": [
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3898:                 self.addCleanup(os.remove, fn)",
          "3900:     @threading_helper.requires_working_threading()",
          "3901:     def test_config_queue_handler(self):",
          "3902:         q = CustomQueue()",
          "3903:         dq = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3901:     @support.requires_subprocess()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3926:             msg = str(ctx.exception)",
          "3927:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3929:     def test_multiprocessing_queues(self):",
          "3930:         # See gh-119819",
          "3935:         cd = copy.deepcopy(self.config_queue_handler)",
          "3936:         from multiprocessing import Queue as MQ, Manager as MM",
          "3937:         q1 = MQ()  # this can't be pickled",
          "",
          "[Removed Lines]",
          "3932:         # will skip test if it's not available",
          "3933:         import_helper.import_module('_multiprocessing')",
          "",
          "[Added Lines]",
          "3930:     @support.requires_subprocess()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d524802e9dd624f569948c4c0b6adbe000edcffe",
      "candidate_info": {
        "commit_hash": "d524802e9dd624f569948c4c0b6adbe000edcffe",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d524802e9dd624f569948c4c0b6adbe000edcffe",
        "files": [
          "Objects/typeobject.c",
          "PC/launcher2.c"
        ],
        "message": "Fix some missing null checks. (GH-118721)\n\n(cherry picked from commit 7e6fcab20003b07621dc02ea78d6ea2fda500371)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Objects/typeobject.c||Objects/typeobject.c",
          "PC/launcher2.c||PC/launcher2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6036:             return NULL;",
          "6037:         }",
          "6038:         comma_w_quotes_sep = PyUnicode_FromString(\"', '\");",
          "6039:         joined = PyUnicode_Join(comma_w_quotes_sep, sorted_methods);",
          "6042:         if (joined == NULL)  {",
          "6044:             return NULL;",
          "6045:         }",
          "6046:         if (method_count == -1) {",
          "6048:             Py_DECREF(joined);",
          "6049:             return NULL;",
          "6050:         }",
          "",
          "[Removed Lines]",
          "6040:         method_count = PyObject_Length(sorted_methods);",
          "6041:         Py_DECREF(sorted_methods);",
          "6043:             Py_DECREF(comma_w_quotes_sep);",
          "6047:             Py_DECREF(comma_w_quotes_sep);",
          "",
          "[Added Lines]",
          "6039:         if (!comma_w_quotes_sep) {",
          "6040:             Py_DECREF(sorted_methods);",
          "6041:             return NULL;",
          "6042:         }",
          "6044:         Py_DECREF(comma_w_quotes_sep);",
          "6046:             Py_DECREF(sorted_methods);",
          "6049:         method_count = PyObject_Length(sorted_methods);",
          "6050:         Py_DECREF(sorted_methods);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6056:                      method_count > 1 ? \"s\" : \"\",",
          "6057:                      joined);",
          "6058:         Py_DECREF(joined);",
          "6060:         return NULL;",
          "6061:     }",
          "6062:     PyObject *obj = type->tp_alloc(type, 0);",
          "",
          "[Removed Lines]",
          "6059:         Py_DECREF(comma_w_quotes_sep);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "PC/launcher2.c||PC/launcher2.c": [
          "File: PC/launcher2.c -> PC/launcher2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2707:     DWORD len = GetEnvironmentVariableW(L\"PYLAUNCHER_LIMIT_TO_COMPANY\", NULL, 0);",
          "2708:     if (len > 1) {",
          "2709:         wchar_t *limitToCompany = allocSearchInfoBuffer(&search, len);",
          "2710:         search.limitToCompany = limitToCompany;",
          "2711:         if (0 == GetEnvironmentVariableW(L\"PYLAUNCHER_LIMIT_TO_COMPANY\", limitToCompany, len)) {",
          "2712:             exitCode = RC_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2710:         if (!limitToCompany) {",
          "2711:             exitCode = RC_NO_MEMORY;",
          "2712:             winerror(0, L\"Failed to allocate internal buffer\");",
          "2713:             goto abort;",
          "2714:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbcb5265bfaf80af386faa8858359bb6f15cb77d",
      "candidate_info": {
        "commit_hash": "cbcb5265bfaf80af386faa8858359bb6f15cb77d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cbcb5265bfaf80af386faa8858359bb6f15cb77d",
        "files": [
          "Include/object.h",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-117657: Make PyType_HasFeature (exported version) atomic (GH-120484) (#120554)\n\ngh-117657: Make PyType_HasFeature (exported version) atomic (GH-120484)\n\nMake PyType_HasFeature (exported version) atomic\n(cherry picked from commit 6f63dfff6f493b405f3422210a168369e1e7a35d)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Include/object.h||Include/object.h",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/object.h||Include/object.h": [
          "File: Include/object.h -> Include/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     flags = PyType_GetFlags(type);",
          "1240: #else",
          "1242: #endif",
          "1243:     return ((flags & feature) != 0);",
          "1244: }",
          "",
          "[Removed Lines]",
          "1241:     flags = type->tp_flags;",
          "",
          "[Added Lines]",
          "1241: #   ifdef Py_GIL_DISABLED",
          "1242:         flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);",
          "1243: #   else",
          "1244:         flags = type->tp_flags;",
          "1245: #   endif",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3435: unsigned long",
          "3436: PyType_GetFlags(PyTypeObject *type)",
          "3437: {",
          "3439: }",
          "",
          "[Removed Lines]",
          "3438:     return type->tp_flags;",
          "",
          "[Added Lines]",
          "3438:     return FT_ATOMIC_LOAD_ULONG_RELAXED(type->tp_flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "071d996e13d5499b3a0590a4a874e4bbe7fb86bf",
      "candidate_info": {
        "commit_hash": "071d996e13d5499b3a0590a4a874e4bbe7fb86bf",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/071d996e13d5499b3a0590a4a874e4bbe7fb86bf",
        "files": [
          "Lib/_ios_support.py"
        ],
        "message": "[3.13] gh-119253: use ImportError in _ios_support (GH-119254) (#119265)\n\nCo-authored-by: Shantanu <12621235+hauntsaninja@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/_ios_support.py||Lib/_ios_support.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_ios_support.py||Lib/_ios_support.py": [
          "File: Lib/_ios_support.py -> Lib/_ios_support.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     # ctypes is an optional module. If it's not present, we're limited in what",
          "6:     # we can tell about the system, but we don't want to prevent the module",
          "7:     # from working.",
          "9:     objc = None",
          "10: else:",
          "11:     # ctypes is available. Load the ObjC library, and wrap the objc_getClass,",
          "",
          "[Removed Lines]",
          "8:     print(\"ctypes isn't available; iOS system calls will not be available\")",
          "",
          "[Added Lines]",
          "8:     print(\"ctypes isn't available; iOS system calls will not be available\", file=sys.stderr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     lib = util.find_library(\"objc\")",
          "14:     if lib is None:",
          "15:         # Failed to load the objc library",
          "18:     objc = cdll.LoadLibrary(lib)",
          "19:     objc.objc_getClass.restype = c_void_p",
          "",
          "[Removed Lines]",
          "16:         raise RuntimeError(\"ObjC runtime library couldn't be loaded\")",
          "",
          "[Added Lines]",
          "16:         raise ImportError(\"ObjC runtime library couldn't be loaded\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}