{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
      "candidate_info": {
        "commit_hash": "7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
        "files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c"
        ],
        "message": "Merge pull request #2806 from john08burke/redis_bugfix_3_1\n\n[cachedb_redis] cleanup stale context pointer, branch 3.1\n\n(cherry picked from commit 6ea4a7ac1cddae536a4bc3d2a3fe8ed279d671dc)",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:    LM_ERR(\"failed to auth to redis - %.*s\\n\",",
          "162:     rpl?(unsigned)rpl->len:7,rpl?rpl->str:\"FAILURE\");",
          "163:    freeReplyObject(rpl);",
          "165:   }",
          "166:   LM_DBG(\"AUTH [password] -  %.*s\\n\",(unsigned)rpl->len,rpl->str);",
          "167:   freeReplyObject(rpl);",
          "",
          "[Removed Lines]",
          "164:    goto error;",
          "",
          "[Added Lines]",
          "164:    redisFree(node->context);",
          "165:    node->context = NULL;",
          "166:    return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:    LM_ERR(\"failed to select database %s - %.*s\\n\",con->id->database,",
          "174:     rpl?(unsigned)rpl->len:7,rpl?rpl->str:\"FAILURE\");",
          "175:    freeReplyObject(rpl);",
          "177:   }",
          "179:   LM_DBG(\"SELECT [%s] - %.*s\\n\",con->id->database,(unsigned)rpl->len,rpl->str);",
          "",
          "[Removed Lines]",
          "176:    goto error;",
          "",
          "[Added Lines]",
          "178:    redisFree(node->context);",
          "179:    node->context = NULL;",
          "180:    return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:  LM_DBG(\"reconnecting node %s:%d \\n\",node->ip,node->port);",
          "200:   redisFree(node->context);",
          "202:  return redis_connect_node(con,node);",
          "203: }",
          "",
          "[Removed Lines]",
          "199:  if(node->context)",
          "",
          "[Added Lines]",
          "203:  if(node->context) {",
          "205:   node->context = NULL;",
          "206:  }",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c": [
          "File: modules/cachedb_redis/cachedb_redis_utils.c -> modules/cachedb_redis/cachedb_redis_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  new = con->nodes;",
          "110:  while (new) {",
          "111:   foo = new->next;",
          "113:   if (use_tls && new->tls_dom)",
          "114:    tls_api.release_domain(new->tls_dom);",
          "115:   pkg_free(new);",
          "116:   new = foo;",
          "117:  }",
          "",
          "[Removed Lines]",
          "112:   redisFree(new->context);",
          "",
          "[Added Lines]",
          "114:   redisFree(new->context);",
          "115:   new->context = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69031794f90285ffae7351dae513f763a3d89ef9",
      "candidate_info": {
        "commit_hash": "69031794f90285ffae7351dae513f763a3d89ef9",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/69031794f90285ffae7351dae513f763a3d89ef9",
        "files": [
          "modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h",
          "modules/clusterer/sharing_tags.c",
          "modules/clusterer/sync.c"
        ],
        "message": "clusterer: fix deadlocks when syncing\n\n(cherry picked from commit 652d89fbeffc180aea68e8bdfcac799d53124e6b)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c",
          "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h",
          "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c",
          "modules/clusterer/sync.c||modules/clusterer/sync.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: }",
          "316: enum clusterer_send_ret clusterer_send_msg(bin_packet_t *packet,",
          "318: {",
          "319:  node_info_t *node;",
          "320:  int rc;",
          "",
          "[Removed Lines]",
          "317:  int cluster_id, int dst_node_id, int check_cap)",
          "",
          "[Added Lines]",
          "317:  int cluster_id, int dst_node_id, int check_cap, int locked)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:   LM_ERR(\"cluster shutdown - cannot send new messages!\\n\");",
          "327:   return CLUSTERER_CURR_DISABLED;",
          "328:  }",
          "331:  cl = get_cluster_by_id(cluster_id);",
          "332:  if (!cl) {",
          "333:   LM_ERR(\"Unknown cluster id [%d]\\n\", cluster_id);",
          "335:   return CLUSTERER_SEND_ERR;",
          "336:  }",
          "338:  lock_get(cl->current_node->lock);",
          "339:  if (!(cl->current_node->flags & NODE_STATE_ENABLED)) {",
          "340:   lock_release(cl->current_node->lock);",
          "342:   return CLUSTERER_CURR_DISABLED;",
          "343:  }",
          "344:  lock_release(cl->current_node->lock);",
          "",
          "[Removed Lines]",
          "329:  lock_start_read(cl_list_lock);",
          "334:   lock_stop_read(cl_list_lock);",
          "341:   lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "329:  if (!locked)",
          "330:   lock_start_read(cl_list_lock);",
          "335:   if (!locked)",
          "336:    lock_stop_read(cl_list_lock);",
          "343:   if (!locked)",
          "344:    lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:  node = get_node_by_id(cl, dst_node_id);",
          "347:  if (!node) {",
          "348:   LM_ERR(\"Node id [%d] not found in cluster\\n\", dst_node_id);",
          "350:   return CLUSTERER_SEND_ERR;",
          "351:  }",
          "",
          "[Removed Lines]",
          "349:   lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "352:   if (!locked)",
          "353:    lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "379:  if (ev_actions_required)",
          "380:   do_actions_node_ev(cl, &ev_actions_required, 1);",
          "384:  switch (rc) {",
          "385:  case  0:",
          "",
          "[Removed Lines]",
          "382:  lock_stop_read(cl_list_lock);",
          "",
          "[Added Lines]",
          "386:  if (!locked)",
          "387:   lock_stop_read(cl_list_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521:   return CLUSTERER_SEND_ERR;",
          "522:  }",
          "525: }",
          "527: enum clusterer_send_ret cl_send_all(bin_packet_t *packet, int cluster_id)",
          "",
          "[Removed Lines]",
          "524:  return clusterer_send_msg(packet, cluster_id, node_id, 1);",
          "",
          "[Added Lines]",
          "529:  return clusterer_send_msg(packet, cluster_id, node_id, 1, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "557:   return CLUSTERER_SEND_ERR;",
          "558:  }",
          "562:  bin_free_packet(&packet);",
          "",
          "[Removed Lines]",
          "560:  rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0);",
          "",
          "[Added Lines]",
          "565:  rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "612:  }",
          "614:  if (dst_id)",
          "616:  else",
          "617:   rc = clusterer_bcast_msg(&packet, cluster_id, NODE_CMP_ANY, 0);",
          "",
          "[Removed Lines]",
          "615:   rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0);",
          "",
          "[Added Lines]",
          "620:   rc = clusterer_send_msg(&packet, cluster_id, dst_id, 0, 0);",
          "",
          "---------------"
        ],
        "modules/clusterer/clusterer.h||modules/clusterer/clusterer.h": [
          "File: modules/clusterer/clusterer.h -> modules/clusterer/clusterer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: int msg_add_trailer(bin_packet_t *packet, int cluster_id, int dst_id);",
          "157: enum clusterer_send_ret clusterer_send_msg(bin_packet_t *packet,",
          "159: int send_single_cap_update(struct cluster_info *cluster, struct local_cap *cap,",
          "160:        int cap_state);",
          "161: int send_cap_update(struct node_info *dest_node, int require_reply);",
          "",
          "[Removed Lines]",
          "158:  int cluster_id, int dst_id, int check_cap);",
          "",
          "[Added Lines]",
          "158:  int cluster_id, int dst_id, int check_cap, int locked);",
          "",
          "---------------"
        ],
        "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c": [
          "File: modules/clusterer/sharing_tags.c -> modules/clusterer/sharing_tags.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   return CLUSTERER_SEND_ERR;",
          "555:  msg_add_trailer(&packet, c_id, node_id);",
          "557:   CLUSTERER_SEND_SUCCESS) {",
          "558:   bin_free_packet(&packet);",
          "559:   return CLUSTERER_SEND_ERR;",
          "",
          "[Removed Lines]",
          "556:  if (clusterer_send_msg(&packet, c_id, node_id, 0) !=",
          "",
          "[Added Lines]",
          "556:  if (clusterer_send_msg(&packet, c_id, node_id, 0, 1) !=",
          "",
          "---------------"
        ],
        "modules/clusterer/sync.c||modules/clusterer/sync.c": [
          "File: modules/clusterer/sync.c -> modules/clusterer/sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  bin_push_str(&packet, capability);",
          "47:  msg_add_trailer(&packet, cluster_id, source_id);",
          "50:  if (rc == CLUSTERER_SEND_SUCCESS)",
          "51:   LM_INFO(\"Sent sync request for capability '%.*s' to node %d, \"",
          "52:           \"cluster %d\\n\", capability->len, capability->s, source_id,",
          "",
          "[Removed Lines]",
          "49:  rc = clusterer_send_msg(&packet, cluster_id, source_id, 0);",
          "",
          "[Added Lines]",
          "49:  rc = clusterer_send_msg(&packet, cluster_id, source_id, 0, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:    msg_add_trailer(sync_packet_snd, cluster_id, dst_id);",
          "195:     LM_ERR(\"Failed to send sync packet\\n\");",
          "197:    bin_free_packet(sync_packet_snd);",
          "",
          "[Removed Lines]",
          "194:    if (clusterer_send_msg(sync_packet_snd, cluster_id, dst_id, 0) < 0)",
          "",
          "[Added Lines]",
          "194:    if (clusterer_send_msg(sync_packet_snd, cluster_id, dst_id, 0,",
          "195:     1 /* we should be in a SYNC_REQ_RCV callback here so",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:   msg_add_trailer(sync_packet_snd, p->cluster->cluster_id, p->node_id);",
          "316:   if ((rc = clusterer_send_msg(sync_packet_snd, p->cluster->cluster_id,",
          "318:    LM_ERR(\"Failed to send sync packet, rc=%d\\n\", rc);",
          "320:   bin_free_packet(sync_packet_snd);",
          "",
          "[Removed Lines]",
          "317:    p->node_id, 0))<0)",
          "",
          "[Added Lines]",
          "319:    p->node_id, 0, 1))<0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:  msg_add_trailer(&sync_end_pkt, p->cluster->cluster_id, p->node_id);",
          "335:  if (clusterer_send_msg(&sync_end_pkt, p->cluster->cluster_id, p->node_id,",
          "337:   LM_ERR(\"Failed to send sync end message\\n\");",
          "338:   bin_free_packet(&sync_end_pkt);",
          "339:   lock_stop_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "336:   0) < 0) {",
          "",
          "[Added Lines]",
          "338:   0, 1) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd52ccc5e6eac577b9a564e05b58d726d59b0210",
      "candidate_info": {
        "commit_hash": "cd52ccc5e6eac577b9a564e05b58d726d59b0210",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/cd52ccc5e6eac577b9a564e05b58d726d59b0210",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/b2b_entities/client.c",
          "modules/b2b_entities/client.h",
          "modules/b2b_entities/dlg.c",
          "modules/b2b_entities/dlg.h",
          "modules/b2b_entities/server.c",
          "modules/b2b_entities/server.h"
        ],
        "message": "b2b_entities: allow enforcing the Max-Forwards value\n\nRelated to #2471\n\n(cherry picked from commit 404f580026f2bb67cdacf56e1384213643a0505e)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/b2b_entities/client.c||modules/b2b_entities/client.c",
          "modules/b2b_entities/client.h||modules/b2b_entities/client.h",
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c",
          "modules/b2b_entities/dlg.h||modules/b2b_entities/dlg.h",
          "modules/b2b_entities/server.c||modules/b2b_entities/server.c",
          "modules/b2b_entities/server.h||modules/b2b_entities/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  str* from_tag;",
          "68:  str local_contact;",
          "69:  unsigned int cseq;",
          "70:  struct socket_info* send_sock;",
          "71:  struct usr_avp *avps;",
          "72: }client_info_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  unsigned int maxfwd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  str* client_headers;",
          "88:  str* body;",
          "89:  b2b_dlginfo_t* dlginfo;",
          "90:  unsigned int no_cb;",
          "91: }b2b_req_data_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  unsigned int maxfwd;",
          "",
          "---------------"
        ],
        "modules/b2b_entities/client.c||modules/b2b_entities/client.c": [
          "File: modules/b2b_entities/client.c -> modules/b2b_entities/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  td.id.rem_tag.s = 0;",
          "204:  td.id.rem_tag.len = 0;",
          "206:  td.rem_uri = ci->to_uri;",
          "207:  if(ci->req_uri.s)",
          "208:   td.rem_target    = ci->req_uri;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:  if (ci->maxfwd > 0) {",
          "207:   td.mf_enforced = 1;",
          "208:   td.mf_value = ci->maxfwd - 1;",
          "209:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  return NULL;",
          "270: }",
          "273: {",
          "274:  dlg_t* td =NULL;",
          "",
          "[Removed Lines]",
          "272: dlg_t* b2b_client_build_dlg(b2b_dlg_t* dlg, dlg_leg_t* leg)",
          "",
          "[Added Lines]",
          "277: dlg_t* b2b_client_build_dlg(b2b_dlg_t* dlg, dlg_leg_t* leg, unsigned int maxfwd)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:  td->loc_dname = dlg->from_dname;",
          "293:  td->rem_dname = dlg->to_dname;",
          "295:  if(dlg->proxy.len)",
          "296:   td->obp = dlg->proxy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:  if (maxfwd > 0) {",
          "301:   td->mf_enforced = 1;",
          "302:   td->mf_value = maxfwd - 1;",
          "303:  }",
          "",
          "---------------"
        ],
        "modules/b2b_entities/client.h||modules/b2b_entities/client.h": [
          "File: modules/b2b_entities/client.h -> modules/b2b_entities/client.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: void b2b_client_tm_cback( struct cell *t, int type, struct tmcb_params *ps);",
          "44: #endif",
          "",
          "[Removed Lines]",
          "42: dlg_t* b2b_client_build_dlg(b2b_dlg_t* dlg, dlg_leg_t* leg);",
          "",
          "[Added Lines]",
          "42: dlg_t* b2b_client_build_dlg(b2b_dlg_t* dlg, dlg_leg_t* leg, unsigned int maxfwd);",
          "",
          "---------------"
        ],
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1878:  shm_free(param);",
          "1879: }",
          "1882: {",
          "1884: }",
          "1886: void free_tm_dlg(dlg_t* td)",
          "",
          "[Removed Lines]",
          "1881: dlg_t* b2b_client_dlg(b2b_dlg_t* dlg)",
          "1883:  return b2b_client_build_dlg(dlg, dlg->legs);",
          "",
          "[Added Lines]",
          "1881: dlg_t* b2b_client_dlg(b2b_dlg_t* dlg, unsigned int maxfwd)",
          "1883:  return b2b_client_build_dlg(dlg, dlg->legs, maxfwd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1892:  pkg_free(td);",
          "1893: }",
          "1897: {",
          "1898:  str* b2b_key_shm = NULL;",
          "1899:  dlg_t* td = NULL;",
          "",
          "[Removed Lines]",
          "1895: int b2b_send_indlg_req(b2b_dlg_t* dlg, enum b2b_entity_type et,",
          "1896:   str* b2b_key, str* method, str* ehdr, str* body, unsigned int no_cb)",
          "",
          "[Added Lines]",
          "1895: int b2b_send_indlg_req(b2b_dlg_t* dlg, enum b2b_entity_type et, str* b2b_key,",
          "1896:  str* method, str* ehdr, unsigned int maxfwd, str* body, unsigned int no_cb)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1923:  }",
          "1927:  if(td == NULL)",
          "1928:  {",
          "1929:   LM_ERR(\"Failed to build tm dialog structure, was asked to send [%.*s]\"",
          "",
          "[Removed Lines]",
          "1926:  td = build_dlg(dlg);",
          "",
          "[Added Lines]",
          "1926:  td = build_dlg(dlg, maxfwd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2132:    dlg->last_method == METHOD_INVITE)",
          "2133:  {",
          "2136:   dlg->state= B2B_ESTABLISHED;",
          "2137:  }",
          "",
          "[Removed Lines]",
          "2135:   b2b_send_indlg_req(dlg, et, b2b_key, &ack, &ehdr, req_data->body, req_data->no_cb);",
          "",
          "[Added Lines]",
          "2135:   b2b_send_indlg_req(dlg, et, b2b_key, &ack, &ehdr, 0,",
          "2136:    req_data->body, req_data->no_cb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2170:   }",
          "2171:   else",
          "2172:   {",
          "2175:    method_value = METHOD_BYE;",
          "2176:   }",
          "2177:  }",
          "2178:  else",
          "2179:  {",
          "2181:  }",
          "2183:  if(ret < 0)",
          "",
          "[Removed Lines]",
          "2173:    b2b_send_indlg_req(dlg, et, b2b_key, &ack, &ehdr, 0, req_data->no_cb);",
          "2174:    ret = b2b_send_indlg_req(dlg, et, b2b_key, &bye, &ehdr, req_data->body, req_data->no_cb);",
          "2180:   ret = b2b_send_indlg_req(dlg, et, b2b_key, method, &ehdr, req_data->body, req_data->no_cb);",
          "",
          "[Added Lines]",
          "2174:    b2b_send_indlg_req(dlg, et, b2b_key, &ack, &ehdr, 0, 0, req_data->no_cb);",
          "2175:    ret = b2b_send_indlg_req(dlg, et, b2b_key, &bye, &ehdr, 0, req_data->body,",
          "2176:     req_data->no_cb);",
          "2182:   ret = b2b_send_indlg_req(dlg, et, b2b_key, method, &ehdr,",
          "2183:    req_data->maxfwd, req_data->body, req_data->no_cb);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2415:  LM_DBG(\"start type=%d\\n\", etype);",
          "2416:  if(etype== B2B_SERVER)",
          "2418:  else",
          "2421:  if(td == NULL)",
          "2422:  {",
          "",
          "[Removed Lines]",
          "2417:   td = b2b_server_build_dlg(dlg);",
          "2419:   td = b2b_client_build_dlg(dlg, leg);",
          "",
          "[Added Lines]",
          "2420:   td = b2b_server_build_dlg(dlg, 0);",
          "2422:   td = b2b_client_build_dlg(dlg, leg, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2930:      new_hdr->s = NULL; new_hdr->len = 0;",
          "2932:      b2b_send_indlg_req(dlg, B2B_CLIENT, b2b_key, &t->method,",
          "2934:      pkg_free(extra_headers.s);",
          "2936:      dlg->state = B2B_NEW_AUTH;",
          "",
          "[Removed Lines]",
          "2933:        &extra_headers, &body, 0);",
          "",
          "[Added Lines]",
          "2936:        &extra_headers, 0, &body, 0);",
          "",
          "---------------"
        ],
        "modules/b2b_entities/dlg.h||modules/b2b_entities/dlg.h": [
          "File: modules/b2b_entities/dlg.h -> modules/b2b_entities/dlg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: void b2b_delete_record(b2b_dlg_t* dlg, b2b_table htable, unsigned int hash_index);",
          "170: str* b2b_key_copy_shm(str* b2b_key);",
          "",
          "[Removed Lines]",
          "168: typedef dlg_t* (*build_dlg_f)(b2b_dlg_t* dlg);",
          "",
          "[Added Lines]",
          "168: typedef dlg_t* (*build_dlg_f)(b2b_dlg_t* dlg, unsigned int maxfwd);",
          "",
          "---------------"
        ],
        "modules/b2b_entities/server.c||modules/b2b_entities/server.c": [
          "File: modules/b2b_entities/server.c -> modules/b2b_entities/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "120: {",
          "121:  dlg_t* td =NULL;",
          "",
          "[Removed Lines]",
          "119: dlg_t* b2b_server_build_dlg(b2b_dlg_t* dlg)",
          "",
          "[Added Lines]",
          "119: dlg_t* b2b_server_build_dlg(b2b_dlg_t* dlg, unsigned int maxfwd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:  td->loc_dname = dlg->to_dname;",
          "143:  td->rem_dname = dlg->from_dname;",
          "145:  if(dlg->route_set[CALLER_LEG].s && dlg->route_set[CALLER_LEG].len)",
          "146:  {",
          "147:   if(parse_rr_body(dlg->route_set[CALLER_LEG].s, dlg->route_set[CALLER_LEG].len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:  if (maxfwd > 0) {",
          "146:   td->mf_enforced = 1;",
          "147:   td->mf_value = maxfwd - 1;",
          "148:  }",
          "",
          "---------------"
        ],
        "modules/b2b_entities/server.h||modules/b2b_entities/server.h": [
          "File: modules/b2b_entities/server.h -> modules/b2b_entities/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: str* server_new(struct sip_msg*, str* local_contact, b2b_notify_t, str *,",
          "35:   str*, struct b2b_tracer*);",
          "39: void b2b_server_tm_cback( struct cell *t, int type, struct tmcb_params *ps);",
          "",
          "[Removed Lines]",
          "37: dlg_t* b2b_server_build_dlg(b2b_dlg_t* dlg);",
          "",
          "[Added Lines]",
          "37: dlg_t* b2b_server_build_dlg(b2b_dlg_t* dlg, unsigned int maxfwd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c2e70058fe3e5f5071ce4677017cb3eaf2511c3",
      "candidate_info": {
        "commit_hash": "0c2e70058fe3e5f5071ce4677017cb3eaf2511c3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0c2e70058fe3e5f5071ce4677017cb3eaf2511c3",
        "files": [
          "lib/csv.c"
        ],
        "message": "lib/csv: Fix some memleak corner-cases (reported by OSS-Fuzz)\n\nFixes OSS-Fuzz#39925\n\n(cherry picked from commit ff34d213cad9c2b24460aecc206520bac5411bdc)",
        "before_after_code_files": [
          "lib/csv.c||lib/csv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/csv.c||lib/csv.c": [
          "File: lib/csv.c -> lib/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  return record;",
          "117: rfc_4180_parsing:",
          "118:  if (in.len >= 2 && in.s[in.len - 2] == '\\r' && in.s[in.len - 1] == '\\n')",
          "119:   in.len -= 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  parse_flags |= CSV_DUP_FIELDS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:    field.len = c - field.s;",
          "183:     goto oom;",
          "185:    last = &(*last)->next;",
          "187:    if (ch == lim - 1)",
          "",
          "[Removed Lines]",
          "182:    if (!push_csv_field(&field, last, parse_flags & (~CSV_DUP_FIELDS)))",
          "",
          "[Added Lines]",
          "184:    if (!push_csv_field(&field, last, parse_flags)) {",
          "185:     free_f(field.s);",
          "187:    }",
          "189:    free_f(field.s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
      "candidate_info": {
        "commit_hash": "205667d85c26646f7f86024b6d1865e9057c011b",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/205667d85c26646f7f86024b6d1865e9057c011b",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: use the proper locking type when we might switch for writing\n\nAquire lock for switchable reading when handling a full topology update,\nwich might trigger the insert of a new node in the list and thus using\nthe lock switch mechanism.\n\n(cherry picked from commit ead6f1fcae3881a15b6ec4e8e6026bdd5d99ecb3)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:   return;",
          "1110:  }",
          "1113:   lock_start_sw_read(cl_list_lock);",
          "1114:  else",
          "1115:   lock_start_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1112:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1112:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1113:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:  }",
          "1158: exit:",
          "1160:   lock_stop_sw_read(cl_list_lock);",
          "1161:  else",
          "1162:   lock_stop_read(cl_list_lock);",
          "",
          "[Removed Lines]",
          "1159:  if (!db_mode && packet_type == CLUSTERER_NODE_DESCRIPTION)",
          "",
          "[Added Lines]",
          "1160:  if (!db_mode && (packet_type == CLUSTERER_NODE_DESCRIPTION ||",
          "1161:   packet_type == CLUSTERER_FULL_TOP_UPDATE))",
          "",
          "---------------"
        ]
      }
    }
  ]
}