{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
      "candidate_info": {
        "commit_hash": "bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
        "files": [
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-120635: Avoid leaking processes in test_pyrepl (GH-120676) (#120741)\n\ngh-120635: Avoid leaking processes in test_pyrepl (GH-120676)\n\nIf the child process takes longer than SHORT_TIMEOUT seconds to\ncomplete, kill the process but then wait until it completes with no\ntimeout to not leak child processes.\n(cherry picked from commit 0f3e36454d754026d6c510053ff1e4b22ae80cd9)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:             exit_code = process.wait(timeout=SHORT_TIMEOUT)",
          "891:         except subprocess.TimeoutExpired:",
          "892:             process.kill()",
          "894:         return \"\\n\".join(output), exit_code",
          "",
          "[Removed Lines]",
          "893:             exit_code = process.returncode",
          "",
          "[Added Lines]",
          "893:             exit_code = process.wait()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c844b1437da6d37db54f7d3b793e4120b1e5c73b",
      "candidate_info": {
        "commit_hash": "c844b1437da6d37db54f7d3b793e4120b1e5c73b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c844b1437da6d37db54f7d3b793e4120b1e5c73b",
        "files": [
          "Include/patchlevel.h"
        ],
        "message": "Post 3.13.0b1",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define PY_RELEASE_SERIAL       1",
          "",
          "[Removed Lines]",
          "26: #define PY_VERSION              \"3.13.0b1\"",
          "",
          "[Added Lines]",
          "26: #define PY_VERSION              \"3.13.0b1+\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93b95e91faa17520f2042b4f4ae88379df914666",
      "candidate_info": {
        "commit_hash": "93b95e91faa17520f2042b4f4ae88379df914666",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/93b95e91faa17520f2042b4f4ae88379df914666",
        "files": [
          "Lib/_pyrepl/commands.py",
          "Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_reader.py"
        ],
        "message": "[3.13] gh-119553: Clear reader on Ctrl-C command (GH-119801) (#120062)\n\n(cherry picked from commit 010ea93b2b888149561becefeee90826bf8a2934)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py",
          "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py": [
          "File: Lib/_pyrepl/commands.py -> Lib/_pyrepl/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: class ctrl_c(Command):",
          "223:     def do(self) -> None:",
          "224:         raise KeyboardInterrupt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:         self.reader.finish()",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/support.py||Lib/test/test_pyrepl/support.py": [
          "File: Lib/test/test_pyrepl/support.py -> Lib/test/test_pyrepl/support.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:             reader.handle1()",
          "76:     except StopIteration:",
          "77:         pass",
          "78:     return reader, console",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     except KeyboardInterrupt:",
          "79:         pass",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         self.assert_screen_equals(reader, expected)",
          "180:         self.assertTrue(reader.finished)",
          "182:     def test_prompt_length(self):",
          "183:         # Handles simple ASCII prompt",
          "184:         ps1 = \">>> \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     def test_keyboard_interrupt_clears_screen(self):",
          "183:         namespace = {\"itertools\": itertools}",
          "184:         code = \"import itertools\\nitertools.\"",
          "185:         events = itertools.chain(code_to_events(code), [",
          "186:             Event(evt='key', data='\\t', raw=bytearray(b'\\t')),  # Two tabs for completion",
          "187:             Event(evt='key', data='\\t', raw=bytearray(b'\\t')),",
          "188:             Event(evt='key', data='\\x03', raw=bytearray(b'\\x03')),  # Ctrl-C",
          "189:         ])",
          "191:         completing_reader = functools.partial(",
          "192:             prepare_reader,",
          "193:             readline_completer=rlcompleter.Completer(namespace).complete",
          "194:         )",
          "195:         reader, _ = handle_all_events(events, prepare_reader=completing_reader)",
          "196:         self.assertEqual(reader.calc_screen(), code.split(\"\\n\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c41aa78d85ee9224cc8609302f7a9b47c6186be",
      "candidate_info": {
        "commit_hash": "1c41aa78d85ee9224cc8609302f7a9b47c6186be",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/1c41aa78d85ee9224cc8609302f7a9b47c6186be",
        "files": [
          "Lib/pdb.py",
          "Lib/test/test_pdb.py",
          "Misc/NEWS.d/next/Library/2024-05-31-21-17-43.gh-issue-119824.CQlxWV.rst"
        ],
        "message": "[3.13] gh-119824: Print stack entry when user input is needed (GH-119882) (#120533)\n\nCo-authored-by: Irit Katriel <1055913+iritkatriel@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/pdb.py||Lib/pdb.py",
          "Lib/test/test_pdb.py||Lib/test/test_pdb.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pdb.py||Lib/pdb.py": [
          "File: Lib/pdb.py -> Lib/pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:             assert tb is not None, \"main exception must have a traceback\"",
          "606:         with self._hold_exceptions(_chained_exceptions):",
          "607:             self.setup(frame, tb)",
          "610:                 self.print_stack_entry(self.stack[self.curindex])",
          "611:             self._cmdloop()",
          "612:             self.forget()",
          "614:     def displayhook(self, obj):",
          "",
          "[Removed Lines]",
          "608:             # if we have more commands to process, do not show the stack entry",
          "609:             if not self.cmdqueue:",
          "",
          "[Added Lines]",
          "608:             # We should print the stack entry if and only if the user input",
          "609:             # is expected, and we should print it right before the user input.",
          "610:             # If self.cmdqueue is not empty, we append a \"w 0\" command to the",
          "611:             # queue, which is equivalent to print_stack_entry",
          "612:             if self.cmdqueue:",
          "613:                 self.cmdqueue.append('w 0')",
          "614:             else:",
          "617:             # If \"w 0\" is not used, pop it out",
          "618:             if self.cmdqueue and self.cmdqueue[-1] == 'w 0':",
          "619:                 self.cmdqueue.pop()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1403:     complete_cl = _complete_location",
          "1405:     def do_where(self, arg):",
          "1409:         An arrow indicates the \"current frame\", which determines the",
          "1410:         context of most commands.  'bt' is an alias for this command.",
          "1411:         \"\"\"",
          "1416:     do_w = do_where",
          "1417:     do_bt = do_where",
          "",
          "[Removed Lines]",
          "1406:         \"\"\"w(here)",
          "1408:         Print a stack trace, with the most recent frame at the bottom.",
          "1412:         if arg:",
          "1413:             self._print_invalid_arg(arg)",
          "1414:             return",
          "1415:         self.print_stack_trace()",
          "",
          "[Added Lines]",
          "1414:         \"\"\"w(here) [count]",
          "1416:         Print a stack trace. If count is not specified, print the full stack.",
          "1417:         If count is 0, print the current frame entry. If count is positive,",
          "1418:         print count entries from the most recent frame. If count is negative,",
          "1419:         print -count entries from the least recent frame.",
          "1423:         if not arg:",
          "1424:             count = None",
          "1425:         else:",
          "1426:             try:",
          "1427:                 count = int(arg)",
          "1428:             except ValueError:",
          "1429:                 self.error('Invalid count (%s)' % arg)",
          "1430:                 return",
          "1431:         self.print_stack_trace(count)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2067:     # It is also consistent with the up/down commands (which are",
          "2068:     # compatible with dbx and gdb: up moves towards 'main()'",
          "2069:     # and down moves towards the most recent stack frame).",
          "2072:         try:",
          "2074:                 self.print_stack_entry(frame_lineno)",
          "2075:         except KeyboardInterrupt:",
          "2076:             pass",
          "",
          "[Removed Lines]",
          "2071:     def print_stack_trace(self):",
          "2073:             for frame_lineno in self.stack:",
          "",
          "[Added Lines]",
          "2086:     #     * if count is None, prints the full stack",
          "2087:     #     * if count = 0, prints the current frame entry",
          "2088:     #     * if count < 0, prints -count least recent frame entries",
          "2089:     #     * if count > 0, prints count most recent frame entries",
          "2091:     def print_stack_trace(self, count=None):",
          "2092:         if count is None:",
          "2093:             stack_to_print = self.stack",
          "2094:         elif count == 0:",
          "2095:             stack_to_print = [self.stack[self.curindex]]",
          "2096:         elif count < 0:",
          "2097:             stack_to_print = self.stack[:-count]",
          "2098:         else:",
          "2099:             stack_to_print = self.stack[-count:]",
          "2101:             for frame_lineno in stack_to_print:",
          "",
          "---------------"
        ],
        "Lib/test/test_pdb.py||Lib/test/test_pdb.py": [
          "File: Lib/test/test_pdb.py -> Lib/test/test_pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:     ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "783:     >>> def f():",
          "786:     >>> def test_function():",
          "787:     ...     f()",
          "",
          "[Removed Lines]",
          "784:     ...     g();",
          "",
          "[Added Lines]",
          "784:     ...     g()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:     >>> with PdbTestInput([  # doctest: +ELLIPSIS",
          "790:     ...     'w',",
          "791:     ...     'where',",
          "792:     ...     'u',",
          "793:     ...     'w',",
          "794:     ...     'continue',",
          "795:     ... ]):",
          "796:     ...    test_function()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "792:     ...     'w 1',",
          "793:     ...     'w invalid',",
          "796:     ...     'w 0',",
          "797:     ...     'w 100',",
          "798:     ...     'w -100',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "799:     (Pdb) w",
          "800:     ...",
          "802:     -> test_function()",
          "803:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "804:     -> f()",
          "805:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "807:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "808:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "809:     (Pdb) where",
          "810:     ...",
          "812:     -> test_function()",
          "813:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "814:     -> f()",
          "815:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "817:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "818:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "819:     (Pdb) u",
          "820:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "822:     (Pdb) w",
          "823:     ...",
          "825:     -> test_function()",
          "826:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "827:     -> f()",
          "828:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "830:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "831:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "832:     (Pdb) continue",
          "",
          "[Removed Lines]",
          "801:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "806:     -> g();",
          "811:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "816:     -> g();",
          "821:     -> g();",
          "824:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "829:     -> g();",
          "",
          "[Added Lines]",
          "806:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "811:     -> g()",
          "816:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "821:     -> g()",
          "824:     (Pdb) w 1",
          "825:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "826:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "827:     (Pdb) w invalid",
          "831:     -> g()",
          "834:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "835:     -> test_function()",
          "836:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "837:     -> f()",
          "838:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "839:     -> g()",
          "840:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "841:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "842:     (Pdb) w 0",
          "843:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "844:     -> g()",
          "845:     (Pdb) w 100",
          "846:     ...",
          "847:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "848:     -> test_function()",
          "849:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "850:     -> f()",
          "851:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "852:     -> g()",
          "853:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "854:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "855:     (Pdb) w -100",
          "856:     ...",
          "857:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "862:     -> g()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3165:         stdout, stderr = self.run_pdb_script(script, 'q\\n', pdbrc=pdbrc, remove_home=True)",
          "3166:         self.assertNotIn(\"SyntaxError\", stdout)",
          "3167:         self.assertIn(\"a+8=9\", stdout)",
          "3169:     def test_pdbrc_empty_line(self):",
          "3170:         \"\"\"Test that empty lines in .pdbrc are ignored.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3201:         self.assertIn(\"-> b = 2\", stdout)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aefe2e626eeb2f05cda10a17926f8ba9b7a504ca",
      "candidate_info": {
        "commit_hash": "aefe2e626eeb2f05cda10a17926f8ba9b7a504ca",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/aefe2e626eeb2f05cda10a17926f8ba9b7a504ca",
        "files": [
          "Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/completing_reader.py",
          "Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/unix_console.py"
        ],
        "message": "[3.13] gh-111201: Add append to screen method to avoid recalculation (GH-119274) (#119405)\n\n(cherry picked from commit c886bece3b3a49f8a0f188aecfc1d6ff89d281e6)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/completing_reader.py||Lib/_pyrepl/completing_reader.py",
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py": [
          "File: Lib/_pyrepl/commands.py -> Lib/_pyrepl/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: class self_insert(EditCommand):",
          "359:     def do(self) -> None:",
          "360:         r = self.reader",
          "364: class insert_nl(EditCommand):",
          "",
          "[Removed Lines]",
          "361:         r.insert(self.event * r.get_arg())",
          "",
          "[Added Lines]",
          "361:         text = self.event * r.get_arg()",
          "362:         r.insert(text)",
          "363:         if len(text) == 1 and r.pos == len(r.buffer):",
          "364:             r.calc_screen = r.append_to_screen",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/completing_reader.py||Lib/_pyrepl/completing_reader.py": [
          "File: Lib/_pyrepl/completing_reader.py -> Lib/_pyrepl/completing_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:             if p:",
          "188:                 r.insert(p)",
          "189:             if last_is_completer:",
          "192:                 r.cmpltn_menu, r.cmpltn_menu_end = build_menu(",
          "193:                     r.console, completions, r.cmpltn_menu_end,",
          "194:                     r.use_brackets, r.sort_in_column)",
          "",
          "[Removed Lines]",
          "190:                 if not r.cmpltn_menu_vis:",
          "191:                     r.cmpltn_menu_vis = 1",
          "",
          "[Added Lines]",
          "190:                 if not r.cmpltn_menu_visible:",
          "191:                     r.cmpltn_menu_visible = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:         commands.self_insert.do(self)",
          "212:             stem = r.get_stem()",
          "213:             if len(stem) < 1:",
          "214:                 r.cmpltn_reset()",
          "",
          "[Removed Lines]",
          "211:         if r.cmpltn_menu_vis:",
          "",
          "[Added Lines]",
          "211:         if r.cmpltn_menu_visible:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     ### Instance variables",
          "237:     cmpltn_menu: list[str] = field(init=False)",
          "239:     cmpltn_menu_end: int = field(init=False)",
          "240:     cmpltn_menu_choices: list[str] = field(init=False)",
          "",
          "[Removed Lines]",
          "238:     cmpltn_menu_vis: int = field(init=False)",
          "",
          "[Added Lines]",
          "238:     cmpltn_menu_visible: bool = field(init=False)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "255:         if not isinstance(cmd, (complete, self_insert)):",
          "256:             self.cmpltn_reset()",
          "261:             ly = self.lxy[1]",
          "262:             screen[ly:ly] = self.cmpltn_menu",
          "263:             self.screeninfo[ly:ly] = [(0, [])]*len(self.cmpltn_menu)",
          "",
          "[Removed Lines]",
          "258:     def calc_screen(self) -> list[str]:",
          "259:         screen = super().calc_screen()",
          "260:         if self.cmpltn_menu_vis:",
          "",
          "[Added Lines]",
          "258:     def calc_complete_screen(self) -> list[str]:",
          "259:         screen = super().calc_complete_screen()",
          "260:         if self.cmpltn_menu_visible:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:     def cmpltn_reset(self) -> None:",
          "272:         self.cmpltn_menu = []",
          "274:         self.cmpltn_menu_end = 0",
          "275:         self.cmpltn_menu_choices = []",
          "",
          "[Removed Lines]",
          "273:         self.cmpltn_menu_vis = 0",
          "",
          "[Added Lines]",
          "273:         self.cmpltn_menu_visible = False",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # types",
          "36: Command = commands.Command",
          "37: if False:",
          "38:     from .types import Callback, SimpleContextManager, KeySpec, CommandName",
          "41: def disp_str(buffer: str) -> tuple[str, list[int]]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     from typing import Callable",
          "40:     CalcScreen = Callable[[], list[str]]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:     keymap: tuple[tuple[str, str], ...] = ()",
          "232:     input_trans: input.KeymapTranslator = field(init=False)",
          "233:     input_trans_stack: list[input.KeymapTranslator] = field(default_factory=list)",
          "234:     screeninfo: list[tuple[int, list[int]]] = field(init=False)",
          "235:     cxy: tuple[int, int] = field(init=False)",
          "236:     lxy: tuple[int, int] = field(init=False)",
          "238:     def __post_init__(self) -> None:",
          "239:         # Enable the use of `insert` without a `prepare` call - necessary to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     screen: list[str] = field(default_factory=list)",
          "240:     calc_screen: CalcScreen = field(init=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:         self.input_trans = input.KeymapTranslator(",
          "244:             self.keymap, invalid_cls=\"invalid-key\", character_cls=\"self-insert\"",
          "245:         )",
          "247:         self.cxy = self.pos2xy()",
          "248:         self.lxy = (self.pos, 0)",
          "250:     def collect_keymap(self) -> tuple[tuple[KeySpec, CommandName], ...]:",
          "251:         return default_keymap",
          "254:         \"\"\"The purpose of this method is to translate changes in",
          "255:         self.buffer into changes in self.screen.  Currently it rips",
          "256:         everything down and starts from scratch, which whilst not",
          "",
          "[Removed Lines]",
          "246:         self.screeninfo = [(0, [0])]",
          "253:     def calc_screen(self) -> list[str]:",
          "",
          "[Added Lines]",
          "250:         self.screeninfo = [(0, [])]",
          "253:         self.calc_screen = self.calc_complete_screen",
          "258:     def append_to_screen(self) -> list[str]:",
          "259:         new_screen = self.screen.copy() or ['']",
          "261:         new_character = self.buffer[-1]",
          "262:         new_character_len = wlen(new_character)",
          "264:         last_line_len = wlen(new_screen[-1])",
          "265:         if last_line_len + new_character_len >= self.console.width:  # We need to wrap here",
          "266:             new_screen[-1] += '\\\\'",
          "267:             self.screeninfo[-1][1].append(1)",
          "268:             new_screen.append(self.buffer[-1])",
          "269:             self.screeninfo.append((0, [new_character_len]))",
          "270:         else:",
          "271:             new_screen[-1] += self.buffer[-1]",
          "272:             self.screeninfo[-1][1].append(new_character_len)",
          "273:         self.cxy = self.pos2xy()",
          "275:         # Reset the function that is used for completing the screen",
          "276:         self.calc_screen = self.calc_complete_screen",
          "277:         return new_screen",
          "279:     def calc_complete_screen(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "563:     def refresh(self) -> None:",
          "564:         \"\"\"Recalculate and refresh the screen.\"\"\"",
          "565:         # this call sets up self.cxy, so call it first.",
          "568:         self.dirty = False",
          "570:     def do_cmd(self, cmd: tuple[str, list[str]]) -> None:",
          "",
          "[Removed Lines]",
          "566:         screen = self.calc_screen()",
          "567:         self.console.refresh(screen, self.cxy)",
          "",
          "[Added Lines]",
          "592:         self.screen = self.calc_screen()",
          "593:         self.console.refresh(self.screen, self.cxy)",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py": [
          "File: Lib/_pyrepl/unix_console.py -> Lib/_pyrepl/unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:         self.__show_cursor()",
          "287:         self.move_cursor(cx, cy)",
          "288:         self.flushoutput()",
          "",
          "[Removed Lines]",
          "286:         self.screen = screen",
          "",
          "[Added Lines]",
          "286:         self.screen = screen.copy()",
          "",
          "---------------"
        ]
      }
    }
  ]
}