{
  "cve_id": "CVE-2022-39257",
  "cve_desc": "Matrix iOS SDK allows developers to build iOS apps compatible with Matrix. Prior to version 0.23.19, an attacker cooperating with a malicious homeserver can construct messages appearing to have come from another person. Such messages will be marked with a grey shield on some platforms, but this may be missing in others. This attack is possible due to the matrix-ios-sdk implementing a too permissive key forwarding strategy. The default policy for accepting key forwards has been made more strict in the matrix-ios-sdk version 0.23.19. matrix-ios-sdk will now only accept forwarded keys in response to previously issued requests and only from own, verified devices. The SDK now sets a `trusted` flag on the decrypted message upon decryption, based on whether the key used to decrypt the message was received from a trusted source. Clients need to ensure that messages decrypted with a key with `trusted = false` are decorated appropriately (for example, by showing a warning for such messages). This attack requires coordination between a malicious home server and an attacker, so those who trust their home servers do not need a workaround.",
  "repo": "matrix-org/matrix-ios-sdk",
  "patch_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
  "patch_info": {
    "commit_hash": "5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "repo": "matrix-org/matrix-ios-sdk",
    "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/5ca86c328a5faaab429c240551cb9ca8f0f6262c",
    "files": [
      "CHANGES.md",
      "MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ],
    "message": "Resolve multiple CVEs\n\nCVE-2022-39255\nCVE-2022-39257",
    "before_after_code_files": [
      "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
      "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift",
      "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
      "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h",
      "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h",
      "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
      "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h",
      "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift",
      "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift",
      "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m",
      "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift",
      "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m",
      "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
      "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m",
      "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
    ]
  },
  "patch_diff": {
    "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
      "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "1801:   ECF29BDF264195320053E6D6 /* MXAssertedIdentityModel.h in Headers */ = {isa = PBXBuildFile; fileRef = ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1802:   ECF29BE52641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1803:   ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */ = {isa = PBXBuildFile; fileRef = ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */; };",
      "1804:   ED1AE92A2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1805:   ED1AE92B2881AC7500D3432A /* MXWarnings.h in Headers */ = {isa = PBXBuildFile; fileRef = ED1AE9292881AC7100D3432A /* MXWarnings.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1806:   ED21F68528104DA2002FF83D /* MXMegolmEncryptionTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1804:   ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1805:   ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */; };",
      "1806:   ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1807:   ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1808:   ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1809:   ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */ = {isa = PBXBuildFile; fileRef = ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */; };",
      "1810:   ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1811:   ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */ = {isa = PBXBuildFile; fileRef = ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1846:   ED5C754928B3E80300D24E85 /* MXLogObjcWrapper.h in Headers */ = {isa = PBXBuildFile; fileRef = ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */; settings = {ATTRIBUTES = (Public, ); }; };",
      "1847:   ED5C95CE2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1848:   ED5C95CF2833E85600843D82 /* MXOlmDeviceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */; };",
      "1849:   ED7019DD2886C24100FC31B9 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D242885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift */; };",
      "1850:   ED7019DE2886C24A00FC31B9 /* MXTrustLevelSourceUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D2F2885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift */; };",
      "1851:   ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED8F1D1B2885909E00F897E7 /* MXDeviceInfoUnitTests.swift */; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1857:   ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1858:   ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */; };",
      "1859:   ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1860:   ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */; };",
      "1861:   ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1862:   ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */; };",
      "1863:   ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1864:   ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */; };",
      "1865:   ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1866:   ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */; };",
      "1867:   ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1868:   ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */; };",
      "1869:   ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1870:   ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */; };",
      "1871:   ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1872:   ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */; };",
      "1873:   ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1874:   ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */; };",
      "1875:   ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1876:   ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */; };",
      "1877:   ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "1878:   ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */; };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2910:   ECF29BD2264194BB0053E6D6 /* MXCallAssertedIdentityEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXCallAssertedIdentityEventContent.m; sourceTree = \"<group>\"; };",
      "2911:   ECF29BDD264195320053E6D6 /* MXAssertedIdentityModel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXAssertedIdentityModel.h; sourceTree = \"<group>\"; };",
      "2912:   ECF29BE42641953C0053E6D6 /* MXAssertedIdentityModel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXAssertedIdentityModel.m; sourceTree = \"<group>\"; };",
      "2913:   ED1AE9292881AC7100D3432A /* MXWarnings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXWarnings.h; sourceTree = \"<group>\"; };",
      "2914:   ED21F68428104DA2002FF83D /* MXMegolmEncryptionTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMegolmEncryptionTests.swift; sourceTree = \"<group>\"; };",
      "2915:   ED2DD111286C450600F06731 /* MXCryptoMachine.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoMachine.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2943:   ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXForwardedRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2944:   ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "2945:   ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomKeyEventContent.m; sourceTree = \"<group>\"; };",
      "2946:   ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXForwardedRoomKeyEventContent.h; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2935:   ED5C753A28B3E80300D24E85 /* MXLogger.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXLogger.m; sourceTree = \"<group>\"; };",
      "2936:   ED5C753B28B3E80300D24E85 /* MXLogObjcWrapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXLogObjcWrapper.h; sourceTree = \"<group>\"; };",
      "2937:   ED5C95CD2833E85600843D82 /* MXOlmDeviceUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXOlmDeviceUnitTests.swift; sourceTree = \"<group>\"; };",
      "2938:   ED7019E42886C32900FC31B9 /* MXSASTransactionV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXSASTransactionV2.swift; sourceTree = \"<group>\"; };",
      "2939:   ED7019E72886C33100FC31B9 /* MXKeyVerificationRequestV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationRequestV2.swift; sourceTree = \"<group>\"; };",
      "2940:   ED7019EA2886C33A00FC31B9 /* MXKeyVerificationManagerV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationManagerV2.swift; sourceTree = \"<group>\"; };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2972:   ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactory.swift; sourceTree = \"<group>\"; };",
      "2973:   ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfo.swift; sourceTree = \"<group>\"; };",
      "2974:   ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXForwardedRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2975:   ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Dictionary.swift; sourceTree = \"<group>\"; };",
      "2976:   ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyEventContentUnitTests.swift; sourceTree = \"<group>\"; };",
      "2977:   ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyInfoFactoryUnitTests.swift; sourceTree = \"<group>\"; };",
      "2978:   ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXMemoryCryptoStore.swift; sourceTree = \"<group>\"; };",
      "2979:   ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXRoomKeyResult.swift; sourceTree = \"<group>\"; };",
      "2980:   ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManager.swift; sourceTree = \"<group>\"; };",
      "2981:   ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXUnrequestedForwardedRoomKeyManagerUnitTests.swift; sourceTree = \"<group>\"; };",
      "2982:   ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXDateProvider.swift; sourceTree = \"<group>\"; };",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3229:     B17B2BDB2369FC81009D6650 /* MXUIKitBackgroundTask.m */,",
      "3230:     EDF1B68F2876CD2C00BBBCEE /* MXTaskQueue.swift */,",
      "3231:     ED1AE9292881AC7100D3432A /* MXWarnings.h */,",
      "3232:    );",
      "3233:    path = Utils;",
      "3234:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3277:     ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3288:     32261B8723C749FB0018F1E2 /* Trust */,",
      "3289:     32A1513B1DAF768D00400192 /* Data */,",
      "3290:     3AC1379326432ED500EE1E74 /* Dehydration */,",
      "3291:     32BBAE642178E99100D85F46 /* KeyBackup */,",
      "3292:     32FA10B21FA1C28100E54233 /* KeySharing */,",
      "3293:     3A108A382580E979005EEBE9 /* KeyProvider */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3337:     ED6DAC0428C771D500ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4318:     32FA10BF1FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.h */,",
      "4319:     32FA10C01FA1C9EE00E54233 /* MXOutgoingRoomKeyRequestManager.m */,",
      "4320:     32A30B161FB4813400C8309E /* MXIncomingRoomKeyRequestManager.h */,",
      "4321:     32A30B171FB4813400C8309E /* MXIncomingRoomKeyRequestManager.m */,",
      "4322:     ED44F01328180EAB00452A5D /* MXSharedHistoryKeyManager.swift */,",
      "4323:     EDBCF335281A8AB900ED5044 /* MXSharedHistoryKeyService.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4368:     ED6DAC1A28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift */,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4329:   32FA10C31FA1C9F700E54233 /* Data */ = {",
      "4330:    isa = PBXGroup;",
      "4331:    children = (",
      "4332:     32F945F21FAB83D900622468 /* MXIncomingRoomKeyRequest.h */,",
      "4333:     32F945F31FAB83D900622468 /* MXIncomingRoomKeyRequest.m */,",
      "4334:     32F945F41FAB83D900622468 /* MXIncomingRoomKeyRequestCancellation.h */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4380:     ED01915128C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h */,",
      "4381:     ED01914E28C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m */,",
      "4382:     ED01914F28C64E0400ED3A69 /* MXRoomKeyEventContent.h */,",
      "4383:     ED01915028C64E0400ED3A69 /* MXRoomKeyEventContent.m */,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5127:     ED8F1D1428857FD300F897E7 /* CrossSigning */,",
      "5128:     ED8F1D2E2885AAEB00F897E7 /* Trust */,",
      "5129:     ED8F1D292885A7DF00F897E7 /* Devices */,",
      "5130:     ED44F01628180F1300452A5D /* KeySharing */,",
      "5131:     ED35652A281150230002BF6A /* Data */,",
      "5132:     ED21F67B28104BA1002FF83D /* Algorithms */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5182:     ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5178:   ED35652A281150230002BF6A /* Data */ = {",
      "5179:    isa = PBXGroup;",
      "5180:    children = (",
      "5181:     ED35652B281150310002BF6A /* MXOlmInboundGroupSessionUnitTests.swift */,",
      "5182:     ED35652E281153480002BF6A /* MXMegolmSessionDataUnitTests.swift */,",
      "5183:    );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5234:     ED6DAC1328C78D3700ECDCB6 /* Store */,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5187:   ED44F01628180F1300452A5D /* KeySharing */ = {",
      "5188:    isa = PBXGroup;",
      "5189:    children = (",
      "5190:     ED44F01728180F1C00452A5D /* MXSharedHistoryKeyManagerUnitTests.swift */,",
      "5191:    );",
      "5192:    path = KeySharing;",
      "5193:    sourceTree = \"<group>\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5244:     ED6DAC0528C77E0600ECDCB6 /* Data */,",
      "5246:     ED6DAC1D28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift */,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5206:    path = Logs;",
      "5207:    sourceTree = \"<group>\";",
      "5208:   };",
      "5209:   ED7019ED2886CA6C00FC31B9 /* Verification */ = {",
      "5210:    isa = PBXGroup;",
      "5211:    children = (",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5265:   ED6DAC0428C771D500ECDCB6 /* RoomKeys */ = {",
      "5266:    isa = PBXGroup;",
      "5267:    children = (",
      "5268:     ED6DAC0128C76F0A00ECDCB6 /* MXRoomKeyInfo.swift */,",
      "5269:     ED6DAC1728C799E300ECDCB6 /* MXRoomKeyResult.swift */,",
      "5270:     ED6DABFB28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift */,",
      "5271:    );",
      "5272:    path = RoomKeys;",
      "5273:    sourceTree = \"<group>\";",
      "5274:   };",
      "5275:   ED6DAC0528C77E0600ECDCB6 /* Data */ = {",
      "5276:    isa = PBXGroup;",
      "5277:    children = (",
      "5278:     ED6DAC0628C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift */,",
      "5279:     ED6DAC0C28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift */,",
      "5280:    );",
      "5281:    path = Data;",
      "5282:    sourceTree = \"<group>\";",
      "5283:   };",
      "5284:   ED6DAC0F28C7889A00ECDCB6 /* RoomKeys */ = {",
      "5285:    isa = PBXGroup;",
      "5286:    children = (",
      "5287:     ED6DAC1028C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift */,",
      "5288:    );",
      "5289:    path = RoomKeys;",
      "5290:    sourceTree = \"<group>\";",
      "5291:   };",
      "5292:   ED6DAC1328C78D3700ECDCB6 /* Store */ = {",
      "5293:    isa = PBXGroup;",
      "5294:    children = (",
      "5295:     ED6DAC1428C78D4000ECDCB6 /* MXMemoryCryptoStore.swift */,",
      "5296:    );",
      "5297:    path = Store;",
      "5298:    sourceTree = \"<group>\";",
      "5299:   };",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5365:    isa = PBXGroup;",
      "5366:    children = (",
      "5367:     3259D0072603705300C365DB /* Array.swift */,",
      "5368:     F08B8D5A1E014711006171A8 /* NSData+MatrixSDK.h */,",
      "5369:     F08B8D5B1E014711006171A8 /* NSData+MatrixSDK.m */,",
      "5370:     3259D02226037A7200C365DB /* NSDictionary.swift */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5459:     ED6DAC0928C784AE00ECDCB6 /* Dictionary.swift */,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5704:     326056851C76FDF2009D44AD /* MXRoomEventTimeline.h in Headers */,",
      "5705:     3A59A49D25A7A16F00DDA1FC /* MXOlmOutboundGroupSession.h in Headers */,",
      "5706:     32AF927F240EA0190008A0FD /* MXSecretShareManager.h in Headers */,",
      "5707:     321CFDEE225264C4004D31DF /* NSArray+MatrixSDK.h in Headers */,",
      "5708:     1838928827031D1D003F0C4F /* MXSendReplyEventStringLocalizerProtocol.h in Headers */,",
      "5709:     B11BD44822CB56790064D8B0 /* MXReplyEventParser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5799:     ED01915828C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5731:     32DC15D01A8CF7AE006F9AD3 /* MXNotificationCenter.h in Headers */,",
      "5732:     3275FD9C21A6B60B00B9C13D /* MXLoginPolicy.h in Headers */,",
      "5733:     EC05473425FF8A3C0047ECD7 /* MXVirtualRoomInfo.h in Headers */,",
      "5734:     F0173EAC1FCF0E8900B5F6A3 /* MXGroup.h in Headers */,",
      "5735:     32D2CC0523422462002BD8CA /* MX3PidAddSession.h in Headers */,",
      "5736:     329FB17F1A0B665800A5E88E /* MXUser.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5827:     ED01915428C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "6008:     B14EF3202397E90400758AF0 /* MXKeyBackupPassword.h in Headers */,",
      "6009:     B14EF3212397E90400758AF0 /* MXRestClient.h in Headers */,",
      "6010:     324DD2B2246BDC6800377005 /* MXSecretStorage_Private.h in Headers */,",
      "6011:     32B0E33A23A2989A0054FF1A /* MXEventReferenceChunk.h in Headers */,",
      "6012:     B1EE98C72804697400AB63F0 /* MXBeacon.h in Headers */,",
      "6013:     B14EF3222397E90400758AF0 /* MXKeyVerificationManager.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6105:     ED01915928C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "6053:     EC60EE07265CFFF400B39A4E /* MXGroupSyncProfile.h in Headers */,",
      "6054:     EC11658E270F3ABF0089FA56 /* RLMRealm+MatrixSDK.h in Headers */,",
      "6055:     324AAC7E2399143400380A66 /* MXKeyVerificationCancel.h in Headers */,",
      "6056:     B14EF3372397E90400758AF0 /* MXRoomTombStoneContent.h in Headers */,",
      "6057:     3274538B23FD918800438328 /* MXKeyVerificationByToDeviceRequest.h in Headers */,",
      "6058:     B14EF3382397E90400758AF0 /* MXFilterObject.h in Headers */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6151:     ED01915528C64E0400ED3A69 /* MXRoomKeyEventContent.h in Headers */,",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "6470:     3275FD9D21A6B60B00B9C13D /* MXLoginPolicy.m in Sources */,",
      "6471:     327F8DB31C6112BA00581CA3 /* MXRoomThirdPartyInvite.m in Sources */,",
      "6472:     B17982FC2119E4A2001FD722 /* MXRoomPowerLevels.m in Sources */,",
      "6473:     B146D4E421A5AEF200D8C2C6 /* MXRealmMediaScanMapper.m in Sources */,",
      "6474:     B146D4E321A5AEF200D8C2C6 /* MXRealmMediaScan.m in Sources */,",
      "6475:     ED5C754628B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6569:     ED6DAC0228C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "6487:     B1136965230AC9D900E2B2FA /* MXIdentityService.m in Sources */,",
      "6488:     66836AB727CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "6489:     B11BD44922CB56790064D8B0 /* MXReplyEventParser.m in Sources */,",
      "6490:     ED8F1D3B2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "6491:     EC0B941127184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "6492:     EDBCF339281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6587:     ED01915228C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "6598:     B1F04B1A2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "6599:     021AFBA52179E91900742B2C /* MXEncryptedContentKey.m in Sources */,",
      "6600:     32F634AC1FC5E3480054EF49 /* MXEventDecryptionResult.m in Sources */,",
      "6601:     327137281A24D50A00DB6757 /* MXMyUser.m in Sources */,",
      "6602:     ECDA763B27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "6603:     EC0B94242718E3EE00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6699:     ED01915628C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6640:     A780625027B2CE74005780C0 /* FileManager+AppGroupContainer.swift in Sources */,",
      "6641:     9274AFE91EE580240009BEB6 /* MXCallKitAdapter.m in Sources */,",
      "6642:     3274538C23FD918800438328 /* MXKeyVerificationByToDeviceRequest.m in Sources */,",
      "6643:     ECB6FA952683811800A941E4 /* MXiOSAudioOutputRouter.swift in Sources */,",
      "6644:     EC131B0A2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "6645:     EC1848C52685F64D00865E16 /* MXiOSAudioOutputRoute.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6742:     ED6DAC1828C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6653:     EC383BA5253DE6C9002FBBE6 /* MXSyncResponseStore.swift in Sources */,",
      "6654:     32CEEF4523AD2A6C0039BA98 /* MXCrossSigningKey.m in Sources */,",
      "6655:     327E9AF02289C61100A98BC1 /* MXAggregations.m in Sources */,",
      "6656:     B18B0E4A25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "6657:     EDD578E52881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "6658:     EC2EACFF266625170038B61F /* MXRoomLastMessage.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6756:     ED6DAC1B28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6679:     32A31BC920D401FC005916C7 /* MXRoomFilter.m in Sources */,",
      "6680:     B190AC812833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "6681:     EC11658F270F3ABF0089FA56 /* RLMRealm+MatrixSDK.m in Sources */,",
      "6682:     32A151471DAF7C0C00400192 /* MXDeviceInfo.m in Sources */,",
      "6683:     ECDA764E27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "6684:     321CFDEB22525DEE004D31DF /* MXIncomingSASTransaction.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6783:     ED6DAC0A28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6754:     B146D47B21A5958400D8C2C6 /* MXAntivirusScanStatusFormatter.m in Sources */,",
      "6755:     EC8A53DE25B1BCC6004E0802 /* MXThirdpartyProtocolsResponse.m in Sources */,",
      "6756:     32133022228BF7BC0070BA9B /* MXReactionCountChange.m in Sources */,",
      "6757:     32A151491DAF7C0C00400192 /* MXKey.m in Sources */,",
      "6758:     324DD2AE246AEB7B00377005 /* MXSecretStoragePassphrase.m in Sources */,",
      "6759:     ECB5D98C2552C9B4000AD89C /* MXStopwatch.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6859:     ED6DAC2228C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6777:     3291D4D51A68FFEB00C3BA41 /* MXFileRoomStore.m in Sources */,",
      "6778:     329FB1801A0B665800A5E88E /* MXUser.m in Sources */,",
      "6779:     324AAC73239913AD00380A66 /* MXKeyVerificationDone.m in Sources */,",
      "6780:     B11556EE230C45C600B2A2CF /* MXIdentityServerRestClient.swift in Sources */,",
      "6781:     321CFDE722525A49004D31DF /* MXSASTransaction.m in Sources */,",
      "6782:     32720D9D222EAA6F0086FFF5 /* MXDiscoveredClientConfig.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6883:     ED6DABFC28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6891:     EC51019D26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "6892:     EDB4209527DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "6893:     EC40385D28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "6894:     3265CB3B1A151C3800E24B2F /* MXRoomStateTests.m in Sources */,",
      "6895:     ED8F1D302885AB0300F897E7 /* MXTrustLevelSourceUnitTests.swift in Sources */,",
      "6896:     B135066927EA100000BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6998:     ED6DAC0728C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "6901:     324BE45B1E3FA7A8008D99D4 /* MXMegolmExportEncryptionUnitTests.m in Sources */,",
      "6902:     327E9ACF2284783E00A98BC1 /* MXEventAnnotationUnitTests.swift in Sources */,",
      "6903:     EC40386128A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "6904:     32EEA84A2603FDD60041425B /* MXResponseUnitTests.swift in Sources */,",
      "6905:     32322A481E57264E005DD155 /* MXSelfSignedHomeserverTests.m in Sources */,",
      "6906:     325653831A2E14ED00CC0423 /* MXStoreTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7009:     ED6DAC0D28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "6911:     32B477852638133C00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "6912:     ECB6FA8E267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "6913:     ED7019F52886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "6914:     3A108E6725826F52005EEBE9 /* MXKeyProviderUnitTests.m in Sources */,",
      "6915:     3A858DE8275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "6916:     EC116593270FB6970089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7020:     ED6DAC1128C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "6925:     EDF4678727E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "6926:     EC746C59274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "6927:     32A31BC120D3F4C4005916C7 /* MXFilterTests.m in Sources */,",
      "6928:     32B477842638133C00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "6929:     32B0E3E423A384D40054FF1A /* MXAggregatedReferenceTests.m in Sources */,",
      "6930:     32D5D16323E400A600E3E37C /* MXRoomSummaryTrustTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7035:     ED6DAC1528C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "6952:     EDE1B13B28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "6953:     EC746C56274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "6954:     ED8F1D252885A39800F897E7 /* MXCrossSigningInfoSourceUnitTests.swift in Sources */,",
      "6955:     32A27D1F19EC335300BAFADE /* MXRoomTests.m in Sources */,",
      "6956:     32D8CAC219DEE6ED002AF8A0 /* MXRestClientNoAuthAPITests.m in Sources */,",
      "6957:     32FCAB4D19E578860049C555 /* MXRestClientTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7063:     ED6DAC1E28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "7069:     B14EF1EF2397E90400758AF0 /* MXIdentityService.m in Sources */,",
      "7070:     ECF29BE62641953C0053E6D6 /* MXAssertedIdentityModel.m in Sources */,",
      "7071:     EC8A53C625B1BC77004E0802 /* MXTurnServerResponse.m in Sources */,",
      "7072:     B14EF1F02397E90400758AF0 /* MXReplyEventParser.m in Sources */,",
      "7073:     B14EF1F12397E90400758AF0 /* MXFileStore.m in Sources */,",
      "7074:     ED5C754728B3E80300D24E85 /* MXLogger.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7181:     ED6DAC0328C76F0A00ECDCB6 /* MXRoomKeyInfo.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "7086:     3A108A8125810C96005EEBE9 /* MXKeyData.m in Sources */,",
      "7087:     66836AB827CFA17200515780 /* MXEventStreamService.swift in Sources */,",
      "7088:     3A59A4A025A7A16F00DDA1FC /* MXOlmOutboundGroupSession.m in Sources */,",
      "7089:     ED8F1D3C2885BB2D00F897E7 /* MXCryptoProtocols.swift in Sources */,",
      "7090:     EC0B941227184E8A00B4D440 /* MXRoomSummaryMO.swift in Sources */,",
      "7091:     EDBCF33A281A8D3D00ED5044 /* MXSharedHistoryKeyService.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7199:     ED01915328C64E0400ED3A69 /* MXForwardedRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "7197:     B1F04B1B2812A4E000103EBE /* MXBeaconInfoSummaryProtocol.swift in Sources */,",
      "7198:     EC60EDDD265CFF0600B39A4E /* MXInvitedRoomSync.m in Sources */,",
      "7199:     B14EF2292397E90400758AF0 /* MXRealmEventScanMapper.m in Sources */,",
      "7200:     ECDA763C27B6B74C000C48CF /* MXCapabilities.m in Sources */,",
      "7201:     EC0B94252718E3EF00B4D440 /* MXCoreDataRoomListDataFetcher.swift in Sources */,",
      "7202:     B14EF22A2397E90400758AF0 /* MXReplyEventFormattedBodyParts.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7311:     ED01915728C64E0400ED3A69 /* MXRoomKeyEventContent.m in Sources */,",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "7239:     B14EF23B2397E90400758AF0 /* MXKeyBackupData.m in Sources */,",
      "7240:     B14EF23C2397E90400758AF0 /* MXJSONModels.m in Sources */,",
      "7241:     EC8A538E25B1BC77004E0802 /* MXCallSessionDescription.m in Sources */,",
      "7242:     EC131B0B2758D56600712964 /* MXThreadNotificationsCount.swift in Sources */,",
      "7243:     B14EF23D2397E90400758AF0 /* MXCallManager.m in Sources */,",
      "7244:     B14EF23E2397E90400758AF0 /* MXPeekingRoom.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7354:     ED6DAC1928C799E300ECDCB6 /* MXRoomKeyResult.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "7252:     EC8A53A625B1BC77004E0802 /* MXCallInviteEventContent.m in Sources */,",
      "7253:     ECD2899226EB3B3400F268CF /* MXRoomListDataFetcher.swift in Sources */,",
      "7254:     B18B0E5025FB783F00E32151 /* MXSpaceService.swift in Sources */,",
      "7255:     B14EF2412397E90400758AF0 /* MXRoomFilter.m in Sources */,",
      "7256:     EDD578E62881C37C006739DD /* MXCrossSigningInfoSource.swift in Sources */,",
      "7257:     EC8A53D925B1BCC6004E0802 /* MXThirdPartyProtocolInstance.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7368:     ED6DAC1C28C79AA300ECDCB6 /* MXUnrequestedForwardedRoomKeyManager.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "7278:     B135066F27EA44C800BD3276 /* MXLocationServiceError.swift in Sources */,",
      "7279:     B190AC822833FA8900D6F0C4 /* MXBeaconInfoSummaryRealmStore.swift in Sources */,",
      "7280:     B14EF24B2397E90400758AF0 /* MXServiceTermsRestClient.m in Sources */,",
      "7281:     EC1165C527107E330089FA56 /* MXRoomListDataFilterOptions.swift in Sources */,",
      "7282:     3A858DE227528EEB006322C1 /* MXHomeserverCapabilitiesService.swift in Sources */,",
      "7283:     ECDA764F27BA963D000C48CF /* MXBooleanCapability.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7395:     ED6DAC0B28C784AE00ECDCB6 /* Dictionary.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "7353:     B14EF26B2397E90400758AF0 /* MXMegolmBackupCreationInfo.m in Sources */,",
      "7354:     B14EF26C2397E90400758AF0 /* MXRoom.m in Sources */,",
      "7355:     B14EF26D2397E90400758AF0 /* NSData+MatrixSDK.m in Sources */,",
      "7356:     EC383BB22540688E002FBBE6 /* MXBackgroundStore.swift in Sources */,",
      "7357:     B14EF26E2397E90400758AF0 /* MXFileRoomStore.m in Sources */,",
      "7358:     EC60ED9D265CFE1700B39A4E /* MXRoomSyncState.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7471:     ED6DAC2128C7A51400ECDCB6 /* MXDateProvider.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7376:     B18B0E4B25FB783B00E32151 /* MXSpaceCreationParameters.swift in Sources */,",
      "7377:     B14EF2752397E90400758AF0 /* MXResponse.swift in Sources */,",
      "7378:     B14EF2772397E90400758AF0 /* MXDecryptionResult.m in Sources */,",
      "7379:     B14EF2782397E90400758AF0 /* MXTransactionCancelCode.m in Sources */,",
      "7380:     B14EF2792397E90400758AF0 /* MXEventListener.m in Sources */,",
      "7381:     B1710B202613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7495:     ED6DABFD28C7542800ECDCB6 /* MXRoomKeyInfoFactory.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7490:     EC51019E26C41981007D6D88 /* MXSyncResponseUnitTests.swift in Sources */,",
      "7491:     EDB4209627DF822B0036AF39 /* MXEventsByTypesEnumeratorOnArrayTests.swift in Sources */,",
      "7492:     EC40385E28A16EDA0067D5B8 /* MXAes256KeyBackupTests.m in Sources */,",
      "7493:     32B477AA2638186000EA5800 /* MXHTTPAdditionalHeadersUnitTests.m in Sources */,",
      "7494:     B135066A27EA100100BD3276 /* MXBeaconInfoUnitTests.swift in Sources */,",
      "7495:     EC0B944727206D0B00B4D440 /* MXCoreDataRoomListDataManagerUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7610:     ED6DAC0828C77E1100ECDCB6 /* MXForwardedRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7500:     B1E09A3E2397FD820057C069 /* MXToolsUnitTests.m in Sources */,",
      "7501:     32B477912638133D00EA5800 /* MXAggregatedEditsUnitTests.m in Sources */,",
      "7502:     EC40386228A1A3830067D5B8 /* MXBaseKeyBackupTests.m in Sources */,",
      "7503:     B1E09A1E2397FCE90057C069 /* MXCryptoShareTests.m in Sources */,",
      "7504:     B1E09A422397FD820057C069 /* MXCryptoTests.m in Sources */,",
      "7505:     B1E09A382397FD7D0057C069 /* MXUserTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7621:     ED6DAC0E28C784E200ECDCB6 /* MXRoomKeyEventContentUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7510:     32AF9293241112850008A0FD /* MXCryptoSecretShareTests.m in Sources */,",
      "7511:     B1E09A462397FD990057C069 /* MXMediaScanStoreUnitTests.m in Sources */,",
      "7512:     ED7019F62886CA6C00FC31B9 /* MXKeyVerificationRequestV2UnitTests.swift in Sources */,",
      "7513:     ECB6FA8F267CFF4300A941E4 /* MXCredentialsUnitTests.swift in Sources */,",
      "7514:     3A858DE9275511A4006322C1 /* MXRoomAliasAvailabilityCheckerResultTests.swift in Sources */,",
      "7515:     ED7019DF2886C25600FC31B9 /* MXDeviceInfoUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7632:     ED6DAC1228C788A700ECDCB6 /* MXRoomKeyInfoFactoryUnitTests.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "7524:     B1B4431A283D00CA00BB26F4 /* MXMegolmDecryptionUnitTests.swift in Sources */,",
      "7525:     EDF4678827E3331D00435913 /* EventsEnumeratorDataSourceStub.swift in Sources */,",
      "7526:     EC746C5A274E61EF002AD24C /* MXThreadingServiceTests.swift in Sources */,",
      "7527:     B1E09A222397FCE90057C069 /* MXRoomSummaryTests.m in Sources */,",
      "7528:     B1E09A3A2397FD820057C069 /* MXStoreTests.m in Sources */,",
      "7529:     B1E09A342397FD750057C069 /* MXRoomStateDynamicTests.m in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7647:     ED6DAC1628C78D4000ECDCB6 /* MXMemoryCryptoStore.swift in Sources */,",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "7551:     EDE1B13C28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */,",
      "7552:     A816248525F60D0300A46F05 /* MXDeviceListOperationsPoolUnitTests.swift in Sources */,",
      "7553:     EC746C57274E5197002AD24C /* MXThreadingServiceUnitTests.swift in Sources */,",
      "7554:     B1E09A312397FD750057C069 /* MXSessionTests.m in Sources */,",
      "7555:     32B477902638133D00EA5800 /* MXAggregatedReferenceUnitTests.m in Sources */,",
      "7556:     EC116598270FCA8B0089FA56 /* MXBackgroundTaskUnitTests.swift in Sources */,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7675:     ED6DAC1F28C79D2000ECDCB6 /* MXUnrequestedForwardedRoomKeyManagerUnitTests.swift in Sources */,",
      "",
      "---------------"
    ],
    "MatrixSDK/Background/MXBackgroundSyncService.swift||MatrixSDK/Background/MXBackgroundSyncService.swift": [
      "File: MatrixSDK/Background/MXBackgroundSyncService.swift -> MatrixSDK/Background/MXBackgroundSyncService.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:     }",
      "566:     private func handleToDeviceEvent(_ event: MXEvent) {",
      "567:         if event.isEncrypted {",
      "568:             do {",
      "569:                 try decryptEvent(event)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "568:         guard MXTools.isSupportedToDeviceEvent(event) else {",
      "569:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ignore unsupported event\")",
      "570:             return",
      "571:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "573:             }",
      "574:         }",
      "578:             return",
      "579:         }",
      "586:             return",
      "587:         }",
      "620:         }",
      "631:     }",
      "633:     private func updateBackgroundServiceStoresIfNeeded() {",
      "",
      "[Removed Lines]",
      "576:         guard let content = event.content else {",
      "577:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event content: \\(String(describing: event.jsonDictionary()))\")",
      "581:         guard let roomId = content[\"room_id\"] as? String,",
      "582:             let sessionId = content[\"session_id\"] as? String,",
      "583:             let sessionKey = content[\"session_key\"] as? String,",
      "584:             var senderKey = event.senderKey else {",
      "585:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: incomplete event: \\(String(describing: event.jsonDictionary()))\")",
      "589:         var forwardingKeyChain: [String] = []",
      "590:         var exportFormat: Bool = false",
      "591:         var keysClaimed: [String: String] = [:]",
      "593:         switch event.eventType {",
      "594:         case .roomKey:",
      "595:             keysClaimed = event.keysClaimed as! [String: String]",
      "596:         case .roomForwardedKey:",
      "597:             exportFormat = true",
      "599:             if let array = content[\"forwarding_curve25519_key_chain\"] as? [String] {",
      "600:                 forwardingKeyChain = array",
      "601:             }",
      "602:             forwardingKeyChain.append(senderKey)",
      "604:             if let senderKeyInContent = content[\"sender_key\"] as? String {",
      "605:                 senderKey = senderKeyInContent",
      "606:             } else {",
      "607:                 return",
      "608:             }",
      "610:             guard let ed25519Key = event.content[\"sender_claimed_ed25519_key\"] as? String else {",
      "611:                 return",
      "612:             }",
      "614:             keysClaimed = [",
      "615:                 \"ed25519\": ed25519Key",
      "616:             ]",
      "617:         default:",
      "618:             MXLog.debug(\"[MXBackgroundSyncService] handleToDeviceEvent: ERROR: Not supported type: \\(event.eventType)\")",
      "619:             return",
      "622:         let sharedHistory = (content[kMXSharedHistoryKeyName] as? Bool) ?? false",
      "623:         olmDevice.addInboundGroupSession(sessionId,",
      "624:                                          sessionKey: sessionKey,",
      "625:                                          roomId: roomId,",
      "626:                                          senderKey: senderKey,",
      "627:                                          forwardingCurve25519KeyChain: forwardingKeyChain,",
      "628:                                          keysClaimed: keysClaimed,",
      "629:                                          exportFormat: exportFormat,",
      "630:                                          sharedHistory: sharedHistory)",
      "",
      "[Added Lines]",
      "582:         guard let userId = credentials.userId else {",
      "583:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot get userId\")",
      "587:         let factory = MXRoomKeyInfoFactory(myUserId: userId, store: cryptoStore)",
      "588:         guard let key = factory.roomKey(for: event) else {",
      "589:             MXLog.error(\"[MXBackgroundSyncService] handleToDeviceEvent: Cannot create megolm key from event\")",
      "593:         switch key.type {",
      "594:         case .safe:",
      "595:             olmDevice.addInboundGroupSession(",
      "596:                 key.info.sessionId,",
      "597:                 sessionKey: key.info.sessionKey,",
      "598:                 roomId: key.info.roomId,",
      "599:                 senderKey: key.info.senderKey,",
      "600:                 forwardingCurve25519KeyChain: key.info.forwardingKeyChain,",
      "601:                 keysClaimed: key.info.keysClaimed,",
      "602:                 exportFormat: key.info.exportFormat,",
      "603:                 sharedHistory: key.info.sharedHistory,",
      "604:                 untrusted: key.type != .safe",
      "605:             )",
      "606:         case .unsafe:",
      "607:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unsafe keys\")",
      "608:         case .unrequested:",
      "609:             MXLog.warning(\"[MXBackgroundSyncService] handleToDeviceEvent: Ignoring unrequested keys\")",
      "",
      "---------------"
    ],
    "MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift||MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift": [
      "File: MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift -> MatrixSDK/Contrib/Swift/JSONModels/MXEvent.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:     case keyVerificationMac",
      "74:     case keyVerificationCancel",
      "75:     case keyVerificationDone",
      "76:     case taggedEvents",
      "77:     case spaceChild",
      "78:     case spaceOrder",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     case secretRequest",
      "77:     case secretSend",
      "78:     case secretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "132:         case .keyVerificationMac: return kMXEventTypeStringKeyVerificationMac",
      "133:         case .keyVerificationCancel: return kMXEventTypeStringKeyVerificationCancel",
      "134:         case .keyVerificationDone: return kMXEventTypeStringKeyVerificationDone",
      "135:         case .taggedEvents: return kMXEventTypeStringTaggedEvents",
      "136:         case .spaceChild: return kMXEventTypeStringSpaceChild",
      "137:         case .spaceOrder: return kMXEventTypeStringSpaceOrderMSC3230",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:         case .secretRequest: return kMXEventTypeStringSecretRequest",
      "139:         case .secretSend: return kMXEventTypeStringSecretSend",
      "140:         case .secretStorageDefaultKey: return kMXEventTypeStringSecretStorageDefaultKey",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "151:     }",
      "153:     public init(identifier: String) {",
      "156:         if let type = events.first(where: { $0.identifier == identifier }) {",
      "157:             self = type",
      "",
      "[Removed Lines]",
      "154:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "[Added Lines]",
      "160:         let events: [MXEventType] = [.roomName, .roomTopic, .roomAvatar, .roomMember, .roomCreate, .roomJoinRules, .roomPowerLevels, .roomAliases, .roomCanonicalAlias, .roomEncrypted, .roomEncryption, .roomGuestAccess, .roomHistoryVisibility, .roomKey, .roomForwardedKey, .roomKeyRequest, .roomMessage, .roomMessageFeedback, .roomRedaction, .roomThirdPartyInvite, .roomTag, .presence, .typing, .callInvite, .callCandidates, .callAnswer, .callSelectAnswer, .callHangup, .callReject, .callNegotiate, .callReplaces, .callRejectReplacement, .callAssertedIdentity, .callAssertedIdentityUnstable, .reaction, .receipt, .roomTombStone, .keyVerificationStart, .keyVerificationAccept, .keyVerificationKey, .keyVerificationMac, .keyVerificationCancel, .keyVerificationDone, .secretRequest, .secretSend, .secretStorageDefaultKey, .taggedEvents, .spaceChild, .spaceOrder, .pollStart, .pollResponse, .pollEnd, .beaconInfo, .beacon]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/MXDecrypting.h||MatrixSDK/Crypto/Algorithms/MXDecrypting.h": [
      "File: MatrixSDK/Crypto/Algorithms/MXDecrypting.h -> MatrixSDK/Crypto/Algorithms/MXDecrypting.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: #import \"MXEventDecryptionResult.h\"",
      "24: #import \"MXIncomingRoomKeyRequest.h\"",
      "29: @protocol MXDecrypting <NSObject>",
      "",
      "[Removed Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession;",
      "",
      "[Added Lines]",
      "26: @class MXCrypto, MXOlmInboundGroupSession, MXRoomKeyResult;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: - (MXEventDecryptionResult *)decryptEvent:(MXEvent*)event inTimeline:(NSString*)timeline;",
      "63: - (void)onRoomKeyEvent:(MXEvent*)event;",
      "66:  Notification that a room key has been imported.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  Handle a key event.",
      "61:  @param event the key event.",
      "66:  Handle new room key",
      "68:  @param key the domain object with key details and safety",
      "70: - (void)onRoomKey:(MXRoomKeyResult*)key;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #import \"MXTools.h\"",
      "27: #import \"MatrixSDKSwiftHeader.h\"",
      "28: #import \"MXSharedHistoryKeyService.h\"",
      "30: @interface MXMegolmDecryption ()",
      "31: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:         NSMutableDictionary<NSString* /* timelineId */,",
      "42:             NSMutableDictionary<NSString* /* eventId */, MXEvent*>*>*> *pendingEvents;",
      "43: }",
      "44: @end",
      "46: @implementation MXMegolmDecryption",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: @property (nonatomic, strong) MXRoomKeyInfoFactory *roomKeyInfoFactory;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:     {",
      "60:         crypto = theCrypto;",
      "61:         olmDevice = theCrypto.olmDevice;",
      "62:         pendingEvents = [NSMutableDictionary dictionary];",
      "63:     }",
      "64:     return self;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:         _roomKeyInfoFactory = [[MXRoomKeyInfoFactory alloc] initWithMyUserId:crypto.mxSession.credentials.userId store:crypto.store];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192: - (void)onRoomKeyEvent:(MXEvent *)event",
      "193: {",
      "209:     {",
      "211:         return;",
      "212:     }",
      "259:     }",
      "272:     [crypto.backup maybeSendKeyBackup];",
      "274:     MXWeakify(self);",
      "276:         MXStrongifyAndReturnIfNil(self);",
      "278:         if (allDecrypted)",
      "279:         {",
      "281:             [self->crypto cancelRoomKeyRequest:@{",
      "286:                                                  }];",
      "287:         }",
      "288:     }];",
      "",
      "[Removed Lines]",
      "194:     NSDictionary *content = event.content;",
      "195:     NSString *roomId, *sessionId, *sessionKey;",
      "197:     MXJSONModelSetString(roomId, content[@\"room_id\"]);",
      "198:     MXJSONModelSetString(sessionId, content[@\"session_id\"]);",
      "199:     MXJSONModelSetString(sessionKey, content[@\"session_key\"]);",
      "201:     if (!roomId || !sessionId || !sessionKey)",
      "202:     {",
      "203:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event is missing fields\");",
      "204:         return;",
      "205:     }",
      "207:     NSString *senderKey = event.senderKey;",
      "208:     if (!senderKey)",
      "210:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event has no sender key (not encrypted?)\");",
      "214:     NSArray<NSString*> *forwardingKeyChain;",
      "215:     BOOL exportFormat = NO;",
      "216:     NSDictionary *keysClaimed;",
      "217:     BOOL sharedHistory = NO;",
      "218:     if (content[kMXSharedHistoryKeyName] != nil)",
      "219:     {",
      "220:         MXJSONModelSetBoolean(sharedHistory, content[kMXSharedHistoryKeyName]);",
      "221:     }",
      "223:     if (event.eventType == MXEventTypeRoomForwardedKey)",
      "224:     {",
      "225:         exportFormat = YES;",
      "226:         MXJSONModelSetArray(forwardingKeyChain, content[@\"forwarding_curve25519_key_chain\"]);",
      "227:         if (!forwardingKeyChain)",
      "228:         {",
      "229:             forwardingKeyChain = @[];",
      "230:         }",
      "233:         NSMutableArray *forwardingKeyChain2 = [NSMutableArray arrayWithArray:forwardingKeyChain];",
      "234:         [forwardingKeyChain2 addObject:senderKey];",
      "235:         forwardingKeyChain = forwardingKeyChain2;",
      "237:         MXJSONModelSetString(senderKey, content[@\"sender_key\"]);",
      "238:         if (!senderKey)",
      "239:         {",
      "240:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key event is missing sender_key field\");",
      "241:             return;",
      "242:         }",
      "244:         NSString *ed25519Key;",
      "245:         MXJSONModelSetString(ed25519Key, content[@\"sender_claimed_ed25519_key\"]);",
      "246:         if (!ed25519Key)",
      "247:         {",
      "248:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key_event is missing sender_claimed_ed25519_key field\");",
      "249:             return;",
      "250:         }",
      "252:         keysClaimed = @{",
      "253:                         @\"ed25519\": ed25519Key",
      "254:                         };",
      "255:     }",
      "256:     else",
      "257:     {",
      "258:         keysClaimed = event.keysClaimed;",
      "261:     MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", senderKey, sessionId, event.type);",
      "263:     [olmDevice addInboundGroupSession:sessionId",
      "264:                            sessionKey:sessionKey",
      "265:                                roomId:roomId",
      "266:                             senderKey:senderKey",
      "267:          forwardingCurve25519KeyChain:forwardingKeyChain",
      "268:                           keysClaimed:keysClaimed",
      "269:                          exportFormat:exportFormat",
      "270:                         sharedHistory:sharedHistory];",
      "275:     [self retryDecryption:senderKey sessionId:content[@\"session_id\"] complete:^(BOOL allDecrypted) {",
      "282:                                                  @\"algorithm\": content[@\"algorithm\"],",
      "283:                                                  @\"room_id\": content[@\"room_id\"],",
      "284:                                                  @\"session_id\": content[@\"session_id\"],",
      "285:                                                  @\"sender_key\": senderKey",
      "",
      "[Added Lines]",
      "200:     MXRoomKeyResult *key = [self.roomKeyInfoFactory roomKeyFor:event];",
      "201:     if (!key)",
      "203:         MXLogError(@\"[MXMegolmDecryption] onRoomKeyEvent: Cannot create megolm key from event\");",
      "207:     switch (key.type) {",
      "208:         case MXRoomKeyTypeSafe:",
      "209:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", key.info.senderKey, key.info.sessionId, event.type);",
      "210:             [self onRoomKey:key];",
      "211:             break;",
      "212:         case MXRoomKeyTypeUnsafe:",
      "213:             MXLogWarning(@\"[MXMegolmDecryption] onRoomKeyEvent: Ignoring unsafe key\");",
      "214:             break;",
      "215:         case MXRoomKeyTypeUnrequested:",
      "216:             [crypto handleUnrequestedRoomKeyInfo:key.info senderId:event.sender senderKey:event.senderKey];",
      "217:             break;",
      "218:         default:",
      "219:             MXLogFailureDetails(@\"[MXMegolmDecryption] onRoomKeyEvent: Unknown key type\", @{",
      "220:                 @\"key_type\": @(key.type)",
      "221:             });",
      "222:             break;",
      "224: }",
      "226: - (void)onRoomKey:(MXRoomKeyResult *)key",
      "227: {",
      "228:     MXRoomKeyInfo *keyInfo = key.info;",
      "229:     [olmDevice addInboundGroupSession:keyInfo.sessionId",
      "230:                            sessionKey:keyInfo.sessionKey",
      "231:                                roomId:keyInfo.roomId",
      "232:                             senderKey:keyInfo.senderKey",
      "233:          forwardingCurve25519KeyChain:keyInfo.forwardingKeyChain",
      "234:                           keysClaimed:keyInfo.keysClaimed",
      "235:                          exportFormat:keyInfo.exportFormat",
      "236:                         sharedHistory:keyInfo.sharedHistory",
      "237:                             untrusted:key.type != MXRoomKeyTypeSafe];",
      "242:     [self retryDecryption:keyInfo.senderKey sessionId:keyInfo.sessionId complete:^(BOOL allDecrypted) {",
      "249:                                                  @\"algorithm\": keyInfo.algorithm,",
      "250:                                                  @\"room_id\": keyInfo.roomId,",
      "251:                                                  @\"session_id\": keyInfo.sessionId,",
      "252:                                                  @\"sender_key\": keyInfo.senderKey",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "340:                                                }",
      "341:                                 exportFormat:NO",
      "342:                                sharedHistory:sharedHistory",
      "343:      ];",
      "345:     [crypto.backup maybeSendKeyBackup];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:                                    untrusted:NO",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m||MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m": [
      "File: MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m -> MatrixSDK/Crypto/Algorithms/Olm/MXOlmDecryption.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "224: }",
      "226: - (void)didImportRoomKey:(MXOlmInboundGroupSession *)session",
      "227: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226: - (void)onRoomKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "227: {",
      "229: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: @property (nonatomic) NSArray<MXKeyBackupVersionTrustSignature*> *signatures;",
      "47: @end",
      "",
      "[Removed Lines]",
      "43:  Flag indicating the backup trusted locally.",
      "45: @property (nonatomic, getter=isTrustedLocally) BOOL trustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m||MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m": [
      "File: MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m -> MatrixSDK/Crypto/KeyBackup/Data/MXKeyBackupVersionTrust.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     {",
      "26:         _usable = NO;",
      "27:         _signatures = [NSArray new];",
      "29:     }",
      "30:     return self;",
      "31: }",
      "",
      "[Removed Lines]",
      "28:         _trustedLocally = NO;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m||MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m": [
      "File: MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m -> MatrixSDK/Crypto/KeyBackup/MXKeyBackup.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:         return keyBackupVersionTrust;",
      "1124:     }",
      "1137:     NSDictionary *mySigs = authData.signatures[myUserId];",
      "1138:     NSMutableArray<MXKeyBackupVersionTrustSignature*> *signatures = [NSMutableArray array];",
      "1139:     for (NSString *keyId in mySigs)",
      "",
      "[Removed Lines]",
      "1126:     NSData *privateKey = self.privateKeyFromCryptoStore;",
      "1127:     if (privateKey)",
      "1128:     {",
      "1129:         id<MXKeyBackupAlgorithm> algorithm = [self getOrCreateKeyBackupAlgorithmFor:keyBackupVersion privateKey:privateKey];",
      "1130:         if ([algorithm keyMatches:privateKey error:nil])",
      "1131:         {",
      "1132:             MXLogDebug(@\"[MXKeyBackup] trustForKeyBackupVersionFromCryptoQueue: Backup is trusted locally\");",
      "1133:             keyBackupVersionTrust.trustedLocally = YES;",
      "1134:         }",
      "1135:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1196:             keyBackupVersionTrust.usable = YES;",
      "1197:         }",
      "1198:     }",
      "1201:     return keyBackupVersionTrust;",
      "1202: }",
      "",
      "[Removed Lines]",
      "1199:     keyBackupVersionTrust.usable = keyBackupVersionTrust.usable || keyBackupVersionTrust.isTrustedLocally;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXForwardedRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The Curve25519 key of the device which initiated the session originally",
      "36: @property (nonatomic) NSString *senderKey;",
      "39:  The ID of the session that the key is for",
      "41: @property (nonatomic) NSString *sessionId;",
      "44:  The key to be exchanged",
      "46: @property (nonatomic) NSString *sessionKey;",
      "49:  Chain of Curve25519 keys",
      "51:  It starts out empty, but each time the key is forwarded to another device, the previous sender",
      "52:  in the chain is added to the end of the list.",
      "54:  For example, if the key is forwarded from A to B to C, this field is empty between A and B,",
      "55:  and contains A's Curve25519 key between B and C",
      "57: @property (nonatomic) NSArray<NSString*> *forwardingCurve25519KeyChain;",
      "60:  The Ed25519 key of the device which initiated the session originally",
      "62:  It is 'claimed' because the receiving device has no way to tell that the original room_key actually",
      "63:  came from a device which owns the private part of this key unless they have done device verification.",
      "65: @property (nonatomic) NSString *senderClaimedEd25519Key;",
      "68:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "70: @property (nonatomic) BOOL sharedHistory;",
      "72: @end",
      "74: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXForwardedRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySenderKey = @\"sender_key\";",
      "22: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "23: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: static NSString* const kJSONKeyForwardingCurve25519KeyChain = @\"forwarding_curve25519_key_chain\";",
      "25: static NSString* const kJSONKeySenderClaimedEd25519Key = @\"sender_claimed_ed25519_key\";",
      "27: @implementation MXForwardedRoomKeyEventContent",
      "29: #pragma mark - MXJSONModel",
      "31: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "32: {",
      "33:     MXForwardedRoomKeyEventContent *result = [[MXForwardedRoomKeyEventContent alloc] init];",
      "34:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "35:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "36:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "37:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "38:     MXJSONModelSetString(result.senderKey, JSONDictionary[kJSONKeySenderKey]);",
      "39:     MXJSONModelSetString(result.senderClaimedEd25519Key, JSONDictionary[kJSONKeySenderClaimedEd25519Key]);",
      "40:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey || !result.senderKey || !result.senderClaimedEd25519Key)",
      "41:     {",
      "42:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "43:         return nil;",
      "44:     }",
      "46:     MXJSONModelSetArray(result.forwardingCurve25519KeyChain, JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] ?: @[]);",
      "47:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "49:     return result;",
      "50: }",
      "52: - (NSDictionary *)JSONDictionary",
      "53: {",
      "54:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "55:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "56:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "57:     JSONDictionary[kJSONKeySenderKey] = _senderKey;",
      "58:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "59:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "60:     JSONDictionary[kJSONKeyForwardingCurve25519KeyChain] = _forwardingCurve25519KeyChain;",
      "61:     JSONDictionary[kJSONKeySenderClaimedEd25519Key] = _senderClaimedEd25519Key;",
      "62:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "63:     return JSONDictionary;",
      "64: }",
      "66: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import <MatrixSDK/MatrixSDK.h>",
      "19: NS_ASSUME_NONNULL_BEGIN",
      "21: @interface MXRoomKeyEventContent : MXJSONModel",
      "24:  The encryption algorithm the key in this event is to be used with",
      "26: @property (nonatomic) NSString *algorithm;",
      "29:  The room where the key is used",
      "31: @property (nonatomic) NSString *roomId;",
      "34:  The ID of the session that the key is for",
      "36: @property (nonatomic) NSString *sessionId;",
      "39:  The key to be exchanged",
      "41: @property (nonatomic) NSString *sessionKey;",
      "44:  MSC3061 Identifies keys that were sent when the room's visibility setting was set to `world_readable` or `shared`",
      "46: @property (nonatomic) BOOL sharedHistory;",
      "48: @end",
      "50: NS_ASSUME_NONNULL_END",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m||MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m": [
      "File: MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m -> MatrixSDK/Crypto/KeySharing/Data/MXRoomKeyEventContent.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #import \"MXRoomKeyEventContent.h\"",
      "19: static NSString* const kJSONKeyAlgorithm = @\"algorithm\";",
      "20: static NSString* const kJSONKeyRoomId = @\"room_id\";",
      "21: static NSString* const kJSONKeySessionId = @\"session_id\";",
      "22: static NSString* const kJSONKeySessionKey = @\"session_key\";",
      "24: @implementation MXRoomKeyEventContent",
      "26: #pragma mark - MXJSONModel",
      "28: + (id)modelFromJSON:(NSDictionary *)JSONDictionary",
      "29: {",
      "30:     MXRoomKeyEventContent *result = [MXRoomKeyEventContent new];",
      "31:     MXJSONModelSetString(result.algorithm, JSONDictionary[kJSONKeyAlgorithm]);",
      "32:     MXJSONModelSetString(result.roomId, JSONDictionary[kJSONKeyRoomId]);",
      "33:     MXJSONModelSetString(result.sessionId, JSONDictionary[kJSONKeySessionId]);",
      "34:     MXJSONModelSetString(result.sessionKey, JSONDictionary[kJSONKeySessionKey]);",
      "35:     if (!result.algorithm || !result.roomId || !result.sessionId || !result.sessionKey)",
      "36:     {",
      "37:         MXLogError(@\"[MXRoomKeyEventContent] modelFromJSON: Key event is missing fields\");",
      "38:         return nil;",
      "39:     }",
      "41:     MXJSONModelSetBoolean(result.sharedHistory, JSONDictionary[kMXSharedHistoryKeyName]);",
      "44:     return result;",
      "45: }",
      "47: - (NSDictionary *)JSONDictionary",
      "48: {",
      "49:     NSMutableDictionary *JSONDictionary = [NSMutableDictionary dictionary];",
      "50:     JSONDictionary[kJSONKeyAlgorithm] = _algorithm;",
      "51:     JSONDictionary[kJSONKeyRoomId] = _roomId;",
      "52:     JSONDictionary[kJSONKeySessionId] = _sessionId;",
      "53:     JSONDictionary[kJSONKeySessionKey] = _sessionKey;",
      "54:     JSONDictionary[kMXSharedHistoryKeyName] = @(_sharedHistory);",
      "55:     return JSONDictionary;",
      "56: }",
      "58: @end",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift||MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift": [
      "File: MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift -> MatrixSDK/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManager.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public protocol MXUnrequestedForwardedRoomKeyManagerDelegate: AnyObject {",
      "20:     func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void)",
      "21:     func acceptRoomKey(keyInfo: MXRoomKeyInfo)",
      "22: }",
      "24: @objcMembers",
      "25: public class MXUnrequestedForwardedRoomKeyManager: NSObject {",
      "26:     private typealias RoomId = String",
      "27:     private typealias UserId = String",
      "29:     static let MaximumTimeInterval: TimeInterval = 10 * 60",
      "31:     struct PendingKey {",
      "32:         let info: MXRoomKeyInfo",
      "33:         let date: Date",
      "34:     }",
      "36:     struct RoomInvite {",
      "37:         let roomId: String",
      "38:         let senderId: String",
      "39:         let date: Date",
      "40:     }",
      "42:     public weak var delegate: MXUnrequestedForwardedRoomKeyManagerDelegate?",
      "44:     private let dateProvider: MXDateProviding",
      "45:     private var pendingKeys = [RoomId: [UserId: [PendingKey]]]()",
      "46:     private var roomInvites = [RoomInvite]()",
      "48:     override public init() {",
      "49:         self.dateProvider = MXDateProvider()",
      "50:     }",
      "52:     init(dateProvider: MXDateProviding) {",
      "53:         self.dateProvider = dateProvider",
      "54:     }",
      "56:     public func close() {",
      "57:         pendingKeys = [:]",
      "58:         roomInvites = []",
      "59:     }",
      "61:     public func addPendingKey(keyInfo: MXRoomKeyInfo, senderId: String, senderKey: String) {",
      "62:         guard let delegate = delegate else {",
      "63:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: Delegate is not set\")",
      "64:             return",
      "65:         }",
      "68:         delegate.downloadDeviceKeys(userId: senderId) { [weak self] keys in",
      "69:             guard let self = self else { return }",
      "71:             guard let userId = self.matchingUserId(in: keys, userId: senderId, identityKey: senderKey) else {",
      "72:                 MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] addPendingKey: senderId does not match the claimed senderKey\")",
      "73:                 return",
      "74:             }",
      "75:             self.addPendingKey(keyInfo: keyInfo, confirmedSenderId: userId)",
      "76:             self.processUnrequestedKeys()",
      "77:         }",
      "78:     }",
      "80:     public func onRoomInvite(roomId: String, senderId: String) {",
      "81:         roomInvites.append(",
      "82:             .init(",
      "83:                 roomId: roomId,",
      "84:                 senderId: senderId,",
      "85:                 date: dateProvider.currentDate()",
      "86:             )",
      "87:         )",
      "88:     }",
      "90:     public func processUnrequestedKeys() {",
      "91:         guard let delegate = delegate else {",
      "92:             MXLog.error(\"[MXUnrequestedForwardedRoomKeyManager] processUnrequestedKeys: Delegate is not set\")",
      "93:             return",
      "94:         }",
      "96:         let now = dateProvider.currentDate()",
      "98:         roomInvites.removeAll {",
      "99:             !$0.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: now)",
      "100:         }",
      "102:         for invite in roomInvites {",
      "103:             guard let roomKeys = pendingKeys[invite.roomId] else {",
      "104:                 continue",
      "105:             }",
      "107:             for (senderId, keys) in roomKeys {",
      "108:                 if invite.senderId == senderId {",
      "109:                     for key in keys {",
      "110:                         guard key.date.isWithin(timeInterval: Self.MaximumTimeInterval, of: invite.date) else {",
      "111:                             continue",
      "112:                         }",
      "113:                         delegate.acceptRoomKey(keyInfo: key.info)",
      "114:                     }",
      "115:                 }",
      "116:             }",
      "118:             pendingKeys[invite.roomId] = nil",
      "119:         }",
      "120:     }",
      "124:     private func matchingUserId(in deviceKeys: MXUsersDevicesMap<MXDeviceInfo>, userId: String, identityKey: String) -> String? {",
      "125:         return deviceKeys",
      "126:             .objects(forUser: userId)?",
      "127:             .first { $0.identityKey == identityKey }",
      "128:             .flatMap { $0.userId }",
      "129:     }",
      "131:     private func addPendingKey(keyInfo: MXRoomKeyInfo, confirmedSenderId: String) {",
      "132:         if pendingKeys[keyInfo.roomId] == nil {",
      "133:             pendingKeys[keyInfo.roomId] = [:]",
      "134:         }",
      "136:         if pendingKeys[keyInfo.roomId]![confirmedSenderId] == nil {",
      "137:             pendingKeys[keyInfo.roomId]![confirmedSenderId] = []",
      "138:         }",
      "140:         pendingKeys[keyInfo.roomId]![confirmedSenderId]!.append(",
      "141:             .init(",
      "142:                 info: keyInfo,",
      "143:                 date: dateProvider.currentDate()",
      "144:             )",
      "145:         )",
      "146:     }",
      "147: }",
      "149: private extension Date {",
      "150:     func isWithin(timeInterval: TimeInterval, of date: Date) -> Bool {",
      "151:         return abs(self.timeIntervalSince(date)) < timeInterval",
      "152:     }",
      "153: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m": [
      "File: MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m -> MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "403: - (void)handleSecretSendEvent:(MXEvent*)event",
      "404: {",
      "405:     MXSecretShareSend *shareSend;",
      "406:     MXJSONModelSetMXJSONModel(shareSend, MXSecretShareSend, event.content);",
      "407:     if (!shareSend)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "405:     if (![self canAcceptSecretSendEvent:event])",
      "406:     {",
      "407:         MXLogDebug(@\"[MXSecretShareManager] handleSecretSendEvent: Rejecting unacceptable secret\");",
      "408:         return;",
      "409:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "428:     }",
      "429: }",
      "431: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437: - (BOOL)canAcceptSecretSendEvent:(MXEvent*)event",
      "438: {",
      "440:     MXDeviceInfo *sendingDevice = [self.crypto.store deviceWithIdentityKey:event.senderKey];",
      "441:     if (!sendingDevice)",
      "442:     {",
      "443:         MXLogError(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Unknown sending device\");",
      "444:         return NO;",
      "445:     }",
      "447:     if (![sendingDevice.userId isEqualToString:self.crypto.mxSession.myUserId])",
      "448:     {",
      "449:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from another user\");",
      "450:         return NO;",
      "451:     }",
      "453:     if (!sendingDevice.trustLevel.isVerified)",
      "454:     {",
      "455:         MXLogDebug(@\"[MXSecretShareManager] canAcceptSecretSendEvent: Ignoring secret from untrusted device\");",
      "456:         return NO;",
      "457:     }",
      "458:     return YES;",
      "459: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
      "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: NSTimeInterval kMXCryptoUploadOneTimeKeysPeriod = 60.0; // one minute",
      "77: NSTimeInterval kMXCryptoMinForceSessionPeriod = 3600.0; // one hour",
      "80: {",
      "82:     NSMutableDictionary<NSString*, id<MXEncrypting>> *roomEncryptors;",
      "",
      "[Removed Lines]",
      "79: @interface MXCrypto ()",
      "",
      "[Added Lines]",
      "79: @interface MXCrypto () <MXUnrequestedForwardedRoomKeyManagerDelegate>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:     MXIncomingRoomKeyRequestManager *incomingRoomKeyRequestManager;",
      "112:     MXUsersDevicesMap<NSDate*> *lastNewSessionForcedDates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     MXUnrequestedForwardedRoomKeyManager *unrequestedForwardedRoomKeyManager;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "435:         [self->outgoingRoomKeyRequestManager close];",
      "436:         self->outgoingRoomKeyRequestManager = nil;",
      "438:         if (deleteStore)",
      "439:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:         [self->unrequestedForwardedRoomKeyManager close];",
      "442:         self->outgoingRoomKeyRequestManager = nil;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "983:         {",
      "984:             [self maybeUploadOneTimeKeys:nil failure:nil];",
      "985:             [self->incomingRoomKeyRequestManager processReceivedRoomKeyRequests];",
      "986:         }",
      "987:     });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "992:             [self->unrequestedForwardedRoomKeyManager processUnrequestedKeys];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2044:                                          cryptoStore:_store];",
      "2046:         incomingRoomKeyRequestManager = [[MXIncomingRoomKeyRequestManager alloc] initWithCrypto:self];",
      "2048:         _keyVerificationManager = [[MXKeyVerificationManager alloc] initWithCrypto:self];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2055:         unrequestedForwardedRoomKeyManager = [[MXUnrequestedForwardedRoomKeyManager alloc] init];",
      "2056:         unrequestedForwardedRoomKeyManager.delegate = self;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2583:     [outgoingRoomKeyRequestManager cancelRoomKeyRequest:requestBody];",
      "2584: }",
      "2586: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId  chainIndex:(NSNumber*)chainIndex",
      "2587: {",
      "2588:     NSDictionary *key = [self.olmDevice getInboundGroupSessionKey:roomId senderKey:senderKey sessionId:sessionId chainIndex:chainIndex];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2596: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey",
      "2597: {",
      "2598:     [unrequestedForwardedRoomKeyManager addPendingKeyWithKeyInfo:keyInfo senderId:senderId senderKey:senderKey];",
      "2599: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2803: - (void)onRoomMembership:(MXEvent*)event roomState:(MXRoomState*)roomState",
      "2804: {",
      "2813:     BOOL shouldTrack = NO;",
      "2814:     NSString *userId = event.stateKey;",
      "2815:     MXRoomMember *member = [roomState.members memberWithUserId:userId];",
      "2816:     if (member)",
      "2817:     {",
      "",
      "[Removed Lines]",
      "2805:     id<MXEncrypting> alg = roomEncryptors[event.roomId];",
      "2806:     if (!alg)",
      "2807:     {",
      "2809:         return;",
      "2810:     }",
      "",
      "[Added Lines]",
      "2824:     MXRoomMemberEventContent *content = [MXRoomMemberEventContent modelFromJSON:event.content];",
      "2825:     if ([userId isEqualToString:self.mxSession.credentials.userId] && [content.membership isEqualToString:kMXMembershipStringInvite])",
      "2826:     {",
      "2827:         [unrequestedForwardedRoomKeyManager onRoomInviteWithRoomId:event.roomId senderId:event.sender];",
      "2828:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3264:     }];",
      "3265: }",
      "3267: #endif",
      "3269: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3282: #pragma mark - MXUnrequestedForwardedRoomKeyManagerDelegate",
      "3284: - (void)downloadDeviceKeysWithUserId:(NSString *)userId completion:(void (^)(MXUsersDevicesMap<MXDeviceInfo *> *))completion",
      "3285: {",
      "3286:     [self downloadKeys:@[userId] forceDownload:YES success:^(MXUsersDevicesMap<MXDeviceInfo *> *usersDevicesInfoMap, NSDictionary<NSString *,MXCrossSigningInfo *> *crossSigningKeysMap) {",
      "3287:         completion(usersDevicesInfoMap);",
      "3288:     } failure:^(NSError *error) {",
      "3289:         MXLogError(@\"[MXCrypto]: Failed downloading keys for key forward manager\");",
      "3290:         completion([[MXUsersDevicesMap alloc] init]);",
      "3291:     }];",
      "3292: }",
      "3294: - (void)acceptRoomKeyWithKeyInfo:(MXRoomKeyInfo *)keyInfo",
      "3295: {",
      "3296:     id<MXDecrypting> decryptor = [self getRoomDecryptor:keyInfo.roomId algorithm:keyInfo.algorithm];",
      "3297:     MXRoomKeyResult *key = [[MXRoomKeyResult alloc] initWithType:MXRoomKeyTypeUnsafe info:keyInfo];",
      "3298:     [decryptor onRoomKey:key];",
      "3299: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXCrypto_Private.h||MatrixSDK/Crypto/MXCrypto_Private.h": [
      "File: MatrixSDK/Crypto/MXCrypto_Private.h -> MatrixSDK/Crypto/MXCrypto_Private.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: #import \"MXCrypto.h\"",
      "37:  The `MXCrypto_Private` extension exposes internal operations.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: @class MXRoomKeyInfo;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: - (NSDictionary*)buildMegolmKeyForwardingMessage:(NSString*)roomId senderKey:(NSString*)senderKey sessionId:(NSString*)sessionId chainIndex:(NSNumber*)chainIndex;",
      "227: @end",
      "229: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "230:  Handle forwarded room key that was not requested by this device",
      "232:  @param keyInfo details about the key",
      "233:  @param senderId userId of the person who sent us the key",
      "234:  @param senderKey identity of the person who sent us the room key",
      "236: - (void)handleUnrequestedRoomKeyInfo:(MXRoomKeyInfo *)keyInfo senderId:(NSString *)senderId senderKey:(NSString *)senderKey;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.h||MatrixSDK/Crypto/MXOlmDevice.h": [
      "File: MatrixSDK/Crypto/MXOlmDevice.h -> MatrixSDK/Crypto/MXOlmDevice.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "242:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "243:                   exportFormat:(BOOL)exportFormat",
      "247:  Add previously-exported inbound group sessions to the session store.",
      "",
      "[Removed Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "244:                  sharedHistory:(BOOL)sharedHistory",
      "245:                      untrusted:(BOOL)untrusted;",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/MXOlmDevice.m||MatrixSDK/Crypto/MXOlmDevice.m": [
      "File: MatrixSDK/Crypto/MXOlmDevice.m -> MatrixSDK/Crypto/MXOlmDevice.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "351:   forwardingCurve25519KeyChain:(NSArray<NSString *> *)forwardingCurve25519KeyChain",
      "352:                    keysClaimed:(NSDictionary<NSString*, NSString*>*)keysClaimed",
      "353:                   exportFormat:(BOOL)exportFormat",
      "355: {",
      "356:     MXOlmInboundGroupSession *session;",
      "357:     if (exportFormat)",
      "",
      "[Removed Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory;",
      "",
      "[Added Lines]",
      "354:                  sharedHistory:(BOOL)sharedHistory",
      "355:                      untrusted:(BOOL)untrusted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:     if (existingSession)",
      "373:     {",
      "379:         {",
      "382:         }",
      "383:     }",
      "",
      "[Removed Lines]",
      "375:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Update for megolm session %@|%@\", senderKey, sessionId);",
      "378:         if (existingSession.session.firstKnownIndex <= session.session.firstKnownIndex)",
      "380:             MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "381:             return NO;",
      "",
      "[Added Lines]",
      "376:         MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Considering updates for megolm session %@|%@\", senderKey, sessionId);",
      "378:         BOOL isExistingSessionBetter = existingSession.session.firstKnownIndex <= session.session.firstKnownIndex;",
      "379:         if (isExistingSessionBetter)",
      "381:             BOOL isNewSessionSafer = existingSession.isUntrusted && !session.isUntrusted;",
      "382:             if (!isNewSessionSafer)",
      "383:             {",
      "384:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skip it. The index of the incoming session is higher (%@ vs %@)\", @(session.session.firstKnownIndex), @(existingSession.session.firstKnownIndex));",
      "385:                 return NO;",
      "386:             }",
      "388:             if ([self connectsSession1:existingSession session2:session])",
      "389:             {",
      "390:                 MXLogDebug(@\"[MXOlmDevice] addInboundGroupSession: Skipping new session, and upgrading the safety of existing session\");",
      "391:                 [self upgradeSafetyForSession:existingSession];",
      "392:                 return NO;",
      "393:             }",
      "394:             else",
      "395:             {",
      "396:                 MXLogWarning(@\"[MXOlmDevice] addInboundGroupSession: Recieved a safer but disconnected key, which will override the existing unsafe key\");",
      "397:                 existingSession = nil;",
      "398:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394:     session.roomId = roomId;",
      "395:     session.keysClaimed = keysClaimed;",
      "396:     session.forwardingCurve25519KeyChain = forwardingCurve25519KeyChain;",
      "399:     if (!existingSession && MXSDKOptions.sharedInstance.enableRoomSharedHistoryOnInvite)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "414:     session.untrusted = untrusted;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "406:     return YES;",
      "407: }",
      "409: - (NSArray<MXOlmInboundGroupSession *>*)importInboundGroupSessions:(NSArray<MXMegolmSessionData *>*)inboundGroupSessionsData;",
      "410: {",
      "411:     NSMutableArray<MXOlmInboundGroupSession *> *sessions = [NSMutableArray arrayWithCapacity:inboundGroupSessionsData.count];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "427: - (void)upgradeSafetyForSession:(MXOlmInboundGroupSession *)session",
      "428: {",
      "429:     [self.store performSessionOperationWithGroupSessionWithId:session.session.sessionIdentifier senderKey:session.senderKey block:^(MXOlmInboundGroupSession *inboundGroupSession) {",
      "430:         inboundGroupSession.untrusted = NO;",
      "431:     }];",
      "432:     if (MXSDKOptions.sharedInstance.enableGroupSessionCache)",
      "433:     {",
      "434:         @synchronized (self.inboundGroupSessionCache)",
      "435:         {",
      "436:             session.untrusted = NO;",
      "437:             [self.inboundGroupSessionCache put:session.session.sessionIdentifier object:session];",
      "438:         }",
      "439:     }",
      "440: }",
      "442: - (BOOL)connectsSession1:(MXOlmInboundGroupSession *)session1 session2:(MXOlmInboundGroupSession *)session2",
      "443: {",
      "445:     NSUInteger lowestCommonIndex = MAX(session1.session.firstKnownIndex, session2.session.firstKnownIndex);",
      "446:     MXMegolmSessionData *export1 = [session1 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "447:     MXMegolmSessionData *export2 = [session2 exportSessionDataAtMessageIndex:lowestCommonIndex];",
      "448:     return [export1.sessionKey isEqualToString:export2.sessionKey];",
      "449: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfo.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "20: @objcMembers",
      "21: public class MXRoomKeyInfo: NSObject {",
      "22:     public let algorithm: String",
      "23:     public let sessionId: String",
      "24:     public let sessionKey: String",
      "25:     public let roomId: String",
      "26:     public let senderKey: String",
      "27:     public let forwardingKeyChain: [String]?",
      "28:     public let keysClaimed: [String: String]",
      "29:     public let exportFormat: Bool",
      "30:     public let sharedHistory: Bool",
      "32:     public init(",
      "33:         algorithm: String,",
      "34:         sessionId: String,",
      "35:         sessionKey: String,",
      "36:         roomId: String,",
      "37:         senderKey: String,",
      "38:         forwardingKeyChain: [String]?,",
      "39:         keysClaimed: [String: String],",
      "40:         exportFormat: Bool,",
      "41:         sharedHistory: Bool",
      "42:     ) {",
      "43:         self.algorithm = algorithm",
      "44:         self.sessionId = sessionId",
      "45:         self.sessionKey = sessionKey",
      "46:         self.roomId = roomId",
      "47:         self.senderKey = senderKey",
      "48:         self.forwardingKeyChain = forwardingKeyChain",
      "49:         self.keysClaimed = keysClaimed",
      "50:         self.exportFormat = exportFormat",
      "51:         self.sharedHistory = sharedHistory",
      "52:         super.init()",
      "53:     }",
      "54: }",
      "56: extension MXRoomKeyInfo {",
      "57:     convenience init?(roomKey: MXRoomKeyEventContent, event: MXEvent) {",
      "58:         guard let senderKey = event.senderKey, let keysClaimed = event.keysClaimed as? [String: String] else {",
      "59:             return nil",
      "60:         }",
      "62:         self.init(",
      "63:             algorithm: roomKey.algorithm,",
      "64:             sessionId: roomKey.sessionId,",
      "65:             sessionKey: roomKey.sessionKey,",
      "66:             roomId: roomKey.roomId,",
      "67:             senderKey: senderKey,",
      "68:             forwardingKeyChain: nil,",
      "69:             keysClaimed: keysClaimed,",
      "70:             exportFormat: false,",
      "71:             sharedHistory: roomKey.sharedHistory",
      "72:         )",
      "73:     }",
      "74: }",
      "76: extension MXRoomKeyInfo {",
      "77:     convenience init(forwardedRoomKey: MXForwardedRoomKeyEventContent) {",
      "78:         self.init(",
      "79:             algorithm: forwardedRoomKey.algorithm,",
      "80:             sessionId: forwardedRoomKey.sessionId,",
      "81:             sessionKey: forwardedRoomKey.sessionKey,",
      "82:             roomId: forwardedRoomKey.roomId,",
      "83:             senderKey: forwardedRoomKey.senderKey,",
      "84:             forwardingKeyChain: forwardedRoomKey.forwardingCurve25519KeyChain,",
      "85:             keysClaimed: [\"ed25519\": forwardedRoomKey.senderClaimedEd25519Key],",
      "86:             exportFormat: true,",
      "87:             sharedHistory: forwardedRoomKey.sharedHistory",
      "88:         )",
      "89:     }",
      "90: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyInfoFactory.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objcMembers",
      "20: public class MXRoomKeyInfoFactory: NSObject {",
      "21:     private let myUserId: String",
      "22:     private let store: MXCryptoStore",
      "23:     private let log = MXNamedLog(name: \"MXRoomKeyFactory\")",
      "25:     public init(myUserId: String, store: MXCryptoStore) {",
      "26:         self.myUserId = myUserId",
      "27:         self.store = store",
      "28:     }",
      "30:     public func roomKey(for event: MXEvent) -> MXRoomKeyResult? {",
      "31:         if event.eventType == .roomKey {",
      "32:             return roomKeyEventInfo(for: event)",
      "33:         } else if event.eventType == .roomForwardedKey {",
      "34:             return forwardedRoomKeyEventInfo(for: event)",
      "35:         } else {",
      "36:             log.error(\"Unknown event type\", context: event.eventType)",
      "37:             return nil",
      "38:         }",
      "39:     }",
      "41:     private func roomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "42:         guard",
      "43:             let content = MXRoomKeyEventContent(fromJSON: event.content),",
      "44:             let info = MXRoomKeyInfo(roomKey: content, event: event)",
      "45:         else {",
      "46:             log.error(\"Invalid room key\")",
      "47:             return nil",
      "48:         }",
      "50:         return .init(type: .safe, info: info)",
      "51:     }",
      "53:     private func forwardedRoomKeyEventInfo(for event: MXEvent) -> MXRoomKeyResult? {",
      "54:         guard let eventSenderKey = event.senderKey else {",
      "55:             log.error(\"Unknown event sender\")",
      "56:             return nil",
      "57:         }",
      "59:         guard let content = MXForwardedRoomKeyEventContent(fromJSON: event.content) else {",
      "60:             log.error(\"Invalid forwarded key\")",
      "61:             return nil",
      "62:         }",
      "64:         content.forwardingCurve25519KeyChain += [eventSenderKey]",
      "66:         return .init(",
      "67:             type: keyType(for: content, senderKey: eventSenderKey),",
      "68:             info: .init(forwardedRoomKey: content)",
      "69:         )",
      "70:     }",
      "72:     private func keyType(for content: MXForwardedRoomKeyEventContent, senderKey: String) -> MXRoomKeyType {",
      "73:         if !hasPendingRequest(for: content) {",
      "74:             log.debug(\"Key was not requested\")",
      "75:             return .unrequested",
      "76:         } else if isMyVerifiedDevice(identityKey: senderKey) {",
      "77:             return .safe",
      "78:         } else {",
      "79:             log.debug(\"Key forward is not from my verified device\")",
      "80:             return .unsafe",
      "81:         }",
      "82:     }",
      "84:     private func isMyVerifiedDevice(identityKey: String) -> Bool {",
      "85:         guard let device = store.device(withIdentityKey: identityKey) else {",
      "86:             return false",
      "87:         }",
      "88:         return device.userId == myUserId && device.trustLevel.isVerified",
      "89:     }",
      "91:     private func hasPendingRequest(for content: MXForwardedRoomKeyEventContent) -> Bool {",
      "92:         let request = store.outgoingRoomKeyRequest(withRequestBody: [",
      "93:             \"room_id\": content.roomId,",
      "94:             \"algorithm\": content.algorithm,",
      "95:             \"sender_key\": content.senderKey,",
      "96:             \"session_id\": content.sessionId",
      "97:         ])",
      "98:         return request != nil",
      "99:     }",
      "100: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift||MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift": [
      "File: MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift -> MatrixSDK/Crypto/RoomKeys/MXRoomKeyResult.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: @objc public enum MXRoomKeyType: Int {",
      "20:     case safe",
      "21:     case unsafe",
      "22:     case unrequested",
      "23: }",
      "25: @objcMembers",
      "26: public class MXRoomKeyResult: NSObject {",
      "27:     public let type: MXRoomKeyType",
      "28:     public let info: MXRoomKeyInfo",
      "30:     public init(type: MXRoomKeyType, info: MXRoomKeyInfo) {",
      "31:         self.type = type",
      "32:         self.info = info",
      "33:     }",
      "34: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m||MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m": [
      "File: MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m -> MatrixSDK/Crypto/Verification/Transactions/SAS/MXSASTransaction.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "364:         __block MXTransactionCancelCode *cancelCode;",
      "365:         dispatch_group_t group = dispatch_group_create();",
      "367:         for (NSString *keyFullId in self.theirMac.mac)",
      "368:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "367:         MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:             MXDeviceInfo *device = [self.manager.crypto deviceWithDeviceId:key.keyId ofUser:self.otherDevice.userId];",
      "373:             if (device)",
      "374:             {",
      "375:                 if ([key.value isEqualToString:[self macUsingAgreedMethod:device.keys[keyFullId]",
      "376:                                                                      info:[NSString stringWithFormat:@\"%@%@\", baseInfo, keyFullId]]])",
      "377:                 {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:                 if ([device.deviceId isEqualToString:otherUserMasterKeys.keys])",
      "378:                 {",
      "379:                     MXLogWarning(@\"[MXKeyVerification][MXSASTransaction] verifyMacs: Device id should not be the same as master key\");",
      "380:                     cancelCode = MXTransactionCancelCode.invalidMessage;",
      "381:                     break;",
      "382:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "398:             else",
      "399:             {",
      "402:                 if (otherUserMasterKeys)",
      "403:                 {",
      "",
      "[Removed Lines]",
      "401:                 MXCrossSigningKey *otherUserMasterKeys= [self.manager.crypto crossSigningKeysForUser:self.otherDevice.userId].masterKeys;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
      "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "1965: - (void)handleToDeviceEvents:(NSArray<MXEvent *> *)events  onComplete:(void (^)(void))onComplete",
      "1966: {",
      "1968:     {",
      "1969:         onComplete();",
      "1970:         return;",
      "1971:     }",
      "1974:         dispatch_group_t dispatchGroup = dispatch_group_create();",
      "1977:         {",
      "1978:             if (!event.decryptionError)",
      "1979:             {",
      "",
      "[Removed Lines]",
      "1967:     if (events.count == 0)",
      "1973:     [self decryptEvents:events inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1976:         for (MXEvent *event in events)",
      "",
      "[Added Lines]",
      "1967:     NSMutableArray *supportedEvents = [NSMutableArray arrayWithCapacity:events.count];",
      "1968:     for (MXEvent *event in events)",
      "1969:     {",
      "1970:         if ([MXTools isSupportedToDeviceEvent:event])",
      "1971:         {",
      "1972:             [supportedEvents addObject:event];",
      "1973:         }",
      "1974:     }",
      "1976:     if (supportedEvents.count == 0)",
      "1982:     [self decryptEvents:supportedEvents inTimeline:nil onComplete:^(NSArray<MXEvent *> *failedEvents) {",
      "1985:         for (MXEvent *event in supportedEvents)",
      "",
      "---------------"
    ],
    "MatrixSDK/MatrixSDK.h||MatrixSDK/MatrixSDK.h": [
      "File: MatrixSDK/MatrixSDK.h -> MatrixSDK/MatrixSDK.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "171: #import \"MXCachedSyncResponse.h\"",
      "172: #import \"MXBackgroundCryptoStore.h\"",
      "173: #import \"MXSharedHistoryKeyService.h\"",
      "176: #import \"MXSyncResponse.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174: #import \"MXRoomKeyEventContent.h\"",
      "175: #import \"MXForwardedRoomKeyEventContent.h\"",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/Categories/Dictionary.swift||MatrixSDK/Utils/Categories/Dictionary.swift": [
      "File: MatrixSDK/Utils/Categories/Dictionary.swift -> MatrixSDK/Utils/Categories/Dictionary.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: internal extension Dictionary {",
      "20:     func adding(key: Key, value: Value) -> [Key: Value] {",
      "21:         var dict = self",
      "22:         dict[key] = value",
      "23:         return dict",
      "24:     }",
      "26:     func removing(key: Key) -> [Key: Value] {",
      "27:         var dict = self",
      "28:         dict[key] = nil",
      "29:         return dict",
      "30:     }",
      "31: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXDateProvider.swift||MatrixSDK/Utils/MXDateProvider.swift": [
      "File: MatrixSDK/Utils/MXDateProvider.swift -> MatrixSDK/Utils/MXDateProvider.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "19: protocol MXDateProviding {",
      "20:     func currentDate() -> Date",
      "21: }",
      "23: struct MXDateProvider: MXDateProviding {",
      "24:     func currentDate() -> Date {",
      "25:         Date()",
      "26:     }",
      "27: }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXLRUCache.m||MatrixSDK/Utils/MXLRUCache.m": [
      "File: MatrixSDK/Utils/MXLRUCache.m -> MatrixSDK/Utils/MXLRUCache.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:                 [cachedObjects addObject:item];",
      "150:                 [cachedKeys addObject:key];",
      "151:             }",
      "152:         }",
      "153:     }",
      "154: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152:             else",
      "153:             {",
      "154:                 MXLRUCacheItem* item = [cachedObjects objectAtIndex:pos];",
      "155:                 item.object = object;",
      "156:             }",
      "",
      "---------------"
    ],
    "MatrixSDK/Utils/MXTools.swift||MatrixSDK/Utils/MXTools.swift": [
      "File: MatrixSDK/Utils/MXTools.swift -> MatrixSDK/Utils/MXTools.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:         }",
      "45:         return urlString",
      "46:     }",
      "47: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     @objc",
      "52:     static func isSupportedToDeviceEvent(_ event: MXEvent) -> Bool {",
      "53:         if event.isEncrypted {",
      "55:             let algorithm = event.wireContent[\"algorithm\"] as? String",
      "56:             guard algorithm == kMXCryptoOlmAlgorithm else {",
      "57:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported event encrypted with other than OLM algorithm: \\(String(describing: algorithm))\")",
      "58:                 return false",
      "59:             }",
      "60:         } else {",
      "62:             let unsupportedPlainEvents = Set([",
      "63:                 MXEventType.roomKey.identifier,",
      "64:                 MXEventType.roomForwardedKey.identifier,",
      "65:                 MXEventType.secretSend.identifier",
      "66:             ])",
      "68:             if unsupportedPlainEvents.contains(event.type) {",
      "69:                 MXLog.debug(\"[MXTools] isSupportedToDeviceEvent: not supported plain event with type: \\(String(describing: event.type))\")",
      "70:                 return false",
      "71:             }",
      "72:         }",
      "74:         return true",
      "75:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift||MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift -> MatrixSDKTests/Crypto/Algorithms/Megolm/MXMegolmDecryptionUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:             forwardingCurve25519KeyChain: [String]!,",
      "36:             keysClaimed: [String : String]!,",
      "37:             exportFormat: Bool,",
      "39:         ) -> Bool {",
      "40:             sessions.append(",
      "41:                 .init(sharedHistory: sharedHistory)",
      "",
      "[Removed Lines]",
      "38:             sharedHistory: Bool",
      "",
      "[Added Lines]",
      "38:             sharedHistory: Bool,",
      "39:             untrusted: Bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         session.historyVisibility = kMXRoomHistoryVisibilityWorldReadable",
      "139:         for (eventValue, expectedValue) in eventToExpectation {",
      "141:             device.sessions = []",
      "143:             decryption.onRoomKeyEvent(event)",
      "",
      "[Removed Lines]",
      "140:             let event = makeRoomKeyEvent(sharedHistory: eventValue)",
      "",
      "[Added Lines]",
      "141:             let event = MXEvent.roomKeyFixture(",
      "142:                 sharedHistory: eventValue",
      "143:             )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "213:             XCTAssertEqual(hasSharedHistory, expectedValue)",
      "214:         }",
      "215:     }",
      "241: }",
      "",
      "[Removed Lines]",
      "220:     private func makeRoomKeyEvent(sharedHistory: Bool? = nil) -> MXEvent? {",
      "221:         let event = MXEvent(fromJSON: [",
      "222:             \"sender_key\": senderKey,",
      "223:         ])",
      "225:         var content: [String: Any] = [",
      "226:             \"room_id\": roomId1,",
      "227:             \"session_id\": sessionId1,",
      "228:             \"session_key\": \"123\",",
      "229:             \"algorithm\": \"456\",",
      "230:         ]",
      "231:         if let sharedHistory = sharedHistory {",
      "232:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "233:         }",
      "235:         let result = MXEventDecryptionResult()",
      "236:         result.senderCurve25519Key = \"XYZ\"",
      "237:         result.clearEvent = [\"content\": content]",
      "238:         event?.setClearData(result)",
      "239:         return event",
      "240:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift||MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift": [
      "File: MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift -> MatrixSDKTests/Crypto/Data/Store/MXMemoryCryptoStore.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import OLMKit",
      "20: public class MXMemoryCryptoStore: NSObject, MXCryptoStore {",
      "22:     private static var stores: [MXCredentials: MXMemoryCryptoStore] = [:]",
      "24:     private let credentials: MXCredentials",
      "25:     private var storeAccount: Account?",
      "26:     private var devices: [String: [MXDeviceInfo]] = [:]",
      "27:     private var algorithms: [String: RoomAlgorithm] = [:]",
      "28:     private var inboundSessions: [InboundSession] = []",
      "29:     private var outboundSessions: [String: MXOlmOutboundGroupSession] = [:]",
      "30:     private var secrets: [String: String] = [:]",
      "31:     private var incomingRoomKeyRequestsMap: [String: MXIncomingRoomKeyRequest] = [:]",
      "32:     private var outgoingRoomKeyRequests: [String: MXOutgoingRoomKeyRequest] = [:]",
      "33:     private var olmSessions: [OlmSessionMapKey: MXOlmSession] = [:]",
      "34:     private var crossSigningKeysMap: [String: MXCrossSigningInfo] = [:]",
      "35:     private var sharedOutboundSessions: [SharedOutboundSession] = []",
      "39:     public required init!(credentials: MXCredentials!) {",
      "40:         self.credentials = credentials",
      "41:         storeAccount = Account()",
      "42:         storeAccount?.userId = credentials.userId",
      "43:         storeAccount?.deviceId = credentials.deviceId",
      "44:         storeAccount?.cryptoVersion = MXCryptoVersion(rawValue: MXCryptoVersion.versionCount.rawValue - 1) ?? .versionUndefined",
      "45:         super.init()",
      "46:     }",
      "48:     public static func hasData(for credentials: MXCredentials!) -> Bool {",
      "49:         stores[credentials] != nil",
      "50:     }",
      "52:     public static func createStore(with credentials: MXCredentials!) -> Self! {",
      "53:         if let existingStore = stores[credentials] as? Self {",
      "54:             return existingStore",
      "55:         }",
      "56:         if let newStore = Self(credentials: credentials) {",
      "57:             stores[credentials] = newStore",
      "58:             return newStore",
      "59:         }",
      "60:         return nil",
      "61:     }",
      "63:     public static func delete(with credentials: MXCredentials!) {",
      "64:         stores.removeValue(forKey: credentials)",
      "65:     }",
      "67:     public static func deleteAllStores() {",
      "68:         stores.removeAll()",
      "69:     }",
      "71:     public static func deleteReadonlyStore(with credentials: MXCredentials!) {",
      "73:     }",
      "75:     public func open(_ onComplete: (() -> Void)!, failure: ((Error?) -> Void)!) {",
      "76:         onComplete?()",
      "77:     }",
      "81:     public func storeDeviceId(_ deviceId: String!) {",
      "82:         storeAccount?.deviceId = deviceId",
      "83:     }",
      "85:     public func deviceId() -> String! {",
      "86:         storeAccount?.deviceId",
      "87:     }",
      "91:     public func setAccount(_ account: OLMAccount!) {",
      "92:         storeAccount?.olmAccount = account",
      "93:     }",
      "95:     public func account() -> OLMAccount! {",
      "96:         storeAccount?.olmAccount",
      "97:     }",
      "99:     public func performAccountOperation(_ block: ((OLMAccount?) -> Void)!) {",
      "100:         block?(storeAccount?.olmAccount)",
      "101:     }",
      "105:     public func storeDeviceSyncToken(_ deviceSyncToken: String!) {",
      "106:         storeAccount?.deviceSyncToken = deviceSyncToken",
      "107:     }",
      "109:     public func deviceSyncToken() -> String! {",
      "110:         storeAccount?.deviceSyncToken",
      "111:     }",
      "115:     public func storeDevice(forUser userId: String!, device: MXDeviceInfo!) {",
      "116:         if devices[userId] == nil {",
      "117:             devices[userId] = []",
      "118:         }",
      "119:         devices[userId]?.append(device)",
      "120:     }",
      "122:     public func device(withDeviceId deviceId: String!, forUser userId: String!) -> MXDeviceInfo! {",
      "123:         devices[userId]?.first { $0.deviceId == deviceId }",
      "124:     }",
      "126:     public func device(withIdentityKey identityKey: String!) -> MXDeviceInfo! {",
      "127:         Array(devices.values).flatMap { $0 }.first { $0.identityKey == identityKey }",
      "128:     }",
      "130:     public func storeDevices(forUser userId: String!, devices: [String : MXDeviceInfo]!) {",
      "131:         if self.devices[userId] != nil {",
      "133:             self.devices.removeValue(forKey: userId)",
      "134:         }",
      "136:         self.devices[userId] = Array(devices.values)",
      "137:     }",
      "139:     public func devices(forUser userId: String!) -> [String : MXDeviceInfo]! {",
      "140:         let devices = devices[userId] ?? []",
      "142:         var result: [String: MXDeviceInfo] = [:]",
      "144:         for device in devices {",
      "145:             result[device.deviceId] = device",
      "146:         }",
      "148:         return result",
      "149:     }",
      "153:     public func deviceTrackingStatus() -> [String : NSNumber]! {",
      "154:         storeAccount?.deviceTrackingStatus",
      "155:     }",
      "157:     public func storeDeviceTrackingStatus(_ statusMap: [String : NSNumber]!) {",
      "158:         storeAccount?.deviceTrackingStatus = statusMap",
      "159:     }",
      "163:     public func storeCrossSigningKeys(_ crossSigningInfo: MXCrossSigningInfo!) {",
      "164:         crossSigningKeysMap[crossSigningInfo.userId] = crossSigningInfo",
      "165:     }",
      "167:     public func crossSigningKeys(forUser userId: String!) -> MXCrossSigningInfo! {",
      "168:         crossSigningKeysMap[userId]",
      "169:     }",
      "171:     public func crossSigningKeys() -> [MXCrossSigningInfo]! {",
      "172:         Array(crossSigningKeysMap.values)",
      "173:     }",
      "177:     public func storeAlgorithm(forRoom roomId: String!, algorithm: String!) {",
      "178:         algorithms[roomId] = RoomAlgorithm(algorithm: algorithm)",
      "179:     }",
      "181:     public func algorithm(forRoom roomId: String!) -> String! {",
      "182:         algorithms[roomId]?.algorithm",
      "183:     }",
      "187:     public func store(_ session: MXOlmSession!, forDevice deviceKey: String!) {",
      "188:         let key = OlmSessionMapKey(sessionId: session.session.sessionIdentifier(), deviceKey: deviceKey)",
      "189:         olmSessions[key] = session",
      "190:     }",
      "192:     public func session(withDevice deviceKey: String!, andSessionId sessionId: String!) -> MXOlmSession! {",
      "193:         let key = OlmSessionMapKey(sessionId: sessionId, deviceKey: deviceKey)",
      "194:         return olmSessions[key]",
      "195:     }",
      "197:     public func performSessionOperation(withDevice deviceKey: String!, andSessionId sessionId: String!, block: ((MXOlmSession?) -> Void)!) {",
      "198:         let session = session(withDevice: deviceKey, andSessionId: sessionId)",
      "199:         block?(session)",
      "200:     }",
      "202:     public func sessions(withDevice deviceKey: String!) -> [MXOlmSession]! {",
      "203:         Array(olmSessions.filter { $0.key.deviceKey == deviceKey }.values)",
      "204:     }",
      "208:     public func store(_ sessions: [MXOlmInboundGroupSession]!) {",
      "209:         inboundSessions.append(contentsOf: sessions.map { InboundSession(session: $0) } )",
      "210:     }",
      "212:     public func inboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) -> MXOlmInboundGroupSession! {",
      "213:         inboundSessions.first { $0.sessionId == sessionId && $0.session.senderKey == senderKey }?.session",
      "214:     }",
      "216:     public func performSessionOperationWithGroupSession(withId sessionId: String!, senderKey: String!, block: ((MXOlmInboundGroupSession?) -> Void)!) {",
      "217:         let session = inboundGroupSession(withId: sessionId, andSenderKey: senderKey)",
      "218:         block?(session)",
      "219:     }",
      "221:     public func inboundGroupSessions() -> [MXOlmInboundGroupSession]! {",
      "222:         inboundSessions.map { $0.session }",
      "223:     }",
      "225:     public func inboundGroupSessions(withSessionId sessionId: String!) -> [MXOlmInboundGroupSession]! {",
      "226:         inboundSessions.filter { $0.sessionId == sessionId }.map { $0.session }",
      "227:     }",
      "229:     public func removeInboundGroupSession(withId sessionId: String!, andSenderKey senderKey: String!) {",
      "230:         inboundSessions.removeAll { $0.sessionId == sessionId && $0.session.senderKey == senderKey }",
      "231:     }",
      "235:     public func store(_ session: OLMOutboundGroupSession!, withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "236:         let creationTime: TimeInterval",
      "238:         if let existingSession = outboundSessions[roomId],",
      "239:            existingSession.sessionId == session.sessionIdentifier() {",
      "241:             creationTime = existingSession.creationTime",
      "242:         } else {",
      "243:             creationTime = Date().timeIntervalSince1970",
      "244:         }",
      "246:         if let newSession = MXOlmOutboundGroupSession(session: session, roomId: roomId, creationTime: creationTime) {",
      "247:             outboundSessions[roomId] = newSession",
      "248:             return newSession",
      "249:         }",
      "251:         return nil",
      "252:     }",
      "254:     public func outboundGroupSession(withRoomId roomId: String!) -> MXOlmOutboundGroupSession! {",
      "255:         outboundSessions[roomId]",
      "256:     }",
      "258:     public func outboundGroupSessions() -> [MXOlmOutboundGroupSession]! {",
      "259:         Array(outboundSessions.values)",
      "260:     }",
      "262:     public func removeOutboundGroupSession(withRoomId roomId: String!) {",
      "263:         outboundSessions.removeValue(forKey: roomId)",
      "264:     }",
      "268:     public func storeSharedDevices(_ devices: MXUsersDevicesMap<NSNumber>!, messageIndex: UInt, forOutboundGroupSessionInRoomWithId roomId: String!, sessionId: String!) {",
      "269:         for userId in devices.userIds() {",
      "270:             for deviceId in devices.deviceIds(forUser: userId) {",
      "271:                 guard let device = device(withDeviceId: deviceId, forUser: userId) else {",
      "272:                     continue",
      "273:                 }",
      "275:                 let session = SharedOutboundSession(roomId: roomId, sessionId: sessionId, device: device, messageIndex: messageIndex)",
      "276:                 sharedOutboundSessions.append(session)",
      "277:             }",
      "278:         }",
      "279:     }",
      "281:     public func sharedDevicesForOutboundGroupSessionInRoom(withId roomId: String!, sessionId: String!) -> MXUsersDevicesMap<NSNumber>! {",
      "282:         let result = MXUsersDevicesMap<NSNumber>()",
      "284:         let sessions = sharedOutboundSessions.filter { $0.roomId == roomId && $0.sessionId == sessionId }",
      "286:         for session in sessions {",
      "287:             result.setObject(NSNumber(value: session.messageIndex),",
      "288:                              forUser: session.device.userId,",
      "289:                              andDevice: session.device.deviceId)",
      "290:         }",
      "292:         return result",
      "293:     }",
      "295:     public func messageIndexForSharedDeviceInRoom(withId roomId: String!, sessionId: String!, userId: String!, deviceId: String!) -> NSNumber! {",
      "296:         guard let index = sharedOutboundSessions.first(where: { $0.roomId == roomId",
      "297:             && $0.sessionId == sessionId",
      "298:             && $0.device.deviceId == deviceId })?.messageIndex else {",
      "299:             return nil",
      "300:         }",
      "301:         return NSNumber(value: index)",
      "302:     }",
      "306:     public var backupVersion: String! {",
      "307:         get {",
      "308:             storeAccount?.backupVersion",
      "309:         } set {",
      "310:             storeAccount?.backupVersion = newValue",
      "311:         }",
      "312:     }",
      "314:     public func resetBackupMarkers() {",
      "315:         inboundSessions.forEach { $0.backedUp = false }",
      "316:     }",
      "318:     public func markBackupDone(for sessions: [MXOlmInboundGroupSession]!) {",
      "319:         for session in sessions {",
      "320:             inboundSessions.filter({ $0.sessionId == session.session.sessionIdentifier() }).forEach { $0.backedUp = true }",
      "321:         }",
      "322:     }",
      "324:     public func inboundGroupSessions(toBackup limit: UInt) -> [MXOlmInboundGroupSession]! {",
      "325:         let toBackup = inboundSessions.filter { !$0.backedUp }",
      "326:         if toBackup.isEmpty {",
      "327:             return []",
      "328:         }",
      "329:         let toDrop = toBackup.count > limit ? toBackup.count - Int(limit) : 0",
      "330:         return toBackup.dropLast(toDrop).map { $0.session }",
      "331:     }",
      "333:     public func inboundGroupSessionsCount(_ onlyBackedUp: Bool) -> UInt {",
      "334:         UInt(onlyBackedUp ? inboundSessions.filter { $0.backedUp }.count : inboundSessions.count)",
      "335:     }",
      "339:     public func outgoingRoomKeyRequest(withRequestBody requestBody: [AnyHashable : Any]!) -> MXOutgoingRoomKeyRequest! {",
      "340:         outgoingRoomKeyRequests.first(where: { NSDictionary(dictionary: $1.requestBody).isEqual(to: requestBody) })?.value",
      "341:     }",
      "343:     public func outgoingRoomKeyRequest(with state: MXRoomKeyRequestState) -> MXOutgoingRoomKeyRequest! {",
      "344:         outgoingRoomKeyRequests.first(where: { $0.value.state == state })?.value",
      "345:     }",
      "347:     public func allOutgoingRoomKeyRequests(with state: MXRoomKeyRequestState) -> [MXOutgoingRoomKeyRequest]! {",
      "348:         Array(outgoingRoomKeyRequests.filter { $1.state == state }.values)",
      "349:     }",
      "351:     public func allOutgoingRoomKeyRequests(withRoomId roomId: String!, sessionId: String!, algorithm: String!, senderKey: String!) -> [MXOutgoingRoomKeyRequest]! {",
      "352:         Array(outgoingRoomKeyRequests.filter {",
      "353:             $1.roomId == roomId",
      "354:             && $1.sessionId == sessionId",
      "355:             && $1.algorithm == algorithm",
      "356:             && $1.senderKey == senderKey",
      "357:         }.values)",
      "358:     }",
      "360:     public func store(_ request: MXOutgoingRoomKeyRequest!) {",
      "361:         outgoingRoomKeyRequests[request.requestId] = request",
      "362:     }",
      "364:     public func update(_ request: MXOutgoingRoomKeyRequest!) {",
      "365:         outgoingRoomKeyRequests[request.requestId] = request",
      "366:     }",
      "368:     public func deleteOutgoingRoomKeyRequest(withRequestId requestId: String!) {",
      "369:         outgoingRoomKeyRequests.removeValue(forKey: requestId)",
      "370:     }",
      "374:     public func store(_ request: MXIncomingRoomKeyRequest!) {",
      "375:         incomingRoomKeyRequestsMap[request.requestId] = request",
      "376:     }",
      "378:     public func deleteIncomingRoomKeyRequest(_ requestId: String!, fromUser userId: String!, andDevice deviceId: String!) {",
      "379:         let toBeRemoved = incomingRoomKeyRequestsMap.filter { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId }",
      "380:         for identifier in toBeRemoved {",
      "381:             incomingRoomKeyRequestsMap.removeValue(forKey: identifier.key)",
      "382:         }",
      "383:     }",
      "385:     public func incomingRoomKeyRequest(withRequestId requestId: String!, fromUser userId: String!, andDevice deviceId: String!) -> MXIncomingRoomKeyRequest! {",
      "386:         incomingRoomKeyRequestsMap.first(where: { $1.requestId == requestId && $1.userId == userId && $1.deviceId == deviceId })?.value",
      "387:     }",
      "389:     public func incomingRoomKeyRequests() -> MXUsersDevicesMap<NSArray>! {",
      "390:         let result = MXUsersDevicesMap<NSMutableArray>()",
      "392:         for request in incomingRoomKeyRequestsMap {",
      "393:             if let requests = result.object(forDevice: request.value.deviceId, forUser: request.value.userId) {",
      "394:                 requests.add(request.value)",
      "395:             } else {",
      "396:                 let requests = NSMutableArray(object: request.value)",
      "397:                 result.setObject(requests, forUser: request.value.userId, andDevice: request.value.deviceId)",
      "398:             }",
      "399:         }",
      "401:         return result as? MXUsersDevicesMap<NSArray>",
      "402:     }",
      "406:     public func storeSecret(_ secret: String!, withSecretId secretId: String!) {",
      "407:         secrets[secretId] = secret",
      "408:     }",
      "410:     public func secret(withSecretId secretId: String!) -> String! {",
      "411:         secrets[secretId]",
      "412:     }",
      "414:     public func deleteSecret(withSecretId secretId: String!) {",
      "415:         secrets.removeValue(forKey: secretId)",
      "416:     }",
      "420:     public var globalBlacklistUnverifiedDevices: Bool {",
      "421:         get {",
      "422:             storeAccount?.globalBlacklistUnverifiedDevices ?? false",
      "423:         } set {",
      "424:             storeAccount?.globalBlacklistUnverifiedDevices = newValue",
      "425:         }",
      "426:     }",
      "428:     public func blacklistUnverifiedDevices(inRoom roomId: String!) -> Bool {",
      "429:         algorithms[roomId]?.blacklistUnverifiedDevices ?? false",
      "430:     }",
      "432:     public func storeBlacklistUnverifiedDevices(inRoom roomId: String!, blacklist: Bool) {",
      "433:         if let algorithm = algorithms[roomId] {",
      "434:             algorithm.blacklistUnverifiedDevices = blacklist",
      "435:         } else {",
      "436:             algorithms[roomId] = RoomAlgorithm(algorithm: nil, blacklistUnverifiedDevices: blacklist)",
      "437:         }",
      "438:     }",
      "442:     public var cryptoVersion: MXCryptoVersion {",
      "443:         get {",
      "444:             storeAccount?.cryptoVersion ?? .versionUndefined",
      "445:         } set {",
      "446:             storeAccount?.cryptoVersion = newValue",
      "447:         }",
      "448:     }",
      "450: }",
      "456: private class InboundSession {",
      "457:     let session: MXOlmInboundGroupSession",
      "458:     var backedUp: Bool",
      "460:     var sessionId: String {",
      "461:         session.session.sessionIdentifier()",
      "462:     }",
      "464:     init(session: MXOlmInboundGroupSession,",
      "465:          backedUp: Bool = false) {",
      "466:         self.session = session",
      "467:         self.backedUp = backedUp",
      "468:     }",
      "469: }",
      "473: private struct OlmSessionMapKey: Hashable {",
      "474:     let sessionId: String",
      "475:     let deviceKey: String",
      "476: }",
      "480: private struct Account {",
      "481:     var userId: String?",
      "482:     var deviceId: String?",
      "483:     var cryptoVersion: MXCryptoVersion = .versionUndefined",
      "484:     var deviceSyncToken: String?",
      "485:     var olmAccount: OLMAccount?",
      "486:     var backupVersion: String?",
      "487:     var globalBlacklistUnverifiedDevices: Bool = false",
      "488:     var deviceTrackingStatus: [String : NSNumber]?",
      "489: }",
      "493: private struct SharedOutboundSession {",
      "494:     let roomId: String",
      "495:     let sessionId: String",
      "496:     let device: MXDeviceInfo",
      "497:     let messageIndex: UInt",
      "498: }",
      "502: private class RoomAlgorithm {",
      "503:     let algorithm: String?",
      "504:     var blacklistUnverifiedDevices: Bool",
      "506:     init(algorithm: String?,",
      "507:          blacklistUnverifiedDevices: Bool = false) {",
      "508:         self.algorithm = algorithm",
      "509:         self.blacklistUnverifiedDevices = blacklistUnverifiedDevices",
      "510:     }",
      "511: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXForwardedRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXForwardedRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"sender_key\": \"C\",",
      "30:             \"session_id\": \"D\",",
      "31:             \"session_key\": \"E\",",
      "32:             \"sender_claimed_ed25519_key\": \"F\",",
      "33:             \"forwarding_curve25519_key_chain\": [\"G\", \"H\"],",
      "34:             kMXSharedHistoryKeyName: false",
      "35:         ]",
      "36:     }",
      "38:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "39:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "40:             fromJSON: [:])",
      "41:         )",
      "43:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "44:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "45:         )",
      "47:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "48:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "49:         )",
      "51:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "52:             fromJSON: makeValidJSON().removing(key: \"sender_key\"))",
      "53:         )",
      "55:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "56:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "57:         )",
      "59:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "60:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "61:         )",
      "63:         XCTAssertNil(MXForwardedRoomKeyEventContent(",
      "64:             fromJSON: makeValidJSON().removing(key: \"sender_claimed_ed25519_key\"))",
      "65:         )",
      "66:     }",
      "68:     func test_modelFromJSON_canCreateFromJSON() {",
      "69:         let content = MXForwardedRoomKeyEventContent(fromJSON: makeValidJSON())",
      "71:         XCTAssertNotNil(content)",
      "72:         XCTAssertEqual(content?.algorithm, \"A\")",
      "73:         XCTAssertEqual(content?.roomId, \"B\")",
      "74:         XCTAssertEqual(content?.senderKey, \"C\")",
      "75:         XCTAssertEqual(content?.sessionId, \"D\")",
      "76:         XCTAssertEqual(content?.sessionKey, \"E\")",
      "77:         XCTAssertEqual(content?.senderClaimedEd25519Key, \"F\")",
      "78:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [\"G\", \"H\"])",
      "79:         XCTAssertEqual(content?.sharedHistory, false)",
      "80:     }",
      "82:     func test_modelFromJSON_forwardingCurveChainDefaultsToEmpty() {",
      "83:         let json = makeValidJSON().removing(key: \"forwarding_curve25519_key_chain\")",
      "84:         let content = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "85:         XCTAssertEqual(content?.forwardingCurve25519KeyChain, [])",
      "86:     }",
      "88:     func test_modelFromJSON_sharedHistory() {",
      "89:         var json = makeValidJSON()",
      "91:         json[kMXSharedHistoryKeyName] = true",
      "92:         let content1 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "93:         XCTAssertEqual(content1?.sharedHistory, true)",
      "95:         json[kMXSharedHistoryKeyName] = false",
      "96:         let content2 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "97:         XCTAssertEqual(content2?.sharedHistory, false)",
      "99:         json[kMXSharedHistoryKeyName] = nil",
      "100:         let content3 = MXForwardedRoomKeyEventContent(fromJSON: json)",
      "101:         XCTAssertEqual(content3?.sharedHistory, false)",
      "102:     }",
      "106:     func test_JSONDictionary_canExportJSON() {",
      "107:         let content = MXForwardedRoomKeyEventContent()",
      "108:         content.algorithm = \"A\"",
      "109:         content.roomId = \"B\"",
      "110:         content.senderKey = \"C\"",
      "111:         content.sessionId = \"D\"",
      "112:         content.sessionKey = \"E\"",
      "113:         content.senderClaimedEd25519Key = \"F\"",
      "114:         content.forwardingCurve25519KeyChain = [\"G\", \"H\"]",
      "115:         content.sharedHistory = false",
      "117:         let json = content.jsonDictionary()",
      "119:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "120:     }",
      "121: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/Data/MXRoomKeyEventContentUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyEventContentUnitTests: XCTestCase {",
      "25:     func makeValidJSON() -> [String: Any] {",
      "26:         return [",
      "27:             \"algorithm\": \"A\",",
      "28:             \"room_id\": \"B\",",
      "29:             \"session_id\": \"C\",",
      "30:             \"session_key\": \"D\",",
      "31:             kMXSharedHistoryKeyName: false",
      "32:         ]",
      "33:     }",
      "35:     func test_modelFromJSON_doesNotCreateWithMissingFields() {",
      "36:         XCTAssertNil(MXRoomKeyEventContent(",
      "37:             fromJSON: [:])",
      "38:         )",
      "40:         XCTAssertNil(MXRoomKeyEventContent(",
      "41:             fromJSON: makeValidJSON().removing(key: \"algorithm\"))",
      "42:         )",
      "44:         XCTAssertNil(MXRoomKeyEventContent(",
      "45:             fromJSON: makeValidJSON().removing(key: \"room_id\"))",
      "46:         )",
      "48:         XCTAssertNil(MXRoomKeyEventContent(",
      "49:             fromJSON: makeValidJSON().removing(key: \"session_id\"))",
      "50:         )",
      "52:         XCTAssertNil(MXRoomKeyEventContent(",
      "53:             fromJSON: makeValidJSON().removing(key: \"session_key\"))",
      "54:         )",
      "55:     }",
      "57:     func test_modelFromJSON_canCreateFromJSON() {",
      "58:         let content = MXRoomKeyEventContent(fromJSON: makeValidJSON())",
      "60:         XCTAssertNotNil(content)",
      "61:         XCTAssertEqual(content?.algorithm, \"A\")",
      "62:         XCTAssertEqual(content?.roomId, \"B\")",
      "63:         XCTAssertEqual(content?.sessionId, \"C\")",
      "64:         XCTAssertEqual(content?.sessionKey, \"D\")",
      "65:         XCTAssertEqual(content?.sharedHistory, false)",
      "66:     }",
      "68:     func test_modelFromJSON_sharedHistory() {",
      "69:         var json = makeValidJSON()",
      "71:         json[kMXSharedHistoryKeyName] = true",
      "72:         let content1 = MXRoomKeyEventContent(fromJSON: json)",
      "73:         XCTAssertEqual(content1?.sharedHistory, true)",
      "75:         json[kMXSharedHistoryKeyName] = false",
      "76:         let content2 = MXRoomKeyEventContent(fromJSON: json)",
      "77:         XCTAssertEqual(content2?.sharedHistory, false)",
      "79:         json[kMXSharedHistoryKeyName] = nil",
      "80:         let content3 = MXRoomKeyEventContent(fromJSON: json)",
      "81:         XCTAssertEqual(content3?.sharedHistory, false)",
      "82:     }",
      "86:     func test_JSONDictionary_canExportJSON() {",
      "87:         let content = MXRoomKeyEventContent()",
      "88:         content.algorithm = \"A\"",
      "89:         content.roomId = \"B\"",
      "90:         content.sessionId = \"C\"",
      "91:         content.sessionKey = \"D\"",
      "92:         content.sharedHistory = false",
      "94:         let json = content.jsonDictionary()",
      "96:         XCTAssertEqual(json as? NSDictionary, makeValidJSON() as NSDictionary)",
      "97:     }",
      "98: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift||MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift -> MatrixSDKTests/Crypto/KeySharing/MXUnrequestedForwardedRoomKeyManagerUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: private let BobSenderKey = \"BobDeviceCurveKey\"",
      "23: class MXUnrequestedForwardedRoomKeyManagerUnitTests: XCTestCase {",
      "24:     class Delegate: MXUnrequestedForwardedRoomKeyManagerDelegate {",
      "25:         var stubbedUserKeys = [String: [MXDeviceInfo]]()",
      "26:         var spyKeys = [MXRoomKeyInfo]()",
      "28:         func downloadDeviceKeys(userId: String, completion: @escaping (MXUsersDevicesMap<MXDeviceInfo>) -> Void) {",
      "29:             let map = MXUsersDevicesMap<MXDeviceInfo>()",
      "30:             for (userId, devices) in stubbedUserKeys {",
      "31:                 for device in devices {",
      "32:                     map.setObject(device, forUser: userId, andDevice: device.deviceId)",
      "33:                 }",
      "34:             }",
      "35:             completion(map)",
      "36:         }",
      "38:         func acceptRoomKey(keyInfo: MXRoomKeyInfo) {",
      "39:             spyKeys.append(keyInfo)",
      "40:         }",
      "41:     }",
      "43:     class StubDateProvider: MXDateProviding {",
      "44:         var stubbedDate: Date?",
      "45:         func currentDate() -> Date {",
      "46:             return stubbedDate ?? Date()",
      "47:         }",
      "48:     }",
      "50:     var dateProvider: StubDateProvider!",
      "51:     var manager: MXUnrequestedForwardedRoomKeyManager!",
      "52:     var delegate: Delegate!",
      "54:     override func setUp() {",
      "55:         dateProvider = StubDateProvider()",
      "56:         manager = MXUnrequestedForwardedRoomKeyManager(dateProvider: dateProvider)",
      "57:         delegate = Delegate()",
      "58:         manager.delegate = delegate",
      "60:         delegate.stubbedUserKeys = [",
      "61:             \"Bob\": [",
      "62:                 MXDeviceInfo(fromJSON: [",
      "63:                     \"user_id\": \"Bob\",",
      "64:                     \"device_id\": \"BobDevice\",",
      "65:                     \"keys\": [",
      "66:                         \"ed25519:BobDevice\": \"BobDeviceEdKey\",",
      "67:                         \"curve25519:BobDevice\": BobSenderKey,",
      "68:                     ]",
      "69:                 ])",
      "70:             ]",
      "71:         ]",
      "72:     }",
      "74:     func test_processUnrequestedKeys_doesNothingIfNoKeys() {",
      "75:         manager.processUnrequestedKeys()",
      "76:         XCTAssertEqual(delegate.spyKeys, [])",
      "77:     }",
      "79:     func test_processUnrequestedKeys_addsAllKeysForInvitedRooms() {",
      "80:         let keys = [",
      "81:             MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "82:             MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "83:             MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"B\"),",
      "84:             MXRoomKeyInfo.fixture(sessionId: \"4\", roomId: \"C\"),",
      "85:         ]",
      "86:         for info in keys {",
      "87:             manager.addPendingKey(keyInfo: info, senderId: \"Bob\", senderKey: BobSenderKey)",
      "88:         }",
      "89:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "90:         manager.onRoomInvite(roomId: \"C\", senderId: \"Bob\")",
      "92:         manager.processUnrequestedKeys()",
      "94:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "95:         XCTAssertEqual(Set(sessionIds), [\"1\", \"2\", \"4\"])",
      "96:     }",
      "98:     func test_processUnrequestedKeys_addsOnlyKeysFromRoomInviter() {",
      "99:         manager.addPendingKey(",
      "100:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "101:             senderId: \"Bob\",",
      "102:             senderKey: \"AliceKey\"",
      "103:         )",
      "104:         manager.addPendingKey(",
      "105:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "106:             senderId: \"Bob\",",
      "107:             senderKey: BobSenderKey",
      "108:         )",
      "109:         manager.addPendingKey(",
      "110:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"3\", roomId: \"A\"),",
      "111:             senderId: \"Bob\",",
      "112:             senderKey: \"CharlieKey\"",
      "113:         )",
      "114:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "116:         manager.processUnrequestedKeys()",
      "118:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "119:         XCTAssertEqual(Set(sessionIds), [\"2\"])",
      "120:     }",
      "122:     func test_processUnrequestedKeys_doesNotAddKeysIfSenderNotValid() {",
      "123:         manager.addPendingKey(",
      "124:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "125:             senderId: \"Bob\",",
      "126:             senderKey: \"BobInvalidKey\"",
      "127:         )",
      "128:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "130:         manager.processUnrequestedKeys()",
      "132:         XCTAssertEqual(delegate.spyKeys, [])",
      "133:     }",
      "135:     func test_processUnrequestedKeys_removesProcessedKeys() {",
      "136:         delegate.spyKeys = []",
      "137:         manager.addPendingKey(",
      "138:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "139:             senderId: \"Bob\",",
      "140:             senderKey: BobSenderKey",
      "141:         )",
      "142:         manager.processUnrequestedKeys()",
      "143:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "145:         delegate.spyKeys = []",
      "146:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "147:         manager.processUnrequestedKeys()",
      "148:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "150:         delegate.spyKeys = []",
      "151:         manager.processUnrequestedKeys()",
      "152:         XCTAssertEqual(delegate.spyKeys.count, 0)",
      "153:     }",
      "155:     func test_processUnrequestedKeys_removesInvitesMoreThan10MinutesFromPresent() {",
      "156:         let minutesToRoom: [TimeInterval: String] = [",
      "157:             -10: \"A\",",
      "158:              -9: \"B\",",
      "159:              0: \"C\",",
      "160:              9: \"D\",",
      "161:              10: \"E\"",
      "162:         ]",
      "165:         for (minutes, roomId) in minutesToRoom {",
      "166:             stubDate(timeInterval: minutes * 60)",
      "167:             manager.addPendingKey(",
      "168:                 keyInfo: MXRoomKeyInfo.fixture(sessionId: roomId, roomId: roomId),",
      "169:                 senderId: \"Bob\",",
      "170:                 senderKey: BobSenderKey",
      "171:             )",
      "172:         }",
      "175:         for (minutes, roomId) in minutesToRoom {",
      "176:             stubDate(timeInterval: minutes * 60)",
      "177:             manager.onRoomInvite(roomId: roomId, senderId: \"Bob\")",
      "178:         }",
      "181:         stubDate(timeInterval: 0)",
      "184:         manager.processUnrequestedKeys()",
      "186:         let sessionIds = delegate.spyKeys.map { $0.sessionId }",
      "187:         XCTAssertEqual(Set(sessionIds), [\"B\", \"C\", \"D\"])",
      "188:     }",
      "190:     func test_processUnrequestedKeys_removesKeysOlderThan10MinutesOfInvite() {",
      "191:         stubDate(timeInterval: 0)",
      "192:         manager.addPendingKey(",
      "193:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"1\", roomId: \"A\"),",
      "194:             senderId: \"Bob\",",
      "195:             senderKey: BobSenderKey",
      "196:         )",
      "197:         stubDate(timeInterval: 1 * 60)",
      "198:         manager.addPendingKey(",
      "199:             keyInfo: MXRoomKeyInfo.fixture(sessionId: \"2\", roomId: \"A\"),",
      "200:             senderId: \"Bob\",",
      "201:             senderKey: BobSenderKey",
      "202:         )",
      "203:         stubDate(timeInterval: 10 * 60)",
      "204:         manager.onRoomInvite(roomId: \"A\", senderId: \"Bob\")",
      "205:         stubDate(timeInterval: 19 * 60)",
      "207:         manager.processUnrequestedKeys()",
      "209:         XCTAssertEqual(delegate.spyKeys.count, 1)",
      "210:         XCTAssertEqual(delegate.spyKeys.first?.sessionId, \"2\")",
      "211:     }",
      "215:     func stubDate(timeInterval: TimeInterval) {",
      "216:         dateProvider.stubbedDate = Date(timeIntervalSince1970: timeInterval)",
      "217:     }",
      "218: }",
      "220: private extension MXRoomKeyInfo {",
      "221:     static func fixture(",
      "222:         sessionId: String,",
      "223:         roomId: String",
      "224:     ) -> MXRoomKeyInfo {",
      "225:         return MXRoomKeyInfo(",
      "226:             algorithm: \"\",",
      "227:             sessionId: sessionId,",
      "228:             sessionKey: \"\",",
      "229:             roomId: roomId,",
      "230:             senderKey: \"\",",
      "231:             forwardingKeyChain: nil,",
      "232:             keysClaimed: [:],",
      "233:             exportFormat: false,",
      "234:             sharedHistory: false",
      "235:         )",
      "236:     }",
      "237: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift||MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift -> MatrixSDKTests/Crypto/MXOlmDeviceUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:             forwardingCurve25519KeyChain: [],",
      "72:             keysClaimed: [:],",
      "73:             exportFormat: false,",
      "75:         )",
      "76:     }",
      "",
      "[Removed Lines]",
      "74:             sharedHistory: sharedHistory",
      "",
      "[Added Lines]",
      "74:             sharedHistory: sharedHistory,",
      "75:             untrusted: false",
      "",
      "---------------"
    ],
    "MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift||MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift": [
      "File: MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift -> MatrixSDKTests/Crypto/RoomKeys/MXRoomKeyInfoFactoryUnitTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import Foundation",
      "18: import XCTest",
      "19: @testable import MatrixSDK",
      "21: class MXRoomKeyInfoFactoryUnitTests: XCTestCase {",
      "23:     var store: MXMemoryCryptoStore!",
      "24:     var factory: MXRoomKeyInfoFactory!",
      "25:     override func setUp() {",
      "26:         store = MXMemoryCryptoStore(credentials: MXCredentials(homeServer: \"\", userId: \"Alice\", accessToken: nil))",
      "27:         factory = MXRoomKeyInfoFactory(myUserId: \"Alice\", store: store)",
      "28:         storeOutgoingKeyRequest(requestId: \"1\")",
      "29:     }",
      "33:     func test_roomKeyInfo_isNilForInvalidEvent() {",
      "34:         let info = factory.roomKey(for: MXEvent(fromJSON: [:]))",
      "35:         XCTAssertNil(info)",
      "36:     }",
      "40:     func test_roomKeyInfo_createFromRoomKeyEvent() {",
      "41:         let event = MXEvent.roomKeyFixture()",
      "43:         let key = factory.roomKey(for: event)",
      "45:         let info = key?.info",
      "46:         XCTAssertNotNil(key)",
      "47:         XCTAssertEqual(key?.type, .safe)",
      "48:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "49:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "50:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "51:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "52:         XCTAssertEqual(info?.senderKey, \"<sender_key>\")",
      "53:         XCTAssertNil(info?.forwardingKeyChain)",
      "54:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "55:         XCTAssertEqual(info?.exportFormat, false)",
      "56:         XCTAssertEqual(info?.sharedHistory, false)",
      "57:     }",
      "61:     func test_roomKeyInfo_isUnrequestedIfKeyNotRequested() {",
      "62:         store.deleteOutgoingRoomKeyRequest(withRequestId: \"1\")",
      "63:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "64:         let event = MXEvent.forwardedRoomKeyFixture(",
      "65:             senderKey: \"AliceSender\"",
      "66:         )",
      "68:         let key = factory.roomKey(for: event)",
      "70:         let info = key?.info",
      "71:         XCTAssertNotNil(key)",
      "72:         XCTAssertEqual(key?.type, .unrequested)",
      "73:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "74:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "75:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "76:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "77:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "78:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "79:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "80:         XCTAssertEqual(info?.exportFormat, true)",
      "81:         XCTAssertEqual(info?.sharedHistory, false)",
      "82:     }",
      "84:     func test_roomKeyInfo_isUnsafeIfNotFromMyself() {",
      "85:         storeDevice(userId: \"Bob\", trusted: true, identityKey: \"AliceSender\")",
      "86:         let event = MXEvent.forwardedRoomKeyFixture(",
      "87:             senderKey: \"AliceSender\"",
      "88:         )",
      "90:         let key = factory.roomKey(for: event)",
      "92:         let info = key?.info",
      "93:         XCTAssertNotNil(key)",
      "94:         XCTAssertEqual(key?.type, .unsafe)",
      "95:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "96:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "97:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "98:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "99:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "100:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "101:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "102:         XCTAssertEqual(info?.exportFormat, true)",
      "103:         XCTAssertEqual(info?.sharedHistory, false)",
      "104:     }",
      "106:     func test_roomKeyInfo_isUnsafeIfFromUnverifiedDevice() {",
      "107:         storeDevice(userId: \"Alice\", trusted: false, identityKey: \"AliceSender\")",
      "108:         let event = MXEvent.forwardedRoomKeyFixture(",
      "109:             senderKey: \"AliceSender\"",
      "110:         )",
      "112:         let key = factory.roomKey(for: event)",
      "114:         let info = key?.info",
      "115:         XCTAssertNotNil(key)",
      "116:         XCTAssertEqual(key?.type, .unsafe)",
      "117:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "118:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "119:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "120:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "121:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "122:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "123:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "124:         XCTAssertEqual(info?.exportFormat, true)",
      "125:         XCTAssertEqual(info?.sharedHistory, false)",
      "126:     }",
      "128:     func test_roomKeyInfo_createFromForwardedRoomKeyEvent() {",
      "129:         storeDevice(userId: \"Alice\", trusted: true, identityKey: \"AliceSender\")",
      "130:         let event = MXEvent.forwardedRoomKeyFixture(",
      "131:             senderKey: \"AliceSender\"",
      "132:         )",
      "134:         let key = factory.roomKey(for: event)",
      "136:         let info = key?.info",
      "137:         XCTAssertNotNil(key)",
      "138:         XCTAssertEqual(key?.type, .safe)",
      "139:         XCTAssertEqual(info?.algorithm, \"megolm\")",
      "140:         XCTAssertEqual(info?.sessionId, \"session1\")",
      "141:         XCTAssertEqual(info?.sessionKey, \"<key>\")",
      "142:         XCTAssertEqual(info?.roomId, \"!123:matrix.org\")",
      "143:         XCTAssertEqual(info?.senderKey, \"<initial_sender_key>\")",
      "144:         XCTAssertEqual(info?.forwardingKeyChain, [\"AliceSender\"])",
      "145:         XCTAssertEqual(info?.keysClaimed as? NSDictionary, [\"ed25519\": \"<claimed_key>\"])",
      "146:         XCTAssertEqual(info?.exportFormat, true)",
      "147:         XCTAssertEqual(info?.sharedHistory, false)",
      "148:     }",
      "152:     func storeOutgoingKeyRequest(",
      "153:         requestId: String = \"1\",",
      "154:         algorithm: String = \"megolm\",",
      "155:         roomId: String = \"!123:matrix.org\",",
      "156:         sessionId: String = \"session1\",",
      "157:         senderKey: String = \"<initial_sender_key>\"",
      "158:     ) {",
      "159:         let request = MXOutgoingRoomKeyRequest()",
      "160:         request.requestId = requestId",
      "162:         request.requestBody = [",
      "163:             \"room_id\": roomId,",
      "164:             \"algorithm\": algorithm,",
      "165:             \"sender_key\": senderKey,",
      "166:             \"session_id\": sessionId",
      "167:         ]",
      "168:         store.store(request)",
      "169:     }",
      "171:     func storeDevice(userId: String, trusted: Bool, identityKey: String) {",
      "172:         let trust = MXDeviceTrustLevel(",
      "173:             localVerificationStatus: trusted ? .verified : .unverified,",
      "174:             crossSigningVerified: false",
      "175:         )",
      "176:         let device = MXDeviceInfo(fromJSON: [",
      "177:             \"user_id\": userId,",
      "178:             \"device_id\": \"ABC\",",
      "179:             \"keys\": [\"curve25519:ABC\": identityKey]",
      "180:         ])!",
      "181:         device.setValue(trust, forKey: \"trustLevel\")",
      "182:         store.storeDevice(forUser: userId, device: device)",
      "183:     }",
      "184: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/JSONModels/MXEventFixtures.swift||MatrixSDKTests/JSONModels/MXEventFixtures.swift": [
      "File: MatrixSDKTests/JSONModels/MXEventFixtures.swift -> MatrixSDKTests/JSONModels/MXEventFixtures.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:             ]",
      "35:         ])!",
      "36:     }",
      "37: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:     static func roomKeyFixture(",
      "39:         algorithm: String = \"megolm\",",
      "40:         roomId: String = \"!123:matrix.org\",",
      "41:         sessionId: String = \"session1\",",
      "42:         sessionKey: String = \"<key>\",",
      "43:         senderKey: String = \"<sender_key>\",",
      "44:         claimedKey: String = \"<claimed_key>\",",
      "45:         sharedHistory: Bool? = nil",
      "46:     ) -> MXEvent {",
      "47:         var content: [String: Any] = [",
      "48:             \"type\": kMXEventTypeStringRoomKey,",
      "49:             \"room_id\": roomId,",
      "50:             \"session_id\": sessionId,",
      "51:             \"session_key\": sessionKey,",
      "52:             \"algorithm\": algorithm",
      "53:         ]",
      "55:         if let sharedHistory = sharedHistory {",
      "56:             content[\"org.matrix.msc3061.shared_history\"] = sharedHistory",
      "57:         }",
      "59:         let result = MXEventDecryptionResult()",
      "60:         result.senderCurve25519Key = senderKey",
      "61:         result.claimedEd25519Key = claimedKey",
      "62:         result.clearEvent = [",
      "63:             \"type\": kMXEventTypeStringRoomKey,",
      "64:             \"content\": content",
      "65:         ]",
      "67:         let event = MXEvent(fromJSON: [:])!",
      "68:         event.setClearData(result)",
      "69:         return event",
      "70:     }",
      "72:     static func forwardedRoomKeyFixture(",
      "73:         algorithm: String = \"megolm\",",
      "74:         roomId: String = \"!123:matrix.org\",",
      "75:         sessionId: String = \"session1\",",
      "76:         sessionKey: String = \"<key>\",",
      "77:         senderKey: String = \"<sender_key>\",",
      "78:         initialSenderKey: String = \"<initial_sender_key>\",",
      "79:         claimedKey: String = \"<claimed_key>\",",
      "80:         sharedHistory: Bool = false",
      "81:     ) -> MXEvent {",
      "82:         let content: [String: Any] = [",
      "83:             \"type\": kMXEventTypeStringRoomKey,",
      "84:             \"room_id\": roomId,",
      "85:             \"session_id\": sessionId,",
      "86:             \"session_key\": sessionKey,",
      "87:             \"algorithm\": algorithm,",
      "88:             \"sender_key\": initialSenderKey,",
      "89:             \"sender_claimed_ed25519_key\": claimedKey,",
      "90:             kMXSharedHistoryKeyName: sharedHistory",
      "91:         ]",
      "93:         let result = MXEventDecryptionResult()",
      "94:         result.senderCurve25519Key = senderKey",
      "95:         result.claimedEd25519Key = claimedKey",
      "96:         result.clearEvent = [",
      "97:             \"type\": kMXEventTypeStringRoomForwardedKey,",
      "98:             \"content\": content",
      "99:         ]",
      "101:         let event = MXEvent(fromJSON: [:])!",
      "102:         event.setClearData(result)",
      "103:         return event",
      "104:     }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoSecretShareTests.m||MatrixSDKTests/MXCryptoSecretShareTests.m": [
      "File: MatrixSDKTests/MXCryptoSecretShareTests.m -> MatrixSDKTests/MXCryptoSecretShareTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:  - Alice has a secret on her 1st device",
      "84:  - Alice logs in on a new device",
      "86:  - Alice requests the secret from the new device",
      "87:  -> She gets the secret",
      "",
      "[Removed Lines]",
      "85:  - Alice trusts the new device",
      "",
      "[Added Lines]",
      "85:  - Alice trusts the new device and vice versa",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:             MXCredentials *newAlice = newAliceSession.matrixRestClient.credentials;",
      "105:             [aliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:newAlice.deviceId ofUser:newAlice.userId success:nil failure:nil];",
      "108:             [newAliceSession.crypto.secretShareManager requestSecret:secretId toDeviceIds:nil success:^(NSString * _Nonnull requestId) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:             [newAliceSession.crypto setDeviceVerification:MXDeviceVerified forDevice:aliceSession.myDeviceId ofUser:aliceSession.myUserId success:nil failure:nil];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
      "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #import \"MXSendReplyEventDefaultStringLocalizer.h\"",
      "32: #import \"MXOutboundSessionInfo.h\"",
      "33: #import <OLMKit/OLMKit.h>",
      "35: #import \"MXKey.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #import \"MXLRUCache.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2082:                 id<MXCryptoStore> bobCryptoStore = (id<MXCryptoStore>)[bobSession.crypto.olmDevice valueForKey:@\"store\"];",
      "2083:                 [bobCryptoStore removeInboundGroupSessionWithId:sessionId andSenderKey:toDeviceEvent.senderKey];",
      "2086:                 [event setClearData:nil];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2085:                 MXLRUCache *cache = [bobSession.crypto.olmDevice valueForKey:@\"inboundGroupSessionCache\"];",
      "2086:                 [cache clear];",
      "",
      "---------------"
    ],
    "MatrixSDKTests/MXToolsUnitTests.m||MatrixSDKTests/MXToolsUnitTests.m": [
      "File: MatrixSDKTests/MXToolsUnitTests.m -> MatrixSDKTests/MXToolsUnitTests.m",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #import \"MXTools.h\"",
      "20: #import \"MatrixSDKTestsSwiftHeader.h\"",
      "22: @interface MXToolsUnitTests : XCTestCase",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #import \"MatrixSDKSwiftHeader.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "129:     XCTAssertNotEqualObjects(url, [MXTools urlStringWithBase:currentResult queryParameters:@[parameter]]);",
      "130: }",
      "132: @end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: #pragma mark - Supported To-Device events",
      "135: - (void)testSupportedToDeviceEvents",
      "136: {",
      "137:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "138:         @\"type\": @\"m.room.encrypted\",",
      "139:         @\"content\": @{",
      "140:             @\"algorithm\": kMXCryptoOlmAlgorithm",
      "141:         }",
      "142:     }];",
      "143:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event1]);",
      "145:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "146:         @\"type\": @\"m.room.message\",",
      "147:     }];",
      "148:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event2]);",
      "150:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "151:         @\"type\": @\"random\",",
      "152:     }];",
      "153:     XCTAssertTrue([MXTools isSupportedToDeviceEvent:event3]);",
      "154: }",
      "156: - (void)testUnsupportedToDeviceEvents",
      "157: {",
      "158:     MXEvent *event1 = [MXEvent modelFromJSON:@{",
      "159:         @\"type\": @\"m.room.encrypted\",",
      "160:         @\"content\": @{",
      "161:             @\"algorithm\": kMXCryptoMegolmAlgorithm",
      "162:         }",
      "163:     }];",
      "164:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event1]);",
      "166:     MXEvent *event2 = [MXEvent modelFromJSON:@{",
      "167:         @\"type\": @\"m.room_key\",",
      "168:     }];",
      "169:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event2]);",
      "171:     MXEvent *event3 = [MXEvent modelFromJSON:@{",
      "172:         @\"type\": @\"m.forwarded_room_key\",",
      "173:     }];",
      "174:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event3]);",
      "176:     MXEvent *event4 = [MXEvent modelFromJSON:@{",
      "177:         @\"type\": @\"m.secret.send\",",
      "178:     }];",
      "179:     XCTAssertFalse([MXTools isSupportedToDeviceEvent:event4]);",
      "180: }",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         \"MXEventsByTypesEnumeratorOnArrayTests\",",
      "53:         \"MXEventsEnumeratorOnArrayTests\",",
      "54:         \"MXFilterUnitTests\",",
      "55:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "56:         \"MXJSONModelUnitTests\",",
      "57:         \"MXKeyBackupUnitTests\",",
      "58:         \"MXKeyProviderUnitTests\",",
      "59:         \"MXMediaScanStoreUnitTests\",",
      "60:         \"MXMegolmDecryptionUnitTests\",",
      "61:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "60:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         \"MXQRCodeDataUnitTests\",",
      "68:         \"MXReplyEventParserUnitTests\",",
      "69:         \"MXResponseUnitTests\",",
      "70:         \"MXRoomStateUnitTests\",",
      "71:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "72:         \"MXStoreRoomListDataManagerUnitTests\",",
      "73:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:         \"MXRoomKeyEventContentUnitTests\",",
      "73:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "75:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:         \"MXThreadEventTimelineUnitTests\",",
      "76:         \"MXThreadingServiceUnitTests\",",
      "77:         \"MXToolsUnitTests\",",
      "79:       ],",
      "80:       \"target\" : {",
      "81:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "78:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "83:         \"MXTrustLevelSourceUnitTests\",",
      "84:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ],
    "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
      "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         \"MXEventReferenceUnitTests\",",
      "61:         \"MXEventScanStoreUnitTests\",",
      "62:         \"MXFilterUnitTests\",",
      "63:         \"MXHTTPAdditionalHeadersUnitTests\",",
      "64:         \"MXJSONModelUnitTests\",",
      "65:         \"MXKeyBackupUnitTests\",",
      "66:         \"MXKeyProviderUnitTests\",",
      "67:         \"MXMediaScanStoreUnitTests\",",
      "68:         \"MXMegolmDecryptionUnitTests\",",
      "69:         \"MXMegolmExportEncryptionUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:         \"MXForwardedRoomKeyEventContentUnitTests\",",
      "68:         \"MXKeyVerificationRequestV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         \"MXQRCodeDataUnitTests\",",
      "76:         \"MXReplyEventParserUnitTests\",",
      "77:         \"MXResponseUnitTests\",",
      "78:         \"MXRoomStateUnitTests\",",
      "79:         \"MXSharedHistoryKeyManagerUnitTests\",",
      "80:         \"MXStoreRoomListDataManagerUnitTests\",",
      "81:         \"MXSyncResponseUnitTests\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80:         \"MXRoomKeyEventContentUnitTests\",",
      "81:         \"MXRoomKeyInfoFactoryUnitTests\",",
      "83:         \"MXSASTransactionV2UnitTests\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:         \"MXThreadEventTimelineUnitTests\",",
      "84:         \"MXThreadingServiceUnitTests\",",
      "85:         \"MXToolsUnitTests\",",
      "87:       ],",
      "88:       \"target\" : {",
      "89:         \"containerPath\" : \"container:MatrixSDK.xcodeproj\",",
      "",
      "[Removed Lines]",
      "86:         \"MXTrustLevelSourceUnitTests\"",
      "",
      "[Added Lines]",
      "91:         \"MXTrustLevelSourceUnitTests\",",
      "92:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea6009084ab8db40ad6adda0eab7865f932e0f3b",
      "candidate_info": {
        "commit_hash": "ea6009084ab8db40ad6adda0eab7865f932e0f3b",
        "repo": "matrix-org/matrix-ios-sdk",
        "commit_url": "https://github.com/matrix-org/matrix-ios-sdk/commit/ea6009084ab8db40ad6adda0eab7865f932e0f3b",
        "files": [
          "MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Contrib/Swift/MXRestClient.swift",
          "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
          "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift",
          "MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m",
          "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
          "MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/JSONModels/MXEvent.h",
          "MatrixSDK/JSONModels/MXEvent.m",
          "MatrixSDK/MXRestClient.h",
          "MatrixSDK/MXRestClient.m",
          "MatrixSDK/MXSession.m",
          "MatrixSDK/Utils/MXToDevicePayload.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift",
          "MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MXSessionTests.m",
          "MatrixSDKTests/MXToDevicePayloadUnitTests.swift",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/pr-1652.change"
        ],
        "message": "Add message id for to-device events",
        "before_after_code_files": [
          "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
          "MatrixSDK/Contrib/Swift/MXRestClient.swift||MatrixSDK/Contrib/Swift/MXRestClient.swift",
          "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
          "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift",
          "MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m||MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m",
          "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
          "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
          "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "MatrixSDK/JSONModels/MXEvent.h||MatrixSDK/JSONModels/MXEvent.h",
          "MatrixSDK/JSONModels/MXEvent.m||MatrixSDK/JSONModels/MXEvent.m",
          "MatrixSDK/MXRestClient.h||MatrixSDK/MXRestClient.h",
          "MatrixSDK/MXRestClient.m||MatrixSDK/MXRestClient.m",
          "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
          "MatrixSDK/Utils/MXToDevicePayload.swift||MatrixSDK/Utils/MXToDevicePayload.swift",
          "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift",
          "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
          "MatrixSDKTests/MXSessionTests.m||MatrixSDKTests/MXSessionTests.m",
          "MatrixSDKTests/MXToDevicePayloadUnitTests.swift||MatrixSDKTests/MXToDevicePayloadUnitTests.swift",
          "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "changelog.d/pr-1652.change||changelog.d/pr-1652.change"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
            "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
            "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ],
          "candidate": [
            "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj",
            "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
            "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
            "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
            "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m",
            "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m",
            "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m",
            "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan",
            "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan"
          ]
        }
      },
      "candidate_diff": {
        "MatrixSDK.xcodeproj/project.pbxproj||MatrixSDK.xcodeproj/project.pbxproj": [
          "File: MatrixSDK.xcodeproj/project.pbxproj -> MatrixSDK.xcodeproj/project.pbxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1939:   ED751DAF28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */; };",
          "1940:   ED76A4AD28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */; };",
          "1941:   ED76A4AE28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */; };",
          "1942:   ED825F8F29014EDA006A614E /* MXSession+LegacyCrypto.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED825F8E29014EDA006A614E /* MXSession+LegacyCrypto.swift */; };",
          "1943:   ED825F9029014EDA006A614E /* MXSession+LegacyCrypto.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED825F8E29014EDA006A614E /* MXSession+LegacyCrypto.swift */; };",
          "1944:   ED88999127F2065D00718486 /* MXRoomAliasResolution.h in Headers */ = {isa = PBXBuildFile; fileRef = ED88998F27F2065C00718486 /* MXRoomAliasResolution.h */; settings = {ATTRIBUTES = (Public, ); }; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1942:   ED79B9852940BB45008952F6 /* MXToDevicePayloadUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED79B9842940BB45008952F6 /* MXToDevicePayloadUnitTests.swift */; };",
          "1943:   ED79B9862940BB45008952F6 /* MXToDevicePayloadUnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = ED79B9842940BB45008952F6 /* MXToDevicePayloadUnitTests.swift */; };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2003:   EDD578EA2881C37C006739DD /* MXCryptoUserIdentityWrapper.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDD578E02881C37C006739DD /* MXCryptoUserIdentityWrapper.swift */; };",
          "2004:   EDD578EC2881C38C006739DD /* MXCrossSigningV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDD578EB2881C38C006739DD /* MXCrossSigningV2.swift */; };",
          "2005:   EDD578ED2881C38C006739DD /* MXCrossSigningV2.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDD578EB2881C38C006739DD /* MXCrossSigningV2.swift */; };",
          "2006:   EDDD90C82901611600B760E0 /* MXLegacyCrypto+LegacyCrossSigning.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDDD90C72901611600B760E0 /* MXLegacyCrypto+LegacyCrossSigning.swift */; };",
          "2007:   EDDD90C92901611600B760E0 /* MXLegacyCrypto+LegacyCrossSigning.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDDD90C72901611600B760E0 /* MXLegacyCrypto+LegacyCrossSigning.swift */; };",
          "2008:   EDE1B13B28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDE1B13A28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift */; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2008:   EDDBA7F0293F353900AD1480 /* MXToDevicePayload.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDDBA7EF293F353900AD1480 /* MXToDevicePayload.swift */; };",
          "2009:   EDDBA7F1293F353900AD1480 /* MXToDevicePayload.swift in Sources */ = {isa = PBXBuildFile; fileRef = EDDBA7EF293F353900AD1480 /* MXToDevicePayload.swift */; };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3079:   ED751DA928EDE4F4003748C3 /* MXKeyVerificationManagerV2UnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationManagerV2UnitTests.swift; sourceTree = \"<group>\"; };",
          "3080:   ED751DAD28EDEC7E003748C3 /* MXKeyVerificationStateResolverUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationStateResolverUnitTests.swift; sourceTree = \"<group>\"; };",
          "3081:   ED76A4AC28EDA2CE00036FF0 /* MXKeyVerificationStateResolver.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXKeyVerificationStateResolver.swift; sourceTree = \"<group>\"; };",
          "3082:   ED825F8E29014EDA006A614E /* MXSession+LegacyCrypto.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = \"MXSession+LegacyCrypto.swift\"; sourceTree = \"<group>\"; };",
          "3083:   ED88998F27F2065C00718486 /* MXRoomAliasResolution.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MXRoomAliasResolution.h; sourceTree = \"<group>\"; };",
          "3084:   ED88999027F2065D00718486 /* MXRoomAliasResolution.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MXRoomAliasResolution.m; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3086:   ED79B9842940BB45008952F6 /* MXToDevicePayloadUnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXToDevicePayloadUnitTests.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3112:   EDD578DF2881C37C006739DD /* MXCryptoDeviceWrapper.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoDeviceWrapper.swift; sourceTree = \"<group>\"; };",
          "3113:   EDD578E02881C37C006739DD /* MXCryptoUserIdentityWrapper.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCryptoUserIdentityWrapper.swift; sourceTree = \"<group>\"; };",
          "3114:   EDD578EB2881C38C006739DD /* MXCrossSigningV2.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = MXCrossSigningV2.swift; sourceTree = \"<group>\"; };",
          "3115:   EDDD90C72901611600B760E0 /* MXLegacyCrypto+LegacyCrossSigning.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = \"MXLegacyCrypto+LegacyCrossSigning.swift\"; sourceTree = \"<group>\"; };",
          "3116:   EDE1B13A28B7BEAB000DEEE8 /* MXCrossSigningV2UnitTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXCrossSigningV2UnitTests.swift; sourceTree = \"<group>\"; };",
          "3117:   EDE70DC728DA22F800099736 /* MXKeyBackupEngine.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MXKeyBackupEngine.h; sourceTree = \"<group>\"; };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3120:   EDDBA7EF293F353900AD1480 /* MXToDevicePayload.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MXToDevicePayload.swift; sourceTree = \"<group>\"; };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3379:     EDF1B68F2876CD2C00BBBCEE /* MXTaskQueue.swift */,",
          "3380:     ED1AE9292881AC7100D3432A /* MXWarnings.h */,",
          "3381:     ED6DAC2028C7A4F000ECDCB6 /* MXDateProvider.swift */,",
          "3382:    );",
          "3383:    path = Utils;",
          "3384:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3388:     EDDBA7EF293F353900AD1480 /* MXToDevicePayload.swift */,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4357:     3A96CD482901512C00F9A5AB /* MXReceiptDataIntegrationTests.swift */,",
          "4358:     3A2A3237291031A7005EF477 /* MXThreadsNotificationCountTests.swift */,",
          "4359:     3A4BB661291D93EA006F7585 /* MXRoomEventFilterUnitTests.swift */,",
          "4360:    );",
          "4361:    path = MatrixSDKTests;",
          "4362:    sourceTree = \"<group>\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4367:     ED79B9842940BB45008952F6 /* MXToDevicePayloadUnitTests.swift */,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7122:     B11556EE230C45C600B2A2CF /* MXIdentityServerRestClient.swift in Sources */,",
          "7123:     EDAAC41F28E30F4C00DD89B5 /* (null) in Sources */,",
          "7124:     321CFDE722525A49004D31DF /* MXSASTransaction.m in Sources */,",
          "7125:     32720D9D222EAA6F0086FFF5 /* MXDiscoveredClientConfig.m in Sources */,",
          "7126:     EC5C560C2798CEA00014CBE9 /* NSDictionary+MutableDeepCopy.m in Sources */,",
          "7127:     ECD2897926E8EE9300F268CF /* MXRoomListDataSortOptions.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7133:     EDDBA7F0293F353900AD1480 /* MXToDevicePayload.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7230:     EDB4209927DF842F0036AF39 /* MXEventFixtures.swift in Sources */,",
          "7231:     ECDBE69328E5E16F000C83AF /* MXClientInformationServiceUnitTests.swift in Sources */,",
          "7232:     32114A7F1A24E15500FF2EC4 /* MXMyUserTests.m in Sources */,",
          "7233:     32832B5E1BCC048300241108 /* MXStoreNoStoreTests.m in Sources */,",
          "7234:     A816247C25F60C7700A46F05 /* MXDeviceListOperationsPoolUnitTests.swift in Sources */,",
          "7235:     B1660F1C260A20B900C3AA12 /* MXSpaceServiceTest.swift in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7242:     ED79B9852940BB45008952F6 /* MXToDevicePayloadUnitTests.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7765:     B14EF2782397E90400758AF0 /* MXTransactionCancelCode.m in Sources */,",
          "7766:     EDAAC42028E30F4C00DD89B5 /* (null) in Sources */,",
          "7767:     B14EF2792397E90400758AF0 /* MXEventListener.m in Sources */,",
          "7768:     B1710B202613D01400A9B429 /* MXSpaceChildrenRequestParameters.swift in Sources */,",
          "7769:     B14EF27A2397E90400758AF0 /* MXSessionEventListener.swift in Sources */,",
          "7770:     B14EF27B2397E90400758AF0 /* MXOlmSessionResult.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7778:     EDDBA7F1293F353900AD1480 /* MXToDevicePayload.swift in Sources */,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7873:     EDB4209A27DF842F0036AF39 /* MXEventFixtures.swift in Sources */,",
          "7874:     ECDBE69428E5E16F000C83AF /* MXClientInformationServiceUnitTests.swift in Sources */,",
          "7875:     B1E09A2E2397FD750057C069 /* MXRestClientTests.m in Sources */,",
          "7876:     32C9B71923E81A1C00C6F30A /* MXCrossSigningVerificationTests.m in Sources */,",
          "7877:     B1E09A1D2397FCE90057C069 /* MXCryptoKeyVerificationTests.m in Sources */,",
          "7878:     B1E09A472397FD990057C069 /* MXEventScanStoreUnitTests.m in Sources */,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7887:     ED79B9862940BB45008952F6 /* MXToDevicePayloadUnitTests.swift in Sources */,",
          "",
          "---------------"
        ],
        "MatrixSDK/Contrib/Swift/MXRestClient.swift||MatrixSDK/Contrib/Swift/MXRestClient.swift": [
          "File: MatrixSDK/Contrib/Swift/MXRestClient.swift -> MatrixSDK/Contrib/Swift/MXRestClient.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "1833:      Send an event to a specific list of devices",
          "1835:      - paramaeters:",
          "1838:         - completion: A block object called when the operation completes.",
          "1839:         - response: Indicates whether the operation was successful.",
          "1841:      - returns: a `MXHTTPOperation` instance.",
          "1845:     }",
          "",
          "[Removed Lines]",
          "1836:         - eventType: the type of event to send",
          "1837:         - contentMap: content to send. Map from user_id to device_id to content dictionary.",
          "1843:     @nonobjc @discardableResult func sendDirectToDevice(eventType: String, contentMap: MXUsersDevicesMap<NSDictionary>, txnId: String?, completion: @escaping (_ response: MXResponse<Void>) -> Void) -> MXHTTPOperation {",
          "1844:         return __send(toDevice: eventType, contentMap: contentMap, txnId: txnId, success: currySuccess(completion), failure: curryFailure(completion))",
          "",
          "[Added Lines]",
          "1836:         - payload: Payload with `eventType` and `contentMap` to be sent",
          "1842:     @nonobjc @discardableResult func sendDirectToDevice(payload: MXToDevicePayload, completion: @escaping (_ response: MXResponse<Void>) -> Void) -> MXHTTPOperation {",
          "1843:         return __send(toDevice: payload, success: currySuccess(completion), failure: curryFailure(completion))",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m": [
          "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmDecryption.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:         }",
          "368:         MXLogDebug(@\"[MXMegolmDecryption] shareKeysWithDevices: sharing keys for session %@|%@ with devices of user %@\", senderKey, sessionId, userId);",
          "373:                                                                            success:success",
          "374:                                                                            failure:failure];",
          "375:          [operation mutateTo:operation2];",
          "",
          "[Removed Lines]",
          "370:          MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:kMXEventTypeStringRoomEncrypted",
          "371:                                                                         contentMap:contentMap",
          "372:                                                                              txnId:nil",
          "",
          "[Added Lines]",
          "370:          MXToDevicePayload *toDevicePayload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomEncrypted",
          "371:                                                                                 contentMap:contentMap];",
          "372:          MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:toDevicePayload",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m||MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m": [
          "File: MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m -> MatrixSDK/Crypto/Algorithms/Megolm/MXMegolmEncryption.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #import \"MXOutboundSessionInfo.h\"",
          "30: #import <OLMKit/OLMKit.h>",
          "31: #import \"MXSharedHistoryKeyService.h\"",
          "34: @interface MXMegolmEncryption ()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #import \"MatrixSDKSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:             MXLogDebug(@\"[MXMegolmEncryption] shareKey: Actually share with %tu users and %tu devices\", contentMap.userIds.count, contentMap.count);",
          "427:                 MXLogDebug(@\"[MXMegolmEncryption] shareKey: request succeeded\");",
          "",
          "[Removed Lines]",
          "425:             MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:kMXEventTypeStringRoomEncrypted contentMap:contentMap txnId:nil success:^{",
          "",
          "[Added Lines]",
          "426:             MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomEncrypted",
          "427:                                                                            contentMap:contentMap];",
          "428:             MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:payload success:^{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541:                      [contentMap setObject:[self->crypto encryptMessage:payload forDevices:@[deviceInfo]]",
          "542:                                    forUser:userId andDevice:deviceId];",
          "545:                      [operation mutateTo:operation2];",
          "547:                  } failure:failure];",
          "",
          "[Removed Lines]",
          "544:                      MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:kMXEventTypeStringRoomEncrypted contentMap:contentMap txnId:nil success:success failure:failure];",
          "",
          "[Added Lines]",
          "547:                      MXToDevicePayload *toDevicePayload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomEncrypted",
          "548:                                                                                             contentMap:contentMap];",
          "549:                      MXHTTPOperation *operation2 = [self->crypto.matrixRestClient sendToDevice:toDevicePayload success:success failure:failure];",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoMachine.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:         switch request {",
          "224:         case .toDevice(let requestId, let eventType, let body):",
          "225:             try await requests.sendToDevice(",
          "227:             )",
          "228:             try markRequestAsSent(requestId: requestId, requestType: .toDevice)",
          "",
          "[Removed Lines]",
          "226:                 request: .init(eventType: eventType, body: body)",
          "",
          "[Added Lines]",
          "226:                 request: .init(eventType: eventType, body: body, addMessageId: true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "595:             try await requests.sendToDevice(",
          "596:                 request: .init(",
          "597:                     eventType: eventType,",
          "599:                 )",
          "600:             )",
          "601:         case .inRoom(_, let roomId, let eventType, let content):",
          "",
          "[Removed Lines]",
          "598:                     body: body",
          "",
          "[Added Lines]",
          "598:                     body: body,",
          "600:                     addMessageId: false",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift||MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift": [
          "File: MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift -> MatrixSDK/Crypto/CryptoMachine/MXCryptoRequests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     func sendToDevice(request: ToDeviceRequest) async throws {",
          "32:         return try await performCallbackRequest {",
          "33:             restClient.sendDirectToDevice(",
          "37:                 completion: $0",
          "38:             )",
          "39:         }",
          "",
          "[Removed Lines]",
          "34:                 eventType: request.eventType,",
          "35:                 contentMap: request.contentMap,",
          "36:                 txnId: nil,",
          "",
          "[Added Lines]",
          "34:                 payload: .init(",
          "35:                     eventType: request.eventType,",
          "36:                     contentMap: request.contentMap,",
          "37:                     transactionId: nil,",
          "38:                     addMessageId: request.addMessageId",
          "39:                 ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     struct ToDeviceRequest {",
          "132:         let eventType: String",
          "133:         let contentMap: MXUsersDevicesMap<NSDictionary>",
          "136:             guard",
          "137:                 let json = MXTools.deserialiseJSONString(body) as? [String: [String: NSDictionary]],",
          "138:                 let contentMap = MXUsersDevicesMap<NSDictionary>(map: json)",
          "",
          "[Removed Lines]",
          "135:         init(eventType: String, body: String) throws {",
          "",
          "[Added Lines]",
          "137:         let addMessageId: Bool",
          "139:         init(eventType: String, body: String, addMessageId: Bool) throws {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:             self.eventType = eventType",
          "144:             self.contentMap = contentMap",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:             self.addMessageId = addMessageId",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m||MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m": [
          "File: MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m -> MatrixSDK/Crypto/KeySharing/MXOutgoingRoomKeyRequestManager.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #import \"MXTools.h\"",
          "20: #import \"MXOutgoingRoomKeyRequest.h\"",
          "22: #ifdef MX_CRYPTO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #import \"MatrixSDKSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:         [contentMap setObject:message forUser:recipient[@\"userId\"] andDevice:recipient[@\"deviceId\"]];",
          "360:     }",
          "363: }",
          "",
          "[Removed Lines]",
          "362:     [matrixRestClient sendToDevice:kMXEventTypeStringRoomKeyRequest contentMap:contentMap txnId:txnId success:success failure:failure];",
          "",
          "[Added Lines]",
          "363:     MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomKeyRequest",
          "364:                                                                    contentMap:contentMap",
          "365:                                                                 transactionId:txnId",
          "366:                                                                  addMessageId:YES];",
          "367:     [matrixRestClient sendToDevice:payload success:success failure:failure];",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m||MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m": [
          "File: MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m -> MatrixSDK/Crypto/KeySharing/Secret/MXSecretShareManager.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #import \"MXPendingSecretShareRequest.h\"",
          "22: #import \"MXSecretShareSend.h\"",
          "23: #import \"MXTools.h\"",
          "26: #pragma mark - Constants",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #import \"MatrixSDKSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:         [contentMap setObject:message forUser:myUser.userId andDevice:@\"*\"];",
          "211:     }",
          "214: }",
          "216: - (BOOL)isSecretShareEvent:(MXEventTypeString)type",
          "",
          "[Removed Lines]",
          "213:     return [_crypto.matrixRestClient sendToDevice:kMXEventTypeStringSecretRequest contentMap:contentMap txnId:nil success:success failure:failure];",
          "",
          "[Added Lines]",
          "214:     MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringSecretRequest",
          "215:                                                                    contentMap:contentMap];",
          "216:     return [_crypto.matrixRestClient sendToDevice:payload success:success failure:failure];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:         MXUsersDevicesMap<NSDictionary*> *contentMap = [MXUsersDevicesMap new];",
          "391:         [contentMap setObject:encryptedContent forUser:myUser.userId andDevice:device.deviceId];",
          "394:             MXLogDebug(@\"[MXSecretShareManager] shareSecret: ERROR for sendToDevice: %@\", error);",
          "395:         }];",
          "",
          "[Removed Lines]",
          "393:         [self.crypto.matrixRestClient sendToDevice:kMXEventTypeStringRoomEncrypted contentMap:contentMap txnId:nil success:nil failure:^(NSError *error) {",
          "",
          "[Added Lines]",
          "396:         MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomEncrypted",
          "397:                                                                        contentMap:contentMap];",
          "398:         [self.crypto.matrixRestClient sendToDevice:payload success:nil failure:^(NSError *error) {",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/MXCrypto.m||MatrixSDK/Crypto/MXCrypto.m": [
          "File: MatrixSDK/Crypto/MXCrypto.m -> MatrixSDK/Crypto/MXCrypto.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "3239:         MXUsersDevicesMap<NSDictionary*> *contentMap = [MXUsersDevicesMap new];",
          "3240:         [contentMap setObject:encryptedContent forUser:sender andDevice:device.deviceId];",
          "3243:             MXLogDebug(@\"[MXCrypto] markOlmSessionForUnwedgingInEvent: ERROR for sendToDevice: %@\", error);",
          "3244:         }];",
          "",
          "[Removed Lines]",
          "3242:         [self.matrixRestClient sendToDevice:kMXEventTypeStringRoomEncrypted contentMap:contentMap txnId:nil success:nil failure:^(NSError *error) {",
          "",
          "[Added Lines]",
          "3242:         MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomEncrypted",
          "3243:                                                                        contentMap:contentMap];",
          "3244:         [self.matrixRestClient sendToDevice:payload success:nil failure:^(NSError *error) {",
          "",
          "---------------"
        ],
        "MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m||MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m": [
          "File: MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m -> MatrixSDK/Crypto/Verification/MXKeyVerificationManager.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #import \"MXQRCodeDataBuilder.h\"",
          "43: #pragma mark - Constants",
          "45: NSString *const MXKeyVerificationErrorDomain = @\"org.matrix.sdk.verification\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #import \"MatrixSDKSwiftHeader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:         [contentMap setObject:requestJSONModel.JSONDictionary forUser:userId andDevice:deviceId];",
          "165:     }",
          "169:         MXEvent *event = [MXEvent modelFromJSON:@{",
          "170:                                                   @\"sender\": self.crypto.mxSession.myUserId,",
          "",
          "[Removed Lines]",
          "167:     [self.crypto.matrixRestClient sendToDevice:kMXMessageTypeKeyVerificationRequest contentMap:contentMap txnId:nil success:^{",
          "",
          "[Added Lines]",
          "169:     MXToDevicePayload *payload = [[MXToDevicePayload alloc]",
          "170:                                   initWithEventType:kMXMessageTypeKeyVerificationRequest",
          "171:                                   contentMap:contentMap",
          "172:                                   transactionId:nil",
          "173:                                   addMessageId:NO]; // Should not add anything for verification events as it would break their signatures",
          "174:     [self.crypto.matrixRestClient sendToDevice:payload success:^{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1338:         [contentMap setObject:content forUser:userId andDevice:deviceId];",
          "1339:     }",
          "1342: }",
          "",
          "[Removed Lines]",
          "1341:     return [self.crypto.matrixRestClient sendToDevice:eventType contentMap:contentMap txnId:nil success:success failure:failure];",
          "",
          "[Added Lines]",
          "1348:     MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:eventType",
          "1349:                                                                    contentMap:contentMap",
          "1350:                                                                 transactionId:nil",
          "1351:                                                                  addMessageId:NO]; // // Should not add anything for verification events as it would break their signatures",
          "1352:     return [self.crypto.matrixRestClient sendToDevice:payload success:success failure:failure];",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/MXEvent.h||MatrixSDK/JSONModels/MXEvent.h": [
          "File: MatrixSDK/JSONModels/MXEvent.h -> MatrixSDK/JSONModels/MXEvent.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: FOUNDATION_EXPORT NSString *const kMXMessageContentKeyNewContent;   // Edited content key",
          "231: FOUNDATION_EXPORT NSString *const MXEventRelationTypeThread;        // Thread",
          "234:  Prefix used for id of temporary local event.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:  To-device messages",
          "236: FOUNDATION_EXPORT NSString *const kMXToDeviceMessageId;",
          "",
          "---------------"
        ],
        "MatrixSDK/JSONModels/MXEvent.m||MatrixSDK/JSONModels/MXEvent.m": [
          "File: MatrixSDK/JSONModels/MXEvent.m -> MatrixSDK/JSONModels/MXEvent.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: NSString *const MXEventRelationTypeThread            = @\"m.thread\";",
          "132: NSString *const kMXEventLocalEventIdPrefix           = @\"kMXEventLocalId_\";",
          "134: uint64_t const kMXUndefinedTimestamp = (uint64_t)-1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: NSString *const kMXToDeviceMessageId                 = @\"org.matrix.msgid\";",
          "",
          "---------------"
        ],
        "MatrixSDK/MXRestClient.h||MatrixSDK/MXRestClient.h": [
          "File: MatrixSDK/MXRestClient.h -> MatrixSDK/MXRestClient.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: @class MXSpaceChildrenRequestParameters;",
          "54: @class MXCapabilities;",
          "55: @class MXDevice;",
          "57: MX_ASSUME_MISSING_NULLABILITY_BEGIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: @class MXToDevicePayload;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2708:  Send an event to a specific list of devices",
          "2714:  @param success A block object called when the operation succeeds.",
          "2715:  @param failure A block object called when the operation fails.",
          "2717:  @return a MXHTTPOperation instance.",
          "2721:                          success:(void (^)(void))success",
          "2722:                          failure:(void (^)(NSError *error))failure NS_REFINED_FOR_SWIFT;",
          "",
          "[Removed Lines]",
          "2710:  @param eventType the type of event to send",
          "2711:  @param contentMap content to send. Map from user_id to device_id to content dictionary.",
          "2712:  @param txnId the transaction id to use. If nil, one will be generated.",
          "2719: - (MXHTTPOperation*)sendToDevice:(NSString*)eventType contentMap:(MXUsersDevicesMap<NSDictionary*>*)contentMap",
          "2720:                            txnId:(NSString*)txnId",
          "",
          "[Added Lines]",
          "2711:  @param payload Payload with `eventType` and `contentMap` to be sent",
          "2718: - (MXHTTPOperation*)sendToDevice:(MXToDevicePayload*)payload",
          "",
          "---------------"
        ],
        "MatrixSDK/MXRestClient.m||MatrixSDK/MXRestClient.m": [
          "File: MatrixSDK/MXRestClient.m -> MatrixSDK/MXRestClient.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "5396: #pragma mark - Direct-to-device messaging",
          "5399:                          success:(void (^)(void))success",
          "5400:                          failure:(void (^)(NSError *error))failure",
          "5401: {",
          "5410:     NSDictionary *content = @{",
          "5412:                               };",
          "5414:     MXWeakify(self);",
          "",
          "[Removed Lines]",
          "5397: - (MXHTTPOperation*)sendToDevice:(NSString*)eventType contentMap:(MXUsersDevicesMap<NSDictionary*>*)contentMap",
          "5398:                            txnId:(NSString*)txnId",
          "5402:     if (!txnId)",
          "5403:     {",
          "5404:         txnId = [MXTools generateTransactionId];",
          "5405:     }",
          "5408:     NSString *path = [NSString stringWithFormat:@\"%@/sendToDevice/%@/%@\", kMXAPIPrefixPathR0, eventType, txnId];",
          "5411:                               @\"messages\": contentMap.map",
          "",
          "[Added Lines]",
          "5397: - (MXHTTPOperation*)sendToDevice:(MXToDevicePayload *)payload",
          "5403:     NSString *path = [NSString stringWithFormat:@\"%@/sendToDevice/%@/%@\", kMXAPIPrefixPathR0, payload.eventType, payload.transactionId];",
          "5406:                               @\"messages\": payload.messages",
          "",
          "---------------"
        ],
        "MatrixSDK/MXSession.m||MatrixSDK/MXSession.m": [
          "File: MatrixSDK/MXSession.m -> MatrixSDK/MXSession.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "2047:     {",
          "2048:         if ([MXTools isSupportedToDeviceEvent:event])",
          "2049:         {",
          "2050:             [supportedEvents addObject:event];",
          "2051:         }",
          "2052:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2050:             MXLogDebug(@\"[MXSession] handleToDeviceEvents: Processing new to-device event msgid: %@\", event.content[kMXToDeviceMessageId])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2064:         {",
          "2065:             if (!event.decryptionError)",
          "2066:             {",
          "2067:                 dispatch_group_enter(dispatchGroup);",
          "2068:                 [self handleToDeviceEvent:event onComplete:^{",
          "2069:                     dispatch_group_leave(dispatchGroup);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2068:                 MXLogDebug(@\"[MXSession] handleToDeviceEvents: Received new to-device event `%@` from `%@` msgid: %@\", event.type, event.sender, event.wireContent[kMXToDeviceMessageId])",
          "",
          "---------------"
        ],
        "MatrixSDK/Utils/MXToDevicePayload.swift||MatrixSDK/Utils/MXToDevicePayload.swift": [
          "File: MatrixSDK/Utils/MXToDevicePayload.swift -> MatrixSDK/Utils/MXToDevicePayload.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "20: @objcMembers public class MXToDevicePayload: NSObject {",
          "22:     public let eventType: String",
          "23:     public let transactionId: String",
          "24:     public let messages: [String: [String: NSDictionary]]",
          "25:     public let messageIds: [String]",
          "35:     public init(",
          "36:         eventType: String,",
          "37:         contentMap: MXUsersDevicesMap<NSDictionary>,",
          "38:         transactionId: String?,",
          "39:         addMessageId: Bool",
          "40:     ) {",
          "41:         self.eventType = eventType",
          "42:         self.transactionId = transactionId ?? MXTools.generateTransactionId()",
          "44:         var ids = [String]()",
          "45:         if addMessageId {",
          "46:             for (userId, devices) in contentMap.map {",
          "47:                 for (deviceId, content) in devices {",
          "49:                     let messageId = UUID().uuidString",
          "50:                     let dict = NSMutableDictionary(dictionary: content)",
          "51:                     dict[kMXToDeviceMessageId] = messageId",
          "52:                     contentMap.setObject(",
          "53:                         NSDictionary(dictionary: dict),",
          "54:                         forUser: userId,",
          "55:                         andDevice: deviceId",
          "56:                     )",
          "58:                     ids.append(\"\\(userId)/\\(deviceId) \\(messageId)\")",
          "59:                 }",
          "60:             }",
          "61:         }",
          "63:         self.messages = contentMap.map",
          "64:         self.messageIds = ids",
          "66:         super.init()",
          "68:         MXLog.debug(\"[MXToDevicePayload] Created to-device payload with txnId \\(self.transactionId), message ids: [\\(self.messageIds.joined(separator: \", \"))]\")",
          "69:     }",
          "71:     convenience public init(",
          "72:         eventType: String,",
          "73:         contentMap: MXUsersDevicesMap<NSDictionary>",
          "74:     ) {",
          "75:         self.init(eventType: eventType, contentMap: contentMap, transactionId: nil, addMessageId: true)",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift||MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift": [
          "File: MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift -> MatrixSDKTests/Crypto/CryptoMachine/MXCryptoRequestsUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         ]",
          "36:         do {",
          "38:             XCTAssertEqual(request.eventType, \"A\")",
          "39:             XCTAssertEqual(request.contentMap.map, body)",
          "40:         } catch {",
          "41:             XCTFail(\"Failed creating to device request with error - \\(error)\")",
          "42:         }",
          "",
          "[Removed Lines]",
          "37:             let request = try MXCryptoRequests.ToDeviceRequest(eventType: \"A\", body: MXTools.serialiseJSONObject(body))",
          "",
          "[Added Lines]",
          "37:             let request = try MXCryptoRequests.ToDeviceRequest(eventType: \"A\", body: MXTools.serialiseJSONObject(body), addMessageId: true)",
          "40:             XCTAssertTrue(request.addMessageId)",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXCryptoTests.m||MatrixSDKTests/MXCryptoTests.m": [
          "File: MatrixSDKTests/MXCryptoTests.m -> MatrixSDKTests/MXCryptoTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "2865:                     MXUsersDevicesMap<NSDictionary*> *contentMap = [[MXUsersDevicesMap alloc] init];",
          "2866:                     [contentMap setObject:requestMessage forUser:alice1Credentials.userId andDevice:@\"*\"];",
          "2869:                         XCTFail(@\"The operation should not fail - NSError: %@\", error);",
          "2870:                         [expectation fulfill];",
          "2871:                     }];",
          "",
          "[Removed Lines]",
          "2868:                     [alice1MatrixRestClient sendToDevice:kMXEventTypeStringRoomKeyRequest contentMap:contentMap txnId:requestMessage[@\"request_id\"] success:nil failure:^(NSError *error) {",
          "",
          "[Added Lines]",
          "2868:                     MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomKeyRequest",
          "2869:                                                                                    contentMap:contentMap",
          "2870:                                                                                 transactionId:requestMessage[@\"request_id\"]",
          "2871:                                                                                  addMessageId:YES];",
          "2872:                     [alice1MatrixRestClient sendToDevice:payload success:nil failure:^(NSError *error) {",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXSessionTests.m||MatrixSDKTests/MXSessionTests.m": [
          "File: MatrixSDKTests/MXSessionTests.m -> MatrixSDKTests/MXSessionTests.m",
          "--- Hunk 1 ---",
          "[Context before]",
          "1454:                                          }",
          "1455:                                  } forUser:mxSession.myUserId];",
          "1459:         } failure:^(NSError *error) {",
          "1460:             XCTFail(@\"Cannot set up intial test conditions - error: %@\", error);",
          "",
          "[Removed Lines]",
          "1457:         [aliceRestClient sendToDevice:kMXEventTypeStringRoomKeyRequest contentMap:contentMap txnId:nil success:^{",
          "",
          "[Added Lines]",
          "1457:         MXToDevicePayload *payload = [[MXToDevicePayload alloc] initWithEventType:kMXEventTypeStringRoomKeyRequest",
          "1458:                                                                        contentMap:contentMap];",
          "1459:         [aliceRestClient sendToDevice:payload success:^{",
          "",
          "---------------"
        ],
        "MatrixSDKTests/MXToDevicePayloadUnitTests.swift||MatrixSDKTests/MXToDevicePayloadUnitTests.swift": [
          "File: MatrixSDKTests/MXToDevicePayloadUnitTests.swift -> MatrixSDKTests/MXToDevicePayloadUnitTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import Foundation",
          "19: class MXToDevicePayloadUnitTests: XCTestCase {",
          "20:     func makePayload(",
          "21:         eventType: String = \"\",",
          "22:         contentMap: MXUsersDevicesMap<NSDictionary> = .init(),",
          "23:         transactionId: String? = nil,",
          "24:         addMessageId: Bool = false",
          "25:     ) -> MXToDevicePayload {",
          "26:         .init(eventType: eventType, contentMap: contentMap, transactionId: transactionId, addMessageId: addMessageId)",
          "27:     }",
          "29:     func test_cratesTransactionId_ifNotProvided() {",
          "30:         let payload1 = makePayload(transactionId: nil)",
          "31:         XCTAssertFalse(payload1.transactionId.isEmpty)",
          "33:         let payload2 = makePayload(transactionId: \"abc\")",
          "34:         XCTAssertEqual(payload2.transactionId, \"abc\")",
          "35:     }",
          "37:     func test_containsContentMapMessages() {",
          "38:         let content: NSDictionary = [",
          "39:             \"cipher\": \"blabla\",",
          "40:             \"mac\": \"123\"",
          "41:         ]",
          "42:         let dict = [",
          "43:             \"alice\": [",
          "44:                 \"deviceA\": content,",
          "45:                 \"deviceB\": content",
          "46:             ],",
          "47:             \"bob\": [",
          "48:                 \"deviceC\": content,",
          "49:             ]",
          "50:         ]",
          "52:         let payload = makePayload(contentMap: .init(map: dict), addMessageId: false)",
          "54:         XCTAssertEqual(payload.messageIds.count, 0)",
          "55:         XCTAssertEqual(payload.messages, dict)",
          "56:     }",
          "58:     func test_addsMessageIdsToContent() {",
          "59:         let content: NSDictionary = [",
          "60:             \"cipher\": \"blabla\",",
          "61:             \"mac\": \"123\"",
          "62:         ]",
          "63:         let dict = [",
          "64:             \"alice\": [",
          "65:                 \"deviceA\": content,",
          "66:                 \"deviceB\": content",
          "67:             ],",
          "68:             \"bob\": [",
          "69:                 \"deviceC\": content,",
          "70:             ]",
          "71:         ]",
          "73:         let payload = makePayload(contentMap: .init(map: dict), addMessageId: true)",
          "75:         XCTAssertEqual(payload.messageIds.count, 3)",
          "76:         for (userId, devices) in payload.messages {",
          "77:             for (deviceId, content) in devices {",
          "78:                 if let messageId = content[kMXToDeviceMessageId] as? String {",
          "79:                     let messageFormat = \"\\(userId)/\\(deviceId) \\(messageId)\"",
          "80:                     XCTAssertTrue(payload.messageIds.contains(messageFormat))",
          "81:                 } else {",
          "82:                     XCTFail(\"Missing to-device message id\")",
          "83:                 }",
          "84:             }",
          "85:         }",
          "86:     }",
          "87: }",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTests.xctestplan||MatrixSDKTests/TestPlans/UnitTests.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTests.xctestplan -> MatrixSDKTests/TestPlans/UnitTests.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         \"MXKeyVerificationManagerV2UnitTests\",",
          "65:         \"MXKeyVerificationRequestV2UnitTests\",",
          "66:         \"MXKeyVerificationStateResolverUnitTests\",",
          "68:         \"MXMediaScanStoreUnitTests\",",
          "69:         \"MXMegolmDecryptionUnitTests\",",
          "70:         \"MXMegolmExportEncryptionUnitTests\",",
          "",
          "[Removed Lines]",
          "67:         \"MXLoggerUnitTests\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         \"MXTaskQueueUnitTests\",",
          "91:         \"MXThreadEventTimelineUnitTests\",",
          "92:         \"MXThreadingServiceUnitTests\",",
          "93:         \"MXToolsUnitTests\",",
          "94:         \"MXTrustLevelSourceUnitTests\",",
          "95:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         \"MXToDevicePayloadUnitTests\",",
          "",
          "---------------"
        ],
        "MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan||MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan": [
          "File: MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan -> MatrixSDKTests/TestPlans/UnitTestsWithSanitizers.xctestplan",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         \"MXKeyVerificationManagerV2UnitTests\",",
          "73:         \"MXKeyVerificationRequestV2UnitTests\",",
          "74:         \"MXKeyVerificationStateResolverUnitTests\",",
          "76:         \"MXMediaScanStoreUnitTests\",",
          "77:         \"MXMegolmDecryptionUnitTests\",",
          "78:         \"MXMegolmExportEncryptionUnitTests\",",
          "",
          "[Removed Lines]",
          "75:         \"MXLoggerUnitTests\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         \"MXTaskQueueUnitTests\",",
          "99:         \"MXThreadEventTimelineUnitTests\",",
          "100:         \"MXThreadingServiceUnitTests\",",
          "101:         \"MXToolsUnitTests\",",
          "102:         \"MXTrustLevelSourceUnitTests\",",
          "103:         \"MXUnrequestedForwardedRoomKeyManagerUnitTests\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         \"MXToDevicePayloadUnitTests\",",
          "",
          "---------------"
        ],
        "changelog.d/pr-1652.change||changelog.d/pr-1652.change": [
          "File: changelog.d/pr-1652.change -> changelog.d/pr-1652.change",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Add message id for to-device events",
          "",
          "---------------"
        ]
      }
    }
  ]
}