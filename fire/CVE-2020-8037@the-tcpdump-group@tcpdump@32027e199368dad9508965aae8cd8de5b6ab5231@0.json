{
  "cve_id": "CVE-2020-8037",
  "cve_desc": "The ppp decapsulator in tcpdump 4.9.3 can be convinced to allocate a large amount of memory.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "32027e199368dad9508965aae8cd8de5b6ab5231",
  "patch_info": {
    "commit_hash": "32027e199368dad9508965aae8cd8de5b6ab5231",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/32027e199368dad9508965aae8cd8de5b6ab5231",
    "files": [
      "print-ppp.c"
    ],
    "message": "PPP: When un-escaping, don't allocate a too-large buffer.\n\nThe buffer should be big enough to hold the captured data, but it\ndoesn't need to be big enough to hold the entire on-the-network packet,\nif we haven't captured all of it.\n\n(backported from commit e4add0b010ed6f2180dcb05a13026242ed935334)",
    "before_after_code_files": [
      "print-ppp.c||print-ppp.c"
    ]
  },
  "patch_diff": {
    "print-ppp.c||print-ppp.c": [
      "File: print-ppp.c -> print-ppp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1367:  return 0;",
      "1368: }",
      "1370: static void",
      "1371: ppp_hdlc(netdissect_options *ndo,",
      "1372:          const u_char *p, int length)",
      "1373: {",
      "1374:  u_char *b, *t, c;",
      "1375:  const u_char *s;",
      "1377:  const void *se;",
      "1379:         if (length <= 0)",
      "1380:                 return;",
      "1383:  if (b == NULL)",
      "1384:   return;",
      "",
      "[Removed Lines]",
      "1376:  int i, proto;",
      "1382:  b = (u_char *)malloc(length);",
      "",
      "[Added Lines]",
      "1379:  u_int caplen = ndo->ndo_snapend - p;",
      "1382:  u_int i;",
      "1383:  int proto;",
      "1386:  if (caplen == 0)",
      "1387:   return;",
      "1392:  b = (u_char *)malloc(caplen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1392:   c = *s++;",
      "1393:   if (c == 0x7d) {",
      "1395:     break;",
      "1396:    i--;",
      "1397:    c = *s++ ^ 0x20;",
      "",
      "[Removed Lines]",
      "1391:  for (s = p, t = b, i = length; i > 0 && ND_TTEST(*s); i--) {",
      "1394:    if (i <= 1 || !ND_TTEST(*s))",
      "",
      "[Added Lines]",
      "1401:  for (s = p, t = b, i = caplen; i != 0; i--) {",
      "1404:    if (i <= 1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4add0b010ed6f2180dcb05a13026242ed935334",
      "candidate_info": {
        "commit_hash": "e4add0b010ed6f2180dcb05a13026242ed935334",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/e4add0b010ed6f2180dcb05a13026242ed935334",
        "files": [
          "print-ppp.c"
        ],
        "message": "When un-escaping, don't allocate a too-large buffer.\n\nThe buffer should be big enough to hold the captured data, but it\ndoesn't need to be big enough to hold the entire on-the-network packet,\nif we haven't captured all of it.",
        "before_after_code_files": [
          "print-ppp.c||print-ppp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "print-ppp.c||print-ppp.c"
          ],
          "candidate": [
            "print-ppp.c||print-ppp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:  return 0;",
          "1405: }",
          "1407: static void",
          "1408: ppp_hdlc(netdissect_options *ndo,",
          "1409:          const u_char *p, u_int length)",
          "1410: {",
          "1411:  u_char *b, *t, c;",
          "1412:  const u_char *s;",
          "1413:  u_int i, proto;",
          "1414:  const void *se;",
          "1416:         if (length == 0)",
          "1417:                 return;",
          "1420:  if (b == NULL)",
          "1421:   return;",
          "",
          "[Removed Lines]",
          "1419:  b = (u_char *)nd_malloc(ndo, length);",
          "",
          "[Added Lines]",
          "1416:  u_int caplen = ndo->ndo_snapend - p;",
          "1422:  if (caplen == 0)",
          "1423:   return;",
          "1428:  b = (u_char *)nd_malloc(ndo, caplen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1429:   c = GET_U_1(s);",
          "1430:   s++;",
          "1431:   if (c == 0x7d) {",
          "1433:     break;",
          "1434:    i--;",
          "1435:    c = GET_U_1(s) ^ 0x20;",
          "",
          "[Removed Lines]",
          "1428:  for (s = p, t = b, i = length; i != 0 && ND_TTEST_1(s); i--) {",
          "1432:    if (i <= 1 || !ND_TTEST_1(s))",
          "",
          "[Added Lines]",
          "1437:  for (s = p, t = b, i = caplen; i != 0; i--) {",
          "1441:    if (i <= 1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}