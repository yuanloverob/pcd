{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "afef6b57376af65ec43ba7ffb8c6f41986afe04b",
      "candidate_info": {
        "commit_hash": "afef6b57376af65ec43ba7ffb8c6f41986afe04b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/afef6b57376af65ec43ba7ffb8c6f41986afe04b",
        "files": [
          "Objects/memoryobject.c"
        ],
        "message": "[3.13] gh-120155: Fix copy/paste error in HAVE_SUBOFFSETS_IN_LAST_DIM() (GH-120228) (#120238)\n\ngh-120155: Fix copy/paste error in HAVE_SUBOFFSETS_IN_LAST_DIM() (GH-120228)\n\nDon't hardcode 'dest' in HAVE_SUBOFFSETS_IN_LAST_DIM() macro of\nmemoryobject.c, but use its 'view' parameter instead.\n\nFix the Coverity issue:\n\nError: COPY_PASTE_ERROR (CWE-398):\nPython-3.12.2/Objects/memoryobject.c:273:14: original: \"\"dest->suboffsets + (dest->ndim - 1)\"\" looks like the original copy.\nPython-3.12.2/Objects/memoryobject.c:274:14: copy_paste_error: \"\"dest\"\" in \"\"src->suboffsets + (dest->ndim - 1)\"\" looks like a copy-paste error.\nPython-3.12.2/Objects/memoryobject.c:274:14: remediation: Should it say \"\"src\"\" instead?\nGH-  272|       assert(dest->ndim > 0 && src->ndim > 0);\nGH-  273|       return (!HAVE_SUBOFFSETS_IN_LAST_DIM(dest) &&\nGH-  274|->             !HAVE_SUBOFFSETS_IN_LAST_DIM(src) &&\nGH-  275|               dest->strides[dest->ndim-1] == dest->itemsize &&\nGH-  276|               src->strides[src->ndim-1] == src->itemsize);\n(cherry picked from commit 90b75405260467814c93738a3325645918d4ea51)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Objects/memoryobject.c||Objects/memoryobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/memoryobject.c||Objects/memoryobject.c": [
          "File: Objects/memoryobject.c -> Objects/memoryobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270: #define HAVE_SUBOFFSETS_IN_LAST_DIM(view) \\",
          "273: static inline int",
          "274: last_dim_is_contiguous(const Py_buffer *dest, const Py_buffer *src)",
          "",
          "[Removed Lines]",
          "271:     (view->suboffsets && view->suboffsets[dest->ndim-1] >= 0)",
          "",
          "[Added Lines]",
          "271:     (view->suboffsets && view->suboffsets[view->ndim-1] >= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0e99617985d64e6134964f758ae0a1a20f9f433",
      "candidate_info": {
        "commit_hash": "c0e99617985d64e6134964f758ae0a1a20f9f433",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c0e99617985d64e6134964f758ae0a1a20f9f433",
        "files": [
          "Lib/test/test_functools.py",
          "Lib/test/test_type_params.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-21-09-46-51.gh-issue-119011.WOe3bu.rst",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-119011: `type.__type_params__` now return an empty tuple (GH-119296) (#119678)\n\n(cherry picked from commit 6b240c2308a044e38623900ccb8fa58c3549d4ae)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_functools.py||Lib/test/test_functools.py",
          "Lib/test/test_type_params.py||Lib/test/test_type_params.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         self.assertTrue(wrapper.__doc__.startswith('max('))",
          "711:         self.assertEqual(wrapper.__annotations__, {})",
          "714: class TestWraps(TestUpdateWrapper):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     def test_update_type_wrapper(self):",
          "714:         def wrapper(*args): pass",
          "716:         functools.update_wrapper(wrapper, type)",
          "717:         self.assertEqual(wrapper.__name__, 'type')",
          "718:         self.assertEqual(wrapper.__annotations__, {})",
          "719:         self.assertEqual(wrapper.__type_params__, ())",
          "",
          "---------------"
        ],
        "Lib/test/test_type_params.py||Lib/test/test_type_params.py": [
          "File: Lib/test/test_type_params.py -> Lib/test/test_type_params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:         self.assertIs(T, C.Alias.__type_params__[0])",
          "564:         self.assertIs(U, C.__type_params__[1])",
          "567: def make_base(arg):",
          "568:     class Base:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:     def test_type_special_case(self):",
          "567:         # https://github.com/python/cpython/issues/119011",
          "568:         self.assertEqual(type.__type_params__, ())",
          "569:         self.assertEqual(object.__type_params__, ())",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742: static PyObject *",
          "1743: type_get_type_params(PyTypeObject *type, void *context)",
          "1744: {",
          "1745:     PyObject *params;",
          "1746:     if (PyDict_GetItemRef(lookup_tp_dict(type), &_Py_ID(__type_params__), &params) == 0) {",
          "1747:         return PyTuple_New(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:     if (type == &PyType_Type) {",
          "1746:         return PyTuple_New(0);",
          "1747:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e54a28bcc9114f296bd1d63010eedbd0c2140d71",
      "candidate_info": {
        "commit_hash": "e54a28bcc9114f296bd1d63010eedbd0c2140d71",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e54a28bcc9114f296bd1d63010eedbd0c2140d71",
        "files": [
          "Lib/tabnanny.py",
          "Lib/test/test_tabnanny.py",
          "Misc/ACKS",
          "Misc/NEWS.d/next/Library/2024-06-14-20-05-25.gh-issue-120495.OxgZKB.rst"
        ],
        "message": "[3.13] gh-120495: Fix incorrect exception handling in Tab Nanny (GH-120498) (#120548)\n\ngh-120495: Fix incorrect exception handling in Tab Nanny (GH-120498)\n(cherry picked from commit c501261c919ceb97c850ef9427a93326f06a8f2e)\n\nCo-authored-by: Wulian233 <71213467+Wulian233@users.noreply.github.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/tabnanny.py||Lib/tabnanny.py",
          "Lib/test/test_tabnanny.py||Lib/test/test_tabnanny.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tabnanny.py||Lib/tabnanny.py": [
          "File: Lib/tabnanny.py -> Lib/tabnanny.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         errprint(\"%r: Token Error: %s\" % (file, msg))",
          "108:         return",
          "114:     except IndentationError as msg:",
          "115:         errprint(\"%r: Indentation Error: %s\" % (file, msg))",
          "116:         return",
          "118:     except NannyNag as nag:",
          "119:         badline = nag.get_lineno()",
          "120:         line = nag.get_line()",
          "",
          "[Removed Lines]",
          "110:     except SyntaxError as msg:",
          "111:         errprint(\"%r: Token Error: %s\" % (file, msg))",
          "112:         return",
          "",
          "[Added Lines]",
          "114:     except SyntaxError as msg:",
          "115:         errprint(\"%r: Syntax Error: %s\" % (file, msg))",
          "116:         return",
          "",
          "---------------"
        ],
        "Lib/test/test_tabnanny.py||Lib/test/test_tabnanny.py": [
          "File: Lib/test/test_tabnanny.py -> Lib/test/test_tabnanny.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     def test_with_errored_file(self):",
          "316:         \"\"\"Should displays error when errored python file is given.\"\"\"",
          "317:         with TemporaryPyFile(SOURCE_CODES[\"wrong_indented\"]) as file_path:",
          "319:             stderr += ('unindent does not match any outer indentation level'",
          "320:                        ' (<string>, line 3)')",
          "321:             self.validate_cmd(file_path, stderr=stderr, expect_failure=True)",
          "",
          "[Removed Lines]",
          "318:             stderr  = f\"{file_path!r}: Token Error: \"",
          "",
          "[Added Lines]",
          "318:             stderr  = f\"{file_path!r}: Indentation Error: \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdc50bac16d3f8dc693488738009de8c86baf6e0",
      "candidate_info": {
        "commit_hash": "fdc50bac16d3f8dc693488738009de8c86baf6e0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/fdc50bac16d3f8dc693488738009de8c86baf6e0",
        "files": [
          "Lib/test/test_posixpath.py"
        ],
        "message": "[3.13] GH-118447: Fix FreeBSD test failures. (GH-119170) (#119181)\n\nGH-118447: Fix FreeBSD test failures. (GH-119170)\n\nApparently only macOS requires read permission to call `readlink()` on a\nsymlink.\n(cherry picked from commit 4b7667172898d440c1931ae923446c6a5ef1765e)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py": [
          "File: Lib/test/test_posixpath.py -> Lib/test/test_posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:     @os_helper.skip_unless_symlink",
          "664:     @skip_if_ABSTFN_contains_backslash",
          "665:     @unittest.skipIf(os.chmod not in os.supports_follow_symlinks, \"Can't set symlink permissions\")",
          "666:     def test_realpath_unreadable_symlink(self):",
          "667:         try:",
          "668:             os.symlink(ABSTFN+\"1\", ABSTFN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:     @unittest.skipIf(sys.platform != \"darwin\", \"only macOS requires read permission to readlink()\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bc7fc08aef6142c034a9b67972b536a1a810a3e",
      "candidate_info": {
        "commit_hash": "6bc7fc08aef6142c034a9b67972b536a1a810a3e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6bc7fc08aef6142c034a9b67972b536a1a810a3e",
        "files": [
          "Lib/rlcompleter.py",
          "Misc/NEWS.d/next/Library/2024-01-12-08-51-03.gh-issue-113978.MqTgB0.rst"
        ],
        "message": "[3.13] gh-113978: Ignore warnings on text completion inside REPL (GH-113979) (#119429)\n\n(cherry picked from commit e03dde5a24d3953e0b16f7cdefdc8b00aa9d9e11)\n\nCo-authored-by: Yan Yanchii <yyanchiy@gmail.com>",
        "before_after_code_files": [
          "Lib/rlcompleter.py||Lib/rlcompleter.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/rlcompleter.py||Lib/rlcompleter.py": [
          "File: Lib/rlcompleter.py -> Lib/rlcompleter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import keyword",
          "36: import re",
          "37: import __main__",
          "39: __all__ = [\"Completer\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import warnings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                 return None",
          "90:         if state == 0:",
          "95:         try:",
          "96:             return self.matches[state]",
          "97:         except IndexError:",
          "",
          "[Removed Lines]",
          "91:             if \".\" in text:",
          "92:                 self.matches = self.attr_matches(text)",
          "93:             else:",
          "94:                 self.matches = self.global_matches(text)",
          "",
          "[Added Lines]",
          "92:             with warnings.catch_warnings(action=\"ignore\"):",
          "93:                 if \".\" in text:",
          "94:                     self.matches = self.attr_matches(text)",
          "95:                 else:",
          "96:                     self.matches = self.global_matches(text)",
          "",
          "---------------"
        ]
      }
    }
  ]
}