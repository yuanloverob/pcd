{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "098eec9a1549b39ca55cfd59a9432698bfa07773",
      "candidate_info": {
        "commit_hash": "098eec9a1549b39ca55cfd59a9432698bfa07773",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/098eec9a1549b39ca55cfd59a9432698bfa07773",
        "files": [
          "Objects/dictobject.c"
        ],
        "message": "[3.13] gh-118849: Fix \"code will never be executed\" warning in `dictobject.c` (GH-118850) (#118859)\n\ngh-118849: Fix \"code will never be executed\" warning in `dictobject.c` (GH-118850)\n(cherry picked from commit 82abe75e77129bebb3c13d807e8040f6924194f6)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Objects/dictobject.c||Objects/dictobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/dictobject.c||Objects/dictobject.c": [
          "File: Objects/dictobject.c -> Objects/dictobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5396: dictiter_iternext_threadsafe(PyDictObject *d, PyObject *self,",
          "5397:                              PyObject **out_key, PyObject **out_value)",
          "5398: {",
          "5399:     dictiterobject *di = (dictiterobject *)self;",
          "5400:     Py_ssize_t i;",
          "5401:     PyDictKeysObject *k;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5399:     int res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5491:     Py_DECREF(d);",
          "5492:     return -1;",
          "5495: try_locked:",
          "5496:     Py_BEGIN_CRITICAL_SECTION(d);",
          "5497:     res = dictiter_iternextitem_lock_held(d, self, out_key, out_value);",
          "",
          "[Removed Lines]",
          "5494:     int res;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3cfc04a736111cb61883cef08469ea46f86d9ce",
      "candidate_info": {
        "commit_hash": "c3cfc04a736111cb61883cef08469ea46f86d9ce",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c3cfc04a736111cb61883cef08469ea46f86d9ce",
        "files": [
          "Lib/test/test_launcher.py",
          "Misc/NEWS.d/next/Windows/2024-05-22-19-43-29.gh-issue-119070._enton.rst",
          "PC/launcher2.c"
        ],
        "message": "gh-119070: Fix py.exe handling of /usr/bin/env commands missing extension (GH-119426)\n\n(cherry picked from commit df93f5d4bf9d70036d485666d4dd4f009d37f8b9)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_launcher.py||Lib/test/test_launcher.py",
          "PC/launcher2.c||PC/launcher2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_launcher.py||Lib/test/test_launcher.py": [
          "File: Lib/test/test_launcher.py -> Lib/test/test_launcher.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:             with self.script(f'#! /usr/bin/env {exe.stem} arg1') as script:",
          "765:                 data = self.run_py([script], env=env)",
          "766:             self.assertEqual(data[\"stdout\"].strip(), f\"{quote(exe)} arg1 {quote(script)}\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:     def test_shebang_executable_extension(self):",
          "769:         with self.script('#! /usr/bin/env python3.12') as script:",
          "770:             data = self.run_py([script])",
          "771:         expect = \"# Search PATH for python3.12.exe\"",
          "772:         actual = [line.strip() for line in data[\"stderr\"].splitlines()",
          "773:                   if line.startswith(\"# Search PATH\")]",
          "774:         self.assertEqual([expect], actual)",
          "",
          "---------------"
        ],
        "PC/launcher2.c||PC/launcher2.c": [
          "File: PC/launcher2.c -> PC/launcher2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:     }",
          "855:     wchar_t filename[MAXLEN];",
          "857:         return RC_BAD_VIRTUAL_PATH;",
          "858:     }",
          "",
          "[Removed Lines]",
          "856:     if (wcsncpy_s(filename, MAXLEN, command, lastDot)) {",
          "",
          "[Added Lines]",
          "856:     if (wcsncpy_s(filename, MAXLEN, command, commandLength)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
      "candidate_info": {
        "commit_hash": "4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4e147caf3fcb6af9ed28b87a09c72f294d8f60bd",
        "files": [
          "Misc/NEWS.d/next/Library/2024-05-24-11-47-08.gh-issue-69214.Grl6zF.rst",
          "Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c"
        ],
        "message": "[3.13] Revert \"[3.13] gh-69214: Fix fcntl.ioctl() request type (GH-119498) (\u2026 (#119906)\n\nRevert \"[3.13] gh-69214: Fix fcntl.ioctl() request type (GH-119498) (#119504)\"\n\nThis reverts commit 0bab0b3a53da735838720f96f3d3bf86ca6ba125.\n\nThe change modified how negative values, like termios.TIOCSWINSZ, was\ntreated and is actually backward incompatible.",
        "before_after_code_files": [
          "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c||Modules/fcntlmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h": [
          "File: Modules/clinic/fcntlmodule.c.h -> Modules/clinic/fcntlmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     {\"ioctl\", (PyCFunction)(void(*)(void))fcntl_ioctl, METH_FASTCALL, fcntl_ioctl__doc__},",
          "98: static PyObject *",
          "100:                  PyObject *ob_arg, int mutate_arg);",
          "102: static PyObject *",
          "",
          "[Removed Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "[Added Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: {",
          "105:     PyObject *return_value = NULL;",
          "106:     int fd;",
          "108:     PyObject *ob_arg = NULL;",
          "109:     int mutate_arg = 1;",
          "",
          "[Removed Lines]",
          "107:     unsigned long code;",
          "",
          "[Added Lines]",
          "107:     unsigned int code;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     if (fd < 0) {",
          "121:         goto exit;",
          "122:     }",
          "125:         goto exit;",
          "126:     }",
          "128:     if (nargs < 3) {",
          "129:         goto skip_optional;",
          "130:     }",
          "",
          "[Removed Lines]",
          "123:     if (!PyLong_Check(args[1])) {",
          "124:         PyErr_Format(PyExc_TypeError, \"ioctl() argument 2 must be int, not %T\", args[1]);",
          "127:     code = PyLong_AsUnsignedLongMask(args[1]);",
          "",
          "[Added Lines]",
          "123:     code = (unsigned int)PyLong_AsUnsignedLongMask(args[1]);",
          "124:     if (code == (unsigned int)-1 && PyErr_Occurred()) {",
          "",
          "---------------"
        ],
        "Modules/fcntlmodule.c||Modules/fcntlmodule.c": [
          "File: Modules/fcntlmodule.c -> Modules/fcntlmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fcntl.ioctl",
          "114:     fd: fildes",
          "116:     arg as ob_arg: object(c_default='NULL') = 0",
          "117:     mutate_flag as mutate_arg: bool = True",
          "118:     /",
          "",
          "[Removed Lines]",
          "115:     request as code: unsigned_long(bitwise=True)",
          "",
          "[Added Lines]",
          "115:     request as code: unsigned_int(bitwise=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: static PyObject *",
          "152:                  PyObject *ob_arg, int mutate_arg)",
          "154: {",
          "155: #define IOCTL_BUFSZ 1024",
          "",
          "[Removed Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "[Added Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6bede815dd88adb9a89eda15c01573fd03af080",
      "candidate_info": {
        "commit_hash": "d6bede815dd88adb9a89eda15c01573fd03af080",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d6bede815dd88adb9a89eda15c01573fd03af080",
        "files": [
          "Lib/test/test_tkinter/test_images.py"
        ],
        "message": "[3.13] gh-119791: Fix new Tkinter tests for wantobjects=0 (GH-119792) (GH-119794)\n\nPhotoImage.get() retruns a string instead of a 3-tuple of integers\nin this case.\n(cherry picked from commit e875c2d752fed0a8d16958dc7b331e66a2476247)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_images.py||Lib/test/test_tkinter/test_images.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_images.py||Lib/test/test_tkinter/test_images.py": [
          "File: Lib/test/test_tkinter/test_images.py -> Lib/test/test_tkinter/test_images.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:         image.write(filename, background='#ff0000')",
          "582:         image4 = tkinter.PhotoImage('::img::test4', master=self.root,",
          "583:                                     format='ppm', file=filename)",
          "585:         self.assertEqual(image4.get(4, 6), image.get(4, 6))",
          "587:         image.write(filename, grayscale=True)",
          "588:         image5 = tkinter.PhotoImage('::img::test5', master=self.root,",
          "589:                                     format='ppm', file=filename)",
          "590:         c = image5.get(4, 6)",
          "591:         self.assertTrue(c[0] == c[1] == c[2], c)",
          "593:     def test_data(self):",
          "",
          "[Removed Lines]",
          "584:         self.assertEqual(image4.get(0, 0), (255, 0, 0))",
          "",
          "[Added Lines]",
          "584:         self.assertEqual(image4.get(0, 0), (255, 0, 0) if self.wantobjects else '255 0 0')",
          "591:         if not self.wantobjects:",
          "592:             c = c.split()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:         self.assertIsInstance(data, tuple)",
          "598:         for row in data:",
          "599:             self.assertIsInstance(row, str)",
          "602:         data = image.data('ppm')",
          "603:         image2 = tkinter.PhotoImage('::img::test2', master=self.root,",
          "",
          "[Removed Lines]",
          "600:         self.assertEqual(data[6].split()[4], '#%02x%02x%02x' % image.get(4, 6))",
          "",
          "[Added Lines]",
          "602:         c = image.get(4, 6)",
          "603:         if not self.wantobjects:",
          "604:             c = tuple(map(int, c.split()))",
          "605:         self.assertEqual(data[6].split()[4], '#%02x%02x%02x' % c)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:         data = image.data('ppm', background='#ff0000')",
          "623:         image4 = tkinter.PhotoImage('::img::test4', master=self.root,",
          "624:                                     format='ppm', data=data)",
          "626:         self.assertEqual(image4.get(4, 6), image.get(4, 6))",
          "628:         data = image.data('ppm', grayscale=True)",
          "629:         image5 = tkinter.PhotoImage('::img::test5', master=self.root,",
          "630:                                     format='ppm', data=data)",
          "631:         c = image5.get(4, 6)",
          "632:         self.assertTrue(c[0] == c[1] == c[2], c)",
          "",
          "[Removed Lines]",
          "625:         self.assertEqual(image4.get(0, 0), (255, 0, 0))",
          "",
          "[Added Lines]",
          "630:         self.assertEqual(image4.get(0, 0), (255, 0, 0) if self.wantobjects else '255 0 0')",
          "637:         if not self.wantobjects:",
          "638:             c = c.split()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451cb71cc820cce5f250c507cecf15d34f181157",
      "candidate_info": {
        "commit_hash": "451cb71cc820cce5f250c507cecf15d34f181157",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/451cb71cc820cce5f250c507cecf15d34f181157",
        "files": [
          "Lib/test/test_pydoc/test_pydoc.py"
        ],
        "message": "[3.13] gh-120590: Fix test_pydoc in the refleak hunting mode (GH-120615) (GH-120669)\n\nMocking only works if sys.modules['pydoc'] and pydoc are the same,\nbut some pydoc functions reload the module and change sys.modules.\nEnsure that sys.modules['pydoc'] is always restored after the corresponding\ntests.\n(cherry picked from commit 2cf47389e26cb591342d07dad98619916d5a1b15)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_pydoc/test_pydoc.py||Lib/test/test_pydoc/test_pydoc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pydoc/test_pydoc.py||Lib/test/test_pydoc/test_pydoc.py": [
          "File: Lib/test/test_pydoc/test_pydoc.py -> Lib/test/test_pydoc/test_pydoc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "382: class PydocBaseTest(unittest.TestCase):",
          "384:     def _restricted_walk_packages(self, walk_packages, path=None):",
          "385:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:     def tearDown(self):",
          "384:         # Self-testing. Mocking only works if sys.modules['pydoc'] and pydoc",
          "385:         # are the same. But some pydoc functions reload the module and change",
          "386:         # sys.modules, so check that it was restored.",
          "387:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412: class PydocDocTest(unittest.TestCase):",
          "413:     maxDiff = None",
          "415:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "416:                      'trace function introduces __locals__ unexpectedly')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     def tearDown(self):",
          "420:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1279:         self.assertTrue(result.startswith(expected))",
          "1281:     def test_importfile(self):",
          "1290: class Rect:",
          "",
          "[Removed Lines]",
          "1282:         loaded_pydoc = pydoc.importfile(pydoc.__file__)",
          "1284:         self.assertIsNot(loaded_pydoc, pydoc)",
          "1285:         self.assertEqual(loaded_pydoc.__name__, 'pydoc')",
          "1286:         self.assertEqual(loaded_pydoc.__file__, pydoc.__file__)",
          "1287:         self.assertEqual(loaded_pydoc.__spec__, pydoc.__spec__)",
          "",
          "[Added Lines]",
          "1289:         try:",
          "1290:             loaded_pydoc = pydoc.importfile(pydoc.__file__)",
          "1292:             self.assertIsNot(loaded_pydoc, pydoc)",
          "1293:             self.assertEqual(loaded_pydoc.__name__, 'pydoc')",
          "1294:             self.assertEqual(loaded_pydoc.__file__, pydoc.__file__)",
          "1295:             self.assertEqual(loaded_pydoc.__spec__, pydoc.__spec__)",
          "1296:         finally:",
          "1297:             sys.modules['pydoc'] = pydoc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1301: class TestDescriptions(unittest.TestCase):",
          "1303:     def test_module(self):",
          "1304:         # Check that pydocfodder module can be described",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1312:     def tearDown(self):",
          "1313:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1790: class PydocFodderTest(unittest.TestCase):",
          "1792:     def getsection(self, text, beginline, endline):",
          "1793:         lines = text.splitlines()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     def tearDown(self):",
          "1804:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1927: )",
          "1928: class PydocServerTest(unittest.TestCase):",
          "1929:     \"\"\"Tests for pydoc._start_server\"\"\"",
          "1931:     def test_server(self):",
          "1932:         # Minimal test that starts the server, checks that it works, then stops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:     def tearDown(self):",
          "1945:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1989:             (\"foobar\", \"Pydoc: Error - foobar\"),",
          "1990:             ]",
          "1997: class TestHelper(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "1992:         with self.restrict_walk_packages():",
          "1993:             for url, title in requests:",
          "1994:                 self.call_url_handler(url, title)",
          "",
          "[Added Lines]",
          "2008:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "2009:         try:",
          "2010:             with self.restrict_walk_packages():",
          "2011:                 for url, title in requests:",
          "2012:                     self.call_url_handler(url, title)",
          "2013:         finally:",
          "2014:             # Some requests reload the module and change sys.modules.",
          "2015:             sys.modules['pydoc'] = pydoc",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2003: class PydocWithMetaClasses(unittest.TestCase):",
          "2004:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "2005:                      'trace function introduces __locals__ unexpectedly')",
          "2006:     @requires_docstrings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:     def tearDown(self):",
          "2026:         self.assertIs(sys.modules['pydoc'], pydoc)",
          "",
          "---------------"
        ]
      }
    }
  ]
}