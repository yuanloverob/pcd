{
  "cve_id": "CVE-2021-32066",
  "cve_desc": "An issue was discovered in Ruby through 2.6.7, 2.7.x through 2.7.3, and 3.x through 3.0.1. Net::IMAP does not raise an exception when StartTLS fails with an an unknown response, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"",
  "repo": "ruby/ruby",
  "patch_hash": "a21a3b7d23704a01d34bd79d09dc37897e00922a",
  "patch_info": {
    "commit_hash": "a21a3b7d23704a01d34bd79d09dc37897e00922a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/a21a3b7d23704a01d34bd79d09dc37897e00922a",
    "files": [
      "lib/net/imap.rb",
      "test/net/imap/test_imap.rb",
      "version.h"
    ],
    "message": "Fix StartTLS stripping vulnerability\n\nReported by Alexandr Savca in https://hackerone.com/reports/1178562\n\nCo-authored-by: Shugo Maeda <shugo@ruby-lang.org>",
    "before_after_code_files": [
      "lib/net/imap.rb||lib/net/imap.rb",
      "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "lib/net/imap.rb||lib/net/imap.rb": [
      "File: lib/net/imap.rb -> lib/net/imap.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1216:       end",
      "1217:       resp = @tagged_responses.delete(tag)",
      "1218:       case resp.name",
      "1219:       when /\\A(?:NO)\\z/ni",
      "1220:         raise NoResponseError, resp",
      "1221:       when /\\A(?:BAD)\\z/ni",
      "1222:         raise BadResponseError, resp",
      "1223:       else",
      "1225:       end",
      "1226:     end",
      "",
      "[Removed Lines]",
      "1224:         return resp",
      "",
      "[Added Lines]",
      "1219:       when /\\A(?:OK)\\z/ni",
      "1220:         return resp",
      "1226:         raise UnknownResponseError, resp",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3717:     class ByeResponseError < ResponseError",
      "3718:     end",
      "3720:     RESPONSE_ERRORS = Hash.new(ResponseError)",
      "3721:     RESPONSE_ERRORS[\"NO\"] = NoResponseError",
      "3722:     RESPONSE_ERRORS[\"BAD\"] = BadResponseError",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3722:     # Error raised upon an unknown response from the server.",
      "3723:     class UnknownResponseError < ResponseError",
      "3724:     end",
      "",
      "---------------"
    ],
    "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb": [
      "File: test/net/imap/test_imap.rb -> test/net/imap/test_imap.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:         imap.disconnect",
      "128:       end",
      "129:     end",
      "130:   end",
      "132:   def start_server",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:     def test_starttls_stripping",
      "132:       starttls_stripping_test do |port|",
      "133:         imap = Net::IMAP.new(\"localhost\", :port => port)",
      "134:         assert_raise(Net::IMAP::UnknownResponseError) do",
      "135:           imap.starttls(:ca_file => CA_FILE)",
      "136:         end",
      "137:         imap",
      "138:       end",
      "139:     end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "784:     end",
      "785:   end",
      "787:   def create_tcp_server",
      "788:     return TCPServer.new(server_addr, 0)",
      "789:   end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "797:   def starttls_stripping_test",
      "798:     server = create_tcp_server",
      "799:     port = server.addr[1]",
      "800:     start_server do",
      "801:       sock = server.accept",
      "802:       begin",
      "803:         sock.print(\"* OK test server\\r\\n\")",
      "804:         sock.gets",
      "805:         sock.print(\"RUBY0001 BUG unhandled command\\r\\n\")",
      "806:       ensure",
      "807:         sock.close",
      "808:         server.close",
      "809:       end",
      "810:     end",
      "811:     begin",
      "812:       imap = yield(port)",
      "813:     ensure",
      "814:       imap.disconnect if imap && !imap.disconnected?",
      "815:     end",
      "816:   end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
      "3: #define RUBY_VERSION_TEENY 4",
      "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
      "7: #define RUBY_RELEASE_YEAR 2021",
      "8: #define RUBY_RELEASE_MONTH 7",
      "",
      "[Removed Lines]",
      "5: #define RUBY_PATCHLEVEL 190",
      "",
      "[Added Lines]",
      "5: #define RUBY_PATCHLEVEL 191",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d4d38f8838579592e70fb04a6a2f0162fe989c2",
      "candidate_info": {
        "commit_hash": "7d4d38f8838579592e70fb04a6a2f0162fe989c2",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/7d4d38f8838579592e70fb04a6a2f0162fe989c2",
        "files": [
          "load.c",
          "version.h"
        ],
        "message": "merge revision(s) b360588cd3cbac5fb4f004aa53a8fdc715906719: [Backport #15856]\n\n\tSort feature index arrays by the priority of file types [Bug #15856]\n\n\tWhen looking for libraries to load with a feature name without\n\textension, `.rb` files are given priority. However, since the\n\tfeature index arrays were not in that order of priority, but in\n\tthe order in which they were loaded, a lower priority extension\n\tlibrary might be returned. In that case, the `.rb` file had to be\n\tsearched for again from the `$LOAD_PATH`, resulting in poor\n\tperformance.\n\t---\n\t load.c | 52 +++++++++++++++++++++++++++++++++++++++++++++-------\n\t 1 file changed, 45 insertions(+), 7 deletions(-)",
        "before_after_code_files": [
          "load.c||load.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "load.c||load.c": [
          "File: load.c -> load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     return st_hash(str, len, 0xfea7009e);",
          "179: }",
          "181: static void",
          "183: {",
          "184:     struct st_table *features_index;",
          "185:     VALUE this_feature_index = Qnil;",
          "",
          "[Removed Lines]",
          "182: features_index_add_single(const char* str, size_t len, VALUE offset)",
          "",
          "[Added Lines]",
          "181: static bool",
          "182: is_rbext_path(VALUE feature_path)",
          "183: {",
          "184:     long len = RSTRING_LEN(feature_path);",
          "185:     long rbext_len = rb_strlen_lit(\".rb\");",
          "186:     if (len <= rbext_len) return false;",
          "187:     return IS_RBEXT(RSTRING_PTR(feature_path) + len - rbext_len);",
          "188: }",
          "191: features_index_add_single(const char* str, size_t len, VALUE offset, bool rb)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:  st_insert(features_index, short_feature_key, (st_data_t)offset);",
          "196:     }",
          "197:     else if (RB_TYPE_P(this_feature_index, T_FIXNUM)) {",
          "198:  VALUE feature_indexes[2];",
          "201:  this_feature_index = (VALUE)xcalloc(1, sizeof(struct RArray));",
          "203:  rb_ary_cat(this_feature_index, feature_indexes, numberof(feature_indexes));",
          "204:  st_insert(features_index, short_feature_key, (st_data_t)this_feature_index);",
          "205:     }",
          "206:     else {",
          "207:  Check_Type(this_feature_index, T_ARRAY);",
          "208:  rb_ary_push(this_feature_index, offset);",
          "209:     }",
          "210: }",
          "",
          "[Removed Lines]",
          "199:  feature_indexes[0] = this_feature_index;",
          "200:  feature_indexes[1] = offset;",
          "",
          "[Added Lines]",
          "207:  VALUE loaded_features = get_loaded_features();",
          "208:  VALUE this_feature_path = RARRAY_AREF(loaded_features, FIX2LONG(this_feature_index));",
          "210:  int top = (rb && !is_rbext_path(this_feature_path)) ? 1 : 0;",
          "211:  feature_indexes[top^0] = this_feature_index;",
          "212:  feature_indexes[top^1] = offset;",
          "219:         long pos = -1;",
          "222:         if (rb) {",
          "223:             VALUE loaded_features = get_loaded_features();",
          "224:             for (long i = 0; i < RARRAY_LEN(this_feature_index); ++i) {",
          "225:                 VALUE idx = RARRAY_AREF(this_feature_index, i);",
          "226:                 VALUE this_feature_path = RARRAY_AREF(loaded_features, FIX2LONG(idx));",
          "227:                 Check_Type(this_feature_path, T_STRING);",
          "228:                 if (!is_rbext_path(this_feature_path)) {",
          "232:                     pos = i;",
          "233:                     break;",
          "234:                 }",
          "235:             }",
          "236:         }",
          "238:         if (pos >= 0) {",
          "239:             VALUE *ptr = (VALUE *)RARRAY_CONST_PTR_TRANSIENT(this_feature_index);",
          "240:             long len = RARRAY_LEN(this_feature_index);",
          "241:             MEMMOVE(ptr + pos, ptr + pos + 1, VALUE, len - pos - 1);",
          "242:             ptr[pos] = offset;",
          "243:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221: features_index_add(VALUE feature, VALUE offset)",
          "222: {",
          "223:     const char *feature_str, *feature_end, *ext, *p;",
          "225:     feature_str = StringValuePtr(feature);",
          "226:     feature_end = feature_str + RSTRING_LEN(feature);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     bool rb = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:      break;",
          "231:     if (*ext != '.')",
          "232:  ext = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     else",
          "270:         rb = IS_RBEXT(ext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:  if (p < feature_str)",
          "242:      break;",
          "245:  if (ext) {",
          "247:  }",
          "248:     }",
          "250:     if (ext) {",
          "252:     }",
          "253: }",
          "",
          "[Removed Lines]",
          "244:  features_index_add_single(p + 1, feature_end - p - 1, offset);",
          "246:      features_index_add_single(p + 1, ext - p - 1, offset);",
          "249:     features_index_add_single(feature_str, feature_end - feature_str, offset);",
          "251:  features_index_add_single(feature_str, ext - feature_str, offset);",
          "",
          "[Added Lines]",
          "282:  features_index_add_single(p + 1, feature_end - p - 1, offset, false);",
          "284:      features_index_add_single(p + 1, ext - p - 1, offset, rb);",
          "287:     features_index_add_single(feature_str, feature_end - feature_str, offset, false);",
          "289:  features_index_add_single(feature_str, ext - feature_str, offset, rb);",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 5",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "8: #define RUBY_RELEASE_MONTH 11",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 193",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 194",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81f5453bd831e6f09e660fdf7e72d3d2da8753e7",
      "candidate_info": {
        "commit_hash": "81f5453bd831e6f09e660fdf7e72d3d2da8753e7",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/81f5453bd831e6f09e660fdf7e72d3d2da8753e7",
        "files": [
          "cont.c",
          "test/ruby/test_fiber.rb",
          "version.h"
        ],
        "message": "merge revision(s) 5c7af72304d0ad33cd3f21b24a4bc44e8acd5b2c,d650b17686d49c2ce8e6a87039861154e93d4621: [Backport #18497]\n\n    Assuming EXIT_SUCCESS equals 0 is not portable\n\n    ---\n     test/ruby/test_fiber.rb | 6 +++---\n     1 file changed, 3 insertions(+), 3 deletions(-)\n\n    `rb_fiber_terminate` must not return [Bug #18497]\n\n    In a forked process from a fiber, the fiber becomes the only\n    fiber, `fiber_switch` does nothing as there is no other fibers,\n    `rb_fiber_terminate` does not terminate the fiber.  In that case,\n    reaches the end of `fiber_entry` finaly, which is declared as\n    \"COROUTINE\" and should never return.\n    ---\n     cont.c                     |  3 ++-\n     eval_intern.h              |  2 +-\n     test/fiber/test_process.rb | 15 +++++++++++++++\n     test/ruby/test_fiber.rb    |  5 +++++\n     4 files changed, 23 insertions(+), 2 deletions(-)\n\n    note that only backported a part of above patch because of incompatibility\n    of ruby_2_7.",
        "before_after_code_files": [
          "cont.c||cont.c",
          "test/ruby/test_fiber.rb||test/ruby/test_fiber.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "cont.c||cont.c": [
          "File: cont.c -> cont.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1796:     return fiber_initialize(fiber_alloc(rb_cFiber), rb_proc_new(func, obj), &shared_fiber_pool);",
          "1797: }",
          "1801: #define PASS_KW_SPLAT (rb_empty_keyword_given_p() ? RB_PASS_EMPTY_KEYWORDS : rb_keyword_given_p())",
          "",
          "[Removed Lines]",
          "1799: static void rb_fiber_terminate(rb_fiber_t *fiber, int need_interrupt);",
          "",
          "[Added Lines]",
          "1799: NORETURN(static void rb_fiber_terminate(rb_fiber_t *fiber, int need_interrupt));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2090:     next_fiber = return_fiber();",
          "2091:     if (need_interrupt) RUBY_VM_SET_INTERRUPT(&next_fiber->cont.saved_ec);",
          "2092:     fiber_switch(next_fiber, 1, &value, 0, RB_NO_KEYWORDS);",
          "2093: }",
          "2095: VALUE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2093:     ruby_stop(0);",
          "",
          "---------------"
        ],
        "test/ruby/test_fiber.rb||test/ruby/test_fiber.rb": [
          "File: test/ruby/test_fiber.rb -> test/ruby/test_fiber.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:                 Fiber.new {}.transfer",
          "319:                 Fiber.new { Fiber.yield }",
          "320:               end",
          "322:             end",
          "323:           }.transfer",
          "324:           _, status = Process.waitpid2(xpid)",
          "",
          "[Removed Lines]",
          "321:               exit!(0)",
          "",
          "[Added Lines]",
          "321:               exit!(true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:       end.resume",
          "328:     end",
          "329:     pid, status = Process.waitpid2(pid)",
          "332:   end",
          "334:   def test_exit_in_fiber",
          "",
          "[Removed Lines]",
          "330:     assert_equal(0, status.exitstatus, bug5700)",
          "331:     assert_equal(false, status.signaled?, bug5700)",
          "",
          "[Added Lines]",
          "330:     assert_not_predicate(status, :signaled?, bug5700)",
          "331:     assert_predicate(status, :success?, bug5700)",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 6",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2022",
          "8: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 212",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 213",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cc5567b46249e6b4bd2dd3cfdd348ab885f59e3",
      "candidate_info": {
        "commit_hash": "1cc5567b46249e6b4bd2dd3cfdd348ab885f59e3",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/1cc5567b46249e6b4bd2dd3cfdd348ab885f59e3",
        "files": [
          "regcomp.c",
          "test/ruby/test_regexp.rb",
          "version.h"
        ],
        "message": "merge revision(s) 0846c2da457e7523819236ac7da492029b3ef73d,6c7cb00c094332a208cf36e5cd723a9ba60c41b8: [Backport #16376]\n\n\tCheck backref number buffer overrun [Bug #16376]\n\n\t---\n\t regcomp.c                | 21 ++++++++++++---------\n\t test/ruby/test_regexp.rb |  6 ++++++\n\t 2 files changed, 18 insertions(+), 9 deletions(-)\n\n\ttest/ruby/test_regexp.rb: Avoid \"ambiguity between regexp and two\n\t divisions\"\n\n\t---\n\t test/ruby/test_regexp.rb | 2 +-\n\t 1 file changed, 1 insertion(+), 1 deletion(-)",
        "before_after_code_files": [
          "regcomp.c||regcomp.c",
          "test/ruby/test_regexp.rb||test/ruby/test_regexp.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "regcomp.c||regcomp.c": [
          "File: regcomp.c -> regcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1914: }",
          "1916: static int",
          "1918: {",
          "1919:   int i, pos, n, old_num;",
          "1920:   int *backs;",
          "",
          "[Removed Lines]",
          "1917: renumber_node_backref(Node* node, GroupNumRemap* map)",
          "",
          "[Added Lines]",
          "1917: renumber_node_backref(Node* node, GroupNumRemap* map, const int num_mem)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1930:     backs = bn->back_dynamic;",
          "1932:   for (i = 0, pos = 0; i < old_num; i++) {",
          "1933:     n = map[backs[i]].new_val;",
          "1934:     if (n > 0) {",
          "1935:       backs[pos] = n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933:     if (backs[i] > num_mem)  return ONIGERR_INVALID_BACKREF;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1942: }",
          "1944: static int",
          "1946: {",
          "1947:   int r = 0;",
          "",
          "[Removed Lines]",
          "1945: renumber_by_map(Node* node, GroupNumRemap* map)",
          "",
          "[Added Lines]",
          "1946: renumber_by_map(Node* node, GroupNumRemap* map, const int num_mem)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1950:   case NT_LIST:",
          "1951:   case NT_ALT:",
          "1952:     do {",
          "1954:     } while (r == 0 && IS_NOT_NULL(node = NCDR(node)));",
          "1955:     break;",
          "1956:   case NT_QTFR:",
          "1958:     break;",
          "1959:   case NT_ENCLOSE:",
          "1960:     {",
          "1961:       EncloseNode* en = NENCLOSE(node);",
          "1963:  en->regnum = map[en->regnum].new_val;",
          "1965:     }",
          "1966:     break;",
          "1968:   case NT_BREF:",
          "1970:     break;",
          "1972:   case NT_ANCHOR:",
          "1973:     if (NANCHOR(node)->target)",
          "1975:     break;",
          "1977:   default:",
          "",
          "[Removed Lines]",
          "1953:       r = renumber_by_map(NCAR(node), map);",
          "1957:     r = renumber_by_map(NQTFR(node)->target, map);",
          "1962:       if (en->type == ENCLOSE_CONDITION)",
          "1964:       r = renumber_by_map(en->target, map);",
          "1969:     r = renumber_node_backref(node, map);",
          "1974:       r = renumber_by_map(NANCHOR(node)->target, map);",
          "",
          "[Added Lines]",
          "1954:       r = renumber_by_map(NCAR(node), map, num_mem);",
          "1958:     r = renumber_by_map(NQTFR(node)->target, map, num_mem);",
          "1963:       if (en->type == ENCLOSE_CONDITION) {",
          "1964:  if (en->regnum > num_mem)  return ONIGERR_INVALID_BACKREF;",
          "1966:       }",
          "1967:       r = renumber_by_map(en->target, map, num_mem);",
          "1972:     r = renumber_node_backref(node, map, num_mem);",
          "1977:       r = renumber_by_map(NANCHOR(node)->target, map, num_mem);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2033:   r = noname_disable_map(root, map, &counter);",
          "2034:   if (r != 0) return r;",
          "2037:   if (r != 0) return r;",
          "2039:   for (i = 1, pos = 1; i <= env->num_mem; i++) {",
          "",
          "[Removed Lines]",
          "2036:   r = renumber_by_map(*root, map);",
          "",
          "[Added Lines]",
          "2039:   r = renumber_by_map(*root, map, env->num_mem);",
          "",
          "---------------"
        ],
        "test/ruby/test_regexp.rb||test/ruby/test_regexp.rb": [
          "File: test/ruby/test_regexp.rb -> test/ruby/test_regexp.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1293:     assert_nil($1)",
          "1294:   end",
          "1296:   # This assertion is for porting x2() tests in testpy.py of Onigmo.",
          "1297:   def assert_match_at(re, str, positions, msg = nil)",
          "1298:     re = Regexp.new(re) unless re.is_a?(Regexp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296:   def test_backref_overrun",
          "1297:     assert_raise_with_message(SyntaxError, /invalid backref number/) do",
          "1298:       eval(%[\"\".match(/(())(?<X>)((?(90000)))/)])",
          "1299:     end",
          "1300:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 6",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "8: #define RUBY_RELEASE_MONTH 12",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 207",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 208",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fd9588395294ac97a1f6dc3a51d4f19e84a6ba9",
      "candidate_info": {
        "commit_hash": "0fd9588395294ac97a1f6dc3a51d4f19e84a6ba9",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/0fd9588395294ac97a1f6dc3a51d4f19e84a6ba9",
        "files": [
          "addr2line.c",
          "version.h"
        ],
        "message": "merge revision(s) d795f494a89e0d9498dfedc54b8a98acc2bc4d7b: [Backport #17794]\n\n\tAvoid `free(3)`ing invalid pointer\n\n\tFixes [Bug #17794]\n\t---\n\t addr2line.c | 2 ++\n\t 1 file changed, 2 insertions(+)",
        "before_after_code_files": [
          "addr2line.c||addr2line.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "addr2line.c||addr2line.c": [
          "File: addr2line.c -> addr2line.c"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # define RUBY_VERSION_MINOR RUBY_API_VERSION_MINOR",
          "3: #define RUBY_VERSION_TEENY 5",
          "4: #define RUBY_RELEASE_DATE RUBY_RELEASE_YEAR_STR\"-\"RUBY_RELEASE_MONTH_STR\"-\"RUBY_RELEASE_DAY_STR",
          "7: #define RUBY_RELEASE_YEAR 2021",
          "8: #define RUBY_RELEASE_MONTH 11",
          "",
          "[Removed Lines]",
          "5: #define RUBY_PATCHLEVEL 195",
          "",
          "[Added Lines]",
          "5: #define RUBY_PATCHLEVEL 196",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95ba9053e20ad8d113af37b3f1f4cbfff1f6a8f1",
      "candidate_info": {
        "commit_hash": "95ba9053e20ad8d113af37b3f1f4cbfff1f6a8f1",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/95ba9053e20ad8d113af37b3f1f4cbfff1f6a8f1",
        "files": [
          "lib/net/imap.rb",
          "test/net/imap/test_imap.rb",
          "version.h"
        ],
        "message": "Fix StartTLS stripping vulnerability\n\nReported by Alexandr Savca in https://hackerone.com/reports/1178562\n\nCo-authored-by: Shugo Maeda <shugo@ruby-lang.org>\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_6@67950 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "lib/net/imap.rb||lib/net/imap.rb",
          "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "lib/net/imap.rb||lib/net/imap.rb",
            "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb",
            "version.h||version.h"
          ],
          "candidate": [
            "lib/net/imap.rb||lib/net/imap.rb",
            "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb",
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/net/imap.rb||lib/net/imap.rb": [
          "File: lib/net/imap.rb -> lib/net/imap.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1215:       end",
          "1216:       resp = @tagged_responses.delete(tag)",
          "1217:       case resp.name",
          "1218:       when /\\A(?:NO)\\z/ni",
          "1219:         raise NoResponseError, resp",
          "1220:       when /\\A(?:BAD)\\z/ni",
          "1221:         raise BadResponseError, resp",
          "1222:       else",
          "1224:       end",
          "1225:     end",
          "",
          "[Removed Lines]",
          "1223:         return resp",
          "",
          "[Added Lines]",
          "1218:       when /\\A(?:OK)\\z/ni",
          "1219:         return resp",
          "1225:         raise UnknownResponseError, resp",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3716:     class ByeResponseError < ResponseError",
          "3717:     end",
          "3719:     RESPONSE_ERRORS = Hash.new(ResponseError)",
          "3720:     RESPONSE_ERRORS[\"NO\"] = NoResponseError",
          "3721:     RESPONSE_ERRORS[\"BAD\"] = BadResponseError",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3721:     # Error raised upon an unknown response from the server.",
          "3722:     class UnknownResponseError < ResponseError",
          "3723:     end",
          "",
          "---------------"
        ],
        "test/net/imap/test_imap.rb||test/net/imap/test_imap.rb": [
          "File: test/net/imap/test_imap.rb -> test/net/imap/test_imap.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         imap.disconnect",
          "128:       end",
          "129:     end",
          "130:   end",
          "132:   def test_unexpected_eof",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     def test_starttls_stripping",
          "132:       starttls_stripping_test do |port|",
          "133:         imap = Net::IMAP.new(\"localhost\", :port => port)",
          "134:         assert_raise(Net::IMAP::UnknownResponseError) do",
          "135:           imap.starttls(:ca_file => CA_FILE)",
          "136:         end",
          "137:         imap",
          "138:       end",
          "139:     end",
          "140:   end",
          "142:   def start_server",
          "143:     th = Thread.new do",
          "144:       yield",
          "145:     end",
          "146:     @threads << th",
          "147:     sleep 0.1 until th.stop?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:     end",
          "763:   end",
          "765:   def create_tcp_server",
          "766:     return TCPServer.new(server_addr, 0)",
          "767:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:   def starttls_stripping_test",
          "784:     server = create_tcp_server",
          "785:     port = server.addr[1]",
          "786:     start_server do",
          "787:       sock = server.accept",
          "788:       begin",
          "789:         sock.print(\"* OK test server\\r\\n\")",
          "790:         sock.gets",
          "791:         sock.print(\"RUBY0001 BUG unhandled command\\r\\n\")",
          "792:       ensure",
          "793:         sock.close",
          "794:         server.close",
          "795:       end",
          "796:     end",
          "797:     begin",
          "798:       imap = yield(port)",
          "799:     ensure",
          "800:       imap.disconnect if imap && !imap.disconnected?",
          "801:     end",
          "802:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.6.8\"",
          "2: #define RUBY_RELEASE_DATE \"2021-07-07\"",
          "5: #define RUBY_RELEASE_YEAR 2021",
          "6: #define RUBY_RELEASE_MONTH 7",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 204",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 205",
          "",
          "---------------"
        ]
      }
    }
  ]
}