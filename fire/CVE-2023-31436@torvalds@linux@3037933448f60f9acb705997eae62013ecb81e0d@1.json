{
  "cve_id": "CVE-2023-31436",
  "cve_desc": "qfq_change_class in net/sched/sch_qfq.c in the Linux kernel before 6.2.13 allows an out-of-bounds write because lmax can exceed QFQ_MIN_LMAX.",
  "repo": "torvalds/linux",
  "patch_hash": "3037933448f60f9acb705997eae62013ecb81e0d",
  "patch_info": {
    "commit_hash": "3037933448f60f9acb705997eae62013ecb81e0d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3037933448f60f9acb705997eae62013ecb81e0d",
    "files": [
      "net/sched/sch_qfq.c"
    ],
    "message": "net: sched: sch_qfq: prevent slab-out-of-bounds in qfq_activate_agg\n\nIf the TCA_QFQ_LMAX value is not offered through nlattr, lmax is determined by the MTU value of the network device.\nThe MTU of the loopback device can be set up to 2^31-1.\nAs a result, it is possible to have an lmax value that exceeds QFQ_MIN_LMAX.\n\nDue to the invalid lmax value, an index is generated that exceeds the QFQ_MAX_INDEX(=24) value, causing out-of-bounds read/write errors.\n\nThe following reports a oob access:\n\n[   84.582666] BUG: KASAN: slab-out-of-bounds in qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)\n[   84.583267] Read of size 4 at addr ffff88810f676948 by task ping/301\n[   84.583686]\n[   84.583797] CPU: 3 PID: 301 Comm: ping Not tainted 6.3.0-rc5 #1\n[   84.584164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014\n[   84.584644] Call Trace:\n[   84.584787]  <TASK>\n[   84.584906] dump_stack_lvl (lib/dump_stack.c:107 (discriminator 1))\n[   84.585108] print_report (mm/kasan/report.c:320 mm/kasan/report.c:430)\n[   84.585570] kasan_report (mm/kasan/report.c:538)\n[   84.585988] qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)\n[   84.586599] qfq_enqueue (net/sched/sch_qfq.c:1255)\n[   84.587607] dev_qdisc_enqueue (net/core/dev.c:3776)\n[   84.587749] __dev_queue_xmit (./include/net/sch_generic.h:186 net/core/dev.c:3865 net/core/dev.c:4212)\n[   84.588763] ip_finish_output2 (./include/net/neighbour.h:546 net/ipv4/ip_output.c:228)\n[   84.589460] ip_output (net/ipv4/ip_output.c:430)\n[   84.590132] ip_push_pending_frames (./include/net/dst.h:444 net/ipv4/ip_output.c:126 net/ipv4/ip_output.c:1586 net/ipv4/ip_output.c:1606)\n[   84.590285] raw_sendmsg (net/ipv4/raw.c:649)\n[   84.591960] sock_sendmsg (net/socket.c:724 net/socket.c:747)\n[   84.592084] __sys_sendto (net/socket.c:2142)\n[   84.593306] __x64_sys_sendto (net/socket.c:2150)\n[   84.593779] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n[   84.593902] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\n[   84.594070] RIP: 0033:0x7fe568032066\n[   84.594192] Code: 0e 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 41 89 ca 64 8b 04 25 18 00 00 00 85 c09[ 84.594796] RSP: 002b:00007ffce388b4e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\n\nCode starting with the faulting instruction\n===========================================\n[   84.595047] RAX: ffffffffffffffda RBX: 00007ffce388cc70 RCX: 00007fe568032066\n[   84.595281] RDX: 0000000000000040 RSI: 00005605fdad6d10 RDI: 0000000000000003\n[   84.595515] RBP: 00005605fdad6d10 R08: 00007ffce388eeec R09: 0000000000000010\n[   84.595749] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040\n[   84.595984] R13: 00007ffce388cc30 R14: 00007ffce388b4f0 R15: 0000001d00000001\n[   84.596218]  </TASK>\n[   84.596295]\n[   84.596351] Allocated by task 291:\n[   84.596467] kasan_save_stack (mm/kasan/common.c:46)\n[   84.596597] kasan_set_track (mm/kasan/common.c:52)\n[   84.596725] __kasan_kmalloc (mm/kasan/common.c:384)\n[   84.596852] __kmalloc_node (./include/linux/kasan.h:196 mm/slab_common.c:967 mm/slab_common.c:974)\n[   84.596979] qdisc_alloc (./include/linux/slab.h:610 ./include/linux/slab.h:731 net/sched/sch_generic.c:938)\n[   84.597100] qdisc_create (net/sched/sch_api.c:1244)\n[   84.597222] tc_modify_qdisc (net/sched/sch_api.c:1680)\n[   84.597357] rtnetlink_rcv_msg (net/core/rtnetlink.c:6174)\n[   84.597495] netlink_rcv_skb (net/netlink/af_netlink.c:2574)\n[   84.597627] netlink_unicast (net/netlink/af_netlink.c:1340 net/netlink/af_netlink.c:1365)\n[   84.597759] netlink_sendmsg (net/netlink/af_netlink.c:1942)\n[   84.597891] sock_sendmsg (net/socket.c:724 net/socket.c:747)\n[   84.598016] ____sys_sendmsg (net/socket.c:2501)\n[   84.598147] ___sys_sendmsg (net/socket.c:2557)\n[   84.598275] __sys_sendmsg (./include/linux/file.h:31 net/socket.c:2586)\n[   84.598399] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n[   84.598520] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\n[   84.598688]\n[   84.598744] The buggy address belongs to the object at ffff88810f674000\n[   84.598744]  which belongs to the cache kmalloc-8k of size 8192\n[   84.599135] The buggy address is located 2664 bytes to the right of\n[   84.599135]  allocated 7904-byte region [ffff88810f674000, ffff88810f675ee0)\n[   84.599544]\n[   84.599598] The buggy address belongs to the physical page:\n[   84.599777] page:00000000e638567f refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x10f670\n[   84.600074] head:00000000e638567f order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0\n[   84.600330] flags: 0x200000000010200(slab|head|node=0|zone=2)\n[   84.600517] raw: 0200000000010200 ffff888100043180 dead000000000122 0000000000000000\n[   84.600764] raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000\n[   84.601009] page dumped because: kasan: bad access detected\n[   84.601187]\n[   84.601241] Memory state around the buggy address:\n[   84.601396]  ffff88810f676800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.601620]  ffff88810f676880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.601845] >ffff88810f676900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602069]                                               ^\n[   84.602243]  ffff88810f676980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602468]  ffff88810f676a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   84.602693] ==================================================================\n[   84.602924] Disabling lock debugging due to kernel taint\n\nFixes: 3015f3d2a3cd (\"pkt_sched: enable QFQ to support TSO/GSO\")\nReported-by: Gwangun Jung <exsociety@gmail.com>\nSigned-off-by: Gwangun Jung <exsociety@gmail.com>\nAcked-by: Jamal Hadi Salim<jhs@mojatatu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/sched/sch_qfq.c||net/sched/sch_qfq.c"
    ]
  },
  "patch_diff": {
    "net/sched/sch_qfq.c||net/sched/sch_qfq.c": [
      "File: net/sched/sch_qfq.c -> net/sched/sch_qfq.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "421:  } else",
      "422:   weight = 1;",
      "425:   lmax = nla_get_u32(tb[TCA_QFQ_LMAX]);",
      "431:   lmax = psched_mtu(qdisc_dev(sch));",
      "433:  inv_w = ONE_FP / weight;",
      "434:  weight = ONE_FP / inv_w;",
      "",
      "[Removed Lines]",
      "424:  if (tb[TCA_QFQ_LMAX]) {",
      "426:   if (lmax < QFQ_MIN_LMAX || lmax > (1UL << QFQ_MTU_SHIFT)) {",
      "427:    pr_notice(\"qfq: invalid max length %u\\n\", lmax);",
      "428:    return -EINVAL;",
      "429:   }",
      "430:  } else",
      "",
      "[Added Lines]",
      "424:  if (tb[TCA_QFQ_LMAX])",
      "426:  else",
      "429:  if (lmax < QFQ_MIN_LMAX || lmax > (1UL << QFQ_MTU_SHIFT)) {",
      "430:   pr_notice(\"qfq: invalid max length %u\\n\", lmax);",
      "431:   return -EINVAL;",
      "432:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8551844d2c5b28b6809a45eb4f5d6e931838fd04",
      "candidate_info": {
        "commit_hash": "8551844d2c5b28b6809a45eb4f5d6e931838fd04",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8551844d2c5b28b6809a45eb4f5d6e931838fd04",
        "files": [
          "drivers/net/wireless/realtek/rtw89/core.c"
        ],
        "message": "wifi: rtw89: fix crash due to null pointer of sta in AP mode\n\nIn AP mode, 'sta' could be NULL if sending broadcast/multicast packets,\nso we should check before accessing, or it causes crash:\n\n  BUG: kernel NULL pointer dereference, address: 0000000000000004\n  #PF: supervisor read access in kernel mode\n  #PF: error_code(0x0000) - not-present page\n  PGD 0 P4D 0\n  Oops: 0000 [#1] PREEMPT SMP PTI\n  CPU: 2 PID: 92 Comm: kworker/u33:0 Tainted: G           OE\n  Workqueue: rtw89_tx_wq rtw89_core_txq_work [rtw89_core]\n  RIP: 0010:rtw89_core_tx_update_desc_info+0x2cc/0x7d0 [rtw89_core]\n  Code: e2 01 41 be 04 00 00 00 41 8b 84 c4 0c 01 00 00 75 0d 45 31 f6 ...\n  RSP: 0018:ffffb4cf807afce0 EFLAGS: 00010297\n  RAX: 0000000000000001 RBX: ffffb4cf807afd48 RCX: 0000000000000000\n  RDX: 0000000000000000 RSI: 0000000000000001 RDI: 0000000000000001\n  RBP: ffffb4cf807afd30 R08: ffff9b28c1e59808 R09: ffff9b28c0297100\n  R10: 00000000052cf7c4 R11: 00000000052cf7c4 R12: ffff9b28c1602040\n  R13: ffff9b28c07b3000 R14: 0000000000000004 R15: 0000000000000000\n  FS:  0000000000000000(0000) GS:ffff9b2a73280000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 0000000000000004 CR3: 00000001ca410003 CR4: 00000000000606e0\n  Call Trace:\n   <TASK>\n   rtw89_core_tx_write+0x7c/0x100 [rtw89_core]\n   rtw89_core_txq_work+0x1b4/0x530 [rtw89_core]\n   process_one_work+0x222/0x3f0\n   worker_thread+0x50/0x3f0\n   kthread+0x16b/0x190\n   ? rescuer_thread+0x3a0/0x3a0\n   ? set_kthread_struct+0x50/0x50\n   ret_from_fork+0x22/0x30\n   </TASK>\n\nFixes: e5307c9cd7ee (\"wifi: rtw89: set data lowest rate according to AP supported rate\")\nSigned-off-by: Ping-Ke Shih <pkshih@realtek.com>\nSigned-off-by: Kalle Valo <kvalo@kernel.org>\nLink: https://lore.kernel.org/r/20230406093009.5869-1-pkshih@realtek.com",
        "before_after_code_files": [
          "drivers/net/wireless/realtek/rtw89/core.c||drivers/net/wireless/realtek/rtw89/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/realtek/rtw89/core.c||drivers/net/wireless/realtek/rtw89/core.c": [
          "File: drivers/net/wireless/realtek/rtw89/core.c -> drivers/net/wireless/realtek/rtw89/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:  else",
          "708:   lowest_rate = RTW89_HW_RATE_OFDM6;",
          "711:   return lowest_rate;",
          "713:  return __ffs(sta->deflink.supp_rates[chan->band_type]) + lowest_rate;",
          "",
          "[Removed Lines]",
          "710:  if (!sta->deflink.supp_rates[chan->band_type])",
          "",
          "[Added Lines]",
          "710:  if (!sta || !sta->deflink.supp_rates[chan->band_type])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d6a468e335571f1e67e046050dea9af5fa4ebe",
      "candidate_info": {
        "commit_hash": "91d6a468e335571f1e67e046050dea9af5fa4ebe",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/91d6a468e335571f1e67e046050dea9af5fa4ebe",
        "files": [
          "drivers/dma/qcom/gpi.c"
        ],
        "message": "dma: gpi: remove spurious unlock in gpi_ch_init\n\ngpi_ch_init() doesn't lock the ctrl_lock mutex, so there is no need to\nunlock it too. Instead the mutex is handled by the function\ngpi_alloc_chan_resources(), which properly locks and unlocks the mutex.\n\n=====================================\nWARNING: bad unlock balance detected!\n6.3.0-rc5-00253-g99792582ded1-dirty #15 Not tainted\n-------------------------------------\nkworker/u16:0/9 is trying to release lock (&gpii->ctrl_lock) at:\n[<ffffb99d04e1284c>] gpi_alloc_chan_resources+0x108/0x5bc\nbut there are no more locks to release!\n\nother info that might help us debug this:\n6 locks held by kworker/u16:0/9:\n #0: ffff575740010938 ((wq_completion)events_unbound){+.+.}-{0:0}, at: process_one_work+0x220/0x594\n #1: ffff80000809bdd0 (deferred_probe_work){+.+.}-{0:0}, at: process_one_work+0x220/0x594\n #2: ffff575740f2a0f8 (&dev->mutex){....}-{3:3}, at: __device_attach+0x38/0x188\n #3: ffff57574b5570f8 (&dev->mutex){....}-{3:3}, at: __device_attach+0x38/0x188\n #4: ffffb99d06a2f180 (of_dma_lock){+.+.}-{3:3}, at: of_dma_request_slave_channel+0x138/0x280\n #5: ffffb99d06a2ee20 (dma_list_mutex){+.+.}-{3:3}, at: dma_get_slave_channel+0x28/0x10c\n\nstack backtrace:\nCPU: 7 PID: 9 Comm: kworker/u16:0 Not tainted 6.3.0-rc5-00253-g99792582ded1-dirty #15\nHardware name: Google Pixel 3 (DT)\nWorkqueue: events_unbound deferred_probe_work_func\nCall trace:\n dump_backtrace+0xa0/0xfc\n show_stack+0x18/0x24\n dump_stack_lvl+0x60/0xac\n dump_stack+0x18/0x24\n print_unlock_imbalance_bug+0x130/0x148\n lock_release+0x270/0x300\n __mutex_unlock_slowpath+0x48/0x2cc\n mutex_unlock+0x20/0x2c\n gpi_alloc_chan_resources+0x108/0x5bc\n dma_chan_get+0x84/0x188\n dma_get_slave_channel+0x5c/0x10c\n gpi_of_dma_xlate+0x110/0x1a0\n of_dma_request_slave_channel+0x174/0x280\n dma_request_chan+0x3c/0x2d4\n geni_i2c_probe+0x544/0x63c\n platform_probe+0x68/0xc4\n really_probe+0x148/0x2ac\n __driver_probe_device+0x78/0xe0\n driver_probe_device+0x3c/0x160\n __device_attach_driver+0xb8/0x138\n bus_for_each_drv+0x84/0xe0\n __device_attach+0x9c/0x188\n device_initial_probe+0x14/0x20\n bus_probe_device+0xac/0xb0\n device_add+0x60c/0x7d8\n of_device_add+0x44/0x60\n of_platform_device_create_pdata+0x90/0x124\n of_platform_bus_create+0x15c/0x3c8\n of_platform_populate+0x58/0xf8\n devm_of_platform_populate+0x58/0xbc\n geni_se_probe+0xf0/0x164\n platform_probe+0x68/0xc4\n really_probe+0x148/0x2ac\n __driver_probe_device+0x78/0xe0\n driver_probe_device+0x3c/0x160\n __device_attach_driver+0xb8/0x138\n bus_for_each_drv+0x84/0xe0\n __device_attach+0x9c/0x188\n device_initial_probe+0x14/0x20\n bus_probe_device+0xac/0xb0\n deferred_probe_work_func+0x8c/0xc8\n process_one_work+0x2bc/0x594\n worker_thread+0x228/0x438\n kthread+0x108/0x10c\n ret_from_fork+0x10/0x20\n\nFixes: 5d0c3533a19f (\"dmaengine: qcom: Add GPI dma driver\")\nSigned-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>\nLink: https://lore.kernel.org/r/20230409233355.453741-1-dmitry.baryshkov@linaro.org\nSigned-off-by: Vinod Koul <vkoul@kernel.org>",
        "before_after_code_files": [
          "drivers/dma/qcom/gpi.c||drivers/dma/qcom/gpi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/dma/qcom/gpi.c||drivers/dma/qcom/gpi.c": [
          "File: drivers/dma/qcom/gpi.c -> drivers/dma/qcom/gpi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1966: error_config_int:",
          "1967:  gpi_free_ring(&gpii->ev_ring, gpii);",
          "1968: exit_gpi_init:",
          "1970:  return ret;",
          "1971: }",
          "",
          "[Removed Lines]",
          "1969:  mutex_unlock(&gpii->ctrl_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e53413f8deedf738a6782cc14cc00bd5852ccf18",
      "candidate_info": {
        "commit_hash": "e53413f8deedf738a6782cc14cc00bd5852ccf18",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e53413f8deedf738a6782cc14cc00bd5852ccf18",
        "files": [
          "block/bfq-iosched.c"
        ],
        "message": "block, bfq: Fix division by zero error on zero wsum\n\nWhen the weighted sum is zero the calculation of limit causes\na division by zero error. Fix this by continuing to the next level.\n\nThis was discovered by running as root:\n\nstress-ng --ioprio 0\n\nFixes divison by error oops:\n\n[  521.450556] divide error: 0000 [#1] SMP NOPTI\n[  521.450766] CPU: 2 PID: 2684464 Comm: stress-ng-iopri Not tainted 6.2.1-1280.native #1\n[  521.451117] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.1-0-g3208b098f51a-prebuilt.qemu.org 04/01/2014\n[  521.451627] RIP: 0010:bfqq_request_over_limit+0x207/0x400\n[  521.451875] Code: 01 48 8d 0c c8 74 0b 48 8b 82 98 00 00 00 48 8d 0c c8 8b 85 34 ff ff ff 48 89 ca 41 0f af 41 50 48 d1 ea 48 98 48 01 d0 31 d2 <48> f7 f1 41 39 41 48 89 85 34 ff ff ff 0f 8c 7b 01 00 00 49 8b 44\n[  521.452699] RSP: 0018:ffffb1af84eb3948 EFLAGS: 00010046\n[  521.452938] RAX: 000000000000003c RBX: 0000000000000000 RCX: 0000000000000000\n[  521.453262] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffb1af84eb3978\n[  521.453584] RBP: ffffb1af84eb3a30 R08: 0000000000000001 R09: ffff8f88ab8a4ba0\n[  521.453905] R10: 0000000000000000 R11: 0000000000000001 R12: ffff8f88ab8a4b18\n[  521.454224] R13: ffff8f8699093000 R14: 0000000000000001 R15: ffffb1af84eb3970\n[  521.454549] FS:  00005640b6b0b580(0000) GS:ffff8f88b3880000(0000) knlGS:0000000000000000\n[  521.454912] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  521.455170] CR2: 00007ffcbcae4e38 CR3: 00000002e46de001 CR4: 0000000000770ee0\n[  521.455491] PKRU: 55555554\n[  521.455619] Call Trace:\n[  521.455736]  <TASK>\n[  521.455837]  ? bfq_request_merge+0x3a/0xc0\n[  521.456027]  ? elv_merge+0x115/0x140\n[  521.456191]  bfq_limit_depth+0xc8/0x240\n[  521.456366]  __blk_mq_alloc_requests+0x21a/0x2c0\n[  521.456577]  blk_mq_submit_bio+0x23c/0x6c0\n[  521.456766]  __submit_bio+0xb8/0x140\n[  521.457236]  submit_bio_noacct_nocheck+0x212/0x300\n[  521.457748]  submit_bio_noacct+0x1a6/0x580\n[  521.458220]  submit_bio+0x43/0x80\n[  521.458660]  ext4_io_submit+0x23/0x80\n[  521.459116]  ext4_do_writepages+0x40a/0xd00\n[  521.459596]  ext4_writepages+0x65/0x100\n[  521.460050]  do_writepages+0xb7/0x1c0\n[  521.460492]  __filemap_fdatawrite_range+0xa6/0x100\n[  521.460979]  file_write_and_wait_range+0xbf/0x140\n[  521.461452]  ext4_sync_file+0x105/0x340\n[  521.461882]  __x64_sys_fsync+0x67/0x100\n[  521.462305]  ? syscall_exit_to_user_mode+0x2c/0x1c0\n[  521.462768]  do_syscall_64+0x3b/0xc0\n[  521.463165]  entry_SYSCALL_64_after_hwframe+0x5a/0xc4\n[  521.463621] RIP: 0033:0x5640b6c56590\n[  521.464006] Code: 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 80 3d 71 70 0e 00 00 74 17 b8 4a 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 48 c3 0f 1f 80 00 00 00 00 48 83 ec 18 89 7c\n\nSigned-off-by: Colin Ian King <colin.i.king@gmail.com>\nLink: https://lore.kernel.org/r/20230413133009.1605335-1-colin.i.king@gmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/bfq-iosched.c||block/bfq-iosched.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/bfq-iosched.c||block/bfq-iosched.c": [
          "File: block/bfq-iosched.c -> block/bfq-iosched.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:      sched_data->service_tree[i].wsum;",
          "649:    }",
          "650:   }",
          "651:   limit = DIV_ROUND_CLOSEST(limit * entity->weight, wsum);",
          "652:   if (entity->allocated >= limit) {",
          "653:    bfq_log_bfqq(bfqq->bfqd, bfqq,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:   if (!wsum)",
          "652:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13b98989c81a64b6674f017324b37bedf158567e",
      "candidate_info": {
        "commit_hash": "13b98989c81a64b6674f017324b37bedf158567e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/13b98989c81a64b6674f017324b37bedf158567e",
        "files": [
          "fs/btrfs/super.c"
        ],
        "message": "btrfs: use btrfs_handle_fs_error in btrfs_fill_super\n\nWhile trying to track down a lost EIO problem I hit the following\nassertion while doing my error injection testing\n\n  BTRFS warning (device nvme1n1): transaction 1609 (with 180224 dirty metadata bytes) is not committed\n  assertion failed: !found, in fs/btrfs/disk-io.c:4456\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/messages.h:169!\n  invalid opcode: 0000 [#1] PREEMPT SMP NOPTI\n  CPU: 0 PID: 1445 Comm: mount Tainted: G        W          6.2.0-rc5+ #3\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.1-2.fc37 04/01/2014\n  RIP: 0010:btrfs_assertfail.constprop.0+0x18/0x1a\n  RSP: 0018:ffffb95fc3b0bc68 EFLAGS: 00010286\n  RAX: 0000000000000034 RBX: ffff9941c2ac2000 RCX: 0000000000000000\n  RDX: 0000000000000001 RSI: ffffffffb6741f7d RDI: 00000000ffffffff\n  RBP: ffff9941c2ac2428 R08: 0000000000000000 R09: ffffb95fc3b0bb38\n  R10: 0000000000000003 R11: ffffffffb71438a8 R12: ffff9941c2ac2428\n  R13: ffff9941c2ac2450 R14: ffff9941c2ac2450 R15: 000000000002c000\n  FS:  00007fcea2d07800(0000) GS:ffff9941fbc00000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007f00cc7c83a8 CR3: 000000010c686000 CR4: 0000000000350ef0\n  Call Trace:\n   <TASK>\n   close_ctree+0x426/0x48f\n   btrfs_mount_root.cold+0x7e/0xee\n   ? legacy_parse_param+0x2b/0x220\n   legacy_get_tree+0x2b/0x50\n   vfs_get_tree+0x29/0xc0\n   vfs_kern_mount.part.0+0x73/0xb0\n   btrfs_mount+0x11d/0x3d0\n   ? legacy_parse_param+0x2b/0x220\n   legacy_get_tree+0x2b/0x50\n   vfs_get_tree+0x29/0xc0\n   path_mount+0x438/0xa40\n   __x64_sys_mount+0xe9/0x130\n   do_syscall_64+0x3e/0x90\n   entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nThis is because the error injection did an EIO for the root inode lookup\nand we simply jumped to closing the ctree.  However because we didn't\nmark the file system as having an error we skipped all of the broken\ntransaction cleanup stuff, and thus triggered this ASSERT().  Fix this\nby calling btrfs_handle_fs_error() in this case so we have the error set\non the file system.\n\nReviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/super.c||fs/btrfs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/super.c||fs/btrfs/super.c": [
          "File: fs/btrfs/super.c -> fs/btrfs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1158:  inode = btrfs_iget(sb, BTRFS_FIRST_FREE_OBJECTID, fs_info->fs_root);",
          "1159:  if (IS_ERR(inode)) {",
          "1160:   err = PTR_ERR(inode);",
          "1161:   goto fail_close;",
          "1162:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:   btrfs_handle_fs_error(fs_info, err, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11b3b9f461c5c4f700f6c8da202fcc2fd6418e1f",
      "candidate_info": {
        "commit_hash": "11b3b9f461c5c4f700f6c8da202fcc2fd6418e1f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/11b3b9f461c5c4f700f6c8da202fcc2fd6418e1f",
        "files": [
          "drivers/gpu/drm/scheduler/sched_main.c"
        ],
        "message": "drm/sched: Check scheduler ready before calling timeout handling\n\nDuring an IGT GPU reset test we see the following oops,\n\n[  +0.000003] ------------[ cut here ]------------\n[  +0.000000] WARNING: CPU: 9 PID: 0 at kernel/workqueue.c:1656 __queue_delayed_work+0x6d/0xa0\n[  +0.000004] Modules linked in: iptable_filter bpfilter amdgpu(OE) nls_iso8859_1 snd_hda_codec_realtek snd_hda_codec_generic intel_rapl_msr ledtrig_audio snd_hda_codec_hdmi intel_rapl_common snd_hda_intel edac_mce_amd snd_intel_dspcfg snd_intel_sdw_acpi snd_hda_codec snd_hda_core iommu_v2 gpu_sched(OE) kvm_amd drm_buddy snd_hwdep kvm video drm_ttm_helper snd_pcm ttm snd_seq_midi drm_display_helper snd_seq_midi_event snd_rawmidi cec crct10dif_pclmul ghash_clmulni_intel sha512_ssse3 snd_seq aesni_intel rc_core crypto_simd cryptd binfmt_misc drm_kms_helper rapl snd_seq_device input_leds joydev snd_timer i2c_algo_bit syscopyarea snd ccp sysfillrect sysimgblt wmi_bmof k10temp soundcore mac_hid sch_fq_codel msr parport_pc ppdev drm lp parport ramoops reed_solomon pstore_blk pstore_zone efi_pstore ip_tables x_tables autofs4 hid_generic usbhid hid r8169 ahci xhci_pci gpio_amdpt realtek i2c_piix4 wmi crc32_pclmul xhci_pci_renesas libahci gpio_generic\n[  +0.000070] CPU: 9 PID: 0 Comm: swapper/9 Tainted: G        W OE      6.1.11+ #2\n[  +0.000003] Hardware name: Gigabyte Technology Co., Ltd. AB350-Gaming 3/AB350-Gaming 3-CF, BIOS F7 06/16/2017\n[  +0.000001] RIP: 0010:__queue_delayed_work+0x6d/0xa0\n[  +0.000003] Code: 7a 50 48 01 c1 48 89 4a 30 81 ff 00 20 00 00 75 38 4c 89 cf e8 64 3e 0a 00 5d e9 1e c5 11 01 e8 99 f7 ff ff 5d e9 13 c5 11 01 <0f> 0b eb c1 0f 0b 48 81 7a 38 70 5c 0e 81 74 9f 0f 0b 48 8b 42 28\n[  +0.000002] RSP: 0018:ffffc90000398d60 EFLAGS: 00010007\n[  +0.000002] RAX: ffff88810d589c60 RBX: 0000000000000000 RCX: 0000000000000000\n[  +0.000002] RDX: ffff88810d589c58 RSI: 0000000000000000 RDI: 0000000000002000\n[  +0.000001] RBP: ffffc90000398d60 R08: 0000000000000000 R09: ffff88810d589c78\n[  +0.000002] R10: 72705f305f39765f R11: 7866673a6d72645b R12: ffff88810d589c58\n[  +0.000001] R13: 0000000000002000 R14: 0000000000000000 R15: 0000000000000000\n[  +0.000002] FS:  0000000000000000(0000) GS:ffff8887fee40000(0000) knlGS:0000000000000000\n[  +0.000001] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  +0.000002] CR2: 00005562c4797fa0 CR3: 0000000110da0000 CR4: 00000000003506e0\n[  +0.000002] Call Trace:\n[  +0.000001]  <IRQ>\n[  +0.000001]  mod_delayed_work_on+0x5e/0xa0\n[  +0.000004]  drm_sched_fault+0x23/0x30 [gpu_sched]\n[  +0.000007]  gfx_v9_0_fault.isra.0+0xa6/0xd0 [amdgpu]\n[  +0.000258]  gfx_v9_0_priv_reg_irq+0x29/0x40 [amdgpu]\n[  +0.000254]  amdgpu_irq_dispatch+0x1ac/0x2b0 [amdgpu]\n[  +0.000243]  amdgpu_ih_process+0x89/0x130 [amdgpu]\n[  +0.000245]  amdgpu_irq_handler+0x24/0x60 [amdgpu]\n[  +0.000165]  __handle_irq_event_percpu+0x4f/0x1a0\n[  +0.000003]  handle_irq_event_percpu+0x15/0x50\n[  +0.000001]  handle_irq_event+0x39/0x60\n[  +0.000002]  handle_edge_irq+0xa8/0x250\n[  +0.000003]  __common_interrupt+0x7b/0x150\n[  +0.000002]  common_interrupt+0xc1/0xe0\n[  +0.000003]  </IRQ>\n[  +0.000000]  <TASK>\n[  +0.000001]  asm_common_interrupt+0x27/0x40\n[  +0.000002] RIP: 0010:native_safe_halt+0xb/0x10\n[  +0.000003] Code: 46 ff ff ff cc cc cc cc cc cc cc cc cc cc cc eb 07 0f 00 2d 69 f2 5e 00 f4 e9 f1 3b 3e 00 90 eb 07 0f 00 2d 59 f2 5e 00 fb f4 <e9> e0 3b 3e 00 0f 1f 44 00 00 55 48 89 e5 53 e8 b1 d4 fe ff 66 90\n[  +0.000002] RSP: 0018:ffffc9000018fdc8 EFLAGS: 00000246\n[  +0.000002] RAX: 0000000000004000 RBX: 000000000002e5a8 RCX: 000000000000001f\n[  +0.000001] RDX: 0000000000000001 RSI: ffff888101298800 RDI: ffff888101298864\n[  +0.000001] RBP: ffffc9000018fdd0 R08: 000000527f64bd8b R09: 000000000001dc90\n[  +0.000001] R10: 000000000001dc90 R11: 0000000000000003 R12: 0000000000000001\n[  +0.000001] R13: ffff888101298864 R14: ffffffff832d9e20 R15: ffff888193aa8c00\n[  +0.000003]  ? acpi_idle_do_entry+0x5e/0x70\n[  +0.000002]  acpi_idle_enter+0xd1/0x160\n[  +0.000003]  cpuidle_enter_state+0x9a/0x6e0\n[  +0.000003]  cpuidle_enter+0x2e/0x50\n[  +0.000003]  call_cpuidle+0x23/0x50\n[  +0.000002]  do_idle+0x1de/0x260\n[  +0.000002]  cpu_startup_entry+0x20/0x30\n[  +0.000002]  start_secondary+0x120/0x150\n[  +0.000003]  secondary_startup_64_no_verify+0xe5/0xeb\n[  +0.000004]  </TASK>\n[  +0.000000] ---[ end trace 0000000000000000 ]---\n[  +0.000003] BUG: kernel NULL pointer dereference, address: 0000000000000102\n[  +0.006233] [drm:amdgpu_job_timedout [amdgpu]] *ERROR* ring gfx_low timeout, signaled seq=3, emitted seq=4\n[  +0.000734] #PF: supervisor read access in kernel mode\n[  +0.009670] [drm:amdgpu_job_timedout [amdgpu]] *ERROR* Process information: process amd_deadlock pid 2002 thread amd_deadlock pid 2002\n[  +0.005135] #PF: error_code(0x0000) - not-present page\n[  +0.000002] PGD 0 P4D 0\n[  +0.000002] Oops: 0000 [#1] PREEMPT SMP NOPTI\n[  +0.000002] CPU: 9 PID: 0 Comm: swapper/9 Tainted: G        W OE      6.1.11+ #2\n[  +0.000002] Hardware name: Gigabyte Technology Co., Ltd. AB350-Gaming 3/AB350-Gaming 3-CF, BIOS F7 06/16/2017\n[  +0.012101] amdgpu 0000:0c:00.0: amdgpu: GPU reset begin!\n[  +0.005136] RIP: 0010:__queue_work+0x1f/0x4e0\n[  +0.000004] Code: 87 cd 11 01 0f 1f 80 00 00 00 00 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 41 55 49 89 d5 41 54 49 89 f4 53 48 83 ec 10 89 7d d4 <f6> 86 02 01 00 00 01 0f 85 6c 03 00 00 e8 7f 36 08 00 8b 45 d4 48\n\nFor gfx_rings the schedulers may not be initialized by\namdgpu_device_init_schedulers() due to ring->no_scheduler flag being set to\ntrue and thus the timeout_wq is NULL. As a result, since all ASICs call\ndrm_sched_fault() unconditionally even for schedulers which have not been\ninitialized, it is simpler to use the ready condition which indicates whether\nthe given scheduler worker thread runs and whether the timeout_wq of the reset\ndomain has been initialized.\n\nSigned-off-by: Vitaly Prosyak <vitaly.prosyak@amd.com>\nCc: Christian K\u00f6nig <christian.koenig@amd.com>\nReviewed-by: Luben Tuikov <luben.tuikov@amd.com>\nSigned-off-by: Luben Tuikov <luben.tuikov@amd.com>\nLink: https://lore.kernel.org/r/20230406200054.633379-1-luben.tuikov@amd.com",
        "before_after_code_files": [
          "drivers/gpu/drm/scheduler/sched_main.c||drivers/gpu/drm/scheduler/sched_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/scheduler/sched_main.c||drivers/gpu/drm/scheduler/sched_main.c": [
          "File: drivers/gpu/drm/scheduler/sched_main.c -> drivers/gpu/drm/scheduler/sched_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309: void drm_sched_fault(struct drm_gpu_scheduler *sched)",
          "310: {",
          "312: }",
          "313: EXPORT_SYMBOL(drm_sched_fault);",
          "",
          "[Removed Lines]",
          "311:  mod_delayed_work(sched->timeout_wq, &sched->work_tdr, 0);",
          "",
          "[Added Lines]",
          "311:  if (sched->ready)",
          "312:   mod_delayed_work(sched->timeout_wq, &sched->work_tdr, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}