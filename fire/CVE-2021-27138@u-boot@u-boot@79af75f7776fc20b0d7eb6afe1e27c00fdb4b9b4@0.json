{
  "cve_id": "CVE-2021-27138",
  "cve_desc": "The boot loader in Das U-Boot before 2021.04-rc2 mishandles use of unit addresses in a FIT.",
  "repo": "u-boot/u-boot",
  "patch_hash": "79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
  "patch_info": {
    "commit_hash": "79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
    "repo": "u-boot/u-boot",
    "commit_url": "https://github.com/u-boot/u-boot/commit/79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
    "files": [
      "common/image-fit-sig.c",
      "common/image-fit.c",
      "test/py/tests/test_fit.py",
      "test/py/tests/vboot_forge.py"
    ],
    "message": "fit: Don't allow verification of images with @ nodes\n\nWhen searching for a node called 'fred', any unit address appended to the\nname is ignored by libfdt, meaning that 'fred' can match 'fred@1'. This\nmeans that we cannot be sure that the node originally intended is the one\nthat is used.\n\nDisallow use of nodes with unit addresses.\n\nUpdate the forge test also, since it uses @ addresses.\n\nCVE-2021-27138\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReported-by: Bruce Monroe <bruce.monroe@intel.com>\nReported-by: Arie Haenel <arie.haenel@intel.com>\nReported-by: Julien Lenoir <julien.lenoir@intel.com>",
    "before_after_code_files": [
      "common/image-fit-sig.c||common/image-fit-sig.c",
      "common/image-fit.c||common/image-fit.c",
      "test/py/tests/test_fit.py||test/py/tests/test_fit.py",
      "test/py/tests/vboot_forge.py||test/py/tests/vboot_forge.py"
    ]
  },
  "patch_diff": {
    "common/image-fit-sig.c||common/image-fit-sig.c": [
      "File: common/image-fit-sig.c -> common/image-fit-sig.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:  fdt_for_each_subnode(noffset, fit, image_noffset) {",
      "150:   const char *name = fit_get_name(fit, noffset, NULL);",
      "152:   if (!strncmp(name, FIT_SIG_NODENAME,",
      "153:         strlen(FIT_SIG_NODENAME))) {",
      "154:    ret = fit_image_check_sig(fit, noffset, data,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:   if (strchr(name, '@')) {",
      "157:    err_msg = \"Node name contains @\";",
      "158:    goto error;",
      "159:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "398:  return -EPERM;",
      "399: }",
      "403: {",
      "404:  int noffset;",
      "405:  int sig_node;",
      "406:  int verified = 0;",
      "",
      "[Removed Lines]",
      "401: int fit_config_verify_required_sigs(const void *fit, int conf_noffset,",
      "402:         const void *sig_blob)",
      "",
      "[Added Lines]",
      "409: static int fit_config_verify_required_sigs(const void *fit, int conf_noffset,",
      "410:         const void *sig_blob)",
      "412:  const char *name = fit_get_name(fit, conf_noffset, NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "408:  bool reqd_policy_all = true;",
      "409:  const char *reqd_mode;",
      "412:  sig_node = fdt_subnode_offset(sig_blob, 0, FIT_SIG_NODENAME);",
      "413:  if (sig_node < 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "424:  if (strchr(name, '@')) {",
      "425:   printf(\"Configuration node '%s' contains '@'\\n\", name);",
      "426:   return -EPERM;",
      "427:  }",
      "",
      "---------------"
    ],
    "common/image-fit.c||common/image-fit.c": [
      "File: common/image-fit.c -> common/image-fit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1370: int fit_image_verify(const void *fit, int image_noffset)",
      "1371: {",
      "1372:  const void *data;",
      "1373:  size_t  size;",
      "1375:  char  *err_msg = \"\";",
      "1378:  if (fit_image_get_data_and_size(fit, image_noffset, &data, &size)) {",
      "1379:   err_msg = \"Can't get image data/size\";",
      "1384:  }",
      "1386:  return fit_image_verify_with_data(fit, image_noffset, data, size);",
      "1387: }",
      "",
      "[Removed Lines]",
      "1374:  int  noffset = 0;",
      "1380:   printf(\"error!\\n%s for '%s' hash node in '%s' image node\\n\",",
      "1381:          err_msg, fit_get_name(fit, noffset, NULL),",
      "1382:          fit_get_name(fit, image_noffset, NULL));",
      "1383:   return 0;",
      "",
      "[Added Lines]",
      "1372:  const char *name = fit_get_name(fit, image_noffset, NULL);",
      "1377:  if (strchr(name, '@')) {",
      "1382:   err_msg = \"Node name contains @\";",
      "1383:   goto err;",
      "1384:  }",
      "1388:   goto err;",
      "1393: err:",
      "1394:  printf(\"error!\\n%s in '%s' image node\\n\", err_msg,",
      "1395:         fit_get_name(fit, image_noffset, NULL));",
      "1396:  return 0;",
      "",
      "---------------"
    ],
    "test/py/tests/test_fit.py||test/py/tests/test_fit.py": [
      "File: test/py/tests/test_fit.py -> test/py/tests/test_fit.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17:         #address-cells = <1>;",
      "19:         images {",
      "21:                         data = /incbin/(\"%(kernel)s\");",
      "22:                         type = \"kernel\";",
      "23:                         arch = \"sandbox\";",
      "",
      "[Removed Lines]",
      "20:                 kernel@1 {",
      "",
      "[Added Lines]",
      "20:                 kernel-1 {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:                         load = <0x40000>;",
      "27:                         entry = <0x8>;",
      "28:                 };",
      "30:                         data = /incbin/(\"%(loadables1)s\");",
      "31:                         type = \"kernel\";",
      "32:                         arch = \"sandbox\";",
      "",
      "[Removed Lines]",
      "29:                 kernel@2 {",
      "",
      "[Added Lines]",
      "29:                 kernel-2 {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "35:                         %(loadables1_load)s",
      "36:                         entry = <0x0>;",
      "37:                 };",
      "39:                         description = \"snow\";",
      "40:                         data = /incbin/(\"%(fdt)s\");",
      "41:                         type = \"flat_dt\";",
      "42:                         arch = \"sandbox\";",
      "43:                         %(fdt_load)s",
      "44:                         compression = \"%(compression)s\";",
      "46:                                 algo = \"sha1,rsa2048\";",
      "47:                                 key-name-hint = \"dev\";",
      "48:                         };",
      "49:                 };",
      "51:                         description = \"snow\";",
      "52:                         data = /incbin/(\"%(ramdisk)s\");",
      "53:                         type = \"ramdisk\";",
      "",
      "[Removed Lines]",
      "38:                 fdt@1 {",
      "45:                         signature@1 {",
      "50:                 ramdisk@1 {",
      "",
      "[Added Lines]",
      "38:                 fdt-1 {",
      "45:                         signature-1 {",
      "50:                 ramdisk-1 {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "56:                         %(ramdisk_load)s",
      "57:                         compression = \"%(compression)s\";",
      "58:                 };",
      "60:                         description = \"snow\";",
      "61:                         data = /incbin/(\"%(loadables2)s\");",
      "62:                         type = \"ramdisk\";",
      "",
      "[Removed Lines]",
      "59:                 ramdisk@2 {",
      "",
      "[Added Lines]",
      "59:                 ramdisk-2 {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "67:                 };",
      "68:         };",
      "69:         configurations {",
      "74:                         %(ramdisk_config)s",
      "75:                         %(loadables_config)s",
      "76:                 };",
      "",
      "[Removed Lines]",
      "70:                 default = \"conf@1\";",
      "71:                 conf@1 {",
      "72:                         kernel = \"kernel@1\";",
      "73:                         fdt = \"fdt@1\";",
      "",
      "[Added Lines]",
      "70:                 default = \"conf-1\";",
      "71:                 conf-1 {",
      "72:                         kernel = \"kernel-1\";",
      "73:                         fdt = \"fdt-1\";",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "411:         # Try a ramdisk",
      "412:         with cons.log.section('Kernel + FDT + Ramdisk load'):",
      "414:             params['ramdisk_load'] = 'load = <%#x>;' % params['ramdisk_addr']",
      "415:             fit = make_fit(mkimage, params)",
      "416:             cons.restart_uboot()",
      "",
      "[Removed Lines]",
      "413:             params['ramdisk_config'] = 'ramdisk = \"ramdisk@1\";'",
      "",
      "[Added Lines]",
      "413:             params['ramdisk_config'] = 'ramdisk = \"ramdisk-1\";'",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "420:         # Configuration with some Loadables",
      "421:         with cons.log.section('Kernel + FDT + Ramdisk load + Loadables'):",
      "423:             params['loadables1_load'] = ('load = <%#x>;' %",
      "424:                                          params['loadables1_addr'])",
      "425:             params['loadables2_load'] = ('load = <%#x>;' %",
      "",
      "[Removed Lines]",
      "422:             params['loadables_config'] = 'loadables = \"kernel@2\", \"ramdisk@2\";'",
      "",
      "[Added Lines]",
      "422:             params['loadables_config'] = 'loadables = \"kernel-2\", \"ramdisk-2\";'",
      "",
      "---------------"
    ],
    "test/py/tests/vboot_forge.py||test/py/tests/vboot_forge.py": [
      "File: test/py/tests/vboot_forge.py -> test/py/tests/vboot_forge.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:     \"\"\"",
      "377:     Maliciously manipulates the structure to create a crafted FIT file",
      "378:     \"\"\"",
      "380:     kernel_node = root[0][0]",
      "381:     # clone it to save time filling all the properties",
      "382:     fake_kernel = kernel_node.clone()",
      "383:     # rename the node",
      "385:     # get rid of signatures/hashes",
      "386:     fake_kernel.children = []",
      "387:     # NOTE: this simply replaces the first prop... either description or data",
      "",
      "[Removed Lines]",
      "379:     # locate /images/kernel@1 (frankly, it just expects it to be the first one)",
      "384:     fake_kernel.name = b'kernel@2'",
      "",
      "[Added Lines]",
      "379:     # locate /images/kernel-1 (frankly, it just expects it to be the first one)",
      "384:     fake_kernel.name = b'kernel-2'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "391:     root[0].children.append(fake_kernel)",
      "393:     # modify the default configuration",
      "395:     # clone the first (only?) configuration",
      "396:     fake_conf = root[1][0].clone()",
      "397:     # rename and change kernel and fdt properties to select the crafted kernel",
      "401:     # insert the new configuration under /configurations",
      "402:     root[1].children.append(fake_conf)",
      "",
      "[Removed Lines]",
      "394:     root[1].props[0].value = b'conf@2\\x00'",
      "398:     fake_conf.name = b'conf@2'",
      "399:     fake_conf.props[0].value = b'kernel@2\\x00'",
      "400:     fake_conf.props[1].value = b'fdt@1\\x00'",
      "",
      "[Added Lines]",
      "394:     root[1].props[0].value = b'conf-2\\x00'",
      "398:     fake_conf.name = b'conf-2'",
      "399:     fake_conf.props[0].value = b'kernel-2\\x00'",
      "400:     fake_conf.props[1].value = b'fdt-1\\x00'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ac9c4cef521c5c5fd6591e83acf9728b167aaee",
      "candidate_info": {
        "commit_hash": "1ac9c4cef521c5c5fd6591e83acf9728b167aaee",
        "repo": "u-boot/u-boot",
        "commit_url": "https://github.com/u-boot/u-boot/commit/1ac9c4cef521c5c5fd6591e83acf9728b167aaee",
        "files": [
          "common/image-fit.c"
        ],
        "message": "image: Allow @ in node names when not using signatures\n\nIf signature verification is not in use we don't need to worry about\nthe risk of using @ in node names. Update fit_image_verify() to allow\nit if the function is not enabled.\n\nSigned-off-by: Simon Glass <sjg@chromium.org>",
        "before_after_code_files": [
          "common/image-fit.c||common/image-fit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/image-fit.c||common/image-fit.c"
          ],
          "candidate": [
            "common/image-fit.c||common/image-fit.c"
          ]
        }
      },
      "candidate_diff": {
        "common/image-fit.c||common/image-fit.c": [
          "File: common/image-fit.c -> common/image-fit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1377:  size_t  size;",
          "1378:  char  *err_msg = \"\";",
          "",
          "[Removed Lines]",
          "1380:  if (strchr(name, '@')) {",
          "",
          "[Added Lines]",
          "1380:  if (IS_ENABLED(CONFIG_FIT_SIGNATURE) && strchr(name, '@')) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}