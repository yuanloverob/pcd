{
  "cve_id": "CVE-2020-36429",
  "cve_desc": "Variant_encodeJson in open62541 1.x before 1.0.4 has an out-of-bounds write for a large recursion depth.",
  "repo": "open62541/open62541",
  "patch_hash": "c800e2987b10bb3af6ef644b515b5d6392f8861d",
  "patch_info": {
    "commit_hash": "c800e2987b10bb3af6ef644b515b5d6392f8861d",
    "repo": "open62541/open62541",
    "commit_url": "https://github.com/open62541/open62541/commit/c800e2987b10bb3af6ef644b515b5d6392f8861d",
    "files": [
      "src/ua_types_encoding_json.c"
    ],
    "message": "fix(json): Check max recursion depth in more places",
    "before_after_code_files": [
      "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
    ]
  },
  "patch_diff": {
    "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c": [
      "File: src/ua_types_encoding_json.c -> src/ua_types_encoding_json.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: WRITE_JSON_ELEMENT(ObjStart) {",
      "111:     ctx->depth++;",
      "112:     ctx->commaNeeded[ctx->depth] = false;",
      "113:     return writeChar(ctx, '{');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
      "112:         return UA_STATUSCODE_BADENCODINGERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122: WRITE_JSON_ELEMENT(ArrStart) {",
      "125:     return writeChar(ctx, '[');",
      "126: }",
      "",
      "[Removed Lines]",
      "124:     ctx->commaNeeded[++ctx->depth] = false;",
      "",
      "[Added Lines]",
      "126:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
      "127:         return UA_STATUSCODE_BADENCODINGERROR;",
      "128:     ctx->depth++;",
      "129:     ctx->commaNeeded[ctx->depth] = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1124:                          size_t *index, UA_UInt32 *arrayDimensions, size_t dimensionIndex,",
      "1125:                          size_t dimensionSize) {",
      "1128:         return UA_STATUSCODE_BADENCODINGERROR;",
      "",
      "[Removed Lines]",
      "1127:     if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "[Added Lines]",
      "1132:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1382: static status",
      "1383: encodeJsonStructure(const void *src, const UA_DataType *type, CtxJson *ctx) {",
      "1386:         return UA_STATUSCODE_BADENCODINGERROR;",
      "1387:     ctx->depth++;",
      "",
      "[Removed Lines]",
      "1385:     if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "[Added Lines]",
      "1390:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3153:                     ParseCtx *parseCtx, UA_Boolean moveToken) {",
      "3154:     (void) moveToken;",
      "3157:         return UA_STATUSCODE_BADENCODINGERROR;",
      "3158:     ctx->depth++;",
      "",
      "[Removed Lines]",
      "3156:     if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "[Added Lines]",
      "3161:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36c440147e0adbd1c7254d98851c8a856e77cbfe",
      "candidate_info": {
        "commit_hash": "36c440147e0adbd1c7254d98851c8a856e77cbfe",
        "repo": "open62541/open62541",
        "commit_url": "https://github.com/open62541/open62541/commit/36c440147e0adbd1c7254d98851c8a856e77cbfe",
        "files": [
          "src/ua_types_encoding_json.c"
        ],
        "message": "fix(json): Fix a double-free in the JSON encoding",
        "before_after_code_files": [
          "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open62541/open62541/pull/3615"
        ],
        "olp_code_files": {
          "patch": [
            "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
          ],
          "candidate": [
            "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c": [
          "File: src/ua_types_encoding_json.c -> src/ua_types_encoding_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2973:         ret = decodeFields(ctx, parseCtx, entries, encodingFound ? 3:2, typeOfBody);",
          "2974:         if(ret != UA_STATUSCODE_GOOD) {",
          "2975:             UA_free(dst->data);",
          "2976:         }",
          "2977:     } else if(encoding == 1 || encoding == 2 || typeOfBody == NULL) {",
          "2978:         UA_NodeId_deleteMembers(&typeId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2976:             dst->data = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2989:         ret = DECODE_DIRECT_JSON(dst->data, ExtensionObject);",
          "2991:             UA_free(dst->data);",
          "2992:     } else {",
          "2994:         return UA_STATUSCODE_BADDECODINGERROR;",
          "",
          "[Removed Lines]",
          "2990:         if(ret != UA_STATUSCODE_GOOD)",
          "",
          "[Added Lines]",
          "2991:         if(ret != UA_STATUSCODE_GOOD) {",
          "2993:             dst->data = NULL;",
          "2994:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a38852f9c7da025602aa81ff83f1ae2ef8e21e0",
      "candidate_info": {
        "commit_hash": "8a38852f9c7da025602aa81ff83f1ae2ef8e21e0",
        "repo": "open62541/open62541",
        "commit_url": "https://github.com/open62541/open62541/commit/8a38852f9c7da025602aa81ff83f1ae2ef8e21e0",
        "files": [
          "src/ua_types_encoding_json.c"
        ],
        "message": "fix(core): Fix fuzzing cases in JSON decoding",
        "before_after_code_files": [
          "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
          ],
          "candidate": [
            "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ua_types_encoding_json.c||src/ua_types_encoding_json.c": [
          "File: src/ua_types_encoding_json.c -> src/ua_types_encoding_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: WRITE_JSON_ELEMENT(ObjStart) {",
          "112:         return UA_STATUSCODE_BADENCODINGERROR;",
          "113:     ctx->depth++;",
          "114:     ctx->commaNeeded[ctx->depth] = false;",
          "",
          "[Removed Lines]",
          "111:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
          "",
          "[Added Lines]",
          "111:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION - 1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: }",
          "118: WRITE_JSON_ELEMENT(ObjEnd) {",
          "120:     ctx->commaNeeded[ctx->depth] = true;",
          "121:     return writeChar(ctx, '}');",
          "122: }",
          "124: WRITE_JSON_ELEMENT(ArrStart) {",
          "127:         return UA_STATUSCODE_BADENCODINGERROR;",
          "128:     ctx->depth++;",
          "129:     ctx->commaNeeded[ctx->depth] = false;",
          "",
          "[Removed Lines]",
          "119:     ctx->depth--; //decrease depth",
          "126:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
          "",
          "[Added Lines]",
          "119:     if(ctx->depth == 0)",
          "120:         return UA_STATUSCODE_BADENCODINGERROR;",
          "121:     ctx->depth--;",
          "128:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION - 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: }",
          "133: WRITE_JSON_ELEMENT(ArrEnd) {",
          "135:     ctx->commaNeeded[ctx->depth] = true;",
          "136:     return writeChar(ctx, ']');",
          "137: }",
          "",
          "[Removed Lines]",
          "134:     ctx->depth--; //decrease depth",
          "",
          "[Added Lines]",
          "136:     if(ctx->depth == 0)",
          "137:         return UA_STATUSCODE_BADENCODINGERROR;",
          "138:     ctx->depth--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:     status ret = writeJsonCommaIfNeeded(ctx);",
          "228:     ctx->commaNeeded[ctx->depth] = true;",
          "229:     if(ctx->calcOnly) {",
          "231:         ctx->pos += 3;",
          "232:         ctx->pos += size;",
          "233:         return ret;",
          "",
          "[Removed Lines]",
          "230:         ctx->commaNeeded[ctx->depth] = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "508:                 const UA_DataType *type) {",
          "509:     encodeJsonSignature encodeType = encodeJsonJumpTable[type->typeKind];",
          "510:     status ret = writeJsonArrStart(ctx);",
          "511:     uintptr_t uptr = (uintptr_t)ptr;",
          "512:     for(size_t i = 0; i < length && ret == UA_STATUSCODE_GOOD; ++i) {",
          "513:         ret |= writeJsonCommaIfNeeded(ctx);",
          "514:         ret |= encodeType((const void*)uptr, type, ctx);",
          "515:         ctx->commaNeeded[ctx->depth] = true;",
          "516:         uptr += type->memSize;",
          "517:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:     if(ret != UA_STATUSCODE_GOOD)",
          "515:         return ret;",
          "520:         if(ret != UA_STATUSCODE_GOOD)",
          "521:             return ret;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1106:     uintptr_t ptr = (uintptr_t) src->data;",
          "1108:     if(isArray) {",
          "1110:         ctx->commaNeeded[ctx->depth] = false;",
          "",
          "[Removed Lines]",
          "1109:         ret |= writeJsonArrStart(ctx);",
          "",
          "[Added Lines]",
          "1116:         ret = writeJsonArrStart(ctx);",
          "1117:         if(ret != UA_STATUSCODE_GOOD)",
          "1118:             return ret;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1128: addMultiArrayContentJSON(CtxJson *ctx, void* array, const UA_DataType *type,",
          "1129:                          size_t *index, UA_UInt32 *arrayDimensions, size_t dimensionIndex,",
          "1130:                          size_t dimensionSize) {",
          "1136:     status ret;",
          "1137:     if(dimensionIndex == (dimensionSize - 1)) {",
          "",
          "[Removed Lines]",
          "1132:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
          "1133:         return UA_STATUSCODE_BADENCODINGERROR;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1145:     ret = writeJsonArrStart(ctx);",
          "1146:     for(size_t i = 0; i < arrayDimensions[dimensionIndex]; i++) {",
          "1147:         ret |= writeJsonCommaIfNeeded(ctx);",
          "1148:         ret |= addMultiArrayContentJSON(ctx, array, type, index, arrayDimensions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1151:     if(ret != UA_STATUSCODE_GOOD)",
          "1152:         return ret;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1387: static status",
          "1388: encodeJsonStructure(const void *src, const UA_DataType *type, CtxJson *ctx) {",
          "1394:     status ret = writeJsonObjStart(ctx);",
          "1396:     uintptr_t ptr = (uintptr_t) src;",
          "1397:     u8 membersSize = type->membersSize;",
          "",
          "[Removed Lines]",
          "1390:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
          "1391:         return UA_STATUSCODE_BADENCODINGERROR;",
          "1392:     ctx->depth++;",
          "",
          "[Added Lines]",
          "1397:     if(ret != UA_STATUSCODE_GOOD)",
          "1398:         return ret;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1418:     }",
          "1420:     ret |= writeJsonObjEnd(ctx);",
          "1423:     return ret;",
          "1424: }",
          "",
          "[Removed Lines]",
          "1422:     ctx->depth--;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3158:                     ParseCtx *parseCtx, UA_Boolean moveToken) {",
          "3159:     (void) moveToken;",
          "3162:         return UA_STATUSCODE_BADENCODINGERROR;",
          "3163:     ctx->depth++;",
          "",
          "[Removed Lines]",
          "3161:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)",
          "",
          "[Added Lines]",
          "3163:     if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION - 1)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3195:     ret = decodeFields(ctx, parseCtx, entries, membersSize, type);",
          "3197:     ctx->depth--;",
          "3198:     return ret;",
          "3199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3199:     if(ctx->depth == 0)",
          "3200:         return UA_STATUSCODE_BADENCODINGERROR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}