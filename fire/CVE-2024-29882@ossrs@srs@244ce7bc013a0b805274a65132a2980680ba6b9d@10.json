{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d220bf280e3e5356e07c4100a3ad3ad9c8b38b2e",
      "candidate_info": {
        "commit_hash": "d220bf280e3e5356e07c4100a3ad3ad9c8b38b2e",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/d220bf280e3e5356e07c4100a3ad3ad9c8b38b2e",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "DASH: Fix time unit error for disposing. v6.0.138 (#4111)\n\n## Cause\ndash auto dispose is configured by seconds, but the code compare by\nusecond, 1 second = 1,000,000 useconds.\n\nreleated to #4097\nBug introduced after #4097 supported Dash auto dispose after a timeout\nwithout media data.\n\n## How to reproduce\n\n1. `./objs/srs -c conf/dash.conf`\n2. publish a rtmp stream.\n3. play dash stream. -> no dash stream, always 404 error.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6871: {",
          "6872:     SRS_OVERWRITE_BY_ENV_SECONDS(\"srs.vhost.dash.dash_dispose\"); // SRS_VHOST_DASH_DASH_DISPOSE",
          "6876:     SrsConfDirective* conf = get_dash(vhost);",
          "6877:     if (!conf) {",
          "",
          "[Removed Lines]",
          "6874:     static srs_utime_t DEFAULT = 120;",
          "",
          "[Added Lines]",
          "6874:     static srs_utime_t DEFAULT = 120 * SRS_UTIME_SECONDS;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    137",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    138",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93cba246bc60e88a449ca62fa9652622e67c279a",
      "candidate_info": {
        "commit_hash": "93cba246bc60e88a449ca62fa9652622e67c279a",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/93cba246bc60e88a449ca62fa9652622e67c279a",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "fix typo about heartbeat. v5.0.220 v6.0.161 v7.0.23 (#4253)\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>\nCo-authored-by: john <hondaxiao@tencent.com>\nCo-authored-by: winlin <winlinvip@gmail.com>\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2405:         }",
          "2406:     }",
          "2407:     if (true) {",
          "2409:         for (int i = 0; conf && i < (int)conf->directives.size(); i++) {",
          "2410:             string n = conf->at(i)->name;",
          "2411:             if (n != \"enabled\" && n != \"interval\" && n != \"url\"",
          "",
          "[Removed Lines]",
          "2408:         SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "2408:         SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8708:     return conf->arg0();",
          "8709: }",
          "8712: {",
          "8713:     return root->get(\"heartbeat\");",
          "8714: }",
          "",
          "[Removed Lines]",
          "8711: SrsConfDirective* SrsConfig::get_heartbeart()",
          "",
          "[Added Lines]",
          "8711: SrsConfDirective* SrsConfig::get_heartbeat()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8720:     static bool DEFAULT = false;",
          "8723:     if (!conf) {",
          "8724:         return DEFAULT;",
          "8725:     }",
          "",
          "[Removed Lines]",
          "8722:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8722:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8739:     static srs_utime_t DEFAULT = (srs_utime_t)(10 * SRS_UTIME_SECONDS);",
          "8742:     if (!conf) {",
          "8743:         return DEFAULT;",
          "8744:     }",
          "",
          "[Removed Lines]",
          "8741:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8741:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8758:     static string DEFAULT = \"http://\" SRS_CONSTS_LOCALHOST \":8085/api/v1/servers\";",
          "8761:     if (!conf) {",
          "8762:         return DEFAULT;",
          "8763:     }",
          "",
          "[Removed Lines]",
          "8760:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8760:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8777:     static string DEFAULT = \"\";",
          "8780:     if (!conf) {",
          "8781:         return DEFAULT;",
          "8782:     }",
          "",
          "[Removed Lines]",
          "8779:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8779:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8796:     static bool DEFAULT = false;",
          "8799:     if (!conf) {",
          "8800:         return DEFAULT;",
          "8801:     }",
          "",
          "[Removed Lines]",
          "8798:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8798:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8815:     static bool DEFAULT = false;",
          "8818:     if (!conf) {",
          "8819:         return DEFAULT;",
          "8820:     }",
          "",
          "[Removed Lines]",
          "8817:     SrsConfDirective* conf = get_heartbeart();",
          "",
          "[Added Lines]",
          "8817:     SrsConfDirective* conf = get_heartbeat();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106:     virtual std::string get_vhost_http_remux_mount(std::string vhost);",
          "1108: private:",
          "1111: public:",
          "1113:     virtual bool get_heartbeat_enabled();",
          "",
          "[Removed Lines]",
          "1110:     virtual SrsConfDirective* get_heartbeart();",
          "",
          "[Added Lines]",
          "1110:     virtual SrsConfDirective* get_heartbeat();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    219",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    220",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    160",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    161",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    22",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    23",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f76be5fe9b0b0d5a32080abb2e9363cd90acd30a",
      "candidate_info": {
        "commit_hash": "f76be5fe9b0b0d5a32080abb2e9363cd90acd30a",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/f76be5fe9b0b0d5a32080abb2e9363cd90acd30a",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_static.cpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_http.cpp"
        ],
        "message": "HLS: Add missing newline to end of session manifest. v6.0.143 (#4115)\n\nThe session HLS manifest file lacks a terminating newline in the final\nline.\nThis may cause strict players to reject it.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_static.cpp||trunk/src/app/srs_app_http_static.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_http.cpp||trunk/src/utest/srs_utest_http.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_static.cpp||trunk/src/app/srs_app_http_static.cpp": [
          "File: trunk/src/app/srs_app_http_static.cpp -> trunk/src/app/srs_app_http_static.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     if (!hr->query().empty() && hr->query_get(SRS_CONTEXT_IN_HLS).empty()) {",
          "186:         ss << \"&\" << hr->query();",
          "187:     }",
          "189:     std::string res = ss.str();",
          "190:     int length = res.length();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     ss << SRS_CONSTS_LF;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    142",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    143",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_http.cpp||trunk/src/utest/srs_utest_http.cpp": [
          "File: trunk/src/utest/srs_utest_http.cpp -> trunk/src/utest/srs_utest_http.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1541:         HELPER_ASSERT_SUCCESS(r.set_url(\"/index.m3u8?hls_ctx=123456\", false));",
          "1543:         HELPER_ASSERT_SUCCESS(h.serve_http(&w, &r));",
          "1546:         MockResponseWriter w2;",
          "1547:         HELPER_ASSERT_SUCCESS(h.serve_http(&w2, &r));",
          "",
          "[Removed Lines]",
          "1544:         __MOCK_HTTP_EXPECT_STREQ4(200, \"/index.m3u8?hls_ctx=123456\", w);",
          "",
          "[Added Lines]",
          "1544:         __MOCK_HTTP_EXPECT_STREQ4(200, \"/index.m3u8?hls_ctx=123456\\n\", w);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:         HELPER_ASSERT_SUCCESS(r.set_url(\"/index.m3u8?hls_ctx=123456\", false));",
          "1565:         HELPER_ASSERT_SUCCESS(h.serve_http(&w, &r));",
          "1568:         MockResponseWriter w2;",
          "1569:         HELPER_ASSERT_SUCCESS(h.serve_http(&w2, &r));",
          "",
          "[Removed Lines]",
          "1566:         __MOCK_HTTP_EXPECT_STREQ4(200, \"/index.m3u8?hls_ctx=123456\", w);",
          "",
          "[Added Lines]",
          "1566:         __MOCK_HTTP_EXPECT_STREQ4(200, \"/index.m3u8?hls_ctx=123456\\n\", w);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d27e530f84317a75bf7da25100975d6786e1d1f3",
      "candidate_info": {
        "commit_hash": "d27e530f84317a75bf7da25100975d6786e1d1f3",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/d27e530f84317a75bf7da25100975d6786e1d1f3",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "HTTP-FLV: Notify connection to expire when unpublishing. v6.0.152 (#4164)\n\nWhen stopping the stream, it will wait for the HTTP Streaming to exit.\nIf the HTTP Streaming goroutine hangs, it will not exit automatically.\n\n```cpp\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r)\n{\n    SrsUniquePtr<SrsLiveStream> stream(entry->stream);\n    if (stream->entry) stream->entry->enabled = false;\n    srs_usleep(...); // Wait for about 120s.\n    mux.unhandle(entry->mount, stream.get()); // Free stream.\n}\n\nsrs_error_t SrsLiveStream::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)\n{\n    err = do_serve_http(w, r); // If stuck in here for 120s+\n    alive_viewers_--; // Crash at here, because stream has been deleted.\n```\n\nWe should notify http stream connection to interrupt(expire):\n\n```cpp\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r)\n{\n    SrsUniquePtr<SrsLiveStream> stream(entry->stream);\n    if (stream->entry) stream->entry->enabled = false;\n    stream->expire(); // Notify http stream to interrupt.\n```\n\nNote that we should notify all viewers pulling stream from this http\nstream.\n\nNote that we have tried to fix this issue, but only try to wait for all\nviewers to quit, without interrupting the viewers, see\nhttps://github.com/ossrs/srs/pull/4144\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp",
          "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1207: srs_error_t SrsGoApiSignal::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "1208: {",
          "1211:     std::string signal = r->query_get(\"signo\");",
          "1212:     srs_trace(\"query signo=%s\", signal.c_str());",
          "",
          "[Removed Lines]",
          "1209:     srs_error_t err = srs_success;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.cpp||trunk/src/app/srs_app_http_stream.cpp": [
          "File: trunk/src/app/srs_app_http_stream.cpp -> trunk/src/app/srs_app_http_stream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:     cache = c;",
          "584:     req = r->copy()->as_http();",
          "585:     security_ = new SrsSecurity();",
          "587: }",
          "589: SrsLiveStream::~SrsLiveStream()",
          "590: {",
          "591:     srs_freep(req);",
          "592:     srs_freep(security_);",
          "593: }",
          "595: srs_error_t SrsLiveStream::update_auth(SrsRequest* r)",
          "",
          "[Removed Lines]",
          "586:     alive_viewers_ = 0;",
          "",
          "[Added Lines]",
          "594:     srs_assert(viewers_.empty());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:         return srs_error_wrap(err, \"http hook\");",
          "635:     }",
          "638:     err = do_serve_http(w, r);",
          "641:     http_hooks_on_stop(r);",
          "643:     return err;",
          "",
          "[Removed Lines]",
          "637:     alive_viewers_++;",
          "639:     alive_viewers_--;",
          "",
          "[Added Lines]",
          "640:     viewers_.push_back(hc);",
          "646:     vector<ISrsExpire*>::iterator it = std::find(viewers_.begin(), viewers_.end(), hc);",
          "647:     srs_assert (it != viewers_.end());",
          "648:     viewers_.erase(it);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646: bool SrsLiveStream::alive()",
          "647: {",
          "649: }",
          "651: srs_error_t SrsLiveStream::do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "",
          "[Removed Lines]",
          "648:     return alive_viewers_ > 0;",
          "",
          "[Added Lines]",
          "658:     return !viewers_.empty();",
          "659: }",
          "661: void SrsLiveStream::expire()",
          "662: {",
          "663:     vector<ISrsExpire*>::iterator it;",
          "664:     for (it = viewers_.begin(); it != viewers_.end(); ++it) {",
          "665:         ISrsExpire* conn = *it;",
          "666:         conn->expire();",
          "667:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1077:     if (stream->entry) stream->entry->enabled = false;",
          "1078:     cache->stop();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097:     stream->expire();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_stream.hpp||trunk/src/app/srs_app_http_stream.hpp": [
          "File: trunk/src/app/srs_app_http_stream.hpp -> trunk/src/app/srs_app_http_stream.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <srs_app_security.hpp>",
          "12: #include <srs_app_http_conn.hpp>",
          "14: class SrsAacTransmuxer;",
          "15: class SrsMp3Transmuxer;",
          "16: class SrsFlvTransmuxer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <vector>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180: {",
          "181: private:",
          "182:     SrsRequest* req;",
          "",
          "[Removed Lines]",
          "179: class SrsLiveStream : public ISrsHttpHandler",
          "",
          "[Added Lines]",
          "181: class SrsLiveStream : public ISrsHttpHandler, public ISrsExpire",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189: public:",
          "190:     SrsLiveStream(SrsRequest* r, SrsBufferCache* c);",
          "191:     virtual ~SrsLiveStream();",
          "",
          "[Removed Lines]",
          "188:     int alive_viewers_;",
          "",
          "[Added Lines]",
          "190:     std::vector<ISrsExpire*> viewers_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193: public:",
          "194:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "195:     virtual bool alive();",
          "196: private:",
          "197:     virtual srs_error_t do_serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "198:     virtual srs_error_t http_hooks_on_play(ISrsHttpMessage* r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: public:",
          "200:     virtual void expire();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    151",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    152",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "331ef9ffaedf4926abd556ea8b69ce24b6fff5ca",
      "candidate_info": {
        "commit_hash": "331ef9ffaedf4926abd556ea8b69ce24b6fff5ca",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/331ef9ffaedf4926abd556ea8b69ce24b6fff5ca",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_ffmpeg.cpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Transcode: Support video codec such as h264_qsv and libx265. v6.0.145 (#4127)\n\nCurrently only libx264 ffmpeg encoder is supported. This pull request\nadd also h264_qsv. But maybe a more generic solution with oder encoders\nwould be useful to.\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_ffmpeg.cpp||trunk/src/app/srs_app_ffmpeg.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_ffmpeg.cpp||trunk/src/app/srs_app_ffmpeg.cpp": [
          "File: trunk/src/app/srs_app_ffmpeg.cpp -> trunk/src/app/srs_app_ffmpeg.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define SRS_RTMP_ENCODER_COPY \"copy\"",
          "34: #define SRS_RTMP_ENCODER_NO_VIDEO \"vn\"",
          "35: #define SRS_RTMP_ENCODER_NO_AUDIO \"an\"",
          "37: #define SRS_RTMP_ENCODER_VCODEC_LIBX264 \"libx264\"",
          "38: #define SRS_RTMP_ENCODER_VCODEC_PNG \"png\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #define SRS_RTMP_ENCODER_VCODEC_LIBX265 \"libx265\"",
          "39: #define SRS_RTMP_ENCODER_VCODEC_H264QSV \"h264_qsv\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     achannels = _srs_config->get_engine_achannels(engine);",
          "114:     aparams = _srs_config->get_engine_aparams(engine);",
          "115:     oformat = _srs_config->get_engine_oformat(engine);",
          "118:     vwidth -= vwidth % 2;",
          "119:     vheight -= vheight % 2;",
          "121:     if (vcodec == SRS_RTMP_ENCODER_NO_VIDEO && acodec == SRS_RTMP_ENCODER_NO_AUDIO) {",
          "122:         return srs_error_new(ERROR_ENCODER_VCODEC, \"video and audio disabled\");",
          "123:     }",
          "125:     if (vcodec != SRS_RTMP_ENCODER_COPY && vcodec != SRS_RTMP_ENCODER_NO_VIDEO && vcodec != SRS_RTMP_ENCODER_VCODEC_PNG) {",
          "128:         }",
          "129:         if (vbitrate < 0) {",
          "130:             return srs_error_new(ERROR_ENCODER_VBITRATE, \"invalid vbitrate: %d\", vbitrate);",
          "",
          "[Removed Lines]",
          "126:         if (vcodec != SRS_RTMP_ENCODER_VCODEC_LIBX264) {",
          "127:             return srs_error_new(ERROR_ENCODER_VCODEC, \"invalid vcodec, must be %s, actual %s\", SRS_RTMP_ENCODER_VCODEC_LIBX264, vcodec.c_str());",
          "",
          "[Added Lines]",
          "128:         if (vcodec != SRS_RTMP_ENCODER_VCODEC_LIBX264 && vcodec != SRS_RTMP_ENCODER_VCODEC_LIBX265 && vcodec != SRS_RTMP_ENCODER_VCODEC_H264QSV) {",
          "129:             return srs_error_new(",
          "130:                 ERROR_ENCODER_VCODEC, \"invalid vcodec, must be %s, %s or %s, actual %s\",",
          "131:                 SRS_RTMP_ENCODER_VCODEC_LIBX264, SRS_RTMP_ENCODER_VCODEC_LIBX265, SRS_RTMP_ENCODER_VCODEC_H264QSV, vcodec.c_str());",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    144",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    145",
          "",
          "---------------"
        ]
      }
    }
  ]
}