{
  "cve_id": "CVE-2023-28101",
  "cve_desc": "Flatpak is a system for building, distributing, and running sandboxed desktop applications on Linux. In versions prior to 1.10.8, 1.12.8, 1.14.4, and 1.15.4, if an attacker publishes a Flatpak app with elevated permissions, they can hide those permissions from users of the `flatpak(1)` command-line interface by setting other permissions to crafted values that contain non-printable control characters such as `ESC`. A fix is available in versions 1.10.8, 1.12.8, 1.14.4, and 1.15.4. As a workaround, use a GUI like GNOME Software rather than the command-line interface, or only install apps whose maintainers you trust.",
  "repo": "flatpak/flatpak",
  "patch_hash": "6cac99dafe6003c8a4bd5666341c217876536869",
  "patch_info": {
    "commit_hash": "6cac99dafe6003c8a4bd5666341c217876536869",
    "repo": "flatpak/flatpak",
    "commit_url": "https://github.com/flatpak/flatpak/commit/6cac99dafe6003c8a4bd5666341c217876536869",
    "files": [
      "app/flatpak-builtins-info.c",
      "app/flatpak-builtins-remote-info.c",
      "app/flatpak-cli-transaction.c",
      "common/flatpak-utils-private.h",
      "common/flatpak-utils.c",
      "tests/make-test-app.sh",
      "tests/test-info.sh",
      "tests/testcommon.c"
    ],
    "message": "Ensure special characters in permissions and metadata are escaped\n\nThis prevents someone from placing special characters in order to\nmanipulate the appearance of the permissions list.\n\nCVE-2023-28101, GHSA-h43h-fwqx-mpp8\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>",
    "before_after_code_files": [
      "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
      "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
      "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
      "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
      "common/flatpak-utils.c||common/flatpak-utils.c",
      "tests/make-test-app.sh||tests/make-test-app.sh",
      "tests/test-info.sh||tests/test-info.sh",
      "tests/testcommon.c||tests/testcommon.c"
    ]
  },
  "patch_diff": {
    "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c": [
      "File: app/flatpak-builtins-info.c -> app/flatpak-builtins-info.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:           if (!g_file_load_contents (file, cancellable, &data, &data_size, NULL, error))",
      "401:             return FALSE;",
      "404:         }",
      "406:       if (opt_show_permissions || opt_file_access)",
      "",
      "[Removed Lines]",
      "403:           g_print (\"%s\", data);",
      "",
      "[Added Lines]",
      "403:           flatpak_print_escaped_string (data,",
      "404:                                         FLATPAK_ESCAPE_ALLOW_NEWLINES",
      "405:                                         | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:               if (contents == NULL)",
      "422:                 return FALSE;",
      "425:             }",
      "427:           if (opt_file_access)",
      "",
      "[Removed Lines]",
      "424:               g_print (\"%s\", contents);",
      "",
      "[Added Lines]",
      "426:               flatpak_print_escaped_string (contents,",
      "427:                                             FLATPAK_ESCAPE_ALLOW_NEWLINES",
      "428:                                             | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
      "",
      "---------------"
    ],
    "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c": [
      "File: app/flatpak-builtins-remote-info.c -> app/flatpak-builtins-remote-info.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "432:           if (opt_show_metadata)",
      "433:             {",
      "435:               if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))",
      "436:                 g_print (\"\\n\");",
      "437:             }",
      "",
      "[Removed Lines]",
      "434:               g_print (\"%s\", xa_metadata ? xa_metadata : \"\");",
      "",
      "[Added Lines]",
      "434:               if (xa_metadata != NULL)",
      "435:                 flatpak_print_escaped_string (xa_metadata,",
      "436:                                               FLATPAK_ESCAPE_ALLOW_NEWLINES",
      "437:                                               | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
      "",
      "---------------"
    ],
    "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c": [
      "File: app/flatpak-cli-transaction.c -> app/flatpak-cli-transaction.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1121:                  int        cols)",
      "1122: {",
      "1123:   g_autoptr(GString) res = g_string_new (NULL);",
      "1124:   int i;",
      "1128:   for (i = 1; i < items->len; i++)",
      "1129:     {",
      "1130:       char *p;",
      "1131:       int len;",
      "",
      "[Removed Lines]",
      "1126:   g_string_append_printf (res, \"    [%d] %s\", idx, (char *) items->pdata[0]);",
      "",
      "[Added Lines]",
      "1124:   g_autofree char *escaped_first_perm = NULL;",
      "1127:   escaped_first_perm = flatpak_escape_string (items->pdata[0], FLATPAK_ESCAPE_DEFAULT);",
      "1128:   g_string_append_printf (res, \"    [%d] %s\", idx, escaped_first_perm);",
      "1132:       g_autofree char *escaped = flatpak_escape_string (items->pdata[i],",
      "1133:                                                         FLATPAK_ESCAPE_DEFAULT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1135:         p = res->str;",
      "1137:       len = (res->str + strlen (res->str)) - p;",
      "1140:       else",
      "1142:     }",
      "1144:   g_print (\"%s\\n\", res->str);",
      "",
      "[Removed Lines]",
      "1138:       if (len + strlen ((char *) items->pdata[i]) + 2 >= cols)",
      "1139:         g_string_append_printf (res, \",\\n        %s\", (char *) items->pdata[i]);",
      "1141:         g_string_append_printf (res, \", %s\", (char *) items->pdata[i]);",
      "",
      "[Added Lines]",
      "1142:       if (len + strlen (escaped) + 2 >= cols)",
      "1143:         g_string_append_printf (res, \",\\n        %s\", escaped);",
      "1145:         g_string_append_printf (res, \", %s\", escaped);",
      "",
      "---------------"
    ],
    "common/flatpak-utils-private.h||common/flatpak-utils-private.h": [
      "File: common/flatpak-utils-private.h -> common/flatpak-utils-private.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "926: gboolean flatpak_uri_equal (const char *uri1,",
      "927:                             const char *uri2);",
      "929: gboolean running_under_sudo (void);",
      "931: #define FLATPAK_MESSAGE_ID \"c7b39b1e006b464599465e105b361485\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "929: typedef enum {",
      "930:   FLATPAK_ESCAPE_DEFAULT        = 0,",
      "931:   FLATPAK_ESCAPE_ALLOW_NEWLINES = 1 << 0,",
      "932:   FLATPAK_ESCAPE_DO_NOT_QUOTE   = 1 << 1,",
      "933: } FlatpakEscapeFlags;",
      "935: char * flatpak_escape_string (const char        *s,",
      "936:                               FlatpakEscapeFlags flags);",
      "937: void   flatpak_print_escaped_string (const char        *s,",
      "938:                                      FlatpakEscapeFlags flags);",
      "",
      "---------------"
    ],
    "common/flatpak-utils.c||common/flatpak-utils.c": [
      "File: common/flatpak-utils.c -> common/flatpak-utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9222:   return g_strcmp0 (uri1_norm, uri2_norm) == 0;",
      "9223: }",
      "9225: gboolean",
      "9226: running_under_sudo (void)",
      "9227: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9225: static gboolean",
      "9226: is_char_safe (gunichar c)",
      "9227: {",
      "9228:   return g_unichar_isgraph (c) || c == ' ';",
      "9229: }",
      "9231: static gboolean",
      "9232: should_hex_escape (gunichar           c,",
      "9233:                    FlatpakEscapeFlags flags)",
      "9234: {",
      "9235:   if ((flags & FLATPAK_ESCAPE_ALLOW_NEWLINES) && c == '\\n')",
      "9236:     return FALSE;",
      "9238:   return !is_char_safe (c);",
      "9239: }",
      "9241: static void",
      "9242: append_hex_escaped_character (GString *result,",
      "9243:                               gunichar c)",
      "9244: {",
      "9245:   if (c <= 0xFF)",
      "9246:     g_string_append_printf (result, \"\\\\x%02X\", c);",
      "9247:   else if (c <= 0xFFFF)",
      "9248:     g_string_append_printf (result, \"\\\\u%04X\", c);",
      "9249:   else",
      "9250:     g_string_append_printf (result, \"\\\\U%08X\", c);",
      "9251: }",
      "9253: char *",
      "9254: flatpak_escape_string (const char        *s,",
      "9255:                        FlatpakEscapeFlags flags)",
      "9256: {",
      "9257:   g_autoptr(GString) res = g_string_new (\"\");",
      "9258:   gboolean did_escape = FALSE;",
      "9260:   while (*s)",
      "9261:     {",
      "9262:       gunichar c = g_utf8_get_char_validated (s, -1);",
      "9263:       if (c == (gunichar)-2 || c == (gunichar)-1)",
      "9264:         {",
      "9267:           append_hex_escaped_character (res, (unsigned char)*s++);",
      "9268:           did_escape = TRUE;",
      "9269:           continue;",
      "9270:         }",
      "9271:       else if (should_hex_escape (c, flags))",
      "9272:         {",
      "9273:           append_hex_escaped_character (res, c);",
      "9274:           did_escape = TRUE;",
      "9275:         }",
      "9276:       else if (c == '\\\\' || (!(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE) && c == '\\''))",
      "9277:         {",
      "9278:           g_string_append_printf (res, \"\\\\%c\", (char) c);",
      "9279:           did_escape = TRUE;",
      "9280:         }",
      "9281:       else",
      "9282:         g_string_append_unichar (res, c);",
      "9284:       s = g_utf8_find_next_char (s, NULL);",
      "9285:     }",
      "9287:   if (did_escape && !(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE))",
      "9288:     {",
      "9289:       g_string_prepend_c (res, '\\'');",
      "9290:       g_string_append_c (res, '\\'');",
      "9291:     }",
      "9293:   return g_string_free (g_steal_pointer (&res), FALSE);",
      "9294: }",
      "9296: void",
      "9297: flatpak_print_escaped_string (const char        *s,",
      "9298:                               FlatpakEscapeFlags flags)",
      "9299: {",
      "9300:   g_autofree char *escaped = flatpak_escape_string (s, flags);",
      "9301:   g_print (\"%s\", escaped);",
      "9302: }",
      "",
      "---------------"
    ],
    "tests/make-test-app.sh||tests/make-test-app.sh": [
      "File: tests/make-test-app.sh -> tests/make-test-app.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: EOF",
      "41: fi",
      "43: cat >> ${DIR}/metadata <<EOF",
      "44: [Extension $APP_ID.Locale]",
      "45: directory=share/runtime/locale",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: if [ x${INCLUDE_SPECIAL_CHARACTER-} != x ]; then",
      "44: TAB=$'\\t'",
      "45: cat >> ${DIR}/metadata <<EOF",
      "46: [Environment]",
      "47: A=x${TAB}y",
      "48: EOF",
      "49: fi",
      "",
      "---------------"
    ],
    "tests/test-info.sh||tests/test-info.sh": [
      "File: tests/test-info.sh -> tests/test-info.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: skip_revokefs_without_fuse",
      "12: install_repo",
      "14: COMMIT=`${FLATPAK} ${U} info --show-commit org.test.Hello`",
      "",
      "[Removed Lines]",
      "9: echo \"1..7\"",
      "11: setup_repo",
      "",
      "[Added Lines]",
      "9: echo \"1..8\"",
      "11: INCLUDE_SPECIAL_CHARACTER=1 setup_repo",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20: ok \"info -rcos\"",
      "22: ${FLATPAK} info --show-permissions  org.test.Hello > info",
      "26: ok \"info --show-permissions\"",
      "",
      "[Removed Lines]",
      "24: assert_file_empty info",
      "",
      "[Added Lines]",
      "22: ${FLATPAK} info --show-metadata  org.test.Hello > info",
      "24: # CVE-2023-28101",
      "25: assert_file_has_content info \"name=org\\.test\\.Hello\"",
      "26: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
      "28: ok \"info --show-metadata\"",
      "32: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
      "",
      "---------------"
    ],
    "tests/testcommon.c||tests/testcommon.c": [
      "File: tests/testcommon.c -> tests/testcommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1837:     }",
      "1838: }",
      "1840: int",
      "1841: main (int argc, char *argv[])",
      "1842: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1840: typedef struct {",
      "1841:   const char        *in;",
      "1842:   FlatpakEscapeFlags flags;",
      "1843:   const char        *out;",
      "1844: } EscapeData;",
      "1846: static EscapeData escapes[] = {",
      "1847:   {\"abc def\", FLATPAK_ESCAPE_DEFAULT, \"abc def\"},",
      "1848:   {\"\u3084\u3042\", FLATPAK_ESCAPE_DEFAULT, \"\u3084\u3042\"},",
      "1849:   {\"\\033[;1m\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x1B[;1m'\"},",
      "1851:   {\"\\u061C\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\u061C'\"},",
      "1853:   {\"\\xF0\\x93\\x90\\xBF\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\U0001343F'\"},",
      "1855:   {\"\\xD8\\1\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\xD8\\\\x01'\"},",
      "1856:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x08 \\\\x0A abc \\\\' \\\\\\\\'\"},",
      "1857:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DO_NOT_QUOTE, \"\\\\x08 \\\\x0A abc ' \\\\\\\\\"},",
      "1858:   {\"abc\\tdef\\n\\033[;1m ghi\\b\", FLATPAK_ESCAPE_ALLOW_NEWLINES | FLATPAK_ESCAPE_DO_NOT_QUOTE,",
      "1859:    \"abc\\\\x09def\\n\\\\x1B[;1m ghi\\\\x08\"},",
      "1860: };",
      "1863: static void",
      "1864: test_string_escape (void)",
      "1865: {",
      "1866:   gsize idx;",
      "1868:   for (idx = 0; idx < G_N_ELEMENTS (escapes); idx++)",
      "1869:     {",
      "1870:       EscapeData *data = &escapes[idx];",
      "1871:       g_autofree char *ret = NULL;",
      "1873:       ret = flatpak_escape_string (data->in, data->flags);",
      "1874:       g_assert_cmpstr (ret, ==, data->out);",
      "1875:     }",
      "1876: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1870:   g_test_add_func (\"/common/quote-argv\", test_quote_argv);",
      "1871:   g_test_add_func (\"/common/str-is-integer\", test_str_is_integer);",
      "1872:   g_test_add_func (\"/common/parse-x11-display\", test_parse_x11_display);",
      "1874:   g_test_add_func (\"/app/looks-like-branch\", test_looks_like_branch);",
      "1875:   g_test_add_func (\"/app/columns\", test_columns);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1911:   g_test_add_func (\"/common/string-escape\", test_string_escape);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "886462b8118c1ea4f16957553acfb6625df9e002",
      "candidate_info": {
        "commit_hash": "886462b8118c1ea4f16957553acfb6625df9e002",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/886462b8118c1ea4f16957553acfb6625df9e002",
        "files": [
          "tests/make-test-app.sh",
          "tests/test-info.sh"
        ],
        "message": "tests: Check appdata name parsing via flatpak info\n\nAdd a basic test for the extraction of appdata name and summary values\nthat are displayed in the flatpak UI. Also use the new developer name\nsyntax in the test app. This tests the fix made in previous commit.",
        "before_after_code_files": [
          "tests/make-test-app.sh||tests/make-test-app.sh",
          "tests/test-info.sh||tests/test-info.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh"
          ],
          "candidate": [
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh"
          ]
        }
      },
      "candidate_diff": {
        "tests/make-test-app.sh||tests/make-test-app.sh": [
          "File: tests/make-test-app.sh -> tests/make-test-app.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     <name>Hello world test app: $APP_ID</name>",
          "131:     <summary>Print a greeting</summary>",
          "132:     <description><p>This is a test app.</p></description>",
          "133:     <categories>",
          "134:       <category>Utility</category>",
          "135:     </categories>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     <developer>",
          "134:       <name>Developer name</name>",
          "135:     </developer>",
          "",
          "---------------"
        ],
        "tests/test-info.sh||tests/test-info.sh": [
          "File: tests/test-info.sh -> tests/test-info.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: skip_revokefs_without_fuse",
          "11: INCLUDE_SPECIAL_CHARACTER=1 setup_repo",
          "12: install_repo",
          "",
          "[Removed Lines]",
          "9: echo \"1..8\"",
          "",
          "[Added Lines]",
          "9: echo \"1..9\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: assert_file_has_content info \"^hidden$\"",
          "64: ok \"info --file-access\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: ${FLATPAK} info org.test.Hello > info",
          "68: assert_file_has_content info \"^Hello world test app: org\\.test\\.Hello - Print a greeting$\"",
          "70: ok \"info (name header)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01ed14ced4f29de053e844ab4b4e8743829e66fb",
      "candidate_info": {
        "commit_hash": "01ed14ced4f29de053e844ab4b4e8743829e66fb",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/01ed14ced4f29de053e844ab4b4e8743829e66fb",
        "files": [
          "app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h",
          "common/flatpak-utils.c",
          "tests/make-test-app.sh",
          "tests/test-info.sh",
          "tests/testcommon.c"
        ],
        "message": "Ensure special characters in permissions and metadata are escaped\n\nThis prevents someone from placing special characters in order to\nmanipulate the appearance of the permissions list.\n\nCVE-2023-28101, GHSA-h43h-fwqx-mpp8\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>",
        "before_after_code_files": [
          "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
          "common/flatpak-utils.c||common/flatpak-utils.c",
          "tests/make-test-app.sh||tests/make-test-app.sh",
          "tests/test-info.sh||tests/test-info.sh",
          "tests/testcommon.c||tests/testcommon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ],
          "candidate": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ]
        }
      },
      "candidate_diff": {
        "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c": [
          "File: app/flatpak-builtins-info.c -> app/flatpak-builtins-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:           if (!g_file_load_contents (file, cancellable, &data, &data_size, NULL, error))",
          "401:             return FALSE;",
          "404:         }",
          "406:       if (opt_show_permissions || opt_file_access)",
          "",
          "[Removed Lines]",
          "403:           g_print (\"%s\", data);",
          "",
          "[Added Lines]",
          "403:           flatpak_print_escaped_string (data,",
          "404:                                         FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "405:                                         | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:               if (contents == NULL)",
          "422:                 return FALSE;",
          "425:             }",
          "427:           if (opt_file_access)",
          "",
          "[Removed Lines]",
          "424:               g_print (\"%s\", contents);",
          "",
          "[Added Lines]",
          "426:               flatpak_print_escaped_string (contents,",
          "427:                                             FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "428:                                             | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c": [
          "File: app/flatpak-builtins-remote-info.c -> app/flatpak-builtins-remote-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:           if (opt_show_metadata)",
          "437:             {",
          "439:               if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))",
          "440:                 g_print (\"\\n\");",
          "441:             }",
          "",
          "[Removed Lines]",
          "438:               g_print (\"%s\", xa_metadata ? xa_metadata : \"\");",
          "",
          "[Added Lines]",
          "438:               if (xa_metadata != NULL)",
          "439:                 flatpak_print_escaped_string (xa_metadata,",
          "440:                                               FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "441:                                               | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c": [
          "File: app/flatpak-cli-transaction.c -> app/flatpak-cli-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:                  int        cols)",
          "909: {",
          "910:   g_autoptr(GString) res = g_string_new (NULL);",
          "911:   int i;",
          "915:   for (i = 1; i < items->len; i++)",
          "916:     {",
          "917:       char *p;",
          "918:       int len;",
          "",
          "[Removed Lines]",
          "913:   g_string_append_printf (res, \"    [%d] %s\", idx, (char *) items->pdata[0]);",
          "",
          "[Added Lines]",
          "911:   g_autofree char *escaped_first_perm = NULL;",
          "914:   escaped_first_perm = flatpak_escape_string (items->pdata[0], FLATPAK_ESCAPE_DEFAULT);",
          "915:   g_string_append_printf (res, \"    [%d] %s\", idx, escaped_first_perm);",
          "919:       g_autofree char *escaped = flatpak_escape_string (items->pdata[i],",
          "920:                                                         FLATPAK_ESCAPE_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:         p = res->str;",
          "924:       len = (res->str + strlen (res->str)) - p;",
          "927:       else",
          "929:     }",
          "931:   g_print (\"%s\\n\", res->str);",
          "",
          "[Removed Lines]",
          "925:       if (len + strlen ((char *) items->pdata[i]) + 2 >= cols)",
          "926:         g_string_append_printf (res, \",\\n        %s\", (char *) items->pdata[i]);",
          "928:         g_string_append_printf (res, \", %s\", (char *) items->pdata[i]);",
          "",
          "[Added Lines]",
          "929:       if (len + strlen (escaped) + 2 >= cols)",
          "930:         g_string_append_printf (res, \",\\n        %s\", escaped);",
          "932:         g_string_append_printf (res, \", %s\", escaped);",
          "",
          "---------------"
        ],
        "common/flatpak-utils-private.h||common/flatpak-utils-private.h": [
          "File: common/flatpak-utils-private.h -> common/flatpak-utils-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "914: gboolean flatpak_str_is_integer (const char *s);",
          "916: #define FLATPAK_MESSAGE_ID \"c7b39b1e006b464599465e105b361485\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: typedef enum {",
          "917:   FLATPAK_ESCAPE_DEFAULT        = 0,",
          "918:   FLATPAK_ESCAPE_ALLOW_NEWLINES = 1 << 0,",
          "919:   FLATPAK_ESCAPE_DO_NOT_QUOTE   = 1 << 1,",
          "920: } FlatpakEscapeFlags;",
          "922: char * flatpak_escape_string (const char        *s,",
          "923:                               FlatpakEscapeFlags flags);",
          "924: void   flatpak_print_escaped_string (const char        *s,",
          "925:                                      FlatpakEscapeFlags flags);",
          "",
          "---------------"
        ],
        "common/flatpak-utils.c||common/flatpak-utils.c": [
          "File: common/flatpak-utils.c -> common/flatpak-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9040:   return TRUE;",
          "9041: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9043: static gboolean",
          "9044: is_char_safe (gunichar c)",
          "9045: {",
          "9046:   return g_unichar_isgraph (c) || c == ' ';",
          "9047: }",
          "9049: static gboolean",
          "9050: should_hex_escape (gunichar           c,",
          "9051:                    FlatpakEscapeFlags flags)",
          "9052: {",
          "9053:   if ((flags & FLATPAK_ESCAPE_ALLOW_NEWLINES) && c == '\\n')",
          "9054:     return FALSE;",
          "9056:   return !is_char_safe (c);",
          "9057: }",
          "9059: static void",
          "9060: append_hex_escaped_character (GString *result,",
          "9061:                               gunichar c)",
          "9062: {",
          "9063:   if (c <= 0xFF)",
          "9064:     g_string_append_printf (result, \"\\\\x%02X\", c);",
          "9065:   else if (c <= 0xFFFF)",
          "9066:     g_string_append_printf (result, \"\\\\u%04X\", c);",
          "9067:   else",
          "9068:     g_string_append_printf (result, \"\\\\U%08X\", c);",
          "9069: }",
          "9071: char *",
          "9072: flatpak_escape_string (const char        *s,",
          "9073:                        FlatpakEscapeFlags flags)",
          "9074: {",
          "9075:   g_autoptr(GString) res = g_string_new (\"\");",
          "9076:   gboolean did_escape = FALSE;",
          "9078:   while (*s)",
          "9079:     {",
          "9080:       gunichar c = g_utf8_get_char_validated (s, -1);",
          "9081:       if (c == (gunichar)-2 || c == (gunichar)-1)",
          "9082:         {",
          "9085:           append_hex_escaped_character (res, (unsigned char)*s++);",
          "9086:           did_escape = TRUE;",
          "9087:           continue;",
          "9088:         }",
          "9089:       else if (should_hex_escape (c, flags))",
          "9090:         {",
          "9091:           append_hex_escaped_character (res, c);",
          "9092:           did_escape = TRUE;",
          "9093:         }",
          "9094:       else if (c == '\\\\' || (!(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE) && c == '\\''))",
          "9095:         {",
          "9096:           g_string_append_printf (res, \"\\\\%c\", (char) c);",
          "9097:           did_escape = TRUE;",
          "9098:         }",
          "9099:       else",
          "9100:         g_string_append_unichar (res, c);",
          "9102:       s = g_utf8_find_next_char (s, NULL);",
          "9103:     }",
          "9105:   if (did_escape && !(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE))",
          "9106:     {",
          "9107:       g_string_prepend_c (res, '\\'');",
          "9108:       g_string_append_c (res, '\\'');",
          "9109:     }",
          "9111:   return g_string_free (g_steal_pointer (&res), FALSE);",
          "9112: }",
          "9114: void",
          "9115: flatpak_print_escaped_string (const char        *s,",
          "9116:                               FlatpakEscapeFlags flags)",
          "9117: {",
          "9118:   g_autofree char *escaped = flatpak_escape_string (s, flags);",
          "9119:   g_print (\"%s\", escaped);",
          "9120: }",
          "",
          "---------------"
        ],
        "tests/make-test-app.sh||tests/make-test-app.sh": [
          "File: tests/make-test-app.sh -> tests/make-test-app.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: EOF",
          "41: fi",
          "43: cat >> ${DIR}/metadata <<EOF",
          "44: [Extension $APP_ID.Locale]",
          "45: directory=share/runtime/locale",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: if [ x${INCLUDE_SPECIAL_CHARACTER-} != x ]; then",
          "44: TAB=$'\\t'",
          "45: cat >> ${DIR}/metadata <<EOF",
          "46: [Environment]",
          "47: A=x${TAB}y",
          "48: EOF",
          "49: fi",
          "",
          "---------------"
        ],
        "tests/test-info.sh||tests/test-info.sh": [
          "File: tests/test-info.sh -> tests/test-info.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: skip_revokefs_without_fuse",
          "12: install_repo",
          "14: COMMIT=`${FLATPAK} ${U} info --show-commit org.test.Hello`",
          "",
          "[Removed Lines]",
          "9: echo \"1..7\"",
          "11: setup_repo",
          "",
          "[Added Lines]",
          "9: echo \"1..8\"",
          "11: INCLUDE_SPECIAL_CHARACTER=1 setup_repo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: ok \"info -rcos\"",
          "22: ${FLATPAK} info --show-permissions  org.test.Hello > info",
          "26: ok \"info --show-permissions\"",
          "",
          "[Removed Lines]",
          "24: assert_file_empty info",
          "",
          "[Added Lines]",
          "22: ${FLATPAK} info --show-metadata  org.test.Hello > info",
          "24: # CVE-2023-28101",
          "25: assert_file_has_content info \"name=org\\.test\\.Hello\"",
          "26: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "28: ok \"info --show-metadata\"",
          "32: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "",
          "---------------"
        ],
        "tests/testcommon.c||tests/testcommon.c": [
          "File: tests/testcommon.c -> tests/testcommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:     }",
          "1838: }",
          "1840: int",
          "1841: main (int argc, char *argv[])",
          "1842: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1840: typedef struct {",
          "1841:   const char        *in;",
          "1842:   FlatpakEscapeFlags flags;",
          "1843:   const char        *out;",
          "1844: } EscapeData;",
          "1846: static EscapeData escapes[] = {",
          "1847:   {\"abc def\", FLATPAK_ESCAPE_DEFAULT, \"abc def\"},",
          "1848:   {\"\u3084\u3042\", FLATPAK_ESCAPE_DEFAULT, \"\u3084\u3042\"},",
          "1849:   {\"\\033[;1m\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x1B[;1m'\"},",
          "1851:   {\"\\u061C\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\u061C'\"},",
          "1853:   {\"\\xF0\\x93\\x90\\xBF\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\U0001343F'\"},",
          "1855:   {\"\\xD8\\1\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\xD8\\\\x01'\"},",
          "1856:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x08 \\\\x0A abc \\\\' \\\\\\\\'\"},",
          "1857:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DO_NOT_QUOTE, \"\\\\x08 \\\\x0A abc ' \\\\\\\\\"},",
          "1858:   {\"abc\\tdef\\n\\033[;1m ghi\\b\", FLATPAK_ESCAPE_ALLOW_NEWLINES | FLATPAK_ESCAPE_DO_NOT_QUOTE,",
          "1859:    \"abc\\\\x09def\\n\\\\x1B[;1m ghi\\\\x08\"},",
          "1860: };",
          "1863: static void",
          "1864: test_string_escape (void)",
          "1865: {",
          "1866:   gsize idx;",
          "1868:   for (idx = 0; idx < G_N_ELEMENTS (escapes); idx++)",
          "1869:     {",
          "1870:       EscapeData *data = &escapes[idx];",
          "1871:       g_autofree char *ret = NULL;",
          "1873:       ret = flatpak_escape_string (data->in, data->flags);",
          "1874:       g_assert_cmpstr (ret, ==, data->out);",
          "1875:     }",
          "1876: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870:   g_test_add_func (\"/common/quote-argv\", test_quote_argv);",
          "1871:   g_test_add_func (\"/common/str-is-integer\", test_str_is_integer);",
          "1872:   g_test_add_func (\"/common/parse-x11-display\", test_parse_x11_display);",
          "1874:   g_test_add_func (\"/app/looks-like-branch\", test_looks_like_branch);",
          "1875:   g_test_add_func (\"/app/columns\", test_columns);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1911:   g_test_add_func (\"/common/string-escape\", test_string_escape);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e7ec07e6787aa50cb28cbcff7e707ceaac87a4b",
      "candidate_info": {
        "commit_hash": "9e7ec07e6787aa50cb28cbcff7e707ceaac87a4b",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/9e7ec07e6787aa50cb28cbcff7e707ceaac87a4b",
        "files": [
          "app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h",
          "common/flatpak-utils.c",
          "tests/make-test-app.sh",
          "tests/test-info.sh",
          "tests/testcommon.c"
        ],
        "message": "Ensure special characters in permissions and metadata are escaped\n\nThis prevents someone from placing special characters in order to\nmanipulate the appearance of the permissions list.\n\nCVE-2023-28101, GHSA-h43h-fwqx-mpp8\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>",
        "before_after_code_files": [
          "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
          "common/flatpak-utils.c||common/flatpak-utils.c",
          "tests/make-test-app.sh||tests/make-test-app.sh",
          "tests/test-info.sh||tests/test-info.sh",
          "tests/testcommon.c||tests/testcommon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ],
          "candidate": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ]
        }
      },
      "candidate_diff": {
        "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c": [
          "File: app/flatpak-builtins-info.c -> app/flatpak-builtins-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:           if (!g_file_load_contents (file, cancellable, &data, &data_size, NULL, error))",
          "401:             return FALSE;",
          "404:         }",
          "406:       if (opt_show_permissions || opt_file_access)",
          "",
          "[Removed Lines]",
          "403:           g_print (\"%s\", data);",
          "",
          "[Added Lines]",
          "403:           flatpak_print_escaped_string (data,",
          "404:                                         FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "405:                                         | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:               if (contents == NULL)",
          "422:                 return FALSE;",
          "425:             }",
          "427:           if (opt_file_access)",
          "",
          "[Removed Lines]",
          "424:               g_print (\"%s\", contents);",
          "",
          "[Added Lines]",
          "426:               flatpak_print_escaped_string (contents,",
          "427:                                             FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "428:                                             | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c": [
          "File: app/flatpak-builtins-remote-info.c -> app/flatpak-builtins-remote-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:           if (opt_show_metadata)",
          "433:             {",
          "435:               if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))",
          "436:                 g_print (\"\\n\");",
          "437:             }",
          "",
          "[Removed Lines]",
          "434:               g_print (\"%s\", xa_metadata ? xa_metadata : \"\");",
          "",
          "[Added Lines]",
          "434:               if (xa_metadata != NULL)",
          "435:                 flatpak_print_escaped_string (xa_metadata,",
          "436:                                               FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "437:                                               | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c": [
          "File: app/flatpak-cli-transaction.c -> app/flatpak-cli-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:                  int        cols)",
          "1122: {",
          "1123:   g_autoptr(GString) res = g_string_new (NULL);",
          "1124:   int i;",
          "1128:   for (i = 1; i < items->len; i++)",
          "1129:     {",
          "1130:       char *p;",
          "1131:       int len;",
          "",
          "[Removed Lines]",
          "1126:   g_string_append_printf (res, \"    [%d] %s\", idx, (char *) items->pdata[0]);",
          "",
          "[Added Lines]",
          "1124:   g_autofree char *escaped_first_perm = NULL;",
          "1127:   escaped_first_perm = flatpak_escape_string (items->pdata[0], FLATPAK_ESCAPE_DEFAULT);",
          "1128:   g_string_append_printf (res, \"    [%d] %s\", idx, escaped_first_perm);",
          "1132:       g_autofree char *escaped = flatpak_escape_string (items->pdata[i],",
          "1133:                                                         FLATPAK_ESCAPE_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1135:         p = res->str;",
          "1137:       len = (res->str + strlen (res->str)) - p;",
          "1140:       else",
          "1142:     }",
          "1144:   g_print (\"%s\\n\", res->str);",
          "",
          "[Removed Lines]",
          "1138:       if (len + strlen ((char *) items->pdata[i]) + 2 >= cols)",
          "1139:         g_string_append_printf (res, \",\\n        %s\", (char *) items->pdata[i]);",
          "1141:         g_string_append_printf (res, \", %s\", (char *) items->pdata[i]);",
          "",
          "[Added Lines]",
          "1142:       if (len + strlen (escaped) + 2 >= cols)",
          "1143:         g_string_append_printf (res, \",\\n        %s\", escaped);",
          "1145:         g_string_append_printf (res, \", %s\", escaped);",
          "",
          "---------------"
        ],
        "common/flatpak-utils-private.h||common/flatpak-utils-private.h": [
          "File: common/flatpak-utils-private.h -> common/flatpak-utils-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "928: gboolean flatpak_uri_equal (const char *uri1,",
          "929:                             const char *uri2);",
          "931: gboolean running_under_sudo (void);",
          "933: #define FLATPAK_MESSAGE_ID \"c7b39b1e006b464599465e105b361485\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931: typedef enum {",
          "932:   FLATPAK_ESCAPE_DEFAULT        = 0,",
          "933:   FLATPAK_ESCAPE_ALLOW_NEWLINES = 1 << 0,",
          "934:   FLATPAK_ESCAPE_DO_NOT_QUOTE   = 1 << 1,",
          "935: } FlatpakEscapeFlags;",
          "937: char * flatpak_escape_string (const char        *s,",
          "938:                               FlatpakEscapeFlags flags);",
          "939: void   flatpak_print_escaped_string (const char        *s,",
          "940:                                      FlatpakEscapeFlags flags);",
          "",
          "---------------"
        ],
        "common/flatpak-utils.c||common/flatpak-utils.c": [
          "File: common/flatpak-utils.c -> common/flatpak-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9221:   return g_strcmp0 (uri1_norm, uri2_norm) == 0;",
          "9222: }",
          "9224: gboolean",
          "9225: running_under_sudo (void)",
          "9226: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9224: static gboolean",
          "9225: is_char_safe (gunichar c)",
          "9226: {",
          "9227:   return g_unichar_isgraph (c) || c == ' ';",
          "9228: }",
          "9230: static gboolean",
          "9231: should_hex_escape (gunichar           c,",
          "9232:                    FlatpakEscapeFlags flags)",
          "9233: {",
          "9234:   if ((flags & FLATPAK_ESCAPE_ALLOW_NEWLINES) && c == '\\n')",
          "9235:     return FALSE;",
          "9237:   return !is_char_safe (c);",
          "9238: }",
          "9240: static void",
          "9241: append_hex_escaped_character (GString *result,",
          "9242:                               gunichar c)",
          "9243: {",
          "9244:   if (c <= 0xFF)",
          "9245:     g_string_append_printf (result, \"\\\\x%02X\", c);",
          "9246:   else if (c <= 0xFFFF)",
          "9247:     g_string_append_printf (result, \"\\\\u%04X\", c);",
          "9248:   else",
          "9249:     g_string_append_printf (result, \"\\\\U%08X\", c);",
          "9250: }",
          "9252: char *",
          "9253: flatpak_escape_string (const char        *s,",
          "9254:                        FlatpakEscapeFlags flags)",
          "9255: {",
          "9256:   g_autoptr(GString) res = g_string_new (\"\");",
          "9257:   gboolean did_escape = FALSE;",
          "9259:   while (*s)",
          "9260:     {",
          "9261:       gunichar c = g_utf8_get_char_validated (s, -1);",
          "9262:       if (c == (gunichar)-2 || c == (gunichar)-1)",
          "9263:         {",
          "9266:           append_hex_escaped_character (res, (unsigned char)*s++);",
          "9267:           did_escape = TRUE;",
          "9268:           continue;",
          "9269:         }",
          "9270:       else if (should_hex_escape (c, flags))",
          "9271:         {",
          "9272:           append_hex_escaped_character (res, c);",
          "9273:           did_escape = TRUE;",
          "9274:         }",
          "9275:       else if (c == '\\\\' || (!(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE) && c == '\\''))",
          "9276:         {",
          "9277:           g_string_append_printf (res, \"\\\\%c\", (char) c);",
          "9278:           did_escape = TRUE;",
          "9279:         }",
          "9280:       else",
          "9281:         g_string_append_unichar (res, c);",
          "9283:       s = g_utf8_find_next_char (s, NULL);",
          "9284:     }",
          "9286:   if (did_escape && !(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE))",
          "9287:     {",
          "9288:       g_string_prepend_c (res, '\\'');",
          "9289:       g_string_append_c (res, '\\'');",
          "9290:     }",
          "9292:   return g_string_free (g_steal_pointer (&res), FALSE);",
          "9293: }",
          "9295: void",
          "9296: flatpak_print_escaped_string (const char        *s,",
          "9297:                               FlatpakEscapeFlags flags)",
          "9298: {",
          "9299:   g_autofree char *escaped = flatpak_escape_string (s, flags);",
          "9300:   g_print (\"%s\", escaped);",
          "9301: }",
          "",
          "---------------"
        ],
        "tests/make-test-app.sh||tests/make-test-app.sh": [
          "File: tests/make-test-app.sh -> tests/make-test-app.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: EOF",
          "41: fi",
          "43: cat >> ${DIR}/metadata <<EOF",
          "44: [Extension $APP_ID.Locale]",
          "45: directory=share/runtime/locale",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: if [ x${INCLUDE_SPECIAL_CHARACTER-} != x ]; then",
          "44: TAB=$'\\t'",
          "45: cat >> ${DIR}/metadata <<EOF",
          "46: [Environment]",
          "47: A=x${TAB}y",
          "48: EOF",
          "49: fi",
          "",
          "---------------"
        ],
        "tests/test-info.sh||tests/test-info.sh": [
          "File: tests/test-info.sh -> tests/test-info.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: skip_revokefs_without_fuse",
          "12: install_repo",
          "14: COMMIT=`${FLATPAK} ${U} info --show-commit org.test.Hello`",
          "",
          "[Removed Lines]",
          "9: echo \"1..7\"",
          "11: setup_repo",
          "",
          "[Added Lines]",
          "9: echo \"1..8\"",
          "11: INCLUDE_SPECIAL_CHARACTER=1 setup_repo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: ok \"info -rcos\"",
          "22: ${FLATPAK} info --show-permissions  org.test.Hello > info",
          "26: ok \"info --show-permissions\"",
          "",
          "[Removed Lines]",
          "24: assert_file_empty info",
          "",
          "[Added Lines]",
          "22: ${FLATPAK} info --show-metadata  org.test.Hello > info",
          "24: # CVE-2023-28101",
          "25: assert_file_has_content info \"name=org\\.test\\.Hello\"",
          "26: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "28: ok \"info --show-metadata\"",
          "32: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "",
          "---------------"
        ],
        "tests/testcommon.c||tests/testcommon.c": [
          "File: tests/testcommon.c -> tests/testcommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:     }",
          "1838: }",
          "1840: int",
          "1841: main (int argc, char *argv[])",
          "1842: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1840: typedef struct {",
          "1841:   const char        *in;",
          "1842:   FlatpakEscapeFlags flags;",
          "1843:   const char        *out;",
          "1844: } EscapeData;",
          "1846: static EscapeData escapes[] = {",
          "1847:   {\"abc def\", FLATPAK_ESCAPE_DEFAULT, \"abc def\"},",
          "1848:   {\"\u3084\u3042\", FLATPAK_ESCAPE_DEFAULT, \"\u3084\u3042\"},",
          "1849:   {\"\\033[;1m\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x1B[;1m'\"},",
          "1851:   {\"\\u061C\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\u061C'\"},",
          "1853:   {\"\\xF0\\x93\\x90\\xBF\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\U0001343F'\"},",
          "1855:   {\"\\xD8\\1\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\xD8\\\\x01'\"},",
          "1856:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x08 \\\\x0A abc \\\\' \\\\\\\\'\"},",
          "1857:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DO_NOT_QUOTE, \"\\\\x08 \\\\x0A abc ' \\\\\\\\\"},",
          "1858:   {\"abc\\tdef\\n\\033[;1m ghi\\b\", FLATPAK_ESCAPE_ALLOW_NEWLINES | FLATPAK_ESCAPE_DO_NOT_QUOTE,",
          "1859:    \"abc\\\\x09def\\n\\\\x1B[;1m ghi\\\\x08\"},",
          "1860: };",
          "1863: static void",
          "1864: test_string_escape (void)",
          "1865: {",
          "1866:   gsize idx;",
          "1868:   for (idx = 0; idx < G_N_ELEMENTS (escapes); idx++)",
          "1869:     {",
          "1870:       EscapeData *data = &escapes[idx];",
          "1871:       g_autofree char *ret = NULL;",
          "1873:       ret = flatpak_escape_string (data->in, data->flags);",
          "1874:       g_assert_cmpstr (ret, ==, data->out);",
          "1875:     }",
          "1876: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870:   g_test_add_func (\"/common/quote-argv\", test_quote_argv);",
          "1871:   g_test_add_func (\"/common/str-is-integer\", test_str_is_integer);",
          "1872:   g_test_add_func (\"/common/parse-x11-display\", test_parse_x11_display);",
          "1874:   g_test_add_func (\"/app/looks-like-branch\", test_looks_like_branch);",
          "1875:   g_test_add_func (\"/app/columns\", test_columns);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1911:   g_test_add_func (\"/common/string-escape\", test_string_escape);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acd627a2fabe9856947399044dbf7aa79247c75b",
      "candidate_info": {
        "commit_hash": "acd627a2fabe9856947399044dbf7aa79247c75b",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/acd627a2fabe9856947399044dbf7aa79247c75b",
        "files": [
          "app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h",
          "common/flatpak-utils.c",
          "tests/make-test-app.sh",
          "tests/test-info.sh",
          "tests/testcommon.c"
        ],
        "message": "Ensure special characters in permissions and metadata are escaped\n\nThis prevents someone from placing special characters in order to\nmanipulate the appearance of the permissions list.\n\nCVE-2023-28101, GHSA-h43h-fwqx-mpp8\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>",
        "before_after_code_files": [
          "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
          "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
          "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
          "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
          "common/flatpak-utils.c||common/flatpak-utils.c",
          "tests/make-test-app.sh||tests/make-test-app.sh",
          "tests/test-info.sh||tests/test-info.sh",
          "tests/testcommon.c||tests/testcommon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ],
          "candidate": [
            "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c",
            "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c",
            "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c",
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/make-test-app.sh||tests/make-test-app.sh",
            "tests/test-info.sh||tests/test-info.sh",
            "tests/testcommon.c||tests/testcommon.c"
          ]
        }
      },
      "candidate_diff": {
        "app/flatpak-builtins-info.c||app/flatpak-builtins-info.c": [
          "File: app/flatpak-builtins-info.c -> app/flatpak-builtins-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:           if (!g_file_load_contents (file, cancellable, &data, &data_size, NULL, error))",
          "401:             return FALSE;",
          "404:         }",
          "406:       if (opt_show_permissions || opt_file_access)",
          "",
          "[Removed Lines]",
          "403:           g_print (\"%s\", data);",
          "",
          "[Added Lines]",
          "403:           flatpak_print_escaped_string (data,",
          "404:                                         FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "405:                                         | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:               if (contents == NULL)",
          "422:                 return FALSE;",
          "425:             }",
          "427:           if (opt_file_access)",
          "",
          "[Removed Lines]",
          "424:               g_print (\"%s\", contents);",
          "",
          "[Added Lines]",
          "426:               flatpak_print_escaped_string (contents,",
          "427:                                             FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "428:                                             | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-builtins-remote-info.c||app/flatpak-builtins-remote-info.c": [
          "File: app/flatpak-builtins-remote-info.c -> app/flatpak-builtins-remote-info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:           if (opt_show_metadata)",
          "443:             {",
          "445:               if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))",
          "446:                 g_print (\"\\n\");",
          "447:             }",
          "",
          "[Removed Lines]",
          "444:               g_print (\"%s\", xa_metadata ? xa_metadata : \"\");",
          "",
          "[Added Lines]",
          "444:               if (xa_metadata != NULL)",
          "445:                 flatpak_print_escaped_string (xa_metadata,",
          "446:                                               FLATPAK_ESCAPE_ALLOW_NEWLINES",
          "447:                                               | FLATPAK_ESCAPE_DO_NOT_QUOTE);",
          "",
          "---------------"
        ],
        "app/flatpak-cli-transaction.c||app/flatpak-cli-transaction.c": [
          "File: app/flatpak-cli-transaction.c -> app/flatpak-cli-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:                  int        cols)",
          "895: {",
          "896:   g_autoptr(GString) res = g_string_new (NULL);",
          "897:   int i;",
          "901:   for (i = 1; i < items->len; i++)",
          "902:     {",
          "903:       char *p;",
          "904:       int len;",
          "",
          "[Removed Lines]",
          "899:   g_string_append_printf (res, \"    [%d] %s\", idx, (char *) items->pdata[0]);",
          "",
          "[Added Lines]",
          "897:   g_autofree char *escaped_first_perm = NULL;",
          "900:   escaped_first_perm = flatpak_escape_string (items->pdata[0], FLATPAK_ESCAPE_DEFAULT);",
          "901:   g_string_append_printf (res, \"    [%d] %s\", idx, escaped_first_perm);",
          "905:       g_autofree char *escaped = flatpak_escape_string (items->pdata[i],",
          "906:                                                         FLATPAK_ESCAPE_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "908:         p = res->str;",
          "910:       len = (res->str + strlen (res->str)) - p;",
          "913:       else",
          "915:     }",
          "917:   g_print (\"%s\\n\", res->str);",
          "",
          "[Removed Lines]",
          "911:       if (len + strlen ((char *) items->pdata[i]) + 2 >= cols)",
          "912:         g_string_append_printf (res, \",\\n        %s\", (char *) items->pdata[i]);",
          "914:         g_string_append_printf (res, \", %s\", (char *) items->pdata[i]);",
          "",
          "[Added Lines]",
          "915:       if (len + strlen (escaped) + 2 >= cols)",
          "916:         g_string_append_printf (res, \",\\n        %s\", escaped);",
          "918:         g_string_append_printf (res, \", %s\", escaped);",
          "",
          "---------------"
        ],
        "common/flatpak-utils-private.h||common/flatpak-utils-private.h": [
          "File: common/flatpak-utils-private.h -> common/flatpak-utils-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:   g_clear_pointer (&data, g_ptr_array_unref);",
          "903: }",
          "905: #define FLATPAK_MESSAGE_ID \"c7b39b1e006b464599465e105b361485\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "905: typedef enum {",
          "906:   FLATPAK_ESCAPE_DEFAULT        = 0,",
          "907:   FLATPAK_ESCAPE_ALLOW_NEWLINES = 1 << 0,",
          "908:   FLATPAK_ESCAPE_DO_NOT_QUOTE   = 1 << 1,",
          "909: } FlatpakEscapeFlags;",
          "911: char * flatpak_escape_string (const char        *s,",
          "912:                               FlatpakEscapeFlags flags);",
          "913: void   flatpak_print_escaped_string (const char        *s,",
          "914:                                      FlatpakEscapeFlags flags);",
          "",
          "---------------"
        ],
        "common/flatpak-utils.c||common/flatpak-utils.c": [
          "File: common/flatpak-utils.c -> common/flatpak-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8613:   return (path1[i1] == '\\0');",
          "8614: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8616: static gboolean",
          "8617: is_char_safe (gunichar c)",
          "8618: {",
          "8619:   return g_unichar_isgraph (c) || c == ' ';",
          "8620: }",
          "8622: static gboolean",
          "8623: should_hex_escape (gunichar           c,",
          "8624:                    FlatpakEscapeFlags flags)",
          "8625: {",
          "8626:   if ((flags & FLATPAK_ESCAPE_ALLOW_NEWLINES) && c == '\\n')",
          "8627:     return FALSE;",
          "8629:   return !is_char_safe (c);",
          "8630: }",
          "8632: static void",
          "8633: append_hex_escaped_character (GString *result,",
          "8634:                               gunichar c)",
          "8635: {",
          "8636:   if (c <= 0xFF)",
          "8637:     g_string_append_printf (result, \"\\\\x%02X\", c);",
          "8638:   else if (c <= 0xFFFF)",
          "8639:     g_string_append_printf (result, \"\\\\u%04X\", c);",
          "8640:   else",
          "8641:     g_string_append_printf (result, \"\\\\U%08X\", c);",
          "8642: }",
          "8644: char *",
          "8645: flatpak_escape_string (const char        *s,",
          "8646:                        FlatpakEscapeFlags flags)",
          "8647: {",
          "8648:   g_autoptr(GString) res = g_string_new (\"\");",
          "8649:   gboolean did_escape = FALSE;",
          "8651:   while (*s)",
          "8652:     {",
          "8653:       gunichar c = g_utf8_get_char_validated (s, -1);",
          "8654:       if (c == (gunichar)-2 || c == (gunichar)-1)",
          "8655:         {",
          "8658:           append_hex_escaped_character (res, (unsigned char)*s++);",
          "8659:           did_escape = TRUE;",
          "8660:           continue;",
          "8661:         }",
          "8662:       else if (should_hex_escape (c, flags))",
          "8663:         {",
          "8664:           append_hex_escaped_character (res, c);",
          "8665:           did_escape = TRUE;",
          "8666:         }",
          "8667:       else if (c == '\\\\' || (!(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE) && c == '\\''))",
          "8668:         {",
          "8669:           g_string_append_printf (res, \"\\\\%c\", (char) c);",
          "8670:           did_escape = TRUE;",
          "8671:         }",
          "8672:       else",
          "8673:         g_string_append_unichar (res, c);",
          "8675:       s = g_utf8_find_next_char (s, NULL);",
          "8676:     }",
          "8678:   if (did_escape && !(flags & FLATPAK_ESCAPE_DO_NOT_QUOTE))",
          "8679:     {",
          "8680:       g_string_prepend_c (res, '\\'');",
          "8681:       g_string_append_c (res, '\\'');",
          "8682:     }",
          "8684:   return g_string_free (g_steal_pointer (&res), FALSE);",
          "8685: }",
          "8687: void",
          "8688: flatpak_print_escaped_string (const char        *s,",
          "8689:                               FlatpakEscapeFlags flags)",
          "8690: {",
          "8691:   g_autofree char *escaped = flatpak_escape_string (s, flags);",
          "8692:   g_print (\"%s\", escaped);",
          "8693: }",
          "",
          "---------------"
        ],
        "tests/make-test-app.sh||tests/make-test-app.sh": [
          "File: tests/make-test-app.sh -> tests/make-test-app.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: EOF",
          "41: fi",
          "43: cat >> ${DIR}/metadata <<EOF",
          "44: [Extension $APP_ID.Locale]",
          "45: directory=share/runtime/locale",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: if [ x${INCLUDE_SPECIAL_CHARACTER-} != x ]; then",
          "44: TAB=$'\\t'",
          "45: cat >> ${DIR}/metadata <<EOF",
          "46: [Environment]",
          "47: A=x${TAB}y",
          "48: EOF",
          "49: fi",
          "",
          "---------------"
        ],
        "tests/test-info.sh||tests/test-info.sh": [
          "File: tests/test-info.sh -> tests/test-info.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: skip_revokefs_without_fuse",
          "12: install_repo",
          "14: COMMIT=`${FLATPAK} ${U} info --show-commit org.test.Hello`",
          "",
          "[Removed Lines]",
          "9: echo \"1..7\"",
          "11: setup_repo",
          "",
          "[Added Lines]",
          "9: echo \"1..8\"",
          "11: INCLUDE_SPECIAL_CHARACTER=1 setup_repo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: ok \"info -rcos\"",
          "22: ${FLATPAK} info --show-permissions  org.test.Hello > info",
          "26: ok \"info --show-permissions\"",
          "",
          "[Removed Lines]",
          "24: assert_file_empty info",
          "",
          "[Added Lines]",
          "22: ${FLATPAK} info --show-metadata  org.test.Hello > info",
          "24: # CVE-2023-28101",
          "25: assert_file_has_content info \"name=org\\.test\\.Hello\"",
          "26: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "28: ok \"info --show-metadata\"",
          "32: assert_file_has_content info \"^A=x\\\\\\\\x09y\"",
          "",
          "---------------"
        ],
        "tests/testcommon.c||tests/testcommon.c": [
          "File: tests/testcommon.c -> tests/testcommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1557:     }",
          "1558: }",
          "1560: int",
          "1561: main (int argc, char *argv[])",
          "1562: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1560: typedef struct {",
          "1561:   const char        *in;",
          "1562:   FlatpakEscapeFlags flags;",
          "1563:   const char        *out;",
          "1564: } EscapeData;",
          "1566: static EscapeData escapes[] = {",
          "1567:   {\"abc def\", FLATPAK_ESCAPE_DEFAULT, \"abc def\"},",
          "1568:   {\"\u3084\u3042\", FLATPAK_ESCAPE_DEFAULT, \"\u3084\u3042\"},",
          "1569:   {\"\\033[;1m\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x1B[;1m'\"},",
          "1571:   {\"\\u061C\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\u061C'\"},",
          "1573:   {\"\\xF0\\x93\\x90\\xBF\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\U0001343F'\"},",
          "1575:   {\"\\xD8\\1\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\xD8\\\\x01'\"},",
          "1576:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DEFAULT, \"'\\\\x08 \\\\x0A abc \\\\' \\\\\\\\'\"},",
          "1577:   {\"\\b \\n abc ' \\\\\", FLATPAK_ESCAPE_DO_NOT_QUOTE, \"\\\\x08 \\\\x0A abc ' \\\\\\\\\"},",
          "1578:   {\"abc\\tdef\\n\\033[;1m ghi\\b\", FLATPAK_ESCAPE_ALLOW_NEWLINES | FLATPAK_ESCAPE_DO_NOT_QUOTE,",
          "1579:    \"abc\\\\x09def\\n\\\\x1B[;1m ghi\\\\x08\"},",
          "1580: };",
          "1583: static void",
          "1584: test_string_escape (void)",
          "1585: {",
          "1586:   gsize idx;",
          "1588:   for (idx = 0; idx < G_N_ELEMENTS (escapes); idx++)",
          "1589:     {",
          "1590:       EscapeData *data = &escapes[idx];",
          "1591:       g_autofree char *ret = NULL;",
          "1593:       ret = flatpak_escape_string (data->in, data->flags);",
          "1594:       g_assert_cmpstr (ret, ==, data->out);",
          "1595:     }",
          "1596: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1585:   g_test_add_func (\"/common/dconf-app-id\", test_dconf_app_id);",
          "1586:   g_test_add_func (\"/common/dconf-paths\", test_dconf_paths);",
          "1587:   g_test_add_func (\"/common/decompose-ref\", test_decompose);",
          "1589:   g_test_add_func (\"/app/looks-like-branch\", test_looks_like_branch);",
          "1590:   g_test_add_func (\"/app/columns\", test_columns);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1626:   g_test_add_func (\"/common/string-escape\", test_string_escape);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "872ba2db4c5f85b2d276e970b534e512bb3c488c",
      "candidate_info": {
        "commit_hash": "872ba2db4c5f85b2d276e970b534e512bb3c488c",
        "repo": "flatpak/flatpak",
        "commit_url": "https://github.com/flatpak/flatpak/commit/872ba2db4c5f85b2d276e970b534e512bb3c488c",
        "files": [
          "common/flatpak-context.c",
          "common/flatpak-utils-private.h",
          "common/flatpak-utils.c",
          "tests/test-context.c",
          "tests/testcommon.c"
        ],
        "message": "Reject paths given to --filesystem/--persist with special characters\n\nThere isn't much in the way of legit reasons for this, but it's a\npotential security footgun when displaying the text.\n\nCVE-2023-28101, GHSA-h43h-fwqx-mpp8\n\nSigned-off-by: Ryan Gonzalez <ryan.gonzalez@collabora.com>\nCo-authored-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "common/flatpak-context.c||common/flatpak-context.c",
          "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
          "common/flatpak-utils.c||common/flatpak-utils.c",
          "tests/test-context.c||tests/test-context.c",
          "tests/testcommon.c||tests/testcommon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/testcommon.c||tests/testcommon.c"
          ],
          "candidate": [
            "common/flatpak-utils-private.h||common/flatpak-utils-private.h",
            "common/flatpak-utils.c||common/flatpak-utils.c",
            "tests/testcommon.c||tests/testcommon.c"
          ]
        }
      },
      "candidate_diff": {
        "common/flatpak-context.c||common/flatpak-context.c": [
          "File: common/flatpak-context.c -> common/flatpak-context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:                        g_ptr_array_free (new, FALSE));",
          "489: }",
          "492: flatpak_context_set_persistent (FlatpakContext *context,",
          "494: {",
          "495:   g_hash_table_insert (context->persistent, g_strdup (path), GINT_TO_POINTER (1));",
          "496: }",
          "498: static gboolean",
          "",
          "[Removed Lines]",
          "491: static void",
          "493:                                 const char     *path)",
          "",
          "[Added Lines]",
          "492: static gboolean",
          "494:                                 const char     *path,",
          "495:                                 GError        **error)",
          "497:   if (!flatpak_validate_path_characters (path, error))",
          "498:     return FALSE;",
          "501:   return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:   g_autofree char *filesystem = NULL;",
          "855:   char *slash;",
          "857:   filesystem = parse_filesystem_flags (filesystem_and_mode, negated, mode_out, error);",
          "858:   if (filesystem == NULL)",
          "859:     return FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:   if (!flatpak_validate_path_characters (filesystem_and_mode, error))",
          "864:     return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1510: {",
          "1511:   FlatpakContext *context = data;",
          "1515: }",
          "1517: static gboolean option_no_desktop_deprecated;",
          "",
          "[Removed Lines]",
          "1513:   flatpak_context_set_persistent (context, value);",
          "1514:   return TRUE;",
          "",
          "[Added Lines]",
          "1522:   return flatpak_context_set_persistent (context, value, error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1703:         {",
          "1704:           const char *fs = parse_negated (filesystems[i], &remove);",
          "1705:           g_autofree char *filesystem = NULL;",
          "1706:           FlatpakFilesystemMode mode;",
          "1708:           if (!flatpak_context_parse_filesystem (fs, remove,",
          "1711:           else",
          "1712:             {",
          "1713:               g_assert (mode == FLATPAK_FILESYSTEM_MODE_NONE || !remove);",
          "",
          "[Removed Lines]",
          "1709:                                                  &filesystem, &mode, NULL))",
          "1710:             g_debug (\"Unknown filesystem type %s\", filesystems[i]);",
          "",
          "[Added Lines]",
          "1714:           g_autoptr(GError) local_error = NULL;",
          "1718:                                                  &filesystem, &mode, &local_error))",
          "1719:             {",
          "1720:               if (g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA))",
          "1721:                 {",
          "1723:                   g_propagate_error (error, g_steal_pointer (&local_error));",
          "1724:                   return FALSE;",
          "1725:                 }",
          "1726:               else",
          "1727:                 {",
          "1728:                   g_debug (\"Unknown filesystem type %s\", filesystems[i]);",
          "1729:                   g_clear_error (&local_error);",
          "1730:                 }",
          "1731:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1724:         return FALSE;",
          "1726:       for (i = 0; persistent[i] != NULL; i++)",
          "1728:     }",
          "1730:   if (g_key_file_has_group (metakey, FLATPAK_METADATA_GROUP_SESSION_BUS_POLICY))",
          "",
          "[Removed Lines]",
          "1727:         flatpak_context_set_persistent (context, persistent[i]);",
          "",
          "[Added Lines]",
          "1748:         if (!flatpak_context_set_persistent (context, persistent[i], error))",
          "1749:           return FALSE;",
          "",
          "---------------"
        ],
        "common/flatpak-utils-private.h||common/flatpak-utils-private.h": [
          "File: common/flatpak-utils-private.h -> common/flatpak-utils-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "924: void   flatpak_print_escaped_string (const char        *s,",
          "925:                                      FlatpakEscapeFlags flags);",
          "927: #define FLATPAK_MESSAGE_ID \"c7b39b1e006b464599465e105b361485\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927: gboolean flatpak_validate_path_characters (const char *path,",
          "928:                                            GError    **error);",
          "",
          "---------------"
        ],
        "common/flatpak-utils.c||common/flatpak-utils.c": [
          "File: common/flatpak-utils.c -> common/flatpak-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9068:     g_string_append_printf (result, \"\\\\U%08X\", c);",
          "9069: }",
          "9071: char *",
          "9072: flatpak_escape_string (const char        *s,",
          "9073:                        FlatpakEscapeFlags flags)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9071: static char *",
          "9072: escape_character (gunichar c)",
          "9073: {",
          "9074:   g_autoptr(GString) res = g_string_new (\"\");",
          "9075:   append_hex_escaped_character (res, c);",
          "9076:   return g_string_free (g_steal_pointer (&res), FALSE);",
          "9077: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9118:   g_autofree char *escaped = flatpak_escape_string (s, flags);",
          "9119:   g_print (\"%s\", escaped);",
          "9120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9130: gboolean",
          "9131: flatpak_validate_path_characters (const char *path,",
          "9132:                                   GError    **error)",
          "9133: {",
          "9134:   while (*path)",
          "9135:     {",
          "9136:       gunichar c = g_utf8_get_char_validated (path, -1);",
          "9137:       if (c == (gunichar)-1 || c == (gunichar)-2)",
          "9138:         {",
          "9141:           g_autofree char *escaped_char = escape_character ((unsigned char)*path);",
          "9142:           g_autofree char *escaped = flatpak_escape_string (path, FLATPAK_ESCAPE_DEFAULT);",
          "9143:           g_set_error (error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA,",
          "9144:                        \"Non-UTF8 byte %s in path %s\", escaped_char, escaped);",
          "9145:           return FALSE;",
          "9146:         }",
          "9147:       else if (!is_char_safe (c))",
          "9148:         {",
          "9149:           g_autofree char *escaped_char = escape_character (c);",
          "9150:           g_autofree char *escaped = flatpak_escape_string (path, FLATPAK_ESCAPE_DEFAULT);",
          "9151:           g_set_error (error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA,",
          "9152:                        \"Non-graphical character %s in path %s\", escaped_char, escaped);",
          "9153:           return FALSE;",
          "9154:         }",
          "9156:       path = g_utf8_find_next_char (path, NULL);",
          "9157:     }",
          "9159:   return TRUE;",
          "9160: }",
          "",
          "---------------"
        ],
        "tests/test-context.c||tests/test-context.c": [
          "File: tests/test-context.c -> tests/test-context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: }",
          "131: static void context_parse_args (FlatpakContext *context,",
          "132:                                 ...) G_GNUC_NULL_TERMINATED;",
          "134: static void",
          "135: context_parse_args (FlatpakContext *context,",
          "136:                     ...)",
          "137: {",
          "139:   g_autoptr(GOptionContext) oc = NULL;",
          "140:   g_autoptr(GOptionGroup) group = NULL;",
          "141:   g_autoptr(GPtrArray) args = g_ptr_array_new_with_free_func (g_free);",
          "",
          "[Removed Lines]",
          "138:   g_autoptr(GError) local_error = NULL;",
          "",
          "[Added Lines]",
          "132:                                 GError        **error,",
          "137:                     GError        **error,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   g_ptr_array_add (args, g_strdup (\"argv[0]\"));",
          "150:   while ((arg = va_arg (ap, const char *)) != NULL)",
          "151:     g_ptr_array_add (args, g_strdup (arg));",
          "",
          "[Removed Lines]",
          "148:   va_start (ap, context);",
          "",
          "[Added Lines]",
          "149:   va_start (ap, error);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:   oc = g_option_context_new (\"\");",
          "159:   group = flatpak_context_get_options (context);",
          "160:   g_option_context_add_group (oc, group);",
          "163: }",
          "165: static void",
          "",
          "[Removed Lines]",
          "161:   g_option_context_parse_strv (oc, &argv, &local_error);",
          "162:   g_assert_no_error (local_error);",
          "",
          "[Added Lines]",
          "162:   g_option_context_parse_strv (oc, &argv, error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:       g_autoptr(FlatpakContext) lowest = flatpak_context_new ();",
          "180:       g_autoptr(FlatpakContext) middle = flatpak_context_new ();",
          "181:       g_autoptr(FlatpakContext) highest = flatpak_context_new ();",
          "182:       gpointer value;",
          "184:       context_parse_args (lowest,",
          "185:                           \"--filesystem=/one\",",
          "186:                           NULL);",
          "187:       context_parse_args (middle,",
          "188:                           \"--nofilesystem=host:reset\",",
          "189:                           \"--filesystem=/two\",",
          "190:                           NULL);",
          "191:       context_parse_args (highest,",
          "192:                           \"--nofilesystem=host\",",
          "193:                           \"--filesystem=/three\",",
          "194:                           NULL);",
          "196:       g_assert_false (g_hash_table_lookup_extended (lowest->filesystems, \"host\", NULL, NULL));",
          "197:       g_assert_false (g_hash_table_lookup_extended (lowest->filesystems, \"host-reset\", NULL, NULL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:       g_autoptr(GError) local_error = NULL;",
          "186:                           &local_error,",
          "189:       g_assert_no_error (local_error);",
          "191:                           &local_error,",
          "195:       g_assert_no_error (local_error);",
          "197:                           &local_error,",
          "201:       g_assert_no_error (local_error);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:       gpointer value;",
          "275:       context_parse_args (lowest,",
          "276:                           \"--filesystem=/one\",",
          "277:                           NULL);",
          "278:       context_parse_args (mid_low,",
          "279:                           \"--nofilesystem=host:reset\",",
          "280:                           \"--filesystem=/two\",",
          "281:                           NULL);",
          "282:       context_parse_args (mid_high,",
          "283:                           \"--filesystem=host\",",
          "284:                           \"--filesystem=/three\",",
          "285:                           NULL);",
          "286:       context_parse_args (highest,",
          "287:                           \"--nofilesystem=host\",",
          "288:                           \"--filesystem=/four\",",
          "289:                           NULL);",
          "291:       g_assert_false (g_hash_table_lookup_extended (lowest->filesystems, \"host\", NULL, NULL));",
          "292:       g_assert_false (g_hash_table_lookup_extended (lowest->filesystems, \"host-reset\", NULL, NULL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:                           &local_error,",
          "286:       g_assert_no_error (local_error);",
          "288:                           &local_error,",
          "292:       g_assert_no_error (local_error);",
          "294:                           &local_error,",
          "298:       g_assert_no_error (local_error);",
          "300:                           &local_error,",
          "304:       g_assert_no_error (local_error);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:     }",
          "428: }",
          "430: int",
          "431: main (int argc, char *argv[])",
          "432: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445: const char *invalid_path_args[] = {",
          "446:   \"--filesystem=/\\033[J:ro\",",
          "447:   \"--filesystem=/\\033[J\",",
          "448:   \"--persist=\\033[J\",",
          "449: };",
          "452: static void",
          "453: test_validate_path_args (void)",
          "454: {",
          "455:   gsize idx;",
          "457:   for (idx = 0; idx < G_N_ELEMENTS (invalid_path_args); idx++)",
          "458:     {",
          "459:       g_autoptr(FlatpakContext) context = flatpak_context_new ();",
          "460:       g_autoptr(GError) local_error = NULL;",
          "461:       const char *path = invalid_path_args[idx];",
          "463:       context_parse_args (context, &local_error, path, NULL);",
          "464:       g_assert_error (local_error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA);",
          "465:       g_assert (strstr (local_error->message, \"Non-graphical character\"));",
          "466:     }",
          "467: }",
          "469: typedef struct {",
          "470:   const char *key;",
          "471:   const char *value;",
          "472: } PathValidityData;",
          "474: PathValidityData invalid_path_meta[] = {",
          "475:   {FLATPAK_METADATA_KEY_FILESYSTEMS, \"\\033[J\"},",
          "476:   {FLATPAK_METADATA_KEY_PERSISTENT, \"\\033[J\"},",
          "477: };",
          "480: static void",
          "481: test_validate_path_meta (void)",
          "482: {",
          "483:   gsize idx;",
          "485:   for (idx = 0; idx < G_N_ELEMENTS (invalid_path_meta); idx++)",
          "486:     {",
          "487:       g_autoptr(FlatpakContext) context = flatpak_context_new ();",
          "488:       g_autoptr(GKeyFile) metakey = g_key_file_new ();",
          "489:       g_autoptr(GError) local_error = NULL;",
          "490:       PathValidityData *data = &invalid_path_meta[idx];",
          "491:       gboolean ret = FALSE;",
          "493:       g_key_file_set_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,",
          "494:                                   data->key, &data->value, 1);",
          "496:       ret = flatpak_context_load_metadata (context, metakey, &local_error);",
          "497:       g_assert_false (ret);",
          "498:       g_assert_error (local_error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA);",
          "499:       g_assert (strstr (local_error->message, \"Non-graphical character\"));",
          "500:     }",
          "502: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   g_test_add_func (\"/context/env\", test_context_env);",
          "436:   g_test_add_func (\"/context/env-fd\", test_context_env_fd);",
          "437:   g_test_add_func (\"/context/merge-fs\", test_context_merge_fs);",
          "439:   return g_test_run ();",
          "440: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:   g_test_add_func (\"/context/validate-path-args\", test_validate_path_args);",
          "513:   g_test_add_func (\"/context/validate-path-meta\", test_validate_path_meta);",
          "",
          "---------------"
        ],
        "tests/testcommon.c||tests/testcommon.c": [
          "File: tests/testcommon.c -> tests/testcommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1875:     }",
          "1876: }",
          "1878: int",
          "1879: main (int argc, char *argv[])",
          "1880: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1879: typedef struct {",
          "1880:   const char *path;",
          "1881:   gboolean ret;",
          "1882: } PathValidityData;",
          "1884: static PathValidityData paths[] = {",
          "1885:   {\"/a/b/../c.def\", TRUE},",
          "1886:   {\"\u3084\u3042\", TRUE},",
          "1888:   {\"\\u061C\", FALSE},",
          "1891:   {\"\\xF0\\x93\\x90\\xBF\", FALSE},",
          "1893:   {\"\\xD8\\1\", FALSE},",
          "1894: };",
          "1897: static void",
          "1898: test_validate_path_characters (void)",
          "1899: {",
          "1900:   gsize idx;",
          "1902:   for (idx = 0; idx < G_N_ELEMENTS (paths); idx++)",
          "1903:     {",
          "1904:       PathValidityData *data = &paths[idx];",
          "1905:       gboolean ret = FALSE;",
          "1907:       ret = flatpak_validate_path_characters (data->path, NULL);",
          "1908:       g_assert_cmpint (ret, ==, data->ret);",
          "1909:     }",
          "1910: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1909:   g_test_add_func (\"/common/str-is-integer\", test_str_is_integer);",
          "1910:   g_test_add_func (\"/common/parse-x11-display\", test_parse_x11_display);",
          "1911:   g_test_add_func (\"/common/string-escape\", test_string_escape);",
          "1913:   g_test_add_func (\"/app/looks-like-branch\", test_looks_like_branch);",
          "1914:   g_test_add_func (\"/app/columns\", test_columns);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1946:   g_test_add_func (\"/common/validate-path-characters\", test_validate_path_characters);",
          "",
          "---------------"
        ]
      }
    }
  ]
}