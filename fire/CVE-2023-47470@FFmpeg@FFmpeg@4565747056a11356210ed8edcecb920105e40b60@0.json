{
  "cve_id": "CVE-2023-47470",
  "cve_desc": "Buffer Overflow vulnerability in Ffmpeg before github commit 4565747056a11356210ed8edcecb920105e40b60 allows a remote attacker to achieve an out-of-array write, execute arbitrary code, and cause a denial of service (DoS) via the ref_pic_list_struct function in libavcodec/evc_ps.c",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "4565747056a11356210ed8edcecb920105e40b60",
  "patch_info": {
    "commit_hash": "4565747056a11356210ed8edcecb920105e40b60",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4565747056a11356210ed8edcecb920105e40b60",
    "files": [
      "libavcodec/evc_ps.c"
    ],
    "message": "avcodec/evc_ps: Check ref_pic_num and sps_max_dec_pic_buffering_minus1\n\nFixes: out of array write\n\nFound-by: dongsookim@korea.ac.kr\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
    ]
  },
  "patch_diff": {
    "libavcodec/evc_ps.c||libavcodec/evc_ps.c": [
      "File: libavcodec/evc_ps.c -> libavcodec/evc_ps.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #define EXTENDED_SAR 255",
      "28: {",
      "29:     uint32_t delta_poc_st, strp_entry_sign_flag = 0;",
      "30:     rpl->ref_pic_num = get_ue_golomb_long(gb);",
      "31:     if (rpl->ref_pic_num > 0) {",
      "32:         delta_poc_st = get_ue_golomb_long(gb);",
      "",
      "[Removed Lines]",
      "27: static int ref_pic_list_struct(GetBitContext *gb, RefPicListStruct *rpl)",
      "",
      "[Added Lines]",
      "27: static int ref_pic_list_struct(EVCParserSPS *sps, GetBitContext *gb, RefPicListStruct *rpl)",
      "32:     if ((unsigned)rpl->ref_pic_num  > sps->sps_max_dec_pic_buffering_minus1)",
      "33:         return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "239:         sps->max_num_tid0_ref_pics = get_ue_golomb_31(gb);",
      "240:     else {",
      "241:         sps->sps_max_dec_pic_buffering_minus1 = get_ue_golomb_long(gb);",
      "242:         sps->long_term_ref_pic_flag = get_bits1(gb);",
      "243:         sps->rpl1_same_as_rpl0_flag = get_bits1(gb);",
      "244:         sps->num_ref_pic_list_in_sps[0] = get_ue_golomb(gb);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246:         if ((unsigned)sps->sps_max_dec_pic_buffering_minus1 > 16 - 1)",
      "247:             return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "248:             goto fail;",
      "249:         }",
      "254:         if (!sps->rpl1_same_as_rpl0_flag) {",
      "255:             sps->num_ref_pic_list_in_sps[1] = get_ue_golomb(gb);",
      "",
      "[Removed Lines]",
      "251:         for (int i = 0; i < sps->num_ref_pic_list_in_sps[0]; ++i)",
      "252:             ref_pic_list_struct(gb, &sps->rpls[0][i]);",
      "",
      "[Added Lines]",
      "257:         for (int i = 0; i < sps->num_ref_pic_list_in_sps[0]; ++i) {",
      "258:             ret = ref_pic_list_struct(sps, gb, &sps->rpls[0][i]);",
      "259:             if (ret < 0)",
      "260:                 goto fail;",
      "261:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:                 ret = AVERROR_INVALIDDATA;",
      "258:                 goto fail;",
      "259:             }",
      "262:         }",
      "263:     }",
      "",
      "[Removed Lines]",
      "260:             for (int i = 0; i < sps->num_ref_pic_list_in_sps[1]; ++i)",
      "261:                 ref_pic_list_struct(gb, &sps->rpls[1][i]);",
      "",
      "[Added Lines]",
      "269:             for (int i = 0; i < sps->num_ref_pic_list_in_sps[1]; ++i) {",
      "270:                 ret = ref_pic_list_struct(sps, gb, &sps->rpls[1][i]);",
      "271:                 if (ret < 0)",
      "272:                     goto fail;",
      "273:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "378f1b6a393e7bf0ceb50a9454e3664a599d84d1",
      "candidate_info": {
        "commit_hash": "378f1b6a393e7bf0ceb50a9454e3664a599d84d1",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/378f1b6a393e7bf0ceb50a9454e3664a599d84d1",
        "files": [
          "libavcodec/evc_ps.c"
        ],
        "message": "avcodec/evc_ps: Fix leak on error\n\nRegression since 4565747056a11356210ed8edcecb920105e40b60.\nFixes Coverity ticket #1545072.\n\nSigned-off-by: Andreas Rheinhardt <andreas.rheinhardt@outlook.com>",
        "before_after_code_files": [
          "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
          ],
          "candidate": [
            "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/evc_ps.c||libavcodec/evc_ps.c": [
          "File: libavcodec/evc_ps.c -> libavcodec/evc_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:         sps->max_num_tid0_ref_pics = get_ue_golomb_31(gb);",
          "256:     else {",
          "257:         sps->sps_max_dec_pic_buffering_minus1 = get_ue_golomb_long(gb);",
          "260:         sps->long_term_ref_pic_flag = get_bits1(gb);",
          "261:         sps->rpl1_same_as_rpl0_flag = get_bits1(gb);",
          "262:         sps->num_ref_pic_list_in_sps[0] = get_ue_golomb(gb);",
          "",
          "[Removed Lines]",
          "258:         if ((unsigned)sps->sps_max_dec_pic_buffering_minus1 > 16 - 1)",
          "259:             return AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "258:         if ((unsigned)sps->sps_max_dec_pic_buffering_minus1 > 16 - 1) {",
          "259:             ret = AVERROR_INVALIDDATA;",
          "260:             goto fail;",
          "261:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "156f53e9879deefd845f1beffb5c1cadb5ad0ac3",
      "candidate_info": {
        "commit_hash": "156f53e9879deefd845f1beffb5c1cadb5ad0ac3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/156f53e9879deefd845f1beffb5c1cadb5ad0ac3",
        "files": [
          "libavcodec/evc_ps.c"
        ],
        "message": "avcodec/evc_ps: make the sps parameter in ref_pic_list_struct const\n\nIt's not changed.\n\nSigned-off-by: James Almer <jamrial@gmail.com>",
        "before_after_code_files": [
          "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
          ],
          "candidate": [
            "libavcodec/evc_ps.c||libavcodec/evc_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/evc_ps.c||libavcodec/evc_ps.c": [
          "File: libavcodec/evc_ps.c -> libavcodec/evc_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define EXTENDED_SAR 255",
          "28: {",
          "29:     uint32_t delta_poc_st, strp_entry_sign_flag = 0;",
          "30:     rpl->ref_pic_num = get_ue_golomb_long(gb);",
          "",
          "[Removed Lines]",
          "27: static int ref_pic_list_struct(EVCParserSPS *sps, GetBitContext *gb, RefPicListStruct *rpl)",
          "",
          "[Added Lines]",
          "27: static int ref_pic_list_struct(const EVCParserSPS *sps, GetBitContext *gb, RefPicListStruct *rpl)",
          "",
          "---------------"
        ]
      }
    }
  ]
}