{
  "cve_id": "CVE-2022-29824",
  "cve_desc": "In libxml2 before 2.9.14, several buffer handling functions in buf.c (xmlBuf*) and tree.c (xmlBuffer*) don't check for integer overflows. This can result in out-of-bounds memory writes. Exploitation requires a victim to open a crafted, multi-gigabyte XML file. Other software using libxml2's buffer functions, for example libxslt through 1.1.35, is affected as well.",
  "repo": "GNOME/libxml2",
  "patch_hash": "2554a2408e09f13652049e5ffb0d26196b02ebab",
  "patch_info": {
    "commit_hash": "2554a2408e09f13652049e5ffb0d26196b02ebab",
    "repo": "GNOME/libxml2",
    "commit_url": "https://github.com/GNOME/libxml2/commit/2554a2408e09f13652049e5ffb0d26196b02ebab",
    "files": [
      "buf.c",
      "tree.c"
    ],
    "message": "[CVE-2022-29824] Fix integer overflows in xmlBuf and xmlBuffer\n\nIn several places, the code handling string buffers didn't check for\ninteger overflow or used wrong types for buffer sizes. This could\nresult in out-of-bounds writes or other memory errors when working on\nlarge, multi-gigabyte buffers.\n\nThanks to Felix Wilhelm for the report.",
    "before_after_code_files": [
      "buf.c||buf.c",
      "tree.c||tree.c"
    ]
  },
  "patch_diff": {
    "buf.c||buf.c": [
      "File: buf.c -> buf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include \"buf.h\"",
      "33: #define WITH_BUFFER_COMPAT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #ifndef SIZE_MAX",
      "34: #define SIZE_MAX ((size_t) -1)",
      "35: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156: xmlBufCreateSize(size_t size) {",
      "157:     xmlBufPtr ret;",
      "159:     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));",
      "160:     if (ret == NULL) {",
      "161:  xmlBufMemoryError(NULL, \"creating buffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:     if (size == SIZE_MAX)",
      "164:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "166:     ret->error = 0;",
      "167:     ret->buffer = NULL;",
      "168:     ret->alloc = xmlBufferAllocScheme;",
      "171:     if (ret->size){",
      "172:         ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar));",
      "173:         if (ret->content == NULL) {",
      "",
      "[Removed Lines]",
      "170:     ret->compat_size = (int) ret->size;",
      "",
      "[Added Lines]",
      "176:     ret->compat_size = (ret->size > INT_MAX ? INT_MAX : ret->size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "442:     CHECK_COMPAT(buf)",
      "444:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
      "446:         return(buf->size - buf->use);",
      "463:     if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
      "",
      "[Removed Lines]",
      "445:     if (buf->use + len < buf->size)",
      "454: #if 1",
      "455:     if (buf->size > (size_t) len)",
      "456:         size = buf->size * 2;",
      "457:     else",
      "458:         size = buf->use + len + 100;",
      "459: #else",
      "460:     size = buf->use + len + 100;",
      "461: #endif",
      "",
      "[Added Lines]",
      "451:     if (len < buf->size - buf->use)",
      "453:     if (len > SIZE_MAX - buf->use)",
      "454:         return(0);",
      "456:     if (buf->size > (size_t) len) {",
      "457:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
      "458:     } else {",
      "459:         size = buf->use + len;",
      "460:         size = size > SIZE_MAX - 100 ? SIZE_MAX : size + 100;",
      "461:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "744: int",
      "745: xmlBufResize(xmlBufPtr buf, size_t size)",
      "746: {",
      "748:     xmlChar* rebuf = NULL;",
      "749:     size_t start_buf;",
      "",
      "[Removed Lines]",
      "747:     unsigned int newSize;",
      "",
      "[Added Lines]",
      "747:     size_t newSize;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "772:  case XML_BUFFER_ALLOC_IO:",
      "773:  case XML_BUFFER_ALLOC_DOUBLEIT:",
      "776:      while (size > newSize) {",
      "778:              xmlBufMemoryError(buf, \"growing buffer\");",
      "779:              return 0;",
      "780:          }",
      "",
      "[Removed Lines]",
      "775:      newSize = (buf->size ? buf->size*2 : size + 10);",
      "777:          if (newSize > UINT_MAX / 2) {",
      "",
      "[Added Lines]",
      "775:             if (buf->size == 0) {",
      "776:                 newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "777:             } else {",
      "778:                 newSize = buf->size;",
      "779:             }",
      "781:          if (newSize > SIZE_MAX / 2) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "782:      }",
      "783:      break;",
      "784:  case XML_BUFFER_ALLOC_EXACT:",
      "786:      break;",
      "787:         case XML_BUFFER_ALLOC_HYBRID:",
      "788:             if (buf->use < BASE_BUFFER_SIZE)",
      "789:                 newSize = size;",
      "790:             else {",
      "792:                 while (size > newSize) {",
      "794:                         xmlBufMemoryError(buf, \"growing buffer\");",
      "795:                         return 0;",
      "796:                     }",
      "",
      "[Removed Lines]",
      "785:      newSize = size+10;",
      "791:                 newSize = buf->size * 2;",
      "793:                     if (newSize > UINT_MAX / 2) {",
      "",
      "[Added Lines]",
      "789:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "795:                 newSize = buf->size;",
      "797:                     if (newSize > SIZE_MAX / 2) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "800:             break;",
      "802:  default:",
      "804:      break;",
      "805:     }",
      "",
      "[Removed Lines]",
      "803:      newSize = size+10;",
      "",
      "[Added Lines]",
      "807:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "867: int",
      "868: xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {",
      "871:     if ((str == NULL) || (buf == NULL) || (buf->error))",
      "872:  return -1;",
      "",
      "[Removed Lines]",
      "869:     unsigned int needSize;",
      "",
      "[Added Lines]",
      "873:     size_t needSize;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "888:     if (len < 0) return -1;",
      "889:     if (len == 0) return 0;",
      "893:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
      "",
      "[Removed Lines]",
      "891:     needSize = buf->use + len + 2;",
      "892:     if (needSize > buf->size){",
      "",
      "[Added Lines]",
      "895:     if ((size_t) len >= buf->size - buf->use) {",
      "896:         if ((size_t) len >= SIZE_MAX - buf->use)",
      "897:             return(-1);",
      "898:         needSize = buf->use + len + 1;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1026: int",
      "1027: xmlBufCCat(xmlBufPtr buf, const char *str) {",
      "1053: }",
      "",
      "[Removed Lines]",
      "1028:     const char *cur;",
      "1030:     if ((buf == NULL) || (buf->error))",
      "1031:         return(-1);",
      "1032:     CHECK_COMPAT(buf)",
      "1033:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
      "1034:     if (str == NULL) {",
      "1035: #ifdef DEBUG_BUFFER",
      "1036:         xmlGenericError(xmlGenericErrorContext,",
      "1037:   \"xmlBufCCat: str == NULL\\n\");",
      "1038: #endif",
      "1039:  return -1;",
      "1040:     }",
      "1041:     for (cur = str;*cur != 0;cur++) {",
      "1042:         if (buf->use  + 10 >= buf->size) {",
      "1043:             if (!xmlBufResize(buf, buf->use+10)){",
      "1044:   xmlBufMemoryError(buf, \"growing buffer\");",
      "1045:                 return XML_ERR_NO_MEMORY;",
      "1046:             }",
      "1047:         }",
      "1048:         buf->content[buf->use++] = *cur;",
      "1049:     }",
      "1050:     buf->content[buf->use] = 0;",
      "1051:     UPDATE_COMPAT(buf)",
      "1052:     return 0;",
      "",
      "[Added Lines]",
      "1034:     return xmlBufCat(buf, (const xmlChar *) str);",
      "",
      "---------------"
    ],
    "tree.c||tree.c": [
      "File: tree.c -> tree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7104: xmlBufferCreateSize(size_t size) {",
      "7105:     xmlBufferPtr ret;",
      "7107:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
      "7108:     if (ret == NULL) {",
      "7109:  xmlTreeErrMemory(\"creating buffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7107:     if (size >= UINT_MAX)",
      "7108:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7172:     if ((mem == NULL) || (size == 0))",
      "7173:         return(NULL);",
      "7175:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
      "7176:     if (ret == NULL) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7176:     if (size > UINT_MAX)",
      "7177:         return(NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7319: int",
      "7320: xmlBufferGrow(xmlBufferPtr buf, unsigned int len) {",
      "7322:     xmlChar *newbuf;",
      "7324:     if (buf == NULL) return(-1);",
      "7326:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
      "7344:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
      "7345:         size_t start_buf = buf->content - buf->contentIO;",
      "",
      "[Removed Lines]",
      "7321:     int size;",
      "7327:     if (len + buf->use < buf->size) return(0);",
      "7335: #if 1",
      "7336:     if (buf->size > len)",
      "7337:         size = buf->size * 2;",
      "7338:     else",
      "7339:         size = buf->use + len + 100;",
      "7340: #else",
      "7341:     size = buf->use + len + 100;",
      "7342: #endif",
      "",
      "[Added Lines]",
      "7325:     unsigned int size;",
      "7331:     if (len < buf->size - buf->use)",
      "7332:         return(0);",
      "7333:     if (len > UINT_MAX - buf->use)",
      "7334:         return(-1);",
      "7336:     if (buf->size > (size_t) len) {",
      "7337:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
      "7338:     } else {",
      "7339:         size = buf->use + len;",
      "7340:         size = size > UINT_MAX - 100 ? UINT_MAX : size + 100;",
      "7341:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7466:  case XML_BUFFER_ALLOC_IO:",
      "7467:  case XML_BUFFER_ALLOC_DOUBLEIT:",
      "7470:      while (size > newSize) {",
      "7471:          if (newSize > UINT_MAX / 2) {",
      "7472:              xmlTreeErrMemory(\"growing buffer\");",
      "",
      "[Removed Lines]",
      "7469:      newSize = (buf->size ? buf->size : size + 10);",
      "",
      "[Added Lines]",
      "7468:             if (buf->size == 0)",
      "7469:                 newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
      "7470:             else",
      "7471:                 newSize = buf->size;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "7476:      }",
      "7477:      break;",
      "7478:  case XML_BUFFER_ALLOC_EXACT:",
      "7480:      break;",
      "7481:         case XML_BUFFER_ALLOC_HYBRID:",
      "7482:             if (buf->use < BASE_BUFFER_SIZE)",
      "",
      "[Removed Lines]",
      "7479:      newSize = size+10;",
      "",
      "[Added Lines]",
      "7481:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "7494:             break;",
      "7496:  default:",
      "7498:      break;",
      "7499:     }",
      "",
      "[Removed Lines]",
      "7497:      newSize = size+10;",
      "",
      "[Added Lines]",
      "7499:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "7580:     if (len < 0) return -1;",
      "7581:     if (len == 0) return 0;",
      "7585:         if (!xmlBufferResize(buf, needSize)){",
      "7586:      xmlTreeErrMemory(\"growing buffer\");",
      "7587:             return XML_ERR_NO_MEMORY;",
      "",
      "[Removed Lines]",
      "7583:     needSize = buf->use + len + 2;",
      "7584:     if (needSize > buf->size){",
      "",
      "[Added Lines]",
      "7585:     if ((unsigned) len >= buf->size - buf->use) {",
      "7586:         if ((unsigned) len >= UINT_MAX - buf->use)",
      "7587:             return XML_ERR_NO_MEMORY;",
      "7588:         needSize = buf->use + len + 1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "7695: int",
      "7696: xmlBufferCCat(xmlBufferPtr buf, const char *str) {",
      "7720: }",
      "",
      "[Removed Lines]",
      "7697:     const char *cur;",
      "7699:     if (buf == NULL)",
      "7700:         return(-1);",
      "7701:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
      "7702:     if (str == NULL) {",
      "7703: #ifdef DEBUG_BUFFER",
      "7704:         xmlGenericError(xmlGenericErrorContext,",
      "7705:   \"xmlBufferCCat: str == NULL\\n\");",
      "7706: #endif",
      "7707:  return -1;",
      "7708:     }",
      "7709:     for (cur = str;*cur != 0;cur++) {",
      "7710:         if (buf->use  + 10 >= buf->size) {",
      "7711:             if (!xmlBufferResize(buf, buf->use+10)){",
      "7712:   xmlTreeErrMemory(\"growing buffer\");",
      "7713:                 return XML_ERR_NO_MEMORY;",
      "7714:             }",
      "7715:         }",
      "7716:         buf->content[buf->use++] = *cur;",
      "7717:     }",
      "7718:     buf->content[buf->use] = 0;",
      "7719:     return 0;",
      "",
      "[Added Lines]",
      "7701:     return xmlBufferCat(buf, (const xmlChar *) str);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c283d83eccd940bcde15634ac8c7f100e3caefd",
      "candidate_info": {
        "commit_hash": "6c283d83eccd940bcde15634ac8c7f100e3caefd",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/6c283d83eccd940bcde15634ac8c7f100e3caefd",
        "files": [
          "buf.c",
          "tree.c"
        ],
        "message": "[CVE-2022-29824] Fix integer overflows in xmlBuf and xmlBuffer\n\nIn several places, the code handling string buffers didn't check for\ninteger overflow or used wrong types for buffer sizes. This could\nresult in out-of-bounds writes or other memory errors when working on\nlarge, multi-gigabyte buffers.\n\nThanks to Felix Wilhelm for the report.",
        "before_after_code_files": [
          "buf.c||buf.c",
          "tree.c||tree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ],
          "candidate": [
            "buf.c||buf.c",
            "tree.c||tree.c"
          ]
        }
      },
      "candidate_diff": {
        "buf.c||buf.c": [
          "File: buf.c -> buf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"buf.h\"",
          "29: #define WITH_BUFFER_COMPAT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #ifndef SIZE_MAX",
          "30: #define SIZE_MAX ((size_t) -1)",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: xmlBufCreateSize(size_t size) {",
          "152:     xmlBufPtr ret;",
          "154:     ret = (xmlBufPtr) xmlMalloc(sizeof(xmlBuf));",
          "155:     if (ret == NULL) {",
          "156:  xmlBufMemoryError(NULL, \"creating buffer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:     if (size == SIZE_MAX)",
          "159:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:     CHECK_COMPAT(buf)",
          "431:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "433:         return(buf->size - buf->use);",
          "450:     if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "432:     if (buf->use + len < buf->size)",
          "441: #if 1",
          "442:     if (buf->size > (size_t) len)",
          "443:         size = buf->size * 2;",
          "444:     else",
          "445:         size = buf->use + len + 100;",
          "446: #else",
          "447:     size = buf->use + len + 100;",
          "448: #endif",
          "",
          "[Added Lines]",
          "438:     if (len < buf->size - buf->use)",
          "440:     if (len > SIZE_MAX - buf->use)",
          "441:         return(0);",
          "443:     if (buf->size > (size_t) len) {",
          "444:         size = buf->size > SIZE_MAX / 2 ? SIZE_MAX : buf->size * 2;",
          "445:     } else {",
          "446:         size = buf->use + len;",
          "447:         size = size > SIZE_MAX - 100 ? SIZE_MAX : size + 100;",
          "448:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "731: int",
          "732: xmlBufResize(xmlBufPtr buf, size_t size)",
          "733: {",
          "735:     xmlChar* rebuf = NULL;",
          "736:     size_t start_buf;",
          "",
          "[Removed Lines]",
          "734:     unsigned int newSize;",
          "",
          "[Added Lines]",
          "734:     size_t newSize;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "759:  case XML_BUFFER_ALLOC_IO:",
          "760:  case XML_BUFFER_ALLOC_DOUBLEIT:",
          "763:      while (size > newSize) {",
          "765:              xmlBufMemoryError(buf, \"growing buffer\");",
          "766:              return 0;",
          "767:          }",
          "",
          "[Removed Lines]",
          "762:      newSize = (buf->size ? buf->size*2 : size + 10);",
          "764:          if (newSize > UINT_MAX / 2) {",
          "",
          "[Added Lines]",
          "762:             if (buf->size == 0) {",
          "763:                 newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "764:             } else {",
          "765:                 newSize = buf->size;",
          "766:             }",
          "768:          if (newSize > SIZE_MAX / 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "769:      }",
          "770:      break;",
          "771:  case XML_BUFFER_ALLOC_EXACT:",
          "773:      break;",
          "774:         case XML_BUFFER_ALLOC_HYBRID:",
          "775:             if (buf->use < BASE_BUFFER_SIZE)",
          "776:                 newSize = size;",
          "777:             else {",
          "779:                 while (size > newSize) {",
          "781:                         xmlBufMemoryError(buf, \"growing buffer\");",
          "782:                         return 0;",
          "783:                     }",
          "",
          "[Removed Lines]",
          "772:      newSize = size+10;",
          "778:                 newSize = buf->size * 2;",
          "780:                     if (newSize > UINT_MAX / 2) {",
          "",
          "[Added Lines]",
          "776:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "782:                 newSize = buf->size;",
          "784:                     if (newSize > SIZE_MAX / 2) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "787:             break;",
          "789:  default:",
          "791:      break;",
          "792:     }",
          "",
          "[Removed Lines]",
          "790:      newSize = size+10;",
          "",
          "[Added Lines]",
          "794:             newSize = (size > SIZE_MAX - 10 ? SIZE_MAX : size + 10);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "854: int",
          "855: xmlBufAdd(xmlBufPtr buf, const xmlChar *str, int len) {",
          "858:     if ((str == NULL) || (buf == NULL) || (buf->error))",
          "859:  return -1;",
          "",
          "[Removed Lines]",
          "856:     unsigned int needSize;",
          "",
          "[Added Lines]",
          "860:     size_t needSize;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "875:     if (len < 0) return -1;",
          "876:     if (len == 0) return 0;",
          "880:  if (buf->alloc == XML_BUFFER_ALLOC_BOUNDED) {",
          "",
          "[Removed Lines]",
          "878:     needSize = buf->use + len + 2;",
          "879:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "882:     if ((size_t) len >= buf->size - buf->use) {",
          "883:         if ((size_t) len >= SIZE_MAX - buf->use)",
          "884:             return(-1);",
          "885:         needSize = buf->use + len + 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1013: int",
          "1014: xmlBufCCat(xmlBufPtr buf, const char *str) {",
          "1040: }",
          "",
          "[Removed Lines]",
          "1015:     const char *cur;",
          "1017:     if ((buf == NULL) || (buf->error))",
          "1018:         return(-1);",
          "1019:     CHECK_COMPAT(buf)",
          "1020:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "1021:     if (str == NULL) {",
          "1022: #ifdef DEBUG_BUFFER",
          "1023:         xmlGenericError(xmlGenericErrorContext,",
          "1024:   \"xmlBufCCat: str == NULL\\n\");",
          "1025: #endif",
          "1026:  return -1;",
          "1027:     }",
          "1028:     for (cur = str;*cur != 0;cur++) {",
          "1029:         if (buf->use  + 10 >= buf->size) {",
          "1030:             if (!xmlBufResize(buf, buf->use+10)){",
          "1031:   xmlBufMemoryError(buf, \"growing buffer\");",
          "1032:                 return XML_ERR_NO_MEMORY;",
          "1033:             }",
          "1034:         }",
          "1035:         buf->content[buf->use++] = *cur;",
          "1036:     }",
          "1037:     buf->content[buf->use] = 0;",
          "1038:     UPDATE_COMPAT(buf)",
          "1039:     return 0;",
          "",
          "[Added Lines]",
          "1021:     return xmlBufCat(buf, (const xmlChar *) str);",
          "",
          "---------------"
        ],
        "tree.c||tree.c": [
          "File: tree.c -> tree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7120: xmlBufferCreateSize(size_t size) {",
          "7121:     xmlBufferPtr ret;",
          "7123:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
          "7124:     if (ret == NULL) {",
          "7125:  xmlTreeErrMemory(\"creating buffer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7123:     if (size >= UINT_MAX)",
          "7124:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7188:     if ((mem == NULL) || (size == 0))",
          "7189:         return(NULL);",
          "7191:     ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer));",
          "7192:     if (ret == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7192:     if (size > UINT_MAX)",
          "7193:         return(NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7335: int",
          "7336: xmlBufferGrow(xmlBufferPtr buf, unsigned int len) {",
          "7338:     xmlChar *newbuf;",
          "7340:     if (buf == NULL) return(-1);",
          "7342:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return(0);",
          "7360:     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {",
          "7361:         size_t start_buf = buf->content - buf->contentIO;",
          "",
          "[Removed Lines]",
          "7337:     int size;",
          "7343:     if (len + buf->use < buf->size) return(0);",
          "7351: #if 1",
          "7352:     if (buf->size > len)",
          "7353:         size = buf->size * 2;",
          "7354:     else",
          "7355:         size = buf->use + len + 100;",
          "7356: #else",
          "7357:     size = buf->use + len + 100;",
          "7358: #endif",
          "",
          "[Added Lines]",
          "7341:     unsigned int size;",
          "7347:     if (len < buf->size - buf->use)",
          "7348:         return(0);",
          "7349:     if (len > UINT_MAX - buf->use)",
          "7350:         return(-1);",
          "7352:     if (buf->size > (size_t) len) {",
          "7353:         size = buf->size > UINT_MAX / 2 ? UINT_MAX : buf->size * 2;",
          "7354:     } else {",
          "7355:         size = buf->use + len;",
          "7356:         size = size > UINT_MAX - 100 ? UINT_MAX : size + 100;",
          "7357:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7482:  case XML_BUFFER_ALLOC_IO:",
          "7483:  case XML_BUFFER_ALLOC_DOUBLEIT:",
          "7486:      while (size > newSize) {",
          "7487:          if (newSize > UINT_MAX / 2) {",
          "7488:              xmlTreeErrMemory(\"growing buffer\");",
          "",
          "[Removed Lines]",
          "7485:      newSize = (buf->size ? buf->size : size + 10);",
          "",
          "[Added Lines]",
          "7484:             if (buf->size == 0)",
          "7485:                 newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);",
          "7486:             else",
          "7487:                 newSize = buf->size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7492:      }",
          "7493:      break;",
          "7494:  case XML_BUFFER_ALLOC_EXACT:",
          "7496:      break;",
          "7497:         case XML_BUFFER_ALLOC_HYBRID:",
          "7498:             if (buf->use < BASE_BUFFER_SIZE)",
          "",
          "[Removed Lines]",
          "7495:      newSize = size+10;",
          "",
          "[Added Lines]",
          "7497:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7510:             break;",
          "7512:  default:",
          "7514:      break;",
          "7515:     }",
          "",
          "[Removed Lines]",
          "7513:      newSize = size+10;",
          "",
          "[Added Lines]",
          "7515:      newSize = (size > UINT_MAX - 10 ? UINT_MAX : size + 10);;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7596:     if (len < 0) return -1;",
          "7597:     if (len == 0) return 0;",
          "7601:         if (!xmlBufferResize(buf, needSize)){",
          "7602:      xmlTreeErrMemory(\"growing buffer\");",
          "7603:             return XML_ERR_NO_MEMORY;",
          "",
          "[Removed Lines]",
          "7599:     needSize = buf->use + len + 2;",
          "7600:     if (needSize > buf->size){",
          "",
          "[Added Lines]",
          "7601:     if ((unsigned) len >= buf->size - buf->use) {",
          "7602:         if ((unsigned) len >= UINT_MAX - buf->use)",
          "7603:             return XML_ERR_NO_MEMORY;",
          "7604:         needSize = buf->use + len + 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7711: int",
          "7712: xmlBufferCCat(xmlBufferPtr buf, const char *str) {",
          "7736: }",
          "",
          "[Removed Lines]",
          "7713:     const char *cur;",
          "7715:     if (buf == NULL)",
          "7716:         return(-1);",
          "7717:     if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1;",
          "7718:     if (str == NULL) {",
          "7719: #ifdef DEBUG_BUFFER",
          "7720:         xmlGenericError(xmlGenericErrorContext,",
          "7721:   \"xmlBufferCCat: str == NULL\\n\");",
          "7722: #endif",
          "7723:  return -1;",
          "7724:     }",
          "7725:     for (cur = str;*cur != 0;cur++) {",
          "7726:         if (buf->use  + 10 >= buf->size) {",
          "7727:             if (!xmlBufferResize(buf, buf->use+10)){",
          "7728:   xmlTreeErrMemory(\"growing buffer\");",
          "7729:                 return XML_ERR_NO_MEMORY;",
          "7730:             }",
          "7731:         }",
          "7732:         buf->content[buf->use++] = *cur;",
          "7733:     }",
          "7734:     buf->content[buf->use] = 0;",
          "7735:     return 0;",
          "",
          "[Added Lines]",
          "7717:     return xmlBufferCat(buf, (const xmlChar *) str);",
          "",
          "---------------"
        ]
      }
    }
  ]
}