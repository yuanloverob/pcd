{
  "cve_id": "CVE-2021-27229",
  "cve_desc": "Mumble before 1.3.4 allows remote code execution if a victim navigates to a crafted URL on a server list and clicks on the Open Webpage text.",
  "repo": "mumble-voip/mumble",
  "patch_hash": "e59ee87abe249f345908c7d568f6879d16bfd648",
  "patch_info": {
    "commit_hash": "e59ee87abe249f345908c7d568f6879d16bfd648",
    "repo": "mumble-voip/mumble",
    "commit_url": "https://github.com/mumble-voip/mumble/commit/e59ee87abe249f345908c7d568f6879d16bfd648",
    "files": [
      "src/mumble/ConnectDialog.cpp"
    ],
    "message": "FIX(client): Only allow \"http\"/\"https\" for URLs in ConnectDialog\n\nOur public server list registration script doesn't have an URL scheme\nwhitelist for the website field.\n\nTurns out a malicious server can register itself with a dangerous URL in\nan attempt to attack a user's machine.\n\nUser interaction is required, as the URL has to be opened by\nright-clicking on the server entry and clicking on \"Open Webpage\".\n\nThis commit introduces a client-side whitelist, which only allows \"http\"\nand \"https\" schemes. We will also implement it in our public list.\n\nIn future we should probably add a warning QMessageBox informing the\nuser that there's no guarantee the URL is safe (regardless of the\nscheme).\n\nThanks a lot to https://positive.security for reporting the RCE\nvulnerability to us privately.",
    "before_after_code_files": [
      "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
    ]
  },
  "patch_diff": {
    "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp": [
      "File: src/mumble/ConnectDialog.cpp -> src/mumble/ConnectDialog.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1265: }",
      "1267: void ConnectDialog::on_qaUrl_triggered() {",
      "1270:   return;",
      "1273: }",
      "1275: void ConnectDialog::onFiltersTriggered(QAction *act) {",
      "",
      "[Removed Lines]",
      "1268:  ServerItem *si = static_cast<ServerItem *>(qtwServers->currentItem());",
      "1269:  if (! si || si->qsUrl.isEmpty())",
      "1272:  QDesktopServices::openUrl(QUrl(si->qsUrl));",
      "",
      "[Added Lines]",
      "1268:  auto *si = static_cast< const ServerItem * >(qtwServers->currentItem());",
      "1269:  if (!si || si->qsUrl.isEmpty()) {",
      "1271:  }",
      "1273:  const QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };",
      "1275:  const auto url = QUrl(si->qsUrl);",
      "1276:  if (allowedSchemes.contains(url.scheme())) {",
      "1277:   QDesktopServices::openUrl(url);",
      "1278:  } else {",
      "1280:   QMessageBox msgBox;",
      "1281:   msgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));",
      "1282:   msgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));",
      "1283:   msgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));",
      "1284:   msgBox.setIcon(QMessageBox::Warning);",
      "1285:   msgBox.exec();",
      "1286:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb28df24897498c195cf25014c5567cbeca4bb9b",
      "candidate_info": {
        "commit_hash": "fb28df24897498c195cf25014c5567cbeca4bb9b",
        "repo": "mumble-voip/mumble",
        "commit_url": "https://github.com/mumble-voip/mumble/commit/fb28df24897498c195cf25014c5567cbeca4bb9b",
        "files": [
          "src/mumble/mumble_en.ts"
        ],
        "message": "TRANSLATION: Update translation files\n\nScanning directory './src'...\nScanning directory './src/mumble'...\nUpdating 'src/mumble/mumble_en.ts'...\n    Found 1929 source text(s) (3 new and 1926 already existing)",
        "before_after_code_files": [
          "src/mumble/mumble_en.ts||src/mumble/mumble_en.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mumble-voip/mumble/pull/4739"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/mumble/mumble_en.ts||src/mumble/mumble_en.ts": [
          "File: src/mumble/mumble_en.ts -> src/mumble/mumble_en.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7925:         <translation type=\"unfinished\"></translation>",
          "7926:     </message>",
          "7927: </context>",
          "7928: <context>",
          "7929:     <name>RichTextEditor</name>",
          "7930:     <message>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7926:     </message>",
          "7927: </context>",
          "7928: <context>",
          "7929:     <message>",
          "7930:         <source>&lt;b&gt;Blocked URL scheme &quot;%1&quot;&lt;/b&gt;</source>",
          "7931:         <translation type=\"unfinished\"></translation>",
          "7932:     </message>",
          "7933:     <message>",
          "7934:         <source>The URL uses a scheme that has been blocked for security reasons.</source>",
          "7935:         <translation type=\"unfinished\"></translation>",
          "7936:     </message>",
          "7937:     <message>",
          "7938:         <source>Blocked URL: &quot;%1&quot;</source>",
          "7939:         <translation type=\"unfinished\"></translation>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e59ee87abe249f345908c7d568f6879d16bfd648",
      "candidate_info": {
        "commit_hash": "e59ee87abe249f345908c7d568f6879d16bfd648",
        "repo": "mumble-voip/mumble",
        "commit_url": "https://github.com/mumble-voip/mumble/commit/e59ee87abe249f345908c7d568f6879d16bfd648",
        "files": [
          "src/mumble/ConnectDialog.cpp"
        ],
        "message": "FIX(client): Only allow \"http\"/\"https\" for URLs in ConnectDialog\n\nOur public server list registration script doesn't have an URL scheme\nwhitelist for the website field.\n\nTurns out a malicious server can register itself with a dangerous URL in\nan attempt to attack a user's machine.\n\nUser interaction is required, as the URL has to be opened by\nright-clicking on the server entry and clicking on \"Open Webpage\".\n\nThis commit introduces a client-side whitelist, which only allows \"http\"\nand \"https\" schemes. We will also implement it in our public list.\n\nIn future we should probably add a warning QMessageBox informing the\nuser that there's no guarantee the URL is safe (regardless of the\nscheme).\n\nThanks a lot to https://positive.security for reporting the RCE\nvulnerability to us privately.",
        "before_after_code_files": [
          "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
          ],
          "candidate": [
            "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp": [
          "File: src/mumble/ConnectDialog.cpp -> src/mumble/ConnectDialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265: }",
          "1267: void ConnectDialog::on_qaUrl_triggered() {",
          "1270:   return;",
          "1273: }",
          "1275: void ConnectDialog::onFiltersTriggered(QAction *act) {",
          "",
          "[Removed Lines]",
          "1268:  ServerItem *si = static_cast<ServerItem *>(qtwServers->currentItem());",
          "1269:  if (! si || si->qsUrl.isEmpty())",
          "1272:  QDesktopServices::openUrl(QUrl(si->qsUrl));",
          "",
          "[Added Lines]",
          "1268:  auto *si = static_cast< const ServerItem * >(qtwServers->currentItem());",
          "1269:  if (!si || si->qsUrl.isEmpty()) {",
          "1271:  }",
          "1273:  const QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };",
          "1275:  const auto url = QUrl(si->qsUrl);",
          "1276:  if (allowedSchemes.contains(url.scheme())) {",
          "1277:   QDesktopServices::openUrl(url);",
          "1278:  } else {",
          "1280:   QMessageBox msgBox;",
          "1281:   msgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));",
          "1282:   msgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));",
          "1283:   msgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));",
          "1284:   msgBox.setIcon(QMessageBox::Warning);",
          "1285:   msgBox.exec();",
          "1286:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe7d212b95490c5b6cb20d91543c92b88d7aeb8e",
      "candidate_info": {
        "commit_hash": "fe7d212b95490c5b6cb20d91543c92b88d7aeb8e",
        "repo": "mumble-voip/mumble",
        "commit_url": "https://github.com/mumble-voip/mumble/commit/fe7d212b95490c5b6cb20d91543c92b88d7aeb8e",
        "files": [
          "src/mumble/ConnectDialog.cpp"
        ],
        "message": "FIX(client): Only allow \"http\"/\"https\" for URLs in ConnectDialog\n\nOur public server list registration script doesn't have an URL scheme\nwhitelist for the website field.\n\nTurns out a malicious server can register itself with a dangerous URL in\nan attempt to attack a user's machine.\n\nUser interaction is required, as the URL has to be opened by\nright-clicking on the server entry and clicking on \"Open Webpage\".\n\nThis commit introduces a client-side whitelist, which only allows \"http\"\nand \"https\" schemes. We will also implement it in our public list.\n\nIn future we should probably add a warning QMessageBox informing the\nuser that there's no guarantee the URL is safe (regardless of the\nscheme).\n\nThanks a lot to https://positive.security for reporting the RCE\nvulnerability to us privately.",
        "before_after_code_files": [
          "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
          ],
          "candidate": [
            "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mumble/ConnectDialog.cpp||src/mumble/ConnectDialog.cpp": [
          "File: src/mumble/ConnectDialog.cpp -> src/mumble/ConnectDialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1245: }",
          "1247: void ConnectDialog::on_qaUrl_triggered() {",
          "1250:   return;",
          "1253: }",
          "1255: void ConnectDialog::on_qtwServers_customContextMenuRequested(const QPoint &mpos) {",
          "",
          "[Removed Lines]",
          "1248:  ServerItem *si = static_cast< ServerItem * >(qtwServers->currentItem());",
          "1249:  if (!si || si->qsUrl.isEmpty())",
          "1252:  QDesktopServices::openUrl(QUrl(si->qsUrl));",
          "",
          "[Added Lines]",
          "1248:  auto *si = static_cast< const ServerItem * >(qtwServers->currentItem());",
          "1249:  if (!si || si->qsUrl.isEmpty()) {",
          "1251:  }",
          "1253:  const QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };",
          "1255:  const auto url = QUrl(si->qsUrl);",
          "1256:  if (allowedSchemes.contains(url.scheme())) {",
          "1257:   QDesktopServices::openUrl(url);",
          "1258:  } else {",
          "1260:   QMessageBox msgBox;",
          "1261:   msgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));",
          "1262:   msgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));",
          "1263:   msgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));",
          "1264:   msgBox.setIcon(QMessageBox::Warning);",
          "1265:   msgBox.exec();",
          "1266:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}