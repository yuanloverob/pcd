{
  "cve_id": "CVE-2023-41909",
  "cve_desc": "An issue was discovered in FRRouting FRR through 9.0. bgp_nlri_parse_flowspec in bgpd/bgp_flowspec.c processes malformed requests with no attributes, leading to a NULL pointer dereference.",
  "repo": "FRRouting/frr",
  "patch_hash": "cfd04dcb3e689754a72507d086ba3b9709fc5ed8",
  "patch_info": {
    "commit_hash": "cfd04dcb3e689754a72507d086ba3b9709fc5ed8",
    "repo": "FRRouting/frr",
    "commit_url": "https://github.com/FRRouting/frr/pull/13222/commits/cfd04dcb3e689754a72507d086ba3b9709fc5ed8",
    "files": [
      "bgpd/bgp_flowspec.c"
    ],
    "message": "bgpd: Limit flowspec to no attribute means a implicit withdrawal\n\nAll other parsing functions done from bgp_nlri_parse() assume\nno attributes == an implicit withdrawal.  Let's move\nbgp_nlri_parse_flowspec() into the same alignment.\n\nReported-by: Matteo Memelli <mmemelli@amazon.it>\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>",
    "before_after_code_files": [
      "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
    ]
  },
  "patch_diff": {
    "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c": [
      "File: bgpd/bgp_flowspec.c -> bgpd/bgp_flowspec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "98:  afi = packet->afi;",
      "99:  safi = packet->safi;",
      "101:  if (packet->length >= FLOWSPEC_NLRI_SIZELIMIT_EXTENDED) {",
      "102:   flog_err(EC_BGP_FLOWSPEC_PACKET,",
      "103:     \"BGP flowspec nlri length maximum reached (%u)\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:  if (!attr)",
      "106:   withdraw = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc1a551cb007cc8ed8b1ea0605a7ab46c16de12b",
      "candidate_info": {
        "commit_hash": "cc1a551cb007cc8ed8b1ea0605a7ab46c16de12b",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/cc1a551cb007cc8ed8b1ea0605a7ab46c16de12b",
        "files": [
          "bgpd/bgp_flowspec.c"
        ],
        "message": "bgpd: Limit flowspec to no attribute means a implicit withdrawal\n\nAll other parsing functions done from bgp_nlri_parse() assume\nno attributes == an implicit withdrawal.  Let's move\nbgp_nlri_parse_flowspec() into the same alignment.\n\nReported-by: Matteo Memelli <mmemelli@amazon.it>\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>\n(cherry picked from commit cfd04dcb3e689754a72507d086ba3b9709fc5ed8)",
        "before_after_code_files": [
          "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ],
          "candidate": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c": [
          "File: bgpd/bgp_flowspec.c -> bgpd/bgp_flowspec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:  afi = packet->afi;",
          "112:  safi = packet->safi;",
          "114:  if (packet->length >= FLOWSPEC_NLRI_SIZELIMIT_EXTENDED) {",
          "115:   flog_err(EC_BGP_FLOWSPEC_PACKET,",
          "116:     \"BGP flowspec nlri length maximum reached (%u)\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  if (!attr)",
          "119:   withdraw = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a12b878082f77b67ad5d9b4782846ac738575a2",
      "candidate_info": {
        "commit_hash": "0a12b878082f77b67ad5d9b4782846ac738575a2",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/0a12b878082f77b67ad5d9b4782846ac738575a2",
        "files": [
          "bgpd/bgp_flowspec.c"
        ],
        "message": "bgpd: Limit flowspec to no attribute means a implicit withdrawal\n\nAll other parsing functions done from bgp_nlri_parse() assume\nno attributes == an implicit withdrawal.  Let's move\nbgp_nlri_parse_flowspec() into the same alignment.\n\nReported-by: Matteo Memelli <mmemelli@amazon.it>\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>\n(cherry picked from commit cfd04dcb3e689754a72507d086ba3b9709fc5ed8)",
        "before_after_code_files": [
          "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ],
          "candidate": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c": [
          "File: bgpd/bgp_flowspec.c -> bgpd/bgp_flowspec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  afi = packet->afi;",
          "113:  safi = packet->safi;",
          "115:  if (packet->length >= FLOWSPEC_NLRI_SIZELIMIT_EXTENDED) {",
          "116:   flog_err(EC_BGP_FLOWSPEC_PACKET,",
          "117:     \"BGP flowspec nlri length maximum reached (%u)\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:  if (!attr)",
          "120:   withdraw = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78745b8700f25187995ef010ff7486eb4c53296d",
      "candidate_info": {
        "commit_hash": "78745b8700f25187995ef010ff7486eb4c53296d",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/78745b8700f25187995ef010ff7486eb4c53296d",
        "files": [
          "bgpd/bgp_packet.h"
        ],
        "message": "bgpd: Conform bgp_packet.h with coding standards\n\nFRR's standards state that function declarations should\nhave actual variable names for parameters passed in.\nLet's make this so for bgp_packet.h\n\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>",
        "before_after_code_files": [
          "bgpd/bgp_packet.h||bgpd/bgp_packet.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FRRouting/frr/pull/13222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bgpd/bgp_packet.h||bgpd/bgp_packet.h": [
          "File: bgpd/bgp_packet.h -> bgpd/bgp_packet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  } while (0)",
          "50: void bgp_notify_io_invalid(struct peer *peer, uint8_t code, uint8_t sub_code,",
          "51:       uint8_t *data, size_t datalen);",
          "52: extern void bgp_route_refresh_send(struct peer *peer, afi_t afi, safi_t safi,",
          "53:        uint8_t orf_type, uint8_t when_to_refresh,",
          "54:        int remove, uint8_t subtype);",
          "66: extern int bgp_packet_set_marker(struct stream *s, uint8_t type);",
          "67: extern void bgp_packet_set_size(struct stream *s);",
          "",
          "[Removed Lines]",
          "45: extern void bgp_keepalive_send(struct peer *);",
          "46: extern void bgp_open_send(struct peer *);",
          "47: extern void bgp_notify_send(struct peer *, uint8_t, uint8_t);",
          "48: extern void bgp_notify_send_with_data(struct peer *, uint8_t, uint8_t,",
          "49:           uint8_t *, size_t);",
          "55: extern void bgp_capability_send(struct peer *, afi_t, safi_t, int, int);",
          "57: extern int bgp_capability_receive(struct peer *, bgp_size_t);",
          "59: extern int bgp_nlri_parse(struct peer *, struct attr *, struct bgp_nlri *,",
          "60:      int mp_withdraw);",
          "62: extern void bgp_update_restarted_peers(struct peer *);",
          "63: extern void bgp_update_implicit_eors(struct peer *);",
          "64: extern void bgp_check_update_delay(struct bgp *);",
          "",
          "[Added Lines]",
          "45: extern void bgp_keepalive_send(struct peer *peer);",
          "46: extern void bgp_open_send(struct peer *peer);",
          "47: extern void bgp_notify_send(struct peer *peer, uint8_t code, uint8_t sub_code);",
          "48: extern void bgp_notify_send_with_data(struct peer *peer, uint8_t code,",
          "49:           uint8_t sub_code, uint8_t *data,",
          "50:           size_t datalen);",
          "56: extern void bgp_capability_send(struct peer *peer, afi_t afi, safi_t safi,",
          "57:     int capabilty_code, int action);",
          "59: extern int bgp_capability_receive(struct peer *peer, bgp_size_t length);",
          "61: extern int bgp_nlri_parse(struct peer *peer, struct attr *attr,",
          "62:      struct bgp_nlri *nlri, int mp_withdraw);",
          "64: extern void bgp_update_restarted_peers(struct peer *peer);",
          "65: extern void bgp_update_implicit_eors(struct peer *peer);",
          "66: extern void bgp_check_update_delay(struct bgp *peer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa056a2a6481aba66c727794d0ee988724be9316",
      "candidate_info": {
        "commit_hash": "aa056a2a6481aba66c727794d0ee988724be9316",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/aa056a2a6481aba66c727794d0ee988724be9316",
        "files": [
          "bgpd/bgp_evpn.c",
          "bgpd/bgp_evpn.h",
          "bgpd/bgp_flowspec.c",
          "bgpd/bgp_flowspec.h",
          "bgpd/bgp_packet.c",
          "bgpd/bgp_packet.h",
          "tests/bgpd/test_mp_attr.c"
        ],
        "message": "bgpd: Treat withdraw variable as a bool\n\nUsed as a bool, treated as a bool.  Make it a bool\n\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>",
        "before_after_code_files": [
          "bgpd/bgp_evpn.c||bgpd/bgp_evpn.c",
          "bgpd/bgp_evpn.h||bgpd/bgp_evpn.h",
          "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c",
          "bgpd/bgp_flowspec.h||bgpd/bgp_flowspec.h",
          "bgpd/bgp_packet.c||bgpd/bgp_packet.c",
          "bgpd/bgp_packet.h||bgpd/bgp_packet.h",
          "tests/bgpd/test_mp_attr.c||tests/bgpd/test_mp_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ],
          "candidate": [
            "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_evpn.c||bgpd/bgp_evpn.c": [
          "File: bgpd/bgp_evpn.c -> bgpd/bgp_evpn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5679: }",
          "5681: int bgp_nlri_parse_evpn(struct peer *peer, struct attr *attr,",
          "5683: {",
          "5684:  uint8_t *pnt;",
          "5685:  uint8_t *lim;",
          "",
          "[Removed Lines]",
          "5682:    struct bgp_nlri *packet, int withdraw)",
          "",
          "[Added Lines]",
          "5682:    struct bgp_nlri *packet, bool withdraw)",
          "",
          "---------------"
        ],
        "bgpd/bgp_evpn.h||bgpd/bgp_evpn.h": [
          "File: bgpd/bgp_evpn.h -> bgpd/bgp_evpn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:        struct attr *attr, bool addpath_capable,",
          "151:        uint32_t addpath_tx_id);",
          "152: extern int bgp_nlri_parse_evpn(struct peer *peer, struct attr *attr,",
          "154: extern int bgp_evpn_import_route(struct bgp *bgp, afi_t afi, safi_t safi,",
          "155:      const struct prefix *p,",
          "156:      struct bgp_path_info *ri);",
          "",
          "[Removed Lines]",
          "153:           struct bgp_nlri *packet, int withdraw);",
          "",
          "[Added Lines]",
          "153:           struct bgp_nlri *packet, bool withdraw);",
          "",
          "---------------"
        ],
        "bgpd/bgp_flowspec.c||bgpd/bgp_flowspec.c": [
          "File: bgpd/bgp_flowspec.c -> bgpd/bgp_flowspec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: }",
          "84: int bgp_nlri_parse_flowspec(struct peer *peer, struct attr *attr,",
          "86: {",
          "87:  uint8_t *pnt;",
          "88:  uint8_t *lim;",
          "",
          "[Removed Lines]",
          "85:        struct bgp_nlri *packet, int withdraw)",
          "",
          "[Added Lines]",
          "85:        struct bgp_nlri *packet, bool withdraw)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  if (!attr)",
          "108:  if (packet->length >= FLOWSPEC_NLRI_SIZELIMIT_EXTENDED) {",
          "109:   flog_err(EC_BGP_FLOWSPEC_PACKET,",
          "",
          "[Removed Lines]",
          "106:   withdraw = 1;",
          "",
          "[Added Lines]",
          "106:   withdraw = true;",
          "",
          "---------------"
        ],
        "bgpd/bgp_flowspec.h||bgpd/bgp_flowspec.h": [
          "File: bgpd/bgp_flowspec.h -> bgpd/bgp_flowspec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #define BGP_FLOWSPEC_NLRI_STRING_MAX 512",
          "17: extern int bgp_nlri_parse_flowspec(struct peer *peer, struct attr *attr,",
          "20: extern void bgp_flowspec_vty_init(void);",
          "",
          "[Removed Lines]",
          "18:        struct bgp_nlri *packet, int withdraw);",
          "",
          "[Added Lines]",
          "18:        struct bgp_nlri *packet, bool withdraw);",
          "",
          "---------------"
        ],
        "bgpd/bgp_packet.c||bgpd/bgp_packet.c": [
          "File: bgpd/bgp_packet.c -> bgpd/bgp_packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333: int bgp_nlri_parse(struct peer *peer, struct attr *attr,",
          "335: {",
          "336:  switch (packet->safi) {",
          "337:  case SAFI_UNICAST:",
          "",
          "[Removed Lines]",
          "334:      struct bgp_nlri *packet, int mp_withdraw)",
          "",
          "[Added Lines]",
          "334:      struct bgp_nlri *packet, bool mp_withdraw)",
          "",
          "---------------"
        ],
        "bgpd/bgp_packet.h||bgpd/bgp_packet.h": [
          "File: bgpd/bgp_packet.h -> bgpd/bgp_packet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: extern int bgp_capability_receive(struct peer *peer, bgp_size_t length);",
          "61: extern int bgp_nlri_parse(struct peer *peer, struct attr *attr,",
          "64: extern void bgp_update_restarted_peers(struct peer *peer);",
          "65: extern void bgp_update_implicit_eors(struct peer *peer);",
          "",
          "[Removed Lines]",
          "62:      struct bgp_nlri *nlri, int mp_withdraw);",
          "",
          "[Added Lines]",
          "62:      struct bgp_nlri *nlri, bool mp_withdraw);",
          "",
          "---------------"
        ],
        "tests/bgpd/test_mp_attr.c||tests/bgpd/test_mp_attr.c": [
          "File: tests/bgpd/test_mp_attr.c -> tests/bgpd/test_mp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:  if (!parse_ret) {",
          "1044:   if (type == BGP_ATTR_MP_REACH_NLRI)",
          "1046:   else if (type == BGP_ATTR_MP_UNREACH_NLRI)",
          "1048:  }",
          "1049:  handle_result(peer, t, parse_ret, nlri_ret);",
          "1050: }",
          "",
          "[Removed Lines]",
          "1045:    nlri_ret = bgp_nlri_parse(peer, &attr, &nlri, 0);",
          "1047:    nlri_ret = bgp_nlri_parse(peer, &attr, &nlri, 1);",
          "",
          "[Added Lines]",
          "1045:    nlri_ret = bgp_nlri_parse(peer, &attr, &nlri, false);",
          "1047:    nlri_ret = bgp_nlri_parse(peer, &attr, &nlri, true);",
          "",
          "---------------"
        ]
      }
    }
  ]
}