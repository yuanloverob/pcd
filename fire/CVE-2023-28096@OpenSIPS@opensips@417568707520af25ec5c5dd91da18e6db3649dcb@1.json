{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f14bae9c5d822db4091236860163fcef0c0a779",
      "candidate_info": {
        "commit_hash": "6f14bae9c5d822db4091236860163fcef0c0a779",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6f14bae9c5d822db4091236860163fcef0c0a779",
        "files": [
          "pvar.c",
          "usr_avp.c",
          "usr_avp.h"
        ],
        "message": "Allow writing to AVPs with negative index\n\nThis includes both SET and DELETE operations, for example:\n    $(avp(foo)[-1]) = NULL;\n    $(avp(foo)[-1]) = \"42\";\n\n(cherry picked from commit df362fb231fc42735f6aedcbdb8f036a72a98f2e)",
        "before_after_code_files": [
          "pvar.c||pvar.c",
          "usr_avp.c||usr_avp.c",
          "usr_avp.h||usr_avp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pvar.c||pvar.c": [
          "File: pvar.c -> pvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2858:    destroy_avps(name_type, avp_name, 1);",
          "2859:   else",
          "2860:   {",
          "2866:    destroy_index_avp(name_type, avp_name, idx);",
          "2867:   }",
          "2868:   return 0;",
          "",
          "[Removed Lines]",
          "2861:    if(idx < 0)",
          "2862:    {",
          "2863:     LM_ERR(\"Index with negative value\\n\");",
          "2864:     return -1;",
          "2865:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr_avp.c||usr_avp.c": [
          "File: usr_avp.c -> usr_avp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  struct usr_avp* avp_new, *avp_del;",
          "203:  if(index < 0) {",
          "206:  }",
          "208:  avp_del = search_index_avp(flags, name, 0, index);",
          "",
          "[Removed Lines]",
          "204:   LM_ERR(\"Index with negative value\\n\");",
          "205:   return -1;",
          "",
          "[Added Lines]",
          "205:   int pidx = count_avps(flags, name) + index;",
          "206:   if (pidx < 0) {",
          "207:    LM_DBG(\"AVP with the specified index (%d) not found\\n\", index);",
          "208:    return -1;",
          "209:   }",
          "211:   index = pidx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415: {",
          "416:  struct usr_avp *avp = NULL;",
          "418:  avp = search_index_avp(flags, name, 0, index);",
          "419:  if(avp== NULL) {",
          "420:   LM_DBG(\"AVP with the specified index not found\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:  if(index < 0) {",
          "426:   int pidx = count_avps(flags, name) + index;",
          "427:   if (pidx < 0) {",
          "428:    LM_DBG(\"AVP with the specified index (%d) not found\\n\", index);",
          "429:    return;",
          "430:   }",
          "432:   index = pidx;",
          "433:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:  destroy_avp( avp );",
          "425: }",
          "427: void destroy_avp_list_bulk( struct usr_avp **list )",
          "428: {",
          "429:  struct usr_avp *avp, *foo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: int count_avps(unsigned short flags, int name)",
          "445: {",
          "446:  struct usr_avp *avp = NULL;",
          "447:  int n = 0;",
          "449:  while ((avp=search_first_avp(flags, name, 0, avp)))",
          "450:   n++;",
          "452:  return n;",
          "453: }",
          "",
          "---------------"
        ],
        "usr_avp.h||usr_avp.h": [
          "File: usr_avp.h -> usr_avp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: void reset_avps( );",
          "102: void destroy_avp( struct usr_avp *avp);",
          "103: void destroy_index_avp( unsigned short flags, int name, int index);",
          "104: int  destroy_avps( unsigned short flags, int name, int all);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: int  count_avps(unsigned short flags, int name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
      "candidate_info": {
        "commit_hash": "c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c74c2ef1fe328bddbec50f8968443f74fc8c8a6c",
        "files": [
          "modules/tm/t_cancel.c",
          "modules/tm/t_reply.c"
        ],
        "message": "tm: use INVITE's AVPs when sending locally generated msgs\n\nThis allows the TLS_MGM module to pick up the right tls_domain that\nshould be used for sending the ACK/CANCEL message\n\n(cherry picked from commit 84c1614ecea5025230b46950408c8343c693ec8b)",
        "before_after_code_files": [
          "modules/tm/t_cancel.c||modules/tm/t_cancel.c",
          "modules/tm/t_reply.c||modules/tm/t_reply.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/tm/t_cancel.c||modules/tm/t_cancel.c": [
          "File: modules/tm/t_cancel.c -> modules/tm/t_cancel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  char *cancel;",
          "89:  unsigned int len;",
          "90:  struct retr_buf *crb, *irb;",
          "92:  crb=&t->uac[branch].local_cancel;",
          "93:  irb=&t->uac[branch].request;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  struct usr_avp **backup_list;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  LM_DBG(\"sending cancel...\\n\");",
          "124:  if (t->uac[branch].br_flags & tcp_no_new_conn_bflag)",
          "125:   tcp_no_new_conn = 1;",
          "126:  if (SEND_BUFFER( crb )==0) {",
          "127:   if ( has_tran_tmcbs( t, TMCB_MSG_SENT_OUT) ) {",
          "128:    set_extra_tmcb_params( &crb->buffer, &crb->dst);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  backup_list = set_avp_list( &t->user_avps );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     t, t->uas.request, 0, 0);",
          "131:   }",
          "132:  }",
          "133:  tcp_no_new_conn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:  set_avp_list(backup_list);",
          "",
          "---------------"
        ],
        "modules/tm/t_reply.c||modules/tm/t_reply.c": [
          "File: modules/tm/t_reply.c -> modules/tm/t_reply.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:  str method = str_init(ACK);",
          "291:  str to;",
          "292:  str ack_buf;",
          "294:  if(parse_headers(rpl,is_local(trans)?HDR_EOH_F:(HDR_TO_F|HDR_FROM_F),0)==-1",
          "295:  || !rpl->to || !rpl->from ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:  struct usr_avp **backup_list;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:  if (trans->uac[branch].br_flags & tcp_no_new_conn_bflag)",
          "311:   tcp_no_new_conn = 1;",
          "313:  if(SEND_PR_BUFFER(&trans->uac[branch].request, ack_buf.s, ack_buf.len)==0){",
          "315:   if ( has_tran_tmcbs( trans, TMCB_MSG_SENT_OUT) ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  backup_list = set_avp_list( &trans->user_avps );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     trans, trans->uas.request, 0, 0);",
          "319:   }",
          "320:  }",
          "322:  tcp_no_new_conn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:  set_avp_list(backup_list);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d60e7422aff69ca083fac3f907d7183c2e7f58e",
      "candidate_info": {
        "commit_hash": "1d60e7422aff69ca083fac3f907d7183c2e7f58e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/1d60e7422aff69ca083fac3f907d7183c2e7f58e",
        "files": [
          "modules/sipmsgops/codecs.c"
        ],
        "message": "[sipmsgops] fix codec_delete_XX() parsing\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-3ghx-j39m-cw4f\n(cherry picked from commit dd051f8ed5ae3347fb1d556ced3c97822c9d8450)",
        "before_after_code_files": [
          "modules/sipmsgops/codecs.c||modules/sipmsgops/codecs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/sipmsgops/codecs.c||modules/sipmsgops/codecs.c": [
          "File: modules/sipmsgops/codecs.c -> modules/sipmsgops/codecs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:      if (cur == lmp->u.value + lmp->len) {",
          "561:       tmp = found.s;",
          "563:        found.s--;",
          "564:        found.len++;",
          "565:       }",
          "",
          "[Removed Lines]",
          "562:       while (*(--tmp) == ' ') {",
          "",
          "[Added Lines]",
          "562:       while (tmp>lmp->u.value && *(--tmp) == ' ') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ecac89e5418b9a192519d1ed3cde000695079d1",
      "candidate_info": {
        "commit_hash": "6ecac89e5418b9a192519d1ed3cde000695079d1",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6ecac89e5418b9a192519d1ed3cde000695079d1",
        "files": [
          "modules/cachedb_redis/cachedb_redis.c",
          "modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_dbase.h",
          "modules/cachedb_redis/doc/cachedb_redis_admin.xml"
        ],
        "message": "cachedb_redis: Allow quoting strings in raw queries\n\nIn case the Redis raw query string arguments include whitespace (' ',\n\\t, \\r, \\n), script developers can now enclose them in single (') or\ndouble quotes (\"), and OpenSIPS will pass the correct string to Redis.\n\nFor example:\n    cache_raw_query(\"redis\", \"SET foo \\\"bar baz\\\"\", \"$avp(result)\");\n        or:\n    cache_raw_query(\"redis\", \"SET foo 'bar baz'\", \"$avp(result)\");\n\n... are now possible and equivalent.  Both of these will set the\n\"bar baz\" value, without the quotes.\n\nNEW module parameter in order to maintain backwards-compatibility with\nprevious code (default: 0):\n\n    modparam(\"cachedb_redis\", \"enable_query_arg_quoting\", 1)\n\nFixes #2036",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis.c||modules/cachedb_redis/cachedb_redis.c",
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_dbase.h||modules/cachedb_redis/cachedb_redis_dbase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis.c||modules/cachedb_redis/cachedb_redis.c": [
          "File: modules/cachedb_redis/cachedb_redis.c -> modules/cachedb_redis/cachedb_redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  { \"shutdown_on_error\",           INT_PARAM,                &shutdown_on_error     },",
          "59:  { \"cachedb_url\",                 STR_PARAM|USE_FUNC_PARAM, (void *)&set_connection},",
          "60:  { \"use_tls\",                     INT_PARAM,                &use_tls},",
          "61:  {0,0,0}",
          "62: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  { \"enable_raw_query_quoting\",    INT_PARAM,                &enable_raw_query_quoting},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   return -1;",
          "163:  }",
          "165:  return 0;",
          "166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:  redis_raw_query_send = enable_raw_query_quoting ?",
          "167:    redis_raw_query_send_new : redis_raw_query_send_old;",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: int redis_connnection_tout = CACHEDB_REDIS_DEFAULT_TIMEOUT;",
          "41: int shutdown_on_error = 0;",
          "42: int use_tls = 0;",
          "44: struct tls_mgm_binds tls_api;",
          "46: redisContext *redis_get_ctx(char *ip, int port)",
          "47: {",
          "48:  struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: int enable_raw_query_quoting;",
          "51: int (*redis_raw_query_send)(cachedb_con *connection, redisReply **reply,",
          "52:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "716:  return -1;",
          "717: }",
          "747: #define MAP_SET_MAX_FIELDS 128",
          "749:   cdb_raw_entry ***_, int __, int *___, str *attr)",
          "750: {",
          "751:  int i, argc = 0;",
          "",
          "[Removed Lines]",
          "721: int redis_raw_query_extract_key(str *attr,str *query_key)",
          "722: {",
          "723:  int len;",
          "724:  char *p,*q,*r;",
          "726:  if (!attr || attr->s == NULL || query_key == NULL)",
          "727:   return -1;",
          "729:  trim_len(len,p,*attr);",
          "730:  q = memchr(p,' ',len);",
          "731:  if (q == NULL) {",
          "732:   LM_ERR(\"Malformed Redis RAW query \\n\");",
          "733:   return -1;",
          "734:  }",
          "736:  query_key->s = q+1;",
          "737:  r = memchr(query_key->s,' ',len - (query_key->s - p));",
          "738:  if (r == NULL) {",
          "739:   query_key->len = (p+len) - query_key->s;",
          "740:  } else {",
          "741:   query_key->len = r-query_key->s;",
          "742:  }",
          "744:  return 0;",
          "745: }",
          "748: static int redis_raw_query_send(cachedb_con *connection, redisReply **reply,",
          "",
          "[Added Lines]",
          "728: int redis_raw_query_send_old(cachedb_con *connection, redisReply **reply,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:   return -1;",
          "795:  }",
          "799:  key.s = (char *)argv[1];",
          "800:  key.len = argvlen[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:  key.s = (char *)argv[1];",
          "780:  key.len = argvlen[1];",
          "782: #ifdef EXTRA_DEBUG",
          "783:  LM_DBG(\"raw query key: %.*s\\n\", key.len, key.s);",
          "784:  for (i = 0; i < argc; i++)",
          "785:   LM_DBG(\"raw query arg %d: '%.*s' (%d)\\n\", i, (int)argvlen[i], argv[i],",
          "786:          (int)argvlen[i]);",
          "787: #endif",
          "789:  node = get_redis_connection(con, &key);",
          "790:  if (node == NULL) {",
          "791:   LM_ERR(\"Bad cluster configuration\\n\");",
          "792:   return -10;",
          "793:  }",
          "795:  if (node->context == NULL) {",
          "796:   if (redis_reconnect_node(con,node) < 0) {",
          "797:    return -1;",
          "798:   }",
          "799:  }",
          "801:  for (i = QUERY_ATTEMPTS; i; i--) {",
          "803:   if (*reply == NULL || (*reply)->type == REDIS_REPLY_ERROR) {",
          "804:    LM_INFO(\"Redis query failed: %.*s\\n\",",
          "806:    if (*reply)",
          "807:     freeReplyObject(*reply);",
          "808:    if (node->context->err == REDIS_OK || redis_reconnect_node(con,node) < 0) {",
          "809:     i = 0; break;",
          "810:    }",
          "811:   } else break;",
          "812:  }",
          "814:  if (i==0) {",
          "815:   LM_ERR(\"giving up on query\\n\");",
          "816:   return -1;",
          "817:  }",
          "819:  if (i != QUERY_ATTEMPTS)",
          "820:   LM_INFO(\"successfully ran query after %d failed attempt(s)\\n\",",
          "821:           QUERY_ATTEMPTS - i);",
          "823:  return 0;",
          "824: }",
          "826: int redis_raw_query_send_new(cachedb_con *connection, redisReply **reply,",
          "827:   cdb_raw_entry ***_, int __, int *___, str *attr)",
          "828: {",
          "829:  int i, argc = 0, squoted = 0, dquoted = 0;",
          "830:  const char *argv[MAP_SET_MAX_FIELDS];",
          "831:  size_t argvlen[MAP_SET_MAX_FIELDS];",
          "832:  redis_con *con;",
          "833:  cluster_node *node;",
          "834:  str key, st;",
          "835:  char *p, *lim, *arg = NULL;",
          "837:  con = (redis_con *)connection->data;",
          "839:  if (!(con->flags & REDIS_INIT_NODES) && redis_connect(con) < 0) {",
          "840:   LM_ERR(\"failed to connect to DB\\n\");",
          "841:   return -9;",
          "842:  }",
          "844:  st = *attr;",
          "845:  trim(&st);",
          "850:  for (p = st.s, lim = p + st.len; p < lim; p++) {",
          "851:   if ((dquoted && *p != '\"') || (squoted && *p != '\\''))",
          "852:    continue;",
          "854:   if (argc == MAP_SET_MAX_FIELDS) {",
          "855:    LM_ERR(\"max raw query args exceeded (%d)\\n\", MAP_SET_MAX_FIELDS);",
          "856:    goto bad_query;",
          "857:   }",
          "859:   if (dquoted || squoted) {",
          "860:    if (p+1 < lim && !is_ws(*(p+1)))",
          "861:     goto bad_query;",
          "863:    argv[argc]++;",
          "864:    argvlen[argc] = p - argv[argc];",
          "865:    argc++;",
          "866:    dquoted = squoted = 0;",
          "867:   } else if (*p == '\"') {",
          "868:    dquoted = 1;",
          "869:    argv[argc] = p;",
          "870:   } else if (*p == '\\'') {",
          "871:    squoted = 1;",
          "872:    argv[argc] = p;",
          "873:   } else if (is_ws(*p)) {",
          "874:    if (!arg)",
          "875:     continue;",
          "877:    argv[argc] = arg;",
          "878:    argvlen[argc++] = p - arg;",
          "879:    arg = NULL;",
          "880:   } else if (!arg) {",
          "881:    arg = p;",
          "882:   }",
          "883:  }",
          "885:  if (squoted || dquoted) {",
          "886:   LM_ERR(\"unterminated quoted query argument\\n\");",
          "887:   goto bad_query;",
          "888:  }",
          "890:  if (arg) {",
          "891:   argv[argc] = arg;",
          "892:   argvlen[argc++] = st.s + st.len - arg;",
          "893:  }",
          "895:  if (argc < 2)",
          "896:   goto bad_query;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:           QUERY_ATTEMPTS - i);",
          "843:  return 0;",
          "844: }",
          "846: int redis_raw_query(cachedb_con *connection,str *attr,cdb_raw_entry ***rpl,int expected_kv_no,int *reply_no)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946: bad_query:",
          "947:  LM_ERR(\"malformed Redis RAW query: '%.*s' (%d)\\n\",",
          "948:         attr->len, attr->s, attr->len);",
          "949:  return -1;",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_dbase.h||modules/cachedb_redis/cachedb_redis_dbase.h": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.h -> modules/cachedb_redis/cachedb_redis_dbase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: extern int redis_connnection_tout;",
          "56: extern int shutdown_on_error;",
          "57: extern int use_tls;",
          "59: extern struct tls_mgm_binds tls_api;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: extern int enable_raw_query_quoting;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: int redis_get_counter(cachedb_con *connection,str *attr,int *val);",
          "85: int redis_raw_query(cachedb_con *connection,str *attr,cdb_raw_entry ***reply,int expected_kv_no,int *reply_no);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: extern int redis_raw_query_send_old(cachedb_con *connection, redisReply **reply,",
          "89:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "90: extern int redis_raw_query_send_new(cachedb_con *connection, redisReply **reply,",
          "91:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "92: extern int (*redis_raw_query_send)(cachedb_con *connection, redisReply **reply,",
          "93:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c22da3e06611cc7a7aec8019d8469c28abe53507",
      "candidate_info": {
        "commit_hash": "c22da3e06611cc7a7aec8019d8469c28abe53507",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c22da3e06611cc7a7aec8019d8469c28abe53507",
        "files": [
          "modules/rtpengine/rtpengine.c"
        ],
        "message": "[rtpengine] avoid returning 0 as it breaks the script execution\n\nFixes #2796\n\n(cherry picked from commit 1763c7a5c894c9adecd19023cd1470a408f626fb)",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3523:  if (bencode_dictionary_get_strcmp(ret, \"result\", \"ok\")) {",
          "3524:   LM_ERR(\"proxy didn't return \\\"ok\\\" result\\n\");",
          "3525:  } else",
          "3528:  bencode_buffer_free(&bencbuf);",
          "3529:  return rcode;",
          "",
          "[Removed Lines]",
          "3526:   rcode = 0;",
          "",
          "[Added Lines]",
          "3526:   rcode = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}